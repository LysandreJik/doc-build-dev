import{S as KUt,i as ZUt,s as eJt,e as a,k as l,w as F,t as o,M as oJt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as rJt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Xnt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function tJt($){let g,v,p,m,_,c,h,wo,$i,If,lt,ki,Si,uL,Nf,Oe,Qe,Ri,Bn,bL,In,Nn,vL,Pi,qn,FL,Bi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),$i=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),ki=a("code"),Si=o('"new-model"'),uL=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ri=a("code"),Bn=o("NewModel"),bL=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),vL=o(`, make sure its
`),Pi=a("code"),qn=o("config_class"),FL=o(` attribute is set to the same class you use when registering the model (here
`),Bi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var eR=s(p);m=r(eR,"NewModelConfig"),eR.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Ii=s(c);h=r(Ii,"PretrainedConfig"),Ii.forEach(t),wo=r(Ae,`, make sure its
`),$i=n(Ae,"CODE",{});var oR=s($i);If=r(oR,"model_type"),oR.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),ki=n(Ae,"CODE",{});var rR=s(ki);Si=r(rR,'"new-model"'),rR.forEach(t),uL=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Ri=n(Ao,"CODE",{});var Ra=s(Ri);Bn=r(Ra,"NewModel"),Ra.forEach(t),bL=r(Ao," is a subclass of "),In=n(Ao,"A",{href:!0});var tR=s(In);Nn=r(tR,"PreTrainedModel"),tR.forEach(t),vL=r(Ao,`, make sure its
`),Pi=n(Ao,"CODE",{});var jf=s(Pi);qn=r(jf,"config_class"),jf.forEach(t),FL=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Bi=n(Ao,"CODE",{});var aR=s(Bi);qf=r(aR,"NewModelConfig"),aR.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(In,"href","/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,wo),e(g,$i),e($i,If),e(g,lt),e(g,ki),e(ki,Si),e(g,uL),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Ri),e(Ri,Bn),e(Oe,bL),e(Oe,In),e(In,Nn),e(Oe,vL),e(Oe,Pi),e(Pi,qn),e(Oe,FL),e(Oe,Bi),e(Bi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function aJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sJt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function lJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iJt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function dJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Jt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZJt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Yt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Yt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZYt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oKt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:q,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rKt($){let g,v,p,m,_,c,h,wo,$i,If,lt,ki,Si,uL,Nf,Oe,Qe,Ri,Bn,bL,In,Nn,vL,Pi,qn,FL,Bi,qf,Sa,He,Ae,eR,Ii,oR,rR,Ao,Ra,tR,jf,aR,CUe,dze,Ni,Df,lne,TL,wUe,ine,AUe,cze,jn,LUe,dne,yUe,xUe,cne,$Ue,kUe,fze,ML,mze,nR,SUe,gze,Gf,hze,qi,Of,fne,EL,RUe,mne,PUe,pze,Lo,CL,BUe,wL,IUe,sR,NUe,qUe,jUe,AL,DUe,gne,GUe,OUe,VUe,yr,LL,XUe,hne,zUe,WUe,ji,QUe,pne,HUe,UUe,_ne,JUe,YUe,KUe,A,Vf,une,ZUe,eJe,lR,oJe,rJe,tJe,Xf,bne,aJe,nJe,iR,sJe,lJe,iJe,zf,vne,dJe,cJe,dR,fJe,mJe,gJe,Wf,Fne,hJe,pJe,cR,_Je,uJe,bJe,Qf,Tne,vJe,FJe,fR,TJe,MJe,EJe,Hf,Mne,CJe,wJe,mR,AJe,LJe,yJe,Uf,Ene,xJe,$Je,gR,kJe,SJe,RJe,Jf,Cne,PJe,BJe,hR,IJe,NJe,qJe,Yf,wne,jJe,DJe,pR,GJe,OJe,VJe,Kf,Ane,XJe,zJe,_R,WJe,QJe,HJe,Zf,Lne,UJe,JJe,uR,YJe,KJe,ZJe,em,yne,eYe,oYe,bR,rYe,tYe,aYe,om,xne,nYe,sYe,vR,lYe,iYe,dYe,rm,$ne,cYe,fYe,FR,mYe,gYe,hYe,tm,kne,pYe,_Ye,TR,uYe,bYe,vYe,am,Sne,FYe,TYe,MR,MYe,EYe,CYe,nm,Rne,wYe,AYe,ER,LYe,yYe,xYe,sm,Pne,$Ye,kYe,CR,SYe,RYe,PYe,lm,Bne,BYe,IYe,wR,NYe,qYe,jYe,im,Ine,DYe,GYe,AR,OYe,VYe,XYe,dm,Nne,zYe,WYe,LR,QYe,HYe,UYe,cm,qne,JYe,YYe,yR,KYe,ZYe,eKe,fm,jne,oKe,rKe,xR,tKe,aKe,nKe,mm,Dne,sKe,lKe,$R,iKe,dKe,cKe,gm,Gne,fKe,mKe,kR,gKe,hKe,pKe,hm,One,_Ke,uKe,SR,bKe,vKe,FKe,pm,Vne,TKe,MKe,RR,EKe,CKe,wKe,_m,Xne,AKe,LKe,PR,yKe,xKe,$Ke,um,zne,kKe,SKe,BR,RKe,PKe,BKe,bm,Wne,IKe,NKe,IR,qKe,jKe,DKe,vm,Qne,GKe,OKe,NR,VKe,XKe,zKe,Fm,Hne,WKe,QKe,qR,HKe,UKe,JKe,Tm,Une,YKe,KKe,jR,ZKe,eZe,oZe,Mm,Jne,rZe,tZe,DR,aZe,nZe,sZe,Em,Yne,lZe,iZe,GR,dZe,cZe,fZe,Cm,Kne,mZe,gZe,OR,hZe,pZe,_Ze,wm,Zne,uZe,bZe,VR,vZe,FZe,TZe,Am,ese,MZe,EZe,XR,CZe,wZe,AZe,Lm,ose,LZe,yZe,zR,xZe,$Ze,kZe,ym,rse,SZe,RZe,WR,PZe,BZe,IZe,xm,tse,NZe,qZe,QR,jZe,DZe,GZe,$m,ase,OZe,VZe,HR,XZe,zZe,WZe,km,nse,QZe,HZe,UR,UZe,JZe,YZe,Sm,sse,KZe,ZZe,JR,eeo,oeo,reo,Rm,lse,teo,aeo,YR,neo,seo,leo,Pm,ise,ieo,deo,KR,ceo,feo,meo,Bm,dse,geo,heo,ZR,peo,_eo,ueo,Im,cse,beo,veo,eP,Feo,Teo,Meo,Nm,fse,Eeo,Ceo,oP,weo,Aeo,Leo,qm,mse,yeo,xeo,rP,$eo,keo,Seo,jm,gse,Reo,Peo,tP,Beo,Ieo,Neo,Dm,hse,qeo,jeo,aP,Deo,Geo,Oeo,Gm,pse,Veo,Xeo,nP,zeo,Weo,Qeo,Om,_se,Heo,Ueo,sP,Jeo,Yeo,Keo,Vm,use,Zeo,eoo,lP,ooo,roo,too,Xm,bse,aoo,noo,iP,soo,loo,ioo,zm,vse,doo,coo,dP,foo,moo,goo,Wm,Fse,hoo,poo,cP,_oo,uoo,boo,Qm,Tse,voo,Foo,fP,Too,Moo,Eoo,Hm,Mse,Coo,woo,mP,Aoo,Loo,yoo,Um,Ese,xoo,$oo,gP,koo,Soo,Roo,Jm,Cse,Poo,Boo,hP,Ioo,Noo,qoo,Ym,wse,joo,Doo,pP,Goo,Ooo,Voo,Km,Ase,Xoo,zoo,_P,Woo,Qoo,Hoo,Zm,Lse,Uoo,Joo,uP,Yoo,Koo,Zoo,eg,yse,ero,oro,bP,rro,tro,aro,og,xse,nro,sro,vP,lro,iro,dro,rg,$se,cro,fro,FP,mro,gro,hro,tg,kse,pro,_ro,TP,uro,bro,vro,ag,Sse,Fro,Tro,MP,Mro,Ero,Cro,ng,Rse,wro,Aro,EP,Lro,yro,xro,sg,Pse,$ro,kro,CP,Sro,Rro,Pro,lg,Bse,Bro,Iro,wP,Nro,qro,jro,ig,Ise,Dro,Gro,AP,Oro,Vro,Xro,dg,Nse,zro,Wro,LP,Qro,Hro,Uro,cg,qse,Jro,Yro,yP,Kro,Zro,eto,fg,jse,oto,rto,xP,tto,ato,nto,mg,Dse,sto,lto,$P,ito,dto,cto,gg,Gse,fto,mto,kP,gto,hto,pto,hg,Ose,_to,uto,SP,bto,vto,Fto,pg,Vse,Tto,Mto,RP,Eto,Cto,wto,_g,Xse,Ato,Lto,PP,yto,xto,$to,ug,zse,kto,Sto,BP,Rto,Pto,Bto,bg,Wse,Ito,Nto,IP,qto,jto,Dto,vg,Qse,Gto,Oto,NP,Vto,Xto,zto,Fg,Hse,Wto,Qto,qP,Hto,Uto,Jto,Tg,Use,Yto,Kto,jP,Zto,eao,oao,Mg,Jse,rao,tao,DP,aao,nao,sao,Eg,Yse,lao,iao,GP,dao,cao,fao,Cg,Kse,mao,gao,OP,hao,pao,_ao,wg,Zse,uao,bao,VP,vao,Fao,Tao,Ag,ele,Mao,Eao,XP,Cao,wao,Aao,Lg,ole,Lao,yao,zP,xao,$ao,kao,yg,rle,Sao,Rao,WP,Pao,Bao,Iao,xg,tle,Nao,qao,QP,jao,Dao,Gao,$g,ale,Oao,Vao,HP,Xao,zao,Wao,kg,nle,Qao,Hao,UP,Uao,Jao,Yao,Sg,sle,Kao,Zao,JP,eno,ono,rno,Rg,lle,tno,ano,YP,nno,sno,lno,Pg,ile,ino,dno,KP,cno,fno,mno,Bg,dle,gno,hno,ZP,pno,_no,uno,Ig,cle,bno,vno,eB,Fno,Tno,Mno,Ng,fle,Eno,Cno,oB,wno,Ano,Lno,qg,mle,yno,xno,rB,$no,kno,Sno,jg,gle,Rno,Pno,tB,Bno,Ino,Nno,Dg,hle,qno,jno,aB,Dno,Gno,Ono,Gg,ple,Vno,Xno,nB,zno,Wno,Qno,Og,_le,Hno,Uno,sB,Jno,Yno,Kno,Vg,ule,Zno,eso,lB,oso,rso,tso,Xg,ble,aso,nso,iB,sso,lso,iso,zg,vle,dso,cso,dB,fso,mso,gso,Wg,Fle,hso,pso,cB,_so,uso,bso,Qg,Tle,vso,Fso,fB,Tso,Mso,Eso,Hg,Mle,Cso,wso,mB,Aso,Lso,yso,Ug,Ele,xso,$so,gB,kso,Sso,Rso,Jg,Cle,Pso,Bso,hB,Iso,Nso,qso,Yg,wle,jso,Dso,pB,Gso,Oso,Vso,Kg,Ale,Xso,zso,_B,Wso,Qso,Hso,Zg,Lle,Uso,Jso,uB,Yso,Kso,Zso,eh,yle,elo,olo,bB,rlo,tlo,alo,oh,nlo,rh,yL,slo,xle,llo,_ze,Di,th,$le,xL,ilo,kle,dlo,uze,yo,$L,clo,kL,flo,vB,mlo,glo,hlo,SL,plo,Sle,_lo,ulo,blo,xr,RL,vlo,Rle,Flo,Tlo,Pa,Mlo,Ple,Elo,Clo,Ble,wlo,Alo,Ile,Llo,ylo,xlo,k,Dn,Nle,$lo,klo,FB,Slo,Rlo,TB,Plo,Blo,Ilo,Gn,qle,Nlo,qlo,MB,jlo,Dlo,EB,Glo,Olo,Vlo,On,jle,Xlo,zlo,CB,Wlo,Qlo,wB,Hlo,Ulo,Jlo,ah,Dle,Ylo,Klo,AB,Zlo,eio,oio,Vn,Gle,rio,tio,LB,aio,nio,yB,sio,lio,iio,nh,Ole,dio,cio,xB,fio,mio,gio,sh,Vle,hio,pio,$B,_io,uio,bio,lh,Xle,vio,Fio,kB,Tio,Mio,Eio,Xn,zle,Cio,wio,SB,Aio,Lio,RB,yio,xio,$io,zn,Wle,kio,Sio,PB,Rio,Pio,BB,Bio,Iio,Nio,Wn,Qle,qio,jio,IB,Dio,Gio,NB,Oio,Vio,Xio,ih,Hle,zio,Wio,qB,Qio,Hio,Uio,dh,Ule,Jio,Yio,jB,Kio,Zio,edo,ch,Jle,odo,rdo,DB,tdo,ado,ndo,Qn,Yle,sdo,ldo,GB,ido,ddo,OB,cdo,fdo,mdo,fh,Kle,gdo,hdo,VB,pdo,_do,udo,Hn,Zle,bdo,vdo,XB,Fdo,Tdo,zB,Mdo,Edo,Cdo,Un,eie,wdo,Ado,WB,Ldo,ydo,QB,xdo,$do,kdo,Jn,oie,Sdo,Rdo,HB,Pdo,Bdo,UB,Ido,Ndo,qdo,Yn,rie,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,mh,tie,Wdo,Qdo,KB,Hdo,Udo,Jdo,Kn,aie,Ydo,Kdo,ZB,Zdo,eco,eI,oco,rco,tco,Zn,nie,aco,nco,oI,sco,lco,rI,ico,dco,cco,es,sie,fco,mco,tI,gco,hco,aI,pco,_co,uco,os,lie,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,rs,iie,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,ts,die,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,gh,cie,jco,Dco,fI,Gco,Oco,Vco,as,fie,Xco,zco,mI,Wco,Qco,gI,Hco,Uco,Jco,hh,mie,Yco,Kco,hI,Zco,efo,ofo,ns,gie,rfo,tfo,pI,afo,nfo,_I,sfo,lfo,ifo,ss,hie,dfo,cfo,uI,ffo,mfo,bI,gfo,hfo,pfo,ls,pie,_fo,ufo,vI,bfo,vfo,FI,Ffo,Tfo,Mfo,ph,_ie,Efo,Cfo,TI,wfo,Afo,Lfo,is,uie,yfo,xfo,MI,$fo,kfo,EI,Sfo,Rfo,Pfo,ds,bie,Bfo,Ifo,CI,Nfo,qfo,wI,jfo,Dfo,Gfo,cs,vie,Ofo,Vfo,AI,Xfo,zfo,LI,Wfo,Qfo,Hfo,_h,Fie,Ufo,Jfo,yI,Yfo,Kfo,Zfo,fs,Tie,emo,omo,xI,rmo,tmo,$I,amo,nmo,smo,ms,Mie,lmo,imo,kI,dmo,cmo,SI,fmo,mmo,gmo,gs,Eie,hmo,pmo,RI,_mo,umo,PI,bmo,vmo,Fmo,hs,Cie,Tmo,Mmo,BI,Emo,Cmo,II,wmo,Amo,Lmo,ps,wie,ymo,xmo,NI,$mo,kmo,qI,Smo,Rmo,Pmo,_s,Aie,Bmo,Imo,jI,Nmo,qmo,DI,jmo,Dmo,Gmo,us,Lie,Omo,Vmo,GI,Xmo,zmo,OI,Wmo,Qmo,Hmo,bs,yie,Umo,Jmo,VI,Ymo,Kmo,XI,Zmo,ego,ogo,uh,xie,rgo,tgo,zI,ago,ngo,sgo,vs,$ie,lgo,igo,WI,dgo,cgo,QI,fgo,mgo,ggo,bh,kie,hgo,pgo,HI,_go,ugo,bgo,vh,Sie,vgo,Fgo,UI,Tgo,Mgo,Ego,Fs,Rie,Cgo,wgo,JI,Ago,Lgo,YI,ygo,xgo,$go,Ts,Pie,kgo,Sgo,KI,Rgo,Pgo,ZI,Bgo,Igo,Ngo,Ms,Bie,qgo,jgo,eN,Dgo,Ggo,oN,Ogo,Vgo,Xgo,Fh,Iie,zgo,Wgo,rN,Qgo,Hgo,Ugo,Es,Nie,Jgo,Ygo,tN,Kgo,Zgo,aN,eho,oho,rho,Cs,qie,tho,aho,nN,nho,sho,sN,lho,iho,dho,ws,jie,cho,fho,lN,mho,gho,iN,hho,pho,_ho,As,Die,uho,bho,dN,vho,Fho,cN,Tho,Mho,Eho,Ls,Gie,Cho,who,fN,Aho,Lho,mN,yho,xho,$ho,ys,Oie,kho,Sho,gN,Rho,Pho,hN,Bho,Iho,Nho,xs,Vie,qho,jho,pN,Dho,Gho,_N,Oho,Vho,Xho,$s,Xie,zho,Who,uN,Qho,Hho,bN,Uho,Jho,Yho,Th,zie,Kho,Zho,vN,epo,opo,rpo,ks,Wie,tpo,apo,FN,npo,spo,TN,lpo,ipo,dpo,Ss,Qie,cpo,fpo,MN,mpo,gpo,EN,hpo,ppo,_po,Mh,Hie,upo,bpo,CN,vpo,Fpo,Tpo,Eh,Uie,Mpo,Epo,wN,Cpo,wpo,Apo,Ch,Jie,Lpo,ypo,AN,xpo,$po,kpo,wh,Yie,Spo,Rpo,LN,Ppo,Bpo,Ipo,Rs,Kie,Npo,qpo,yN,jpo,Dpo,xN,Gpo,Opo,Vpo,Ah,Zie,Xpo,zpo,$N,Wpo,Qpo,Hpo,Ps,ede,Upo,Jpo,kN,Ypo,Kpo,SN,Zpo,e_o,o_o,Bs,ode,r_o,t_o,RN,a_o,n_o,PN,s_o,l_o,i_o,Is,rde,d_o,c_o,BN,f_o,m_o,IN,g_o,h_o,p_o,Ns,tde,__o,u_o,NN,b_o,v_o,qN,F_o,T_o,M_o,qs,ade,E_o,C_o,jN,w_o,A_o,DN,L_o,y_o,x_o,js,nde,$_o,k_o,GN,S_o,R_o,ON,P_o,B_o,I_o,Lh,sde,N_o,q_o,VN,j_o,D_o,G_o,yh,lde,O_o,V_o,XN,X_o,z_o,W_o,Ds,ide,Q_o,H_o,zN,U_o,J_o,WN,Y_o,K_o,Z_o,Gs,dde,euo,ouo,QN,ruo,tuo,HN,auo,nuo,suo,Os,cde,luo,iuo,UN,duo,cuo,JN,fuo,muo,guo,xh,fde,huo,puo,YN,_uo,uuo,buo,$h,mde,vuo,Fuo,KN,Tuo,Muo,Euo,kh,gde,Cuo,wuo,ZN,Auo,Luo,yuo,Vs,hde,xuo,$uo,eq,kuo,Suo,oq,Ruo,Puo,Buo,Xs,pde,Iuo,Nuo,rq,quo,juo,tq,Duo,Guo,Ouo,Sh,_de,Vuo,Xuo,aq,zuo,Wuo,Quo,Rh,ude,Huo,Uuo,nq,Juo,Yuo,Kuo,Ph,bde,Zuo,e1o,sq,o1o,r1o,t1o,zs,vde,a1o,n1o,lq,s1o,l1o,iq,i1o,d1o,c1o,Bh,Fde,f1o,m1o,dq,g1o,h1o,p1o,Ih,Tde,_1o,u1o,cq,b1o,v1o,F1o,Ws,Mde,T1o,M1o,fq,E1o,C1o,mq,w1o,A1o,L1o,Qs,Ede,y1o,x1o,gq,$1o,k1o,hq,S1o,R1o,P1o,Hs,Cde,B1o,I1o,pq,N1o,q1o,_q,j1o,D1o,G1o,Us,wde,O1o,V1o,uq,X1o,z1o,bq,W1o,Q1o,H1o,Nh,U1o,qh,PL,J1o,Ade,Y1o,bze,Gi,jh,Lde,BL,K1o,yde,Z1o,vze,xo,IL,e2o,NL,o2o,vq,r2o,t2o,a2o,qL,n2o,xde,s2o,l2o,i2o,Ue,jL,d2o,$de,c2o,f2o,Ba,m2o,kde,g2o,h2o,Sde,p2o,_2o,Rde,u2o,b2o,v2o,U,Dh,Pde,F2o,T2o,Fq,M2o,E2o,C2o,Gh,Bde,w2o,A2o,Tq,L2o,y2o,x2o,Oh,Ide,$2o,k2o,Mq,S2o,R2o,P2o,Vh,Nde,B2o,I2o,Eq,N2o,q2o,j2o,Xh,qde,D2o,G2o,Cq,O2o,V2o,X2o,zh,jde,z2o,W2o,wq,Q2o,H2o,U2o,Wh,Dde,J2o,Y2o,Aq,K2o,Z2o,ebo,Qh,Gde,obo,rbo,Lq,tbo,abo,nbo,Hh,Ode,sbo,lbo,yq,ibo,dbo,cbo,Uh,Vde,fbo,mbo,xq,gbo,hbo,pbo,Jh,Xde,_bo,ubo,$q,bbo,vbo,Fbo,Yh,zde,Tbo,Mbo,kq,Ebo,Cbo,wbo,Kh,Wde,Abo,Lbo,Sq,ybo,xbo,$bo,Zh,Qde,kbo,Sbo,Rq,Rbo,Pbo,Bbo,ep,Hde,Ibo,Nbo,Pq,qbo,jbo,Dbo,op,Ude,Gbo,Obo,Bq,Vbo,Xbo,zbo,rp,Jde,Wbo,Qbo,Iq,Hbo,Ubo,Jbo,tp,Yde,Ybo,Kbo,Nq,Zbo,evo,ovo,ap,Kde,rvo,tvo,qq,avo,nvo,svo,np,Zde,lvo,ivo,jq,dvo,cvo,fvo,sp,ece,mvo,gvo,Dq,hvo,pvo,_vo,lp,oce,uvo,bvo,Gq,vvo,Fvo,Tvo,ip,rce,Mvo,Evo,Oq,Cvo,wvo,Avo,dp,tce,Lvo,yvo,Vq,xvo,$vo,kvo,cp,ace,Svo,Rvo,Xq,Pvo,Bvo,Ivo,fp,nce,Nvo,qvo,zq,jvo,Dvo,Gvo,mp,sce,Ovo,Vvo,Wq,Xvo,zvo,Wvo,gp,lce,Qvo,Hvo,Qq,Uvo,Jvo,Yvo,hp,ice,Kvo,Zvo,Hq,e3o,o3o,r3o,pp,dce,t3o,a3o,Uq,n3o,s3o,l3o,_p,cce,i3o,d3o,Jq,c3o,f3o,m3o,up,fce,g3o,h3o,Yq,p3o,_3o,u3o,bp,mce,b3o,v3o,Kq,F3o,T3o,M3o,vp,gce,E3o,C3o,Zq,w3o,A3o,L3o,Fp,hce,y3o,x3o,ej,$3o,k3o,S3o,Tp,pce,R3o,P3o,oj,B3o,I3o,N3o,Mp,q3o,Ep,j3o,Cp,DL,D3o,_ce,G3o,Fze,Oi,wp,uce,GL,O3o,bce,V3o,Tze,$o,OL,X3o,VL,z3o,rj,W3o,Q3o,H3o,XL,U3o,vce,J3o,Y3o,K3o,Je,zL,Z3o,Fce,eFo,oFo,Vi,rFo,Tce,tFo,aFo,Mce,nFo,sFo,lFo,fe,Ap,Ece,iFo,dFo,tj,cFo,fFo,mFo,Lp,Cce,gFo,hFo,aj,pFo,_Fo,uFo,yp,wce,bFo,vFo,nj,FFo,TFo,MFo,xp,Ace,EFo,CFo,sj,wFo,AFo,LFo,$p,Lce,yFo,xFo,lj,$Fo,kFo,SFo,kp,yce,RFo,PFo,ij,BFo,IFo,NFo,Sp,xce,qFo,jFo,dj,DFo,GFo,OFo,Rp,$ce,VFo,XFo,cj,zFo,WFo,QFo,Pp,kce,HFo,UFo,fj,JFo,YFo,KFo,Bp,Sce,ZFo,e6o,mj,o6o,r6o,t6o,Ip,Rce,a6o,n6o,gj,s6o,l6o,i6o,Np,Pce,d6o,c6o,hj,f6o,m6o,g6o,qp,Bce,h6o,p6o,pj,_6o,u6o,b6o,jp,Ice,v6o,F6o,_j,T6o,M6o,E6o,Dp,Nce,C6o,w6o,uj,A6o,L6o,y6o,Gp,qce,x6o,$6o,bj,k6o,S6o,R6o,Op,jce,P6o,B6o,vj,I6o,N6o,q6o,Vp,Dce,j6o,D6o,Fj,G6o,O6o,V6o,Xp,Gce,X6o,z6o,Tj,W6o,Q6o,H6o,zp,U6o,Wp,J6o,Qp,WL,Y6o,Oce,K6o,Mze,Xi,Hp,Vce,QL,Z6o,Xce,eTo,Eze,ko,HL,oTo,zi,rTo,Mj,tTo,aTo,Ej,nTo,sTo,lTo,UL,iTo,zce,dTo,cTo,fTo,it,JL,mTo,Wce,gTo,hTo,Wi,pTo,Qce,_To,uTo,Cj,bTo,vTo,FTo,Up,TTo,Ye,YL,MTo,Hce,ETo,CTo,Ia,wTo,Uce,ATo,LTo,Jce,yTo,xTo,Yce,$To,kTo,STo,y,Jp,Kce,RTo,PTo,wj,BTo,ITo,NTo,Yp,Zce,qTo,jTo,Aj,DTo,GTo,OTo,Kp,efe,VTo,XTo,Lj,zTo,WTo,QTo,Zp,ofe,HTo,UTo,yj,JTo,YTo,KTo,e_,rfe,ZTo,e8o,xj,o8o,r8o,t8o,o_,tfe,a8o,n8o,$j,s8o,l8o,i8o,r_,afe,d8o,c8o,kj,f8o,m8o,g8o,t_,nfe,h8o,p8o,Sj,_8o,u8o,b8o,a_,sfe,v8o,F8o,Rj,T8o,M8o,E8o,n_,lfe,C8o,w8o,Pj,A8o,L8o,y8o,s_,ife,x8o,$8o,Bj,k8o,S8o,R8o,l_,dfe,P8o,B8o,Ij,I8o,N8o,q8o,i_,cfe,j8o,D8o,Nj,G8o,O8o,V8o,d_,ffe,X8o,z8o,qj,W8o,Q8o,H8o,c_,mfe,U8o,J8o,jj,Y8o,K8o,Z8o,f_,gfe,eMo,oMo,Dj,rMo,tMo,aMo,m_,hfe,nMo,sMo,Gj,lMo,iMo,dMo,g_,pfe,cMo,fMo,Oj,mMo,gMo,hMo,h_,_fe,pMo,_Mo,Vj,uMo,bMo,vMo,p_,ufe,FMo,TMo,Xj,MMo,EMo,CMo,__,bfe,wMo,AMo,zj,LMo,yMo,xMo,u_,vfe,$Mo,kMo,Wj,SMo,RMo,PMo,b_,Ffe,BMo,IMo,Qj,NMo,qMo,jMo,v_,Tfe,DMo,GMo,Hj,OMo,VMo,XMo,F_,Mfe,zMo,WMo,Uj,QMo,HMo,UMo,T_,Efe,JMo,YMo,Jj,KMo,ZMo,e4o,M_,Cfe,o4o,r4o,Yj,t4o,a4o,n4o,E_,wfe,s4o,l4o,Kj,i4o,d4o,c4o,C_,Afe,f4o,m4o,Zj,g4o,h4o,p4o,w_,Lfe,_4o,u4o,eD,b4o,v4o,F4o,A_,yfe,T4o,M4o,oD,E4o,C4o,w4o,L_,xfe,A4o,L4o,rD,y4o,x4o,$4o,y_,$fe,k4o,S4o,tD,R4o,P4o,B4o,x_,kfe,I4o,N4o,aD,q4o,j4o,D4o,Js,Sfe,G4o,O4o,nD,V4o,X4o,sD,z4o,W4o,Q4o,$_,Rfe,H4o,U4o,lD,J4o,Y4o,K4o,k_,Pfe,Z4o,eEo,iD,oEo,rEo,tEo,S_,Bfe,aEo,nEo,dD,sEo,lEo,iEo,R_,Ife,dEo,cEo,cD,fEo,mEo,gEo,P_,Nfe,hEo,pEo,fD,_Eo,uEo,bEo,B_,qfe,vEo,FEo,mD,TEo,MEo,EEo,I_,jfe,CEo,wEo,gD,AEo,LEo,yEo,N_,Dfe,xEo,$Eo,hD,kEo,SEo,REo,q_,Gfe,PEo,BEo,pD,IEo,NEo,qEo,j_,Ofe,jEo,DEo,_D,GEo,OEo,VEo,D_,Vfe,XEo,zEo,uD,WEo,QEo,HEo,G_,Xfe,UEo,JEo,bD,YEo,KEo,ZEo,O_,zfe,eCo,oCo,vD,rCo,tCo,aCo,V_,Wfe,nCo,sCo,FD,lCo,iCo,dCo,X_,Qfe,cCo,fCo,TD,mCo,gCo,hCo,z_,Hfe,pCo,_Co,MD,uCo,bCo,vCo,W_,Ufe,FCo,TCo,ED,MCo,ECo,CCo,Q_,Jfe,wCo,ACo,CD,LCo,yCo,xCo,H_,Yfe,$Co,kCo,wD,SCo,RCo,PCo,U_,Kfe,BCo,ICo,AD,NCo,qCo,jCo,J_,Zfe,DCo,GCo,LD,OCo,VCo,XCo,Y_,eme,zCo,WCo,yD,QCo,HCo,UCo,K_,ome,JCo,YCo,xD,KCo,ZCo,e5o,Z_,rme,o5o,r5o,$D,t5o,a5o,n5o,eu,tme,s5o,l5o,kD,i5o,d5o,c5o,ou,ame,f5o,m5o,SD,g5o,h5o,p5o,ru,nme,_5o,u5o,RD,b5o,v5o,F5o,tu,sme,T5o,M5o,PD,E5o,C5o,w5o,au,lme,A5o,L5o,BD,y5o,x5o,$5o,nu,ime,k5o,S5o,ID,R5o,P5o,B5o,su,dme,I5o,N5o,ND,q5o,j5o,D5o,lu,cme,G5o,O5o,qD,V5o,X5o,z5o,iu,fme,W5o,Q5o,jD,H5o,U5o,J5o,du,mme,Y5o,K5o,DD,Z5o,e0o,o0o,cu,gme,r0o,t0o,GD,a0o,n0o,s0o,fu,hme,l0o,i0o,OD,d0o,c0o,f0o,mu,pme,m0o,g0o,VD,h0o,p0o,_0o,gu,_me,u0o,b0o,XD,v0o,F0o,T0o,hu,ume,M0o,E0o,zD,C0o,w0o,A0o,pu,bme,L0o,y0o,WD,x0o,$0o,k0o,_u,vme,S0o,R0o,QD,P0o,B0o,I0o,uu,Fme,N0o,q0o,HD,j0o,D0o,G0o,bu,Tme,O0o,V0o,UD,X0o,z0o,W0o,vu,Mme,Q0o,H0o,JD,U0o,J0o,Y0o,Fu,Eme,K0o,Z0o,YD,ewo,owo,rwo,Tu,Cme,two,awo,KD,nwo,swo,lwo,Mu,wme,iwo,dwo,ZD,cwo,fwo,mwo,Eu,Ame,gwo,hwo,eG,pwo,_wo,uwo,Cu,Lme,bwo,vwo,oG,Fwo,Two,Mwo,wu,yme,Ewo,Cwo,rG,wwo,Awo,Lwo,Au,xme,ywo,xwo,tG,$wo,kwo,Swo,Lu,$me,Rwo,Pwo,aG,Bwo,Iwo,Nwo,yu,kme,qwo,jwo,nG,Dwo,Gwo,Owo,xu,Sme,Vwo,Xwo,sG,zwo,Wwo,Qwo,$u,Rme,Hwo,Uwo,lG,Jwo,Ywo,Kwo,ku,Pme,Zwo,eAo,iG,oAo,rAo,tAo,Su,Bme,aAo,nAo,dG,sAo,lAo,iAo,Ru,Ime,dAo,cAo,cG,fAo,mAo,gAo,Pu,Nme,hAo,pAo,fG,_Ao,uAo,bAo,Bu,qme,vAo,FAo,mG,TAo,MAo,EAo,Iu,jme,CAo,wAo,gG,AAo,LAo,yAo,Nu,Dme,xAo,$Ao,hG,kAo,SAo,RAo,qu,Gme,PAo,BAo,pG,IAo,NAo,qAo,ju,Ome,jAo,DAo,_G,GAo,OAo,VAo,Du,Vme,XAo,zAo,uG,WAo,QAo,HAo,Gu,Xme,UAo,JAo,bG,YAo,KAo,ZAo,Ou,zme,e7o,o7o,vG,r7o,t7o,a7o,Vu,Wme,n7o,s7o,FG,l7o,i7o,d7o,Xu,Qme,c7o,f7o,TG,m7o,g7o,h7o,zu,Hme,p7o,_7o,MG,u7o,b7o,v7o,Wu,Ume,F7o,T7o,EG,M7o,E7o,C7o,Qu,Jme,w7o,A7o,CG,L7o,y7o,x7o,Hu,Yme,$7o,k7o,wG,S7o,R7o,P7o,Uu,Kme,B7o,I7o,AG,N7o,q7o,j7o,Ju,Zme,D7o,G7o,LG,O7o,V7o,X7o,Yu,ege,z7o,W7o,yG,Q7o,H7o,U7o,Ku,oge,J7o,Y7o,xG,K7o,Z7o,eLo,Zu,rge,oLo,rLo,$G,tLo,aLo,nLo,e1,tge,sLo,lLo,kG,iLo,dLo,cLo,o1,fLo,age,mLo,gLo,nge,hLo,pLo,r1,Cze,Qi,t1,sge,KL,_Lo,lge,uLo,wze,So,ZL,bLo,Hi,vLo,SG,FLo,TLo,RG,MLo,ELo,CLo,ey,wLo,ige,ALo,LLo,yLo,dt,oy,xLo,dge,$Lo,kLo,Ui,SLo,cge,RLo,PLo,PG,BLo,ILo,NLo,a1,qLo,Ke,ry,jLo,fge,DLo,GLo,Na,OLo,mge,VLo,XLo,gge,zLo,WLo,hge,QLo,HLo,ULo,G,n1,pge,JLo,YLo,BG,KLo,ZLo,eyo,s1,_ge,oyo,ryo,IG,tyo,ayo,nyo,l1,uge,syo,lyo,NG,iyo,dyo,cyo,i1,bge,fyo,myo,qG,gyo,hyo,pyo,d1,vge,_yo,uyo,jG,byo,vyo,Fyo,c1,Fge,Tyo,Myo,DG,Eyo,Cyo,wyo,f1,Tge,Ayo,Lyo,GG,yyo,xyo,$yo,m1,Mge,kyo,Syo,OG,Ryo,Pyo,Byo,g1,Ege,Iyo,Nyo,VG,qyo,jyo,Dyo,h1,Cge,Gyo,Oyo,XG,Vyo,Xyo,zyo,p1,wge,Wyo,Qyo,zG,Hyo,Uyo,Jyo,_1,Age,Yyo,Kyo,WG,Zyo,e9o,o9o,u1,Lge,r9o,t9o,QG,a9o,n9o,s9o,b1,yge,l9o,i9o,HG,d9o,c9o,f9o,v1,xge,m9o,g9o,UG,h9o,p9o,_9o,F1,$ge,u9o,b9o,JG,v9o,F9o,T9o,T1,kge,M9o,E9o,YG,C9o,w9o,A9o,M1,Sge,L9o,y9o,KG,x9o,$9o,k9o,E1,Rge,S9o,R9o,ZG,P9o,B9o,I9o,C1,Pge,N9o,q9o,eO,j9o,D9o,G9o,w1,Bge,O9o,V9o,oO,X9o,z9o,W9o,A1,Ige,Q9o,H9o,rO,U9o,J9o,Y9o,L1,Nge,K9o,Z9o,tO,exo,oxo,rxo,y1,qge,txo,axo,aO,nxo,sxo,lxo,x1,jge,ixo,dxo,nO,cxo,fxo,mxo,$1,Dge,gxo,hxo,sO,pxo,_xo,uxo,k1,Gge,bxo,vxo,lO,Fxo,Txo,Mxo,S1,Oge,Exo,Cxo,iO,wxo,Axo,Lxo,R1,Vge,yxo,xxo,dO,$xo,kxo,Sxo,P1,Xge,Rxo,Pxo,cO,Bxo,Ixo,Nxo,B1,zge,qxo,jxo,fO,Dxo,Gxo,Oxo,I1,Wge,Vxo,Xxo,mO,zxo,Wxo,Qxo,N1,Qge,Hxo,Uxo,gO,Jxo,Yxo,Kxo,q1,Hge,Zxo,e$o,hO,o$o,r$o,t$o,j1,Uge,a$o,n$o,pO,s$o,l$o,i$o,D1,Jge,d$o,c$o,_O,f$o,m$o,g$o,G1,Yge,h$o,p$o,uO,_$o,u$o,b$o,O1,Kge,v$o,F$o,bO,T$o,M$o,E$o,V1,Zge,C$o,w$o,vO,A$o,L$o,y$o,X1,ehe,x$o,$$o,FO,k$o,S$o,R$o,z1,ohe,P$o,B$o,TO,I$o,N$o,q$o,W1,rhe,j$o,D$o,MO,G$o,O$o,V$o,Q1,the,X$o,z$o,EO,W$o,Q$o,H$o,H1,ahe,U$o,J$o,CO,Y$o,K$o,Z$o,U1,nhe,eko,oko,wO,rko,tko,ako,J1,nko,she,sko,lko,lhe,iko,dko,Y1,Aze,Ji,K1,ihe,ty,cko,dhe,fko,Lze,Ro,ay,mko,Yi,gko,AO,hko,pko,LO,_ko,uko,bko,ny,vko,che,Fko,Tko,Mko,ct,sy,Eko,fhe,Cko,wko,Ki,Ako,mhe,Lko,yko,yO,xko,$ko,kko,Z1,Sko,Ze,ly,Rko,ghe,Pko,Bko,qa,Iko,hhe,Nko,qko,phe,jko,Dko,_he,Gko,Oko,Vko,z,e2,uhe,Xko,zko,xO,Wko,Qko,Hko,o2,bhe,Uko,Jko,$O,Yko,Kko,Zko,r2,vhe,eSo,oSo,kO,rSo,tSo,aSo,t2,Fhe,nSo,sSo,SO,lSo,iSo,dSo,a2,The,cSo,fSo,RO,mSo,gSo,hSo,n2,Mhe,pSo,_So,PO,uSo,bSo,vSo,s2,Ehe,FSo,TSo,BO,MSo,ESo,CSo,l2,Che,wSo,ASo,IO,LSo,ySo,xSo,i2,whe,$So,kSo,NO,SSo,RSo,PSo,d2,Ahe,BSo,ISo,qO,NSo,qSo,jSo,c2,Lhe,DSo,GSo,jO,OSo,VSo,XSo,f2,yhe,zSo,WSo,DO,QSo,HSo,USo,m2,xhe,JSo,YSo,GO,KSo,ZSo,eRo,g2,$he,oRo,rRo,OO,tRo,aRo,nRo,h2,khe,sRo,lRo,VO,iRo,dRo,cRo,p2,She,fRo,mRo,XO,gRo,hRo,pRo,_2,Rhe,_Ro,uRo,zO,bRo,vRo,FRo,u2,Phe,TRo,MRo,WO,ERo,CRo,wRo,b2,Bhe,ARo,LRo,QO,yRo,xRo,$Ro,v2,Ihe,kRo,SRo,HO,RRo,PRo,BRo,F2,Nhe,IRo,NRo,UO,qRo,jRo,DRo,T2,qhe,GRo,ORo,JO,VRo,XRo,zRo,M2,jhe,WRo,QRo,YO,HRo,URo,JRo,E2,Dhe,YRo,KRo,KO,ZRo,ePo,oPo,C2,Ghe,rPo,tPo,ZO,aPo,nPo,sPo,w2,Ohe,lPo,iPo,eV,dPo,cPo,fPo,A2,Vhe,mPo,gPo,oV,hPo,pPo,_Po,L2,Xhe,uPo,bPo,rV,vPo,FPo,TPo,y2,zhe,MPo,EPo,tV,CPo,wPo,APo,x2,Whe,LPo,yPo,aV,xPo,$Po,kPo,$2,Qhe,SPo,RPo,nV,PPo,BPo,IPo,k2,Hhe,NPo,qPo,sV,jPo,DPo,GPo,S2,Uhe,OPo,VPo,lV,XPo,zPo,WPo,R2,Jhe,QPo,HPo,iV,UPo,JPo,YPo,P2,Yhe,KPo,ZPo,dV,eBo,oBo,rBo,B2,Khe,tBo,aBo,cV,nBo,sBo,lBo,I2,Zhe,iBo,dBo,fV,cBo,fBo,mBo,N2,epe,gBo,hBo,mV,pBo,_Bo,uBo,q2,ope,bBo,vBo,gV,FBo,TBo,MBo,j2,rpe,EBo,CBo,hV,wBo,ABo,LBo,D2,yBo,tpe,xBo,$Bo,ape,kBo,SBo,G2,yze,Zi,O2,npe,iy,RBo,spe,PBo,xze,Po,dy,BBo,ed,IBo,pV,NBo,qBo,_V,jBo,DBo,GBo,cy,OBo,lpe,VBo,XBo,zBo,ft,fy,WBo,ipe,QBo,HBo,od,UBo,dpe,JBo,YBo,uV,KBo,ZBo,eIo,V2,oIo,eo,my,rIo,cpe,tIo,aIo,ja,nIo,fpe,sIo,lIo,mpe,iIo,dIo,gpe,cIo,fIo,mIo,Q,X2,hpe,gIo,hIo,bV,pIo,_Io,uIo,z2,ppe,bIo,vIo,vV,FIo,TIo,MIo,W2,_pe,EIo,CIo,FV,wIo,AIo,LIo,Q2,upe,yIo,xIo,TV,$Io,kIo,SIo,H2,bpe,RIo,PIo,MV,BIo,IIo,NIo,U2,vpe,qIo,jIo,EV,DIo,GIo,OIo,J2,Fpe,VIo,XIo,CV,zIo,WIo,QIo,Y2,Tpe,HIo,UIo,wV,JIo,YIo,KIo,K2,Mpe,ZIo,eNo,AV,oNo,rNo,tNo,Z2,Epe,aNo,nNo,LV,sNo,lNo,iNo,eb,Cpe,dNo,cNo,yV,fNo,mNo,gNo,ob,wpe,hNo,pNo,xV,_No,uNo,bNo,rb,Ape,vNo,FNo,$V,TNo,MNo,ENo,tb,Lpe,CNo,wNo,kV,ANo,LNo,yNo,ab,ype,xNo,$No,SV,kNo,SNo,RNo,nb,xpe,PNo,BNo,RV,INo,NNo,qNo,sb,$pe,jNo,DNo,PV,GNo,ONo,VNo,lb,kpe,XNo,zNo,BV,WNo,QNo,HNo,ib,Spe,UNo,JNo,IV,YNo,KNo,ZNo,db,Rpe,eqo,oqo,NV,rqo,tqo,aqo,cb,Ppe,nqo,sqo,qV,lqo,iqo,dqo,fb,Bpe,cqo,fqo,jV,mqo,gqo,hqo,mb,Ipe,pqo,_qo,DV,uqo,bqo,vqo,gb,Npe,Fqo,Tqo,GV,Mqo,Eqo,Cqo,hb,qpe,wqo,Aqo,OV,Lqo,yqo,xqo,pb,jpe,$qo,kqo,VV,Sqo,Rqo,Pqo,_b,Dpe,Bqo,Iqo,XV,Nqo,qqo,jqo,ub,Gpe,Dqo,Gqo,zV,Oqo,Vqo,Xqo,bb,Ope,zqo,Wqo,WV,Qqo,Hqo,Uqo,vb,Vpe,Jqo,Yqo,QV,Kqo,Zqo,ejo,Fb,Xpe,ojo,rjo,HV,tjo,ajo,njo,Tb,zpe,sjo,ljo,UV,ijo,djo,cjo,Mb,Wpe,fjo,mjo,JV,gjo,hjo,pjo,Eb,Qpe,_jo,ujo,Hpe,bjo,vjo,Fjo,Cb,Upe,Tjo,Mjo,YV,Ejo,Cjo,wjo,wb,Jpe,Ajo,Ljo,KV,yjo,xjo,$jo,Ab,Ype,kjo,Sjo,ZV,Rjo,Pjo,Bjo,Lb,Kpe,Ijo,Njo,eX,qjo,jjo,Djo,yb,Gjo,Zpe,Ojo,Vjo,e_e,Xjo,zjo,xb,$ze,rd,$b,o_e,gy,Wjo,r_e,Qjo,kze,Bo,hy,Hjo,td,Ujo,oX,Jjo,Yjo,rX,Kjo,Zjo,eDo,py,oDo,t_e,rDo,tDo,aDo,mt,_y,nDo,a_e,sDo,lDo,ad,iDo,n_e,dDo,cDo,tX,fDo,mDo,gDo,kb,hDo,oo,uy,pDo,s_e,_Do,uDo,Da,bDo,l_e,vDo,FDo,i_e,TDo,MDo,d_e,EDo,CDo,wDo,me,Sb,c_e,ADo,LDo,aX,yDo,xDo,$Do,Rb,f_e,kDo,SDo,nX,RDo,PDo,BDo,Pb,m_e,IDo,NDo,sX,qDo,jDo,DDo,Bb,g_e,GDo,ODo,lX,VDo,XDo,zDo,Ib,h_e,WDo,QDo,iX,HDo,UDo,JDo,Nb,p_e,YDo,KDo,dX,ZDo,eGo,oGo,qb,__e,rGo,tGo,cX,aGo,nGo,sGo,jb,u_e,lGo,iGo,fX,dGo,cGo,fGo,Db,b_e,mGo,gGo,mX,hGo,pGo,_Go,Gb,v_e,uGo,bGo,gX,vGo,FGo,TGo,Ob,F_e,MGo,EGo,hX,CGo,wGo,AGo,Vb,T_e,LGo,yGo,pX,xGo,$Go,kGo,Xb,M_e,SGo,RGo,_X,PGo,BGo,IGo,zb,E_e,NGo,qGo,uX,jGo,DGo,GGo,Wb,C_e,OGo,VGo,bX,XGo,zGo,WGo,Qb,w_e,QGo,HGo,vX,UGo,JGo,YGo,Hb,A_e,KGo,ZGo,FX,eOo,oOo,rOo,Ub,L_e,tOo,aOo,TX,nOo,sOo,lOo,Jb,y_e,iOo,dOo,MX,cOo,fOo,mOo,Yb,gOo,x_e,hOo,pOo,$_e,_Oo,uOo,Kb,Sze,nd,Zb,k_e,by,bOo,S_e,vOo,Rze,Io,vy,FOo,sd,TOo,EX,MOo,EOo,CX,COo,wOo,AOo,Fy,LOo,R_e,yOo,xOo,$Oo,gt,Ty,kOo,P_e,SOo,ROo,ld,POo,B_e,BOo,IOo,wX,NOo,qOo,jOo,ev,DOo,ro,My,GOo,I_e,OOo,VOo,Ga,XOo,N_e,zOo,WOo,q_e,QOo,HOo,j_e,UOo,JOo,YOo,B,ov,D_e,KOo,ZOo,AX,eVo,oVo,rVo,rv,G_e,tVo,aVo,LX,nVo,sVo,lVo,tv,O_e,iVo,dVo,yX,cVo,fVo,mVo,av,V_e,gVo,hVo,xX,pVo,_Vo,uVo,nv,X_e,bVo,vVo,$X,FVo,TVo,MVo,sv,z_e,EVo,CVo,kX,wVo,AVo,LVo,lv,W_e,yVo,xVo,SX,$Vo,kVo,SVo,iv,Q_e,RVo,PVo,RX,BVo,IVo,NVo,dv,H_e,qVo,jVo,PX,DVo,GVo,OVo,cv,U_e,VVo,XVo,BX,zVo,WVo,QVo,fv,J_e,HVo,UVo,IX,JVo,YVo,KVo,mv,Y_e,ZVo,eXo,NX,oXo,rXo,tXo,gv,K_e,aXo,nXo,qX,sXo,lXo,iXo,hv,Z_e,dXo,cXo,jX,fXo,mXo,gXo,pv,eue,hXo,pXo,DX,_Xo,uXo,bXo,_v,oue,vXo,FXo,GX,TXo,MXo,EXo,uv,rue,CXo,wXo,OX,AXo,LXo,yXo,bv,tue,xXo,$Xo,VX,kXo,SXo,RXo,vv,aue,PXo,BXo,XX,IXo,NXo,qXo,Fv,nue,jXo,DXo,zX,GXo,OXo,VXo,Tv,sue,XXo,zXo,WX,WXo,QXo,HXo,Mv,lue,UXo,JXo,QX,YXo,KXo,ZXo,Ev,iue,ezo,ozo,HX,rzo,tzo,azo,Cv,due,nzo,szo,UX,lzo,izo,dzo,wv,cue,czo,fzo,JX,mzo,gzo,hzo,Av,fue,pzo,_zo,YX,uzo,bzo,vzo,Lv,mue,Fzo,Tzo,KX,Mzo,Ezo,Czo,yv,gue,wzo,Azo,ZX,Lzo,yzo,xzo,xv,hue,$zo,kzo,ez,Szo,Rzo,Pzo,$v,pue,Bzo,Izo,oz,Nzo,qzo,jzo,kv,_ue,Dzo,Gzo,rz,Ozo,Vzo,Xzo,Sv,uue,zzo,Wzo,tz,Qzo,Hzo,Uzo,Rv,bue,Jzo,Yzo,az,Kzo,Zzo,eWo,Pv,vue,oWo,rWo,nz,tWo,aWo,nWo,Bv,Fue,sWo,lWo,sz,iWo,dWo,cWo,Iv,Tue,fWo,mWo,lz,gWo,hWo,pWo,Nv,Mue,_Wo,uWo,iz,bWo,vWo,FWo,qv,Eue,TWo,MWo,dz,EWo,CWo,wWo,jv,Cue,AWo,LWo,cz,yWo,xWo,$Wo,Dv,wue,kWo,SWo,fz,RWo,PWo,BWo,Gv,Aue,IWo,NWo,mz,qWo,jWo,DWo,Ov,Lue,GWo,OWo,gz,VWo,XWo,zWo,Vv,yue,WWo,QWo,hz,HWo,UWo,JWo,Xv,xue,YWo,KWo,pz,ZWo,eQo,oQo,zv,$ue,rQo,tQo,_z,aQo,nQo,sQo,Wv,kue,lQo,iQo,uz,dQo,cQo,fQo,Qv,Sue,mQo,gQo,bz,hQo,pQo,_Qo,Hv,Rue,uQo,bQo,vz,vQo,FQo,TQo,Uv,Pue,MQo,EQo,Fz,CQo,wQo,AQo,Jv,Bue,LQo,yQo,Tz,xQo,$Qo,kQo,Yv,Iue,SQo,RQo,Mz,PQo,BQo,IQo,Kv,NQo,Nue,qQo,jQo,que,DQo,GQo,Zv,Pze,id,e3,jue,Ey,OQo,Due,VQo,Bze,No,Cy,XQo,dd,zQo,Ez,WQo,QQo,Cz,HQo,UQo,JQo,wy,YQo,Gue,KQo,ZQo,eHo,ht,Ay,oHo,Oue,rHo,tHo,cd,aHo,Vue,nHo,sHo,wz,lHo,iHo,dHo,o3,cHo,to,Ly,fHo,Xue,mHo,gHo,Oa,hHo,zue,pHo,_Ho,Wue,uHo,bHo,Que,vHo,FHo,THo,Z,r3,Hue,MHo,EHo,Az,CHo,wHo,AHo,t3,Uue,LHo,yHo,Lz,xHo,$Ho,kHo,a3,Jue,SHo,RHo,yz,PHo,BHo,IHo,n3,Yue,NHo,qHo,xz,jHo,DHo,GHo,s3,Kue,OHo,VHo,$z,XHo,zHo,WHo,l3,Zue,QHo,HHo,kz,UHo,JHo,YHo,i3,e1e,KHo,ZHo,Sz,eUo,oUo,rUo,d3,o1e,tUo,aUo,Rz,nUo,sUo,lUo,c3,r1e,iUo,dUo,Pz,cUo,fUo,mUo,f3,t1e,gUo,hUo,Bz,pUo,_Uo,uUo,m3,a1e,bUo,vUo,Iz,FUo,TUo,MUo,g3,n1e,EUo,CUo,Nz,wUo,AUo,LUo,h3,s1e,yUo,xUo,qz,$Uo,kUo,SUo,p3,l1e,RUo,PUo,jz,BUo,IUo,NUo,_3,i1e,qUo,jUo,Dz,DUo,GUo,OUo,u3,d1e,VUo,XUo,Gz,zUo,WUo,QUo,b3,c1e,HUo,UUo,Oz,JUo,YUo,KUo,v3,f1e,ZUo,eJo,Vz,oJo,rJo,tJo,F3,m1e,aJo,nJo,Xz,sJo,lJo,iJo,T3,g1e,dJo,cJo,zz,fJo,mJo,gJo,M3,h1e,hJo,pJo,Wz,_Jo,uJo,bJo,E3,p1e,vJo,FJo,Qz,TJo,MJo,EJo,C3,_1e,CJo,wJo,Hz,AJo,LJo,yJo,w3,u1e,xJo,$Jo,Uz,kJo,SJo,RJo,A3,b1e,PJo,BJo,Jz,IJo,NJo,qJo,L3,v1e,jJo,DJo,Yz,GJo,OJo,VJo,y3,F1e,XJo,zJo,Kz,WJo,QJo,HJo,x3,T1e,UJo,JJo,Zz,YJo,KJo,ZJo,$3,M1e,eYo,oYo,eW,rYo,tYo,aYo,k3,E1e,nYo,sYo,oW,lYo,iYo,dYo,S3,cYo,C1e,fYo,mYo,w1e,gYo,hYo,R3,Ize,fd,P3,A1e,yy,pYo,L1e,_Yo,Nze,qo,xy,uYo,md,bYo,rW,vYo,FYo,tW,TYo,MYo,EYo,$y,CYo,y1e,wYo,AYo,LYo,pt,ky,yYo,x1e,xYo,$Yo,gd,kYo,$1e,SYo,RYo,aW,PYo,BYo,IYo,B3,NYo,ao,Sy,qYo,k1e,jYo,DYo,Va,GYo,S1e,OYo,VYo,R1e,XYo,zYo,P1e,WYo,QYo,HYo,jo,I3,B1e,UYo,JYo,nW,YYo,KYo,ZYo,N3,I1e,eKo,oKo,sW,rKo,tKo,aKo,q3,N1e,nKo,sKo,lW,lKo,iKo,dKo,j3,q1e,cKo,fKo,iW,mKo,gKo,hKo,D3,j1e,pKo,_Ko,dW,uKo,bKo,vKo,G3,D1e,FKo,TKo,cW,MKo,EKo,CKo,O3,wKo,G1e,AKo,LKo,O1e,yKo,xKo,V3,qze,hd,X3,V1e,Ry,$Ko,X1e,kKo,jze,Do,Py,SKo,pd,RKo,fW,PKo,BKo,mW,IKo,NKo,qKo,By,jKo,z1e,DKo,GKo,OKo,_t,Iy,VKo,W1e,XKo,zKo,_d,WKo,Q1e,QKo,HKo,gW,UKo,JKo,YKo,z3,KKo,no,Ny,ZKo,H1e,eZo,oZo,Xa,rZo,U1e,tZo,aZo,J1e,nZo,sZo,Y1e,lZo,iZo,dZo,J,W3,K1e,cZo,fZo,hW,mZo,gZo,hZo,Q3,Z1e,pZo,_Zo,pW,uZo,bZo,vZo,H3,e2e,FZo,TZo,_W,MZo,EZo,CZo,U3,o2e,wZo,AZo,uW,LZo,yZo,xZo,J3,r2e,$Zo,kZo,bW,SZo,RZo,PZo,Y3,t2e,BZo,IZo,vW,NZo,qZo,jZo,K3,a2e,DZo,GZo,FW,OZo,VZo,XZo,Z3,n2e,zZo,WZo,TW,QZo,HZo,UZo,eF,s2e,JZo,YZo,MW,KZo,ZZo,eer,oF,l2e,oer,rer,EW,ter,aer,ner,rF,i2e,ser,ler,CW,ier,der,cer,tF,d2e,fer,mer,wW,ger,her,per,aF,c2e,_er,uer,AW,ber,ver,Fer,nF,f2e,Ter,Mer,LW,Eer,Cer,wer,sF,m2e,Aer,Ler,yW,yer,xer,$er,lF,g2e,ker,Ser,xW,Rer,Per,Ber,iF,h2e,Ier,Ner,$W,qer,jer,Der,dF,p2e,Ger,Oer,kW,Ver,Xer,zer,cF,_2e,Wer,Qer,SW,Her,Uer,Jer,fF,u2e,Yer,Ker,RW,Zer,eor,oor,mF,b2e,ror,tor,PW,aor,nor,sor,gF,v2e,lor,ior,BW,dor,cor,mor,hF,F2e,gor,hor,IW,por,_or,uor,pF,T2e,bor,vor,NW,For,Tor,Mor,_F,M2e,Eor,Cor,qW,wor,Aor,Lor,uF,E2e,yor,xor,jW,$or,kor,Sor,bF,C2e,Ror,Por,DW,Bor,Ior,Nor,vF,w2e,qor,jor,GW,Dor,Gor,Oor,FF,A2e,Vor,Xor,OW,zor,Wor,Qor,TF,L2e,Hor,Uor,VW,Jor,Yor,Kor,MF,y2e,Zor,err,XW,orr,rrr,trr,EF,x2e,arr,nrr,zW,srr,lrr,irr,CF,$2e,drr,crr,WW,frr,mrr,grr,wF,k2e,hrr,prr,QW,_rr,urr,brr,AF,S2e,vrr,Frr,HW,Trr,Mrr,Err,LF,R2e,Crr,wrr,UW,Arr,Lrr,yrr,yF,xrr,P2e,$rr,krr,B2e,Srr,Rrr,xF,Dze,ud,$F,I2e,qy,Prr,N2e,Brr,Gze,Go,jy,Irr,bd,Nrr,JW,qrr,jrr,YW,Drr,Grr,Orr,Dy,Vrr,q2e,Xrr,zrr,Wrr,ut,Gy,Qrr,j2e,Hrr,Urr,vd,Jrr,D2e,Yrr,Krr,KW,Zrr,etr,otr,kF,rtr,so,Oy,ttr,G2e,atr,ntr,za,str,O2e,ltr,itr,V2e,dtr,ctr,X2e,ftr,mtr,gtr,V,SF,z2e,htr,ptr,ZW,_tr,utr,btr,RF,W2e,vtr,Ftr,eQ,Ttr,Mtr,Etr,PF,Q2e,Ctr,wtr,oQ,Atr,Ltr,ytr,BF,H2e,xtr,$tr,rQ,ktr,Str,Rtr,IF,U2e,Ptr,Btr,tQ,Itr,Ntr,qtr,NF,J2e,jtr,Dtr,aQ,Gtr,Otr,Vtr,qF,Y2e,Xtr,ztr,nQ,Wtr,Qtr,Htr,jF,K2e,Utr,Jtr,sQ,Ytr,Ktr,Ztr,DF,Z2e,ear,oar,lQ,rar,tar,aar,GF,ebe,nar,sar,iQ,lar,iar,dar,OF,obe,car,far,dQ,mar,gar,har,VF,rbe,par,_ar,cQ,uar,bar,Far,XF,tbe,Tar,Mar,fQ,Ear,Car,war,zF,abe,Aar,Lar,mQ,yar,xar,$ar,WF,nbe,kar,Sar,gQ,Rar,Par,Bar,QF,sbe,Iar,Nar,hQ,qar,jar,Dar,HF,lbe,Gar,Oar,pQ,Var,Xar,zar,UF,ibe,War,Qar,_Q,Har,Uar,Jar,JF,dbe,Yar,Kar,uQ,Zar,enr,onr,YF,cbe,rnr,tnr,bQ,anr,nnr,snr,KF,fbe,lnr,inr,vQ,dnr,cnr,fnr,ZF,mbe,mnr,gnr,FQ,hnr,pnr,_nr,e6,gbe,unr,bnr,TQ,vnr,Fnr,Tnr,o6,hbe,Mnr,Enr,MQ,Cnr,wnr,Anr,r6,pbe,Lnr,ynr,EQ,xnr,$nr,knr,t6,_be,Snr,Rnr,CQ,Pnr,Bnr,Inr,a6,ube,Nnr,qnr,wQ,jnr,Dnr,Gnr,n6,bbe,Onr,Vnr,AQ,Xnr,znr,Wnr,s6,vbe,Qnr,Hnr,LQ,Unr,Jnr,Ynr,l6,Fbe,Knr,Znr,yQ,esr,osr,rsr,i6,Tbe,tsr,asr,xQ,nsr,ssr,lsr,d6,Mbe,isr,dsr,$Q,csr,fsr,msr,c6,Ebe,gsr,hsr,kQ,psr,_sr,usr,f6,Cbe,bsr,vsr,SQ,Fsr,Tsr,Msr,m6,wbe,Esr,Csr,RQ,wsr,Asr,Lsr,g6,Abe,ysr,xsr,PQ,$sr,ksr,Ssr,h6,Lbe,Rsr,Psr,BQ,Bsr,Isr,Nsr,p6,ybe,qsr,jsr,IQ,Dsr,Gsr,Osr,_6,xbe,Vsr,Xsr,NQ,zsr,Wsr,Qsr,u6,$be,Hsr,Usr,qQ,Jsr,Ysr,Ksr,b6,kbe,Zsr,elr,jQ,olr,rlr,tlr,v6,Sbe,alr,nlr,DQ,slr,llr,ilr,F6,dlr,Rbe,clr,flr,Pbe,mlr,glr,T6,Oze,Fd,M6,Bbe,Vy,hlr,Ibe,plr,Vze,Oo,Xy,_lr,Td,ulr,GQ,blr,vlr,OQ,Flr,Tlr,Mlr,zy,Elr,Nbe,Clr,wlr,Alr,bt,Wy,Llr,qbe,ylr,xlr,Md,$lr,jbe,klr,Slr,VQ,Rlr,Plr,Blr,E6,Ilr,lo,Qy,Nlr,Dbe,qlr,jlr,Wa,Dlr,Gbe,Glr,Olr,Obe,Vlr,Xlr,Vbe,zlr,Wlr,Qlr,Xbe,C6,zbe,Hlr,Ulr,XQ,Jlr,Ylr,Klr,w6,Zlr,Wbe,eir,oir,Qbe,rir,tir,A6,Xze,Ed,L6,Hbe,Hy,air,Ube,nir,zze,Vo,Uy,sir,Cd,lir,zQ,iir,dir,WQ,cir,fir,mir,Jy,gir,Jbe,hir,pir,_ir,vt,Yy,uir,Ybe,bir,vir,wd,Fir,Kbe,Tir,Mir,QQ,Eir,Cir,wir,y6,Air,io,Ky,Lir,Zbe,yir,xir,Qa,$ir,eve,kir,Sir,ove,Rir,Pir,rve,Bir,Iir,Nir,be,x6,tve,qir,jir,HQ,Dir,Gir,Oir,$6,ave,Vir,Xir,UQ,zir,Wir,Qir,k6,nve,Hir,Uir,JQ,Jir,Yir,Kir,S6,sve,Zir,edr,YQ,odr,rdr,tdr,Ys,lve,adr,ndr,KQ,sdr,ldr,ZQ,idr,ddr,cdr,R6,ive,fdr,mdr,eH,gdr,hdr,pdr,Ks,dve,_dr,udr,oH,bdr,vdr,rH,Fdr,Tdr,Mdr,P6,cve,Edr,Cdr,tH,wdr,Adr,Ldr,Ft,fve,ydr,xdr,aH,$dr,kdr,nH,Sdr,Rdr,sH,Pdr,Bdr,Idr,B6,mve,Ndr,qdr,lH,jdr,Ddr,Gdr,I6,gve,Odr,Vdr,iH,Xdr,zdr,Wdr,N6,hve,Qdr,Hdr,dH,Udr,Jdr,Ydr,q6,pve,Kdr,Zdr,cH,ecr,ocr,rcr,j6,_ve,tcr,acr,fH,ncr,scr,lcr,D6,uve,icr,dcr,mH,ccr,fcr,mcr,G6,bve,gcr,hcr,gH,pcr,_cr,ucr,O6,vve,bcr,vcr,hH,Fcr,Tcr,Mcr,V6,Ecr,Fve,Ccr,wcr,Tve,Acr,Lcr,X6,Wze,Ad,z6,Mve,Zy,ycr,Eve,xcr,Qze,Xo,e9,$cr,Ld,kcr,pH,Scr,Rcr,_H,Pcr,Bcr,Icr,o9,Ncr,Cve,qcr,jcr,Dcr,Tt,r9,Gcr,wve,Ocr,Vcr,yd,Xcr,Ave,zcr,Wcr,uH,Qcr,Hcr,Ucr,W6,Jcr,co,t9,Ycr,Lve,Kcr,Zcr,Ha,efr,yve,ofr,rfr,xve,tfr,afr,$ve,nfr,sfr,lfr,kve,Q6,Sve,ifr,dfr,bH,cfr,ffr,mfr,H6,gfr,Rve,hfr,pfr,Pve,_fr,ufr,U6,Hze,xd,J6,Bve,a9,bfr,Ive,vfr,Uze,zo,n9,Ffr,$d,Tfr,vH,Mfr,Efr,FH,Cfr,wfr,Afr,s9,Lfr,Nve,yfr,xfr,$fr,Mt,l9,kfr,qve,Sfr,Rfr,kd,Pfr,jve,Bfr,Ifr,TH,Nfr,qfr,jfr,Y6,Dfr,fo,i9,Gfr,Dve,Ofr,Vfr,Ua,Xfr,Gve,zfr,Wfr,Ove,Qfr,Hfr,Vve,Ufr,Jfr,Yfr,Xve,K6,zve,Kfr,Zfr,MH,emr,omr,rmr,Z6,tmr,Wve,amr,nmr,Qve,smr,lmr,eT,Jze,Sd,oT,Hve,d9,imr,Uve,dmr,Yze,Wo,c9,cmr,Rd,fmr,EH,mmr,gmr,CH,hmr,pmr,_mr,f9,umr,Jve,bmr,vmr,Fmr,Et,m9,Tmr,Yve,Mmr,Emr,Pd,Cmr,Kve,wmr,Amr,wH,Lmr,ymr,xmr,rT,$mr,mo,g9,kmr,Zve,Smr,Rmr,Ja,Pmr,e3e,Bmr,Imr,o3e,Nmr,qmr,r3e,jmr,Dmr,Gmr,Pe,tT,t3e,Omr,Vmr,AH,Xmr,zmr,Wmr,aT,a3e,Qmr,Hmr,LH,Umr,Jmr,Ymr,nT,n3e,Kmr,Zmr,yH,egr,ogr,rgr,sT,s3e,tgr,agr,xH,ngr,sgr,lgr,lT,l3e,igr,dgr,$H,cgr,fgr,mgr,iT,i3e,ggr,hgr,kH,pgr,_gr,ugr,dT,d3e,bgr,vgr,SH,Fgr,Tgr,Mgr,cT,c3e,Egr,Cgr,RH,wgr,Agr,Lgr,fT,f3e,ygr,xgr,PH,$gr,kgr,Sgr,mT,Rgr,m3e,Pgr,Bgr,g3e,Igr,Ngr,gT,Kze,Bd,hT,h3e,h9,qgr,p3e,jgr,Zze,Qo,p9,Dgr,Id,Ggr,BH,Ogr,Vgr,IH,Xgr,zgr,Wgr,_9,Qgr,_3e,Hgr,Ugr,Jgr,Ct,u9,Ygr,u3e,Kgr,Zgr,Nd,ehr,b3e,ohr,rhr,NH,thr,ahr,nhr,pT,shr,go,b9,lhr,v3e,ihr,dhr,Ya,chr,F3e,fhr,mhr,T3e,ghr,hhr,M3e,phr,_hr,uhr,rt,_T,E3e,bhr,vhr,qH,Fhr,Thr,Mhr,uT,C3e,Ehr,Chr,jH,whr,Ahr,Lhr,bT,w3e,yhr,xhr,DH,$hr,khr,Shr,vT,A3e,Rhr,Phr,GH,Bhr,Ihr,Nhr,FT,L3e,qhr,jhr,OH,Dhr,Ghr,Ohr,TT,Vhr,y3e,Xhr,zhr,x3e,Whr,Qhr,MT,eWe,qd,ET,$3e,v9,Hhr,k3e,Uhr,oWe,Ho,F9,Jhr,jd,Yhr,VH,Khr,Zhr,XH,epr,opr,rpr,T9,tpr,S3e,apr,npr,spr,wt,M9,lpr,R3e,ipr,dpr,Dd,cpr,P3e,fpr,mpr,zH,gpr,hpr,ppr,CT,_pr,ho,E9,upr,B3e,bpr,vpr,Ka,Fpr,I3e,Tpr,Mpr,N3e,Epr,Cpr,q3e,wpr,Apr,Lpr,Le,wT,j3e,ypr,xpr,WH,$pr,kpr,Spr,AT,D3e,Rpr,Ppr,QH,Bpr,Ipr,Npr,LT,G3e,qpr,jpr,HH,Dpr,Gpr,Opr,yT,O3e,Vpr,Xpr,UH,zpr,Wpr,Qpr,xT,V3e,Hpr,Upr,JH,Jpr,Ypr,Kpr,$T,X3e,Zpr,e_r,YH,o_r,r_r,t_r,kT,z3e,a_r,n_r,KH,s_r,l_r,i_r,ST,W3e,d_r,c_r,ZH,f_r,m_r,g_r,RT,Q3e,h_r,p_r,eU,__r,u_r,b_r,PT,H3e,v_r,F_r,oU,T_r,M_r,E_r,BT,C_r,U3e,w_r,A_r,J3e,L_r,y_r,IT,rWe,Gd,NT,Y3e,C9,x_r,K3e,$_r,tWe,Uo,w9,k_r,Od,S_r,rU,R_r,P_r,tU,B_r,I_r,N_r,A9,q_r,Z3e,j_r,D_r,G_r,At,L9,O_r,eFe,V_r,X_r,Vd,z_r,oFe,W_r,Q_r,aU,H_r,U_r,J_r,qT,Y_r,po,y9,K_r,rFe,Z_r,eur,Za,our,tFe,rur,tur,aFe,aur,nur,nFe,sur,lur,iur,x9,jT,sFe,dur,cur,nU,fur,mur,gur,DT,lFe,hur,pur,sU,_ur,uur,bur,GT,vur,iFe,Fur,Tur,dFe,Mur,Eur,OT,aWe,Xd,VT,cFe,$9,Cur,fFe,wur,nWe,Jo,k9,Aur,zd,Lur,lU,yur,xur,iU,$ur,kur,Sur,S9,Rur,mFe,Pur,Bur,Iur,Lt,R9,Nur,gFe,qur,jur,Wd,Dur,hFe,Gur,Our,dU,Vur,Xur,zur,XT,Wur,_o,P9,Qur,pFe,Hur,Uur,en,Jur,_Fe,Yur,Kur,uFe,Zur,e1r,bFe,o1r,r1r,t1r,tt,zT,vFe,a1r,n1r,cU,s1r,l1r,i1r,WT,FFe,d1r,c1r,fU,f1r,m1r,g1r,QT,TFe,h1r,p1r,mU,_1r,u1r,b1r,HT,MFe,v1r,F1r,gU,T1r,M1r,E1r,UT,EFe,C1r,w1r,hU,A1r,L1r,y1r,JT,x1r,CFe,$1r,k1r,wFe,S1r,R1r,YT,sWe,Qd,KT,AFe,B9,P1r,LFe,B1r,lWe,Yo,I9,I1r,Hd,N1r,pU,q1r,j1r,_U,D1r,G1r,O1r,N9,V1r,yFe,X1r,z1r,W1r,yt,q9,Q1r,xFe,H1r,U1r,Ud,J1r,$Fe,Y1r,K1r,uU,Z1r,e2r,o2r,ZT,r2r,uo,j9,t2r,kFe,a2r,n2r,on,s2r,SFe,l2r,i2r,RFe,d2r,c2r,PFe,f2r,m2r,g2r,rn,e8,BFe,h2r,p2r,bU,_2r,u2r,b2r,o8,IFe,v2r,F2r,vU,T2r,M2r,E2r,r8,NFe,C2r,w2r,FU,A2r,L2r,y2r,t8,qFe,x2r,$2r,TU,k2r,S2r,R2r,a8,P2r,jFe,B2r,I2r,DFe,N2r,q2r,n8,iWe,Jd,s8,GFe,D9,j2r,OFe,D2r,dWe,Ko,G9,G2r,Yd,O2r,MU,V2r,X2r,EU,z2r,W2r,Q2r,O9,H2r,VFe,U2r,J2r,Y2r,xt,V9,K2r,XFe,Z2r,ebr,Kd,obr,zFe,rbr,tbr,CU,abr,nbr,sbr,l8,lbr,bo,X9,ibr,WFe,dbr,cbr,tn,fbr,QFe,mbr,gbr,HFe,hbr,pbr,UFe,_br,ubr,bbr,z9,i8,JFe,vbr,Fbr,wU,Tbr,Mbr,Ebr,d8,YFe,Cbr,wbr,AU,Abr,Lbr,ybr,c8,xbr,KFe,$br,kbr,ZFe,Sbr,Rbr,f8,cWe,Zd,m8,e6e,W9,Pbr,o6e,Bbr,fWe,Zo,Q9,Ibr,ec,Nbr,LU,qbr,jbr,yU,Dbr,Gbr,Obr,H9,Vbr,r6e,Xbr,zbr,Wbr,$t,U9,Qbr,t6e,Hbr,Ubr,oc,Jbr,a6e,Ybr,Kbr,xU,Zbr,evr,ovr,g8,rvr,vo,J9,tvr,n6e,avr,nvr,an,svr,s6e,lvr,ivr,l6e,dvr,cvr,i6e,fvr,mvr,gvr,d6e,h8,c6e,hvr,pvr,$U,_vr,uvr,bvr,p8,vvr,f6e,Fvr,Tvr,m6e,Mvr,Evr,_8,mWe,rc,u8,g6e,Y9,Cvr,h6e,wvr,gWe,er,K9,Avr,tc,Lvr,kU,yvr,xvr,SU,$vr,kvr,Svr,Z9,Rvr,p6e,Pvr,Bvr,Ivr,kt,ex,Nvr,_6e,qvr,jvr,ac,Dvr,u6e,Gvr,Ovr,RU,Vvr,Xvr,zvr,b8,Wvr,Fo,ox,Qvr,b6e,Hvr,Uvr,nn,Jvr,v6e,Yvr,Kvr,F6e,Zvr,e3r,T6e,o3r,r3r,t3r,at,v8,M6e,a3r,n3r,PU,s3r,l3r,i3r,F8,E6e,d3r,c3r,BU,f3r,m3r,g3r,T8,C6e,h3r,p3r,IU,_3r,u3r,b3r,M8,w6e,v3r,F3r,NU,T3r,M3r,E3r,E8,A6e,C3r,w3r,qU,A3r,L3r,y3r,C8,x3r,L6e,$3r,k3r,y6e,S3r,R3r,w8,hWe,nc,A8,x6e,rx,P3r,$6e,B3r,pWe,or,tx,I3r,sc,N3r,jU,q3r,j3r,DU,D3r,G3r,O3r,ax,V3r,k6e,X3r,z3r,W3r,St,nx,Q3r,S6e,H3r,U3r,lc,J3r,R6e,Y3r,K3r,GU,Z3r,eFr,oFr,L8,rFr,To,sx,tFr,P6e,aFr,nFr,sn,sFr,B6e,lFr,iFr,I6e,dFr,cFr,N6e,fFr,mFr,gFr,q6e,y8,j6e,hFr,pFr,OU,_Fr,uFr,bFr,x8,vFr,D6e,FFr,TFr,G6e,MFr,EFr,$8,_We,ic,k8,O6e,lx,CFr,V6e,wFr,uWe,rr,ix,AFr,dc,LFr,VU,yFr,xFr,XU,$Fr,kFr,SFr,dx,RFr,X6e,PFr,BFr,IFr,Rt,cx,NFr,z6e,qFr,jFr,cc,DFr,W6e,GFr,OFr,zU,VFr,XFr,zFr,S8,WFr,$r,fx,QFr,Q6e,HFr,UFr,ln,JFr,H6e,YFr,KFr,U6e,ZFr,e6r,J6e,o6r,r6r,t6r,I,R8,Y6e,a6r,n6r,WU,s6r,l6r,i6r,P8,K6e,d6r,c6r,QU,f6r,m6r,g6r,B8,Z6e,h6r,p6r,HU,_6r,u6r,b6r,I8,eTe,v6r,F6r,UU,T6r,M6r,E6r,N8,oTe,C6r,w6r,JU,A6r,L6r,y6r,q8,rTe,x6r,$6r,YU,k6r,S6r,R6r,j8,tTe,P6r,B6r,KU,I6r,N6r,q6r,D8,aTe,j6r,D6r,ZU,G6r,O6r,V6r,G8,nTe,X6r,z6r,eJ,W6r,Q6r,H6r,O8,sTe,U6r,J6r,oJ,Y6r,K6r,Z6r,V8,lTe,eTr,oTr,rJ,rTr,tTr,aTr,X8,iTe,nTr,sTr,tJ,lTr,iTr,dTr,z8,dTe,cTr,fTr,aJ,mTr,gTr,hTr,W8,cTe,pTr,_Tr,nJ,uTr,bTr,vTr,Q8,fTe,FTr,TTr,sJ,MTr,ETr,CTr,H8,mTe,wTr,ATr,lJ,LTr,yTr,xTr,U8,gTe,$Tr,kTr,iJ,STr,RTr,PTr,J8,hTe,BTr,ITr,dJ,NTr,qTr,jTr,Zs,pTe,DTr,GTr,cJ,OTr,VTr,fJ,XTr,zTr,WTr,Y8,_Te,QTr,HTr,mJ,UTr,JTr,YTr,K8,uTe,KTr,ZTr,gJ,e8r,o8r,r8r,Z8,bTe,t8r,a8r,hJ,n8r,s8r,l8r,eM,vTe,i8r,d8r,pJ,c8r,f8r,m8r,oM,FTe,g8r,h8r,_J,p8r,_8r,u8r,rM,TTe,b8r,v8r,uJ,F8r,T8r,M8r,tM,MTe,E8r,C8r,bJ,w8r,A8r,L8r,aM,ETe,y8r,x8r,vJ,$8r,k8r,S8r,nM,CTe,R8r,P8r,FJ,B8r,I8r,N8r,sM,wTe,q8r,j8r,TJ,D8r,G8r,O8r,lM,ATe,V8r,X8r,MJ,z8r,W8r,Q8r,iM,LTe,H8r,U8r,EJ,J8r,Y8r,K8r,dM,yTe,Z8r,eMr,CJ,oMr,rMr,tMr,cM,xTe,aMr,nMr,wJ,sMr,lMr,iMr,fM,$Te,dMr,cMr,AJ,fMr,mMr,gMr,mM,kTe,hMr,pMr,LJ,_Mr,uMr,bMr,gM,STe,vMr,FMr,yJ,TMr,MMr,EMr,hM,RTe,CMr,wMr,xJ,AMr,LMr,yMr,pM,PTe,xMr,$Mr,$J,kMr,SMr,RMr,_M,BTe,PMr,BMr,kJ,IMr,NMr,qMr,uM,ITe,jMr,DMr,SJ,GMr,OMr,VMr,bM,NTe,XMr,zMr,RJ,WMr,QMr,HMr,vM,qTe,UMr,JMr,PJ,YMr,KMr,ZMr,FM,jTe,e4r,o4r,BJ,r4r,t4r,a4r,TM,DTe,n4r,s4r,IJ,l4r,i4r,d4r,MM,GTe,c4r,f4r,NJ,m4r,g4r,h4r,EM,OTe,p4r,_4r,qJ,u4r,b4r,v4r,CM,VTe,F4r,T4r,jJ,M4r,E4r,C4r,wM,XTe,w4r,A4r,DJ,L4r,y4r,x4r,AM,zTe,$4r,k4r,GJ,S4r,R4r,P4r,LM,WTe,B4r,I4r,OJ,N4r,q4r,j4r,yM,QTe,D4r,G4r,VJ,O4r,V4r,X4r,xM,bWe,fc,$M,HTe,mx,z4r,UTe,W4r,vWe,tr,gx,Q4r,mc,H4r,XJ,U4r,J4r,zJ,Y4r,K4r,Z4r,hx,eEr,JTe,oEr,rEr,tEr,Pt,px,aEr,YTe,nEr,sEr,gc,lEr,KTe,iEr,dEr,WJ,cEr,fEr,mEr,kM,gEr,kr,_x,hEr,ZTe,pEr,_Er,dn,uEr,e8e,bEr,vEr,o8e,FEr,TEr,r8e,MEr,EEr,CEr,se,SM,t8e,wEr,AEr,QJ,LEr,yEr,xEr,RM,a8e,$Er,kEr,HJ,SEr,REr,PEr,PM,n8e,BEr,IEr,UJ,NEr,qEr,jEr,BM,s8e,DEr,GEr,JJ,OEr,VEr,XEr,IM,l8e,zEr,WEr,YJ,QEr,HEr,UEr,NM,i8e,JEr,YEr,KJ,KEr,ZEr,eCr,qM,d8e,oCr,rCr,ZJ,tCr,aCr,nCr,jM,c8e,sCr,lCr,eY,iCr,dCr,cCr,DM,f8e,fCr,mCr,oY,gCr,hCr,pCr,GM,m8e,_Cr,uCr,rY,bCr,vCr,FCr,OM,g8e,TCr,MCr,tY,ECr,CCr,wCr,VM,h8e,ACr,LCr,aY,yCr,xCr,$Cr,XM,p8e,kCr,SCr,nY,RCr,PCr,BCr,zM,_8e,ICr,NCr,sY,qCr,jCr,DCr,WM,u8e,GCr,OCr,lY,VCr,XCr,zCr,QM,b8e,WCr,QCr,iY,HCr,UCr,JCr,HM,v8e,YCr,KCr,dY,ZCr,e5r,o5r,UM,F8e,r5r,t5r,cY,a5r,n5r,s5r,JM,T8e,l5r,i5r,fY,d5r,c5r,f5r,YM,M8e,m5r,g5r,mY,h5r,p5r,_5r,KM,E8e,u5r,b5r,gY,v5r,F5r,T5r,ZM,C8e,M5r,E5r,hY,C5r,w5r,A5r,e4,w8e,L5r,y5r,pY,x5r,$5r,k5r,o4,FWe,hc,r4,A8e,ux,S5r,L8e,R5r,TWe,ar,bx,P5r,pc,B5r,_Y,I5r,N5r,uY,q5r,j5r,D5r,vx,G5r,y8e,O5r,V5r,X5r,Bt,Fx,z5r,x8e,W5r,Q5r,_c,H5r,$8e,U5r,J5r,bY,Y5r,K5r,Z5r,t4,e0r,Sr,Tx,o0r,k8e,r0r,t0r,cn,a0r,S8e,n0r,s0r,R8e,l0r,i0r,P8e,d0r,c0r,f0r,Me,a4,B8e,m0r,g0r,vY,h0r,p0r,_0r,n4,I8e,u0r,b0r,FY,v0r,F0r,T0r,s4,N8e,M0r,E0r,TY,C0r,w0r,A0r,l4,q8e,L0r,y0r,MY,x0r,$0r,k0r,i4,j8e,S0r,R0r,EY,P0r,B0r,I0r,d4,D8e,N0r,q0r,CY,j0r,D0r,G0r,c4,G8e,O0r,V0r,wY,X0r,z0r,W0r,f4,O8e,Q0r,H0r,AY,U0r,J0r,Y0r,m4,V8e,K0r,Z0r,LY,ewr,owr,rwr,g4,X8e,twr,awr,yY,nwr,swr,lwr,h4,z8e,iwr,dwr,xY,cwr,fwr,mwr,p4,W8e,gwr,hwr,$Y,pwr,_wr,uwr,_4,Q8e,bwr,vwr,kY,Fwr,Twr,Mwr,u4,MWe,uc,b4,H8e,Mx,Ewr,U8e,Cwr,EWe,nr,Ex,wwr,bc,Awr,SY,Lwr,ywr,RY,xwr,$wr,kwr,Cx,Swr,J8e,Rwr,Pwr,Bwr,It,wx,Iwr,Y8e,Nwr,qwr,vc,jwr,K8e,Dwr,Gwr,PY,Owr,Vwr,Xwr,v4,zwr,Rr,Ax,Wwr,Z8e,Qwr,Hwr,fn,Uwr,eMe,Jwr,Ywr,oMe,Kwr,Zwr,rMe,eAr,oAr,rAr,Ve,F4,tMe,tAr,aAr,BY,nAr,sAr,lAr,T4,aMe,iAr,dAr,IY,cAr,fAr,mAr,el,nMe,gAr,hAr,NY,pAr,_Ar,qY,uAr,bAr,vAr,M4,sMe,FAr,TAr,jY,MAr,EAr,CAr,E4,lMe,wAr,AAr,DY,LAr,yAr,xAr,C4,iMe,$Ar,kAr,GY,SAr,RAr,PAr,w4,dMe,BAr,IAr,OY,NAr,qAr,jAr,A4,cMe,DAr,GAr,VY,OAr,VAr,XAr,L4,CWe,Fc,y4,fMe,Lx,zAr,mMe,WAr,wWe,sr,yx,QAr,Tc,HAr,XY,UAr,JAr,zY,YAr,KAr,ZAr,xx,e7r,gMe,o7r,r7r,t7r,Nt,$x,a7r,hMe,n7r,s7r,Mc,l7r,pMe,i7r,d7r,WY,c7r,f7r,m7r,x4,g7r,Pr,kx,h7r,_Me,p7r,_7r,mn,u7r,uMe,b7r,v7r,bMe,F7r,T7r,vMe,M7r,E7r,C7r,ie,$4,FMe,w7r,A7r,QY,L7r,y7r,x7r,k4,TMe,$7r,k7r,HY,S7r,R7r,P7r,S4,MMe,B7r,I7r,UY,N7r,q7r,j7r,R4,EMe,D7r,G7r,JY,O7r,V7r,X7r,P4,CMe,z7r,W7r,YY,Q7r,H7r,U7r,B4,wMe,J7r,Y7r,KY,K7r,Z7r,eLr,I4,AMe,oLr,rLr,ZY,tLr,aLr,nLr,N4,LMe,sLr,lLr,eK,iLr,dLr,cLr,q4,yMe,fLr,mLr,oK,gLr,hLr,pLr,j4,xMe,_Lr,uLr,rK,bLr,vLr,FLr,D4,$Me,TLr,MLr,tK,ELr,CLr,wLr,G4,kMe,ALr,LLr,aK,yLr,xLr,$Lr,O4,SMe,kLr,SLr,nK,RLr,PLr,BLr,V4,RMe,ILr,NLr,sK,qLr,jLr,DLr,X4,PMe,GLr,OLr,lK,VLr,XLr,zLr,z4,BMe,WLr,QLr,iK,HLr,ULr,JLr,W4,IMe,YLr,KLr,dK,ZLr,eyr,oyr,Q4,NMe,ryr,tyr,cK,ayr,nyr,syr,H4,qMe,lyr,iyr,fK,dyr,cyr,fyr,U4,jMe,myr,gyr,mK,hyr,pyr,_yr,J4,AWe,Ec,Y4,DMe,Sx,uyr,GMe,byr,LWe,lr,Rx,vyr,Cc,Fyr,gK,Tyr,Myr,hK,Eyr,Cyr,wyr,Px,Ayr,OMe,Lyr,yyr,xyr,qt,Bx,$yr,VMe,kyr,Syr,wc,Ryr,XMe,Pyr,Byr,pK,Iyr,Nyr,qyr,K4,jyr,Br,Ix,Dyr,zMe,Gyr,Oyr,gn,Vyr,WMe,Xyr,zyr,QMe,Wyr,Qyr,HMe,Hyr,Uyr,Jyr,ye,Z4,UMe,Yyr,Kyr,_K,Zyr,e9r,o9r,eE,JMe,r9r,t9r,uK,a9r,n9r,s9r,oE,YMe,l9r,i9r,bK,d9r,c9r,f9r,rE,KMe,m9r,g9r,vK,h9r,p9r,_9r,tE,ZMe,u9r,b9r,FK,v9r,F9r,T9r,aE,e4e,M9r,E9r,TK,C9r,w9r,A9r,nE,o4e,L9r,y9r,MK,x9r,$9r,k9r,sE,r4e,S9r,R9r,EK,P9r,B9r,I9r,lE,t4e,N9r,q9r,CK,j9r,D9r,G9r,iE,a4e,O9r,V9r,wK,X9r,z9r,W9r,dE,yWe,Ac,cE,n4e,Nx,Q9r,s4e,H9r,xWe,ir,qx,U9r,Lc,J9r,AK,Y9r,K9r,LK,Z9r,exr,oxr,jx,rxr,l4e,txr,axr,nxr,jt,Dx,sxr,i4e,lxr,ixr,yc,dxr,d4e,cxr,fxr,yK,mxr,gxr,hxr,fE,pxr,Ir,Gx,_xr,c4e,uxr,bxr,hn,vxr,f4e,Fxr,Txr,m4e,Mxr,Exr,g4e,Cxr,wxr,Axr,te,mE,h4e,Lxr,yxr,xK,xxr,$xr,kxr,gE,p4e,Sxr,Rxr,$K,Pxr,Bxr,Ixr,hE,_4e,Nxr,qxr,kK,jxr,Dxr,Gxr,pE,u4e,Oxr,Vxr,SK,Xxr,zxr,Wxr,_E,b4e,Qxr,Hxr,RK,Uxr,Jxr,Yxr,uE,v4e,Kxr,Zxr,PK,e$r,o$r,r$r,bE,F4e,t$r,a$r,BK,n$r,s$r,l$r,vE,T4e,i$r,d$r,IK,c$r,f$r,m$r,FE,M4e,g$r,h$r,NK,p$r,_$r,u$r,TE,E4e,b$r,v$r,qK,F$r,T$r,M$r,ME,C4e,E$r,C$r,jK,w$r,A$r,L$r,EE,w4e,y$r,x$r,DK,$$r,k$r,S$r,CE,A4e,R$r,P$r,GK,B$r,I$r,N$r,wE,L4e,q$r,j$r,OK,D$r,G$r,O$r,AE,y4e,V$r,X$r,VK,z$r,W$r,Q$r,LE,x4e,H$r,U$r,XK,J$r,Y$r,K$r,yE,$4e,Z$r,ekr,zK,okr,rkr,tkr,xE,k4e,akr,nkr,WK,skr,lkr,ikr,$E,S4e,dkr,ckr,QK,fkr,mkr,gkr,kE,R4e,hkr,pkr,HK,_kr,ukr,bkr,SE,P4e,vkr,Fkr,UK,Tkr,Mkr,Ekr,RE,B4e,Ckr,wkr,JK,Akr,Lkr,ykr,PE,I4e,xkr,$kr,YK,kkr,Skr,Rkr,BE,N4e,Pkr,Bkr,KK,Ikr,Nkr,qkr,IE,q4e,jkr,Dkr,ZK,Gkr,Okr,Vkr,NE,j4e,Xkr,zkr,eZ,Wkr,Qkr,Hkr,qE,$We,xc,jE,D4e,Ox,Ukr,G4e,Jkr,kWe,dr,Vx,Ykr,$c,Kkr,oZ,Zkr,eSr,rZ,oSr,rSr,tSr,Xx,aSr,O4e,nSr,sSr,lSr,Dt,zx,iSr,V4e,dSr,cSr,kc,fSr,X4e,mSr,gSr,tZ,hSr,pSr,_Sr,DE,uSr,Nr,Wx,bSr,z4e,vSr,FSr,pn,TSr,W4e,MSr,ESr,Q4e,CSr,wSr,H4e,ASr,LSr,ySr,ve,GE,U4e,xSr,$Sr,aZ,kSr,SSr,RSr,OE,J4e,PSr,BSr,nZ,ISr,NSr,qSr,VE,Y4e,jSr,DSr,sZ,GSr,OSr,VSr,XE,K4e,XSr,zSr,lZ,WSr,QSr,HSr,zE,Z4e,USr,JSr,iZ,YSr,KSr,ZSr,WE,eEe,eRr,oRr,dZ,rRr,tRr,aRr,QE,oEe,nRr,sRr,cZ,lRr,iRr,dRr,HE,rEe,cRr,fRr,fZ,mRr,gRr,hRr,UE,tEe,pRr,_Rr,mZ,uRr,bRr,vRr,JE,aEe,FRr,TRr,gZ,MRr,ERr,CRr,YE,nEe,wRr,ARr,hZ,LRr,yRr,xRr,KE,sEe,$Rr,kRr,pZ,SRr,RRr,PRr,ZE,lEe,BRr,IRr,_Z,NRr,qRr,jRr,eC,iEe,DRr,GRr,uZ,ORr,VRr,XRr,oC,dEe,zRr,WRr,bZ,QRr,HRr,URr,rC,cEe,JRr,YRr,vZ,KRr,ZRr,ePr,tC,fEe,oPr,rPr,FZ,tPr,aPr,nPr,aC,SWe,Sc,nC,mEe,Qx,sPr,gEe,lPr,RWe,cr,Hx,iPr,Rc,dPr,TZ,cPr,fPr,MZ,mPr,gPr,hPr,Ux,pPr,hEe,_Pr,uPr,bPr,Gt,Jx,vPr,pEe,FPr,TPr,Pc,MPr,_Ee,EPr,CPr,EZ,wPr,APr,LPr,sC,yPr,qr,Yx,xPr,uEe,$Pr,kPr,_n,SPr,bEe,RPr,PPr,vEe,BPr,IPr,FEe,NPr,qPr,jPr,Kx,lC,TEe,DPr,GPr,CZ,OPr,VPr,XPr,iC,MEe,zPr,WPr,wZ,QPr,HPr,UPr,dC,PWe,Bc,cC,EEe,Zx,JPr,CEe,YPr,BWe,fr,e$,KPr,Ic,ZPr,AZ,eBr,oBr,LZ,rBr,tBr,aBr,o$,nBr,wEe,sBr,lBr,iBr,Ot,r$,dBr,AEe,cBr,fBr,Nc,mBr,LEe,gBr,hBr,yZ,pBr,_Br,uBr,fC,bBr,jr,t$,vBr,yEe,FBr,TBr,un,MBr,xEe,EBr,CBr,$Ee,wBr,ABr,kEe,LBr,yBr,xBr,SEe,mC,REe,$Br,kBr,xZ,SBr,RBr,PBr,gC,IWe,qc,hC,PEe,a$,BBr,BEe,IBr,NWe,mr,n$,NBr,jc,qBr,$Z,jBr,DBr,kZ,GBr,OBr,VBr,s$,XBr,IEe,zBr,WBr,QBr,Vt,l$,HBr,NEe,UBr,JBr,Dc,YBr,qEe,KBr,ZBr,SZ,eIr,oIr,rIr,pC,tIr,Dr,i$,aIr,jEe,nIr,sIr,bn,lIr,DEe,iIr,dIr,GEe,cIr,fIr,OEe,mIr,gIr,hIr,de,_C,VEe,pIr,_Ir,RZ,uIr,bIr,vIr,uC,XEe,FIr,TIr,PZ,MIr,EIr,CIr,bC,zEe,wIr,AIr,BZ,LIr,yIr,xIr,vC,WEe,$Ir,kIr,IZ,SIr,RIr,PIr,FC,QEe,BIr,IIr,NZ,NIr,qIr,jIr,TC,HEe,DIr,GIr,qZ,OIr,VIr,XIr,MC,UEe,zIr,WIr,jZ,QIr,HIr,UIr,EC,JEe,JIr,YIr,DZ,KIr,ZIr,eNr,CC,YEe,oNr,rNr,GZ,tNr,aNr,nNr,wC,KEe,sNr,lNr,OZ,iNr,dNr,cNr,AC,ZEe,fNr,mNr,VZ,gNr,hNr,pNr,LC,eCe,_Nr,uNr,XZ,bNr,vNr,FNr,yC,oCe,TNr,MNr,zZ,ENr,CNr,wNr,xC,rCe,ANr,LNr,WZ,yNr,xNr,$Nr,$C,tCe,kNr,SNr,QZ,RNr,PNr,BNr,kC,aCe,INr,NNr,HZ,qNr,jNr,DNr,SC,nCe,GNr,ONr,UZ,VNr,XNr,zNr,RC,sCe,WNr,QNr,JZ,HNr,UNr,JNr,PC,lCe,YNr,KNr,YZ,ZNr,eqr,oqr,BC,iCe,rqr,tqr,KZ,aqr,nqr,sqr,IC,qWe,Gc,NC,dCe,d$,lqr,cCe,iqr,jWe,gr,c$,dqr,Oc,cqr,ZZ,fqr,mqr,eee,gqr,hqr,pqr,f$,_qr,fCe,uqr,bqr,vqr,Xt,m$,Fqr,mCe,Tqr,Mqr,Vc,Eqr,gCe,Cqr,wqr,oee,Aqr,Lqr,yqr,qC,xqr,Gr,g$,$qr,hCe,kqr,Sqr,vn,Rqr,pCe,Pqr,Bqr,_Ce,Iqr,Nqr,uCe,qqr,jqr,Dqr,ce,jC,bCe,Gqr,Oqr,ree,Vqr,Xqr,zqr,DC,vCe,Wqr,Qqr,tee,Hqr,Uqr,Jqr,GC,FCe,Yqr,Kqr,aee,Zqr,ejr,ojr,OC,TCe,rjr,tjr,nee,ajr,njr,sjr,VC,MCe,ljr,ijr,see,djr,cjr,fjr,XC,ECe,mjr,gjr,lee,hjr,pjr,_jr,zC,CCe,ujr,bjr,iee,vjr,Fjr,Tjr,WC,wCe,Mjr,Ejr,dee,Cjr,wjr,Ajr,QC,ACe,Ljr,yjr,cee,xjr,$jr,kjr,HC,LCe,Sjr,Rjr,fee,Pjr,Bjr,Ijr,UC,yCe,Njr,qjr,mee,jjr,Djr,Gjr,JC,xCe,Ojr,Vjr,gee,Xjr,zjr,Wjr,YC,$Ce,Qjr,Hjr,hee,Ujr,Jjr,Yjr,KC,kCe,Kjr,Zjr,pee,eDr,oDr,rDr,ZC,SCe,tDr,aDr,_ee,nDr,sDr,lDr,e5,RCe,iDr,dDr,uee,cDr,fDr,mDr,o5,PCe,gDr,hDr,bee,pDr,_Dr,uDr,r5,BCe,bDr,vDr,vee,FDr,TDr,MDr,t5,ICe,EDr,CDr,Fee,wDr,ADr,LDr,a5,NCe,yDr,xDr,Tee,$Dr,kDr,SDr,n5,DWe,Xc,s5,qCe,h$,RDr,jCe,PDr,GWe,hr,p$,BDr,zc,IDr,Mee,NDr,qDr,Eee,jDr,DDr,GDr,_$,ODr,DCe,VDr,XDr,zDr,zt,u$,WDr,GCe,QDr,HDr,Wc,UDr,OCe,JDr,YDr,Cee,KDr,ZDr,eGr,l5,oGr,Or,b$,rGr,VCe,tGr,aGr,Fn,nGr,XCe,sGr,lGr,zCe,iGr,dGr,WCe,cGr,fGr,mGr,QCe,i5,HCe,gGr,hGr,wee,pGr,_Gr,uGr,d5,OWe,Qc,c5,UCe,v$,bGr,JCe,vGr,VWe,pr,F$,FGr,Hc,TGr,Aee,MGr,EGr,Lee,CGr,wGr,AGr,T$,LGr,YCe,yGr,xGr,$Gr,Wt,M$,kGr,KCe,SGr,RGr,Uc,PGr,ZCe,BGr,IGr,yee,NGr,qGr,jGr,f5,DGr,Vr,E$,GGr,e5e,OGr,VGr,Tn,XGr,o5e,zGr,WGr,r5e,QGr,HGr,t5e,UGr,JGr,YGr,a5e,m5,n5e,KGr,ZGr,xee,eOr,oOr,rOr,g5,XWe,Jc,h5,s5e,C$,tOr,l5e,aOr,zWe,_r,w$,nOr,Yc,sOr,$ee,lOr,iOr,kee,dOr,cOr,fOr,A$,mOr,i5e,gOr,hOr,pOr,Qt,L$,_Or,d5e,uOr,bOr,Kc,vOr,c5e,FOr,TOr,See,MOr,EOr,COr,p5,wOr,Xr,y$,AOr,f5e,LOr,yOr,Mn,xOr,m5e,$Or,kOr,g5e,SOr,ROr,h5e,POr,BOr,IOr,oe,_5,p5e,NOr,qOr,Ree,jOr,DOr,GOr,u5,_5e,OOr,VOr,Pee,XOr,zOr,WOr,b5,u5e,QOr,HOr,Bee,UOr,JOr,YOr,v5,b5e,KOr,ZOr,Iee,eVr,oVr,rVr,F5,v5e,tVr,aVr,Nee,nVr,sVr,lVr,T5,F5e,iVr,dVr,qee,cVr,fVr,mVr,M5,T5e,gVr,hVr,jee,pVr,_Vr,uVr,E5,M5e,bVr,vVr,Dee,FVr,TVr,MVr,C5,E5e,EVr,CVr,Gee,wVr,AVr,LVr,w5,C5e,yVr,xVr,Oee,$Vr,kVr,SVr,A5,w5e,RVr,PVr,Vee,BVr,IVr,NVr,L5,A5e,qVr,jVr,Xee,DVr,GVr,OVr,y5,L5e,VVr,XVr,zee,zVr,WVr,QVr,x5,y5e,HVr,UVr,Wee,JVr,YVr,KVr,$5,x5e,ZVr,eXr,Qee,oXr,rXr,tXr,k5,$5e,aXr,nXr,Hee,sXr,lXr,iXr,S5,k5e,dXr,cXr,Uee,fXr,mXr,gXr,R5,S5e,hXr,pXr,Jee,_Xr,uXr,bXr,P5,R5e,vXr,FXr,Yee,TXr,MXr,EXr,B5,P5e,CXr,wXr,Kee,AXr,LXr,yXr,I5,B5e,xXr,$Xr,Zee,kXr,SXr,RXr,N5,I5e,PXr,BXr,eoe,IXr,NXr,qXr,q5,N5e,jXr,DXr,ooe,GXr,OXr,VXr,j5,q5e,XXr,zXr,roe,WXr,QXr,HXr,D5,j5e,UXr,JXr,toe,YXr,KXr,ZXr,G5,D5e,ezr,ozr,aoe,rzr,tzr,azr,O5,G5e,nzr,szr,noe,lzr,izr,dzr,V5,WWe,Zc,X5,O5e,x$,czr,V5e,fzr,QWe,ur,$$,mzr,ef,gzr,soe,hzr,pzr,loe,_zr,uzr,bzr,k$,vzr,X5e,Fzr,Tzr,Mzr,Ht,S$,Ezr,z5e,Czr,wzr,of,Azr,W5e,Lzr,yzr,ioe,xzr,$zr,kzr,z5,Szr,zr,R$,Rzr,Q5e,Pzr,Bzr,En,Izr,H5e,Nzr,qzr,U5e,jzr,Dzr,J5e,Gzr,Ozr,Vzr,xe,W5,Y5e,Xzr,zzr,doe,Wzr,Qzr,Hzr,Q5,K5e,Uzr,Jzr,coe,Yzr,Kzr,Zzr,H5,Z5e,eWr,oWr,foe,rWr,tWr,aWr,U5,e0e,nWr,sWr,moe,lWr,iWr,dWr,J5,o0e,cWr,fWr,goe,mWr,gWr,hWr,Y5,r0e,pWr,_Wr,hoe,uWr,bWr,vWr,K5,t0e,FWr,TWr,poe,MWr,EWr,CWr,Z5,a0e,wWr,AWr,_oe,LWr,yWr,xWr,e0,n0e,$Wr,kWr,uoe,SWr,RWr,PWr,o0,s0e,BWr,IWr,boe,NWr,qWr,jWr,r0,HWe,rf,t0,l0e,P$,DWr,i0e,GWr,UWe,br,B$,OWr,tf,VWr,voe,XWr,zWr,Foe,WWr,QWr,HWr,I$,UWr,d0e,JWr,YWr,KWr,Ut,N$,ZWr,c0e,eQr,oQr,af,rQr,f0e,tQr,aQr,Toe,nQr,sQr,lQr,a0,iQr,Wr,q$,dQr,m0e,cQr,fQr,Cn,mQr,g0e,gQr,hQr,h0e,pQr,_Qr,p0e,uQr,bQr,vQr,Ee,n0,_0e,FQr,TQr,Moe,MQr,EQr,CQr,s0,u0e,wQr,AQr,Eoe,LQr,yQr,xQr,l0,b0e,$Qr,kQr,Coe,SQr,RQr,PQr,i0,v0e,BQr,IQr,woe,NQr,qQr,jQr,d0,F0e,DQr,GQr,Aoe,OQr,VQr,XQr,c0,T0e,zQr,WQr,Loe,QQr,HQr,UQr,f0,M0e,JQr,YQr,yoe,KQr,ZQr,eHr,m0,E0e,oHr,rHr,xoe,tHr,aHr,nHr,g0,C0e,sHr,lHr,$oe,iHr,dHr,cHr,h0,w0e,fHr,mHr,koe,gHr,hHr,pHr,p0,A0e,_Hr,uHr,Soe,bHr,vHr,FHr,_0,L0e,THr,MHr,Roe,EHr,CHr,wHr,u0,y0e,AHr,LHr,Poe,yHr,xHr,$Hr,b0,JWe,nf,v0,x0e,j$,kHr,$0e,SHr,YWe,vr,D$,RHr,sf,PHr,Boe,BHr,IHr,Ioe,NHr,qHr,jHr,G$,DHr,k0e,GHr,OHr,VHr,Jt,O$,XHr,S0e,zHr,WHr,lf,QHr,R0e,HHr,UHr,Noe,JHr,YHr,KHr,F0,ZHr,Qr,V$,eUr,P0e,oUr,rUr,wn,tUr,B0e,aUr,nUr,I0e,sUr,lUr,N0e,iUr,dUr,cUr,$e,T0,q0e,fUr,mUr,qoe,gUr,hUr,pUr,M0,j0e,_Ur,uUr,joe,bUr,vUr,FUr,E0,D0e,TUr,MUr,Doe,EUr,CUr,wUr,C0,G0e,AUr,LUr,Goe,yUr,xUr,$Ur,w0,O0e,kUr,SUr,Ooe,RUr,PUr,BUr,A0,V0e,IUr,NUr,Voe,qUr,jUr,DUr,L0,X0e,GUr,OUr,Xoe,VUr,XUr,zUr,y0,z0e,WUr,QUr,zoe,HUr,UUr,JUr,x0,W0e,YUr,KUr,Woe,ZUr,eJr,oJr,$0,Q0e,rJr,tJr,Qoe,aJr,nJr,sJr,k0,KWe,df,S0,H0e,X$,lJr,U0e,iJr,ZWe,Fr,z$,dJr,cf,cJr,Hoe,fJr,mJr,Uoe,gJr,hJr,pJr,W$,_Jr,J0e,uJr,bJr,vJr,Yt,Q$,FJr,Y0e,TJr,MJr,ff,EJr,K0e,CJr,wJr,Joe,AJr,LJr,yJr,R0,xJr,Hr,H$,$Jr,Z0e,kJr,SJr,An,RJr,ewe,PJr,BJr,owe,IJr,NJr,rwe,qJr,jJr,DJr,ke,P0,twe,GJr,OJr,Yoe,VJr,XJr,zJr,B0,awe,WJr,QJr,Koe,HJr,UJr,JJr,I0,nwe,YJr,KJr,Zoe,ZJr,eYr,oYr,N0,swe,rYr,tYr,ere,aYr,nYr,sYr,q0,lwe,lYr,iYr,ore,dYr,cYr,fYr,j0,iwe,mYr,gYr,rre,hYr,pYr,_Yr,D0,dwe,uYr,bYr,tre,vYr,FYr,TYr,G0,cwe,MYr,EYr,are,CYr,wYr,AYr,O0,fwe,LYr,yYr,nre,xYr,$Yr,kYr,V0,mwe,SYr,RYr,sre,PYr,BYr,IYr,X0,eQe,mf,z0,gwe,U$,NYr,hwe,qYr,oQe,Tr,J$,jYr,gf,DYr,lre,GYr,OYr,ire,VYr,XYr,zYr,Y$,WYr,pwe,QYr,HYr,UYr,Kt,K$,JYr,_we,YYr,KYr,hf,ZYr,uwe,eKr,oKr,dre,rKr,tKr,aKr,W0,nKr,Ur,Z$,sKr,bwe,lKr,iKr,Ln,dKr,vwe,cKr,fKr,Fwe,mKr,gKr,Twe,hKr,pKr,_Kr,Se,Q0,Mwe,uKr,bKr,cre,vKr,FKr,TKr,H0,Ewe,MKr,EKr,fre,CKr,wKr,AKr,U0,Cwe,LKr,yKr,mre,xKr,$Kr,kKr,J0,wwe,SKr,RKr,gre,PKr,BKr,IKr,Y0,Awe,NKr,qKr,hre,jKr,DKr,GKr,K0,Lwe,OKr,VKr,pre,XKr,zKr,WKr,Z0,ywe,QKr,HKr,_re,UKr,JKr,YKr,ew,xwe,KKr,ZKr,ure,eZr,oZr,rZr,ow,$we,tZr,aZr,bre,nZr,sZr,lZr,rw,kwe,iZr,dZr,vre,cZr,fZr,mZr,tw,rQe,pf,aw,Swe,ek,gZr,Rwe,hZr,tQe,Mr,ok,pZr,_f,_Zr,Fre,uZr,bZr,Tre,vZr,FZr,TZr,rk,MZr,Pwe,EZr,CZr,wZr,Zt,tk,AZr,Bwe,LZr,yZr,uf,xZr,Iwe,$Zr,kZr,Mre,SZr,RZr,PZr,nw,BZr,Jr,ak,IZr,Nwe,NZr,qZr,yn,jZr,qwe,DZr,GZr,jwe,OZr,VZr,Dwe,XZr,zZr,WZr,Re,sw,Gwe,QZr,HZr,Ere,UZr,JZr,YZr,lw,Owe,KZr,ZZr,Cre,eet,oet,ret,iw,Vwe,tet,aet,wre,net,set,iet,dw,Xwe,det,cet,Are,fet,met,get,cw,zwe,het,pet,Lre,_et,uet,bet,fw,Wwe,vet,Fet,yre,Tet,Met,Eet,mw,Qwe,Cet,wet,xre,Aet,Let,yet,gw,Hwe,xet,$et,$re,ket,Set,Ret,hw,Uwe,Pet,Bet,kre,Iet,Net,qet,pw,Jwe,jet,Det,Sre,Get,Oet,Vet,_w,aQe,bf,uw,Ywe,nk,Xet,Kwe,zet,nQe,Er,sk,Wet,vf,Qet,Rre,Het,Uet,Pre,Jet,Yet,Ket,lk,Zet,Zwe,eot,oot,rot,ea,ik,tot,eAe,aot,not,Ff,sot,oAe,lot,iot,Bre,dot,cot,fot,bw,mot,Yr,dk,got,rAe,hot,pot,xn,_ot,tAe,uot,bot,aAe,vot,Fot,nAe,Tot,Mot,Eot,Xe,vw,sAe,Cot,wot,Ire,Aot,Lot,yot,Fw,lAe,xot,$ot,Nre,kot,Sot,Rot,Tw,iAe,Pot,Bot,qre,Iot,Not,qot,Mw,dAe,jot,Dot,jre,Got,Oot,Vot,Ew,cAe,Xot,zot,Dre,Wot,Qot,Hot,Cw,fAe,Uot,Jot,Gre,Yot,Kot,Zot,ww,mAe,ert,ort,Ore,rrt,trt,art,Aw,gAe,nrt,srt,Vre,lrt,irt,drt,Lw,sQe,Tf,yw,hAe,ck,crt,pAe,frt,lQe,Cr,fk,mrt,Mf,grt,Xre,hrt,prt,zre,_rt,urt,brt,mk,vrt,_Ae,Frt,Trt,Mrt,oa,gk,Ert,uAe,Crt,wrt,Ef,Art,bAe,Lrt,yrt,Wre,xrt,$rt,krt,xw,Srt,Kr,hk,Rrt,vAe,Prt,Brt,$n,Irt,FAe,Nrt,qrt,TAe,jrt,Drt,MAe,Grt,Ort,Vrt,ze,$w,EAe,Xrt,zrt,Qre,Wrt,Qrt,Hrt,kw,CAe,Urt,Jrt,Hre,Yrt,Krt,Zrt,Sw,wAe,ett,ott,Ure,rtt,ttt,att,Rw,AAe,ntt,stt,Jre,ltt,itt,dtt,Pw,LAe,ctt,ftt,Yre,mtt,gtt,htt,Bw,yAe,ptt,_tt,Kre,utt,btt,vtt,Iw,xAe,Ftt,Ttt,Zre,Mtt,Ett,Ctt,Nw,$Ae,wtt,Att,ete,Ltt,ytt,xtt,qw,iQe,Cf,jw,kAe,pk,$tt,SAe,ktt,dQe,wr,_k,Stt,wf,Rtt,ote,Ptt,Btt,rte,Itt,Ntt,qtt,uk,jtt,RAe,Dtt,Gtt,Ott,ra,bk,Vtt,PAe,Xtt,ztt,Af,Wtt,BAe,Qtt,Htt,tte,Utt,Jtt,Ytt,Dw,Ktt,Zr,vk,Ztt,IAe,eat,oat,kn,rat,NAe,tat,aat,qAe,nat,sat,jAe,lat,iat,dat,DAe,Gw,GAe,cat,fat,ate,mat,gat,hat,Ow,cQe,Lf,Vw,OAe,Fk,pat,VAe,_at,fQe,Ar,Tk,uat,yf,bat,nte,vat,Fat,ste,Tat,Mat,Eat,Mk,Cat,XAe,wat,Aat,Lat,ta,Ek,yat,zAe,xat,$at,xf,kat,WAe,Sat,Rat,lte,Pat,Bat,Iat,Xw,Nat,et,Ck,qat,QAe,jat,Dat,Sn,Gat,HAe,Oat,Vat,UAe,Xat,zat,JAe,Wat,Qat,Hat,wk,zw,YAe,Uat,Jat,ite,Yat,Kat,Zat,Ww,KAe,ent,ont,dte,rnt,tnt,ant,Qw,mQe,$f,Hw,ZAe,Ak,nnt,e7e,snt,gQe,Lr,Lk,lnt,kf,int,cte,dnt,cnt,fte,fnt,mnt,gnt,yk,hnt,o7e,pnt,_nt,unt,aa,xk,bnt,r7e,vnt,Fnt,Sf,Tnt,t7e,Mnt,Ent,mte,Cnt,wnt,Ant,Uw,Lnt,ot,$k,ynt,a7e,xnt,$nt,Rn,knt,n7e,Snt,Rnt,s7e,Pnt,Bnt,l7e,Int,Nnt,qnt,i7e,Jw,d7e,jnt,Dnt,gte,Gnt,Ont,Vnt,Yw,hQe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),TL=new re({}),ML=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Xnt({props:{warning:!0,$$slots:{default:[tJt]},$$scope:{ctx:$}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/configuration_auto.py#L617"}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/configuration_auto.py#L640"}}),oh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),yL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/configuration_auto.py#L763"}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/tokenization_auto.py#L411"}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18361/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),PL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/tokenization_auto.py#L624"}}),BL=new re({}),IL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/feature_extraction_auto.py#L197"}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18361/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/feature_extraction_auto.py#L211"}}),Mp=new Xnt({props:{$$slots:{default:[sJt]},$$scope:{ctx:$}}}),Ep=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),DL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/feature_extraction_auto.py#L338"}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/processing_auto.py#L90"}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/processing_auto.py#L104"}}),zp=new Xnt({props:{$$slots:{default:[iJt]},$$scope:{ctx:$}}}),Wp=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),WL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/processing_auto.py#L257"}}),QL=new re({}),HL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L790"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),Up=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),r1=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L797"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),a1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L812"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),G2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L819"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),V2=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L826"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L835"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),ev=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L880"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L887"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L873"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L844"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L851"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L896"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),y6=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),X6=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),Zy=new re({}),e9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L935"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L862"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L942"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L965"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L949"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L956"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),$9=new re({}),k9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L974"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L981"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),n8=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L928"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),l8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),f8=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),W9=new re({}),Q9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L903"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),g8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),_8=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L910"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),b8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),w8=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[oYt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_auto.py#L919"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),L8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[rYt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[tYt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),S8=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[aYt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lYt]},$$scope:{ctx:$}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dYt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18361/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),r$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[EYt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[CYt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wYt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[AYt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LYt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),u$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[yYt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xYt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[$Yt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[kYt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[SYt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[RYt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[PYt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BYt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[IYt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NYt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[qYt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[jYt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[DYt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[GYt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[OYt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[VYt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[XYt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),_w=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zYt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[WYt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QYt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[HYt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[UYt]},$$scope:{ctx:$}}}),pk=new re({}),_k=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[JYt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[YYt]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[KYt]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZYt]},$$scope:{ctx:$}}}),Ak=new re({}),Lk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),xk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[eKt]},$$scope:{ctx:$}}}),$k=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18361/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18361/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18361/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oKt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),$i=o("Auto Classes"),If=l(),lt=a("p"),ki=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=a("code"),uL=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ri=o("Instantiating one of "),Bn=a("a"),bL=o("AutoConfig"),In=o(", "),Nn=a("a"),vL=o("AutoModel"),Pi=o(`, and
`),qn=a("a"),FL=o("AutoTokenizer"),Bi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),eR=o("will create a model that is an instance of "),Ii=a("a"),oR=o("BertModel"),rR=o("."),Ao=l(),Ra=a("p"),tR=o("There is one class of "),jf=a("code"),aR=o("AutoModel"),CUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),dze=l(),Ni=a("h2"),Df=a("a"),lne=a("span"),F(TL.$$.fragment),wUe=l(),ine=a("span"),AUe=o("Extending the Auto Classes"),cze=l(),jn=a("p"),LUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dne=a("code"),yUe=o("NewModel"),xUe=o(", make sure you have a "),cne=a("code"),$Ue=o("NewModelConfig"),kUe=o(` then you can add those to the auto
classes like this:`),fze=l(),F(ML.$$.fragment),mze=l(),nR=a("p"),SUe=o("You will then be able to use the auto classes like you would usually do!"),gze=l(),F(Gf.$$.fragment),hze=l(),qi=a("h2"),Of=a("a"),fne=a("span"),F(EL.$$.fragment),RUe=l(),mne=a("span"),PUe=o("AutoConfig"),pze=l(),Lo=a("div"),F(CL.$$.fragment),BUe=l(),wL=a("p"),IUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sR=a("a"),NUe=o("from_pretrained()"),qUe=o(" class method."),jUe=l(),AL=a("p"),DUe=o("This class cannot be instantiated directly using "),gne=a("code"),GUe=o("__init__()"),OUe=o(" (throws an error)."),VUe=l(),yr=a("div"),F(LL.$$.fragment),XUe=l(),hne=a("p"),zUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),WUe=l(),ji=a("p"),QUe=o("The configuration class to instantiate is selected based on the "),pne=a("code"),HUe=o("model_type"),UUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_ne=a("code"),JUe=o("pretrained_model_name_or_path"),YUe=o(":"),KUe=l(),A=a("ul"),Vf=a("li"),une=a("strong"),ZUe=o("albert"),eJe=o(" \u2014 "),lR=a("a"),oJe=o("AlbertConfig"),rJe=o(" (ALBERT model)"),tJe=l(),Xf=a("li"),bne=a("strong"),aJe=o("bart"),nJe=o(" \u2014 "),iR=a("a"),sJe=o("BartConfig"),lJe=o(" (BART model)"),iJe=l(),zf=a("li"),vne=a("strong"),dJe=o("beit"),cJe=o(" \u2014 "),dR=a("a"),fJe=o("BeitConfig"),mJe=o(" (BEiT model)"),gJe=l(),Wf=a("li"),Fne=a("strong"),hJe=o("bert"),pJe=o(" \u2014 "),cR=a("a"),_Je=o("BertConfig"),uJe=o(" (BERT model)"),bJe=l(),Qf=a("li"),Tne=a("strong"),vJe=o("bert-generation"),FJe=o(" \u2014 "),fR=a("a"),TJe=o("BertGenerationConfig"),MJe=o(" (Bert Generation model)"),EJe=l(),Hf=a("li"),Mne=a("strong"),CJe=o("big_bird"),wJe=o(" \u2014 "),mR=a("a"),AJe=o("BigBirdConfig"),LJe=o(" (BigBird model)"),yJe=l(),Uf=a("li"),Ene=a("strong"),xJe=o("bigbird_pegasus"),$Je=o(" \u2014 "),gR=a("a"),kJe=o("BigBirdPegasusConfig"),SJe=o(" (BigBird-Pegasus model)"),RJe=l(),Jf=a("li"),Cne=a("strong"),PJe=o("blenderbot"),BJe=o(" \u2014 "),hR=a("a"),IJe=o("BlenderbotConfig"),NJe=o(" (Blenderbot model)"),qJe=l(),Yf=a("li"),wne=a("strong"),jJe=o("blenderbot-small"),DJe=o(" \u2014 "),pR=a("a"),GJe=o("BlenderbotSmallConfig"),OJe=o(" (BlenderbotSmall model)"),VJe=l(),Kf=a("li"),Ane=a("strong"),XJe=o("bloom"),zJe=o(" \u2014 "),_R=a("a"),WJe=o("BloomConfig"),QJe=o(" (BLOOM model)"),HJe=l(),Zf=a("li"),Lne=a("strong"),UJe=o("camembert"),JJe=o(" \u2014 "),uR=a("a"),YJe=o("CamembertConfig"),KJe=o(" (CamemBERT model)"),ZJe=l(),em=a("li"),yne=a("strong"),eYe=o("canine"),oYe=o(" \u2014 "),bR=a("a"),rYe=o("CanineConfig"),tYe=o(" (CANINE model)"),aYe=l(),om=a("li"),xne=a("strong"),nYe=o("clip"),sYe=o(" \u2014 "),vR=a("a"),lYe=o("CLIPConfig"),iYe=o(" (CLIP model)"),dYe=l(),rm=a("li"),$ne=a("strong"),cYe=o("codegen"),fYe=o(" \u2014 "),FR=a("a"),mYe=o("CodeGenConfig"),gYe=o(" (CodeGen model)"),hYe=l(),tm=a("li"),kne=a("strong"),pYe=o("convbert"),_Ye=o(" \u2014 "),TR=a("a"),uYe=o("ConvBertConfig"),bYe=o(" (ConvBERT model)"),vYe=l(),am=a("li"),Sne=a("strong"),FYe=o("convnext"),TYe=o(" \u2014 "),MR=a("a"),MYe=o("ConvNextConfig"),EYe=o(" (ConvNeXT model)"),CYe=l(),nm=a("li"),Rne=a("strong"),wYe=o("ctrl"),AYe=o(" \u2014 "),ER=a("a"),LYe=o("CTRLConfig"),yYe=o(" (CTRL model)"),xYe=l(),sm=a("li"),Pne=a("strong"),$Ye=o("cvt"),kYe=o(" \u2014 "),CR=a("a"),SYe=o("CvtConfig"),RYe=o(" (CvT model)"),PYe=l(),lm=a("li"),Bne=a("strong"),BYe=o("data2vec-audio"),IYe=o(" \u2014 "),wR=a("a"),NYe=o("Data2VecAudioConfig"),qYe=o(" (Data2VecAudio model)"),jYe=l(),im=a("li"),Ine=a("strong"),DYe=o("data2vec-text"),GYe=o(" \u2014 "),AR=a("a"),OYe=o("Data2VecTextConfig"),VYe=o(" (Data2VecText model)"),XYe=l(),dm=a("li"),Nne=a("strong"),zYe=o("data2vec-vision"),WYe=o(" \u2014 "),LR=a("a"),QYe=o("Data2VecVisionConfig"),HYe=o(" (Data2VecVision model)"),UYe=l(),cm=a("li"),qne=a("strong"),JYe=o("deberta"),YYe=o(" \u2014 "),yR=a("a"),KYe=o("DebertaConfig"),ZYe=o(" (DeBERTa model)"),eKe=l(),fm=a("li"),jne=a("strong"),oKe=o("deberta-v2"),rKe=o(" \u2014 "),xR=a("a"),tKe=o("DebertaV2Config"),aKe=o(" (DeBERTa-v2 model)"),nKe=l(),mm=a("li"),Dne=a("strong"),sKe=o("decision_transformer"),lKe=o(" \u2014 "),$R=a("a"),iKe=o("DecisionTransformerConfig"),dKe=o(" (Decision Transformer model)"),cKe=l(),gm=a("li"),Gne=a("strong"),fKe=o("deit"),mKe=o(" \u2014 "),kR=a("a"),gKe=o("DeiTConfig"),hKe=o(" (DeiT model)"),pKe=l(),hm=a("li"),One=a("strong"),_Ke=o("detr"),uKe=o(" \u2014 "),SR=a("a"),bKe=o("DetrConfig"),vKe=o(" (DETR model)"),FKe=l(),pm=a("li"),Vne=a("strong"),TKe=o("distilbert"),MKe=o(" \u2014 "),RR=a("a"),EKe=o("DistilBertConfig"),CKe=o(" (DistilBERT model)"),wKe=l(),_m=a("li"),Xne=a("strong"),AKe=o("dpr"),LKe=o(" \u2014 "),PR=a("a"),yKe=o("DPRConfig"),xKe=o(" (DPR model)"),$Ke=l(),um=a("li"),zne=a("strong"),kKe=o("dpt"),SKe=o(" \u2014 "),BR=a("a"),RKe=o("DPTConfig"),PKe=o(" (DPT model)"),BKe=l(),bm=a("li"),Wne=a("strong"),IKe=o("electra"),NKe=o(" \u2014 "),IR=a("a"),qKe=o("ElectraConfig"),jKe=o(" (ELECTRA model)"),DKe=l(),vm=a("li"),Qne=a("strong"),GKe=o("encoder-decoder"),OKe=o(" \u2014 "),NR=a("a"),VKe=o("EncoderDecoderConfig"),XKe=o(" (Encoder decoder model)"),zKe=l(),Fm=a("li"),Hne=a("strong"),WKe=o("flaubert"),QKe=o(" \u2014 "),qR=a("a"),HKe=o("FlaubertConfig"),UKe=o(" (FlauBERT model)"),JKe=l(),Tm=a("li"),Une=a("strong"),YKe=o("flava"),KKe=o(" \u2014 "),jR=a("a"),ZKe=o("FlavaConfig"),eZe=o(" (FLAVA model)"),oZe=l(),Mm=a("li"),Jne=a("strong"),rZe=o("fnet"),tZe=o(" \u2014 "),DR=a("a"),aZe=o("FNetConfig"),nZe=o(" (FNet model)"),sZe=l(),Em=a("li"),Yne=a("strong"),lZe=o("fsmt"),iZe=o(" \u2014 "),GR=a("a"),dZe=o("FSMTConfig"),cZe=o(" (FairSeq Machine-Translation model)"),fZe=l(),Cm=a("li"),Kne=a("strong"),mZe=o("funnel"),gZe=o(" \u2014 "),OR=a("a"),hZe=o("FunnelConfig"),pZe=o(" (Funnel Transformer model)"),_Ze=l(),wm=a("li"),Zne=a("strong"),uZe=o("glpn"),bZe=o(" \u2014 "),VR=a("a"),vZe=o("GLPNConfig"),FZe=o(" (GLPN model)"),TZe=l(),Am=a("li"),ese=a("strong"),MZe=o("gpt2"),EZe=o(" \u2014 "),XR=a("a"),CZe=o("GPT2Config"),wZe=o(" (OpenAI GPT-2 model)"),AZe=l(),Lm=a("li"),ose=a("strong"),LZe=o("gpt_neo"),yZe=o(" \u2014 "),zR=a("a"),xZe=o("GPTNeoConfig"),$Ze=o(" (GPT Neo model)"),kZe=l(),ym=a("li"),rse=a("strong"),SZe=o("gpt_neox"),RZe=o(" \u2014 "),WR=a("a"),PZe=o("GPTNeoXConfig"),BZe=o(" (GPT NeoX model)"),IZe=l(),xm=a("li"),tse=a("strong"),NZe=o("gptj"),qZe=o(" \u2014 "),QR=a("a"),jZe=o("GPTJConfig"),DZe=o(" (GPT-J model)"),GZe=l(),$m=a("li"),ase=a("strong"),OZe=o("groupvit"),VZe=o(" \u2014 "),HR=a("a"),XZe=o("GroupViTConfig"),zZe=o(" (GroupViT model)"),WZe=l(),km=a("li"),nse=a("strong"),QZe=o("hubert"),HZe=o(" \u2014 "),UR=a("a"),UZe=o("HubertConfig"),JZe=o(" (Hubert model)"),YZe=l(),Sm=a("li"),sse=a("strong"),KZe=o("ibert"),ZZe=o(" \u2014 "),JR=a("a"),eeo=o("IBertConfig"),oeo=o(" (I-BERT model)"),reo=l(),Rm=a("li"),lse=a("strong"),teo=o("imagegpt"),aeo=o(" \u2014 "),YR=a("a"),neo=o("ImageGPTConfig"),seo=o(" (ImageGPT model)"),leo=l(),Pm=a("li"),ise=a("strong"),ieo=o("layoutlm"),deo=o(" \u2014 "),KR=a("a"),ceo=o("LayoutLMConfig"),feo=o(" (LayoutLM model)"),meo=l(),Bm=a("li"),dse=a("strong"),geo=o("layoutlmv2"),heo=o(" \u2014 "),ZR=a("a"),peo=o("LayoutLMv2Config"),_eo=o(" (LayoutLMv2 model)"),ueo=l(),Im=a("li"),cse=a("strong"),beo=o("layoutlmv3"),veo=o(" \u2014 "),eP=a("a"),Feo=o("LayoutLMv3Config"),Teo=o(" (LayoutLMv3 model)"),Meo=l(),Nm=a("li"),fse=a("strong"),Eeo=o("led"),Ceo=o(" \u2014 "),oP=a("a"),weo=o("LEDConfig"),Aeo=o(" (LED model)"),Leo=l(),qm=a("li"),mse=a("strong"),yeo=o("levit"),xeo=o(" \u2014 "),rP=a("a"),$eo=o("LevitConfig"),keo=o(" (LeViT model)"),Seo=l(),jm=a("li"),gse=a("strong"),Reo=o("longformer"),Peo=o(" \u2014 "),tP=a("a"),Beo=o("LongformerConfig"),Ieo=o(" (Longformer model)"),Neo=l(),Dm=a("li"),hse=a("strong"),qeo=o("longt5"),jeo=o(" \u2014 "),aP=a("a"),Deo=o("LongT5Config"),Geo=o(" (LongT5 model)"),Oeo=l(),Gm=a("li"),pse=a("strong"),Veo=o("luke"),Xeo=o(" \u2014 "),nP=a("a"),zeo=o("LukeConfig"),Weo=o(" (LUKE model)"),Qeo=l(),Om=a("li"),_se=a("strong"),Heo=o("lxmert"),Ueo=o(" \u2014 "),sP=a("a"),Jeo=o("LxmertConfig"),Yeo=o(" (LXMERT model)"),Keo=l(),Vm=a("li"),use=a("strong"),Zeo=o("m2m_100"),eoo=o(" \u2014 "),lP=a("a"),ooo=o("M2M100Config"),roo=o(" (M2M100 model)"),too=l(),Xm=a("li"),bse=a("strong"),aoo=o("marian"),noo=o(" \u2014 "),iP=a("a"),soo=o("MarianConfig"),loo=o(" (Marian model)"),ioo=l(),zm=a("li"),vse=a("strong"),doo=o("maskformer"),coo=o(" \u2014 "),dP=a("a"),foo=o("MaskFormerConfig"),moo=o(" (MaskFormer model)"),goo=l(),Wm=a("li"),Fse=a("strong"),hoo=o("mbart"),poo=o(" \u2014 "),cP=a("a"),_oo=o("MBartConfig"),uoo=o(" (mBART model)"),boo=l(),Qm=a("li"),Tse=a("strong"),voo=o("mctct"),Foo=o(" \u2014 "),fP=a("a"),Too=o("MCTCTConfig"),Moo=o(" (M-CTC-T model)"),Eoo=l(),Hm=a("li"),Mse=a("strong"),Coo=o("megatron-bert"),woo=o(" \u2014 "),mP=a("a"),Aoo=o("MegatronBertConfig"),Loo=o(" (Megatron-BERT model)"),yoo=l(),Um=a("li"),Ese=a("strong"),xoo=o("mobilebert"),$oo=o(" \u2014 "),gP=a("a"),koo=o("MobileBertConfig"),Soo=o(" (MobileBERT model)"),Roo=l(),Jm=a("li"),Cse=a("strong"),Poo=o("mobilevit"),Boo=o(" \u2014 "),hP=a("a"),Ioo=o("MobileViTConfig"),Noo=o(" (MobileViT model)"),qoo=l(),Ym=a("li"),wse=a("strong"),joo=o("mpnet"),Doo=o(" \u2014 "),pP=a("a"),Goo=o("MPNetConfig"),Ooo=o(" (MPNet model)"),Voo=l(),Km=a("li"),Ase=a("strong"),Xoo=o("mt5"),zoo=o(" \u2014 "),_P=a("a"),Woo=o("MT5Config"),Qoo=o(" (MT5 model)"),Hoo=l(),Zm=a("li"),Lse=a("strong"),Uoo=o("mvp"),Joo=o(" \u2014 "),uP=a("a"),Yoo=o("MvpConfig"),Koo=o(" (MVP model)"),Zoo=l(),eg=a("li"),yse=a("strong"),ero=o("nezha"),oro=o(" \u2014 "),bP=a("a"),rro=o("NezhaConfig"),tro=o(" (Nezha model)"),aro=l(),og=a("li"),xse=a("strong"),nro=o("nystromformer"),sro=o(" \u2014 "),vP=a("a"),lro=o("NystromformerConfig"),iro=o(" (Nystr\xF6mformer model)"),dro=l(),rg=a("li"),$se=a("strong"),cro=o("openai-gpt"),fro=o(" \u2014 "),FP=a("a"),mro=o("OpenAIGPTConfig"),gro=o(" (OpenAI GPT model)"),hro=l(),tg=a("li"),kse=a("strong"),pro=o("opt"),_ro=o(" \u2014 "),TP=a("a"),uro=o("OPTConfig"),bro=o(" (OPT model)"),vro=l(),ag=a("li"),Sse=a("strong"),Fro=o("owlvit"),Tro=o(" \u2014 "),MP=a("a"),Mro=o("OwlViTConfig"),Ero=o(" (OWL-ViT model)"),Cro=l(),ng=a("li"),Rse=a("strong"),wro=o("pegasus"),Aro=o(" \u2014 "),EP=a("a"),Lro=o("PegasusConfig"),yro=o(" (Pegasus model)"),xro=l(),sg=a("li"),Pse=a("strong"),$ro=o("perceiver"),kro=o(" \u2014 "),CP=a("a"),Sro=o("PerceiverConfig"),Rro=o(" (Perceiver model)"),Pro=l(),lg=a("li"),Bse=a("strong"),Bro=o("plbart"),Iro=o(" \u2014 "),wP=a("a"),Nro=o("PLBartConfig"),qro=o(" (PLBart model)"),jro=l(),ig=a("li"),Ise=a("strong"),Dro=o("poolformer"),Gro=o(" \u2014 "),AP=a("a"),Oro=o("PoolFormerConfig"),Vro=o(" (PoolFormer model)"),Xro=l(),dg=a("li"),Nse=a("strong"),zro=o("prophetnet"),Wro=o(" \u2014 "),LP=a("a"),Qro=o("ProphetNetConfig"),Hro=o(" (ProphetNet model)"),Uro=l(),cg=a("li"),qse=a("strong"),Jro=o("qdqbert"),Yro=o(" \u2014 "),yP=a("a"),Kro=o("QDQBertConfig"),Zro=o(" (QDQBert model)"),eto=l(),fg=a("li"),jse=a("strong"),oto=o("rag"),rto=o(" \u2014 "),xP=a("a"),tto=o("RagConfig"),ato=o(" (RAG model)"),nto=l(),mg=a("li"),Dse=a("strong"),sto=o("realm"),lto=o(" \u2014 "),$P=a("a"),ito=o("RealmConfig"),dto=o(" (REALM model)"),cto=l(),gg=a("li"),Gse=a("strong"),fto=o("reformer"),mto=o(" \u2014 "),kP=a("a"),gto=o("ReformerConfig"),hto=o(" (Reformer model)"),pto=l(),hg=a("li"),Ose=a("strong"),_to=o("regnet"),uto=o(" \u2014 "),SP=a("a"),bto=o("RegNetConfig"),vto=o(" (RegNet model)"),Fto=l(),pg=a("li"),Vse=a("strong"),Tto=o("rembert"),Mto=o(" \u2014 "),RP=a("a"),Eto=o("RemBertConfig"),Cto=o(" (RemBERT model)"),wto=l(),_g=a("li"),Xse=a("strong"),Ato=o("resnet"),Lto=o(" \u2014 "),PP=a("a"),yto=o("ResNetConfig"),xto=o(" (ResNet model)"),$to=l(),ug=a("li"),zse=a("strong"),kto=o("retribert"),Sto=o(" \u2014 "),BP=a("a"),Rto=o("RetriBertConfig"),Pto=o(" (RetriBERT model)"),Bto=l(),bg=a("li"),Wse=a("strong"),Ito=o("roberta"),Nto=o(" \u2014 "),IP=a("a"),qto=o("RobertaConfig"),jto=o(" (RoBERTa model)"),Dto=l(),vg=a("li"),Qse=a("strong"),Gto=o("roformer"),Oto=o(" \u2014 "),NP=a("a"),Vto=o("RoFormerConfig"),Xto=o(" (RoFormer model)"),zto=l(),Fg=a("li"),Hse=a("strong"),Wto=o("segformer"),Qto=o(" \u2014 "),qP=a("a"),Hto=o("SegformerConfig"),Uto=o(" (SegFormer model)"),Jto=l(),Tg=a("li"),Use=a("strong"),Yto=o("sew"),Kto=o(" \u2014 "),jP=a("a"),Zto=o("SEWConfig"),eao=o(" (SEW model)"),oao=l(),Mg=a("li"),Jse=a("strong"),rao=o("sew-d"),tao=o(" \u2014 "),DP=a("a"),aao=o("SEWDConfig"),nao=o(" (SEW-D model)"),sao=l(),Eg=a("li"),Yse=a("strong"),lao=o("speech-encoder-decoder"),iao=o(" \u2014 "),GP=a("a"),dao=o("SpeechEncoderDecoderConfig"),cao=o(" (Speech Encoder decoder model)"),fao=l(),Cg=a("li"),Kse=a("strong"),mao=o("speech_to_text"),gao=o(" \u2014 "),OP=a("a"),hao=o("Speech2TextConfig"),pao=o(" (Speech2Text model)"),_ao=l(),wg=a("li"),Zse=a("strong"),uao=o("speech_to_text_2"),bao=o(" \u2014 "),VP=a("a"),vao=o("Speech2Text2Config"),Fao=o(" (Speech2Text2 model)"),Tao=l(),Ag=a("li"),ele=a("strong"),Mao=o("splinter"),Eao=o(" \u2014 "),XP=a("a"),Cao=o("SplinterConfig"),wao=o(" (Splinter model)"),Aao=l(),Lg=a("li"),ole=a("strong"),Lao=o("squeezebert"),yao=o(" \u2014 "),zP=a("a"),xao=o("SqueezeBertConfig"),$ao=o(" (SqueezeBERT model)"),kao=l(),yg=a("li"),rle=a("strong"),Sao=o("swin"),Rao=o(" \u2014 "),WP=a("a"),Pao=o("SwinConfig"),Bao=o(" (Swin Transformer model)"),Iao=l(),xg=a("li"),tle=a("strong"),Nao=o("swinv2"),qao=o(" \u2014 "),QP=a("a"),jao=o("Swinv2Config"),Dao=o(" (Swin Transformer V2 model)"),Gao=l(),$g=a("li"),ale=a("strong"),Oao=o("t5"),Vao=o(" \u2014 "),HP=a("a"),Xao=o("T5Config"),zao=o(" (T5 model)"),Wao=l(),kg=a("li"),nle=a("strong"),Qao=o("tapas"),Hao=o(" \u2014 "),UP=a("a"),Uao=o("TapasConfig"),Jao=o(" (TAPAS model)"),Yao=l(),Sg=a("li"),sle=a("strong"),Kao=o("trajectory_transformer"),Zao=o(" \u2014 "),JP=a("a"),eno=o("TrajectoryTransformerConfig"),ono=o(" (Trajectory Transformer model)"),rno=l(),Rg=a("li"),lle=a("strong"),tno=o("transfo-xl"),ano=o(" \u2014 "),YP=a("a"),nno=o("TransfoXLConfig"),sno=o(" (Transformer-XL model)"),lno=l(),Pg=a("li"),ile=a("strong"),ino=o("trocr"),dno=o(" \u2014 "),KP=a("a"),cno=o("TrOCRConfig"),fno=o(" (TrOCR model)"),mno=l(),Bg=a("li"),dle=a("strong"),gno=o("unispeech"),hno=o(" \u2014 "),ZP=a("a"),pno=o("UniSpeechConfig"),_no=o(" (UniSpeech model)"),uno=l(),Ig=a("li"),cle=a("strong"),bno=o("unispeech-sat"),vno=o(" \u2014 "),eB=a("a"),Fno=o("UniSpeechSatConfig"),Tno=o(" (UniSpeechSat model)"),Mno=l(),Ng=a("li"),fle=a("strong"),Eno=o("van"),Cno=o(" \u2014 "),oB=a("a"),wno=o("VanConfig"),Ano=o(" (VAN model)"),Lno=l(),qg=a("li"),mle=a("strong"),yno=o("vilt"),xno=o(" \u2014 "),rB=a("a"),$no=o("ViltConfig"),kno=o(" (ViLT model)"),Sno=l(),jg=a("li"),gle=a("strong"),Rno=o("vision-encoder-decoder"),Pno=o(" \u2014 "),tB=a("a"),Bno=o("VisionEncoderDecoderConfig"),Ino=o(" (Vision Encoder decoder model)"),Nno=l(),Dg=a("li"),hle=a("strong"),qno=o("vision-text-dual-encoder"),jno=o(" \u2014 "),aB=a("a"),Dno=o("VisionTextDualEncoderConfig"),Gno=o(" (VisionTextDualEncoder model)"),Ono=l(),Gg=a("li"),ple=a("strong"),Vno=o("visual_bert"),Xno=o(" \u2014 "),nB=a("a"),zno=o("VisualBertConfig"),Wno=o(" (VisualBERT model)"),Qno=l(),Og=a("li"),_le=a("strong"),Hno=o("vit"),Uno=o(" \u2014 "),sB=a("a"),Jno=o("ViTConfig"),Yno=o(" (ViT model)"),Kno=l(),Vg=a("li"),ule=a("strong"),Zno=o("vit_mae"),eso=o(" \u2014 "),lB=a("a"),oso=o("ViTMAEConfig"),rso=o(" (ViTMAE model)"),tso=l(),Xg=a("li"),ble=a("strong"),aso=o("wav2vec2"),nso=o(" \u2014 "),iB=a("a"),sso=o("Wav2Vec2Config"),lso=o(" (Wav2Vec2 model)"),iso=l(),zg=a("li"),vle=a("strong"),dso=o("wav2vec2-conformer"),cso=o(" \u2014 "),dB=a("a"),fso=o("Wav2Vec2ConformerConfig"),mso=o(" (Wav2Vec2-Conformer model)"),gso=l(),Wg=a("li"),Fle=a("strong"),hso=o("wavlm"),pso=o(" \u2014 "),cB=a("a"),_so=o("WavLMConfig"),uso=o(" (WavLM model)"),bso=l(),Qg=a("li"),Tle=a("strong"),vso=o("xglm"),Fso=o(" \u2014 "),fB=a("a"),Tso=o("XGLMConfig"),Mso=o(" (XGLM model)"),Eso=l(),Hg=a("li"),Mle=a("strong"),Cso=o("xlm"),wso=o(" \u2014 "),mB=a("a"),Aso=o("XLMConfig"),Lso=o(" (XLM model)"),yso=l(),Ug=a("li"),Ele=a("strong"),xso=o("xlm-prophetnet"),$so=o(" \u2014 "),gB=a("a"),kso=o("XLMProphetNetConfig"),Sso=o(" (XLM-ProphetNet model)"),Rso=l(),Jg=a("li"),Cle=a("strong"),Pso=o("xlm-roberta"),Bso=o(" \u2014 "),hB=a("a"),Iso=o("XLMRobertaConfig"),Nso=o(" (XLM-RoBERTa model)"),qso=l(),Yg=a("li"),wle=a("strong"),jso=o("xlm-roberta-xl"),Dso=o(" \u2014 "),pB=a("a"),Gso=o("XLMRobertaXLConfig"),Oso=o(" (XLM-RoBERTa-XL model)"),Vso=l(),Kg=a("li"),Ale=a("strong"),Xso=o("xlnet"),zso=o(" \u2014 "),_B=a("a"),Wso=o("XLNetConfig"),Qso=o(" (XLNet model)"),Hso=l(),Zg=a("li"),Lle=a("strong"),Uso=o("yolos"),Jso=o(" \u2014 "),uB=a("a"),Yso=o("YolosConfig"),Kso=o(" (YOLOS model)"),Zso=l(),eh=a("li"),yle=a("strong"),elo=o("yoso"),olo=o(" \u2014 "),bB=a("a"),rlo=o("YosoConfig"),tlo=o(" (YOSO model)"),alo=l(),F(oh.$$.fragment),nlo=l(),rh=a("div"),F(yL.$$.fragment),slo=l(),xle=a("p"),llo=o("Register a new configuration for this class."),_ze=l(),Di=a("h2"),th=a("a"),$le=a("span"),F(xL.$$.fragment),ilo=l(),kle=a("span"),dlo=o("AutoTokenizer"),uze=l(),yo=a("div"),F($L.$$.fragment),clo=l(),kL=a("p"),flo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vB=a("a"),mlo=o("AutoTokenizer.from_pretrained()"),glo=o(" class method."),hlo=l(),SL=a("p"),plo=o("This class cannot be instantiated directly using "),Sle=a("code"),_lo=o("__init__()"),ulo=o(" (throws an error)."),blo=l(),xr=a("div"),F(RL.$$.fragment),vlo=l(),Rle=a("p"),Flo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Tlo=l(),Pa=a("p"),Mlo=o("The tokenizer class to instantiate is selected based on the "),Ple=a("code"),Elo=o("model_type"),Clo=o(` property of the config object (either
passed as an argument or loaded from `),Ble=a("code"),wlo=o("pretrained_model_name_or_path"),Alo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),Llo=o("pretrained_model_name_or_path"),ylo=o(":"),xlo=l(),k=a("ul"),Dn=a("li"),Nle=a("strong"),$lo=o("albert"),klo=o(" \u2014 "),FB=a("a"),Slo=o("AlbertTokenizer"),Rlo=o(" or "),TB=a("a"),Plo=o("AlbertTokenizerFast"),Blo=o(" (ALBERT model)"),Ilo=l(),Gn=a("li"),qle=a("strong"),Nlo=o("bart"),qlo=o(" \u2014 "),MB=a("a"),jlo=o("BartTokenizer"),Dlo=o(" or "),EB=a("a"),Glo=o("BartTokenizerFast"),Olo=o(" (BART model)"),Vlo=l(),On=a("li"),jle=a("strong"),Xlo=o("barthez"),zlo=o(" \u2014 "),CB=a("a"),Wlo=o("BarthezTokenizer"),Qlo=o(" or "),wB=a("a"),Hlo=o("BarthezTokenizerFast"),Ulo=o(" (BARThez model)"),Jlo=l(),ah=a("li"),Dle=a("strong"),Ylo=o("bartpho"),Klo=o(" \u2014 "),AB=a("a"),Zlo=o("BartphoTokenizer"),eio=o(" (BARTpho model)"),oio=l(),Vn=a("li"),Gle=a("strong"),rio=o("bert"),tio=o(" \u2014 "),LB=a("a"),aio=o("BertTokenizer"),nio=o(" or "),yB=a("a"),sio=o("BertTokenizerFast"),lio=o(" (BERT model)"),iio=l(),nh=a("li"),Ole=a("strong"),dio=o("bert-generation"),cio=o(" \u2014 "),xB=a("a"),fio=o("BertGenerationTokenizer"),mio=o(" (Bert Generation model)"),gio=l(),sh=a("li"),Vle=a("strong"),hio=o("bert-japanese"),pio=o(" \u2014 "),$B=a("a"),_io=o("BertJapaneseTokenizer"),uio=o(" (BertJapanese model)"),bio=l(),lh=a("li"),Xle=a("strong"),vio=o("bertweet"),Fio=o(" \u2014 "),kB=a("a"),Tio=o("BertweetTokenizer"),Mio=o(" (BERTweet model)"),Eio=l(),Xn=a("li"),zle=a("strong"),Cio=o("big_bird"),wio=o(" \u2014 "),SB=a("a"),Aio=o("BigBirdTokenizer"),Lio=o(" or "),RB=a("a"),yio=o("BigBirdTokenizerFast"),xio=o(" (BigBird model)"),$io=l(),zn=a("li"),Wle=a("strong"),kio=o("bigbird_pegasus"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("PegasusTokenizer"),Pio=o(" or "),BB=a("a"),Bio=o("PegasusTokenizerFast"),Iio=o(" (BigBird-Pegasus model)"),Nio=l(),Wn=a("li"),Qle=a("strong"),qio=o("blenderbot"),jio=o(" \u2014 "),IB=a("a"),Dio=o("BlenderbotTokenizer"),Gio=o(" or "),NB=a("a"),Oio=o("BlenderbotTokenizerFast"),Vio=o(" (Blenderbot model)"),Xio=l(),ih=a("li"),Hle=a("strong"),zio=o("blenderbot-small"),Wio=o(" \u2014 "),qB=a("a"),Qio=o("BlenderbotSmallTokenizer"),Hio=o(" (BlenderbotSmall model)"),Uio=l(),dh=a("li"),Ule=a("strong"),Jio=o("bloom"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("BloomTokenizerFast"),Zio=o(" (BLOOM model)"),edo=l(),ch=a("li"),Jle=a("strong"),odo=o("byt5"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("ByT5Tokenizer"),ado=o(" (ByT5 model)"),ndo=l(),Qn=a("li"),Yle=a("strong"),sdo=o("camembert"),ldo=o(" \u2014 "),GB=a("a"),ido=o("CamembertTokenizer"),ddo=o(" or "),OB=a("a"),cdo=o("CamembertTokenizerFast"),fdo=o(" (CamemBERT model)"),mdo=l(),fh=a("li"),Kle=a("strong"),gdo=o("canine"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("CanineTokenizer"),_do=o(" (CANINE model)"),udo=l(),Hn=a("li"),Zle=a("strong"),bdo=o("clip"),vdo=o(" \u2014 "),XB=a("a"),Fdo=o("CLIPTokenizer"),Tdo=o(" or "),zB=a("a"),Mdo=o("CLIPTokenizerFast"),Edo=o(" (CLIP model)"),Cdo=l(),Un=a("li"),eie=a("strong"),wdo=o("codegen"),Ado=o(" \u2014 "),WB=a("a"),Ldo=o("CodeGenTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("CodeGenTokenizerFast"),$do=o(" (CodeGen model)"),kdo=l(),Jn=a("li"),oie=a("strong"),Sdo=o("convbert"),Rdo=o(" \u2014 "),HB=a("a"),Pdo=o("ConvBertTokenizer"),Bdo=o(" or "),UB=a("a"),Ido=o("ConvBertTokenizerFast"),Ndo=o(" (ConvBERT model)"),qdo=l(),Yn=a("li"),rie=a("strong"),jdo=o("cpm"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("CpmTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("CpmTokenizerFast"),Xdo=o(" (CPM model)"),zdo=l(),mh=a("li"),tie=a("strong"),Wdo=o("ctrl"),Qdo=o(" \u2014 "),KB=a("a"),Hdo=o("CTRLTokenizer"),Udo=o(" (CTRL model)"),Jdo=l(),Kn=a("li"),aie=a("strong"),Ydo=o("data2vec-text"),Kdo=o(" \u2014 "),ZB=a("a"),Zdo=o("RobertaTokenizer"),eco=o(" or "),eI=a("a"),oco=o("RobertaTokenizerFast"),rco=o(" (Data2VecText model)"),tco=l(),Zn=a("li"),nie=a("strong"),aco=o("deberta"),nco=o(" \u2014 "),oI=a("a"),sco=o("DebertaTokenizer"),lco=o(" or "),rI=a("a"),ico=o("DebertaTokenizerFast"),dco=o(" (DeBERTa model)"),cco=l(),es=a("li"),sie=a("strong"),fco=o("deberta-v2"),mco=o(" \u2014 "),tI=a("a"),gco=o("DebertaV2Tokenizer"),hco=o(" or "),aI=a("a"),pco=o("DebertaV2TokenizerFast"),_co=o(" (DeBERTa-v2 model)"),uco=l(),os=a("li"),lie=a("strong"),bco=o("distilbert"),vco=o(" \u2014 "),nI=a("a"),Fco=o("DistilBertTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("DistilBertTokenizerFast"),Eco=o(" (DistilBERT model)"),Cco=l(),rs=a("li"),iie=a("strong"),wco=o("dpr"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("DPRQuestionEncoderTokenizer"),yco=o(" or "),iI=a("a"),xco=o("DPRQuestionEncoderTokenizerFast"),$co=o(" (DPR model)"),kco=l(),ts=a("li"),die=a("strong"),Sco=o("electra"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("ElectraTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("ElectraTokenizerFast"),Nco=o(" (ELECTRA model)"),qco=l(),gh=a("li"),cie=a("strong"),jco=o("flaubert"),Dco=o(" \u2014 "),fI=a("a"),Gco=o("FlaubertTokenizer"),Oco=o(" (FlauBERT model)"),Vco=l(),as=a("li"),fie=a("strong"),Xco=o("fnet"),zco=o(" \u2014 "),mI=a("a"),Wco=o("FNetTokenizer"),Qco=o(" or "),gI=a("a"),Hco=o("FNetTokenizerFast"),Uco=o(" (FNet model)"),Jco=l(),hh=a("li"),mie=a("strong"),Yco=o("fsmt"),Kco=o(" \u2014 "),hI=a("a"),Zco=o("FSMTTokenizer"),efo=o(" (FairSeq Machine-Translation model)"),ofo=l(),ns=a("li"),gie=a("strong"),rfo=o("funnel"),tfo=o(" \u2014 "),pI=a("a"),afo=o("FunnelTokenizer"),nfo=o(" or "),_I=a("a"),sfo=o("FunnelTokenizerFast"),lfo=o(" (Funnel Transformer model)"),ifo=l(),ss=a("li"),hie=a("strong"),dfo=o("gpt2"),cfo=o(" \u2014 "),uI=a("a"),ffo=o("GPT2Tokenizer"),mfo=o(" or "),bI=a("a"),gfo=o("GPT2TokenizerFast"),hfo=o(" (OpenAI GPT-2 model)"),pfo=l(),ls=a("li"),pie=a("strong"),_fo=o("gpt_neo"),ufo=o(" \u2014 "),vI=a("a"),bfo=o("GPT2Tokenizer"),vfo=o(" or "),FI=a("a"),Ffo=o("GPT2TokenizerFast"),Tfo=o(" (GPT Neo model)"),Mfo=l(),ph=a("li"),_ie=a("strong"),Efo=o("gpt_neox"),Cfo=o(" \u2014 "),TI=a("a"),wfo=o("GPTNeoXTokenizerFast"),Afo=o(" (GPT NeoX model)"),Lfo=l(),is=a("li"),uie=a("strong"),yfo=o("gptj"),xfo=o(" \u2014 "),MI=a("a"),$fo=o("GPT2Tokenizer"),kfo=o(" or "),EI=a("a"),Sfo=o("GPT2TokenizerFast"),Rfo=o(" (GPT-J model)"),Pfo=l(),ds=a("li"),bie=a("strong"),Bfo=o("groupvit"),Ifo=o(" \u2014 "),CI=a("a"),Nfo=o("CLIPTokenizer"),qfo=o(" or "),wI=a("a"),jfo=o("CLIPTokenizerFast"),Dfo=o(" (GroupViT model)"),Gfo=l(),cs=a("li"),vie=a("strong"),Ofo=o("herbert"),Vfo=o(" \u2014 "),AI=a("a"),Xfo=o("HerbertTokenizer"),zfo=o(" or "),LI=a("a"),Wfo=o("HerbertTokenizerFast"),Qfo=o(" (HerBERT model)"),Hfo=l(),_h=a("li"),Fie=a("strong"),Ufo=o("hubert"),Jfo=o(" \u2014 "),yI=a("a"),Yfo=o("Wav2Vec2CTCTokenizer"),Kfo=o(" (Hubert model)"),Zfo=l(),fs=a("li"),Tie=a("strong"),emo=o("ibert"),omo=o(" \u2014 "),xI=a("a"),rmo=o("RobertaTokenizer"),tmo=o(" or "),$I=a("a"),amo=o("RobertaTokenizerFast"),nmo=o(" (I-BERT model)"),smo=l(),ms=a("li"),Mie=a("strong"),lmo=o("layoutlm"),imo=o(" \u2014 "),kI=a("a"),dmo=o("LayoutLMTokenizer"),cmo=o(" or "),SI=a("a"),fmo=o("LayoutLMTokenizerFast"),mmo=o(" (LayoutLM model)"),gmo=l(),gs=a("li"),Eie=a("strong"),hmo=o("layoutlmv2"),pmo=o(" \u2014 "),RI=a("a"),_mo=o("LayoutLMv2Tokenizer"),umo=o(" or "),PI=a("a"),bmo=o("LayoutLMv2TokenizerFast"),vmo=o(" (LayoutLMv2 model)"),Fmo=l(),hs=a("li"),Cie=a("strong"),Tmo=o("layoutlmv3"),Mmo=o(" \u2014 "),BI=a("a"),Emo=o("LayoutLMv3Tokenizer"),Cmo=o(" or "),II=a("a"),wmo=o("LayoutLMv3TokenizerFast"),Amo=o(" (LayoutLMv3 model)"),Lmo=l(),ps=a("li"),wie=a("strong"),ymo=o("layoutxlm"),xmo=o(" \u2014 "),NI=a("a"),$mo=o("LayoutXLMTokenizer"),kmo=o(" or "),qI=a("a"),Smo=o("LayoutXLMTokenizerFast"),Rmo=o(" (LayoutXLM model)"),Pmo=l(),_s=a("li"),Aie=a("strong"),Bmo=o("led"),Imo=o(" \u2014 "),jI=a("a"),Nmo=o("LEDTokenizer"),qmo=o(" or "),DI=a("a"),jmo=o("LEDTokenizerFast"),Dmo=o(" (LED model)"),Gmo=l(),us=a("li"),Lie=a("strong"),Omo=o("longformer"),Vmo=o(" \u2014 "),GI=a("a"),Xmo=o("LongformerTokenizer"),zmo=o(" or "),OI=a("a"),Wmo=o("LongformerTokenizerFast"),Qmo=o(" (Longformer model)"),Hmo=l(),bs=a("li"),yie=a("strong"),Umo=o("longt5"),Jmo=o(" \u2014 "),VI=a("a"),Ymo=o("T5Tokenizer"),Kmo=o(" or "),XI=a("a"),Zmo=o("T5TokenizerFast"),ego=o(" (LongT5 model)"),ogo=l(),uh=a("li"),xie=a("strong"),rgo=o("luke"),tgo=o(" \u2014 "),zI=a("a"),ago=o("LukeTokenizer"),ngo=o(" (LUKE model)"),sgo=l(),vs=a("li"),$ie=a("strong"),lgo=o("lxmert"),igo=o(" \u2014 "),WI=a("a"),dgo=o("LxmertTokenizer"),cgo=o(" or "),QI=a("a"),fgo=o("LxmertTokenizerFast"),mgo=o(" (LXMERT model)"),ggo=l(),bh=a("li"),kie=a("strong"),hgo=o("m2m_100"),pgo=o(" \u2014 "),HI=a("a"),_go=o("M2M100Tokenizer"),ugo=o(" (M2M100 model)"),bgo=l(),vh=a("li"),Sie=a("strong"),vgo=o("marian"),Fgo=o(" \u2014 "),UI=a("a"),Tgo=o("MarianTokenizer"),Mgo=o(" (Marian model)"),Ego=l(),Fs=a("li"),Rie=a("strong"),Cgo=o("mbart"),wgo=o(" \u2014 "),JI=a("a"),Ago=o("MBartTokenizer"),Lgo=o(" or "),YI=a("a"),ygo=o("MBartTokenizerFast"),xgo=o(" (mBART model)"),$go=l(),Ts=a("li"),Pie=a("strong"),kgo=o("mbart50"),Sgo=o(" \u2014 "),KI=a("a"),Rgo=o("MBart50Tokenizer"),Pgo=o(" or "),ZI=a("a"),Bgo=o("MBart50TokenizerFast"),Igo=o(" (mBART-50 model)"),Ngo=l(),Ms=a("li"),Bie=a("strong"),qgo=o("megatron-bert"),jgo=o(" \u2014 "),eN=a("a"),Dgo=o("BertTokenizer"),Ggo=o(" or "),oN=a("a"),Ogo=o("BertTokenizerFast"),Vgo=o(" (Megatron-BERT model)"),Xgo=l(),Fh=a("li"),Iie=a("strong"),zgo=o("mluke"),Wgo=o(" \u2014 "),rN=a("a"),Qgo=o("MLukeTokenizer"),Hgo=o(" (mLUKE model)"),Ugo=l(),Es=a("li"),Nie=a("strong"),Jgo=o("mobilebert"),Ygo=o(" \u2014 "),tN=a("a"),Kgo=o("MobileBertTokenizer"),Zgo=o(" or "),aN=a("a"),eho=o("MobileBertTokenizerFast"),oho=o(" (MobileBERT model)"),rho=l(),Cs=a("li"),qie=a("strong"),tho=o("mpnet"),aho=o(" \u2014 "),nN=a("a"),nho=o("MPNetTokenizer"),sho=o(" or "),sN=a("a"),lho=o("MPNetTokenizerFast"),iho=o(" (MPNet model)"),dho=l(),ws=a("li"),jie=a("strong"),cho=o("mt5"),fho=o(" \u2014 "),lN=a("a"),mho=o("MT5Tokenizer"),gho=o(" or "),iN=a("a"),hho=o("MT5TokenizerFast"),pho=o(" (MT5 model)"),_ho=l(),As=a("li"),Die=a("strong"),uho=o("mvp"),bho=o(" \u2014 "),dN=a("a"),vho=o("MvpTokenizer"),Fho=o(" or "),cN=a("a"),Tho=o("MvpTokenizerFast"),Mho=o(" (MVP model)"),Eho=l(),Ls=a("li"),Gie=a("strong"),Cho=o("nezha"),who=o(" \u2014 "),fN=a("a"),Aho=o("BertTokenizer"),Lho=o(" or "),mN=a("a"),yho=o("BertTokenizerFast"),xho=o(" (Nezha model)"),$ho=l(),ys=a("li"),Oie=a("strong"),kho=o("nllb"),Sho=o(" \u2014 "),gN=a("a"),Rho=o("NllbTokenizer"),Pho=o(" or "),hN=a("a"),Bho=o("NllbTokenizerFast"),Iho=o(" (NLLB model)"),Nho=l(),xs=a("li"),Vie=a("strong"),qho=o("nystromformer"),jho=o(" \u2014 "),pN=a("a"),Dho=o("AlbertTokenizer"),Gho=o(" or "),_N=a("a"),Oho=o("AlbertTokenizerFast"),Vho=o(" (Nystr\xF6mformer model)"),Xho=l(),$s=a("li"),Xie=a("strong"),zho=o("openai-gpt"),Who=o(" \u2014 "),uN=a("a"),Qho=o("OpenAIGPTTokenizer"),Hho=o(" or "),bN=a("a"),Uho=o("OpenAIGPTTokenizerFast"),Jho=o(" (OpenAI GPT model)"),Yho=l(),Th=a("li"),zie=a("strong"),Kho=o("opt"),Zho=o(" \u2014 "),vN=a("a"),epo=o("GPT2Tokenizer"),opo=o(" (OPT model)"),rpo=l(),ks=a("li"),Wie=a("strong"),tpo=o("owlvit"),apo=o(" \u2014 "),FN=a("a"),npo=o("CLIPTokenizer"),spo=o(" or "),TN=a("a"),lpo=o("CLIPTokenizerFast"),ipo=o(" (OWL-ViT model)"),dpo=l(),Ss=a("li"),Qie=a("strong"),cpo=o("pegasus"),fpo=o(" \u2014 "),MN=a("a"),mpo=o("PegasusTokenizer"),gpo=o(" or "),EN=a("a"),hpo=o("PegasusTokenizerFast"),ppo=o(" (Pegasus model)"),_po=l(),Mh=a("li"),Hie=a("strong"),upo=o("perceiver"),bpo=o(" \u2014 "),CN=a("a"),vpo=o("PerceiverTokenizer"),Fpo=o(" (Perceiver model)"),Tpo=l(),Eh=a("li"),Uie=a("strong"),Mpo=o("phobert"),Epo=o(" \u2014 "),wN=a("a"),Cpo=o("PhobertTokenizer"),wpo=o(" (PhoBERT model)"),Apo=l(),Ch=a("li"),Jie=a("strong"),Lpo=o("plbart"),ypo=o(" \u2014 "),AN=a("a"),xpo=o("PLBartTokenizer"),$po=o(" (PLBart model)"),kpo=l(),wh=a("li"),Yie=a("strong"),Spo=o("prophetnet"),Rpo=o(" \u2014 "),LN=a("a"),Ppo=o("ProphetNetTokenizer"),Bpo=o(" (ProphetNet model)"),Ipo=l(),Rs=a("li"),Kie=a("strong"),Npo=o("qdqbert"),qpo=o(" \u2014 "),yN=a("a"),jpo=o("BertTokenizer"),Dpo=o(" or "),xN=a("a"),Gpo=o("BertTokenizerFast"),Opo=o(" (QDQBert model)"),Vpo=l(),Ah=a("li"),Zie=a("strong"),Xpo=o("rag"),zpo=o(" \u2014 "),$N=a("a"),Wpo=o("RagTokenizer"),Qpo=o(" (RAG model)"),Hpo=l(),Ps=a("li"),ede=a("strong"),Upo=o("realm"),Jpo=o(" \u2014 "),kN=a("a"),Ypo=o("RealmTokenizer"),Kpo=o(" or "),SN=a("a"),Zpo=o("RealmTokenizerFast"),e_o=o(" (REALM model)"),o_o=l(),Bs=a("li"),ode=a("strong"),r_o=o("reformer"),t_o=o(" \u2014 "),RN=a("a"),a_o=o("ReformerTokenizer"),n_o=o(" or "),PN=a("a"),s_o=o("ReformerTokenizerFast"),l_o=o(" (Reformer model)"),i_o=l(),Is=a("li"),rde=a("strong"),d_o=o("rembert"),c_o=o(" \u2014 "),BN=a("a"),f_o=o("RemBertTokenizer"),m_o=o(" or "),IN=a("a"),g_o=o("RemBertTokenizerFast"),h_o=o(" (RemBERT model)"),p_o=l(),Ns=a("li"),tde=a("strong"),__o=o("retribert"),u_o=o(" \u2014 "),NN=a("a"),b_o=o("RetriBertTokenizer"),v_o=o(" or "),qN=a("a"),F_o=o("RetriBertTokenizerFast"),T_o=o(" (RetriBERT model)"),M_o=l(),qs=a("li"),ade=a("strong"),E_o=o("roberta"),C_o=o(" \u2014 "),jN=a("a"),w_o=o("RobertaTokenizer"),A_o=o(" or "),DN=a("a"),L_o=o("RobertaTokenizerFast"),y_o=o(" (RoBERTa model)"),x_o=l(),js=a("li"),nde=a("strong"),$_o=o("roformer"),k_o=o(" \u2014 "),GN=a("a"),S_o=o("RoFormerTokenizer"),R_o=o(" or "),ON=a("a"),P_o=o("RoFormerTokenizerFast"),B_o=o(" (RoFormer model)"),I_o=l(),Lh=a("li"),sde=a("strong"),N_o=o("speech_to_text"),q_o=o(" \u2014 "),VN=a("a"),j_o=o("Speech2TextTokenizer"),D_o=o(" (Speech2Text model)"),G_o=l(),yh=a("li"),lde=a("strong"),O_o=o("speech_to_text_2"),V_o=o(" \u2014 "),XN=a("a"),X_o=o("Speech2Text2Tokenizer"),z_o=o(" (Speech2Text2 model)"),W_o=l(),Ds=a("li"),ide=a("strong"),Q_o=o("splinter"),H_o=o(" \u2014 "),zN=a("a"),U_o=o("SplinterTokenizer"),J_o=o(" or "),WN=a("a"),Y_o=o("SplinterTokenizerFast"),K_o=o(" (Splinter model)"),Z_o=l(),Gs=a("li"),dde=a("strong"),euo=o("squeezebert"),ouo=o(" \u2014 "),QN=a("a"),ruo=o("SqueezeBertTokenizer"),tuo=o(" or "),HN=a("a"),auo=o("SqueezeBertTokenizerFast"),nuo=o(" (SqueezeBERT model)"),suo=l(),Os=a("li"),cde=a("strong"),luo=o("t5"),iuo=o(" \u2014 "),UN=a("a"),duo=o("T5Tokenizer"),cuo=o(" or "),JN=a("a"),fuo=o("T5TokenizerFast"),muo=o(" (T5 model)"),guo=l(),xh=a("li"),fde=a("strong"),huo=o("tapas"),puo=o(" \u2014 "),YN=a("a"),_uo=o("TapasTokenizer"),uuo=o(" (TAPAS model)"),buo=l(),$h=a("li"),mde=a("strong"),vuo=o("tapex"),Fuo=o(" \u2014 "),KN=a("a"),Tuo=o("TapexTokenizer"),Muo=o(" (TAPEX model)"),Euo=l(),kh=a("li"),gde=a("strong"),Cuo=o("transfo-xl"),wuo=o(" \u2014 "),ZN=a("a"),Auo=o("TransfoXLTokenizer"),Luo=o(" (Transformer-XL model)"),yuo=l(),Vs=a("li"),hde=a("strong"),xuo=o("vilt"),$uo=o(" \u2014 "),eq=a("a"),kuo=o("BertTokenizer"),Suo=o(" or "),oq=a("a"),Ruo=o("BertTokenizerFast"),Puo=o(" (ViLT model)"),Buo=l(),Xs=a("li"),pde=a("strong"),Iuo=o("visual_bert"),Nuo=o(" \u2014 "),rq=a("a"),quo=o("BertTokenizer"),juo=o(" or "),tq=a("a"),Duo=o("BertTokenizerFast"),Guo=o(" (VisualBERT model)"),Ouo=l(),Sh=a("li"),_de=a("strong"),Vuo=o("wav2vec2"),Xuo=o(" \u2014 "),aq=a("a"),zuo=o("Wav2Vec2CTCTokenizer"),Wuo=o(" (Wav2Vec2 model)"),Quo=l(),Rh=a("li"),ude=a("strong"),Huo=o("wav2vec2-conformer"),Uuo=o(" \u2014 "),nq=a("a"),Juo=o("Wav2Vec2CTCTokenizer"),Yuo=o(" (Wav2Vec2-Conformer model)"),Kuo=l(),Ph=a("li"),bde=a("strong"),Zuo=o("wav2vec2_phoneme"),e1o=o(" \u2014 "),sq=a("a"),o1o=o("Wav2Vec2PhonemeCTCTokenizer"),r1o=o(" (Wav2Vec2Phoneme model)"),t1o=l(),zs=a("li"),vde=a("strong"),a1o=o("xglm"),n1o=o(" \u2014 "),lq=a("a"),s1o=o("XGLMTokenizer"),l1o=o(" or "),iq=a("a"),i1o=o("XGLMTokenizerFast"),d1o=o(" (XGLM model)"),c1o=l(),Bh=a("li"),Fde=a("strong"),f1o=o("xlm"),m1o=o(" \u2014 "),dq=a("a"),g1o=o("XLMTokenizer"),h1o=o(" (XLM model)"),p1o=l(),Ih=a("li"),Tde=a("strong"),_1o=o("xlm-prophetnet"),u1o=o(" \u2014 "),cq=a("a"),b1o=o("XLMProphetNetTokenizer"),v1o=o(" (XLM-ProphetNet model)"),F1o=l(),Ws=a("li"),Mde=a("strong"),T1o=o("xlm-roberta"),M1o=o(" \u2014 "),fq=a("a"),E1o=o("XLMRobertaTokenizer"),C1o=o(" or "),mq=a("a"),w1o=o("XLMRobertaTokenizerFast"),A1o=o(" (XLM-RoBERTa model)"),L1o=l(),Qs=a("li"),Ede=a("strong"),y1o=o("xlm-roberta-xl"),x1o=o(" \u2014 "),gq=a("a"),$1o=o("RobertaTokenizer"),k1o=o(" or "),hq=a("a"),S1o=o("RobertaTokenizerFast"),R1o=o(" (XLM-RoBERTa-XL model)"),P1o=l(),Hs=a("li"),Cde=a("strong"),B1o=o("xlnet"),I1o=o(" \u2014 "),pq=a("a"),N1o=o("XLNetTokenizer"),q1o=o(" or "),_q=a("a"),j1o=o("XLNetTokenizerFast"),D1o=o(" (XLNet model)"),G1o=l(),Us=a("li"),wde=a("strong"),O1o=o("yoso"),V1o=o(" \u2014 "),uq=a("a"),X1o=o("AlbertTokenizer"),z1o=o(" or "),bq=a("a"),W1o=o("AlbertTokenizerFast"),Q1o=o(" (YOSO model)"),H1o=l(),F(Nh.$$.fragment),U1o=l(),qh=a("div"),F(PL.$$.fragment),J1o=l(),Ade=a("p"),Y1o=o("Register a new tokenizer in this mapping."),bze=l(),Gi=a("h2"),jh=a("a"),Lde=a("span"),F(BL.$$.fragment),K1o=l(),yde=a("span"),Z1o=o("AutoFeatureExtractor"),vze=l(),xo=a("div"),F(IL.$$.fragment),e2o=l(),NL=a("p"),o2o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vq=a("a"),r2o=o("AutoFeatureExtractor.from_pretrained()"),t2o=o(" class method."),a2o=l(),qL=a("p"),n2o=o("This class cannot be instantiated directly using "),xde=a("code"),s2o=o("__init__()"),l2o=o(" (throws an error)."),i2o=l(),Ue=a("div"),F(jL.$$.fragment),d2o=l(),$de=a("p"),c2o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),f2o=l(),Ba=a("p"),m2o=o("The feature extractor class to instantiate is selected based on the "),kde=a("code"),g2o=o("model_type"),h2o=o(` property of the config object
(either passed as an argument or loaded from `),Sde=a("code"),p2o=o("pretrained_model_name_or_path"),_2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rde=a("code"),u2o=o("pretrained_model_name_or_path"),b2o=o(":"),v2o=l(),U=a("ul"),Dh=a("li"),Pde=a("strong"),F2o=o("beit"),T2o=o(" \u2014 "),Fq=a("a"),M2o=o("BeitFeatureExtractor"),E2o=o(" (BEiT model)"),C2o=l(),Gh=a("li"),Bde=a("strong"),w2o=o("clip"),A2o=o(" \u2014 "),Tq=a("a"),L2o=o("CLIPFeatureExtractor"),y2o=o(" (CLIP model)"),x2o=l(),Oh=a("li"),Ide=a("strong"),$2o=o("convnext"),k2o=o(" \u2014 "),Mq=a("a"),S2o=o("ConvNextFeatureExtractor"),R2o=o(" (ConvNeXT model)"),P2o=l(),Vh=a("li"),Nde=a("strong"),B2o=o("cvt"),I2o=o(" \u2014 "),Eq=a("a"),N2o=o("ConvNextFeatureExtractor"),q2o=o(" (CvT model)"),j2o=l(),Xh=a("li"),qde=a("strong"),D2o=o("data2vec-audio"),G2o=o(" \u2014 "),Cq=a("a"),O2o=o("Wav2Vec2FeatureExtractor"),V2o=o(" (Data2VecAudio model)"),X2o=l(),zh=a("li"),jde=a("strong"),z2o=o("data2vec-vision"),W2o=o(" \u2014 "),wq=a("a"),Q2o=o("BeitFeatureExtractor"),H2o=o(" (Data2VecVision model)"),U2o=l(),Wh=a("li"),Dde=a("strong"),J2o=o("deit"),Y2o=o(" \u2014 "),Aq=a("a"),K2o=o("DeiTFeatureExtractor"),Z2o=o(" (DeiT model)"),ebo=l(),Qh=a("li"),Gde=a("strong"),obo=o("detr"),rbo=o(" \u2014 "),Lq=a("a"),tbo=o("DetrFeatureExtractor"),abo=o(" (DETR model)"),nbo=l(),Hh=a("li"),Ode=a("strong"),sbo=o("dpt"),lbo=o(" \u2014 "),yq=a("a"),ibo=o("DPTFeatureExtractor"),dbo=o(" (DPT model)"),cbo=l(),Uh=a("li"),Vde=a("strong"),fbo=o("flava"),mbo=o(" \u2014 "),xq=a("a"),gbo=o("FlavaFeatureExtractor"),hbo=o(" (FLAVA model)"),pbo=l(),Jh=a("li"),Xde=a("strong"),_bo=o("glpn"),ubo=o(" \u2014 "),$q=a("a"),bbo=o("GLPNFeatureExtractor"),vbo=o(" (GLPN model)"),Fbo=l(),Yh=a("li"),zde=a("strong"),Tbo=o("groupvit"),Mbo=o(" \u2014 "),kq=a("a"),Ebo=o("CLIPFeatureExtractor"),Cbo=o(" (GroupViT model)"),wbo=l(),Kh=a("li"),Wde=a("strong"),Abo=o("hubert"),Lbo=o(" \u2014 "),Sq=a("a"),ybo=o("Wav2Vec2FeatureExtractor"),xbo=o(" (Hubert model)"),$bo=l(),Zh=a("li"),Qde=a("strong"),kbo=o("imagegpt"),Sbo=o(" \u2014 "),Rq=a("a"),Rbo=o("ImageGPTFeatureExtractor"),Pbo=o(" (ImageGPT model)"),Bbo=l(),ep=a("li"),Hde=a("strong"),Ibo=o("layoutlmv2"),Nbo=o(" \u2014 "),Pq=a("a"),qbo=o("LayoutLMv2FeatureExtractor"),jbo=o(" (LayoutLMv2 model)"),Dbo=l(),op=a("li"),Ude=a("strong"),Gbo=o("layoutlmv3"),Obo=o(" \u2014 "),Bq=a("a"),Vbo=o("LayoutLMv3FeatureExtractor"),Xbo=o(" (LayoutLMv3 model)"),zbo=l(),rp=a("li"),Jde=a("strong"),Wbo=o("levit"),Qbo=o(" \u2014 "),Iq=a("a"),Hbo=o("LevitFeatureExtractor"),Ubo=o(" (LeViT model)"),Jbo=l(),tp=a("li"),Yde=a("strong"),Ybo=o("maskformer"),Kbo=o(" \u2014 "),Nq=a("a"),Zbo=o("MaskFormerFeatureExtractor"),evo=o(" (MaskFormer model)"),ovo=l(),ap=a("li"),Kde=a("strong"),rvo=o("mctct"),tvo=o(" \u2014 "),qq=a("a"),avo=o("MCTCTFeatureExtractor"),nvo=o(" (M-CTC-T model)"),svo=l(),np=a("li"),Zde=a("strong"),lvo=o("mobilevit"),ivo=o(" \u2014 "),jq=a("a"),dvo=o("MobileViTFeatureExtractor"),cvo=o(" (MobileViT model)"),fvo=l(),sp=a("li"),ece=a("strong"),mvo=o("owlvit"),gvo=o(" \u2014 "),Dq=a("a"),hvo=o("OwlViTFeatureExtractor"),pvo=o(" (OWL-ViT model)"),_vo=l(),lp=a("li"),oce=a("strong"),uvo=o("perceiver"),bvo=o(" \u2014 "),Gq=a("a"),vvo=o("PerceiverFeatureExtractor"),Fvo=o(" (Perceiver model)"),Tvo=l(),ip=a("li"),rce=a("strong"),Mvo=o("poolformer"),Evo=o(" \u2014 "),Oq=a("a"),Cvo=o("PoolFormerFeatureExtractor"),wvo=o(" (PoolFormer model)"),Avo=l(),dp=a("li"),tce=a("strong"),Lvo=o("regnet"),yvo=o(" \u2014 "),Vq=a("a"),xvo=o("ConvNextFeatureExtractor"),$vo=o(" (RegNet model)"),kvo=l(),cp=a("li"),ace=a("strong"),Svo=o("resnet"),Rvo=o(" \u2014 "),Xq=a("a"),Pvo=o("ConvNextFeatureExtractor"),Bvo=o(" (ResNet model)"),Ivo=l(),fp=a("li"),nce=a("strong"),Nvo=o("segformer"),qvo=o(" \u2014 "),zq=a("a"),jvo=o("SegformerFeatureExtractor"),Dvo=o(" (SegFormer model)"),Gvo=l(),mp=a("li"),sce=a("strong"),Ovo=o("speech_to_text"),Vvo=o(" \u2014 "),Wq=a("a"),Xvo=o("Speech2TextFeatureExtractor"),zvo=o(" (Speech2Text model)"),Wvo=l(),gp=a("li"),lce=a("strong"),Qvo=o("swin"),Hvo=o(" \u2014 "),Qq=a("a"),Uvo=o("ViTFeatureExtractor"),Jvo=o(" (Swin Transformer model)"),Yvo=l(),hp=a("li"),ice=a("strong"),Kvo=o("swinv2"),Zvo=o(" \u2014 "),Hq=a("a"),e3o=o("ViTFeatureExtractor"),o3o=o(" (Swin Transformer V2 model)"),r3o=l(),pp=a("li"),dce=a("strong"),t3o=o("van"),a3o=o(" \u2014 "),Uq=a("a"),n3o=o("ConvNextFeatureExtractor"),s3o=o(" (VAN model)"),l3o=l(),_p=a("li"),cce=a("strong"),i3o=o("vilt"),d3o=o(" \u2014 "),Jq=a("a"),c3o=o("ViltFeatureExtractor"),f3o=o(" (ViLT model)"),m3o=l(),up=a("li"),fce=a("strong"),g3o=o("vit"),h3o=o(" \u2014 "),Yq=a("a"),p3o=o("ViTFeatureExtractor"),_3o=o(" (ViT model)"),u3o=l(),bp=a("li"),mce=a("strong"),b3o=o("vit_mae"),v3o=o(" \u2014 "),Kq=a("a"),F3o=o("ViTFeatureExtractor"),T3o=o(" (ViTMAE model)"),M3o=l(),vp=a("li"),gce=a("strong"),E3o=o("wav2vec2"),C3o=o(" \u2014 "),Zq=a("a"),w3o=o("Wav2Vec2FeatureExtractor"),A3o=o(" (Wav2Vec2 model)"),L3o=l(),Fp=a("li"),hce=a("strong"),y3o=o("wav2vec2-conformer"),x3o=o(" \u2014 "),ej=a("a"),$3o=o("Wav2Vec2FeatureExtractor"),k3o=o(" (Wav2Vec2-Conformer model)"),S3o=l(),Tp=a("li"),pce=a("strong"),R3o=o("yolos"),P3o=o(" \u2014 "),oj=a("a"),B3o=o("YolosFeatureExtractor"),I3o=o(" (YOLOS model)"),N3o=l(),F(Mp.$$.fragment),q3o=l(),F(Ep.$$.fragment),j3o=l(),Cp=a("div"),F(DL.$$.fragment),D3o=l(),_ce=a("p"),G3o=o("Register a new feature extractor for this class."),Fze=l(),Oi=a("h2"),wp=a("a"),uce=a("span"),F(GL.$$.fragment),O3o=l(),bce=a("span"),V3o=o("AutoProcessor"),Tze=l(),$o=a("div"),F(OL.$$.fragment),X3o=l(),VL=a("p"),z3o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rj=a("a"),W3o=o("AutoProcessor.from_pretrained()"),Q3o=o(" class method."),H3o=l(),XL=a("p"),U3o=o("This class cannot be instantiated directly using "),vce=a("code"),J3o=o("__init__()"),Y3o=o(" (throws an error)."),K3o=l(),Je=a("div"),F(zL.$$.fragment),Z3o=l(),Fce=a("p"),eFo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),oFo=l(),Vi=a("p"),rFo=o("The processor class to instantiate is selected based on the "),Tce=a("code"),tFo=o("model_type"),aFo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),nFo=o("pretrained_model_name_or_path"),sFo=o(" if possible):"),lFo=l(),fe=a("ul"),Ap=a("li"),Ece=a("strong"),iFo=o("clip"),dFo=o(" \u2014 "),tj=a("a"),cFo=o("CLIPProcessor"),fFo=o(" (CLIP model)"),mFo=l(),Lp=a("li"),Cce=a("strong"),gFo=o("flava"),hFo=o(" \u2014 "),aj=a("a"),pFo=o("FlavaProcessor"),_Fo=o(" (FLAVA model)"),uFo=l(),yp=a("li"),wce=a("strong"),bFo=o("groupvit"),vFo=o(" \u2014 "),nj=a("a"),FFo=o("CLIPProcessor"),TFo=o(" (GroupViT model)"),MFo=l(),xp=a("li"),Ace=a("strong"),EFo=o("layoutlmv2"),CFo=o(" \u2014 "),sj=a("a"),wFo=o("LayoutLMv2Processor"),AFo=o(" (LayoutLMv2 model)"),LFo=l(),$p=a("li"),Lce=a("strong"),yFo=o("layoutlmv3"),xFo=o(" \u2014 "),lj=a("a"),$Fo=o("LayoutLMv3Processor"),kFo=o(" (LayoutLMv3 model)"),SFo=l(),kp=a("li"),yce=a("strong"),RFo=o("layoutxlm"),PFo=o(" \u2014 "),ij=a("a"),BFo=o("LayoutXLMProcessor"),IFo=o(" (LayoutXLM model)"),NFo=l(),Sp=a("li"),xce=a("strong"),qFo=o("owlvit"),jFo=o(" \u2014 "),dj=a("a"),DFo=o("OwlViTProcessor"),GFo=o(" (OWL-ViT model)"),OFo=l(),Rp=a("li"),$ce=a("strong"),VFo=o("sew"),XFo=o(" \u2014 "),cj=a("a"),zFo=o("Wav2Vec2Processor"),WFo=o(" (SEW model)"),QFo=l(),Pp=a("li"),kce=a("strong"),HFo=o("sew-d"),UFo=o(" \u2014 "),fj=a("a"),JFo=o("Wav2Vec2Processor"),YFo=o(" (SEW-D model)"),KFo=l(),Bp=a("li"),Sce=a("strong"),ZFo=o("speech_to_text"),e6o=o(" \u2014 "),mj=a("a"),o6o=o("Speech2TextProcessor"),r6o=o(" (Speech2Text model)"),t6o=l(),Ip=a("li"),Rce=a("strong"),a6o=o("speech_to_text_2"),n6o=o(" \u2014 "),gj=a("a"),s6o=o("Speech2Text2Processor"),l6o=o(" (Speech2Text2 model)"),i6o=l(),Np=a("li"),Pce=a("strong"),d6o=o("trocr"),c6o=o(" \u2014 "),hj=a("a"),f6o=o("TrOCRProcessor"),m6o=o(" (TrOCR model)"),g6o=l(),qp=a("li"),Bce=a("strong"),h6o=o("unispeech"),p6o=o(" \u2014 "),pj=a("a"),_6o=o("Wav2Vec2Processor"),u6o=o(" (UniSpeech model)"),b6o=l(),jp=a("li"),Ice=a("strong"),v6o=o("unispeech-sat"),F6o=o(" \u2014 "),_j=a("a"),T6o=o("Wav2Vec2Processor"),M6o=o(" (UniSpeechSat model)"),E6o=l(),Dp=a("li"),Nce=a("strong"),C6o=o("vilt"),w6o=o(" \u2014 "),uj=a("a"),A6o=o("ViltProcessor"),L6o=o(" (ViLT model)"),y6o=l(),Gp=a("li"),qce=a("strong"),x6o=o("vision-text-dual-encoder"),$6o=o(" \u2014 "),bj=a("a"),k6o=o("VisionTextDualEncoderProcessor"),S6o=o(" (VisionTextDualEncoder model)"),R6o=l(),Op=a("li"),jce=a("strong"),P6o=o("wav2vec2"),B6o=o(" \u2014 "),vj=a("a"),I6o=o("Wav2Vec2Processor"),N6o=o(" (Wav2Vec2 model)"),q6o=l(),Vp=a("li"),Dce=a("strong"),j6o=o("wav2vec2-conformer"),D6o=o(" \u2014 "),Fj=a("a"),G6o=o("Wav2Vec2Processor"),O6o=o(" (Wav2Vec2-Conformer model)"),V6o=l(),Xp=a("li"),Gce=a("strong"),X6o=o("wavlm"),z6o=o(" \u2014 "),Tj=a("a"),W6o=o("Wav2Vec2Processor"),Q6o=o(" (WavLM model)"),H6o=l(),F(zp.$$.fragment),U6o=l(),F(Wp.$$.fragment),J6o=l(),Qp=a("div"),F(WL.$$.fragment),Y6o=l(),Oce=a("p"),K6o=o("Register a new processor for this class."),Mze=l(),Xi=a("h2"),Hp=a("a"),Vce=a("span"),F(QL.$$.fragment),Z6o=l(),Xce=a("span"),eTo=o("AutoModel"),Eze=l(),ko=a("div"),F(HL.$$.fragment),oTo=l(),zi=a("p"),rTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mj=a("a"),tTo=o("from_pretrained()"),aTo=o(" class method or the "),Ej=a("a"),nTo=o("from_config()"),sTo=o(` class
method.`),lTo=l(),UL=a("p"),iTo=o("This class cannot be instantiated directly using "),zce=a("code"),dTo=o("__init__()"),cTo=o(" (throws an error)."),fTo=l(),it=a("div"),F(JL.$$.fragment),mTo=l(),Wce=a("p"),gTo=o("Instantiates one of the base model classes of the library from a configuration."),hTo=l(),Wi=a("p"),pTo=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),_To=o("not"),uTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),bTo=o("from_pretrained()"),vTo=o(" to load the model weights."),FTo=l(),F(Up.$$.fragment),TTo=l(),Ye=a("div"),F(YL.$$.fragment),MTo=l(),Hce=a("p"),ETo=o("Instantiate one of the base model classes of the library from a pretrained model."),CTo=l(),Ia=a("p"),wTo=o("The model class to instantiate is selected based on the "),Uce=a("code"),ATo=o("model_type"),LTo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),yTo=o("pretrained_model_name_or_path"),xTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),$To=o("pretrained_model_name_or_path"),kTo=o(":"),STo=l(),y=a("ul"),Jp=a("li"),Kce=a("strong"),RTo=o("albert"),PTo=o(" \u2014 "),wj=a("a"),BTo=o("AlbertModel"),ITo=o(" (ALBERT model)"),NTo=l(),Yp=a("li"),Zce=a("strong"),qTo=o("bart"),jTo=o(" \u2014 "),Aj=a("a"),DTo=o("BartModel"),GTo=o(" (BART model)"),OTo=l(),Kp=a("li"),efe=a("strong"),VTo=o("beit"),XTo=o(" \u2014 "),Lj=a("a"),zTo=o("BeitModel"),WTo=o(" (BEiT model)"),QTo=l(),Zp=a("li"),ofe=a("strong"),HTo=o("bert"),UTo=o(" \u2014 "),yj=a("a"),JTo=o("BertModel"),YTo=o(" (BERT model)"),KTo=l(),e_=a("li"),rfe=a("strong"),ZTo=o("bert-generation"),e8o=o(" \u2014 "),xj=a("a"),o8o=o("BertGenerationEncoder"),r8o=o(" (Bert Generation model)"),t8o=l(),o_=a("li"),tfe=a("strong"),a8o=o("big_bird"),n8o=o(" \u2014 "),$j=a("a"),s8o=o("BigBirdModel"),l8o=o(" (BigBird model)"),i8o=l(),r_=a("li"),afe=a("strong"),d8o=o("bigbird_pegasus"),c8o=o(" \u2014 "),kj=a("a"),f8o=o("BigBirdPegasusModel"),m8o=o(" (BigBird-Pegasus model)"),g8o=l(),t_=a("li"),nfe=a("strong"),h8o=o("blenderbot"),p8o=o(" \u2014 "),Sj=a("a"),_8o=o("BlenderbotModel"),u8o=o(" (Blenderbot model)"),b8o=l(),a_=a("li"),sfe=a("strong"),v8o=o("blenderbot-small"),F8o=o(" \u2014 "),Rj=a("a"),T8o=o("BlenderbotSmallModel"),M8o=o(" (BlenderbotSmall model)"),E8o=l(),n_=a("li"),lfe=a("strong"),C8o=o("bloom"),w8o=o(" \u2014 "),Pj=a("a"),A8o=o("BloomModel"),L8o=o(" (BLOOM model)"),y8o=l(),s_=a("li"),ife=a("strong"),x8o=o("camembert"),$8o=o(" \u2014 "),Bj=a("a"),k8o=o("CamembertModel"),S8o=o(" (CamemBERT model)"),R8o=l(),l_=a("li"),dfe=a("strong"),P8o=o("canine"),B8o=o(" \u2014 "),Ij=a("a"),I8o=o("CanineModel"),N8o=o(" (CANINE model)"),q8o=l(),i_=a("li"),cfe=a("strong"),j8o=o("clip"),D8o=o(" \u2014 "),Nj=a("a"),G8o=o("CLIPModel"),O8o=o(" (CLIP model)"),V8o=l(),d_=a("li"),ffe=a("strong"),X8o=o("codegen"),z8o=o(" \u2014 "),qj=a("a"),W8o=o("CodeGenModel"),Q8o=o(" (CodeGen model)"),H8o=l(),c_=a("li"),mfe=a("strong"),U8o=o("convbert"),J8o=o(" \u2014 "),jj=a("a"),Y8o=o("ConvBertModel"),K8o=o(" (ConvBERT model)"),Z8o=l(),f_=a("li"),gfe=a("strong"),eMo=o("convnext"),oMo=o(" \u2014 "),Dj=a("a"),rMo=o("ConvNextModel"),tMo=o(" (ConvNeXT model)"),aMo=l(),m_=a("li"),hfe=a("strong"),nMo=o("ctrl"),sMo=o(" \u2014 "),Gj=a("a"),lMo=o("CTRLModel"),iMo=o(" (CTRL model)"),dMo=l(),g_=a("li"),pfe=a("strong"),cMo=o("cvt"),fMo=o(" \u2014 "),Oj=a("a"),mMo=o("CvtModel"),gMo=o(" (CvT model)"),hMo=l(),h_=a("li"),_fe=a("strong"),pMo=o("data2vec-audio"),_Mo=o(" \u2014 "),Vj=a("a"),uMo=o("Data2VecAudioModel"),bMo=o(" (Data2VecAudio model)"),vMo=l(),p_=a("li"),ufe=a("strong"),FMo=o("data2vec-text"),TMo=o(" \u2014 "),Xj=a("a"),MMo=o("Data2VecTextModel"),EMo=o(" (Data2VecText model)"),CMo=l(),__=a("li"),bfe=a("strong"),wMo=o("data2vec-vision"),AMo=o(" \u2014 "),zj=a("a"),LMo=o("Data2VecVisionModel"),yMo=o(" (Data2VecVision model)"),xMo=l(),u_=a("li"),vfe=a("strong"),$Mo=o("deberta"),kMo=o(" \u2014 "),Wj=a("a"),SMo=o("DebertaModel"),RMo=o(" (DeBERTa model)"),PMo=l(),b_=a("li"),Ffe=a("strong"),BMo=o("deberta-v2"),IMo=o(" \u2014 "),Qj=a("a"),NMo=o("DebertaV2Model"),qMo=o(" (DeBERTa-v2 model)"),jMo=l(),v_=a("li"),Tfe=a("strong"),DMo=o("decision_transformer"),GMo=o(" \u2014 "),Hj=a("a"),OMo=o("DecisionTransformerModel"),VMo=o(" (Decision Transformer model)"),XMo=l(),F_=a("li"),Mfe=a("strong"),zMo=o("deit"),WMo=o(" \u2014 "),Uj=a("a"),QMo=o("DeiTModel"),HMo=o(" (DeiT model)"),UMo=l(),T_=a("li"),Efe=a("strong"),JMo=o("detr"),YMo=o(" \u2014 "),Jj=a("a"),KMo=o("DetrModel"),ZMo=o(" (DETR model)"),e4o=l(),M_=a("li"),Cfe=a("strong"),o4o=o("distilbert"),r4o=o(" \u2014 "),Yj=a("a"),t4o=o("DistilBertModel"),a4o=o(" (DistilBERT model)"),n4o=l(),E_=a("li"),wfe=a("strong"),s4o=o("dpr"),l4o=o(" \u2014 "),Kj=a("a"),i4o=o("DPRQuestionEncoder"),d4o=o(" (DPR model)"),c4o=l(),C_=a("li"),Afe=a("strong"),f4o=o("dpt"),m4o=o(" \u2014 "),Zj=a("a"),g4o=o("DPTModel"),h4o=o(" (DPT model)"),p4o=l(),w_=a("li"),Lfe=a("strong"),_4o=o("electra"),u4o=o(" \u2014 "),eD=a("a"),b4o=o("ElectraModel"),v4o=o(" (ELECTRA model)"),F4o=l(),A_=a("li"),yfe=a("strong"),T4o=o("flaubert"),M4o=o(" \u2014 "),oD=a("a"),E4o=o("FlaubertModel"),C4o=o(" (FlauBERT model)"),w4o=l(),L_=a("li"),xfe=a("strong"),A4o=o("flava"),L4o=o(" \u2014 "),rD=a("a"),y4o=o("FlavaModel"),x4o=o(" (FLAVA model)"),$4o=l(),y_=a("li"),$fe=a("strong"),k4o=o("fnet"),S4o=o(" \u2014 "),tD=a("a"),R4o=o("FNetModel"),P4o=o(" (FNet model)"),B4o=l(),x_=a("li"),kfe=a("strong"),I4o=o("fsmt"),N4o=o(" \u2014 "),aD=a("a"),q4o=o("FSMTModel"),j4o=o(" (FairSeq Machine-Translation model)"),D4o=l(),Js=a("li"),Sfe=a("strong"),G4o=o("funnel"),O4o=o(" \u2014 "),nD=a("a"),V4o=o("FunnelModel"),X4o=o(" or "),sD=a("a"),z4o=o("FunnelBaseModel"),W4o=o(" (Funnel Transformer model)"),Q4o=l(),$_=a("li"),Rfe=a("strong"),H4o=o("glpn"),U4o=o(" \u2014 "),lD=a("a"),J4o=o("GLPNModel"),Y4o=o(" (GLPN model)"),K4o=l(),k_=a("li"),Pfe=a("strong"),Z4o=o("gpt2"),eEo=o(" \u2014 "),iD=a("a"),oEo=o("GPT2Model"),rEo=o(" (OpenAI GPT-2 model)"),tEo=l(),S_=a("li"),Bfe=a("strong"),aEo=o("gpt_neo"),nEo=o(" \u2014 "),dD=a("a"),sEo=o("GPTNeoModel"),lEo=o(" (GPT Neo model)"),iEo=l(),R_=a("li"),Ife=a("strong"),dEo=o("gpt_neox"),cEo=o(" \u2014 "),cD=a("a"),fEo=o("GPTNeoXModel"),mEo=o(" (GPT NeoX model)"),gEo=l(),P_=a("li"),Nfe=a("strong"),hEo=o("gptj"),pEo=o(" \u2014 "),fD=a("a"),_Eo=o("GPTJModel"),uEo=o(" (GPT-J model)"),bEo=l(),B_=a("li"),qfe=a("strong"),vEo=o("groupvit"),FEo=o(" \u2014 "),mD=a("a"),TEo=o("GroupViTModel"),MEo=o(" (GroupViT model)"),EEo=l(),I_=a("li"),jfe=a("strong"),CEo=o("hubert"),wEo=o(" \u2014 "),gD=a("a"),AEo=o("HubertModel"),LEo=o(" (Hubert model)"),yEo=l(),N_=a("li"),Dfe=a("strong"),xEo=o("ibert"),$Eo=o(" \u2014 "),hD=a("a"),kEo=o("IBertModel"),SEo=o(" (I-BERT model)"),REo=l(),q_=a("li"),Gfe=a("strong"),PEo=o("imagegpt"),BEo=o(" \u2014 "),pD=a("a"),IEo=o("ImageGPTModel"),NEo=o(" (ImageGPT model)"),qEo=l(),j_=a("li"),Ofe=a("strong"),jEo=o("layoutlm"),DEo=o(" \u2014 "),_D=a("a"),GEo=o("LayoutLMModel"),OEo=o(" (LayoutLM model)"),VEo=l(),D_=a("li"),Vfe=a("strong"),XEo=o("layoutlmv2"),zEo=o(" \u2014 "),uD=a("a"),WEo=o("LayoutLMv2Model"),QEo=o(" (LayoutLMv2 model)"),HEo=l(),G_=a("li"),Xfe=a("strong"),UEo=o("layoutlmv3"),JEo=o(" \u2014 "),bD=a("a"),YEo=o("LayoutLMv3Model"),KEo=o(" (LayoutLMv3 model)"),ZEo=l(),O_=a("li"),zfe=a("strong"),eCo=o("led"),oCo=o(" \u2014 "),vD=a("a"),rCo=o("LEDModel"),tCo=o(" (LED model)"),aCo=l(),V_=a("li"),Wfe=a("strong"),nCo=o("levit"),sCo=o(" \u2014 "),FD=a("a"),lCo=o("LevitModel"),iCo=o(" (LeViT model)"),dCo=l(),X_=a("li"),Qfe=a("strong"),cCo=o("longformer"),fCo=o(" \u2014 "),TD=a("a"),mCo=o("LongformerModel"),gCo=o(" (Longformer model)"),hCo=l(),z_=a("li"),Hfe=a("strong"),pCo=o("longt5"),_Co=o(" \u2014 "),MD=a("a"),uCo=o("LongT5Model"),bCo=o(" (LongT5 model)"),vCo=l(),W_=a("li"),Ufe=a("strong"),FCo=o("luke"),TCo=o(" \u2014 "),ED=a("a"),MCo=o("LukeModel"),ECo=o(" (LUKE model)"),CCo=l(),Q_=a("li"),Jfe=a("strong"),wCo=o("lxmert"),ACo=o(" \u2014 "),CD=a("a"),LCo=o("LxmertModel"),yCo=o(" (LXMERT model)"),xCo=l(),H_=a("li"),Yfe=a("strong"),$Co=o("m2m_100"),kCo=o(" \u2014 "),wD=a("a"),SCo=o("M2M100Model"),RCo=o(" (M2M100 model)"),PCo=l(),U_=a("li"),Kfe=a("strong"),BCo=o("marian"),ICo=o(" \u2014 "),AD=a("a"),NCo=o("MarianModel"),qCo=o(" (Marian model)"),jCo=l(),J_=a("li"),Zfe=a("strong"),DCo=o("maskformer"),GCo=o(" \u2014 "),LD=a("a"),OCo=o("MaskFormerModel"),VCo=o(" (MaskFormer model)"),XCo=l(),Y_=a("li"),eme=a("strong"),zCo=o("mbart"),WCo=o(" \u2014 "),yD=a("a"),QCo=o("MBartModel"),HCo=o(" (mBART model)"),UCo=l(),K_=a("li"),ome=a("strong"),JCo=o("mctct"),YCo=o(" \u2014 "),xD=a("a"),KCo=o("MCTCTModel"),ZCo=o(" (M-CTC-T model)"),e5o=l(),Z_=a("li"),rme=a("strong"),o5o=o("megatron-bert"),r5o=o(" \u2014 "),$D=a("a"),t5o=o("MegatronBertModel"),a5o=o(" (Megatron-BERT model)"),n5o=l(),eu=a("li"),tme=a("strong"),s5o=o("mobilebert"),l5o=o(" \u2014 "),kD=a("a"),i5o=o("MobileBertModel"),d5o=o(" (MobileBERT model)"),c5o=l(),ou=a("li"),ame=a("strong"),f5o=o("mobilevit"),m5o=o(" \u2014 "),SD=a("a"),g5o=o("MobileViTModel"),h5o=o(" (MobileViT model)"),p5o=l(),ru=a("li"),nme=a("strong"),_5o=o("mpnet"),u5o=o(" \u2014 "),RD=a("a"),b5o=o("MPNetModel"),v5o=o(" (MPNet model)"),F5o=l(),tu=a("li"),sme=a("strong"),T5o=o("mt5"),M5o=o(" \u2014 "),PD=a("a"),E5o=o("MT5Model"),C5o=o(" (MT5 model)"),w5o=l(),au=a("li"),lme=a("strong"),A5o=o("mvp"),L5o=o(" \u2014 "),BD=a("a"),y5o=o("MvpModel"),x5o=o(" (MVP model)"),$5o=l(),nu=a("li"),ime=a("strong"),k5o=o("nezha"),S5o=o(" \u2014 "),ID=a("a"),R5o=o("NezhaModel"),P5o=o(" (Nezha model)"),B5o=l(),su=a("li"),dme=a("strong"),I5o=o("nllb"),N5o=o(" \u2014 "),ND=a("a"),q5o=o("M2M100Model"),j5o=o(" (NLLB model)"),D5o=l(),lu=a("li"),cme=a("strong"),G5o=o("nystromformer"),O5o=o(" \u2014 "),qD=a("a"),V5o=o("NystromformerModel"),X5o=o(" (Nystr\xF6mformer model)"),z5o=l(),iu=a("li"),fme=a("strong"),W5o=o("openai-gpt"),Q5o=o(" \u2014 "),jD=a("a"),H5o=o("OpenAIGPTModel"),U5o=o(" (OpenAI GPT model)"),J5o=l(),du=a("li"),mme=a("strong"),Y5o=o("opt"),K5o=o(" \u2014 "),DD=a("a"),Z5o=o("OPTModel"),e0o=o(" (OPT model)"),o0o=l(),cu=a("li"),gme=a("strong"),r0o=o("owlvit"),t0o=o(" \u2014 "),GD=a("a"),a0o=o("OwlViTModel"),n0o=o(" (OWL-ViT model)"),s0o=l(),fu=a("li"),hme=a("strong"),l0o=o("pegasus"),i0o=o(" \u2014 "),OD=a("a"),d0o=o("PegasusModel"),c0o=o(" (Pegasus model)"),f0o=l(),mu=a("li"),pme=a("strong"),m0o=o("perceiver"),g0o=o(" \u2014 "),VD=a("a"),h0o=o("PerceiverModel"),p0o=o(" (Perceiver model)"),_0o=l(),gu=a("li"),_me=a("strong"),u0o=o("plbart"),b0o=o(" \u2014 "),XD=a("a"),v0o=o("PLBartModel"),F0o=o(" (PLBart model)"),T0o=l(),hu=a("li"),ume=a("strong"),M0o=o("poolformer"),E0o=o(" \u2014 "),zD=a("a"),C0o=o("PoolFormerModel"),w0o=o(" (PoolFormer model)"),A0o=l(),pu=a("li"),bme=a("strong"),L0o=o("prophetnet"),y0o=o(" \u2014 "),WD=a("a"),x0o=o("ProphetNetModel"),$0o=o(" (ProphetNet model)"),k0o=l(),_u=a("li"),vme=a("strong"),S0o=o("qdqbert"),R0o=o(" \u2014 "),QD=a("a"),P0o=o("QDQBertModel"),B0o=o(" (QDQBert model)"),I0o=l(),uu=a("li"),Fme=a("strong"),N0o=o("reformer"),q0o=o(" \u2014 "),HD=a("a"),j0o=o("ReformerModel"),D0o=o(" (Reformer model)"),G0o=l(),bu=a("li"),Tme=a("strong"),O0o=o("regnet"),V0o=o(" \u2014 "),UD=a("a"),X0o=o("RegNetModel"),z0o=o(" (RegNet model)"),W0o=l(),vu=a("li"),Mme=a("strong"),Q0o=o("rembert"),H0o=o(" \u2014 "),JD=a("a"),U0o=o("RemBertModel"),J0o=o(" (RemBERT model)"),Y0o=l(),Fu=a("li"),Eme=a("strong"),K0o=o("resnet"),Z0o=o(" \u2014 "),YD=a("a"),ewo=o("ResNetModel"),owo=o(" (ResNet model)"),rwo=l(),Tu=a("li"),Cme=a("strong"),two=o("retribert"),awo=o(" \u2014 "),KD=a("a"),nwo=o("RetriBertModel"),swo=o(" (RetriBERT model)"),lwo=l(),Mu=a("li"),wme=a("strong"),iwo=o("roberta"),dwo=o(" \u2014 "),ZD=a("a"),cwo=o("RobertaModel"),fwo=o(" (RoBERTa model)"),mwo=l(),Eu=a("li"),Ame=a("strong"),gwo=o("roformer"),hwo=o(" \u2014 "),eG=a("a"),pwo=o("RoFormerModel"),_wo=o(" (RoFormer model)"),uwo=l(),Cu=a("li"),Lme=a("strong"),bwo=o("segformer"),vwo=o(" \u2014 "),oG=a("a"),Fwo=o("SegformerModel"),Two=o(" (SegFormer model)"),Mwo=l(),wu=a("li"),yme=a("strong"),Ewo=o("sew"),Cwo=o(" \u2014 "),rG=a("a"),wwo=o("SEWModel"),Awo=o(" (SEW model)"),Lwo=l(),Au=a("li"),xme=a("strong"),ywo=o("sew-d"),xwo=o(" \u2014 "),tG=a("a"),$wo=o("SEWDModel"),kwo=o(" (SEW-D model)"),Swo=l(),Lu=a("li"),$me=a("strong"),Rwo=o("speech_to_text"),Pwo=o(" \u2014 "),aG=a("a"),Bwo=o("Speech2TextModel"),Iwo=o(" (Speech2Text model)"),Nwo=l(),yu=a("li"),kme=a("strong"),qwo=o("splinter"),jwo=o(" \u2014 "),nG=a("a"),Dwo=o("SplinterModel"),Gwo=o(" (Splinter model)"),Owo=l(),xu=a("li"),Sme=a("strong"),Vwo=o("squeezebert"),Xwo=o(" \u2014 "),sG=a("a"),zwo=o("SqueezeBertModel"),Wwo=o(" (SqueezeBERT model)"),Qwo=l(),$u=a("li"),Rme=a("strong"),Hwo=o("swin"),Uwo=o(" \u2014 "),lG=a("a"),Jwo=o("SwinModel"),Ywo=o(" (Swin Transformer model)"),Kwo=l(),ku=a("li"),Pme=a("strong"),Zwo=o("swinv2"),eAo=o(" \u2014 "),iG=a("a"),oAo=o("Swinv2Model"),rAo=o(" (Swin Transformer V2 model)"),tAo=l(),Su=a("li"),Bme=a("strong"),aAo=o("t5"),nAo=o(" \u2014 "),dG=a("a"),sAo=o("T5Model"),lAo=o(" (T5 model)"),iAo=l(),Ru=a("li"),Ime=a("strong"),dAo=o("tapas"),cAo=o(" \u2014 "),cG=a("a"),fAo=o("TapasModel"),mAo=o(" (TAPAS model)"),gAo=l(),Pu=a("li"),Nme=a("strong"),hAo=o("trajectory_transformer"),pAo=o(" \u2014 "),fG=a("a"),_Ao=o("TrajectoryTransformerModel"),uAo=o(" (Trajectory Transformer model)"),bAo=l(),Bu=a("li"),qme=a("strong"),vAo=o("transfo-xl"),FAo=o(" \u2014 "),mG=a("a"),TAo=o("TransfoXLModel"),MAo=o(" (Transformer-XL model)"),EAo=l(),Iu=a("li"),jme=a("strong"),CAo=o("unispeech"),wAo=o(" \u2014 "),gG=a("a"),AAo=o("UniSpeechModel"),LAo=o(" (UniSpeech model)"),yAo=l(),Nu=a("li"),Dme=a("strong"),xAo=o("unispeech-sat"),$Ao=o(" \u2014 "),hG=a("a"),kAo=o("UniSpeechSatModel"),SAo=o(" (UniSpeechSat model)"),RAo=l(),qu=a("li"),Gme=a("strong"),PAo=o("van"),BAo=o(" \u2014 "),pG=a("a"),IAo=o("VanModel"),NAo=o(" (VAN model)"),qAo=l(),ju=a("li"),Ome=a("strong"),jAo=o("vilt"),DAo=o(" \u2014 "),_G=a("a"),GAo=o("ViltModel"),OAo=o(" (ViLT model)"),VAo=l(),Du=a("li"),Vme=a("strong"),XAo=o("vision-text-dual-encoder"),zAo=o(" \u2014 "),uG=a("a"),WAo=o("VisionTextDualEncoderModel"),QAo=o(" (VisionTextDualEncoder model)"),HAo=l(),Gu=a("li"),Xme=a("strong"),UAo=o("visual_bert"),JAo=o(" \u2014 "),bG=a("a"),YAo=o("VisualBertModel"),KAo=o(" (VisualBERT model)"),ZAo=l(),Ou=a("li"),zme=a("strong"),e7o=o("vit"),o7o=o(" \u2014 "),vG=a("a"),r7o=o("ViTModel"),t7o=o(" (ViT model)"),a7o=l(),Vu=a("li"),Wme=a("strong"),n7o=o("vit_mae"),s7o=o(" \u2014 "),FG=a("a"),l7o=o("ViTMAEModel"),i7o=o(" (ViTMAE model)"),d7o=l(),Xu=a("li"),Qme=a("strong"),c7o=o("wav2vec2"),f7o=o(" \u2014 "),TG=a("a"),m7o=o("Wav2Vec2Model"),g7o=o(" (Wav2Vec2 model)"),h7o=l(),zu=a("li"),Hme=a("strong"),p7o=o("wav2vec2-conformer"),_7o=o(" \u2014 "),MG=a("a"),u7o=o("Wav2Vec2ConformerModel"),b7o=o(" (Wav2Vec2-Conformer model)"),v7o=l(),Wu=a("li"),Ume=a("strong"),F7o=o("wavlm"),T7o=o(" \u2014 "),EG=a("a"),M7o=o("WavLMModel"),E7o=o(" (WavLM model)"),C7o=l(),Qu=a("li"),Jme=a("strong"),w7o=o("xglm"),A7o=o(" \u2014 "),CG=a("a"),L7o=o("XGLMModel"),y7o=o(" (XGLM model)"),x7o=l(),Hu=a("li"),Yme=a("strong"),$7o=o("xlm"),k7o=o(" \u2014 "),wG=a("a"),S7o=o("XLMModel"),R7o=o(" (XLM model)"),P7o=l(),Uu=a("li"),Kme=a("strong"),B7o=o("xlm-prophetnet"),I7o=o(" \u2014 "),AG=a("a"),N7o=o("XLMProphetNetModel"),q7o=o(" (XLM-ProphetNet model)"),j7o=l(),Ju=a("li"),Zme=a("strong"),D7o=o("xlm-roberta"),G7o=o(" \u2014 "),LG=a("a"),O7o=o("XLMRobertaModel"),V7o=o(" (XLM-RoBERTa model)"),X7o=l(),Yu=a("li"),ege=a("strong"),z7o=o("xlm-roberta-xl"),W7o=o(" \u2014 "),yG=a("a"),Q7o=o("XLMRobertaXLModel"),H7o=o(" (XLM-RoBERTa-XL model)"),U7o=l(),Ku=a("li"),oge=a("strong"),J7o=o("xlnet"),Y7o=o(" \u2014 "),xG=a("a"),K7o=o("XLNetModel"),Z7o=o(" (XLNet model)"),eLo=l(),Zu=a("li"),rge=a("strong"),oLo=o("yolos"),rLo=o(" \u2014 "),$G=a("a"),tLo=o("YolosModel"),aLo=o(" (YOLOS model)"),nLo=l(),e1=a("li"),tge=a("strong"),sLo=o("yoso"),lLo=o(" \u2014 "),kG=a("a"),iLo=o("YosoModel"),dLo=o(" (YOSO model)"),cLo=l(),o1=a("p"),fLo=o("The model is set in evaluation mode by default using "),age=a("code"),mLo=o("model.eval()"),gLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),hLo=o("model.train()"),pLo=l(),F(r1.$$.fragment),Cze=l(),Qi=a("h2"),t1=a("a"),sge=a("span"),F(KL.$$.fragment),_Lo=l(),lge=a("span"),uLo=o("AutoModelForPreTraining"),wze=l(),So=a("div"),F(ZL.$$.fragment),bLo=l(),Hi=a("p"),vLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SG=a("a"),FLo=o("from_pretrained()"),TLo=o(" class method or the "),RG=a("a"),MLo=o("from_config()"),ELo=o(` class
method.`),CLo=l(),ey=a("p"),wLo=o("This class cannot be instantiated directly using "),ige=a("code"),ALo=o("__init__()"),LLo=o(" (throws an error)."),yLo=l(),dt=a("div"),F(oy.$$.fragment),xLo=l(),dge=a("p"),$Lo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kLo=l(),Ui=a("p"),SLo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),RLo=o("not"),PLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),BLo=o("from_pretrained()"),ILo=o(" to load the model weights."),NLo=l(),F(a1.$$.fragment),qLo=l(),Ke=a("div"),F(ry.$$.fragment),jLo=l(),fge=a("p"),DLo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GLo=l(),Na=a("p"),OLo=o("The model class to instantiate is selected based on the "),mge=a("code"),VLo=o("model_type"),XLo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),zLo=o("pretrained_model_name_or_path"),WLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),QLo=o("pretrained_model_name_or_path"),HLo=o(":"),ULo=l(),G=a("ul"),n1=a("li"),pge=a("strong"),JLo=o("albert"),YLo=o(" \u2014 "),BG=a("a"),KLo=o("AlbertForPreTraining"),ZLo=o(" (ALBERT model)"),eyo=l(),s1=a("li"),_ge=a("strong"),oyo=o("bart"),ryo=o(" \u2014 "),IG=a("a"),tyo=o("BartForConditionalGeneration"),ayo=o(" (BART model)"),nyo=l(),l1=a("li"),uge=a("strong"),syo=o("bert"),lyo=o(" \u2014 "),NG=a("a"),iyo=o("BertForPreTraining"),dyo=o(" (BERT model)"),cyo=l(),i1=a("li"),bge=a("strong"),fyo=o("big_bird"),myo=o(" \u2014 "),qG=a("a"),gyo=o("BigBirdForPreTraining"),hyo=o(" (BigBird model)"),pyo=l(),d1=a("li"),vge=a("strong"),_yo=o("bloom"),uyo=o(" \u2014 "),jG=a("a"),byo=o("BloomForCausalLM"),vyo=o(" (BLOOM model)"),Fyo=l(),c1=a("li"),Fge=a("strong"),Tyo=o("camembert"),Myo=o(" \u2014 "),DG=a("a"),Eyo=o("CamembertForMaskedLM"),Cyo=o(" (CamemBERT model)"),wyo=l(),f1=a("li"),Tge=a("strong"),Ayo=o("ctrl"),Lyo=o(" \u2014 "),GG=a("a"),yyo=o("CTRLLMHeadModel"),xyo=o(" (CTRL model)"),$yo=l(),m1=a("li"),Mge=a("strong"),kyo=o("data2vec-text"),Syo=o(" \u2014 "),OG=a("a"),Ryo=o("Data2VecTextForMaskedLM"),Pyo=o(" (Data2VecText model)"),Byo=l(),g1=a("li"),Ege=a("strong"),Iyo=o("deberta"),Nyo=o(" \u2014 "),VG=a("a"),qyo=o("DebertaForMaskedLM"),jyo=o(" (DeBERTa model)"),Dyo=l(),h1=a("li"),Cge=a("strong"),Gyo=o("deberta-v2"),Oyo=o(" \u2014 "),XG=a("a"),Vyo=o("DebertaV2ForMaskedLM"),Xyo=o(" (DeBERTa-v2 model)"),zyo=l(),p1=a("li"),wge=a("strong"),Wyo=o("distilbert"),Qyo=o(" \u2014 "),zG=a("a"),Hyo=o("DistilBertForMaskedLM"),Uyo=o(" (DistilBERT model)"),Jyo=l(),_1=a("li"),Age=a("strong"),Yyo=o("electra"),Kyo=o(" \u2014 "),WG=a("a"),Zyo=o("ElectraForPreTraining"),e9o=o(" (ELECTRA model)"),o9o=l(),u1=a("li"),Lge=a("strong"),r9o=o("flaubert"),t9o=o(" \u2014 "),QG=a("a"),a9o=o("FlaubertWithLMHeadModel"),n9o=o(" (FlauBERT model)"),s9o=l(),b1=a("li"),yge=a("strong"),l9o=o("flava"),i9o=o(" \u2014 "),HG=a("a"),d9o=o("FlavaForPreTraining"),c9o=o(" (FLAVA model)"),f9o=l(),v1=a("li"),xge=a("strong"),m9o=o("fnet"),g9o=o(" \u2014 "),UG=a("a"),h9o=o("FNetForPreTraining"),p9o=o(" (FNet model)"),_9o=l(),F1=a("li"),$ge=a("strong"),u9o=o("fsmt"),b9o=o(" \u2014 "),JG=a("a"),v9o=o("FSMTForConditionalGeneration"),F9o=o(" (FairSeq Machine-Translation model)"),T9o=l(),T1=a("li"),kge=a("strong"),M9o=o("funnel"),E9o=o(" \u2014 "),YG=a("a"),C9o=o("FunnelForPreTraining"),w9o=o(" (Funnel Transformer model)"),A9o=l(),M1=a("li"),Sge=a("strong"),L9o=o("gpt2"),y9o=o(" \u2014 "),KG=a("a"),x9o=o("GPT2LMHeadModel"),$9o=o(" (OpenAI GPT-2 model)"),k9o=l(),E1=a("li"),Rge=a("strong"),S9o=o("ibert"),R9o=o(" \u2014 "),ZG=a("a"),P9o=o("IBertForMaskedLM"),B9o=o(" (I-BERT model)"),I9o=l(),C1=a("li"),Pge=a("strong"),N9o=o("layoutlm"),q9o=o(" \u2014 "),eO=a("a"),j9o=o("LayoutLMForMaskedLM"),D9o=o(" (LayoutLM model)"),G9o=l(),w1=a("li"),Bge=a("strong"),O9o=o("longformer"),V9o=o(" \u2014 "),oO=a("a"),X9o=o("LongformerForMaskedLM"),z9o=o(" (Longformer model)"),W9o=l(),A1=a("li"),Ige=a("strong"),Q9o=o("lxmert"),H9o=o(" \u2014 "),rO=a("a"),U9o=o("LxmertForPreTraining"),J9o=o(" (LXMERT model)"),Y9o=l(),L1=a("li"),Nge=a("strong"),K9o=o("megatron-bert"),Z9o=o(" \u2014 "),tO=a("a"),exo=o("MegatronBertForPreTraining"),oxo=o(" (Megatron-BERT model)"),rxo=l(),y1=a("li"),qge=a("strong"),txo=o("mobilebert"),axo=o(" \u2014 "),aO=a("a"),nxo=o("MobileBertForPreTraining"),sxo=o(" (MobileBERT model)"),lxo=l(),x1=a("li"),jge=a("strong"),ixo=o("mpnet"),dxo=o(" \u2014 "),nO=a("a"),cxo=o("MPNetForMaskedLM"),fxo=o(" (MPNet model)"),mxo=l(),$1=a("li"),Dge=a("strong"),gxo=o("mvp"),hxo=o(" \u2014 "),sO=a("a"),pxo=o("MvpForConditionalGeneration"),_xo=o(" (MVP model)"),uxo=l(),k1=a("li"),Gge=a("strong"),bxo=o("nezha"),vxo=o(" \u2014 "),lO=a("a"),Fxo=o("NezhaForPreTraining"),Txo=o(" (Nezha model)"),Mxo=l(),S1=a("li"),Oge=a("strong"),Exo=o("openai-gpt"),Cxo=o(" \u2014 "),iO=a("a"),wxo=o("OpenAIGPTLMHeadModel"),Axo=o(" (OpenAI GPT model)"),Lxo=l(),R1=a("li"),Vge=a("strong"),yxo=o("retribert"),xxo=o(" \u2014 "),dO=a("a"),$xo=o("RetriBertModel"),kxo=o(" (RetriBERT model)"),Sxo=l(),P1=a("li"),Xge=a("strong"),Rxo=o("roberta"),Pxo=o(" \u2014 "),cO=a("a"),Bxo=o("RobertaForMaskedLM"),Ixo=o(" (RoBERTa model)"),Nxo=l(),B1=a("li"),zge=a("strong"),qxo=o("splinter"),jxo=o(" \u2014 "),fO=a("a"),Dxo=o("SplinterForPreTraining"),Gxo=o(" (Splinter model)"),Oxo=l(),I1=a("li"),Wge=a("strong"),Vxo=o("squeezebert"),Xxo=o(" \u2014 "),mO=a("a"),zxo=o("SqueezeBertForMaskedLM"),Wxo=o(" (SqueezeBERT model)"),Qxo=l(),N1=a("li"),Qge=a("strong"),Hxo=o("t5"),Uxo=o(" \u2014 "),gO=a("a"),Jxo=o("T5ForConditionalGeneration"),Yxo=o(" (T5 model)"),Kxo=l(),q1=a("li"),Hge=a("strong"),Zxo=o("tapas"),e$o=o(" \u2014 "),hO=a("a"),o$o=o("TapasForMaskedLM"),r$o=o(" (TAPAS model)"),t$o=l(),j1=a("li"),Uge=a("strong"),a$o=o("transfo-xl"),n$o=o(" \u2014 "),pO=a("a"),s$o=o("TransfoXLLMHeadModel"),l$o=o(" (Transformer-XL model)"),i$o=l(),D1=a("li"),Jge=a("strong"),d$o=o("unispeech"),c$o=o(" \u2014 "),_O=a("a"),f$o=o("UniSpeechForPreTraining"),m$o=o(" (UniSpeech model)"),g$o=l(),G1=a("li"),Yge=a("strong"),h$o=o("unispeech-sat"),p$o=o(" \u2014 "),uO=a("a"),_$o=o("UniSpeechSatForPreTraining"),u$o=o(" (UniSpeechSat model)"),b$o=l(),O1=a("li"),Kge=a("strong"),v$o=o("visual_bert"),F$o=o(" \u2014 "),bO=a("a"),T$o=o("VisualBertForPreTraining"),M$o=o(" (VisualBERT model)"),E$o=l(),V1=a("li"),Zge=a("strong"),C$o=o("vit_mae"),w$o=o(" \u2014 "),vO=a("a"),A$o=o("ViTMAEForPreTraining"),L$o=o(" (ViTMAE model)"),y$o=l(),X1=a("li"),ehe=a("strong"),x$o=o("wav2vec2"),$$o=o(" \u2014 "),FO=a("a"),k$o=o("Wav2Vec2ForPreTraining"),S$o=o(" (Wav2Vec2 model)"),R$o=l(),z1=a("li"),ohe=a("strong"),P$o=o("wav2vec2-conformer"),B$o=o(" \u2014 "),TO=a("a"),I$o=o("Wav2Vec2ConformerForPreTraining"),N$o=o(" (Wav2Vec2-Conformer model)"),q$o=l(),W1=a("li"),rhe=a("strong"),j$o=o("xlm"),D$o=o(" \u2014 "),MO=a("a"),G$o=o("XLMWithLMHeadModel"),O$o=o(" (XLM model)"),V$o=l(),Q1=a("li"),the=a("strong"),X$o=o("xlm-roberta"),z$o=o(" \u2014 "),EO=a("a"),W$o=o("XLMRobertaForMaskedLM"),Q$o=o(" (XLM-RoBERTa model)"),H$o=l(),H1=a("li"),ahe=a("strong"),U$o=o("xlm-roberta-xl"),J$o=o(" \u2014 "),CO=a("a"),Y$o=o("XLMRobertaXLForMaskedLM"),K$o=o(" (XLM-RoBERTa-XL model)"),Z$o=l(),U1=a("li"),nhe=a("strong"),eko=o("xlnet"),oko=o(" \u2014 "),wO=a("a"),rko=o("XLNetLMHeadModel"),tko=o(" (XLNet model)"),ako=l(),J1=a("p"),nko=o("The model is set in evaluation mode by default using "),she=a("code"),sko=o("model.eval()"),lko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),iko=o("model.train()"),dko=l(),F(Y1.$$.fragment),Aze=l(),Ji=a("h2"),K1=a("a"),ihe=a("span"),F(ty.$$.fragment),cko=l(),dhe=a("span"),fko=o("AutoModelForCausalLM"),Lze=l(),Ro=a("div"),F(ay.$$.fragment),mko=l(),Yi=a("p"),gko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AO=a("a"),hko=o("from_pretrained()"),pko=o(" class method or the "),LO=a("a"),_ko=o("from_config()"),uko=o(` class
method.`),bko=l(),ny=a("p"),vko=o("This class cannot be instantiated directly using "),che=a("code"),Fko=o("__init__()"),Tko=o(" (throws an error)."),Mko=l(),ct=a("div"),F(sy.$$.fragment),Eko=l(),fhe=a("p"),Cko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wko=l(),Ki=a("p"),Ako=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),Lko=o("not"),yko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),xko=o("from_pretrained()"),$ko=o(" to load the model weights."),kko=l(),F(Z1.$$.fragment),Sko=l(),Ze=a("div"),F(ly.$$.fragment),Rko=l(),ghe=a("p"),Pko=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bko=l(),qa=a("p"),Iko=o("The model class to instantiate is selected based on the "),hhe=a("code"),Nko=o("model_type"),qko=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),jko=o("pretrained_model_name_or_path"),Dko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),Gko=o("pretrained_model_name_or_path"),Oko=o(":"),Vko=l(),z=a("ul"),e2=a("li"),uhe=a("strong"),Xko=o("bart"),zko=o(" \u2014 "),xO=a("a"),Wko=o("BartForCausalLM"),Qko=o(" (BART model)"),Hko=l(),o2=a("li"),bhe=a("strong"),Uko=o("bert"),Jko=o(" \u2014 "),$O=a("a"),Yko=o("BertLMHeadModel"),Kko=o(" (BERT model)"),Zko=l(),r2=a("li"),vhe=a("strong"),eSo=o("bert-generation"),oSo=o(" \u2014 "),kO=a("a"),rSo=o("BertGenerationDecoder"),tSo=o(" (Bert Generation model)"),aSo=l(),t2=a("li"),Fhe=a("strong"),nSo=o("big_bird"),sSo=o(" \u2014 "),SO=a("a"),lSo=o("BigBirdForCausalLM"),iSo=o(" (BigBird model)"),dSo=l(),a2=a("li"),The=a("strong"),cSo=o("bigbird_pegasus"),fSo=o(" \u2014 "),RO=a("a"),mSo=o("BigBirdPegasusForCausalLM"),gSo=o(" (BigBird-Pegasus model)"),hSo=l(),n2=a("li"),Mhe=a("strong"),pSo=o("blenderbot"),_So=o(" \u2014 "),PO=a("a"),uSo=o("BlenderbotForCausalLM"),bSo=o(" (Blenderbot model)"),vSo=l(),s2=a("li"),Ehe=a("strong"),FSo=o("blenderbot-small"),TSo=o(" \u2014 "),BO=a("a"),MSo=o("BlenderbotSmallForCausalLM"),ESo=o(" (BlenderbotSmall model)"),CSo=l(),l2=a("li"),Che=a("strong"),wSo=o("bloom"),ASo=o(" \u2014 "),IO=a("a"),LSo=o("BloomForCausalLM"),ySo=o(" (BLOOM model)"),xSo=l(),i2=a("li"),whe=a("strong"),$So=o("camembert"),kSo=o(" \u2014 "),NO=a("a"),SSo=o("CamembertForCausalLM"),RSo=o(" (CamemBERT model)"),PSo=l(),d2=a("li"),Ahe=a("strong"),BSo=o("codegen"),ISo=o(" \u2014 "),qO=a("a"),NSo=o("CodeGenForCausalLM"),qSo=o(" (CodeGen model)"),jSo=l(),c2=a("li"),Lhe=a("strong"),DSo=o("ctrl"),GSo=o(" \u2014 "),jO=a("a"),OSo=o("CTRLLMHeadModel"),VSo=o(" (CTRL model)"),XSo=l(),f2=a("li"),yhe=a("strong"),zSo=o("data2vec-text"),WSo=o(" \u2014 "),DO=a("a"),QSo=o("Data2VecTextForCausalLM"),HSo=o(" (Data2VecText model)"),USo=l(),m2=a("li"),xhe=a("strong"),JSo=o("electra"),YSo=o(" \u2014 "),GO=a("a"),KSo=o("ElectraForCausalLM"),ZSo=o(" (ELECTRA model)"),eRo=l(),g2=a("li"),$he=a("strong"),oRo=o("gpt2"),rRo=o(" \u2014 "),OO=a("a"),tRo=o("GPT2LMHeadModel"),aRo=o(" (OpenAI GPT-2 model)"),nRo=l(),h2=a("li"),khe=a("strong"),sRo=o("gpt_neo"),lRo=o(" \u2014 "),VO=a("a"),iRo=o("GPTNeoForCausalLM"),dRo=o(" (GPT Neo model)"),cRo=l(),p2=a("li"),She=a("strong"),fRo=o("gpt_neox"),mRo=o(" \u2014 "),XO=a("a"),gRo=o("GPTNeoXForCausalLM"),hRo=o(" (GPT NeoX model)"),pRo=l(),_2=a("li"),Rhe=a("strong"),_Ro=o("gptj"),uRo=o(" \u2014 "),zO=a("a"),bRo=o("GPTJForCausalLM"),vRo=o(" (GPT-J model)"),FRo=l(),u2=a("li"),Phe=a("strong"),TRo=o("marian"),MRo=o(" \u2014 "),WO=a("a"),ERo=o("MarianForCausalLM"),CRo=o(" (Marian model)"),wRo=l(),b2=a("li"),Bhe=a("strong"),ARo=o("mbart"),LRo=o(" \u2014 "),QO=a("a"),yRo=o("MBartForCausalLM"),xRo=o(" (mBART model)"),$Ro=l(),v2=a("li"),Ihe=a("strong"),kRo=o("megatron-bert"),SRo=o(" \u2014 "),HO=a("a"),RRo=o("MegatronBertForCausalLM"),PRo=o(" (Megatron-BERT model)"),BRo=l(),F2=a("li"),Nhe=a("strong"),IRo=o("mvp"),NRo=o(" \u2014 "),UO=a("a"),qRo=o("MvpForCausalLM"),jRo=o(" (MVP model)"),DRo=l(),T2=a("li"),qhe=a("strong"),GRo=o("openai-gpt"),ORo=o(" \u2014 "),JO=a("a"),VRo=o("OpenAIGPTLMHeadModel"),XRo=o(" (OpenAI GPT model)"),zRo=l(),M2=a("li"),jhe=a("strong"),WRo=o("opt"),QRo=o(" \u2014 "),YO=a("a"),HRo=o("OPTForCausalLM"),URo=o(" (OPT model)"),JRo=l(),E2=a("li"),Dhe=a("strong"),YRo=o("pegasus"),KRo=o(" \u2014 "),KO=a("a"),ZRo=o("PegasusForCausalLM"),ePo=o(" (Pegasus model)"),oPo=l(),C2=a("li"),Ghe=a("strong"),rPo=o("plbart"),tPo=o(" \u2014 "),ZO=a("a"),aPo=o("PLBartForCausalLM"),nPo=o(" (PLBart model)"),sPo=l(),w2=a("li"),Ohe=a("strong"),lPo=o("prophetnet"),iPo=o(" \u2014 "),eV=a("a"),dPo=o("ProphetNetForCausalLM"),cPo=o(" (ProphetNet model)"),fPo=l(),A2=a("li"),Vhe=a("strong"),mPo=o("qdqbert"),gPo=o(" \u2014 "),oV=a("a"),hPo=o("QDQBertLMHeadModel"),pPo=o(" (QDQBert model)"),_Po=l(),L2=a("li"),Xhe=a("strong"),uPo=o("reformer"),bPo=o(" \u2014 "),rV=a("a"),vPo=o("ReformerModelWithLMHead"),FPo=o(" (Reformer model)"),TPo=l(),y2=a("li"),zhe=a("strong"),MPo=o("rembert"),EPo=o(" \u2014 "),tV=a("a"),CPo=o("RemBertForCausalLM"),wPo=o(" (RemBERT model)"),APo=l(),x2=a("li"),Whe=a("strong"),LPo=o("roberta"),yPo=o(" \u2014 "),aV=a("a"),xPo=o("RobertaForCausalLM"),$Po=o(" (RoBERTa model)"),kPo=l(),$2=a("li"),Qhe=a("strong"),SPo=o("roformer"),RPo=o(" \u2014 "),nV=a("a"),PPo=o("RoFormerForCausalLM"),BPo=o(" (RoFormer model)"),IPo=l(),k2=a("li"),Hhe=a("strong"),NPo=o("speech_to_text_2"),qPo=o(" \u2014 "),sV=a("a"),jPo=o("Speech2Text2ForCausalLM"),DPo=o(" (Speech2Text2 model)"),GPo=l(),S2=a("li"),Uhe=a("strong"),OPo=o("transfo-xl"),VPo=o(" \u2014 "),lV=a("a"),XPo=o("TransfoXLLMHeadModel"),zPo=o(" (Transformer-XL model)"),WPo=l(),R2=a("li"),Jhe=a("strong"),QPo=o("trocr"),HPo=o(" \u2014 "),iV=a("a"),UPo=o("TrOCRForCausalLM"),JPo=o(" (TrOCR model)"),YPo=l(),P2=a("li"),Yhe=a("strong"),KPo=o("xglm"),ZPo=o(" \u2014 "),dV=a("a"),eBo=o("XGLMForCausalLM"),oBo=o(" (XGLM model)"),rBo=l(),B2=a("li"),Khe=a("strong"),tBo=o("xlm"),aBo=o(" \u2014 "),cV=a("a"),nBo=o("XLMWithLMHeadModel"),sBo=o(" (XLM model)"),lBo=l(),I2=a("li"),Zhe=a("strong"),iBo=o("xlm-prophetnet"),dBo=o(" \u2014 "),fV=a("a"),cBo=o("XLMProphetNetForCausalLM"),fBo=o(" (XLM-ProphetNet model)"),mBo=l(),N2=a("li"),epe=a("strong"),gBo=o("xlm-roberta"),hBo=o(" \u2014 "),mV=a("a"),pBo=o("XLMRobertaForCausalLM"),_Bo=o(" (XLM-RoBERTa model)"),uBo=l(),q2=a("li"),ope=a("strong"),bBo=o("xlm-roberta-xl"),vBo=o(" \u2014 "),gV=a("a"),FBo=o("XLMRobertaXLForCausalLM"),TBo=o(" (XLM-RoBERTa-XL model)"),MBo=l(),j2=a("li"),rpe=a("strong"),EBo=o("xlnet"),CBo=o(" \u2014 "),hV=a("a"),wBo=o("XLNetLMHeadModel"),ABo=o(" (XLNet model)"),LBo=l(),D2=a("p"),yBo=o("The model is set in evaluation mode by default using "),tpe=a("code"),xBo=o("model.eval()"),$Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=a("code"),kBo=o("model.train()"),SBo=l(),F(G2.$$.fragment),yze=l(),Zi=a("h2"),O2=a("a"),npe=a("span"),F(iy.$$.fragment),RBo=l(),spe=a("span"),PBo=o("AutoModelForMaskedLM"),xze=l(),Po=a("div"),F(dy.$$.fragment),BBo=l(),ed=a("p"),IBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pV=a("a"),NBo=o("from_pretrained()"),qBo=o(" class method or the "),_V=a("a"),jBo=o("from_config()"),DBo=o(` class
method.`),GBo=l(),cy=a("p"),OBo=o("This class cannot be instantiated directly using "),lpe=a("code"),VBo=o("__init__()"),XBo=o(" (throws an error)."),zBo=l(),ft=a("div"),F(fy.$$.fragment),WBo=l(),ipe=a("p"),QBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HBo=l(),od=a("p"),UBo=o(`Note:
Loading a model from its configuration file does `),dpe=a("strong"),JBo=o("not"),YBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),KBo=o("from_pretrained()"),ZBo=o(" to load the model weights."),eIo=l(),F(V2.$$.fragment),oIo=l(),eo=a("div"),F(my.$$.fragment),rIo=l(),cpe=a("p"),tIo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aIo=l(),ja=a("p"),nIo=o("The model class to instantiate is selected based on the "),fpe=a("code"),sIo=o("model_type"),lIo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),iIo=o("pretrained_model_name_or_path"),dIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),cIo=o("pretrained_model_name_or_path"),fIo=o(":"),mIo=l(),Q=a("ul"),X2=a("li"),hpe=a("strong"),gIo=o("albert"),hIo=o(" \u2014 "),bV=a("a"),pIo=o("AlbertForMaskedLM"),_Io=o(" (ALBERT model)"),uIo=l(),z2=a("li"),ppe=a("strong"),bIo=o("bart"),vIo=o(" \u2014 "),vV=a("a"),FIo=o("BartForConditionalGeneration"),TIo=o(" (BART model)"),MIo=l(),W2=a("li"),_pe=a("strong"),EIo=o("bert"),CIo=o(" \u2014 "),FV=a("a"),wIo=o("BertForMaskedLM"),AIo=o(" (BERT model)"),LIo=l(),Q2=a("li"),upe=a("strong"),yIo=o("big_bird"),xIo=o(" \u2014 "),TV=a("a"),$Io=o("BigBirdForMaskedLM"),kIo=o(" (BigBird model)"),SIo=l(),H2=a("li"),bpe=a("strong"),RIo=o("camembert"),PIo=o(" \u2014 "),MV=a("a"),BIo=o("CamembertForMaskedLM"),IIo=o(" (CamemBERT model)"),NIo=l(),U2=a("li"),vpe=a("strong"),qIo=o("convbert"),jIo=o(" \u2014 "),EV=a("a"),DIo=o("ConvBertForMaskedLM"),GIo=o(" (ConvBERT model)"),OIo=l(),J2=a("li"),Fpe=a("strong"),VIo=o("data2vec-text"),XIo=o(" \u2014 "),CV=a("a"),zIo=o("Data2VecTextForMaskedLM"),WIo=o(" (Data2VecText model)"),QIo=l(),Y2=a("li"),Tpe=a("strong"),HIo=o("deberta"),UIo=o(" \u2014 "),wV=a("a"),JIo=o("DebertaForMaskedLM"),YIo=o(" (DeBERTa model)"),KIo=l(),K2=a("li"),Mpe=a("strong"),ZIo=o("deberta-v2"),eNo=o(" \u2014 "),AV=a("a"),oNo=o("DebertaV2ForMaskedLM"),rNo=o(" (DeBERTa-v2 model)"),tNo=l(),Z2=a("li"),Epe=a("strong"),aNo=o("distilbert"),nNo=o(" \u2014 "),LV=a("a"),sNo=o("DistilBertForMaskedLM"),lNo=o(" (DistilBERT model)"),iNo=l(),eb=a("li"),Cpe=a("strong"),dNo=o("electra"),cNo=o(" \u2014 "),yV=a("a"),fNo=o("ElectraForMaskedLM"),mNo=o(" (ELECTRA model)"),gNo=l(),ob=a("li"),wpe=a("strong"),hNo=o("flaubert"),pNo=o(" \u2014 "),xV=a("a"),_No=o("FlaubertWithLMHeadModel"),uNo=o(" (FlauBERT model)"),bNo=l(),rb=a("li"),Ape=a("strong"),vNo=o("fnet"),FNo=o(" \u2014 "),$V=a("a"),TNo=o("FNetForMaskedLM"),MNo=o(" (FNet model)"),ENo=l(),tb=a("li"),Lpe=a("strong"),CNo=o("funnel"),wNo=o(" \u2014 "),kV=a("a"),ANo=o("FunnelForMaskedLM"),LNo=o(" (Funnel Transformer model)"),yNo=l(),ab=a("li"),ype=a("strong"),xNo=o("ibert"),$No=o(" \u2014 "),SV=a("a"),kNo=o("IBertForMaskedLM"),SNo=o(" (I-BERT model)"),RNo=l(),nb=a("li"),xpe=a("strong"),PNo=o("layoutlm"),BNo=o(" \u2014 "),RV=a("a"),INo=o("LayoutLMForMaskedLM"),NNo=o(" (LayoutLM model)"),qNo=l(),sb=a("li"),$pe=a("strong"),jNo=o("longformer"),DNo=o(" \u2014 "),PV=a("a"),GNo=o("LongformerForMaskedLM"),ONo=o(" (Longformer model)"),VNo=l(),lb=a("li"),kpe=a("strong"),XNo=o("luke"),zNo=o(" \u2014 "),BV=a("a"),WNo=o("LukeForMaskedLM"),QNo=o(" (LUKE model)"),HNo=l(),ib=a("li"),Spe=a("strong"),UNo=o("mbart"),JNo=o(" \u2014 "),IV=a("a"),YNo=o("MBartForConditionalGeneration"),KNo=o(" (mBART model)"),ZNo=l(),db=a("li"),Rpe=a("strong"),eqo=o("megatron-bert"),oqo=o(" \u2014 "),NV=a("a"),rqo=o("MegatronBertForMaskedLM"),tqo=o(" (Megatron-BERT model)"),aqo=l(),cb=a("li"),Ppe=a("strong"),nqo=o("mobilebert"),sqo=o(" \u2014 "),qV=a("a"),lqo=o("MobileBertForMaskedLM"),iqo=o(" (MobileBERT model)"),dqo=l(),fb=a("li"),Bpe=a("strong"),cqo=o("mpnet"),fqo=o(" \u2014 "),jV=a("a"),mqo=o("MPNetForMaskedLM"),gqo=o(" (MPNet model)"),hqo=l(),mb=a("li"),Ipe=a("strong"),pqo=o("mvp"),_qo=o(" \u2014 "),DV=a("a"),uqo=o("MvpForConditionalGeneration"),bqo=o(" (MVP model)"),vqo=l(),gb=a("li"),Npe=a("strong"),Fqo=o("nezha"),Tqo=o(" \u2014 "),GV=a("a"),Mqo=o("NezhaForMaskedLM"),Eqo=o(" (Nezha model)"),Cqo=l(),hb=a("li"),qpe=a("strong"),wqo=o("nystromformer"),Aqo=o(" \u2014 "),OV=a("a"),Lqo=o("NystromformerForMaskedLM"),yqo=o(" (Nystr\xF6mformer model)"),xqo=l(),pb=a("li"),jpe=a("strong"),$qo=o("perceiver"),kqo=o(" \u2014 "),VV=a("a"),Sqo=o("PerceiverForMaskedLM"),Rqo=o(" (Perceiver model)"),Pqo=l(),_b=a("li"),Dpe=a("strong"),Bqo=o("qdqbert"),Iqo=o(" \u2014 "),XV=a("a"),Nqo=o("QDQBertForMaskedLM"),qqo=o(" (QDQBert model)"),jqo=l(),ub=a("li"),Gpe=a("strong"),Dqo=o("reformer"),Gqo=o(" \u2014 "),zV=a("a"),Oqo=o("ReformerForMaskedLM"),Vqo=o(" (Reformer model)"),Xqo=l(),bb=a("li"),Ope=a("strong"),zqo=o("rembert"),Wqo=o(" \u2014 "),WV=a("a"),Qqo=o("RemBertForMaskedLM"),Hqo=o(" (RemBERT model)"),Uqo=l(),vb=a("li"),Vpe=a("strong"),Jqo=o("roberta"),Yqo=o(" \u2014 "),QV=a("a"),Kqo=o("RobertaForMaskedLM"),Zqo=o(" (RoBERTa model)"),ejo=l(),Fb=a("li"),Xpe=a("strong"),ojo=o("roformer"),rjo=o(" \u2014 "),HV=a("a"),tjo=o("RoFormerForMaskedLM"),ajo=o(" (RoFormer model)"),njo=l(),Tb=a("li"),zpe=a("strong"),sjo=o("squeezebert"),ljo=o(" \u2014 "),UV=a("a"),ijo=o("SqueezeBertForMaskedLM"),djo=o(" (SqueezeBERT model)"),cjo=l(),Mb=a("li"),Wpe=a("strong"),fjo=o("tapas"),mjo=o(" \u2014 "),JV=a("a"),gjo=o("TapasForMaskedLM"),hjo=o(" (TAPAS model)"),pjo=l(),Eb=a("li"),Qpe=a("strong"),_jo=o("wav2vec2"),ujo=o(" \u2014 "),Hpe=a("code"),bjo=o("Wav2Vec2ForMaskedLM"),vjo=o(" (Wav2Vec2 model)"),Fjo=l(),Cb=a("li"),Upe=a("strong"),Tjo=o("xlm"),Mjo=o(" \u2014 "),YV=a("a"),Ejo=o("XLMWithLMHeadModel"),Cjo=o(" (XLM model)"),wjo=l(),wb=a("li"),Jpe=a("strong"),Ajo=o("xlm-roberta"),Ljo=o(" \u2014 "),KV=a("a"),yjo=o("XLMRobertaForMaskedLM"),xjo=o(" (XLM-RoBERTa model)"),$jo=l(),Ab=a("li"),Ype=a("strong"),kjo=o("xlm-roberta-xl"),Sjo=o(" \u2014 "),ZV=a("a"),Rjo=o("XLMRobertaXLForMaskedLM"),Pjo=o(" (XLM-RoBERTa-XL model)"),Bjo=l(),Lb=a("li"),Kpe=a("strong"),Ijo=o("yoso"),Njo=o(" \u2014 "),eX=a("a"),qjo=o("YosoForMaskedLM"),jjo=o(" (YOSO model)"),Djo=l(),yb=a("p"),Gjo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),Xjo=o("model.train()"),zjo=l(),F(xb.$$.fragment),$ze=l(),rd=a("h2"),$b=a("a"),o_e=a("span"),F(gy.$$.fragment),Wjo=l(),r_e=a("span"),Qjo=o("AutoModelForSeq2SeqLM"),kze=l(),Bo=a("div"),F(hy.$$.fragment),Hjo=l(),td=a("p"),Ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),rX=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),py=a("p"),oDo=o("This class cannot be instantiated directly using "),t_e=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),mt=a("div"),F(_y.$$.fragment),nDo=l(),a_e=a("p"),sDo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lDo=l(),ad=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),fDo=o("from_pretrained()"),mDo=o(" to load the model weights."),gDo=l(),F(kb.$$.fragment),hDo=l(),oo=a("div"),F(uy.$$.fragment),pDo=l(),s_e=a("p"),_Do=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uDo=l(),Da=a("p"),bDo=o("The model class to instantiate is selected based on the "),l_e=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),me=a("ul"),Sb=a("li"),c_e=a("strong"),ADo=o("bart"),LDo=o(" \u2014 "),aX=a("a"),yDo=o("BartForConditionalGeneration"),xDo=o(" (BART model)"),$Do=l(),Rb=a("li"),f_e=a("strong"),kDo=o("bigbird_pegasus"),SDo=o(" \u2014 "),nX=a("a"),RDo=o("BigBirdPegasusForConditionalGeneration"),PDo=o(" (BigBird-Pegasus model)"),BDo=l(),Pb=a("li"),m_e=a("strong"),IDo=o("blenderbot"),NDo=o(" \u2014 "),sX=a("a"),qDo=o("BlenderbotForConditionalGeneration"),jDo=o(" (Blenderbot model)"),DDo=l(),Bb=a("li"),g_e=a("strong"),GDo=o("blenderbot-small"),ODo=o(" \u2014 "),lX=a("a"),VDo=o("BlenderbotSmallForConditionalGeneration"),XDo=o(" (BlenderbotSmall model)"),zDo=l(),Ib=a("li"),h_e=a("strong"),WDo=o("encoder-decoder"),QDo=o(" \u2014 "),iX=a("a"),HDo=o("EncoderDecoderModel"),UDo=o(" (Encoder decoder model)"),JDo=l(),Nb=a("li"),p_e=a("strong"),YDo=o("fsmt"),KDo=o(" \u2014 "),dX=a("a"),ZDo=o("FSMTForConditionalGeneration"),eGo=o(" (FairSeq Machine-Translation model)"),oGo=l(),qb=a("li"),__e=a("strong"),rGo=o("led"),tGo=o(" \u2014 "),cX=a("a"),aGo=o("LEDForConditionalGeneration"),nGo=o(" (LED model)"),sGo=l(),jb=a("li"),u_e=a("strong"),lGo=o("longt5"),iGo=o(" \u2014 "),fX=a("a"),dGo=o("LongT5ForConditionalGeneration"),cGo=o(" (LongT5 model)"),fGo=l(),Db=a("li"),b_e=a("strong"),mGo=o("m2m_100"),gGo=o(" \u2014 "),mX=a("a"),hGo=o("M2M100ForConditionalGeneration"),pGo=o(" (M2M100 model)"),_Go=l(),Gb=a("li"),v_e=a("strong"),uGo=o("marian"),bGo=o(" \u2014 "),gX=a("a"),vGo=o("MarianMTModel"),FGo=o(" (Marian model)"),TGo=l(),Ob=a("li"),F_e=a("strong"),MGo=o("mbart"),EGo=o(" \u2014 "),hX=a("a"),CGo=o("MBartForConditionalGeneration"),wGo=o(" (mBART model)"),AGo=l(),Vb=a("li"),T_e=a("strong"),LGo=o("mt5"),yGo=o(" \u2014 "),pX=a("a"),xGo=o("MT5ForConditionalGeneration"),$Go=o(" (MT5 model)"),kGo=l(),Xb=a("li"),M_e=a("strong"),SGo=o("mvp"),RGo=o(" \u2014 "),_X=a("a"),PGo=o("MvpForConditionalGeneration"),BGo=o(" (MVP model)"),IGo=l(),zb=a("li"),E_e=a("strong"),NGo=o("nllb"),qGo=o(" \u2014 "),uX=a("a"),jGo=o("M2M100ForConditionalGeneration"),DGo=o(" (NLLB model)"),GGo=l(),Wb=a("li"),C_e=a("strong"),OGo=o("pegasus"),VGo=o(" \u2014 "),bX=a("a"),XGo=o("PegasusForConditionalGeneration"),zGo=o(" (Pegasus model)"),WGo=l(),Qb=a("li"),w_e=a("strong"),QGo=o("plbart"),HGo=o(" \u2014 "),vX=a("a"),UGo=o("PLBartForConditionalGeneration"),JGo=o(" (PLBart model)"),YGo=l(),Hb=a("li"),A_e=a("strong"),KGo=o("prophetnet"),ZGo=o(" \u2014 "),FX=a("a"),eOo=o("ProphetNetForConditionalGeneration"),oOo=o(" (ProphetNet model)"),rOo=l(),Ub=a("li"),L_e=a("strong"),tOo=o("t5"),aOo=o(" \u2014 "),TX=a("a"),nOo=o("T5ForConditionalGeneration"),sOo=o(" (T5 model)"),lOo=l(),Jb=a("li"),y_e=a("strong"),iOo=o("xlm-prophetnet"),dOo=o(" \u2014 "),MX=a("a"),cOo=o("XLMProphetNetForConditionalGeneration"),fOo=o(" (XLM-ProphetNet model)"),mOo=l(),Yb=a("p"),gOo=o("The model is set in evaluation mode by default using "),x_e=a("code"),hOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),_Oo=o("model.train()"),uOo=l(),F(Kb.$$.fragment),Sze=l(),nd=a("h2"),Zb=a("a"),k_e=a("span"),F(by.$$.fragment),bOo=l(),S_e=a("span"),vOo=o("AutoModelForSequenceClassification"),Rze=l(),Io=a("div"),F(vy.$$.fragment),FOo=l(),sd=a("p"),TOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EX=a("a"),MOo=o("from_pretrained()"),EOo=o(" class method or the "),CX=a("a"),COo=o("from_config()"),wOo=o(` class
method.`),AOo=l(),Fy=a("p"),LOo=o("This class cannot be instantiated directly using "),R_e=a("code"),yOo=o("__init__()"),xOo=o(" (throws an error)."),$Oo=l(),gt=a("div"),F(Ty.$$.fragment),kOo=l(),P_e=a("p"),SOo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ROo=l(),ld=a("p"),POo=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),BOo=o("not"),IOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),NOo=o("from_pretrained()"),qOo=o(" to load the model weights."),jOo=l(),F(ev.$$.fragment),DOo=l(),ro=a("div"),F(My.$$.fragment),GOo=l(),I_e=a("p"),OOo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VOo=l(),Ga=a("p"),XOo=o("The model class to instantiate is selected based on the "),N_e=a("code"),zOo=o("model_type"),WOo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),QOo=o("pretrained_model_name_or_path"),HOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),UOo=o("pretrained_model_name_or_path"),JOo=o(":"),YOo=l(),B=a("ul"),ov=a("li"),D_e=a("strong"),KOo=o("albert"),ZOo=o(" \u2014 "),AX=a("a"),eVo=o("AlbertForSequenceClassification"),oVo=o(" (ALBERT model)"),rVo=l(),rv=a("li"),G_e=a("strong"),tVo=o("bart"),aVo=o(" \u2014 "),LX=a("a"),nVo=o("BartForSequenceClassification"),sVo=o(" (BART model)"),lVo=l(),tv=a("li"),O_e=a("strong"),iVo=o("bert"),dVo=o(" \u2014 "),yX=a("a"),cVo=o("BertForSequenceClassification"),fVo=o(" (BERT model)"),mVo=l(),av=a("li"),V_e=a("strong"),gVo=o("big_bird"),hVo=o(" \u2014 "),xX=a("a"),pVo=o("BigBirdForSequenceClassification"),_Vo=o(" (BigBird model)"),uVo=l(),nv=a("li"),X_e=a("strong"),bVo=o("bigbird_pegasus"),vVo=o(" \u2014 "),$X=a("a"),FVo=o("BigBirdPegasusForSequenceClassification"),TVo=o(" (BigBird-Pegasus model)"),MVo=l(),sv=a("li"),z_e=a("strong"),EVo=o("bloom"),CVo=o(" \u2014 "),kX=a("a"),wVo=o("BloomForSequenceClassification"),AVo=o(" (BLOOM model)"),LVo=l(),lv=a("li"),W_e=a("strong"),yVo=o("camembert"),xVo=o(" \u2014 "),SX=a("a"),$Vo=o("CamembertForSequenceClassification"),kVo=o(" (CamemBERT model)"),SVo=l(),iv=a("li"),Q_e=a("strong"),RVo=o("canine"),PVo=o(" \u2014 "),RX=a("a"),BVo=o("CanineForSequenceClassification"),IVo=o(" (CANINE model)"),NVo=l(),dv=a("li"),H_e=a("strong"),qVo=o("convbert"),jVo=o(" \u2014 "),PX=a("a"),DVo=o("ConvBertForSequenceClassification"),GVo=o(" (ConvBERT model)"),OVo=l(),cv=a("li"),U_e=a("strong"),VVo=o("ctrl"),XVo=o(" \u2014 "),BX=a("a"),zVo=o("CTRLForSequenceClassification"),WVo=o(" (CTRL model)"),QVo=l(),fv=a("li"),J_e=a("strong"),HVo=o("data2vec-text"),UVo=o(" \u2014 "),IX=a("a"),JVo=o("Data2VecTextForSequenceClassification"),YVo=o(" (Data2VecText model)"),KVo=l(),mv=a("li"),Y_e=a("strong"),ZVo=o("deberta"),eXo=o(" \u2014 "),NX=a("a"),oXo=o("DebertaForSequenceClassification"),rXo=o(" (DeBERTa model)"),tXo=l(),gv=a("li"),K_e=a("strong"),aXo=o("deberta-v2"),nXo=o(" \u2014 "),qX=a("a"),sXo=o("DebertaV2ForSequenceClassification"),lXo=o(" (DeBERTa-v2 model)"),iXo=l(),hv=a("li"),Z_e=a("strong"),dXo=o("distilbert"),cXo=o(" \u2014 "),jX=a("a"),fXo=o("DistilBertForSequenceClassification"),mXo=o(" (DistilBERT model)"),gXo=l(),pv=a("li"),eue=a("strong"),hXo=o("electra"),pXo=o(" \u2014 "),DX=a("a"),_Xo=o("ElectraForSequenceClassification"),uXo=o(" (ELECTRA model)"),bXo=l(),_v=a("li"),oue=a("strong"),vXo=o("flaubert"),FXo=o(" \u2014 "),GX=a("a"),TXo=o("FlaubertForSequenceClassification"),MXo=o(" (FlauBERT model)"),EXo=l(),uv=a("li"),rue=a("strong"),CXo=o("fnet"),wXo=o(" \u2014 "),OX=a("a"),AXo=o("FNetForSequenceClassification"),LXo=o(" (FNet model)"),yXo=l(),bv=a("li"),tue=a("strong"),xXo=o("funnel"),$Xo=o(" \u2014 "),VX=a("a"),kXo=o("FunnelForSequenceClassification"),SXo=o(" (Funnel Transformer model)"),RXo=l(),vv=a("li"),aue=a("strong"),PXo=o("gpt2"),BXo=o(" \u2014 "),XX=a("a"),IXo=o("GPT2ForSequenceClassification"),NXo=o(" (OpenAI GPT-2 model)"),qXo=l(),Fv=a("li"),nue=a("strong"),jXo=o("gpt_neo"),DXo=o(" \u2014 "),zX=a("a"),GXo=o("GPTNeoForSequenceClassification"),OXo=o(" (GPT Neo model)"),VXo=l(),Tv=a("li"),sue=a("strong"),XXo=o("gptj"),zXo=o(" \u2014 "),WX=a("a"),WXo=o("GPTJForSequenceClassification"),QXo=o(" (GPT-J model)"),HXo=l(),Mv=a("li"),lue=a("strong"),UXo=o("ibert"),JXo=o(" \u2014 "),QX=a("a"),YXo=o("IBertForSequenceClassification"),KXo=o(" (I-BERT model)"),ZXo=l(),Ev=a("li"),iue=a("strong"),ezo=o("layoutlm"),ozo=o(" \u2014 "),HX=a("a"),rzo=o("LayoutLMForSequenceClassification"),tzo=o(" (LayoutLM model)"),azo=l(),Cv=a("li"),due=a("strong"),nzo=o("layoutlmv2"),szo=o(" \u2014 "),UX=a("a"),lzo=o("LayoutLMv2ForSequenceClassification"),izo=o(" (LayoutLMv2 model)"),dzo=l(),wv=a("li"),cue=a("strong"),czo=o("layoutlmv3"),fzo=o(" \u2014 "),JX=a("a"),mzo=o("LayoutLMv3ForSequenceClassification"),gzo=o(" (LayoutLMv3 model)"),hzo=l(),Av=a("li"),fue=a("strong"),pzo=o("led"),_zo=o(" \u2014 "),YX=a("a"),uzo=o("LEDForSequenceClassification"),bzo=o(" (LED model)"),vzo=l(),Lv=a("li"),mue=a("strong"),Fzo=o("longformer"),Tzo=o(" \u2014 "),KX=a("a"),Mzo=o("LongformerForSequenceClassification"),Ezo=o(" (Longformer model)"),Czo=l(),yv=a("li"),gue=a("strong"),wzo=o("mbart"),Azo=o(" \u2014 "),ZX=a("a"),Lzo=o("MBartForSequenceClassification"),yzo=o(" (mBART model)"),xzo=l(),xv=a("li"),hue=a("strong"),$zo=o("megatron-bert"),kzo=o(" \u2014 "),ez=a("a"),Szo=o("MegatronBertForSequenceClassification"),Rzo=o(" (Megatron-BERT model)"),Pzo=l(),$v=a("li"),pue=a("strong"),Bzo=o("mobilebert"),Izo=o(" \u2014 "),oz=a("a"),Nzo=o("MobileBertForSequenceClassification"),qzo=o(" (MobileBERT model)"),jzo=l(),kv=a("li"),_ue=a("strong"),Dzo=o("mpnet"),Gzo=o(" \u2014 "),rz=a("a"),Ozo=o("MPNetForSequenceClassification"),Vzo=o(" (MPNet model)"),Xzo=l(),Sv=a("li"),uue=a("strong"),zzo=o("mvp"),Wzo=o(" \u2014 "),tz=a("a"),Qzo=o("MvpForSequenceClassification"),Hzo=o(" (MVP model)"),Uzo=l(),Rv=a("li"),bue=a("strong"),Jzo=o("nezha"),Yzo=o(" \u2014 "),az=a("a"),Kzo=o("NezhaForSequenceClassification"),Zzo=o(" (Nezha model)"),eWo=l(),Pv=a("li"),vue=a("strong"),oWo=o("nystromformer"),rWo=o(" \u2014 "),nz=a("a"),tWo=o("NystromformerForSequenceClassification"),aWo=o(" (Nystr\xF6mformer model)"),nWo=l(),Bv=a("li"),Fue=a("strong"),sWo=o("openai-gpt"),lWo=o(" \u2014 "),sz=a("a"),iWo=o("OpenAIGPTForSequenceClassification"),dWo=o(" (OpenAI GPT model)"),cWo=l(),Iv=a("li"),Tue=a("strong"),fWo=o("opt"),mWo=o(" \u2014 "),lz=a("a"),gWo=o("OPTForSequenceClassification"),hWo=o(" (OPT model)"),pWo=l(),Nv=a("li"),Mue=a("strong"),_Wo=o("perceiver"),uWo=o(" \u2014 "),iz=a("a"),bWo=o("PerceiverForSequenceClassification"),vWo=o(" (Perceiver model)"),FWo=l(),qv=a("li"),Eue=a("strong"),TWo=o("plbart"),MWo=o(" \u2014 "),dz=a("a"),EWo=o("PLBartForSequenceClassification"),CWo=o(" (PLBart model)"),wWo=l(),jv=a("li"),Cue=a("strong"),AWo=o("qdqbert"),LWo=o(" \u2014 "),cz=a("a"),yWo=o("QDQBertForSequenceClassification"),xWo=o(" (QDQBert model)"),$Wo=l(),Dv=a("li"),wue=a("strong"),kWo=o("reformer"),SWo=o(" \u2014 "),fz=a("a"),RWo=o("ReformerForSequenceClassification"),PWo=o(" (Reformer model)"),BWo=l(),Gv=a("li"),Aue=a("strong"),IWo=o("rembert"),NWo=o(" \u2014 "),mz=a("a"),qWo=o("RemBertForSequenceClassification"),jWo=o(" (RemBERT model)"),DWo=l(),Ov=a("li"),Lue=a("strong"),GWo=o("roberta"),OWo=o(" \u2014 "),gz=a("a"),VWo=o("RobertaForSequenceClassification"),XWo=o(" (RoBERTa model)"),zWo=l(),Vv=a("li"),yue=a("strong"),WWo=o("roformer"),QWo=o(" \u2014 "),hz=a("a"),HWo=o("RoFormerForSequenceClassification"),UWo=o(" (RoFormer model)"),JWo=l(),Xv=a("li"),xue=a("strong"),YWo=o("squeezebert"),KWo=o(" \u2014 "),pz=a("a"),ZWo=o("SqueezeBertForSequenceClassification"),eQo=o(" (SqueezeBERT model)"),oQo=l(),zv=a("li"),$ue=a("strong"),rQo=o("tapas"),tQo=o(" \u2014 "),_z=a("a"),aQo=o("TapasForSequenceClassification"),nQo=o(" (TAPAS model)"),sQo=l(),Wv=a("li"),kue=a("strong"),lQo=o("transfo-xl"),iQo=o(" \u2014 "),uz=a("a"),dQo=o("TransfoXLForSequenceClassification"),cQo=o(" (Transformer-XL model)"),fQo=l(),Qv=a("li"),Sue=a("strong"),mQo=o("xlm"),gQo=o(" \u2014 "),bz=a("a"),hQo=o("XLMForSequenceClassification"),pQo=o(" (XLM model)"),_Qo=l(),Hv=a("li"),Rue=a("strong"),uQo=o("xlm-roberta"),bQo=o(" \u2014 "),vz=a("a"),vQo=o("XLMRobertaForSequenceClassification"),FQo=o(" (XLM-RoBERTa model)"),TQo=l(),Uv=a("li"),Pue=a("strong"),MQo=o("xlm-roberta-xl"),EQo=o(" \u2014 "),Fz=a("a"),CQo=o("XLMRobertaXLForSequenceClassification"),wQo=o(" (XLM-RoBERTa-XL model)"),AQo=l(),Jv=a("li"),Bue=a("strong"),LQo=o("xlnet"),yQo=o(" \u2014 "),Tz=a("a"),xQo=o("XLNetForSequenceClassification"),$Qo=o(" (XLNet model)"),kQo=l(),Yv=a("li"),Iue=a("strong"),SQo=o("yoso"),RQo=o(" \u2014 "),Mz=a("a"),PQo=o("YosoForSequenceClassification"),BQo=o(" (YOSO model)"),IQo=l(),Kv=a("p"),NQo=o("The model is set in evaluation mode by default using "),Nue=a("code"),qQo=o("model.eval()"),jQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),DQo=o("model.train()"),GQo=l(),F(Zv.$$.fragment),Pze=l(),id=a("h2"),e3=a("a"),jue=a("span"),F(Ey.$$.fragment),OQo=l(),Due=a("span"),VQo=o("AutoModelForMultipleChoice"),Bze=l(),No=a("div"),F(Cy.$$.fragment),XQo=l(),dd=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ez=a("a"),WQo=o("from_pretrained()"),QQo=o(" class method or the "),Cz=a("a"),HQo=o("from_config()"),UQo=o(` class
method.`),JQo=l(),wy=a("p"),YQo=o("This class cannot be instantiated directly using "),Gue=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eHo=l(),ht=a("div"),F(Ay.$$.fragment),oHo=l(),Oue=a("p"),rHo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tHo=l(),cd=a("p"),aHo=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),nHo=o("not"),sHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),lHo=o("from_pretrained()"),iHo=o(" to load the model weights."),dHo=l(),F(o3.$$.fragment),cHo=l(),to=a("div"),F(Ly.$$.fragment),fHo=l(),Xue=a("p"),mHo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gHo=l(),Oa=a("p"),hHo=o("The model class to instantiate is selected based on the "),zue=a("code"),pHo=o("model_type"),_Ho=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),uHo=o("pretrained_model_name_or_path"),bHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(":"),THo=l(),Z=a("ul"),r3=a("li"),Hue=a("strong"),MHo=o("albert"),EHo=o(" \u2014 "),Az=a("a"),CHo=o("AlbertForMultipleChoice"),wHo=o(" (ALBERT model)"),AHo=l(),t3=a("li"),Uue=a("strong"),LHo=o("bert"),yHo=o(" \u2014 "),Lz=a("a"),xHo=o("BertForMultipleChoice"),$Ho=o(" (BERT model)"),kHo=l(),a3=a("li"),Jue=a("strong"),SHo=o("big_bird"),RHo=o(" \u2014 "),yz=a("a"),PHo=o("BigBirdForMultipleChoice"),BHo=o(" (BigBird model)"),IHo=l(),n3=a("li"),Yue=a("strong"),NHo=o("camembert"),qHo=o(" \u2014 "),xz=a("a"),jHo=o("CamembertForMultipleChoice"),DHo=o(" (CamemBERT model)"),GHo=l(),s3=a("li"),Kue=a("strong"),OHo=o("canine"),VHo=o(" \u2014 "),$z=a("a"),XHo=o("CanineForMultipleChoice"),zHo=o(" (CANINE model)"),WHo=l(),l3=a("li"),Zue=a("strong"),QHo=o("convbert"),HHo=o(" \u2014 "),kz=a("a"),UHo=o("ConvBertForMultipleChoice"),JHo=o(" (ConvBERT model)"),YHo=l(),i3=a("li"),e1e=a("strong"),KHo=o("data2vec-text"),ZHo=o(" \u2014 "),Sz=a("a"),eUo=o("Data2VecTextForMultipleChoice"),oUo=o(" (Data2VecText model)"),rUo=l(),d3=a("li"),o1e=a("strong"),tUo=o("deberta-v2"),aUo=o(" \u2014 "),Rz=a("a"),nUo=o("DebertaV2ForMultipleChoice"),sUo=o(" (DeBERTa-v2 model)"),lUo=l(),c3=a("li"),r1e=a("strong"),iUo=o("distilbert"),dUo=o(" \u2014 "),Pz=a("a"),cUo=o("DistilBertForMultipleChoice"),fUo=o(" (DistilBERT model)"),mUo=l(),f3=a("li"),t1e=a("strong"),gUo=o("electra"),hUo=o(" \u2014 "),Bz=a("a"),pUo=o("ElectraForMultipleChoice"),_Uo=o(" (ELECTRA model)"),uUo=l(),m3=a("li"),a1e=a("strong"),bUo=o("flaubert"),vUo=o(" \u2014 "),Iz=a("a"),FUo=o("FlaubertForMultipleChoice"),TUo=o(" (FlauBERT model)"),MUo=l(),g3=a("li"),n1e=a("strong"),EUo=o("fnet"),CUo=o(" \u2014 "),Nz=a("a"),wUo=o("FNetForMultipleChoice"),AUo=o(" (FNet model)"),LUo=l(),h3=a("li"),s1e=a("strong"),yUo=o("funnel"),xUo=o(" \u2014 "),qz=a("a"),$Uo=o("FunnelForMultipleChoice"),kUo=o(" (Funnel Transformer model)"),SUo=l(),p3=a("li"),l1e=a("strong"),RUo=o("ibert"),PUo=o(" \u2014 "),jz=a("a"),BUo=o("IBertForMultipleChoice"),IUo=o(" (I-BERT model)"),NUo=l(),_3=a("li"),i1e=a("strong"),qUo=o("longformer"),jUo=o(" \u2014 "),Dz=a("a"),DUo=o("LongformerForMultipleChoice"),GUo=o(" (Longformer model)"),OUo=l(),u3=a("li"),d1e=a("strong"),VUo=o("megatron-bert"),XUo=o(" \u2014 "),Gz=a("a"),zUo=o("MegatronBertForMultipleChoice"),WUo=o(" (Megatron-BERT model)"),QUo=l(),b3=a("li"),c1e=a("strong"),HUo=o("mobilebert"),UUo=o(" \u2014 "),Oz=a("a"),JUo=o("MobileBertForMultipleChoice"),YUo=o(" (MobileBERT model)"),KUo=l(),v3=a("li"),f1e=a("strong"),ZUo=o("mpnet"),eJo=o(" \u2014 "),Vz=a("a"),oJo=o("MPNetForMultipleChoice"),rJo=o(" (MPNet model)"),tJo=l(),F3=a("li"),m1e=a("strong"),aJo=o("nezha"),nJo=o(" \u2014 "),Xz=a("a"),sJo=o("NezhaForMultipleChoice"),lJo=o(" (Nezha model)"),iJo=l(),T3=a("li"),g1e=a("strong"),dJo=o("nystromformer"),cJo=o(" \u2014 "),zz=a("a"),fJo=o("NystromformerForMultipleChoice"),mJo=o(" (Nystr\xF6mformer model)"),gJo=l(),M3=a("li"),h1e=a("strong"),hJo=o("qdqbert"),pJo=o(" \u2014 "),Wz=a("a"),_Jo=o("QDQBertForMultipleChoice"),uJo=o(" (QDQBert model)"),bJo=l(),E3=a("li"),p1e=a("strong"),vJo=o("rembert"),FJo=o(" \u2014 "),Qz=a("a"),TJo=o("RemBertForMultipleChoice"),MJo=o(" (RemBERT model)"),EJo=l(),C3=a("li"),_1e=a("strong"),CJo=o("roberta"),wJo=o(" \u2014 "),Hz=a("a"),AJo=o("RobertaForMultipleChoice"),LJo=o(" (RoBERTa model)"),yJo=l(),w3=a("li"),u1e=a("strong"),xJo=o("roformer"),$Jo=o(" \u2014 "),Uz=a("a"),kJo=o("RoFormerForMultipleChoice"),SJo=o(" (RoFormer model)"),RJo=l(),A3=a("li"),b1e=a("strong"),PJo=o("squeezebert"),BJo=o(" \u2014 "),Jz=a("a"),IJo=o("SqueezeBertForMultipleChoice"),NJo=o(" (SqueezeBERT model)"),qJo=l(),L3=a("li"),v1e=a("strong"),jJo=o("xlm"),DJo=o(" \u2014 "),Yz=a("a"),GJo=o("XLMForMultipleChoice"),OJo=o(" (XLM model)"),VJo=l(),y3=a("li"),F1e=a("strong"),XJo=o("xlm-roberta"),zJo=o(" \u2014 "),Kz=a("a"),WJo=o("XLMRobertaForMultipleChoice"),QJo=o(" (XLM-RoBERTa model)"),HJo=l(),x3=a("li"),T1e=a("strong"),UJo=o("xlm-roberta-xl"),JJo=o(" \u2014 "),Zz=a("a"),YJo=o("XLMRobertaXLForMultipleChoice"),KJo=o(" (XLM-RoBERTa-XL model)"),ZJo=l(),$3=a("li"),M1e=a("strong"),eYo=o("xlnet"),oYo=o(" \u2014 "),eW=a("a"),rYo=o("XLNetForMultipleChoice"),tYo=o(" (XLNet model)"),aYo=l(),k3=a("li"),E1e=a("strong"),nYo=o("yoso"),sYo=o(" \u2014 "),oW=a("a"),lYo=o("YosoForMultipleChoice"),iYo=o(" (YOSO model)"),dYo=l(),S3=a("p"),cYo=o("The model is set in evaluation mode by default using "),C1e=a("code"),fYo=o("model.eval()"),mYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=a("code"),gYo=o("model.train()"),hYo=l(),F(R3.$$.fragment),Ize=l(),fd=a("h2"),P3=a("a"),A1e=a("span"),F(yy.$$.fragment),pYo=l(),L1e=a("span"),_Yo=o("AutoModelForNextSentencePrediction"),Nze=l(),qo=a("div"),F(xy.$$.fragment),uYo=l(),md=a("p"),bYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rW=a("a"),vYo=o("from_pretrained()"),FYo=o(" class method or the "),tW=a("a"),TYo=o("from_config()"),MYo=o(` class
method.`),EYo=l(),$y=a("p"),CYo=o("This class cannot be instantiated directly using "),y1e=a("code"),wYo=o("__init__()"),AYo=o(" (throws an error)."),LYo=l(),pt=a("div"),F(ky.$$.fragment),yYo=l(),x1e=a("p"),xYo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Yo=l(),gd=a("p"),kYo=o(`Note:
Loading a model from its configuration file does `),$1e=a("strong"),SYo=o("not"),RYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),PYo=o("from_pretrained()"),BYo=o(" to load the model weights."),IYo=l(),F(B3.$$.fragment),NYo=l(),ao=a("div"),F(Sy.$$.fragment),qYo=l(),k1e=a("p"),jYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DYo=l(),Va=a("p"),GYo=o("The model class to instantiate is selected based on the "),S1e=a("code"),OYo=o("model_type"),VYo=o(` property of the config object (either
passed as an argument or loaded from `),R1e=a("code"),XYo=o("pretrained_model_name_or_path"),zYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),WYo=o("pretrained_model_name_or_path"),QYo=o(":"),HYo=l(),jo=a("ul"),I3=a("li"),B1e=a("strong"),UYo=o("bert"),JYo=o(" \u2014 "),nW=a("a"),YYo=o("BertForNextSentencePrediction"),KYo=o(" (BERT model)"),ZYo=l(),N3=a("li"),I1e=a("strong"),eKo=o("fnet"),oKo=o(" \u2014 "),sW=a("a"),rKo=o("FNetForNextSentencePrediction"),tKo=o(" (FNet model)"),aKo=l(),q3=a("li"),N1e=a("strong"),nKo=o("megatron-bert"),sKo=o(" \u2014 "),lW=a("a"),lKo=o("MegatronBertForNextSentencePrediction"),iKo=o(" (Megatron-BERT model)"),dKo=l(),j3=a("li"),q1e=a("strong"),cKo=o("mobilebert"),fKo=o(" \u2014 "),iW=a("a"),mKo=o("MobileBertForNextSentencePrediction"),gKo=o(" (MobileBERT model)"),hKo=l(),D3=a("li"),j1e=a("strong"),pKo=o("nezha"),_Ko=o(" \u2014 "),dW=a("a"),uKo=o("NezhaForNextSentencePrediction"),bKo=o(" (Nezha model)"),vKo=l(),G3=a("li"),D1e=a("strong"),FKo=o("qdqbert"),TKo=o(" \u2014 "),cW=a("a"),MKo=o("QDQBertForNextSentencePrediction"),EKo=o(" (QDQBert model)"),CKo=l(),O3=a("p"),wKo=o("The model is set in evaluation mode by default using "),G1e=a("code"),AKo=o("model.eval()"),LKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=a("code"),yKo=o("model.train()"),xKo=l(),F(V3.$$.fragment),qze=l(),hd=a("h2"),X3=a("a"),V1e=a("span"),F(Ry.$$.fragment),$Ko=l(),X1e=a("span"),kKo=o("AutoModelForTokenClassification"),jze=l(),Do=a("div"),F(Py.$$.fragment),SKo=l(),pd=a("p"),RKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fW=a("a"),PKo=o("from_pretrained()"),BKo=o(" class method or the "),mW=a("a"),IKo=o("from_config()"),NKo=o(` class
method.`),qKo=l(),By=a("p"),jKo=o("This class cannot be instantiated directly using "),z1e=a("code"),DKo=o("__init__()"),GKo=o(" (throws an error)."),OKo=l(),_t=a("div"),F(Iy.$$.fragment),VKo=l(),W1e=a("p"),XKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zKo=l(),_d=a("p"),WKo=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),QKo=o("not"),HKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),UKo=o("from_pretrained()"),JKo=o(" to load the model weights."),YKo=l(),F(z3.$$.fragment),KKo=l(),no=a("div"),F(Ny.$$.fragment),ZKo=l(),H1e=a("p"),eZo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oZo=l(),Xa=a("p"),rZo=o("The model class to instantiate is selected based on the "),U1e=a("code"),tZo=o("model_type"),aZo=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),nZo=o("pretrained_model_name_or_path"),sZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(":"),dZo=l(),J=a("ul"),W3=a("li"),K1e=a("strong"),cZo=o("albert"),fZo=o(" \u2014 "),hW=a("a"),mZo=o("AlbertForTokenClassification"),gZo=o(" (ALBERT model)"),hZo=l(),Q3=a("li"),Z1e=a("strong"),pZo=o("bert"),_Zo=o(" \u2014 "),pW=a("a"),uZo=o("BertForTokenClassification"),bZo=o(" (BERT model)"),vZo=l(),H3=a("li"),e2e=a("strong"),FZo=o("big_bird"),TZo=o(" \u2014 "),_W=a("a"),MZo=o("BigBirdForTokenClassification"),EZo=o(" (BigBird model)"),CZo=l(),U3=a("li"),o2e=a("strong"),wZo=o("bloom"),AZo=o(" \u2014 "),uW=a("a"),LZo=o("BloomForTokenClassification"),yZo=o(" (BLOOM model)"),xZo=l(),J3=a("li"),r2e=a("strong"),$Zo=o("camembert"),kZo=o(" \u2014 "),bW=a("a"),SZo=o("CamembertForTokenClassification"),RZo=o(" (CamemBERT model)"),PZo=l(),Y3=a("li"),t2e=a("strong"),BZo=o("canine"),IZo=o(" \u2014 "),vW=a("a"),NZo=o("CanineForTokenClassification"),qZo=o(" (CANINE model)"),jZo=l(),K3=a("li"),a2e=a("strong"),DZo=o("convbert"),GZo=o(" \u2014 "),FW=a("a"),OZo=o("ConvBertForTokenClassification"),VZo=o(" (ConvBERT model)"),XZo=l(),Z3=a("li"),n2e=a("strong"),zZo=o("data2vec-text"),WZo=o(" \u2014 "),TW=a("a"),QZo=o("Data2VecTextForTokenClassification"),HZo=o(" (Data2VecText model)"),UZo=l(),eF=a("li"),s2e=a("strong"),JZo=o("deberta"),YZo=o(" \u2014 "),MW=a("a"),KZo=o("DebertaForTokenClassification"),ZZo=o(" (DeBERTa model)"),eer=l(),oF=a("li"),l2e=a("strong"),oer=o("deberta-v2"),rer=o(" \u2014 "),EW=a("a"),ter=o("DebertaV2ForTokenClassification"),aer=o(" (DeBERTa-v2 model)"),ner=l(),rF=a("li"),i2e=a("strong"),ser=o("distilbert"),ler=o(" \u2014 "),CW=a("a"),ier=o("DistilBertForTokenClassification"),der=o(" (DistilBERT model)"),cer=l(),tF=a("li"),d2e=a("strong"),fer=o("electra"),mer=o(" \u2014 "),wW=a("a"),ger=o("ElectraForTokenClassification"),her=o(" (ELECTRA model)"),per=l(),aF=a("li"),c2e=a("strong"),_er=o("flaubert"),uer=o(" \u2014 "),AW=a("a"),ber=o("FlaubertForTokenClassification"),ver=o(" (FlauBERT model)"),Fer=l(),nF=a("li"),f2e=a("strong"),Ter=o("fnet"),Mer=o(" \u2014 "),LW=a("a"),Eer=o("FNetForTokenClassification"),Cer=o(" (FNet model)"),wer=l(),sF=a("li"),m2e=a("strong"),Aer=o("funnel"),Ler=o(" \u2014 "),yW=a("a"),yer=o("FunnelForTokenClassification"),xer=o(" (Funnel Transformer model)"),$er=l(),lF=a("li"),g2e=a("strong"),ker=o("gpt2"),Ser=o(" \u2014 "),xW=a("a"),Rer=o("GPT2ForTokenClassification"),Per=o(" (OpenAI GPT-2 model)"),Ber=l(),iF=a("li"),h2e=a("strong"),Ier=o("ibert"),Ner=o(" \u2014 "),$W=a("a"),qer=o("IBertForTokenClassification"),jer=o(" (I-BERT model)"),Der=l(),dF=a("li"),p2e=a("strong"),Ger=o("layoutlm"),Oer=o(" \u2014 "),kW=a("a"),Ver=o("LayoutLMForTokenClassification"),Xer=o(" (LayoutLM model)"),zer=l(),cF=a("li"),_2e=a("strong"),Wer=o("layoutlmv2"),Qer=o(" \u2014 "),SW=a("a"),Her=o("LayoutLMv2ForTokenClassification"),Uer=o(" (LayoutLMv2 model)"),Jer=l(),fF=a("li"),u2e=a("strong"),Yer=o("layoutlmv3"),Ker=o(" \u2014 "),RW=a("a"),Zer=o("LayoutLMv3ForTokenClassification"),eor=o(" (LayoutLMv3 model)"),oor=l(),mF=a("li"),b2e=a("strong"),ror=o("longformer"),tor=o(" \u2014 "),PW=a("a"),aor=o("LongformerForTokenClassification"),nor=o(" (Longformer model)"),sor=l(),gF=a("li"),v2e=a("strong"),lor=o("megatron-bert"),ior=o(" \u2014 "),BW=a("a"),dor=o("MegatronBertForTokenClassification"),cor=o(" (Megatron-BERT model)"),mor=l(),hF=a("li"),F2e=a("strong"),gor=o("mobilebert"),hor=o(" \u2014 "),IW=a("a"),por=o("MobileBertForTokenClassification"),_or=o(" (MobileBERT model)"),uor=l(),pF=a("li"),T2e=a("strong"),bor=o("mpnet"),vor=o(" \u2014 "),NW=a("a"),For=o("MPNetForTokenClassification"),Tor=o(" (MPNet model)"),Mor=l(),_F=a("li"),M2e=a("strong"),Eor=o("nezha"),Cor=o(" \u2014 "),qW=a("a"),wor=o("NezhaForTokenClassification"),Aor=o(" (Nezha model)"),Lor=l(),uF=a("li"),E2e=a("strong"),yor=o("nystromformer"),xor=o(" \u2014 "),jW=a("a"),$or=o("NystromformerForTokenClassification"),kor=o(" (Nystr\xF6mformer model)"),Sor=l(),bF=a("li"),C2e=a("strong"),Ror=o("qdqbert"),Por=o(" \u2014 "),DW=a("a"),Bor=o("QDQBertForTokenClassification"),Ior=o(" (QDQBert model)"),Nor=l(),vF=a("li"),w2e=a("strong"),qor=o("rembert"),jor=o(" \u2014 "),GW=a("a"),Dor=o("RemBertForTokenClassification"),Gor=o(" (RemBERT model)"),Oor=l(),FF=a("li"),A2e=a("strong"),Vor=o("roberta"),Xor=o(" \u2014 "),OW=a("a"),zor=o("RobertaForTokenClassification"),Wor=o(" (RoBERTa model)"),Qor=l(),TF=a("li"),L2e=a("strong"),Hor=o("roformer"),Uor=o(" \u2014 "),VW=a("a"),Jor=o("RoFormerForTokenClassification"),Yor=o(" (RoFormer model)"),Kor=l(),MF=a("li"),y2e=a("strong"),Zor=o("squeezebert"),err=o(" \u2014 "),XW=a("a"),orr=o("SqueezeBertForTokenClassification"),rrr=o(" (SqueezeBERT model)"),trr=l(),EF=a("li"),x2e=a("strong"),arr=o("xlm"),nrr=o(" \u2014 "),zW=a("a"),srr=o("XLMForTokenClassification"),lrr=o(" (XLM model)"),irr=l(),CF=a("li"),$2e=a("strong"),drr=o("xlm-roberta"),crr=o(" \u2014 "),WW=a("a"),frr=o("XLMRobertaForTokenClassification"),mrr=o(" (XLM-RoBERTa model)"),grr=l(),wF=a("li"),k2e=a("strong"),hrr=o("xlm-roberta-xl"),prr=o(" \u2014 "),QW=a("a"),_rr=o("XLMRobertaXLForTokenClassification"),urr=o(" (XLM-RoBERTa-XL model)"),brr=l(),AF=a("li"),S2e=a("strong"),vrr=o("xlnet"),Frr=o(" \u2014 "),HW=a("a"),Trr=o("XLNetForTokenClassification"),Mrr=o(" (XLNet model)"),Err=l(),LF=a("li"),R2e=a("strong"),Crr=o("yoso"),wrr=o(" \u2014 "),UW=a("a"),Arr=o("YosoForTokenClassification"),Lrr=o(" (YOSO model)"),yrr=l(),yF=a("p"),xrr=o("The model is set in evaluation mode by default using "),P2e=a("code"),$rr=o("model.eval()"),krr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),Srr=o("model.train()"),Rrr=l(),F(xF.$$.fragment),Dze=l(),ud=a("h2"),$F=a("a"),I2e=a("span"),F(qy.$$.fragment),Prr=l(),N2e=a("span"),Brr=o("AutoModelForQuestionAnswering"),Gze=l(),Go=a("div"),F(jy.$$.fragment),Irr=l(),bd=a("p"),Nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=a("a"),qrr=o("from_pretrained()"),jrr=o(" class method or the "),YW=a("a"),Drr=o("from_config()"),Grr=o(` class
method.`),Orr=l(),Dy=a("p"),Vrr=o("This class cannot be instantiated directly using "),q2e=a("code"),Xrr=o("__init__()"),zrr=o(" (throws an error)."),Wrr=l(),ut=a("div"),F(Gy.$$.fragment),Qrr=l(),j2e=a("p"),Hrr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Urr=l(),vd=a("p"),Jrr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),Yrr=o("not"),Krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Zrr=o("from_pretrained()"),etr=o(" to load the model weights."),otr=l(),F(kF.$$.fragment),rtr=l(),so=a("div"),F(Oy.$$.fragment),ttr=l(),G2e=a("p"),atr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ntr=l(),za=a("p"),str=o("The model class to instantiate is selected based on the "),O2e=a("code"),ltr=o("model_type"),itr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),ftr=o("pretrained_model_name_or_path"),mtr=o(":"),gtr=l(),V=a("ul"),SF=a("li"),z2e=a("strong"),htr=o("albert"),ptr=o(" \u2014 "),ZW=a("a"),_tr=o("AlbertForQuestionAnswering"),utr=o(" (ALBERT model)"),btr=l(),RF=a("li"),W2e=a("strong"),vtr=o("bart"),Ftr=o(" \u2014 "),eQ=a("a"),Ttr=o("BartForQuestionAnswering"),Mtr=o(" (BART model)"),Etr=l(),PF=a("li"),Q2e=a("strong"),Ctr=o("bert"),wtr=o(" \u2014 "),oQ=a("a"),Atr=o("BertForQuestionAnswering"),Ltr=o(" (BERT model)"),ytr=l(),BF=a("li"),H2e=a("strong"),xtr=o("big_bird"),$tr=o(" \u2014 "),rQ=a("a"),ktr=o("BigBirdForQuestionAnswering"),Str=o(" (BigBird model)"),Rtr=l(),IF=a("li"),U2e=a("strong"),Ptr=o("bigbird_pegasus"),Btr=o(" \u2014 "),tQ=a("a"),Itr=o("BigBirdPegasusForQuestionAnswering"),Ntr=o(" (BigBird-Pegasus model)"),qtr=l(),NF=a("li"),J2e=a("strong"),jtr=o("camembert"),Dtr=o(" \u2014 "),aQ=a("a"),Gtr=o("CamembertForQuestionAnswering"),Otr=o(" (CamemBERT model)"),Vtr=l(),qF=a("li"),Y2e=a("strong"),Xtr=o("canine"),ztr=o(" \u2014 "),nQ=a("a"),Wtr=o("CanineForQuestionAnswering"),Qtr=o(" (CANINE model)"),Htr=l(),jF=a("li"),K2e=a("strong"),Utr=o("convbert"),Jtr=o(" \u2014 "),sQ=a("a"),Ytr=o("ConvBertForQuestionAnswering"),Ktr=o(" (ConvBERT model)"),Ztr=l(),DF=a("li"),Z2e=a("strong"),ear=o("data2vec-text"),oar=o(" \u2014 "),lQ=a("a"),rar=o("Data2VecTextForQuestionAnswering"),tar=o(" (Data2VecText model)"),aar=l(),GF=a("li"),ebe=a("strong"),nar=o("deberta"),sar=o(" \u2014 "),iQ=a("a"),lar=o("DebertaForQuestionAnswering"),iar=o(" (DeBERTa model)"),dar=l(),OF=a("li"),obe=a("strong"),car=o("deberta-v2"),far=o(" \u2014 "),dQ=a("a"),mar=o("DebertaV2ForQuestionAnswering"),gar=o(" (DeBERTa-v2 model)"),har=l(),VF=a("li"),rbe=a("strong"),par=o("distilbert"),_ar=o(" \u2014 "),cQ=a("a"),uar=o("DistilBertForQuestionAnswering"),bar=o(" (DistilBERT model)"),Far=l(),XF=a("li"),tbe=a("strong"),Tar=o("electra"),Mar=o(" \u2014 "),fQ=a("a"),Ear=o("ElectraForQuestionAnswering"),Car=o(" (ELECTRA model)"),war=l(),zF=a("li"),abe=a("strong"),Aar=o("flaubert"),Lar=o(" \u2014 "),mQ=a("a"),yar=o("FlaubertForQuestionAnsweringSimple"),xar=o(" (FlauBERT model)"),$ar=l(),WF=a("li"),nbe=a("strong"),kar=o("fnet"),Sar=o(" \u2014 "),gQ=a("a"),Rar=o("FNetForQuestionAnswering"),Par=o(" (FNet model)"),Bar=l(),QF=a("li"),sbe=a("strong"),Iar=o("funnel"),Nar=o(" \u2014 "),hQ=a("a"),qar=o("FunnelForQuestionAnswering"),jar=o(" (Funnel Transformer model)"),Dar=l(),HF=a("li"),lbe=a("strong"),Gar=o("gptj"),Oar=o(" \u2014 "),pQ=a("a"),Var=o("GPTJForQuestionAnswering"),Xar=o(" (GPT-J model)"),zar=l(),UF=a("li"),ibe=a("strong"),War=o("ibert"),Qar=o(" \u2014 "),_Q=a("a"),Har=o("IBertForQuestionAnswering"),Uar=o(" (I-BERT model)"),Jar=l(),JF=a("li"),dbe=a("strong"),Yar=o("layoutlmv2"),Kar=o(" \u2014 "),uQ=a("a"),Zar=o("LayoutLMv2ForQuestionAnswering"),enr=o(" (LayoutLMv2 model)"),onr=l(),YF=a("li"),cbe=a("strong"),rnr=o("layoutlmv3"),tnr=o(" \u2014 "),bQ=a("a"),anr=o("LayoutLMv3ForQuestionAnswering"),nnr=o(" (LayoutLMv3 model)"),snr=l(),KF=a("li"),fbe=a("strong"),lnr=o("led"),inr=o(" \u2014 "),vQ=a("a"),dnr=o("LEDForQuestionAnswering"),cnr=o(" (LED model)"),fnr=l(),ZF=a("li"),mbe=a("strong"),mnr=o("longformer"),gnr=o(" \u2014 "),FQ=a("a"),hnr=o("LongformerForQuestionAnswering"),pnr=o(" (Longformer model)"),_nr=l(),e6=a("li"),gbe=a("strong"),unr=o("lxmert"),bnr=o(" \u2014 "),TQ=a("a"),vnr=o("LxmertForQuestionAnswering"),Fnr=o(" (LXMERT model)"),Tnr=l(),o6=a("li"),hbe=a("strong"),Mnr=o("mbart"),Enr=o(" \u2014 "),MQ=a("a"),Cnr=o("MBartForQuestionAnswering"),wnr=o(" (mBART model)"),Anr=l(),r6=a("li"),pbe=a("strong"),Lnr=o("megatron-bert"),ynr=o(" \u2014 "),EQ=a("a"),xnr=o("MegatronBertForQuestionAnswering"),$nr=o(" (Megatron-BERT model)"),knr=l(),t6=a("li"),_be=a("strong"),Snr=o("mobilebert"),Rnr=o(" \u2014 "),CQ=a("a"),Pnr=o("MobileBertForQuestionAnswering"),Bnr=o(" (MobileBERT model)"),Inr=l(),a6=a("li"),ube=a("strong"),Nnr=o("mpnet"),qnr=o(" \u2014 "),wQ=a("a"),jnr=o("MPNetForQuestionAnswering"),Dnr=o(" (MPNet model)"),Gnr=l(),n6=a("li"),bbe=a("strong"),Onr=o("mvp"),Vnr=o(" \u2014 "),AQ=a("a"),Xnr=o("MvpForQuestionAnswering"),znr=o(" (MVP model)"),Wnr=l(),s6=a("li"),vbe=a("strong"),Qnr=o("nezha"),Hnr=o(" \u2014 "),LQ=a("a"),Unr=o("NezhaForQuestionAnswering"),Jnr=o(" (Nezha model)"),Ynr=l(),l6=a("li"),Fbe=a("strong"),Knr=o("nystromformer"),Znr=o(" \u2014 "),yQ=a("a"),esr=o("NystromformerForQuestionAnswering"),osr=o(" (Nystr\xF6mformer model)"),rsr=l(),i6=a("li"),Tbe=a("strong"),tsr=o("qdqbert"),asr=o(" \u2014 "),xQ=a("a"),nsr=o("QDQBertForQuestionAnswering"),ssr=o(" (QDQBert model)"),lsr=l(),d6=a("li"),Mbe=a("strong"),isr=o("reformer"),dsr=o(" \u2014 "),$Q=a("a"),csr=o("ReformerForQuestionAnswering"),fsr=o(" (Reformer model)"),msr=l(),c6=a("li"),Ebe=a("strong"),gsr=o("rembert"),hsr=o(" \u2014 "),kQ=a("a"),psr=o("RemBertForQuestionAnswering"),_sr=o(" (RemBERT model)"),usr=l(),f6=a("li"),Cbe=a("strong"),bsr=o("roberta"),vsr=o(" \u2014 "),SQ=a("a"),Fsr=o("RobertaForQuestionAnswering"),Tsr=o(" (RoBERTa model)"),Msr=l(),m6=a("li"),wbe=a("strong"),Esr=o("roformer"),Csr=o(" \u2014 "),RQ=a("a"),wsr=o("RoFormerForQuestionAnswering"),Asr=o(" (RoFormer model)"),Lsr=l(),g6=a("li"),Abe=a("strong"),ysr=o("splinter"),xsr=o(" \u2014 "),PQ=a("a"),$sr=o("SplinterForQuestionAnswering"),ksr=o(" (Splinter model)"),Ssr=l(),h6=a("li"),Lbe=a("strong"),Rsr=o("squeezebert"),Psr=o(" \u2014 "),BQ=a("a"),Bsr=o("SqueezeBertForQuestionAnswering"),Isr=o(" (SqueezeBERT model)"),Nsr=l(),p6=a("li"),ybe=a("strong"),qsr=o("xlm"),jsr=o(" \u2014 "),IQ=a("a"),Dsr=o("XLMForQuestionAnsweringSimple"),Gsr=o(" (XLM model)"),Osr=l(),_6=a("li"),xbe=a("strong"),Vsr=o("xlm-roberta"),Xsr=o(" \u2014 "),NQ=a("a"),zsr=o("XLMRobertaForQuestionAnswering"),Wsr=o(" (XLM-RoBERTa model)"),Qsr=l(),u6=a("li"),$be=a("strong"),Hsr=o("xlm-roberta-xl"),Usr=o(" \u2014 "),qQ=a("a"),Jsr=o("XLMRobertaXLForQuestionAnswering"),Ysr=o(" (XLM-RoBERTa-XL model)"),Ksr=l(),b6=a("li"),kbe=a("strong"),Zsr=o("xlnet"),elr=o(" \u2014 "),jQ=a("a"),olr=o("XLNetForQuestionAnsweringSimple"),rlr=o(" (XLNet model)"),tlr=l(),v6=a("li"),Sbe=a("strong"),alr=o("yoso"),nlr=o(" \u2014 "),DQ=a("a"),slr=o("YosoForQuestionAnswering"),llr=o(" (YOSO model)"),ilr=l(),F6=a("p"),dlr=o("The model is set in evaluation mode by default using "),Rbe=a("code"),clr=o("model.eval()"),flr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=a("code"),mlr=o("model.train()"),glr=l(),F(T6.$$.fragment),Oze=l(),Fd=a("h2"),M6=a("a"),Bbe=a("span"),F(Vy.$$.fragment),hlr=l(),Ibe=a("span"),plr=o("AutoModelForTableQuestionAnswering"),Vze=l(),Oo=a("div"),F(Xy.$$.fragment),_lr=l(),Td=a("p"),ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GQ=a("a"),blr=o("from_pretrained()"),vlr=o(" class method or the "),OQ=a("a"),Flr=o("from_config()"),Tlr=o(` class
method.`),Mlr=l(),zy=a("p"),Elr=o("This class cannot be instantiated directly using "),Nbe=a("code"),Clr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),bt=a("div"),F(Wy.$$.fragment),Llr=l(),qbe=a("p"),ylr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xlr=l(),Md=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),klr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),Rlr=o("from_pretrained()"),Plr=o(" to load the model weights."),Blr=l(),F(E6.$$.fragment),Ilr=l(),lo=a("div"),F(Qy.$$.fragment),Nlr=l(),Dbe=a("p"),qlr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),jlr=l(),Wa=a("p"),Dlr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),Glr=o("model_type"),Olr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),Vlr=o("pretrained_model_name_or_path"),Xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),zlr=o("pretrained_model_name_or_path"),Wlr=o(":"),Qlr=l(),Xbe=a("ul"),C6=a("li"),zbe=a("strong"),Hlr=o("tapas"),Ulr=o(" \u2014 "),XQ=a("a"),Jlr=o("TapasForQuestionAnswering"),Ylr=o(" (TAPAS model)"),Klr=l(),w6=a("p"),Zlr=o("The model is set in evaluation mode by default using "),Wbe=a("code"),eir=o("model.eval()"),oir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),rir=o("model.train()"),tir=l(),F(A6.$$.fragment),Xze=l(),Ed=a("h2"),L6=a("a"),Hbe=a("span"),F(Hy.$$.fragment),air=l(),Ube=a("span"),nir=o("AutoModelForImageClassification"),zze=l(),Vo=a("div"),F(Uy.$$.fragment),sir=l(),Cd=a("p"),lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zQ=a("a"),iir=o("from_pretrained()"),dir=o(" class method or the "),WQ=a("a"),cir=o("from_config()"),fir=o(` class
method.`),mir=l(),Jy=a("p"),gir=o("This class cannot be instantiated directly using "),Jbe=a("code"),hir=o("__init__()"),pir=o(" (throws an error)."),_ir=l(),vt=a("div"),F(Yy.$$.fragment),uir=l(),Ybe=a("p"),bir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vir=l(),wd=a("p"),Fir=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),Tir=o("not"),Mir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),Eir=o("from_pretrained()"),Cir=o(" to load the model weights."),wir=l(),F(y6.$$.fragment),Air=l(),io=a("div"),F(Ky.$$.fragment),Lir=l(),Zbe=a("p"),yir=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xir=l(),Qa=a("p"),$ir=o("The model class to instantiate is selected based on the "),eve=a("code"),kir=o("model_type"),Sir=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),Rir=o("pretrained_model_name_or_path"),Pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),Bir=o("pretrained_model_name_or_path"),Iir=o(":"),Nir=l(),be=a("ul"),x6=a("li"),tve=a("strong"),qir=o("beit"),jir=o(" \u2014 "),HQ=a("a"),Dir=o("BeitForImageClassification"),Gir=o(" (BEiT model)"),Oir=l(),$6=a("li"),ave=a("strong"),Vir=o("convnext"),Xir=o(" \u2014 "),UQ=a("a"),zir=o("ConvNextForImageClassification"),Wir=o(" (ConvNeXT model)"),Qir=l(),k6=a("li"),nve=a("strong"),Hir=o("cvt"),Uir=o(" \u2014 "),JQ=a("a"),Jir=o("CvtForImageClassification"),Yir=o(" (CvT model)"),Kir=l(),S6=a("li"),sve=a("strong"),Zir=o("data2vec-vision"),edr=o(" \u2014 "),YQ=a("a"),odr=o("Data2VecVisionForImageClassification"),rdr=o(" (Data2VecVision model)"),tdr=l(),Ys=a("li"),lve=a("strong"),adr=o("deit"),ndr=o(" \u2014 "),KQ=a("a"),sdr=o("DeiTForImageClassification"),ldr=o(" or "),ZQ=a("a"),idr=o("DeiTForImageClassificationWithTeacher"),ddr=o(" (DeiT model)"),cdr=l(),R6=a("li"),ive=a("strong"),fdr=o("imagegpt"),mdr=o(" \u2014 "),eH=a("a"),gdr=o("ImageGPTForImageClassification"),hdr=o(" (ImageGPT model)"),pdr=l(),Ks=a("li"),dve=a("strong"),_dr=o("levit"),udr=o(" \u2014 "),oH=a("a"),bdr=o("LevitForImageClassification"),vdr=o(" or "),rH=a("a"),Fdr=o("LevitForImageClassificationWithTeacher"),Tdr=o(" (LeViT model)"),Mdr=l(),P6=a("li"),cve=a("strong"),Edr=o("mobilevit"),Cdr=o(" \u2014 "),tH=a("a"),wdr=o("MobileViTForImageClassification"),Adr=o(" (MobileViT model)"),Ldr=l(),Ft=a("li"),fve=a("strong"),ydr=o("perceiver"),xdr=o(" \u2014 "),aH=a("a"),$dr=o("PerceiverForImageClassificationLearned"),kdr=o(" or "),nH=a("a"),Sdr=o("PerceiverForImageClassificationFourier"),Rdr=o(" or "),sH=a("a"),Pdr=o("PerceiverForImageClassificationConvProcessing"),Bdr=o(" (Perceiver model)"),Idr=l(),B6=a("li"),mve=a("strong"),Ndr=o("poolformer"),qdr=o(" \u2014 "),lH=a("a"),jdr=o("PoolFormerForImageClassification"),Ddr=o(" (PoolFormer model)"),Gdr=l(),I6=a("li"),gve=a("strong"),Odr=o("regnet"),Vdr=o(" \u2014 "),iH=a("a"),Xdr=o("RegNetForImageClassification"),zdr=o(" (RegNet model)"),Wdr=l(),N6=a("li"),hve=a("strong"),Qdr=o("resnet"),Hdr=o(" \u2014 "),dH=a("a"),Udr=o("ResNetForImageClassification"),Jdr=o(" (ResNet model)"),Ydr=l(),q6=a("li"),pve=a("strong"),Kdr=o("segformer"),Zdr=o(" \u2014 "),cH=a("a"),ecr=o("SegformerForImageClassification"),ocr=o(" (SegFormer model)"),rcr=l(),j6=a("li"),_ve=a("strong"),tcr=o("swin"),acr=o(" \u2014 "),fH=a("a"),ncr=o("SwinForImageClassification"),scr=o(" (Swin Transformer model)"),lcr=l(),D6=a("li"),uve=a("strong"),icr=o("swinv2"),dcr=o(" \u2014 "),mH=a("a"),ccr=o("Swinv2ForImageClassification"),fcr=o(" (Swin Transformer V2 model)"),mcr=l(),G6=a("li"),bve=a("strong"),gcr=o("van"),hcr=o(" \u2014 "),gH=a("a"),pcr=o("VanForImageClassification"),_cr=o(" (VAN model)"),ucr=l(),O6=a("li"),vve=a("strong"),bcr=o("vit"),vcr=o(" \u2014 "),hH=a("a"),Fcr=o("ViTForImageClassification"),Tcr=o(" (ViT model)"),Mcr=l(),V6=a("p"),Ecr=o("The model is set in evaluation mode by default using "),Fve=a("code"),Ccr=o("model.eval()"),wcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=a("code"),Acr=o("model.train()"),Lcr=l(),F(X6.$$.fragment),Wze=l(),Ad=a("h2"),z6=a("a"),Mve=a("span"),F(Zy.$$.fragment),ycr=l(),Eve=a("span"),xcr=o("AutoModelForVision2Seq"),Qze=l(),Xo=a("div"),F(e9.$$.fragment),$cr=l(),Ld=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pH=a("a"),Scr=o("from_pretrained()"),Rcr=o(" class method or the "),_H=a("a"),Pcr=o("from_config()"),Bcr=o(` class
method.`),Icr=l(),o9=a("p"),Ncr=o("This class cannot be instantiated directly using "),Cve=a("code"),qcr=o("__init__()"),jcr=o(" (throws an error)."),Dcr=l(),Tt=a("div"),F(r9.$$.fragment),Gcr=l(),wve=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Vcr=l(),yd=a("p"),Xcr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),zcr=o("not"),Wcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),Qcr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Ucr=l(),F(W6.$$.fragment),Jcr=l(),co=a("div"),F(t9.$$.fragment),Ycr=l(),Lve=a("p"),Kcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zcr=l(),Ha=a("p"),efr=o("The model class to instantiate is selected based on the "),yve=a("code"),ofr=o("model_type"),rfr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),tfr=o("pretrained_model_name_or_path"),afr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(":"),lfr=l(),kve=a("ul"),Q6=a("li"),Sve=a("strong"),ifr=o("vision-encoder-decoder"),dfr=o(" \u2014 "),bH=a("a"),cfr=o("VisionEncoderDecoderModel"),ffr=o(" (Vision Encoder decoder model)"),mfr=l(),H6=a("p"),gfr=o("The model is set in evaluation mode by default using "),Rve=a("code"),hfr=o("model.eval()"),pfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),_fr=o("model.train()"),ufr=l(),F(U6.$$.fragment),Hze=l(),xd=a("h2"),J6=a("a"),Bve=a("span"),F(a9.$$.fragment),bfr=l(),Ive=a("span"),vfr=o("AutoModelForVisualQuestionAnswering"),Uze=l(),zo=a("div"),F(n9.$$.fragment),Ffr=l(),$d=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),vH=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),FH=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),s9=a("p"),Lfr=o("This class cannot be instantiated directly using "),Nve=a("code"),yfr=o("__init__()"),xfr=o(" (throws an error)."),$fr=l(),Mt=a("div"),F(l9.$$.fragment),kfr=l(),qve=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Rfr=l(),kd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),Bfr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),Nfr=o("from_pretrained()"),qfr=o(" to load the model weights."),jfr=l(),F(Y6.$$.fragment),Dfr=l(),fo=a("div"),F(i9.$$.fragment),Gfr=l(),Dve=a("p"),Ofr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Vfr=l(),Ua=a("p"),Xfr=o("The model class to instantiate is selected based on the "),Gve=a("code"),zfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),Qfr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(":"),Yfr=l(),Xve=a("ul"),K6=a("li"),zve=a("strong"),Kfr=o("vilt"),Zfr=o(" \u2014 "),MH=a("a"),emr=o("ViltForQuestionAnswering"),omr=o(" (ViLT model)"),rmr=l(),Z6=a("p"),tmr=o("The model is set in evaluation mode by default using "),Wve=a("code"),amr=o("model.eval()"),nmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),smr=o("model.train()"),lmr=l(),F(eT.$$.fragment),Jze=l(),Sd=a("h2"),oT=a("a"),Hve=a("span"),F(d9.$$.fragment),imr=l(),Uve=a("span"),dmr=o("AutoModelForAudioClassification"),Yze=l(),Wo=a("div"),F(c9.$$.fragment),cmr=l(),Rd=a("p"),fmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),EH=a("a"),mmr=o("from_pretrained()"),gmr=o(" class method or the "),CH=a("a"),hmr=o("from_config()"),pmr=o(` class
method.`),_mr=l(),f9=a("p"),umr=o("This class cannot be instantiated directly using "),Jve=a("code"),bmr=o("__init__()"),vmr=o(" (throws an error)."),Fmr=l(),Et=a("div"),F(m9.$$.fragment),Tmr=l(),Yve=a("p"),Mmr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Emr=l(),Pd=a("p"),Cmr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),wmr=o("not"),Amr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),Lmr=o("from_pretrained()"),ymr=o(" to load the model weights."),xmr=l(),F(rT.$$.fragment),$mr=l(),mo=a("div"),F(g9.$$.fragment),kmr=l(),Zve=a("p"),Smr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Rmr=l(),Ja=a("p"),Pmr=o("The model class to instantiate is selected based on the "),e3e=a("code"),Bmr=o("model_type"),Imr=o(` property of the config object (either
passed as an argument or loaded from `),o3e=a("code"),Nmr=o("pretrained_model_name_or_path"),qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=a("code"),jmr=o("pretrained_model_name_or_path"),Dmr=o(":"),Gmr=l(),Pe=a("ul"),tT=a("li"),t3e=a("strong"),Omr=o("data2vec-audio"),Vmr=o(" \u2014 "),AH=a("a"),Xmr=o("Data2VecAudioForSequenceClassification"),zmr=o(" (Data2VecAudio model)"),Wmr=l(),aT=a("li"),a3e=a("strong"),Qmr=o("hubert"),Hmr=o(" \u2014 "),LH=a("a"),Umr=o("HubertForSequenceClassification"),Jmr=o(" (Hubert model)"),Ymr=l(),nT=a("li"),n3e=a("strong"),Kmr=o("sew"),Zmr=o(" \u2014 "),yH=a("a"),egr=o("SEWForSequenceClassification"),ogr=o(" (SEW model)"),rgr=l(),sT=a("li"),s3e=a("strong"),tgr=o("sew-d"),agr=o(" \u2014 "),xH=a("a"),ngr=o("SEWDForSequenceClassification"),sgr=o(" (SEW-D model)"),lgr=l(),lT=a("li"),l3e=a("strong"),igr=o("unispeech"),dgr=o(" \u2014 "),$H=a("a"),cgr=o("UniSpeechForSequenceClassification"),fgr=o(" (UniSpeech model)"),mgr=l(),iT=a("li"),i3e=a("strong"),ggr=o("unispeech-sat"),hgr=o(" \u2014 "),kH=a("a"),pgr=o("UniSpeechSatForSequenceClassification"),_gr=o(" (UniSpeechSat model)"),ugr=l(),dT=a("li"),d3e=a("strong"),bgr=o("wav2vec2"),vgr=o(" \u2014 "),SH=a("a"),Fgr=o("Wav2Vec2ForSequenceClassification"),Tgr=o(" (Wav2Vec2 model)"),Mgr=l(),cT=a("li"),c3e=a("strong"),Egr=o("wav2vec2-conformer"),Cgr=o(" \u2014 "),RH=a("a"),wgr=o("Wav2Vec2ConformerForSequenceClassification"),Agr=o(" (Wav2Vec2-Conformer model)"),Lgr=l(),fT=a("li"),f3e=a("strong"),ygr=o("wavlm"),xgr=o(" \u2014 "),PH=a("a"),$gr=o("WavLMForSequenceClassification"),kgr=o(" (WavLM model)"),Sgr=l(),mT=a("p"),Rgr=o("The model is set in evaluation mode by default using "),m3e=a("code"),Pgr=o("model.eval()"),Bgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=a("code"),Igr=o("model.train()"),Ngr=l(),F(gT.$$.fragment),Kze=l(),Bd=a("h2"),hT=a("a"),h3e=a("span"),F(h9.$$.fragment),qgr=l(),p3e=a("span"),jgr=o("AutoModelForAudioFrameClassification"),Zze=l(),Qo=a("div"),F(p9.$$.fragment),Dgr=l(),Id=a("p"),Ggr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),BH=a("a"),Ogr=o("from_pretrained()"),Vgr=o(" class method or the "),IH=a("a"),Xgr=o("from_config()"),zgr=o(` class
method.`),Wgr=l(),_9=a("p"),Qgr=o("This class cannot be instantiated directly using "),_3e=a("code"),Hgr=o("__init__()"),Ugr=o(" (throws an error)."),Jgr=l(),Ct=a("div"),F(u9.$$.fragment),Ygr=l(),u3e=a("p"),Kgr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zgr=l(),Nd=a("p"),ehr=o(`Note:
Loading a model from its configuration file does `),b3e=a("strong"),ohr=o("not"),rhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),thr=o("from_pretrained()"),ahr=o(" to load the model weights."),nhr=l(),F(pT.$$.fragment),shr=l(),go=a("div"),F(b9.$$.fragment),lhr=l(),v3e=a("p"),ihr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dhr=l(),Ya=a("p"),chr=o("The model class to instantiate is selected based on the "),F3e=a("code"),fhr=o("model_type"),mhr=o(` property of the config object (either
passed as an argument or loaded from `),T3e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=a("code"),phr=o("pretrained_model_name_or_path"),_hr=o(":"),uhr=l(),rt=a("ul"),_T=a("li"),E3e=a("strong"),bhr=o("data2vec-audio"),vhr=o(" \u2014 "),qH=a("a"),Fhr=o("Data2VecAudioForAudioFrameClassification"),Thr=o(" (Data2VecAudio model)"),Mhr=l(),uT=a("li"),C3e=a("strong"),Ehr=o("unispeech-sat"),Chr=o(" \u2014 "),jH=a("a"),whr=o("UniSpeechSatForAudioFrameClassification"),Ahr=o(" (UniSpeechSat model)"),Lhr=l(),bT=a("li"),w3e=a("strong"),yhr=o("wav2vec2"),xhr=o(" \u2014 "),DH=a("a"),$hr=o("Wav2Vec2ForAudioFrameClassification"),khr=o(" (Wav2Vec2 model)"),Shr=l(),vT=a("li"),A3e=a("strong"),Rhr=o("wav2vec2-conformer"),Phr=o(" \u2014 "),GH=a("a"),Bhr=o("Wav2Vec2ConformerForAudioFrameClassification"),Ihr=o(" (Wav2Vec2-Conformer model)"),Nhr=l(),FT=a("li"),L3e=a("strong"),qhr=o("wavlm"),jhr=o(" \u2014 "),OH=a("a"),Dhr=o("WavLMForAudioFrameClassification"),Ghr=o(" (WavLM model)"),Ohr=l(),TT=a("p"),Vhr=o("The model is set in evaluation mode by default using "),y3e=a("code"),Xhr=o("model.eval()"),zhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x3e=a("code"),Whr=o("model.train()"),Qhr=l(),F(MT.$$.fragment),eWe=l(),qd=a("h2"),ET=a("a"),$3e=a("span"),F(v9.$$.fragment),Hhr=l(),k3e=a("span"),Uhr=o("AutoModelForCTC"),oWe=l(),Ho=a("div"),F(F9.$$.fragment),Jhr=l(),jd=a("p"),Yhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VH=a("a"),Khr=o("from_pretrained()"),Zhr=o(" class method or the "),XH=a("a"),epr=o("from_config()"),opr=o(` class
method.`),rpr=l(),T9=a("p"),tpr=o("This class cannot be instantiated directly using "),S3e=a("code"),apr=o("__init__()"),npr=o(" (throws an error)."),spr=l(),wt=a("div"),F(M9.$$.fragment),lpr=l(),R3e=a("p"),ipr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dpr=l(),Dd=a("p"),cpr=o(`Note:
Loading a model from its configuration file does `),P3e=a("strong"),fpr=o("not"),mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),gpr=o("from_pretrained()"),hpr=o(" to load the model weights."),ppr=l(),F(CT.$$.fragment),_pr=l(),ho=a("div"),F(E9.$$.fragment),upr=l(),B3e=a("p"),bpr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vpr=l(),Ka=a("p"),Fpr=o("The model class to instantiate is selected based on the "),I3e=a("code"),Tpr=o("model_type"),Mpr=o(` property of the config object (either
passed as an argument or loaded from `),N3e=a("code"),Epr=o("pretrained_model_name_or_path"),Cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(":"),Lpr=l(),Le=a("ul"),wT=a("li"),j3e=a("strong"),ypr=o("data2vec-audio"),xpr=o(" \u2014 "),WH=a("a"),$pr=o("Data2VecAudioForCTC"),kpr=o(" (Data2VecAudio model)"),Spr=l(),AT=a("li"),D3e=a("strong"),Rpr=o("hubert"),Ppr=o(" \u2014 "),QH=a("a"),Bpr=o("HubertForCTC"),Ipr=o(" (Hubert model)"),Npr=l(),LT=a("li"),G3e=a("strong"),qpr=o("mctct"),jpr=o(" \u2014 "),HH=a("a"),Dpr=o("MCTCTForCTC"),Gpr=o(" (M-CTC-T model)"),Opr=l(),yT=a("li"),O3e=a("strong"),Vpr=o("sew"),Xpr=o(" \u2014 "),UH=a("a"),zpr=o("SEWForCTC"),Wpr=o(" (SEW model)"),Qpr=l(),xT=a("li"),V3e=a("strong"),Hpr=o("sew-d"),Upr=o(" \u2014 "),JH=a("a"),Jpr=o("SEWDForCTC"),Ypr=o(" (SEW-D model)"),Kpr=l(),$T=a("li"),X3e=a("strong"),Zpr=o("unispeech"),e_r=o(" \u2014 "),YH=a("a"),o_r=o("UniSpeechForCTC"),r_r=o(" (UniSpeech model)"),t_r=l(),kT=a("li"),z3e=a("strong"),a_r=o("unispeech-sat"),n_r=o(" \u2014 "),KH=a("a"),s_r=o("UniSpeechSatForCTC"),l_r=o(" (UniSpeechSat model)"),i_r=l(),ST=a("li"),W3e=a("strong"),d_r=o("wav2vec2"),c_r=o(" \u2014 "),ZH=a("a"),f_r=o("Wav2Vec2ForCTC"),m_r=o(" (Wav2Vec2 model)"),g_r=l(),RT=a("li"),Q3e=a("strong"),h_r=o("wav2vec2-conformer"),p_r=o(" \u2014 "),eU=a("a"),__r=o("Wav2Vec2ConformerForCTC"),u_r=o(" (Wav2Vec2-Conformer model)"),b_r=l(),PT=a("li"),H3e=a("strong"),v_r=o("wavlm"),F_r=o(" \u2014 "),oU=a("a"),T_r=o("WavLMForCTC"),M_r=o(" (WavLM model)"),E_r=l(),BT=a("p"),C_r=o("The model is set in evaluation mode by default using "),U3e=a("code"),w_r=o("model.eval()"),A_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J3e=a("code"),L_r=o("model.train()"),y_r=l(),F(IT.$$.fragment),rWe=l(),Gd=a("h2"),NT=a("a"),Y3e=a("span"),F(C9.$$.fragment),x_r=l(),K3e=a("span"),$_r=o("AutoModelForSpeechSeq2Seq"),tWe=l(),Uo=a("div"),F(w9.$$.fragment),k_r=l(),Od=a("p"),S_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rU=a("a"),R_r=o("from_pretrained()"),P_r=o(" class method or the "),tU=a("a"),B_r=o("from_config()"),I_r=o(` class
method.`),N_r=l(),A9=a("p"),q_r=o("This class cannot be instantiated directly using "),Z3e=a("code"),j_r=o("__init__()"),D_r=o(" (throws an error)."),G_r=l(),At=a("div"),F(L9.$$.fragment),O_r=l(),eFe=a("p"),V_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),X_r=l(),Vd=a("p"),z_r=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),W_r=o("not"),Q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),H_r=o("from_pretrained()"),U_r=o(" to load the model weights."),J_r=l(),F(qT.$$.fragment),Y_r=l(),po=a("div"),F(y9.$$.fragment),K_r=l(),rFe=a("p"),Z_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eur=l(),Za=a("p"),our=o("The model class to instantiate is selected based on the "),tFe=a("code"),rur=o("model_type"),tur=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),sur=o("pretrained_model_name_or_path"),lur=o(":"),iur=l(),x9=a("ul"),jT=a("li"),sFe=a("strong"),dur=o("speech-encoder-decoder"),cur=o(" \u2014 "),nU=a("a"),fur=o("SpeechEncoderDecoderModel"),mur=o(" (Speech Encoder decoder model)"),gur=l(),DT=a("li"),lFe=a("strong"),hur=o("speech_to_text"),pur=o(" \u2014 "),sU=a("a"),_ur=o("Speech2TextForConditionalGeneration"),uur=o(" (Speech2Text model)"),bur=l(),GT=a("p"),vur=o("The model is set in evaluation mode by default using "),iFe=a("code"),Fur=o("model.eval()"),Tur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dFe=a("code"),Mur=o("model.train()"),Eur=l(),F(OT.$$.fragment),aWe=l(),Xd=a("h2"),VT=a("a"),cFe=a("span"),F($9.$$.fragment),Cur=l(),fFe=a("span"),wur=o("AutoModelForAudioXVector"),nWe=l(),Jo=a("div"),F(k9.$$.fragment),Aur=l(),zd=a("p"),Lur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lU=a("a"),yur=o("from_pretrained()"),xur=o(" class method or the "),iU=a("a"),$ur=o("from_config()"),kur=o(` class
method.`),Sur=l(),S9=a("p"),Rur=o("This class cannot be instantiated directly using "),mFe=a("code"),Pur=o("__init__()"),Bur=o(" (throws an error)."),Iur=l(),Lt=a("div"),F(R9.$$.fragment),Nur=l(),gFe=a("p"),qur=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jur=l(),Wd=a("p"),Dur=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),Gur=o("not"),Our=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),Vur=o("from_pretrained()"),Xur=o(" to load the model weights."),zur=l(),F(XT.$$.fragment),Wur=l(),_o=a("div"),F(P9.$$.fragment),Qur=l(),pFe=a("p"),Hur=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Uur=l(),en=a("p"),Jur=o("The model class to instantiate is selected based on the "),_Fe=a("code"),Yur=o("model_type"),Kur=o(` property of the config object (either
passed as an argument or loaded from `),uFe=a("code"),Zur=o("pretrained_model_name_or_path"),e1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),o1r=o("pretrained_model_name_or_path"),r1r=o(":"),t1r=l(),tt=a("ul"),zT=a("li"),vFe=a("strong"),a1r=o("data2vec-audio"),n1r=o(" \u2014 "),cU=a("a"),s1r=o("Data2VecAudioForXVector"),l1r=o(" (Data2VecAudio model)"),i1r=l(),WT=a("li"),FFe=a("strong"),d1r=o("unispeech-sat"),c1r=o(" \u2014 "),fU=a("a"),f1r=o("UniSpeechSatForXVector"),m1r=o(" (UniSpeechSat model)"),g1r=l(),QT=a("li"),TFe=a("strong"),h1r=o("wav2vec2"),p1r=o(" \u2014 "),mU=a("a"),_1r=o("Wav2Vec2ForXVector"),u1r=o(" (Wav2Vec2 model)"),b1r=l(),HT=a("li"),MFe=a("strong"),v1r=o("wav2vec2-conformer"),F1r=o(" \u2014 "),gU=a("a"),T1r=o("Wav2Vec2ConformerForXVector"),M1r=o(" (Wav2Vec2-Conformer model)"),E1r=l(),UT=a("li"),EFe=a("strong"),C1r=o("wavlm"),w1r=o(" \u2014 "),hU=a("a"),A1r=o("WavLMForXVector"),L1r=o(" (WavLM model)"),y1r=l(),JT=a("p"),x1r=o("The model is set in evaluation mode by default using "),CFe=a("code"),$1r=o("model.eval()"),k1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=a("code"),S1r=o("model.train()"),R1r=l(),F(YT.$$.fragment),sWe=l(),Qd=a("h2"),KT=a("a"),AFe=a("span"),F(B9.$$.fragment),P1r=l(),LFe=a("span"),B1r=o("AutoModelForMaskedImageModeling"),lWe=l(),Yo=a("div"),F(I9.$$.fragment),I1r=l(),Hd=a("p"),N1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pU=a("a"),q1r=o("from_pretrained()"),j1r=o(" class method or the "),_U=a("a"),D1r=o("from_config()"),G1r=o(` class
method.`),O1r=l(),N9=a("p"),V1r=o("This class cannot be instantiated directly using "),yFe=a("code"),X1r=o("__init__()"),z1r=o(" (throws an error)."),W1r=l(),yt=a("div"),F(q9.$$.fragment),Q1r=l(),xFe=a("p"),H1r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),U1r=l(),Ud=a("p"),J1r=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),Y1r=o("not"),K1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),Z1r=o("from_pretrained()"),e2r=o(" to load the model weights."),o2r=l(),F(ZT.$$.fragment),r2r=l(),uo=a("div"),F(j9.$$.fragment),t2r=l(),kFe=a("p"),a2r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),n2r=l(),on=a("p"),s2r=o("The model class to instantiate is selected based on the "),SFe=a("code"),l2r=o("model_type"),i2r=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),d2r=o("pretrained_model_name_or_path"),c2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),f2r=o("pretrained_model_name_or_path"),m2r=o(":"),g2r=l(),rn=a("ul"),e8=a("li"),BFe=a("strong"),h2r=o("deit"),p2r=o(" \u2014 "),bU=a("a"),_2r=o("DeiTForMaskedImageModeling"),u2r=o(" (DeiT model)"),b2r=l(),o8=a("li"),IFe=a("strong"),v2r=o("swin"),F2r=o(" \u2014 "),vU=a("a"),T2r=o("SwinForMaskedImageModeling"),M2r=o(" (Swin Transformer model)"),E2r=l(),r8=a("li"),NFe=a("strong"),C2r=o("swinv2"),w2r=o(" \u2014 "),FU=a("a"),A2r=o("Swinv2ForMaskedImageModeling"),L2r=o(" (Swin Transformer V2 model)"),y2r=l(),t8=a("li"),qFe=a("strong"),x2r=o("vit"),$2r=o(" \u2014 "),TU=a("a"),k2r=o("ViTForMaskedImageModeling"),S2r=o(" (ViT model)"),R2r=l(),a8=a("p"),P2r=o("The model is set in evaluation mode by default using "),jFe=a("code"),B2r=o("model.eval()"),I2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DFe=a("code"),N2r=o("model.train()"),q2r=l(),F(n8.$$.fragment),iWe=l(),Jd=a("h2"),s8=a("a"),GFe=a("span"),F(D9.$$.fragment),j2r=l(),OFe=a("span"),D2r=o("AutoModelForObjectDetection"),dWe=l(),Ko=a("div"),F(G9.$$.fragment),G2r=l(),Yd=a("p"),O2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MU=a("a"),V2r=o("from_pretrained()"),X2r=o(" class method or the "),EU=a("a"),z2r=o("from_config()"),W2r=o(` class
method.`),Q2r=l(),O9=a("p"),H2r=o("This class cannot be instantiated directly using "),VFe=a("code"),U2r=o("__init__()"),J2r=o(" (throws an error)."),Y2r=l(),xt=a("div"),F(V9.$$.fragment),K2r=l(),XFe=a("p"),Z2r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ebr=l(),Kd=a("p"),obr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),rbr=o("not"),tbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),abr=o("from_pretrained()"),nbr=o(" to load the model weights."),sbr=l(),F(l8.$$.fragment),lbr=l(),bo=a("div"),F(X9.$$.fragment),ibr=l(),WFe=a("p"),dbr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),cbr=l(),tn=a("p"),fbr=o("The model class to instantiate is selected based on the "),QFe=a("code"),mbr=o("model_type"),gbr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),_br=o("pretrained_model_name_or_path"),ubr=o(":"),bbr=l(),z9=a("ul"),i8=a("li"),JFe=a("strong"),vbr=o("detr"),Fbr=o(" \u2014 "),wU=a("a"),Tbr=o("DetrForObjectDetection"),Mbr=o(" (DETR model)"),Ebr=l(),d8=a("li"),YFe=a("strong"),Cbr=o("yolos"),wbr=o(" \u2014 "),AU=a("a"),Abr=o("YolosForObjectDetection"),Lbr=o(" (YOLOS model)"),ybr=l(),c8=a("p"),xbr=o("The model is set in evaluation mode by default using "),KFe=a("code"),$br=o("model.eval()"),kbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZFe=a("code"),Sbr=o("model.train()"),Rbr=l(),F(f8.$$.fragment),cWe=l(),Zd=a("h2"),m8=a("a"),e6e=a("span"),F(W9.$$.fragment),Pbr=l(),o6e=a("span"),Bbr=o("AutoModelForImageSegmentation"),fWe=l(),Zo=a("div"),F(Q9.$$.fragment),Ibr=l(),ec=a("p"),Nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LU=a("a"),qbr=o("from_pretrained()"),jbr=o(" class method or the "),yU=a("a"),Dbr=o("from_config()"),Gbr=o(` class
method.`),Obr=l(),H9=a("p"),Vbr=o("This class cannot be instantiated directly using "),r6e=a("code"),Xbr=o("__init__()"),zbr=o(" (throws an error)."),Wbr=l(),$t=a("div"),F(U9.$$.fragment),Qbr=l(),t6e=a("p"),Hbr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ubr=l(),oc=a("p"),Jbr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),Ybr=o("not"),Kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),Zbr=o("from_pretrained()"),evr=o(" to load the model weights."),ovr=l(),F(g8.$$.fragment),rvr=l(),vo=a("div"),F(J9.$$.fragment),tvr=l(),n6e=a("p"),avr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nvr=l(),an=a("p"),svr=o("The model class to instantiate is selected based on the "),s6e=a("code"),lvr=o("model_type"),ivr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),fvr=o("pretrained_model_name_or_path"),mvr=o(":"),gvr=l(),d6e=a("ul"),h8=a("li"),c6e=a("strong"),hvr=o("detr"),pvr=o(" \u2014 "),$U=a("a"),_vr=o("DetrForSegmentation"),uvr=o(" (DETR model)"),bvr=l(),p8=a("p"),vvr=o("The model is set in evaluation mode by default using "),f6e=a("code"),Fvr=o("model.eval()"),Tvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m6e=a("code"),Mvr=o("model.train()"),Evr=l(),F(_8.$$.fragment),mWe=l(),rc=a("h2"),u8=a("a"),g6e=a("span"),F(Y9.$$.fragment),Cvr=l(),h6e=a("span"),wvr=o("AutoModelForSemanticSegmentation"),gWe=l(),er=a("div"),F(K9.$$.fragment),Avr=l(),tc=a("p"),Lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kU=a("a"),yvr=o("from_pretrained()"),xvr=o(" class method or the "),SU=a("a"),$vr=o("from_config()"),kvr=o(` class
method.`),Svr=l(),Z9=a("p"),Rvr=o("This class cannot be instantiated directly using "),p6e=a("code"),Pvr=o("__init__()"),Bvr=o(" (throws an error)."),Ivr=l(),kt=a("div"),F(ex.$$.fragment),Nvr=l(),_6e=a("p"),qvr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),jvr=l(),ac=a("p"),Dvr=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),Gvr=o("not"),Ovr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),Vvr=o("from_pretrained()"),Xvr=o(" to load the model weights."),zvr=l(),F(b8.$$.fragment),Wvr=l(),Fo=a("div"),F(ox.$$.fragment),Qvr=l(),b6e=a("p"),Hvr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Uvr=l(),nn=a("p"),Jvr=o("The model class to instantiate is selected based on the "),v6e=a("code"),Yvr=o("model_type"),Kvr=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),Zvr=o("pretrained_model_name_or_path"),e3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(":"),t3r=l(),at=a("ul"),v8=a("li"),M6e=a("strong"),a3r=o("beit"),n3r=o(" \u2014 "),PU=a("a"),s3r=o("BeitForSemanticSegmentation"),l3r=o(" (BEiT model)"),i3r=l(),F8=a("li"),E6e=a("strong"),d3r=o("data2vec-vision"),c3r=o(" \u2014 "),BU=a("a"),f3r=o("Data2VecVisionForSemanticSegmentation"),m3r=o(" (Data2VecVision model)"),g3r=l(),T8=a("li"),C6e=a("strong"),h3r=o("dpt"),p3r=o(" \u2014 "),IU=a("a"),_3r=o("DPTForSemanticSegmentation"),u3r=o(" (DPT model)"),b3r=l(),M8=a("li"),w6e=a("strong"),v3r=o("mobilevit"),F3r=o(" \u2014 "),NU=a("a"),T3r=o("MobileViTForSemanticSegmentation"),M3r=o(" (MobileViT model)"),E3r=l(),E8=a("li"),A6e=a("strong"),C3r=o("segformer"),w3r=o(" \u2014 "),qU=a("a"),A3r=o("SegformerForSemanticSegmentation"),L3r=o(" (SegFormer model)"),y3r=l(),C8=a("p"),x3r=o("The model is set in evaluation mode by default using "),L6e=a("code"),$3r=o("model.eval()"),k3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y6e=a("code"),S3r=o("model.train()"),R3r=l(),F(w8.$$.fragment),hWe=l(),nc=a("h2"),A8=a("a"),x6e=a("span"),F(rx.$$.fragment),P3r=l(),$6e=a("span"),B3r=o("AutoModelForInstanceSegmentation"),pWe=l(),or=a("div"),F(tx.$$.fragment),I3r=l(),sc=a("p"),N3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jU=a("a"),q3r=o("from_pretrained()"),j3r=o(" class method or the "),DU=a("a"),D3r=o("from_config()"),G3r=o(` class
method.`),O3r=l(),ax=a("p"),V3r=o("This class cannot be instantiated directly using "),k6e=a("code"),X3r=o("__init__()"),z3r=o(" (throws an error)."),W3r=l(),St=a("div"),F(nx.$$.fragment),Q3r=l(),S6e=a("p"),H3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),U3r=l(),lc=a("p"),J3r=o(`Note:
Loading a model from its configuration file does `),R6e=a("strong"),Y3r=o("not"),K3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),Z3r=o("from_pretrained()"),eFr=o(" to load the model weights."),oFr=l(),F(L8.$$.fragment),rFr=l(),To=a("div"),F(sx.$$.fragment),tFr=l(),P6e=a("p"),aFr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),nFr=l(),sn=a("p"),sFr=o("The model class to instantiate is selected based on the "),B6e=a("code"),lFr=o("model_type"),iFr=o(` property of the config object (either
passed as an argument or loaded from `),I6e=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(":"),gFr=l(),q6e=a("ul"),y8=a("li"),j6e=a("strong"),hFr=o("maskformer"),pFr=o(" \u2014 "),OU=a("a"),_Fr=o("MaskFormerForInstanceSegmentation"),uFr=o(" (MaskFormer model)"),bFr=l(),x8=a("p"),vFr=o("The model is set in evaluation mode by default using "),D6e=a("code"),FFr=o("model.eval()"),TFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G6e=a("code"),MFr=o("model.train()"),EFr=l(),F($8.$$.fragment),_We=l(),ic=a("h2"),k8=a("a"),O6e=a("span"),F(lx.$$.fragment),CFr=l(),V6e=a("span"),wFr=o("TFAutoModel"),uWe=l(),rr=a("div"),F(ix.$$.fragment),AFr=l(),dc=a("p"),LFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VU=a("a"),yFr=o("from_pretrained()"),xFr=o(" class method or the "),XU=a("a"),$Fr=o("from_config()"),kFr=o(` class
method.`),SFr=l(),dx=a("p"),RFr=o("This class cannot be instantiated directly using "),X6e=a("code"),PFr=o("__init__()"),BFr=o(" (throws an error)."),IFr=l(),Rt=a("div"),F(cx.$$.fragment),NFr=l(),z6e=a("p"),qFr=o("Instantiates one of the base model classes of the library from a configuration."),jFr=l(),cc=a("p"),DFr=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),GFr=o("not"),OFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),VFr=o("from_pretrained()"),XFr=o(" to load the model weights."),zFr=l(),F(S8.$$.fragment),WFr=l(),$r=a("div"),F(fx.$$.fragment),QFr=l(),Q6e=a("p"),HFr=o("Instantiate one of the base model classes of the library from a pretrained model."),UFr=l(),ln=a("p"),JFr=o("The model class to instantiate is selected based on the "),H6e=a("code"),YFr=o("model_type"),KFr=o(` property of the config object (either
passed as an argument or loaded from `),U6e=a("code"),ZFr=o("pretrained_model_name_or_path"),e6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),o6r=o("pretrained_model_name_or_path"),r6r=o(":"),t6r=l(),I=a("ul"),R8=a("li"),Y6e=a("strong"),a6r=o("albert"),n6r=o(" \u2014 "),WU=a("a"),s6r=o("TFAlbertModel"),l6r=o(" (ALBERT model)"),i6r=l(),P8=a("li"),K6e=a("strong"),d6r=o("bart"),c6r=o(" \u2014 "),QU=a("a"),f6r=o("TFBartModel"),m6r=o(" (BART model)"),g6r=l(),B8=a("li"),Z6e=a("strong"),h6r=o("bert"),p6r=o(" \u2014 "),HU=a("a"),_6r=o("TFBertModel"),u6r=o(" (BERT model)"),b6r=l(),I8=a("li"),eTe=a("strong"),v6r=o("blenderbot"),F6r=o(" \u2014 "),UU=a("a"),T6r=o("TFBlenderbotModel"),M6r=o(" (Blenderbot model)"),E6r=l(),N8=a("li"),oTe=a("strong"),C6r=o("blenderbot-small"),w6r=o(" \u2014 "),JU=a("a"),A6r=o("TFBlenderbotSmallModel"),L6r=o(" (BlenderbotSmall model)"),y6r=l(),q8=a("li"),rTe=a("strong"),x6r=o("camembert"),$6r=o(" \u2014 "),YU=a("a"),k6r=o("TFCamembertModel"),S6r=o(" (CamemBERT model)"),R6r=l(),j8=a("li"),tTe=a("strong"),P6r=o("clip"),B6r=o(" \u2014 "),KU=a("a"),I6r=o("TFCLIPModel"),N6r=o(" (CLIP model)"),q6r=l(),D8=a("li"),aTe=a("strong"),j6r=o("convbert"),D6r=o(" \u2014 "),ZU=a("a"),G6r=o("TFConvBertModel"),O6r=o(" (ConvBERT model)"),V6r=l(),G8=a("li"),nTe=a("strong"),X6r=o("convnext"),z6r=o(" \u2014 "),eJ=a("a"),W6r=o("TFConvNextModel"),Q6r=o(" (ConvNeXT model)"),H6r=l(),O8=a("li"),sTe=a("strong"),U6r=o("ctrl"),J6r=o(" \u2014 "),oJ=a("a"),Y6r=o("TFCTRLModel"),K6r=o(" (CTRL model)"),Z6r=l(),V8=a("li"),lTe=a("strong"),eTr=o("data2vec-vision"),oTr=o(" \u2014 "),rJ=a("a"),rTr=o("TFData2VecVisionModel"),tTr=o(" (Data2VecVision model)"),aTr=l(),X8=a("li"),iTe=a("strong"),nTr=o("deberta"),sTr=o(" \u2014 "),tJ=a("a"),lTr=o("TFDebertaModel"),iTr=o(" (DeBERTa model)"),dTr=l(),z8=a("li"),dTe=a("strong"),cTr=o("deberta-v2"),fTr=o(" \u2014 "),aJ=a("a"),mTr=o("TFDebertaV2Model"),gTr=o(" (DeBERTa-v2 model)"),hTr=l(),W8=a("li"),cTe=a("strong"),pTr=o("deit"),_Tr=o(" \u2014 "),nJ=a("a"),uTr=o("TFDeiTModel"),bTr=o(" (DeiT model)"),vTr=l(),Q8=a("li"),fTe=a("strong"),FTr=o("distilbert"),TTr=o(" \u2014 "),sJ=a("a"),MTr=o("TFDistilBertModel"),ETr=o(" (DistilBERT model)"),CTr=l(),H8=a("li"),mTe=a("strong"),wTr=o("dpr"),ATr=o(" \u2014 "),lJ=a("a"),LTr=o("TFDPRQuestionEncoder"),yTr=o(" (DPR model)"),xTr=l(),U8=a("li"),gTe=a("strong"),$Tr=o("electra"),kTr=o(" \u2014 "),iJ=a("a"),STr=o("TFElectraModel"),RTr=o(" (ELECTRA model)"),PTr=l(),J8=a("li"),hTe=a("strong"),BTr=o("flaubert"),ITr=o(" \u2014 "),dJ=a("a"),NTr=o("TFFlaubertModel"),qTr=o(" (FlauBERT model)"),jTr=l(),Zs=a("li"),pTe=a("strong"),DTr=o("funnel"),GTr=o(" \u2014 "),cJ=a("a"),OTr=o("TFFunnelModel"),VTr=o(" or "),fJ=a("a"),XTr=o("TFFunnelBaseModel"),zTr=o(" (Funnel Transformer model)"),WTr=l(),Y8=a("li"),_Te=a("strong"),QTr=o("gpt2"),HTr=o(" \u2014 "),mJ=a("a"),UTr=o("TFGPT2Model"),JTr=o(" (OpenAI GPT-2 model)"),YTr=l(),K8=a("li"),uTe=a("strong"),KTr=o("gptj"),ZTr=o(" \u2014 "),gJ=a("a"),e8r=o("TFGPTJModel"),o8r=o(" (GPT-J model)"),r8r=l(),Z8=a("li"),bTe=a("strong"),t8r=o("hubert"),a8r=o(" \u2014 "),hJ=a("a"),n8r=o("TFHubertModel"),s8r=o(" (Hubert model)"),l8r=l(),eM=a("li"),vTe=a("strong"),i8r=o("layoutlm"),d8r=o(" \u2014 "),pJ=a("a"),c8r=o("TFLayoutLMModel"),f8r=o(" (LayoutLM model)"),m8r=l(),oM=a("li"),FTe=a("strong"),g8r=o("led"),h8r=o(" \u2014 "),_J=a("a"),p8r=o("TFLEDModel"),_8r=o(" (LED model)"),u8r=l(),rM=a("li"),TTe=a("strong"),b8r=o("longformer"),v8r=o(" \u2014 "),uJ=a("a"),F8r=o("TFLongformerModel"),T8r=o(" (Longformer model)"),M8r=l(),tM=a("li"),MTe=a("strong"),E8r=o("lxmert"),C8r=o(" \u2014 "),bJ=a("a"),w8r=o("TFLxmertModel"),A8r=o(" (LXMERT model)"),L8r=l(),aM=a("li"),ETe=a("strong"),y8r=o("marian"),x8r=o(" \u2014 "),vJ=a("a"),$8r=o("TFMarianModel"),k8r=o(" (Marian model)"),S8r=l(),nM=a("li"),CTe=a("strong"),R8r=o("mbart"),P8r=o(" \u2014 "),FJ=a("a"),B8r=o("TFMBartModel"),I8r=o(" (mBART model)"),N8r=l(),sM=a("li"),wTe=a("strong"),q8r=o("mobilebert"),j8r=o(" \u2014 "),TJ=a("a"),D8r=o("TFMobileBertModel"),G8r=o(" (MobileBERT model)"),O8r=l(),lM=a("li"),ATe=a("strong"),V8r=o("mpnet"),X8r=o(" \u2014 "),MJ=a("a"),z8r=o("TFMPNetModel"),W8r=o(" (MPNet model)"),Q8r=l(),iM=a("li"),LTe=a("strong"),H8r=o("mt5"),U8r=o(" \u2014 "),EJ=a("a"),J8r=o("TFMT5Model"),Y8r=o(" (MT5 model)"),K8r=l(),dM=a("li"),yTe=a("strong"),Z8r=o("openai-gpt"),eMr=o(" \u2014 "),CJ=a("a"),oMr=o("TFOpenAIGPTModel"),rMr=o(" (OpenAI GPT model)"),tMr=l(),cM=a("li"),xTe=a("strong"),aMr=o("opt"),nMr=o(" \u2014 "),wJ=a("a"),sMr=o("TFOPTModel"),lMr=o(" (OPT model)"),iMr=l(),fM=a("li"),$Te=a("strong"),dMr=o("pegasus"),cMr=o(" \u2014 "),AJ=a("a"),fMr=o("TFPegasusModel"),mMr=o(" (Pegasus model)"),gMr=l(),mM=a("li"),kTe=a("strong"),hMr=o("regnet"),pMr=o(" \u2014 "),LJ=a("a"),_Mr=o("TFRegNetModel"),uMr=o(" (RegNet model)"),bMr=l(),gM=a("li"),STe=a("strong"),vMr=o("rembert"),FMr=o(" \u2014 "),yJ=a("a"),TMr=o("TFRemBertModel"),MMr=o(" (RemBERT model)"),EMr=l(),hM=a("li"),RTe=a("strong"),CMr=o("resnet"),wMr=o(" \u2014 "),xJ=a("a"),AMr=o("TFResNetModel"),LMr=o(" (ResNet model)"),yMr=l(),pM=a("li"),PTe=a("strong"),xMr=o("roberta"),$Mr=o(" \u2014 "),$J=a("a"),kMr=o("TFRobertaModel"),SMr=o(" (RoBERTa model)"),RMr=l(),_M=a("li"),BTe=a("strong"),PMr=o("roformer"),BMr=o(" \u2014 "),kJ=a("a"),IMr=o("TFRoFormerModel"),NMr=o(" (RoFormer model)"),qMr=l(),uM=a("li"),ITe=a("strong"),jMr=o("segformer"),DMr=o(" \u2014 "),SJ=a("a"),GMr=o("TFSegformerModel"),OMr=o(" (SegFormer model)"),VMr=l(),bM=a("li"),NTe=a("strong"),XMr=o("speech_to_text"),zMr=o(" \u2014 "),RJ=a("a"),WMr=o("TFSpeech2TextModel"),QMr=o(" (Speech2Text model)"),HMr=l(),vM=a("li"),qTe=a("strong"),UMr=o("swin"),JMr=o(" \u2014 "),PJ=a("a"),YMr=o("TFSwinModel"),KMr=o(" (Swin Transformer model)"),ZMr=l(),FM=a("li"),jTe=a("strong"),e4r=o("t5"),o4r=o(" \u2014 "),BJ=a("a"),r4r=o("TFT5Model"),t4r=o(" (T5 model)"),a4r=l(),TM=a("li"),DTe=a("strong"),n4r=o("tapas"),s4r=o(" \u2014 "),IJ=a("a"),l4r=o("TFTapasModel"),i4r=o(" (TAPAS model)"),d4r=l(),MM=a("li"),GTe=a("strong"),c4r=o("transfo-xl"),f4r=o(" \u2014 "),NJ=a("a"),m4r=o("TFTransfoXLModel"),g4r=o(" (Transformer-XL model)"),h4r=l(),EM=a("li"),OTe=a("strong"),p4r=o("vit"),_4r=o(" \u2014 "),qJ=a("a"),u4r=o("TFViTModel"),b4r=o(" (ViT model)"),v4r=l(),CM=a("li"),VTe=a("strong"),F4r=o("vit_mae"),T4r=o(" \u2014 "),jJ=a("a"),M4r=o("TFViTMAEModel"),E4r=o(" (ViTMAE model)"),C4r=l(),wM=a("li"),XTe=a("strong"),w4r=o("wav2vec2"),A4r=o(" \u2014 "),DJ=a("a"),L4r=o("TFWav2Vec2Model"),y4r=o(" (Wav2Vec2 model)"),x4r=l(),AM=a("li"),zTe=a("strong"),$4r=o("xlm"),k4r=o(" \u2014 "),GJ=a("a"),S4r=o("TFXLMModel"),R4r=o(" (XLM model)"),P4r=l(),LM=a("li"),WTe=a("strong"),B4r=o("xlm-roberta"),I4r=o(" \u2014 "),OJ=a("a"),N4r=o("TFXLMRobertaModel"),q4r=o(" (XLM-RoBERTa model)"),j4r=l(),yM=a("li"),QTe=a("strong"),D4r=o("xlnet"),G4r=o(" \u2014 "),VJ=a("a"),O4r=o("TFXLNetModel"),V4r=o(" (XLNet model)"),X4r=l(),F(xM.$$.fragment),bWe=l(),fc=a("h2"),$M=a("a"),HTe=a("span"),F(mx.$$.fragment),z4r=l(),UTe=a("span"),W4r=o("TFAutoModelForPreTraining"),vWe=l(),tr=a("div"),F(gx.$$.fragment),Q4r=l(),mc=a("p"),H4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XJ=a("a"),U4r=o("from_pretrained()"),J4r=o(" class method or the "),zJ=a("a"),Y4r=o("from_config()"),K4r=o(` class
method.`),Z4r=l(),hx=a("p"),eEr=o("This class cannot be instantiated directly using "),JTe=a("code"),oEr=o("__init__()"),rEr=o(" (throws an error)."),tEr=l(),Pt=a("div"),F(px.$$.fragment),aEr=l(),YTe=a("p"),nEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sEr=l(),gc=a("p"),lEr=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),iEr=o("not"),dEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),cEr=o("from_pretrained()"),fEr=o(" to load the model weights."),mEr=l(),F(kM.$$.fragment),gEr=l(),kr=a("div"),F(_x.$$.fragment),hEr=l(),ZTe=a("p"),pEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Er=l(),dn=a("p"),uEr=o("The model class to instantiate is selected based on the "),e8e=a("code"),bEr=o("model_type"),vEr=o(` property of the config object (either
passed as an argument or loaded from `),o8e=a("code"),FEr=o("pretrained_model_name_or_path"),TEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=a("code"),MEr=o("pretrained_model_name_or_path"),EEr=o(":"),CEr=l(),se=a("ul"),SM=a("li"),t8e=a("strong"),wEr=o("albert"),AEr=o(" \u2014 "),QJ=a("a"),LEr=o("TFAlbertForPreTraining"),yEr=o(" (ALBERT model)"),xEr=l(),RM=a("li"),a8e=a("strong"),$Er=o("bart"),kEr=o(" \u2014 "),HJ=a("a"),SEr=o("TFBartForConditionalGeneration"),REr=o(" (BART model)"),PEr=l(),PM=a("li"),n8e=a("strong"),BEr=o("bert"),IEr=o(" \u2014 "),UJ=a("a"),NEr=o("TFBertForPreTraining"),qEr=o(" (BERT model)"),jEr=l(),BM=a("li"),s8e=a("strong"),DEr=o("camembert"),GEr=o(" \u2014 "),JJ=a("a"),OEr=o("TFCamembertForMaskedLM"),VEr=o(" (CamemBERT model)"),XEr=l(),IM=a("li"),l8e=a("strong"),zEr=o("ctrl"),WEr=o(" \u2014 "),YJ=a("a"),QEr=o("TFCTRLLMHeadModel"),HEr=o(" (CTRL model)"),UEr=l(),NM=a("li"),i8e=a("strong"),JEr=o("distilbert"),YEr=o(" \u2014 "),KJ=a("a"),KEr=o("TFDistilBertForMaskedLM"),ZEr=o(" (DistilBERT model)"),eCr=l(),qM=a("li"),d8e=a("strong"),oCr=o("electra"),rCr=o(" \u2014 "),ZJ=a("a"),tCr=o("TFElectraForPreTraining"),aCr=o(" (ELECTRA model)"),nCr=l(),jM=a("li"),c8e=a("strong"),sCr=o("flaubert"),lCr=o(" \u2014 "),eY=a("a"),iCr=o("TFFlaubertWithLMHeadModel"),dCr=o(" (FlauBERT model)"),cCr=l(),DM=a("li"),f8e=a("strong"),fCr=o("funnel"),mCr=o(" \u2014 "),oY=a("a"),gCr=o("TFFunnelForPreTraining"),hCr=o(" (Funnel Transformer model)"),pCr=l(),GM=a("li"),m8e=a("strong"),_Cr=o("gpt2"),uCr=o(" \u2014 "),rY=a("a"),bCr=o("TFGPT2LMHeadModel"),vCr=o(" (OpenAI GPT-2 model)"),FCr=l(),OM=a("li"),g8e=a("strong"),TCr=o("layoutlm"),MCr=o(" \u2014 "),tY=a("a"),ECr=o("TFLayoutLMForMaskedLM"),CCr=o(" (LayoutLM model)"),wCr=l(),VM=a("li"),h8e=a("strong"),ACr=o("lxmert"),LCr=o(" \u2014 "),aY=a("a"),yCr=o("TFLxmertForPreTraining"),xCr=o(" (LXMERT model)"),$Cr=l(),XM=a("li"),p8e=a("strong"),kCr=o("mobilebert"),SCr=o(" \u2014 "),nY=a("a"),RCr=o("TFMobileBertForPreTraining"),PCr=o(" (MobileBERT model)"),BCr=l(),zM=a("li"),_8e=a("strong"),ICr=o("mpnet"),NCr=o(" \u2014 "),sY=a("a"),qCr=o("TFMPNetForMaskedLM"),jCr=o(" (MPNet model)"),DCr=l(),WM=a("li"),u8e=a("strong"),GCr=o("openai-gpt"),OCr=o(" \u2014 "),lY=a("a"),VCr=o("TFOpenAIGPTLMHeadModel"),XCr=o(" (OpenAI GPT model)"),zCr=l(),QM=a("li"),b8e=a("strong"),WCr=o("roberta"),QCr=o(" \u2014 "),iY=a("a"),HCr=o("TFRobertaForMaskedLM"),UCr=o(" (RoBERTa model)"),JCr=l(),HM=a("li"),v8e=a("strong"),YCr=o("t5"),KCr=o(" \u2014 "),dY=a("a"),ZCr=o("TFT5ForConditionalGeneration"),e5r=o(" (T5 model)"),o5r=l(),UM=a("li"),F8e=a("strong"),r5r=o("tapas"),t5r=o(" \u2014 "),cY=a("a"),a5r=o("TFTapasForMaskedLM"),n5r=o(" (TAPAS model)"),s5r=l(),JM=a("li"),T8e=a("strong"),l5r=o("transfo-xl"),i5r=o(" \u2014 "),fY=a("a"),d5r=o("TFTransfoXLLMHeadModel"),c5r=o(" (Transformer-XL model)"),f5r=l(),YM=a("li"),M8e=a("strong"),m5r=o("vit_mae"),g5r=o(" \u2014 "),mY=a("a"),h5r=o("TFViTMAEForPreTraining"),p5r=o(" (ViTMAE model)"),_5r=l(),KM=a("li"),E8e=a("strong"),u5r=o("xlm"),b5r=o(" \u2014 "),gY=a("a"),v5r=o("TFXLMWithLMHeadModel"),F5r=o(" (XLM model)"),T5r=l(),ZM=a("li"),C8e=a("strong"),M5r=o("xlm-roberta"),E5r=o(" \u2014 "),hY=a("a"),C5r=o("TFXLMRobertaForMaskedLM"),w5r=o(" (XLM-RoBERTa model)"),A5r=l(),e4=a("li"),w8e=a("strong"),L5r=o("xlnet"),y5r=o(" \u2014 "),pY=a("a"),x5r=o("TFXLNetLMHeadModel"),$5r=o(" (XLNet model)"),k5r=l(),F(o4.$$.fragment),FWe=l(),hc=a("h2"),r4=a("a"),A8e=a("span"),F(ux.$$.fragment),S5r=l(),L8e=a("span"),R5r=o("TFAutoModelForCausalLM"),TWe=l(),ar=a("div"),F(bx.$$.fragment),P5r=l(),pc=a("p"),B5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Y=a("a"),I5r=o("from_pretrained()"),N5r=o(" class method or the "),uY=a("a"),q5r=o("from_config()"),j5r=o(` class
method.`),D5r=l(),vx=a("p"),G5r=o("This class cannot be instantiated directly using "),y8e=a("code"),O5r=o("__init__()"),V5r=o(" (throws an error)."),X5r=l(),Bt=a("div"),F(Fx.$$.fragment),z5r=l(),x8e=a("p"),W5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Q5r=l(),_c=a("p"),H5r=o(`Note:
Loading a model from its configuration file does `),$8e=a("strong"),U5r=o("not"),J5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),Y5r=o("from_pretrained()"),K5r=o(" to load the model weights."),Z5r=l(),F(t4.$$.fragment),e0r=l(),Sr=a("div"),F(Tx.$$.fragment),o0r=l(),k8e=a("p"),r0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t0r=l(),cn=a("p"),a0r=o("The model class to instantiate is selected based on the "),S8e=a("code"),n0r=o("model_type"),s0r=o(` property of the config object (either
passed as an argument or loaded from `),R8e=a("code"),l0r=o("pretrained_model_name_or_path"),i0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=a("code"),d0r=o("pretrained_model_name_or_path"),c0r=o(":"),f0r=l(),Me=a("ul"),a4=a("li"),B8e=a("strong"),m0r=o("bert"),g0r=o(" \u2014 "),vY=a("a"),h0r=o("TFBertLMHeadModel"),p0r=o(" (BERT model)"),_0r=l(),n4=a("li"),I8e=a("strong"),u0r=o("camembert"),b0r=o(" \u2014 "),FY=a("a"),v0r=o("TFCamembertForCausalLM"),F0r=o(" (CamemBERT model)"),T0r=l(),s4=a("li"),N8e=a("strong"),M0r=o("ctrl"),E0r=o(" \u2014 "),TY=a("a"),C0r=o("TFCTRLLMHeadModel"),w0r=o(" (CTRL model)"),A0r=l(),l4=a("li"),q8e=a("strong"),L0r=o("gpt2"),y0r=o(" \u2014 "),MY=a("a"),x0r=o("TFGPT2LMHeadModel"),$0r=o(" (OpenAI GPT-2 model)"),k0r=l(),i4=a("li"),j8e=a("strong"),S0r=o("gptj"),R0r=o(" \u2014 "),EY=a("a"),P0r=o("TFGPTJForCausalLM"),B0r=o(" (GPT-J model)"),I0r=l(),d4=a("li"),D8e=a("strong"),N0r=o("openai-gpt"),q0r=o(" \u2014 "),CY=a("a"),j0r=o("TFOpenAIGPTLMHeadModel"),D0r=o(" (OpenAI GPT model)"),G0r=l(),c4=a("li"),G8e=a("strong"),O0r=o("opt"),V0r=o(" \u2014 "),wY=a("a"),X0r=o("TFOPTForCausalLM"),z0r=o(" (OPT model)"),W0r=l(),f4=a("li"),O8e=a("strong"),Q0r=o("rembert"),H0r=o(" \u2014 "),AY=a("a"),U0r=o("TFRemBertForCausalLM"),J0r=o(" (RemBERT model)"),Y0r=l(),m4=a("li"),V8e=a("strong"),K0r=o("roberta"),Z0r=o(" \u2014 "),LY=a("a"),ewr=o("TFRobertaForCausalLM"),owr=o(" (RoBERTa model)"),rwr=l(),g4=a("li"),X8e=a("strong"),twr=o("roformer"),awr=o(" \u2014 "),yY=a("a"),nwr=o("TFRoFormerForCausalLM"),swr=o(" (RoFormer model)"),lwr=l(),h4=a("li"),z8e=a("strong"),iwr=o("transfo-xl"),dwr=o(" \u2014 "),xY=a("a"),cwr=o("TFTransfoXLLMHeadModel"),fwr=o(" (Transformer-XL model)"),mwr=l(),p4=a("li"),W8e=a("strong"),gwr=o("xlm"),hwr=o(" \u2014 "),$Y=a("a"),pwr=o("TFXLMWithLMHeadModel"),_wr=o(" (XLM model)"),uwr=l(),_4=a("li"),Q8e=a("strong"),bwr=o("xlnet"),vwr=o(" \u2014 "),kY=a("a"),Fwr=o("TFXLNetLMHeadModel"),Twr=o(" (XLNet model)"),Mwr=l(),F(u4.$$.fragment),MWe=l(),uc=a("h2"),b4=a("a"),H8e=a("span"),F(Mx.$$.fragment),Ewr=l(),U8e=a("span"),Cwr=o("TFAutoModelForImageClassification"),EWe=l(),nr=a("div"),F(Ex.$$.fragment),wwr=l(),bc=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SY=a("a"),Lwr=o("from_pretrained()"),ywr=o(" class method or the "),RY=a("a"),xwr=o("from_config()"),$wr=o(` class
method.`),kwr=l(),Cx=a("p"),Swr=o("This class cannot be instantiated directly using "),J8e=a("code"),Rwr=o("__init__()"),Pwr=o(" (throws an error)."),Bwr=l(),It=a("div"),F(wx.$$.fragment),Iwr=l(),Y8e=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qwr=l(),vc=a("p"),jwr=o(`Note:
Loading a model from its configuration file does `),K8e=a("strong"),Dwr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),Owr=o("from_pretrained()"),Vwr=o(" to load the model weights."),Xwr=l(),F(v4.$$.fragment),zwr=l(),Rr=a("div"),F(Ax.$$.fragment),Wwr=l(),Z8e=a("p"),Qwr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hwr=l(),fn=a("p"),Uwr=o("The model class to instantiate is selected based on the "),eMe=a("code"),Jwr=o("model_type"),Ywr=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),Ve=a("ul"),F4=a("li"),tMe=a("strong"),tAr=o("convnext"),aAr=o(" \u2014 "),BY=a("a"),nAr=o("TFConvNextForImageClassification"),sAr=o(" (ConvNeXT model)"),lAr=l(),T4=a("li"),aMe=a("strong"),iAr=o("data2vec-vision"),dAr=o(" \u2014 "),IY=a("a"),cAr=o("TFData2VecVisionForImageClassification"),fAr=o(" (Data2VecVision model)"),mAr=l(),el=a("li"),nMe=a("strong"),gAr=o("deit"),hAr=o(" \u2014 "),NY=a("a"),pAr=o("TFDeiTForImageClassification"),_Ar=o(" or "),qY=a("a"),uAr=o("TFDeiTForImageClassificationWithTeacher"),bAr=o(" (DeiT model)"),vAr=l(),M4=a("li"),sMe=a("strong"),FAr=o("regnet"),TAr=o(" \u2014 "),jY=a("a"),MAr=o("TFRegNetForImageClassification"),EAr=o(" (RegNet model)"),CAr=l(),E4=a("li"),lMe=a("strong"),wAr=o("resnet"),AAr=o(" \u2014 "),DY=a("a"),LAr=o("TFResNetForImageClassification"),yAr=o(" (ResNet model)"),xAr=l(),C4=a("li"),iMe=a("strong"),$Ar=o("segformer"),kAr=o(" \u2014 "),GY=a("a"),SAr=o("TFSegformerForImageClassification"),RAr=o(" (SegFormer model)"),PAr=l(),w4=a("li"),dMe=a("strong"),BAr=o("swin"),IAr=o(" \u2014 "),OY=a("a"),NAr=o("TFSwinForImageClassification"),qAr=o(" (Swin Transformer model)"),jAr=l(),A4=a("li"),cMe=a("strong"),DAr=o("vit"),GAr=o(" \u2014 "),VY=a("a"),OAr=o("TFViTForImageClassification"),VAr=o(" (ViT model)"),XAr=l(),F(L4.$$.fragment),CWe=l(),Fc=a("h2"),y4=a("a"),fMe=a("span"),F(Lx.$$.fragment),zAr=l(),mMe=a("span"),WAr=o("TFAutoModelForMaskedLM"),wWe=l(),sr=a("div"),F(yx.$$.fragment),QAr=l(),Tc=a("p"),HAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=a("a"),UAr=o("from_pretrained()"),JAr=o(" class method or the "),zY=a("a"),YAr=o("from_config()"),KAr=o(` class
method.`),ZAr=l(),xx=a("p"),e7r=o("This class cannot be instantiated directly using "),gMe=a("code"),o7r=o("__init__()"),r7r=o(" (throws an error)."),t7r=l(),Nt=a("div"),F($x.$$.fragment),a7r=l(),hMe=a("p"),n7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s7r=l(),Mc=a("p"),l7r=o(`Note:
Loading a model from its configuration file does `),pMe=a("strong"),i7r=o("not"),d7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),c7r=o("from_pretrained()"),f7r=o(" to load the model weights."),m7r=l(),F(x4.$$.fragment),g7r=l(),Pr=a("div"),F(kx.$$.fragment),h7r=l(),_Me=a("p"),p7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_7r=l(),mn=a("p"),u7r=o("The model class to instantiate is selected based on the "),uMe=a("code"),b7r=o("model_type"),v7r=o(` property of the config object (either
passed as an argument or loaded from `),bMe=a("code"),F7r=o("pretrained_model_name_or_path"),T7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=a("code"),M7r=o("pretrained_model_name_or_path"),E7r=o(":"),C7r=l(),ie=a("ul"),$4=a("li"),FMe=a("strong"),w7r=o("albert"),A7r=o(" \u2014 "),QY=a("a"),L7r=o("TFAlbertForMaskedLM"),y7r=o(" (ALBERT model)"),x7r=l(),k4=a("li"),TMe=a("strong"),$7r=o("bert"),k7r=o(" \u2014 "),HY=a("a"),S7r=o("TFBertForMaskedLM"),R7r=o(" (BERT model)"),P7r=l(),S4=a("li"),MMe=a("strong"),B7r=o("camembert"),I7r=o(" \u2014 "),UY=a("a"),N7r=o("TFCamembertForMaskedLM"),q7r=o(" (CamemBERT model)"),j7r=l(),R4=a("li"),EMe=a("strong"),D7r=o("convbert"),G7r=o(" \u2014 "),JY=a("a"),O7r=o("TFConvBertForMaskedLM"),V7r=o(" (ConvBERT model)"),X7r=l(),P4=a("li"),CMe=a("strong"),z7r=o("deberta"),W7r=o(" \u2014 "),YY=a("a"),Q7r=o("TFDebertaForMaskedLM"),H7r=o(" (DeBERTa model)"),U7r=l(),B4=a("li"),wMe=a("strong"),J7r=o("deberta-v2"),Y7r=o(" \u2014 "),KY=a("a"),K7r=o("TFDebertaV2ForMaskedLM"),Z7r=o(" (DeBERTa-v2 model)"),eLr=l(),I4=a("li"),AMe=a("strong"),oLr=o("distilbert"),rLr=o(" \u2014 "),ZY=a("a"),tLr=o("TFDistilBertForMaskedLM"),aLr=o(" (DistilBERT model)"),nLr=l(),N4=a("li"),LMe=a("strong"),sLr=o("electra"),lLr=o(" \u2014 "),eK=a("a"),iLr=o("TFElectraForMaskedLM"),dLr=o(" (ELECTRA model)"),cLr=l(),q4=a("li"),yMe=a("strong"),fLr=o("flaubert"),mLr=o(" \u2014 "),oK=a("a"),gLr=o("TFFlaubertWithLMHeadModel"),hLr=o(" (FlauBERT model)"),pLr=l(),j4=a("li"),xMe=a("strong"),_Lr=o("funnel"),uLr=o(" \u2014 "),rK=a("a"),bLr=o("TFFunnelForMaskedLM"),vLr=o(" (Funnel Transformer model)"),FLr=l(),D4=a("li"),$Me=a("strong"),TLr=o("layoutlm"),MLr=o(" \u2014 "),tK=a("a"),ELr=o("TFLayoutLMForMaskedLM"),CLr=o(" (LayoutLM model)"),wLr=l(),G4=a("li"),kMe=a("strong"),ALr=o("longformer"),LLr=o(" \u2014 "),aK=a("a"),yLr=o("TFLongformerForMaskedLM"),xLr=o(" (Longformer model)"),$Lr=l(),O4=a("li"),SMe=a("strong"),kLr=o("mobilebert"),SLr=o(" \u2014 "),nK=a("a"),RLr=o("TFMobileBertForMaskedLM"),PLr=o(" (MobileBERT model)"),BLr=l(),V4=a("li"),RMe=a("strong"),ILr=o("mpnet"),NLr=o(" \u2014 "),sK=a("a"),qLr=o("TFMPNetForMaskedLM"),jLr=o(" (MPNet model)"),DLr=l(),X4=a("li"),PMe=a("strong"),GLr=o("rembert"),OLr=o(" \u2014 "),lK=a("a"),VLr=o("TFRemBertForMaskedLM"),XLr=o(" (RemBERT model)"),zLr=l(),z4=a("li"),BMe=a("strong"),WLr=o("roberta"),QLr=o(" \u2014 "),iK=a("a"),HLr=o("TFRobertaForMaskedLM"),ULr=o(" (RoBERTa model)"),JLr=l(),W4=a("li"),IMe=a("strong"),YLr=o("roformer"),KLr=o(" \u2014 "),dK=a("a"),ZLr=o("TFRoFormerForMaskedLM"),eyr=o(" (RoFormer model)"),oyr=l(),Q4=a("li"),NMe=a("strong"),ryr=o("tapas"),tyr=o(" \u2014 "),cK=a("a"),ayr=o("TFTapasForMaskedLM"),nyr=o(" (TAPAS model)"),syr=l(),H4=a("li"),qMe=a("strong"),lyr=o("xlm"),iyr=o(" \u2014 "),fK=a("a"),dyr=o("TFXLMWithLMHeadModel"),cyr=o(" (XLM model)"),fyr=l(),U4=a("li"),jMe=a("strong"),myr=o("xlm-roberta"),gyr=o(" \u2014 "),mK=a("a"),hyr=o("TFXLMRobertaForMaskedLM"),pyr=o(" (XLM-RoBERTa model)"),_yr=l(),F(J4.$$.fragment),AWe=l(),Ec=a("h2"),Y4=a("a"),DMe=a("span"),F(Sx.$$.fragment),uyr=l(),GMe=a("span"),byr=o("TFAutoModelForSeq2SeqLM"),LWe=l(),lr=a("div"),F(Rx.$$.fragment),vyr=l(),Cc=a("p"),Fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=a("a"),Tyr=o("from_pretrained()"),Myr=o(" class method or the "),hK=a("a"),Eyr=o("from_config()"),Cyr=o(` class
method.`),wyr=l(),Px=a("p"),Ayr=o("This class cannot be instantiated directly using "),OMe=a("code"),Lyr=o("__init__()"),yyr=o(" (throws an error)."),xyr=l(),qt=a("div"),F(Bx.$$.fragment),$yr=l(),VMe=a("p"),kyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Syr=l(),wc=a("p"),Ryr=o(`Note:
Loading a model from its configuration file does `),XMe=a("strong"),Pyr=o("not"),Byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),Iyr=o("from_pretrained()"),Nyr=o(" to load the model weights."),qyr=l(),F(K4.$$.fragment),jyr=l(),Br=a("div"),F(Ix.$$.fragment),Dyr=l(),zMe=a("p"),Gyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Oyr=l(),gn=a("p"),Vyr=o("The model class to instantiate is selected based on the "),WMe=a("code"),Xyr=o("model_type"),zyr=o(` property of the config object (either
passed as an argument or loaded from `),QMe=a("code"),Wyr=o("pretrained_model_name_or_path"),Qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=a("code"),Hyr=o("pretrained_model_name_or_path"),Uyr=o(":"),Jyr=l(),ye=a("ul"),Z4=a("li"),UMe=a("strong"),Yyr=o("bart"),Kyr=o(" \u2014 "),_K=a("a"),Zyr=o("TFBartForConditionalGeneration"),e9r=o(" (BART model)"),o9r=l(),eE=a("li"),JMe=a("strong"),r9r=o("blenderbot"),t9r=o(" \u2014 "),uK=a("a"),a9r=o("TFBlenderbotForConditionalGeneration"),n9r=o(" (Blenderbot model)"),s9r=l(),oE=a("li"),YMe=a("strong"),l9r=o("blenderbot-small"),i9r=o(" \u2014 "),bK=a("a"),d9r=o("TFBlenderbotSmallForConditionalGeneration"),c9r=o(" (BlenderbotSmall model)"),f9r=l(),rE=a("li"),KMe=a("strong"),m9r=o("encoder-decoder"),g9r=o(" \u2014 "),vK=a("a"),h9r=o("TFEncoderDecoderModel"),p9r=o(" (Encoder decoder model)"),_9r=l(),tE=a("li"),ZMe=a("strong"),u9r=o("led"),b9r=o(" \u2014 "),FK=a("a"),v9r=o("TFLEDForConditionalGeneration"),F9r=o(" (LED model)"),T9r=l(),aE=a("li"),e4e=a("strong"),M9r=o("marian"),E9r=o(" \u2014 "),TK=a("a"),C9r=o("TFMarianMTModel"),w9r=o(" (Marian model)"),A9r=l(),nE=a("li"),o4e=a("strong"),L9r=o("mbart"),y9r=o(" \u2014 "),MK=a("a"),x9r=o("TFMBartForConditionalGeneration"),$9r=o(" (mBART model)"),k9r=l(),sE=a("li"),r4e=a("strong"),S9r=o("mt5"),R9r=o(" \u2014 "),EK=a("a"),P9r=o("TFMT5ForConditionalGeneration"),B9r=o(" (MT5 model)"),I9r=l(),lE=a("li"),t4e=a("strong"),N9r=o("pegasus"),q9r=o(" \u2014 "),CK=a("a"),j9r=o("TFPegasusForConditionalGeneration"),D9r=o(" (Pegasus model)"),G9r=l(),iE=a("li"),a4e=a("strong"),O9r=o("t5"),V9r=o(" \u2014 "),wK=a("a"),X9r=o("TFT5ForConditionalGeneration"),z9r=o(" (T5 model)"),W9r=l(),F(dE.$$.fragment),yWe=l(),Ac=a("h2"),cE=a("a"),n4e=a("span"),F(Nx.$$.fragment),Q9r=l(),s4e=a("span"),H9r=o("TFAutoModelForSequenceClassification"),xWe=l(),ir=a("div"),F(qx.$$.fragment),U9r=l(),Lc=a("p"),J9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AK=a("a"),Y9r=o("from_pretrained()"),K9r=o(" class method or the "),LK=a("a"),Z9r=o("from_config()"),exr=o(` class
method.`),oxr=l(),jx=a("p"),rxr=o("This class cannot be instantiated directly using "),l4e=a("code"),txr=o("__init__()"),axr=o(" (throws an error)."),nxr=l(),jt=a("div"),F(Dx.$$.fragment),sxr=l(),i4e=a("p"),lxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ixr=l(),yc=a("p"),dxr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),cxr=o("not"),fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),mxr=o("from_pretrained()"),gxr=o(" to load the model weights."),hxr=l(),F(fE.$$.fragment),pxr=l(),Ir=a("div"),F(Gx.$$.fragment),_xr=l(),c4e=a("p"),uxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bxr=l(),hn=a("p"),vxr=o("The model class to instantiate is selected based on the "),f4e=a("code"),Fxr=o("model_type"),Txr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(":"),Axr=l(),te=a("ul"),mE=a("li"),h4e=a("strong"),Lxr=o("albert"),yxr=o(" \u2014 "),xK=a("a"),xxr=o("TFAlbertForSequenceClassification"),$xr=o(" (ALBERT model)"),kxr=l(),gE=a("li"),p4e=a("strong"),Sxr=o("bert"),Rxr=o(" \u2014 "),$K=a("a"),Pxr=o("TFBertForSequenceClassification"),Bxr=o(" (BERT model)"),Ixr=l(),hE=a("li"),_4e=a("strong"),Nxr=o("camembert"),qxr=o(" \u2014 "),kK=a("a"),jxr=o("TFCamembertForSequenceClassification"),Dxr=o(" (CamemBERT model)"),Gxr=l(),pE=a("li"),u4e=a("strong"),Oxr=o("convbert"),Vxr=o(" \u2014 "),SK=a("a"),Xxr=o("TFConvBertForSequenceClassification"),zxr=o(" (ConvBERT model)"),Wxr=l(),_E=a("li"),b4e=a("strong"),Qxr=o("ctrl"),Hxr=o(" \u2014 "),RK=a("a"),Uxr=o("TFCTRLForSequenceClassification"),Jxr=o(" (CTRL model)"),Yxr=l(),uE=a("li"),v4e=a("strong"),Kxr=o("deberta"),Zxr=o(" \u2014 "),PK=a("a"),e$r=o("TFDebertaForSequenceClassification"),o$r=o(" (DeBERTa model)"),r$r=l(),bE=a("li"),F4e=a("strong"),t$r=o("deberta-v2"),a$r=o(" \u2014 "),BK=a("a"),n$r=o("TFDebertaV2ForSequenceClassification"),s$r=o(" (DeBERTa-v2 model)"),l$r=l(),vE=a("li"),T4e=a("strong"),i$r=o("distilbert"),d$r=o(" \u2014 "),IK=a("a"),c$r=o("TFDistilBertForSequenceClassification"),f$r=o(" (DistilBERT model)"),m$r=l(),FE=a("li"),M4e=a("strong"),g$r=o("electra"),h$r=o(" \u2014 "),NK=a("a"),p$r=o("TFElectraForSequenceClassification"),_$r=o(" (ELECTRA model)"),u$r=l(),TE=a("li"),E4e=a("strong"),b$r=o("flaubert"),v$r=o(" \u2014 "),qK=a("a"),F$r=o("TFFlaubertForSequenceClassification"),T$r=o(" (FlauBERT model)"),M$r=l(),ME=a("li"),C4e=a("strong"),E$r=o("funnel"),C$r=o(" \u2014 "),jK=a("a"),w$r=o("TFFunnelForSequenceClassification"),A$r=o(" (Funnel Transformer model)"),L$r=l(),EE=a("li"),w4e=a("strong"),y$r=o("gpt2"),x$r=o(" \u2014 "),DK=a("a"),$$r=o("TFGPT2ForSequenceClassification"),k$r=o(" (OpenAI GPT-2 model)"),S$r=l(),CE=a("li"),A4e=a("strong"),R$r=o("gptj"),P$r=o(" \u2014 "),GK=a("a"),B$r=o("TFGPTJForSequenceClassification"),I$r=o(" (GPT-J model)"),N$r=l(),wE=a("li"),L4e=a("strong"),q$r=o("layoutlm"),j$r=o(" \u2014 "),OK=a("a"),D$r=o("TFLayoutLMForSequenceClassification"),G$r=o(" (LayoutLM model)"),O$r=l(),AE=a("li"),y4e=a("strong"),V$r=o("longformer"),X$r=o(" \u2014 "),VK=a("a"),z$r=o("TFLongformerForSequenceClassification"),W$r=o(" (Longformer model)"),Q$r=l(),LE=a("li"),x4e=a("strong"),H$r=o("mobilebert"),U$r=o(" \u2014 "),XK=a("a"),J$r=o("TFMobileBertForSequenceClassification"),Y$r=o(" (MobileBERT model)"),K$r=l(),yE=a("li"),$4e=a("strong"),Z$r=o("mpnet"),ekr=o(" \u2014 "),zK=a("a"),okr=o("TFMPNetForSequenceClassification"),rkr=o(" (MPNet model)"),tkr=l(),xE=a("li"),k4e=a("strong"),akr=o("openai-gpt"),nkr=o(" \u2014 "),WK=a("a"),skr=o("TFOpenAIGPTForSequenceClassification"),lkr=o(" (OpenAI GPT model)"),ikr=l(),$E=a("li"),S4e=a("strong"),dkr=o("rembert"),ckr=o(" \u2014 "),QK=a("a"),fkr=o("TFRemBertForSequenceClassification"),mkr=o(" (RemBERT model)"),gkr=l(),kE=a("li"),R4e=a("strong"),hkr=o("roberta"),pkr=o(" \u2014 "),HK=a("a"),_kr=o("TFRobertaForSequenceClassification"),ukr=o(" (RoBERTa model)"),bkr=l(),SE=a("li"),P4e=a("strong"),vkr=o("roformer"),Fkr=o(" \u2014 "),UK=a("a"),Tkr=o("TFRoFormerForSequenceClassification"),Mkr=o(" (RoFormer model)"),Ekr=l(),RE=a("li"),B4e=a("strong"),Ckr=o("tapas"),wkr=o(" \u2014 "),JK=a("a"),Akr=o("TFTapasForSequenceClassification"),Lkr=o(" (TAPAS model)"),ykr=l(),PE=a("li"),I4e=a("strong"),xkr=o("transfo-xl"),$kr=o(" \u2014 "),YK=a("a"),kkr=o("TFTransfoXLForSequenceClassification"),Skr=o(" (Transformer-XL model)"),Rkr=l(),BE=a("li"),N4e=a("strong"),Pkr=o("xlm"),Bkr=o(" \u2014 "),KK=a("a"),Ikr=o("TFXLMForSequenceClassification"),Nkr=o(" (XLM model)"),qkr=l(),IE=a("li"),q4e=a("strong"),jkr=o("xlm-roberta"),Dkr=o(" \u2014 "),ZK=a("a"),Gkr=o("TFXLMRobertaForSequenceClassification"),Okr=o(" (XLM-RoBERTa model)"),Vkr=l(),NE=a("li"),j4e=a("strong"),Xkr=o("xlnet"),zkr=o(" \u2014 "),eZ=a("a"),Wkr=o("TFXLNetForSequenceClassification"),Qkr=o(" (XLNet model)"),Hkr=l(),F(qE.$$.fragment),$We=l(),xc=a("h2"),jE=a("a"),D4e=a("span"),F(Ox.$$.fragment),Ukr=l(),G4e=a("span"),Jkr=o("TFAutoModelForMultipleChoice"),kWe=l(),dr=a("div"),F(Vx.$$.fragment),Ykr=l(),$c=a("p"),Kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oZ=a("a"),Zkr=o("from_pretrained()"),eSr=o(" class method or the "),rZ=a("a"),oSr=o("from_config()"),rSr=o(` class
method.`),tSr=l(),Xx=a("p"),aSr=o("This class cannot be instantiated directly using "),O4e=a("code"),nSr=o("__init__()"),sSr=o(" (throws an error)."),lSr=l(),Dt=a("div"),F(zx.$$.fragment),iSr=l(),V4e=a("p"),dSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cSr=l(),kc=a("p"),fSr=o(`Note:
Loading a model from its configuration file does `),X4e=a("strong"),mSr=o("not"),gSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),hSr=o("from_pretrained()"),pSr=o(" to load the model weights."),_Sr=l(),F(DE.$$.fragment),uSr=l(),Nr=a("div"),F(Wx.$$.fragment),bSr=l(),z4e=a("p"),vSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FSr=l(),pn=a("p"),TSr=o("The model class to instantiate is selected based on the "),W4e=a("code"),MSr=o("model_type"),ESr=o(` property of the config object (either
passed as an argument or loaded from `),Q4e=a("code"),CSr=o("pretrained_model_name_or_path"),wSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=a("code"),ASr=o("pretrained_model_name_or_path"),LSr=o(":"),ySr=l(),ve=a("ul"),GE=a("li"),U4e=a("strong"),xSr=o("albert"),$Sr=o(" \u2014 "),aZ=a("a"),kSr=o("TFAlbertForMultipleChoice"),SSr=o(" (ALBERT model)"),RSr=l(),OE=a("li"),J4e=a("strong"),PSr=o("bert"),BSr=o(" \u2014 "),nZ=a("a"),ISr=o("TFBertForMultipleChoice"),NSr=o(" (BERT model)"),qSr=l(),VE=a("li"),Y4e=a("strong"),jSr=o("camembert"),DSr=o(" \u2014 "),sZ=a("a"),GSr=o("TFCamembertForMultipleChoice"),OSr=o(" (CamemBERT model)"),VSr=l(),XE=a("li"),K4e=a("strong"),XSr=o("convbert"),zSr=o(" \u2014 "),lZ=a("a"),WSr=o("TFConvBertForMultipleChoice"),QSr=o(" (ConvBERT model)"),HSr=l(),zE=a("li"),Z4e=a("strong"),USr=o("distilbert"),JSr=o(" \u2014 "),iZ=a("a"),YSr=o("TFDistilBertForMultipleChoice"),KSr=o(" (DistilBERT model)"),ZSr=l(),WE=a("li"),eEe=a("strong"),eRr=o("electra"),oRr=o(" \u2014 "),dZ=a("a"),rRr=o("TFElectraForMultipleChoice"),tRr=o(" (ELECTRA model)"),aRr=l(),QE=a("li"),oEe=a("strong"),nRr=o("flaubert"),sRr=o(" \u2014 "),cZ=a("a"),lRr=o("TFFlaubertForMultipleChoice"),iRr=o(" (FlauBERT model)"),dRr=l(),HE=a("li"),rEe=a("strong"),cRr=o("funnel"),fRr=o(" \u2014 "),fZ=a("a"),mRr=o("TFFunnelForMultipleChoice"),gRr=o(" (Funnel Transformer model)"),hRr=l(),UE=a("li"),tEe=a("strong"),pRr=o("longformer"),_Rr=o(" \u2014 "),mZ=a("a"),uRr=o("TFLongformerForMultipleChoice"),bRr=o(" (Longformer model)"),vRr=l(),JE=a("li"),aEe=a("strong"),FRr=o("mobilebert"),TRr=o(" \u2014 "),gZ=a("a"),MRr=o("TFMobileBertForMultipleChoice"),ERr=o(" (MobileBERT model)"),CRr=l(),YE=a("li"),nEe=a("strong"),wRr=o("mpnet"),ARr=o(" \u2014 "),hZ=a("a"),LRr=o("TFMPNetForMultipleChoice"),yRr=o(" (MPNet model)"),xRr=l(),KE=a("li"),sEe=a("strong"),$Rr=o("rembert"),kRr=o(" \u2014 "),pZ=a("a"),SRr=o("TFRemBertForMultipleChoice"),RRr=o(" (RemBERT model)"),PRr=l(),ZE=a("li"),lEe=a("strong"),BRr=o("roberta"),IRr=o(" \u2014 "),_Z=a("a"),NRr=o("TFRobertaForMultipleChoice"),qRr=o(" (RoBERTa model)"),jRr=l(),eC=a("li"),iEe=a("strong"),DRr=o("roformer"),GRr=o(" \u2014 "),uZ=a("a"),ORr=o("TFRoFormerForMultipleChoice"),VRr=o(" (RoFormer model)"),XRr=l(),oC=a("li"),dEe=a("strong"),zRr=o("xlm"),WRr=o(" \u2014 "),bZ=a("a"),QRr=o("TFXLMForMultipleChoice"),HRr=o(" (XLM model)"),URr=l(),rC=a("li"),cEe=a("strong"),JRr=o("xlm-roberta"),YRr=o(" \u2014 "),vZ=a("a"),KRr=o("TFXLMRobertaForMultipleChoice"),ZRr=o(" (XLM-RoBERTa model)"),ePr=l(),tC=a("li"),fEe=a("strong"),oPr=o("xlnet"),rPr=o(" \u2014 "),FZ=a("a"),tPr=o("TFXLNetForMultipleChoice"),aPr=o(" (XLNet model)"),nPr=l(),F(aC.$$.fragment),SWe=l(),Sc=a("h2"),nC=a("a"),mEe=a("span"),F(Qx.$$.fragment),sPr=l(),gEe=a("span"),lPr=o("TFAutoModelForNextSentencePrediction"),RWe=l(),cr=a("div"),F(Hx.$$.fragment),iPr=l(),Rc=a("p"),dPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=a("a"),cPr=o("from_pretrained()"),fPr=o(" class method or the "),MZ=a("a"),mPr=o("from_config()"),gPr=o(` class
method.`),hPr=l(),Ux=a("p"),pPr=o("This class cannot be instantiated directly using "),hEe=a("code"),_Pr=o("__init__()"),uPr=o(" (throws an error)."),bPr=l(),Gt=a("div"),F(Jx.$$.fragment),vPr=l(),pEe=a("p"),FPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TPr=l(),Pc=a("p"),MPr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),EPr=o("not"),CPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=a("a"),wPr=o("from_pretrained()"),APr=o(" to load the model weights."),LPr=l(),F(sC.$$.fragment),yPr=l(),qr=a("div"),F(Yx.$$.fragment),xPr=l(),uEe=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kPr=l(),_n=a("p"),SPr=o("The model class to instantiate is selected based on the "),bEe=a("code"),RPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),NPr=o("pretrained_model_name_or_path"),qPr=o(":"),jPr=l(),Kx=a("ul"),lC=a("li"),TEe=a("strong"),DPr=o("bert"),GPr=o(" \u2014 "),CZ=a("a"),OPr=o("TFBertForNextSentencePrediction"),VPr=o(" (BERT model)"),XPr=l(),iC=a("li"),MEe=a("strong"),zPr=o("mobilebert"),WPr=o(" \u2014 "),wZ=a("a"),QPr=o("TFMobileBertForNextSentencePrediction"),HPr=o(" (MobileBERT model)"),UPr=l(),F(dC.$$.fragment),PWe=l(),Bc=a("h2"),cC=a("a"),EEe=a("span"),F(Zx.$$.fragment),JPr=l(),CEe=a("span"),YPr=o("TFAutoModelForTableQuestionAnswering"),BWe=l(),fr=a("div"),F(e$.$$.fragment),KPr=l(),Ic=a("p"),ZPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AZ=a("a"),eBr=o("from_pretrained()"),oBr=o(" class method or the "),LZ=a("a"),rBr=o("from_config()"),tBr=o(` class
method.`),aBr=l(),o$=a("p"),nBr=o("This class cannot be instantiated directly using "),wEe=a("code"),sBr=o("__init__()"),lBr=o(" (throws an error)."),iBr=l(),Ot=a("div"),F(r$.$$.fragment),dBr=l(),AEe=a("p"),cBr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fBr=l(),Nc=a("p"),mBr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),gBr=o("not"),hBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),pBr=o("from_pretrained()"),_Br=o(" to load the model weights."),uBr=l(),F(fC.$$.fragment),bBr=l(),jr=a("div"),F(t$.$$.fragment),vBr=l(),yEe=a("p"),FBr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TBr=l(),un=a("p"),MBr=o("The model class to instantiate is selected based on the "),xEe=a("code"),EBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),LBr=o("pretrained_model_name_or_path"),yBr=o(":"),xBr=l(),SEe=a("ul"),mC=a("li"),REe=a("strong"),$Br=o("tapas"),kBr=o(" \u2014 "),xZ=a("a"),SBr=o("TFTapasForQuestionAnswering"),RBr=o(" (TAPAS model)"),PBr=l(),F(gC.$$.fragment),IWe=l(),qc=a("h2"),hC=a("a"),PEe=a("span"),F(a$.$$.fragment),BBr=l(),BEe=a("span"),IBr=o("TFAutoModelForTokenClassification"),NWe=l(),mr=a("div"),F(n$.$$.fragment),NBr=l(),jc=a("p"),qBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Z=a("a"),jBr=o("from_pretrained()"),DBr=o(" class method or the "),kZ=a("a"),GBr=o("from_config()"),OBr=o(` class
method.`),VBr=l(),s$=a("p"),XBr=o("This class cannot be instantiated directly using "),IEe=a("code"),zBr=o("__init__()"),WBr=o(" (throws an error)."),QBr=l(),Vt=a("div"),F(l$.$$.fragment),HBr=l(),NEe=a("p"),UBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JBr=l(),Dc=a("p"),YBr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),KBr=o("not"),ZBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),eIr=o("from_pretrained()"),oIr=o(" to load the model weights."),rIr=l(),F(pC.$$.fragment),tIr=l(),Dr=a("div"),F(i$.$$.fragment),aIr=l(),jEe=a("p"),nIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sIr=l(),bn=a("p"),lIr=o("The model class to instantiate is selected based on the "),DEe=a("code"),iIr=o("model_type"),dIr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),mIr=o("pretrained_model_name_or_path"),gIr=o(":"),hIr=l(),de=a("ul"),_C=a("li"),VEe=a("strong"),pIr=o("albert"),_Ir=o(" \u2014 "),RZ=a("a"),uIr=o("TFAlbertForTokenClassification"),bIr=o(" (ALBERT model)"),vIr=l(),uC=a("li"),XEe=a("strong"),FIr=o("bert"),TIr=o(" \u2014 "),PZ=a("a"),MIr=o("TFBertForTokenClassification"),EIr=o(" (BERT model)"),CIr=l(),bC=a("li"),zEe=a("strong"),wIr=o("camembert"),AIr=o(" \u2014 "),BZ=a("a"),LIr=o("TFCamembertForTokenClassification"),yIr=o(" (CamemBERT model)"),xIr=l(),vC=a("li"),WEe=a("strong"),$Ir=o("convbert"),kIr=o(" \u2014 "),IZ=a("a"),SIr=o("TFConvBertForTokenClassification"),RIr=o(" (ConvBERT model)"),PIr=l(),FC=a("li"),QEe=a("strong"),BIr=o("deberta"),IIr=o(" \u2014 "),NZ=a("a"),NIr=o("TFDebertaForTokenClassification"),qIr=o(" (DeBERTa model)"),jIr=l(),TC=a("li"),HEe=a("strong"),DIr=o("deberta-v2"),GIr=o(" \u2014 "),qZ=a("a"),OIr=o("TFDebertaV2ForTokenClassification"),VIr=o(" (DeBERTa-v2 model)"),XIr=l(),MC=a("li"),UEe=a("strong"),zIr=o("distilbert"),WIr=o(" \u2014 "),jZ=a("a"),QIr=o("TFDistilBertForTokenClassification"),HIr=o(" (DistilBERT model)"),UIr=l(),EC=a("li"),JEe=a("strong"),JIr=o("electra"),YIr=o(" \u2014 "),DZ=a("a"),KIr=o("TFElectraForTokenClassification"),ZIr=o(" (ELECTRA model)"),eNr=l(),CC=a("li"),YEe=a("strong"),oNr=o("flaubert"),rNr=o(" \u2014 "),GZ=a("a"),tNr=o("TFFlaubertForTokenClassification"),aNr=o(" (FlauBERT model)"),nNr=l(),wC=a("li"),KEe=a("strong"),sNr=o("funnel"),lNr=o(" \u2014 "),OZ=a("a"),iNr=o("TFFunnelForTokenClassification"),dNr=o(" (Funnel Transformer model)"),cNr=l(),AC=a("li"),ZEe=a("strong"),fNr=o("layoutlm"),mNr=o(" \u2014 "),VZ=a("a"),gNr=o("TFLayoutLMForTokenClassification"),hNr=o(" (LayoutLM model)"),pNr=l(),LC=a("li"),eCe=a("strong"),_Nr=o("longformer"),uNr=o(" \u2014 "),XZ=a("a"),bNr=o("TFLongformerForTokenClassification"),vNr=o(" (Longformer model)"),FNr=l(),yC=a("li"),oCe=a("strong"),TNr=o("mobilebert"),MNr=o(" \u2014 "),zZ=a("a"),ENr=o("TFMobileBertForTokenClassification"),CNr=o(" (MobileBERT model)"),wNr=l(),xC=a("li"),rCe=a("strong"),ANr=o("mpnet"),LNr=o(" \u2014 "),WZ=a("a"),yNr=o("TFMPNetForTokenClassification"),xNr=o(" (MPNet model)"),$Nr=l(),$C=a("li"),tCe=a("strong"),kNr=o("rembert"),SNr=o(" \u2014 "),QZ=a("a"),RNr=o("TFRemBertForTokenClassification"),PNr=o(" (RemBERT model)"),BNr=l(),kC=a("li"),aCe=a("strong"),INr=o("roberta"),NNr=o(" \u2014 "),HZ=a("a"),qNr=o("TFRobertaForTokenClassification"),jNr=o(" (RoBERTa model)"),DNr=l(),SC=a("li"),nCe=a("strong"),GNr=o("roformer"),ONr=o(" \u2014 "),UZ=a("a"),VNr=o("TFRoFormerForTokenClassification"),XNr=o(" (RoFormer model)"),zNr=l(),RC=a("li"),sCe=a("strong"),WNr=o("xlm"),QNr=o(" \u2014 "),JZ=a("a"),HNr=o("TFXLMForTokenClassification"),UNr=o(" (XLM model)"),JNr=l(),PC=a("li"),lCe=a("strong"),YNr=o("xlm-roberta"),KNr=o(" \u2014 "),YZ=a("a"),ZNr=o("TFXLMRobertaForTokenClassification"),eqr=o(" (XLM-RoBERTa model)"),oqr=l(),BC=a("li"),iCe=a("strong"),rqr=o("xlnet"),tqr=o(" \u2014 "),KZ=a("a"),aqr=o("TFXLNetForTokenClassification"),nqr=o(" (XLNet model)"),sqr=l(),F(IC.$$.fragment),qWe=l(),Gc=a("h2"),NC=a("a"),dCe=a("span"),F(d$.$$.fragment),lqr=l(),cCe=a("span"),iqr=o("TFAutoModelForQuestionAnswering"),jWe=l(),gr=a("div"),F(c$.$$.fragment),dqr=l(),Oc=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZZ=a("a"),fqr=o("from_pretrained()"),mqr=o(" class method or the "),eee=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),pqr=l(),f$=a("p"),_qr=o("This class cannot be instantiated directly using "),fCe=a("code"),uqr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),Xt=a("div"),F(m$.$$.fragment),Fqr=l(),mCe=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mqr=l(),Vc=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),Aqr=o("from_pretrained()"),Lqr=o(" to load the model weights."),yqr=l(),F(qC.$$.fragment),xqr=l(),Gr=a("div"),F(g$.$$.fragment),$qr=l(),hCe=a("p"),kqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sqr=l(),vn=a("p"),Rqr=o("The model class to instantiate is selected based on the "),pCe=a("code"),Pqr=o("model_type"),Bqr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),Iqr=o("pretrained_model_name_or_path"),Nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),ce=a("ul"),jC=a("li"),bCe=a("strong"),Gqr=o("albert"),Oqr=o(" \u2014 "),ree=a("a"),Vqr=o("TFAlbertForQuestionAnswering"),Xqr=o(" (ALBERT model)"),zqr=l(),DC=a("li"),vCe=a("strong"),Wqr=o("bert"),Qqr=o(" \u2014 "),tee=a("a"),Hqr=o("TFBertForQuestionAnswering"),Uqr=o(" (BERT model)"),Jqr=l(),GC=a("li"),FCe=a("strong"),Yqr=o("camembert"),Kqr=o(" \u2014 "),aee=a("a"),Zqr=o("TFCamembertForQuestionAnswering"),ejr=o(" (CamemBERT model)"),ojr=l(),OC=a("li"),TCe=a("strong"),rjr=o("convbert"),tjr=o(" \u2014 "),nee=a("a"),ajr=o("TFConvBertForQuestionAnswering"),njr=o(" (ConvBERT model)"),sjr=l(),VC=a("li"),MCe=a("strong"),ljr=o("deberta"),ijr=o(" \u2014 "),see=a("a"),djr=o("TFDebertaForQuestionAnswering"),cjr=o(" (DeBERTa model)"),fjr=l(),XC=a("li"),ECe=a("strong"),mjr=o("deberta-v2"),gjr=o(" \u2014 "),lee=a("a"),hjr=o("TFDebertaV2ForQuestionAnswering"),pjr=o(" (DeBERTa-v2 model)"),_jr=l(),zC=a("li"),CCe=a("strong"),ujr=o("distilbert"),bjr=o(" \u2014 "),iee=a("a"),vjr=o("TFDistilBertForQuestionAnswering"),Fjr=o(" (DistilBERT model)"),Tjr=l(),WC=a("li"),wCe=a("strong"),Mjr=o("electra"),Ejr=o(" \u2014 "),dee=a("a"),Cjr=o("TFElectraForQuestionAnswering"),wjr=o(" (ELECTRA model)"),Ajr=l(),QC=a("li"),ACe=a("strong"),Ljr=o("flaubert"),yjr=o(" \u2014 "),cee=a("a"),xjr=o("TFFlaubertForQuestionAnsweringSimple"),$jr=o(" (FlauBERT model)"),kjr=l(),HC=a("li"),LCe=a("strong"),Sjr=o("funnel"),Rjr=o(" \u2014 "),fee=a("a"),Pjr=o("TFFunnelForQuestionAnswering"),Bjr=o(" (Funnel Transformer model)"),Ijr=l(),UC=a("li"),yCe=a("strong"),Njr=o("gptj"),qjr=o(" \u2014 "),mee=a("a"),jjr=o("TFGPTJForQuestionAnswering"),Djr=o(" (GPT-J model)"),Gjr=l(),JC=a("li"),xCe=a("strong"),Ojr=o("longformer"),Vjr=o(" \u2014 "),gee=a("a"),Xjr=o("TFLongformerForQuestionAnswering"),zjr=o(" (Longformer model)"),Wjr=l(),YC=a("li"),$Ce=a("strong"),Qjr=o("mobilebert"),Hjr=o(" \u2014 "),hee=a("a"),Ujr=o("TFMobileBertForQuestionAnswering"),Jjr=o(" (MobileBERT model)"),Yjr=l(),KC=a("li"),kCe=a("strong"),Kjr=o("mpnet"),Zjr=o(" \u2014 "),pee=a("a"),eDr=o("TFMPNetForQuestionAnswering"),oDr=o(" (MPNet model)"),rDr=l(),ZC=a("li"),SCe=a("strong"),tDr=o("rembert"),aDr=o(" \u2014 "),_ee=a("a"),nDr=o("TFRemBertForQuestionAnswering"),sDr=o(" (RemBERT model)"),lDr=l(),e5=a("li"),RCe=a("strong"),iDr=o("roberta"),dDr=o(" \u2014 "),uee=a("a"),cDr=o("TFRobertaForQuestionAnswering"),fDr=o(" (RoBERTa model)"),mDr=l(),o5=a("li"),PCe=a("strong"),gDr=o("roformer"),hDr=o(" \u2014 "),bee=a("a"),pDr=o("TFRoFormerForQuestionAnswering"),_Dr=o(" (RoFormer model)"),uDr=l(),r5=a("li"),BCe=a("strong"),bDr=o("xlm"),vDr=o(" \u2014 "),vee=a("a"),FDr=o("TFXLMForQuestionAnsweringSimple"),TDr=o(" (XLM model)"),MDr=l(),t5=a("li"),ICe=a("strong"),EDr=o("xlm-roberta"),CDr=o(" \u2014 "),Fee=a("a"),wDr=o("TFXLMRobertaForQuestionAnswering"),ADr=o(" (XLM-RoBERTa model)"),LDr=l(),a5=a("li"),NCe=a("strong"),yDr=o("xlnet"),xDr=o(" \u2014 "),Tee=a("a"),$Dr=o("TFXLNetForQuestionAnsweringSimple"),kDr=o(" (XLNet model)"),SDr=l(),F(n5.$$.fragment),DWe=l(),Xc=a("h2"),s5=a("a"),qCe=a("span"),F(h$.$$.fragment),RDr=l(),jCe=a("span"),PDr=o("TFAutoModelForVision2Seq"),GWe=l(),hr=a("div"),F(p$.$$.fragment),BDr=l(),zc=a("p"),IDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mee=a("a"),NDr=o("from_pretrained()"),qDr=o(" class method or the "),Eee=a("a"),jDr=o("from_config()"),DDr=o(` class
method.`),GDr=l(),_$=a("p"),ODr=o("This class cannot be instantiated directly using "),DCe=a("code"),VDr=o("__init__()"),XDr=o(" (throws an error)."),zDr=l(),zt=a("div"),F(u$.$$.fragment),WDr=l(),GCe=a("p"),QDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HDr=l(),Wc=a("p"),UDr=o(`Note:
Loading a model from its configuration file does `),OCe=a("strong"),JDr=o("not"),YDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),KDr=o("from_pretrained()"),ZDr=o(" to load the model weights."),eGr=l(),F(l5.$$.fragment),oGr=l(),Or=a("div"),F(b$.$$.fragment),rGr=l(),VCe=a("p"),tGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aGr=l(),Fn=a("p"),nGr=o("The model class to instantiate is selected based on the "),XCe=a("code"),sGr=o("model_type"),lGr=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),cGr=o("pretrained_model_name_or_path"),fGr=o(":"),mGr=l(),QCe=a("ul"),i5=a("li"),HCe=a("strong"),gGr=o("vision-encoder-decoder"),hGr=o(" \u2014 "),wee=a("a"),pGr=o("TFVisionEncoderDecoderModel"),_Gr=o(" (Vision Encoder decoder model)"),uGr=l(),F(d5.$$.fragment),OWe=l(),Qc=a("h2"),c5=a("a"),UCe=a("span"),F(v$.$$.fragment),bGr=l(),JCe=a("span"),vGr=o("TFAutoModelForSpeechSeq2Seq"),VWe=l(),pr=a("div"),F(F$.$$.fragment),FGr=l(),Hc=a("p"),TGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Aee=a("a"),MGr=o("from_pretrained()"),EGr=o(" class method or the "),Lee=a("a"),CGr=o("from_config()"),wGr=o(` class
method.`),AGr=l(),T$=a("p"),LGr=o("This class cannot be instantiated directly using "),YCe=a("code"),yGr=o("__init__()"),xGr=o(" (throws an error)."),$Gr=l(),Wt=a("div"),F(M$.$$.fragment),kGr=l(),KCe=a("p"),SGr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RGr=l(),Uc=a("p"),PGr=o(`Note:
Loading a model from its configuration file does `),ZCe=a("strong"),BGr=o("not"),IGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),NGr=o("from_pretrained()"),qGr=o(" to load the model weights."),jGr=l(),F(f5.$$.fragment),DGr=l(),Vr=a("div"),F(E$.$$.fragment),GGr=l(),e5e=a("p"),OGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VGr=l(),Tn=a("p"),XGr=o("The model class to instantiate is selected based on the "),o5e=a("code"),zGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),UGr=o("pretrained_model_name_or_path"),JGr=o(":"),YGr=l(),a5e=a("ul"),m5=a("li"),n5e=a("strong"),KGr=o("speech_to_text"),ZGr=o(" \u2014 "),xee=a("a"),eOr=o("TFSpeech2TextForConditionalGeneration"),oOr=o(" (Speech2Text model)"),rOr=l(),F(g5.$$.fragment),XWe=l(),Jc=a("h2"),h5=a("a"),s5e=a("span"),F(C$.$$.fragment),tOr=l(),l5e=a("span"),aOr=o("FlaxAutoModel"),zWe=l(),_r=a("div"),F(w$.$$.fragment),nOr=l(),Yc=a("p"),sOr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$ee=a("a"),lOr=o("from_pretrained()"),iOr=o(" class method or the "),kee=a("a"),dOr=o("from_config()"),cOr=o(` class
method.`),fOr=l(),A$=a("p"),mOr=o("This class cannot be instantiated directly using "),i5e=a("code"),gOr=o("__init__()"),hOr=o(" (throws an error)."),pOr=l(),Qt=a("div"),F(L$.$$.fragment),_Or=l(),d5e=a("p"),uOr=o("Instantiates one of the base model classes of the library from a configuration."),bOr=l(),Kc=a("p"),vOr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),FOr=o("not"),TOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),MOr=o("from_pretrained()"),EOr=o(" to load the model weights."),COr=l(),F(p5.$$.fragment),wOr=l(),Xr=a("div"),F(y$.$$.fragment),AOr=l(),f5e=a("p"),LOr=o("Instantiate one of the base model classes of the library from a pretrained model."),yOr=l(),Mn=a("p"),xOr=o("The model class to instantiate is selected based on the "),m5e=a("code"),$Or=o("model_type"),kOr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),POr=o("pretrained_model_name_or_path"),BOr=o(":"),IOr=l(),oe=a("ul"),_5=a("li"),p5e=a("strong"),NOr=o("albert"),qOr=o(" \u2014 "),Ree=a("a"),jOr=o("FlaxAlbertModel"),DOr=o(" (ALBERT model)"),GOr=l(),u5=a("li"),_5e=a("strong"),OOr=o("bart"),VOr=o(" \u2014 "),Pee=a("a"),XOr=o("FlaxBartModel"),zOr=o(" (BART model)"),WOr=l(),b5=a("li"),u5e=a("strong"),QOr=o("beit"),HOr=o(" \u2014 "),Bee=a("a"),UOr=o("FlaxBeitModel"),JOr=o(" (BEiT model)"),YOr=l(),v5=a("li"),b5e=a("strong"),KOr=o("bert"),ZOr=o(" \u2014 "),Iee=a("a"),eVr=o("FlaxBertModel"),oVr=o(" (BERT model)"),rVr=l(),F5=a("li"),v5e=a("strong"),tVr=o("big_bird"),aVr=o(" \u2014 "),Nee=a("a"),nVr=o("FlaxBigBirdModel"),sVr=o(" (BigBird model)"),lVr=l(),T5=a("li"),F5e=a("strong"),iVr=o("blenderbot"),dVr=o(" \u2014 "),qee=a("a"),cVr=o("FlaxBlenderbotModel"),fVr=o(" (Blenderbot model)"),mVr=l(),M5=a("li"),T5e=a("strong"),gVr=o("blenderbot-small"),hVr=o(" \u2014 "),jee=a("a"),pVr=o("FlaxBlenderbotSmallModel"),_Vr=o(" (BlenderbotSmall model)"),uVr=l(),E5=a("li"),M5e=a("strong"),bVr=o("clip"),vVr=o(" \u2014 "),Dee=a("a"),FVr=o("FlaxCLIPModel"),TVr=o(" (CLIP model)"),MVr=l(),C5=a("li"),E5e=a("strong"),EVr=o("distilbert"),CVr=o(" \u2014 "),Gee=a("a"),wVr=o("FlaxDistilBertModel"),AVr=o(" (DistilBERT model)"),LVr=l(),w5=a("li"),C5e=a("strong"),yVr=o("electra"),xVr=o(" \u2014 "),Oee=a("a"),$Vr=o("FlaxElectraModel"),kVr=o(" (ELECTRA model)"),SVr=l(),A5=a("li"),w5e=a("strong"),RVr=o("gpt2"),PVr=o(" \u2014 "),Vee=a("a"),BVr=o("FlaxGPT2Model"),IVr=o(" (OpenAI GPT-2 model)"),NVr=l(),L5=a("li"),A5e=a("strong"),qVr=o("gpt_neo"),jVr=o(" \u2014 "),Xee=a("a"),DVr=o("FlaxGPTNeoModel"),GVr=o(" (GPT Neo model)"),OVr=l(),y5=a("li"),L5e=a("strong"),VVr=o("gptj"),XVr=o(" \u2014 "),zee=a("a"),zVr=o("FlaxGPTJModel"),WVr=o(" (GPT-J model)"),QVr=l(),x5=a("li"),y5e=a("strong"),HVr=o("longt5"),UVr=o(" \u2014 "),Wee=a("a"),JVr=o("FlaxLongT5Model"),YVr=o(" (LongT5 model)"),KVr=l(),$5=a("li"),x5e=a("strong"),ZVr=o("marian"),eXr=o(" \u2014 "),Qee=a("a"),oXr=o("FlaxMarianModel"),rXr=o(" (Marian model)"),tXr=l(),k5=a("li"),$5e=a("strong"),aXr=o("mbart"),nXr=o(" \u2014 "),Hee=a("a"),sXr=o("FlaxMBartModel"),lXr=o(" (mBART model)"),iXr=l(),S5=a("li"),k5e=a("strong"),dXr=o("mt5"),cXr=o(" \u2014 "),Uee=a("a"),fXr=o("FlaxMT5Model"),mXr=o(" (MT5 model)"),gXr=l(),R5=a("li"),S5e=a("strong"),hXr=o("opt"),pXr=o(" \u2014 "),Jee=a("a"),_Xr=o("FlaxOPTModel"),uXr=o(" (OPT model)"),bXr=l(),P5=a("li"),R5e=a("strong"),vXr=o("pegasus"),FXr=o(" \u2014 "),Yee=a("a"),TXr=o("FlaxPegasusModel"),MXr=o(" (Pegasus model)"),EXr=l(),B5=a("li"),P5e=a("strong"),CXr=o("roberta"),wXr=o(" \u2014 "),Kee=a("a"),AXr=o("FlaxRobertaModel"),LXr=o(" (RoBERTa model)"),yXr=l(),I5=a("li"),B5e=a("strong"),xXr=o("roformer"),$Xr=o(" \u2014 "),Zee=a("a"),kXr=o("FlaxRoFormerModel"),SXr=o(" (RoFormer model)"),RXr=l(),N5=a("li"),I5e=a("strong"),PXr=o("t5"),BXr=o(" \u2014 "),eoe=a("a"),IXr=o("FlaxT5Model"),NXr=o(" (T5 model)"),qXr=l(),q5=a("li"),N5e=a("strong"),jXr=o("vision-text-dual-encoder"),DXr=o(" \u2014 "),ooe=a("a"),GXr=o("FlaxVisionTextDualEncoderModel"),OXr=o(" (VisionTextDualEncoder model)"),VXr=l(),j5=a("li"),q5e=a("strong"),XXr=o("vit"),zXr=o(" \u2014 "),roe=a("a"),WXr=o("FlaxViTModel"),QXr=o(" (ViT model)"),HXr=l(),D5=a("li"),j5e=a("strong"),UXr=o("wav2vec2"),JXr=o(" \u2014 "),toe=a("a"),YXr=o("FlaxWav2Vec2Model"),KXr=o(" (Wav2Vec2 model)"),ZXr=l(),G5=a("li"),D5e=a("strong"),ezr=o("xglm"),ozr=o(" \u2014 "),aoe=a("a"),rzr=o("FlaxXGLMModel"),tzr=o(" (XGLM model)"),azr=l(),O5=a("li"),G5e=a("strong"),nzr=o("xlm-roberta"),szr=o(" \u2014 "),noe=a("a"),lzr=o("FlaxXLMRobertaModel"),izr=o(" (XLM-RoBERTa model)"),dzr=l(),F(V5.$$.fragment),WWe=l(),Zc=a("h2"),X5=a("a"),O5e=a("span"),F(x$.$$.fragment),czr=l(),V5e=a("span"),fzr=o("FlaxAutoModelForCausalLM"),QWe=l(),ur=a("div"),F($$.$$.fragment),mzr=l(),ef=a("p"),gzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),soe=a("a"),hzr=o("from_pretrained()"),pzr=o(" class method or the "),loe=a("a"),_zr=o("from_config()"),uzr=o(` class
method.`),bzr=l(),k$=a("p"),vzr=o("This class cannot be instantiated directly using "),X5e=a("code"),Fzr=o("__init__()"),Tzr=o(" (throws an error)."),Mzr=l(),Ht=a("div"),F(S$.$$.fragment),Ezr=l(),z5e=a("p"),Czr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wzr=l(),of=a("p"),Azr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),Lzr=o("not"),yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("a"),xzr=o("from_pretrained()"),$zr=o(" to load the model weights."),kzr=l(),F(z5.$$.fragment),Szr=l(),zr=a("div"),F(R$.$$.fragment),Rzr=l(),Q5e=a("p"),Pzr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bzr=l(),En=a("p"),Izr=o("The model class to instantiate is selected based on the "),H5e=a("code"),Nzr=o("model_type"),qzr=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),jzr=o("pretrained_model_name_or_path"),Dzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(":"),Vzr=l(),xe=a("ul"),W5=a("li"),Y5e=a("strong"),Xzr=o("bart"),zzr=o(" \u2014 "),doe=a("a"),Wzr=o("FlaxBartForCausalLM"),Qzr=o(" (BART model)"),Hzr=l(),Q5=a("li"),K5e=a("strong"),Uzr=o("bert"),Jzr=o(" \u2014 "),coe=a("a"),Yzr=o("FlaxBertForCausalLM"),Kzr=o(" (BERT model)"),Zzr=l(),H5=a("li"),Z5e=a("strong"),eWr=o("big_bird"),oWr=o(" \u2014 "),foe=a("a"),rWr=o("FlaxBigBirdForCausalLM"),tWr=o(" (BigBird model)"),aWr=l(),U5=a("li"),e0e=a("strong"),nWr=o("electra"),sWr=o(" \u2014 "),moe=a("a"),lWr=o("FlaxElectraForCausalLM"),iWr=o(" (ELECTRA model)"),dWr=l(),J5=a("li"),o0e=a("strong"),cWr=o("gpt2"),fWr=o(" \u2014 "),goe=a("a"),mWr=o("FlaxGPT2LMHeadModel"),gWr=o(" (OpenAI GPT-2 model)"),hWr=l(),Y5=a("li"),r0e=a("strong"),pWr=o("gpt_neo"),_Wr=o(" \u2014 "),hoe=a("a"),uWr=o("FlaxGPTNeoForCausalLM"),bWr=o(" (GPT Neo model)"),vWr=l(),K5=a("li"),t0e=a("strong"),FWr=o("gptj"),TWr=o(" \u2014 "),poe=a("a"),MWr=o("FlaxGPTJForCausalLM"),EWr=o(" (GPT-J model)"),CWr=l(),Z5=a("li"),a0e=a("strong"),wWr=o("opt"),AWr=o(" \u2014 "),_oe=a("a"),LWr=o("FlaxOPTForCausalLM"),yWr=o(" (OPT model)"),xWr=l(),e0=a("li"),n0e=a("strong"),$Wr=o("roberta"),kWr=o(" \u2014 "),uoe=a("a"),SWr=o("FlaxRobertaForCausalLM"),RWr=o(" (RoBERTa model)"),PWr=l(),o0=a("li"),s0e=a("strong"),BWr=o("xglm"),IWr=o(" \u2014 "),boe=a("a"),NWr=o("FlaxXGLMForCausalLM"),qWr=o(" (XGLM model)"),jWr=l(),F(r0.$$.fragment),HWe=l(),rf=a("h2"),t0=a("a"),l0e=a("span"),F(P$.$$.fragment),DWr=l(),i0e=a("span"),GWr=o("FlaxAutoModelForPreTraining"),UWe=l(),br=a("div"),F(B$.$$.fragment),OWr=l(),tf=a("p"),VWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),voe=a("a"),XWr=o("from_pretrained()"),zWr=o(" class method or the "),Foe=a("a"),WWr=o("from_config()"),QWr=o(` class
method.`),HWr=l(),I$=a("p"),UWr=o("This class cannot be instantiated directly using "),d0e=a("code"),JWr=o("__init__()"),YWr=o(" (throws an error)."),KWr=l(),Ut=a("div"),F(N$.$$.fragment),ZWr=l(),c0e=a("p"),eQr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oQr=l(),af=a("p"),rQr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),tQr=o("not"),aQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),nQr=o("from_pretrained()"),sQr=o(" to load the model weights."),lQr=l(),F(a0.$$.fragment),iQr=l(),Wr=a("div"),F(q$.$$.fragment),dQr=l(),m0e=a("p"),cQr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fQr=l(),Cn=a("p"),mQr=o("The model class to instantiate is selected based on the "),g0e=a("code"),gQr=o("model_type"),hQr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),pQr=o("pretrained_model_name_or_path"),_Qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),uQr=o("pretrained_model_name_or_path"),bQr=o(":"),vQr=l(),Ee=a("ul"),n0=a("li"),_0e=a("strong"),FQr=o("albert"),TQr=o(" \u2014 "),Moe=a("a"),MQr=o("FlaxAlbertForPreTraining"),EQr=o(" (ALBERT model)"),CQr=l(),s0=a("li"),u0e=a("strong"),wQr=o("bart"),AQr=o(" \u2014 "),Eoe=a("a"),LQr=o("FlaxBartForConditionalGeneration"),yQr=o(" (BART model)"),xQr=l(),l0=a("li"),b0e=a("strong"),$Qr=o("bert"),kQr=o(" \u2014 "),Coe=a("a"),SQr=o("FlaxBertForPreTraining"),RQr=o(" (BERT model)"),PQr=l(),i0=a("li"),v0e=a("strong"),BQr=o("big_bird"),IQr=o(" \u2014 "),woe=a("a"),NQr=o("FlaxBigBirdForPreTraining"),qQr=o(" (BigBird model)"),jQr=l(),d0=a("li"),F0e=a("strong"),DQr=o("electra"),GQr=o(" \u2014 "),Aoe=a("a"),OQr=o("FlaxElectraForPreTraining"),VQr=o(" (ELECTRA model)"),XQr=l(),c0=a("li"),T0e=a("strong"),zQr=o("longt5"),WQr=o(" \u2014 "),Loe=a("a"),QQr=o("FlaxLongT5ForConditionalGeneration"),HQr=o(" (LongT5 model)"),UQr=l(),f0=a("li"),M0e=a("strong"),JQr=o("mbart"),YQr=o(" \u2014 "),yoe=a("a"),KQr=o("FlaxMBartForConditionalGeneration"),ZQr=o(" (mBART model)"),eHr=l(),m0=a("li"),E0e=a("strong"),oHr=o("mt5"),rHr=o(" \u2014 "),xoe=a("a"),tHr=o("FlaxMT5ForConditionalGeneration"),aHr=o(" (MT5 model)"),nHr=l(),g0=a("li"),C0e=a("strong"),sHr=o("roberta"),lHr=o(" \u2014 "),$oe=a("a"),iHr=o("FlaxRobertaForMaskedLM"),dHr=o(" (RoBERTa model)"),cHr=l(),h0=a("li"),w0e=a("strong"),fHr=o("roformer"),mHr=o(" \u2014 "),koe=a("a"),gHr=o("FlaxRoFormerForMaskedLM"),hHr=o(" (RoFormer model)"),pHr=l(),p0=a("li"),A0e=a("strong"),_Hr=o("t5"),uHr=o(" \u2014 "),Soe=a("a"),bHr=o("FlaxT5ForConditionalGeneration"),vHr=o(" (T5 model)"),FHr=l(),_0=a("li"),L0e=a("strong"),THr=o("wav2vec2"),MHr=o(" \u2014 "),Roe=a("a"),EHr=o("FlaxWav2Vec2ForPreTraining"),CHr=o(" (Wav2Vec2 model)"),wHr=l(),u0=a("li"),y0e=a("strong"),AHr=o("xlm-roberta"),LHr=o(" \u2014 "),Poe=a("a"),yHr=o("FlaxXLMRobertaForMaskedLM"),xHr=o(" (XLM-RoBERTa model)"),$Hr=l(),F(b0.$$.fragment),JWe=l(),nf=a("h2"),v0=a("a"),x0e=a("span"),F(j$.$$.fragment),kHr=l(),$0e=a("span"),SHr=o("FlaxAutoModelForMaskedLM"),YWe=l(),vr=a("div"),F(D$.$$.fragment),RHr=l(),sf=a("p"),PHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Boe=a("a"),BHr=o("from_pretrained()"),IHr=o(" class method or the "),Ioe=a("a"),NHr=o("from_config()"),qHr=o(` class
method.`),jHr=l(),G$=a("p"),DHr=o("This class cannot be instantiated directly using "),k0e=a("code"),GHr=o("__init__()"),OHr=o(" (throws an error)."),VHr=l(),Jt=a("div"),F(O$.$$.fragment),XHr=l(),S0e=a("p"),zHr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WHr=l(),lf=a("p"),QHr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),HHr=o("not"),UHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),JHr=o("from_pretrained()"),YHr=o(" to load the model weights."),KHr=l(),F(F0.$$.fragment),ZHr=l(),Qr=a("div"),F(V$.$$.fragment),eUr=l(),P0e=a("p"),oUr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rUr=l(),wn=a("p"),tUr=o("The model class to instantiate is selected based on the "),B0e=a("code"),aUr=o("model_type"),nUr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),iUr=o("pretrained_model_name_or_path"),dUr=o(":"),cUr=l(),$e=a("ul"),T0=a("li"),q0e=a("strong"),fUr=o("albert"),mUr=o(" \u2014 "),qoe=a("a"),gUr=o("FlaxAlbertForMaskedLM"),hUr=o(" (ALBERT model)"),pUr=l(),M0=a("li"),j0e=a("strong"),_Ur=o("bart"),uUr=o(" \u2014 "),joe=a("a"),bUr=o("FlaxBartForConditionalGeneration"),vUr=o(" (BART model)"),FUr=l(),E0=a("li"),D0e=a("strong"),TUr=o("bert"),MUr=o(" \u2014 "),Doe=a("a"),EUr=o("FlaxBertForMaskedLM"),CUr=o(" (BERT model)"),wUr=l(),C0=a("li"),G0e=a("strong"),AUr=o("big_bird"),LUr=o(" \u2014 "),Goe=a("a"),yUr=o("FlaxBigBirdForMaskedLM"),xUr=o(" (BigBird model)"),$Ur=l(),w0=a("li"),O0e=a("strong"),kUr=o("distilbert"),SUr=o(" \u2014 "),Ooe=a("a"),RUr=o("FlaxDistilBertForMaskedLM"),PUr=o(" (DistilBERT model)"),BUr=l(),A0=a("li"),V0e=a("strong"),IUr=o("electra"),NUr=o(" \u2014 "),Voe=a("a"),qUr=o("FlaxElectraForMaskedLM"),jUr=o(" (ELECTRA model)"),DUr=l(),L0=a("li"),X0e=a("strong"),GUr=o("mbart"),OUr=o(" \u2014 "),Xoe=a("a"),VUr=o("FlaxMBartForConditionalGeneration"),XUr=o(" (mBART model)"),zUr=l(),y0=a("li"),z0e=a("strong"),WUr=o("roberta"),QUr=o(" \u2014 "),zoe=a("a"),HUr=o("FlaxRobertaForMaskedLM"),UUr=o(" (RoBERTa model)"),JUr=l(),x0=a("li"),W0e=a("strong"),YUr=o("roformer"),KUr=o(" \u2014 "),Woe=a("a"),ZUr=o("FlaxRoFormerForMaskedLM"),eJr=o(" (RoFormer model)"),oJr=l(),$0=a("li"),Q0e=a("strong"),rJr=o("xlm-roberta"),tJr=o(" \u2014 "),Qoe=a("a"),aJr=o("FlaxXLMRobertaForMaskedLM"),nJr=o(" (XLM-RoBERTa model)"),sJr=l(),F(k0.$$.fragment),KWe=l(),df=a("h2"),S0=a("a"),H0e=a("span"),F(X$.$$.fragment),lJr=l(),U0e=a("span"),iJr=o("FlaxAutoModelForSeq2SeqLM"),ZWe=l(),Fr=a("div"),F(z$.$$.fragment),dJr=l(),cf=a("p"),cJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Hoe=a("a"),fJr=o("from_pretrained()"),mJr=o(" class method or the "),Uoe=a("a"),gJr=o("from_config()"),hJr=o(` class
method.`),pJr=l(),W$=a("p"),_Jr=o("This class cannot be instantiated directly using "),J0e=a("code"),uJr=o("__init__()"),bJr=o(" (throws an error)."),vJr=l(),Yt=a("div"),F(Q$.$$.fragment),FJr=l(),Y0e=a("p"),TJr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MJr=l(),ff=a("p"),EJr=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),CJr=o("not"),wJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=a("a"),AJr=o("from_pretrained()"),LJr=o(" to load the model weights."),yJr=l(),F(R0.$$.fragment),xJr=l(),Hr=a("div"),F(H$.$$.fragment),$Jr=l(),Z0e=a("p"),kJr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SJr=l(),An=a("p"),RJr=o("The model class to instantiate is selected based on the "),ewe=a("code"),PJr=o("model_type"),BJr=o(` property of the config object (either
passed as an argument or loaded from `),owe=a("code"),IJr=o("pretrained_model_name_or_path"),NJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=a("code"),qJr=o("pretrained_model_name_or_path"),jJr=o(":"),DJr=l(),ke=a("ul"),P0=a("li"),twe=a("strong"),GJr=o("bart"),OJr=o(" \u2014 "),Yoe=a("a"),VJr=o("FlaxBartForConditionalGeneration"),XJr=o(" (BART model)"),zJr=l(),B0=a("li"),awe=a("strong"),WJr=o("blenderbot"),QJr=o(" \u2014 "),Koe=a("a"),HJr=o("FlaxBlenderbotForConditionalGeneration"),UJr=o(" (Blenderbot model)"),JJr=l(),I0=a("li"),nwe=a("strong"),YJr=o("blenderbot-small"),KJr=o(" \u2014 "),Zoe=a("a"),ZJr=o("FlaxBlenderbotSmallForConditionalGeneration"),eYr=o(" (BlenderbotSmall model)"),oYr=l(),N0=a("li"),swe=a("strong"),rYr=o("encoder-decoder"),tYr=o(" \u2014 "),ere=a("a"),aYr=o("FlaxEncoderDecoderModel"),nYr=o(" (Encoder decoder model)"),sYr=l(),q0=a("li"),lwe=a("strong"),lYr=o("longt5"),iYr=o(" \u2014 "),ore=a("a"),dYr=o("FlaxLongT5ForConditionalGeneration"),cYr=o(" (LongT5 model)"),fYr=l(),j0=a("li"),iwe=a("strong"),mYr=o("marian"),gYr=o(" \u2014 "),rre=a("a"),hYr=o("FlaxMarianMTModel"),pYr=o(" (Marian model)"),_Yr=l(),D0=a("li"),dwe=a("strong"),uYr=o("mbart"),bYr=o(" \u2014 "),tre=a("a"),vYr=o("FlaxMBartForConditionalGeneration"),FYr=o(" (mBART model)"),TYr=l(),G0=a("li"),cwe=a("strong"),MYr=o("mt5"),EYr=o(" \u2014 "),are=a("a"),CYr=o("FlaxMT5ForConditionalGeneration"),wYr=o(" (MT5 model)"),AYr=l(),O0=a("li"),fwe=a("strong"),LYr=o("pegasus"),yYr=o(" \u2014 "),nre=a("a"),xYr=o("FlaxPegasusForConditionalGeneration"),$Yr=o(" (Pegasus model)"),kYr=l(),V0=a("li"),mwe=a("strong"),SYr=o("t5"),RYr=o(" \u2014 "),sre=a("a"),PYr=o("FlaxT5ForConditionalGeneration"),BYr=o(" (T5 model)"),IYr=l(),F(X0.$$.fragment),eQe=l(),mf=a("h2"),z0=a("a"),gwe=a("span"),F(U$.$$.fragment),NYr=l(),hwe=a("span"),qYr=o("FlaxAutoModelForSequenceClassification"),oQe=l(),Tr=a("div"),F(J$.$$.fragment),jYr=l(),gf=a("p"),DYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lre=a("a"),GYr=o("from_pretrained()"),OYr=o(" class method or the "),ire=a("a"),VYr=o("from_config()"),XYr=o(` class
method.`),zYr=l(),Y$=a("p"),WYr=o("This class cannot be instantiated directly using "),pwe=a("code"),QYr=o("__init__()"),HYr=o(" (throws an error)."),UYr=l(),Kt=a("div"),F(K$.$$.fragment),JYr=l(),_we=a("p"),YYr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KYr=l(),hf=a("p"),ZYr=o(`Note:
Loading a model from its configuration file does `),uwe=a("strong"),eKr=o("not"),oKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=a("a"),rKr=o("from_pretrained()"),tKr=o(" to load the model weights."),aKr=l(),F(W0.$$.fragment),nKr=l(),Ur=a("div"),F(Z$.$$.fragment),sKr=l(),bwe=a("p"),lKr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iKr=l(),Ln=a("p"),dKr=o("The model class to instantiate is selected based on the "),vwe=a("code"),cKr=o("model_type"),fKr=o(` property of the config object (either
passed as an argument or loaded from `),Fwe=a("code"),mKr=o("pretrained_model_name_or_path"),gKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=a("code"),hKr=o("pretrained_model_name_or_path"),pKr=o(":"),_Kr=l(),Se=a("ul"),Q0=a("li"),Mwe=a("strong"),uKr=o("albert"),bKr=o(" \u2014 "),cre=a("a"),vKr=o("FlaxAlbertForSequenceClassification"),FKr=o(" (ALBERT model)"),TKr=l(),H0=a("li"),Ewe=a("strong"),MKr=o("bart"),EKr=o(" \u2014 "),fre=a("a"),CKr=o("FlaxBartForSequenceClassification"),wKr=o(" (BART model)"),AKr=l(),U0=a("li"),Cwe=a("strong"),LKr=o("bert"),yKr=o(" \u2014 "),mre=a("a"),xKr=o("FlaxBertForSequenceClassification"),$Kr=o(" (BERT model)"),kKr=l(),J0=a("li"),wwe=a("strong"),SKr=o("big_bird"),RKr=o(" \u2014 "),gre=a("a"),PKr=o("FlaxBigBirdForSequenceClassification"),BKr=o(" (BigBird model)"),IKr=l(),Y0=a("li"),Awe=a("strong"),NKr=o("distilbert"),qKr=o(" \u2014 "),hre=a("a"),jKr=o("FlaxDistilBertForSequenceClassification"),DKr=o(" (DistilBERT model)"),GKr=l(),K0=a("li"),Lwe=a("strong"),OKr=o("electra"),VKr=o(" \u2014 "),pre=a("a"),XKr=o("FlaxElectraForSequenceClassification"),zKr=o(" (ELECTRA model)"),WKr=l(),Z0=a("li"),ywe=a("strong"),QKr=o("mbart"),HKr=o(" \u2014 "),_re=a("a"),UKr=o("FlaxMBartForSequenceClassification"),JKr=o(" (mBART model)"),YKr=l(),ew=a("li"),xwe=a("strong"),KKr=o("roberta"),ZKr=o(" \u2014 "),ure=a("a"),eZr=o("FlaxRobertaForSequenceClassification"),oZr=o(" (RoBERTa model)"),rZr=l(),ow=a("li"),$we=a("strong"),tZr=o("roformer"),aZr=o(" \u2014 "),bre=a("a"),nZr=o("FlaxRoFormerForSequenceClassification"),sZr=o(" (RoFormer model)"),lZr=l(),rw=a("li"),kwe=a("strong"),iZr=o("xlm-roberta"),dZr=o(" \u2014 "),vre=a("a"),cZr=o("FlaxXLMRobertaForSequenceClassification"),fZr=o(" (XLM-RoBERTa model)"),mZr=l(),F(tw.$$.fragment),rQe=l(),pf=a("h2"),aw=a("a"),Swe=a("span"),F(ek.$$.fragment),gZr=l(),Rwe=a("span"),hZr=o("FlaxAutoModelForQuestionAnswering"),tQe=l(),Mr=a("div"),F(ok.$$.fragment),pZr=l(),_f=a("p"),_Zr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fre=a("a"),uZr=o("from_pretrained()"),bZr=o(" class method or the "),Tre=a("a"),vZr=o("from_config()"),FZr=o(` class
method.`),TZr=l(),rk=a("p"),MZr=o("This class cannot be instantiated directly using "),Pwe=a("code"),EZr=o("__init__()"),CZr=o(" (throws an error)."),wZr=l(),Zt=a("div"),F(tk.$$.fragment),AZr=l(),Bwe=a("p"),LZr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yZr=l(),uf=a("p"),xZr=o(`Note:
Loading a model from its configuration file does `),Iwe=a("strong"),$Zr=o("not"),kZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),SZr=o("from_pretrained()"),RZr=o(" to load the model weights."),PZr=l(),F(nw.$$.fragment),BZr=l(),Jr=a("div"),F(ak.$$.fragment),IZr=l(),Nwe=a("p"),NZr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qZr=l(),yn=a("p"),jZr=o("The model class to instantiate is selected based on the "),qwe=a("code"),DZr=o("model_type"),GZr=o(` property of the config object (either
passed as an argument or loaded from `),jwe=a("code"),OZr=o("pretrained_model_name_or_path"),VZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=a("code"),XZr=o("pretrained_model_name_or_path"),zZr=o(":"),WZr=l(),Re=a("ul"),sw=a("li"),Gwe=a("strong"),QZr=o("albert"),HZr=o(" \u2014 "),Ere=a("a"),UZr=o("FlaxAlbertForQuestionAnswering"),JZr=o(" (ALBERT model)"),YZr=l(),lw=a("li"),Owe=a("strong"),KZr=o("bart"),ZZr=o(" \u2014 "),Cre=a("a"),eet=o("FlaxBartForQuestionAnswering"),oet=o(" (BART model)"),ret=l(),iw=a("li"),Vwe=a("strong"),tet=o("bert"),aet=o(" \u2014 "),wre=a("a"),net=o("FlaxBertForQuestionAnswering"),set=o(" (BERT model)"),iet=l(),dw=a("li"),Xwe=a("strong"),det=o("big_bird"),cet=o(" \u2014 "),Are=a("a"),fet=o("FlaxBigBirdForQuestionAnswering"),met=o(" (BigBird model)"),get=l(),cw=a("li"),zwe=a("strong"),het=o("distilbert"),pet=o(" \u2014 "),Lre=a("a"),_et=o("FlaxDistilBertForQuestionAnswering"),uet=o(" (DistilBERT model)"),bet=l(),fw=a("li"),Wwe=a("strong"),vet=o("electra"),Fet=o(" \u2014 "),yre=a("a"),Tet=o("FlaxElectraForQuestionAnswering"),Met=o(" (ELECTRA model)"),Eet=l(),mw=a("li"),Qwe=a("strong"),Cet=o("mbart"),wet=o(" \u2014 "),xre=a("a"),Aet=o("FlaxMBartForQuestionAnswering"),Let=o(" (mBART model)"),yet=l(),gw=a("li"),Hwe=a("strong"),xet=o("roberta"),$et=o(" \u2014 "),$re=a("a"),ket=o("FlaxRobertaForQuestionAnswering"),Set=o(" (RoBERTa model)"),Ret=l(),hw=a("li"),Uwe=a("strong"),Pet=o("roformer"),Bet=o(" \u2014 "),kre=a("a"),Iet=o("FlaxRoFormerForQuestionAnswering"),Net=o(" (RoFormer model)"),qet=l(),pw=a("li"),Jwe=a("strong"),jet=o("xlm-roberta"),Det=o(" \u2014 "),Sre=a("a"),Get=o("FlaxXLMRobertaForQuestionAnswering"),Oet=o(" (XLM-RoBERTa model)"),Vet=l(),F(_w.$$.fragment),aQe=l(),bf=a("h2"),uw=a("a"),Ywe=a("span"),F(nk.$$.fragment),Xet=l(),Kwe=a("span"),zet=o("FlaxAutoModelForTokenClassification"),nQe=l(),Er=a("div"),F(sk.$$.fragment),Wet=l(),vf=a("p"),Qet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rre=a("a"),Het=o("from_pretrained()"),Uet=o(" class method or the "),Pre=a("a"),Jet=o("from_config()"),Yet=o(` class
method.`),Ket=l(),lk=a("p"),Zet=o("This class cannot be instantiated directly using "),Zwe=a("code"),eot=o("__init__()"),oot=o(" (throws an error)."),rot=l(),ea=a("div"),F(ik.$$.fragment),tot=l(),eAe=a("p"),aot=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),not=l(),Ff=a("p"),sot=o(`Note:
Loading a model from its configuration file does `),oAe=a("strong"),lot=o("not"),iot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),dot=o("from_pretrained()"),cot=o(" to load the model weights."),fot=l(),F(bw.$$.fragment),mot=l(),Yr=a("div"),F(dk.$$.fragment),got=l(),rAe=a("p"),hot=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pot=l(),xn=a("p"),_ot=o("The model class to instantiate is selected based on the "),tAe=a("code"),uot=o("model_type"),bot=o(` property of the config object (either
passed as an argument or loaded from `),aAe=a("code"),vot=o("pretrained_model_name_or_path"),Fot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=a("code"),Tot=o("pretrained_model_name_or_path"),Mot=o(":"),Eot=l(),Xe=a("ul"),vw=a("li"),sAe=a("strong"),Cot=o("albert"),wot=o(" \u2014 "),Ire=a("a"),Aot=o("FlaxAlbertForTokenClassification"),Lot=o(" (ALBERT model)"),yot=l(),Fw=a("li"),lAe=a("strong"),xot=o("bert"),$ot=o(" \u2014 "),Nre=a("a"),kot=o("FlaxBertForTokenClassification"),Sot=o(" (BERT model)"),Rot=l(),Tw=a("li"),iAe=a("strong"),Pot=o("big_bird"),Bot=o(" \u2014 "),qre=a("a"),Iot=o("FlaxBigBirdForTokenClassification"),Not=o(" (BigBird model)"),qot=l(),Mw=a("li"),dAe=a("strong"),jot=o("distilbert"),Dot=o(" \u2014 "),jre=a("a"),Got=o("FlaxDistilBertForTokenClassification"),Oot=o(" (DistilBERT model)"),Vot=l(),Ew=a("li"),cAe=a("strong"),Xot=o("electra"),zot=o(" \u2014 "),Dre=a("a"),Wot=o("FlaxElectraForTokenClassification"),Qot=o(" (ELECTRA model)"),Hot=l(),Cw=a("li"),fAe=a("strong"),Uot=o("roberta"),Jot=o(" \u2014 "),Gre=a("a"),Yot=o("FlaxRobertaForTokenClassification"),Kot=o(" (RoBERTa model)"),Zot=l(),ww=a("li"),mAe=a("strong"),ert=o("roformer"),ort=o(" \u2014 "),Ore=a("a"),rrt=o("FlaxRoFormerForTokenClassification"),trt=o(" (RoFormer model)"),art=l(),Aw=a("li"),gAe=a("strong"),nrt=o("xlm-roberta"),srt=o(" \u2014 "),Vre=a("a"),lrt=o("FlaxXLMRobertaForTokenClassification"),irt=o(" (XLM-RoBERTa model)"),drt=l(),F(Lw.$$.fragment),sQe=l(),Tf=a("h2"),yw=a("a"),hAe=a("span"),F(ck.$$.fragment),crt=l(),pAe=a("span"),frt=o("FlaxAutoModelForMultipleChoice"),lQe=l(),Cr=a("div"),F(fk.$$.fragment),mrt=l(),Mf=a("p"),grt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xre=a("a"),hrt=o("from_pretrained()"),prt=o(" class method or the "),zre=a("a"),_rt=o("from_config()"),urt=o(` class
method.`),brt=l(),mk=a("p"),vrt=o("This class cannot be instantiated directly using "),_Ae=a("code"),Frt=o("__init__()"),Trt=o(" (throws an error)."),Mrt=l(),oa=a("div"),F(gk.$$.fragment),Ert=l(),uAe=a("p"),Crt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wrt=l(),Ef=a("p"),Art=o(`Note:
Loading a model from its configuration file does `),bAe=a("strong"),Lrt=o("not"),yrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),xrt=o("from_pretrained()"),$rt=o(" to load the model weights."),krt=l(),F(xw.$$.fragment),Srt=l(),Kr=a("div"),F(hk.$$.fragment),Rrt=l(),vAe=a("p"),Prt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Brt=l(),$n=a("p"),Irt=o("The model class to instantiate is selected based on the "),FAe=a("code"),Nrt=o("model_type"),qrt=o(` property of the config object (either
passed as an argument or loaded from `),TAe=a("code"),jrt=o("pretrained_model_name_or_path"),Drt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=a("code"),Grt=o("pretrained_model_name_or_path"),Ort=o(":"),Vrt=l(),ze=a("ul"),$w=a("li"),EAe=a("strong"),Xrt=o("albert"),zrt=o(" \u2014 "),Qre=a("a"),Wrt=o("FlaxAlbertForMultipleChoice"),Qrt=o(" (ALBERT model)"),Hrt=l(),kw=a("li"),CAe=a("strong"),Urt=o("bert"),Jrt=o(" \u2014 "),Hre=a("a"),Yrt=o("FlaxBertForMultipleChoice"),Krt=o(" (BERT model)"),Zrt=l(),Sw=a("li"),wAe=a("strong"),ett=o("big_bird"),ott=o(" \u2014 "),Ure=a("a"),rtt=o("FlaxBigBirdForMultipleChoice"),ttt=o(" (BigBird model)"),att=l(),Rw=a("li"),AAe=a("strong"),ntt=o("distilbert"),stt=o(" \u2014 "),Jre=a("a"),ltt=o("FlaxDistilBertForMultipleChoice"),itt=o(" (DistilBERT model)"),dtt=l(),Pw=a("li"),LAe=a("strong"),ctt=o("electra"),ftt=o(" \u2014 "),Yre=a("a"),mtt=o("FlaxElectraForMultipleChoice"),gtt=o(" (ELECTRA model)"),htt=l(),Bw=a("li"),yAe=a("strong"),ptt=o("roberta"),_tt=o(" \u2014 "),Kre=a("a"),utt=o("FlaxRobertaForMultipleChoice"),btt=o(" (RoBERTa model)"),vtt=l(),Iw=a("li"),xAe=a("strong"),Ftt=o("roformer"),Ttt=o(" \u2014 "),Zre=a("a"),Mtt=o("FlaxRoFormerForMultipleChoice"),Ett=o(" (RoFormer model)"),Ctt=l(),Nw=a("li"),$Ae=a("strong"),wtt=o("xlm-roberta"),Att=o(" \u2014 "),ete=a("a"),Ltt=o("FlaxXLMRobertaForMultipleChoice"),ytt=o(" (XLM-RoBERTa model)"),xtt=l(),F(qw.$$.fragment),iQe=l(),Cf=a("h2"),jw=a("a"),kAe=a("span"),F(pk.$$.fragment),$tt=l(),SAe=a("span"),ktt=o("FlaxAutoModelForNextSentencePrediction"),dQe=l(),wr=a("div"),F(_k.$$.fragment),Stt=l(),wf=a("p"),Rtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ote=a("a"),Ptt=o("from_pretrained()"),Btt=o(" class method or the "),rte=a("a"),Itt=o("from_config()"),Ntt=o(` class
method.`),qtt=l(),uk=a("p"),jtt=o("This class cannot be instantiated directly using "),RAe=a("code"),Dtt=o("__init__()"),Gtt=o(" (throws an error)."),Ott=l(),ra=a("div"),F(bk.$$.fragment),Vtt=l(),PAe=a("p"),Xtt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ztt=l(),Af=a("p"),Wtt=o(`Note:
Loading a model from its configuration file does `),BAe=a("strong"),Qtt=o("not"),Htt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("a"),Utt=o("from_pretrained()"),Jtt=o(" to load the model weights."),Ytt=l(),F(Dw.$$.fragment),Ktt=l(),Zr=a("div"),F(vk.$$.fragment),Ztt=l(),IAe=a("p"),eat=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oat=l(),kn=a("p"),rat=o("The model class to instantiate is selected based on the "),NAe=a("code"),tat=o("model_type"),aat=o(` property of the config object (either
passed as an argument or loaded from `),qAe=a("code"),nat=o("pretrained_model_name_or_path"),sat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=a("code"),lat=o("pretrained_model_name_or_path"),iat=o(":"),dat=l(),DAe=a("ul"),Gw=a("li"),GAe=a("strong"),cat=o("bert"),fat=o(" \u2014 "),ate=a("a"),mat=o("FlaxBertForNextSentencePrediction"),gat=o(" (BERT model)"),hat=l(),F(Ow.$$.fragment),cQe=l(),Lf=a("h2"),Vw=a("a"),OAe=a("span"),F(Fk.$$.fragment),pat=l(),VAe=a("span"),_at=o("FlaxAutoModelForImageClassification"),fQe=l(),Ar=a("div"),F(Tk.$$.fragment),uat=l(),yf=a("p"),bat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nte=a("a"),vat=o("from_pretrained()"),Fat=o(" class method or the "),ste=a("a"),Tat=o("from_config()"),Mat=o(` class
method.`),Eat=l(),Mk=a("p"),Cat=o("This class cannot be instantiated directly using "),XAe=a("code"),wat=o("__init__()"),Aat=o(" (throws an error)."),Lat=l(),ta=a("div"),F(Ek.$$.fragment),yat=l(),zAe=a("p"),xat=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$at=l(),xf=a("p"),kat=o(`Note:
Loading a model from its configuration file does `),WAe=a("strong"),Sat=o("not"),Rat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=a("a"),Pat=o("from_pretrained()"),Bat=o(" to load the model weights."),Iat=l(),F(Xw.$$.fragment),Nat=l(),et=a("div"),F(Ck.$$.fragment),qat=l(),QAe=a("p"),jat=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dat=l(),Sn=a("p"),Gat=o("The model class to instantiate is selected based on the "),HAe=a("code"),Oat=o("model_type"),Vat=o(` property of the config object (either
passed as an argument or loaded from `),UAe=a("code"),Xat=o("pretrained_model_name_or_path"),zat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=a("code"),Wat=o("pretrained_model_name_or_path"),Qat=o(":"),Hat=l(),wk=a("ul"),zw=a("li"),YAe=a("strong"),Uat=o("beit"),Jat=o(" \u2014 "),ite=a("a"),Yat=o("FlaxBeitForImageClassification"),Kat=o(" (BEiT model)"),Zat=l(),Ww=a("li"),KAe=a("strong"),ent=o("vit"),ont=o(" \u2014 "),dte=a("a"),rnt=o("FlaxViTForImageClassification"),tnt=o(" (ViT model)"),ant=l(),F(Qw.$$.fragment),mQe=l(),$f=a("h2"),Hw=a("a"),ZAe=a("span"),F(Ak.$$.fragment),nnt=l(),e7e=a("span"),snt=o("FlaxAutoModelForVision2Seq"),gQe=l(),Lr=a("div"),F(Lk.$$.fragment),lnt=l(),kf=a("p"),int=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cte=a("a"),dnt=o("from_pretrained()"),cnt=o(" class method or the "),fte=a("a"),fnt=o("from_config()"),mnt=o(` class
method.`),gnt=l(),yk=a("p"),hnt=o("This class cannot be instantiated directly using "),o7e=a("code"),pnt=o("__init__()"),_nt=o(" (throws an error)."),unt=l(),aa=a("div"),F(xk.$$.fragment),bnt=l(),r7e=a("p"),vnt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fnt=l(),Sf=a("p"),Tnt=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),Mnt=o("not"),Ent=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("a"),Cnt=o("from_pretrained()"),wnt=o(" to load the model weights."),Ant=l(),F(Uw.$$.fragment),Lnt=l(),ot=a("div"),F($k.$$.fragment),ynt=l(),a7e=a("p"),xnt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$nt=l(),Rn=a("p"),knt=o("The model class to instantiate is selected based on the "),n7e=a("code"),Snt=o("model_type"),Rnt=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),Pnt=o("pretrained_model_name_or_path"),Bnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),Int=o("pretrained_model_name_or_path"),Nnt=o(":"),qnt=l(),i7e=a("ul"),Jw=a("li"),d7e=a("strong"),jnt=o("vision-encoder-decoder"),Dnt=o(" \u2014 "),gte=a("a"),Gnt=o("FlaxVisionEncoderDecoderModel"),Ont=o(" (Vision Encoder decoder model)"),Vnt=l(),F(Yw.$$.fragment),this.h()},l(f){const u=oJt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var kk=s(p);m=n(kk,"A",{id:!0,class:!0,href:!0});var c7e=s(m);_=n(c7e,"SPAN",{});var f7e=s(_);T(c.$$.fragment,f7e),f7e.forEach(t),c7e.forEach(t),h=i(kk),wo=n(kk,"SPAN",{});var m7e=s(wo);$i=r(m7e,"Auto Classes"),m7e.forEach(t),kk.forEach(t),If=i(f),lt=n(f,"P",{});var Sk=s(lt);ki=r(Sk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=n(Sk,"CODE",{});var g7e=s(Si);uL=r(g7e,"from_pretrained()"),g7e.forEach(t),Nf=r(Sk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Sk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Pn=s(Qe);Ri=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var h7e=s(Bn);bL=r(h7e,"AutoConfig"),h7e.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var p7e=s(Nn);vL=r(p7e,"AutoModel"),p7e.forEach(t),Pi=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var _7e=s(qn);FL=r(_7e,"AutoTokenizer"),_7e.forEach(t),Bi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var Rk=s(Ae);eR=r(Rk,"will create a model that is an instance of "),Ii=n(Rk,"A",{href:!0});var u7e=s(Ii);oR=r(u7e,"BertModel"),u7e.forEach(t),rR=r(Rk,"."),Rk.forEach(t),Ao=i(f),Ra=n(f,"P",{});var Pk=s(Ra);tR=r(Pk,"There is one class of "),jf=n(Pk,"CODE",{});var b7e=s(jf);aR=r(b7e,"AutoModel"),b7e.forEach(t),CUe=r(Pk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Pk.forEach(t),dze=i(f),Ni=n(f,"H2",{class:!0});var Bk=s(Ni);Df=n(Bk,"A",{id:!0,class:!0,href:!0});var v7e=s(Df);lne=n(v7e,"SPAN",{});var F7e=s(lne);T(TL.$$.fragment,F7e),F7e.forEach(t),v7e.forEach(t),wUe=i(Bk),ine=n(Bk,"SPAN",{});var T7e=s(ine);AUe=r(T7e,"Extending the Auto Classes"),T7e.forEach(t),Bk.forEach(t),cze=i(f),jn=n(f,"P",{});var Rf=s(jn);LUe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dne=n(Rf,"CODE",{});var M7e=s(dne);yUe=r(M7e,"NewModel"),M7e.forEach(t),xUe=r(Rf,", make sure you have a "),cne=n(Rf,"CODE",{});var E7e=s(cne);$Ue=r(E7e,"NewModelConfig"),E7e.forEach(t),kUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),fze=i(f),T(ML.$$.fragment,f),mze=i(f),nR=n(f,"P",{});var C7e=s(nR);SUe=r(C7e,"You will then be able to use the auto classes like you would usually do!"),C7e.forEach(t),gze=i(f),T(Gf.$$.fragment,f),hze=i(f),qi=n(f,"H2",{class:!0});var Ik=s(qi);Of=n(Ik,"A",{id:!0,class:!0,href:!0});var w7e=s(Of);fne=n(w7e,"SPAN",{});var A7e=s(fne);T(EL.$$.fragment,A7e),A7e.forEach(t),w7e.forEach(t),RUe=i(Ik),mne=n(Ik,"SPAN",{});var L7e=s(mne);PUe=r(L7e,"AutoConfig"),L7e.forEach(t),Ik.forEach(t),pze=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(CL.$$.fragment,nt),BUe=i(nt),wL=n(nt,"P",{});var Nk=s(wL);IUe=r(Nk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sR=n(Nk,"A",{href:!0});var y7e=s(sR);NUe=r(y7e,"from_pretrained()"),y7e.forEach(t),qUe=r(Nk," class method."),Nk.forEach(t),jUe=i(nt),AL=n(nt,"P",{});var qk=s(AL);DUe=r(qk,"This class cannot be instantiated directly using "),gne=n(qk,"CODE",{});var x7e=s(gne);GUe=r(x7e,"__init__()"),x7e.forEach(t),OUe=r(qk," (throws an error)."),qk.forEach(t),VUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(LL.$$.fragment,st),XUe=i(st),hne=n(st,"P",{});var $7e=s(hne);zUe=r($7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$7e.forEach(t),WUe=i(st),ji=n(st,"P",{});var Pf=s(ji);QUe=r(Pf,"The configuration class to instantiate is selected based on the "),pne=n(Pf,"CODE",{});var k7e=s(pne);HUe=r(k7e,"model_type"),k7e.forEach(t),UUe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_ne=n(Pf,"CODE",{});var S7e=s(_ne);JUe=r(S7e,"pretrained_model_name_or_path"),S7e.forEach(t),YUe=r(Pf,":"),Pf.forEach(t),KUe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var Kw=s(Vf);une=n(Kw,"STRONG",{});var R7e=s(une);ZUe=r(R7e,"albert"),R7e.forEach(t),eJe=r(Kw," \u2014 "),lR=n(Kw,"A",{href:!0});var P7e=s(lR);oJe=r(P7e,"AlbertConfig"),P7e.forEach(t),rJe=r(Kw," (ALBERT model)"),Kw.forEach(t),tJe=i(L),Xf=n(L,"LI",{});var Zw=s(Xf);bne=n(Zw,"STRONG",{});var B7e=s(bne);aJe=r(B7e,"bart"),B7e.forEach(t),nJe=r(Zw," \u2014 "),iR=n(Zw,"A",{href:!0});var I7e=s(iR);sJe=r(I7e,"BartConfig"),I7e.forEach(t),lJe=r(Zw," (BART model)"),Zw.forEach(t),iJe=i(L),zf=n(L,"LI",{});var eA=s(zf);vne=n(eA,"STRONG",{});var N7e=s(vne);dJe=r(N7e,"beit"),N7e.forEach(t),cJe=r(eA," \u2014 "),dR=n(eA,"A",{href:!0});var q7e=s(dR);fJe=r(q7e,"BeitConfig"),q7e.forEach(t),mJe=r(eA," (BEiT model)"),eA.forEach(t),gJe=i(L),Wf=n(L,"LI",{});var oA=s(Wf);Fne=n(oA,"STRONG",{});var j7e=s(Fne);hJe=r(j7e,"bert"),j7e.forEach(t),pJe=r(oA," \u2014 "),cR=n(oA,"A",{href:!0});var D7e=s(cR);_Je=r(D7e,"BertConfig"),D7e.forEach(t),uJe=r(oA," (BERT model)"),oA.forEach(t),bJe=i(L),Qf=n(L,"LI",{});var rA=s(Qf);Tne=n(rA,"STRONG",{});var G7e=s(Tne);vJe=r(G7e,"bert-generation"),G7e.forEach(t),FJe=r(rA," \u2014 "),fR=n(rA,"A",{href:!0});var O7e=s(fR);TJe=r(O7e,"BertGenerationConfig"),O7e.forEach(t),MJe=r(rA," (Bert Generation model)"),rA.forEach(t),EJe=i(L),Hf=n(L,"LI",{});var tA=s(Hf);Mne=n(tA,"STRONG",{});var V7e=s(Mne);CJe=r(V7e,"big_bird"),V7e.forEach(t),wJe=r(tA," \u2014 "),mR=n(tA,"A",{href:!0});var X7e=s(mR);AJe=r(X7e,"BigBirdConfig"),X7e.forEach(t),LJe=r(tA," (BigBird model)"),tA.forEach(t),yJe=i(L),Uf=n(L,"LI",{});var aA=s(Uf);Ene=n(aA,"STRONG",{});var z7e=s(Ene);xJe=r(z7e,"bigbird_pegasus"),z7e.forEach(t),$Je=r(aA," \u2014 "),gR=n(aA,"A",{href:!0});var W7e=s(gR);kJe=r(W7e,"BigBirdPegasusConfig"),W7e.forEach(t),SJe=r(aA," (BigBird-Pegasus model)"),aA.forEach(t),RJe=i(L),Jf=n(L,"LI",{});var nA=s(Jf);Cne=n(nA,"STRONG",{});var Q7e=s(Cne);PJe=r(Q7e,"blenderbot"),Q7e.forEach(t),BJe=r(nA," \u2014 "),hR=n(nA,"A",{href:!0});var H7e=s(hR);IJe=r(H7e,"BlenderbotConfig"),H7e.forEach(t),NJe=r(nA," (Blenderbot model)"),nA.forEach(t),qJe=i(L),Yf=n(L,"LI",{});var sA=s(Yf);wne=n(sA,"STRONG",{});var U7e=s(wne);jJe=r(U7e,"blenderbot-small"),U7e.forEach(t),DJe=r(sA," \u2014 "),pR=n(sA,"A",{href:!0});var J7e=s(pR);GJe=r(J7e,"BlenderbotSmallConfig"),J7e.forEach(t),OJe=r(sA," (BlenderbotSmall model)"),sA.forEach(t),VJe=i(L),Kf=n(L,"LI",{});var lA=s(Kf);Ane=n(lA,"STRONG",{});var Y7e=s(Ane);XJe=r(Y7e,"bloom"),Y7e.forEach(t),zJe=r(lA," \u2014 "),_R=n(lA,"A",{href:!0});var K7e=s(_R);WJe=r(K7e,"BloomConfig"),K7e.forEach(t),QJe=r(lA," (BLOOM model)"),lA.forEach(t),HJe=i(L),Zf=n(L,"LI",{});var iA=s(Zf);Lne=n(iA,"STRONG",{});var Z7e=s(Lne);UJe=r(Z7e,"camembert"),Z7e.forEach(t),JJe=r(iA," \u2014 "),uR=n(iA,"A",{href:!0});var eLe=s(uR);YJe=r(eLe,"CamembertConfig"),eLe.forEach(t),KJe=r(iA," (CamemBERT model)"),iA.forEach(t),ZJe=i(L),em=n(L,"LI",{});var dA=s(em);yne=n(dA,"STRONG",{});var oLe=s(yne);eYe=r(oLe,"canine"),oLe.forEach(t),oYe=r(dA," \u2014 "),bR=n(dA,"A",{href:!0});var rLe=s(bR);rYe=r(rLe,"CanineConfig"),rLe.forEach(t),tYe=r(dA," (CANINE model)"),dA.forEach(t),aYe=i(L),om=n(L,"LI",{});var cA=s(om);xne=n(cA,"STRONG",{});var tLe=s(xne);nYe=r(tLe,"clip"),tLe.forEach(t),sYe=r(cA," \u2014 "),vR=n(cA,"A",{href:!0});var aLe=s(vR);lYe=r(aLe,"CLIPConfig"),aLe.forEach(t),iYe=r(cA," (CLIP model)"),cA.forEach(t),dYe=i(L),rm=n(L,"LI",{});var fA=s(rm);$ne=n(fA,"STRONG",{});var nLe=s($ne);cYe=r(nLe,"codegen"),nLe.forEach(t),fYe=r(fA," \u2014 "),FR=n(fA,"A",{href:!0});var sLe=s(FR);mYe=r(sLe,"CodeGenConfig"),sLe.forEach(t),gYe=r(fA," (CodeGen model)"),fA.forEach(t),hYe=i(L),tm=n(L,"LI",{});var mA=s(tm);kne=n(mA,"STRONG",{});var lLe=s(kne);pYe=r(lLe,"convbert"),lLe.forEach(t),_Ye=r(mA," \u2014 "),TR=n(mA,"A",{href:!0});var iLe=s(TR);uYe=r(iLe,"ConvBertConfig"),iLe.forEach(t),bYe=r(mA," (ConvBERT model)"),mA.forEach(t),vYe=i(L),am=n(L,"LI",{});var gA=s(am);Sne=n(gA,"STRONG",{});var dLe=s(Sne);FYe=r(dLe,"convnext"),dLe.forEach(t),TYe=r(gA," \u2014 "),MR=n(gA,"A",{href:!0});var cLe=s(MR);MYe=r(cLe,"ConvNextConfig"),cLe.forEach(t),EYe=r(gA," (ConvNeXT model)"),gA.forEach(t),CYe=i(L),nm=n(L,"LI",{});var hA=s(nm);Rne=n(hA,"STRONG",{});var fLe=s(Rne);wYe=r(fLe,"ctrl"),fLe.forEach(t),AYe=r(hA," \u2014 "),ER=n(hA,"A",{href:!0});var mLe=s(ER);LYe=r(mLe,"CTRLConfig"),mLe.forEach(t),yYe=r(hA," (CTRL model)"),hA.forEach(t),xYe=i(L),sm=n(L,"LI",{});var pA=s(sm);Pne=n(pA,"STRONG",{});var gLe=s(Pne);$Ye=r(gLe,"cvt"),gLe.forEach(t),kYe=r(pA," \u2014 "),CR=n(pA,"A",{href:!0});var hLe=s(CR);SYe=r(hLe,"CvtConfig"),hLe.forEach(t),RYe=r(pA," (CvT model)"),pA.forEach(t),PYe=i(L),lm=n(L,"LI",{});var _A=s(lm);Bne=n(_A,"STRONG",{});var pLe=s(Bne);BYe=r(pLe,"data2vec-audio"),pLe.forEach(t),IYe=r(_A," \u2014 "),wR=n(_A,"A",{href:!0});var _Le=s(wR);NYe=r(_Le,"Data2VecAudioConfig"),_Le.forEach(t),qYe=r(_A," (Data2VecAudio model)"),_A.forEach(t),jYe=i(L),im=n(L,"LI",{});var uA=s(im);Ine=n(uA,"STRONG",{});var uLe=s(Ine);DYe=r(uLe,"data2vec-text"),uLe.forEach(t),GYe=r(uA," \u2014 "),AR=n(uA,"A",{href:!0});var bLe=s(AR);OYe=r(bLe,"Data2VecTextConfig"),bLe.forEach(t),VYe=r(uA," (Data2VecText model)"),uA.forEach(t),XYe=i(L),dm=n(L,"LI",{});var bA=s(dm);Nne=n(bA,"STRONG",{});var vLe=s(Nne);zYe=r(vLe,"data2vec-vision"),vLe.forEach(t),WYe=r(bA," \u2014 "),LR=n(bA,"A",{href:!0});var FLe=s(LR);QYe=r(FLe,"Data2VecVisionConfig"),FLe.forEach(t),HYe=r(bA," (Data2VecVision model)"),bA.forEach(t),UYe=i(L),cm=n(L,"LI",{});var vA=s(cm);qne=n(vA,"STRONG",{});var TLe=s(qne);JYe=r(TLe,"deberta"),TLe.forEach(t),YYe=r(vA," \u2014 "),yR=n(vA,"A",{href:!0});var MLe=s(yR);KYe=r(MLe,"DebertaConfig"),MLe.forEach(t),ZYe=r(vA," (DeBERTa model)"),vA.forEach(t),eKe=i(L),fm=n(L,"LI",{});var FA=s(fm);jne=n(FA,"STRONG",{});var ELe=s(jne);oKe=r(ELe,"deberta-v2"),ELe.forEach(t),rKe=r(FA," \u2014 "),xR=n(FA,"A",{href:!0});var CLe=s(xR);tKe=r(CLe,"DebertaV2Config"),CLe.forEach(t),aKe=r(FA," (DeBERTa-v2 model)"),FA.forEach(t),nKe=i(L),mm=n(L,"LI",{});var TA=s(mm);Dne=n(TA,"STRONG",{});var znt=s(Dne);sKe=r(znt,"decision_transformer"),znt.forEach(t),lKe=r(TA," \u2014 "),$R=n(TA,"A",{href:!0});var Wnt=s($R);iKe=r(Wnt,"DecisionTransformerConfig"),Wnt.forEach(t),dKe=r(TA," (Decision Transformer model)"),TA.forEach(t),cKe=i(L),gm=n(L,"LI",{});var wLe=s(gm);Gne=n(wLe,"STRONG",{});var Qnt=s(Gne);fKe=r(Qnt,"deit"),Qnt.forEach(t),mKe=r(wLe," \u2014 "),kR=n(wLe,"A",{href:!0});var Hnt=s(kR);gKe=r(Hnt,"DeiTConfig"),Hnt.forEach(t),hKe=r(wLe," (DeiT model)"),wLe.forEach(t),pKe=i(L),hm=n(L,"LI",{});var ALe=s(hm);One=n(ALe,"STRONG",{});var Unt=s(One);_Ke=r(Unt,"detr"),Unt.forEach(t),uKe=r(ALe," \u2014 "),SR=n(ALe,"A",{href:!0});var Jnt=s(SR);bKe=r(Jnt,"DetrConfig"),Jnt.forEach(t),vKe=r(ALe," (DETR model)"),ALe.forEach(t),FKe=i(L),pm=n(L,"LI",{});var LLe=s(pm);Vne=n(LLe,"STRONG",{});var Ynt=s(Vne);TKe=r(Ynt,"distilbert"),Ynt.forEach(t),MKe=r(LLe," \u2014 "),RR=n(LLe,"A",{href:!0});var Knt=s(RR);EKe=r(Knt,"DistilBertConfig"),Knt.forEach(t),CKe=r(LLe," (DistilBERT model)"),LLe.forEach(t),wKe=i(L),_m=n(L,"LI",{});var yLe=s(_m);Xne=n(yLe,"STRONG",{});var Znt=s(Xne);AKe=r(Znt,"dpr"),Znt.forEach(t),LKe=r(yLe," \u2014 "),PR=n(yLe,"A",{href:!0});var est=s(PR);yKe=r(est,"DPRConfig"),est.forEach(t),xKe=r(yLe," (DPR model)"),yLe.forEach(t),$Ke=i(L),um=n(L,"LI",{});var xLe=s(um);zne=n(xLe,"STRONG",{});var ost=s(zne);kKe=r(ost,"dpt"),ost.forEach(t),SKe=r(xLe," \u2014 "),BR=n(xLe,"A",{href:!0});var rst=s(BR);RKe=r(rst,"DPTConfig"),rst.forEach(t),PKe=r(xLe," (DPT model)"),xLe.forEach(t),BKe=i(L),bm=n(L,"LI",{});var $Le=s(bm);Wne=n($Le,"STRONG",{});var tst=s(Wne);IKe=r(tst,"electra"),tst.forEach(t),NKe=r($Le," \u2014 "),IR=n($Le,"A",{href:!0});var ast=s(IR);qKe=r(ast,"ElectraConfig"),ast.forEach(t),jKe=r($Le," (ELECTRA model)"),$Le.forEach(t),DKe=i(L),vm=n(L,"LI",{});var kLe=s(vm);Qne=n(kLe,"STRONG",{});var nst=s(Qne);GKe=r(nst,"encoder-decoder"),nst.forEach(t),OKe=r(kLe," \u2014 "),NR=n(kLe,"A",{href:!0});var sst=s(NR);VKe=r(sst,"EncoderDecoderConfig"),sst.forEach(t),XKe=r(kLe," (Encoder decoder model)"),kLe.forEach(t),zKe=i(L),Fm=n(L,"LI",{});var SLe=s(Fm);Hne=n(SLe,"STRONG",{});var lst=s(Hne);WKe=r(lst,"flaubert"),lst.forEach(t),QKe=r(SLe," \u2014 "),qR=n(SLe,"A",{href:!0});var ist=s(qR);HKe=r(ist,"FlaubertConfig"),ist.forEach(t),UKe=r(SLe," (FlauBERT model)"),SLe.forEach(t),JKe=i(L),Tm=n(L,"LI",{});var RLe=s(Tm);Une=n(RLe,"STRONG",{});var dst=s(Une);YKe=r(dst,"flava"),dst.forEach(t),KKe=r(RLe," \u2014 "),jR=n(RLe,"A",{href:!0});var cst=s(jR);ZKe=r(cst,"FlavaConfig"),cst.forEach(t),eZe=r(RLe," (FLAVA model)"),RLe.forEach(t),oZe=i(L),Mm=n(L,"LI",{});var PLe=s(Mm);Jne=n(PLe,"STRONG",{});var fst=s(Jne);rZe=r(fst,"fnet"),fst.forEach(t),tZe=r(PLe," \u2014 "),DR=n(PLe,"A",{href:!0});var mst=s(DR);aZe=r(mst,"FNetConfig"),mst.forEach(t),nZe=r(PLe," (FNet model)"),PLe.forEach(t),sZe=i(L),Em=n(L,"LI",{});var BLe=s(Em);Yne=n(BLe,"STRONG",{});var gst=s(Yne);lZe=r(gst,"fsmt"),gst.forEach(t),iZe=r(BLe," \u2014 "),GR=n(BLe,"A",{href:!0});var hst=s(GR);dZe=r(hst,"FSMTConfig"),hst.forEach(t),cZe=r(BLe," (FairSeq Machine-Translation model)"),BLe.forEach(t),fZe=i(L),Cm=n(L,"LI",{});var ILe=s(Cm);Kne=n(ILe,"STRONG",{});var pst=s(Kne);mZe=r(pst,"funnel"),pst.forEach(t),gZe=r(ILe," \u2014 "),OR=n(ILe,"A",{href:!0});var _st=s(OR);hZe=r(_st,"FunnelConfig"),_st.forEach(t),pZe=r(ILe," (Funnel Transformer model)"),ILe.forEach(t),_Ze=i(L),wm=n(L,"LI",{});var NLe=s(wm);Zne=n(NLe,"STRONG",{});var ust=s(Zne);uZe=r(ust,"glpn"),ust.forEach(t),bZe=r(NLe," \u2014 "),VR=n(NLe,"A",{href:!0});var bst=s(VR);vZe=r(bst,"GLPNConfig"),bst.forEach(t),FZe=r(NLe," (GLPN model)"),NLe.forEach(t),TZe=i(L),Am=n(L,"LI",{});var qLe=s(Am);ese=n(qLe,"STRONG",{});var vst=s(ese);MZe=r(vst,"gpt2"),vst.forEach(t),EZe=r(qLe," \u2014 "),XR=n(qLe,"A",{href:!0});var Fst=s(XR);CZe=r(Fst,"GPT2Config"),Fst.forEach(t),wZe=r(qLe," (OpenAI GPT-2 model)"),qLe.forEach(t),AZe=i(L),Lm=n(L,"LI",{});var jLe=s(Lm);ose=n(jLe,"STRONG",{});var Tst=s(ose);LZe=r(Tst,"gpt_neo"),Tst.forEach(t),yZe=r(jLe," \u2014 "),zR=n(jLe,"A",{href:!0});var Mst=s(zR);xZe=r(Mst,"GPTNeoConfig"),Mst.forEach(t),$Ze=r(jLe," (GPT Neo model)"),jLe.forEach(t),kZe=i(L),ym=n(L,"LI",{});var DLe=s(ym);rse=n(DLe,"STRONG",{});var Est=s(rse);SZe=r(Est,"gpt_neox"),Est.forEach(t),RZe=r(DLe," \u2014 "),WR=n(DLe,"A",{href:!0});var Cst=s(WR);PZe=r(Cst,"GPTNeoXConfig"),Cst.forEach(t),BZe=r(DLe," (GPT NeoX model)"),DLe.forEach(t),IZe=i(L),xm=n(L,"LI",{});var GLe=s(xm);tse=n(GLe,"STRONG",{});var wst=s(tse);NZe=r(wst,"gptj"),wst.forEach(t),qZe=r(GLe," \u2014 "),QR=n(GLe,"A",{href:!0});var Ast=s(QR);jZe=r(Ast,"GPTJConfig"),Ast.forEach(t),DZe=r(GLe," (GPT-J model)"),GLe.forEach(t),GZe=i(L),$m=n(L,"LI",{});var OLe=s($m);ase=n(OLe,"STRONG",{});var Lst=s(ase);OZe=r(Lst,"groupvit"),Lst.forEach(t),VZe=r(OLe," \u2014 "),HR=n(OLe,"A",{href:!0});var yst=s(HR);XZe=r(yst,"GroupViTConfig"),yst.forEach(t),zZe=r(OLe," (GroupViT model)"),OLe.forEach(t),WZe=i(L),km=n(L,"LI",{});var VLe=s(km);nse=n(VLe,"STRONG",{});var xst=s(nse);QZe=r(xst,"hubert"),xst.forEach(t),HZe=r(VLe," \u2014 "),UR=n(VLe,"A",{href:!0});var $st=s(UR);UZe=r($st,"HubertConfig"),$st.forEach(t),JZe=r(VLe," (Hubert model)"),VLe.forEach(t),YZe=i(L),Sm=n(L,"LI",{});var XLe=s(Sm);sse=n(XLe,"STRONG",{});var kst=s(sse);KZe=r(kst,"ibert"),kst.forEach(t),ZZe=r(XLe," \u2014 "),JR=n(XLe,"A",{href:!0});var Sst=s(JR);eeo=r(Sst,"IBertConfig"),Sst.forEach(t),oeo=r(XLe," (I-BERT model)"),XLe.forEach(t),reo=i(L),Rm=n(L,"LI",{});var zLe=s(Rm);lse=n(zLe,"STRONG",{});var Rst=s(lse);teo=r(Rst,"imagegpt"),Rst.forEach(t),aeo=r(zLe," \u2014 "),YR=n(zLe,"A",{href:!0});var Pst=s(YR);neo=r(Pst,"ImageGPTConfig"),Pst.forEach(t),seo=r(zLe," (ImageGPT model)"),zLe.forEach(t),leo=i(L),Pm=n(L,"LI",{});var WLe=s(Pm);ise=n(WLe,"STRONG",{});var Bst=s(ise);ieo=r(Bst,"layoutlm"),Bst.forEach(t),deo=r(WLe," \u2014 "),KR=n(WLe,"A",{href:!0});var Ist=s(KR);ceo=r(Ist,"LayoutLMConfig"),Ist.forEach(t),feo=r(WLe," (LayoutLM model)"),WLe.forEach(t),meo=i(L),Bm=n(L,"LI",{});var QLe=s(Bm);dse=n(QLe,"STRONG",{});var Nst=s(dse);geo=r(Nst,"layoutlmv2"),Nst.forEach(t),heo=r(QLe," \u2014 "),ZR=n(QLe,"A",{href:!0});var qst=s(ZR);peo=r(qst,"LayoutLMv2Config"),qst.forEach(t),_eo=r(QLe," (LayoutLMv2 model)"),QLe.forEach(t),ueo=i(L),Im=n(L,"LI",{});var HLe=s(Im);cse=n(HLe,"STRONG",{});var jst=s(cse);beo=r(jst,"layoutlmv3"),jst.forEach(t),veo=r(HLe," \u2014 "),eP=n(HLe,"A",{href:!0});var Dst=s(eP);Feo=r(Dst,"LayoutLMv3Config"),Dst.forEach(t),Teo=r(HLe," (LayoutLMv3 model)"),HLe.forEach(t),Meo=i(L),Nm=n(L,"LI",{});var ULe=s(Nm);fse=n(ULe,"STRONG",{});var Gst=s(fse);Eeo=r(Gst,"led"),Gst.forEach(t),Ceo=r(ULe," \u2014 "),oP=n(ULe,"A",{href:!0});var Ost=s(oP);weo=r(Ost,"LEDConfig"),Ost.forEach(t),Aeo=r(ULe," (LED model)"),ULe.forEach(t),Leo=i(L),qm=n(L,"LI",{});var JLe=s(qm);mse=n(JLe,"STRONG",{});var Vst=s(mse);yeo=r(Vst,"levit"),Vst.forEach(t),xeo=r(JLe," \u2014 "),rP=n(JLe,"A",{href:!0});var Xst=s(rP);$eo=r(Xst,"LevitConfig"),Xst.forEach(t),keo=r(JLe," (LeViT model)"),JLe.forEach(t),Seo=i(L),jm=n(L,"LI",{});var YLe=s(jm);gse=n(YLe,"STRONG",{});var zst=s(gse);Reo=r(zst,"longformer"),zst.forEach(t),Peo=r(YLe," \u2014 "),tP=n(YLe,"A",{href:!0});var Wst=s(tP);Beo=r(Wst,"LongformerConfig"),Wst.forEach(t),Ieo=r(YLe," (Longformer model)"),YLe.forEach(t),Neo=i(L),Dm=n(L,"LI",{});var KLe=s(Dm);hse=n(KLe,"STRONG",{});var Qst=s(hse);qeo=r(Qst,"longt5"),Qst.forEach(t),jeo=r(KLe," \u2014 "),aP=n(KLe,"A",{href:!0});var Hst=s(aP);Deo=r(Hst,"LongT5Config"),Hst.forEach(t),Geo=r(KLe," (LongT5 model)"),KLe.forEach(t),Oeo=i(L),Gm=n(L,"LI",{});var ZLe=s(Gm);pse=n(ZLe,"STRONG",{});var Ust=s(pse);Veo=r(Ust,"luke"),Ust.forEach(t),Xeo=r(ZLe," \u2014 "),nP=n(ZLe,"A",{href:!0});var Jst=s(nP);zeo=r(Jst,"LukeConfig"),Jst.forEach(t),Weo=r(ZLe," (LUKE model)"),ZLe.forEach(t),Qeo=i(L),Om=n(L,"LI",{});var eye=s(Om);_se=n(eye,"STRONG",{});var Yst=s(_se);Heo=r(Yst,"lxmert"),Yst.forEach(t),Ueo=r(eye," \u2014 "),sP=n(eye,"A",{href:!0});var Kst=s(sP);Jeo=r(Kst,"LxmertConfig"),Kst.forEach(t),Yeo=r(eye," (LXMERT model)"),eye.forEach(t),Keo=i(L),Vm=n(L,"LI",{});var oye=s(Vm);use=n(oye,"STRONG",{});var Zst=s(use);Zeo=r(Zst,"m2m_100"),Zst.forEach(t),eoo=r(oye," \u2014 "),lP=n(oye,"A",{href:!0});var elt=s(lP);ooo=r(elt,"M2M100Config"),elt.forEach(t),roo=r(oye," (M2M100 model)"),oye.forEach(t),too=i(L),Xm=n(L,"LI",{});var rye=s(Xm);bse=n(rye,"STRONG",{});var olt=s(bse);aoo=r(olt,"marian"),olt.forEach(t),noo=r(rye," \u2014 "),iP=n(rye,"A",{href:!0});var rlt=s(iP);soo=r(rlt,"MarianConfig"),rlt.forEach(t),loo=r(rye," (Marian model)"),rye.forEach(t),ioo=i(L),zm=n(L,"LI",{});var tye=s(zm);vse=n(tye,"STRONG",{});var tlt=s(vse);doo=r(tlt,"maskformer"),tlt.forEach(t),coo=r(tye," \u2014 "),dP=n(tye,"A",{href:!0});var alt=s(dP);foo=r(alt,"MaskFormerConfig"),alt.forEach(t),moo=r(tye," (MaskFormer model)"),tye.forEach(t),goo=i(L),Wm=n(L,"LI",{});var aye=s(Wm);Fse=n(aye,"STRONG",{});var nlt=s(Fse);hoo=r(nlt,"mbart"),nlt.forEach(t),poo=r(aye," \u2014 "),cP=n(aye,"A",{href:!0});var slt=s(cP);_oo=r(slt,"MBartConfig"),slt.forEach(t),uoo=r(aye," (mBART model)"),aye.forEach(t),boo=i(L),Qm=n(L,"LI",{});var nye=s(Qm);Tse=n(nye,"STRONG",{});var llt=s(Tse);voo=r(llt,"mctct"),llt.forEach(t),Foo=r(nye," \u2014 "),fP=n(nye,"A",{href:!0});var ilt=s(fP);Too=r(ilt,"MCTCTConfig"),ilt.forEach(t),Moo=r(nye," (M-CTC-T model)"),nye.forEach(t),Eoo=i(L),Hm=n(L,"LI",{});var sye=s(Hm);Mse=n(sye,"STRONG",{});var dlt=s(Mse);Coo=r(dlt,"megatron-bert"),dlt.forEach(t),woo=r(sye," \u2014 "),mP=n(sye,"A",{href:!0});var clt=s(mP);Aoo=r(clt,"MegatronBertConfig"),clt.forEach(t),Loo=r(sye," (Megatron-BERT model)"),sye.forEach(t),yoo=i(L),Um=n(L,"LI",{});var lye=s(Um);Ese=n(lye,"STRONG",{});var flt=s(Ese);xoo=r(flt,"mobilebert"),flt.forEach(t),$oo=r(lye," \u2014 "),gP=n(lye,"A",{href:!0});var mlt=s(gP);koo=r(mlt,"MobileBertConfig"),mlt.forEach(t),Soo=r(lye," (MobileBERT model)"),lye.forEach(t),Roo=i(L),Jm=n(L,"LI",{});var iye=s(Jm);Cse=n(iye,"STRONG",{});var glt=s(Cse);Poo=r(glt,"mobilevit"),glt.forEach(t),Boo=r(iye," \u2014 "),hP=n(iye,"A",{href:!0});var hlt=s(hP);Ioo=r(hlt,"MobileViTConfig"),hlt.forEach(t),Noo=r(iye," (MobileViT model)"),iye.forEach(t),qoo=i(L),Ym=n(L,"LI",{});var dye=s(Ym);wse=n(dye,"STRONG",{});var plt=s(wse);joo=r(plt,"mpnet"),plt.forEach(t),Doo=r(dye," \u2014 "),pP=n(dye,"A",{href:!0});var _lt=s(pP);Goo=r(_lt,"MPNetConfig"),_lt.forEach(t),Ooo=r(dye," (MPNet model)"),dye.forEach(t),Voo=i(L),Km=n(L,"LI",{});var cye=s(Km);Ase=n(cye,"STRONG",{});var ult=s(Ase);Xoo=r(ult,"mt5"),ult.forEach(t),zoo=r(cye," \u2014 "),_P=n(cye,"A",{href:!0});var blt=s(_P);Woo=r(blt,"MT5Config"),blt.forEach(t),Qoo=r(cye," (MT5 model)"),cye.forEach(t),Hoo=i(L),Zm=n(L,"LI",{});var fye=s(Zm);Lse=n(fye,"STRONG",{});var vlt=s(Lse);Uoo=r(vlt,"mvp"),vlt.forEach(t),Joo=r(fye," \u2014 "),uP=n(fye,"A",{href:!0});var Flt=s(uP);Yoo=r(Flt,"MvpConfig"),Flt.forEach(t),Koo=r(fye," (MVP model)"),fye.forEach(t),Zoo=i(L),eg=n(L,"LI",{});var mye=s(eg);yse=n(mye,"STRONG",{});var Tlt=s(yse);ero=r(Tlt,"nezha"),Tlt.forEach(t),oro=r(mye," \u2014 "),bP=n(mye,"A",{href:!0});var Mlt=s(bP);rro=r(Mlt,"NezhaConfig"),Mlt.forEach(t),tro=r(mye," (Nezha model)"),mye.forEach(t),aro=i(L),og=n(L,"LI",{});var gye=s(og);xse=n(gye,"STRONG",{});var Elt=s(xse);nro=r(Elt,"nystromformer"),Elt.forEach(t),sro=r(gye," \u2014 "),vP=n(gye,"A",{href:!0});var Clt=s(vP);lro=r(Clt,"NystromformerConfig"),Clt.forEach(t),iro=r(gye," (Nystr\xF6mformer model)"),gye.forEach(t),dro=i(L),rg=n(L,"LI",{});var hye=s(rg);$se=n(hye,"STRONG",{});var wlt=s($se);cro=r(wlt,"openai-gpt"),wlt.forEach(t),fro=r(hye," \u2014 "),FP=n(hye,"A",{href:!0});var Alt=s(FP);mro=r(Alt,"OpenAIGPTConfig"),Alt.forEach(t),gro=r(hye," (OpenAI GPT model)"),hye.forEach(t),hro=i(L),tg=n(L,"LI",{});var pye=s(tg);kse=n(pye,"STRONG",{});var Llt=s(kse);pro=r(Llt,"opt"),Llt.forEach(t),_ro=r(pye," \u2014 "),TP=n(pye,"A",{href:!0});var ylt=s(TP);uro=r(ylt,"OPTConfig"),ylt.forEach(t),bro=r(pye," (OPT model)"),pye.forEach(t),vro=i(L),ag=n(L,"LI",{});var _ye=s(ag);Sse=n(_ye,"STRONG",{});var xlt=s(Sse);Fro=r(xlt,"owlvit"),xlt.forEach(t),Tro=r(_ye," \u2014 "),MP=n(_ye,"A",{href:!0});var $lt=s(MP);Mro=r($lt,"OwlViTConfig"),$lt.forEach(t),Ero=r(_ye," (OWL-ViT model)"),_ye.forEach(t),Cro=i(L),ng=n(L,"LI",{});var uye=s(ng);Rse=n(uye,"STRONG",{});var klt=s(Rse);wro=r(klt,"pegasus"),klt.forEach(t),Aro=r(uye," \u2014 "),EP=n(uye,"A",{href:!0});var Slt=s(EP);Lro=r(Slt,"PegasusConfig"),Slt.forEach(t),yro=r(uye," (Pegasus model)"),uye.forEach(t),xro=i(L),sg=n(L,"LI",{});var bye=s(sg);Pse=n(bye,"STRONG",{});var Rlt=s(Pse);$ro=r(Rlt,"perceiver"),Rlt.forEach(t),kro=r(bye," \u2014 "),CP=n(bye,"A",{href:!0});var Plt=s(CP);Sro=r(Plt,"PerceiverConfig"),Plt.forEach(t),Rro=r(bye," (Perceiver model)"),bye.forEach(t),Pro=i(L),lg=n(L,"LI",{});var vye=s(lg);Bse=n(vye,"STRONG",{});var Blt=s(Bse);Bro=r(Blt,"plbart"),Blt.forEach(t),Iro=r(vye," \u2014 "),wP=n(vye,"A",{href:!0});var Ilt=s(wP);Nro=r(Ilt,"PLBartConfig"),Ilt.forEach(t),qro=r(vye," (PLBart model)"),vye.forEach(t),jro=i(L),ig=n(L,"LI",{});var Fye=s(ig);Ise=n(Fye,"STRONG",{});var Nlt=s(Ise);Dro=r(Nlt,"poolformer"),Nlt.forEach(t),Gro=r(Fye," \u2014 "),AP=n(Fye,"A",{href:!0});var qlt=s(AP);Oro=r(qlt,"PoolFormerConfig"),qlt.forEach(t),Vro=r(Fye," (PoolFormer model)"),Fye.forEach(t),Xro=i(L),dg=n(L,"LI",{});var Tye=s(dg);Nse=n(Tye,"STRONG",{});var jlt=s(Nse);zro=r(jlt,"prophetnet"),jlt.forEach(t),Wro=r(Tye," \u2014 "),LP=n(Tye,"A",{href:!0});var Dlt=s(LP);Qro=r(Dlt,"ProphetNetConfig"),Dlt.forEach(t),Hro=r(Tye," (ProphetNet model)"),Tye.forEach(t),Uro=i(L),cg=n(L,"LI",{});var Mye=s(cg);qse=n(Mye,"STRONG",{});var Glt=s(qse);Jro=r(Glt,"qdqbert"),Glt.forEach(t),Yro=r(Mye," \u2014 "),yP=n(Mye,"A",{href:!0});var Olt=s(yP);Kro=r(Olt,"QDQBertConfig"),Olt.forEach(t),Zro=r(Mye," (QDQBert model)"),Mye.forEach(t),eto=i(L),fg=n(L,"LI",{});var Eye=s(fg);jse=n(Eye,"STRONG",{});var Vlt=s(jse);oto=r(Vlt,"rag"),Vlt.forEach(t),rto=r(Eye," \u2014 "),xP=n(Eye,"A",{href:!0});var Xlt=s(xP);tto=r(Xlt,"RagConfig"),Xlt.forEach(t),ato=r(Eye," (RAG model)"),Eye.forEach(t),nto=i(L),mg=n(L,"LI",{});var Cye=s(mg);Dse=n(Cye,"STRONG",{});var zlt=s(Dse);sto=r(zlt,"realm"),zlt.forEach(t),lto=r(Cye," \u2014 "),$P=n(Cye,"A",{href:!0});var Wlt=s($P);ito=r(Wlt,"RealmConfig"),Wlt.forEach(t),dto=r(Cye," (REALM model)"),Cye.forEach(t),cto=i(L),gg=n(L,"LI",{});var wye=s(gg);Gse=n(wye,"STRONG",{});var Qlt=s(Gse);fto=r(Qlt,"reformer"),Qlt.forEach(t),mto=r(wye," \u2014 "),kP=n(wye,"A",{href:!0});var Hlt=s(kP);gto=r(Hlt,"ReformerConfig"),Hlt.forEach(t),hto=r(wye," (Reformer model)"),wye.forEach(t),pto=i(L),hg=n(L,"LI",{});var Aye=s(hg);Ose=n(Aye,"STRONG",{});var Ult=s(Ose);_to=r(Ult,"regnet"),Ult.forEach(t),uto=r(Aye," \u2014 "),SP=n(Aye,"A",{href:!0});var Jlt=s(SP);bto=r(Jlt,"RegNetConfig"),Jlt.forEach(t),vto=r(Aye," (RegNet model)"),Aye.forEach(t),Fto=i(L),pg=n(L,"LI",{});var Lye=s(pg);Vse=n(Lye,"STRONG",{});var Ylt=s(Vse);Tto=r(Ylt,"rembert"),Ylt.forEach(t),Mto=r(Lye," \u2014 "),RP=n(Lye,"A",{href:!0});var Klt=s(RP);Eto=r(Klt,"RemBertConfig"),Klt.forEach(t),Cto=r(Lye," (RemBERT model)"),Lye.forEach(t),wto=i(L),_g=n(L,"LI",{});var yye=s(_g);Xse=n(yye,"STRONG",{});var Zlt=s(Xse);Ato=r(Zlt,"resnet"),Zlt.forEach(t),Lto=r(yye," \u2014 "),PP=n(yye,"A",{href:!0});var eit=s(PP);yto=r(eit,"ResNetConfig"),eit.forEach(t),xto=r(yye," (ResNet model)"),yye.forEach(t),$to=i(L),ug=n(L,"LI",{});var xye=s(ug);zse=n(xye,"STRONG",{});var oit=s(zse);kto=r(oit,"retribert"),oit.forEach(t),Sto=r(xye," \u2014 "),BP=n(xye,"A",{href:!0});var rit=s(BP);Rto=r(rit,"RetriBertConfig"),rit.forEach(t),Pto=r(xye," (RetriBERT model)"),xye.forEach(t),Bto=i(L),bg=n(L,"LI",{});var $ye=s(bg);Wse=n($ye,"STRONG",{});var tit=s(Wse);Ito=r(tit,"roberta"),tit.forEach(t),Nto=r($ye," \u2014 "),IP=n($ye,"A",{href:!0});var ait=s(IP);qto=r(ait,"RobertaConfig"),ait.forEach(t),jto=r($ye," (RoBERTa model)"),$ye.forEach(t),Dto=i(L),vg=n(L,"LI",{});var kye=s(vg);Qse=n(kye,"STRONG",{});var nit=s(Qse);Gto=r(nit,"roformer"),nit.forEach(t),Oto=r(kye," \u2014 "),NP=n(kye,"A",{href:!0});var sit=s(NP);Vto=r(sit,"RoFormerConfig"),sit.forEach(t),Xto=r(kye," (RoFormer model)"),kye.forEach(t),zto=i(L),Fg=n(L,"LI",{});var Sye=s(Fg);Hse=n(Sye,"STRONG",{});var lit=s(Hse);Wto=r(lit,"segformer"),lit.forEach(t),Qto=r(Sye," \u2014 "),qP=n(Sye,"A",{href:!0});var iit=s(qP);Hto=r(iit,"SegformerConfig"),iit.forEach(t),Uto=r(Sye," (SegFormer model)"),Sye.forEach(t),Jto=i(L),Tg=n(L,"LI",{});var Rye=s(Tg);Use=n(Rye,"STRONG",{});var dit=s(Use);Yto=r(dit,"sew"),dit.forEach(t),Kto=r(Rye," \u2014 "),jP=n(Rye,"A",{href:!0});var cit=s(jP);Zto=r(cit,"SEWConfig"),cit.forEach(t),eao=r(Rye," (SEW model)"),Rye.forEach(t),oao=i(L),Mg=n(L,"LI",{});var Pye=s(Mg);Jse=n(Pye,"STRONG",{});var fit=s(Jse);rao=r(fit,"sew-d"),fit.forEach(t),tao=r(Pye," \u2014 "),DP=n(Pye,"A",{href:!0});var mit=s(DP);aao=r(mit,"SEWDConfig"),mit.forEach(t),nao=r(Pye," (SEW-D model)"),Pye.forEach(t),sao=i(L),Eg=n(L,"LI",{});var Bye=s(Eg);Yse=n(Bye,"STRONG",{});var git=s(Yse);lao=r(git,"speech-encoder-decoder"),git.forEach(t),iao=r(Bye," \u2014 "),GP=n(Bye,"A",{href:!0});var hit=s(GP);dao=r(hit,"SpeechEncoderDecoderConfig"),hit.forEach(t),cao=r(Bye," (Speech Encoder decoder model)"),Bye.forEach(t),fao=i(L),Cg=n(L,"LI",{});var Iye=s(Cg);Kse=n(Iye,"STRONG",{});var pit=s(Kse);mao=r(pit,"speech_to_text"),pit.forEach(t),gao=r(Iye," \u2014 "),OP=n(Iye,"A",{href:!0});var _it=s(OP);hao=r(_it,"Speech2TextConfig"),_it.forEach(t),pao=r(Iye," (Speech2Text model)"),Iye.forEach(t),_ao=i(L),wg=n(L,"LI",{});var Nye=s(wg);Zse=n(Nye,"STRONG",{});var uit=s(Zse);uao=r(uit,"speech_to_text_2"),uit.forEach(t),bao=r(Nye," \u2014 "),VP=n(Nye,"A",{href:!0});var bit=s(VP);vao=r(bit,"Speech2Text2Config"),bit.forEach(t),Fao=r(Nye," (Speech2Text2 model)"),Nye.forEach(t),Tao=i(L),Ag=n(L,"LI",{});var qye=s(Ag);ele=n(qye,"STRONG",{});var vit=s(ele);Mao=r(vit,"splinter"),vit.forEach(t),Eao=r(qye," \u2014 "),XP=n(qye,"A",{href:!0});var Fit=s(XP);Cao=r(Fit,"SplinterConfig"),Fit.forEach(t),wao=r(qye," (Splinter model)"),qye.forEach(t),Aao=i(L),Lg=n(L,"LI",{});var jye=s(Lg);ole=n(jye,"STRONG",{});var Tit=s(ole);Lao=r(Tit,"squeezebert"),Tit.forEach(t),yao=r(jye," \u2014 "),zP=n(jye,"A",{href:!0});var Mit=s(zP);xao=r(Mit,"SqueezeBertConfig"),Mit.forEach(t),$ao=r(jye," (SqueezeBERT model)"),jye.forEach(t),kao=i(L),yg=n(L,"LI",{});var Dye=s(yg);rle=n(Dye,"STRONG",{});var Eit=s(rle);Sao=r(Eit,"swin"),Eit.forEach(t),Rao=r(Dye," \u2014 "),WP=n(Dye,"A",{href:!0});var Cit=s(WP);Pao=r(Cit,"SwinConfig"),Cit.forEach(t),Bao=r(Dye," (Swin Transformer model)"),Dye.forEach(t),Iao=i(L),xg=n(L,"LI",{});var Gye=s(xg);tle=n(Gye,"STRONG",{});var wit=s(tle);Nao=r(wit,"swinv2"),wit.forEach(t),qao=r(Gye," \u2014 "),QP=n(Gye,"A",{href:!0});var Ait=s(QP);jao=r(Ait,"Swinv2Config"),Ait.forEach(t),Dao=r(Gye," (Swin Transformer V2 model)"),Gye.forEach(t),Gao=i(L),$g=n(L,"LI",{});var Oye=s($g);ale=n(Oye,"STRONG",{});var Lit=s(ale);Oao=r(Lit,"t5"),Lit.forEach(t),Vao=r(Oye," \u2014 "),HP=n(Oye,"A",{href:!0});var yit=s(HP);Xao=r(yit,"T5Config"),yit.forEach(t),zao=r(Oye," (T5 model)"),Oye.forEach(t),Wao=i(L),kg=n(L,"LI",{});var Vye=s(kg);nle=n(Vye,"STRONG",{});var xit=s(nle);Qao=r(xit,"tapas"),xit.forEach(t),Hao=r(Vye," \u2014 "),UP=n(Vye,"A",{href:!0});var $it=s(UP);Uao=r($it,"TapasConfig"),$it.forEach(t),Jao=r(Vye," (TAPAS model)"),Vye.forEach(t),Yao=i(L),Sg=n(L,"LI",{});var Xye=s(Sg);sle=n(Xye,"STRONG",{});var kit=s(sle);Kao=r(kit,"trajectory_transformer"),kit.forEach(t),Zao=r(Xye," \u2014 "),JP=n(Xye,"A",{href:!0});var Sit=s(JP);eno=r(Sit,"TrajectoryTransformerConfig"),Sit.forEach(t),ono=r(Xye," (Trajectory Transformer model)"),Xye.forEach(t),rno=i(L),Rg=n(L,"LI",{});var zye=s(Rg);lle=n(zye,"STRONG",{});var Rit=s(lle);tno=r(Rit,"transfo-xl"),Rit.forEach(t),ano=r(zye," \u2014 "),YP=n(zye,"A",{href:!0});var Pit=s(YP);nno=r(Pit,"TransfoXLConfig"),Pit.forEach(t),sno=r(zye," (Transformer-XL model)"),zye.forEach(t),lno=i(L),Pg=n(L,"LI",{});var Wye=s(Pg);ile=n(Wye,"STRONG",{});var Bit=s(ile);ino=r(Bit,"trocr"),Bit.forEach(t),dno=r(Wye," \u2014 "),KP=n(Wye,"A",{href:!0});var Iit=s(KP);cno=r(Iit,"TrOCRConfig"),Iit.forEach(t),fno=r(Wye," (TrOCR model)"),Wye.forEach(t),mno=i(L),Bg=n(L,"LI",{});var Qye=s(Bg);dle=n(Qye,"STRONG",{});var Nit=s(dle);gno=r(Nit,"unispeech"),Nit.forEach(t),hno=r(Qye," \u2014 "),ZP=n(Qye,"A",{href:!0});var qit=s(ZP);pno=r(qit,"UniSpeechConfig"),qit.forEach(t),_no=r(Qye," (UniSpeech model)"),Qye.forEach(t),uno=i(L),Ig=n(L,"LI",{});var Hye=s(Ig);cle=n(Hye,"STRONG",{});var jit=s(cle);bno=r(jit,"unispeech-sat"),jit.forEach(t),vno=r(Hye," \u2014 "),eB=n(Hye,"A",{href:!0});var Dit=s(eB);Fno=r(Dit,"UniSpeechSatConfig"),Dit.forEach(t),Tno=r(Hye," (UniSpeechSat model)"),Hye.forEach(t),Mno=i(L),Ng=n(L,"LI",{});var Uye=s(Ng);fle=n(Uye,"STRONG",{});var Git=s(fle);Eno=r(Git,"van"),Git.forEach(t),Cno=r(Uye," \u2014 "),oB=n(Uye,"A",{href:!0});var Oit=s(oB);wno=r(Oit,"VanConfig"),Oit.forEach(t),Ano=r(Uye," (VAN model)"),Uye.forEach(t),Lno=i(L),qg=n(L,"LI",{});var Jye=s(qg);mle=n(Jye,"STRONG",{});var Vit=s(mle);yno=r(Vit,"vilt"),Vit.forEach(t),xno=r(Jye," \u2014 "),rB=n(Jye,"A",{href:!0});var Xit=s(rB);$no=r(Xit,"ViltConfig"),Xit.forEach(t),kno=r(Jye," (ViLT model)"),Jye.forEach(t),Sno=i(L),jg=n(L,"LI",{});var Yye=s(jg);gle=n(Yye,"STRONG",{});var zit=s(gle);Rno=r(zit,"vision-encoder-decoder"),zit.forEach(t),Pno=r(Yye," \u2014 "),tB=n(Yye,"A",{href:!0});var Wit=s(tB);Bno=r(Wit,"VisionEncoderDecoderConfig"),Wit.forEach(t),Ino=r(Yye," (Vision Encoder decoder model)"),Yye.forEach(t),Nno=i(L),Dg=n(L,"LI",{});var Kye=s(Dg);hle=n(Kye,"STRONG",{});var Qit=s(hle);qno=r(Qit,"vision-text-dual-encoder"),Qit.forEach(t),jno=r(Kye," \u2014 "),aB=n(Kye,"A",{href:!0});var Hit=s(aB);Dno=r(Hit,"VisionTextDualEncoderConfig"),Hit.forEach(t),Gno=r(Kye," (VisionTextDualEncoder model)"),Kye.forEach(t),Ono=i(L),Gg=n(L,"LI",{});var Zye=s(Gg);ple=n(Zye,"STRONG",{});var Uit=s(ple);Vno=r(Uit,"visual_bert"),Uit.forEach(t),Xno=r(Zye," \u2014 "),nB=n(Zye,"A",{href:!0});var Jit=s(nB);zno=r(Jit,"VisualBertConfig"),Jit.forEach(t),Wno=r(Zye," (VisualBERT model)"),Zye.forEach(t),Qno=i(L),Og=n(L,"LI",{});var e9e=s(Og);_le=n(e9e,"STRONG",{});var Yit=s(_le);Hno=r(Yit,"vit"),Yit.forEach(t),Uno=r(e9e," \u2014 "),sB=n(e9e,"A",{href:!0});var Kit=s(sB);Jno=r(Kit,"ViTConfig"),Kit.forEach(t),Yno=r(e9e," (ViT model)"),e9e.forEach(t),Kno=i(L),Vg=n(L,"LI",{});var o9e=s(Vg);ule=n(o9e,"STRONG",{});var Zit=s(ule);Zno=r(Zit,"vit_mae"),Zit.forEach(t),eso=r(o9e," \u2014 "),lB=n(o9e,"A",{href:!0});var edt=s(lB);oso=r(edt,"ViTMAEConfig"),edt.forEach(t),rso=r(o9e," (ViTMAE model)"),o9e.forEach(t),tso=i(L),Xg=n(L,"LI",{});var r9e=s(Xg);ble=n(r9e,"STRONG",{});var odt=s(ble);aso=r(odt,"wav2vec2"),odt.forEach(t),nso=r(r9e," \u2014 "),iB=n(r9e,"A",{href:!0});var rdt=s(iB);sso=r(rdt,"Wav2Vec2Config"),rdt.forEach(t),lso=r(r9e," (Wav2Vec2 model)"),r9e.forEach(t),iso=i(L),zg=n(L,"LI",{});var t9e=s(zg);vle=n(t9e,"STRONG",{});var tdt=s(vle);dso=r(tdt,"wav2vec2-conformer"),tdt.forEach(t),cso=r(t9e," \u2014 "),dB=n(t9e,"A",{href:!0});var adt=s(dB);fso=r(adt,"Wav2Vec2ConformerConfig"),adt.forEach(t),mso=r(t9e," (Wav2Vec2-Conformer model)"),t9e.forEach(t),gso=i(L),Wg=n(L,"LI",{});var a9e=s(Wg);Fle=n(a9e,"STRONG",{});var ndt=s(Fle);hso=r(ndt,"wavlm"),ndt.forEach(t),pso=r(a9e," \u2014 "),cB=n(a9e,"A",{href:!0});var sdt=s(cB);_so=r(sdt,"WavLMConfig"),sdt.forEach(t),uso=r(a9e," (WavLM model)"),a9e.forEach(t),bso=i(L),Qg=n(L,"LI",{});var n9e=s(Qg);Tle=n(n9e,"STRONG",{});var ldt=s(Tle);vso=r(ldt,"xglm"),ldt.forEach(t),Fso=r(n9e," \u2014 "),fB=n(n9e,"A",{href:!0});var idt=s(fB);Tso=r(idt,"XGLMConfig"),idt.forEach(t),Mso=r(n9e," (XGLM model)"),n9e.forEach(t),Eso=i(L),Hg=n(L,"LI",{});var s9e=s(Hg);Mle=n(s9e,"STRONG",{});var ddt=s(Mle);Cso=r(ddt,"xlm"),ddt.forEach(t),wso=r(s9e," \u2014 "),mB=n(s9e,"A",{href:!0});var cdt=s(mB);Aso=r(cdt,"XLMConfig"),cdt.forEach(t),Lso=r(s9e," (XLM model)"),s9e.forEach(t),yso=i(L),Ug=n(L,"LI",{});var l9e=s(Ug);Ele=n(l9e,"STRONG",{});var fdt=s(Ele);xso=r(fdt,"xlm-prophetnet"),fdt.forEach(t),$so=r(l9e," \u2014 "),gB=n(l9e,"A",{href:!0});var mdt=s(gB);kso=r(mdt,"XLMProphetNetConfig"),mdt.forEach(t),Sso=r(l9e," (XLM-ProphetNet model)"),l9e.forEach(t),Rso=i(L),Jg=n(L,"LI",{});var i9e=s(Jg);Cle=n(i9e,"STRONG",{});var gdt=s(Cle);Pso=r(gdt,"xlm-roberta"),gdt.forEach(t),Bso=r(i9e," \u2014 "),hB=n(i9e,"A",{href:!0});var hdt=s(hB);Iso=r(hdt,"XLMRobertaConfig"),hdt.forEach(t),Nso=r(i9e," (XLM-RoBERTa model)"),i9e.forEach(t),qso=i(L),Yg=n(L,"LI",{});var d9e=s(Yg);wle=n(d9e,"STRONG",{});var pdt=s(wle);jso=r(pdt,"xlm-roberta-xl"),pdt.forEach(t),Dso=r(d9e," \u2014 "),pB=n(d9e,"A",{href:!0});var _dt=s(pB);Gso=r(_dt,"XLMRobertaXLConfig"),_dt.forEach(t),Oso=r(d9e," (XLM-RoBERTa-XL model)"),d9e.forEach(t),Vso=i(L),Kg=n(L,"LI",{});var c9e=s(Kg);Ale=n(c9e,"STRONG",{});var udt=s(Ale);Xso=r(udt,"xlnet"),udt.forEach(t),zso=r(c9e," \u2014 "),_B=n(c9e,"A",{href:!0});var bdt=s(_B);Wso=r(bdt,"XLNetConfig"),bdt.forEach(t),Qso=r(c9e," (XLNet model)"),c9e.forEach(t),Hso=i(L),Zg=n(L,"LI",{});var f9e=s(Zg);Lle=n(f9e,"STRONG",{});var vdt=s(Lle);Uso=r(vdt,"yolos"),vdt.forEach(t),Jso=r(f9e," \u2014 "),uB=n(f9e,"A",{href:!0});var Fdt=s(uB);Yso=r(Fdt,"YolosConfig"),Fdt.forEach(t),Kso=r(f9e," (YOLOS model)"),f9e.forEach(t),Zso=i(L),eh=n(L,"LI",{});var m9e=s(eh);yle=n(m9e,"STRONG",{});var Tdt=s(yle);elo=r(Tdt,"yoso"),Tdt.forEach(t),olo=r(m9e," \u2014 "),bB=n(m9e,"A",{href:!0});var Mdt=s(bB);rlo=r(Mdt,"YosoConfig"),Mdt.forEach(t),tlo=r(m9e," (YOSO model)"),m9e.forEach(t),L.forEach(t),alo=i(st),T(oh.$$.fragment,st),st.forEach(t),nlo=i(nt),rh=n(nt,"DIV",{class:!0});var pQe=s(rh);T(yL.$$.fragment,pQe),slo=i(pQe),xle=n(pQe,"P",{});var Edt=s(xle);llo=r(Edt,"Register a new configuration for this class."),Edt.forEach(t),pQe.forEach(t),nt.forEach(t),_ze=i(f),Di=n(f,"H2",{class:!0});var _Qe=s(Di);th=n(_Qe,"A",{id:!0,class:!0,href:!0});var Cdt=s(th);$le=n(Cdt,"SPAN",{});var wdt=s($le);T(xL.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),ilo=i(_Qe),kle=n(_Qe,"SPAN",{});var Adt=s(kle);dlo=r(Adt,"AutoTokenizer"),Adt.forEach(t),_Qe.forEach(t),uze=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T($L.$$.fragment,ol),clo=i(ol),kL=n(ol,"P",{});var uQe=s(kL);flo=r(uQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vB=n(uQe,"A",{href:!0});var Ldt=s(vB);mlo=r(Ldt,"AutoTokenizer.from_pretrained()"),Ldt.forEach(t),glo=r(uQe," class method."),uQe.forEach(t),hlo=i(ol),SL=n(ol,"P",{});var bQe=s(SL);plo=r(bQe,"This class cannot be instantiated directly using "),Sle=n(bQe,"CODE",{});var ydt=s(Sle);_lo=r(ydt,"__init__()"),ydt.forEach(t),ulo=r(bQe," (throws an error)."),bQe.forEach(t),blo=i(ol),xr=n(ol,"DIV",{class:!0});var rl=s(xr);T(RL.$$.fragment,rl),vlo=i(rl),Rle=n(rl,"P",{});var xdt=s(Rle);Flo=r(xdt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xdt.forEach(t),Tlo=i(rl),Pa=n(rl,"P",{});var MA=s(Pa);Mlo=r(MA,"The tokenizer class to instantiate is selected based on the "),Ple=n(MA,"CODE",{});var $dt=s(Ple);Elo=r($dt,"model_type"),$dt.forEach(t),Clo=r(MA,` property of the config object (either
passed as an argument or loaded from `),Ble=n(MA,"CODE",{});var kdt=s(Ble);wlo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),Alo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(MA,"CODE",{});var Sdt=s(Ile);Llo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),ylo=r(MA,":"),MA.forEach(t),xlo=i(rl),k=n(rl,"UL",{});var S=s(k);Dn=n(S,"LI",{});var jk=s(Dn);Nle=n(jk,"STRONG",{});var Rdt=s(Nle);$lo=r(Rdt,"albert"),Rdt.forEach(t),klo=r(jk," \u2014 "),FB=n(jk,"A",{href:!0});var Pdt=s(FB);Slo=r(Pdt,"AlbertTokenizer"),Pdt.forEach(t),Rlo=r(jk," or "),TB=n(jk,"A",{href:!0});var Bdt=s(TB);Plo=r(Bdt,"AlbertTokenizerFast"),Bdt.forEach(t),Blo=r(jk," (ALBERT model)"),jk.forEach(t),Ilo=i(S),Gn=n(S,"LI",{});var Dk=s(Gn);qle=n(Dk,"STRONG",{});var Idt=s(qle);Nlo=r(Idt,"bart"),Idt.forEach(t),qlo=r(Dk," \u2014 "),MB=n(Dk,"A",{href:!0});var Ndt=s(MB);jlo=r(Ndt,"BartTokenizer"),Ndt.forEach(t),Dlo=r(Dk," or "),EB=n(Dk,"A",{href:!0});var qdt=s(EB);Glo=r(qdt,"BartTokenizerFast"),qdt.forEach(t),Olo=r(Dk," (BART model)"),Dk.forEach(t),Vlo=i(S),On=n(S,"LI",{});var Gk=s(On);jle=n(Gk,"STRONG",{});var jdt=s(jle);Xlo=r(jdt,"barthez"),jdt.forEach(t),zlo=r(Gk," \u2014 "),CB=n(Gk,"A",{href:!0});var Ddt=s(CB);Wlo=r(Ddt,"BarthezTokenizer"),Ddt.forEach(t),Qlo=r(Gk," or "),wB=n(Gk,"A",{href:!0});var Gdt=s(wB);Hlo=r(Gdt,"BarthezTokenizerFast"),Gdt.forEach(t),Ulo=r(Gk," (BARThez model)"),Gk.forEach(t),Jlo=i(S),ah=n(S,"LI",{});var g9e=s(ah);Dle=n(g9e,"STRONG",{});var Odt=s(Dle);Ylo=r(Odt,"bartpho"),Odt.forEach(t),Klo=r(g9e," \u2014 "),AB=n(g9e,"A",{href:!0});var Vdt=s(AB);Zlo=r(Vdt,"BartphoTokenizer"),Vdt.forEach(t),eio=r(g9e," (BARTpho model)"),g9e.forEach(t),oio=i(S),Vn=n(S,"LI",{});var Ok=s(Vn);Gle=n(Ok,"STRONG",{});var Xdt=s(Gle);rio=r(Xdt,"bert"),Xdt.forEach(t),tio=r(Ok," \u2014 "),LB=n(Ok,"A",{href:!0});var zdt=s(LB);aio=r(zdt,"BertTokenizer"),zdt.forEach(t),nio=r(Ok," or "),yB=n(Ok,"A",{href:!0});var Wdt=s(yB);sio=r(Wdt,"BertTokenizerFast"),Wdt.forEach(t),lio=r(Ok," (BERT model)"),Ok.forEach(t),iio=i(S),nh=n(S,"LI",{});var h9e=s(nh);Ole=n(h9e,"STRONG",{});var Qdt=s(Ole);dio=r(Qdt,"bert-generation"),Qdt.forEach(t),cio=r(h9e," \u2014 "),xB=n(h9e,"A",{href:!0});var Hdt=s(xB);fio=r(Hdt,"BertGenerationTokenizer"),Hdt.forEach(t),mio=r(h9e," (Bert Generation model)"),h9e.forEach(t),gio=i(S),sh=n(S,"LI",{});var p9e=s(sh);Vle=n(p9e,"STRONG",{});var Udt=s(Vle);hio=r(Udt,"bert-japanese"),Udt.forEach(t),pio=r(p9e," \u2014 "),$B=n(p9e,"A",{href:!0});var Jdt=s($B);_io=r(Jdt,"BertJapaneseTokenizer"),Jdt.forEach(t),uio=r(p9e," (BertJapanese model)"),p9e.forEach(t),bio=i(S),lh=n(S,"LI",{});var _9e=s(lh);Xle=n(_9e,"STRONG",{});var Ydt=s(Xle);vio=r(Ydt,"bertweet"),Ydt.forEach(t),Fio=r(_9e," \u2014 "),kB=n(_9e,"A",{href:!0});var Kdt=s(kB);Tio=r(Kdt,"BertweetTokenizer"),Kdt.forEach(t),Mio=r(_9e," (BERTweet model)"),_9e.forEach(t),Eio=i(S),Xn=n(S,"LI",{});var Vk=s(Xn);zle=n(Vk,"STRONG",{});var Zdt=s(zle);Cio=r(Zdt,"big_bird"),Zdt.forEach(t),wio=r(Vk," \u2014 "),SB=n(Vk,"A",{href:!0});var ect=s(SB);Aio=r(ect,"BigBirdTokenizer"),ect.forEach(t),Lio=r(Vk," or "),RB=n(Vk,"A",{href:!0});var oct=s(RB);yio=r(oct,"BigBirdTokenizerFast"),oct.forEach(t),xio=r(Vk," (BigBird model)"),Vk.forEach(t),$io=i(S),zn=n(S,"LI",{});var Xk=s(zn);Wle=n(Xk,"STRONG",{});var rct=s(Wle);kio=r(rct,"bigbird_pegasus"),rct.forEach(t),Sio=r(Xk," \u2014 "),PB=n(Xk,"A",{href:!0});var tct=s(PB);Rio=r(tct,"PegasusTokenizer"),tct.forEach(t),Pio=r(Xk," or "),BB=n(Xk,"A",{href:!0});var act=s(BB);Bio=r(act,"PegasusTokenizerFast"),act.forEach(t),Iio=r(Xk," (BigBird-Pegasus model)"),Xk.forEach(t),Nio=i(S),Wn=n(S,"LI",{});var zk=s(Wn);Qle=n(zk,"STRONG",{});var nct=s(Qle);qio=r(nct,"blenderbot"),nct.forEach(t),jio=r(zk," \u2014 "),IB=n(zk,"A",{href:!0});var sct=s(IB);Dio=r(sct,"BlenderbotTokenizer"),sct.forEach(t),Gio=r(zk," or "),NB=n(zk,"A",{href:!0});var lct=s(NB);Oio=r(lct,"BlenderbotTokenizerFast"),lct.forEach(t),Vio=r(zk," (Blenderbot model)"),zk.forEach(t),Xio=i(S),ih=n(S,"LI",{});var u9e=s(ih);Hle=n(u9e,"STRONG",{});var ict=s(Hle);zio=r(ict,"blenderbot-small"),ict.forEach(t),Wio=r(u9e," \u2014 "),qB=n(u9e,"A",{href:!0});var dct=s(qB);Qio=r(dct,"BlenderbotSmallTokenizer"),dct.forEach(t),Hio=r(u9e," (BlenderbotSmall model)"),u9e.forEach(t),Uio=i(S),dh=n(S,"LI",{});var b9e=s(dh);Ule=n(b9e,"STRONG",{});var cct=s(Ule);Jio=r(cct,"bloom"),cct.forEach(t),Yio=r(b9e," \u2014 "),jB=n(b9e,"A",{href:!0});var fct=s(jB);Kio=r(fct,"BloomTokenizerFast"),fct.forEach(t),Zio=r(b9e," (BLOOM model)"),b9e.forEach(t),edo=i(S),ch=n(S,"LI",{});var v9e=s(ch);Jle=n(v9e,"STRONG",{});var mct=s(Jle);odo=r(mct,"byt5"),mct.forEach(t),rdo=r(v9e," \u2014 "),DB=n(v9e,"A",{href:!0});var gct=s(DB);tdo=r(gct,"ByT5Tokenizer"),gct.forEach(t),ado=r(v9e," (ByT5 model)"),v9e.forEach(t),ndo=i(S),Qn=n(S,"LI",{});var Wk=s(Qn);Yle=n(Wk,"STRONG",{});var hct=s(Yle);sdo=r(hct,"camembert"),hct.forEach(t),ldo=r(Wk," \u2014 "),GB=n(Wk,"A",{href:!0});var pct=s(GB);ido=r(pct,"CamembertTokenizer"),pct.forEach(t),ddo=r(Wk," or "),OB=n(Wk,"A",{href:!0});var _ct=s(OB);cdo=r(_ct,"CamembertTokenizerFast"),_ct.forEach(t),fdo=r(Wk," (CamemBERT model)"),Wk.forEach(t),mdo=i(S),fh=n(S,"LI",{});var F9e=s(fh);Kle=n(F9e,"STRONG",{});var uct=s(Kle);gdo=r(uct,"canine"),uct.forEach(t),hdo=r(F9e," \u2014 "),VB=n(F9e,"A",{href:!0});var bct=s(VB);pdo=r(bct,"CanineTokenizer"),bct.forEach(t),_do=r(F9e," (CANINE model)"),F9e.forEach(t),udo=i(S),Hn=n(S,"LI",{});var Qk=s(Hn);Zle=n(Qk,"STRONG",{});var vct=s(Zle);bdo=r(vct,"clip"),vct.forEach(t),vdo=r(Qk," \u2014 "),XB=n(Qk,"A",{href:!0});var Fct=s(XB);Fdo=r(Fct,"CLIPTokenizer"),Fct.forEach(t),Tdo=r(Qk," or "),zB=n(Qk,"A",{href:!0});var Tct=s(zB);Mdo=r(Tct,"CLIPTokenizerFast"),Tct.forEach(t),Edo=r(Qk," (CLIP model)"),Qk.forEach(t),Cdo=i(S),Un=n(S,"LI",{});var Hk=s(Un);eie=n(Hk,"STRONG",{});var Mct=s(eie);wdo=r(Mct,"codegen"),Mct.forEach(t),Ado=r(Hk," \u2014 "),WB=n(Hk,"A",{href:!0});var Ect=s(WB);Ldo=r(Ect,"CodeGenTokenizer"),Ect.forEach(t),ydo=r(Hk," or "),QB=n(Hk,"A",{href:!0});var Cct=s(QB);xdo=r(Cct,"CodeGenTokenizerFast"),Cct.forEach(t),$do=r(Hk," (CodeGen model)"),Hk.forEach(t),kdo=i(S),Jn=n(S,"LI",{});var Uk=s(Jn);oie=n(Uk,"STRONG",{});var wct=s(oie);Sdo=r(wct,"convbert"),wct.forEach(t),Rdo=r(Uk," \u2014 "),HB=n(Uk,"A",{href:!0});var Act=s(HB);Pdo=r(Act,"ConvBertTokenizer"),Act.forEach(t),Bdo=r(Uk," or "),UB=n(Uk,"A",{href:!0});var Lct=s(UB);Ido=r(Lct,"ConvBertTokenizerFast"),Lct.forEach(t),Ndo=r(Uk," (ConvBERT model)"),Uk.forEach(t),qdo=i(S),Yn=n(S,"LI",{});var Jk=s(Yn);rie=n(Jk,"STRONG",{});var yct=s(rie);jdo=r(yct,"cpm"),yct.forEach(t),Ddo=r(Jk," \u2014 "),JB=n(Jk,"A",{href:!0});var xct=s(JB);Gdo=r(xct,"CpmTokenizer"),xct.forEach(t),Odo=r(Jk," or "),YB=n(Jk,"A",{href:!0});var $ct=s(YB);Vdo=r($ct,"CpmTokenizerFast"),$ct.forEach(t),Xdo=r(Jk," (CPM model)"),Jk.forEach(t),zdo=i(S),mh=n(S,"LI",{});var T9e=s(mh);tie=n(T9e,"STRONG",{});var kct=s(tie);Wdo=r(kct,"ctrl"),kct.forEach(t),Qdo=r(T9e," \u2014 "),KB=n(T9e,"A",{href:!0});var Sct=s(KB);Hdo=r(Sct,"CTRLTokenizer"),Sct.forEach(t),Udo=r(T9e," (CTRL model)"),T9e.forEach(t),Jdo=i(S),Kn=n(S,"LI",{});var Yk=s(Kn);aie=n(Yk,"STRONG",{});var Rct=s(aie);Ydo=r(Rct,"data2vec-text"),Rct.forEach(t),Kdo=r(Yk," \u2014 "),ZB=n(Yk,"A",{href:!0});var Pct=s(ZB);Zdo=r(Pct,"RobertaTokenizer"),Pct.forEach(t),eco=r(Yk," or "),eI=n(Yk,"A",{href:!0});var Bct=s(eI);oco=r(Bct,"RobertaTokenizerFast"),Bct.forEach(t),rco=r(Yk," (Data2VecText model)"),Yk.forEach(t),tco=i(S),Zn=n(S,"LI",{});var Kk=s(Zn);nie=n(Kk,"STRONG",{});var Ict=s(nie);aco=r(Ict,"deberta"),Ict.forEach(t),nco=r(Kk," \u2014 "),oI=n(Kk,"A",{href:!0});var Nct=s(oI);sco=r(Nct,"DebertaTokenizer"),Nct.forEach(t),lco=r(Kk," or "),rI=n(Kk,"A",{href:!0});var qct=s(rI);ico=r(qct,"DebertaTokenizerFast"),qct.forEach(t),dco=r(Kk," (DeBERTa model)"),Kk.forEach(t),cco=i(S),es=n(S,"LI",{});var Zk=s(es);sie=n(Zk,"STRONG",{});var jct=s(sie);fco=r(jct,"deberta-v2"),jct.forEach(t),mco=r(Zk," \u2014 "),tI=n(Zk,"A",{href:!0});var Dct=s(tI);gco=r(Dct,"DebertaV2Tokenizer"),Dct.forEach(t),hco=r(Zk," or "),aI=n(Zk,"A",{href:!0});var Gct=s(aI);pco=r(Gct,"DebertaV2TokenizerFast"),Gct.forEach(t),_co=r(Zk," (DeBERTa-v2 model)"),Zk.forEach(t),uco=i(S),os=n(S,"LI",{});var eS=s(os);lie=n(eS,"STRONG",{});var Oct=s(lie);bco=r(Oct,"distilbert"),Oct.forEach(t),vco=r(eS," \u2014 "),nI=n(eS,"A",{href:!0});var Vct=s(nI);Fco=r(Vct,"DistilBertTokenizer"),Vct.forEach(t),Tco=r(eS," or "),sI=n(eS,"A",{href:!0});var Xct=s(sI);Mco=r(Xct,"DistilBertTokenizerFast"),Xct.forEach(t),Eco=r(eS," (DistilBERT model)"),eS.forEach(t),Cco=i(S),rs=n(S,"LI",{});var oS=s(rs);iie=n(oS,"STRONG",{});var zct=s(iie);wco=r(zct,"dpr"),zct.forEach(t),Aco=r(oS," \u2014 "),lI=n(oS,"A",{href:!0});var Wct=s(lI);Lco=r(Wct,"DPRQuestionEncoderTokenizer"),Wct.forEach(t),yco=r(oS," or "),iI=n(oS,"A",{href:!0});var Qct=s(iI);xco=r(Qct,"DPRQuestionEncoderTokenizerFast"),Qct.forEach(t),$co=r(oS," (DPR model)"),oS.forEach(t),kco=i(S),ts=n(S,"LI",{});var rS=s(ts);die=n(rS,"STRONG",{});var Hct=s(die);Sco=r(Hct,"electra"),Hct.forEach(t),Rco=r(rS," \u2014 "),dI=n(rS,"A",{href:!0});var Uct=s(dI);Pco=r(Uct,"ElectraTokenizer"),Uct.forEach(t),Bco=r(rS," or "),cI=n(rS,"A",{href:!0});var Jct=s(cI);Ico=r(Jct,"ElectraTokenizerFast"),Jct.forEach(t),Nco=r(rS," (ELECTRA model)"),rS.forEach(t),qco=i(S),gh=n(S,"LI",{});var M9e=s(gh);cie=n(M9e,"STRONG",{});var Yct=s(cie);jco=r(Yct,"flaubert"),Yct.forEach(t),Dco=r(M9e," \u2014 "),fI=n(M9e,"A",{href:!0});var Kct=s(fI);Gco=r(Kct,"FlaubertTokenizer"),Kct.forEach(t),Oco=r(M9e," (FlauBERT model)"),M9e.forEach(t),Vco=i(S),as=n(S,"LI",{});var tS=s(as);fie=n(tS,"STRONG",{});var Zct=s(fie);Xco=r(Zct,"fnet"),Zct.forEach(t),zco=r(tS," \u2014 "),mI=n(tS,"A",{href:!0});var eft=s(mI);Wco=r(eft,"FNetTokenizer"),eft.forEach(t),Qco=r(tS," or "),gI=n(tS,"A",{href:!0});var oft=s(gI);Hco=r(oft,"FNetTokenizerFast"),oft.forEach(t),Uco=r(tS," (FNet model)"),tS.forEach(t),Jco=i(S),hh=n(S,"LI",{});var E9e=s(hh);mie=n(E9e,"STRONG",{});var rft=s(mie);Yco=r(rft,"fsmt"),rft.forEach(t),Kco=r(E9e," \u2014 "),hI=n(E9e,"A",{href:!0});var tft=s(hI);Zco=r(tft,"FSMTTokenizer"),tft.forEach(t),efo=r(E9e," (FairSeq Machine-Translation model)"),E9e.forEach(t),ofo=i(S),ns=n(S,"LI",{});var aS=s(ns);gie=n(aS,"STRONG",{});var aft=s(gie);rfo=r(aft,"funnel"),aft.forEach(t),tfo=r(aS," \u2014 "),pI=n(aS,"A",{href:!0});var nft=s(pI);afo=r(nft,"FunnelTokenizer"),nft.forEach(t),nfo=r(aS," or "),_I=n(aS,"A",{href:!0});var sft=s(_I);sfo=r(sft,"FunnelTokenizerFast"),sft.forEach(t),lfo=r(aS," (Funnel Transformer model)"),aS.forEach(t),ifo=i(S),ss=n(S,"LI",{});var nS=s(ss);hie=n(nS,"STRONG",{});var lft=s(hie);dfo=r(lft,"gpt2"),lft.forEach(t),cfo=r(nS," \u2014 "),uI=n(nS,"A",{href:!0});var ift=s(uI);ffo=r(ift,"GPT2Tokenizer"),ift.forEach(t),mfo=r(nS," or "),bI=n(nS,"A",{href:!0});var dft=s(bI);gfo=r(dft,"GPT2TokenizerFast"),dft.forEach(t),hfo=r(nS," (OpenAI GPT-2 model)"),nS.forEach(t),pfo=i(S),ls=n(S,"LI",{});var sS=s(ls);pie=n(sS,"STRONG",{});var cft=s(pie);_fo=r(cft,"gpt_neo"),cft.forEach(t),ufo=r(sS," \u2014 "),vI=n(sS,"A",{href:!0});var fft=s(vI);bfo=r(fft,"GPT2Tokenizer"),fft.forEach(t),vfo=r(sS," or "),FI=n(sS,"A",{href:!0});var mft=s(FI);Ffo=r(mft,"GPT2TokenizerFast"),mft.forEach(t),Tfo=r(sS," (GPT Neo model)"),sS.forEach(t),Mfo=i(S),ph=n(S,"LI",{});var C9e=s(ph);_ie=n(C9e,"STRONG",{});var gft=s(_ie);Efo=r(gft,"gpt_neox"),gft.forEach(t),Cfo=r(C9e," \u2014 "),TI=n(C9e,"A",{href:!0});var hft=s(TI);wfo=r(hft,"GPTNeoXTokenizerFast"),hft.forEach(t),Afo=r(C9e," (GPT NeoX model)"),C9e.forEach(t),Lfo=i(S),is=n(S,"LI",{});var lS=s(is);uie=n(lS,"STRONG",{});var pft=s(uie);yfo=r(pft,"gptj"),pft.forEach(t),xfo=r(lS," \u2014 "),MI=n(lS,"A",{href:!0});var _ft=s(MI);$fo=r(_ft,"GPT2Tokenizer"),_ft.forEach(t),kfo=r(lS," or "),EI=n(lS,"A",{href:!0});var uft=s(EI);Sfo=r(uft,"GPT2TokenizerFast"),uft.forEach(t),Rfo=r(lS," (GPT-J model)"),lS.forEach(t),Pfo=i(S),ds=n(S,"LI",{});var iS=s(ds);bie=n(iS,"STRONG",{});var bft=s(bie);Bfo=r(bft,"groupvit"),bft.forEach(t),Ifo=r(iS," \u2014 "),CI=n(iS,"A",{href:!0});var vft=s(CI);Nfo=r(vft,"CLIPTokenizer"),vft.forEach(t),qfo=r(iS," or "),wI=n(iS,"A",{href:!0});var Fft=s(wI);jfo=r(Fft,"CLIPTokenizerFast"),Fft.forEach(t),Dfo=r(iS," (GroupViT model)"),iS.forEach(t),Gfo=i(S),cs=n(S,"LI",{});var dS=s(cs);vie=n(dS,"STRONG",{});var Tft=s(vie);Ofo=r(Tft,"herbert"),Tft.forEach(t),Vfo=r(dS," \u2014 "),AI=n(dS,"A",{href:!0});var Mft=s(AI);Xfo=r(Mft,"HerbertTokenizer"),Mft.forEach(t),zfo=r(dS," or "),LI=n(dS,"A",{href:!0});var Eft=s(LI);Wfo=r(Eft,"HerbertTokenizerFast"),Eft.forEach(t),Qfo=r(dS," (HerBERT model)"),dS.forEach(t),Hfo=i(S),_h=n(S,"LI",{});var w9e=s(_h);Fie=n(w9e,"STRONG",{});var Cft=s(Fie);Ufo=r(Cft,"hubert"),Cft.forEach(t),Jfo=r(w9e," \u2014 "),yI=n(w9e,"A",{href:!0});var wft=s(yI);Yfo=r(wft,"Wav2Vec2CTCTokenizer"),wft.forEach(t),Kfo=r(w9e," (Hubert model)"),w9e.forEach(t),Zfo=i(S),fs=n(S,"LI",{});var cS=s(fs);Tie=n(cS,"STRONG",{});var Aft=s(Tie);emo=r(Aft,"ibert"),Aft.forEach(t),omo=r(cS," \u2014 "),xI=n(cS,"A",{href:!0});var Lft=s(xI);rmo=r(Lft,"RobertaTokenizer"),Lft.forEach(t),tmo=r(cS," or "),$I=n(cS,"A",{href:!0});var yft=s($I);amo=r(yft,"RobertaTokenizerFast"),yft.forEach(t),nmo=r(cS," (I-BERT model)"),cS.forEach(t),smo=i(S),ms=n(S,"LI",{});var fS=s(ms);Mie=n(fS,"STRONG",{});var xft=s(Mie);lmo=r(xft,"layoutlm"),xft.forEach(t),imo=r(fS," \u2014 "),kI=n(fS,"A",{href:!0});var $ft=s(kI);dmo=r($ft,"LayoutLMTokenizer"),$ft.forEach(t),cmo=r(fS," or "),SI=n(fS,"A",{href:!0});var kft=s(SI);fmo=r(kft,"LayoutLMTokenizerFast"),kft.forEach(t),mmo=r(fS," (LayoutLM model)"),fS.forEach(t),gmo=i(S),gs=n(S,"LI",{});var mS=s(gs);Eie=n(mS,"STRONG",{});var Sft=s(Eie);hmo=r(Sft,"layoutlmv2"),Sft.forEach(t),pmo=r(mS," \u2014 "),RI=n(mS,"A",{href:!0});var Rft=s(RI);_mo=r(Rft,"LayoutLMv2Tokenizer"),Rft.forEach(t),umo=r(mS," or "),PI=n(mS,"A",{href:!0});var Pft=s(PI);bmo=r(Pft,"LayoutLMv2TokenizerFast"),Pft.forEach(t),vmo=r(mS," (LayoutLMv2 model)"),mS.forEach(t),Fmo=i(S),hs=n(S,"LI",{});var gS=s(hs);Cie=n(gS,"STRONG",{});var Bft=s(Cie);Tmo=r(Bft,"layoutlmv3"),Bft.forEach(t),Mmo=r(gS," \u2014 "),BI=n(gS,"A",{href:!0});var Ift=s(BI);Emo=r(Ift,"LayoutLMv3Tokenizer"),Ift.forEach(t),Cmo=r(gS," or "),II=n(gS,"A",{href:!0});var Nft=s(II);wmo=r(Nft,"LayoutLMv3TokenizerFast"),Nft.forEach(t),Amo=r(gS," (LayoutLMv3 model)"),gS.forEach(t),Lmo=i(S),ps=n(S,"LI",{});var hS=s(ps);wie=n(hS,"STRONG",{});var qft=s(wie);ymo=r(qft,"layoutxlm"),qft.forEach(t),xmo=r(hS," \u2014 "),NI=n(hS,"A",{href:!0});var jft=s(NI);$mo=r(jft,"LayoutXLMTokenizer"),jft.forEach(t),kmo=r(hS," or "),qI=n(hS,"A",{href:!0});var Dft=s(qI);Smo=r(Dft,"LayoutXLMTokenizerFast"),Dft.forEach(t),Rmo=r(hS," (LayoutXLM model)"),hS.forEach(t),Pmo=i(S),_s=n(S,"LI",{});var pS=s(_s);Aie=n(pS,"STRONG",{});var Gft=s(Aie);Bmo=r(Gft,"led"),Gft.forEach(t),Imo=r(pS," \u2014 "),jI=n(pS,"A",{href:!0});var Oft=s(jI);Nmo=r(Oft,"LEDTokenizer"),Oft.forEach(t),qmo=r(pS," or "),DI=n(pS,"A",{href:!0});var Vft=s(DI);jmo=r(Vft,"LEDTokenizerFast"),Vft.forEach(t),Dmo=r(pS," (LED model)"),pS.forEach(t),Gmo=i(S),us=n(S,"LI",{});var _S=s(us);Lie=n(_S,"STRONG",{});var Xft=s(Lie);Omo=r(Xft,"longformer"),Xft.forEach(t),Vmo=r(_S," \u2014 "),GI=n(_S,"A",{href:!0});var zft=s(GI);Xmo=r(zft,"LongformerTokenizer"),zft.forEach(t),zmo=r(_S," or "),OI=n(_S,"A",{href:!0});var Wft=s(OI);Wmo=r(Wft,"LongformerTokenizerFast"),Wft.forEach(t),Qmo=r(_S," (Longformer model)"),_S.forEach(t),Hmo=i(S),bs=n(S,"LI",{});var uS=s(bs);yie=n(uS,"STRONG",{});var Qft=s(yie);Umo=r(Qft,"longt5"),Qft.forEach(t),Jmo=r(uS," \u2014 "),VI=n(uS,"A",{href:!0});var Hft=s(VI);Ymo=r(Hft,"T5Tokenizer"),Hft.forEach(t),Kmo=r(uS," or "),XI=n(uS,"A",{href:!0});var Uft=s(XI);Zmo=r(Uft,"T5TokenizerFast"),Uft.forEach(t),ego=r(uS," (LongT5 model)"),uS.forEach(t),ogo=i(S),uh=n(S,"LI",{});var A9e=s(uh);xie=n(A9e,"STRONG",{});var Jft=s(xie);rgo=r(Jft,"luke"),Jft.forEach(t),tgo=r(A9e," \u2014 "),zI=n(A9e,"A",{href:!0});var Yft=s(zI);ago=r(Yft,"LukeTokenizer"),Yft.forEach(t),ngo=r(A9e," (LUKE model)"),A9e.forEach(t),sgo=i(S),vs=n(S,"LI",{});var bS=s(vs);$ie=n(bS,"STRONG",{});var Kft=s($ie);lgo=r(Kft,"lxmert"),Kft.forEach(t),igo=r(bS," \u2014 "),WI=n(bS,"A",{href:!0});var Zft=s(WI);dgo=r(Zft,"LxmertTokenizer"),Zft.forEach(t),cgo=r(bS," or "),QI=n(bS,"A",{href:!0});var emt=s(QI);fgo=r(emt,"LxmertTokenizerFast"),emt.forEach(t),mgo=r(bS," (LXMERT model)"),bS.forEach(t),ggo=i(S),bh=n(S,"LI",{});var L9e=s(bh);kie=n(L9e,"STRONG",{});var omt=s(kie);hgo=r(omt,"m2m_100"),omt.forEach(t),pgo=r(L9e," \u2014 "),HI=n(L9e,"A",{href:!0});var rmt=s(HI);_go=r(rmt,"M2M100Tokenizer"),rmt.forEach(t),ugo=r(L9e," (M2M100 model)"),L9e.forEach(t),bgo=i(S),vh=n(S,"LI",{});var y9e=s(vh);Sie=n(y9e,"STRONG",{});var tmt=s(Sie);vgo=r(tmt,"marian"),tmt.forEach(t),Fgo=r(y9e," \u2014 "),UI=n(y9e,"A",{href:!0});var amt=s(UI);Tgo=r(amt,"MarianTokenizer"),amt.forEach(t),Mgo=r(y9e," (Marian model)"),y9e.forEach(t),Ego=i(S),Fs=n(S,"LI",{});var vS=s(Fs);Rie=n(vS,"STRONG",{});var nmt=s(Rie);Cgo=r(nmt,"mbart"),nmt.forEach(t),wgo=r(vS," \u2014 "),JI=n(vS,"A",{href:!0});var smt=s(JI);Ago=r(smt,"MBartTokenizer"),smt.forEach(t),Lgo=r(vS," or "),YI=n(vS,"A",{href:!0});var lmt=s(YI);ygo=r(lmt,"MBartTokenizerFast"),lmt.forEach(t),xgo=r(vS," (mBART model)"),vS.forEach(t),$go=i(S),Ts=n(S,"LI",{});var FS=s(Ts);Pie=n(FS,"STRONG",{});var imt=s(Pie);kgo=r(imt,"mbart50"),imt.forEach(t),Sgo=r(FS," \u2014 "),KI=n(FS,"A",{href:!0});var dmt=s(KI);Rgo=r(dmt,"MBart50Tokenizer"),dmt.forEach(t),Pgo=r(FS," or "),ZI=n(FS,"A",{href:!0});var cmt=s(ZI);Bgo=r(cmt,"MBart50TokenizerFast"),cmt.forEach(t),Igo=r(FS," (mBART-50 model)"),FS.forEach(t),Ngo=i(S),Ms=n(S,"LI",{});var TS=s(Ms);Bie=n(TS,"STRONG",{});var fmt=s(Bie);qgo=r(fmt,"megatron-bert"),fmt.forEach(t),jgo=r(TS," \u2014 "),eN=n(TS,"A",{href:!0});var mmt=s(eN);Dgo=r(mmt,"BertTokenizer"),mmt.forEach(t),Ggo=r(TS," or "),oN=n(TS,"A",{href:!0});var gmt=s(oN);Ogo=r(gmt,"BertTokenizerFast"),gmt.forEach(t),Vgo=r(TS," (Megatron-BERT model)"),TS.forEach(t),Xgo=i(S),Fh=n(S,"LI",{});var x9e=s(Fh);Iie=n(x9e,"STRONG",{});var hmt=s(Iie);zgo=r(hmt,"mluke"),hmt.forEach(t),Wgo=r(x9e," \u2014 "),rN=n(x9e,"A",{href:!0});var pmt=s(rN);Qgo=r(pmt,"MLukeTokenizer"),pmt.forEach(t),Hgo=r(x9e," (mLUKE model)"),x9e.forEach(t),Ugo=i(S),Es=n(S,"LI",{});var MS=s(Es);Nie=n(MS,"STRONG",{});var _mt=s(Nie);Jgo=r(_mt,"mobilebert"),_mt.forEach(t),Ygo=r(MS," \u2014 "),tN=n(MS,"A",{href:!0});var umt=s(tN);Kgo=r(umt,"MobileBertTokenizer"),umt.forEach(t),Zgo=r(MS," or "),aN=n(MS,"A",{href:!0});var bmt=s(aN);eho=r(bmt,"MobileBertTokenizerFast"),bmt.forEach(t),oho=r(MS," (MobileBERT model)"),MS.forEach(t),rho=i(S),Cs=n(S,"LI",{});var ES=s(Cs);qie=n(ES,"STRONG",{});var vmt=s(qie);tho=r(vmt,"mpnet"),vmt.forEach(t),aho=r(ES," \u2014 "),nN=n(ES,"A",{href:!0});var Fmt=s(nN);nho=r(Fmt,"MPNetTokenizer"),Fmt.forEach(t),sho=r(ES," or "),sN=n(ES,"A",{href:!0});var Tmt=s(sN);lho=r(Tmt,"MPNetTokenizerFast"),Tmt.forEach(t),iho=r(ES," (MPNet model)"),ES.forEach(t),dho=i(S),ws=n(S,"LI",{});var CS=s(ws);jie=n(CS,"STRONG",{});var Mmt=s(jie);cho=r(Mmt,"mt5"),Mmt.forEach(t),fho=r(CS," \u2014 "),lN=n(CS,"A",{href:!0});var Emt=s(lN);mho=r(Emt,"MT5Tokenizer"),Emt.forEach(t),gho=r(CS," or "),iN=n(CS,"A",{href:!0});var Cmt=s(iN);hho=r(Cmt,"MT5TokenizerFast"),Cmt.forEach(t),pho=r(CS," (MT5 model)"),CS.forEach(t),_ho=i(S),As=n(S,"LI",{});var wS=s(As);Die=n(wS,"STRONG",{});var wmt=s(Die);uho=r(wmt,"mvp"),wmt.forEach(t),bho=r(wS," \u2014 "),dN=n(wS,"A",{href:!0});var Amt=s(dN);vho=r(Amt,"MvpTokenizer"),Amt.forEach(t),Fho=r(wS," or "),cN=n(wS,"A",{href:!0});var Lmt=s(cN);Tho=r(Lmt,"MvpTokenizerFast"),Lmt.forEach(t),Mho=r(wS," (MVP model)"),wS.forEach(t),Eho=i(S),Ls=n(S,"LI",{});var AS=s(Ls);Gie=n(AS,"STRONG",{});var ymt=s(Gie);Cho=r(ymt,"nezha"),ymt.forEach(t),who=r(AS," \u2014 "),fN=n(AS,"A",{href:!0});var xmt=s(fN);Aho=r(xmt,"BertTokenizer"),xmt.forEach(t),Lho=r(AS," or "),mN=n(AS,"A",{href:!0});var $mt=s(mN);yho=r($mt,"BertTokenizerFast"),$mt.forEach(t),xho=r(AS," (Nezha model)"),AS.forEach(t),$ho=i(S),ys=n(S,"LI",{});var LS=s(ys);Oie=n(LS,"STRONG",{});var kmt=s(Oie);kho=r(kmt,"nllb"),kmt.forEach(t),Sho=r(LS," \u2014 "),gN=n(LS,"A",{href:!0});var Smt=s(gN);Rho=r(Smt,"NllbTokenizer"),Smt.forEach(t),Pho=r(LS," or "),hN=n(LS,"A",{href:!0});var Rmt=s(hN);Bho=r(Rmt,"NllbTokenizerFast"),Rmt.forEach(t),Iho=r(LS," (NLLB model)"),LS.forEach(t),Nho=i(S),xs=n(S,"LI",{});var yS=s(xs);Vie=n(yS,"STRONG",{});var Pmt=s(Vie);qho=r(Pmt,"nystromformer"),Pmt.forEach(t),jho=r(yS," \u2014 "),pN=n(yS,"A",{href:!0});var Bmt=s(pN);Dho=r(Bmt,"AlbertTokenizer"),Bmt.forEach(t),Gho=r(yS," or "),_N=n(yS,"A",{href:!0});var Imt=s(_N);Oho=r(Imt,"AlbertTokenizerFast"),Imt.forEach(t),Vho=r(yS," (Nystr\xF6mformer model)"),yS.forEach(t),Xho=i(S),$s=n(S,"LI",{});var xS=s($s);Xie=n(xS,"STRONG",{});var Nmt=s(Xie);zho=r(Nmt,"openai-gpt"),Nmt.forEach(t),Who=r(xS," \u2014 "),uN=n(xS,"A",{href:!0});var qmt=s(uN);Qho=r(qmt,"OpenAIGPTTokenizer"),qmt.forEach(t),Hho=r(xS," or "),bN=n(xS,"A",{href:!0});var jmt=s(bN);Uho=r(jmt,"OpenAIGPTTokenizerFast"),jmt.forEach(t),Jho=r(xS," (OpenAI GPT model)"),xS.forEach(t),Yho=i(S),Th=n(S,"LI",{});var $9e=s(Th);zie=n($9e,"STRONG",{});var Dmt=s(zie);Kho=r(Dmt,"opt"),Dmt.forEach(t),Zho=r($9e," \u2014 "),vN=n($9e,"A",{href:!0});var Gmt=s(vN);epo=r(Gmt,"GPT2Tokenizer"),Gmt.forEach(t),opo=r($9e," (OPT model)"),$9e.forEach(t),rpo=i(S),ks=n(S,"LI",{});var $S=s(ks);Wie=n($S,"STRONG",{});var Omt=s(Wie);tpo=r(Omt,"owlvit"),Omt.forEach(t),apo=r($S," \u2014 "),FN=n($S,"A",{href:!0});var Vmt=s(FN);npo=r(Vmt,"CLIPTokenizer"),Vmt.forEach(t),spo=r($S," or "),TN=n($S,"A",{href:!0});var Xmt=s(TN);lpo=r(Xmt,"CLIPTokenizerFast"),Xmt.forEach(t),ipo=r($S," (OWL-ViT model)"),$S.forEach(t),dpo=i(S),Ss=n(S,"LI",{});var kS=s(Ss);Qie=n(kS,"STRONG",{});var zmt=s(Qie);cpo=r(zmt,"pegasus"),zmt.forEach(t),fpo=r(kS," \u2014 "),MN=n(kS,"A",{href:!0});var Wmt=s(MN);mpo=r(Wmt,"PegasusTokenizer"),Wmt.forEach(t),gpo=r(kS," or "),EN=n(kS,"A",{href:!0});var Qmt=s(EN);hpo=r(Qmt,"PegasusTokenizerFast"),Qmt.forEach(t),ppo=r(kS," (Pegasus model)"),kS.forEach(t),_po=i(S),Mh=n(S,"LI",{});var k9e=s(Mh);Hie=n(k9e,"STRONG",{});var Hmt=s(Hie);upo=r(Hmt,"perceiver"),Hmt.forEach(t),bpo=r(k9e," \u2014 "),CN=n(k9e,"A",{href:!0});var Umt=s(CN);vpo=r(Umt,"PerceiverTokenizer"),Umt.forEach(t),Fpo=r(k9e," (Perceiver model)"),k9e.forEach(t),Tpo=i(S),Eh=n(S,"LI",{});var S9e=s(Eh);Uie=n(S9e,"STRONG",{});var Jmt=s(Uie);Mpo=r(Jmt,"phobert"),Jmt.forEach(t),Epo=r(S9e," \u2014 "),wN=n(S9e,"A",{href:!0});var Ymt=s(wN);Cpo=r(Ymt,"PhobertTokenizer"),Ymt.forEach(t),wpo=r(S9e," (PhoBERT model)"),S9e.forEach(t),Apo=i(S),Ch=n(S,"LI",{});var R9e=s(Ch);Jie=n(R9e,"STRONG",{});var Kmt=s(Jie);Lpo=r(Kmt,"plbart"),Kmt.forEach(t),ypo=r(R9e," \u2014 "),AN=n(R9e,"A",{href:!0});var Zmt=s(AN);xpo=r(Zmt,"PLBartTokenizer"),Zmt.forEach(t),$po=r(R9e," (PLBart model)"),R9e.forEach(t),kpo=i(S),wh=n(S,"LI",{});var P9e=s(wh);Yie=n(P9e,"STRONG",{});var egt=s(Yie);Spo=r(egt,"prophetnet"),egt.forEach(t),Rpo=r(P9e," \u2014 "),LN=n(P9e,"A",{href:!0});var ogt=s(LN);Ppo=r(ogt,"ProphetNetTokenizer"),ogt.forEach(t),Bpo=r(P9e," (ProphetNet model)"),P9e.forEach(t),Ipo=i(S),Rs=n(S,"LI",{});var SS=s(Rs);Kie=n(SS,"STRONG",{});var rgt=s(Kie);Npo=r(rgt,"qdqbert"),rgt.forEach(t),qpo=r(SS," \u2014 "),yN=n(SS,"A",{href:!0});var tgt=s(yN);jpo=r(tgt,"BertTokenizer"),tgt.forEach(t),Dpo=r(SS," or "),xN=n(SS,"A",{href:!0});var agt=s(xN);Gpo=r(agt,"BertTokenizerFast"),agt.forEach(t),Opo=r(SS," (QDQBert model)"),SS.forEach(t),Vpo=i(S),Ah=n(S,"LI",{});var B9e=s(Ah);Zie=n(B9e,"STRONG",{});var ngt=s(Zie);Xpo=r(ngt,"rag"),ngt.forEach(t),zpo=r(B9e," \u2014 "),$N=n(B9e,"A",{href:!0});var sgt=s($N);Wpo=r(sgt,"RagTokenizer"),sgt.forEach(t),Qpo=r(B9e," (RAG model)"),B9e.forEach(t),Hpo=i(S),Ps=n(S,"LI",{});var RS=s(Ps);ede=n(RS,"STRONG",{});var lgt=s(ede);Upo=r(lgt,"realm"),lgt.forEach(t),Jpo=r(RS," \u2014 "),kN=n(RS,"A",{href:!0});var igt=s(kN);Ypo=r(igt,"RealmTokenizer"),igt.forEach(t),Kpo=r(RS," or "),SN=n(RS,"A",{href:!0});var dgt=s(SN);Zpo=r(dgt,"RealmTokenizerFast"),dgt.forEach(t),e_o=r(RS," (REALM model)"),RS.forEach(t),o_o=i(S),Bs=n(S,"LI",{});var PS=s(Bs);ode=n(PS,"STRONG",{});var cgt=s(ode);r_o=r(cgt,"reformer"),cgt.forEach(t),t_o=r(PS," \u2014 "),RN=n(PS,"A",{href:!0});var fgt=s(RN);a_o=r(fgt,"ReformerTokenizer"),fgt.forEach(t),n_o=r(PS," or "),PN=n(PS,"A",{href:!0});var mgt=s(PN);s_o=r(mgt,"ReformerTokenizerFast"),mgt.forEach(t),l_o=r(PS," (Reformer model)"),PS.forEach(t),i_o=i(S),Is=n(S,"LI",{});var BS=s(Is);rde=n(BS,"STRONG",{});var ggt=s(rde);d_o=r(ggt,"rembert"),ggt.forEach(t),c_o=r(BS," \u2014 "),BN=n(BS,"A",{href:!0});var hgt=s(BN);f_o=r(hgt,"RemBertTokenizer"),hgt.forEach(t),m_o=r(BS," or "),IN=n(BS,"A",{href:!0});var pgt=s(IN);g_o=r(pgt,"RemBertTokenizerFast"),pgt.forEach(t),h_o=r(BS," (RemBERT model)"),BS.forEach(t),p_o=i(S),Ns=n(S,"LI",{});var IS=s(Ns);tde=n(IS,"STRONG",{});var _gt=s(tde);__o=r(_gt,"retribert"),_gt.forEach(t),u_o=r(IS," \u2014 "),NN=n(IS,"A",{href:!0});var ugt=s(NN);b_o=r(ugt,"RetriBertTokenizer"),ugt.forEach(t),v_o=r(IS," or "),qN=n(IS,"A",{href:!0});var bgt=s(qN);F_o=r(bgt,"RetriBertTokenizerFast"),bgt.forEach(t),T_o=r(IS," (RetriBERT model)"),IS.forEach(t),M_o=i(S),qs=n(S,"LI",{});var NS=s(qs);ade=n(NS,"STRONG",{});var vgt=s(ade);E_o=r(vgt,"roberta"),vgt.forEach(t),C_o=r(NS," \u2014 "),jN=n(NS,"A",{href:!0});var Fgt=s(jN);w_o=r(Fgt,"RobertaTokenizer"),Fgt.forEach(t),A_o=r(NS," or "),DN=n(NS,"A",{href:!0});var Tgt=s(DN);L_o=r(Tgt,"RobertaTokenizerFast"),Tgt.forEach(t),y_o=r(NS," (RoBERTa model)"),NS.forEach(t),x_o=i(S),js=n(S,"LI",{});var qS=s(js);nde=n(qS,"STRONG",{});var Mgt=s(nde);$_o=r(Mgt,"roformer"),Mgt.forEach(t),k_o=r(qS," \u2014 "),GN=n(qS,"A",{href:!0});var Egt=s(GN);S_o=r(Egt,"RoFormerTokenizer"),Egt.forEach(t),R_o=r(qS," or "),ON=n(qS,"A",{href:!0});var Cgt=s(ON);P_o=r(Cgt,"RoFormerTokenizerFast"),Cgt.forEach(t),B_o=r(qS," (RoFormer model)"),qS.forEach(t),I_o=i(S),Lh=n(S,"LI",{});var I9e=s(Lh);sde=n(I9e,"STRONG",{});var wgt=s(sde);N_o=r(wgt,"speech_to_text"),wgt.forEach(t),q_o=r(I9e," \u2014 "),VN=n(I9e,"A",{href:!0});var Agt=s(VN);j_o=r(Agt,"Speech2TextTokenizer"),Agt.forEach(t),D_o=r(I9e," (Speech2Text model)"),I9e.forEach(t),G_o=i(S),yh=n(S,"LI",{});var N9e=s(yh);lde=n(N9e,"STRONG",{});var Lgt=s(lde);O_o=r(Lgt,"speech_to_text_2"),Lgt.forEach(t),V_o=r(N9e," \u2014 "),XN=n(N9e,"A",{href:!0});var ygt=s(XN);X_o=r(ygt,"Speech2Text2Tokenizer"),ygt.forEach(t),z_o=r(N9e," (Speech2Text2 model)"),N9e.forEach(t),W_o=i(S),Ds=n(S,"LI",{});var jS=s(Ds);ide=n(jS,"STRONG",{});var xgt=s(ide);Q_o=r(xgt,"splinter"),xgt.forEach(t),H_o=r(jS," \u2014 "),zN=n(jS,"A",{href:!0});var $gt=s(zN);U_o=r($gt,"SplinterTokenizer"),$gt.forEach(t),J_o=r(jS," or "),WN=n(jS,"A",{href:!0});var kgt=s(WN);Y_o=r(kgt,"SplinterTokenizerFast"),kgt.forEach(t),K_o=r(jS," (Splinter model)"),jS.forEach(t),Z_o=i(S),Gs=n(S,"LI",{});var DS=s(Gs);dde=n(DS,"STRONG",{});var Sgt=s(dde);euo=r(Sgt,"squeezebert"),Sgt.forEach(t),ouo=r(DS," \u2014 "),QN=n(DS,"A",{href:!0});var Rgt=s(QN);ruo=r(Rgt,"SqueezeBertTokenizer"),Rgt.forEach(t),tuo=r(DS," or "),HN=n(DS,"A",{href:!0});var Pgt=s(HN);auo=r(Pgt,"SqueezeBertTokenizerFast"),Pgt.forEach(t),nuo=r(DS," (SqueezeBERT model)"),DS.forEach(t),suo=i(S),Os=n(S,"LI",{});var GS=s(Os);cde=n(GS,"STRONG",{});var Bgt=s(cde);luo=r(Bgt,"t5"),Bgt.forEach(t),iuo=r(GS," \u2014 "),UN=n(GS,"A",{href:!0});var Igt=s(UN);duo=r(Igt,"T5Tokenizer"),Igt.forEach(t),cuo=r(GS," or "),JN=n(GS,"A",{href:!0});var Ngt=s(JN);fuo=r(Ngt,"T5TokenizerFast"),Ngt.forEach(t),muo=r(GS," (T5 model)"),GS.forEach(t),guo=i(S),xh=n(S,"LI",{});var q9e=s(xh);fde=n(q9e,"STRONG",{});var qgt=s(fde);huo=r(qgt,"tapas"),qgt.forEach(t),puo=r(q9e," \u2014 "),YN=n(q9e,"A",{href:!0});var jgt=s(YN);_uo=r(jgt,"TapasTokenizer"),jgt.forEach(t),uuo=r(q9e," (TAPAS model)"),q9e.forEach(t),buo=i(S),$h=n(S,"LI",{});var j9e=s($h);mde=n(j9e,"STRONG",{});var Dgt=s(mde);vuo=r(Dgt,"tapex"),Dgt.forEach(t),Fuo=r(j9e," \u2014 "),KN=n(j9e,"A",{href:!0});var Ggt=s(KN);Tuo=r(Ggt,"TapexTokenizer"),Ggt.forEach(t),Muo=r(j9e," (TAPEX model)"),j9e.forEach(t),Euo=i(S),kh=n(S,"LI",{});var D9e=s(kh);gde=n(D9e,"STRONG",{});var Ogt=s(gde);Cuo=r(Ogt,"transfo-xl"),Ogt.forEach(t),wuo=r(D9e," \u2014 "),ZN=n(D9e,"A",{href:!0});var Vgt=s(ZN);Auo=r(Vgt,"TransfoXLTokenizer"),Vgt.forEach(t),Luo=r(D9e," (Transformer-XL model)"),D9e.forEach(t),yuo=i(S),Vs=n(S,"LI",{});var OS=s(Vs);hde=n(OS,"STRONG",{});var Xgt=s(hde);xuo=r(Xgt,"vilt"),Xgt.forEach(t),$uo=r(OS," \u2014 "),eq=n(OS,"A",{href:!0});var zgt=s(eq);kuo=r(zgt,"BertTokenizer"),zgt.forEach(t),Suo=r(OS," or "),oq=n(OS,"A",{href:!0});var Wgt=s(oq);Ruo=r(Wgt,"BertTokenizerFast"),Wgt.forEach(t),Puo=r(OS," (ViLT model)"),OS.forEach(t),Buo=i(S),Xs=n(S,"LI",{});var VS=s(Xs);pde=n(VS,"STRONG",{});var Qgt=s(pde);Iuo=r(Qgt,"visual_bert"),Qgt.forEach(t),Nuo=r(VS," \u2014 "),rq=n(VS,"A",{href:!0});var Hgt=s(rq);quo=r(Hgt,"BertTokenizer"),Hgt.forEach(t),juo=r(VS," or "),tq=n(VS,"A",{href:!0});var Ugt=s(tq);Duo=r(Ugt,"BertTokenizerFast"),Ugt.forEach(t),Guo=r(VS," (VisualBERT model)"),VS.forEach(t),Ouo=i(S),Sh=n(S,"LI",{});var G9e=s(Sh);_de=n(G9e,"STRONG",{});var Jgt=s(_de);Vuo=r(Jgt,"wav2vec2"),Jgt.forEach(t),Xuo=r(G9e," \u2014 "),aq=n(G9e,"A",{href:!0});var Ygt=s(aq);zuo=r(Ygt,"Wav2Vec2CTCTokenizer"),Ygt.forEach(t),Wuo=r(G9e," (Wav2Vec2 model)"),G9e.forEach(t),Quo=i(S),Rh=n(S,"LI",{});var O9e=s(Rh);ude=n(O9e,"STRONG",{});var Kgt=s(ude);Huo=r(Kgt,"wav2vec2-conformer"),Kgt.forEach(t),Uuo=r(O9e," \u2014 "),nq=n(O9e,"A",{href:!0});var Zgt=s(nq);Juo=r(Zgt,"Wav2Vec2CTCTokenizer"),Zgt.forEach(t),Yuo=r(O9e," (Wav2Vec2-Conformer model)"),O9e.forEach(t),Kuo=i(S),Ph=n(S,"LI",{});var V9e=s(Ph);bde=n(V9e,"STRONG",{});var eht=s(bde);Zuo=r(eht,"wav2vec2_phoneme"),eht.forEach(t),e1o=r(V9e," \u2014 "),sq=n(V9e,"A",{href:!0});var oht=s(sq);o1o=r(oht,"Wav2Vec2PhonemeCTCTokenizer"),oht.forEach(t),r1o=r(V9e," (Wav2Vec2Phoneme model)"),V9e.forEach(t),t1o=i(S),zs=n(S,"LI",{});var XS=s(zs);vde=n(XS,"STRONG",{});var rht=s(vde);a1o=r(rht,"xglm"),rht.forEach(t),n1o=r(XS," \u2014 "),lq=n(XS,"A",{href:!0});var tht=s(lq);s1o=r(tht,"XGLMTokenizer"),tht.forEach(t),l1o=r(XS," or "),iq=n(XS,"A",{href:!0});var aht=s(iq);i1o=r(aht,"XGLMTokenizerFast"),aht.forEach(t),d1o=r(XS," (XGLM model)"),XS.forEach(t),c1o=i(S),Bh=n(S,"LI",{});var X9e=s(Bh);Fde=n(X9e,"STRONG",{});var nht=s(Fde);f1o=r(nht,"xlm"),nht.forEach(t),m1o=r(X9e," \u2014 "),dq=n(X9e,"A",{href:!0});var sht=s(dq);g1o=r(sht,"XLMTokenizer"),sht.forEach(t),h1o=r(X9e," (XLM model)"),X9e.forEach(t),p1o=i(S),Ih=n(S,"LI",{});var z9e=s(Ih);Tde=n(z9e,"STRONG",{});var lht=s(Tde);_1o=r(lht,"xlm-prophetnet"),lht.forEach(t),u1o=r(z9e," \u2014 "),cq=n(z9e,"A",{href:!0});var iht=s(cq);b1o=r(iht,"XLMProphetNetTokenizer"),iht.forEach(t),v1o=r(z9e," (XLM-ProphetNet model)"),z9e.forEach(t),F1o=i(S),Ws=n(S,"LI",{});var zS=s(Ws);Mde=n(zS,"STRONG",{});var dht=s(Mde);T1o=r(dht,"xlm-roberta"),dht.forEach(t),M1o=r(zS," \u2014 "),fq=n(zS,"A",{href:!0});var cht=s(fq);E1o=r(cht,"XLMRobertaTokenizer"),cht.forEach(t),C1o=r(zS," or "),mq=n(zS,"A",{href:!0});var fht=s(mq);w1o=r(fht,"XLMRobertaTokenizerFast"),fht.forEach(t),A1o=r(zS," (XLM-RoBERTa model)"),zS.forEach(t),L1o=i(S),Qs=n(S,"LI",{});var WS=s(Qs);Ede=n(WS,"STRONG",{});var mht=s(Ede);y1o=r(mht,"xlm-roberta-xl"),mht.forEach(t),x1o=r(WS," \u2014 "),gq=n(WS,"A",{href:!0});var ght=s(gq);$1o=r(ght,"RobertaTokenizer"),ght.forEach(t),k1o=r(WS," or "),hq=n(WS,"A",{href:!0});var hht=s(hq);S1o=r(hht,"RobertaTokenizerFast"),hht.forEach(t),R1o=r(WS," (XLM-RoBERTa-XL model)"),WS.forEach(t),P1o=i(S),Hs=n(S,"LI",{});var QS=s(Hs);Cde=n(QS,"STRONG",{});var pht=s(Cde);B1o=r(pht,"xlnet"),pht.forEach(t),I1o=r(QS," \u2014 "),pq=n(QS,"A",{href:!0});var _ht=s(pq);N1o=r(_ht,"XLNetTokenizer"),_ht.forEach(t),q1o=r(QS," or "),_q=n(QS,"A",{href:!0});var uht=s(_q);j1o=r(uht,"XLNetTokenizerFast"),uht.forEach(t),D1o=r(QS," (XLNet model)"),QS.forEach(t),G1o=i(S),Us=n(S,"LI",{});var HS=s(Us);wde=n(HS,"STRONG",{});var bht=s(wde);O1o=r(bht,"yoso"),bht.forEach(t),V1o=r(HS," \u2014 "),uq=n(HS,"A",{href:!0});var vht=s(uq);X1o=r(vht,"AlbertTokenizer"),vht.forEach(t),z1o=r(HS," or "),bq=n(HS,"A",{href:!0});var Fht=s(bq);W1o=r(Fht,"AlbertTokenizerFast"),Fht.forEach(t),Q1o=r(HS," (YOSO model)"),HS.forEach(t),S.forEach(t),H1o=i(rl),T(Nh.$$.fragment,rl),rl.forEach(t),U1o=i(ol),qh=n(ol,"DIV",{class:!0});var vQe=s(qh);T(PL.$$.fragment,vQe),J1o=i(vQe),Ade=n(vQe,"P",{});var Tht=s(Ade);Y1o=r(Tht,"Register a new tokenizer in this mapping."),Tht.forEach(t),vQe.forEach(t),ol.forEach(t),bze=i(f),Gi=n(f,"H2",{class:!0});var FQe=s(Gi);jh=n(FQe,"A",{id:!0,class:!0,href:!0});var Mht=s(jh);Lde=n(Mht,"SPAN",{});var Eht=s(Lde);T(BL.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),K1o=i(FQe),yde=n(FQe,"SPAN",{});var Cht=s(yde);Z1o=r(Cht,"AutoFeatureExtractor"),Cht.forEach(t),FQe.forEach(t),vze=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(IL.$$.fragment,tl),e2o=i(tl),NL=n(tl,"P",{});var TQe=s(NL);o2o=r(TQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vq=n(TQe,"A",{href:!0});var wht=s(vq);r2o=r(wht,"AutoFeatureExtractor.from_pretrained()"),wht.forEach(t),t2o=r(TQe," class method."),TQe.forEach(t),a2o=i(tl),qL=n(tl,"P",{});var MQe=s(qL);n2o=r(MQe,"This class cannot be instantiated directly using "),xde=n(MQe,"CODE",{});var Aht=s(xde);s2o=r(Aht,"__init__()"),Aht.forEach(t),l2o=r(MQe," (throws an error)."),MQe.forEach(t),i2o=i(tl),Ue=n(tl,"DIV",{class:!0});var na=s(Ue);T(jL.$$.fragment,na),d2o=i(na),$de=n(na,"P",{});var Lht=s($de);c2o=r(Lht,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lht.forEach(t),f2o=i(na),Ba=n(na,"P",{});var EA=s(Ba);m2o=r(EA,"The feature extractor class to instantiate is selected based on the "),kde=n(EA,"CODE",{});var yht=s(kde);g2o=r(yht,"model_type"),yht.forEach(t),h2o=r(EA,` property of the config object
(either passed as an argument or loaded from `),Sde=n(EA,"CODE",{});var xht=s(Sde);p2o=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),_2o=r(EA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rde=n(EA,"CODE",{});var $ht=s(Rde);u2o=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),b2o=r(EA,":"),EA.forEach(t),v2o=i(na),U=n(na,"UL",{});var Y=s(U);Dh=n(Y,"LI",{});var W9e=s(Dh);Pde=n(W9e,"STRONG",{});var kht=s(Pde);F2o=r(kht,"beit"),kht.forEach(t),T2o=r(W9e," \u2014 "),Fq=n(W9e,"A",{href:!0});var Sht=s(Fq);M2o=r(Sht,"BeitFeatureExtractor"),Sht.forEach(t),E2o=r(W9e," (BEiT model)"),W9e.forEach(t),C2o=i(Y),Gh=n(Y,"LI",{});var Q9e=s(Gh);Bde=n(Q9e,"STRONG",{});var Rht=s(Bde);w2o=r(Rht,"clip"),Rht.forEach(t),A2o=r(Q9e," \u2014 "),Tq=n(Q9e,"A",{href:!0});var Pht=s(Tq);L2o=r(Pht,"CLIPFeatureExtractor"),Pht.forEach(t),y2o=r(Q9e," (CLIP model)"),Q9e.forEach(t),x2o=i(Y),Oh=n(Y,"LI",{});var H9e=s(Oh);Ide=n(H9e,"STRONG",{});var Bht=s(Ide);$2o=r(Bht,"convnext"),Bht.forEach(t),k2o=r(H9e," \u2014 "),Mq=n(H9e,"A",{href:!0});var Iht=s(Mq);S2o=r(Iht,"ConvNextFeatureExtractor"),Iht.forEach(t),R2o=r(H9e," (ConvNeXT model)"),H9e.forEach(t),P2o=i(Y),Vh=n(Y,"LI",{});var U9e=s(Vh);Nde=n(U9e,"STRONG",{});var Nht=s(Nde);B2o=r(Nht,"cvt"),Nht.forEach(t),I2o=r(U9e," \u2014 "),Eq=n(U9e,"A",{href:!0});var qht=s(Eq);N2o=r(qht,"ConvNextFeatureExtractor"),qht.forEach(t),q2o=r(U9e," (CvT model)"),U9e.forEach(t),j2o=i(Y),Xh=n(Y,"LI",{});var J9e=s(Xh);qde=n(J9e,"STRONG",{});var jht=s(qde);D2o=r(jht,"data2vec-audio"),jht.forEach(t),G2o=r(J9e," \u2014 "),Cq=n(J9e,"A",{href:!0});var Dht=s(Cq);O2o=r(Dht,"Wav2Vec2FeatureExtractor"),Dht.forEach(t),V2o=r(J9e," (Data2VecAudio model)"),J9e.forEach(t),X2o=i(Y),zh=n(Y,"LI",{});var Y9e=s(zh);jde=n(Y9e,"STRONG",{});var Ght=s(jde);z2o=r(Ght,"data2vec-vision"),Ght.forEach(t),W2o=r(Y9e," \u2014 "),wq=n(Y9e,"A",{href:!0});var Oht=s(wq);Q2o=r(Oht,"BeitFeatureExtractor"),Oht.forEach(t),H2o=r(Y9e," (Data2VecVision model)"),Y9e.forEach(t),U2o=i(Y),Wh=n(Y,"LI",{});var K9e=s(Wh);Dde=n(K9e,"STRONG",{});var Vht=s(Dde);J2o=r(Vht,"deit"),Vht.forEach(t),Y2o=r(K9e," \u2014 "),Aq=n(K9e,"A",{href:!0});var Xht=s(Aq);K2o=r(Xht,"DeiTFeatureExtractor"),Xht.forEach(t),Z2o=r(K9e," (DeiT model)"),K9e.forEach(t),ebo=i(Y),Qh=n(Y,"LI",{});var Z9e=s(Qh);Gde=n(Z9e,"STRONG",{});var zht=s(Gde);obo=r(zht,"detr"),zht.forEach(t),rbo=r(Z9e," \u2014 "),Lq=n(Z9e,"A",{href:!0});var Wht=s(Lq);tbo=r(Wht,"DetrFeatureExtractor"),Wht.forEach(t),abo=r(Z9e," (DETR model)"),Z9e.forEach(t),nbo=i(Y),Hh=n(Y,"LI",{});var exe=s(Hh);Ode=n(exe,"STRONG",{});var Qht=s(Ode);sbo=r(Qht,"dpt"),Qht.forEach(t),lbo=r(exe," \u2014 "),yq=n(exe,"A",{href:!0});var Hht=s(yq);ibo=r(Hht,"DPTFeatureExtractor"),Hht.forEach(t),dbo=r(exe," (DPT model)"),exe.forEach(t),cbo=i(Y),Uh=n(Y,"LI",{});var oxe=s(Uh);Vde=n(oxe,"STRONG",{});var Uht=s(Vde);fbo=r(Uht,"flava"),Uht.forEach(t),mbo=r(oxe," \u2014 "),xq=n(oxe,"A",{href:!0});var Jht=s(xq);gbo=r(Jht,"FlavaFeatureExtractor"),Jht.forEach(t),hbo=r(oxe," (FLAVA model)"),oxe.forEach(t),pbo=i(Y),Jh=n(Y,"LI",{});var rxe=s(Jh);Xde=n(rxe,"STRONG",{});var Yht=s(Xde);_bo=r(Yht,"glpn"),Yht.forEach(t),ubo=r(rxe," \u2014 "),$q=n(rxe,"A",{href:!0});var Kht=s($q);bbo=r(Kht,"GLPNFeatureExtractor"),Kht.forEach(t),vbo=r(rxe," (GLPN model)"),rxe.forEach(t),Fbo=i(Y),Yh=n(Y,"LI",{});var txe=s(Yh);zde=n(txe,"STRONG",{});var Zht=s(zde);Tbo=r(Zht,"groupvit"),Zht.forEach(t),Mbo=r(txe," \u2014 "),kq=n(txe,"A",{href:!0});var ept=s(kq);Ebo=r(ept,"CLIPFeatureExtractor"),ept.forEach(t),Cbo=r(txe," (GroupViT model)"),txe.forEach(t),wbo=i(Y),Kh=n(Y,"LI",{});var axe=s(Kh);Wde=n(axe,"STRONG",{});var opt=s(Wde);Abo=r(opt,"hubert"),opt.forEach(t),Lbo=r(axe," \u2014 "),Sq=n(axe,"A",{href:!0});var rpt=s(Sq);ybo=r(rpt,"Wav2Vec2FeatureExtractor"),rpt.forEach(t),xbo=r(axe," (Hubert model)"),axe.forEach(t),$bo=i(Y),Zh=n(Y,"LI",{});var nxe=s(Zh);Qde=n(nxe,"STRONG",{});var tpt=s(Qde);kbo=r(tpt,"imagegpt"),tpt.forEach(t),Sbo=r(nxe," \u2014 "),Rq=n(nxe,"A",{href:!0});var apt=s(Rq);Rbo=r(apt,"ImageGPTFeatureExtractor"),apt.forEach(t),Pbo=r(nxe," (ImageGPT model)"),nxe.forEach(t),Bbo=i(Y),ep=n(Y,"LI",{});var sxe=s(ep);Hde=n(sxe,"STRONG",{});var npt=s(Hde);Ibo=r(npt,"layoutlmv2"),npt.forEach(t),Nbo=r(sxe," \u2014 "),Pq=n(sxe,"A",{href:!0});var spt=s(Pq);qbo=r(spt,"LayoutLMv2FeatureExtractor"),spt.forEach(t),jbo=r(sxe," (LayoutLMv2 model)"),sxe.forEach(t),Dbo=i(Y),op=n(Y,"LI",{});var lxe=s(op);Ude=n(lxe,"STRONG",{});var lpt=s(Ude);Gbo=r(lpt,"layoutlmv3"),lpt.forEach(t),Obo=r(lxe," \u2014 "),Bq=n(lxe,"A",{href:!0});var ipt=s(Bq);Vbo=r(ipt,"LayoutLMv3FeatureExtractor"),ipt.forEach(t),Xbo=r(lxe," (LayoutLMv3 model)"),lxe.forEach(t),zbo=i(Y),rp=n(Y,"LI",{});var ixe=s(rp);Jde=n(ixe,"STRONG",{});var dpt=s(Jde);Wbo=r(dpt,"levit"),dpt.forEach(t),Qbo=r(ixe," \u2014 "),Iq=n(ixe,"A",{href:!0});var cpt=s(Iq);Hbo=r(cpt,"LevitFeatureExtractor"),cpt.forEach(t),Ubo=r(ixe," (LeViT model)"),ixe.forEach(t),Jbo=i(Y),tp=n(Y,"LI",{});var dxe=s(tp);Yde=n(dxe,"STRONG",{});var fpt=s(Yde);Ybo=r(fpt,"maskformer"),fpt.forEach(t),Kbo=r(dxe," \u2014 "),Nq=n(dxe,"A",{href:!0});var mpt=s(Nq);Zbo=r(mpt,"MaskFormerFeatureExtractor"),mpt.forEach(t),evo=r(dxe," (MaskFormer model)"),dxe.forEach(t),ovo=i(Y),ap=n(Y,"LI",{});var cxe=s(ap);Kde=n(cxe,"STRONG",{});var gpt=s(Kde);rvo=r(gpt,"mctct"),gpt.forEach(t),tvo=r(cxe," \u2014 "),qq=n(cxe,"A",{href:!0});var hpt=s(qq);avo=r(hpt,"MCTCTFeatureExtractor"),hpt.forEach(t),nvo=r(cxe," (M-CTC-T model)"),cxe.forEach(t),svo=i(Y),np=n(Y,"LI",{});var fxe=s(np);Zde=n(fxe,"STRONG",{});var ppt=s(Zde);lvo=r(ppt,"mobilevit"),ppt.forEach(t),ivo=r(fxe," \u2014 "),jq=n(fxe,"A",{href:!0});var _pt=s(jq);dvo=r(_pt,"MobileViTFeatureExtractor"),_pt.forEach(t),cvo=r(fxe," (MobileViT model)"),fxe.forEach(t),fvo=i(Y),sp=n(Y,"LI",{});var mxe=s(sp);ece=n(mxe,"STRONG",{});var upt=s(ece);mvo=r(upt,"owlvit"),upt.forEach(t),gvo=r(mxe," \u2014 "),Dq=n(mxe,"A",{href:!0});var bpt=s(Dq);hvo=r(bpt,"OwlViTFeatureExtractor"),bpt.forEach(t),pvo=r(mxe," (OWL-ViT model)"),mxe.forEach(t),_vo=i(Y),lp=n(Y,"LI",{});var gxe=s(lp);oce=n(gxe,"STRONG",{});var vpt=s(oce);uvo=r(vpt,"perceiver"),vpt.forEach(t),bvo=r(gxe," \u2014 "),Gq=n(gxe,"A",{href:!0});var Fpt=s(Gq);vvo=r(Fpt,"PerceiverFeatureExtractor"),Fpt.forEach(t),Fvo=r(gxe," (Perceiver model)"),gxe.forEach(t),Tvo=i(Y),ip=n(Y,"LI",{});var hxe=s(ip);rce=n(hxe,"STRONG",{});var Tpt=s(rce);Mvo=r(Tpt,"poolformer"),Tpt.forEach(t),Evo=r(hxe," \u2014 "),Oq=n(hxe,"A",{href:!0});var Mpt=s(Oq);Cvo=r(Mpt,"PoolFormerFeatureExtractor"),Mpt.forEach(t),wvo=r(hxe," (PoolFormer model)"),hxe.forEach(t),Avo=i(Y),dp=n(Y,"LI",{});var pxe=s(dp);tce=n(pxe,"STRONG",{});var Ept=s(tce);Lvo=r(Ept,"regnet"),Ept.forEach(t),yvo=r(pxe," \u2014 "),Vq=n(pxe,"A",{href:!0});var Cpt=s(Vq);xvo=r(Cpt,"ConvNextFeatureExtractor"),Cpt.forEach(t),$vo=r(pxe," (RegNet model)"),pxe.forEach(t),kvo=i(Y),cp=n(Y,"LI",{});var _xe=s(cp);ace=n(_xe,"STRONG",{});var wpt=s(ace);Svo=r(wpt,"resnet"),wpt.forEach(t),Rvo=r(_xe," \u2014 "),Xq=n(_xe,"A",{href:!0});var Apt=s(Xq);Pvo=r(Apt,"ConvNextFeatureExtractor"),Apt.forEach(t),Bvo=r(_xe," (ResNet model)"),_xe.forEach(t),Ivo=i(Y),fp=n(Y,"LI",{});var uxe=s(fp);nce=n(uxe,"STRONG",{});var Lpt=s(nce);Nvo=r(Lpt,"segformer"),Lpt.forEach(t),qvo=r(uxe," \u2014 "),zq=n(uxe,"A",{href:!0});var ypt=s(zq);jvo=r(ypt,"SegformerFeatureExtractor"),ypt.forEach(t),Dvo=r(uxe," (SegFormer model)"),uxe.forEach(t),Gvo=i(Y),mp=n(Y,"LI",{});var bxe=s(mp);sce=n(bxe,"STRONG",{});var xpt=s(sce);Ovo=r(xpt,"speech_to_text"),xpt.forEach(t),Vvo=r(bxe," \u2014 "),Wq=n(bxe,"A",{href:!0});var $pt=s(Wq);Xvo=r($pt,"Speech2TextFeatureExtractor"),$pt.forEach(t),zvo=r(bxe," (Speech2Text model)"),bxe.forEach(t),Wvo=i(Y),gp=n(Y,"LI",{});var vxe=s(gp);lce=n(vxe,"STRONG",{});var kpt=s(lce);Qvo=r(kpt,"swin"),kpt.forEach(t),Hvo=r(vxe," \u2014 "),Qq=n(vxe,"A",{href:!0});var Spt=s(Qq);Uvo=r(Spt,"ViTFeatureExtractor"),Spt.forEach(t),Jvo=r(vxe," (Swin Transformer model)"),vxe.forEach(t),Yvo=i(Y),hp=n(Y,"LI",{});var Fxe=s(hp);ice=n(Fxe,"STRONG",{});var Rpt=s(ice);Kvo=r(Rpt,"swinv2"),Rpt.forEach(t),Zvo=r(Fxe," \u2014 "),Hq=n(Fxe,"A",{href:!0});var Ppt=s(Hq);e3o=r(Ppt,"ViTFeatureExtractor"),Ppt.forEach(t),o3o=r(Fxe," (Swin Transformer V2 model)"),Fxe.forEach(t),r3o=i(Y),pp=n(Y,"LI",{});var Txe=s(pp);dce=n(Txe,"STRONG",{});var Bpt=s(dce);t3o=r(Bpt,"van"),Bpt.forEach(t),a3o=r(Txe," \u2014 "),Uq=n(Txe,"A",{href:!0});var Ipt=s(Uq);n3o=r(Ipt,"ConvNextFeatureExtractor"),Ipt.forEach(t),s3o=r(Txe," (VAN model)"),Txe.forEach(t),l3o=i(Y),_p=n(Y,"LI",{});var Mxe=s(_p);cce=n(Mxe,"STRONG",{});var Npt=s(cce);i3o=r(Npt,"vilt"),Npt.forEach(t),d3o=r(Mxe," \u2014 "),Jq=n(Mxe,"A",{href:!0});var qpt=s(Jq);c3o=r(qpt,"ViltFeatureExtractor"),qpt.forEach(t),f3o=r(Mxe," (ViLT model)"),Mxe.forEach(t),m3o=i(Y),up=n(Y,"LI",{});var Exe=s(up);fce=n(Exe,"STRONG",{});var jpt=s(fce);g3o=r(jpt,"vit"),jpt.forEach(t),h3o=r(Exe," \u2014 "),Yq=n(Exe,"A",{href:!0});var Dpt=s(Yq);p3o=r(Dpt,"ViTFeatureExtractor"),Dpt.forEach(t),_3o=r(Exe," (ViT model)"),Exe.forEach(t),u3o=i(Y),bp=n(Y,"LI",{});var Cxe=s(bp);mce=n(Cxe,"STRONG",{});var Gpt=s(mce);b3o=r(Gpt,"vit_mae"),Gpt.forEach(t),v3o=r(Cxe," \u2014 "),Kq=n(Cxe,"A",{href:!0});var Opt=s(Kq);F3o=r(Opt,"ViTFeatureExtractor"),Opt.forEach(t),T3o=r(Cxe," (ViTMAE model)"),Cxe.forEach(t),M3o=i(Y),vp=n(Y,"LI",{});var wxe=s(vp);gce=n(wxe,"STRONG",{});var Vpt=s(gce);E3o=r(Vpt,"wav2vec2"),Vpt.forEach(t),C3o=r(wxe," \u2014 "),Zq=n(wxe,"A",{href:!0});var Xpt=s(Zq);w3o=r(Xpt,"Wav2Vec2FeatureExtractor"),Xpt.forEach(t),A3o=r(wxe," (Wav2Vec2 model)"),wxe.forEach(t),L3o=i(Y),Fp=n(Y,"LI",{});var Axe=s(Fp);hce=n(Axe,"STRONG",{});var zpt=s(hce);y3o=r(zpt,"wav2vec2-conformer"),zpt.forEach(t),x3o=r(Axe," \u2014 "),ej=n(Axe,"A",{href:!0});var Wpt=s(ej);$3o=r(Wpt,"Wav2Vec2FeatureExtractor"),Wpt.forEach(t),k3o=r(Axe," (Wav2Vec2-Conformer model)"),Axe.forEach(t),S3o=i(Y),Tp=n(Y,"LI",{});var Lxe=s(Tp);pce=n(Lxe,"STRONG",{});var Qpt=s(pce);R3o=r(Qpt,"yolos"),Qpt.forEach(t),P3o=r(Lxe," \u2014 "),oj=n(Lxe,"A",{href:!0});var Hpt=s(oj);B3o=r(Hpt,"YolosFeatureExtractor"),Hpt.forEach(t),I3o=r(Lxe," (YOLOS model)"),Lxe.forEach(t),Y.forEach(t),N3o=i(na),T(Mp.$$.fragment,na),q3o=i(na),T(Ep.$$.fragment,na),na.forEach(t),j3o=i(tl),Cp=n(tl,"DIV",{class:!0});var EQe=s(Cp);T(DL.$$.fragment,EQe),D3o=i(EQe),_ce=n(EQe,"P",{});var Upt=s(_ce);G3o=r(Upt,"Register a new feature extractor for this class."),Upt.forEach(t),EQe.forEach(t),tl.forEach(t),Fze=i(f),Oi=n(f,"H2",{class:!0});var CQe=s(Oi);wp=n(CQe,"A",{id:!0,class:!0,href:!0});var Jpt=s(wp);uce=n(Jpt,"SPAN",{});var Ypt=s(uce);T(GL.$$.fragment,Ypt),Ypt.forEach(t),Jpt.forEach(t),O3o=i(CQe),bce=n(CQe,"SPAN",{});var Kpt=s(bce);V3o=r(Kpt,"AutoProcessor"),Kpt.forEach(t),CQe.forEach(t),Tze=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(OL.$$.fragment,al),X3o=i(al),VL=n(al,"P",{});var wQe=s(VL);z3o=r(wQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rj=n(wQe,"A",{href:!0});var Zpt=s(rj);W3o=r(Zpt,"AutoProcessor.from_pretrained()"),Zpt.forEach(t),Q3o=r(wQe," class method."),wQe.forEach(t),H3o=i(al),XL=n(al,"P",{});var AQe=s(XL);U3o=r(AQe,"This class cannot be instantiated directly using "),vce=n(AQe,"CODE",{});var e_t=s(vce);J3o=r(e_t,"__init__()"),e_t.forEach(t),Y3o=r(AQe," (throws an error)."),AQe.forEach(t),K3o=i(al),Je=n(al,"DIV",{class:!0});var sa=s(Je);T(zL.$$.fragment,sa),Z3o=i(sa),Fce=n(sa,"P",{});var o_t=s(Fce);eFo=r(o_t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),o_t.forEach(t),oFo=i(sa),Vi=n(sa,"P",{});var hte=s(Vi);rFo=r(hte,"The processor class to instantiate is selected based on the "),Tce=n(hte,"CODE",{});var r_t=s(Tce);tFo=r(r_t,"model_type"),r_t.forEach(t),aFo=r(hte,` property of the config object (either
passed as an argument or loaded from `),Mce=n(hte,"CODE",{});var t_t=s(Mce);nFo=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),sFo=r(hte," if possible):"),hte.forEach(t),lFo=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Ap=n(_e,"LI",{});var yxe=s(Ap);Ece=n(yxe,"STRONG",{});var a_t=s(Ece);iFo=r(a_t,"clip"),a_t.forEach(t),dFo=r(yxe," \u2014 "),tj=n(yxe,"A",{href:!0});var n_t=s(tj);cFo=r(n_t,"CLIPProcessor"),n_t.forEach(t),fFo=r(yxe," (CLIP model)"),yxe.forEach(t),mFo=i(_e),Lp=n(_e,"LI",{});var xxe=s(Lp);Cce=n(xxe,"STRONG",{});var s_t=s(Cce);gFo=r(s_t,"flava"),s_t.forEach(t),hFo=r(xxe," \u2014 "),aj=n(xxe,"A",{href:!0});var l_t=s(aj);pFo=r(l_t,"FlavaProcessor"),l_t.forEach(t),_Fo=r(xxe," (FLAVA model)"),xxe.forEach(t),uFo=i(_e),yp=n(_e,"LI",{});var $xe=s(yp);wce=n($xe,"STRONG",{});var i_t=s(wce);bFo=r(i_t,"groupvit"),i_t.forEach(t),vFo=r($xe," \u2014 "),nj=n($xe,"A",{href:!0});var d_t=s(nj);FFo=r(d_t,"CLIPProcessor"),d_t.forEach(t),TFo=r($xe," (GroupViT model)"),$xe.forEach(t),MFo=i(_e),xp=n(_e,"LI",{});var kxe=s(xp);Ace=n(kxe,"STRONG",{});var c_t=s(Ace);EFo=r(c_t,"layoutlmv2"),c_t.forEach(t),CFo=r(kxe," \u2014 "),sj=n(kxe,"A",{href:!0});var f_t=s(sj);wFo=r(f_t,"LayoutLMv2Processor"),f_t.forEach(t),AFo=r(kxe," (LayoutLMv2 model)"),kxe.forEach(t),LFo=i(_e),$p=n(_e,"LI",{});var Sxe=s($p);Lce=n(Sxe,"STRONG",{});var m_t=s(Lce);yFo=r(m_t,"layoutlmv3"),m_t.forEach(t),xFo=r(Sxe," \u2014 "),lj=n(Sxe,"A",{href:!0});var g_t=s(lj);$Fo=r(g_t,"LayoutLMv3Processor"),g_t.forEach(t),kFo=r(Sxe," (LayoutLMv3 model)"),Sxe.forEach(t),SFo=i(_e),kp=n(_e,"LI",{});var Rxe=s(kp);yce=n(Rxe,"STRONG",{});var h_t=s(yce);RFo=r(h_t,"layoutxlm"),h_t.forEach(t),PFo=r(Rxe," \u2014 "),ij=n(Rxe,"A",{href:!0});var p_t=s(ij);BFo=r(p_t,"LayoutXLMProcessor"),p_t.forEach(t),IFo=r(Rxe," (LayoutXLM model)"),Rxe.forEach(t),NFo=i(_e),Sp=n(_e,"LI",{});var Pxe=s(Sp);xce=n(Pxe,"STRONG",{});var __t=s(xce);qFo=r(__t,"owlvit"),__t.forEach(t),jFo=r(Pxe," \u2014 "),dj=n(Pxe,"A",{href:!0});var u_t=s(dj);DFo=r(u_t,"OwlViTProcessor"),u_t.forEach(t),GFo=r(Pxe," (OWL-ViT model)"),Pxe.forEach(t),OFo=i(_e),Rp=n(_e,"LI",{});var Bxe=s(Rp);$ce=n(Bxe,"STRONG",{});var b_t=s($ce);VFo=r(b_t,"sew"),b_t.forEach(t),XFo=r(Bxe," \u2014 "),cj=n(Bxe,"A",{href:!0});var v_t=s(cj);zFo=r(v_t,"Wav2Vec2Processor"),v_t.forEach(t),WFo=r(Bxe," (SEW model)"),Bxe.forEach(t),QFo=i(_e),Pp=n(_e,"LI",{});var Ixe=s(Pp);kce=n(Ixe,"STRONG",{});var F_t=s(kce);HFo=r(F_t,"sew-d"),F_t.forEach(t),UFo=r(Ixe," \u2014 "),fj=n(Ixe,"A",{href:!0});var T_t=s(fj);JFo=r(T_t,"Wav2Vec2Processor"),T_t.forEach(t),YFo=r(Ixe," (SEW-D model)"),Ixe.forEach(t),KFo=i(_e),Bp=n(_e,"LI",{});var Nxe=s(Bp);Sce=n(Nxe,"STRONG",{});var M_t=s(Sce);ZFo=r(M_t,"speech_to_text"),M_t.forEach(t),e6o=r(Nxe," \u2014 "),mj=n(Nxe,"A",{href:!0});var E_t=s(mj);o6o=r(E_t,"Speech2TextProcessor"),E_t.forEach(t),r6o=r(Nxe," (Speech2Text model)"),Nxe.forEach(t),t6o=i(_e),Ip=n(_e,"LI",{});var qxe=s(Ip);Rce=n(qxe,"STRONG",{});var C_t=s(Rce);a6o=r(C_t,"speech_to_text_2"),C_t.forEach(t),n6o=r(qxe," \u2014 "),gj=n(qxe,"A",{href:!0});var w_t=s(gj);s6o=r(w_t,"Speech2Text2Processor"),w_t.forEach(t),l6o=r(qxe," (Speech2Text2 model)"),qxe.forEach(t),i6o=i(_e),Np=n(_e,"LI",{});var jxe=s(Np);Pce=n(jxe,"STRONG",{});var A_t=s(Pce);d6o=r(A_t,"trocr"),A_t.forEach(t),c6o=r(jxe," \u2014 "),hj=n(jxe,"A",{href:!0});var L_t=s(hj);f6o=r(L_t,"TrOCRProcessor"),L_t.forEach(t),m6o=r(jxe," (TrOCR model)"),jxe.forEach(t),g6o=i(_e),qp=n(_e,"LI",{});var Dxe=s(qp);Bce=n(Dxe,"STRONG",{});var y_t=s(Bce);h6o=r(y_t,"unispeech"),y_t.forEach(t),p6o=r(Dxe," \u2014 "),pj=n(Dxe,"A",{href:!0});var x_t=s(pj);_6o=r(x_t,"Wav2Vec2Processor"),x_t.forEach(t),u6o=r(Dxe," (UniSpeech model)"),Dxe.forEach(t),b6o=i(_e),jp=n(_e,"LI",{});var Gxe=s(jp);Ice=n(Gxe,"STRONG",{});var $_t=s(Ice);v6o=r($_t,"unispeech-sat"),$_t.forEach(t),F6o=r(Gxe," \u2014 "),_j=n(Gxe,"A",{href:!0});var k_t=s(_j);T6o=r(k_t,"Wav2Vec2Processor"),k_t.forEach(t),M6o=r(Gxe," (UniSpeechSat model)"),Gxe.forEach(t),E6o=i(_e),Dp=n(_e,"LI",{});var Oxe=s(Dp);Nce=n(Oxe,"STRONG",{});var S_t=s(Nce);C6o=r(S_t,"vilt"),S_t.forEach(t),w6o=r(Oxe," \u2014 "),uj=n(Oxe,"A",{href:!0});var R_t=s(uj);A6o=r(R_t,"ViltProcessor"),R_t.forEach(t),L6o=r(Oxe," (ViLT model)"),Oxe.forEach(t),y6o=i(_e),Gp=n(_e,"LI",{});var Vxe=s(Gp);qce=n(Vxe,"STRONG",{});var P_t=s(qce);x6o=r(P_t,"vision-text-dual-encoder"),P_t.forEach(t),$6o=r(Vxe," \u2014 "),bj=n(Vxe,"A",{href:!0});var B_t=s(bj);k6o=r(B_t,"VisionTextDualEncoderProcessor"),B_t.forEach(t),S6o=r(Vxe," (VisionTextDualEncoder model)"),Vxe.forEach(t),R6o=i(_e),Op=n(_e,"LI",{});var Xxe=s(Op);jce=n(Xxe,"STRONG",{});var I_t=s(jce);P6o=r(I_t,"wav2vec2"),I_t.forEach(t),B6o=r(Xxe," \u2014 "),vj=n(Xxe,"A",{href:!0});var N_t=s(vj);I6o=r(N_t,"Wav2Vec2Processor"),N_t.forEach(t),N6o=r(Xxe," (Wav2Vec2 model)"),Xxe.forEach(t),q6o=i(_e),Vp=n(_e,"LI",{});var zxe=s(Vp);Dce=n(zxe,"STRONG",{});var q_t=s(Dce);j6o=r(q_t,"wav2vec2-conformer"),q_t.forEach(t),D6o=r(zxe," \u2014 "),Fj=n(zxe,"A",{href:!0});var j_t=s(Fj);G6o=r(j_t,"Wav2Vec2Processor"),j_t.forEach(t),O6o=r(zxe," (Wav2Vec2-Conformer model)"),zxe.forEach(t),V6o=i(_e),Xp=n(_e,"LI",{});var Wxe=s(Xp);Gce=n(Wxe,"STRONG",{});var D_t=s(Gce);X6o=r(D_t,"wavlm"),D_t.forEach(t),z6o=r(Wxe," \u2014 "),Tj=n(Wxe,"A",{href:!0});var G_t=s(Tj);W6o=r(G_t,"Wav2Vec2Processor"),G_t.forEach(t),Q6o=r(Wxe," (WavLM model)"),Wxe.forEach(t),_e.forEach(t),H6o=i(sa),T(zp.$$.fragment,sa),U6o=i(sa),T(Wp.$$.fragment,sa),sa.forEach(t),J6o=i(al),Qp=n(al,"DIV",{class:!0});var LQe=s(Qp);T(WL.$$.fragment,LQe),Y6o=i(LQe),Oce=n(LQe,"P",{});var O_t=s(Oce);K6o=r(O_t,"Register a new processor for this class."),O_t.forEach(t),LQe.forEach(t),al.forEach(t),Mze=i(f),Xi=n(f,"H2",{class:!0});var yQe=s(Xi);Hp=n(yQe,"A",{id:!0,class:!0,href:!0});var V_t=s(Hp);Vce=n(V_t,"SPAN",{});var X_t=s(Vce);T(QL.$$.fragment,X_t),X_t.forEach(t),V_t.forEach(t),Z6o=i(yQe),Xce=n(yQe,"SPAN",{});var z_t=s(Xce);eTo=r(z_t,"AutoModel"),z_t.forEach(t),yQe.forEach(t),Eze=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(HL.$$.fragment,nl),oTo=i(nl),zi=n(nl,"P",{});var pte=s(zi);rTo=r(pte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mj=n(pte,"A",{href:!0});var W_t=s(Mj);tTo=r(W_t,"from_pretrained()"),W_t.forEach(t),aTo=r(pte," class method or the "),Ej=n(pte,"A",{href:!0});var Q_t=s(Ej);nTo=r(Q_t,"from_config()"),Q_t.forEach(t),sTo=r(pte,` class
method.`),pte.forEach(t),lTo=i(nl),UL=n(nl,"P",{});var xQe=s(UL);iTo=r(xQe,"This class cannot be instantiated directly using "),zce=n(xQe,"CODE",{});var H_t=s(zce);dTo=r(H_t,"__init__()"),H_t.forEach(t),cTo=r(xQe," (throws an error)."),xQe.forEach(t),fTo=i(nl),it=n(nl,"DIV",{class:!0});var CA=s(it);T(JL.$$.fragment,CA),mTo=i(CA),Wce=n(CA,"P",{});var U_t=s(Wce);gTo=r(U_t,"Instantiates one of the base model classes of the library from a configuration."),U_t.forEach(t),hTo=i(CA),Wi=n(CA,"P",{});var _te=s(Wi);pTo=r(_te,`Note:
Loading a model from its configuration file does `),Qce=n(_te,"STRONG",{});var J_t=s(Qce);_To=r(J_t,"not"),J_t.forEach(t),uTo=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(_te,"A",{href:!0});var Y_t=s(Cj);bTo=r(Y_t,"from_pretrained()"),Y_t.forEach(t),vTo=r(_te," to load the model weights."),_te.forEach(t),FTo=i(CA),T(Up.$$.fragment,CA),CA.forEach(t),TTo=i(nl),Ye=n(nl,"DIV",{class:!0});var la=s(Ye);T(YL.$$.fragment,la),MTo=i(la),Hce=n(la,"P",{});var K_t=s(Hce);ETo=r(K_t,"Instantiate one of the base model classes of the library from a pretrained model."),K_t.forEach(t),CTo=i(la),Ia=n(la,"P",{});var wA=s(Ia);wTo=r(wA,"The model class to instantiate is selected based on the "),Uce=n(wA,"CODE",{});var Z_t=s(Uce);ATo=r(Z_t,"model_type"),Z_t.forEach(t),LTo=r(wA,` property of the config object (either
passed as an argument or loaded from `),Jce=n(wA,"CODE",{});var eut=s(Jce);yTo=r(eut,"pretrained_model_name_or_path"),eut.forEach(t),xTo=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(wA,"CODE",{});var out=s(Yce);$To=r(out,"pretrained_model_name_or_path"),out.forEach(t),kTo=r(wA,":"),wA.forEach(t),STo=i(la),y=n(la,"UL",{});var x=s(y);Jp=n(x,"LI",{});var Qxe=s(Jp);Kce=n(Qxe,"STRONG",{});var rut=s(Kce);RTo=r(rut,"albert"),rut.forEach(t),PTo=r(Qxe," \u2014 "),wj=n(Qxe,"A",{href:!0});var tut=s(wj);BTo=r(tut,"AlbertModel"),tut.forEach(t),ITo=r(Qxe," (ALBERT model)"),Qxe.forEach(t),NTo=i(x),Yp=n(x,"LI",{});var Hxe=s(Yp);Zce=n(Hxe,"STRONG",{});var aut=s(Zce);qTo=r(aut,"bart"),aut.forEach(t),jTo=r(Hxe," \u2014 "),Aj=n(Hxe,"A",{href:!0});var nut=s(Aj);DTo=r(nut,"BartModel"),nut.forEach(t),GTo=r(Hxe," (BART model)"),Hxe.forEach(t),OTo=i(x),Kp=n(x,"LI",{});var Uxe=s(Kp);efe=n(Uxe,"STRONG",{});var sut=s(efe);VTo=r(sut,"beit"),sut.forEach(t),XTo=r(Uxe," \u2014 "),Lj=n(Uxe,"A",{href:!0});var lut=s(Lj);zTo=r(lut,"BeitModel"),lut.forEach(t),WTo=r(Uxe," (BEiT model)"),Uxe.forEach(t),QTo=i(x),Zp=n(x,"LI",{});var Jxe=s(Zp);ofe=n(Jxe,"STRONG",{});var iut=s(ofe);HTo=r(iut,"bert"),iut.forEach(t),UTo=r(Jxe," \u2014 "),yj=n(Jxe,"A",{href:!0});var dut=s(yj);JTo=r(dut,"BertModel"),dut.forEach(t),YTo=r(Jxe," (BERT model)"),Jxe.forEach(t),KTo=i(x),e_=n(x,"LI",{});var Yxe=s(e_);rfe=n(Yxe,"STRONG",{});var cut=s(rfe);ZTo=r(cut,"bert-generation"),cut.forEach(t),e8o=r(Yxe," \u2014 "),xj=n(Yxe,"A",{href:!0});var fut=s(xj);o8o=r(fut,"BertGenerationEncoder"),fut.forEach(t),r8o=r(Yxe," (Bert Generation model)"),Yxe.forEach(t),t8o=i(x),o_=n(x,"LI",{});var Kxe=s(o_);tfe=n(Kxe,"STRONG",{});var mut=s(tfe);a8o=r(mut,"big_bird"),mut.forEach(t),n8o=r(Kxe," \u2014 "),$j=n(Kxe,"A",{href:!0});var gut=s($j);s8o=r(gut,"BigBirdModel"),gut.forEach(t),l8o=r(Kxe," (BigBird model)"),Kxe.forEach(t),i8o=i(x),r_=n(x,"LI",{});var Zxe=s(r_);afe=n(Zxe,"STRONG",{});var hut=s(afe);d8o=r(hut,"bigbird_pegasus"),hut.forEach(t),c8o=r(Zxe," \u2014 "),kj=n(Zxe,"A",{href:!0});var put=s(kj);f8o=r(put,"BigBirdPegasusModel"),put.forEach(t),m8o=r(Zxe," (BigBird-Pegasus model)"),Zxe.forEach(t),g8o=i(x),t_=n(x,"LI",{});var e$e=s(t_);nfe=n(e$e,"STRONG",{});var _ut=s(nfe);h8o=r(_ut,"blenderbot"),_ut.forEach(t),p8o=r(e$e," \u2014 "),Sj=n(e$e,"A",{href:!0});var uut=s(Sj);_8o=r(uut,"BlenderbotModel"),uut.forEach(t),u8o=r(e$e," (Blenderbot model)"),e$e.forEach(t),b8o=i(x),a_=n(x,"LI",{});var o$e=s(a_);sfe=n(o$e,"STRONG",{});var but=s(sfe);v8o=r(but,"blenderbot-small"),but.forEach(t),F8o=r(o$e," \u2014 "),Rj=n(o$e,"A",{href:!0});var vut=s(Rj);T8o=r(vut,"BlenderbotSmallModel"),vut.forEach(t),M8o=r(o$e," (BlenderbotSmall model)"),o$e.forEach(t),E8o=i(x),n_=n(x,"LI",{});var r$e=s(n_);lfe=n(r$e,"STRONG",{});var Fut=s(lfe);C8o=r(Fut,"bloom"),Fut.forEach(t),w8o=r(r$e," \u2014 "),Pj=n(r$e,"A",{href:!0});var Tut=s(Pj);A8o=r(Tut,"BloomModel"),Tut.forEach(t),L8o=r(r$e," (BLOOM model)"),r$e.forEach(t),y8o=i(x),s_=n(x,"LI",{});var t$e=s(s_);ife=n(t$e,"STRONG",{});var Mut=s(ife);x8o=r(Mut,"camembert"),Mut.forEach(t),$8o=r(t$e," \u2014 "),Bj=n(t$e,"A",{href:!0});var Eut=s(Bj);k8o=r(Eut,"CamembertModel"),Eut.forEach(t),S8o=r(t$e," (CamemBERT model)"),t$e.forEach(t),R8o=i(x),l_=n(x,"LI",{});var a$e=s(l_);dfe=n(a$e,"STRONG",{});var Cut=s(dfe);P8o=r(Cut,"canine"),Cut.forEach(t),B8o=r(a$e," \u2014 "),Ij=n(a$e,"A",{href:!0});var wut=s(Ij);I8o=r(wut,"CanineModel"),wut.forEach(t),N8o=r(a$e," (CANINE model)"),a$e.forEach(t),q8o=i(x),i_=n(x,"LI",{});var n$e=s(i_);cfe=n(n$e,"STRONG",{});var Aut=s(cfe);j8o=r(Aut,"clip"),Aut.forEach(t),D8o=r(n$e," \u2014 "),Nj=n(n$e,"A",{href:!0});var Lut=s(Nj);G8o=r(Lut,"CLIPModel"),Lut.forEach(t),O8o=r(n$e," (CLIP model)"),n$e.forEach(t),V8o=i(x),d_=n(x,"LI",{});var s$e=s(d_);ffe=n(s$e,"STRONG",{});var yut=s(ffe);X8o=r(yut,"codegen"),yut.forEach(t),z8o=r(s$e," \u2014 "),qj=n(s$e,"A",{href:!0});var xut=s(qj);W8o=r(xut,"CodeGenModel"),xut.forEach(t),Q8o=r(s$e," (CodeGen model)"),s$e.forEach(t),H8o=i(x),c_=n(x,"LI",{});var l$e=s(c_);mfe=n(l$e,"STRONG",{});var $ut=s(mfe);U8o=r($ut,"convbert"),$ut.forEach(t),J8o=r(l$e," \u2014 "),jj=n(l$e,"A",{href:!0});var kut=s(jj);Y8o=r(kut,"ConvBertModel"),kut.forEach(t),K8o=r(l$e," (ConvBERT model)"),l$e.forEach(t),Z8o=i(x),f_=n(x,"LI",{});var i$e=s(f_);gfe=n(i$e,"STRONG",{});var Sut=s(gfe);eMo=r(Sut,"convnext"),Sut.forEach(t),oMo=r(i$e," \u2014 "),Dj=n(i$e,"A",{href:!0});var Rut=s(Dj);rMo=r(Rut,"ConvNextModel"),Rut.forEach(t),tMo=r(i$e," (ConvNeXT model)"),i$e.forEach(t),aMo=i(x),m_=n(x,"LI",{});var d$e=s(m_);hfe=n(d$e,"STRONG",{});var Put=s(hfe);nMo=r(Put,"ctrl"),Put.forEach(t),sMo=r(d$e," \u2014 "),Gj=n(d$e,"A",{href:!0});var But=s(Gj);lMo=r(But,"CTRLModel"),But.forEach(t),iMo=r(d$e," (CTRL model)"),d$e.forEach(t),dMo=i(x),g_=n(x,"LI",{});var c$e=s(g_);pfe=n(c$e,"STRONG",{});var Iut=s(pfe);cMo=r(Iut,"cvt"),Iut.forEach(t),fMo=r(c$e," \u2014 "),Oj=n(c$e,"A",{href:!0});var Nut=s(Oj);mMo=r(Nut,"CvtModel"),Nut.forEach(t),gMo=r(c$e," (CvT model)"),c$e.forEach(t),hMo=i(x),h_=n(x,"LI",{});var f$e=s(h_);_fe=n(f$e,"STRONG",{});var qut=s(_fe);pMo=r(qut,"data2vec-audio"),qut.forEach(t),_Mo=r(f$e," \u2014 "),Vj=n(f$e,"A",{href:!0});var jut=s(Vj);uMo=r(jut,"Data2VecAudioModel"),jut.forEach(t),bMo=r(f$e," (Data2VecAudio model)"),f$e.forEach(t),vMo=i(x),p_=n(x,"LI",{});var m$e=s(p_);ufe=n(m$e,"STRONG",{});var Dut=s(ufe);FMo=r(Dut,"data2vec-text"),Dut.forEach(t),TMo=r(m$e," \u2014 "),Xj=n(m$e,"A",{href:!0});var Gut=s(Xj);MMo=r(Gut,"Data2VecTextModel"),Gut.forEach(t),EMo=r(m$e," (Data2VecText model)"),m$e.forEach(t),CMo=i(x),__=n(x,"LI",{});var g$e=s(__);bfe=n(g$e,"STRONG",{});var Out=s(bfe);wMo=r(Out,"data2vec-vision"),Out.forEach(t),AMo=r(g$e," \u2014 "),zj=n(g$e,"A",{href:!0});var Vut=s(zj);LMo=r(Vut,"Data2VecVisionModel"),Vut.forEach(t),yMo=r(g$e," (Data2VecVision model)"),g$e.forEach(t),xMo=i(x),u_=n(x,"LI",{});var h$e=s(u_);vfe=n(h$e,"STRONG",{});var Xut=s(vfe);$Mo=r(Xut,"deberta"),Xut.forEach(t),kMo=r(h$e," \u2014 "),Wj=n(h$e,"A",{href:!0});var zut=s(Wj);SMo=r(zut,"DebertaModel"),zut.forEach(t),RMo=r(h$e," (DeBERTa model)"),h$e.forEach(t),PMo=i(x),b_=n(x,"LI",{});var p$e=s(b_);Ffe=n(p$e,"STRONG",{});var Wut=s(Ffe);BMo=r(Wut,"deberta-v2"),Wut.forEach(t),IMo=r(p$e," \u2014 "),Qj=n(p$e,"A",{href:!0});var Qut=s(Qj);NMo=r(Qut,"DebertaV2Model"),Qut.forEach(t),qMo=r(p$e," (DeBERTa-v2 model)"),p$e.forEach(t),jMo=i(x),v_=n(x,"LI",{});var _$e=s(v_);Tfe=n(_$e,"STRONG",{});var Hut=s(Tfe);DMo=r(Hut,"decision_transformer"),Hut.forEach(t),GMo=r(_$e," \u2014 "),Hj=n(_$e,"A",{href:!0});var Uut=s(Hj);OMo=r(Uut,"DecisionTransformerModel"),Uut.forEach(t),VMo=r(_$e," (Decision Transformer model)"),_$e.forEach(t),XMo=i(x),F_=n(x,"LI",{});var u$e=s(F_);Mfe=n(u$e,"STRONG",{});var Jut=s(Mfe);zMo=r(Jut,"deit"),Jut.forEach(t),WMo=r(u$e," \u2014 "),Uj=n(u$e,"A",{href:!0});var Yut=s(Uj);QMo=r(Yut,"DeiTModel"),Yut.forEach(t),HMo=r(u$e," (DeiT model)"),u$e.forEach(t),UMo=i(x),T_=n(x,"LI",{});var b$e=s(T_);Efe=n(b$e,"STRONG",{});var Kut=s(Efe);JMo=r(Kut,"detr"),Kut.forEach(t),YMo=r(b$e," \u2014 "),Jj=n(b$e,"A",{href:!0});var Zut=s(Jj);KMo=r(Zut,"DetrModel"),Zut.forEach(t),ZMo=r(b$e," (DETR model)"),b$e.forEach(t),e4o=i(x),M_=n(x,"LI",{});var v$e=s(M_);Cfe=n(v$e,"STRONG",{});var e1t=s(Cfe);o4o=r(e1t,"distilbert"),e1t.forEach(t),r4o=r(v$e," \u2014 "),Yj=n(v$e,"A",{href:!0});var o1t=s(Yj);t4o=r(o1t,"DistilBertModel"),o1t.forEach(t),a4o=r(v$e," (DistilBERT model)"),v$e.forEach(t),n4o=i(x),E_=n(x,"LI",{});var F$e=s(E_);wfe=n(F$e,"STRONG",{});var r1t=s(wfe);s4o=r(r1t,"dpr"),r1t.forEach(t),l4o=r(F$e," \u2014 "),Kj=n(F$e,"A",{href:!0});var t1t=s(Kj);i4o=r(t1t,"DPRQuestionEncoder"),t1t.forEach(t),d4o=r(F$e," (DPR model)"),F$e.forEach(t),c4o=i(x),C_=n(x,"LI",{});var T$e=s(C_);Afe=n(T$e,"STRONG",{});var a1t=s(Afe);f4o=r(a1t,"dpt"),a1t.forEach(t),m4o=r(T$e," \u2014 "),Zj=n(T$e,"A",{href:!0});var n1t=s(Zj);g4o=r(n1t,"DPTModel"),n1t.forEach(t),h4o=r(T$e," (DPT model)"),T$e.forEach(t),p4o=i(x),w_=n(x,"LI",{});var M$e=s(w_);Lfe=n(M$e,"STRONG",{});var s1t=s(Lfe);_4o=r(s1t,"electra"),s1t.forEach(t),u4o=r(M$e," \u2014 "),eD=n(M$e,"A",{href:!0});var l1t=s(eD);b4o=r(l1t,"ElectraModel"),l1t.forEach(t),v4o=r(M$e," (ELECTRA model)"),M$e.forEach(t),F4o=i(x),A_=n(x,"LI",{});var E$e=s(A_);yfe=n(E$e,"STRONG",{});var i1t=s(yfe);T4o=r(i1t,"flaubert"),i1t.forEach(t),M4o=r(E$e," \u2014 "),oD=n(E$e,"A",{href:!0});var d1t=s(oD);E4o=r(d1t,"FlaubertModel"),d1t.forEach(t),C4o=r(E$e," (FlauBERT model)"),E$e.forEach(t),w4o=i(x),L_=n(x,"LI",{});var C$e=s(L_);xfe=n(C$e,"STRONG",{});var c1t=s(xfe);A4o=r(c1t,"flava"),c1t.forEach(t),L4o=r(C$e," \u2014 "),rD=n(C$e,"A",{href:!0});var f1t=s(rD);y4o=r(f1t,"FlavaModel"),f1t.forEach(t),x4o=r(C$e," (FLAVA model)"),C$e.forEach(t),$4o=i(x),y_=n(x,"LI",{});var w$e=s(y_);$fe=n(w$e,"STRONG",{});var m1t=s($fe);k4o=r(m1t,"fnet"),m1t.forEach(t),S4o=r(w$e," \u2014 "),tD=n(w$e,"A",{href:!0});var g1t=s(tD);R4o=r(g1t,"FNetModel"),g1t.forEach(t),P4o=r(w$e," (FNet model)"),w$e.forEach(t),B4o=i(x),x_=n(x,"LI",{});var A$e=s(x_);kfe=n(A$e,"STRONG",{});var h1t=s(kfe);I4o=r(h1t,"fsmt"),h1t.forEach(t),N4o=r(A$e," \u2014 "),aD=n(A$e,"A",{href:!0});var p1t=s(aD);q4o=r(p1t,"FSMTModel"),p1t.forEach(t),j4o=r(A$e," (FairSeq Machine-Translation model)"),A$e.forEach(t),D4o=i(x),Js=n(x,"LI",{});var US=s(Js);Sfe=n(US,"STRONG",{});var _1t=s(Sfe);G4o=r(_1t,"funnel"),_1t.forEach(t),O4o=r(US," \u2014 "),nD=n(US,"A",{href:!0});var u1t=s(nD);V4o=r(u1t,"FunnelModel"),u1t.forEach(t),X4o=r(US," or "),sD=n(US,"A",{href:!0});var b1t=s(sD);z4o=r(b1t,"FunnelBaseModel"),b1t.forEach(t),W4o=r(US," (Funnel Transformer model)"),US.forEach(t),Q4o=i(x),$_=n(x,"LI",{});var L$e=s($_);Rfe=n(L$e,"STRONG",{});var v1t=s(Rfe);H4o=r(v1t,"glpn"),v1t.forEach(t),U4o=r(L$e," \u2014 "),lD=n(L$e,"A",{href:!0});var F1t=s(lD);J4o=r(F1t,"GLPNModel"),F1t.forEach(t),Y4o=r(L$e," (GLPN model)"),L$e.forEach(t),K4o=i(x),k_=n(x,"LI",{});var y$e=s(k_);Pfe=n(y$e,"STRONG",{});var T1t=s(Pfe);Z4o=r(T1t,"gpt2"),T1t.forEach(t),eEo=r(y$e," \u2014 "),iD=n(y$e,"A",{href:!0});var M1t=s(iD);oEo=r(M1t,"GPT2Model"),M1t.forEach(t),rEo=r(y$e," (OpenAI GPT-2 model)"),y$e.forEach(t),tEo=i(x),S_=n(x,"LI",{});var x$e=s(S_);Bfe=n(x$e,"STRONG",{});var E1t=s(Bfe);aEo=r(E1t,"gpt_neo"),E1t.forEach(t),nEo=r(x$e," \u2014 "),dD=n(x$e,"A",{href:!0});var C1t=s(dD);sEo=r(C1t,"GPTNeoModel"),C1t.forEach(t),lEo=r(x$e," (GPT Neo model)"),x$e.forEach(t),iEo=i(x),R_=n(x,"LI",{});var $$e=s(R_);Ife=n($$e,"STRONG",{});var w1t=s(Ife);dEo=r(w1t,"gpt_neox"),w1t.forEach(t),cEo=r($$e," \u2014 "),cD=n($$e,"A",{href:!0});var A1t=s(cD);fEo=r(A1t,"GPTNeoXModel"),A1t.forEach(t),mEo=r($$e," (GPT NeoX model)"),$$e.forEach(t),gEo=i(x),P_=n(x,"LI",{});var k$e=s(P_);Nfe=n(k$e,"STRONG",{});var L1t=s(Nfe);hEo=r(L1t,"gptj"),L1t.forEach(t),pEo=r(k$e," \u2014 "),fD=n(k$e,"A",{href:!0});var y1t=s(fD);_Eo=r(y1t,"GPTJModel"),y1t.forEach(t),uEo=r(k$e," (GPT-J model)"),k$e.forEach(t),bEo=i(x),B_=n(x,"LI",{});var S$e=s(B_);qfe=n(S$e,"STRONG",{});var x1t=s(qfe);vEo=r(x1t,"groupvit"),x1t.forEach(t),FEo=r(S$e," \u2014 "),mD=n(S$e,"A",{href:!0});var $1t=s(mD);TEo=r($1t,"GroupViTModel"),$1t.forEach(t),MEo=r(S$e," (GroupViT model)"),S$e.forEach(t),EEo=i(x),I_=n(x,"LI",{});var R$e=s(I_);jfe=n(R$e,"STRONG",{});var k1t=s(jfe);CEo=r(k1t,"hubert"),k1t.forEach(t),wEo=r(R$e," \u2014 "),gD=n(R$e,"A",{href:!0});var S1t=s(gD);AEo=r(S1t,"HubertModel"),S1t.forEach(t),LEo=r(R$e," (Hubert model)"),R$e.forEach(t),yEo=i(x),N_=n(x,"LI",{});var P$e=s(N_);Dfe=n(P$e,"STRONG",{});var R1t=s(Dfe);xEo=r(R1t,"ibert"),R1t.forEach(t),$Eo=r(P$e," \u2014 "),hD=n(P$e,"A",{href:!0});var P1t=s(hD);kEo=r(P1t,"IBertModel"),P1t.forEach(t),SEo=r(P$e," (I-BERT model)"),P$e.forEach(t),REo=i(x),q_=n(x,"LI",{});var B$e=s(q_);Gfe=n(B$e,"STRONG",{});var B1t=s(Gfe);PEo=r(B1t,"imagegpt"),B1t.forEach(t),BEo=r(B$e," \u2014 "),pD=n(B$e,"A",{href:!0});var I1t=s(pD);IEo=r(I1t,"ImageGPTModel"),I1t.forEach(t),NEo=r(B$e," (ImageGPT model)"),B$e.forEach(t),qEo=i(x),j_=n(x,"LI",{});var I$e=s(j_);Ofe=n(I$e,"STRONG",{});var N1t=s(Ofe);jEo=r(N1t,"layoutlm"),N1t.forEach(t),DEo=r(I$e," \u2014 "),_D=n(I$e,"A",{href:!0});var q1t=s(_D);GEo=r(q1t,"LayoutLMModel"),q1t.forEach(t),OEo=r(I$e," (LayoutLM model)"),I$e.forEach(t),VEo=i(x),D_=n(x,"LI",{});var N$e=s(D_);Vfe=n(N$e,"STRONG",{});var j1t=s(Vfe);XEo=r(j1t,"layoutlmv2"),j1t.forEach(t),zEo=r(N$e," \u2014 "),uD=n(N$e,"A",{href:!0});var D1t=s(uD);WEo=r(D1t,"LayoutLMv2Model"),D1t.forEach(t),QEo=r(N$e," (LayoutLMv2 model)"),N$e.forEach(t),HEo=i(x),G_=n(x,"LI",{});var q$e=s(G_);Xfe=n(q$e,"STRONG",{});var G1t=s(Xfe);UEo=r(G1t,"layoutlmv3"),G1t.forEach(t),JEo=r(q$e," \u2014 "),bD=n(q$e,"A",{href:!0});var O1t=s(bD);YEo=r(O1t,"LayoutLMv3Model"),O1t.forEach(t),KEo=r(q$e," (LayoutLMv3 model)"),q$e.forEach(t),ZEo=i(x),O_=n(x,"LI",{});var j$e=s(O_);zfe=n(j$e,"STRONG",{});var V1t=s(zfe);eCo=r(V1t,"led"),V1t.forEach(t),oCo=r(j$e," \u2014 "),vD=n(j$e,"A",{href:!0});var X1t=s(vD);rCo=r(X1t,"LEDModel"),X1t.forEach(t),tCo=r(j$e," (LED model)"),j$e.forEach(t),aCo=i(x),V_=n(x,"LI",{});var D$e=s(V_);Wfe=n(D$e,"STRONG",{});var z1t=s(Wfe);nCo=r(z1t,"levit"),z1t.forEach(t),sCo=r(D$e," \u2014 "),FD=n(D$e,"A",{href:!0});var W1t=s(FD);lCo=r(W1t,"LevitModel"),W1t.forEach(t),iCo=r(D$e," (LeViT model)"),D$e.forEach(t),dCo=i(x),X_=n(x,"LI",{});var G$e=s(X_);Qfe=n(G$e,"STRONG",{});var Q1t=s(Qfe);cCo=r(Q1t,"longformer"),Q1t.forEach(t),fCo=r(G$e," \u2014 "),TD=n(G$e,"A",{href:!0});var H1t=s(TD);mCo=r(H1t,"LongformerModel"),H1t.forEach(t),gCo=r(G$e," (Longformer model)"),G$e.forEach(t),hCo=i(x),z_=n(x,"LI",{});var O$e=s(z_);Hfe=n(O$e,"STRONG",{});var U1t=s(Hfe);pCo=r(U1t,"longt5"),U1t.forEach(t),_Co=r(O$e," \u2014 "),MD=n(O$e,"A",{href:!0});var J1t=s(MD);uCo=r(J1t,"LongT5Model"),J1t.forEach(t),bCo=r(O$e," (LongT5 model)"),O$e.forEach(t),vCo=i(x),W_=n(x,"LI",{});var V$e=s(W_);Ufe=n(V$e,"STRONG",{});var Y1t=s(Ufe);FCo=r(Y1t,"luke"),Y1t.forEach(t),TCo=r(V$e," \u2014 "),ED=n(V$e,"A",{href:!0});var K1t=s(ED);MCo=r(K1t,"LukeModel"),K1t.forEach(t),ECo=r(V$e," (LUKE model)"),V$e.forEach(t),CCo=i(x),Q_=n(x,"LI",{});var X$e=s(Q_);Jfe=n(X$e,"STRONG",{});var Z1t=s(Jfe);wCo=r(Z1t,"lxmert"),Z1t.forEach(t),ACo=r(X$e," \u2014 "),CD=n(X$e,"A",{href:!0});var e2t=s(CD);LCo=r(e2t,"LxmertModel"),e2t.forEach(t),yCo=r(X$e," (LXMERT model)"),X$e.forEach(t),xCo=i(x),H_=n(x,"LI",{});var z$e=s(H_);Yfe=n(z$e,"STRONG",{});var o2t=s(Yfe);$Co=r(o2t,"m2m_100"),o2t.forEach(t),kCo=r(z$e," \u2014 "),wD=n(z$e,"A",{href:!0});var r2t=s(wD);SCo=r(r2t,"M2M100Model"),r2t.forEach(t),RCo=r(z$e," (M2M100 model)"),z$e.forEach(t),PCo=i(x),U_=n(x,"LI",{});var W$e=s(U_);Kfe=n(W$e,"STRONG",{});var t2t=s(Kfe);BCo=r(t2t,"marian"),t2t.forEach(t),ICo=r(W$e," \u2014 "),AD=n(W$e,"A",{href:!0});var a2t=s(AD);NCo=r(a2t,"MarianModel"),a2t.forEach(t),qCo=r(W$e," (Marian model)"),W$e.forEach(t),jCo=i(x),J_=n(x,"LI",{});var Q$e=s(J_);Zfe=n(Q$e,"STRONG",{});var n2t=s(Zfe);DCo=r(n2t,"maskformer"),n2t.forEach(t),GCo=r(Q$e," \u2014 "),LD=n(Q$e,"A",{href:!0});var s2t=s(LD);OCo=r(s2t,"MaskFormerModel"),s2t.forEach(t),VCo=r(Q$e," (MaskFormer model)"),Q$e.forEach(t),XCo=i(x),Y_=n(x,"LI",{});var H$e=s(Y_);eme=n(H$e,"STRONG",{});var l2t=s(eme);zCo=r(l2t,"mbart"),l2t.forEach(t),WCo=r(H$e," \u2014 "),yD=n(H$e,"A",{href:!0});var i2t=s(yD);QCo=r(i2t,"MBartModel"),i2t.forEach(t),HCo=r(H$e," (mBART model)"),H$e.forEach(t),UCo=i(x),K_=n(x,"LI",{});var U$e=s(K_);ome=n(U$e,"STRONG",{});var d2t=s(ome);JCo=r(d2t,"mctct"),d2t.forEach(t),YCo=r(U$e," \u2014 "),xD=n(U$e,"A",{href:!0});var c2t=s(xD);KCo=r(c2t,"MCTCTModel"),c2t.forEach(t),ZCo=r(U$e," (M-CTC-T model)"),U$e.forEach(t),e5o=i(x),Z_=n(x,"LI",{});var J$e=s(Z_);rme=n(J$e,"STRONG",{});var f2t=s(rme);o5o=r(f2t,"megatron-bert"),f2t.forEach(t),r5o=r(J$e," \u2014 "),$D=n(J$e,"A",{href:!0});var m2t=s($D);t5o=r(m2t,"MegatronBertModel"),m2t.forEach(t),a5o=r(J$e," (Megatron-BERT model)"),J$e.forEach(t),n5o=i(x),eu=n(x,"LI",{});var Y$e=s(eu);tme=n(Y$e,"STRONG",{});var g2t=s(tme);s5o=r(g2t,"mobilebert"),g2t.forEach(t),l5o=r(Y$e," \u2014 "),kD=n(Y$e,"A",{href:!0});var h2t=s(kD);i5o=r(h2t,"MobileBertModel"),h2t.forEach(t),d5o=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),c5o=i(x),ou=n(x,"LI",{});var K$e=s(ou);ame=n(K$e,"STRONG",{});var p2t=s(ame);f5o=r(p2t,"mobilevit"),p2t.forEach(t),m5o=r(K$e," \u2014 "),SD=n(K$e,"A",{href:!0});var _2t=s(SD);g5o=r(_2t,"MobileViTModel"),_2t.forEach(t),h5o=r(K$e," (MobileViT model)"),K$e.forEach(t),p5o=i(x),ru=n(x,"LI",{});var Z$e=s(ru);nme=n(Z$e,"STRONG",{});var u2t=s(nme);_5o=r(u2t,"mpnet"),u2t.forEach(t),u5o=r(Z$e," \u2014 "),RD=n(Z$e,"A",{href:!0});var b2t=s(RD);b5o=r(b2t,"MPNetModel"),b2t.forEach(t),v5o=r(Z$e," (MPNet model)"),Z$e.forEach(t),F5o=i(x),tu=n(x,"LI",{});var eke=s(tu);sme=n(eke,"STRONG",{});var v2t=s(sme);T5o=r(v2t,"mt5"),v2t.forEach(t),M5o=r(eke," \u2014 "),PD=n(eke,"A",{href:!0});var F2t=s(PD);E5o=r(F2t,"MT5Model"),F2t.forEach(t),C5o=r(eke," (MT5 model)"),eke.forEach(t),w5o=i(x),au=n(x,"LI",{});var oke=s(au);lme=n(oke,"STRONG",{});var T2t=s(lme);A5o=r(T2t,"mvp"),T2t.forEach(t),L5o=r(oke," \u2014 "),BD=n(oke,"A",{href:!0});var M2t=s(BD);y5o=r(M2t,"MvpModel"),M2t.forEach(t),x5o=r(oke," (MVP model)"),oke.forEach(t),$5o=i(x),nu=n(x,"LI",{});var rke=s(nu);ime=n(rke,"STRONG",{});var E2t=s(ime);k5o=r(E2t,"nezha"),E2t.forEach(t),S5o=r(rke," \u2014 "),ID=n(rke,"A",{href:!0});var C2t=s(ID);R5o=r(C2t,"NezhaModel"),C2t.forEach(t),P5o=r(rke," (Nezha model)"),rke.forEach(t),B5o=i(x),su=n(x,"LI",{});var tke=s(su);dme=n(tke,"STRONG",{});var w2t=s(dme);I5o=r(w2t,"nllb"),w2t.forEach(t),N5o=r(tke," \u2014 "),ND=n(tke,"A",{href:!0});var A2t=s(ND);q5o=r(A2t,"M2M100Model"),A2t.forEach(t),j5o=r(tke," (NLLB model)"),tke.forEach(t),D5o=i(x),lu=n(x,"LI",{});var ake=s(lu);cme=n(ake,"STRONG",{});var L2t=s(cme);G5o=r(L2t,"nystromformer"),L2t.forEach(t),O5o=r(ake," \u2014 "),qD=n(ake,"A",{href:!0});var y2t=s(qD);V5o=r(y2t,"NystromformerModel"),y2t.forEach(t),X5o=r(ake," (Nystr\xF6mformer model)"),ake.forEach(t),z5o=i(x),iu=n(x,"LI",{});var nke=s(iu);fme=n(nke,"STRONG",{});var x2t=s(fme);W5o=r(x2t,"openai-gpt"),x2t.forEach(t),Q5o=r(nke," \u2014 "),jD=n(nke,"A",{href:!0});var $2t=s(jD);H5o=r($2t,"OpenAIGPTModel"),$2t.forEach(t),U5o=r(nke," (OpenAI GPT model)"),nke.forEach(t),J5o=i(x),du=n(x,"LI",{});var ske=s(du);mme=n(ske,"STRONG",{});var k2t=s(mme);Y5o=r(k2t,"opt"),k2t.forEach(t),K5o=r(ske," \u2014 "),DD=n(ske,"A",{href:!0});var S2t=s(DD);Z5o=r(S2t,"OPTModel"),S2t.forEach(t),e0o=r(ske," (OPT model)"),ske.forEach(t),o0o=i(x),cu=n(x,"LI",{});var lke=s(cu);gme=n(lke,"STRONG",{});var R2t=s(gme);r0o=r(R2t,"owlvit"),R2t.forEach(t),t0o=r(lke," \u2014 "),GD=n(lke,"A",{href:!0});var P2t=s(GD);a0o=r(P2t,"OwlViTModel"),P2t.forEach(t),n0o=r(lke," (OWL-ViT model)"),lke.forEach(t),s0o=i(x),fu=n(x,"LI",{});var ike=s(fu);hme=n(ike,"STRONG",{});var B2t=s(hme);l0o=r(B2t,"pegasus"),B2t.forEach(t),i0o=r(ike," \u2014 "),OD=n(ike,"A",{href:!0});var I2t=s(OD);d0o=r(I2t,"PegasusModel"),I2t.forEach(t),c0o=r(ike," (Pegasus model)"),ike.forEach(t),f0o=i(x),mu=n(x,"LI",{});var dke=s(mu);pme=n(dke,"STRONG",{});var N2t=s(pme);m0o=r(N2t,"perceiver"),N2t.forEach(t),g0o=r(dke," \u2014 "),VD=n(dke,"A",{href:!0});var q2t=s(VD);h0o=r(q2t,"PerceiverModel"),q2t.forEach(t),p0o=r(dke," (Perceiver model)"),dke.forEach(t),_0o=i(x),gu=n(x,"LI",{});var cke=s(gu);_me=n(cke,"STRONG",{});var j2t=s(_me);u0o=r(j2t,"plbart"),j2t.forEach(t),b0o=r(cke," \u2014 "),XD=n(cke,"A",{href:!0});var D2t=s(XD);v0o=r(D2t,"PLBartModel"),D2t.forEach(t),F0o=r(cke," (PLBart model)"),cke.forEach(t),T0o=i(x),hu=n(x,"LI",{});var fke=s(hu);ume=n(fke,"STRONG",{});var G2t=s(ume);M0o=r(G2t,"poolformer"),G2t.forEach(t),E0o=r(fke," \u2014 "),zD=n(fke,"A",{href:!0});var O2t=s(zD);C0o=r(O2t,"PoolFormerModel"),O2t.forEach(t),w0o=r(fke," (PoolFormer model)"),fke.forEach(t),A0o=i(x),pu=n(x,"LI",{});var mke=s(pu);bme=n(mke,"STRONG",{});var V2t=s(bme);L0o=r(V2t,"prophetnet"),V2t.forEach(t),y0o=r(mke," \u2014 "),WD=n(mke,"A",{href:!0});var X2t=s(WD);x0o=r(X2t,"ProphetNetModel"),X2t.forEach(t),$0o=r(mke," (ProphetNet model)"),mke.forEach(t),k0o=i(x),_u=n(x,"LI",{});var gke=s(_u);vme=n(gke,"STRONG",{});var z2t=s(vme);S0o=r(z2t,"qdqbert"),z2t.forEach(t),R0o=r(gke," \u2014 "),QD=n(gke,"A",{href:!0});var W2t=s(QD);P0o=r(W2t,"QDQBertModel"),W2t.forEach(t),B0o=r(gke," (QDQBert model)"),gke.forEach(t),I0o=i(x),uu=n(x,"LI",{});var hke=s(uu);Fme=n(hke,"STRONG",{});var Q2t=s(Fme);N0o=r(Q2t,"reformer"),Q2t.forEach(t),q0o=r(hke," \u2014 "),HD=n(hke,"A",{href:!0});var H2t=s(HD);j0o=r(H2t,"ReformerModel"),H2t.forEach(t),D0o=r(hke," (Reformer model)"),hke.forEach(t),G0o=i(x),bu=n(x,"LI",{});var pke=s(bu);Tme=n(pke,"STRONG",{});var U2t=s(Tme);O0o=r(U2t,"regnet"),U2t.forEach(t),V0o=r(pke," \u2014 "),UD=n(pke,"A",{href:!0});var J2t=s(UD);X0o=r(J2t,"RegNetModel"),J2t.forEach(t),z0o=r(pke," (RegNet model)"),pke.forEach(t),W0o=i(x),vu=n(x,"LI",{});var _ke=s(vu);Mme=n(_ke,"STRONG",{});var Y2t=s(Mme);Q0o=r(Y2t,"rembert"),Y2t.forEach(t),H0o=r(_ke," \u2014 "),JD=n(_ke,"A",{href:!0});var K2t=s(JD);U0o=r(K2t,"RemBertModel"),K2t.forEach(t),J0o=r(_ke," (RemBERT model)"),_ke.forEach(t),Y0o=i(x),Fu=n(x,"LI",{});var uke=s(Fu);Eme=n(uke,"STRONG",{});var Z2t=s(Eme);K0o=r(Z2t,"resnet"),Z2t.forEach(t),Z0o=r(uke," \u2014 "),YD=n(uke,"A",{href:!0});var ebt=s(YD);ewo=r(ebt,"ResNetModel"),ebt.forEach(t),owo=r(uke," (ResNet model)"),uke.forEach(t),rwo=i(x),Tu=n(x,"LI",{});var bke=s(Tu);Cme=n(bke,"STRONG",{});var obt=s(Cme);two=r(obt,"retribert"),obt.forEach(t),awo=r(bke," \u2014 "),KD=n(bke,"A",{href:!0});var rbt=s(KD);nwo=r(rbt,"RetriBertModel"),rbt.forEach(t),swo=r(bke," (RetriBERT model)"),bke.forEach(t),lwo=i(x),Mu=n(x,"LI",{});var vke=s(Mu);wme=n(vke,"STRONG",{});var tbt=s(wme);iwo=r(tbt,"roberta"),tbt.forEach(t),dwo=r(vke," \u2014 "),ZD=n(vke,"A",{href:!0});var abt=s(ZD);cwo=r(abt,"RobertaModel"),abt.forEach(t),fwo=r(vke," (RoBERTa model)"),vke.forEach(t),mwo=i(x),Eu=n(x,"LI",{});var Fke=s(Eu);Ame=n(Fke,"STRONG",{});var nbt=s(Ame);gwo=r(nbt,"roformer"),nbt.forEach(t),hwo=r(Fke," \u2014 "),eG=n(Fke,"A",{href:!0});var sbt=s(eG);pwo=r(sbt,"RoFormerModel"),sbt.forEach(t),_wo=r(Fke," (RoFormer model)"),Fke.forEach(t),uwo=i(x),Cu=n(x,"LI",{});var Tke=s(Cu);Lme=n(Tke,"STRONG",{});var lbt=s(Lme);bwo=r(lbt,"segformer"),lbt.forEach(t),vwo=r(Tke," \u2014 "),oG=n(Tke,"A",{href:!0});var ibt=s(oG);Fwo=r(ibt,"SegformerModel"),ibt.forEach(t),Two=r(Tke," (SegFormer model)"),Tke.forEach(t),Mwo=i(x),wu=n(x,"LI",{});var Mke=s(wu);yme=n(Mke,"STRONG",{});var dbt=s(yme);Ewo=r(dbt,"sew"),dbt.forEach(t),Cwo=r(Mke," \u2014 "),rG=n(Mke,"A",{href:!0});var cbt=s(rG);wwo=r(cbt,"SEWModel"),cbt.forEach(t),Awo=r(Mke," (SEW model)"),Mke.forEach(t),Lwo=i(x),Au=n(x,"LI",{});var Eke=s(Au);xme=n(Eke,"STRONG",{});var fbt=s(xme);ywo=r(fbt,"sew-d"),fbt.forEach(t),xwo=r(Eke," \u2014 "),tG=n(Eke,"A",{href:!0});var mbt=s(tG);$wo=r(mbt,"SEWDModel"),mbt.forEach(t),kwo=r(Eke," (SEW-D model)"),Eke.forEach(t),Swo=i(x),Lu=n(x,"LI",{});var Cke=s(Lu);$me=n(Cke,"STRONG",{});var gbt=s($me);Rwo=r(gbt,"speech_to_text"),gbt.forEach(t),Pwo=r(Cke," \u2014 "),aG=n(Cke,"A",{href:!0});var hbt=s(aG);Bwo=r(hbt,"Speech2TextModel"),hbt.forEach(t),Iwo=r(Cke," (Speech2Text model)"),Cke.forEach(t),Nwo=i(x),yu=n(x,"LI",{});var wke=s(yu);kme=n(wke,"STRONG",{});var pbt=s(kme);qwo=r(pbt,"splinter"),pbt.forEach(t),jwo=r(wke," \u2014 "),nG=n(wke,"A",{href:!0});var _bt=s(nG);Dwo=r(_bt,"SplinterModel"),_bt.forEach(t),Gwo=r(wke," (Splinter model)"),wke.forEach(t),Owo=i(x),xu=n(x,"LI",{});var Ake=s(xu);Sme=n(Ake,"STRONG",{});var ubt=s(Sme);Vwo=r(ubt,"squeezebert"),ubt.forEach(t),Xwo=r(Ake," \u2014 "),sG=n(Ake,"A",{href:!0});var bbt=s(sG);zwo=r(bbt,"SqueezeBertModel"),bbt.forEach(t),Wwo=r(Ake," (SqueezeBERT model)"),Ake.forEach(t),Qwo=i(x),$u=n(x,"LI",{});var Lke=s($u);Rme=n(Lke,"STRONG",{});var vbt=s(Rme);Hwo=r(vbt,"swin"),vbt.forEach(t),Uwo=r(Lke," \u2014 "),lG=n(Lke,"A",{href:!0});var Fbt=s(lG);Jwo=r(Fbt,"SwinModel"),Fbt.forEach(t),Ywo=r(Lke," (Swin Transformer model)"),Lke.forEach(t),Kwo=i(x),ku=n(x,"LI",{});var yke=s(ku);Pme=n(yke,"STRONG",{});var Tbt=s(Pme);Zwo=r(Tbt,"swinv2"),Tbt.forEach(t),eAo=r(yke," \u2014 "),iG=n(yke,"A",{href:!0});var Mbt=s(iG);oAo=r(Mbt,"Swinv2Model"),Mbt.forEach(t),rAo=r(yke," (Swin Transformer V2 model)"),yke.forEach(t),tAo=i(x),Su=n(x,"LI",{});var xke=s(Su);Bme=n(xke,"STRONG",{});var Ebt=s(Bme);aAo=r(Ebt,"t5"),Ebt.forEach(t),nAo=r(xke," \u2014 "),dG=n(xke,"A",{href:!0});var Cbt=s(dG);sAo=r(Cbt,"T5Model"),Cbt.forEach(t),lAo=r(xke," (T5 model)"),xke.forEach(t),iAo=i(x),Ru=n(x,"LI",{});var $ke=s(Ru);Ime=n($ke,"STRONG",{});var wbt=s(Ime);dAo=r(wbt,"tapas"),wbt.forEach(t),cAo=r($ke," \u2014 "),cG=n($ke,"A",{href:!0});var Abt=s(cG);fAo=r(Abt,"TapasModel"),Abt.forEach(t),mAo=r($ke," (TAPAS model)"),$ke.forEach(t),gAo=i(x),Pu=n(x,"LI",{});var kke=s(Pu);Nme=n(kke,"STRONG",{});var Lbt=s(Nme);hAo=r(Lbt,"trajectory_transformer"),Lbt.forEach(t),pAo=r(kke," \u2014 "),fG=n(kke,"A",{href:!0});var ybt=s(fG);_Ao=r(ybt,"TrajectoryTransformerModel"),ybt.forEach(t),uAo=r(kke," (Trajectory Transformer model)"),kke.forEach(t),bAo=i(x),Bu=n(x,"LI",{});var Ske=s(Bu);qme=n(Ske,"STRONG",{});var xbt=s(qme);vAo=r(xbt,"transfo-xl"),xbt.forEach(t),FAo=r(Ske," \u2014 "),mG=n(Ske,"A",{href:!0});var $bt=s(mG);TAo=r($bt,"TransfoXLModel"),$bt.forEach(t),MAo=r(Ske," (Transformer-XL model)"),Ske.forEach(t),EAo=i(x),Iu=n(x,"LI",{});var Rke=s(Iu);jme=n(Rke,"STRONG",{});var kbt=s(jme);CAo=r(kbt,"unispeech"),kbt.forEach(t),wAo=r(Rke," \u2014 "),gG=n(Rke,"A",{href:!0});var Sbt=s(gG);AAo=r(Sbt,"UniSpeechModel"),Sbt.forEach(t),LAo=r(Rke," (UniSpeech model)"),Rke.forEach(t),yAo=i(x),Nu=n(x,"LI",{});var Pke=s(Nu);Dme=n(Pke,"STRONG",{});var Rbt=s(Dme);xAo=r(Rbt,"unispeech-sat"),Rbt.forEach(t),$Ao=r(Pke," \u2014 "),hG=n(Pke,"A",{href:!0});var Pbt=s(hG);kAo=r(Pbt,"UniSpeechSatModel"),Pbt.forEach(t),SAo=r(Pke," (UniSpeechSat model)"),Pke.forEach(t),RAo=i(x),qu=n(x,"LI",{});var Bke=s(qu);Gme=n(Bke,"STRONG",{});var Bbt=s(Gme);PAo=r(Bbt,"van"),Bbt.forEach(t),BAo=r(Bke," \u2014 "),pG=n(Bke,"A",{href:!0});var Ibt=s(pG);IAo=r(Ibt,"VanModel"),Ibt.forEach(t),NAo=r(Bke," (VAN model)"),Bke.forEach(t),qAo=i(x),ju=n(x,"LI",{});var Ike=s(ju);Ome=n(Ike,"STRONG",{});var Nbt=s(Ome);jAo=r(Nbt,"vilt"),Nbt.forEach(t),DAo=r(Ike," \u2014 "),_G=n(Ike,"A",{href:!0});var qbt=s(_G);GAo=r(qbt,"ViltModel"),qbt.forEach(t),OAo=r(Ike," (ViLT model)"),Ike.forEach(t),VAo=i(x),Du=n(x,"LI",{});var Nke=s(Du);Vme=n(Nke,"STRONG",{});var jbt=s(Vme);XAo=r(jbt,"vision-text-dual-encoder"),jbt.forEach(t),zAo=r(Nke," \u2014 "),uG=n(Nke,"A",{href:!0});var Dbt=s(uG);WAo=r(Dbt,"VisionTextDualEncoderModel"),Dbt.forEach(t),QAo=r(Nke," (VisionTextDualEncoder model)"),Nke.forEach(t),HAo=i(x),Gu=n(x,"LI",{});var qke=s(Gu);Xme=n(qke,"STRONG",{});var Gbt=s(Xme);UAo=r(Gbt,"visual_bert"),Gbt.forEach(t),JAo=r(qke," \u2014 "),bG=n(qke,"A",{href:!0});var Obt=s(bG);YAo=r(Obt,"VisualBertModel"),Obt.forEach(t),KAo=r(qke," (VisualBERT model)"),qke.forEach(t),ZAo=i(x),Ou=n(x,"LI",{});var jke=s(Ou);zme=n(jke,"STRONG",{});var Vbt=s(zme);e7o=r(Vbt,"vit"),Vbt.forEach(t),o7o=r(jke," \u2014 "),vG=n(jke,"A",{href:!0});var Xbt=s(vG);r7o=r(Xbt,"ViTModel"),Xbt.forEach(t),t7o=r(jke," (ViT model)"),jke.forEach(t),a7o=i(x),Vu=n(x,"LI",{});var Dke=s(Vu);Wme=n(Dke,"STRONG",{});var zbt=s(Wme);n7o=r(zbt,"vit_mae"),zbt.forEach(t),s7o=r(Dke," \u2014 "),FG=n(Dke,"A",{href:!0});var Wbt=s(FG);l7o=r(Wbt,"ViTMAEModel"),Wbt.forEach(t),i7o=r(Dke," (ViTMAE model)"),Dke.forEach(t),d7o=i(x),Xu=n(x,"LI",{});var Gke=s(Xu);Qme=n(Gke,"STRONG",{});var Qbt=s(Qme);c7o=r(Qbt,"wav2vec2"),Qbt.forEach(t),f7o=r(Gke," \u2014 "),TG=n(Gke,"A",{href:!0});var Hbt=s(TG);m7o=r(Hbt,"Wav2Vec2Model"),Hbt.forEach(t),g7o=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),h7o=i(x),zu=n(x,"LI",{});var Oke=s(zu);Hme=n(Oke,"STRONG",{});var Ubt=s(Hme);p7o=r(Ubt,"wav2vec2-conformer"),Ubt.forEach(t),_7o=r(Oke," \u2014 "),MG=n(Oke,"A",{href:!0});var Jbt=s(MG);u7o=r(Jbt,"Wav2Vec2ConformerModel"),Jbt.forEach(t),b7o=r(Oke," (Wav2Vec2-Conformer model)"),Oke.forEach(t),v7o=i(x),Wu=n(x,"LI",{});var Vke=s(Wu);Ume=n(Vke,"STRONG",{});var Ybt=s(Ume);F7o=r(Ybt,"wavlm"),Ybt.forEach(t),T7o=r(Vke," \u2014 "),EG=n(Vke,"A",{href:!0});var Kbt=s(EG);M7o=r(Kbt,"WavLMModel"),Kbt.forEach(t),E7o=r(Vke," (WavLM model)"),Vke.forEach(t),C7o=i(x),Qu=n(x,"LI",{});var Xke=s(Qu);Jme=n(Xke,"STRONG",{});var Zbt=s(Jme);w7o=r(Zbt,"xglm"),Zbt.forEach(t),A7o=r(Xke," \u2014 "),CG=n(Xke,"A",{href:!0});var evt=s(CG);L7o=r(evt,"XGLMModel"),evt.forEach(t),y7o=r(Xke," (XGLM model)"),Xke.forEach(t),x7o=i(x),Hu=n(x,"LI",{});var zke=s(Hu);Yme=n(zke,"STRONG",{});var ovt=s(Yme);$7o=r(ovt,"xlm"),ovt.forEach(t),k7o=r(zke," \u2014 "),wG=n(zke,"A",{href:!0});var rvt=s(wG);S7o=r(rvt,"XLMModel"),rvt.forEach(t),R7o=r(zke," (XLM model)"),zke.forEach(t),P7o=i(x),Uu=n(x,"LI",{});var Wke=s(Uu);Kme=n(Wke,"STRONG",{});var tvt=s(Kme);B7o=r(tvt,"xlm-prophetnet"),tvt.forEach(t),I7o=r(Wke," \u2014 "),AG=n(Wke,"A",{href:!0});var avt=s(AG);N7o=r(avt,"XLMProphetNetModel"),avt.forEach(t),q7o=r(Wke," (XLM-ProphetNet model)"),Wke.forEach(t),j7o=i(x),Ju=n(x,"LI",{});var Qke=s(Ju);Zme=n(Qke,"STRONG",{});var nvt=s(Zme);D7o=r(nvt,"xlm-roberta"),nvt.forEach(t),G7o=r(Qke," \u2014 "),LG=n(Qke,"A",{href:!0});var svt=s(LG);O7o=r(svt,"XLMRobertaModel"),svt.forEach(t),V7o=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),X7o=i(x),Yu=n(x,"LI",{});var Hke=s(Yu);ege=n(Hke,"STRONG",{});var lvt=s(ege);z7o=r(lvt,"xlm-roberta-xl"),lvt.forEach(t),W7o=r(Hke," \u2014 "),yG=n(Hke,"A",{href:!0});var ivt=s(yG);Q7o=r(ivt,"XLMRobertaXLModel"),ivt.forEach(t),H7o=r(Hke," (XLM-RoBERTa-XL model)"),Hke.forEach(t),U7o=i(x),Ku=n(x,"LI",{});var Uke=s(Ku);oge=n(Uke,"STRONG",{});var dvt=s(oge);J7o=r(dvt,"xlnet"),dvt.forEach(t),Y7o=r(Uke," \u2014 "),xG=n(Uke,"A",{href:!0});var cvt=s(xG);K7o=r(cvt,"XLNetModel"),cvt.forEach(t),Z7o=r(Uke," (XLNet model)"),Uke.forEach(t),eLo=i(x),Zu=n(x,"LI",{});var Jke=s(Zu);rge=n(Jke,"STRONG",{});var fvt=s(rge);oLo=r(fvt,"yolos"),fvt.forEach(t),rLo=r(Jke," \u2014 "),$G=n(Jke,"A",{href:!0});var mvt=s($G);tLo=r(mvt,"YolosModel"),mvt.forEach(t),aLo=r(Jke," (YOLOS model)"),Jke.forEach(t),nLo=i(x),e1=n(x,"LI",{});var Yke=s(e1);tge=n(Yke,"STRONG",{});var gvt=s(tge);sLo=r(gvt,"yoso"),gvt.forEach(t),lLo=r(Yke," \u2014 "),kG=n(Yke,"A",{href:!0});var hvt=s(kG);iLo=r(hvt,"YosoModel"),hvt.forEach(t),dLo=r(Yke," (YOSO model)"),Yke.forEach(t),x.forEach(t),cLo=i(la),o1=n(la,"P",{});var Kke=s(o1);fLo=r(Kke,"The model is set in evaluation mode by default using "),age=n(Kke,"CODE",{});var pvt=s(age);mLo=r(pvt,"model.eval()"),pvt.forEach(t),gLo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(Kke,"CODE",{});var _vt=s(nge);hLo=r(_vt,"model.train()"),_vt.forEach(t),Kke.forEach(t),pLo=i(la),T(r1.$$.fragment,la),la.forEach(t),nl.forEach(t),Cze=i(f),Qi=n(f,"H2",{class:!0});var $Qe=s(Qi);t1=n($Qe,"A",{id:!0,class:!0,href:!0});var uvt=s(t1);sge=n(uvt,"SPAN",{});var bvt=s(sge);T(KL.$$.fragment,bvt),bvt.forEach(t),uvt.forEach(t),_Lo=i($Qe),lge=n($Qe,"SPAN",{});var vvt=s(lge);uLo=r(vvt,"AutoModelForPreTraining"),vvt.forEach(t),$Qe.forEach(t),wze=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(ZL.$$.fragment,sl),bLo=i(sl),Hi=n(sl,"P",{});var ute=s(Hi);vLo=r(ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SG=n(ute,"A",{href:!0});var Fvt=s(SG);FLo=r(Fvt,"from_pretrained()"),Fvt.forEach(t),TLo=r(ute," class method or the "),RG=n(ute,"A",{href:!0});var Tvt=s(RG);MLo=r(Tvt,"from_config()"),Tvt.forEach(t),ELo=r(ute,` class
method.`),ute.forEach(t),CLo=i(sl),ey=n(sl,"P",{});var kQe=s(ey);wLo=r(kQe,"This class cannot be instantiated directly using "),ige=n(kQe,"CODE",{});var Mvt=s(ige);ALo=r(Mvt,"__init__()"),Mvt.forEach(t),LLo=r(kQe," (throws an error)."),kQe.forEach(t),yLo=i(sl),dt=n(sl,"DIV",{class:!0});var AA=s(dt);T(oy.$$.fragment,AA),xLo=i(AA),dge=n(AA,"P",{});var Evt=s(dge);$Lo=r(Evt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Evt.forEach(t),kLo=i(AA),Ui=n(AA,"P",{});var bte=s(Ui);SLo=r(bte,`Note:
Loading a model from its configuration file does `),cge=n(bte,"STRONG",{});var Cvt=s(cge);RLo=r(Cvt,"not"),Cvt.forEach(t),PLo=r(bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(bte,"A",{href:!0});var wvt=s(PG);BLo=r(wvt,"from_pretrained()"),wvt.forEach(t),ILo=r(bte," to load the model weights."),bte.forEach(t),NLo=i(AA),T(a1.$$.fragment,AA),AA.forEach(t),qLo=i(sl),Ke=n(sl,"DIV",{class:!0});var ia=s(Ke);T(ry.$$.fragment,ia),jLo=i(ia),fge=n(ia,"P",{});var Avt=s(fge);DLo=r(Avt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Avt.forEach(t),GLo=i(ia),Na=n(ia,"P",{});var LA=s(Na);OLo=r(LA,"The model class to instantiate is selected based on the "),mge=n(LA,"CODE",{});var Lvt=s(mge);VLo=r(Lvt,"model_type"),Lvt.forEach(t),XLo=r(LA,` property of the config object (either
passed as an argument or loaded from `),gge=n(LA,"CODE",{});var yvt=s(gge);zLo=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),WLo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(LA,"CODE",{});var xvt=s(hge);QLo=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),HLo=r(LA,":"),LA.forEach(t),ULo=i(ia),G=n(ia,"UL",{});var O=s(G);n1=n(O,"LI",{});var Zke=s(n1);pge=n(Zke,"STRONG",{});var $vt=s(pge);JLo=r($vt,"albert"),$vt.forEach(t),YLo=r(Zke," \u2014 "),BG=n(Zke,"A",{href:!0});var kvt=s(BG);KLo=r(kvt,"AlbertForPreTraining"),kvt.forEach(t),ZLo=r(Zke," (ALBERT model)"),Zke.forEach(t),eyo=i(O),s1=n(O,"LI",{});var eSe=s(s1);_ge=n(eSe,"STRONG",{});var Svt=s(_ge);oyo=r(Svt,"bart"),Svt.forEach(t),ryo=r(eSe," \u2014 "),IG=n(eSe,"A",{href:!0});var Rvt=s(IG);tyo=r(Rvt,"BartForConditionalGeneration"),Rvt.forEach(t),ayo=r(eSe," (BART model)"),eSe.forEach(t),nyo=i(O),l1=n(O,"LI",{});var oSe=s(l1);uge=n(oSe,"STRONG",{});var Pvt=s(uge);syo=r(Pvt,"bert"),Pvt.forEach(t),lyo=r(oSe," \u2014 "),NG=n(oSe,"A",{href:!0});var Bvt=s(NG);iyo=r(Bvt,"BertForPreTraining"),Bvt.forEach(t),dyo=r(oSe," (BERT model)"),oSe.forEach(t),cyo=i(O),i1=n(O,"LI",{});var rSe=s(i1);bge=n(rSe,"STRONG",{});var Ivt=s(bge);fyo=r(Ivt,"big_bird"),Ivt.forEach(t),myo=r(rSe," \u2014 "),qG=n(rSe,"A",{href:!0});var Nvt=s(qG);gyo=r(Nvt,"BigBirdForPreTraining"),Nvt.forEach(t),hyo=r(rSe," (BigBird model)"),rSe.forEach(t),pyo=i(O),d1=n(O,"LI",{});var tSe=s(d1);vge=n(tSe,"STRONG",{});var qvt=s(vge);_yo=r(qvt,"bloom"),qvt.forEach(t),uyo=r(tSe," \u2014 "),jG=n(tSe,"A",{href:!0});var jvt=s(jG);byo=r(jvt,"BloomForCausalLM"),jvt.forEach(t),vyo=r(tSe," (BLOOM model)"),tSe.forEach(t),Fyo=i(O),c1=n(O,"LI",{});var aSe=s(c1);Fge=n(aSe,"STRONG",{});var Dvt=s(Fge);Tyo=r(Dvt,"camembert"),Dvt.forEach(t),Myo=r(aSe," \u2014 "),DG=n(aSe,"A",{href:!0});var Gvt=s(DG);Eyo=r(Gvt,"CamembertForMaskedLM"),Gvt.forEach(t),Cyo=r(aSe," (CamemBERT model)"),aSe.forEach(t),wyo=i(O),f1=n(O,"LI",{});var nSe=s(f1);Tge=n(nSe,"STRONG",{});var Ovt=s(Tge);Ayo=r(Ovt,"ctrl"),Ovt.forEach(t),Lyo=r(nSe," \u2014 "),GG=n(nSe,"A",{href:!0});var Vvt=s(GG);yyo=r(Vvt,"CTRLLMHeadModel"),Vvt.forEach(t),xyo=r(nSe," (CTRL model)"),nSe.forEach(t),$yo=i(O),m1=n(O,"LI",{});var sSe=s(m1);Mge=n(sSe,"STRONG",{});var Xvt=s(Mge);kyo=r(Xvt,"data2vec-text"),Xvt.forEach(t),Syo=r(sSe," \u2014 "),OG=n(sSe,"A",{href:!0});var zvt=s(OG);Ryo=r(zvt,"Data2VecTextForMaskedLM"),zvt.forEach(t),Pyo=r(sSe," (Data2VecText model)"),sSe.forEach(t),Byo=i(O),g1=n(O,"LI",{});var lSe=s(g1);Ege=n(lSe,"STRONG",{});var Wvt=s(Ege);Iyo=r(Wvt,"deberta"),Wvt.forEach(t),Nyo=r(lSe," \u2014 "),VG=n(lSe,"A",{href:!0});var Qvt=s(VG);qyo=r(Qvt,"DebertaForMaskedLM"),Qvt.forEach(t),jyo=r(lSe," (DeBERTa model)"),lSe.forEach(t),Dyo=i(O),h1=n(O,"LI",{});var iSe=s(h1);Cge=n(iSe,"STRONG",{});var Hvt=s(Cge);Gyo=r(Hvt,"deberta-v2"),Hvt.forEach(t),Oyo=r(iSe," \u2014 "),XG=n(iSe,"A",{href:!0});var Uvt=s(XG);Vyo=r(Uvt,"DebertaV2ForMaskedLM"),Uvt.forEach(t),Xyo=r(iSe," (DeBERTa-v2 model)"),iSe.forEach(t),zyo=i(O),p1=n(O,"LI",{});var dSe=s(p1);wge=n(dSe,"STRONG",{});var Jvt=s(wge);Wyo=r(Jvt,"distilbert"),Jvt.forEach(t),Qyo=r(dSe," \u2014 "),zG=n(dSe,"A",{href:!0});var Yvt=s(zG);Hyo=r(Yvt,"DistilBertForMaskedLM"),Yvt.forEach(t),Uyo=r(dSe," (DistilBERT model)"),dSe.forEach(t),Jyo=i(O),_1=n(O,"LI",{});var cSe=s(_1);Age=n(cSe,"STRONG",{});var Kvt=s(Age);Yyo=r(Kvt,"electra"),Kvt.forEach(t),Kyo=r(cSe," \u2014 "),WG=n(cSe,"A",{href:!0});var Zvt=s(WG);Zyo=r(Zvt,"ElectraForPreTraining"),Zvt.forEach(t),e9o=r(cSe," (ELECTRA model)"),cSe.forEach(t),o9o=i(O),u1=n(O,"LI",{});var fSe=s(u1);Lge=n(fSe,"STRONG",{});var e3t=s(Lge);r9o=r(e3t,"flaubert"),e3t.forEach(t),t9o=r(fSe," \u2014 "),QG=n(fSe,"A",{href:!0});var o3t=s(QG);a9o=r(o3t,"FlaubertWithLMHeadModel"),o3t.forEach(t),n9o=r(fSe," (FlauBERT model)"),fSe.forEach(t),s9o=i(O),b1=n(O,"LI",{});var mSe=s(b1);yge=n(mSe,"STRONG",{});var r3t=s(yge);l9o=r(r3t,"flava"),r3t.forEach(t),i9o=r(mSe," \u2014 "),HG=n(mSe,"A",{href:!0});var t3t=s(HG);d9o=r(t3t,"FlavaForPreTraining"),t3t.forEach(t),c9o=r(mSe," (FLAVA model)"),mSe.forEach(t),f9o=i(O),v1=n(O,"LI",{});var gSe=s(v1);xge=n(gSe,"STRONG",{});var a3t=s(xge);m9o=r(a3t,"fnet"),a3t.forEach(t),g9o=r(gSe," \u2014 "),UG=n(gSe,"A",{href:!0});var n3t=s(UG);h9o=r(n3t,"FNetForPreTraining"),n3t.forEach(t),p9o=r(gSe," (FNet model)"),gSe.forEach(t),_9o=i(O),F1=n(O,"LI",{});var hSe=s(F1);$ge=n(hSe,"STRONG",{});var s3t=s($ge);u9o=r(s3t,"fsmt"),s3t.forEach(t),b9o=r(hSe," \u2014 "),JG=n(hSe,"A",{href:!0});var l3t=s(JG);v9o=r(l3t,"FSMTForConditionalGeneration"),l3t.forEach(t),F9o=r(hSe," (FairSeq Machine-Translation model)"),hSe.forEach(t),T9o=i(O),T1=n(O,"LI",{});var pSe=s(T1);kge=n(pSe,"STRONG",{});var i3t=s(kge);M9o=r(i3t,"funnel"),i3t.forEach(t),E9o=r(pSe," \u2014 "),YG=n(pSe,"A",{href:!0});var d3t=s(YG);C9o=r(d3t,"FunnelForPreTraining"),d3t.forEach(t),w9o=r(pSe," (Funnel Transformer model)"),pSe.forEach(t),A9o=i(O),M1=n(O,"LI",{});var _Se=s(M1);Sge=n(_Se,"STRONG",{});var c3t=s(Sge);L9o=r(c3t,"gpt2"),c3t.forEach(t),y9o=r(_Se," \u2014 "),KG=n(_Se,"A",{href:!0});var f3t=s(KG);x9o=r(f3t,"GPT2LMHeadModel"),f3t.forEach(t),$9o=r(_Se," (OpenAI GPT-2 model)"),_Se.forEach(t),k9o=i(O),E1=n(O,"LI",{});var uSe=s(E1);Rge=n(uSe,"STRONG",{});var m3t=s(Rge);S9o=r(m3t,"ibert"),m3t.forEach(t),R9o=r(uSe," \u2014 "),ZG=n(uSe,"A",{href:!0});var g3t=s(ZG);P9o=r(g3t,"IBertForMaskedLM"),g3t.forEach(t),B9o=r(uSe," (I-BERT model)"),uSe.forEach(t),I9o=i(O),C1=n(O,"LI",{});var bSe=s(C1);Pge=n(bSe,"STRONG",{});var h3t=s(Pge);N9o=r(h3t,"layoutlm"),h3t.forEach(t),q9o=r(bSe," \u2014 "),eO=n(bSe,"A",{href:!0});var p3t=s(eO);j9o=r(p3t,"LayoutLMForMaskedLM"),p3t.forEach(t),D9o=r(bSe," (LayoutLM model)"),bSe.forEach(t),G9o=i(O),w1=n(O,"LI",{});var vSe=s(w1);Bge=n(vSe,"STRONG",{});var _3t=s(Bge);O9o=r(_3t,"longformer"),_3t.forEach(t),V9o=r(vSe," \u2014 "),oO=n(vSe,"A",{href:!0});var u3t=s(oO);X9o=r(u3t,"LongformerForMaskedLM"),u3t.forEach(t),z9o=r(vSe," (Longformer model)"),vSe.forEach(t),W9o=i(O),A1=n(O,"LI",{});var FSe=s(A1);Ige=n(FSe,"STRONG",{});var b3t=s(Ige);Q9o=r(b3t,"lxmert"),b3t.forEach(t),H9o=r(FSe," \u2014 "),rO=n(FSe,"A",{href:!0});var v3t=s(rO);U9o=r(v3t,"LxmertForPreTraining"),v3t.forEach(t),J9o=r(FSe," (LXMERT model)"),FSe.forEach(t),Y9o=i(O),L1=n(O,"LI",{});var TSe=s(L1);Nge=n(TSe,"STRONG",{});var F3t=s(Nge);K9o=r(F3t,"megatron-bert"),F3t.forEach(t),Z9o=r(TSe," \u2014 "),tO=n(TSe,"A",{href:!0});var T3t=s(tO);exo=r(T3t,"MegatronBertForPreTraining"),T3t.forEach(t),oxo=r(TSe," (Megatron-BERT model)"),TSe.forEach(t),rxo=i(O),y1=n(O,"LI",{});var MSe=s(y1);qge=n(MSe,"STRONG",{});var M3t=s(qge);txo=r(M3t,"mobilebert"),M3t.forEach(t),axo=r(MSe," \u2014 "),aO=n(MSe,"A",{href:!0});var E3t=s(aO);nxo=r(E3t,"MobileBertForPreTraining"),E3t.forEach(t),sxo=r(MSe," (MobileBERT model)"),MSe.forEach(t),lxo=i(O),x1=n(O,"LI",{});var ESe=s(x1);jge=n(ESe,"STRONG",{});var C3t=s(jge);ixo=r(C3t,"mpnet"),C3t.forEach(t),dxo=r(ESe," \u2014 "),nO=n(ESe,"A",{href:!0});var w3t=s(nO);cxo=r(w3t,"MPNetForMaskedLM"),w3t.forEach(t),fxo=r(ESe," (MPNet model)"),ESe.forEach(t),mxo=i(O),$1=n(O,"LI",{});var CSe=s($1);Dge=n(CSe,"STRONG",{});var A3t=s(Dge);gxo=r(A3t,"mvp"),A3t.forEach(t),hxo=r(CSe," \u2014 "),sO=n(CSe,"A",{href:!0});var L3t=s(sO);pxo=r(L3t,"MvpForConditionalGeneration"),L3t.forEach(t),_xo=r(CSe," (MVP model)"),CSe.forEach(t),uxo=i(O),k1=n(O,"LI",{});var wSe=s(k1);Gge=n(wSe,"STRONG",{});var y3t=s(Gge);bxo=r(y3t,"nezha"),y3t.forEach(t),vxo=r(wSe," \u2014 "),lO=n(wSe,"A",{href:!0});var x3t=s(lO);Fxo=r(x3t,"NezhaForPreTraining"),x3t.forEach(t),Txo=r(wSe," (Nezha model)"),wSe.forEach(t),Mxo=i(O),S1=n(O,"LI",{});var ASe=s(S1);Oge=n(ASe,"STRONG",{});var $3t=s(Oge);Exo=r($3t,"openai-gpt"),$3t.forEach(t),Cxo=r(ASe," \u2014 "),iO=n(ASe,"A",{href:!0});var k3t=s(iO);wxo=r(k3t,"OpenAIGPTLMHeadModel"),k3t.forEach(t),Axo=r(ASe," (OpenAI GPT model)"),ASe.forEach(t),Lxo=i(O),R1=n(O,"LI",{});var LSe=s(R1);Vge=n(LSe,"STRONG",{});var S3t=s(Vge);yxo=r(S3t,"retribert"),S3t.forEach(t),xxo=r(LSe," \u2014 "),dO=n(LSe,"A",{href:!0});var R3t=s(dO);$xo=r(R3t,"RetriBertModel"),R3t.forEach(t),kxo=r(LSe," (RetriBERT model)"),LSe.forEach(t),Sxo=i(O),P1=n(O,"LI",{});var ySe=s(P1);Xge=n(ySe,"STRONG",{});var P3t=s(Xge);Rxo=r(P3t,"roberta"),P3t.forEach(t),Pxo=r(ySe," \u2014 "),cO=n(ySe,"A",{href:!0});var B3t=s(cO);Bxo=r(B3t,"RobertaForMaskedLM"),B3t.forEach(t),Ixo=r(ySe," (RoBERTa model)"),ySe.forEach(t),Nxo=i(O),B1=n(O,"LI",{});var xSe=s(B1);zge=n(xSe,"STRONG",{});var I3t=s(zge);qxo=r(I3t,"splinter"),I3t.forEach(t),jxo=r(xSe," \u2014 "),fO=n(xSe,"A",{href:!0});var N3t=s(fO);Dxo=r(N3t,"SplinterForPreTraining"),N3t.forEach(t),Gxo=r(xSe," (Splinter model)"),xSe.forEach(t),Oxo=i(O),I1=n(O,"LI",{});var $Se=s(I1);Wge=n($Se,"STRONG",{});var q3t=s(Wge);Vxo=r(q3t,"squeezebert"),q3t.forEach(t),Xxo=r($Se," \u2014 "),mO=n($Se,"A",{href:!0});var j3t=s(mO);zxo=r(j3t,"SqueezeBertForMaskedLM"),j3t.forEach(t),Wxo=r($Se," (SqueezeBERT model)"),$Se.forEach(t),Qxo=i(O),N1=n(O,"LI",{});var kSe=s(N1);Qge=n(kSe,"STRONG",{});var D3t=s(Qge);Hxo=r(D3t,"t5"),D3t.forEach(t),Uxo=r(kSe," \u2014 "),gO=n(kSe,"A",{href:!0});var G3t=s(gO);Jxo=r(G3t,"T5ForConditionalGeneration"),G3t.forEach(t),Yxo=r(kSe," (T5 model)"),kSe.forEach(t),Kxo=i(O),q1=n(O,"LI",{});var SSe=s(q1);Hge=n(SSe,"STRONG",{});var O3t=s(Hge);Zxo=r(O3t,"tapas"),O3t.forEach(t),e$o=r(SSe," \u2014 "),hO=n(SSe,"A",{href:!0});var V3t=s(hO);o$o=r(V3t,"TapasForMaskedLM"),V3t.forEach(t),r$o=r(SSe," (TAPAS model)"),SSe.forEach(t),t$o=i(O),j1=n(O,"LI",{});var RSe=s(j1);Uge=n(RSe,"STRONG",{});var X3t=s(Uge);a$o=r(X3t,"transfo-xl"),X3t.forEach(t),n$o=r(RSe," \u2014 "),pO=n(RSe,"A",{href:!0});var z3t=s(pO);s$o=r(z3t,"TransfoXLLMHeadModel"),z3t.forEach(t),l$o=r(RSe," (Transformer-XL model)"),RSe.forEach(t),i$o=i(O),D1=n(O,"LI",{});var PSe=s(D1);Jge=n(PSe,"STRONG",{});var W3t=s(Jge);d$o=r(W3t,"unispeech"),W3t.forEach(t),c$o=r(PSe," \u2014 "),_O=n(PSe,"A",{href:!0});var Q3t=s(_O);f$o=r(Q3t,"UniSpeechForPreTraining"),Q3t.forEach(t),m$o=r(PSe," (UniSpeech model)"),PSe.forEach(t),g$o=i(O),G1=n(O,"LI",{});var BSe=s(G1);Yge=n(BSe,"STRONG",{});var H3t=s(Yge);h$o=r(H3t,"unispeech-sat"),H3t.forEach(t),p$o=r(BSe," \u2014 "),uO=n(BSe,"A",{href:!0});var U3t=s(uO);_$o=r(U3t,"UniSpeechSatForPreTraining"),U3t.forEach(t),u$o=r(BSe," (UniSpeechSat model)"),BSe.forEach(t),b$o=i(O),O1=n(O,"LI",{});var ISe=s(O1);Kge=n(ISe,"STRONG",{});var J3t=s(Kge);v$o=r(J3t,"visual_bert"),J3t.forEach(t),F$o=r(ISe," \u2014 "),bO=n(ISe,"A",{href:!0});var Y3t=s(bO);T$o=r(Y3t,"VisualBertForPreTraining"),Y3t.forEach(t),M$o=r(ISe," (VisualBERT model)"),ISe.forEach(t),E$o=i(O),V1=n(O,"LI",{});var NSe=s(V1);Zge=n(NSe,"STRONG",{});var K3t=s(Zge);C$o=r(K3t,"vit_mae"),K3t.forEach(t),w$o=r(NSe," \u2014 "),vO=n(NSe,"A",{href:!0});var Z3t=s(vO);A$o=r(Z3t,"ViTMAEForPreTraining"),Z3t.forEach(t),L$o=r(NSe," (ViTMAE model)"),NSe.forEach(t),y$o=i(O),X1=n(O,"LI",{});var qSe=s(X1);ehe=n(qSe,"STRONG",{});var eFt=s(ehe);x$o=r(eFt,"wav2vec2"),eFt.forEach(t),$$o=r(qSe," \u2014 "),FO=n(qSe,"A",{href:!0});var oFt=s(FO);k$o=r(oFt,"Wav2Vec2ForPreTraining"),oFt.forEach(t),S$o=r(qSe," (Wav2Vec2 model)"),qSe.forEach(t),R$o=i(O),z1=n(O,"LI",{});var jSe=s(z1);ohe=n(jSe,"STRONG",{});var rFt=s(ohe);P$o=r(rFt,"wav2vec2-conformer"),rFt.forEach(t),B$o=r(jSe," \u2014 "),TO=n(jSe,"A",{href:!0});var tFt=s(TO);I$o=r(tFt,"Wav2Vec2ConformerForPreTraining"),tFt.forEach(t),N$o=r(jSe," (Wav2Vec2-Conformer model)"),jSe.forEach(t),q$o=i(O),W1=n(O,"LI",{});var DSe=s(W1);rhe=n(DSe,"STRONG",{});var aFt=s(rhe);j$o=r(aFt,"xlm"),aFt.forEach(t),D$o=r(DSe," \u2014 "),MO=n(DSe,"A",{href:!0});var nFt=s(MO);G$o=r(nFt,"XLMWithLMHeadModel"),nFt.forEach(t),O$o=r(DSe," (XLM model)"),DSe.forEach(t),V$o=i(O),Q1=n(O,"LI",{});var GSe=s(Q1);the=n(GSe,"STRONG",{});var sFt=s(the);X$o=r(sFt,"xlm-roberta"),sFt.forEach(t),z$o=r(GSe," \u2014 "),EO=n(GSe,"A",{href:!0});var lFt=s(EO);W$o=r(lFt,"XLMRobertaForMaskedLM"),lFt.forEach(t),Q$o=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),H$o=i(O),H1=n(O,"LI",{});var OSe=s(H1);ahe=n(OSe,"STRONG",{});var iFt=s(ahe);U$o=r(iFt,"xlm-roberta-xl"),iFt.forEach(t),J$o=r(OSe," \u2014 "),CO=n(OSe,"A",{href:!0});var dFt=s(CO);Y$o=r(dFt,"XLMRobertaXLForMaskedLM"),dFt.forEach(t),K$o=r(OSe," (XLM-RoBERTa-XL model)"),OSe.forEach(t),Z$o=i(O),U1=n(O,"LI",{});var VSe=s(U1);nhe=n(VSe,"STRONG",{});var cFt=s(nhe);eko=r(cFt,"xlnet"),cFt.forEach(t),oko=r(VSe," \u2014 "),wO=n(VSe,"A",{href:!0});var fFt=s(wO);rko=r(fFt,"XLNetLMHeadModel"),fFt.forEach(t),tko=r(VSe," (XLNet model)"),VSe.forEach(t),O.forEach(t),ako=i(ia),J1=n(ia,"P",{});var XSe=s(J1);nko=r(XSe,"The model is set in evaluation mode by default using "),she=n(XSe,"CODE",{});var mFt=s(she);sko=r(mFt,"model.eval()"),mFt.forEach(t),lko=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(XSe,"CODE",{});var gFt=s(lhe);iko=r(gFt,"model.train()"),gFt.forEach(t),XSe.forEach(t),dko=i(ia),T(Y1.$$.fragment,ia),ia.forEach(t),sl.forEach(t),Aze=i(f),Ji=n(f,"H2",{class:!0});var SQe=s(Ji);K1=n(SQe,"A",{id:!0,class:!0,href:!0});var hFt=s(K1);ihe=n(hFt,"SPAN",{});var pFt=s(ihe);T(ty.$$.fragment,pFt),pFt.forEach(t),hFt.forEach(t),cko=i(SQe),dhe=n(SQe,"SPAN",{});var _Ft=s(dhe);fko=r(_Ft,"AutoModelForCausalLM"),_Ft.forEach(t),SQe.forEach(t),Lze=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(ay.$$.fragment,ll),mko=i(ll),Yi=n(ll,"P",{});var vte=s(Yi);gko=r(vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AO=n(vte,"A",{href:!0});var uFt=s(AO);hko=r(uFt,"from_pretrained()"),uFt.forEach(t),pko=r(vte," class method or the "),LO=n(vte,"A",{href:!0});var bFt=s(LO);_ko=r(bFt,"from_config()"),bFt.forEach(t),uko=r(vte,` class
method.`),vte.forEach(t),bko=i(ll),ny=n(ll,"P",{});var RQe=s(ny);vko=r(RQe,"This class cannot be instantiated directly using "),che=n(RQe,"CODE",{});var vFt=s(che);Fko=r(vFt,"__init__()"),vFt.forEach(t),Tko=r(RQe," (throws an error)."),RQe.forEach(t),Mko=i(ll),ct=n(ll,"DIV",{class:!0});var yA=s(ct);T(sy.$$.fragment,yA),Eko=i(yA),fhe=n(yA,"P",{});var FFt=s(fhe);Cko=r(FFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FFt.forEach(t),wko=i(yA),Ki=n(yA,"P",{});var Fte=s(Ki);Ako=r(Fte,`Note:
Loading a model from its configuration file does `),mhe=n(Fte,"STRONG",{});var TFt=s(mhe);Lko=r(TFt,"not"),TFt.forEach(t),yko=r(Fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(Fte,"A",{href:!0});var MFt=s(yO);xko=r(MFt,"from_pretrained()"),MFt.forEach(t),$ko=r(Fte," to load the model weights."),Fte.forEach(t),kko=i(yA),T(Z1.$$.fragment,yA),yA.forEach(t),Sko=i(ll),Ze=n(ll,"DIV",{class:!0});var da=s(Ze);T(ly.$$.fragment,da),Rko=i(da),ghe=n(da,"P",{});var EFt=s(ghe);Pko=r(EFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EFt.forEach(t),Bko=i(da),qa=n(da,"P",{});var xA=s(qa);Iko=r(xA,"The model class to instantiate is selected based on the "),hhe=n(xA,"CODE",{});var CFt=s(hhe);Nko=r(CFt,"model_type"),CFt.forEach(t),qko=r(xA,` property of the config object (either
passed as an argument or loaded from `),phe=n(xA,"CODE",{});var wFt=s(phe);jko=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),Dko=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(xA,"CODE",{});var AFt=s(_he);Gko=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),Oko=r(xA,":"),xA.forEach(t),Vko=i(da),z=n(da,"UL",{});var W=s(z);e2=n(W,"LI",{});var zSe=s(e2);uhe=n(zSe,"STRONG",{});var LFt=s(uhe);Xko=r(LFt,"bart"),LFt.forEach(t),zko=r(zSe," \u2014 "),xO=n(zSe,"A",{href:!0});var yFt=s(xO);Wko=r(yFt,"BartForCausalLM"),yFt.forEach(t),Qko=r(zSe," (BART model)"),zSe.forEach(t),Hko=i(W),o2=n(W,"LI",{});var WSe=s(o2);bhe=n(WSe,"STRONG",{});var xFt=s(bhe);Uko=r(xFt,"bert"),xFt.forEach(t),Jko=r(WSe," \u2014 "),$O=n(WSe,"A",{href:!0});var $Ft=s($O);Yko=r($Ft,"BertLMHeadModel"),$Ft.forEach(t),Kko=r(WSe," (BERT model)"),WSe.forEach(t),Zko=i(W),r2=n(W,"LI",{});var QSe=s(r2);vhe=n(QSe,"STRONG",{});var kFt=s(vhe);eSo=r(kFt,"bert-generation"),kFt.forEach(t),oSo=r(QSe," \u2014 "),kO=n(QSe,"A",{href:!0});var SFt=s(kO);rSo=r(SFt,"BertGenerationDecoder"),SFt.forEach(t),tSo=r(QSe," (Bert Generation model)"),QSe.forEach(t),aSo=i(W),t2=n(W,"LI",{});var HSe=s(t2);Fhe=n(HSe,"STRONG",{});var RFt=s(Fhe);nSo=r(RFt,"big_bird"),RFt.forEach(t),sSo=r(HSe," \u2014 "),SO=n(HSe,"A",{href:!0});var PFt=s(SO);lSo=r(PFt,"BigBirdForCausalLM"),PFt.forEach(t),iSo=r(HSe," (BigBird model)"),HSe.forEach(t),dSo=i(W),a2=n(W,"LI",{});var USe=s(a2);The=n(USe,"STRONG",{});var BFt=s(The);cSo=r(BFt,"bigbird_pegasus"),BFt.forEach(t),fSo=r(USe," \u2014 "),RO=n(USe,"A",{href:!0});var IFt=s(RO);mSo=r(IFt,"BigBirdPegasusForCausalLM"),IFt.forEach(t),gSo=r(USe," (BigBird-Pegasus model)"),USe.forEach(t),hSo=i(W),n2=n(W,"LI",{});var JSe=s(n2);Mhe=n(JSe,"STRONG",{});var NFt=s(Mhe);pSo=r(NFt,"blenderbot"),NFt.forEach(t),_So=r(JSe," \u2014 "),PO=n(JSe,"A",{href:!0});var qFt=s(PO);uSo=r(qFt,"BlenderbotForCausalLM"),qFt.forEach(t),bSo=r(JSe," (Blenderbot model)"),JSe.forEach(t),vSo=i(W),s2=n(W,"LI",{});var YSe=s(s2);Ehe=n(YSe,"STRONG",{});var jFt=s(Ehe);FSo=r(jFt,"blenderbot-small"),jFt.forEach(t),TSo=r(YSe," \u2014 "),BO=n(YSe,"A",{href:!0});var DFt=s(BO);MSo=r(DFt,"BlenderbotSmallForCausalLM"),DFt.forEach(t),ESo=r(YSe," (BlenderbotSmall model)"),YSe.forEach(t),CSo=i(W),l2=n(W,"LI",{});var KSe=s(l2);Che=n(KSe,"STRONG",{});var GFt=s(Che);wSo=r(GFt,"bloom"),GFt.forEach(t),ASo=r(KSe," \u2014 "),IO=n(KSe,"A",{href:!0});var OFt=s(IO);LSo=r(OFt,"BloomForCausalLM"),OFt.forEach(t),ySo=r(KSe," (BLOOM model)"),KSe.forEach(t),xSo=i(W),i2=n(W,"LI",{});var ZSe=s(i2);whe=n(ZSe,"STRONG",{});var VFt=s(whe);$So=r(VFt,"camembert"),VFt.forEach(t),kSo=r(ZSe," \u2014 "),NO=n(ZSe,"A",{href:!0});var XFt=s(NO);SSo=r(XFt,"CamembertForCausalLM"),XFt.forEach(t),RSo=r(ZSe," (CamemBERT model)"),ZSe.forEach(t),PSo=i(W),d2=n(W,"LI",{});var eRe=s(d2);Ahe=n(eRe,"STRONG",{});var zFt=s(Ahe);BSo=r(zFt,"codegen"),zFt.forEach(t),ISo=r(eRe," \u2014 "),qO=n(eRe,"A",{href:!0});var WFt=s(qO);NSo=r(WFt,"CodeGenForCausalLM"),WFt.forEach(t),qSo=r(eRe," (CodeGen model)"),eRe.forEach(t),jSo=i(W),c2=n(W,"LI",{});var oRe=s(c2);Lhe=n(oRe,"STRONG",{});var QFt=s(Lhe);DSo=r(QFt,"ctrl"),QFt.forEach(t),GSo=r(oRe," \u2014 "),jO=n(oRe,"A",{href:!0});var HFt=s(jO);OSo=r(HFt,"CTRLLMHeadModel"),HFt.forEach(t),VSo=r(oRe," (CTRL model)"),oRe.forEach(t),XSo=i(W),f2=n(W,"LI",{});var rRe=s(f2);yhe=n(rRe,"STRONG",{});var UFt=s(yhe);zSo=r(UFt,"data2vec-text"),UFt.forEach(t),WSo=r(rRe," \u2014 "),DO=n(rRe,"A",{href:!0});var JFt=s(DO);QSo=r(JFt,"Data2VecTextForCausalLM"),JFt.forEach(t),HSo=r(rRe," (Data2VecText model)"),rRe.forEach(t),USo=i(W),m2=n(W,"LI",{});var tRe=s(m2);xhe=n(tRe,"STRONG",{});var YFt=s(xhe);JSo=r(YFt,"electra"),YFt.forEach(t),YSo=r(tRe," \u2014 "),GO=n(tRe,"A",{href:!0});var KFt=s(GO);KSo=r(KFt,"ElectraForCausalLM"),KFt.forEach(t),ZSo=r(tRe," (ELECTRA model)"),tRe.forEach(t),eRo=i(W),g2=n(W,"LI",{});var aRe=s(g2);$he=n(aRe,"STRONG",{});var ZFt=s($he);oRo=r(ZFt,"gpt2"),ZFt.forEach(t),rRo=r(aRe," \u2014 "),OO=n(aRe,"A",{href:!0});var e6t=s(OO);tRo=r(e6t,"GPT2LMHeadModel"),e6t.forEach(t),aRo=r(aRe," (OpenAI GPT-2 model)"),aRe.forEach(t),nRo=i(W),h2=n(W,"LI",{});var nRe=s(h2);khe=n(nRe,"STRONG",{});var o6t=s(khe);sRo=r(o6t,"gpt_neo"),o6t.forEach(t),lRo=r(nRe," \u2014 "),VO=n(nRe,"A",{href:!0});var r6t=s(VO);iRo=r(r6t,"GPTNeoForCausalLM"),r6t.forEach(t),dRo=r(nRe," (GPT Neo model)"),nRe.forEach(t),cRo=i(W),p2=n(W,"LI",{});var sRe=s(p2);She=n(sRe,"STRONG",{});var t6t=s(She);fRo=r(t6t,"gpt_neox"),t6t.forEach(t),mRo=r(sRe," \u2014 "),XO=n(sRe,"A",{href:!0});var a6t=s(XO);gRo=r(a6t,"GPTNeoXForCausalLM"),a6t.forEach(t),hRo=r(sRe," (GPT NeoX model)"),sRe.forEach(t),pRo=i(W),_2=n(W,"LI",{});var lRe=s(_2);Rhe=n(lRe,"STRONG",{});var n6t=s(Rhe);_Ro=r(n6t,"gptj"),n6t.forEach(t),uRo=r(lRe," \u2014 "),zO=n(lRe,"A",{href:!0});var s6t=s(zO);bRo=r(s6t,"GPTJForCausalLM"),s6t.forEach(t),vRo=r(lRe," (GPT-J model)"),lRe.forEach(t),FRo=i(W),u2=n(W,"LI",{});var iRe=s(u2);Phe=n(iRe,"STRONG",{});var l6t=s(Phe);TRo=r(l6t,"marian"),l6t.forEach(t),MRo=r(iRe," \u2014 "),WO=n(iRe,"A",{href:!0});var i6t=s(WO);ERo=r(i6t,"MarianForCausalLM"),i6t.forEach(t),CRo=r(iRe," (Marian model)"),iRe.forEach(t),wRo=i(W),b2=n(W,"LI",{});var dRe=s(b2);Bhe=n(dRe,"STRONG",{});var d6t=s(Bhe);ARo=r(d6t,"mbart"),d6t.forEach(t),LRo=r(dRe," \u2014 "),QO=n(dRe,"A",{href:!0});var c6t=s(QO);yRo=r(c6t,"MBartForCausalLM"),c6t.forEach(t),xRo=r(dRe," (mBART model)"),dRe.forEach(t),$Ro=i(W),v2=n(W,"LI",{});var cRe=s(v2);Ihe=n(cRe,"STRONG",{});var f6t=s(Ihe);kRo=r(f6t,"megatron-bert"),f6t.forEach(t),SRo=r(cRe," \u2014 "),HO=n(cRe,"A",{href:!0});var m6t=s(HO);RRo=r(m6t,"MegatronBertForCausalLM"),m6t.forEach(t),PRo=r(cRe," (Megatron-BERT model)"),cRe.forEach(t),BRo=i(W),F2=n(W,"LI",{});var fRe=s(F2);Nhe=n(fRe,"STRONG",{});var g6t=s(Nhe);IRo=r(g6t,"mvp"),g6t.forEach(t),NRo=r(fRe," \u2014 "),UO=n(fRe,"A",{href:!0});var h6t=s(UO);qRo=r(h6t,"MvpForCausalLM"),h6t.forEach(t),jRo=r(fRe," (MVP model)"),fRe.forEach(t),DRo=i(W),T2=n(W,"LI",{});var mRe=s(T2);qhe=n(mRe,"STRONG",{});var p6t=s(qhe);GRo=r(p6t,"openai-gpt"),p6t.forEach(t),ORo=r(mRe," \u2014 "),JO=n(mRe,"A",{href:!0});var _6t=s(JO);VRo=r(_6t,"OpenAIGPTLMHeadModel"),_6t.forEach(t),XRo=r(mRe," (OpenAI GPT model)"),mRe.forEach(t),zRo=i(W),M2=n(W,"LI",{});var gRe=s(M2);jhe=n(gRe,"STRONG",{});var u6t=s(jhe);WRo=r(u6t,"opt"),u6t.forEach(t),QRo=r(gRe," \u2014 "),YO=n(gRe,"A",{href:!0});var b6t=s(YO);HRo=r(b6t,"OPTForCausalLM"),b6t.forEach(t),URo=r(gRe," (OPT model)"),gRe.forEach(t),JRo=i(W),E2=n(W,"LI",{});var hRe=s(E2);Dhe=n(hRe,"STRONG",{});var v6t=s(Dhe);YRo=r(v6t,"pegasus"),v6t.forEach(t),KRo=r(hRe," \u2014 "),KO=n(hRe,"A",{href:!0});var F6t=s(KO);ZRo=r(F6t,"PegasusForCausalLM"),F6t.forEach(t),ePo=r(hRe," (Pegasus model)"),hRe.forEach(t),oPo=i(W),C2=n(W,"LI",{});var pRe=s(C2);Ghe=n(pRe,"STRONG",{});var T6t=s(Ghe);rPo=r(T6t,"plbart"),T6t.forEach(t),tPo=r(pRe," \u2014 "),ZO=n(pRe,"A",{href:!0});var M6t=s(ZO);aPo=r(M6t,"PLBartForCausalLM"),M6t.forEach(t),nPo=r(pRe," (PLBart model)"),pRe.forEach(t),sPo=i(W),w2=n(W,"LI",{});var _Re=s(w2);Ohe=n(_Re,"STRONG",{});var E6t=s(Ohe);lPo=r(E6t,"prophetnet"),E6t.forEach(t),iPo=r(_Re," \u2014 "),eV=n(_Re,"A",{href:!0});var C6t=s(eV);dPo=r(C6t,"ProphetNetForCausalLM"),C6t.forEach(t),cPo=r(_Re," (ProphetNet model)"),_Re.forEach(t),fPo=i(W),A2=n(W,"LI",{});var uRe=s(A2);Vhe=n(uRe,"STRONG",{});var w6t=s(Vhe);mPo=r(w6t,"qdqbert"),w6t.forEach(t),gPo=r(uRe," \u2014 "),oV=n(uRe,"A",{href:!0});var A6t=s(oV);hPo=r(A6t,"QDQBertLMHeadModel"),A6t.forEach(t),pPo=r(uRe," (QDQBert model)"),uRe.forEach(t),_Po=i(W),L2=n(W,"LI",{});var bRe=s(L2);Xhe=n(bRe,"STRONG",{});var L6t=s(Xhe);uPo=r(L6t,"reformer"),L6t.forEach(t),bPo=r(bRe," \u2014 "),rV=n(bRe,"A",{href:!0});var y6t=s(rV);vPo=r(y6t,"ReformerModelWithLMHead"),y6t.forEach(t),FPo=r(bRe," (Reformer model)"),bRe.forEach(t),TPo=i(W),y2=n(W,"LI",{});var vRe=s(y2);zhe=n(vRe,"STRONG",{});var x6t=s(zhe);MPo=r(x6t,"rembert"),x6t.forEach(t),EPo=r(vRe," \u2014 "),tV=n(vRe,"A",{href:!0});var $6t=s(tV);CPo=r($6t,"RemBertForCausalLM"),$6t.forEach(t),wPo=r(vRe," (RemBERT model)"),vRe.forEach(t),APo=i(W),x2=n(W,"LI",{});var FRe=s(x2);Whe=n(FRe,"STRONG",{});var k6t=s(Whe);LPo=r(k6t,"roberta"),k6t.forEach(t),yPo=r(FRe," \u2014 "),aV=n(FRe,"A",{href:!0});var S6t=s(aV);xPo=r(S6t,"RobertaForCausalLM"),S6t.forEach(t),$Po=r(FRe," (RoBERTa model)"),FRe.forEach(t),kPo=i(W),$2=n(W,"LI",{});var TRe=s($2);Qhe=n(TRe,"STRONG",{});var R6t=s(Qhe);SPo=r(R6t,"roformer"),R6t.forEach(t),RPo=r(TRe," \u2014 "),nV=n(TRe,"A",{href:!0});var P6t=s(nV);PPo=r(P6t,"RoFormerForCausalLM"),P6t.forEach(t),BPo=r(TRe," (RoFormer model)"),TRe.forEach(t),IPo=i(W),k2=n(W,"LI",{});var MRe=s(k2);Hhe=n(MRe,"STRONG",{});var B6t=s(Hhe);NPo=r(B6t,"speech_to_text_2"),B6t.forEach(t),qPo=r(MRe," \u2014 "),sV=n(MRe,"A",{href:!0});var I6t=s(sV);jPo=r(I6t,"Speech2Text2ForCausalLM"),I6t.forEach(t),DPo=r(MRe," (Speech2Text2 model)"),MRe.forEach(t),GPo=i(W),S2=n(W,"LI",{});var ERe=s(S2);Uhe=n(ERe,"STRONG",{});var N6t=s(Uhe);OPo=r(N6t,"transfo-xl"),N6t.forEach(t),VPo=r(ERe," \u2014 "),lV=n(ERe,"A",{href:!0});var q6t=s(lV);XPo=r(q6t,"TransfoXLLMHeadModel"),q6t.forEach(t),zPo=r(ERe," (Transformer-XL model)"),ERe.forEach(t),WPo=i(W),R2=n(W,"LI",{});var CRe=s(R2);Jhe=n(CRe,"STRONG",{});var j6t=s(Jhe);QPo=r(j6t,"trocr"),j6t.forEach(t),HPo=r(CRe," \u2014 "),iV=n(CRe,"A",{href:!0});var D6t=s(iV);UPo=r(D6t,"TrOCRForCausalLM"),D6t.forEach(t),JPo=r(CRe," (TrOCR model)"),CRe.forEach(t),YPo=i(W),P2=n(W,"LI",{});var wRe=s(P2);Yhe=n(wRe,"STRONG",{});var G6t=s(Yhe);KPo=r(G6t,"xglm"),G6t.forEach(t),ZPo=r(wRe," \u2014 "),dV=n(wRe,"A",{href:!0});var O6t=s(dV);eBo=r(O6t,"XGLMForCausalLM"),O6t.forEach(t),oBo=r(wRe," (XGLM model)"),wRe.forEach(t),rBo=i(W),B2=n(W,"LI",{});var ARe=s(B2);Khe=n(ARe,"STRONG",{});var V6t=s(Khe);tBo=r(V6t,"xlm"),V6t.forEach(t),aBo=r(ARe," \u2014 "),cV=n(ARe,"A",{href:!0});var X6t=s(cV);nBo=r(X6t,"XLMWithLMHeadModel"),X6t.forEach(t),sBo=r(ARe," (XLM model)"),ARe.forEach(t),lBo=i(W),I2=n(W,"LI",{});var LRe=s(I2);Zhe=n(LRe,"STRONG",{});var z6t=s(Zhe);iBo=r(z6t,"xlm-prophetnet"),z6t.forEach(t),dBo=r(LRe," \u2014 "),fV=n(LRe,"A",{href:!0});var W6t=s(fV);cBo=r(W6t,"XLMProphetNetForCausalLM"),W6t.forEach(t),fBo=r(LRe," (XLM-ProphetNet model)"),LRe.forEach(t),mBo=i(W),N2=n(W,"LI",{});var yRe=s(N2);epe=n(yRe,"STRONG",{});var Q6t=s(epe);gBo=r(Q6t,"xlm-roberta"),Q6t.forEach(t),hBo=r(yRe," \u2014 "),mV=n(yRe,"A",{href:!0});var H6t=s(mV);pBo=r(H6t,"XLMRobertaForCausalLM"),H6t.forEach(t),_Bo=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),uBo=i(W),q2=n(W,"LI",{});var xRe=s(q2);ope=n(xRe,"STRONG",{});var U6t=s(ope);bBo=r(U6t,"xlm-roberta-xl"),U6t.forEach(t),vBo=r(xRe," \u2014 "),gV=n(xRe,"A",{href:!0});var J6t=s(gV);FBo=r(J6t,"XLMRobertaXLForCausalLM"),J6t.forEach(t),TBo=r(xRe," (XLM-RoBERTa-XL model)"),xRe.forEach(t),MBo=i(W),j2=n(W,"LI",{});var $Re=s(j2);rpe=n($Re,"STRONG",{});var Y6t=s(rpe);EBo=r(Y6t,"xlnet"),Y6t.forEach(t),CBo=r($Re," \u2014 "),hV=n($Re,"A",{href:!0});var K6t=s(hV);wBo=r(K6t,"XLNetLMHeadModel"),K6t.forEach(t),ABo=r($Re," (XLNet model)"),$Re.forEach(t),W.forEach(t),LBo=i(da),D2=n(da,"P",{});var kRe=s(D2);yBo=r(kRe,"The model is set in evaluation mode by default using "),tpe=n(kRe,"CODE",{});var Z6t=s(tpe);xBo=r(Z6t,"model.eval()"),Z6t.forEach(t),$Bo=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ape=n(kRe,"CODE",{});var eTt=s(ape);kBo=r(eTt,"model.train()"),eTt.forEach(t),kRe.forEach(t),SBo=i(da),T(G2.$$.fragment,da),da.forEach(t),ll.forEach(t),yze=i(f),Zi=n(f,"H2",{class:!0});var PQe=s(Zi);O2=n(PQe,"A",{id:!0,class:!0,href:!0});var oTt=s(O2);npe=n(oTt,"SPAN",{});var rTt=s(npe);T(iy.$$.fragment,rTt),rTt.forEach(t),oTt.forEach(t),RBo=i(PQe),spe=n(PQe,"SPAN",{});var tTt=s(spe);PBo=r(tTt,"AutoModelForMaskedLM"),tTt.forEach(t),PQe.forEach(t),xze=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(dy.$$.fragment,il),BBo=i(il),ed=n(il,"P",{});var Tte=s(ed);IBo=r(Tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pV=n(Tte,"A",{href:!0});var aTt=s(pV);NBo=r(aTt,"from_pretrained()"),aTt.forEach(t),qBo=r(Tte," class method or the "),_V=n(Tte,"A",{href:!0});var nTt=s(_V);jBo=r(nTt,"from_config()"),nTt.forEach(t),DBo=r(Tte,` class
method.`),Tte.forEach(t),GBo=i(il),cy=n(il,"P",{});var BQe=s(cy);OBo=r(BQe,"This class cannot be instantiated directly using "),lpe=n(BQe,"CODE",{});var sTt=s(lpe);VBo=r(sTt,"__init__()"),sTt.forEach(t),XBo=r(BQe," (throws an error)."),BQe.forEach(t),zBo=i(il),ft=n(il,"DIV",{class:!0});var $A=s(ft);T(fy.$$.fragment,$A),WBo=i($A),ipe=n($A,"P",{});var lTt=s(ipe);QBo=r(lTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lTt.forEach(t),HBo=i($A),od=n($A,"P",{});var Mte=s(od);UBo=r(Mte,`Note:
Loading a model from its configuration file does `),dpe=n(Mte,"STRONG",{});var iTt=s(dpe);JBo=r(iTt,"not"),iTt.forEach(t),YBo=r(Mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(Mte,"A",{href:!0});var dTt=s(uV);KBo=r(dTt,"from_pretrained()"),dTt.forEach(t),ZBo=r(Mte," to load the model weights."),Mte.forEach(t),eIo=i($A),T(V2.$$.fragment,$A),$A.forEach(t),oIo=i(il),eo=n(il,"DIV",{class:!0});var ca=s(eo);T(my.$$.fragment,ca),rIo=i(ca),cpe=n(ca,"P",{});var cTt=s(cpe);tIo=r(cTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cTt.forEach(t),aIo=i(ca),ja=n(ca,"P",{});var kA=s(ja);nIo=r(kA,"The model class to instantiate is selected based on the "),fpe=n(kA,"CODE",{});var fTt=s(fpe);sIo=r(fTt,"model_type"),fTt.forEach(t),lIo=r(kA,` property of the config object (either
passed as an argument or loaded from `),mpe=n(kA,"CODE",{});var mTt=s(mpe);iIo=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),dIo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(kA,"CODE",{});var gTt=s(gpe);cIo=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),fIo=r(kA,":"),kA.forEach(t),mIo=i(ca),Q=n(ca,"UL",{});var H=s(Q);X2=n(H,"LI",{});var SRe=s(X2);hpe=n(SRe,"STRONG",{});var hTt=s(hpe);gIo=r(hTt,"albert"),hTt.forEach(t),hIo=r(SRe," \u2014 "),bV=n(SRe,"A",{href:!0});var pTt=s(bV);pIo=r(pTt,"AlbertForMaskedLM"),pTt.forEach(t),_Io=r(SRe," (ALBERT model)"),SRe.forEach(t),uIo=i(H),z2=n(H,"LI",{});var RRe=s(z2);ppe=n(RRe,"STRONG",{});var _Tt=s(ppe);bIo=r(_Tt,"bart"),_Tt.forEach(t),vIo=r(RRe," \u2014 "),vV=n(RRe,"A",{href:!0});var uTt=s(vV);FIo=r(uTt,"BartForConditionalGeneration"),uTt.forEach(t),TIo=r(RRe," (BART model)"),RRe.forEach(t),MIo=i(H),W2=n(H,"LI",{});var PRe=s(W2);_pe=n(PRe,"STRONG",{});var bTt=s(_pe);EIo=r(bTt,"bert"),bTt.forEach(t),CIo=r(PRe," \u2014 "),FV=n(PRe,"A",{href:!0});var vTt=s(FV);wIo=r(vTt,"BertForMaskedLM"),vTt.forEach(t),AIo=r(PRe," (BERT model)"),PRe.forEach(t),LIo=i(H),Q2=n(H,"LI",{});var BRe=s(Q2);upe=n(BRe,"STRONG",{});var FTt=s(upe);yIo=r(FTt,"big_bird"),FTt.forEach(t),xIo=r(BRe," \u2014 "),TV=n(BRe,"A",{href:!0});var TTt=s(TV);$Io=r(TTt,"BigBirdForMaskedLM"),TTt.forEach(t),kIo=r(BRe," (BigBird model)"),BRe.forEach(t),SIo=i(H),H2=n(H,"LI",{});var IRe=s(H2);bpe=n(IRe,"STRONG",{});var MTt=s(bpe);RIo=r(MTt,"camembert"),MTt.forEach(t),PIo=r(IRe," \u2014 "),MV=n(IRe,"A",{href:!0});var ETt=s(MV);BIo=r(ETt,"CamembertForMaskedLM"),ETt.forEach(t),IIo=r(IRe," (CamemBERT model)"),IRe.forEach(t),NIo=i(H),U2=n(H,"LI",{});var NRe=s(U2);vpe=n(NRe,"STRONG",{});var CTt=s(vpe);qIo=r(CTt,"convbert"),CTt.forEach(t),jIo=r(NRe," \u2014 "),EV=n(NRe,"A",{href:!0});var wTt=s(EV);DIo=r(wTt,"ConvBertForMaskedLM"),wTt.forEach(t),GIo=r(NRe," (ConvBERT model)"),NRe.forEach(t),OIo=i(H),J2=n(H,"LI",{});var qRe=s(J2);Fpe=n(qRe,"STRONG",{});var ATt=s(Fpe);VIo=r(ATt,"data2vec-text"),ATt.forEach(t),XIo=r(qRe," \u2014 "),CV=n(qRe,"A",{href:!0});var LTt=s(CV);zIo=r(LTt,"Data2VecTextForMaskedLM"),LTt.forEach(t),WIo=r(qRe," (Data2VecText model)"),qRe.forEach(t),QIo=i(H),Y2=n(H,"LI",{});var jRe=s(Y2);Tpe=n(jRe,"STRONG",{});var yTt=s(Tpe);HIo=r(yTt,"deberta"),yTt.forEach(t),UIo=r(jRe," \u2014 "),wV=n(jRe,"A",{href:!0});var xTt=s(wV);JIo=r(xTt,"DebertaForMaskedLM"),xTt.forEach(t),YIo=r(jRe," (DeBERTa model)"),jRe.forEach(t),KIo=i(H),K2=n(H,"LI",{});var DRe=s(K2);Mpe=n(DRe,"STRONG",{});var $Tt=s(Mpe);ZIo=r($Tt,"deberta-v2"),$Tt.forEach(t),eNo=r(DRe," \u2014 "),AV=n(DRe,"A",{href:!0});var kTt=s(AV);oNo=r(kTt,"DebertaV2ForMaskedLM"),kTt.forEach(t),rNo=r(DRe," (DeBERTa-v2 model)"),DRe.forEach(t),tNo=i(H),Z2=n(H,"LI",{});var GRe=s(Z2);Epe=n(GRe,"STRONG",{});var STt=s(Epe);aNo=r(STt,"distilbert"),STt.forEach(t),nNo=r(GRe," \u2014 "),LV=n(GRe,"A",{href:!0});var RTt=s(LV);sNo=r(RTt,"DistilBertForMaskedLM"),RTt.forEach(t),lNo=r(GRe," (DistilBERT model)"),GRe.forEach(t),iNo=i(H),eb=n(H,"LI",{});var ORe=s(eb);Cpe=n(ORe,"STRONG",{});var PTt=s(Cpe);dNo=r(PTt,"electra"),PTt.forEach(t),cNo=r(ORe," \u2014 "),yV=n(ORe,"A",{href:!0});var BTt=s(yV);fNo=r(BTt,"ElectraForMaskedLM"),BTt.forEach(t),mNo=r(ORe," (ELECTRA model)"),ORe.forEach(t),gNo=i(H),ob=n(H,"LI",{});var VRe=s(ob);wpe=n(VRe,"STRONG",{});var ITt=s(wpe);hNo=r(ITt,"flaubert"),ITt.forEach(t),pNo=r(VRe," \u2014 "),xV=n(VRe,"A",{href:!0});var NTt=s(xV);_No=r(NTt,"FlaubertWithLMHeadModel"),NTt.forEach(t),uNo=r(VRe," (FlauBERT model)"),VRe.forEach(t),bNo=i(H),rb=n(H,"LI",{});var XRe=s(rb);Ape=n(XRe,"STRONG",{});var qTt=s(Ape);vNo=r(qTt,"fnet"),qTt.forEach(t),FNo=r(XRe," \u2014 "),$V=n(XRe,"A",{href:!0});var jTt=s($V);TNo=r(jTt,"FNetForMaskedLM"),jTt.forEach(t),MNo=r(XRe," (FNet model)"),XRe.forEach(t),ENo=i(H),tb=n(H,"LI",{});var zRe=s(tb);Lpe=n(zRe,"STRONG",{});var DTt=s(Lpe);CNo=r(DTt,"funnel"),DTt.forEach(t),wNo=r(zRe," \u2014 "),kV=n(zRe,"A",{href:!0});var GTt=s(kV);ANo=r(GTt,"FunnelForMaskedLM"),GTt.forEach(t),LNo=r(zRe," (Funnel Transformer model)"),zRe.forEach(t),yNo=i(H),ab=n(H,"LI",{});var WRe=s(ab);ype=n(WRe,"STRONG",{});var OTt=s(ype);xNo=r(OTt,"ibert"),OTt.forEach(t),$No=r(WRe," \u2014 "),SV=n(WRe,"A",{href:!0});var VTt=s(SV);kNo=r(VTt,"IBertForMaskedLM"),VTt.forEach(t),SNo=r(WRe," (I-BERT model)"),WRe.forEach(t),RNo=i(H),nb=n(H,"LI",{});var QRe=s(nb);xpe=n(QRe,"STRONG",{});var XTt=s(xpe);PNo=r(XTt,"layoutlm"),XTt.forEach(t),BNo=r(QRe," \u2014 "),RV=n(QRe,"A",{href:!0});var zTt=s(RV);INo=r(zTt,"LayoutLMForMaskedLM"),zTt.forEach(t),NNo=r(QRe," (LayoutLM model)"),QRe.forEach(t),qNo=i(H),sb=n(H,"LI",{});var HRe=s(sb);$pe=n(HRe,"STRONG",{});var WTt=s($pe);jNo=r(WTt,"longformer"),WTt.forEach(t),DNo=r(HRe," \u2014 "),PV=n(HRe,"A",{href:!0});var QTt=s(PV);GNo=r(QTt,"LongformerForMaskedLM"),QTt.forEach(t),ONo=r(HRe," (Longformer model)"),HRe.forEach(t),VNo=i(H),lb=n(H,"LI",{});var URe=s(lb);kpe=n(URe,"STRONG",{});var HTt=s(kpe);XNo=r(HTt,"luke"),HTt.forEach(t),zNo=r(URe," \u2014 "),BV=n(URe,"A",{href:!0});var UTt=s(BV);WNo=r(UTt,"LukeForMaskedLM"),UTt.forEach(t),QNo=r(URe," (LUKE model)"),URe.forEach(t),HNo=i(H),ib=n(H,"LI",{});var JRe=s(ib);Spe=n(JRe,"STRONG",{});var JTt=s(Spe);UNo=r(JTt,"mbart"),JTt.forEach(t),JNo=r(JRe," \u2014 "),IV=n(JRe,"A",{href:!0});var YTt=s(IV);YNo=r(YTt,"MBartForConditionalGeneration"),YTt.forEach(t),KNo=r(JRe," (mBART model)"),JRe.forEach(t),ZNo=i(H),db=n(H,"LI",{});var YRe=s(db);Rpe=n(YRe,"STRONG",{});var KTt=s(Rpe);eqo=r(KTt,"megatron-bert"),KTt.forEach(t),oqo=r(YRe," \u2014 "),NV=n(YRe,"A",{href:!0});var ZTt=s(NV);rqo=r(ZTt,"MegatronBertForMaskedLM"),ZTt.forEach(t),tqo=r(YRe," (Megatron-BERT model)"),YRe.forEach(t),aqo=i(H),cb=n(H,"LI",{});var KRe=s(cb);Ppe=n(KRe,"STRONG",{});var e8t=s(Ppe);nqo=r(e8t,"mobilebert"),e8t.forEach(t),sqo=r(KRe," \u2014 "),qV=n(KRe,"A",{href:!0});var o8t=s(qV);lqo=r(o8t,"MobileBertForMaskedLM"),o8t.forEach(t),iqo=r(KRe," (MobileBERT model)"),KRe.forEach(t),dqo=i(H),fb=n(H,"LI",{});var ZRe=s(fb);Bpe=n(ZRe,"STRONG",{});var r8t=s(Bpe);cqo=r(r8t,"mpnet"),r8t.forEach(t),fqo=r(ZRe," \u2014 "),jV=n(ZRe,"A",{href:!0});var t8t=s(jV);mqo=r(t8t,"MPNetForMaskedLM"),t8t.forEach(t),gqo=r(ZRe," (MPNet model)"),ZRe.forEach(t),hqo=i(H),mb=n(H,"LI",{});var ePe=s(mb);Ipe=n(ePe,"STRONG",{});var a8t=s(Ipe);pqo=r(a8t,"mvp"),a8t.forEach(t),_qo=r(ePe," \u2014 "),DV=n(ePe,"A",{href:!0});var n8t=s(DV);uqo=r(n8t,"MvpForConditionalGeneration"),n8t.forEach(t),bqo=r(ePe," (MVP model)"),ePe.forEach(t),vqo=i(H),gb=n(H,"LI",{});var oPe=s(gb);Npe=n(oPe,"STRONG",{});var s8t=s(Npe);Fqo=r(s8t,"nezha"),s8t.forEach(t),Tqo=r(oPe," \u2014 "),GV=n(oPe,"A",{href:!0});var l8t=s(GV);Mqo=r(l8t,"NezhaForMaskedLM"),l8t.forEach(t),Eqo=r(oPe," (Nezha model)"),oPe.forEach(t),Cqo=i(H),hb=n(H,"LI",{});var rPe=s(hb);qpe=n(rPe,"STRONG",{});var i8t=s(qpe);wqo=r(i8t,"nystromformer"),i8t.forEach(t),Aqo=r(rPe," \u2014 "),OV=n(rPe,"A",{href:!0});var d8t=s(OV);Lqo=r(d8t,"NystromformerForMaskedLM"),d8t.forEach(t),yqo=r(rPe," (Nystr\xF6mformer model)"),rPe.forEach(t),xqo=i(H),pb=n(H,"LI",{});var tPe=s(pb);jpe=n(tPe,"STRONG",{});var c8t=s(jpe);$qo=r(c8t,"perceiver"),c8t.forEach(t),kqo=r(tPe," \u2014 "),VV=n(tPe,"A",{href:!0});var f8t=s(VV);Sqo=r(f8t,"PerceiverForMaskedLM"),f8t.forEach(t),Rqo=r(tPe," (Perceiver model)"),tPe.forEach(t),Pqo=i(H),_b=n(H,"LI",{});var aPe=s(_b);Dpe=n(aPe,"STRONG",{});var m8t=s(Dpe);Bqo=r(m8t,"qdqbert"),m8t.forEach(t),Iqo=r(aPe," \u2014 "),XV=n(aPe,"A",{href:!0});var g8t=s(XV);Nqo=r(g8t,"QDQBertForMaskedLM"),g8t.forEach(t),qqo=r(aPe," (QDQBert model)"),aPe.forEach(t),jqo=i(H),ub=n(H,"LI",{});var nPe=s(ub);Gpe=n(nPe,"STRONG",{});var h8t=s(Gpe);Dqo=r(h8t,"reformer"),h8t.forEach(t),Gqo=r(nPe," \u2014 "),zV=n(nPe,"A",{href:!0});var p8t=s(zV);Oqo=r(p8t,"ReformerForMaskedLM"),p8t.forEach(t),Vqo=r(nPe," (Reformer model)"),nPe.forEach(t),Xqo=i(H),bb=n(H,"LI",{});var sPe=s(bb);Ope=n(sPe,"STRONG",{});var _8t=s(Ope);zqo=r(_8t,"rembert"),_8t.forEach(t),Wqo=r(sPe," \u2014 "),WV=n(sPe,"A",{href:!0});var u8t=s(WV);Qqo=r(u8t,"RemBertForMaskedLM"),u8t.forEach(t),Hqo=r(sPe," (RemBERT model)"),sPe.forEach(t),Uqo=i(H),vb=n(H,"LI",{});var lPe=s(vb);Vpe=n(lPe,"STRONG",{});var b8t=s(Vpe);Jqo=r(b8t,"roberta"),b8t.forEach(t),Yqo=r(lPe," \u2014 "),QV=n(lPe,"A",{href:!0});var v8t=s(QV);Kqo=r(v8t,"RobertaForMaskedLM"),v8t.forEach(t),Zqo=r(lPe," (RoBERTa model)"),lPe.forEach(t),ejo=i(H),Fb=n(H,"LI",{});var iPe=s(Fb);Xpe=n(iPe,"STRONG",{});var F8t=s(Xpe);ojo=r(F8t,"roformer"),F8t.forEach(t),rjo=r(iPe," \u2014 "),HV=n(iPe,"A",{href:!0});var T8t=s(HV);tjo=r(T8t,"RoFormerForMaskedLM"),T8t.forEach(t),ajo=r(iPe," (RoFormer model)"),iPe.forEach(t),njo=i(H),Tb=n(H,"LI",{});var dPe=s(Tb);zpe=n(dPe,"STRONG",{});var M8t=s(zpe);sjo=r(M8t,"squeezebert"),M8t.forEach(t),ljo=r(dPe," \u2014 "),UV=n(dPe,"A",{href:!0});var E8t=s(UV);ijo=r(E8t,"SqueezeBertForMaskedLM"),E8t.forEach(t),djo=r(dPe," (SqueezeBERT model)"),dPe.forEach(t),cjo=i(H),Mb=n(H,"LI",{});var cPe=s(Mb);Wpe=n(cPe,"STRONG",{});var C8t=s(Wpe);fjo=r(C8t,"tapas"),C8t.forEach(t),mjo=r(cPe," \u2014 "),JV=n(cPe,"A",{href:!0});var w8t=s(JV);gjo=r(w8t,"TapasForMaskedLM"),w8t.forEach(t),hjo=r(cPe," (TAPAS model)"),cPe.forEach(t),pjo=i(H),Eb=n(H,"LI",{});var fPe=s(Eb);Qpe=n(fPe,"STRONG",{});var A8t=s(Qpe);_jo=r(A8t,"wav2vec2"),A8t.forEach(t),ujo=r(fPe," \u2014 "),Hpe=n(fPe,"CODE",{});var L8t=s(Hpe);bjo=r(L8t,"Wav2Vec2ForMaskedLM"),L8t.forEach(t),vjo=r(fPe," (Wav2Vec2 model)"),fPe.forEach(t),Fjo=i(H),Cb=n(H,"LI",{});var mPe=s(Cb);Upe=n(mPe,"STRONG",{});var y8t=s(Upe);Tjo=r(y8t,"xlm"),y8t.forEach(t),Mjo=r(mPe," \u2014 "),YV=n(mPe,"A",{href:!0});var x8t=s(YV);Ejo=r(x8t,"XLMWithLMHeadModel"),x8t.forEach(t),Cjo=r(mPe," (XLM model)"),mPe.forEach(t),wjo=i(H),wb=n(H,"LI",{});var gPe=s(wb);Jpe=n(gPe,"STRONG",{});var $8t=s(Jpe);Ajo=r($8t,"xlm-roberta"),$8t.forEach(t),Ljo=r(gPe," \u2014 "),KV=n(gPe,"A",{href:!0});var k8t=s(KV);yjo=r(k8t,"XLMRobertaForMaskedLM"),k8t.forEach(t),xjo=r(gPe," (XLM-RoBERTa model)"),gPe.forEach(t),$jo=i(H),Ab=n(H,"LI",{});var hPe=s(Ab);Ype=n(hPe,"STRONG",{});var S8t=s(Ype);kjo=r(S8t,"xlm-roberta-xl"),S8t.forEach(t),Sjo=r(hPe," \u2014 "),ZV=n(hPe,"A",{href:!0});var R8t=s(ZV);Rjo=r(R8t,"XLMRobertaXLForMaskedLM"),R8t.forEach(t),Pjo=r(hPe," (XLM-RoBERTa-XL model)"),hPe.forEach(t),Bjo=i(H),Lb=n(H,"LI",{});var pPe=s(Lb);Kpe=n(pPe,"STRONG",{});var P8t=s(Kpe);Ijo=r(P8t,"yoso"),P8t.forEach(t),Njo=r(pPe," \u2014 "),eX=n(pPe,"A",{href:!0});var B8t=s(eX);qjo=r(B8t,"YosoForMaskedLM"),B8t.forEach(t),jjo=r(pPe," (YOSO model)"),pPe.forEach(t),H.forEach(t),Djo=i(ca),yb=n(ca,"P",{});var _Pe=s(yb);Gjo=r(_Pe,"The model is set in evaluation mode by default using "),Zpe=n(_Pe,"CODE",{});var I8t=s(Zpe);Ojo=r(I8t,"model.eval()"),I8t.forEach(t),Vjo=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(_Pe,"CODE",{});var N8t=s(e_e);Xjo=r(N8t,"model.train()"),N8t.forEach(t),_Pe.forEach(t),zjo=i(ca),T(xb.$$.fragment,ca),ca.forEach(t),il.forEach(t),$ze=i(f),rd=n(f,"H2",{class:!0});var IQe=s(rd);$b=n(IQe,"A",{id:!0,class:!0,href:!0});var q8t=s($b);o_e=n(q8t,"SPAN",{});var j8t=s(o_e);T(gy.$$.fragment,j8t),j8t.forEach(t),q8t.forEach(t),Wjo=i(IQe),r_e=n(IQe,"SPAN",{});var D8t=s(r_e);Qjo=r(D8t,"AutoModelForSeq2SeqLM"),D8t.forEach(t),IQe.forEach(t),kze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(hy.$$.fragment,dl),Hjo=i(dl),td=n(dl,"P",{});var Ete=s(td);Ujo=r(Ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oX=n(Ete,"A",{href:!0});var G8t=s(oX);Jjo=r(G8t,"from_pretrained()"),G8t.forEach(t),Yjo=r(Ete," class method or the "),rX=n(Ete,"A",{href:!0});var O8t=s(rX);Kjo=r(O8t,"from_config()"),O8t.forEach(t),Zjo=r(Ete,` class
method.`),Ete.forEach(t),eDo=i(dl),py=n(dl,"P",{});var NQe=s(py);oDo=r(NQe,"This class cannot be instantiated directly using "),t_e=n(NQe,"CODE",{});var V8t=s(t_e);rDo=r(V8t,"__init__()"),V8t.forEach(t),tDo=r(NQe," (throws an error)."),NQe.forEach(t),aDo=i(dl),mt=n(dl,"DIV",{class:!0});var SA=s(mt);T(_y.$$.fragment,SA),nDo=i(SA),a_e=n(SA,"P",{});var X8t=s(a_e);sDo=r(X8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X8t.forEach(t),lDo=i(SA),ad=n(SA,"P",{});var Cte=s(ad);iDo=r(Cte,`Note:
Loading a model from its configuration file does `),n_e=n(Cte,"STRONG",{});var z8t=s(n_e);dDo=r(z8t,"not"),z8t.forEach(t),cDo=r(Cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(Cte,"A",{href:!0});var W8t=s(tX);fDo=r(W8t,"from_pretrained()"),W8t.forEach(t),mDo=r(Cte," to load the model weights."),Cte.forEach(t),gDo=i(SA),T(kb.$$.fragment,SA),SA.forEach(t),hDo=i(dl),oo=n(dl,"DIV",{class:!0});var fa=s(oo);T(uy.$$.fragment,fa),pDo=i(fa),s_e=n(fa,"P",{});var Q8t=s(s_e);_Do=r(Q8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Q8t.forEach(t),uDo=i(fa),Da=n(fa,"P",{});var RA=s(Da);bDo=r(RA,"The model class to instantiate is selected based on the "),l_e=n(RA,"CODE",{});var H8t=s(l_e);vDo=r(H8t,"model_type"),H8t.forEach(t),FDo=r(RA,` property of the config object (either
passed as an argument or loaded from `),i_e=n(RA,"CODE",{});var U8t=s(i_e);TDo=r(U8t,"pretrained_model_name_or_path"),U8t.forEach(t),MDo=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(RA,"CODE",{});var J8t=s(d_e);EDo=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),CDo=r(RA,":"),RA.forEach(t),wDo=i(fa),me=n(fa,"UL",{});var ue=s(me);Sb=n(ue,"LI",{});var uPe=s(Sb);c_e=n(uPe,"STRONG",{});var Y8t=s(c_e);ADo=r(Y8t,"bart"),Y8t.forEach(t),LDo=r(uPe," \u2014 "),aX=n(uPe,"A",{href:!0});var K8t=s(aX);yDo=r(K8t,"BartForConditionalGeneration"),K8t.forEach(t),xDo=r(uPe," (BART model)"),uPe.forEach(t),$Do=i(ue),Rb=n(ue,"LI",{});var bPe=s(Rb);f_e=n(bPe,"STRONG",{});var Z8t=s(f_e);kDo=r(Z8t,"bigbird_pegasus"),Z8t.forEach(t),SDo=r(bPe," \u2014 "),nX=n(bPe,"A",{href:!0});var eMt=s(nX);RDo=r(eMt,"BigBirdPegasusForConditionalGeneration"),eMt.forEach(t),PDo=r(bPe," (BigBird-Pegasus model)"),bPe.forEach(t),BDo=i(ue),Pb=n(ue,"LI",{});var vPe=s(Pb);m_e=n(vPe,"STRONG",{});var oMt=s(m_e);IDo=r(oMt,"blenderbot"),oMt.forEach(t),NDo=r(vPe," \u2014 "),sX=n(vPe,"A",{href:!0});var rMt=s(sX);qDo=r(rMt,"BlenderbotForConditionalGeneration"),rMt.forEach(t),jDo=r(vPe," (Blenderbot model)"),vPe.forEach(t),DDo=i(ue),Bb=n(ue,"LI",{});var FPe=s(Bb);g_e=n(FPe,"STRONG",{});var tMt=s(g_e);GDo=r(tMt,"blenderbot-small"),tMt.forEach(t),ODo=r(FPe," \u2014 "),lX=n(FPe,"A",{href:!0});var aMt=s(lX);VDo=r(aMt,"BlenderbotSmallForConditionalGeneration"),aMt.forEach(t),XDo=r(FPe," (BlenderbotSmall model)"),FPe.forEach(t),zDo=i(ue),Ib=n(ue,"LI",{});var TPe=s(Ib);h_e=n(TPe,"STRONG",{});var nMt=s(h_e);WDo=r(nMt,"encoder-decoder"),nMt.forEach(t),QDo=r(TPe," \u2014 "),iX=n(TPe,"A",{href:!0});var sMt=s(iX);HDo=r(sMt,"EncoderDecoderModel"),sMt.forEach(t),UDo=r(TPe," (Encoder decoder model)"),TPe.forEach(t),JDo=i(ue),Nb=n(ue,"LI",{});var MPe=s(Nb);p_e=n(MPe,"STRONG",{});var lMt=s(p_e);YDo=r(lMt,"fsmt"),lMt.forEach(t),KDo=r(MPe," \u2014 "),dX=n(MPe,"A",{href:!0});var iMt=s(dX);ZDo=r(iMt,"FSMTForConditionalGeneration"),iMt.forEach(t),eGo=r(MPe," (FairSeq Machine-Translation model)"),MPe.forEach(t),oGo=i(ue),qb=n(ue,"LI",{});var EPe=s(qb);__e=n(EPe,"STRONG",{});var dMt=s(__e);rGo=r(dMt,"led"),dMt.forEach(t),tGo=r(EPe," \u2014 "),cX=n(EPe,"A",{href:!0});var cMt=s(cX);aGo=r(cMt,"LEDForConditionalGeneration"),cMt.forEach(t),nGo=r(EPe," (LED model)"),EPe.forEach(t),sGo=i(ue),jb=n(ue,"LI",{});var CPe=s(jb);u_e=n(CPe,"STRONG",{});var fMt=s(u_e);lGo=r(fMt,"longt5"),fMt.forEach(t),iGo=r(CPe," \u2014 "),fX=n(CPe,"A",{href:!0});var mMt=s(fX);dGo=r(mMt,"LongT5ForConditionalGeneration"),mMt.forEach(t),cGo=r(CPe," (LongT5 model)"),CPe.forEach(t),fGo=i(ue),Db=n(ue,"LI",{});var wPe=s(Db);b_e=n(wPe,"STRONG",{});var gMt=s(b_e);mGo=r(gMt,"m2m_100"),gMt.forEach(t),gGo=r(wPe," \u2014 "),mX=n(wPe,"A",{href:!0});var hMt=s(mX);hGo=r(hMt,"M2M100ForConditionalGeneration"),hMt.forEach(t),pGo=r(wPe," (M2M100 model)"),wPe.forEach(t),_Go=i(ue),Gb=n(ue,"LI",{});var APe=s(Gb);v_e=n(APe,"STRONG",{});var pMt=s(v_e);uGo=r(pMt,"marian"),pMt.forEach(t),bGo=r(APe," \u2014 "),gX=n(APe,"A",{href:!0});var _Mt=s(gX);vGo=r(_Mt,"MarianMTModel"),_Mt.forEach(t),FGo=r(APe," (Marian model)"),APe.forEach(t),TGo=i(ue),Ob=n(ue,"LI",{});var LPe=s(Ob);F_e=n(LPe,"STRONG",{});var uMt=s(F_e);MGo=r(uMt,"mbart"),uMt.forEach(t),EGo=r(LPe," \u2014 "),hX=n(LPe,"A",{href:!0});var bMt=s(hX);CGo=r(bMt,"MBartForConditionalGeneration"),bMt.forEach(t),wGo=r(LPe," (mBART model)"),LPe.forEach(t),AGo=i(ue),Vb=n(ue,"LI",{});var yPe=s(Vb);T_e=n(yPe,"STRONG",{});var vMt=s(T_e);LGo=r(vMt,"mt5"),vMt.forEach(t),yGo=r(yPe," \u2014 "),pX=n(yPe,"A",{href:!0});var FMt=s(pX);xGo=r(FMt,"MT5ForConditionalGeneration"),FMt.forEach(t),$Go=r(yPe," (MT5 model)"),yPe.forEach(t),kGo=i(ue),Xb=n(ue,"LI",{});var xPe=s(Xb);M_e=n(xPe,"STRONG",{});var TMt=s(M_e);SGo=r(TMt,"mvp"),TMt.forEach(t),RGo=r(xPe," \u2014 "),_X=n(xPe,"A",{href:!0});var MMt=s(_X);PGo=r(MMt,"MvpForConditionalGeneration"),MMt.forEach(t),BGo=r(xPe," (MVP model)"),xPe.forEach(t),IGo=i(ue),zb=n(ue,"LI",{});var $Pe=s(zb);E_e=n($Pe,"STRONG",{});var EMt=s(E_e);NGo=r(EMt,"nllb"),EMt.forEach(t),qGo=r($Pe," \u2014 "),uX=n($Pe,"A",{href:!0});var CMt=s(uX);jGo=r(CMt,"M2M100ForConditionalGeneration"),CMt.forEach(t),DGo=r($Pe," (NLLB model)"),$Pe.forEach(t),GGo=i(ue),Wb=n(ue,"LI",{});var kPe=s(Wb);C_e=n(kPe,"STRONG",{});var wMt=s(C_e);OGo=r(wMt,"pegasus"),wMt.forEach(t),VGo=r(kPe," \u2014 "),bX=n(kPe,"A",{href:!0});var AMt=s(bX);XGo=r(AMt,"PegasusForConditionalGeneration"),AMt.forEach(t),zGo=r(kPe," (Pegasus model)"),kPe.forEach(t),WGo=i(ue),Qb=n(ue,"LI",{});var SPe=s(Qb);w_e=n(SPe,"STRONG",{});var LMt=s(w_e);QGo=r(LMt,"plbart"),LMt.forEach(t),HGo=r(SPe," \u2014 "),vX=n(SPe,"A",{href:!0});var yMt=s(vX);UGo=r(yMt,"PLBartForConditionalGeneration"),yMt.forEach(t),JGo=r(SPe," (PLBart model)"),SPe.forEach(t),YGo=i(ue),Hb=n(ue,"LI",{});var RPe=s(Hb);A_e=n(RPe,"STRONG",{});var xMt=s(A_e);KGo=r(xMt,"prophetnet"),xMt.forEach(t),ZGo=r(RPe," \u2014 "),FX=n(RPe,"A",{href:!0});var $Mt=s(FX);eOo=r($Mt,"ProphetNetForConditionalGeneration"),$Mt.forEach(t),oOo=r(RPe," (ProphetNet model)"),RPe.forEach(t),rOo=i(ue),Ub=n(ue,"LI",{});var PPe=s(Ub);L_e=n(PPe,"STRONG",{});var kMt=s(L_e);tOo=r(kMt,"t5"),kMt.forEach(t),aOo=r(PPe," \u2014 "),TX=n(PPe,"A",{href:!0});var SMt=s(TX);nOo=r(SMt,"T5ForConditionalGeneration"),SMt.forEach(t),sOo=r(PPe," (T5 model)"),PPe.forEach(t),lOo=i(ue),Jb=n(ue,"LI",{});var BPe=s(Jb);y_e=n(BPe,"STRONG",{});var RMt=s(y_e);iOo=r(RMt,"xlm-prophetnet"),RMt.forEach(t),dOo=r(BPe," \u2014 "),MX=n(BPe,"A",{href:!0});var PMt=s(MX);cOo=r(PMt,"XLMProphetNetForConditionalGeneration"),PMt.forEach(t),fOo=r(BPe," (XLM-ProphetNet model)"),BPe.forEach(t),ue.forEach(t),mOo=i(fa),Yb=n(fa,"P",{});var IPe=s(Yb);gOo=r(IPe,"The model is set in evaluation mode by default using "),x_e=n(IPe,"CODE",{});var BMt=s(x_e);hOo=r(BMt,"model.eval()"),BMt.forEach(t),pOo=r(IPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(IPe,"CODE",{});var IMt=s($_e);_Oo=r(IMt,"model.train()"),IMt.forEach(t),IPe.forEach(t),uOo=i(fa),T(Kb.$$.fragment,fa),fa.forEach(t),dl.forEach(t),Sze=i(f),nd=n(f,"H2",{class:!0});var qQe=s(nd);Zb=n(qQe,"A",{id:!0,class:!0,href:!0});var NMt=s(Zb);k_e=n(NMt,"SPAN",{});var qMt=s(k_e);T(by.$$.fragment,qMt),qMt.forEach(t),NMt.forEach(t),bOo=i(qQe),S_e=n(qQe,"SPAN",{});var jMt=s(S_e);vOo=r(jMt,"AutoModelForSequenceClassification"),jMt.forEach(t),qQe.forEach(t),Rze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(vy.$$.fragment,cl),FOo=i(cl),sd=n(cl,"P",{});var wte=s(sd);TOo=r(wte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EX=n(wte,"A",{href:!0});var DMt=s(EX);MOo=r(DMt,"from_pretrained()"),DMt.forEach(t),EOo=r(wte," class method or the "),CX=n(wte,"A",{href:!0});var GMt=s(CX);COo=r(GMt,"from_config()"),GMt.forEach(t),wOo=r(wte,` class
method.`),wte.forEach(t),AOo=i(cl),Fy=n(cl,"P",{});var jQe=s(Fy);LOo=r(jQe,"This class cannot be instantiated directly using "),R_e=n(jQe,"CODE",{});var OMt=s(R_e);yOo=r(OMt,"__init__()"),OMt.forEach(t),xOo=r(jQe," (throws an error)."),jQe.forEach(t),$Oo=i(cl),gt=n(cl,"DIV",{class:!0});var PA=s(gt);T(Ty.$$.fragment,PA),kOo=i(PA),P_e=n(PA,"P",{});var VMt=s(P_e);SOo=r(VMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VMt.forEach(t),ROo=i(PA),ld=n(PA,"P",{});var Ate=s(ld);POo=r(Ate,`Note:
Loading a model from its configuration file does `),B_e=n(Ate,"STRONG",{});var XMt=s(B_e);BOo=r(XMt,"not"),XMt.forEach(t),IOo=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(Ate,"A",{href:!0});var zMt=s(wX);NOo=r(zMt,"from_pretrained()"),zMt.forEach(t),qOo=r(Ate," to load the model weights."),Ate.forEach(t),jOo=i(PA),T(ev.$$.fragment,PA),PA.forEach(t),DOo=i(cl),ro=n(cl,"DIV",{class:!0});var ma=s(ro);T(My.$$.fragment,ma),GOo=i(ma),I_e=n(ma,"P",{});var WMt=s(I_e);OOo=r(WMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WMt.forEach(t),VOo=i(ma),Ga=n(ma,"P",{});var BA=s(Ga);XOo=r(BA,"The model class to instantiate is selected based on the "),N_e=n(BA,"CODE",{});var QMt=s(N_e);zOo=r(QMt,"model_type"),QMt.forEach(t),WOo=r(BA,` property of the config object (either
passed as an argument or loaded from `),q_e=n(BA,"CODE",{});var HMt=s(q_e);QOo=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),HOo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(BA,"CODE",{});var UMt=s(j_e);UOo=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),JOo=r(BA,":"),BA.forEach(t),YOo=i(ma),B=n(ma,"UL",{});var j=s(B);ov=n(j,"LI",{});var NPe=s(ov);D_e=n(NPe,"STRONG",{});var JMt=s(D_e);KOo=r(JMt,"albert"),JMt.forEach(t),ZOo=r(NPe," \u2014 "),AX=n(NPe,"A",{href:!0});var YMt=s(AX);eVo=r(YMt,"AlbertForSequenceClassification"),YMt.forEach(t),oVo=r(NPe," (ALBERT model)"),NPe.forEach(t),rVo=i(j),rv=n(j,"LI",{});var qPe=s(rv);G_e=n(qPe,"STRONG",{});var KMt=s(G_e);tVo=r(KMt,"bart"),KMt.forEach(t),aVo=r(qPe," \u2014 "),LX=n(qPe,"A",{href:!0});var ZMt=s(LX);nVo=r(ZMt,"BartForSequenceClassification"),ZMt.forEach(t),sVo=r(qPe," (BART model)"),qPe.forEach(t),lVo=i(j),tv=n(j,"LI",{});var jPe=s(tv);O_e=n(jPe,"STRONG",{});var e4t=s(O_e);iVo=r(e4t,"bert"),e4t.forEach(t),dVo=r(jPe," \u2014 "),yX=n(jPe,"A",{href:!0});var o4t=s(yX);cVo=r(o4t,"BertForSequenceClassification"),o4t.forEach(t),fVo=r(jPe," (BERT model)"),jPe.forEach(t),mVo=i(j),av=n(j,"LI",{});var DPe=s(av);V_e=n(DPe,"STRONG",{});var r4t=s(V_e);gVo=r(r4t,"big_bird"),r4t.forEach(t),hVo=r(DPe," \u2014 "),xX=n(DPe,"A",{href:!0});var t4t=s(xX);pVo=r(t4t,"BigBirdForSequenceClassification"),t4t.forEach(t),_Vo=r(DPe," (BigBird model)"),DPe.forEach(t),uVo=i(j),nv=n(j,"LI",{});var GPe=s(nv);X_e=n(GPe,"STRONG",{});var a4t=s(X_e);bVo=r(a4t,"bigbird_pegasus"),a4t.forEach(t),vVo=r(GPe," \u2014 "),$X=n(GPe,"A",{href:!0});var n4t=s($X);FVo=r(n4t,"BigBirdPegasusForSequenceClassification"),n4t.forEach(t),TVo=r(GPe," (BigBird-Pegasus model)"),GPe.forEach(t),MVo=i(j),sv=n(j,"LI",{});var OPe=s(sv);z_e=n(OPe,"STRONG",{});var s4t=s(z_e);EVo=r(s4t,"bloom"),s4t.forEach(t),CVo=r(OPe," \u2014 "),kX=n(OPe,"A",{href:!0});var l4t=s(kX);wVo=r(l4t,"BloomForSequenceClassification"),l4t.forEach(t),AVo=r(OPe," (BLOOM model)"),OPe.forEach(t),LVo=i(j),lv=n(j,"LI",{});var VPe=s(lv);W_e=n(VPe,"STRONG",{});var i4t=s(W_e);yVo=r(i4t,"camembert"),i4t.forEach(t),xVo=r(VPe," \u2014 "),SX=n(VPe,"A",{href:!0});var d4t=s(SX);$Vo=r(d4t,"CamembertForSequenceClassification"),d4t.forEach(t),kVo=r(VPe," (CamemBERT model)"),VPe.forEach(t),SVo=i(j),iv=n(j,"LI",{});var XPe=s(iv);Q_e=n(XPe,"STRONG",{});var c4t=s(Q_e);RVo=r(c4t,"canine"),c4t.forEach(t),PVo=r(XPe," \u2014 "),RX=n(XPe,"A",{href:!0});var f4t=s(RX);BVo=r(f4t,"CanineForSequenceClassification"),f4t.forEach(t),IVo=r(XPe," (CANINE model)"),XPe.forEach(t),NVo=i(j),dv=n(j,"LI",{});var zPe=s(dv);H_e=n(zPe,"STRONG",{});var m4t=s(H_e);qVo=r(m4t,"convbert"),m4t.forEach(t),jVo=r(zPe," \u2014 "),PX=n(zPe,"A",{href:!0});var g4t=s(PX);DVo=r(g4t,"ConvBertForSequenceClassification"),g4t.forEach(t),GVo=r(zPe," (ConvBERT model)"),zPe.forEach(t),OVo=i(j),cv=n(j,"LI",{});var WPe=s(cv);U_e=n(WPe,"STRONG",{});var h4t=s(U_e);VVo=r(h4t,"ctrl"),h4t.forEach(t),XVo=r(WPe," \u2014 "),BX=n(WPe,"A",{href:!0});var p4t=s(BX);zVo=r(p4t,"CTRLForSequenceClassification"),p4t.forEach(t),WVo=r(WPe," (CTRL model)"),WPe.forEach(t),QVo=i(j),fv=n(j,"LI",{});var QPe=s(fv);J_e=n(QPe,"STRONG",{});var _4t=s(J_e);HVo=r(_4t,"data2vec-text"),_4t.forEach(t),UVo=r(QPe," \u2014 "),IX=n(QPe,"A",{href:!0});var u4t=s(IX);JVo=r(u4t,"Data2VecTextForSequenceClassification"),u4t.forEach(t),YVo=r(QPe," (Data2VecText model)"),QPe.forEach(t),KVo=i(j),mv=n(j,"LI",{});var HPe=s(mv);Y_e=n(HPe,"STRONG",{});var b4t=s(Y_e);ZVo=r(b4t,"deberta"),b4t.forEach(t),eXo=r(HPe," \u2014 "),NX=n(HPe,"A",{href:!0});var v4t=s(NX);oXo=r(v4t,"DebertaForSequenceClassification"),v4t.forEach(t),rXo=r(HPe," (DeBERTa model)"),HPe.forEach(t),tXo=i(j),gv=n(j,"LI",{});var UPe=s(gv);K_e=n(UPe,"STRONG",{});var F4t=s(K_e);aXo=r(F4t,"deberta-v2"),F4t.forEach(t),nXo=r(UPe," \u2014 "),qX=n(UPe,"A",{href:!0});var T4t=s(qX);sXo=r(T4t,"DebertaV2ForSequenceClassification"),T4t.forEach(t),lXo=r(UPe," (DeBERTa-v2 model)"),UPe.forEach(t),iXo=i(j),hv=n(j,"LI",{});var JPe=s(hv);Z_e=n(JPe,"STRONG",{});var M4t=s(Z_e);dXo=r(M4t,"distilbert"),M4t.forEach(t),cXo=r(JPe," \u2014 "),jX=n(JPe,"A",{href:!0});var E4t=s(jX);fXo=r(E4t,"DistilBertForSequenceClassification"),E4t.forEach(t),mXo=r(JPe," (DistilBERT model)"),JPe.forEach(t),gXo=i(j),pv=n(j,"LI",{});var YPe=s(pv);eue=n(YPe,"STRONG",{});var C4t=s(eue);hXo=r(C4t,"electra"),C4t.forEach(t),pXo=r(YPe," \u2014 "),DX=n(YPe,"A",{href:!0});var w4t=s(DX);_Xo=r(w4t,"ElectraForSequenceClassification"),w4t.forEach(t),uXo=r(YPe," (ELECTRA model)"),YPe.forEach(t),bXo=i(j),_v=n(j,"LI",{});var KPe=s(_v);oue=n(KPe,"STRONG",{});var A4t=s(oue);vXo=r(A4t,"flaubert"),A4t.forEach(t),FXo=r(KPe," \u2014 "),GX=n(KPe,"A",{href:!0});var L4t=s(GX);TXo=r(L4t,"FlaubertForSequenceClassification"),L4t.forEach(t),MXo=r(KPe," (FlauBERT model)"),KPe.forEach(t),EXo=i(j),uv=n(j,"LI",{});var ZPe=s(uv);rue=n(ZPe,"STRONG",{});var y4t=s(rue);CXo=r(y4t,"fnet"),y4t.forEach(t),wXo=r(ZPe," \u2014 "),OX=n(ZPe,"A",{href:!0});var x4t=s(OX);AXo=r(x4t,"FNetForSequenceClassification"),x4t.forEach(t),LXo=r(ZPe," (FNet model)"),ZPe.forEach(t),yXo=i(j),bv=n(j,"LI",{});var eBe=s(bv);tue=n(eBe,"STRONG",{});var $4t=s(tue);xXo=r($4t,"funnel"),$4t.forEach(t),$Xo=r(eBe," \u2014 "),VX=n(eBe,"A",{href:!0});var k4t=s(VX);kXo=r(k4t,"FunnelForSequenceClassification"),k4t.forEach(t),SXo=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),RXo=i(j),vv=n(j,"LI",{});var oBe=s(vv);aue=n(oBe,"STRONG",{});var S4t=s(aue);PXo=r(S4t,"gpt2"),S4t.forEach(t),BXo=r(oBe," \u2014 "),XX=n(oBe,"A",{href:!0});var R4t=s(XX);IXo=r(R4t,"GPT2ForSequenceClassification"),R4t.forEach(t),NXo=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),qXo=i(j),Fv=n(j,"LI",{});var rBe=s(Fv);nue=n(rBe,"STRONG",{});var P4t=s(nue);jXo=r(P4t,"gpt_neo"),P4t.forEach(t),DXo=r(rBe," \u2014 "),zX=n(rBe,"A",{href:!0});var B4t=s(zX);GXo=r(B4t,"GPTNeoForSequenceClassification"),B4t.forEach(t),OXo=r(rBe," (GPT Neo model)"),rBe.forEach(t),VXo=i(j),Tv=n(j,"LI",{});var tBe=s(Tv);sue=n(tBe,"STRONG",{});var I4t=s(sue);XXo=r(I4t,"gptj"),I4t.forEach(t),zXo=r(tBe," \u2014 "),WX=n(tBe,"A",{href:!0});var N4t=s(WX);WXo=r(N4t,"GPTJForSequenceClassification"),N4t.forEach(t),QXo=r(tBe," (GPT-J model)"),tBe.forEach(t),HXo=i(j),Mv=n(j,"LI",{});var aBe=s(Mv);lue=n(aBe,"STRONG",{});var q4t=s(lue);UXo=r(q4t,"ibert"),q4t.forEach(t),JXo=r(aBe," \u2014 "),QX=n(aBe,"A",{href:!0});var j4t=s(QX);YXo=r(j4t,"IBertForSequenceClassification"),j4t.forEach(t),KXo=r(aBe," (I-BERT model)"),aBe.forEach(t),ZXo=i(j),Ev=n(j,"LI",{});var nBe=s(Ev);iue=n(nBe,"STRONG",{});var D4t=s(iue);ezo=r(D4t,"layoutlm"),D4t.forEach(t),ozo=r(nBe," \u2014 "),HX=n(nBe,"A",{href:!0});var G4t=s(HX);rzo=r(G4t,"LayoutLMForSequenceClassification"),G4t.forEach(t),tzo=r(nBe," (LayoutLM model)"),nBe.forEach(t),azo=i(j),Cv=n(j,"LI",{});var sBe=s(Cv);due=n(sBe,"STRONG",{});var O4t=s(due);nzo=r(O4t,"layoutlmv2"),O4t.forEach(t),szo=r(sBe," \u2014 "),UX=n(sBe,"A",{href:!0});var V4t=s(UX);lzo=r(V4t,"LayoutLMv2ForSequenceClassification"),V4t.forEach(t),izo=r(sBe," (LayoutLMv2 model)"),sBe.forEach(t),dzo=i(j),wv=n(j,"LI",{});var lBe=s(wv);cue=n(lBe,"STRONG",{});var X4t=s(cue);czo=r(X4t,"layoutlmv3"),X4t.forEach(t),fzo=r(lBe," \u2014 "),JX=n(lBe,"A",{href:!0});var z4t=s(JX);mzo=r(z4t,"LayoutLMv3ForSequenceClassification"),z4t.forEach(t),gzo=r(lBe," (LayoutLMv3 model)"),lBe.forEach(t),hzo=i(j),Av=n(j,"LI",{});var iBe=s(Av);fue=n(iBe,"STRONG",{});var W4t=s(fue);pzo=r(W4t,"led"),W4t.forEach(t),_zo=r(iBe," \u2014 "),YX=n(iBe,"A",{href:!0});var Q4t=s(YX);uzo=r(Q4t,"LEDForSequenceClassification"),Q4t.forEach(t),bzo=r(iBe," (LED model)"),iBe.forEach(t),vzo=i(j),Lv=n(j,"LI",{});var dBe=s(Lv);mue=n(dBe,"STRONG",{});var H4t=s(mue);Fzo=r(H4t,"longformer"),H4t.forEach(t),Tzo=r(dBe," \u2014 "),KX=n(dBe,"A",{href:!0});var U4t=s(KX);Mzo=r(U4t,"LongformerForSequenceClassification"),U4t.forEach(t),Ezo=r(dBe," (Longformer model)"),dBe.forEach(t),Czo=i(j),yv=n(j,"LI",{});var cBe=s(yv);gue=n(cBe,"STRONG",{});var J4t=s(gue);wzo=r(J4t,"mbart"),J4t.forEach(t),Azo=r(cBe," \u2014 "),ZX=n(cBe,"A",{href:!0});var Y4t=s(ZX);Lzo=r(Y4t,"MBartForSequenceClassification"),Y4t.forEach(t),yzo=r(cBe," (mBART model)"),cBe.forEach(t),xzo=i(j),xv=n(j,"LI",{});var fBe=s(xv);hue=n(fBe,"STRONG",{});var K4t=s(hue);$zo=r(K4t,"megatron-bert"),K4t.forEach(t),kzo=r(fBe," \u2014 "),ez=n(fBe,"A",{href:!0});var Z4t=s(ez);Szo=r(Z4t,"MegatronBertForSequenceClassification"),Z4t.forEach(t),Rzo=r(fBe," (Megatron-BERT model)"),fBe.forEach(t),Pzo=i(j),$v=n(j,"LI",{});var mBe=s($v);pue=n(mBe,"STRONG",{});var eEt=s(pue);Bzo=r(eEt,"mobilebert"),eEt.forEach(t),Izo=r(mBe," \u2014 "),oz=n(mBe,"A",{href:!0});var oEt=s(oz);Nzo=r(oEt,"MobileBertForSequenceClassification"),oEt.forEach(t),qzo=r(mBe," (MobileBERT model)"),mBe.forEach(t),jzo=i(j),kv=n(j,"LI",{});var gBe=s(kv);_ue=n(gBe,"STRONG",{});var rEt=s(_ue);Dzo=r(rEt,"mpnet"),rEt.forEach(t),Gzo=r(gBe," \u2014 "),rz=n(gBe,"A",{href:!0});var tEt=s(rz);Ozo=r(tEt,"MPNetForSequenceClassification"),tEt.forEach(t),Vzo=r(gBe," (MPNet model)"),gBe.forEach(t),Xzo=i(j),Sv=n(j,"LI",{});var hBe=s(Sv);uue=n(hBe,"STRONG",{});var aEt=s(uue);zzo=r(aEt,"mvp"),aEt.forEach(t),Wzo=r(hBe," \u2014 "),tz=n(hBe,"A",{href:!0});var nEt=s(tz);Qzo=r(nEt,"MvpForSequenceClassification"),nEt.forEach(t),Hzo=r(hBe," (MVP model)"),hBe.forEach(t),Uzo=i(j),Rv=n(j,"LI",{});var pBe=s(Rv);bue=n(pBe,"STRONG",{});var sEt=s(bue);Jzo=r(sEt,"nezha"),sEt.forEach(t),Yzo=r(pBe," \u2014 "),az=n(pBe,"A",{href:!0});var lEt=s(az);Kzo=r(lEt,"NezhaForSequenceClassification"),lEt.forEach(t),Zzo=r(pBe," (Nezha model)"),pBe.forEach(t),eWo=i(j),Pv=n(j,"LI",{});var _Be=s(Pv);vue=n(_Be,"STRONG",{});var iEt=s(vue);oWo=r(iEt,"nystromformer"),iEt.forEach(t),rWo=r(_Be," \u2014 "),nz=n(_Be,"A",{href:!0});var dEt=s(nz);tWo=r(dEt,"NystromformerForSequenceClassification"),dEt.forEach(t),aWo=r(_Be," (Nystr\xF6mformer model)"),_Be.forEach(t),nWo=i(j),Bv=n(j,"LI",{});var uBe=s(Bv);Fue=n(uBe,"STRONG",{});var cEt=s(Fue);sWo=r(cEt,"openai-gpt"),cEt.forEach(t),lWo=r(uBe," \u2014 "),sz=n(uBe,"A",{href:!0});var fEt=s(sz);iWo=r(fEt,"OpenAIGPTForSequenceClassification"),fEt.forEach(t),dWo=r(uBe," (OpenAI GPT model)"),uBe.forEach(t),cWo=i(j),Iv=n(j,"LI",{});var bBe=s(Iv);Tue=n(bBe,"STRONG",{});var mEt=s(Tue);fWo=r(mEt,"opt"),mEt.forEach(t),mWo=r(bBe," \u2014 "),lz=n(bBe,"A",{href:!0});var gEt=s(lz);gWo=r(gEt,"OPTForSequenceClassification"),gEt.forEach(t),hWo=r(bBe," (OPT model)"),bBe.forEach(t),pWo=i(j),Nv=n(j,"LI",{});var vBe=s(Nv);Mue=n(vBe,"STRONG",{});var hEt=s(Mue);_Wo=r(hEt,"perceiver"),hEt.forEach(t),uWo=r(vBe," \u2014 "),iz=n(vBe,"A",{href:!0});var pEt=s(iz);bWo=r(pEt,"PerceiverForSequenceClassification"),pEt.forEach(t),vWo=r(vBe," (Perceiver model)"),vBe.forEach(t),FWo=i(j),qv=n(j,"LI",{});var FBe=s(qv);Eue=n(FBe,"STRONG",{});var _Et=s(Eue);TWo=r(_Et,"plbart"),_Et.forEach(t),MWo=r(FBe," \u2014 "),dz=n(FBe,"A",{href:!0});var uEt=s(dz);EWo=r(uEt,"PLBartForSequenceClassification"),uEt.forEach(t),CWo=r(FBe," (PLBart model)"),FBe.forEach(t),wWo=i(j),jv=n(j,"LI",{});var TBe=s(jv);Cue=n(TBe,"STRONG",{});var bEt=s(Cue);AWo=r(bEt,"qdqbert"),bEt.forEach(t),LWo=r(TBe," \u2014 "),cz=n(TBe,"A",{href:!0});var vEt=s(cz);yWo=r(vEt,"QDQBertForSequenceClassification"),vEt.forEach(t),xWo=r(TBe," (QDQBert model)"),TBe.forEach(t),$Wo=i(j),Dv=n(j,"LI",{});var MBe=s(Dv);wue=n(MBe,"STRONG",{});var FEt=s(wue);kWo=r(FEt,"reformer"),FEt.forEach(t),SWo=r(MBe," \u2014 "),fz=n(MBe,"A",{href:!0});var TEt=s(fz);RWo=r(TEt,"ReformerForSequenceClassification"),TEt.forEach(t),PWo=r(MBe," (Reformer model)"),MBe.forEach(t),BWo=i(j),Gv=n(j,"LI",{});var EBe=s(Gv);Aue=n(EBe,"STRONG",{});var MEt=s(Aue);IWo=r(MEt,"rembert"),MEt.forEach(t),NWo=r(EBe," \u2014 "),mz=n(EBe,"A",{href:!0});var EEt=s(mz);qWo=r(EEt,"RemBertForSequenceClassification"),EEt.forEach(t),jWo=r(EBe," (RemBERT model)"),EBe.forEach(t),DWo=i(j),Ov=n(j,"LI",{});var CBe=s(Ov);Lue=n(CBe,"STRONG",{});var CEt=s(Lue);GWo=r(CEt,"roberta"),CEt.forEach(t),OWo=r(CBe," \u2014 "),gz=n(CBe,"A",{href:!0});var wEt=s(gz);VWo=r(wEt,"RobertaForSequenceClassification"),wEt.forEach(t),XWo=r(CBe," (RoBERTa model)"),CBe.forEach(t),zWo=i(j),Vv=n(j,"LI",{});var wBe=s(Vv);yue=n(wBe,"STRONG",{});var AEt=s(yue);WWo=r(AEt,"roformer"),AEt.forEach(t),QWo=r(wBe," \u2014 "),hz=n(wBe,"A",{href:!0});var LEt=s(hz);HWo=r(LEt,"RoFormerForSequenceClassification"),LEt.forEach(t),UWo=r(wBe," (RoFormer model)"),wBe.forEach(t),JWo=i(j),Xv=n(j,"LI",{});var ABe=s(Xv);xue=n(ABe,"STRONG",{});var yEt=s(xue);YWo=r(yEt,"squeezebert"),yEt.forEach(t),KWo=r(ABe," \u2014 "),pz=n(ABe,"A",{href:!0});var xEt=s(pz);ZWo=r(xEt,"SqueezeBertForSequenceClassification"),xEt.forEach(t),eQo=r(ABe," (SqueezeBERT model)"),ABe.forEach(t),oQo=i(j),zv=n(j,"LI",{});var LBe=s(zv);$ue=n(LBe,"STRONG",{});var $Et=s($ue);rQo=r($Et,"tapas"),$Et.forEach(t),tQo=r(LBe," \u2014 "),_z=n(LBe,"A",{href:!0});var kEt=s(_z);aQo=r(kEt,"TapasForSequenceClassification"),kEt.forEach(t),nQo=r(LBe," (TAPAS model)"),LBe.forEach(t),sQo=i(j),Wv=n(j,"LI",{});var yBe=s(Wv);kue=n(yBe,"STRONG",{});var SEt=s(kue);lQo=r(SEt,"transfo-xl"),SEt.forEach(t),iQo=r(yBe," \u2014 "),uz=n(yBe,"A",{href:!0});var REt=s(uz);dQo=r(REt,"TransfoXLForSequenceClassification"),REt.forEach(t),cQo=r(yBe," (Transformer-XL model)"),yBe.forEach(t),fQo=i(j),Qv=n(j,"LI",{});var xBe=s(Qv);Sue=n(xBe,"STRONG",{});var PEt=s(Sue);mQo=r(PEt,"xlm"),PEt.forEach(t),gQo=r(xBe," \u2014 "),bz=n(xBe,"A",{href:!0});var BEt=s(bz);hQo=r(BEt,"XLMForSequenceClassification"),BEt.forEach(t),pQo=r(xBe," (XLM model)"),xBe.forEach(t),_Qo=i(j),Hv=n(j,"LI",{});var $Be=s(Hv);Rue=n($Be,"STRONG",{});var IEt=s(Rue);uQo=r(IEt,"xlm-roberta"),IEt.forEach(t),bQo=r($Be," \u2014 "),vz=n($Be,"A",{href:!0});var NEt=s(vz);vQo=r(NEt,"XLMRobertaForSequenceClassification"),NEt.forEach(t),FQo=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),TQo=i(j),Uv=n(j,"LI",{});var kBe=s(Uv);Pue=n(kBe,"STRONG",{});var qEt=s(Pue);MQo=r(qEt,"xlm-roberta-xl"),qEt.forEach(t),EQo=r(kBe," \u2014 "),Fz=n(kBe,"A",{href:!0});var jEt=s(Fz);CQo=r(jEt,"XLMRobertaXLForSequenceClassification"),jEt.forEach(t),wQo=r(kBe," (XLM-RoBERTa-XL model)"),kBe.forEach(t),AQo=i(j),Jv=n(j,"LI",{});var SBe=s(Jv);Bue=n(SBe,"STRONG",{});var DEt=s(Bue);LQo=r(DEt,"xlnet"),DEt.forEach(t),yQo=r(SBe," \u2014 "),Tz=n(SBe,"A",{href:!0});var GEt=s(Tz);xQo=r(GEt,"XLNetForSequenceClassification"),GEt.forEach(t),$Qo=r(SBe," (XLNet model)"),SBe.forEach(t),kQo=i(j),Yv=n(j,"LI",{});var RBe=s(Yv);Iue=n(RBe,"STRONG",{});var OEt=s(Iue);SQo=r(OEt,"yoso"),OEt.forEach(t),RQo=r(RBe," \u2014 "),Mz=n(RBe,"A",{href:!0});var VEt=s(Mz);PQo=r(VEt,"YosoForSequenceClassification"),VEt.forEach(t),BQo=r(RBe," (YOSO model)"),RBe.forEach(t),j.forEach(t),IQo=i(ma),Kv=n(ma,"P",{});var PBe=s(Kv);NQo=r(PBe,"The model is set in evaluation mode by default using "),Nue=n(PBe,"CODE",{});var XEt=s(Nue);qQo=r(XEt,"model.eval()"),XEt.forEach(t),jQo=r(PBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(PBe,"CODE",{});var zEt=s(que);DQo=r(zEt,"model.train()"),zEt.forEach(t),PBe.forEach(t),GQo=i(ma),T(Zv.$$.fragment,ma),ma.forEach(t),cl.forEach(t),Pze=i(f),id=n(f,"H2",{class:!0});var DQe=s(id);e3=n(DQe,"A",{id:!0,class:!0,href:!0});var WEt=s(e3);jue=n(WEt,"SPAN",{});var QEt=s(jue);T(Ey.$$.fragment,QEt),QEt.forEach(t),WEt.forEach(t),OQo=i(DQe),Due=n(DQe,"SPAN",{});var HEt=s(Due);VQo=r(HEt,"AutoModelForMultipleChoice"),HEt.forEach(t),DQe.forEach(t),Bze=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(Cy.$$.fragment,fl),XQo=i(fl),dd=n(fl,"P",{});var Lte=s(dd);zQo=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ez=n(Lte,"A",{href:!0});var UEt=s(Ez);WQo=r(UEt,"from_pretrained()"),UEt.forEach(t),QQo=r(Lte," class method or the "),Cz=n(Lte,"A",{href:!0});var JEt=s(Cz);HQo=r(JEt,"from_config()"),JEt.forEach(t),UQo=r(Lte,` class
method.`),Lte.forEach(t),JQo=i(fl),wy=n(fl,"P",{});var GQe=s(wy);YQo=r(GQe,"This class cannot be instantiated directly using "),Gue=n(GQe,"CODE",{});var YEt=s(Gue);KQo=r(YEt,"__init__()"),YEt.forEach(t),ZQo=r(GQe," (throws an error)."),GQe.forEach(t),eHo=i(fl),ht=n(fl,"DIV",{class:!0});var IA=s(ht);T(Ay.$$.fragment,IA),oHo=i(IA),Oue=n(IA,"P",{});var KEt=s(Oue);rHo=r(KEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KEt.forEach(t),tHo=i(IA),cd=n(IA,"P",{});var yte=s(cd);aHo=r(yte,`Note:
Loading a model from its configuration file does `),Vue=n(yte,"STRONG",{});var ZEt=s(Vue);nHo=r(ZEt,"not"),ZEt.forEach(t),sHo=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(yte,"A",{href:!0});var eCt=s(wz);lHo=r(eCt,"from_pretrained()"),eCt.forEach(t),iHo=r(yte," to load the model weights."),yte.forEach(t),dHo=i(IA),T(o3.$$.fragment,IA),IA.forEach(t),cHo=i(fl),to=n(fl,"DIV",{class:!0});var ga=s(to);T(Ly.$$.fragment,ga),fHo=i(ga),Xue=n(ga,"P",{});var oCt=s(Xue);mHo=r(oCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oCt.forEach(t),gHo=i(ga),Oa=n(ga,"P",{});var NA=s(Oa);hHo=r(NA,"The model class to instantiate is selected based on the "),zue=n(NA,"CODE",{});var rCt=s(zue);pHo=r(rCt,"model_type"),rCt.forEach(t),_Ho=r(NA,` property of the config object (either
passed as an argument or loaded from `),Wue=n(NA,"CODE",{});var tCt=s(Wue);uHo=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),bHo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Que=n(NA,"CODE",{});var aCt=s(Que);vHo=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),FHo=r(NA,":"),NA.forEach(t),THo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);r3=n(ee,"LI",{});var BBe=s(r3);Hue=n(BBe,"STRONG",{});var nCt=s(Hue);MHo=r(nCt,"albert"),nCt.forEach(t),EHo=r(BBe," \u2014 "),Az=n(BBe,"A",{href:!0});var sCt=s(Az);CHo=r(sCt,"AlbertForMultipleChoice"),sCt.forEach(t),wHo=r(BBe," (ALBERT model)"),BBe.forEach(t),AHo=i(ee),t3=n(ee,"LI",{});var IBe=s(t3);Uue=n(IBe,"STRONG",{});var lCt=s(Uue);LHo=r(lCt,"bert"),lCt.forEach(t),yHo=r(IBe," \u2014 "),Lz=n(IBe,"A",{href:!0});var iCt=s(Lz);xHo=r(iCt,"BertForMultipleChoice"),iCt.forEach(t),$Ho=r(IBe," (BERT model)"),IBe.forEach(t),kHo=i(ee),a3=n(ee,"LI",{});var NBe=s(a3);Jue=n(NBe,"STRONG",{});var dCt=s(Jue);SHo=r(dCt,"big_bird"),dCt.forEach(t),RHo=r(NBe," \u2014 "),yz=n(NBe,"A",{href:!0});var cCt=s(yz);PHo=r(cCt,"BigBirdForMultipleChoice"),cCt.forEach(t),BHo=r(NBe," (BigBird model)"),NBe.forEach(t),IHo=i(ee),n3=n(ee,"LI",{});var qBe=s(n3);Yue=n(qBe,"STRONG",{});var fCt=s(Yue);NHo=r(fCt,"camembert"),fCt.forEach(t),qHo=r(qBe," \u2014 "),xz=n(qBe,"A",{href:!0});var mCt=s(xz);jHo=r(mCt,"CamembertForMultipleChoice"),mCt.forEach(t),DHo=r(qBe," (CamemBERT model)"),qBe.forEach(t),GHo=i(ee),s3=n(ee,"LI",{});var jBe=s(s3);Kue=n(jBe,"STRONG",{});var gCt=s(Kue);OHo=r(gCt,"canine"),gCt.forEach(t),VHo=r(jBe," \u2014 "),$z=n(jBe,"A",{href:!0});var hCt=s($z);XHo=r(hCt,"CanineForMultipleChoice"),hCt.forEach(t),zHo=r(jBe," (CANINE model)"),jBe.forEach(t),WHo=i(ee),l3=n(ee,"LI",{});var DBe=s(l3);Zue=n(DBe,"STRONG",{});var pCt=s(Zue);QHo=r(pCt,"convbert"),pCt.forEach(t),HHo=r(DBe," \u2014 "),kz=n(DBe,"A",{href:!0});var _Ct=s(kz);UHo=r(_Ct,"ConvBertForMultipleChoice"),_Ct.forEach(t),JHo=r(DBe," (ConvBERT model)"),DBe.forEach(t),YHo=i(ee),i3=n(ee,"LI",{});var GBe=s(i3);e1e=n(GBe,"STRONG",{});var uCt=s(e1e);KHo=r(uCt,"data2vec-text"),uCt.forEach(t),ZHo=r(GBe," \u2014 "),Sz=n(GBe,"A",{href:!0});var bCt=s(Sz);eUo=r(bCt,"Data2VecTextForMultipleChoice"),bCt.forEach(t),oUo=r(GBe," (Data2VecText model)"),GBe.forEach(t),rUo=i(ee),d3=n(ee,"LI",{});var OBe=s(d3);o1e=n(OBe,"STRONG",{});var vCt=s(o1e);tUo=r(vCt,"deberta-v2"),vCt.forEach(t),aUo=r(OBe," \u2014 "),Rz=n(OBe,"A",{href:!0});var FCt=s(Rz);nUo=r(FCt,"DebertaV2ForMultipleChoice"),FCt.forEach(t),sUo=r(OBe," (DeBERTa-v2 model)"),OBe.forEach(t),lUo=i(ee),c3=n(ee,"LI",{});var VBe=s(c3);r1e=n(VBe,"STRONG",{});var TCt=s(r1e);iUo=r(TCt,"distilbert"),TCt.forEach(t),dUo=r(VBe," \u2014 "),Pz=n(VBe,"A",{href:!0});var MCt=s(Pz);cUo=r(MCt,"DistilBertForMultipleChoice"),MCt.forEach(t),fUo=r(VBe," (DistilBERT model)"),VBe.forEach(t),mUo=i(ee),f3=n(ee,"LI",{});var XBe=s(f3);t1e=n(XBe,"STRONG",{});var ECt=s(t1e);gUo=r(ECt,"electra"),ECt.forEach(t),hUo=r(XBe," \u2014 "),Bz=n(XBe,"A",{href:!0});var CCt=s(Bz);pUo=r(CCt,"ElectraForMultipleChoice"),CCt.forEach(t),_Uo=r(XBe," (ELECTRA model)"),XBe.forEach(t),uUo=i(ee),m3=n(ee,"LI",{});var zBe=s(m3);a1e=n(zBe,"STRONG",{});var wCt=s(a1e);bUo=r(wCt,"flaubert"),wCt.forEach(t),vUo=r(zBe," \u2014 "),Iz=n(zBe,"A",{href:!0});var ACt=s(Iz);FUo=r(ACt,"FlaubertForMultipleChoice"),ACt.forEach(t),TUo=r(zBe," (FlauBERT model)"),zBe.forEach(t),MUo=i(ee),g3=n(ee,"LI",{});var WBe=s(g3);n1e=n(WBe,"STRONG",{});var LCt=s(n1e);EUo=r(LCt,"fnet"),LCt.forEach(t),CUo=r(WBe," \u2014 "),Nz=n(WBe,"A",{href:!0});var yCt=s(Nz);wUo=r(yCt,"FNetForMultipleChoice"),yCt.forEach(t),AUo=r(WBe," (FNet model)"),WBe.forEach(t),LUo=i(ee),h3=n(ee,"LI",{});var QBe=s(h3);s1e=n(QBe,"STRONG",{});var xCt=s(s1e);yUo=r(xCt,"funnel"),xCt.forEach(t),xUo=r(QBe," \u2014 "),qz=n(QBe,"A",{href:!0});var $Ct=s(qz);$Uo=r($Ct,"FunnelForMultipleChoice"),$Ct.forEach(t),kUo=r(QBe," (Funnel Transformer model)"),QBe.forEach(t),SUo=i(ee),p3=n(ee,"LI",{});var HBe=s(p3);l1e=n(HBe,"STRONG",{});var kCt=s(l1e);RUo=r(kCt,"ibert"),kCt.forEach(t),PUo=r(HBe," \u2014 "),jz=n(HBe,"A",{href:!0});var SCt=s(jz);BUo=r(SCt,"IBertForMultipleChoice"),SCt.forEach(t),IUo=r(HBe," (I-BERT model)"),HBe.forEach(t),NUo=i(ee),_3=n(ee,"LI",{});var UBe=s(_3);i1e=n(UBe,"STRONG",{});var RCt=s(i1e);qUo=r(RCt,"longformer"),RCt.forEach(t),jUo=r(UBe," \u2014 "),Dz=n(UBe,"A",{href:!0});var PCt=s(Dz);DUo=r(PCt,"LongformerForMultipleChoice"),PCt.forEach(t),GUo=r(UBe," (Longformer model)"),UBe.forEach(t),OUo=i(ee),u3=n(ee,"LI",{});var JBe=s(u3);d1e=n(JBe,"STRONG",{});var BCt=s(d1e);VUo=r(BCt,"megatron-bert"),BCt.forEach(t),XUo=r(JBe," \u2014 "),Gz=n(JBe,"A",{href:!0});var ICt=s(Gz);zUo=r(ICt,"MegatronBertForMultipleChoice"),ICt.forEach(t),WUo=r(JBe," (Megatron-BERT model)"),JBe.forEach(t),QUo=i(ee),b3=n(ee,"LI",{});var YBe=s(b3);c1e=n(YBe,"STRONG",{});var NCt=s(c1e);HUo=r(NCt,"mobilebert"),NCt.forEach(t),UUo=r(YBe," \u2014 "),Oz=n(YBe,"A",{href:!0});var qCt=s(Oz);JUo=r(qCt,"MobileBertForMultipleChoice"),qCt.forEach(t),YUo=r(YBe," (MobileBERT model)"),YBe.forEach(t),KUo=i(ee),v3=n(ee,"LI",{});var KBe=s(v3);f1e=n(KBe,"STRONG",{});var jCt=s(f1e);ZUo=r(jCt,"mpnet"),jCt.forEach(t),eJo=r(KBe," \u2014 "),Vz=n(KBe,"A",{href:!0});var DCt=s(Vz);oJo=r(DCt,"MPNetForMultipleChoice"),DCt.forEach(t),rJo=r(KBe," (MPNet model)"),KBe.forEach(t),tJo=i(ee),F3=n(ee,"LI",{});var ZBe=s(F3);m1e=n(ZBe,"STRONG",{});var GCt=s(m1e);aJo=r(GCt,"nezha"),GCt.forEach(t),nJo=r(ZBe," \u2014 "),Xz=n(ZBe,"A",{href:!0});var OCt=s(Xz);sJo=r(OCt,"NezhaForMultipleChoice"),OCt.forEach(t),lJo=r(ZBe," (Nezha model)"),ZBe.forEach(t),iJo=i(ee),T3=n(ee,"LI",{});var eIe=s(T3);g1e=n(eIe,"STRONG",{});var VCt=s(g1e);dJo=r(VCt,"nystromformer"),VCt.forEach(t),cJo=r(eIe," \u2014 "),zz=n(eIe,"A",{href:!0});var XCt=s(zz);fJo=r(XCt,"NystromformerForMultipleChoice"),XCt.forEach(t),mJo=r(eIe," (Nystr\xF6mformer model)"),eIe.forEach(t),gJo=i(ee),M3=n(ee,"LI",{});var oIe=s(M3);h1e=n(oIe,"STRONG",{});var zCt=s(h1e);hJo=r(zCt,"qdqbert"),zCt.forEach(t),pJo=r(oIe," \u2014 "),Wz=n(oIe,"A",{href:!0});var WCt=s(Wz);_Jo=r(WCt,"QDQBertForMultipleChoice"),WCt.forEach(t),uJo=r(oIe," (QDQBert model)"),oIe.forEach(t),bJo=i(ee),E3=n(ee,"LI",{});var rIe=s(E3);p1e=n(rIe,"STRONG",{});var QCt=s(p1e);vJo=r(QCt,"rembert"),QCt.forEach(t),FJo=r(rIe," \u2014 "),Qz=n(rIe,"A",{href:!0});var HCt=s(Qz);TJo=r(HCt,"RemBertForMultipleChoice"),HCt.forEach(t),MJo=r(rIe," (RemBERT model)"),rIe.forEach(t),EJo=i(ee),C3=n(ee,"LI",{});var tIe=s(C3);_1e=n(tIe,"STRONG",{});var UCt=s(_1e);CJo=r(UCt,"roberta"),UCt.forEach(t),wJo=r(tIe," \u2014 "),Hz=n(tIe,"A",{href:!0});var JCt=s(Hz);AJo=r(JCt,"RobertaForMultipleChoice"),JCt.forEach(t),LJo=r(tIe," (RoBERTa model)"),tIe.forEach(t),yJo=i(ee),w3=n(ee,"LI",{});var aIe=s(w3);u1e=n(aIe,"STRONG",{});var YCt=s(u1e);xJo=r(YCt,"roformer"),YCt.forEach(t),$Jo=r(aIe," \u2014 "),Uz=n(aIe,"A",{href:!0});var KCt=s(Uz);kJo=r(KCt,"RoFormerForMultipleChoice"),KCt.forEach(t),SJo=r(aIe," (RoFormer model)"),aIe.forEach(t),RJo=i(ee),A3=n(ee,"LI",{});var nIe=s(A3);b1e=n(nIe,"STRONG",{});var ZCt=s(b1e);PJo=r(ZCt,"squeezebert"),ZCt.forEach(t),BJo=r(nIe," \u2014 "),Jz=n(nIe,"A",{href:!0});var e5t=s(Jz);IJo=r(e5t,"SqueezeBertForMultipleChoice"),e5t.forEach(t),NJo=r(nIe," (SqueezeBERT model)"),nIe.forEach(t),qJo=i(ee),L3=n(ee,"LI",{});var sIe=s(L3);v1e=n(sIe,"STRONG",{});var o5t=s(v1e);jJo=r(o5t,"xlm"),o5t.forEach(t),DJo=r(sIe," \u2014 "),Yz=n(sIe,"A",{href:!0});var r5t=s(Yz);GJo=r(r5t,"XLMForMultipleChoice"),r5t.forEach(t),OJo=r(sIe," (XLM model)"),sIe.forEach(t),VJo=i(ee),y3=n(ee,"LI",{});var lIe=s(y3);F1e=n(lIe,"STRONG",{});var t5t=s(F1e);XJo=r(t5t,"xlm-roberta"),t5t.forEach(t),zJo=r(lIe," \u2014 "),Kz=n(lIe,"A",{href:!0});var a5t=s(Kz);WJo=r(a5t,"XLMRobertaForMultipleChoice"),a5t.forEach(t),QJo=r(lIe," (XLM-RoBERTa model)"),lIe.forEach(t),HJo=i(ee),x3=n(ee,"LI",{});var iIe=s(x3);T1e=n(iIe,"STRONG",{});var n5t=s(T1e);UJo=r(n5t,"xlm-roberta-xl"),n5t.forEach(t),JJo=r(iIe," \u2014 "),Zz=n(iIe,"A",{href:!0});var s5t=s(Zz);YJo=r(s5t,"XLMRobertaXLForMultipleChoice"),s5t.forEach(t),KJo=r(iIe," (XLM-RoBERTa-XL model)"),iIe.forEach(t),ZJo=i(ee),$3=n(ee,"LI",{});var dIe=s($3);M1e=n(dIe,"STRONG",{});var l5t=s(M1e);eYo=r(l5t,"xlnet"),l5t.forEach(t),oYo=r(dIe," \u2014 "),eW=n(dIe,"A",{href:!0});var i5t=s(eW);rYo=r(i5t,"XLNetForMultipleChoice"),i5t.forEach(t),tYo=r(dIe," (XLNet model)"),dIe.forEach(t),aYo=i(ee),k3=n(ee,"LI",{});var cIe=s(k3);E1e=n(cIe,"STRONG",{});var d5t=s(E1e);nYo=r(d5t,"yoso"),d5t.forEach(t),sYo=r(cIe," \u2014 "),oW=n(cIe,"A",{href:!0});var c5t=s(oW);lYo=r(c5t,"YosoForMultipleChoice"),c5t.forEach(t),iYo=r(cIe," (YOSO model)"),cIe.forEach(t),ee.forEach(t),dYo=i(ga),S3=n(ga,"P",{});var fIe=s(S3);cYo=r(fIe,"The model is set in evaluation mode by default using "),C1e=n(fIe,"CODE",{});var f5t=s(C1e);fYo=r(f5t,"model.eval()"),f5t.forEach(t),mYo=r(fIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w1e=n(fIe,"CODE",{});var m5t=s(w1e);gYo=r(m5t,"model.train()"),m5t.forEach(t),fIe.forEach(t),hYo=i(ga),T(R3.$$.fragment,ga),ga.forEach(t),fl.forEach(t),Ize=i(f),fd=n(f,"H2",{class:!0});var OQe=s(fd);P3=n(OQe,"A",{id:!0,class:!0,href:!0});var g5t=s(P3);A1e=n(g5t,"SPAN",{});var h5t=s(A1e);T(yy.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),pYo=i(OQe),L1e=n(OQe,"SPAN",{});var p5t=s(L1e);_Yo=r(p5t,"AutoModelForNextSentencePrediction"),p5t.forEach(t),OQe.forEach(t),Nze=i(f),qo=n(f,"DIV",{class:!0});var ml=s(qo);T(xy.$$.fragment,ml),uYo=i(ml),md=n(ml,"P",{});var xte=s(md);bYo=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rW=n(xte,"A",{href:!0});var _5t=s(rW);vYo=r(_5t,"from_pretrained()"),_5t.forEach(t),FYo=r(xte," class method or the "),tW=n(xte,"A",{href:!0});var u5t=s(tW);TYo=r(u5t,"from_config()"),u5t.forEach(t),MYo=r(xte,` class
method.`),xte.forEach(t),EYo=i(ml),$y=n(ml,"P",{});var VQe=s($y);CYo=r(VQe,"This class cannot be instantiated directly using "),y1e=n(VQe,"CODE",{});var b5t=s(y1e);wYo=r(b5t,"__init__()"),b5t.forEach(t),AYo=r(VQe," (throws an error)."),VQe.forEach(t),LYo=i(ml),pt=n(ml,"DIV",{class:!0});var qA=s(pt);T(ky.$$.fragment,qA),yYo=i(qA),x1e=n(qA,"P",{});var v5t=s(x1e);xYo=r(v5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),v5t.forEach(t),$Yo=i(qA),gd=n(qA,"P",{});var $te=s(gd);kYo=r($te,`Note:
Loading a model from its configuration file does `),$1e=n($te,"STRONG",{});var F5t=s($1e);SYo=r(F5t,"not"),F5t.forEach(t),RYo=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n($te,"A",{href:!0});var T5t=s(aW);PYo=r(T5t,"from_pretrained()"),T5t.forEach(t),BYo=r($te," to load the model weights."),$te.forEach(t),IYo=i(qA),T(B3.$$.fragment,qA),qA.forEach(t),NYo=i(ml),ao=n(ml,"DIV",{class:!0});var ha=s(ao);T(Sy.$$.fragment,ha),qYo=i(ha),k1e=n(ha,"P",{});var M5t=s(k1e);jYo=r(M5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M5t.forEach(t),DYo=i(ha),Va=n(ha,"P",{});var jA=s(Va);GYo=r(jA,"The model class to instantiate is selected based on the "),S1e=n(jA,"CODE",{});var E5t=s(S1e);OYo=r(E5t,"model_type"),E5t.forEach(t),VYo=r(jA,` property of the config object (either
passed as an argument or loaded from `),R1e=n(jA,"CODE",{});var C5t=s(R1e);XYo=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),zYo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(jA,"CODE",{});var w5t=s(P1e);WYo=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),QYo=r(jA,":"),jA.forEach(t),HYo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);I3=n(pa,"LI",{});var mIe=s(I3);B1e=n(mIe,"STRONG",{});var A5t=s(B1e);UYo=r(A5t,"bert"),A5t.forEach(t),JYo=r(mIe," \u2014 "),nW=n(mIe,"A",{href:!0});var L5t=s(nW);YYo=r(L5t,"BertForNextSentencePrediction"),L5t.forEach(t),KYo=r(mIe," (BERT model)"),mIe.forEach(t),ZYo=i(pa),N3=n(pa,"LI",{});var gIe=s(N3);I1e=n(gIe,"STRONG",{});var y5t=s(I1e);eKo=r(y5t,"fnet"),y5t.forEach(t),oKo=r(gIe," \u2014 "),sW=n(gIe,"A",{href:!0});var x5t=s(sW);rKo=r(x5t,"FNetForNextSentencePrediction"),x5t.forEach(t),tKo=r(gIe," (FNet model)"),gIe.forEach(t),aKo=i(pa),q3=n(pa,"LI",{});var hIe=s(q3);N1e=n(hIe,"STRONG",{});var $5t=s(N1e);nKo=r($5t,"megatron-bert"),$5t.forEach(t),sKo=r(hIe," \u2014 "),lW=n(hIe,"A",{href:!0});var k5t=s(lW);lKo=r(k5t,"MegatronBertForNextSentencePrediction"),k5t.forEach(t),iKo=r(hIe," (Megatron-BERT model)"),hIe.forEach(t),dKo=i(pa),j3=n(pa,"LI",{});var pIe=s(j3);q1e=n(pIe,"STRONG",{});var S5t=s(q1e);cKo=r(S5t,"mobilebert"),S5t.forEach(t),fKo=r(pIe," \u2014 "),iW=n(pIe,"A",{href:!0});var R5t=s(iW);mKo=r(R5t,"MobileBertForNextSentencePrediction"),R5t.forEach(t),gKo=r(pIe," (MobileBERT model)"),pIe.forEach(t),hKo=i(pa),D3=n(pa,"LI",{});var _Ie=s(D3);j1e=n(_Ie,"STRONG",{});var P5t=s(j1e);pKo=r(P5t,"nezha"),P5t.forEach(t),_Ko=r(_Ie," \u2014 "),dW=n(_Ie,"A",{href:!0});var B5t=s(dW);uKo=r(B5t,"NezhaForNextSentencePrediction"),B5t.forEach(t),bKo=r(_Ie," (Nezha model)"),_Ie.forEach(t),vKo=i(pa),G3=n(pa,"LI",{});var uIe=s(G3);D1e=n(uIe,"STRONG",{});var I5t=s(D1e);FKo=r(I5t,"qdqbert"),I5t.forEach(t),TKo=r(uIe," \u2014 "),cW=n(uIe,"A",{href:!0});var N5t=s(cW);MKo=r(N5t,"QDQBertForNextSentencePrediction"),N5t.forEach(t),EKo=r(uIe," (QDQBert model)"),uIe.forEach(t),pa.forEach(t),CKo=i(ha),O3=n(ha,"P",{});var bIe=s(O3);wKo=r(bIe,"The model is set in evaluation mode by default using "),G1e=n(bIe,"CODE",{});var q5t=s(G1e);AKo=r(q5t,"model.eval()"),q5t.forEach(t),LKo=r(bIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=n(bIe,"CODE",{});var j5t=s(O1e);yKo=r(j5t,"model.train()"),j5t.forEach(t),bIe.forEach(t),xKo=i(ha),T(V3.$$.fragment,ha),ha.forEach(t),ml.forEach(t),qze=i(f),hd=n(f,"H2",{class:!0});var XQe=s(hd);X3=n(XQe,"A",{id:!0,class:!0,href:!0});var D5t=s(X3);V1e=n(D5t,"SPAN",{});var G5t=s(V1e);T(Ry.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),$Ko=i(XQe),X1e=n(XQe,"SPAN",{});var O5t=s(X1e);kKo=r(O5t,"AutoModelForTokenClassification"),O5t.forEach(t),XQe.forEach(t),jze=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T(Py.$$.fragment,gl),SKo=i(gl),pd=n(gl,"P",{});var kte=s(pd);RKo=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fW=n(kte,"A",{href:!0});var V5t=s(fW);PKo=r(V5t,"from_pretrained()"),V5t.forEach(t),BKo=r(kte," class method or the "),mW=n(kte,"A",{href:!0});var X5t=s(mW);IKo=r(X5t,"from_config()"),X5t.forEach(t),NKo=r(kte,` class
method.`),kte.forEach(t),qKo=i(gl),By=n(gl,"P",{});var zQe=s(By);jKo=r(zQe,"This class cannot be instantiated directly using "),z1e=n(zQe,"CODE",{});var z5t=s(z1e);DKo=r(z5t,"__init__()"),z5t.forEach(t),GKo=r(zQe," (throws an error)."),zQe.forEach(t),OKo=i(gl),_t=n(gl,"DIV",{class:!0});var DA=s(_t);T(Iy.$$.fragment,DA),VKo=i(DA),W1e=n(DA,"P",{});var W5t=s(W1e);XKo=r(W5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W5t.forEach(t),zKo=i(DA),_d=n(DA,"P",{});var Ste=s(_d);WKo=r(Ste,`Note:
Loading a model from its configuration file does `),Q1e=n(Ste,"STRONG",{});var Q5t=s(Q1e);QKo=r(Q5t,"not"),Q5t.forEach(t),HKo=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(Ste,"A",{href:!0});var H5t=s(gW);UKo=r(H5t,"from_pretrained()"),H5t.forEach(t),JKo=r(Ste," to load the model weights."),Ste.forEach(t),YKo=i(DA),T(z3.$$.fragment,DA),DA.forEach(t),KKo=i(gl),no=n(gl,"DIV",{class:!0});var _a=s(no);T(Ny.$$.fragment,_a),ZKo=i(_a),H1e=n(_a,"P",{});var U5t=s(H1e);eZo=r(U5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U5t.forEach(t),oZo=i(_a),Xa=n(_a,"P",{});var GA=s(Xa);rZo=r(GA,"The model class to instantiate is selected based on the "),U1e=n(GA,"CODE",{});var J5t=s(U1e);tZo=r(J5t,"model_type"),J5t.forEach(t),aZo=r(GA,` property of the config object (either
passed as an argument or loaded from `),J1e=n(GA,"CODE",{});var Y5t=s(J1e);nZo=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),sZo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(GA,"CODE",{});var K5t=s(Y1e);lZo=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),iZo=r(GA,":"),GA.forEach(t),dZo=i(_a),J=n(_a,"UL",{});var K=s(J);W3=n(K,"LI",{});var vIe=s(W3);K1e=n(vIe,"STRONG",{});var Z5t=s(K1e);cZo=r(Z5t,"albert"),Z5t.forEach(t),fZo=r(vIe," \u2014 "),hW=n(vIe,"A",{href:!0});var e0t=s(hW);mZo=r(e0t,"AlbertForTokenClassification"),e0t.forEach(t),gZo=r(vIe," (ALBERT model)"),vIe.forEach(t),hZo=i(K),Q3=n(K,"LI",{});var FIe=s(Q3);Z1e=n(FIe,"STRONG",{});var o0t=s(Z1e);pZo=r(o0t,"bert"),o0t.forEach(t),_Zo=r(FIe," \u2014 "),pW=n(FIe,"A",{href:!0});var r0t=s(pW);uZo=r(r0t,"BertForTokenClassification"),r0t.forEach(t),bZo=r(FIe," (BERT model)"),FIe.forEach(t),vZo=i(K),H3=n(K,"LI",{});var TIe=s(H3);e2e=n(TIe,"STRONG",{});var t0t=s(e2e);FZo=r(t0t,"big_bird"),t0t.forEach(t),TZo=r(TIe," \u2014 "),_W=n(TIe,"A",{href:!0});var a0t=s(_W);MZo=r(a0t,"BigBirdForTokenClassification"),a0t.forEach(t),EZo=r(TIe," (BigBird model)"),TIe.forEach(t),CZo=i(K),U3=n(K,"LI",{});var MIe=s(U3);o2e=n(MIe,"STRONG",{});var n0t=s(o2e);wZo=r(n0t,"bloom"),n0t.forEach(t),AZo=r(MIe," \u2014 "),uW=n(MIe,"A",{href:!0});var s0t=s(uW);LZo=r(s0t,"BloomForTokenClassification"),s0t.forEach(t),yZo=r(MIe," (BLOOM model)"),MIe.forEach(t),xZo=i(K),J3=n(K,"LI",{});var EIe=s(J3);r2e=n(EIe,"STRONG",{});var l0t=s(r2e);$Zo=r(l0t,"camembert"),l0t.forEach(t),kZo=r(EIe," \u2014 "),bW=n(EIe,"A",{href:!0});var i0t=s(bW);SZo=r(i0t,"CamembertForTokenClassification"),i0t.forEach(t),RZo=r(EIe," (CamemBERT model)"),EIe.forEach(t),PZo=i(K),Y3=n(K,"LI",{});var CIe=s(Y3);t2e=n(CIe,"STRONG",{});var d0t=s(t2e);BZo=r(d0t,"canine"),d0t.forEach(t),IZo=r(CIe," \u2014 "),vW=n(CIe,"A",{href:!0});var c0t=s(vW);NZo=r(c0t,"CanineForTokenClassification"),c0t.forEach(t),qZo=r(CIe," (CANINE model)"),CIe.forEach(t),jZo=i(K),K3=n(K,"LI",{});var wIe=s(K3);a2e=n(wIe,"STRONG",{});var f0t=s(a2e);DZo=r(f0t,"convbert"),f0t.forEach(t),GZo=r(wIe," \u2014 "),FW=n(wIe,"A",{href:!0});var m0t=s(FW);OZo=r(m0t,"ConvBertForTokenClassification"),m0t.forEach(t),VZo=r(wIe," (ConvBERT model)"),wIe.forEach(t),XZo=i(K),Z3=n(K,"LI",{});var AIe=s(Z3);n2e=n(AIe,"STRONG",{});var g0t=s(n2e);zZo=r(g0t,"data2vec-text"),g0t.forEach(t),WZo=r(AIe," \u2014 "),TW=n(AIe,"A",{href:!0});var h0t=s(TW);QZo=r(h0t,"Data2VecTextForTokenClassification"),h0t.forEach(t),HZo=r(AIe," (Data2VecText model)"),AIe.forEach(t),UZo=i(K),eF=n(K,"LI",{});var LIe=s(eF);s2e=n(LIe,"STRONG",{});var p0t=s(s2e);JZo=r(p0t,"deberta"),p0t.forEach(t),YZo=r(LIe," \u2014 "),MW=n(LIe,"A",{href:!0});var _0t=s(MW);KZo=r(_0t,"DebertaForTokenClassification"),_0t.forEach(t),ZZo=r(LIe," (DeBERTa model)"),LIe.forEach(t),eer=i(K),oF=n(K,"LI",{});var yIe=s(oF);l2e=n(yIe,"STRONG",{});var u0t=s(l2e);oer=r(u0t,"deberta-v2"),u0t.forEach(t),rer=r(yIe," \u2014 "),EW=n(yIe,"A",{href:!0});var b0t=s(EW);ter=r(b0t,"DebertaV2ForTokenClassification"),b0t.forEach(t),aer=r(yIe," (DeBERTa-v2 model)"),yIe.forEach(t),ner=i(K),rF=n(K,"LI",{});var xIe=s(rF);i2e=n(xIe,"STRONG",{});var v0t=s(i2e);ser=r(v0t,"distilbert"),v0t.forEach(t),ler=r(xIe," \u2014 "),CW=n(xIe,"A",{href:!0});var F0t=s(CW);ier=r(F0t,"DistilBertForTokenClassification"),F0t.forEach(t),der=r(xIe," (DistilBERT model)"),xIe.forEach(t),cer=i(K),tF=n(K,"LI",{});var $Ie=s(tF);d2e=n($Ie,"STRONG",{});var T0t=s(d2e);fer=r(T0t,"electra"),T0t.forEach(t),mer=r($Ie," \u2014 "),wW=n($Ie,"A",{href:!0});var M0t=s(wW);ger=r(M0t,"ElectraForTokenClassification"),M0t.forEach(t),her=r($Ie," (ELECTRA model)"),$Ie.forEach(t),per=i(K),aF=n(K,"LI",{});var kIe=s(aF);c2e=n(kIe,"STRONG",{});var E0t=s(c2e);_er=r(E0t,"flaubert"),E0t.forEach(t),uer=r(kIe," \u2014 "),AW=n(kIe,"A",{href:!0});var C0t=s(AW);ber=r(C0t,"FlaubertForTokenClassification"),C0t.forEach(t),ver=r(kIe," (FlauBERT model)"),kIe.forEach(t),Fer=i(K),nF=n(K,"LI",{});var SIe=s(nF);f2e=n(SIe,"STRONG",{});var w0t=s(f2e);Ter=r(w0t,"fnet"),w0t.forEach(t),Mer=r(SIe," \u2014 "),LW=n(SIe,"A",{href:!0});var A0t=s(LW);Eer=r(A0t,"FNetForTokenClassification"),A0t.forEach(t),Cer=r(SIe," (FNet model)"),SIe.forEach(t),wer=i(K),sF=n(K,"LI",{});var RIe=s(sF);m2e=n(RIe,"STRONG",{});var L0t=s(m2e);Aer=r(L0t,"funnel"),L0t.forEach(t),Ler=r(RIe," \u2014 "),yW=n(RIe,"A",{href:!0});var y0t=s(yW);yer=r(y0t,"FunnelForTokenClassification"),y0t.forEach(t),xer=r(RIe," (Funnel Transformer model)"),RIe.forEach(t),$er=i(K),lF=n(K,"LI",{});var PIe=s(lF);g2e=n(PIe,"STRONG",{});var x0t=s(g2e);ker=r(x0t,"gpt2"),x0t.forEach(t),Ser=r(PIe," \u2014 "),xW=n(PIe,"A",{href:!0});var $0t=s(xW);Rer=r($0t,"GPT2ForTokenClassification"),$0t.forEach(t),Per=r(PIe," (OpenAI GPT-2 model)"),PIe.forEach(t),Ber=i(K),iF=n(K,"LI",{});var BIe=s(iF);h2e=n(BIe,"STRONG",{});var k0t=s(h2e);Ier=r(k0t,"ibert"),k0t.forEach(t),Ner=r(BIe," \u2014 "),$W=n(BIe,"A",{href:!0});var S0t=s($W);qer=r(S0t,"IBertForTokenClassification"),S0t.forEach(t),jer=r(BIe," (I-BERT model)"),BIe.forEach(t),Der=i(K),dF=n(K,"LI",{});var IIe=s(dF);p2e=n(IIe,"STRONG",{});var R0t=s(p2e);Ger=r(R0t,"layoutlm"),R0t.forEach(t),Oer=r(IIe," \u2014 "),kW=n(IIe,"A",{href:!0});var P0t=s(kW);Ver=r(P0t,"LayoutLMForTokenClassification"),P0t.forEach(t),Xer=r(IIe," (LayoutLM model)"),IIe.forEach(t),zer=i(K),cF=n(K,"LI",{});var NIe=s(cF);_2e=n(NIe,"STRONG",{});var B0t=s(_2e);Wer=r(B0t,"layoutlmv2"),B0t.forEach(t),Qer=r(NIe," \u2014 "),SW=n(NIe,"A",{href:!0});var I0t=s(SW);Her=r(I0t,"LayoutLMv2ForTokenClassification"),I0t.forEach(t),Uer=r(NIe," (LayoutLMv2 model)"),NIe.forEach(t),Jer=i(K),fF=n(K,"LI",{});var qIe=s(fF);u2e=n(qIe,"STRONG",{});var N0t=s(u2e);Yer=r(N0t,"layoutlmv3"),N0t.forEach(t),Ker=r(qIe," \u2014 "),RW=n(qIe,"A",{href:!0});var q0t=s(RW);Zer=r(q0t,"LayoutLMv3ForTokenClassification"),q0t.forEach(t),eor=r(qIe," (LayoutLMv3 model)"),qIe.forEach(t),oor=i(K),mF=n(K,"LI",{});var jIe=s(mF);b2e=n(jIe,"STRONG",{});var j0t=s(b2e);ror=r(j0t,"longformer"),j0t.forEach(t),tor=r(jIe," \u2014 "),PW=n(jIe,"A",{href:!0});var D0t=s(PW);aor=r(D0t,"LongformerForTokenClassification"),D0t.forEach(t),nor=r(jIe," (Longformer model)"),jIe.forEach(t),sor=i(K),gF=n(K,"LI",{});var DIe=s(gF);v2e=n(DIe,"STRONG",{});var G0t=s(v2e);lor=r(G0t,"megatron-bert"),G0t.forEach(t),ior=r(DIe," \u2014 "),BW=n(DIe,"A",{href:!0});var O0t=s(BW);dor=r(O0t,"MegatronBertForTokenClassification"),O0t.forEach(t),cor=r(DIe," (Megatron-BERT model)"),DIe.forEach(t),mor=i(K),hF=n(K,"LI",{});var GIe=s(hF);F2e=n(GIe,"STRONG",{});var V0t=s(F2e);gor=r(V0t,"mobilebert"),V0t.forEach(t),hor=r(GIe," \u2014 "),IW=n(GIe,"A",{href:!0});var X0t=s(IW);por=r(X0t,"MobileBertForTokenClassification"),X0t.forEach(t),_or=r(GIe," (MobileBERT model)"),GIe.forEach(t),uor=i(K),pF=n(K,"LI",{});var OIe=s(pF);T2e=n(OIe,"STRONG",{});var z0t=s(T2e);bor=r(z0t,"mpnet"),z0t.forEach(t),vor=r(OIe," \u2014 "),NW=n(OIe,"A",{href:!0});var W0t=s(NW);For=r(W0t,"MPNetForTokenClassification"),W0t.forEach(t),Tor=r(OIe," (MPNet model)"),OIe.forEach(t),Mor=i(K),_F=n(K,"LI",{});var VIe=s(_F);M2e=n(VIe,"STRONG",{});var Q0t=s(M2e);Eor=r(Q0t,"nezha"),Q0t.forEach(t),Cor=r(VIe," \u2014 "),qW=n(VIe,"A",{href:!0});var H0t=s(qW);wor=r(H0t,"NezhaForTokenClassification"),H0t.forEach(t),Aor=r(VIe," (Nezha model)"),VIe.forEach(t),Lor=i(K),uF=n(K,"LI",{});var XIe=s(uF);E2e=n(XIe,"STRONG",{});var U0t=s(E2e);yor=r(U0t,"nystromformer"),U0t.forEach(t),xor=r(XIe," \u2014 "),jW=n(XIe,"A",{href:!0});var J0t=s(jW);$or=r(J0t,"NystromformerForTokenClassification"),J0t.forEach(t),kor=r(XIe," (Nystr\xF6mformer model)"),XIe.forEach(t),Sor=i(K),bF=n(K,"LI",{});var zIe=s(bF);C2e=n(zIe,"STRONG",{});var Y0t=s(C2e);Ror=r(Y0t,"qdqbert"),Y0t.forEach(t),Por=r(zIe," \u2014 "),DW=n(zIe,"A",{href:!0});var K0t=s(DW);Bor=r(K0t,"QDQBertForTokenClassification"),K0t.forEach(t),Ior=r(zIe," (QDQBert model)"),zIe.forEach(t),Nor=i(K),vF=n(K,"LI",{});var WIe=s(vF);w2e=n(WIe,"STRONG",{});var Z0t=s(w2e);qor=r(Z0t,"rembert"),Z0t.forEach(t),jor=r(WIe," \u2014 "),GW=n(WIe,"A",{href:!0});var ewt=s(GW);Dor=r(ewt,"RemBertForTokenClassification"),ewt.forEach(t),Gor=r(WIe," (RemBERT model)"),WIe.forEach(t),Oor=i(K),FF=n(K,"LI",{});var QIe=s(FF);A2e=n(QIe,"STRONG",{});var owt=s(A2e);Vor=r(owt,"roberta"),owt.forEach(t),Xor=r(QIe," \u2014 "),OW=n(QIe,"A",{href:!0});var rwt=s(OW);zor=r(rwt,"RobertaForTokenClassification"),rwt.forEach(t),Wor=r(QIe," (RoBERTa model)"),QIe.forEach(t),Qor=i(K),TF=n(K,"LI",{});var HIe=s(TF);L2e=n(HIe,"STRONG",{});var twt=s(L2e);Hor=r(twt,"roformer"),twt.forEach(t),Uor=r(HIe," \u2014 "),VW=n(HIe,"A",{href:!0});var awt=s(VW);Jor=r(awt,"RoFormerForTokenClassification"),awt.forEach(t),Yor=r(HIe," (RoFormer model)"),HIe.forEach(t),Kor=i(K),MF=n(K,"LI",{});var UIe=s(MF);y2e=n(UIe,"STRONG",{});var nwt=s(y2e);Zor=r(nwt,"squeezebert"),nwt.forEach(t),err=r(UIe," \u2014 "),XW=n(UIe,"A",{href:!0});var swt=s(XW);orr=r(swt,"SqueezeBertForTokenClassification"),swt.forEach(t),rrr=r(UIe," (SqueezeBERT model)"),UIe.forEach(t),trr=i(K),EF=n(K,"LI",{});var JIe=s(EF);x2e=n(JIe,"STRONG",{});var lwt=s(x2e);arr=r(lwt,"xlm"),lwt.forEach(t),nrr=r(JIe," \u2014 "),zW=n(JIe,"A",{href:!0});var iwt=s(zW);srr=r(iwt,"XLMForTokenClassification"),iwt.forEach(t),lrr=r(JIe," (XLM model)"),JIe.forEach(t),irr=i(K),CF=n(K,"LI",{});var YIe=s(CF);$2e=n(YIe,"STRONG",{});var dwt=s($2e);drr=r(dwt,"xlm-roberta"),dwt.forEach(t),crr=r(YIe," \u2014 "),WW=n(YIe,"A",{href:!0});var cwt=s(WW);frr=r(cwt,"XLMRobertaForTokenClassification"),cwt.forEach(t),mrr=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),grr=i(K),wF=n(K,"LI",{});var KIe=s(wF);k2e=n(KIe,"STRONG",{});var fwt=s(k2e);hrr=r(fwt,"xlm-roberta-xl"),fwt.forEach(t),prr=r(KIe," \u2014 "),QW=n(KIe,"A",{href:!0});var mwt=s(QW);_rr=r(mwt,"XLMRobertaXLForTokenClassification"),mwt.forEach(t),urr=r(KIe," (XLM-RoBERTa-XL model)"),KIe.forEach(t),brr=i(K),AF=n(K,"LI",{});var ZIe=s(AF);S2e=n(ZIe,"STRONG",{});var gwt=s(S2e);vrr=r(gwt,"xlnet"),gwt.forEach(t),Frr=r(ZIe," \u2014 "),HW=n(ZIe,"A",{href:!0});var hwt=s(HW);Trr=r(hwt,"XLNetForTokenClassification"),hwt.forEach(t),Mrr=r(ZIe," (XLNet model)"),ZIe.forEach(t),Err=i(K),LF=n(K,"LI",{});var eNe=s(LF);R2e=n(eNe,"STRONG",{});var pwt=s(R2e);Crr=r(pwt,"yoso"),pwt.forEach(t),wrr=r(eNe," \u2014 "),UW=n(eNe,"A",{href:!0});var _wt=s(UW);Arr=r(_wt,"YosoForTokenClassification"),_wt.forEach(t),Lrr=r(eNe," (YOSO model)"),eNe.forEach(t),K.forEach(t),yrr=i(_a),yF=n(_a,"P",{});var oNe=s(yF);xrr=r(oNe,"The model is set in evaluation mode by default using "),P2e=n(oNe,"CODE",{});var uwt=s(P2e);$rr=r(uwt,"model.eval()"),uwt.forEach(t),krr=r(oNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(oNe,"CODE",{});var bwt=s(B2e);Srr=r(bwt,"model.train()"),bwt.forEach(t),oNe.forEach(t),Rrr=i(_a),T(xF.$$.fragment,_a),_a.forEach(t),gl.forEach(t),Dze=i(f),ud=n(f,"H2",{class:!0});var WQe=s(ud);$F=n(WQe,"A",{id:!0,class:!0,href:!0});var vwt=s($F);I2e=n(vwt,"SPAN",{});var Fwt=s(I2e);T(qy.$$.fragment,Fwt),Fwt.forEach(t),vwt.forEach(t),Prr=i(WQe),N2e=n(WQe,"SPAN",{});var Twt=s(N2e);Brr=r(Twt,"AutoModelForQuestionAnswering"),Twt.forEach(t),WQe.forEach(t),Gze=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(jy.$$.fragment,hl),Irr=i(hl),bd=n(hl,"P",{});var Rte=s(bd);Nrr=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=n(Rte,"A",{href:!0});var Mwt=s(JW);qrr=r(Mwt,"from_pretrained()"),Mwt.forEach(t),jrr=r(Rte," class method or the "),YW=n(Rte,"A",{href:!0});var Ewt=s(YW);Drr=r(Ewt,"from_config()"),Ewt.forEach(t),Grr=r(Rte,` class
method.`),Rte.forEach(t),Orr=i(hl),Dy=n(hl,"P",{});var QQe=s(Dy);Vrr=r(QQe,"This class cannot be instantiated directly using "),q2e=n(QQe,"CODE",{});var Cwt=s(q2e);Xrr=r(Cwt,"__init__()"),Cwt.forEach(t),zrr=r(QQe," (throws an error)."),QQe.forEach(t),Wrr=i(hl),ut=n(hl,"DIV",{class:!0});var OA=s(ut);T(Gy.$$.fragment,OA),Qrr=i(OA),j2e=n(OA,"P",{});var wwt=s(j2e);Hrr=r(wwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wwt.forEach(t),Urr=i(OA),vd=n(OA,"P",{});var Pte=s(vd);Jrr=r(Pte,`Note:
Loading a model from its configuration file does `),D2e=n(Pte,"STRONG",{});var Awt=s(D2e);Yrr=r(Awt,"not"),Awt.forEach(t),Krr=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(Pte,"A",{href:!0});var Lwt=s(KW);Zrr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),etr=r(Pte," to load the model weights."),Pte.forEach(t),otr=i(OA),T(kF.$$.fragment,OA),OA.forEach(t),rtr=i(hl),so=n(hl,"DIV",{class:!0});var ua=s(so);T(Oy.$$.fragment,ua),ttr=i(ua),G2e=n(ua,"P",{});var ywt=s(G2e);atr=r(ywt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ywt.forEach(t),ntr=i(ua),za=n(ua,"P",{});var VA=s(za);str=r(VA,"The model class to instantiate is selected based on the "),O2e=n(VA,"CODE",{});var xwt=s(O2e);ltr=r(xwt,"model_type"),xwt.forEach(t),itr=r(VA,` property of the config object (either
passed as an argument or loaded from `),V2e=n(VA,"CODE",{});var $wt=s(V2e);dtr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),ctr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(VA,"CODE",{});var kwt=s(X2e);ftr=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),mtr=r(VA,":"),VA.forEach(t),gtr=i(ua),V=n(ua,"UL",{});var X=s(V);SF=n(X,"LI",{});var rNe=s(SF);z2e=n(rNe,"STRONG",{});var Swt=s(z2e);htr=r(Swt,"albert"),Swt.forEach(t),ptr=r(rNe," \u2014 "),ZW=n(rNe,"A",{href:!0});var Rwt=s(ZW);_tr=r(Rwt,"AlbertForQuestionAnswering"),Rwt.forEach(t),utr=r(rNe," (ALBERT model)"),rNe.forEach(t),btr=i(X),RF=n(X,"LI",{});var tNe=s(RF);W2e=n(tNe,"STRONG",{});var Pwt=s(W2e);vtr=r(Pwt,"bart"),Pwt.forEach(t),Ftr=r(tNe," \u2014 "),eQ=n(tNe,"A",{href:!0});var Bwt=s(eQ);Ttr=r(Bwt,"BartForQuestionAnswering"),Bwt.forEach(t),Mtr=r(tNe," (BART model)"),tNe.forEach(t),Etr=i(X),PF=n(X,"LI",{});var aNe=s(PF);Q2e=n(aNe,"STRONG",{});var Iwt=s(Q2e);Ctr=r(Iwt,"bert"),Iwt.forEach(t),wtr=r(aNe," \u2014 "),oQ=n(aNe,"A",{href:!0});var Nwt=s(oQ);Atr=r(Nwt,"BertForQuestionAnswering"),Nwt.forEach(t),Ltr=r(aNe," (BERT model)"),aNe.forEach(t),ytr=i(X),BF=n(X,"LI",{});var nNe=s(BF);H2e=n(nNe,"STRONG",{});var qwt=s(H2e);xtr=r(qwt,"big_bird"),qwt.forEach(t),$tr=r(nNe," \u2014 "),rQ=n(nNe,"A",{href:!0});var jwt=s(rQ);ktr=r(jwt,"BigBirdForQuestionAnswering"),jwt.forEach(t),Str=r(nNe," (BigBird model)"),nNe.forEach(t),Rtr=i(X),IF=n(X,"LI",{});var sNe=s(IF);U2e=n(sNe,"STRONG",{});var Dwt=s(U2e);Ptr=r(Dwt,"bigbird_pegasus"),Dwt.forEach(t),Btr=r(sNe," \u2014 "),tQ=n(sNe,"A",{href:!0});var Gwt=s(tQ);Itr=r(Gwt,"BigBirdPegasusForQuestionAnswering"),Gwt.forEach(t),Ntr=r(sNe," (BigBird-Pegasus model)"),sNe.forEach(t),qtr=i(X),NF=n(X,"LI",{});var lNe=s(NF);J2e=n(lNe,"STRONG",{});var Owt=s(J2e);jtr=r(Owt,"camembert"),Owt.forEach(t),Dtr=r(lNe," \u2014 "),aQ=n(lNe,"A",{href:!0});var Vwt=s(aQ);Gtr=r(Vwt,"CamembertForQuestionAnswering"),Vwt.forEach(t),Otr=r(lNe," (CamemBERT model)"),lNe.forEach(t),Vtr=i(X),qF=n(X,"LI",{});var iNe=s(qF);Y2e=n(iNe,"STRONG",{});var Xwt=s(Y2e);Xtr=r(Xwt,"canine"),Xwt.forEach(t),ztr=r(iNe," \u2014 "),nQ=n(iNe,"A",{href:!0});var zwt=s(nQ);Wtr=r(zwt,"CanineForQuestionAnswering"),zwt.forEach(t),Qtr=r(iNe," (CANINE model)"),iNe.forEach(t),Htr=i(X),jF=n(X,"LI",{});var dNe=s(jF);K2e=n(dNe,"STRONG",{});var Wwt=s(K2e);Utr=r(Wwt,"convbert"),Wwt.forEach(t),Jtr=r(dNe," \u2014 "),sQ=n(dNe,"A",{href:!0});var Qwt=s(sQ);Ytr=r(Qwt,"ConvBertForQuestionAnswering"),Qwt.forEach(t),Ktr=r(dNe," (ConvBERT model)"),dNe.forEach(t),Ztr=i(X),DF=n(X,"LI",{});var cNe=s(DF);Z2e=n(cNe,"STRONG",{});var Hwt=s(Z2e);ear=r(Hwt,"data2vec-text"),Hwt.forEach(t),oar=r(cNe," \u2014 "),lQ=n(cNe,"A",{href:!0});var Uwt=s(lQ);rar=r(Uwt,"Data2VecTextForQuestionAnswering"),Uwt.forEach(t),tar=r(cNe," (Data2VecText model)"),cNe.forEach(t),aar=i(X),GF=n(X,"LI",{});var fNe=s(GF);ebe=n(fNe,"STRONG",{});var Jwt=s(ebe);nar=r(Jwt,"deberta"),Jwt.forEach(t),sar=r(fNe," \u2014 "),iQ=n(fNe,"A",{href:!0});var Ywt=s(iQ);lar=r(Ywt,"DebertaForQuestionAnswering"),Ywt.forEach(t),iar=r(fNe," (DeBERTa model)"),fNe.forEach(t),dar=i(X),OF=n(X,"LI",{});var mNe=s(OF);obe=n(mNe,"STRONG",{});var Kwt=s(obe);car=r(Kwt,"deberta-v2"),Kwt.forEach(t),far=r(mNe," \u2014 "),dQ=n(mNe,"A",{href:!0});var Zwt=s(dQ);mar=r(Zwt,"DebertaV2ForQuestionAnswering"),Zwt.forEach(t),gar=r(mNe," (DeBERTa-v2 model)"),mNe.forEach(t),har=i(X),VF=n(X,"LI",{});var gNe=s(VF);rbe=n(gNe,"STRONG",{});var eAt=s(rbe);par=r(eAt,"distilbert"),eAt.forEach(t),_ar=r(gNe," \u2014 "),cQ=n(gNe,"A",{href:!0});var oAt=s(cQ);uar=r(oAt,"DistilBertForQuestionAnswering"),oAt.forEach(t),bar=r(gNe," (DistilBERT model)"),gNe.forEach(t),Far=i(X),XF=n(X,"LI",{});var hNe=s(XF);tbe=n(hNe,"STRONG",{});var rAt=s(tbe);Tar=r(rAt,"electra"),rAt.forEach(t),Mar=r(hNe," \u2014 "),fQ=n(hNe,"A",{href:!0});var tAt=s(fQ);Ear=r(tAt,"ElectraForQuestionAnswering"),tAt.forEach(t),Car=r(hNe," (ELECTRA model)"),hNe.forEach(t),war=i(X),zF=n(X,"LI",{});var pNe=s(zF);abe=n(pNe,"STRONG",{});var aAt=s(abe);Aar=r(aAt,"flaubert"),aAt.forEach(t),Lar=r(pNe," \u2014 "),mQ=n(pNe,"A",{href:!0});var nAt=s(mQ);yar=r(nAt,"FlaubertForQuestionAnsweringSimple"),nAt.forEach(t),xar=r(pNe," (FlauBERT model)"),pNe.forEach(t),$ar=i(X),WF=n(X,"LI",{});var _Ne=s(WF);nbe=n(_Ne,"STRONG",{});var sAt=s(nbe);kar=r(sAt,"fnet"),sAt.forEach(t),Sar=r(_Ne," \u2014 "),gQ=n(_Ne,"A",{href:!0});var lAt=s(gQ);Rar=r(lAt,"FNetForQuestionAnswering"),lAt.forEach(t),Par=r(_Ne," (FNet model)"),_Ne.forEach(t),Bar=i(X),QF=n(X,"LI",{});var uNe=s(QF);sbe=n(uNe,"STRONG",{});var iAt=s(sbe);Iar=r(iAt,"funnel"),iAt.forEach(t),Nar=r(uNe," \u2014 "),hQ=n(uNe,"A",{href:!0});var dAt=s(hQ);qar=r(dAt,"FunnelForQuestionAnswering"),dAt.forEach(t),jar=r(uNe," (Funnel Transformer model)"),uNe.forEach(t),Dar=i(X),HF=n(X,"LI",{});var bNe=s(HF);lbe=n(bNe,"STRONG",{});var cAt=s(lbe);Gar=r(cAt,"gptj"),cAt.forEach(t),Oar=r(bNe," \u2014 "),pQ=n(bNe,"A",{href:!0});var fAt=s(pQ);Var=r(fAt,"GPTJForQuestionAnswering"),fAt.forEach(t),Xar=r(bNe," (GPT-J model)"),bNe.forEach(t),zar=i(X),UF=n(X,"LI",{});var vNe=s(UF);ibe=n(vNe,"STRONG",{});var mAt=s(ibe);War=r(mAt,"ibert"),mAt.forEach(t),Qar=r(vNe," \u2014 "),_Q=n(vNe,"A",{href:!0});var gAt=s(_Q);Har=r(gAt,"IBertForQuestionAnswering"),gAt.forEach(t),Uar=r(vNe," (I-BERT model)"),vNe.forEach(t),Jar=i(X),JF=n(X,"LI",{});var FNe=s(JF);dbe=n(FNe,"STRONG",{});var hAt=s(dbe);Yar=r(hAt,"layoutlmv2"),hAt.forEach(t),Kar=r(FNe," \u2014 "),uQ=n(FNe,"A",{href:!0});var pAt=s(uQ);Zar=r(pAt,"LayoutLMv2ForQuestionAnswering"),pAt.forEach(t),enr=r(FNe," (LayoutLMv2 model)"),FNe.forEach(t),onr=i(X),YF=n(X,"LI",{});var TNe=s(YF);cbe=n(TNe,"STRONG",{});var _At=s(cbe);rnr=r(_At,"layoutlmv3"),_At.forEach(t),tnr=r(TNe," \u2014 "),bQ=n(TNe,"A",{href:!0});var uAt=s(bQ);anr=r(uAt,"LayoutLMv3ForQuestionAnswering"),uAt.forEach(t),nnr=r(TNe," (LayoutLMv3 model)"),TNe.forEach(t),snr=i(X),KF=n(X,"LI",{});var MNe=s(KF);fbe=n(MNe,"STRONG",{});var bAt=s(fbe);lnr=r(bAt,"led"),bAt.forEach(t),inr=r(MNe," \u2014 "),vQ=n(MNe,"A",{href:!0});var vAt=s(vQ);dnr=r(vAt,"LEDForQuestionAnswering"),vAt.forEach(t),cnr=r(MNe," (LED model)"),MNe.forEach(t),fnr=i(X),ZF=n(X,"LI",{});var ENe=s(ZF);mbe=n(ENe,"STRONG",{});var FAt=s(mbe);mnr=r(FAt,"longformer"),FAt.forEach(t),gnr=r(ENe," \u2014 "),FQ=n(ENe,"A",{href:!0});var TAt=s(FQ);hnr=r(TAt,"LongformerForQuestionAnswering"),TAt.forEach(t),pnr=r(ENe," (Longformer model)"),ENe.forEach(t),_nr=i(X),e6=n(X,"LI",{});var CNe=s(e6);gbe=n(CNe,"STRONG",{});var MAt=s(gbe);unr=r(MAt,"lxmert"),MAt.forEach(t),bnr=r(CNe," \u2014 "),TQ=n(CNe,"A",{href:!0});var EAt=s(TQ);vnr=r(EAt,"LxmertForQuestionAnswering"),EAt.forEach(t),Fnr=r(CNe," (LXMERT model)"),CNe.forEach(t),Tnr=i(X),o6=n(X,"LI",{});var wNe=s(o6);hbe=n(wNe,"STRONG",{});var CAt=s(hbe);Mnr=r(CAt,"mbart"),CAt.forEach(t),Enr=r(wNe," \u2014 "),MQ=n(wNe,"A",{href:!0});var wAt=s(MQ);Cnr=r(wAt,"MBartForQuestionAnswering"),wAt.forEach(t),wnr=r(wNe," (mBART model)"),wNe.forEach(t),Anr=i(X),r6=n(X,"LI",{});var ANe=s(r6);pbe=n(ANe,"STRONG",{});var AAt=s(pbe);Lnr=r(AAt,"megatron-bert"),AAt.forEach(t),ynr=r(ANe," \u2014 "),EQ=n(ANe,"A",{href:!0});var LAt=s(EQ);xnr=r(LAt,"MegatronBertForQuestionAnswering"),LAt.forEach(t),$nr=r(ANe," (Megatron-BERT model)"),ANe.forEach(t),knr=i(X),t6=n(X,"LI",{});var LNe=s(t6);_be=n(LNe,"STRONG",{});var yAt=s(_be);Snr=r(yAt,"mobilebert"),yAt.forEach(t),Rnr=r(LNe," \u2014 "),CQ=n(LNe,"A",{href:!0});var xAt=s(CQ);Pnr=r(xAt,"MobileBertForQuestionAnswering"),xAt.forEach(t),Bnr=r(LNe," (MobileBERT model)"),LNe.forEach(t),Inr=i(X),a6=n(X,"LI",{});var yNe=s(a6);ube=n(yNe,"STRONG",{});var $At=s(ube);Nnr=r($At,"mpnet"),$At.forEach(t),qnr=r(yNe," \u2014 "),wQ=n(yNe,"A",{href:!0});var kAt=s(wQ);jnr=r(kAt,"MPNetForQuestionAnswering"),kAt.forEach(t),Dnr=r(yNe," (MPNet model)"),yNe.forEach(t),Gnr=i(X),n6=n(X,"LI",{});var xNe=s(n6);bbe=n(xNe,"STRONG",{});var SAt=s(bbe);Onr=r(SAt,"mvp"),SAt.forEach(t),Vnr=r(xNe," \u2014 "),AQ=n(xNe,"A",{href:!0});var RAt=s(AQ);Xnr=r(RAt,"MvpForQuestionAnswering"),RAt.forEach(t),znr=r(xNe," (MVP model)"),xNe.forEach(t),Wnr=i(X),s6=n(X,"LI",{});var $Ne=s(s6);vbe=n($Ne,"STRONG",{});var PAt=s(vbe);Qnr=r(PAt,"nezha"),PAt.forEach(t),Hnr=r($Ne," \u2014 "),LQ=n($Ne,"A",{href:!0});var BAt=s(LQ);Unr=r(BAt,"NezhaForQuestionAnswering"),BAt.forEach(t),Jnr=r($Ne," (Nezha model)"),$Ne.forEach(t),Ynr=i(X),l6=n(X,"LI",{});var kNe=s(l6);Fbe=n(kNe,"STRONG",{});var IAt=s(Fbe);Knr=r(IAt,"nystromformer"),IAt.forEach(t),Znr=r(kNe," \u2014 "),yQ=n(kNe,"A",{href:!0});var NAt=s(yQ);esr=r(NAt,"NystromformerForQuestionAnswering"),NAt.forEach(t),osr=r(kNe," (Nystr\xF6mformer model)"),kNe.forEach(t),rsr=i(X),i6=n(X,"LI",{});var SNe=s(i6);Tbe=n(SNe,"STRONG",{});var qAt=s(Tbe);tsr=r(qAt,"qdqbert"),qAt.forEach(t),asr=r(SNe," \u2014 "),xQ=n(SNe,"A",{href:!0});var jAt=s(xQ);nsr=r(jAt,"QDQBertForQuestionAnswering"),jAt.forEach(t),ssr=r(SNe," (QDQBert model)"),SNe.forEach(t),lsr=i(X),d6=n(X,"LI",{});var RNe=s(d6);Mbe=n(RNe,"STRONG",{});var DAt=s(Mbe);isr=r(DAt,"reformer"),DAt.forEach(t),dsr=r(RNe," \u2014 "),$Q=n(RNe,"A",{href:!0});var GAt=s($Q);csr=r(GAt,"ReformerForQuestionAnswering"),GAt.forEach(t),fsr=r(RNe," (Reformer model)"),RNe.forEach(t),msr=i(X),c6=n(X,"LI",{});var PNe=s(c6);Ebe=n(PNe,"STRONG",{});var OAt=s(Ebe);gsr=r(OAt,"rembert"),OAt.forEach(t),hsr=r(PNe," \u2014 "),kQ=n(PNe,"A",{href:!0});var VAt=s(kQ);psr=r(VAt,"RemBertForQuestionAnswering"),VAt.forEach(t),_sr=r(PNe," (RemBERT model)"),PNe.forEach(t),usr=i(X),f6=n(X,"LI",{});var BNe=s(f6);Cbe=n(BNe,"STRONG",{});var XAt=s(Cbe);bsr=r(XAt,"roberta"),XAt.forEach(t),vsr=r(BNe," \u2014 "),SQ=n(BNe,"A",{href:!0});var zAt=s(SQ);Fsr=r(zAt,"RobertaForQuestionAnswering"),zAt.forEach(t),Tsr=r(BNe," (RoBERTa model)"),BNe.forEach(t),Msr=i(X),m6=n(X,"LI",{});var INe=s(m6);wbe=n(INe,"STRONG",{});var WAt=s(wbe);Esr=r(WAt,"roformer"),WAt.forEach(t),Csr=r(INe," \u2014 "),RQ=n(INe,"A",{href:!0});var QAt=s(RQ);wsr=r(QAt,"RoFormerForQuestionAnswering"),QAt.forEach(t),Asr=r(INe," (RoFormer model)"),INe.forEach(t),Lsr=i(X),g6=n(X,"LI",{});var NNe=s(g6);Abe=n(NNe,"STRONG",{});var HAt=s(Abe);ysr=r(HAt,"splinter"),HAt.forEach(t),xsr=r(NNe," \u2014 "),PQ=n(NNe,"A",{href:!0});var UAt=s(PQ);$sr=r(UAt,"SplinterForQuestionAnswering"),UAt.forEach(t),ksr=r(NNe," (Splinter model)"),NNe.forEach(t),Ssr=i(X),h6=n(X,"LI",{});var qNe=s(h6);Lbe=n(qNe,"STRONG",{});var JAt=s(Lbe);Rsr=r(JAt,"squeezebert"),JAt.forEach(t),Psr=r(qNe," \u2014 "),BQ=n(qNe,"A",{href:!0});var YAt=s(BQ);Bsr=r(YAt,"SqueezeBertForQuestionAnswering"),YAt.forEach(t),Isr=r(qNe," (SqueezeBERT model)"),qNe.forEach(t),Nsr=i(X),p6=n(X,"LI",{});var jNe=s(p6);ybe=n(jNe,"STRONG",{});var KAt=s(ybe);qsr=r(KAt,"xlm"),KAt.forEach(t),jsr=r(jNe," \u2014 "),IQ=n(jNe,"A",{href:!0});var ZAt=s(IQ);Dsr=r(ZAt,"XLMForQuestionAnsweringSimple"),ZAt.forEach(t),Gsr=r(jNe," (XLM model)"),jNe.forEach(t),Osr=i(X),_6=n(X,"LI",{});var DNe=s(_6);xbe=n(DNe,"STRONG",{});var e7t=s(xbe);Vsr=r(e7t,"xlm-roberta"),e7t.forEach(t),Xsr=r(DNe," \u2014 "),NQ=n(DNe,"A",{href:!0});var o7t=s(NQ);zsr=r(o7t,"XLMRobertaForQuestionAnswering"),o7t.forEach(t),Wsr=r(DNe," (XLM-RoBERTa model)"),DNe.forEach(t),Qsr=i(X),u6=n(X,"LI",{});var GNe=s(u6);$be=n(GNe,"STRONG",{});var r7t=s($be);Hsr=r(r7t,"xlm-roberta-xl"),r7t.forEach(t),Usr=r(GNe," \u2014 "),qQ=n(GNe,"A",{href:!0});var t7t=s(qQ);Jsr=r(t7t,"XLMRobertaXLForQuestionAnswering"),t7t.forEach(t),Ysr=r(GNe," (XLM-RoBERTa-XL model)"),GNe.forEach(t),Ksr=i(X),b6=n(X,"LI",{});var ONe=s(b6);kbe=n(ONe,"STRONG",{});var a7t=s(kbe);Zsr=r(a7t,"xlnet"),a7t.forEach(t),elr=r(ONe," \u2014 "),jQ=n(ONe,"A",{href:!0});var n7t=s(jQ);olr=r(n7t,"XLNetForQuestionAnsweringSimple"),n7t.forEach(t),rlr=r(ONe," (XLNet model)"),ONe.forEach(t),tlr=i(X),v6=n(X,"LI",{});var VNe=s(v6);Sbe=n(VNe,"STRONG",{});var s7t=s(Sbe);alr=r(s7t,"yoso"),s7t.forEach(t),nlr=r(VNe," \u2014 "),DQ=n(VNe,"A",{href:!0});var l7t=s(DQ);slr=r(l7t,"YosoForQuestionAnswering"),l7t.forEach(t),llr=r(VNe," (YOSO model)"),VNe.forEach(t),X.forEach(t),ilr=i(ua),F6=n(ua,"P",{});var XNe=s(F6);dlr=r(XNe,"The model is set in evaluation mode by default using "),Rbe=n(XNe,"CODE",{});var i7t=s(Rbe);clr=r(i7t,"model.eval()"),i7t.forEach(t),flr=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=n(XNe,"CODE",{});var d7t=s(Pbe);mlr=r(d7t,"model.train()"),d7t.forEach(t),XNe.forEach(t),glr=i(ua),T(T6.$$.fragment,ua),ua.forEach(t),hl.forEach(t),Oze=i(f),Fd=n(f,"H2",{class:!0});var HQe=s(Fd);M6=n(HQe,"A",{id:!0,class:!0,href:!0});var c7t=s(M6);Bbe=n(c7t,"SPAN",{});var f7t=s(Bbe);T(Vy.$$.fragment,f7t),f7t.forEach(t),c7t.forEach(t),hlr=i(HQe),Ibe=n(HQe,"SPAN",{});var m7t=s(Ibe);plr=r(m7t,"AutoModelForTableQuestionAnswering"),m7t.forEach(t),HQe.forEach(t),Vze=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(Xy.$$.fragment,pl),_lr=i(pl),Td=n(pl,"P",{});var Bte=s(Td);ulr=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GQ=n(Bte,"A",{href:!0});var g7t=s(GQ);blr=r(g7t,"from_pretrained()"),g7t.forEach(t),vlr=r(Bte," class method or the "),OQ=n(Bte,"A",{href:!0});var h7t=s(OQ);Flr=r(h7t,"from_config()"),h7t.forEach(t),Tlr=r(Bte,` class
method.`),Bte.forEach(t),Mlr=i(pl),zy=n(pl,"P",{});var UQe=s(zy);Elr=r(UQe,"This class cannot be instantiated directly using "),Nbe=n(UQe,"CODE",{});var p7t=s(Nbe);Clr=r(p7t,"__init__()"),p7t.forEach(t),wlr=r(UQe," (throws an error)."),UQe.forEach(t),Alr=i(pl),bt=n(pl,"DIV",{class:!0});var XA=s(bt);T(Wy.$$.fragment,XA),Llr=i(XA),qbe=n(XA,"P",{});var _7t=s(qbe);ylr=r(_7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_7t.forEach(t),xlr=i(XA),Md=n(XA,"P",{});var Ite=s(Md);$lr=r(Ite,`Note:
Loading a model from its configuration file does `),jbe=n(Ite,"STRONG",{});var u7t=s(jbe);klr=r(u7t,"not"),u7t.forEach(t),Slr=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(Ite,"A",{href:!0});var b7t=s(VQ);Rlr=r(b7t,"from_pretrained()"),b7t.forEach(t),Plr=r(Ite," to load the model weights."),Ite.forEach(t),Blr=i(XA),T(E6.$$.fragment,XA),XA.forEach(t),Ilr=i(pl),lo=n(pl,"DIV",{class:!0});var ba=s(lo);T(Qy.$$.fragment,ba),Nlr=i(ba),Dbe=n(ba,"P",{});var v7t=s(Dbe);qlr=r(v7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v7t.forEach(t),jlr=i(ba),Wa=n(ba,"P",{});var zA=s(Wa);Dlr=r(zA,"The model class to instantiate is selected based on the "),Gbe=n(zA,"CODE",{});var F7t=s(Gbe);Glr=r(F7t,"model_type"),F7t.forEach(t),Olr=r(zA,` property of the config object (either
passed as an argument or loaded from `),Obe=n(zA,"CODE",{});var T7t=s(Obe);Vlr=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),Xlr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(zA,"CODE",{});var M7t=s(Vbe);zlr=r(M7t,"pretrained_model_name_or_path"),M7t.forEach(t),Wlr=r(zA,":"),zA.forEach(t),Qlr=i(ba),Xbe=n(ba,"UL",{});var E7t=s(Xbe);C6=n(E7t,"LI",{});var zNe=s(C6);zbe=n(zNe,"STRONG",{});var C7t=s(zbe);Hlr=r(C7t,"tapas"),C7t.forEach(t),Ulr=r(zNe," \u2014 "),XQ=n(zNe,"A",{href:!0});var w7t=s(XQ);Jlr=r(w7t,"TapasForQuestionAnswering"),w7t.forEach(t),Ylr=r(zNe," (TAPAS model)"),zNe.forEach(t),E7t.forEach(t),Klr=i(ba),w6=n(ba,"P",{});var WNe=s(w6);Zlr=r(WNe,"The model is set in evaluation mode by default using "),Wbe=n(WNe,"CODE",{});var A7t=s(Wbe);eir=r(A7t,"model.eval()"),A7t.forEach(t),oir=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(WNe,"CODE",{});var L7t=s(Qbe);rir=r(L7t,"model.train()"),L7t.forEach(t),WNe.forEach(t),tir=i(ba),T(A6.$$.fragment,ba),ba.forEach(t),pl.forEach(t),Xze=i(f),Ed=n(f,"H2",{class:!0});var JQe=s(Ed);L6=n(JQe,"A",{id:!0,class:!0,href:!0});var y7t=s(L6);Hbe=n(y7t,"SPAN",{});var x7t=s(Hbe);T(Hy.$$.fragment,x7t),x7t.forEach(t),y7t.forEach(t),air=i(JQe),Ube=n(JQe,"SPAN",{});var $7t=s(Ube);nir=r($7t,"AutoModelForImageClassification"),$7t.forEach(t),JQe.forEach(t),zze=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(Uy.$$.fragment,_l),sir=i(_l),Cd=n(_l,"P",{});var Nte=s(Cd);lir=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zQ=n(Nte,"A",{href:!0});var k7t=s(zQ);iir=r(k7t,"from_pretrained()"),k7t.forEach(t),dir=r(Nte," class method or the "),WQ=n(Nte,"A",{href:!0});var S7t=s(WQ);cir=r(S7t,"from_config()"),S7t.forEach(t),fir=r(Nte,` class
method.`),Nte.forEach(t),mir=i(_l),Jy=n(_l,"P",{});var YQe=s(Jy);gir=r(YQe,"This class cannot be instantiated directly using "),Jbe=n(YQe,"CODE",{});var R7t=s(Jbe);hir=r(R7t,"__init__()"),R7t.forEach(t),pir=r(YQe," (throws an error)."),YQe.forEach(t),_ir=i(_l),vt=n(_l,"DIV",{class:!0});var WA=s(vt);T(Yy.$$.fragment,WA),uir=i(WA),Ybe=n(WA,"P",{});var P7t=s(Ybe);bir=r(P7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P7t.forEach(t),vir=i(WA),wd=n(WA,"P",{});var qte=s(wd);Fir=r(qte,`Note:
Loading a model from its configuration file does `),Kbe=n(qte,"STRONG",{});var B7t=s(Kbe);Tir=r(B7t,"not"),B7t.forEach(t),Mir=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(qte,"A",{href:!0});var I7t=s(QQ);Eir=r(I7t,"from_pretrained()"),I7t.forEach(t),Cir=r(qte," to load the model weights."),qte.forEach(t),wir=i(WA),T(y6.$$.fragment,WA),WA.forEach(t),Air=i(_l),io=n(_l,"DIV",{class:!0});var va=s(io);T(Ky.$$.fragment,va),Lir=i(va),Zbe=n(va,"P",{});var N7t=s(Zbe);yir=r(N7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N7t.forEach(t),xir=i(va),Qa=n(va,"P",{});var QA=s(Qa);$ir=r(QA,"The model class to instantiate is selected based on the "),eve=n(QA,"CODE",{});var q7t=s(eve);kir=r(q7t,"model_type"),q7t.forEach(t),Sir=r(QA,` property of the config object (either
passed as an argument or loaded from `),ove=n(QA,"CODE",{});var j7t=s(ove);Rir=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),Pir=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(QA,"CODE",{});var D7t=s(rve);Bir=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),Iir=r(QA,":"),QA.forEach(t),Nir=i(va),be=n(va,"UL",{});var Fe=s(be);x6=n(Fe,"LI",{});var QNe=s(x6);tve=n(QNe,"STRONG",{});var G7t=s(tve);qir=r(G7t,"beit"),G7t.forEach(t),jir=r(QNe," \u2014 "),HQ=n(QNe,"A",{href:!0});var O7t=s(HQ);Dir=r(O7t,"BeitForImageClassification"),O7t.forEach(t),Gir=r(QNe," (BEiT model)"),QNe.forEach(t),Oir=i(Fe),$6=n(Fe,"LI",{});var HNe=s($6);ave=n(HNe,"STRONG",{});var V7t=s(ave);Vir=r(V7t,"convnext"),V7t.forEach(t),Xir=r(HNe," \u2014 "),UQ=n(HNe,"A",{href:!0});var X7t=s(UQ);zir=r(X7t,"ConvNextForImageClassification"),X7t.forEach(t),Wir=r(HNe," (ConvNeXT model)"),HNe.forEach(t),Qir=i(Fe),k6=n(Fe,"LI",{});var UNe=s(k6);nve=n(UNe,"STRONG",{});var z7t=s(nve);Hir=r(z7t,"cvt"),z7t.forEach(t),Uir=r(UNe," \u2014 "),JQ=n(UNe,"A",{href:!0});var W7t=s(JQ);Jir=r(W7t,"CvtForImageClassification"),W7t.forEach(t),Yir=r(UNe," (CvT model)"),UNe.forEach(t),Kir=i(Fe),S6=n(Fe,"LI",{});var JNe=s(S6);sve=n(JNe,"STRONG",{});var Q7t=s(sve);Zir=r(Q7t,"data2vec-vision"),Q7t.forEach(t),edr=r(JNe," \u2014 "),YQ=n(JNe,"A",{href:!0});var H7t=s(YQ);odr=r(H7t,"Data2VecVisionForImageClassification"),H7t.forEach(t),rdr=r(JNe," (Data2VecVision model)"),JNe.forEach(t),tdr=i(Fe),Ys=n(Fe,"LI",{});var JS=s(Ys);lve=n(JS,"STRONG",{});var U7t=s(lve);adr=r(U7t,"deit"),U7t.forEach(t),ndr=r(JS," \u2014 "),KQ=n(JS,"A",{href:!0});var J7t=s(KQ);sdr=r(J7t,"DeiTForImageClassification"),J7t.forEach(t),ldr=r(JS," or "),ZQ=n(JS,"A",{href:!0});var Y7t=s(ZQ);idr=r(Y7t,"DeiTForImageClassificationWithTeacher"),Y7t.forEach(t),ddr=r(JS," (DeiT model)"),JS.forEach(t),cdr=i(Fe),R6=n(Fe,"LI",{});var YNe=s(R6);ive=n(YNe,"STRONG",{});var K7t=s(ive);fdr=r(K7t,"imagegpt"),K7t.forEach(t),mdr=r(YNe," \u2014 "),eH=n(YNe,"A",{href:!0});var Z7t=s(eH);gdr=r(Z7t,"ImageGPTForImageClassification"),Z7t.forEach(t),hdr=r(YNe," (ImageGPT model)"),YNe.forEach(t),pdr=i(Fe),Ks=n(Fe,"LI",{});var YS=s(Ks);dve=n(YS,"STRONG",{});var eLt=s(dve);_dr=r(eLt,"levit"),eLt.forEach(t),udr=r(YS," \u2014 "),oH=n(YS,"A",{href:!0});var oLt=s(oH);bdr=r(oLt,"LevitForImageClassification"),oLt.forEach(t),vdr=r(YS," or "),rH=n(YS,"A",{href:!0});var rLt=s(rH);Fdr=r(rLt,"LevitForImageClassificationWithTeacher"),rLt.forEach(t),Tdr=r(YS," (LeViT model)"),YS.forEach(t),Mdr=i(Fe),P6=n(Fe,"LI",{});var KNe=s(P6);cve=n(KNe,"STRONG",{});var tLt=s(cve);Edr=r(tLt,"mobilevit"),tLt.forEach(t),Cdr=r(KNe," \u2014 "),tH=n(KNe,"A",{href:!0});var aLt=s(tH);wdr=r(aLt,"MobileViTForImageClassification"),aLt.forEach(t),Adr=r(KNe," (MobileViT model)"),KNe.forEach(t),Ldr=i(Fe),Ft=n(Fe,"LI",{});var Bf=s(Ft);fve=n(Bf,"STRONG",{});var nLt=s(fve);ydr=r(nLt,"perceiver"),nLt.forEach(t),xdr=r(Bf," \u2014 "),aH=n(Bf,"A",{href:!0});var sLt=s(aH);$dr=r(sLt,"PerceiverForImageClassificationLearned"),sLt.forEach(t),kdr=r(Bf," or "),nH=n(Bf,"A",{href:!0});var lLt=s(nH);Sdr=r(lLt,"PerceiverForImageClassificationFourier"),lLt.forEach(t),Rdr=r(Bf," or "),sH=n(Bf,"A",{href:!0});var iLt=s(sH);Pdr=r(iLt,"PerceiverForImageClassificationConvProcessing"),iLt.forEach(t),Bdr=r(Bf," (Perceiver model)"),Bf.forEach(t),Idr=i(Fe),B6=n(Fe,"LI",{});var ZNe=s(B6);mve=n(ZNe,"STRONG",{});var dLt=s(mve);Ndr=r(dLt,"poolformer"),dLt.forEach(t),qdr=r(ZNe," \u2014 "),lH=n(ZNe,"A",{href:!0});var cLt=s(lH);jdr=r(cLt,"PoolFormerForImageClassification"),cLt.forEach(t),Ddr=r(ZNe," (PoolFormer model)"),ZNe.forEach(t),Gdr=i(Fe),I6=n(Fe,"LI",{});var eqe=s(I6);gve=n(eqe,"STRONG",{});var fLt=s(gve);Odr=r(fLt,"regnet"),fLt.forEach(t),Vdr=r(eqe," \u2014 "),iH=n(eqe,"A",{href:!0});var mLt=s(iH);Xdr=r(mLt,"RegNetForImageClassification"),mLt.forEach(t),zdr=r(eqe," (RegNet model)"),eqe.forEach(t),Wdr=i(Fe),N6=n(Fe,"LI",{});var oqe=s(N6);hve=n(oqe,"STRONG",{});var gLt=s(hve);Qdr=r(gLt,"resnet"),gLt.forEach(t),Hdr=r(oqe," \u2014 "),dH=n(oqe,"A",{href:!0});var hLt=s(dH);Udr=r(hLt,"ResNetForImageClassification"),hLt.forEach(t),Jdr=r(oqe," (ResNet model)"),oqe.forEach(t),Ydr=i(Fe),q6=n(Fe,"LI",{});var rqe=s(q6);pve=n(rqe,"STRONG",{});var pLt=s(pve);Kdr=r(pLt,"segformer"),pLt.forEach(t),Zdr=r(rqe," \u2014 "),cH=n(rqe,"A",{href:!0});var _Lt=s(cH);ecr=r(_Lt,"SegformerForImageClassification"),_Lt.forEach(t),ocr=r(rqe," (SegFormer model)"),rqe.forEach(t),rcr=i(Fe),j6=n(Fe,"LI",{});var tqe=s(j6);_ve=n(tqe,"STRONG",{});var uLt=s(_ve);tcr=r(uLt,"swin"),uLt.forEach(t),acr=r(tqe," \u2014 "),fH=n(tqe,"A",{href:!0});var bLt=s(fH);ncr=r(bLt,"SwinForImageClassification"),bLt.forEach(t),scr=r(tqe," (Swin Transformer model)"),tqe.forEach(t),lcr=i(Fe),D6=n(Fe,"LI",{});var aqe=s(D6);uve=n(aqe,"STRONG",{});var vLt=s(uve);icr=r(vLt,"swinv2"),vLt.forEach(t),dcr=r(aqe," \u2014 "),mH=n(aqe,"A",{href:!0});var FLt=s(mH);ccr=r(FLt,"Swinv2ForImageClassification"),FLt.forEach(t),fcr=r(aqe," (Swin Transformer V2 model)"),aqe.forEach(t),mcr=i(Fe),G6=n(Fe,"LI",{});var nqe=s(G6);bve=n(nqe,"STRONG",{});var TLt=s(bve);gcr=r(TLt,"van"),TLt.forEach(t),hcr=r(nqe," \u2014 "),gH=n(nqe,"A",{href:!0});var MLt=s(gH);pcr=r(MLt,"VanForImageClassification"),MLt.forEach(t),_cr=r(nqe," (VAN model)"),nqe.forEach(t),ucr=i(Fe),O6=n(Fe,"LI",{});var sqe=s(O6);vve=n(sqe,"STRONG",{});var ELt=s(vve);bcr=r(ELt,"vit"),ELt.forEach(t),vcr=r(sqe," \u2014 "),hH=n(sqe,"A",{href:!0});var CLt=s(hH);Fcr=r(CLt,"ViTForImageClassification"),CLt.forEach(t),Tcr=r(sqe," (ViT model)"),sqe.forEach(t),Fe.forEach(t),Mcr=i(va),V6=n(va,"P",{});var lqe=s(V6);Ecr=r(lqe,"The model is set in evaluation mode by default using "),Fve=n(lqe,"CODE",{});var wLt=s(Fve);Ccr=r(wLt,"model.eval()"),wLt.forEach(t),wcr=r(lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=n(lqe,"CODE",{});var ALt=s(Tve);Acr=r(ALt,"model.train()"),ALt.forEach(t),lqe.forEach(t),Lcr=i(va),T(X6.$$.fragment,va),va.forEach(t),_l.forEach(t),Wze=i(f),Ad=n(f,"H2",{class:!0});var KQe=s(Ad);z6=n(KQe,"A",{id:!0,class:!0,href:!0});var LLt=s(z6);Mve=n(LLt,"SPAN",{});var yLt=s(Mve);T(Zy.$$.fragment,yLt),yLt.forEach(t),LLt.forEach(t),ycr=i(KQe),Eve=n(KQe,"SPAN",{});var xLt=s(Eve);xcr=r(xLt,"AutoModelForVision2Seq"),xLt.forEach(t),KQe.forEach(t),Qze=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(e9.$$.fragment,ul),$cr=i(ul),Ld=n(ul,"P",{});var jte=s(Ld);kcr=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pH=n(jte,"A",{href:!0});var $Lt=s(pH);Scr=r($Lt,"from_pretrained()"),$Lt.forEach(t),Rcr=r(jte," class method or the "),_H=n(jte,"A",{href:!0});var kLt=s(_H);Pcr=r(kLt,"from_config()"),kLt.forEach(t),Bcr=r(jte,` class
method.`),jte.forEach(t),Icr=i(ul),o9=n(ul,"P",{});var ZQe=s(o9);Ncr=r(ZQe,"This class cannot be instantiated directly using "),Cve=n(ZQe,"CODE",{});var SLt=s(Cve);qcr=r(SLt,"__init__()"),SLt.forEach(t),jcr=r(ZQe," (throws an error)."),ZQe.forEach(t),Dcr=i(ul),Tt=n(ul,"DIV",{class:!0});var HA=s(Tt);T(r9.$$.fragment,HA),Gcr=i(HA),wve=n(HA,"P",{});var RLt=s(wve);Ocr=r(RLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RLt.forEach(t),Vcr=i(HA),yd=n(HA,"P",{});var Dte=s(yd);Xcr=r(Dte,`Note:
Loading a model from its configuration file does `),Ave=n(Dte,"STRONG",{});var PLt=s(Ave);zcr=r(PLt,"not"),PLt.forEach(t),Wcr=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(Dte,"A",{href:!0});var BLt=s(uH);Qcr=r(BLt,"from_pretrained()"),BLt.forEach(t),Hcr=r(Dte," to load the model weights."),Dte.forEach(t),Ucr=i(HA),T(W6.$$.fragment,HA),HA.forEach(t),Jcr=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(t9.$$.fragment,Fa),Ycr=i(Fa),Lve=n(Fa,"P",{});var ILt=s(Lve);Kcr=r(ILt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ILt.forEach(t),Zcr=i(Fa),Ha=n(Fa,"P",{});var UA=s(Ha);efr=r(UA,"The model class to instantiate is selected based on the "),yve=n(UA,"CODE",{});var NLt=s(yve);ofr=r(NLt,"model_type"),NLt.forEach(t),rfr=r(UA,` property of the config object (either
passed as an argument or loaded from `),xve=n(UA,"CODE",{});var qLt=s(xve);tfr=r(qLt,"pretrained_model_name_or_path"),qLt.forEach(t),afr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(UA,"CODE",{});var jLt=s($ve);nfr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),sfr=r(UA,":"),UA.forEach(t),lfr=i(Fa),kve=n(Fa,"UL",{});var DLt=s(kve);Q6=n(DLt,"LI",{});var iqe=s(Q6);Sve=n(iqe,"STRONG",{});var GLt=s(Sve);ifr=r(GLt,"vision-encoder-decoder"),GLt.forEach(t),dfr=r(iqe," \u2014 "),bH=n(iqe,"A",{href:!0});var OLt=s(bH);cfr=r(OLt,"VisionEncoderDecoderModel"),OLt.forEach(t),ffr=r(iqe," (Vision Encoder decoder model)"),iqe.forEach(t),DLt.forEach(t),mfr=i(Fa),H6=n(Fa,"P",{});var dqe=s(H6);gfr=r(dqe,"The model is set in evaluation mode by default using "),Rve=n(dqe,"CODE",{});var VLt=s(Rve);hfr=r(VLt,"model.eval()"),VLt.forEach(t),pfr=r(dqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(dqe,"CODE",{});var XLt=s(Pve);_fr=r(XLt,"model.train()"),XLt.forEach(t),dqe.forEach(t),ufr=i(Fa),T(U6.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),Hze=i(f),xd=n(f,"H2",{class:!0});var eHe=s(xd);J6=n(eHe,"A",{id:!0,class:!0,href:!0});var zLt=s(J6);Bve=n(zLt,"SPAN",{});var WLt=s(Bve);T(a9.$$.fragment,WLt),WLt.forEach(t),zLt.forEach(t),bfr=i(eHe),Ive=n(eHe,"SPAN",{});var QLt=s(Ive);vfr=r(QLt,"AutoModelForVisualQuestionAnswering"),QLt.forEach(t),eHe.forEach(t),Uze=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(n9.$$.fragment,bl),Ffr=i(bl),$d=n(bl,"P",{});var Gte=s($d);Tfr=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),vH=n(Gte,"A",{href:!0});var HLt=s(vH);Mfr=r(HLt,"from_pretrained()"),HLt.forEach(t),Efr=r(Gte," class method or the "),FH=n(Gte,"A",{href:!0});var ULt=s(FH);Cfr=r(ULt,"from_config()"),ULt.forEach(t),wfr=r(Gte,` class
method.`),Gte.forEach(t),Afr=i(bl),s9=n(bl,"P",{});var oHe=s(s9);Lfr=r(oHe,"This class cannot be instantiated directly using "),Nve=n(oHe,"CODE",{});var JLt=s(Nve);yfr=r(JLt,"__init__()"),JLt.forEach(t),xfr=r(oHe," (throws an error)."),oHe.forEach(t),$fr=i(bl),Mt=n(bl,"DIV",{class:!0});var JA=s(Mt);T(l9.$$.fragment,JA),kfr=i(JA),qve=n(JA,"P",{});var YLt=s(qve);Sfr=r(YLt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),YLt.forEach(t),Rfr=i(JA),kd=n(JA,"P",{});var Ote=s(kd);Pfr=r(Ote,`Note:
Loading a model from its configuration file does `),jve=n(Ote,"STRONG",{});var KLt=s(jve);Bfr=r(KLt,"not"),KLt.forEach(t),Ifr=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(Ote,"A",{href:!0});var ZLt=s(TH);Nfr=r(ZLt,"from_pretrained()"),ZLt.forEach(t),qfr=r(Ote," to load the model weights."),Ote.forEach(t),jfr=i(JA),T(Y6.$$.fragment,JA),JA.forEach(t),Dfr=i(bl),fo=n(bl,"DIV",{class:!0});var Ta=s(fo);T(i9.$$.fragment,Ta),Gfr=i(Ta),Dve=n(Ta,"P",{});var eyt=s(Dve);Ofr=r(eyt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),eyt.forEach(t),Vfr=i(Ta),Ua=n(Ta,"P",{});var YA=s(Ua);Xfr=r(YA,"The model class to instantiate is selected based on the "),Gve=n(YA,"CODE",{});var oyt=s(Gve);zfr=r(oyt,"model_type"),oyt.forEach(t),Wfr=r(YA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(YA,"CODE",{});var ryt=s(Ove);Qfr=r(ryt,"pretrained_model_name_or_path"),ryt.forEach(t),Hfr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(YA,"CODE",{});var tyt=s(Vve);Ufr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),Jfr=r(YA,":"),YA.forEach(t),Yfr=i(Ta),Xve=n(Ta,"UL",{});var ayt=s(Xve);K6=n(ayt,"LI",{});var cqe=s(K6);zve=n(cqe,"STRONG",{});var nyt=s(zve);Kfr=r(nyt,"vilt"),nyt.forEach(t),Zfr=r(cqe," \u2014 "),MH=n(cqe,"A",{href:!0});var syt=s(MH);emr=r(syt,"ViltForQuestionAnswering"),syt.forEach(t),omr=r(cqe," (ViLT model)"),cqe.forEach(t),ayt.forEach(t),rmr=i(Ta),Z6=n(Ta,"P",{});var fqe=s(Z6);tmr=r(fqe,"The model is set in evaluation mode by default using "),Wve=n(fqe,"CODE",{});var lyt=s(Wve);amr=r(lyt,"model.eval()"),lyt.forEach(t),nmr=r(fqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(fqe,"CODE",{});var iyt=s(Qve);smr=r(iyt,"model.train()"),iyt.forEach(t),fqe.forEach(t),lmr=i(Ta),T(eT.$$.fragment,Ta),Ta.forEach(t),bl.forEach(t),Jze=i(f),Sd=n(f,"H2",{class:!0});var rHe=s(Sd);oT=n(rHe,"A",{id:!0,class:!0,href:!0});var dyt=s(oT);Hve=n(dyt,"SPAN",{});var cyt=s(Hve);T(d9.$$.fragment,cyt),cyt.forEach(t),dyt.forEach(t),imr=i(rHe),Uve=n(rHe,"SPAN",{});var fyt=s(Uve);dmr=r(fyt,"AutoModelForAudioClassification"),fyt.forEach(t),rHe.forEach(t),Yze=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(c9.$$.fragment,vl),cmr=i(vl),Rd=n(vl,"P",{});var Vte=s(Rd);fmr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),EH=n(Vte,"A",{href:!0});var myt=s(EH);mmr=r(myt,"from_pretrained()"),myt.forEach(t),gmr=r(Vte," class method or the "),CH=n(Vte,"A",{href:!0});var gyt=s(CH);hmr=r(gyt,"from_config()"),gyt.forEach(t),pmr=r(Vte,` class
method.`),Vte.forEach(t),_mr=i(vl),f9=n(vl,"P",{});var tHe=s(f9);umr=r(tHe,"This class cannot be instantiated directly using "),Jve=n(tHe,"CODE",{});var hyt=s(Jve);bmr=r(hyt,"__init__()"),hyt.forEach(t),vmr=r(tHe," (throws an error)."),tHe.forEach(t),Fmr=i(vl),Et=n(vl,"DIV",{class:!0});var KA=s(Et);T(m9.$$.fragment,KA),Tmr=i(KA),Yve=n(KA,"P",{});var pyt=s(Yve);Mmr=r(pyt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pyt.forEach(t),Emr=i(KA),Pd=n(KA,"P",{});var Xte=s(Pd);Cmr=r(Xte,`Note:
Loading a model from its configuration file does `),Kve=n(Xte,"STRONG",{});var _yt=s(Kve);wmr=r(_yt,"not"),_yt.forEach(t),Amr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(Xte,"A",{href:!0});var uyt=s(wH);Lmr=r(uyt,"from_pretrained()"),uyt.forEach(t),ymr=r(Xte," to load the model weights."),Xte.forEach(t),xmr=i(KA),T(rT.$$.fragment,KA),KA.forEach(t),$mr=i(vl),mo=n(vl,"DIV",{class:!0});var Ma=s(mo);T(g9.$$.fragment,Ma),kmr=i(Ma),Zve=n(Ma,"P",{});var byt=s(Zve);Smr=r(byt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),byt.forEach(t),Rmr=i(Ma),Ja=n(Ma,"P",{});var ZA=s(Ja);Pmr=r(ZA,"The model class to instantiate is selected based on the "),e3e=n(ZA,"CODE",{});var vyt=s(e3e);Bmr=r(vyt,"model_type"),vyt.forEach(t),Imr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),o3e=n(ZA,"CODE",{});var Fyt=s(o3e);Nmr=r(Fyt,"pretrained_model_name_or_path"),Fyt.forEach(t),qmr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=n(ZA,"CODE",{});var Tyt=s(r3e);jmr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),Dmr=r(ZA,":"),ZA.forEach(t),Gmr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);tT=n(We,"LI",{});var mqe=s(tT);t3e=n(mqe,"STRONG",{});var Myt=s(t3e);Omr=r(Myt,"data2vec-audio"),Myt.forEach(t),Vmr=r(mqe," \u2014 "),AH=n(mqe,"A",{href:!0});var Eyt=s(AH);Xmr=r(Eyt,"Data2VecAudioForSequenceClassification"),Eyt.forEach(t),zmr=r(mqe," (Data2VecAudio model)"),mqe.forEach(t),Wmr=i(We),aT=n(We,"LI",{});var gqe=s(aT);a3e=n(gqe,"STRONG",{});var Cyt=s(a3e);Qmr=r(Cyt,"hubert"),Cyt.forEach(t),Hmr=r(gqe," \u2014 "),LH=n(gqe,"A",{href:!0});var wyt=s(LH);Umr=r(wyt,"HubertForSequenceClassification"),wyt.forEach(t),Jmr=r(gqe," (Hubert model)"),gqe.forEach(t),Ymr=i(We),nT=n(We,"LI",{});var hqe=s(nT);n3e=n(hqe,"STRONG",{});var Ayt=s(n3e);Kmr=r(Ayt,"sew"),Ayt.forEach(t),Zmr=r(hqe," \u2014 "),yH=n(hqe,"A",{href:!0});var Lyt=s(yH);egr=r(Lyt,"SEWForSequenceClassification"),Lyt.forEach(t),ogr=r(hqe," (SEW model)"),hqe.forEach(t),rgr=i(We),sT=n(We,"LI",{});var pqe=s(sT);s3e=n(pqe,"STRONG",{});var yyt=s(s3e);tgr=r(yyt,"sew-d"),yyt.forEach(t),agr=r(pqe," \u2014 "),xH=n(pqe,"A",{href:!0});var xyt=s(xH);ngr=r(xyt,"SEWDForSequenceClassification"),xyt.forEach(t),sgr=r(pqe," (SEW-D model)"),pqe.forEach(t),lgr=i(We),lT=n(We,"LI",{});var _qe=s(lT);l3e=n(_qe,"STRONG",{});var $yt=s(l3e);igr=r($yt,"unispeech"),$yt.forEach(t),dgr=r(_qe," \u2014 "),$H=n(_qe,"A",{href:!0});var kyt=s($H);cgr=r(kyt,"UniSpeechForSequenceClassification"),kyt.forEach(t),fgr=r(_qe," (UniSpeech model)"),_qe.forEach(t),mgr=i(We),iT=n(We,"LI",{});var uqe=s(iT);i3e=n(uqe,"STRONG",{});var Syt=s(i3e);ggr=r(Syt,"unispeech-sat"),Syt.forEach(t),hgr=r(uqe," \u2014 "),kH=n(uqe,"A",{href:!0});var Ryt=s(kH);pgr=r(Ryt,"UniSpeechSatForSequenceClassification"),Ryt.forEach(t),_gr=r(uqe," (UniSpeechSat model)"),uqe.forEach(t),ugr=i(We),dT=n(We,"LI",{});var bqe=s(dT);d3e=n(bqe,"STRONG",{});var Pyt=s(d3e);bgr=r(Pyt,"wav2vec2"),Pyt.forEach(t),vgr=r(bqe," \u2014 "),SH=n(bqe,"A",{href:!0});var Byt=s(SH);Fgr=r(Byt,"Wav2Vec2ForSequenceClassification"),Byt.forEach(t),Tgr=r(bqe," (Wav2Vec2 model)"),bqe.forEach(t),Mgr=i(We),cT=n(We,"LI",{});var vqe=s(cT);c3e=n(vqe,"STRONG",{});var Iyt=s(c3e);Egr=r(Iyt,"wav2vec2-conformer"),Iyt.forEach(t),Cgr=r(vqe," \u2014 "),RH=n(vqe,"A",{href:!0});var Nyt=s(RH);wgr=r(Nyt,"Wav2Vec2ConformerForSequenceClassification"),Nyt.forEach(t),Agr=r(vqe," (Wav2Vec2-Conformer model)"),vqe.forEach(t),Lgr=i(We),fT=n(We,"LI",{});var Fqe=s(fT);f3e=n(Fqe,"STRONG",{});var qyt=s(f3e);ygr=r(qyt,"wavlm"),qyt.forEach(t),xgr=r(Fqe," \u2014 "),PH=n(Fqe,"A",{href:!0});var jyt=s(PH);$gr=r(jyt,"WavLMForSequenceClassification"),jyt.forEach(t),kgr=r(Fqe," (WavLM model)"),Fqe.forEach(t),We.forEach(t),Sgr=i(Ma),mT=n(Ma,"P",{});var Tqe=s(mT);Rgr=r(Tqe,"The model is set in evaluation mode by default using "),m3e=n(Tqe,"CODE",{});var Dyt=s(m3e);Pgr=r(Dyt,"model.eval()"),Dyt.forEach(t),Bgr=r(Tqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g3e=n(Tqe,"CODE",{});var Gyt=s(g3e);Igr=r(Gyt,"model.train()"),Gyt.forEach(t),Tqe.forEach(t),Ngr=i(Ma),T(gT.$$.fragment,Ma),Ma.forEach(t),vl.forEach(t),Kze=i(f),Bd=n(f,"H2",{class:!0});var aHe=s(Bd);hT=n(aHe,"A",{id:!0,class:!0,href:!0});var Oyt=s(hT);h3e=n(Oyt,"SPAN",{});var Vyt=s(h3e);T(h9.$$.fragment,Vyt),Vyt.forEach(t),Oyt.forEach(t),qgr=i(aHe),p3e=n(aHe,"SPAN",{});var Xyt=s(p3e);jgr=r(Xyt,"AutoModelForAudioFrameClassification"),Xyt.forEach(t),aHe.forEach(t),Zze=i(f),Qo=n(f,"DIV",{class:!0});var Fl=s(Qo);T(p9.$$.fragment,Fl),Dgr=i(Fl),Id=n(Fl,"P",{});var zte=s(Id);Ggr=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),BH=n(zte,"A",{href:!0});var zyt=s(BH);Ogr=r(zyt,"from_pretrained()"),zyt.forEach(t),Vgr=r(zte," class method or the "),IH=n(zte,"A",{href:!0});var Wyt=s(IH);Xgr=r(Wyt,"from_config()"),Wyt.forEach(t),zgr=r(zte,` class
method.`),zte.forEach(t),Wgr=i(Fl),_9=n(Fl,"P",{});var nHe=s(_9);Qgr=r(nHe,"This class cannot be instantiated directly using "),_3e=n(nHe,"CODE",{});var Qyt=s(_3e);Hgr=r(Qyt,"__init__()"),Qyt.forEach(t),Ugr=r(nHe," (throws an error)."),nHe.forEach(t),Jgr=i(Fl),Ct=n(Fl,"DIV",{class:!0});var e7=s(Ct);T(u9.$$.fragment,e7),Ygr=i(e7),u3e=n(e7,"P",{});var Hyt=s(u3e);Kgr=r(Hyt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hyt.forEach(t),Zgr=i(e7),Nd=n(e7,"P",{});var Wte=s(Nd);ehr=r(Wte,`Note:
Loading a model from its configuration file does `),b3e=n(Wte,"STRONG",{});var Uyt=s(b3e);ohr=r(Uyt,"not"),Uyt.forEach(t),rhr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(Wte,"A",{href:!0});var Jyt=s(NH);thr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),ahr=r(Wte," to load the model weights."),Wte.forEach(t),nhr=i(e7),T(pT.$$.fragment,e7),e7.forEach(t),shr=i(Fl),go=n(Fl,"DIV",{class:!0});var Ea=s(go);T(b9.$$.fragment,Ea),lhr=i(Ea),v3e=n(Ea,"P",{});var Yyt=s(v3e);ihr=r(Yyt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yyt.forEach(t),dhr=i(Ea),Ya=n(Ea,"P",{});var o7=s(Ya);chr=r(o7,"The model class to instantiate is selected based on the "),F3e=n(o7,"CODE",{});var Kyt=s(F3e);fhr=r(Kyt,"model_type"),Kyt.forEach(t),mhr=r(o7,` property of the config object (either
passed as an argument or loaded from `),T3e=n(o7,"CODE",{});var Zyt=s(T3e);ghr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),hhr=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M3e=n(o7,"CODE",{});var e9t=s(M3e);phr=r(e9t,"pretrained_model_name_or_path"),e9t.forEach(t),_hr=r(o7,":"),o7.forEach(t),uhr=i(Ea),rt=n(Ea,"UL",{});var Tl=s(rt);_T=n(Tl,"LI",{});var Mqe=s(_T);E3e=n(Mqe,"STRONG",{});var o9t=s(E3e);bhr=r(o9t,"data2vec-audio"),o9t.forEach(t),vhr=r(Mqe," \u2014 "),qH=n(Mqe,"A",{href:!0});var r9t=s(qH);Fhr=r(r9t,"Data2VecAudioForAudioFrameClassification"),r9t.forEach(t),Thr=r(Mqe," (Data2VecAudio model)"),Mqe.forEach(t),Mhr=i(Tl),uT=n(Tl,"LI",{});var Eqe=s(uT);C3e=n(Eqe,"STRONG",{});var t9t=s(C3e);Ehr=r(t9t,"unispeech-sat"),t9t.forEach(t),Chr=r(Eqe," \u2014 "),jH=n(Eqe,"A",{href:!0});var a9t=s(jH);whr=r(a9t,"UniSpeechSatForAudioFrameClassification"),a9t.forEach(t),Ahr=r(Eqe," (UniSpeechSat model)"),Eqe.forEach(t),Lhr=i(Tl),bT=n(Tl,"LI",{});var Cqe=s(bT);w3e=n(Cqe,"STRONG",{});var n9t=s(w3e);yhr=r(n9t,"wav2vec2"),n9t.forEach(t),xhr=r(Cqe," \u2014 "),DH=n(Cqe,"A",{href:!0});var s9t=s(DH);$hr=r(s9t,"Wav2Vec2ForAudioFrameClassification"),s9t.forEach(t),khr=r(Cqe," (Wav2Vec2 model)"),Cqe.forEach(t),Shr=i(Tl),vT=n(Tl,"LI",{});var wqe=s(vT);A3e=n(wqe,"STRONG",{});var l9t=s(A3e);Rhr=r(l9t,"wav2vec2-conformer"),l9t.forEach(t),Phr=r(wqe," \u2014 "),GH=n(wqe,"A",{href:!0});var i9t=s(GH);Bhr=r(i9t,"Wav2Vec2ConformerForAudioFrameClassification"),i9t.forEach(t),Ihr=r(wqe," (Wav2Vec2-Conformer model)"),wqe.forEach(t),Nhr=i(Tl),FT=n(Tl,"LI",{});var Aqe=s(FT);L3e=n(Aqe,"STRONG",{});var d9t=s(L3e);qhr=r(d9t,"wavlm"),d9t.forEach(t),jhr=r(Aqe," \u2014 "),OH=n(Aqe,"A",{href:!0});var c9t=s(OH);Dhr=r(c9t,"WavLMForAudioFrameClassification"),c9t.forEach(t),Ghr=r(Aqe," (WavLM model)"),Aqe.forEach(t),Tl.forEach(t),Ohr=i(Ea),TT=n(Ea,"P",{});var Lqe=s(TT);Vhr=r(Lqe,"The model is set in evaluation mode by default using "),y3e=n(Lqe,"CODE",{});var f9t=s(y3e);Xhr=r(f9t,"model.eval()"),f9t.forEach(t),zhr=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x3e=n(Lqe,"CODE",{});var m9t=s(x3e);Whr=r(m9t,"model.train()"),m9t.forEach(t),Lqe.forEach(t),Qhr=i(Ea),T(MT.$$.fragment,Ea),Ea.forEach(t),Fl.forEach(t),eWe=i(f),qd=n(f,"H2",{class:!0});var sHe=s(qd);ET=n(sHe,"A",{id:!0,class:!0,href:!0});var g9t=s(ET);$3e=n(g9t,"SPAN",{});var h9t=s($3e);T(v9.$$.fragment,h9t),h9t.forEach(t),g9t.forEach(t),Hhr=i(sHe),k3e=n(sHe,"SPAN",{});var p9t=s(k3e);Uhr=r(p9t,"AutoModelForCTC"),p9t.forEach(t),sHe.forEach(t),oWe=i(f),Ho=n(f,"DIV",{class:!0});var Ml=s(Ho);T(F9.$$.fragment,Ml),Jhr=i(Ml),jd=n(Ml,"P",{});var Qte=s(jd);Yhr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VH=n(Qte,"A",{href:!0});var _9t=s(VH);Khr=r(_9t,"from_pretrained()"),_9t.forEach(t),Zhr=r(Qte," class method or the "),XH=n(Qte,"A",{href:!0});var u9t=s(XH);epr=r(u9t,"from_config()"),u9t.forEach(t),opr=r(Qte,` class
method.`),Qte.forEach(t),rpr=i(Ml),T9=n(Ml,"P",{});var lHe=s(T9);tpr=r(lHe,"This class cannot be instantiated directly using "),S3e=n(lHe,"CODE",{});var b9t=s(S3e);apr=r(b9t,"__init__()"),b9t.forEach(t),npr=r(lHe," (throws an error)."),lHe.forEach(t),spr=i(Ml),wt=n(Ml,"DIV",{class:!0});var r7=s(wt);T(M9.$$.fragment,r7),lpr=i(r7),R3e=n(r7,"P",{});var v9t=s(R3e);ipr=r(v9t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),v9t.forEach(t),dpr=i(r7),Dd=n(r7,"P",{});var Hte=s(Dd);cpr=r(Hte,`Note:
Loading a model from its configuration file does `),P3e=n(Hte,"STRONG",{});var F9t=s(P3e);fpr=r(F9t,"not"),F9t.forEach(t),mpr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(Hte,"A",{href:!0});var T9t=s(zH);gpr=r(T9t,"from_pretrained()"),T9t.forEach(t),hpr=r(Hte," to load the model weights."),Hte.forEach(t),ppr=i(r7),T(CT.$$.fragment,r7),r7.forEach(t),_pr=i(Ml),ho=n(Ml,"DIV",{class:!0});var Ca=s(ho);T(E9.$$.fragment,Ca),upr=i(Ca),B3e=n(Ca,"P",{});var M9t=s(B3e);bpr=r(M9t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),M9t.forEach(t),vpr=i(Ca),Ka=n(Ca,"P",{});var t7=s(Ka);Fpr=r(t7,"The model class to instantiate is selected based on the "),I3e=n(t7,"CODE",{});var E9t=s(I3e);Tpr=r(E9t,"model_type"),E9t.forEach(t),Mpr=r(t7,` property of the config object (either
passed as an argument or loaded from `),N3e=n(t7,"CODE",{});var C9t=s(N3e);Epr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),Cpr=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q3e=n(t7,"CODE",{});var w9t=s(q3e);wpr=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),Apr=r(t7,":"),t7.forEach(t),Lpr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);wT=n(Be,"LI",{});var yqe=s(wT);j3e=n(yqe,"STRONG",{});var A9t=s(j3e);ypr=r(A9t,"data2vec-audio"),A9t.forEach(t),xpr=r(yqe," \u2014 "),WH=n(yqe,"A",{href:!0});var L9t=s(WH);$pr=r(L9t,"Data2VecAudioForCTC"),L9t.forEach(t),kpr=r(yqe," (Data2VecAudio model)"),yqe.forEach(t),Spr=i(Be),AT=n(Be,"LI",{});var xqe=s(AT);D3e=n(xqe,"STRONG",{});var y9t=s(D3e);Rpr=r(y9t,"hubert"),y9t.forEach(t),Ppr=r(xqe," \u2014 "),QH=n(xqe,"A",{href:!0});var x9t=s(QH);Bpr=r(x9t,"HubertForCTC"),x9t.forEach(t),Ipr=r(xqe," (Hubert model)"),xqe.forEach(t),Npr=i(Be),LT=n(Be,"LI",{});var $qe=s(LT);G3e=n($qe,"STRONG",{});var $9t=s(G3e);qpr=r($9t,"mctct"),$9t.forEach(t),jpr=r($qe," \u2014 "),HH=n($qe,"A",{href:!0});var k9t=s(HH);Dpr=r(k9t,"MCTCTForCTC"),k9t.forEach(t),Gpr=r($qe," (M-CTC-T model)"),$qe.forEach(t),Opr=i(Be),yT=n(Be,"LI",{});var kqe=s(yT);O3e=n(kqe,"STRONG",{});var S9t=s(O3e);Vpr=r(S9t,"sew"),S9t.forEach(t),Xpr=r(kqe," \u2014 "),UH=n(kqe,"A",{href:!0});var R9t=s(UH);zpr=r(R9t,"SEWForCTC"),R9t.forEach(t),Wpr=r(kqe," (SEW model)"),kqe.forEach(t),Qpr=i(Be),xT=n(Be,"LI",{});var Sqe=s(xT);V3e=n(Sqe,"STRONG",{});var P9t=s(V3e);Hpr=r(P9t,"sew-d"),P9t.forEach(t),Upr=r(Sqe," \u2014 "),JH=n(Sqe,"A",{href:!0});var B9t=s(JH);Jpr=r(B9t,"SEWDForCTC"),B9t.forEach(t),Ypr=r(Sqe," (SEW-D model)"),Sqe.forEach(t),Kpr=i(Be),$T=n(Be,"LI",{});var Rqe=s($T);X3e=n(Rqe,"STRONG",{});var I9t=s(X3e);Zpr=r(I9t,"unispeech"),I9t.forEach(t),e_r=r(Rqe," \u2014 "),YH=n(Rqe,"A",{href:!0});var N9t=s(YH);o_r=r(N9t,"UniSpeechForCTC"),N9t.forEach(t),r_r=r(Rqe," (UniSpeech model)"),Rqe.forEach(t),t_r=i(Be),kT=n(Be,"LI",{});var Pqe=s(kT);z3e=n(Pqe,"STRONG",{});var q9t=s(z3e);a_r=r(q9t,"unispeech-sat"),q9t.forEach(t),n_r=r(Pqe," \u2014 "),KH=n(Pqe,"A",{href:!0});var j9t=s(KH);s_r=r(j9t,"UniSpeechSatForCTC"),j9t.forEach(t),l_r=r(Pqe," (UniSpeechSat model)"),Pqe.forEach(t),i_r=i(Be),ST=n(Be,"LI",{});var Bqe=s(ST);W3e=n(Bqe,"STRONG",{});var D9t=s(W3e);d_r=r(D9t,"wav2vec2"),D9t.forEach(t),c_r=r(Bqe," \u2014 "),ZH=n(Bqe,"A",{href:!0});var G9t=s(ZH);f_r=r(G9t,"Wav2Vec2ForCTC"),G9t.forEach(t),m_r=r(Bqe," (Wav2Vec2 model)"),Bqe.forEach(t),g_r=i(Be),RT=n(Be,"LI",{});var Iqe=s(RT);Q3e=n(Iqe,"STRONG",{});var O9t=s(Q3e);h_r=r(O9t,"wav2vec2-conformer"),O9t.forEach(t),p_r=r(Iqe," \u2014 "),eU=n(Iqe,"A",{href:!0});var V9t=s(eU);__r=r(V9t,"Wav2Vec2ConformerForCTC"),V9t.forEach(t),u_r=r(Iqe," (Wav2Vec2-Conformer model)"),Iqe.forEach(t),b_r=i(Be),PT=n(Be,"LI",{});var Nqe=s(PT);H3e=n(Nqe,"STRONG",{});var X9t=s(H3e);v_r=r(X9t,"wavlm"),X9t.forEach(t),F_r=r(Nqe," \u2014 "),oU=n(Nqe,"A",{href:!0});var z9t=s(oU);T_r=r(z9t,"WavLMForCTC"),z9t.forEach(t),M_r=r(Nqe," (WavLM model)"),Nqe.forEach(t),Be.forEach(t),E_r=i(Ca),BT=n(Ca,"P",{});var qqe=s(BT);C_r=r(qqe,"The model is set in evaluation mode by default using "),U3e=n(qqe,"CODE",{});var W9t=s(U3e);w_r=r(W9t,"model.eval()"),W9t.forEach(t),A_r=r(qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J3e=n(qqe,"CODE",{});var Q9t=s(J3e);L_r=r(Q9t,"model.train()"),Q9t.forEach(t),qqe.forEach(t),y_r=i(Ca),T(IT.$$.fragment,Ca),Ca.forEach(t),Ml.forEach(t),rWe=i(f),Gd=n(f,"H2",{class:!0});var iHe=s(Gd);NT=n(iHe,"A",{id:!0,class:!0,href:!0});var H9t=s(NT);Y3e=n(H9t,"SPAN",{});var U9t=s(Y3e);T(C9.$$.fragment,U9t),U9t.forEach(t),H9t.forEach(t),x_r=i(iHe),K3e=n(iHe,"SPAN",{});var J9t=s(K3e);$_r=r(J9t,"AutoModelForSpeechSeq2Seq"),J9t.forEach(t),iHe.forEach(t),tWe=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T(w9.$$.fragment,El),k_r=i(El),Od=n(El,"P",{});var Ute=s(Od);S_r=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rU=n(Ute,"A",{href:!0});var Y9t=s(rU);R_r=r(Y9t,"from_pretrained()"),Y9t.forEach(t),P_r=r(Ute," class method or the "),tU=n(Ute,"A",{href:!0});var K9t=s(tU);B_r=r(K9t,"from_config()"),K9t.forEach(t),I_r=r(Ute,` class
method.`),Ute.forEach(t),N_r=i(El),A9=n(El,"P",{});var dHe=s(A9);q_r=r(dHe,"This class cannot be instantiated directly using "),Z3e=n(dHe,"CODE",{});var Z9t=s(Z3e);j_r=r(Z9t,"__init__()"),Z9t.forEach(t),D_r=r(dHe," (throws an error)."),dHe.forEach(t),G_r=i(El),At=n(El,"DIV",{class:!0});var a7=s(At);T(L9.$$.fragment,a7),O_r=i(a7),eFe=n(a7,"P",{});var ext=s(eFe);V_r=r(ext,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ext.forEach(t),X_r=i(a7),Vd=n(a7,"P",{});var Jte=s(Vd);z_r=r(Jte,`Note:
Loading a model from its configuration file does `),oFe=n(Jte,"STRONG",{});var oxt=s(oFe);W_r=r(oxt,"not"),oxt.forEach(t),Q_r=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Jte,"A",{href:!0});var rxt=s(aU);H_r=r(rxt,"from_pretrained()"),rxt.forEach(t),U_r=r(Jte," to load the model weights."),Jte.forEach(t),J_r=i(a7),T(qT.$$.fragment,a7),a7.forEach(t),Y_r=i(El),po=n(El,"DIV",{class:!0});var wa=s(po);T(y9.$$.fragment,wa),K_r=i(wa),rFe=n(wa,"P",{});var txt=s(rFe);Z_r=r(txt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),txt.forEach(t),eur=i(wa),Za=n(wa,"P",{});var n7=s(Za);our=r(n7,"The model class to instantiate is selected based on the "),tFe=n(n7,"CODE",{});var axt=s(tFe);rur=r(axt,"model_type"),axt.forEach(t),tur=r(n7,` property of the config object (either
passed as an argument or loaded from `),aFe=n(n7,"CODE",{});var nxt=s(aFe);aur=r(nxt,"pretrained_model_name_or_path"),nxt.forEach(t),nur=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(n7,"CODE",{});var sxt=s(nFe);sur=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),lur=r(n7,":"),n7.forEach(t),iur=i(wa),x9=n(wa,"UL",{});var cHe=s(x9);jT=n(cHe,"LI",{});var jqe=s(jT);sFe=n(jqe,"STRONG",{});var lxt=s(sFe);dur=r(lxt,"speech-encoder-decoder"),lxt.forEach(t),cur=r(jqe," \u2014 "),nU=n(jqe,"A",{href:!0});var ixt=s(nU);fur=r(ixt,"SpeechEncoderDecoderModel"),ixt.forEach(t),mur=r(jqe," (Speech Encoder decoder model)"),jqe.forEach(t),gur=i(cHe),DT=n(cHe,"LI",{});var Dqe=s(DT);lFe=n(Dqe,"STRONG",{});var dxt=s(lFe);hur=r(dxt,"speech_to_text"),dxt.forEach(t),pur=r(Dqe," \u2014 "),sU=n(Dqe,"A",{href:!0});var cxt=s(sU);_ur=r(cxt,"Speech2TextForConditionalGeneration"),cxt.forEach(t),uur=r(Dqe," (Speech2Text model)"),Dqe.forEach(t),cHe.forEach(t),bur=i(wa),GT=n(wa,"P",{});var Gqe=s(GT);vur=r(Gqe,"The model is set in evaluation mode by default using "),iFe=n(Gqe,"CODE",{});var fxt=s(iFe);Fur=r(fxt,"model.eval()"),fxt.forEach(t),Tur=r(Gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dFe=n(Gqe,"CODE",{});var mxt=s(dFe);Mur=r(mxt,"model.train()"),mxt.forEach(t),Gqe.forEach(t),Eur=i(wa),T(OT.$$.fragment,wa),wa.forEach(t),El.forEach(t),aWe=i(f),Xd=n(f,"H2",{class:!0});var fHe=s(Xd);VT=n(fHe,"A",{id:!0,class:!0,href:!0});var gxt=s(VT);cFe=n(gxt,"SPAN",{});var hxt=s(cFe);T($9.$$.fragment,hxt),hxt.forEach(t),gxt.forEach(t),Cur=i(fHe),fFe=n(fHe,"SPAN",{});var pxt=s(fFe);wur=r(pxt,"AutoModelForAudioXVector"),pxt.forEach(t),fHe.forEach(t),nWe=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(k9.$$.fragment,Cl),Aur=i(Cl),zd=n(Cl,"P",{});var Yte=s(zd);Lur=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lU=n(Yte,"A",{href:!0});var _xt=s(lU);yur=r(_xt,"from_pretrained()"),_xt.forEach(t),xur=r(Yte," class method or the "),iU=n(Yte,"A",{href:!0});var uxt=s(iU);$ur=r(uxt,"from_config()"),uxt.forEach(t),kur=r(Yte,` class
method.`),Yte.forEach(t),Sur=i(Cl),S9=n(Cl,"P",{});var mHe=s(S9);Rur=r(mHe,"This class cannot be instantiated directly using "),mFe=n(mHe,"CODE",{});var bxt=s(mFe);Pur=r(bxt,"__init__()"),bxt.forEach(t),Bur=r(mHe," (throws an error)."),mHe.forEach(t),Iur=i(Cl),Lt=n(Cl,"DIV",{class:!0});var s7=s(Lt);T(R9.$$.fragment,s7),Nur=i(s7),gFe=n(s7,"P",{});var vxt=s(gFe);qur=r(vxt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vxt.forEach(t),jur=i(s7),Wd=n(s7,"P",{});var Kte=s(Wd);Dur=r(Kte,`Note:
Loading a model from its configuration file does `),hFe=n(Kte,"STRONG",{});var Fxt=s(hFe);Gur=r(Fxt,"not"),Fxt.forEach(t),Our=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(Kte,"A",{href:!0});var Txt=s(dU);Vur=r(Txt,"from_pretrained()"),Txt.forEach(t),Xur=r(Kte," to load the model weights."),Kte.forEach(t),zur=i(s7),T(XT.$$.fragment,s7),s7.forEach(t),Wur=i(Cl),_o=n(Cl,"DIV",{class:!0});var Aa=s(_o);T(P9.$$.fragment,Aa),Qur=i(Aa),pFe=n(Aa,"P",{});var Mxt=s(pFe);Hur=r(Mxt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mxt.forEach(t),Uur=i(Aa),en=n(Aa,"P",{});var l7=s(en);Jur=r(l7,"The model class to instantiate is selected based on the "),_Fe=n(l7,"CODE",{});var Ext=s(_Fe);Yur=r(Ext,"model_type"),Ext.forEach(t),Kur=r(l7,` property of the config object (either
passed as an argument or loaded from `),uFe=n(l7,"CODE",{});var Cxt=s(uFe);Zur=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),e1r=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(l7,"CODE",{});var wxt=s(bFe);o1r=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),r1r=r(l7,":"),l7.forEach(t),t1r=i(Aa),tt=n(Aa,"UL",{});var wl=s(tt);zT=n(wl,"LI",{});var Oqe=s(zT);vFe=n(Oqe,"STRONG",{});var Axt=s(vFe);a1r=r(Axt,"data2vec-audio"),Axt.forEach(t),n1r=r(Oqe," \u2014 "),cU=n(Oqe,"A",{href:!0});var Lxt=s(cU);s1r=r(Lxt,"Data2VecAudioForXVector"),Lxt.forEach(t),l1r=r(Oqe," (Data2VecAudio model)"),Oqe.forEach(t),i1r=i(wl),WT=n(wl,"LI",{});var Vqe=s(WT);FFe=n(Vqe,"STRONG",{});var yxt=s(FFe);d1r=r(yxt,"unispeech-sat"),yxt.forEach(t),c1r=r(Vqe," \u2014 "),fU=n(Vqe,"A",{href:!0});var xxt=s(fU);f1r=r(xxt,"UniSpeechSatForXVector"),xxt.forEach(t),m1r=r(Vqe," (UniSpeechSat model)"),Vqe.forEach(t),g1r=i(wl),QT=n(wl,"LI",{});var Xqe=s(QT);TFe=n(Xqe,"STRONG",{});var $xt=s(TFe);h1r=r($xt,"wav2vec2"),$xt.forEach(t),p1r=r(Xqe," \u2014 "),mU=n(Xqe,"A",{href:!0});var kxt=s(mU);_1r=r(kxt,"Wav2Vec2ForXVector"),kxt.forEach(t),u1r=r(Xqe," (Wav2Vec2 model)"),Xqe.forEach(t),b1r=i(wl),HT=n(wl,"LI",{});var zqe=s(HT);MFe=n(zqe,"STRONG",{});var Sxt=s(MFe);v1r=r(Sxt,"wav2vec2-conformer"),Sxt.forEach(t),F1r=r(zqe," \u2014 "),gU=n(zqe,"A",{href:!0});var Rxt=s(gU);T1r=r(Rxt,"Wav2Vec2ConformerForXVector"),Rxt.forEach(t),M1r=r(zqe," (Wav2Vec2-Conformer model)"),zqe.forEach(t),E1r=i(wl),UT=n(wl,"LI",{});var Wqe=s(UT);EFe=n(Wqe,"STRONG",{});var Pxt=s(EFe);C1r=r(Pxt,"wavlm"),Pxt.forEach(t),w1r=r(Wqe," \u2014 "),hU=n(Wqe,"A",{href:!0});var Bxt=s(hU);A1r=r(Bxt,"WavLMForXVector"),Bxt.forEach(t),L1r=r(Wqe," (WavLM model)"),Wqe.forEach(t),wl.forEach(t),y1r=i(Aa),JT=n(Aa,"P",{});var Qqe=s(JT);x1r=r(Qqe,"The model is set in evaluation mode by default using "),CFe=n(Qqe,"CODE",{});var Ixt=s(CFe);$1r=r(Ixt,"model.eval()"),Ixt.forEach(t),k1r=r(Qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=n(Qqe,"CODE",{});var Nxt=s(wFe);S1r=r(Nxt,"model.train()"),Nxt.forEach(t),Qqe.forEach(t),R1r=i(Aa),T(YT.$$.fragment,Aa),Aa.forEach(t),Cl.forEach(t),sWe=i(f),Qd=n(f,"H2",{class:!0});var gHe=s(Qd);KT=n(gHe,"A",{id:!0,class:!0,href:!0});var qxt=s(KT);AFe=n(qxt,"SPAN",{});var jxt=s(AFe);T(B9.$$.fragment,jxt),jxt.forEach(t),qxt.forEach(t),P1r=i(gHe),LFe=n(gHe,"SPAN",{});var Dxt=s(LFe);B1r=r(Dxt,"AutoModelForMaskedImageModeling"),Dxt.forEach(t),gHe.forEach(t),lWe=i(f),Yo=n(f,"DIV",{class:!0});var Al=s(Yo);T(I9.$$.fragment,Al),I1r=i(Al),Hd=n(Al,"P",{});var Zte=s(Hd);N1r=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pU=n(Zte,"A",{href:!0});var Gxt=s(pU);q1r=r(Gxt,"from_pretrained()"),Gxt.forEach(t),j1r=r(Zte," class method or the "),_U=n(Zte,"A",{href:!0});var Oxt=s(_U);D1r=r(Oxt,"from_config()"),Oxt.forEach(t),G1r=r(Zte,` class
method.`),Zte.forEach(t),O1r=i(Al),N9=n(Al,"P",{});var hHe=s(N9);V1r=r(hHe,"This class cannot be instantiated directly using "),yFe=n(hHe,"CODE",{});var Vxt=s(yFe);X1r=r(Vxt,"__init__()"),Vxt.forEach(t),z1r=r(hHe," (throws an error)."),hHe.forEach(t),W1r=i(Al),yt=n(Al,"DIV",{class:!0});var i7=s(yt);T(q9.$$.fragment,i7),Q1r=i(i7),xFe=n(i7,"P",{});var Xxt=s(xFe);H1r=r(Xxt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xxt.forEach(t),U1r=i(i7),Ud=n(i7,"P",{});var eae=s(Ud);J1r=r(eae,`Note:
Loading a model from its configuration file does `),$Fe=n(eae,"STRONG",{});var zxt=s($Fe);Y1r=r(zxt,"not"),zxt.forEach(t),K1r=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(eae,"A",{href:!0});var Wxt=s(uU);Z1r=r(Wxt,"from_pretrained()"),Wxt.forEach(t),e2r=r(eae," to load the model weights."),eae.forEach(t),o2r=i(i7),T(ZT.$$.fragment,i7),i7.forEach(t),r2r=i(Al),uo=n(Al,"DIV",{class:!0});var La=s(uo);T(j9.$$.fragment,La),t2r=i(La),kFe=n(La,"P",{});var Qxt=s(kFe);a2r=r(Qxt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qxt.forEach(t),n2r=i(La),on=n(La,"P",{});var d7=s(on);s2r=r(d7,"The model class to instantiate is selected based on the "),SFe=n(d7,"CODE",{});var Hxt=s(SFe);l2r=r(Hxt,"model_type"),Hxt.forEach(t),i2r=r(d7,` property of the config object (either
passed as an argument or loaded from `),RFe=n(d7,"CODE",{});var Uxt=s(RFe);d2r=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),c2r=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(d7,"CODE",{});var Jxt=s(PFe);f2r=r(Jxt,"pretrained_model_name_or_path"),Jxt.forEach(t),m2r=r(d7,":"),d7.forEach(t),g2r=i(La),rn=n(La,"UL",{});var c7=s(rn);e8=n(c7,"LI",{});var Hqe=s(e8);BFe=n(Hqe,"STRONG",{});var Yxt=s(BFe);h2r=r(Yxt,"deit"),Yxt.forEach(t),p2r=r(Hqe," \u2014 "),bU=n(Hqe,"A",{href:!0});var Kxt=s(bU);_2r=r(Kxt,"DeiTForMaskedImageModeling"),Kxt.forEach(t),u2r=r(Hqe," (DeiT model)"),Hqe.forEach(t),b2r=i(c7),o8=n(c7,"LI",{});var Uqe=s(o8);IFe=n(Uqe,"STRONG",{});var Zxt=s(IFe);v2r=r(Zxt,"swin"),Zxt.forEach(t),F2r=r(Uqe," \u2014 "),vU=n(Uqe,"A",{href:!0});var e$t=s(vU);T2r=r(e$t,"SwinForMaskedImageModeling"),e$t.forEach(t),M2r=r(Uqe," (Swin Transformer model)"),Uqe.forEach(t),E2r=i(c7),r8=n(c7,"LI",{});var Jqe=s(r8);NFe=n(Jqe,"STRONG",{});var o$t=s(NFe);C2r=r(o$t,"swinv2"),o$t.forEach(t),w2r=r(Jqe," \u2014 "),FU=n(Jqe,"A",{href:!0});var r$t=s(FU);A2r=r(r$t,"Swinv2ForMaskedImageModeling"),r$t.forEach(t),L2r=r(Jqe," (Swin Transformer V2 model)"),Jqe.forEach(t),y2r=i(c7),t8=n(c7,"LI",{});var Yqe=s(t8);qFe=n(Yqe,"STRONG",{});var t$t=s(qFe);x2r=r(t$t,"vit"),t$t.forEach(t),$2r=r(Yqe," \u2014 "),TU=n(Yqe,"A",{href:!0});var a$t=s(TU);k2r=r(a$t,"ViTForMaskedImageModeling"),a$t.forEach(t),S2r=r(Yqe," (ViT model)"),Yqe.forEach(t),c7.forEach(t),R2r=i(La),a8=n(La,"P",{});var Kqe=s(a8);P2r=r(Kqe,"The model is set in evaluation mode by default using "),jFe=n(Kqe,"CODE",{});var n$t=s(jFe);B2r=r(n$t,"model.eval()"),n$t.forEach(t),I2r=r(Kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),DFe=n(Kqe,"CODE",{});var s$t=s(DFe);N2r=r(s$t,"model.train()"),s$t.forEach(t),Kqe.forEach(t),q2r=i(La),T(n8.$$.fragment,La),La.forEach(t),Al.forEach(t),iWe=i(f),Jd=n(f,"H2",{class:!0});var pHe=s(Jd);s8=n(pHe,"A",{id:!0,class:!0,href:!0});var l$t=s(s8);GFe=n(l$t,"SPAN",{});var i$t=s(GFe);T(D9.$$.fragment,i$t),i$t.forEach(t),l$t.forEach(t),j2r=i(pHe),OFe=n(pHe,"SPAN",{});var d$t=s(OFe);D2r=r(d$t,"AutoModelForObjectDetection"),d$t.forEach(t),pHe.forEach(t),dWe=i(f),Ko=n(f,"DIV",{class:!0});var Ll=s(Ko);T(G9.$$.fragment,Ll),G2r=i(Ll),Yd=n(Ll,"P",{});var oae=s(Yd);O2r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),MU=n(oae,"A",{href:!0});var c$t=s(MU);V2r=r(c$t,"from_pretrained()"),c$t.forEach(t),X2r=r(oae," class method or the "),EU=n(oae,"A",{href:!0});var f$t=s(EU);z2r=r(f$t,"from_config()"),f$t.forEach(t),W2r=r(oae,` class
method.`),oae.forEach(t),Q2r=i(Ll),O9=n(Ll,"P",{});var _He=s(O9);H2r=r(_He,"This class cannot be instantiated directly using "),VFe=n(_He,"CODE",{});var m$t=s(VFe);U2r=r(m$t,"__init__()"),m$t.forEach(t),J2r=r(_He," (throws an error)."),_He.forEach(t),Y2r=i(Ll),xt=n(Ll,"DIV",{class:!0});var f7=s(xt);T(V9.$$.fragment,f7),K2r=i(f7),XFe=n(f7,"P",{});var g$t=s(XFe);Z2r=r(g$t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),g$t.forEach(t),ebr=i(f7),Kd=n(f7,"P",{});var rae=s(Kd);obr=r(rae,`Note:
Loading a model from its configuration file does `),zFe=n(rae,"STRONG",{});var h$t=s(zFe);rbr=r(h$t,"not"),h$t.forEach(t),tbr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(rae,"A",{href:!0});var p$t=s(CU);abr=r(p$t,"from_pretrained()"),p$t.forEach(t),nbr=r(rae," to load the model weights."),rae.forEach(t),sbr=i(f7),T(l8.$$.fragment,f7),f7.forEach(t),lbr=i(Ll),bo=n(Ll,"DIV",{class:!0});var ya=s(bo);T(X9.$$.fragment,ya),ibr=i(ya),WFe=n(ya,"P",{});var _$t=s(WFe);dbr=r(_$t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_$t.forEach(t),cbr=i(ya),tn=n(ya,"P",{});var m7=s(tn);fbr=r(m7,"The model class to instantiate is selected based on the "),QFe=n(m7,"CODE",{});var u$t=s(QFe);mbr=r(u$t,"model_type"),u$t.forEach(t),gbr=r(m7,` property of the config object (either
passed as an argument or loaded from `),HFe=n(m7,"CODE",{});var b$t=s(HFe);hbr=r(b$t,"pretrained_model_name_or_path"),b$t.forEach(t),pbr=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(m7,"CODE",{});var v$t=s(UFe);_br=r(v$t,"pretrained_model_name_or_path"),v$t.forEach(t),ubr=r(m7,":"),m7.forEach(t),bbr=i(ya),z9=n(ya,"UL",{});var uHe=s(z9);i8=n(uHe,"LI",{});var Zqe=s(i8);JFe=n(Zqe,"STRONG",{});var F$t=s(JFe);vbr=r(F$t,"detr"),F$t.forEach(t),Fbr=r(Zqe," \u2014 "),wU=n(Zqe,"A",{href:!0});var T$t=s(wU);Tbr=r(T$t,"DetrForObjectDetection"),T$t.forEach(t),Mbr=r(Zqe," (DETR model)"),Zqe.forEach(t),Ebr=i(uHe),d8=n(uHe,"LI",{});var eje=s(d8);YFe=n(eje,"STRONG",{});var M$t=s(YFe);Cbr=r(M$t,"yolos"),M$t.forEach(t),wbr=r(eje," \u2014 "),AU=n(eje,"A",{href:!0});var E$t=s(AU);Abr=r(E$t,"YolosForObjectDetection"),E$t.forEach(t),Lbr=r(eje," (YOLOS model)"),eje.forEach(t),uHe.forEach(t),ybr=i(ya),c8=n(ya,"P",{});var oje=s(c8);xbr=r(oje,"The model is set in evaluation mode by default using "),KFe=n(oje,"CODE",{});var C$t=s(KFe);$br=r(C$t,"model.eval()"),C$t.forEach(t),kbr=r(oje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZFe=n(oje,"CODE",{});var w$t=s(ZFe);Sbr=r(w$t,"model.train()"),w$t.forEach(t),oje.forEach(t),Rbr=i(ya),T(f8.$$.fragment,ya),ya.forEach(t),Ll.forEach(t),cWe=i(f),Zd=n(f,"H2",{class:!0});var bHe=s(Zd);m8=n(bHe,"A",{id:!0,class:!0,href:!0});var A$t=s(m8);e6e=n(A$t,"SPAN",{});var L$t=s(e6e);T(W9.$$.fragment,L$t),L$t.forEach(t),A$t.forEach(t),Pbr=i(bHe),o6e=n(bHe,"SPAN",{});var y$t=s(o6e);Bbr=r(y$t,"AutoModelForImageSegmentation"),y$t.forEach(t),bHe.forEach(t),fWe=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(Q9.$$.fragment,yl),Ibr=i(yl),ec=n(yl,"P",{});var tae=s(ec);Nbr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),LU=n(tae,"A",{href:!0});var x$t=s(LU);qbr=r(x$t,"from_pretrained()"),x$t.forEach(t),jbr=r(tae," class method or the "),yU=n(tae,"A",{href:!0});var $$t=s(yU);Dbr=r($$t,"from_config()"),$$t.forEach(t),Gbr=r(tae,` class
method.`),tae.forEach(t),Obr=i(yl),H9=n(yl,"P",{});var vHe=s(H9);Vbr=r(vHe,"This class cannot be instantiated directly using "),r6e=n(vHe,"CODE",{});var k$t=s(r6e);Xbr=r(k$t,"__init__()"),k$t.forEach(t),zbr=r(vHe," (throws an error)."),vHe.forEach(t),Wbr=i(yl),$t=n(yl,"DIV",{class:!0});var g7=s($t);T(U9.$$.fragment,g7),Qbr=i(g7),t6e=n(g7,"P",{});var S$t=s(t6e);Hbr=r(S$t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),S$t.forEach(t),Ubr=i(g7),oc=n(g7,"P",{});var aae=s(oc);Jbr=r(aae,`Note:
Loading a model from its configuration file does `),a6e=n(aae,"STRONG",{});var R$t=s(a6e);Ybr=r(R$t,"not"),R$t.forEach(t),Kbr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(aae,"A",{href:!0});var P$t=s(xU);Zbr=r(P$t,"from_pretrained()"),P$t.forEach(t),evr=r(aae," to load the model weights."),aae.forEach(t),ovr=i(g7),T(g8.$$.fragment,g7),g7.forEach(t),rvr=i(yl),vo=n(yl,"DIV",{class:!0});var xa=s(vo);T(J9.$$.fragment,xa),tvr=i(xa),n6e=n(xa,"P",{});var B$t=s(n6e);avr=r(B$t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),B$t.forEach(t),nvr=i(xa),an=n(xa,"P",{});var h7=s(an);svr=r(h7,"The model class to instantiate is selected based on the "),s6e=n(h7,"CODE",{});var I$t=s(s6e);lvr=r(I$t,"model_type"),I$t.forEach(t),ivr=r(h7,` property of the config object (either
passed as an argument or loaded from `),l6e=n(h7,"CODE",{});var N$t=s(l6e);dvr=r(N$t,"pretrained_model_name_or_path"),N$t.forEach(t),cvr=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(h7,"CODE",{});var q$t=s(i6e);fvr=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),mvr=r(h7,":"),h7.forEach(t),gvr=i(xa),d6e=n(xa,"UL",{});var j$t=s(d6e);h8=n(j$t,"LI",{});var rje=s(h8);c6e=n(rje,"STRONG",{});var D$t=s(c6e);hvr=r(D$t,"detr"),D$t.forEach(t),pvr=r(rje," \u2014 "),$U=n(rje,"A",{href:!0});var G$t=s($U);_vr=r(G$t,"DetrForSegmentation"),G$t.forEach(t),uvr=r(rje," (DETR model)"),rje.forEach(t),j$t.forEach(t),bvr=i(xa),p8=n(xa,"P",{});var tje=s(p8);vvr=r(tje,"The model is set in evaluation mode by default using "),f6e=n(tje,"CODE",{});var O$t=s(f6e);Fvr=r(O$t,"model.eval()"),O$t.forEach(t),Tvr=r(tje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m6e=n(tje,"CODE",{});var V$t=s(m6e);Mvr=r(V$t,"model.train()"),V$t.forEach(t),tje.forEach(t),Evr=i(xa),T(_8.$$.fragment,xa),xa.forEach(t),yl.forEach(t),mWe=i(f),rc=n(f,"H2",{class:!0});var FHe=s(rc);u8=n(FHe,"A",{id:!0,class:!0,href:!0});var X$t=s(u8);g6e=n(X$t,"SPAN",{});var z$t=s(g6e);T(Y9.$$.fragment,z$t),z$t.forEach(t),X$t.forEach(t),Cvr=i(FHe),h6e=n(FHe,"SPAN",{});var W$t=s(h6e);wvr=r(W$t,"AutoModelForSemanticSegmentation"),W$t.forEach(t),FHe.forEach(t),gWe=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(K9.$$.fragment,xl),Avr=i(xl),tc=n(xl,"P",{});var nae=s(tc);Lvr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),kU=n(nae,"A",{href:!0});var Q$t=s(kU);yvr=r(Q$t,"from_pretrained()"),Q$t.forEach(t),xvr=r(nae," class method or the "),SU=n(nae,"A",{href:!0});var H$t=s(SU);$vr=r(H$t,"from_config()"),H$t.forEach(t),kvr=r(nae,` class
method.`),nae.forEach(t),Svr=i(xl),Z9=n(xl,"P",{});var THe=s(Z9);Rvr=r(THe,"This class cannot be instantiated directly using "),p6e=n(THe,"CODE",{});var U$t=s(p6e);Pvr=r(U$t,"__init__()"),U$t.forEach(t),Bvr=r(THe," (throws an error)."),THe.forEach(t),Ivr=i(xl),kt=n(xl,"DIV",{class:!0});var p7=s(kt);T(ex.$$.fragment,p7),Nvr=i(p7),_6e=n(p7,"P",{});var J$t=s(_6e);qvr=r(J$t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),J$t.forEach(t),jvr=i(p7),ac=n(p7,"P",{});var sae=s(ac);Dvr=r(sae,`Note:
Loading a model from its configuration file does `),u6e=n(sae,"STRONG",{});var Y$t=s(u6e);Gvr=r(Y$t,"not"),Y$t.forEach(t),Ovr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(sae,"A",{href:!0});var K$t=s(RU);Vvr=r(K$t,"from_pretrained()"),K$t.forEach(t),Xvr=r(sae," to load the model weights."),sae.forEach(t),zvr=i(p7),T(b8.$$.fragment,p7),p7.forEach(t),Wvr=i(xl),Fo=n(xl,"DIV",{class:!0});var $a=s(Fo);T(ox.$$.fragment,$a),Qvr=i($a),b6e=n($a,"P",{});var Z$t=s(b6e);Hvr=r(Z$t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Z$t.forEach(t),Uvr=i($a),nn=n($a,"P",{});var _7=s(nn);Jvr=r(_7,"The model class to instantiate is selected based on the "),v6e=n(_7,"CODE",{});var ekt=s(v6e);Yvr=r(ekt,"model_type"),ekt.forEach(t),Kvr=r(_7,` property of the config object (either
passed as an argument or loaded from `),F6e=n(_7,"CODE",{});var okt=s(F6e);Zvr=r(okt,"pretrained_model_name_or_path"),okt.forEach(t),e3r=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(_7,"CODE",{});var rkt=s(T6e);o3r=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),r3r=r(_7,":"),_7.forEach(t),t3r=i($a),at=n($a,"UL",{});var $l=s(at);v8=n($l,"LI",{});var aje=s(v8);M6e=n(aje,"STRONG",{});var tkt=s(M6e);a3r=r(tkt,"beit"),tkt.forEach(t),n3r=r(aje," \u2014 "),PU=n(aje,"A",{href:!0});var akt=s(PU);s3r=r(akt,"BeitForSemanticSegmentation"),akt.forEach(t),l3r=r(aje," (BEiT model)"),aje.forEach(t),i3r=i($l),F8=n($l,"LI",{});var nje=s(F8);E6e=n(nje,"STRONG",{});var nkt=s(E6e);d3r=r(nkt,"data2vec-vision"),nkt.forEach(t),c3r=r(nje," \u2014 "),BU=n(nje,"A",{href:!0});var skt=s(BU);f3r=r(skt,"Data2VecVisionForSemanticSegmentation"),skt.forEach(t),m3r=r(nje," (Data2VecVision model)"),nje.forEach(t),g3r=i($l),T8=n($l,"LI",{});var sje=s(T8);C6e=n(sje,"STRONG",{});var lkt=s(C6e);h3r=r(lkt,"dpt"),lkt.forEach(t),p3r=r(sje," \u2014 "),IU=n(sje,"A",{href:!0});var ikt=s(IU);_3r=r(ikt,"DPTForSemanticSegmentation"),ikt.forEach(t),u3r=r(sje," (DPT model)"),sje.forEach(t),b3r=i($l),M8=n($l,"LI",{});var lje=s(M8);w6e=n(lje,"STRONG",{});var dkt=s(w6e);v3r=r(dkt,"mobilevit"),dkt.forEach(t),F3r=r(lje," \u2014 "),NU=n(lje,"A",{href:!0});var ckt=s(NU);T3r=r(ckt,"MobileViTForSemanticSegmentation"),ckt.forEach(t),M3r=r(lje," (MobileViT model)"),lje.forEach(t),E3r=i($l),E8=n($l,"LI",{});var ije=s(E8);A6e=n(ije,"STRONG",{});var fkt=s(A6e);C3r=r(fkt,"segformer"),fkt.forEach(t),w3r=r(ije," \u2014 "),qU=n(ije,"A",{href:!0});var mkt=s(qU);A3r=r(mkt,"SegformerForSemanticSegmentation"),mkt.forEach(t),L3r=r(ije," (SegFormer model)"),ije.forEach(t),$l.forEach(t),y3r=i($a),C8=n($a,"P",{});var dje=s(C8);x3r=r(dje,"The model is set in evaluation mode by default using "),L6e=n(dje,"CODE",{});var gkt=s(L6e);$3r=r(gkt,"model.eval()"),gkt.forEach(t),k3r=r(dje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y6e=n(dje,"CODE",{});var hkt=s(y6e);S3r=r(hkt,"model.train()"),hkt.forEach(t),dje.forEach(t),R3r=i($a),T(w8.$$.fragment,$a),$a.forEach(t),xl.forEach(t),hWe=i(f),nc=n(f,"H2",{class:!0});var MHe=s(nc);A8=n(MHe,"A",{id:!0,class:!0,href:!0});var pkt=s(A8);x6e=n(pkt,"SPAN",{});var _kt=s(x6e);T(rx.$$.fragment,_kt),_kt.forEach(t),pkt.forEach(t),P3r=i(MHe),$6e=n(MHe,"SPAN",{});var ukt=s($6e);B3r=r(ukt,"AutoModelForInstanceSegmentation"),ukt.forEach(t),MHe.forEach(t),pWe=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(tx.$$.fragment,kl),I3r=i(kl),sc=n(kl,"P",{});var lae=s(sc);N3r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),jU=n(lae,"A",{href:!0});var bkt=s(jU);q3r=r(bkt,"from_pretrained()"),bkt.forEach(t),j3r=r(lae," class method or the "),DU=n(lae,"A",{href:!0});var vkt=s(DU);D3r=r(vkt,"from_config()"),vkt.forEach(t),G3r=r(lae,` class
method.`),lae.forEach(t),O3r=i(kl),ax=n(kl,"P",{});var EHe=s(ax);V3r=r(EHe,"This class cannot be instantiated directly using "),k6e=n(EHe,"CODE",{});var Fkt=s(k6e);X3r=r(Fkt,"__init__()"),Fkt.forEach(t),z3r=r(EHe," (throws an error)."),EHe.forEach(t),W3r=i(kl),St=n(kl,"DIV",{class:!0});var u7=s(St);T(nx.$$.fragment,u7),Q3r=i(u7),S6e=n(u7,"P",{});var Tkt=s(S6e);H3r=r(Tkt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tkt.forEach(t),U3r=i(u7),lc=n(u7,"P",{});var iae=s(lc);J3r=r(iae,`Note:
Loading a model from its configuration file does `),R6e=n(iae,"STRONG",{});var Mkt=s(R6e);Y3r=r(Mkt,"not"),Mkt.forEach(t),K3r=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(iae,"A",{href:!0});var Ekt=s(GU);Z3r=r(Ekt,"from_pretrained()"),Ekt.forEach(t),eFr=r(iae," to load the model weights."),iae.forEach(t),oFr=i(u7),T(L8.$$.fragment,u7),u7.forEach(t),rFr=i(kl),To=n(kl,"DIV",{class:!0});var ka=s(To);T(sx.$$.fragment,ka),tFr=i(ka),P6e=n(ka,"P",{});var Ckt=s(P6e);aFr=r(Ckt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ckt.forEach(t),nFr=i(ka),sn=n(ka,"P",{});var b7=s(sn);sFr=r(b7,"The model class to instantiate is selected based on the "),B6e=n(b7,"CODE",{});var wkt=s(B6e);lFr=r(wkt,"model_type"),wkt.forEach(t),iFr=r(b7,` property of the config object (either
passed as an argument or loaded from `),I6e=n(b7,"CODE",{});var Akt=s(I6e);dFr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),cFr=r(b7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(b7,"CODE",{});var Lkt=s(N6e);fFr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),mFr=r(b7,":"),b7.forEach(t),gFr=i(ka),q6e=n(ka,"UL",{});var ykt=s(q6e);y8=n(ykt,"LI",{});var cje=s(y8);j6e=n(cje,"STRONG",{});var xkt=s(j6e);hFr=r(xkt,"maskformer"),xkt.forEach(t),pFr=r(cje," \u2014 "),OU=n(cje,"A",{href:!0});var $kt=s(OU);_Fr=r($kt,"MaskFormerForInstanceSegmentation"),$kt.forEach(t),uFr=r(cje," (MaskFormer model)"),cje.forEach(t),ykt.forEach(t),bFr=i(ka),x8=n(ka,"P",{});var fje=s(x8);vFr=r(fje,"The model is set in evaluation mode by default using "),D6e=n(fje,"CODE",{});var kkt=s(D6e);FFr=r(kkt,"model.eval()"),kkt.forEach(t),TFr=r(fje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G6e=n(fje,"CODE",{});var Skt=s(G6e);MFr=r(Skt,"model.train()"),Skt.forEach(t),fje.forEach(t),EFr=i(ka),T($8.$$.fragment,ka),ka.forEach(t),kl.forEach(t),_We=i(f),ic=n(f,"H2",{class:!0});var CHe=s(ic);k8=n(CHe,"A",{id:!0,class:!0,href:!0});var Rkt=s(k8);O6e=n(Rkt,"SPAN",{});var Pkt=s(O6e);T(lx.$$.fragment,Pkt),Pkt.forEach(t),Rkt.forEach(t),CFr=i(CHe),V6e=n(CHe,"SPAN",{});var Bkt=s(V6e);wFr=r(Bkt,"TFAutoModel"),Bkt.forEach(t),CHe.forEach(t),uWe=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(ix.$$.fragment,Sl),AFr=i(Sl),dc=n(Sl,"P",{});var dae=s(dc);LFr=r(dae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VU=n(dae,"A",{href:!0});var Ikt=s(VU);yFr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),xFr=r(dae," class method or the "),XU=n(dae,"A",{href:!0});var Nkt=s(XU);$Fr=r(Nkt,"from_config()"),Nkt.forEach(t),kFr=r(dae,` class
method.`),dae.forEach(t),SFr=i(Sl),dx=n(Sl,"P",{});var wHe=s(dx);RFr=r(wHe,"This class cannot be instantiated directly using "),X6e=n(wHe,"CODE",{});var qkt=s(X6e);PFr=r(qkt,"__init__()"),qkt.forEach(t),BFr=r(wHe," (throws an error)."),wHe.forEach(t),IFr=i(Sl),Rt=n(Sl,"DIV",{class:!0});var v7=s(Rt);T(cx.$$.fragment,v7),NFr=i(v7),z6e=n(v7,"P",{});var jkt=s(z6e);qFr=r(jkt,"Instantiates one of the base model classes of the library from a configuration."),jkt.forEach(t),jFr=i(v7),cc=n(v7,"P",{});var cae=s(cc);DFr=r(cae,`Note:
Loading a model from its configuration file does `),W6e=n(cae,"STRONG",{});var Dkt=s(W6e);GFr=r(Dkt,"not"),Dkt.forEach(t),OFr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(cae,"A",{href:!0});var Gkt=s(zU);VFr=r(Gkt,"from_pretrained()"),Gkt.forEach(t),XFr=r(cae," to load the model weights."),cae.forEach(t),zFr=i(v7),T(S8.$$.fragment,v7),v7.forEach(t),WFr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(fx.$$.fragment,Rl),QFr=i(Rl),Q6e=n(Rl,"P",{});var Okt=s(Q6e);HFr=r(Okt,"Instantiate one of the base model classes of the library from a pretrained model."),Okt.forEach(t),UFr=i(Rl),ln=n(Rl,"P",{});var F7=s(ln);JFr=r(F7,"The model class to instantiate is selected based on the "),H6e=n(F7,"CODE",{});var Vkt=s(H6e);YFr=r(Vkt,"model_type"),Vkt.forEach(t),KFr=r(F7,` property of the config object (either
passed as an argument or loaded from `),U6e=n(F7,"CODE",{});var Xkt=s(U6e);ZFr=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),e6r=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(F7,"CODE",{});var zkt=s(J6e);o6r=r(zkt,"pretrained_model_name_or_path"),zkt.forEach(t),r6r=r(F7,":"),F7.forEach(t),t6r=i(Rl),I=n(Rl,"UL",{});var D=s(I);R8=n(D,"LI",{});var mje=s(R8);Y6e=n(mje,"STRONG",{});var Wkt=s(Y6e);a6r=r(Wkt,"albert"),Wkt.forEach(t),n6r=r(mje," \u2014 "),WU=n(mje,"A",{href:!0});var Qkt=s(WU);s6r=r(Qkt,"TFAlbertModel"),Qkt.forEach(t),l6r=r(mje," (ALBERT model)"),mje.forEach(t),i6r=i(D),P8=n(D,"LI",{});var gje=s(P8);K6e=n(gje,"STRONG",{});var Hkt=s(K6e);d6r=r(Hkt,"bart"),Hkt.forEach(t),c6r=r(gje," \u2014 "),QU=n(gje,"A",{href:!0});var Ukt=s(QU);f6r=r(Ukt,"TFBartModel"),Ukt.forEach(t),m6r=r(gje," (BART model)"),gje.forEach(t),g6r=i(D),B8=n(D,"LI",{});var hje=s(B8);Z6e=n(hje,"STRONG",{});var Jkt=s(Z6e);h6r=r(Jkt,"bert"),Jkt.forEach(t),p6r=r(hje," \u2014 "),HU=n(hje,"A",{href:!0});var Ykt=s(HU);_6r=r(Ykt,"TFBertModel"),Ykt.forEach(t),u6r=r(hje," (BERT model)"),hje.forEach(t),b6r=i(D),I8=n(D,"LI",{});var pje=s(I8);eTe=n(pje,"STRONG",{});var Kkt=s(eTe);v6r=r(Kkt,"blenderbot"),Kkt.forEach(t),F6r=r(pje," \u2014 "),UU=n(pje,"A",{href:!0});var Zkt=s(UU);T6r=r(Zkt,"TFBlenderbotModel"),Zkt.forEach(t),M6r=r(pje," (Blenderbot model)"),pje.forEach(t),E6r=i(D),N8=n(D,"LI",{});var _je=s(N8);oTe=n(_je,"STRONG",{});var eSt=s(oTe);C6r=r(eSt,"blenderbot-small"),eSt.forEach(t),w6r=r(_je," \u2014 "),JU=n(_je,"A",{href:!0});var oSt=s(JU);A6r=r(oSt,"TFBlenderbotSmallModel"),oSt.forEach(t),L6r=r(_je," (BlenderbotSmall model)"),_je.forEach(t),y6r=i(D),q8=n(D,"LI",{});var uje=s(q8);rTe=n(uje,"STRONG",{});var rSt=s(rTe);x6r=r(rSt,"camembert"),rSt.forEach(t),$6r=r(uje," \u2014 "),YU=n(uje,"A",{href:!0});var tSt=s(YU);k6r=r(tSt,"TFCamembertModel"),tSt.forEach(t),S6r=r(uje," (CamemBERT model)"),uje.forEach(t),R6r=i(D),j8=n(D,"LI",{});var bje=s(j8);tTe=n(bje,"STRONG",{});var aSt=s(tTe);P6r=r(aSt,"clip"),aSt.forEach(t),B6r=r(bje," \u2014 "),KU=n(bje,"A",{href:!0});var nSt=s(KU);I6r=r(nSt,"TFCLIPModel"),nSt.forEach(t),N6r=r(bje," (CLIP model)"),bje.forEach(t),q6r=i(D),D8=n(D,"LI",{});var vje=s(D8);aTe=n(vje,"STRONG",{});var sSt=s(aTe);j6r=r(sSt,"convbert"),sSt.forEach(t),D6r=r(vje," \u2014 "),ZU=n(vje,"A",{href:!0});var lSt=s(ZU);G6r=r(lSt,"TFConvBertModel"),lSt.forEach(t),O6r=r(vje," (ConvBERT model)"),vje.forEach(t),V6r=i(D),G8=n(D,"LI",{});var Fje=s(G8);nTe=n(Fje,"STRONG",{});var iSt=s(nTe);X6r=r(iSt,"convnext"),iSt.forEach(t),z6r=r(Fje," \u2014 "),eJ=n(Fje,"A",{href:!0});var dSt=s(eJ);W6r=r(dSt,"TFConvNextModel"),dSt.forEach(t),Q6r=r(Fje," (ConvNeXT model)"),Fje.forEach(t),H6r=i(D),O8=n(D,"LI",{});var Tje=s(O8);sTe=n(Tje,"STRONG",{});var cSt=s(sTe);U6r=r(cSt,"ctrl"),cSt.forEach(t),J6r=r(Tje," \u2014 "),oJ=n(Tje,"A",{href:!0});var fSt=s(oJ);Y6r=r(fSt,"TFCTRLModel"),fSt.forEach(t),K6r=r(Tje," (CTRL model)"),Tje.forEach(t),Z6r=i(D),V8=n(D,"LI",{});var Mje=s(V8);lTe=n(Mje,"STRONG",{});var mSt=s(lTe);eTr=r(mSt,"data2vec-vision"),mSt.forEach(t),oTr=r(Mje," \u2014 "),rJ=n(Mje,"A",{href:!0});var gSt=s(rJ);rTr=r(gSt,"TFData2VecVisionModel"),gSt.forEach(t),tTr=r(Mje," (Data2VecVision model)"),Mje.forEach(t),aTr=i(D),X8=n(D,"LI",{});var Eje=s(X8);iTe=n(Eje,"STRONG",{});var hSt=s(iTe);nTr=r(hSt,"deberta"),hSt.forEach(t),sTr=r(Eje," \u2014 "),tJ=n(Eje,"A",{href:!0});var pSt=s(tJ);lTr=r(pSt,"TFDebertaModel"),pSt.forEach(t),iTr=r(Eje," (DeBERTa model)"),Eje.forEach(t),dTr=i(D),z8=n(D,"LI",{});var Cje=s(z8);dTe=n(Cje,"STRONG",{});var _St=s(dTe);cTr=r(_St,"deberta-v2"),_St.forEach(t),fTr=r(Cje," \u2014 "),aJ=n(Cje,"A",{href:!0});var uSt=s(aJ);mTr=r(uSt,"TFDebertaV2Model"),uSt.forEach(t),gTr=r(Cje," (DeBERTa-v2 model)"),Cje.forEach(t),hTr=i(D),W8=n(D,"LI",{});var wje=s(W8);cTe=n(wje,"STRONG",{});var bSt=s(cTe);pTr=r(bSt,"deit"),bSt.forEach(t),_Tr=r(wje," \u2014 "),nJ=n(wje,"A",{href:!0});var vSt=s(nJ);uTr=r(vSt,"TFDeiTModel"),vSt.forEach(t),bTr=r(wje," (DeiT model)"),wje.forEach(t),vTr=i(D),Q8=n(D,"LI",{});var Aje=s(Q8);fTe=n(Aje,"STRONG",{});var FSt=s(fTe);FTr=r(FSt,"distilbert"),FSt.forEach(t),TTr=r(Aje," \u2014 "),sJ=n(Aje,"A",{href:!0});var TSt=s(sJ);MTr=r(TSt,"TFDistilBertModel"),TSt.forEach(t),ETr=r(Aje," (DistilBERT model)"),Aje.forEach(t),CTr=i(D),H8=n(D,"LI",{});var Lje=s(H8);mTe=n(Lje,"STRONG",{});var MSt=s(mTe);wTr=r(MSt,"dpr"),MSt.forEach(t),ATr=r(Lje," \u2014 "),lJ=n(Lje,"A",{href:!0});var ESt=s(lJ);LTr=r(ESt,"TFDPRQuestionEncoder"),ESt.forEach(t),yTr=r(Lje," (DPR model)"),Lje.forEach(t),xTr=i(D),U8=n(D,"LI",{});var yje=s(U8);gTe=n(yje,"STRONG",{});var CSt=s(gTe);$Tr=r(CSt,"electra"),CSt.forEach(t),kTr=r(yje," \u2014 "),iJ=n(yje,"A",{href:!0});var wSt=s(iJ);STr=r(wSt,"TFElectraModel"),wSt.forEach(t),RTr=r(yje," (ELECTRA model)"),yje.forEach(t),PTr=i(D),J8=n(D,"LI",{});var xje=s(J8);hTe=n(xje,"STRONG",{});var ASt=s(hTe);BTr=r(ASt,"flaubert"),ASt.forEach(t),ITr=r(xje," \u2014 "),dJ=n(xje,"A",{href:!0});var LSt=s(dJ);NTr=r(LSt,"TFFlaubertModel"),LSt.forEach(t),qTr=r(xje," (FlauBERT model)"),xje.forEach(t),jTr=i(D),Zs=n(D,"LI",{});var KS=s(Zs);pTe=n(KS,"STRONG",{});var ySt=s(pTe);DTr=r(ySt,"funnel"),ySt.forEach(t),GTr=r(KS," \u2014 "),cJ=n(KS,"A",{href:!0});var xSt=s(cJ);OTr=r(xSt,"TFFunnelModel"),xSt.forEach(t),VTr=r(KS," or "),fJ=n(KS,"A",{href:!0});var $St=s(fJ);XTr=r($St,"TFFunnelBaseModel"),$St.forEach(t),zTr=r(KS," (Funnel Transformer model)"),KS.forEach(t),WTr=i(D),Y8=n(D,"LI",{});var $je=s(Y8);_Te=n($je,"STRONG",{});var kSt=s(_Te);QTr=r(kSt,"gpt2"),kSt.forEach(t),HTr=r($je," \u2014 "),mJ=n($je,"A",{href:!0});var SSt=s(mJ);UTr=r(SSt,"TFGPT2Model"),SSt.forEach(t),JTr=r($je," (OpenAI GPT-2 model)"),$je.forEach(t),YTr=i(D),K8=n(D,"LI",{});var kje=s(K8);uTe=n(kje,"STRONG",{});var RSt=s(uTe);KTr=r(RSt,"gptj"),RSt.forEach(t),ZTr=r(kje," \u2014 "),gJ=n(kje,"A",{href:!0});var PSt=s(gJ);e8r=r(PSt,"TFGPTJModel"),PSt.forEach(t),o8r=r(kje," (GPT-J model)"),kje.forEach(t),r8r=i(D),Z8=n(D,"LI",{});var Sje=s(Z8);bTe=n(Sje,"STRONG",{});var BSt=s(bTe);t8r=r(BSt,"hubert"),BSt.forEach(t),a8r=r(Sje," \u2014 "),hJ=n(Sje,"A",{href:!0});var ISt=s(hJ);n8r=r(ISt,"TFHubertModel"),ISt.forEach(t),s8r=r(Sje," (Hubert model)"),Sje.forEach(t),l8r=i(D),eM=n(D,"LI",{});var Rje=s(eM);vTe=n(Rje,"STRONG",{});var NSt=s(vTe);i8r=r(NSt,"layoutlm"),NSt.forEach(t),d8r=r(Rje," \u2014 "),pJ=n(Rje,"A",{href:!0});var qSt=s(pJ);c8r=r(qSt,"TFLayoutLMModel"),qSt.forEach(t),f8r=r(Rje," (LayoutLM model)"),Rje.forEach(t),m8r=i(D),oM=n(D,"LI",{});var Pje=s(oM);FTe=n(Pje,"STRONG",{});var jSt=s(FTe);g8r=r(jSt,"led"),jSt.forEach(t),h8r=r(Pje," \u2014 "),_J=n(Pje,"A",{href:!0});var DSt=s(_J);p8r=r(DSt,"TFLEDModel"),DSt.forEach(t),_8r=r(Pje," (LED model)"),Pje.forEach(t),u8r=i(D),rM=n(D,"LI",{});var Bje=s(rM);TTe=n(Bje,"STRONG",{});var GSt=s(TTe);b8r=r(GSt,"longformer"),GSt.forEach(t),v8r=r(Bje," \u2014 "),uJ=n(Bje,"A",{href:!0});var OSt=s(uJ);F8r=r(OSt,"TFLongformerModel"),OSt.forEach(t),T8r=r(Bje," (Longformer model)"),Bje.forEach(t),M8r=i(D),tM=n(D,"LI",{});var Ije=s(tM);MTe=n(Ije,"STRONG",{});var VSt=s(MTe);E8r=r(VSt,"lxmert"),VSt.forEach(t),C8r=r(Ije," \u2014 "),bJ=n(Ije,"A",{href:!0});var XSt=s(bJ);w8r=r(XSt,"TFLxmertModel"),XSt.forEach(t),A8r=r(Ije," (LXMERT model)"),Ije.forEach(t),L8r=i(D),aM=n(D,"LI",{});var Nje=s(aM);ETe=n(Nje,"STRONG",{});var zSt=s(ETe);y8r=r(zSt,"marian"),zSt.forEach(t),x8r=r(Nje," \u2014 "),vJ=n(Nje,"A",{href:!0});var WSt=s(vJ);$8r=r(WSt,"TFMarianModel"),WSt.forEach(t),k8r=r(Nje," (Marian model)"),Nje.forEach(t),S8r=i(D),nM=n(D,"LI",{});var qje=s(nM);CTe=n(qje,"STRONG",{});var QSt=s(CTe);R8r=r(QSt,"mbart"),QSt.forEach(t),P8r=r(qje," \u2014 "),FJ=n(qje,"A",{href:!0});var HSt=s(FJ);B8r=r(HSt,"TFMBartModel"),HSt.forEach(t),I8r=r(qje," (mBART model)"),qje.forEach(t),N8r=i(D),sM=n(D,"LI",{});var jje=s(sM);wTe=n(jje,"STRONG",{});var USt=s(wTe);q8r=r(USt,"mobilebert"),USt.forEach(t),j8r=r(jje," \u2014 "),TJ=n(jje,"A",{href:!0});var JSt=s(TJ);D8r=r(JSt,"TFMobileBertModel"),JSt.forEach(t),G8r=r(jje," (MobileBERT model)"),jje.forEach(t),O8r=i(D),lM=n(D,"LI",{});var Dje=s(lM);ATe=n(Dje,"STRONG",{});var YSt=s(ATe);V8r=r(YSt,"mpnet"),YSt.forEach(t),X8r=r(Dje," \u2014 "),MJ=n(Dje,"A",{href:!0});var KSt=s(MJ);z8r=r(KSt,"TFMPNetModel"),KSt.forEach(t),W8r=r(Dje," (MPNet model)"),Dje.forEach(t),Q8r=i(D),iM=n(D,"LI",{});var Gje=s(iM);LTe=n(Gje,"STRONG",{});var ZSt=s(LTe);H8r=r(ZSt,"mt5"),ZSt.forEach(t),U8r=r(Gje," \u2014 "),EJ=n(Gje,"A",{href:!0});var eRt=s(EJ);J8r=r(eRt,"TFMT5Model"),eRt.forEach(t),Y8r=r(Gje," (MT5 model)"),Gje.forEach(t),K8r=i(D),dM=n(D,"LI",{});var Oje=s(dM);yTe=n(Oje,"STRONG",{});var oRt=s(yTe);Z8r=r(oRt,"openai-gpt"),oRt.forEach(t),eMr=r(Oje," \u2014 "),CJ=n(Oje,"A",{href:!0});var rRt=s(CJ);oMr=r(rRt,"TFOpenAIGPTModel"),rRt.forEach(t),rMr=r(Oje," (OpenAI GPT model)"),Oje.forEach(t),tMr=i(D),cM=n(D,"LI",{});var Vje=s(cM);xTe=n(Vje,"STRONG",{});var tRt=s(xTe);aMr=r(tRt,"opt"),tRt.forEach(t),nMr=r(Vje," \u2014 "),wJ=n(Vje,"A",{href:!0});var aRt=s(wJ);sMr=r(aRt,"TFOPTModel"),aRt.forEach(t),lMr=r(Vje," (OPT model)"),Vje.forEach(t),iMr=i(D),fM=n(D,"LI",{});var Xje=s(fM);$Te=n(Xje,"STRONG",{});var nRt=s($Te);dMr=r(nRt,"pegasus"),nRt.forEach(t),cMr=r(Xje," \u2014 "),AJ=n(Xje,"A",{href:!0});var sRt=s(AJ);fMr=r(sRt,"TFPegasusModel"),sRt.forEach(t),mMr=r(Xje," (Pegasus model)"),Xje.forEach(t),gMr=i(D),mM=n(D,"LI",{});var zje=s(mM);kTe=n(zje,"STRONG",{});var lRt=s(kTe);hMr=r(lRt,"regnet"),lRt.forEach(t),pMr=r(zje," \u2014 "),LJ=n(zje,"A",{href:!0});var iRt=s(LJ);_Mr=r(iRt,"TFRegNetModel"),iRt.forEach(t),uMr=r(zje," (RegNet model)"),zje.forEach(t),bMr=i(D),gM=n(D,"LI",{});var Wje=s(gM);STe=n(Wje,"STRONG",{});var dRt=s(STe);vMr=r(dRt,"rembert"),dRt.forEach(t),FMr=r(Wje," \u2014 "),yJ=n(Wje,"A",{href:!0});var cRt=s(yJ);TMr=r(cRt,"TFRemBertModel"),cRt.forEach(t),MMr=r(Wje," (RemBERT model)"),Wje.forEach(t),EMr=i(D),hM=n(D,"LI",{});var Qje=s(hM);RTe=n(Qje,"STRONG",{});var fRt=s(RTe);CMr=r(fRt,"resnet"),fRt.forEach(t),wMr=r(Qje," \u2014 "),xJ=n(Qje,"A",{href:!0});var mRt=s(xJ);AMr=r(mRt,"TFResNetModel"),mRt.forEach(t),LMr=r(Qje," (ResNet model)"),Qje.forEach(t),yMr=i(D),pM=n(D,"LI",{});var Hje=s(pM);PTe=n(Hje,"STRONG",{});var gRt=s(PTe);xMr=r(gRt,"roberta"),gRt.forEach(t),$Mr=r(Hje," \u2014 "),$J=n(Hje,"A",{href:!0});var hRt=s($J);kMr=r(hRt,"TFRobertaModel"),hRt.forEach(t),SMr=r(Hje," (RoBERTa model)"),Hje.forEach(t),RMr=i(D),_M=n(D,"LI",{});var Uje=s(_M);BTe=n(Uje,"STRONG",{});var pRt=s(BTe);PMr=r(pRt,"roformer"),pRt.forEach(t),BMr=r(Uje," \u2014 "),kJ=n(Uje,"A",{href:!0});var _Rt=s(kJ);IMr=r(_Rt,"TFRoFormerModel"),_Rt.forEach(t),NMr=r(Uje," (RoFormer model)"),Uje.forEach(t),qMr=i(D),uM=n(D,"LI",{});var Jje=s(uM);ITe=n(Jje,"STRONG",{});var uRt=s(ITe);jMr=r(uRt,"segformer"),uRt.forEach(t),DMr=r(Jje," \u2014 "),SJ=n(Jje,"A",{href:!0});var bRt=s(SJ);GMr=r(bRt,"TFSegformerModel"),bRt.forEach(t),OMr=r(Jje," (SegFormer model)"),Jje.forEach(t),VMr=i(D),bM=n(D,"LI",{});var Yje=s(bM);NTe=n(Yje,"STRONG",{});var vRt=s(NTe);XMr=r(vRt,"speech_to_text"),vRt.forEach(t),zMr=r(Yje," \u2014 "),RJ=n(Yje,"A",{href:!0});var FRt=s(RJ);WMr=r(FRt,"TFSpeech2TextModel"),FRt.forEach(t),QMr=r(Yje," (Speech2Text model)"),Yje.forEach(t),HMr=i(D),vM=n(D,"LI",{});var Kje=s(vM);qTe=n(Kje,"STRONG",{});var TRt=s(qTe);UMr=r(TRt,"swin"),TRt.forEach(t),JMr=r(Kje," \u2014 "),PJ=n(Kje,"A",{href:!0});var MRt=s(PJ);YMr=r(MRt,"TFSwinModel"),MRt.forEach(t),KMr=r(Kje," (Swin Transformer model)"),Kje.forEach(t),ZMr=i(D),FM=n(D,"LI",{});var Zje=s(FM);jTe=n(Zje,"STRONG",{});var ERt=s(jTe);e4r=r(ERt,"t5"),ERt.forEach(t),o4r=r(Zje," \u2014 "),BJ=n(Zje,"A",{href:!0});var CRt=s(BJ);r4r=r(CRt,"TFT5Model"),CRt.forEach(t),t4r=r(Zje," (T5 model)"),Zje.forEach(t),a4r=i(D),TM=n(D,"LI",{});var eDe=s(TM);DTe=n(eDe,"STRONG",{});var wRt=s(DTe);n4r=r(wRt,"tapas"),wRt.forEach(t),s4r=r(eDe," \u2014 "),IJ=n(eDe,"A",{href:!0});var ARt=s(IJ);l4r=r(ARt,"TFTapasModel"),ARt.forEach(t),i4r=r(eDe," (TAPAS model)"),eDe.forEach(t),d4r=i(D),MM=n(D,"LI",{});var oDe=s(MM);GTe=n(oDe,"STRONG",{});var LRt=s(GTe);c4r=r(LRt,"transfo-xl"),LRt.forEach(t),f4r=r(oDe," \u2014 "),NJ=n(oDe,"A",{href:!0});var yRt=s(NJ);m4r=r(yRt,"TFTransfoXLModel"),yRt.forEach(t),g4r=r(oDe," (Transformer-XL model)"),oDe.forEach(t),h4r=i(D),EM=n(D,"LI",{});var rDe=s(EM);OTe=n(rDe,"STRONG",{});var xRt=s(OTe);p4r=r(xRt,"vit"),xRt.forEach(t),_4r=r(rDe," \u2014 "),qJ=n(rDe,"A",{href:!0});var $Rt=s(qJ);u4r=r($Rt,"TFViTModel"),$Rt.forEach(t),b4r=r(rDe," (ViT model)"),rDe.forEach(t),v4r=i(D),CM=n(D,"LI",{});var tDe=s(CM);VTe=n(tDe,"STRONG",{});var kRt=s(VTe);F4r=r(kRt,"vit_mae"),kRt.forEach(t),T4r=r(tDe," \u2014 "),jJ=n(tDe,"A",{href:!0});var SRt=s(jJ);M4r=r(SRt,"TFViTMAEModel"),SRt.forEach(t),E4r=r(tDe," (ViTMAE model)"),tDe.forEach(t),C4r=i(D),wM=n(D,"LI",{});var aDe=s(wM);XTe=n(aDe,"STRONG",{});var RRt=s(XTe);w4r=r(RRt,"wav2vec2"),RRt.forEach(t),A4r=r(aDe," \u2014 "),DJ=n(aDe,"A",{href:!0});var PRt=s(DJ);L4r=r(PRt,"TFWav2Vec2Model"),PRt.forEach(t),y4r=r(aDe," (Wav2Vec2 model)"),aDe.forEach(t),x4r=i(D),AM=n(D,"LI",{});var nDe=s(AM);zTe=n(nDe,"STRONG",{});var BRt=s(zTe);$4r=r(BRt,"xlm"),BRt.forEach(t),k4r=r(nDe," \u2014 "),GJ=n(nDe,"A",{href:!0});var IRt=s(GJ);S4r=r(IRt,"TFXLMModel"),IRt.forEach(t),R4r=r(nDe," (XLM model)"),nDe.forEach(t),P4r=i(D),LM=n(D,"LI",{});var sDe=s(LM);WTe=n(sDe,"STRONG",{});var NRt=s(WTe);B4r=r(NRt,"xlm-roberta"),NRt.forEach(t),I4r=r(sDe," \u2014 "),OJ=n(sDe,"A",{href:!0});var qRt=s(OJ);N4r=r(qRt,"TFXLMRobertaModel"),qRt.forEach(t),q4r=r(sDe," (XLM-RoBERTa model)"),sDe.forEach(t),j4r=i(D),yM=n(D,"LI",{});var lDe=s(yM);QTe=n(lDe,"STRONG",{});var jRt=s(QTe);D4r=r(jRt,"xlnet"),jRt.forEach(t),G4r=r(lDe," \u2014 "),VJ=n(lDe,"A",{href:!0});var DRt=s(VJ);O4r=r(DRt,"TFXLNetModel"),DRt.forEach(t),V4r=r(lDe," (XLNet model)"),lDe.forEach(t),D.forEach(t),X4r=i(Rl),T(xM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),bWe=i(f),fc=n(f,"H2",{class:!0});var AHe=s(fc);$M=n(AHe,"A",{id:!0,class:!0,href:!0});var GRt=s($M);HTe=n(GRt,"SPAN",{});var ORt=s(HTe);T(mx.$$.fragment,ORt),ORt.forEach(t),GRt.forEach(t),z4r=i(AHe),UTe=n(AHe,"SPAN",{});var VRt=s(UTe);W4r=r(VRt,"TFAutoModelForPreTraining"),VRt.forEach(t),AHe.forEach(t),vWe=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(gx.$$.fragment,Pl),Q4r=i(Pl),mc=n(Pl,"P",{});var fae=s(mc);H4r=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XJ=n(fae,"A",{href:!0});var XRt=s(XJ);U4r=r(XRt,"from_pretrained()"),XRt.forEach(t),J4r=r(fae," class method or the "),zJ=n(fae,"A",{href:!0});var zRt=s(zJ);Y4r=r(zRt,"from_config()"),zRt.forEach(t),K4r=r(fae,` class
method.`),fae.forEach(t),Z4r=i(Pl),hx=n(Pl,"P",{});var LHe=s(hx);eEr=r(LHe,"This class cannot be instantiated directly using "),JTe=n(LHe,"CODE",{});var WRt=s(JTe);oEr=r(WRt,"__init__()"),WRt.forEach(t),rEr=r(LHe," (throws an error)."),LHe.forEach(t),tEr=i(Pl),Pt=n(Pl,"DIV",{class:!0});var T7=s(Pt);T(px.$$.fragment,T7),aEr=i(T7),YTe=n(T7,"P",{});var QRt=s(YTe);nEr=r(QRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QRt.forEach(t),sEr=i(T7),gc=n(T7,"P",{});var mae=s(gc);lEr=r(mae,`Note:
Loading a model from its configuration file does `),KTe=n(mae,"STRONG",{});var HRt=s(KTe);iEr=r(HRt,"not"),HRt.forEach(t),dEr=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(mae,"A",{href:!0});var URt=s(WJ);cEr=r(URt,"from_pretrained()"),URt.forEach(t),fEr=r(mae," to load the model weights."),mae.forEach(t),mEr=i(T7),T(kM.$$.fragment,T7),T7.forEach(t),gEr=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(_x.$$.fragment,Bl),hEr=i(Bl),ZTe=n(Bl,"P",{});var JRt=s(ZTe);pEr=r(JRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JRt.forEach(t),_Er=i(Bl),dn=n(Bl,"P",{});var M7=s(dn);uEr=r(M7,"The model class to instantiate is selected based on the "),e8e=n(M7,"CODE",{});var YRt=s(e8e);bEr=r(YRt,"model_type"),YRt.forEach(t),vEr=r(M7,` property of the config object (either
passed as an argument or loaded from `),o8e=n(M7,"CODE",{});var KRt=s(o8e);FEr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),TEr=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r8e=n(M7,"CODE",{});var ZRt=s(r8e);MEr=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),EEr=r(M7,":"),M7.forEach(t),CEr=i(Bl),se=n(Bl,"UL",{});var le=s(se);SM=n(le,"LI",{});var iDe=s(SM);t8e=n(iDe,"STRONG",{});var ePt=s(t8e);wEr=r(ePt,"albert"),ePt.forEach(t),AEr=r(iDe," \u2014 "),QJ=n(iDe,"A",{href:!0});var oPt=s(QJ);LEr=r(oPt,"TFAlbertForPreTraining"),oPt.forEach(t),yEr=r(iDe," (ALBERT model)"),iDe.forEach(t),xEr=i(le),RM=n(le,"LI",{});var dDe=s(RM);a8e=n(dDe,"STRONG",{});var rPt=s(a8e);$Er=r(rPt,"bart"),rPt.forEach(t),kEr=r(dDe," \u2014 "),HJ=n(dDe,"A",{href:!0});var tPt=s(HJ);SEr=r(tPt,"TFBartForConditionalGeneration"),tPt.forEach(t),REr=r(dDe," (BART model)"),dDe.forEach(t),PEr=i(le),PM=n(le,"LI",{});var cDe=s(PM);n8e=n(cDe,"STRONG",{});var aPt=s(n8e);BEr=r(aPt,"bert"),aPt.forEach(t),IEr=r(cDe," \u2014 "),UJ=n(cDe,"A",{href:!0});var nPt=s(UJ);NEr=r(nPt,"TFBertForPreTraining"),nPt.forEach(t),qEr=r(cDe," (BERT model)"),cDe.forEach(t),jEr=i(le),BM=n(le,"LI",{});var fDe=s(BM);s8e=n(fDe,"STRONG",{});var sPt=s(s8e);DEr=r(sPt,"camembert"),sPt.forEach(t),GEr=r(fDe," \u2014 "),JJ=n(fDe,"A",{href:!0});var lPt=s(JJ);OEr=r(lPt,"TFCamembertForMaskedLM"),lPt.forEach(t),VEr=r(fDe," (CamemBERT model)"),fDe.forEach(t),XEr=i(le),IM=n(le,"LI",{});var mDe=s(IM);l8e=n(mDe,"STRONG",{});var iPt=s(l8e);zEr=r(iPt,"ctrl"),iPt.forEach(t),WEr=r(mDe," \u2014 "),YJ=n(mDe,"A",{href:!0});var dPt=s(YJ);QEr=r(dPt,"TFCTRLLMHeadModel"),dPt.forEach(t),HEr=r(mDe," (CTRL model)"),mDe.forEach(t),UEr=i(le),NM=n(le,"LI",{});var gDe=s(NM);i8e=n(gDe,"STRONG",{});var cPt=s(i8e);JEr=r(cPt,"distilbert"),cPt.forEach(t),YEr=r(gDe," \u2014 "),KJ=n(gDe,"A",{href:!0});var fPt=s(KJ);KEr=r(fPt,"TFDistilBertForMaskedLM"),fPt.forEach(t),ZEr=r(gDe," (DistilBERT model)"),gDe.forEach(t),eCr=i(le),qM=n(le,"LI",{});var hDe=s(qM);d8e=n(hDe,"STRONG",{});var mPt=s(d8e);oCr=r(mPt,"electra"),mPt.forEach(t),rCr=r(hDe," \u2014 "),ZJ=n(hDe,"A",{href:!0});var gPt=s(ZJ);tCr=r(gPt,"TFElectraForPreTraining"),gPt.forEach(t),aCr=r(hDe," (ELECTRA model)"),hDe.forEach(t),nCr=i(le),jM=n(le,"LI",{});var pDe=s(jM);c8e=n(pDe,"STRONG",{});var hPt=s(c8e);sCr=r(hPt,"flaubert"),hPt.forEach(t),lCr=r(pDe," \u2014 "),eY=n(pDe,"A",{href:!0});var pPt=s(eY);iCr=r(pPt,"TFFlaubertWithLMHeadModel"),pPt.forEach(t),dCr=r(pDe," (FlauBERT model)"),pDe.forEach(t),cCr=i(le),DM=n(le,"LI",{});var _De=s(DM);f8e=n(_De,"STRONG",{});var _Pt=s(f8e);fCr=r(_Pt,"funnel"),_Pt.forEach(t),mCr=r(_De," \u2014 "),oY=n(_De,"A",{href:!0});var uPt=s(oY);gCr=r(uPt,"TFFunnelForPreTraining"),uPt.forEach(t),hCr=r(_De," (Funnel Transformer model)"),_De.forEach(t),pCr=i(le),GM=n(le,"LI",{});var uDe=s(GM);m8e=n(uDe,"STRONG",{});var bPt=s(m8e);_Cr=r(bPt,"gpt2"),bPt.forEach(t),uCr=r(uDe," \u2014 "),rY=n(uDe,"A",{href:!0});var vPt=s(rY);bCr=r(vPt,"TFGPT2LMHeadModel"),vPt.forEach(t),vCr=r(uDe," (OpenAI GPT-2 model)"),uDe.forEach(t),FCr=i(le),OM=n(le,"LI",{});var bDe=s(OM);g8e=n(bDe,"STRONG",{});var FPt=s(g8e);TCr=r(FPt,"layoutlm"),FPt.forEach(t),MCr=r(bDe," \u2014 "),tY=n(bDe,"A",{href:!0});var TPt=s(tY);ECr=r(TPt,"TFLayoutLMForMaskedLM"),TPt.forEach(t),CCr=r(bDe," (LayoutLM model)"),bDe.forEach(t),wCr=i(le),VM=n(le,"LI",{});var vDe=s(VM);h8e=n(vDe,"STRONG",{});var MPt=s(h8e);ACr=r(MPt,"lxmert"),MPt.forEach(t),LCr=r(vDe," \u2014 "),aY=n(vDe,"A",{href:!0});var EPt=s(aY);yCr=r(EPt,"TFLxmertForPreTraining"),EPt.forEach(t),xCr=r(vDe," (LXMERT model)"),vDe.forEach(t),$Cr=i(le),XM=n(le,"LI",{});var FDe=s(XM);p8e=n(FDe,"STRONG",{});var CPt=s(p8e);kCr=r(CPt,"mobilebert"),CPt.forEach(t),SCr=r(FDe," \u2014 "),nY=n(FDe,"A",{href:!0});var wPt=s(nY);RCr=r(wPt,"TFMobileBertForPreTraining"),wPt.forEach(t),PCr=r(FDe," (MobileBERT model)"),FDe.forEach(t),BCr=i(le),zM=n(le,"LI",{});var TDe=s(zM);_8e=n(TDe,"STRONG",{});var APt=s(_8e);ICr=r(APt,"mpnet"),APt.forEach(t),NCr=r(TDe," \u2014 "),sY=n(TDe,"A",{href:!0});var LPt=s(sY);qCr=r(LPt,"TFMPNetForMaskedLM"),LPt.forEach(t),jCr=r(TDe," (MPNet model)"),TDe.forEach(t),DCr=i(le),WM=n(le,"LI",{});var MDe=s(WM);u8e=n(MDe,"STRONG",{});var yPt=s(u8e);GCr=r(yPt,"openai-gpt"),yPt.forEach(t),OCr=r(MDe," \u2014 "),lY=n(MDe,"A",{href:!0});var xPt=s(lY);VCr=r(xPt,"TFOpenAIGPTLMHeadModel"),xPt.forEach(t),XCr=r(MDe," (OpenAI GPT model)"),MDe.forEach(t),zCr=i(le),QM=n(le,"LI",{});var EDe=s(QM);b8e=n(EDe,"STRONG",{});var $Pt=s(b8e);WCr=r($Pt,"roberta"),$Pt.forEach(t),QCr=r(EDe," \u2014 "),iY=n(EDe,"A",{href:!0});var kPt=s(iY);HCr=r(kPt,"TFRobertaForMaskedLM"),kPt.forEach(t),UCr=r(EDe," (RoBERTa model)"),EDe.forEach(t),JCr=i(le),HM=n(le,"LI",{});var CDe=s(HM);v8e=n(CDe,"STRONG",{});var SPt=s(v8e);YCr=r(SPt,"t5"),SPt.forEach(t),KCr=r(CDe," \u2014 "),dY=n(CDe,"A",{href:!0});var RPt=s(dY);ZCr=r(RPt,"TFT5ForConditionalGeneration"),RPt.forEach(t),e5r=r(CDe," (T5 model)"),CDe.forEach(t),o5r=i(le),UM=n(le,"LI",{});var wDe=s(UM);F8e=n(wDe,"STRONG",{});var PPt=s(F8e);r5r=r(PPt,"tapas"),PPt.forEach(t),t5r=r(wDe," \u2014 "),cY=n(wDe,"A",{href:!0});var BPt=s(cY);a5r=r(BPt,"TFTapasForMaskedLM"),BPt.forEach(t),n5r=r(wDe," (TAPAS model)"),wDe.forEach(t),s5r=i(le),JM=n(le,"LI",{});var ADe=s(JM);T8e=n(ADe,"STRONG",{});var IPt=s(T8e);l5r=r(IPt,"transfo-xl"),IPt.forEach(t),i5r=r(ADe," \u2014 "),fY=n(ADe,"A",{href:!0});var NPt=s(fY);d5r=r(NPt,"TFTransfoXLLMHeadModel"),NPt.forEach(t),c5r=r(ADe," (Transformer-XL model)"),ADe.forEach(t),f5r=i(le),YM=n(le,"LI",{});var LDe=s(YM);M8e=n(LDe,"STRONG",{});var qPt=s(M8e);m5r=r(qPt,"vit_mae"),qPt.forEach(t),g5r=r(LDe," \u2014 "),mY=n(LDe,"A",{href:!0});var jPt=s(mY);h5r=r(jPt,"TFViTMAEForPreTraining"),jPt.forEach(t),p5r=r(LDe," (ViTMAE model)"),LDe.forEach(t),_5r=i(le),KM=n(le,"LI",{});var yDe=s(KM);E8e=n(yDe,"STRONG",{});var DPt=s(E8e);u5r=r(DPt,"xlm"),DPt.forEach(t),b5r=r(yDe," \u2014 "),gY=n(yDe,"A",{href:!0});var GPt=s(gY);v5r=r(GPt,"TFXLMWithLMHeadModel"),GPt.forEach(t),F5r=r(yDe," (XLM model)"),yDe.forEach(t),T5r=i(le),ZM=n(le,"LI",{});var xDe=s(ZM);C8e=n(xDe,"STRONG",{});var OPt=s(C8e);M5r=r(OPt,"xlm-roberta"),OPt.forEach(t),E5r=r(xDe," \u2014 "),hY=n(xDe,"A",{href:!0});var VPt=s(hY);C5r=r(VPt,"TFXLMRobertaForMaskedLM"),VPt.forEach(t),w5r=r(xDe," (XLM-RoBERTa model)"),xDe.forEach(t),A5r=i(le),e4=n(le,"LI",{});var $De=s(e4);w8e=n($De,"STRONG",{});var XPt=s(w8e);L5r=r(XPt,"xlnet"),XPt.forEach(t),y5r=r($De," \u2014 "),pY=n($De,"A",{href:!0});var zPt=s(pY);x5r=r(zPt,"TFXLNetLMHeadModel"),zPt.forEach(t),$5r=r($De," (XLNet model)"),$De.forEach(t),le.forEach(t),k5r=i(Bl),T(o4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),FWe=i(f),hc=n(f,"H2",{class:!0});var yHe=s(hc);r4=n(yHe,"A",{id:!0,class:!0,href:!0});var WPt=s(r4);A8e=n(WPt,"SPAN",{});var QPt=s(A8e);T(ux.$$.fragment,QPt),QPt.forEach(t),WPt.forEach(t),S5r=i(yHe),L8e=n(yHe,"SPAN",{});var HPt=s(L8e);R5r=r(HPt,"TFAutoModelForCausalLM"),HPt.forEach(t),yHe.forEach(t),TWe=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(bx.$$.fragment,Il),P5r=i(Il),pc=n(Il,"P",{});var gae=s(pc);B5r=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Y=n(gae,"A",{href:!0});var UPt=s(_Y);I5r=r(UPt,"from_pretrained()"),UPt.forEach(t),N5r=r(gae," class method or the "),uY=n(gae,"A",{href:!0});var JPt=s(uY);q5r=r(JPt,"from_config()"),JPt.forEach(t),j5r=r(gae,` class
method.`),gae.forEach(t),D5r=i(Il),vx=n(Il,"P",{});var xHe=s(vx);G5r=r(xHe,"This class cannot be instantiated directly using "),y8e=n(xHe,"CODE",{});var YPt=s(y8e);O5r=r(YPt,"__init__()"),YPt.forEach(t),V5r=r(xHe," (throws an error)."),xHe.forEach(t),X5r=i(Il),Bt=n(Il,"DIV",{class:!0});var E7=s(Bt);T(Fx.$$.fragment,E7),z5r=i(E7),x8e=n(E7,"P",{});var KPt=s(x8e);W5r=r(KPt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KPt.forEach(t),Q5r=i(E7),_c=n(E7,"P",{});var hae=s(_c);H5r=r(hae,`Note:
Loading a model from its configuration file does `),$8e=n(hae,"STRONG",{});var ZPt=s($8e);U5r=r(ZPt,"not"),ZPt.forEach(t),J5r=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(hae,"A",{href:!0});var eBt=s(bY);Y5r=r(eBt,"from_pretrained()"),eBt.forEach(t),K5r=r(hae," to load the model weights."),hae.forEach(t),Z5r=i(E7),T(t4.$$.fragment,E7),E7.forEach(t),e0r=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(Tx.$$.fragment,Nl),o0r=i(Nl),k8e=n(Nl,"P",{});var oBt=s(k8e);r0r=r(oBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oBt.forEach(t),t0r=i(Nl),cn=n(Nl,"P",{});var C7=s(cn);a0r=r(C7,"The model class to instantiate is selected based on the "),S8e=n(C7,"CODE",{});var rBt=s(S8e);n0r=r(rBt,"model_type"),rBt.forEach(t),s0r=r(C7,` property of the config object (either
passed as an argument or loaded from `),R8e=n(C7,"CODE",{});var tBt=s(R8e);l0r=r(tBt,"pretrained_model_name_or_path"),tBt.forEach(t),i0r=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=n(C7,"CODE",{});var aBt=s(P8e);d0r=r(aBt,"pretrained_model_name_or_path"),aBt.forEach(t),c0r=r(C7,":"),C7.forEach(t),f0r=i(Nl),Me=n(Nl,"UL",{});var Ce=s(Me);a4=n(Ce,"LI",{});var kDe=s(a4);B8e=n(kDe,"STRONG",{});var nBt=s(B8e);m0r=r(nBt,"bert"),nBt.forEach(t),g0r=r(kDe," \u2014 "),vY=n(kDe,"A",{href:!0});var sBt=s(vY);h0r=r(sBt,"TFBertLMHeadModel"),sBt.forEach(t),p0r=r(kDe," (BERT model)"),kDe.forEach(t),_0r=i(Ce),n4=n(Ce,"LI",{});var SDe=s(n4);I8e=n(SDe,"STRONG",{});var lBt=s(I8e);u0r=r(lBt,"camembert"),lBt.forEach(t),b0r=r(SDe," \u2014 "),FY=n(SDe,"A",{href:!0});var iBt=s(FY);v0r=r(iBt,"TFCamembertForCausalLM"),iBt.forEach(t),F0r=r(SDe," (CamemBERT model)"),SDe.forEach(t),T0r=i(Ce),s4=n(Ce,"LI",{});var RDe=s(s4);N8e=n(RDe,"STRONG",{});var dBt=s(N8e);M0r=r(dBt,"ctrl"),dBt.forEach(t),E0r=r(RDe," \u2014 "),TY=n(RDe,"A",{href:!0});var cBt=s(TY);C0r=r(cBt,"TFCTRLLMHeadModel"),cBt.forEach(t),w0r=r(RDe," (CTRL model)"),RDe.forEach(t),A0r=i(Ce),l4=n(Ce,"LI",{});var PDe=s(l4);q8e=n(PDe,"STRONG",{});var fBt=s(q8e);L0r=r(fBt,"gpt2"),fBt.forEach(t),y0r=r(PDe," \u2014 "),MY=n(PDe,"A",{href:!0});var mBt=s(MY);x0r=r(mBt,"TFGPT2LMHeadModel"),mBt.forEach(t),$0r=r(PDe," (OpenAI GPT-2 model)"),PDe.forEach(t),k0r=i(Ce),i4=n(Ce,"LI",{});var BDe=s(i4);j8e=n(BDe,"STRONG",{});var gBt=s(j8e);S0r=r(gBt,"gptj"),gBt.forEach(t),R0r=r(BDe," \u2014 "),EY=n(BDe,"A",{href:!0});var hBt=s(EY);P0r=r(hBt,"TFGPTJForCausalLM"),hBt.forEach(t),B0r=r(BDe," (GPT-J model)"),BDe.forEach(t),I0r=i(Ce),d4=n(Ce,"LI",{});var IDe=s(d4);D8e=n(IDe,"STRONG",{});var pBt=s(D8e);N0r=r(pBt,"openai-gpt"),pBt.forEach(t),q0r=r(IDe," \u2014 "),CY=n(IDe,"A",{href:!0});var _Bt=s(CY);j0r=r(_Bt,"TFOpenAIGPTLMHeadModel"),_Bt.forEach(t),D0r=r(IDe," (OpenAI GPT model)"),IDe.forEach(t),G0r=i(Ce),c4=n(Ce,"LI",{});var NDe=s(c4);G8e=n(NDe,"STRONG",{});var uBt=s(G8e);O0r=r(uBt,"opt"),uBt.forEach(t),V0r=r(NDe," \u2014 "),wY=n(NDe,"A",{href:!0});var bBt=s(wY);X0r=r(bBt,"TFOPTForCausalLM"),bBt.forEach(t),z0r=r(NDe," (OPT model)"),NDe.forEach(t),W0r=i(Ce),f4=n(Ce,"LI",{});var qDe=s(f4);O8e=n(qDe,"STRONG",{});var vBt=s(O8e);Q0r=r(vBt,"rembert"),vBt.forEach(t),H0r=r(qDe," \u2014 "),AY=n(qDe,"A",{href:!0});var FBt=s(AY);U0r=r(FBt,"TFRemBertForCausalLM"),FBt.forEach(t),J0r=r(qDe," (RemBERT model)"),qDe.forEach(t),Y0r=i(Ce),m4=n(Ce,"LI",{});var jDe=s(m4);V8e=n(jDe,"STRONG",{});var TBt=s(V8e);K0r=r(TBt,"roberta"),TBt.forEach(t),Z0r=r(jDe," \u2014 "),LY=n(jDe,"A",{href:!0});var MBt=s(LY);ewr=r(MBt,"TFRobertaForCausalLM"),MBt.forEach(t),owr=r(jDe," (RoBERTa model)"),jDe.forEach(t),rwr=i(Ce),g4=n(Ce,"LI",{});var DDe=s(g4);X8e=n(DDe,"STRONG",{});var EBt=s(X8e);twr=r(EBt,"roformer"),EBt.forEach(t),awr=r(DDe," \u2014 "),yY=n(DDe,"A",{href:!0});var CBt=s(yY);nwr=r(CBt,"TFRoFormerForCausalLM"),CBt.forEach(t),swr=r(DDe," (RoFormer model)"),DDe.forEach(t),lwr=i(Ce),h4=n(Ce,"LI",{});var GDe=s(h4);z8e=n(GDe,"STRONG",{});var wBt=s(z8e);iwr=r(wBt,"transfo-xl"),wBt.forEach(t),dwr=r(GDe," \u2014 "),xY=n(GDe,"A",{href:!0});var ABt=s(xY);cwr=r(ABt,"TFTransfoXLLMHeadModel"),ABt.forEach(t),fwr=r(GDe," (Transformer-XL model)"),GDe.forEach(t),mwr=i(Ce),p4=n(Ce,"LI",{});var ODe=s(p4);W8e=n(ODe,"STRONG",{});var LBt=s(W8e);gwr=r(LBt,"xlm"),LBt.forEach(t),hwr=r(ODe," \u2014 "),$Y=n(ODe,"A",{href:!0});var yBt=s($Y);pwr=r(yBt,"TFXLMWithLMHeadModel"),yBt.forEach(t),_wr=r(ODe," (XLM model)"),ODe.forEach(t),uwr=i(Ce),_4=n(Ce,"LI",{});var VDe=s(_4);Q8e=n(VDe,"STRONG",{});var xBt=s(Q8e);bwr=r(xBt,"xlnet"),xBt.forEach(t),vwr=r(VDe," \u2014 "),kY=n(VDe,"A",{href:!0});var $Bt=s(kY);Fwr=r($Bt,"TFXLNetLMHeadModel"),$Bt.forEach(t),Twr=r(VDe," (XLNet model)"),VDe.forEach(t),Ce.forEach(t),Mwr=i(Nl),T(u4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),MWe=i(f),uc=n(f,"H2",{class:!0});var $He=s(uc);b4=n($He,"A",{id:!0,class:!0,href:!0});var kBt=s(b4);H8e=n(kBt,"SPAN",{});var SBt=s(H8e);T(Mx.$$.fragment,SBt),SBt.forEach(t),kBt.forEach(t),Ewr=i($He),U8e=n($He,"SPAN",{});var RBt=s(U8e);Cwr=r(RBt,"TFAutoModelForImageClassification"),RBt.forEach(t),$He.forEach(t),EWe=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(Ex.$$.fragment,ql),wwr=i(ql),bc=n(ql,"P",{});var pae=s(bc);Awr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SY=n(pae,"A",{href:!0});var PBt=s(SY);Lwr=r(PBt,"from_pretrained()"),PBt.forEach(t),ywr=r(pae," class method or the "),RY=n(pae,"A",{href:!0});var BBt=s(RY);xwr=r(BBt,"from_config()"),BBt.forEach(t),$wr=r(pae,` class
method.`),pae.forEach(t),kwr=i(ql),Cx=n(ql,"P",{});var kHe=s(Cx);Swr=r(kHe,"This class cannot be instantiated directly using "),J8e=n(kHe,"CODE",{});var IBt=s(J8e);Rwr=r(IBt,"__init__()"),IBt.forEach(t),Pwr=r(kHe," (throws an error)."),kHe.forEach(t),Bwr=i(ql),It=n(ql,"DIV",{class:!0});var w7=s(It);T(wx.$$.fragment,w7),Iwr=i(w7),Y8e=n(w7,"P",{});var NBt=s(Y8e);Nwr=r(NBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NBt.forEach(t),qwr=i(w7),vc=n(w7,"P",{});var _ae=s(vc);jwr=r(_ae,`Note:
Loading a model from its configuration file does `),K8e=n(_ae,"STRONG",{});var qBt=s(K8e);Dwr=r(qBt,"not"),qBt.forEach(t),Gwr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(_ae,"A",{href:!0});var jBt=s(PY);Owr=r(jBt,"from_pretrained()"),jBt.forEach(t),Vwr=r(_ae," to load the model weights."),_ae.forEach(t),Xwr=i(w7),T(v4.$$.fragment,w7),w7.forEach(t),zwr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(Ax.$$.fragment,jl),Wwr=i(jl),Z8e=n(jl,"P",{});var DBt=s(Z8e);Qwr=r(DBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),DBt.forEach(t),Hwr=i(jl),fn=n(jl,"P",{});var A7=s(fn);Uwr=r(A7,"The model class to instantiate is selected based on the "),eMe=n(A7,"CODE",{});var GBt=s(eMe);Jwr=r(GBt,"model_type"),GBt.forEach(t),Ywr=r(A7,` property of the config object (either
passed as an argument or loaded from `),oMe=n(A7,"CODE",{});var OBt=s(oMe);Kwr=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),Zwr=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(A7,"CODE",{});var VBt=s(rMe);eAr=r(VBt,"pretrained_model_name_or_path"),VBt.forEach(t),oAr=r(A7,":"),A7.forEach(t),rAr=i(jl),Ve=n(jl,"UL",{});var Mo=s(Ve);F4=n(Mo,"LI",{});var XDe=s(F4);tMe=n(XDe,"STRONG",{});var XBt=s(tMe);tAr=r(XBt,"convnext"),XBt.forEach(t),aAr=r(XDe," \u2014 "),BY=n(XDe,"A",{href:!0});var zBt=s(BY);nAr=r(zBt,"TFConvNextForImageClassification"),zBt.forEach(t),sAr=r(XDe," (ConvNeXT model)"),XDe.forEach(t),lAr=i(Mo),T4=n(Mo,"LI",{});var zDe=s(T4);aMe=n(zDe,"STRONG",{});var WBt=s(aMe);iAr=r(WBt,"data2vec-vision"),WBt.forEach(t),dAr=r(zDe," \u2014 "),IY=n(zDe,"A",{href:!0});var QBt=s(IY);cAr=r(QBt,"TFData2VecVisionForImageClassification"),QBt.forEach(t),fAr=r(zDe," (Data2VecVision model)"),zDe.forEach(t),mAr=i(Mo),el=n(Mo,"LI",{});var ZS=s(el);nMe=n(ZS,"STRONG",{});var HBt=s(nMe);gAr=r(HBt,"deit"),HBt.forEach(t),hAr=r(ZS," \u2014 "),NY=n(ZS,"A",{href:!0});var UBt=s(NY);pAr=r(UBt,"TFDeiTForImageClassification"),UBt.forEach(t),_Ar=r(ZS," or "),qY=n(ZS,"A",{href:!0});var JBt=s(qY);uAr=r(JBt,"TFDeiTForImageClassificationWithTeacher"),JBt.forEach(t),bAr=r(ZS," (DeiT model)"),ZS.forEach(t),vAr=i(Mo),M4=n(Mo,"LI",{});var WDe=s(M4);sMe=n(WDe,"STRONG",{});var YBt=s(sMe);FAr=r(YBt,"regnet"),YBt.forEach(t),TAr=r(WDe," \u2014 "),jY=n(WDe,"A",{href:!0});var KBt=s(jY);MAr=r(KBt,"TFRegNetForImageClassification"),KBt.forEach(t),EAr=r(WDe," (RegNet model)"),WDe.forEach(t),CAr=i(Mo),E4=n(Mo,"LI",{});var QDe=s(E4);lMe=n(QDe,"STRONG",{});var ZBt=s(lMe);wAr=r(ZBt,"resnet"),ZBt.forEach(t),AAr=r(QDe," \u2014 "),DY=n(QDe,"A",{href:!0});var eIt=s(DY);LAr=r(eIt,"TFResNetForImageClassification"),eIt.forEach(t),yAr=r(QDe," (ResNet model)"),QDe.forEach(t),xAr=i(Mo),C4=n(Mo,"LI",{});var HDe=s(C4);iMe=n(HDe,"STRONG",{});var oIt=s(iMe);$Ar=r(oIt,"segformer"),oIt.forEach(t),kAr=r(HDe," \u2014 "),GY=n(HDe,"A",{href:!0});var rIt=s(GY);SAr=r(rIt,"TFSegformerForImageClassification"),rIt.forEach(t),RAr=r(HDe," (SegFormer model)"),HDe.forEach(t),PAr=i(Mo),w4=n(Mo,"LI",{});var UDe=s(w4);dMe=n(UDe,"STRONG",{});var tIt=s(dMe);BAr=r(tIt,"swin"),tIt.forEach(t),IAr=r(UDe," \u2014 "),OY=n(UDe,"A",{href:!0});var aIt=s(OY);NAr=r(aIt,"TFSwinForImageClassification"),aIt.forEach(t),qAr=r(UDe," (Swin Transformer model)"),UDe.forEach(t),jAr=i(Mo),A4=n(Mo,"LI",{});var JDe=s(A4);cMe=n(JDe,"STRONG",{});var nIt=s(cMe);DAr=r(nIt,"vit"),nIt.forEach(t),GAr=r(JDe," \u2014 "),VY=n(JDe,"A",{href:!0});var sIt=s(VY);OAr=r(sIt,"TFViTForImageClassification"),sIt.forEach(t),VAr=r(JDe," (ViT model)"),JDe.forEach(t),Mo.forEach(t),XAr=i(jl),T(L4.$$.fragment,jl),jl.forEach(t),ql.forEach(t),CWe=i(f),Fc=n(f,"H2",{class:!0});var SHe=s(Fc);y4=n(SHe,"A",{id:!0,class:!0,href:!0});var lIt=s(y4);fMe=n(lIt,"SPAN",{});var iIt=s(fMe);T(Lx.$$.fragment,iIt),iIt.forEach(t),lIt.forEach(t),zAr=i(SHe),mMe=n(SHe,"SPAN",{});var dIt=s(mMe);WAr=r(dIt,"TFAutoModelForMaskedLM"),dIt.forEach(t),SHe.forEach(t),wWe=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(yx.$$.fragment,Dl),QAr=i(Dl),Tc=n(Dl,"P",{});var uae=s(Tc);HAr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=n(uae,"A",{href:!0});var cIt=s(XY);UAr=r(cIt,"from_pretrained()"),cIt.forEach(t),JAr=r(uae," class method or the "),zY=n(uae,"A",{href:!0});var fIt=s(zY);YAr=r(fIt,"from_config()"),fIt.forEach(t),KAr=r(uae,` class
method.`),uae.forEach(t),ZAr=i(Dl),xx=n(Dl,"P",{});var RHe=s(xx);e7r=r(RHe,"This class cannot be instantiated directly using "),gMe=n(RHe,"CODE",{});var mIt=s(gMe);o7r=r(mIt,"__init__()"),mIt.forEach(t),r7r=r(RHe," (throws an error)."),RHe.forEach(t),t7r=i(Dl),Nt=n(Dl,"DIV",{class:!0});var L7=s(Nt);T($x.$$.fragment,L7),a7r=i(L7),hMe=n(L7,"P",{});var gIt=s(hMe);n7r=r(gIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gIt.forEach(t),s7r=i(L7),Mc=n(L7,"P",{});var bae=s(Mc);l7r=r(bae,`Note:
Loading a model from its configuration file does `),pMe=n(bae,"STRONG",{});var hIt=s(pMe);i7r=r(hIt,"not"),hIt.forEach(t),d7r=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(bae,"A",{href:!0});var pIt=s(WY);c7r=r(pIt,"from_pretrained()"),pIt.forEach(t),f7r=r(bae," to load the model weights."),bae.forEach(t),m7r=i(L7),T(x4.$$.fragment,L7),L7.forEach(t),g7r=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(kx.$$.fragment,Gl),h7r=i(Gl),_Me=n(Gl,"P",{});var _It=s(_Me);p7r=r(_It,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_It.forEach(t),_7r=i(Gl),mn=n(Gl,"P",{});var y7=s(mn);u7r=r(y7,"The model class to instantiate is selected based on the "),uMe=n(y7,"CODE",{});var uIt=s(uMe);b7r=r(uIt,"model_type"),uIt.forEach(t),v7r=r(y7,` property of the config object (either
passed as an argument or loaded from `),bMe=n(y7,"CODE",{});var bIt=s(bMe);F7r=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),T7r=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vMe=n(y7,"CODE",{});var vIt=s(vMe);M7r=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),E7r=r(y7,":"),y7.forEach(t),C7r=i(Gl),ie=n(Gl,"UL",{});var ge=s(ie);$4=n(ge,"LI",{});var YDe=s($4);FMe=n(YDe,"STRONG",{});var FIt=s(FMe);w7r=r(FIt,"albert"),FIt.forEach(t),A7r=r(YDe," \u2014 "),QY=n(YDe,"A",{href:!0});var TIt=s(QY);L7r=r(TIt,"TFAlbertForMaskedLM"),TIt.forEach(t),y7r=r(YDe," (ALBERT model)"),YDe.forEach(t),x7r=i(ge),k4=n(ge,"LI",{});var KDe=s(k4);TMe=n(KDe,"STRONG",{});var MIt=s(TMe);$7r=r(MIt,"bert"),MIt.forEach(t),k7r=r(KDe," \u2014 "),HY=n(KDe,"A",{href:!0});var EIt=s(HY);S7r=r(EIt,"TFBertForMaskedLM"),EIt.forEach(t),R7r=r(KDe," (BERT model)"),KDe.forEach(t),P7r=i(ge),S4=n(ge,"LI",{});var ZDe=s(S4);MMe=n(ZDe,"STRONG",{});var CIt=s(MMe);B7r=r(CIt,"camembert"),CIt.forEach(t),I7r=r(ZDe," \u2014 "),UY=n(ZDe,"A",{href:!0});var wIt=s(UY);N7r=r(wIt,"TFCamembertForMaskedLM"),wIt.forEach(t),q7r=r(ZDe," (CamemBERT model)"),ZDe.forEach(t),j7r=i(ge),R4=n(ge,"LI",{});var eGe=s(R4);EMe=n(eGe,"STRONG",{});var AIt=s(EMe);D7r=r(AIt,"convbert"),AIt.forEach(t),G7r=r(eGe," \u2014 "),JY=n(eGe,"A",{href:!0});var LIt=s(JY);O7r=r(LIt,"TFConvBertForMaskedLM"),LIt.forEach(t),V7r=r(eGe," (ConvBERT model)"),eGe.forEach(t),X7r=i(ge),P4=n(ge,"LI",{});var oGe=s(P4);CMe=n(oGe,"STRONG",{});var yIt=s(CMe);z7r=r(yIt,"deberta"),yIt.forEach(t),W7r=r(oGe," \u2014 "),YY=n(oGe,"A",{href:!0});var xIt=s(YY);Q7r=r(xIt,"TFDebertaForMaskedLM"),xIt.forEach(t),H7r=r(oGe," (DeBERTa model)"),oGe.forEach(t),U7r=i(ge),B4=n(ge,"LI",{});var rGe=s(B4);wMe=n(rGe,"STRONG",{});var $It=s(wMe);J7r=r($It,"deberta-v2"),$It.forEach(t),Y7r=r(rGe," \u2014 "),KY=n(rGe,"A",{href:!0});var kIt=s(KY);K7r=r(kIt,"TFDebertaV2ForMaskedLM"),kIt.forEach(t),Z7r=r(rGe," (DeBERTa-v2 model)"),rGe.forEach(t),eLr=i(ge),I4=n(ge,"LI",{});var tGe=s(I4);AMe=n(tGe,"STRONG",{});var SIt=s(AMe);oLr=r(SIt,"distilbert"),SIt.forEach(t),rLr=r(tGe," \u2014 "),ZY=n(tGe,"A",{href:!0});var RIt=s(ZY);tLr=r(RIt,"TFDistilBertForMaskedLM"),RIt.forEach(t),aLr=r(tGe," (DistilBERT model)"),tGe.forEach(t),nLr=i(ge),N4=n(ge,"LI",{});var aGe=s(N4);LMe=n(aGe,"STRONG",{});var PIt=s(LMe);sLr=r(PIt,"electra"),PIt.forEach(t),lLr=r(aGe," \u2014 "),eK=n(aGe,"A",{href:!0});var BIt=s(eK);iLr=r(BIt,"TFElectraForMaskedLM"),BIt.forEach(t),dLr=r(aGe," (ELECTRA model)"),aGe.forEach(t),cLr=i(ge),q4=n(ge,"LI",{});var nGe=s(q4);yMe=n(nGe,"STRONG",{});var IIt=s(yMe);fLr=r(IIt,"flaubert"),IIt.forEach(t),mLr=r(nGe," \u2014 "),oK=n(nGe,"A",{href:!0});var NIt=s(oK);gLr=r(NIt,"TFFlaubertWithLMHeadModel"),NIt.forEach(t),hLr=r(nGe," (FlauBERT model)"),nGe.forEach(t),pLr=i(ge),j4=n(ge,"LI",{});var sGe=s(j4);xMe=n(sGe,"STRONG",{});var qIt=s(xMe);_Lr=r(qIt,"funnel"),qIt.forEach(t),uLr=r(sGe," \u2014 "),rK=n(sGe,"A",{href:!0});var jIt=s(rK);bLr=r(jIt,"TFFunnelForMaskedLM"),jIt.forEach(t),vLr=r(sGe," (Funnel Transformer model)"),sGe.forEach(t),FLr=i(ge),D4=n(ge,"LI",{});var lGe=s(D4);$Me=n(lGe,"STRONG",{});var DIt=s($Me);TLr=r(DIt,"layoutlm"),DIt.forEach(t),MLr=r(lGe," \u2014 "),tK=n(lGe,"A",{href:!0});var GIt=s(tK);ELr=r(GIt,"TFLayoutLMForMaskedLM"),GIt.forEach(t),CLr=r(lGe," (LayoutLM model)"),lGe.forEach(t),wLr=i(ge),G4=n(ge,"LI",{});var iGe=s(G4);kMe=n(iGe,"STRONG",{});var OIt=s(kMe);ALr=r(OIt,"longformer"),OIt.forEach(t),LLr=r(iGe," \u2014 "),aK=n(iGe,"A",{href:!0});var VIt=s(aK);yLr=r(VIt,"TFLongformerForMaskedLM"),VIt.forEach(t),xLr=r(iGe," (Longformer model)"),iGe.forEach(t),$Lr=i(ge),O4=n(ge,"LI",{});var dGe=s(O4);SMe=n(dGe,"STRONG",{});var XIt=s(SMe);kLr=r(XIt,"mobilebert"),XIt.forEach(t),SLr=r(dGe," \u2014 "),nK=n(dGe,"A",{href:!0});var zIt=s(nK);RLr=r(zIt,"TFMobileBertForMaskedLM"),zIt.forEach(t),PLr=r(dGe," (MobileBERT model)"),dGe.forEach(t),BLr=i(ge),V4=n(ge,"LI",{});var cGe=s(V4);RMe=n(cGe,"STRONG",{});var WIt=s(RMe);ILr=r(WIt,"mpnet"),WIt.forEach(t),NLr=r(cGe," \u2014 "),sK=n(cGe,"A",{href:!0});var QIt=s(sK);qLr=r(QIt,"TFMPNetForMaskedLM"),QIt.forEach(t),jLr=r(cGe," (MPNet model)"),cGe.forEach(t),DLr=i(ge),X4=n(ge,"LI",{});var fGe=s(X4);PMe=n(fGe,"STRONG",{});var HIt=s(PMe);GLr=r(HIt,"rembert"),HIt.forEach(t),OLr=r(fGe," \u2014 "),lK=n(fGe,"A",{href:!0});var UIt=s(lK);VLr=r(UIt,"TFRemBertForMaskedLM"),UIt.forEach(t),XLr=r(fGe," (RemBERT model)"),fGe.forEach(t),zLr=i(ge),z4=n(ge,"LI",{});var mGe=s(z4);BMe=n(mGe,"STRONG",{});var JIt=s(BMe);WLr=r(JIt,"roberta"),JIt.forEach(t),QLr=r(mGe," \u2014 "),iK=n(mGe,"A",{href:!0});var YIt=s(iK);HLr=r(YIt,"TFRobertaForMaskedLM"),YIt.forEach(t),ULr=r(mGe," (RoBERTa model)"),mGe.forEach(t),JLr=i(ge),W4=n(ge,"LI",{});var gGe=s(W4);IMe=n(gGe,"STRONG",{});var KIt=s(IMe);YLr=r(KIt,"roformer"),KIt.forEach(t),KLr=r(gGe," \u2014 "),dK=n(gGe,"A",{href:!0});var ZIt=s(dK);ZLr=r(ZIt,"TFRoFormerForMaskedLM"),ZIt.forEach(t),eyr=r(gGe," (RoFormer model)"),gGe.forEach(t),oyr=i(ge),Q4=n(ge,"LI",{});var hGe=s(Q4);NMe=n(hGe,"STRONG",{});var eNt=s(NMe);ryr=r(eNt,"tapas"),eNt.forEach(t),tyr=r(hGe," \u2014 "),cK=n(hGe,"A",{href:!0});var oNt=s(cK);ayr=r(oNt,"TFTapasForMaskedLM"),oNt.forEach(t),nyr=r(hGe," (TAPAS model)"),hGe.forEach(t),syr=i(ge),H4=n(ge,"LI",{});var pGe=s(H4);qMe=n(pGe,"STRONG",{});var rNt=s(qMe);lyr=r(rNt,"xlm"),rNt.forEach(t),iyr=r(pGe," \u2014 "),fK=n(pGe,"A",{href:!0});var tNt=s(fK);dyr=r(tNt,"TFXLMWithLMHeadModel"),tNt.forEach(t),cyr=r(pGe," (XLM model)"),pGe.forEach(t),fyr=i(ge),U4=n(ge,"LI",{});var _Ge=s(U4);jMe=n(_Ge,"STRONG",{});var aNt=s(jMe);myr=r(aNt,"xlm-roberta"),aNt.forEach(t),gyr=r(_Ge," \u2014 "),mK=n(_Ge,"A",{href:!0});var nNt=s(mK);hyr=r(nNt,"TFXLMRobertaForMaskedLM"),nNt.forEach(t),pyr=r(_Ge," (XLM-RoBERTa model)"),_Ge.forEach(t),ge.forEach(t),_yr=i(Gl),T(J4.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),AWe=i(f),Ec=n(f,"H2",{class:!0});var PHe=s(Ec);Y4=n(PHe,"A",{id:!0,class:!0,href:!0});var sNt=s(Y4);DMe=n(sNt,"SPAN",{});var lNt=s(DMe);T(Sx.$$.fragment,lNt),lNt.forEach(t),sNt.forEach(t),uyr=i(PHe),GMe=n(PHe,"SPAN",{});var iNt=s(GMe);byr=r(iNt,"TFAutoModelForSeq2SeqLM"),iNt.forEach(t),PHe.forEach(t),LWe=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(Rx.$$.fragment,Ol),vyr=i(Ol),Cc=n(Ol,"P",{});var vae=s(Cc);Fyr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gK=n(vae,"A",{href:!0});var dNt=s(gK);Tyr=r(dNt,"from_pretrained()"),dNt.forEach(t),Myr=r(vae," class method or the "),hK=n(vae,"A",{href:!0});var cNt=s(hK);Eyr=r(cNt,"from_config()"),cNt.forEach(t),Cyr=r(vae,` class
method.`),vae.forEach(t),wyr=i(Ol),Px=n(Ol,"P",{});var BHe=s(Px);Ayr=r(BHe,"This class cannot be instantiated directly using "),OMe=n(BHe,"CODE",{});var fNt=s(OMe);Lyr=r(fNt,"__init__()"),fNt.forEach(t),yyr=r(BHe," (throws an error)."),BHe.forEach(t),xyr=i(Ol),qt=n(Ol,"DIV",{class:!0});var x7=s(qt);T(Bx.$$.fragment,x7),$yr=i(x7),VMe=n(x7,"P",{});var mNt=s(VMe);kyr=r(mNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mNt.forEach(t),Syr=i(x7),wc=n(x7,"P",{});var Fae=s(wc);Ryr=r(Fae,`Note:
Loading a model from its configuration file does `),XMe=n(Fae,"STRONG",{});var gNt=s(XMe);Pyr=r(gNt,"not"),gNt.forEach(t),Byr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(Fae,"A",{href:!0});var hNt=s(pK);Iyr=r(hNt,"from_pretrained()"),hNt.forEach(t),Nyr=r(Fae," to load the model weights."),Fae.forEach(t),qyr=i(x7),T(K4.$$.fragment,x7),x7.forEach(t),jyr=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Ix.$$.fragment,Vl),Dyr=i(Vl),zMe=n(Vl,"P",{});var pNt=s(zMe);Gyr=r(pNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pNt.forEach(t),Oyr=i(Vl),gn=n(Vl,"P",{});var $7=s(gn);Vyr=r($7,"The model class to instantiate is selected based on the "),WMe=n($7,"CODE",{});var _Nt=s(WMe);Xyr=r(_Nt,"model_type"),_Nt.forEach(t),zyr=r($7,` property of the config object (either
passed as an argument or loaded from `),QMe=n($7,"CODE",{});var uNt=s(QMe);Wyr=r(uNt,"pretrained_model_name_or_path"),uNt.forEach(t),Qyr=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HMe=n($7,"CODE",{});var bNt=s(HMe);Hyr=r(bNt,"pretrained_model_name_or_path"),bNt.forEach(t),Uyr=r($7,":"),$7.forEach(t),Jyr=i(Vl),ye=n(Vl,"UL",{});var Ie=s(ye);Z4=n(Ie,"LI",{});var uGe=s(Z4);UMe=n(uGe,"STRONG",{});var vNt=s(UMe);Yyr=r(vNt,"bart"),vNt.forEach(t),Kyr=r(uGe," \u2014 "),_K=n(uGe,"A",{href:!0});var FNt=s(_K);Zyr=r(FNt,"TFBartForConditionalGeneration"),FNt.forEach(t),e9r=r(uGe," (BART model)"),uGe.forEach(t),o9r=i(Ie),eE=n(Ie,"LI",{});var bGe=s(eE);JMe=n(bGe,"STRONG",{});var TNt=s(JMe);r9r=r(TNt,"blenderbot"),TNt.forEach(t),t9r=r(bGe," \u2014 "),uK=n(bGe,"A",{href:!0});var MNt=s(uK);a9r=r(MNt,"TFBlenderbotForConditionalGeneration"),MNt.forEach(t),n9r=r(bGe," (Blenderbot model)"),bGe.forEach(t),s9r=i(Ie),oE=n(Ie,"LI",{});var vGe=s(oE);YMe=n(vGe,"STRONG",{});var ENt=s(YMe);l9r=r(ENt,"blenderbot-small"),ENt.forEach(t),i9r=r(vGe," \u2014 "),bK=n(vGe,"A",{href:!0});var CNt=s(bK);d9r=r(CNt,"TFBlenderbotSmallForConditionalGeneration"),CNt.forEach(t),c9r=r(vGe," (BlenderbotSmall model)"),vGe.forEach(t),f9r=i(Ie),rE=n(Ie,"LI",{});var FGe=s(rE);KMe=n(FGe,"STRONG",{});var wNt=s(KMe);m9r=r(wNt,"encoder-decoder"),wNt.forEach(t),g9r=r(FGe," \u2014 "),vK=n(FGe,"A",{href:!0});var ANt=s(vK);h9r=r(ANt,"TFEncoderDecoderModel"),ANt.forEach(t),p9r=r(FGe," (Encoder decoder model)"),FGe.forEach(t),_9r=i(Ie),tE=n(Ie,"LI",{});var TGe=s(tE);ZMe=n(TGe,"STRONG",{});var LNt=s(ZMe);u9r=r(LNt,"led"),LNt.forEach(t),b9r=r(TGe," \u2014 "),FK=n(TGe,"A",{href:!0});var yNt=s(FK);v9r=r(yNt,"TFLEDForConditionalGeneration"),yNt.forEach(t),F9r=r(TGe," (LED model)"),TGe.forEach(t),T9r=i(Ie),aE=n(Ie,"LI",{});var MGe=s(aE);e4e=n(MGe,"STRONG",{});var xNt=s(e4e);M9r=r(xNt,"marian"),xNt.forEach(t),E9r=r(MGe," \u2014 "),TK=n(MGe,"A",{href:!0});var $Nt=s(TK);C9r=r($Nt,"TFMarianMTModel"),$Nt.forEach(t),w9r=r(MGe," (Marian model)"),MGe.forEach(t),A9r=i(Ie),nE=n(Ie,"LI",{});var EGe=s(nE);o4e=n(EGe,"STRONG",{});var kNt=s(o4e);L9r=r(kNt,"mbart"),kNt.forEach(t),y9r=r(EGe," \u2014 "),MK=n(EGe,"A",{href:!0});var SNt=s(MK);x9r=r(SNt,"TFMBartForConditionalGeneration"),SNt.forEach(t),$9r=r(EGe," (mBART model)"),EGe.forEach(t),k9r=i(Ie),sE=n(Ie,"LI",{});var CGe=s(sE);r4e=n(CGe,"STRONG",{});var RNt=s(r4e);S9r=r(RNt,"mt5"),RNt.forEach(t),R9r=r(CGe," \u2014 "),EK=n(CGe,"A",{href:!0});var PNt=s(EK);P9r=r(PNt,"TFMT5ForConditionalGeneration"),PNt.forEach(t),B9r=r(CGe," (MT5 model)"),CGe.forEach(t),I9r=i(Ie),lE=n(Ie,"LI",{});var wGe=s(lE);t4e=n(wGe,"STRONG",{});var BNt=s(t4e);N9r=r(BNt,"pegasus"),BNt.forEach(t),q9r=r(wGe," \u2014 "),CK=n(wGe,"A",{href:!0});var INt=s(CK);j9r=r(INt,"TFPegasusForConditionalGeneration"),INt.forEach(t),D9r=r(wGe," (Pegasus model)"),wGe.forEach(t),G9r=i(Ie),iE=n(Ie,"LI",{});var AGe=s(iE);a4e=n(AGe,"STRONG",{});var NNt=s(a4e);O9r=r(NNt,"t5"),NNt.forEach(t),V9r=r(AGe," \u2014 "),wK=n(AGe,"A",{href:!0});var qNt=s(wK);X9r=r(qNt,"TFT5ForConditionalGeneration"),qNt.forEach(t),z9r=r(AGe," (T5 model)"),AGe.forEach(t),Ie.forEach(t),W9r=i(Vl),T(dE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),yWe=i(f),Ac=n(f,"H2",{class:!0});var IHe=s(Ac);cE=n(IHe,"A",{id:!0,class:!0,href:!0});var jNt=s(cE);n4e=n(jNt,"SPAN",{});var DNt=s(n4e);T(Nx.$$.fragment,DNt),DNt.forEach(t),jNt.forEach(t),Q9r=i(IHe),s4e=n(IHe,"SPAN",{});var GNt=s(s4e);H9r=r(GNt,"TFAutoModelForSequenceClassification"),GNt.forEach(t),IHe.forEach(t),xWe=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(qx.$$.fragment,Xl),U9r=i(Xl),Lc=n(Xl,"P",{});var Tae=s(Lc);J9r=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AK=n(Tae,"A",{href:!0});var ONt=s(AK);Y9r=r(ONt,"from_pretrained()"),ONt.forEach(t),K9r=r(Tae," class method or the "),LK=n(Tae,"A",{href:!0});var VNt=s(LK);Z9r=r(VNt,"from_config()"),VNt.forEach(t),exr=r(Tae,` class
method.`),Tae.forEach(t),oxr=i(Xl),jx=n(Xl,"P",{});var NHe=s(jx);rxr=r(NHe,"This class cannot be instantiated directly using "),l4e=n(NHe,"CODE",{});var XNt=s(l4e);txr=r(XNt,"__init__()"),XNt.forEach(t),axr=r(NHe," (throws an error)."),NHe.forEach(t),nxr=i(Xl),jt=n(Xl,"DIV",{class:!0});var k7=s(jt);T(Dx.$$.fragment,k7),sxr=i(k7),i4e=n(k7,"P",{});var zNt=s(i4e);lxr=r(zNt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zNt.forEach(t),ixr=i(k7),yc=n(k7,"P",{});var Mae=s(yc);dxr=r(Mae,`Note:
Loading a model from its configuration file does `),d4e=n(Mae,"STRONG",{});var WNt=s(d4e);cxr=r(WNt,"not"),WNt.forEach(t),fxr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(Mae,"A",{href:!0});var QNt=s(yK);mxr=r(QNt,"from_pretrained()"),QNt.forEach(t),gxr=r(Mae," to load the model weights."),Mae.forEach(t),hxr=i(k7),T(fE.$$.fragment,k7),k7.forEach(t),pxr=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Gx.$$.fragment,zl),_xr=i(zl),c4e=n(zl,"P",{});var HNt=s(c4e);uxr=r(HNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HNt.forEach(t),bxr=i(zl),hn=n(zl,"P",{});var S7=s(hn);vxr=r(S7,"The model class to instantiate is selected based on the "),f4e=n(S7,"CODE",{});var UNt=s(f4e);Fxr=r(UNt,"model_type"),UNt.forEach(t),Txr=r(S7,` property of the config object (either
passed as an argument or loaded from `),m4e=n(S7,"CODE",{});var JNt=s(m4e);Mxr=r(JNt,"pretrained_model_name_or_path"),JNt.forEach(t),Exr=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(S7,"CODE",{});var YNt=s(g4e);Cxr=r(YNt,"pretrained_model_name_or_path"),YNt.forEach(t),wxr=r(S7,":"),S7.forEach(t),Axr=i(zl),te=n(zl,"UL",{});var ne=s(te);mE=n(ne,"LI",{});var LGe=s(mE);h4e=n(LGe,"STRONG",{});var KNt=s(h4e);Lxr=r(KNt,"albert"),KNt.forEach(t),yxr=r(LGe," \u2014 "),xK=n(LGe,"A",{href:!0});var ZNt=s(xK);xxr=r(ZNt,"TFAlbertForSequenceClassification"),ZNt.forEach(t),$xr=r(LGe," (ALBERT model)"),LGe.forEach(t),kxr=i(ne),gE=n(ne,"LI",{});var yGe=s(gE);p4e=n(yGe,"STRONG",{});var eqt=s(p4e);Sxr=r(eqt,"bert"),eqt.forEach(t),Rxr=r(yGe," \u2014 "),$K=n(yGe,"A",{href:!0});var oqt=s($K);Pxr=r(oqt,"TFBertForSequenceClassification"),oqt.forEach(t),Bxr=r(yGe," (BERT model)"),yGe.forEach(t),Ixr=i(ne),hE=n(ne,"LI",{});var xGe=s(hE);_4e=n(xGe,"STRONG",{});var rqt=s(_4e);Nxr=r(rqt,"camembert"),rqt.forEach(t),qxr=r(xGe," \u2014 "),kK=n(xGe,"A",{href:!0});var tqt=s(kK);jxr=r(tqt,"TFCamembertForSequenceClassification"),tqt.forEach(t),Dxr=r(xGe," (CamemBERT model)"),xGe.forEach(t),Gxr=i(ne),pE=n(ne,"LI",{});var $Ge=s(pE);u4e=n($Ge,"STRONG",{});var aqt=s(u4e);Oxr=r(aqt,"convbert"),aqt.forEach(t),Vxr=r($Ge," \u2014 "),SK=n($Ge,"A",{href:!0});var nqt=s(SK);Xxr=r(nqt,"TFConvBertForSequenceClassification"),nqt.forEach(t),zxr=r($Ge," (ConvBERT model)"),$Ge.forEach(t),Wxr=i(ne),_E=n(ne,"LI",{});var kGe=s(_E);b4e=n(kGe,"STRONG",{});var sqt=s(b4e);Qxr=r(sqt,"ctrl"),sqt.forEach(t),Hxr=r(kGe," \u2014 "),RK=n(kGe,"A",{href:!0});var lqt=s(RK);Uxr=r(lqt,"TFCTRLForSequenceClassification"),lqt.forEach(t),Jxr=r(kGe," (CTRL model)"),kGe.forEach(t),Yxr=i(ne),uE=n(ne,"LI",{});var SGe=s(uE);v4e=n(SGe,"STRONG",{});var iqt=s(v4e);Kxr=r(iqt,"deberta"),iqt.forEach(t),Zxr=r(SGe," \u2014 "),PK=n(SGe,"A",{href:!0});var dqt=s(PK);e$r=r(dqt,"TFDebertaForSequenceClassification"),dqt.forEach(t),o$r=r(SGe," (DeBERTa model)"),SGe.forEach(t),r$r=i(ne),bE=n(ne,"LI",{});var RGe=s(bE);F4e=n(RGe,"STRONG",{});var cqt=s(F4e);t$r=r(cqt,"deberta-v2"),cqt.forEach(t),a$r=r(RGe," \u2014 "),BK=n(RGe,"A",{href:!0});var fqt=s(BK);n$r=r(fqt,"TFDebertaV2ForSequenceClassification"),fqt.forEach(t),s$r=r(RGe," (DeBERTa-v2 model)"),RGe.forEach(t),l$r=i(ne),vE=n(ne,"LI",{});var PGe=s(vE);T4e=n(PGe,"STRONG",{});var mqt=s(T4e);i$r=r(mqt,"distilbert"),mqt.forEach(t),d$r=r(PGe," \u2014 "),IK=n(PGe,"A",{href:!0});var gqt=s(IK);c$r=r(gqt,"TFDistilBertForSequenceClassification"),gqt.forEach(t),f$r=r(PGe," (DistilBERT model)"),PGe.forEach(t),m$r=i(ne),FE=n(ne,"LI",{});var BGe=s(FE);M4e=n(BGe,"STRONG",{});var hqt=s(M4e);g$r=r(hqt,"electra"),hqt.forEach(t),h$r=r(BGe," \u2014 "),NK=n(BGe,"A",{href:!0});var pqt=s(NK);p$r=r(pqt,"TFElectraForSequenceClassification"),pqt.forEach(t),_$r=r(BGe," (ELECTRA model)"),BGe.forEach(t),u$r=i(ne),TE=n(ne,"LI",{});var IGe=s(TE);E4e=n(IGe,"STRONG",{});var _qt=s(E4e);b$r=r(_qt,"flaubert"),_qt.forEach(t),v$r=r(IGe," \u2014 "),qK=n(IGe,"A",{href:!0});var uqt=s(qK);F$r=r(uqt,"TFFlaubertForSequenceClassification"),uqt.forEach(t),T$r=r(IGe," (FlauBERT model)"),IGe.forEach(t),M$r=i(ne),ME=n(ne,"LI",{});var NGe=s(ME);C4e=n(NGe,"STRONG",{});var bqt=s(C4e);E$r=r(bqt,"funnel"),bqt.forEach(t),C$r=r(NGe," \u2014 "),jK=n(NGe,"A",{href:!0});var vqt=s(jK);w$r=r(vqt,"TFFunnelForSequenceClassification"),vqt.forEach(t),A$r=r(NGe," (Funnel Transformer model)"),NGe.forEach(t),L$r=i(ne),EE=n(ne,"LI",{});var qGe=s(EE);w4e=n(qGe,"STRONG",{});var Fqt=s(w4e);y$r=r(Fqt,"gpt2"),Fqt.forEach(t),x$r=r(qGe," \u2014 "),DK=n(qGe,"A",{href:!0});var Tqt=s(DK);$$r=r(Tqt,"TFGPT2ForSequenceClassification"),Tqt.forEach(t),k$r=r(qGe," (OpenAI GPT-2 model)"),qGe.forEach(t),S$r=i(ne),CE=n(ne,"LI",{});var jGe=s(CE);A4e=n(jGe,"STRONG",{});var Mqt=s(A4e);R$r=r(Mqt,"gptj"),Mqt.forEach(t),P$r=r(jGe," \u2014 "),GK=n(jGe,"A",{href:!0});var Eqt=s(GK);B$r=r(Eqt,"TFGPTJForSequenceClassification"),Eqt.forEach(t),I$r=r(jGe," (GPT-J model)"),jGe.forEach(t),N$r=i(ne),wE=n(ne,"LI",{});var DGe=s(wE);L4e=n(DGe,"STRONG",{});var Cqt=s(L4e);q$r=r(Cqt,"layoutlm"),Cqt.forEach(t),j$r=r(DGe," \u2014 "),OK=n(DGe,"A",{href:!0});var wqt=s(OK);D$r=r(wqt,"TFLayoutLMForSequenceClassification"),wqt.forEach(t),G$r=r(DGe," (LayoutLM model)"),DGe.forEach(t),O$r=i(ne),AE=n(ne,"LI",{});var GGe=s(AE);y4e=n(GGe,"STRONG",{});var Aqt=s(y4e);V$r=r(Aqt,"longformer"),Aqt.forEach(t),X$r=r(GGe," \u2014 "),VK=n(GGe,"A",{href:!0});var Lqt=s(VK);z$r=r(Lqt,"TFLongformerForSequenceClassification"),Lqt.forEach(t),W$r=r(GGe," (Longformer model)"),GGe.forEach(t),Q$r=i(ne),LE=n(ne,"LI",{});var OGe=s(LE);x4e=n(OGe,"STRONG",{});var yqt=s(x4e);H$r=r(yqt,"mobilebert"),yqt.forEach(t),U$r=r(OGe," \u2014 "),XK=n(OGe,"A",{href:!0});var xqt=s(XK);J$r=r(xqt,"TFMobileBertForSequenceClassification"),xqt.forEach(t),Y$r=r(OGe," (MobileBERT model)"),OGe.forEach(t),K$r=i(ne),yE=n(ne,"LI",{});var VGe=s(yE);$4e=n(VGe,"STRONG",{});var $qt=s($4e);Z$r=r($qt,"mpnet"),$qt.forEach(t),ekr=r(VGe," \u2014 "),zK=n(VGe,"A",{href:!0});var kqt=s(zK);okr=r(kqt,"TFMPNetForSequenceClassification"),kqt.forEach(t),rkr=r(VGe," (MPNet model)"),VGe.forEach(t),tkr=i(ne),xE=n(ne,"LI",{});var XGe=s(xE);k4e=n(XGe,"STRONG",{});var Sqt=s(k4e);akr=r(Sqt,"openai-gpt"),Sqt.forEach(t),nkr=r(XGe," \u2014 "),WK=n(XGe,"A",{href:!0});var Rqt=s(WK);skr=r(Rqt,"TFOpenAIGPTForSequenceClassification"),Rqt.forEach(t),lkr=r(XGe," (OpenAI GPT model)"),XGe.forEach(t),ikr=i(ne),$E=n(ne,"LI",{});var zGe=s($E);S4e=n(zGe,"STRONG",{});var Pqt=s(S4e);dkr=r(Pqt,"rembert"),Pqt.forEach(t),ckr=r(zGe," \u2014 "),QK=n(zGe,"A",{href:!0});var Bqt=s(QK);fkr=r(Bqt,"TFRemBertForSequenceClassification"),Bqt.forEach(t),mkr=r(zGe," (RemBERT model)"),zGe.forEach(t),gkr=i(ne),kE=n(ne,"LI",{});var WGe=s(kE);R4e=n(WGe,"STRONG",{});var Iqt=s(R4e);hkr=r(Iqt,"roberta"),Iqt.forEach(t),pkr=r(WGe," \u2014 "),HK=n(WGe,"A",{href:!0});var Nqt=s(HK);_kr=r(Nqt,"TFRobertaForSequenceClassification"),Nqt.forEach(t),ukr=r(WGe," (RoBERTa model)"),WGe.forEach(t),bkr=i(ne),SE=n(ne,"LI",{});var QGe=s(SE);P4e=n(QGe,"STRONG",{});var qqt=s(P4e);vkr=r(qqt,"roformer"),qqt.forEach(t),Fkr=r(QGe," \u2014 "),UK=n(QGe,"A",{href:!0});var jqt=s(UK);Tkr=r(jqt,"TFRoFormerForSequenceClassification"),jqt.forEach(t),Mkr=r(QGe," (RoFormer model)"),QGe.forEach(t),Ekr=i(ne),RE=n(ne,"LI",{});var HGe=s(RE);B4e=n(HGe,"STRONG",{});var Dqt=s(B4e);Ckr=r(Dqt,"tapas"),Dqt.forEach(t),wkr=r(HGe," \u2014 "),JK=n(HGe,"A",{href:!0});var Gqt=s(JK);Akr=r(Gqt,"TFTapasForSequenceClassification"),Gqt.forEach(t),Lkr=r(HGe," (TAPAS model)"),HGe.forEach(t),ykr=i(ne),PE=n(ne,"LI",{});var UGe=s(PE);I4e=n(UGe,"STRONG",{});var Oqt=s(I4e);xkr=r(Oqt,"transfo-xl"),Oqt.forEach(t),$kr=r(UGe," \u2014 "),YK=n(UGe,"A",{href:!0});var Vqt=s(YK);kkr=r(Vqt,"TFTransfoXLForSequenceClassification"),Vqt.forEach(t),Skr=r(UGe," (Transformer-XL model)"),UGe.forEach(t),Rkr=i(ne),BE=n(ne,"LI",{});var JGe=s(BE);N4e=n(JGe,"STRONG",{});var Xqt=s(N4e);Pkr=r(Xqt,"xlm"),Xqt.forEach(t),Bkr=r(JGe," \u2014 "),KK=n(JGe,"A",{href:!0});var zqt=s(KK);Ikr=r(zqt,"TFXLMForSequenceClassification"),zqt.forEach(t),Nkr=r(JGe," (XLM model)"),JGe.forEach(t),qkr=i(ne),IE=n(ne,"LI",{});var YGe=s(IE);q4e=n(YGe,"STRONG",{});var Wqt=s(q4e);jkr=r(Wqt,"xlm-roberta"),Wqt.forEach(t),Dkr=r(YGe," \u2014 "),ZK=n(YGe,"A",{href:!0});var Qqt=s(ZK);Gkr=r(Qqt,"TFXLMRobertaForSequenceClassification"),Qqt.forEach(t),Okr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),Vkr=i(ne),NE=n(ne,"LI",{});var KGe=s(NE);j4e=n(KGe,"STRONG",{});var Hqt=s(j4e);Xkr=r(Hqt,"xlnet"),Hqt.forEach(t),zkr=r(KGe," \u2014 "),eZ=n(KGe,"A",{href:!0});var Uqt=s(eZ);Wkr=r(Uqt,"TFXLNetForSequenceClassification"),Uqt.forEach(t),Qkr=r(KGe," (XLNet model)"),KGe.forEach(t),ne.forEach(t),Hkr=i(zl),T(qE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),$We=i(f),xc=n(f,"H2",{class:!0});var qHe=s(xc);jE=n(qHe,"A",{id:!0,class:!0,href:!0});var Jqt=s(jE);D4e=n(Jqt,"SPAN",{});var Yqt=s(D4e);T(Ox.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),Ukr=i(qHe),G4e=n(qHe,"SPAN",{});var Kqt=s(G4e);Jkr=r(Kqt,"TFAutoModelForMultipleChoice"),Kqt.forEach(t),qHe.forEach(t),kWe=i(f),dr=n(f,"DIV",{class:!0});var Wl=s(dr);T(Vx.$$.fragment,Wl),Ykr=i(Wl),$c=n(Wl,"P",{});var Eae=s($c);Kkr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oZ=n(Eae,"A",{href:!0});var Zqt=s(oZ);Zkr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),eSr=r(Eae," class method or the "),rZ=n(Eae,"A",{href:!0});var ejt=s(rZ);oSr=r(ejt,"from_config()"),ejt.forEach(t),rSr=r(Eae,` class
method.`),Eae.forEach(t),tSr=i(Wl),Xx=n(Wl,"P",{});var jHe=s(Xx);aSr=r(jHe,"This class cannot be instantiated directly using "),O4e=n(jHe,"CODE",{});var ojt=s(O4e);nSr=r(ojt,"__init__()"),ojt.forEach(t),sSr=r(jHe," (throws an error)."),jHe.forEach(t),lSr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var R7=s(Dt);T(zx.$$.fragment,R7),iSr=i(R7),V4e=n(R7,"P",{});var rjt=s(V4e);dSr=r(rjt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rjt.forEach(t),cSr=i(R7),kc=n(R7,"P",{});var Cae=s(kc);fSr=r(Cae,`Note:
Loading a model from its configuration file does `),X4e=n(Cae,"STRONG",{});var tjt=s(X4e);mSr=r(tjt,"not"),tjt.forEach(t),gSr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Cae,"A",{href:!0});var ajt=s(tZ);hSr=r(ajt,"from_pretrained()"),ajt.forEach(t),pSr=r(Cae," to load the model weights."),Cae.forEach(t),_Sr=i(R7),T(DE.$$.fragment,R7),R7.forEach(t),uSr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Ql=s(Nr);T(Wx.$$.fragment,Ql),bSr=i(Ql),z4e=n(Ql,"P",{});var njt=s(z4e);vSr=r(njt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),njt.forEach(t),FSr=i(Ql),pn=n(Ql,"P",{});var P7=s(pn);TSr=r(P7,"The model class to instantiate is selected based on the "),W4e=n(P7,"CODE",{});var sjt=s(W4e);MSr=r(sjt,"model_type"),sjt.forEach(t),ESr=r(P7,` property of the config object (either
passed as an argument or loaded from `),Q4e=n(P7,"CODE",{});var ljt=s(Q4e);CSr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),wSr=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H4e=n(P7,"CODE",{});var ijt=s(H4e);ASr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),LSr=r(P7,":"),P7.forEach(t),ySr=i(Ql),ve=n(Ql,"UL",{});var Te=s(ve);GE=n(Te,"LI",{});var ZGe=s(GE);U4e=n(ZGe,"STRONG",{});var djt=s(U4e);xSr=r(djt,"albert"),djt.forEach(t),$Sr=r(ZGe," \u2014 "),aZ=n(ZGe,"A",{href:!0});var cjt=s(aZ);kSr=r(cjt,"TFAlbertForMultipleChoice"),cjt.forEach(t),SSr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),RSr=i(Te),OE=n(Te,"LI",{});var eOe=s(OE);J4e=n(eOe,"STRONG",{});var fjt=s(J4e);PSr=r(fjt,"bert"),fjt.forEach(t),BSr=r(eOe," \u2014 "),nZ=n(eOe,"A",{href:!0});var mjt=s(nZ);ISr=r(mjt,"TFBertForMultipleChoice"),mjt.forEach(t),NSr=r(eOe," (BERT model)"),eOe.forEach(t),qSr=i(Te),VE=n(Te,"LI",{});var oOe=s(VE);Y4e=n(oOe,"STRONG",{});var gjt=s(Y4e);jSr=r(gjt,"camembert"),gjt.forEach(t),DSr=r(oOe," \u2014 "),sZ=n(oOe,"A",{href:!0});var hjt=s(sZ);GSr=r(hjt,"TFCamembertForMultipleChoice"),hjt.forEach(t),OSr=r(oOe," (CamemBERT model)"),oOe.forEach(t),VSr=i(Te),XE=n(Te,"LI",{});var rOe=s(XE);K4e=n(rOe,"STRONG",{});var pjt=s(K4e);XSr=r(pjt,"convbert"),pjt.forEach(t),zSr=r(rOe," \u2014 "),lZ=n(rOe,"A",{href:!0});var _jt=s(lZ);WSr=r(_jt,"TFConvBertForMultipleChoice"),_jt.forEach(t),QSr=r(rOe," (ConvBERT model)"),rOe.forEach(t),HSr=i(Te),zE=n(Te,"LI",{});var tOe=s(zE);Z4e=n(tOe,"STRONG",{});var ujt=s(Z4e);USr=r(ujt,"distilbert"),ujt.forEach(t),JSr=r(tOe," \u2014 "),iZ=n(tOe,"A",{href:!0});var bjt=s(iZ);YSr=r(bjt,"TFDistilBertForMultipleChoice"),bjt.forEach(t),KSr=r(tOe," (DistilBERT model)"),tOe.forEach(t),ZSr=i(Te),WE=n(Te,"LI",{});var aOe=s(WE);eEe=n(aOe,"STRONG",{});var vjt=s(eEe);eRr=r(vjt,"electra"),vjt.forEach(t),oRr=r(aOe," \u2014 "),dZ=n(aOe,"A",{href:!0});var Fjt=s(dZ);rRr=r(Fjt,"TFElectraForMultipleChoice"),Fjt.forEach(t),tRr=r(aOe," (ELECTRA model)"),aOe.forEach(t),aRr=i(Te),QE=n(Te,"LI",{});var nOe=s(QE);oEe=n(nOe,"STRONG",{});var Tjt=s(oEe);nRr=r(Tjt,"flaubert"),Tjt.forEach(t),sRr=r(nOe," \u2014 "),cZ=n(nOe,"A",{href:!0});var Mjt=s(cZ);lRr=r(Mjt,"TFFlaubertForMultipleChoice"),Mjt.forEach(t),iRr=r(nOe," (FlauBERT model)"),nOe.forEach(t),dRr=i(Te),HE=n(Te,"LI",{});var sOe=s(HE);rEe=n(sOe,"STRONG",{});var Ejt=s(rEe);cRr=r(Ejt,"funnel"),Ejt.forEach(t),fRr=r(sOe," \u2014 "),fZ=n(sOe,"A",{href:!0});var Cjt=s(fZ);mRr=r(Cjt,"TFFunnelForMultipleChoice"),Cjt.forEach(t),gRr=r(sOe," (Funnel Transformer model)"),sOe.forEach(t),hRr=i(Te),UE=n(Te,"LI",{});var lOe=s(UE);tEe=n(lOe,"STRONG",{});var wjt=s(tEe);pRr=r(wjt,"longformer"),wjt.forEach(t),_Rr=r(lOe," \u2014 "),mZ=n(lOe,"A",{href:!0});var Ajt=s(mZ);uRr=r(Ajt,"TFLongformerForMultipleChoice"),Ajt.forEach(t),bRr=r(lOe," (Longformer model)"),lOe.forEach(t),vRr=i(Te),JE=n(Te,"LI",{});var iOe=s(JE);aEe=n(iOe,"STRONG",{});var Ljt=s(aEe);FRr=r(Ljt,"mobilebert"),Ljt.forEach(t),TRr=r(iOe," \u2014 "),gZ=n(iOe,"A",{href:!0});var yjt=s(gZ);MRr=r(yjt,"TFMobileBertForMultipleChoice"),yjt.forEach(t),ERr=r(iOe," (MobileBERT model)"),iOe.forEach(t),CRr=i(Te),YE=n(Te,"LI",{});var dOe=s(YE);nEe=n(dOe,"STRONG",{});var xjt=s(nEe);wRr=r(xjt,"mpnet"),xjt.forEach(t),ARr=r(dOe," \u2014 "),hZ=n(dOe,"A",{href:!0});var $jt=s(hZ);LRr=r($jt,"TFMPNetForMultipleChoice"),$jt.forEach(t),yRr=r(dOe," (MPNet model)"),dOe.forEach(t),xRr=i(Te),KE=n(Te,"LI",{});var cOe=s(KE);sEe=n(cOe,"STRONG",{});var kjt=s(sEe);$Rr=r(kjt,"rembert"),kjt.forEach(t),kRr=r(cOe," \u2014 "),pZ=n(cOe,"A",{href:!0});var Sjt=s(pZ);SRr=r(Sjt,"TFRemBertForMultipleChoice"),Sjt.forEach(t),RRr=r(cOe," (RemBERT model)"),cOe.forEach(t),PRr=i(Te),ZE=n(Te,"LI",{});var fOe=s(ZE);lEe=n(fOe,"STRONG",{});var Rjt=s(lEe);BRr=r(Rjt,"roberta"),Rjt.forEach(t),IRr=r(fOe," \u2014 "),_Z=n(fOe,"A",{href:!0});var Pjt=s(_Z);NRr=r(Pjt,"TFRobertaForMultipleChoice"),Pjt.forEach(t),qRr=r(fOe," (RoBERTa model)"),fOe.forEach(t),jRr=i(Te),eC=n(Te,"LI",{});var mOe=s(eC);iEe=n(mOe,"STRONG",{});var Bjt=s(iEe);DRr=r(Bjt,"roformer"),Bjt.forEach(t),GRr=r(mOe," \u2014 "),uZ=n(mOe,"A",{href:!0});var Ijt=s(uZ);ORr=r(Ijt,"TFRoFormerForMultipleChoice"),Ijt.forEach(t),VRr=r(mOe," (RoFormer model)"),mOe.forEach(t),XRr=i(Te),oC=n(Te,"LI",{});var gOe=s(oC);dEe=n(gOe,"STRONG",{});var Njt=s(dEe);zRr=r(Njt,"xlm"),Njt.forEach(t),WRr=r(gOe," \u2014 "),bZ=n(gOe,"A",{href:!0});var qjt=s(bZ);QRr=r(qjt,"TFXLMForMultipleChoice"),qjt.forEach(t),HRr=r(gOe," (XLM model)"),gOe.forEach(t),URr=i(Te),rC=n(Te,"LI",{});var hOe=s(rC);cEe=n(hOe,"STRONG",{});var jjt=s(cEe);JRr=r(jjt,"xlm-roberta"),jjt.forEach(t),YRr=r(hOe," \u2014 "),vZ=n(hOe,"A",{href:!0});var Djt=s(vZ);KRr=r(Djt,"TFXLMRobertaForMultipleChoice"),Djt.forEach(t),ZRr=r(hOe," (XLM-RoBERTa model)"),hOe.forEach(t),ePr=i(Te),tC=n(Te,"LI",{});var pOe=s(tC);fEe=n(pOe,"STRONG",{});var Gjt=s(fEe);oPr=r(Gjt,"xlnet"),Gjt.forEach(t),rPr=r(pOe," \u2014 "),FZ=n(pOe,"A",{href:!0});var Ojt=s(FZ);tPr=r(Ojt,"TFXLNetForMultipleChoice"),Ojt.forEach(t),aPr=r(pOe," (XLNet model)"),pOe.forEach(t),Te.forEach(t),nPr=i(Ql),T(aC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),SWe=i(f),Sc=n(f,"H2",{class:!0});var DHe=s(Sc);nC=n(DHe,"A",{id:!0,class:!0,href:!0});var Vjt=s(nC);mEe=n(Vjt,"SPAN",{});var Xjt=s(mEe);T(Qx.$$.fragment,Xjt),Xjt.forEach(t),Vjt.forEach(t),sPr=i(DHe),gEe=n(DHe,"SPAN",{});var zjt=s(gEe);lPr=r(zjt,"TFAutoModelForNextSentencePrediction"),zjt.forEach(t),DHe.forEach(t),RWe=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Hx.$$.fragment,Hl),iPr=i(Hl),Rc=n(Hl,"P",{});var wae=s(Rc);dPr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TZ=n(wae,"A",{href:!0});var Wjt=s(TZ);cPr=r(Wjt,"from_pretrained()"),Wjt.forEach(t),fPr=r(wae," class method or the "),MZ=n(wae,"A",{href:!0});var Qjt=s(MZ);mPr=r(Qjt,"from_config()"),Qjt.forEach(t),gPr=r(wae,` class
method.`),wae.forEach(t),hPr=i(Hl),Ux=n(Hl,"P",{});var GHe=s(Ux);pPr=r(GHe,"This class cannot be instantiated directly using "),hEe=n(GHe,"CODE",{});var Hjt=s(hEe);_Pr=r(Hjt,"__init__()"),Hjt.forEach(t),uPr=r(GHe," (throws an error)."),GHe.forEach(t),bPr=i(Hl),Gt=n(Hl,"DIV",{class:!0});var B7=s(Gt);T(Jx.$$.fragment,B7),vPr=i(B7),pEe=n(B7,"P",{});var Ujt=s(pEe);FPr=r(Ujt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ujt.forEach(t),TPr=i(B7),Pc=n(B7,"P",{});var Aae=s(Pc);MPr=r(Aae,`Note:
Loading a model from its configuration file does `),_Ee=n(Aae,"STRONG",{});var Jjt=s(_Ee);EPr=r(Jjt,"not"),Jjt.forEach(t),CPr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),EZ=n(Aae,"A",{href:!0});var Yjt=s(EZ);wPr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),APr=r(Aae," to load the model weights."),Aae.forEach(t),LPr=i(B7),T(sC.$$.fragment,B7),B7.forEach(t),yPr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(Yx.$$.fragment,Ul),xPr=i(Ul),uEe=n(Ul,"P",{});var Kjt=s(uEe);$Pr=r(Kjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kjt.forEach(t),kPr=i(Ul),_n=n(Ul,"P",{});var I7=s(_n);SPr=r(I7,"The model class to instantiate is selected based on the "),bEe=n(I7,"CODE",{});var Zjt=s(bEe);RPr=r(Zjt,"model_type"),Zjt.forEach(t),PPr=r(I7,` property of the config object (either
passed as an argument or loaded from `),vEe=n(I7,"CODE",{});var eDt=s(vEe);BPr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),IPr=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(I7,"CODE",{});var oDt=s(FEe);NPr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),qPr=r(I7,":"),I7.forEach(t),jPr=i(Ul),Kx=n(Ul,"UL",{});var OHe=s(Kx);lC=n(OHe,"LI",{});var _Oe=s(lC);TEe=n(_Oe,"STRONG",{});var rDt=s(TEe);DPr=r(rDt,"bert"),rDt.forEach(t),GPr=r(_Oe," \u2014 "),CZ=n(_Oe,"A",{href:!0});var tDt=s(CZ);OPr=r(tDt,"TFBertForNextSentencePrediction"),tDt.forEach(t),VPr=r(_Oe," (BERT model)"),_Oe.forEach(t),XPr=i(OHe),iC=n(OHe,"LI",{});var uOe=s(iC);MEe=n(uOe,"STRONG",{});var aDt=s(MEe);zPr=r(aDt,"mobilebert"),aDt.forEach(t),WPr=r(uOe," \u2014 "),wZ=n(uOe,"A",{href:!0});var nDt=s(wZ);QPr=r(nDt,"TFMobileBertForNextSentencePrediction"),nDt.forEach(t),HPr=r(uOe," (MobileBERT model)"),uOe.forEach(t),OHe.forEach(t),UPr=i(Ul),T(dC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),PWe=i(f),Bc=n(f,"H2",{class:!0});var VHe=s(Bc);cC=n(VHe,"A",{id:!0,class:!0,href:!0});var sDt=s(cC);EEe=n(sDt,"SPAN",{});var lDt=s(EEe);T(Zx.$$.fragment,lDt),lDt.forEach(t),sDt.forEach(t),JPr=i(VHe),CEe=n(VHe,"SPAN",{});var iDt=s(CEe);YPr=r(iDt,"TFAutoModelForTableQuestionAnswering"),iDt.forEach(t),VHe.forEach(t),BWe=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(e$.$$.fragment,Jl),KPr=i(Jl),Ic=n(Jl,"P",{});var Lae=s(Ic);ZPr=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AZ=n(Lae,"A",{href:!0});var dDt=s(AZ);eBr=r(dDt,"from_pretrained()"),dDt.forEach(t),oBr=r(Lae," class method or the "),LZ=n(Lae,"A",{href:!0});var cDt=s(LZ);rBr=r(cDt,"from_config()"),cDt.forEach(t),tBr=r(Lae,` class
method.`),Lae.forEach(t),aBr=i(Jl),o$=n(Jl,"P",{});var XHe=s(o$);nBr=r(XHe,"This class cannot be instantiated directly using "),wEe=n(XHe,"CODE",{});var fDt=s(wEe);sBr=r(fDt,"__init__()"),fDt.forEach(t),lBr=r(XHe," (throws an error)."),XHe.forEach(t),iBr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var N7=s(Ot);T(r$.$$.fragment,N7),dBr=i(N7),AEe=n(N7,"P",{});var mDt=s(AEe);cBr=r(mDt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mDt.forEach(t),fBr=i(N7),Nc=n(N7,"P",{});var yae=s(Nc);mBr=r(yae,`Note:
Loading a model from its configuration file does `),LEe=n(yae,"STRONG",{});var gDt=s(LEe);gBr=r(gDt,"not"),gDt.forEach(t),hBr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(yae,"A",{href:!0});var hDt=s(yZ);pBr=r(hDt,"from_pretrained()"),hDt.forEach(t),_Br=r(yae," to load the model weights."),yae.forEach(t),uBr=i(N7),T(fC.$$.fragment,N7),N7.forEach(t),bBr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(t$.$$.fragment,Yl),vBr=i(Yl),yEe=n(Yl,"P",{});var pDt=s(yEe);FBr=r(pDt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pDt.forEach(t),TBr=i(Yl),un=n(Yl,"P",{});var q7=s(un);MBr=r(q7,"The model class to instantiate is selected based on the "),xEe=n(q7,"CODE",{});var _Dt=s(xEe);EBr=r(_Dt,"model_type"),_Dt.forEach(t),CBr=r(q7,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(q7,"CODE",{});var uDt=s($Ee);wBr=r(uDt,"pretrained_model_name_or_path"),uDt.forEach(t),ABr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(q7,"CODE",{});var bDt=s(kEe);LBr=r(bDt,"pretrained_model_name_or_path"),bDt.forEach(t),yBr=r(q7,":"),q7.forEach(t),xBr=i(Yl),SEe=n(Yl,"UL",{});var vDt=s(SEe);mC=n(vDt,"LI",{});var bOe=s(mC);REe=n(bOe,"STRONG",{});var FDt=s(REe);$Br=r(FDt,"tapas"),FDt.forEach(t),kBr=r(bOe," \u2014 "),xZ=n(bOe,"A",{href:!0});var TDt=s(xZ);SBr=r(TDt,"TFTapasForQuestionAnswering"),TDt.forEach(t),RBr=r(bOe," (TAPAS model)"),bOe.forEach(t),vDt.forEach(t),PBr=i(Yl),T(gC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),IWe=i(f),qc=n(f,"H2",{class:!0});var zHe=s(qc);hC=n(zHe,"A",{id:!0,class:!0,href:!0});var MDt=s(hC);PEe=n(MDt,"SPAN",{});var EDt=s(PEe);T(a$.$$.fragment,EDt),EDt.forEach(t),MDt.forEach(t),BBr=i(zHe),BEe=n(zHe,"SPAN",{});var CDt=s(BEe);IBr=r(CDt,"TFAutoModelForTokenClassification"),CDt.forEach(t),zHe.forEach(t),NWe=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(n$.$$.fragment,Kl),NBr=i(Kl),jc=n(Kl,"P",{});var xae=s(jc);qBr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Z=n(xae,"A",{href:!0});var wDt=s($Z);jBr=r(wDt,"from_pretrained()"),wDt.forEach(t),DBr=r(xae," class method or the "),kZ=n(xae,"A",{href:!0});var ADt=s(kZ);GBr=r(ADt,"from_config()"),ADt.forEach(t),OBr=r(xae,` class
method.`),xae.forEach(t),VBr=i(Kl),s$=n(Kl,"P",{});var WHe=s(s$);XBr=r(WHe,"This class cannot be instantiated directly using "),IEe=n(WHe,"CODE",{});var LDt=s(IEe);zBr=r(LDt,"__init__()"),LDt.forEach(t),WBr=r(WHe," (throws an error)."),WHe.forEach(t),QBr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var j7=s(Vt);T(l$.$$.fragment,j7),HBr=i(j7),NEe=n(j7,"P",{});var yDt=s(NEe);UBr=r(yDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yDt.forEach(t),JBr=i(j7),Dc=n(j7,"P",{});var $ae=s(Dc);YBr=r($ae,`Note:
Loading a model from its configuration file does `),qEe=n($ae,"STRONG",{});var xDt=s(qEe);KBr=r(xDt,"not"),xDt.forEach(t),ZBr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n($ae,"A",{href:!0});var $Dt=s(SZ);eIr=r($Dt,"from_pretrained()"),$Dt.forEach(t),oIr=r($ae," to load the model weights."),$ae.forEach(t),rIr=i(j7),T(pC.$$.fragment,j7),j7.forEach(t),tIr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(i$.$$.fragment,Zl),aIr=i(Zl),jEe=n(Zl,"P",{});var kDt=s(jEe);nIr=r(kDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kDt.forEach(t),sIr=i(Zl),bn=n(Zl,"P",{});var D7=s(bn);lIr=r(D7,"The model class to instantiate is selected based on the "),DEe=n(D7,"CODE",{});var SDt=s(DEe);iIr=r(SDt,"model_type"),SDt.forEach(t),dIr=r(D7,` property of the config object (either
passed as an argument or loaded from `),GEe=n(D7,"CODE",{});var RDt=s(GEe);cIr=r(RDt,"pretrained_model_name_or_path"),RDt.forEach(t),fIr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(D7,"CODE",{});var PDt=s(OEe);mIr=r(PDt,"pretrained_model_name_or_path"),PDt.forEach(t),gIr=r(D7,":"),D7.forEach(t),hIr=i(Zl),de=n(Zl,"UL",{});var he=s(de);_C=n(he,"LI",{});var vOe=s(_C);VEe=n(vOe,"STRONG",{});var BDt=s(VEe);pIr=r(BDt,"albert"),BDt.forEach(t),_Ir=r(vOe," \u2014 "),RZ=n(vOe,"A",{href:!0});var IDt=s(RZ);uIr=r(IDt,"TFAlbertForTokenClassification"),IDt.forEach(t),bIr=r(vOe," (ALBERT model)"),vOe.forEach(t),vIr=i(he),uC=n(he,"LI",{});var FOe=s(uC);XEe=n(FOe,"STRONG",{});var NDt=s(XEe);FIr=r(NDt,"bert"),NDt.forEach(t),TIr=r(FOe," \u2014 "),PZ=n(FOe,"A",{href:!0});var qDt=s(PZ);MIr=r(qDt,"TFBertForTokenClassification"),qDt.forEach(t),EIr=r(FOe," (BERT model)"),FOe.forEach(t),CIr=i(he),bC=n(he,"LI",{});var TOe=s(bC);zEe=n(TOe,"STRONG",{});var jDt=s(zEe);wIr=r(jDt,"camembert"),jDt.forEach(t),AIr=r(TOe," \u2014 "),BZ=n(TOe,"A",{href:!0});var DDt=s(BZ);LIr=r(DDt,"TFCamembertForTokenClassification"),DDt.forEach(t),yIr=r(TOe," (CamemBERT model)"),TOe.forEach(t),xIr=i(he),vC=n(he,"LI",{});var MOe=s(vC);WEe=n(MOe,"STRONG",{});var GDt=s(WEe);$Ir=r(GDt,"convbert"),GDt.forEach(t),kIr=r(MOe," \u2014 "),IZ=n(MOe,"A",{href:!0});var ODt=s(IZ);SIr=r(ODt,"TFConvBertForTokenClassification"),ODt.forEach(t),RIr=r(MOe," (ConvBERT model)"),MOe.forEach(t),PIr=i(he),FC=n(he,"LI",{});var EOe=s(FC);QEe=n(EOe,"STRONG",{});var VDt=s(QEe);BIr=r(VDt,"deberta"),VDt.forEach(t),IIr=r(EOe," \u2014 "),NZ=n(EOe,"A",{href:!0});var XDt=s(NZ);NIr=r(XDt,"TFDebertaForTokenClassification"),XDt.forEach(t),qIr=r(EOe," (DeBERTa model)"),EOe.forEach(t),jIr=i(he),TC=n(he,"LI",{});var COe=s(TC);HEe=n(COe,"STRONG",{});var zDt=s(HEe);DIr=r(zDt,"deberta-v2"),zDt.forEach(t),GIr=r(COe," \u2014 "),qZ=n(COe,"A",{href:!0});var WDt=s(qZ);OIr=r(WDt,"TFDebertaV2ForTokenClassification"),WDt.forEach(t),VIr=r(COe," (DeBERTa-v2 model)"),COe.forEach(t),XIr=i(he),MC=n(he,"LI",{});var wOe=s(MC);UEe=n(wOe,"STRONG",{});var QDt=s(UEe);zIr=r(QDt,"distilbert"),QDt.forEach(t),WIr=r(wOe," \u2014 "),jZ=n(wOe,"A",{href:!0});var HDt=s(jZ);QIr=r(HDt,"TFDistilBertForTokenClassification"),HDt.forEach(t),HIr=r(wOe," (DistilBERT model)"),wOe.forEach(t),UIr=i(he),EC=n(he,"LI",{});var AOe=s(EC);JEe=n(AOe,"STRONG",{});var UDt=s(JEe);JIr=r(UDt,"electra"),UDt.forEach(t),YIr=r(AOe," \u2014 "),DZ=n(AOe,"A",{href:!0});var JDt=s(DZ);KIr=r(JDt,"TFElectraForTokenClassification"),JDt.forEach(t),ZIr=r(AOe," (ELECTRA model)"),AOe.forEach(t),eNr=i(he),CC=n(he,"LI",{});var LOe=s(CC);YEe=n(LOe,"STRONG",{});var YDt=s(YEe);oNr=r(YDt,"flaubert"),YDt.forEach(t),rNr=r(LOe," \u2014 "),GZ=n(LOe,"A",{href:!0});var KDt=s(GZ);tNr=r(KDt,"TFFlaubertForTokenClassification"),KDt.forEach(t),aNr=r(LOe," (FlauBERT model)"),LOe.forEach(t),nNr=i(he),wC=n(he,"LI",{});var yOe=s(wC);KEe=n(yOe,"STRONG",{});var ZDt=s(KEe);sNr=r(ZDt,"funnel"),ZDt.forEach(t),lNr=r(yOe," \u2014 "),OZ=n(yOe,"A",{href:!0});var eGt=s(OZ);iNr=r(eGt,"TFFunnelForTokenClassification"),eGt.forEach(t),dNr=r(yOe," (Funnel Transformer model)"),yOe.forEach(t),cNr=i(he),AC=n(he,"LI",{});var xOe=s(AC);ZEe=n(xOe,"STRONG",{});var oGt=s(ZEe);fNr=r(oGt,"layoutlm"),oGt.forEach(t),mNr=r(xOe," \u2014 "),VZ=n(xOe,"A",{href:!0});var rGt=s(VZ);gNr=r(rGt,"TFLayoutLMForTokenClassification"),rGt.forEach(t),hNr=r(xOe," (LayoutLM model)"),xOe.forEach(t),pNr=i(he),LC=n(he,"LI",{});var $Oe=s(LC);eCe=n($Oe,"STRONG",{});var tGt=s(eCe);_Nr=r(tGt,"longformer"),tGt.forEach(t),uNr=r($Oe," \u2014 "),XZ=n($Oe,"A",{href:!0});var aGt=s(XZ);bNr=r(aGt,"TFLongformerForTokenClassification"),aGt.forEach(t),vNr=r($Oe," (Longformer model)"),$Oe.forEach(t),FNr=i(he),yC=n(he,"LI",{});var kOe=s(yC);oCe=n(kOe,"STRONG",{});var nGt=s(oCe);TNr=r(nGt,"mobilebert"),nGt.forEach(t),MNr=r(kOe," \u2014 "),zZ=n(kOe,"A",{href:!0});var sGt=s(zZ);ENr=r(sGt,"TFMobileBertForTokenClassification"),sGt.forEach(t),CNr=r(kOe," (MobileBERT model)"),kOe.forEach(t),wNr=i(he),xC=n(he,"LI",{});var SOe=s(xC);rCe=n(SOe,"STRONG",{});var lGt=s(rCe);ANr=r(lGt,"mpnet"),lGt.forEach(t),LNr=r(SOe," \u2014 "),WZ=n(SOe,"A",{href:!0});var iGt=s(WZ);yNr=r(iGt,"TFMPNetForTokenClassification"),iGt.forEach(t),xNr=r(SOe," (MPNet model)"),SOe.forEach(t),$Nr=i(he),$C=n(he,"LI",{});var ROe=s($C);tCe=n(ROe,"STRONG",{});var dGt=s(tCe);kNr=r(dGt,"rembert"),dGt.forEach(t),SNr=r(ROe," \u2014 "),QZ=n(ROe,"A",{href:!0});var cGt=s(QZ);RNr=r(cGt,"TFRemBertForTokenClassification"),cGt.forEach(t),PNr=r(ROe," (RemBERT model)"),ROe.forEach(t),BNr=i(he),kC=n(he,"LI",{});var POe=s(kC);aCe=n(POe,"STRONG",{});var fGt=s(aCe);INr=r(fGt,"roberta"),fGt.forEach(t),NNr=r(POe," \u2014 "),HZ=n(POe,"A",{href:!0});var mGt=s(HZ);qNr=r(mGt,"TFRobertaForTokenClassification"),mGt.forEach(t),jNr=r(POe," (RoBERTa model)"),POe.forEach(t),DNr=i(he),SC=n(he,"LI",{});var BOe=s(SC);nCe=n(BOe,"STRONG",{});var gGt=s(nCe);GNr=r(gGt,"roformer"),gGt.forEach(t),ONr=r(BOe," \u2014 "),UZ=n(BOe,"A",{href:!0});var hGt=s(UZ);VNr=r(hGt,"TFRoFormerForTokenClassification"),hGt.forEach(t),XNr=r(BOe," (RoFormer model)"),BOe.forEach(t),zNr=i(he),RC=n(he,"LI",{});var IOe=s(RC);sCe=n(IOe,"STRONG",{});var pGt=s(sCe);WNr=r(pGt,"xlm"),pGt.forEach(t),QNr=r(IOe," \u2014 "),JZ=n(IOe,"A",{href:!0});var _Gt=s(JZ);HNr=r(_Gt,"TFXLMForTokenClassification"),_Gt.forEach(t),UNr=r(IOe," (XLM model)"),IOe.forEach(t),JNr=i(he),PC=n(he,"LI",{});var NOe=s(PC);lCe=n(NOe,"STRONG",{});var uGt=s(lCe);YNr=r(uGt,"xlm-roberta"),uGt.forEach(t),KNr=r(NOe," \u2014 "),YZ=n(NOe,"A",{href:!0});var bGt=s(YZ);ZNr=r(bGt,"TFXLMRobertaForTokenClassification"),bGt.forEach(t),eqr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),oqr=i(he),BC=n(he,"LI",{});var qOe=s(BC);iCe=n(qOe,"STRONG",{});var vGt=s(iCe);rqr=r(vGt,"xlnet"),vGt.forEach(t),tqr=r(qOe," \u2014 "),KZ=n(qOe,"A",{href:!0});var FGt=s(KZ);aqr=r(FGt,"TFXLNetForTokenClassification"),FGt.forEach(t),nqr=r(qOe," (XLNet model)"),qOe.forEach(t),he.forEach(t),sqr=i(Zl),T(IC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),qWe=i(f),Gc=n(f,"H2",{class:!0});var QHe=s(Gc);NC=n(QHe,"A",{id:!0,class:!0,href:!0});var TGt=s(NC);dCe=n(TGt,"SPAN",{});var MGt=s(dCe);T(d$.$$.fragment,MGt),MGt.forEach(t),TGt.forEach(t),lqr=i(QHe),cCe=n(QHe,"SPAN",{});var EGt=s(cCe);iqr=r(EGt,"TFAutoModelForQuestionAnswering"),EGt.forEach(t),QHe.forEach(t),jWe=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(c$.$$.fragment,ei),dqr=i(ei),Oc=n(ei,"P",{});var kae=s(Oc);cqr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZZ=n(kae,"A",{href:!0});var CGt=s(ZZ);fqr=r(CGt,"from_pretrained()"),CGt.forEach(t),mqr=r(kae," class method or the "),eee=n(kae,"A",{href:!0});var wGt=s(eee);gqr=r(wGt,"from_config()"),wGt.forEach(t),hqr=r(kae,` class
method.`),kae.forEach(t),pqr=i(ei),f$=n(ei,"P",{});var HHe=s(f$);_qr=r(HHe,"This class cannot be instantiated directly using "),fCe=n(HHe,"CODE",{});var AGt=s(fCe);uqr=r(AGt,"__init__()"),AGt.forEach(t),bqr=r(HHe," (throws an error)."),HHe.forEach(t),vqr=i(ei),Xt=n(ei,"DIV",{class:!0});var G7=s(Xt);T(m$.$$.fragment,G7),Fqr=i(G7),mCe=n(G7,"P",{});var LGt=s(mCe);Tqr=r(LGt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LGt.forEach(t),Mqr=i(G7),Vc=n(G7,"P",{});var Sae=s(Vc);Eqr=r(Sae,`Note:
Loading a model from its configuration file does `),gCe=n(Sae,"STRONG",{});var yGt=s(gCe);Cqr=r(yGt,"not"),yGt.forEach(t),wqr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Sae,"A",{href:!0});var xGt=s(oee);Aqr=r(xGt,"from_pretrained()"),xGt.forEach(t),Lqr=r(Sae," to load the model weights."),Sae.forEach(t),yqr=i(G7),T(qC.$$.fragment,G7),G7.forEach(t),xqr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(g$.$$.fragment,oi),$qr=i(oi),hCe=n(oi,"P",{});var $Gt=s(hCe);kqr=r($Gt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Gt.forEach(t),Sqr=i(oi),vn=n(oi,"P",{});var O7=s(vn);Rqr=r(O7,"The model class to instantiate is selected based on the "),pCe=n(O7,"CODE",{});var kGt=s(pCe);Pqr=r(kGt,"model_type"),kGt.forEach(t),Bqr=r(O7,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(O7,"CODE",{});var SGt=s(_Ce);Iqr=r(SGt,"pretrained_model_name_or_path"),SGt.forEach(t),Nqr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uCe=n(O7,"CODE",{});var RGt=s(uCe);qqr=r(RGt,"pretrained_model_name_or_path"),RGt.forEach(t),jqr=r(O7,":"),O7.forEach(t),Dqr=i(oi),ce=n(oi,"UL",{});var pe=s(ce);jC=n(pe,"LI",{});var jOe=s(jC);bCe=n(jOe,"STRONG",{});var PGt=s(bCe);Gqr=r(PGt,"albert"),PGt.forEach(t),Oqr=r(jOe," \u2014 "),ree=n(jOe,"A",{href:!0});var BGt=s(ree);Vqr=r(BGt,"TFAlbertForQuestionAnswering"),BGt.forEach(t),Xqr=r(jOe," (ALBERT model)"),jOe.forEach(t),zqr=i(pe),DC=n(pe,"LI",{});var DOe=s(DC);vCe=n(DOe,"STRONG",{});var IGt=s(vCe);Wqr=r(IGt,"bert"),IGt.forEach(t),Qqr=r(DOe," \u2014 "),tee=n(DOe,"A",{href:!0});var NGt=s(tee);Hqr=r(NGt,"TFBertForQuestionAnswering"),NGt.forEach(t),Uqr=r(DOe," (BERT model)"),DOe.forEach(t),Jqr=i(pe),GC=n(pe,"LI",{});var GOe=s(GC);FCe=n(GOe,"STRONG",{});var qGt=s(FCe);Yqr=r(qGt,"camembert"),qGt.forEach(t),Kqr=r(GOe," \u2014 "),aee=n(GOe,"A",{href:!0});var jGt=s(aee);Zqr=r(jGt,"TFCamembertForQuestionAnswering"),jGt.forEach(t),ejr=r(GOe," (CamemBERT model)"),GOe.forEach(t),ojr=i(pe),OC=n(pe,"LI",{});var OOe=s(OC);TCe=n(OOe,"STRONG",{});var DGt=s(TCe);rjr=r(DGt,"convbert"),DGt.forEach(t),tjr=r(OOe," \u2014 "),nee=n(OOe,"A",{href:!0});var GGt=s(nee);ajr=r(GGt,"TFConvBertForQuestionAnswering"),GGt.forEach(t),njr=r(OOe," (ConvBERT model)"),OOe.forEach(t),sjr=i(pe),VC=n(pe,"LI",{});var VOe=s(VC);MCe=n(VOe,"STRONG",{});var OGt=s(MCe);ljr=r(OGt,"deberta"),OGt.forEach(t),ijr=r(VOe," \u2014 "),see=n(VOe,"A",{href:!0});var VGt=s(see);djr=r(VGt,"TFDebertaForQuestionAnswering"),VGt.forEach(t),cjr=r(VOe," (DeBERTa model)"),VOe.forEach(t),fjr=i(pe),XC=n(pe,"LI",{});var XOe=s(XC);ECe=n(XOe,"STRONG",{});var XGt=s(ECe);mjr=r(XGt,"deberta-v2"),XGt.forEach(t),gjr=r(XOe," \u2014 "),lee=n(XOe,"A",{href:!0});var zGt=s(lee);hjr=r(zGt,"TFDebertaV2ForQuestionAnswering"),zGt.forEach(t),pjr=r(XOe," (DeBERTa-v2 model)"),XOe.forEach(t),_jr=i(pe),zC=n(pe,"LI",{});var zOe=s(zC);CCe=n(zOe,"STRONG",{});var WGt=s(CCe);ujr=r(WGt,"distilbert"),WGt.forEach(t),bjr=r(zOe," \u2014 "),iee=n(zOe,"A",{href:!0});var QGt=s(iee);vjr=r(QGt,"TFDistilBertForQuestionAnswering"),QGt.forEach(t),Fjr=r(zOe," (DistilBERT model)"),zOe.forEach(t),Tjr=i(pe),WC=n(pe,"LI",{});var WOe=s(WC);wCe=n(WOe,"STRONG",{});var HGt=s(wCe);Mjr=r(HGt,"electra"),HGt.forEach(t),Ejr=r(WOe," \u2014 "),dee=n(WOe,"A",{href:!0});var UGt=s(dee);Cjr=r(UGt,"TFElectraForQuestionAnswering"),UGt.forEach(t),wjr=r(WOe," (ELECTRA model)"),WOe.forEach(t),Ajr=i(pe),QC=n(pe,"LI",{});var QOe=s(QC);ACe=n(QOe,"STRONG",{});var JGt=s(ACe);Ljr=r(JGt,"flaubert"),JGt.forEach(t),yjr=r(QOe," \u2014 "),cee=n(QOe,"A",{href:!0});var YGt=s(cee);xjr=r(YGt,"TFFlaubertForQuestionAnsweringSimple"),YGt.forEach(t),$jr=r(QOe," (FlauBERT model)"),QOe.forEach(t),kjr=i(pe),HC=n(pe,"LI",{});var HOe=s(HC);LCe=n(HOe,"STRONG",{});var KGt=s(LCe);Sjr=r(KGt,"funnel"),KGt.forEach(t),Rjr=r(HOe," \u2014 "),fee=n(HOe,"A",{href:!0});var ZGt=s(fee);Pjr=r(ZGt,"TFFunnelForQuestionAnswering"),ZGt.forEach(t),Bjr=r(HOe," (Funnel Transformer model)"),HOe.forEach(t),Ijr=i(pe),UC=n(pe,"LI",{});var UOe=s(UC);yCe=n(UOe,"STRONG",{});var eOt=s(yCe);Njr=r(eOt,"gptj"),eOt.forEach(t),qjr=r(UOe," \u2014 "),mee=n(UOe,"A",{href:!0});var oOt=s(mee);jjr=r(oOt,"TFGPTJForQuestionAnswering"),oOt.forEach(t),Djr=r(UOe," (GPT-J model)"),UOe.forEach(t),Gjr=i(pe),JC=n(pe,"LI",{});var JOe=s(JC);xCe=n(JOe,"STRONG",{});var rOt=s(xCe);Ojr=r(rOt,"longformer"),rOt.forEach(t),Vjr=r(JOe," \u2014 "),gee=n(JOe,"A",{href:!0});var tOt=s(gee);Xjr=r(tOt,"TFLongformerForQuestionAnswering"),tOt.forEach(t),zjr=r(JOe," (Longformer model)"),JOe.forEach(t),Wjr=i(pe),YC=n(pe,"LI",{});var YOe=s(YC);$Ce=n(YOe,"STRONG",{});var aOt=s($Ce);Qjr=r(aOt,"mobilebert"),aOt.forEach(t),Hjr=r(YOe," \u2014 "),hee=n(YOe,"A",{href:!0});var nOt=s(hee);Ujr=r(nOt,"TFMobileBertForQuestionAnswering"),nOt.forEach(t),Jjr=r(YOe," (MobileBERT model)"),YOe.forEach(t),Yjr=i(pe),KC=n(pe,"LI",{});var KOe=s(KC);kCe=n(KOe,"STRONG",{});var sOt=s(kCe);Kjr=r(sOt,"mpnet"),sOt.forEach(t),Zjr=r(KOe," \u2014 "),pee=n(KOe,"A",{href:!0});var lOt=s(pee);eDr=r(lOt,"TFMPNetForQuestionAnswering"),lOt.forEach(t),oDr=r(KOe," (MPNet model)"),KOe.forEach(t),rDr=i(pe),ZC=n(pe,"LI",{});var ZOe=s(ZC);SCe=n(ZOe,"STRONG",{});var iOt=s(SCe);tDr=r(iOt,"rembert"),iOt.forEach(t),aDr=r(ZOe," \u2014 "),_ee=n(ZOe,"A",{href:!0});var dOt=s(_ee);nDr=r(dOt,"TFRemBertForQuestionAnswering"),dOt.forEach(t),sDr=r(ZOe," (RemBERT model)"),ZOe.forEach(t),lDr=i(pe),e5=n(pe,"LI",{});var eVe=s(e5);RCe=n(eVe,"STRONG",{});var cOt=s(RCe);iDr=r(cOt,"roberta"),cOt.forEach(t),dDr=r(eVe," \u2014 "),uee=n(eVe,"A",{href:!0});var fOt=s(uee);cDr=r(fOt,"TFRobertaForQuestionAnswering"),fOt.forEach(t),fDr=r(eVe," (RoBERTa model)"),eVe.forEach(t),mDr=i(pe),o5=n(pe,"LI",{});var oVe=s(o5);PCe=n(oVe,"STRONG",{});var mOt=s(PCe);gDr=r(mOt,"roformer"),mOt.forEach(t),hDr=r(oVe," \u2014 "),bee=n(oVe,"A",{href:!0});var gOt=s(bee);pDr=r(gOt,"TFRoFormerForQuestionAnswering"),gOt.forEach(t),_Dr=r(oVe," (RoFormer model)"),oVe.forEach(t),uDr=i(pe),r5=n(pe,"LI",{});var rVe=s(r5);BCe=n(rVe,"STRONG",{});var hOt=s(BCe);bDr=r(hOt,"xlm"),hOt.forEach(t),vDr=r(rVe," \u2014 "),vee=n(rVe,"A",{href:!0});var pOt=s(vee);FDr=r(pOt,"TFXLMForQuestionAnsweringSimple"),pOt.forEach(t),TDr=r(rVe," (XLM model)"),rVe.forEach(t),MDr=i(pe),t5=n(pe,"LI",{});var tVe=s(t5);ICe=n(tVe,"STRONG",{});var _Ot=s(ICe);EDr=r(_Ot,"xlm-roberta"),_Ot.forEach(t),CDr=r(tVe," \u2014 "),Fee=n(tVe,"A",{href:!0});var uOt=s(Fee);wDr=r(uOt,"TFXLMRobertaForQuestionAnswering"),uOt.forEach(t),ADr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),LDr=i(pe),a5=n(pe,"LI",{});var aVe=s(a5);NCe=n(aVe,"STRONG",{});var bOt=s(NCe);yDr=r(bOt,"xlnet"),bOt.forEach(t),xDr=r(aVe," \u2014 "),Tee=n(aVe,"A",{href:!0});var vOt=s(Tee);$Dr=r(vOt,"TFXLNetForQuestionAnsweringSimple"),vOt.forEach(t),kDr=r(aVe," (XLNet model)"),aVe.forEach(t),pe.forEach(t),SDr=i(oi),T(n5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),DWe=i(f),Xc=n(f,"H2",{class:!0});var UHe=s(Xc);s5=n(UHe,"A",{id:!0,class:!0,href:!0});var FOt=s(s5);qCe=n(FOt,"SPAN",{});var TOt=s(qCe);T(h$.$$.fragment,TOt),TOt.forEach(t),FOt.forEach(t),RDr=i(UHe),jCe=n(UHe,"SPAN",{});var MOt=s(jCe);PDr=r(MOt,"TFAutoModelForVision2Seq"),MOt.forEach(t),UHe.forEach(t),GWe=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(p$.$$.fragment,ri),BDr=i(ri),zc=n(ri,"P",{});var Rae=s(zc);IDr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Mee=n(Rae,"A",{href:!0});var EOt=s(Mee);NDr=r(EOt,"from_pretrained()"),EOt.forEach(t),qDr=r(Rae," class method or the "),Eee=n(Rae,"A",{href:!0});var COt=s(Eee);jDr=r(COt,"from_config()"),COt.forEach(t),DDr=r(Rae,` class
method.`),Rae.forEach(t),GDr=i(ri),_$=n(ri,"P",{});var JHe=s(_$);ODr=r(JHe,"This class cannot be instantiated directly using "),DCe=n(JHe,"CODE",{});var wOt=s(DCe);VDr=r(wOt,"__init__()"),wOt.forEach(t),XDr=r(JHe," (throws an error)."),JHe.forEach(t),zDr=i(ri),zt=n(ri,"DIV",{class:!0});var V7=s(zt);T(u$.$$.fragment,V7),WDr=i(V7),GCe=n(V7,"P",{});var AOt=s(GCe);QDr=r(AOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AOt.forEach(t),HDr=i(V7),Wc=n(V7,"P",{});var Pae=s(Wc);UDr=r(Pae,`Note:
Loading a model from its configuration file does `),OCe=n(Pae,"STRONG",{});var LOt=s(OCe);JDr=r(LOt,"not"),LOt.forEach(t),YDr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(Pae,"A",{href:!0});var yOt=s(Cee);KDr=r(yOt,"from_pretrained()"),yOt.forEach(t),ZDr=r(Pae," to load the model weights."),Pae.forEach(t),eGr=i(V7),T(l5.$$.fragment,V7),V7.forEach(t),oGr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(b$.$$.fragment,ti),rGr=i(ti),VCe=n(ti,"P",{});var xOt=s(VCe);tGr=r(xOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xOt.forEach(t),aGr=i(ti),Fn=n(ti,"P",{});var X7=s(Fn);nGr=r(X7,"The model class to instantiate is selected based on the "),XCe=n(X7,"CODE",{});var $Ot=s(XCe);sGr=r($Ot,"model_type"),$Ot.forEach(t),lGr=r(X7,` property of the config object (either
passed as an argument or loaded from `),zCe=n(X7,"CODE",{});var kOt=s(zCe);iGr=r(kOt,"pretrained_model_name_or_path"),kOt.forEach(t),dGr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(X7,"CODE",{});var SOt=s(WCe);cGr=r(SOt,"pretrained_model_name_or_path"),SOt.forEach(t),fGr=r(X7,":"),X7.forEach(t),mGr=i(ti),QCe=n(ti,"UL",{});var ROt=s(QCe);i5=n(ROt,"LI",{});var nVe=s(i5);HCe=n(nVe,"STRONG",{});var POt=s(HCe);gGr=r(POt,"vision-encoder-decoder"),POt.forEach(t),hGr=r(nVe," \u2014 "),wee=n(nVe,"A",{href:!0});var BOt=s(wee);pGr=r(BOt,"TFVisionEncoderDecoderModel"),BOt.forEach(t),_Gr=r(nVe," (Vision Encoder decoder model)"),nVe.forEach(t),ROt.forEach(t),uGr=i(ti),T(d5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),OWe=i(f),Qc=n(f,"H2",{class:!0});var YHe=s(Qc);c5=n(YHe,"A",{id:!0,class:!0,href:!0});var IOt=s(c5);UCe=n(IOt,"SPAN",{});var NOt=s(UCe);T(v$.$$.fragment,NOt),NOt.forEach(t),IOt.forEach(t),bGr=i(YHe),JCe=n(YHe,"SPAN",{});var qOt=s(JCe);vGr=r(qOt,"TFAutoModelForSpeechSeq2Seq"),qOt.forEach(t),YHe.forEach(t),VWe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(F$.$$.fragment,ai),FGr=i(ai),Hc=n(ai,"P",{});var Bae=s(Hc);TGr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Aee=n(Bae,"A",{href:!0});var jOt=s(Aee);MGr=r(jOt,"from_pretrained()"),jOt.forEach(t),EGr=r(Bae," class method or the "),Lee=n(Bae,"A",{href:!0});var DOt=s(Lee);CGr=r(DOt,"from_config()"),DOt.forEach(t),wGr=r(Bae,` class
method.`),Bae.forEach(t),AGr=i(ai),T$=n(ai,"P",{});var KHe=s(T$);LGr=r(KHe,"This class cannot be instantiated directly using "),YCe=n(KHe,"CODE",{});var GOt=s(YCe);yGr=r(GOt,"__init__()"),GOt.forEach(t),xGr=r(KHe," (throws an error)."),KHe.forEach(t),$Gr=i(ai),Wt=n(ai,"DIV",{class:!0});var z7=s(Wt);T(M$.$$.fragment,z7),kGr=i(z7),KCe=n(z7,"P",{});var OOt=s(KCe);SGr=r(OOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OOt.forEach(t),RGr=i(z7),Uc=n(z7,"P",{});var Iae=s(Uc);PGr=r(Iae,`Note:
Loading a model from its configuration file does `),ZCe=n(Iae,"STRONG",{});var VOt=s(ZCe);BGr=r(VOt,"not"),VOt.forEach(t),IGr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Iae,"A",{href:!0});var XOt=s(yee);NGr=r(XOt,"from_pretrained()"),XOt.forEach(t),qGr=r(Iae," to load the model weights."),Iae.forEach(t),jGr=i(z7),T(f5.$$.fragment,z7),z7.forEach(t),DGr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(E$.$$.fragment,ni),GGr=i(ni),e5e=n(ni,"P",{});var zOt=s(e5e);OGr=r(zOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zOt.forEach(t),VGr=i(ni),Tn=n(ni,"P",{});var W7=s(Tn);XGr=r(W7,"The model class to instantiate is selected based on the "),o5e=n(W7,"CODE",{});var WOt=s(o5e);zGr=r(WOt,"model_type"),WOt.forEach(t),WGr=r(W7,` property of the config object (either
passed as an argument or loaded from `),r5e=n(W7,"CODE",{});var QOt=s(r5e);QGr=r(QOt,"pretrained_model_name_or_path"),QOt.forEach(t),HGr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(W7,"CODE",{});var HOt=s(t5e);UGr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),JGr=r(W7,":"),W7.forEach(t),YGr=i(ni),a5e=n(ni,"UL",{});var UOt=s(a5e);m5=n(UOt,"LI",{});var sVe=s(m5);n5e=n(sVe,"STRONG",{});var JOt=s(n5e);KGr=r(JOt,"speech_to_text"),JOt.forEach(t),ZGr=r(sVe," \u2014 "),xee=n(sVe,"A",{href:!0});var YOt=s(xee);eOr=r(YOt,"TFSpeech2TextForConditionalGeneration"),YOt.forEach(t),oOr=r(sVe," (Speech2Text model)"),sVe.forEach(t),UOt.forEach(t),rOr=i(ni),T(g5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),XWe=i(f),Jc=n(f,"H2",{class:!0});var ZHe=s(Jc);h5=n(ZHe,"A",{id:!0,class:!0,href:!0});var KOt=s(h5);s5e=n(KOt,"SPAN",{});var ZOt=s(s5e);T(C$.$$.fragment,ZOt),ZOt.forEach(t),KOt.forEach(t),tOr=i(ZHe),l5e=n(ZHe,"SPAN",{});var eVt=s(l5e);aOr=r(eVt,"FlaxAutoModel"),eVt.forEach(t),ZHe.forEach(t),zWe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T(w$.$$.fragment,si),nOr=i(si),Yc=n(si,"P",{});var Nae=s(Yc);sOr=r(Nae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$ee=n(Nae,"A",{href:!0});var oVt=s($ee);lOr=r(oVt,"from_pretrained()"),oVt.forEach(t),iOr=r(Nae," class method or the "),kee=n(Nae,"A",{href:!0});var rVt=s(kee);dOr=r(rVt,"from_config()"),rVt.forEach(t),cOr=r(Nae,` class
method.`),Nae.forEach(t),fOr=i(si),A$=n(si,"P",{});var eUe=s(A$);mOr=r(eUe,"This class cannot be instantiated directly using "),i5e=n(eUe,"CODE",{});var tVt=s(i5e);gOr=r(tVt,"__init__()"),tVt.forEach(t),hOr=r(eUe," (throws an error)."),eUe.forEach(t),pOr=i(si),Qt=n(si,"DIV",{class:!0});var Q7=s(Qt);T(L$.$$.fragment,Q7),_Or=i(Q7),d5e=n(Q7,"P",{});var aVt=s(d5e);uOr=r(aVt,"Instantiates one of the base model classes of the library from a configuration."),aVt.forEach(t),bOr=i(Q7),Kc=n(Q7,"P",{});var qae=s(Kc);vOr=r(qae,`Note:
Loading a model from its configuration file does `),c5e=n(qae,"STRONG",{});var nVt=s(c5e);FOr=r(nVt,"not"),nVt.forEach(t),TOr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(qae,"A",{href:!0});var sVt=s(See);MOr=r(sVt,"from_pretrained()"),sVt.forEach(t),EOr=r(qae," to load the model weights."),qae.forEach(t),COr=i(Q7),T(p5.$$.fragment,Q7),Q7.forEach(t),wOr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(y$.$$.fragment,li),AOr=i(li),f5e=n(li,"P",{});var lVt=s(f5e);LOr=r(lVt,"Instantiate one of the base model classes of the library from a pretrained model."),lVt.forEach(t),yOr=i(li),Mn=n(li,"P",{});var H7=s(Mn);xOr=r(H7,"The model class to instantiate is selected based on the "),m5e=n(H7,"CODE",{});var iVt=s(m5e);$Or=r(iVt,"model_type"),iVt.forEach(t),kOr=r(H7,` property of the config object (either
passed as an argument or loaded from `),g5e=n(H7,"CODE",{});var dVt=s(g5e);SOr=r(dVt,"pretrained_model_name_or_path"),dVt.forEach(t),ROr=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(H7,"CODE",{});var cVt=s(h5e);POr=r(cVt,"pretrained_model_name_or_path"),cVt.forEach(t),BOr=r(H7,":"),H7.forEach(t),IOr=i(li),oe=n(li,"UL",{});var ae=s(oe);_5=n(ae,"LI",{});var lVe=s(_5);p5e=n(lVe,"STRONG",{});var fVt=s(p5e);NOr=r(fVt,"albert"),fVt.forEach(t),qOr=r(lVe," \u2014 "),Ree=n(lVe,"A",{href:!0});var mVt=s(Ree);jOr=r(mVt,"FlaxAlbertModel"),mVt.forEach(t),DOr=r(lVe," (ALBERT model)"),lVe.forEach(t),GOr=i(ae),u5=n(ae,"LI",{});var iVe=s(u5);_5e=n(iVe,"STRONG",{});var gVt=s(_5e);OOr=r(gVt,"bart"),gVt.forEach(t),VOr=r(iVe," \u2014 "),Pee=n(iVe,"A",{href:!0});var hVt=s(Pee);XOr=r(hVt,"FlaxBartModel"),hVt.forEach(t),zOr=r(iVe," (BART model)"),iVe.forEach(t),WOr=i(ae),b5=n(ae,"LI",{});var dVe=s(b5);u5e=n(dVe,"STRONG",{});var pVt=s(u5e);QOr=r(pVt,"beit"),pVt.forEach(t),HOr=r(dVe," \u2014 "),Bee=n(dVe,"A",{href:!0});var _Vt=s(Bee);UOr=r(_Vt,"FlaxBeitModel"),_Vt.forEach(t),JOr=r(dVe," (BEiT model)"),dVe.forEach(t),YOr=i(ae),v5=n(ae,"LI",{});var cVe=s(v5);b5e=n(cVe,"STRONG",{});var uVt=s(b5e);KOr=r(uVt,"bert"),uVt.forEach(t),ZOr=r(cVe," \u2014 "),Iee=n(cVe,"A",{href:!0});var bVt=s(Iee);eVr=r(bVt,"FlaxBertModel"),bVt.forEach(t),oVr=r(cVe," (BERT model)"),cVe.forEach(t),rVr=i(ae),F5=n(ae,"LI",{});var fVe=s(F5);v5e=n(fVe,"STRONG",{});var vVt=s(v5e);tVr=r(vVt,"big_bird"),vVt.forEach(t),aVr=r(fVe," \u2014 "),Nee=n(fVe,"A",{href:!0});var FVt=s(Nee);nVr=r(FVt,"FlaxBigBirdModel"),FVt.forEach(t),sVr=r(fVe," (BigBird model)"),fVe.forEach(t),lVr=i(ae),T5=n(ae,"LI",{});var mVe=s(T5);F5e=n(mVe,"STRONG",{});var TVt=s(F5e);iVr=r(TVt,"blenderbot"),TVt.forEach(t),dVr=r(mVe," \u2014 "),qee=n(mVe,"A",{href:!0});var MVt=s(qee);cVr=r(MVt,"FlaxBlenderbotModel"),MVt.forEach(t),fVr=r(mVe," (Blenderbot model)"),mVe.forEach(t),mVr=i(ae),M5=n(ae,"LI",{});var gVe=s(M5);T5e=n(gVe,"STRONG",{});var EVt=s(T5e);gVr=r(EVt,"blenderbot-small"),EVt.forEach(t),hVr=r(gVe," \u2014 "),jee=n(gVe,"A",{href:!0});var CVt=s(jee);pVr=r(CVt,"FlaxBlenderbotSmallModel"),CVt.forEach(t),_Vr=r(gVe," (BlenderbotSmall model)"),gVe.forEach(t),uVr=i(ae),E5=n(ae,"LI",{});var hVe=s(E5);M5e=n(hVe,"STRONG",{});var wVt=s(M5e);bVr=r(wVt,"clip"),wVt.forEach(t),vVr=r(hVe," \u2014 "),Dee=n(hVe,"A",{href:!0});var AVt=s(Dee);FVr=r(AVt,"FlaxCLIPModel"),AVt.forEach(t),TVr=r(hVe," (CLIP model)"),hVe.forEach(t),MVr=i(ae),C5=n(ae,"LI",{});var pVe=s(C5);E5e=n(pVe,"STRONG",{});var LVt=s(E5e);EVr=r(LVt,"distilbert"),LVt.forEach(t),CVr=r(pVe," \u2014 "),Gee=n(pVe,"A",{href:!0});var yVt=s(Gee);wVr=r(yVt,"FlaxDistilBertModel"),yVt.forEach(t),AVr=r(pVe," (DistilBERT model)"),pVe.forEach(t),LVr=i(ae),w5=n(ae,"LI",{});var _Ve=s(w5);C5e=n(_Ve,"STRONG",{});var xVt=s(C5e);yVr=r(xVt,"electra"),xVt.forEach(t),xVr=r(_Ve," \u2014 "),Oee=n(_Ve,"A",{href:!0});var $Vt=s(Oee);$Vr=r($Vt,"FlaxElectraModel"),$Vt.forEach(t),kVr=r(_Ve," (ELECTRA model)"),_Ve.forEach(t),SVr=i(ae),A5=n(ae,"LI",{});var uVe=s(A5);w5e=n(uVe,"STRONG",{});var kVt=s(w5e);RVr=r(kVt,"gpt2"),kVt.forEach(t),PVr=r(uVe," \u2014 "),Vee=n(uVe,"A",{href:!0});var SVt=s(Vee);BVr=r(SVt,"FlaxGPT2Model"),SVt.forEach(t),IVr=r(uVe," (OpenAI GPT-2 model)"),uVe.forEach(t),NVr=i(ae),L5=n(ae,"LI",{});var bVe=s(L5);A5e=n(bVe,"STRONG",{});var RVt=s(A5e);qVr=r(RVt,"gpt_neo"),RVt.forEach(t),jVr=r(bVe," \u2014 "),Xee=n(bVe,"A",{href:!0});var PVt=s(Xee);DVr=r(PVt,"FlaxGPTNeoModel"),PVt.forEach(t),GVr=r(bVe," (GPT Neo model)"),bVe.forEach(t),OVr=i(ae),y5=n(ae,"LI",{});var vVe=s(y5);L5e=n(vVe,"STRONG",{});var BVt=s(L5e);VVr=r(BVt,"gptj"),BVt.forEach(t),XVr=r(vVe," \u2014 "),zee=n(vVe,"A",{href:!0});var IVt=s(zee);zVr=r(IVt,"FlaxGPTJModel"),IVt.forEach(t),WVr=r(vVe," (GPT-J model)"),vVe.forEach(t),QVr=i(ae),x5=n(ae,"LI",{});var FVe=s(x5);y5e=n(FVe,"STRONG",{});var NVt=s(y5e);HVr=r(NVt,"longt5"),NVt.forEach(t),UVr=r(FVe," \u2014 "),Wee=n(FVe,"A",{href:!0});var qVt=s(Wee);JVr=r(qVt,"FlaxLongT5Model"),qVt.forEach(t),YVr=r(FVe," (LongT5 model)"),FVe.forEach(t),KVr=i(ae),$5=n(ae,"LI",{});var TVe=s($5);x5e=n(TVe,"STRONG",{});var jVt=s(x5e);ZVr=r(jVt,"marian"),jVt.forEach(t),eXr=r(TVe," \u2014 "),Qee=n(TVe,"A",{href:!0});var DVt=s(Qee);oXr=r(DVt,"FlaxMarianModel"),DVt.forEach(t),rXr=r(TVe," (Marian model)"),TVe.forEach(t),tXr=i(ae),k5=n(ae,"LI",{});var MVe=s(k5);$5e=n(MVe,"STRONG",{});var GVt=s($5e);aXr=r(GVt,"mbart"),GVt.forEach(t),nXr=r(MVe," \u2014 "),Hee=n(MVe,"A",{href:!0});var OVt=s(Hee);sXr=r(OVt,"FlaxMBartModel"),OVt.forEach(t),lXr=r(MVe," (mBART model)"),MVe.forEach(t),iXr=i(ae),S5=n(ae,"LI",{});var EVe=s(S5);k5e=n(EVe,"STRONG",{});var VVt=s(k5e);dXr=r(VVt,"mt5"),VVt.forEach(t),cXr=r(EVe," \u2014 "),Uee=n(EVe,"A",{href:!0});var XVt=s(Uee);fXr=r(XVt,"FlaxMT5Model"),XVt.forEach(t),mXr=r(EVe," (MT5 model)"),EVe.forEach(t),gXr=i(ae),R5=n(ae,"LI",{});var CVe=s(R5);S5e=n(CVe,"STRONG",{});var zVt=s(S5e);hXr=r(zVt,"opt"),zVt.forEach(t),pXr=r(CVe," \u2014 "),Jee=n(CVe,"A",{href:!0});var WVt=s(Jee);_Xr=r(WVt,"FlaxOPTModel"),WVt.forEach(t),uXr=r(CVe," (OPT model)"),CVe.forEach(t),bXr=i(ae),P5=n(ae,"LI",{});var wVe=s(P5);R5e=n(wVe,"STRONG",{});var QVt=s(R5e);vXr=r(QVt,"pegasus"),QVt.forEach(t),FXr=r(wVe," \u2014 "),Yee=n(wVe,"A",{href:!0});var HVt=s(Yee);TXr=r(HVt,"FlaxPegasusModel"),HVt.forEach(t),MXr=r(wVe," (Pegasus model)"),wVe.forEach(t),EXr=i(ae),B5=n(ae,"LI",{});var AVe=s(B5);P5e=n(AVe,"STRONG",{});var UVt=s(P5e);CXr=r(UVt,"roberta"),UVt.forEach(t),wXr=r(AVe," \u2014 "),Kee=n(AVe,"A",{href:!0});var JVt=s(Kee);AXr=r(JVt,"FlaxRobertaModel"),JVt.forEach(t),LXr=r(AVe," (RoBERTa model)"),AVe.forEach(t),yXr=i(ae),I5=n(ae,"LI",{});var LVe=s(I5);B5e=n(LVe,"STRONG",{});var YVt=s(B5e);xXr=r(YVt,"roformer"),YVt.forEach(t),$Xr=r(LVe," \u2014 "),Zee=n(LVe,"A",{href:!0});var KVt=s(Zee);kXr=r(KVt,"FlaxRoFormerModel"),KVt.forEach(t),SXr=r(LVe," (RoFormer model)"),LVe.forEach(t),RXr=i(ae),N5=n(ae,"LI",{});var yVe=s(N5);I5e=n(yVe,"STRONG",{});var ZVt=s(I5e);PXr=r(ZVt,"t5"),ZVt.forEach(t),BXr=r(yVe," \u2014 "),eoe=n(yVe,"A",{href:!0});var eXt=s(eoe);IXr=r(eXt,"FlaxT5Model"),eXt.forEach(t),NXr=r(yVe," (T5 model)"),yVe.forEach(t),qXr=i(ae),q5=n(ae,"LI",{});var xVe=s(q5);N5e=n(xVe,"STRONG",{});var oXt=s(N5e);jXr=r(oXt,"vision-text-dual-encoder"),oXt.forEach(t),DXr=r(xVe," \u2014 "),ooe=n(xVe,"A",{href:!0});var rXt=s(ooe);GXr=r(rXt,"FlaxVisionTextDualEncoderModel"),rXt.forEach(t),OXr=r(xVe," (VisionTextDualEncoder model)"),xVe.forEach(t),VXr=i(ae),j5=n(ae,"LI",{});var $Ve=s(j5);q5e=n($Ve,"STRONG",{});var tXt=s(q5e);XXr=r(tXt,"vit"),tXt.forEach(t),zXr=r($Ve," \u2014 "),roe=n($Ve,"A",{href:!0});var aXt=s(roe);WXr=r(aXt,"FlaxViTModel"),aXt.forEach(t),QXr=r($Ve," (ViT model)"),$Ve.forEach(t),HXr=i(ae),D5=n(ae,"LI",{});var kVe=s(D5);j5e=n(kVe,"STRONG",{});var nXt=s(j5e);UXr=r(nXt,"wav2vec2"),nXt.forEach(t),JXr=r(kVe," \u2014 "),toe=n(kVe,"A",{href:!0});var sXt=s(toe);YXr=r(sXt,"FlaxWav2Vec2Model"),sXt.forEach(t),KXr=r(kVe," (Wav2Vec2 model)"),kVe.forEach(t),ZXr=i(ae),G5=n(ae,"LI",{});var SVe=s(G5);D5e=n(SVe,"STRONG",{});var lXt=s(D5e);ezr=r(lXt,"xglm"),lXt.forEach(t),ozr=r(SVe," \u2014 "),aoe=n(SVe,"A",{href:!0});var iXt=s(aoe);rzr=r(iXt,"FlaxXGLMModel"),iXt.forEach(t),tzr=r(SVe," (XGLM model)"),SVe.forEach(t),azr=i(ae),O5=n(ae,"LI",{});var RVe=s(O5);G5e=n(RVe,"STRONG",{});var dXt=s(G5e);nzr=r(dXt,"xlm-roberta"),dXt.forEach(t),szr=r(RVe," \u2014 "),noe=n(RVe,"A",{href:!0});var cXt=s(noe);lzr=r(cXt,"FlaxXLMRobertaModel"),cXt.forEach(t),izr=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),ae.forEach(t),dzr=i(li),T(V5.$$.fragment,li),li.forEach(t),si.forEach(t),WWe=i(f),Zc=n(f,"H2",{class:!0});var oUe=s(Zc);X5=n(oUe,"A",{id:!0,class:!0,href:!0});var fXt=s(X5);O5e=n(fXt,"SPAN",{});var mXt=s(O5e);T(x$.$$.fragment,mXt),mXt.forEach(t),fXt.forEach(t),czr=i(oUe),V5e=n(oUe,"SPAN",{});var gXt=s(V5e);fzr=r(gXt,"FlaxAutoModelForCausalLM"),gXt.forEach(t),oUe.forEach(t),QWe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T($$.$$.fragment,ii),mzr=i(ii),ef=n(ii,"P",{});var jae=s(ef);gzr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),soe=n(jae,"A",{href:!0});var hXt=s(soe);hzr=r(hXt,"from_pretrained()"),hXt.forEach(t),pzr=r(jae," class method or the "),loe=n(jae,"A",{href:!0});var pXt=s(loe);_zr=r(pXt,"from_config()"),pXt.forEach(t),uzr=r(jae,` class
method.`),jae.forEach(t),bzr=i(ii),k$=n(ii,"P",{});var rUe=s(k$);vzr=r(rUe,"This class cannot be instantiated directly using "),X5e=n(rUe,"CODE",{});var _Xt=s(X5e);Fzr=r(_Xt,"__init__()"),_Xt.forEach(t),Tzr=r(rUe," (throws an error)."),rUe.forEach(t),Mzr=i(ii),Ht=n(ii,"DIV",{class:!0});var U7=s(Ht);T(S$.$$.fragment,U7),Ezr=i(U7),z5e=n(U7,"P",{});var uXt=s(z5e);Czr=r(uXt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uXt.forEach(t),wzr=i(U7),of=n(U7,"P",{});var Dae=s(of);Azr=r(Dae,`Note:
Loading a model from its configuration file does `),W5e=n(Dae,"STRONG",{});var bXt=s(W5e);Lzr=r(bXt,"not"),bXt.forEach(t),yzr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(Dae,"A",{href:!0});var vXt=s(ioe);xzr=r(vXt,"from_pretrained()"),vXt.forEach(t),$zr=r(Dae," to load the model weights."),Dae.forEach(t),kzr=i(U7),T(z5.$$.fragment,U7),U7.forEach(t),Szr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(R$.$$.fragment,di),Rzr=i(di),Q5e=n(di,"P",{});var FXt=s(Q5e);Pzr=r(FXt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FXt.forEach(t),Bzr=i(di),En=n(di,"P",{});var J7=s(En);Izr=r(J7,"The model class to instantiate is selected based on the "),H5e=n(J7,"CODE",{});var TXt=s(H5e);Nzr=r(TXt,"model_type"),TXt.forEach(t),qzr=r(J7,` property of the config object (either
passed as an argument or loaded from `),U5e=n(J7,"CODE",{});var MXt=s(U5e);jzr=r(MXt,"pretrained_model_name_or_path"),MXt.forEach(t),Dzr=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(J7,"CODE",{});var EXt=s(J5e);Gzr=r(EXt,"pretrained_model_name_or_path"),EXt.forEach(t),Ozr=r(J7,":"),J7.forEach(t),Vzr=i(di),xe=n(di,"UL",{});var Ne=s(xe);W5=n(Ne,"LI",{});var PVe=s(W5);Y5e=n(PVe,"STRONG",{});var CXt=s(Y5e);Xzr=r(CXt,"bart"),CXt.forEach(t),zzr=r(PVe," \u2014 "),doe=n(PVe,"A",{href:!0});var wXt=s(doe);Wzr=r(wXt,"FlaxBartForCausalLM"),wXt.forEach(t),Qzr=r(PVe," (BART model)"),PVe.forEach(t),Hzr=i(Ne),Q5=n(Ne,"LI",{});var BVe=s(Q5);K5e=n(BVe,"STRONG",{});var AXt=s(K5e);Uzr=r(AXt,"bert"),AXt.forEach(t),Jzr=r(BVe," \u2014 "),coe=n(BVe,"A",{href:!0});var LXt=s(coe);Yzr=r(LXt,"FlaxBertForCausalLM"),LXt.forEach(t),Kzr=r(BVe," (BERT model)"),BVe.forEach(t),Zzr=i(Ne),H5=n(Ne,"LI",{});var IVe=s(H5);Z5e=n(IVe,"STRONG",{});var yXt=s(Z5e);eWr=r(yXt,"big_bird"),yXt.forEach(t),oWr=r(IVe," \u2014 "),foe=n(IVe,"A",{href:!0});var xXt=s(foe);rWr=r(xXt,"FlaxBigBirdForCausalLM"),xXt.forEach(t),tWr=r(IVe," (BigBird model)"),IVe.forEach(t),aWr=i(Ne),U5=n(Ne,"LI",{});var NVe=s(U5);e0e=n(NVe,"STRONG",{});var $Xt=s(e0e);nWr=r($Xt,"electra"),$Xt.forEach(t),sWr=r(NVe," \u2014 "),moe=n(NVe,"A",{href:!0});var kXt=s(moe);lWr=r(kXt,"FlaxElectraForCausalLM"),kXt.forEach(t),iWr=r(NVe," (ELECTRA model)"),NVe.forEach(t),dWr=i(Ne),J5=n(Ne,"LI",{});var qVe=s(J5);o0e=n(qVe,"STRONG",{});var SXt=s(o0e);cWr=r(SXt,"gpt2"),SXt.forEach(t),fWr=r(qVe," \u2014 "),goe=n(qVe,"A",{href:!0});var RXt=s(goe);mWr=r(RXt,"FlaxGPT2LMHeadModel"),RXt.forEach(t),gWr=r(qVe," (OpenAI GPT-2 model)"),qVe.forEach(t),hWr=i(Ne),Y5=n(Ne,"LI",{});var jVe=s(Y5);r0e=n(jVe,"STRONG",{});var PXt=s(r0e);pWr=r(PXt,"gpt_neo"),PXt.forEach(t),_Wr=r(jVe," \u2014 "),hoe=n(jVe,"A",{href:!0});var BXt=s(hoe);uWr=r(BXt,"FlaxGPTNeoForCausalLM"),BXt.forEach(t),bWr=r(jVe," (GPT Neo model)"),jVe.forEach(t),vWr=i(Ne),K5=n(Ne,"LI",{});var DVe=s(K5);t0e=n(DVe,"STRONG",{});var IXt=s(t0e);FWr=r(IXt,"gptj"),IXt.forEach(t),TWr=r(DVe," \u2014 "),poe=n(DVe,"A",{href:!0});var NXt=s(poe);MWr=r(NXt,"FlaxGPTJForCausalLM"),NXt.forEach(t),EWr=r(DVe," (GPT-J model)"),DVe.forEach(t),CWr=i(Ne),Z5=n(Ne,"LI",{});var GVe=s(Z5);a0e=n(GVe,"STRONG",{});var qXt=s(a0e);wWr=r(qXt,"opt"),qXt.forEach(t),AWr=r(GVe," \u2014 "),_oe=n(GVe,"A",{href:!0});var jXt=s(_oe);LWr=r(jXt,"FlaxOPTForCausalLM"),jXt.forEach(t),yWr=r(GVe," (OPT model)"),GVe.forEach(t),xWr=i(Ne),e0=n(Ne,"LI",{});var OVe=s(e0);n0e=n(OVe,"STRONG",{});var DXt=s(n0e);$Wr=r(DXt,"roberta"),DXt.forEach(t),kWr=r(OVe," \u2014 "),uoe=n(OVe,"A",{href:!0});var GXt=s(uoe);SWr=r(GXt,"FlaxRobertaForCausalLM"),GXt.forEach(t),RWr=r(OVe," (RoBERTa model)"),OVe.forEach(t),PWr=i(Ne),o0=n(Ne,"LI",{});var VVe=s(o0);s0e=n(VVe,"STRONG",{});var OXt=s(s0e);BWr=r(OXt,"xglm"),OXt.forEach(t),IWr=r(VVe," \u2014 "),boe=n(VVe,"A",{href:!0});var VXt=s(boe);NWr=r(VXt,"FlaxXGLMForCausalLM"),VXt.forEach(t),qWr=r(VVe," (XGLM model)"),VVe.forEach(t),Ne.forEach(t),jWr=i(di),T(r0.$$.fragment,di),di.forEach(t),ii.forEach(t),HWe=i(f),rf=n(f,"H2",{class:!0});var tUe=s(rf);t0=n(tUe,"A",{id:!0,class:!0,href:!0});var XXt=s(t0);l0e=n(XXt,"SPAN",{});var zXt=s(l0e);T(P$.$$.fragment,zXt),zXt.forEach(t),XXt.forEach(t),DWr=i(tUe),i0e=n(tUe,"SPAN",{});var WXt=s(i0e);GWr=r(WXt,"FlaxAutoModelForPreTraining"),WXt.forEach(t),tUe.forEach(t),UWe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(B$.$$.fragment,ci),OWr=i(ci),tf=n(ci,"P",{});var Gae=s(tf);VWr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),voe=n(Gae,"A",{href:!0});var QXt=s(voe);XWr=r(QXt,"from_pretrained()"),QXt.forEach(t),zWr=r(Gae," class method or the "),Foe=n(Gae,"A",{href:!0});var HXt=s(Foe);WWr=r(HXt,"from_config()"),HXt.forEach(t),QWr=r(Gae,` class
method.`),Gae.forEach(t),HWr=i(ci),I$=n(ci,"P",{});var aUe=s(I$);UWr=r(aUe,"This class cannot be instantiated directly using "),d0e=n(aUe,"CODE",{});var UXt=s(d0e);JWr=r(UXt,"__init__()"),UXt.forEach(t),YWr=r(aUe," (throws an error)."),aUe.forEach(t),KWr=i(ci),Ut=n(ci,"DIV",{class:!0});var Y7=s(Ut);T(N$.$$.fragment,Y7),ZWr=i(Y7),c0e=n(Y7,"P",{});var JXt=s(c0e);eQr=r(JXt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JXt.forEach(t),oQr=i(Y7),af=n(Y7,"P",{});var Oae=s(af);rQr=r(Oae,`Note:
Loading a model from its configuration file does `),f0e=n(Oae,"STRONG",{});var YXt=s(f0e);tQr=r(YXt,"not"),YXt.forEach(t),aQr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(Oae,"A",{href:!0});var KXt=s(Toe);nQr=r(KXt,"from_pretrained()"),KXt.forEach(t),sQr=r(Oae," to load the model weights."),Oae.forEach(t),lQr=i(Y7),T(a0.$$.fragment,Y7),Y7.forEach(t),iQr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(q$.$$.fragment,fi),dQr=i(fi),m0e=n(fi,"P",{});var ZXt=s(m0e);cQr=r(ZXt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZXt.forEach(t),fQr=i(fi),Cn=n(fi,"P",{});var K7=s(Cn);mQr=r(K7,"The model class to instantiate is selected based on the "),g0e=n(K7,"CODE",{});var ezt=s(g0e);gQr=r(ezt,"model_type"),ezt.forEach(t),hQr=r(K7,` property of the config object (either
passed as an argument or loaded from `),h0e=n(K7,"CODE",{});var ozt=s(h0e);pQr=r(ozt,"pretrained_model_name_or_path"),ozt.forEach(t),_Qr=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(K7,"CODE",{});var rzt=s(p0e);uQr=r(rzt,"pretrained_model_name_or_path"),rzt.forEach(t),bQr=r(K7,":"),K7.forEach(t),vQr=i(fi),Ee=n(fi,"UL",{});var we=s(Ee);n0=n(we,"LI",{});var XVe=s(n0);_0e=n(XVe,"STRONG",{});var tzt=s(_0e);FQr=r(tzt,"albert"),tzt.forEach(t),TQr=r(XVe," \u2014 "),Moe=n(XVe,"A",{href:!0});var azt=s(Moe);MQr=r(azt,"FlaxAlbertForPreTraining"),azt.forEach(t),EQr=r(XVe," (ALBERT model)"),XVe.forEach(t),CQr=i(we),s0=n(we,"LI",{});var zVe=s(s0);u0e=n(zVe,"STRONG",{});var nzt=s(u0e);wQr=r(nzt,"bart"),nzt.forEach(t),AQr=r(zVe," \u2014 "),Eoe=n(zVe,"A",{href:!0});var szt=s(Eoe);LQr=r(szt,"FlaxBartForConditionalGeneration"),szt.forEach(t),yQr=r(zVe," (BART model)"),zVe.forEach(t),xQr=i(we),l0=n(we,"LI",{});var WVe=s(l0);b0e=n(WVe,"STRONG",{});var lzt=s(b0e);$Qr=r(lzt,"bert"),lzt.forEach(t),kQr=r(WVe," \u2014 "),Coe=n(WVe,"A",{href:!0});var izt=s(Coe);SQr=r(izt,"FlaxBertForPreTraining"),izt.forEach(t),RQr=r(WVe," (BERT model)"),WVe.forEach(t),PQr=i(we),i0=n(we,"LI",{});var QVe=s(i0);v0e=n(QVe,"STRONG",{});var dzt=s(v0e);BQr=r(dzt,"big_bird"),dzt.forEach(t),IQr=r(QVe," \u2014 "),woe=n(QVe,"A",{href:!0});var czt=s(woe);NQr=r(czt,"FlaxBigBirdForPreTraining"),czt.forEach(t),qQr=r(QVe," (BigBird model)"),QVe.forEach(t),jQr=i(we),d0=n(we,"LI",{});var HVe=s(d0);F0e=n(HVe,"STRONG",{});var fzt=s(F0e);DQr=r(fzt,"electra"),fzt.forEach(t),GQr=r(HVe," \u2014 "),Aoe=n(HVe,"A",{href:!0});var mzt=s(Aoe);OQr=r(mzt,"FlaxElectraForPreTraining"),mzt.forEach(t),VQr=r(HVe," (ELECTRA model)"),HVe.forEach(t),XQr=i(we),c0=n(we,"LI",{});var UVe=s(c0);T0e=n(UVe,"STRONG",{});var gzt=s(T0e);zQr=r(gzt,"longt5"),gzt.forEach(t),WQr=r(UVe," \u2014 "),Loe=n(UVe,"A",{href:!0});var hzt=s(Loe);QQr=r(hzt,"FlaxLongT5ForConditionalGeneration"),hzt.forEach(t),HQr=r(UVe," (LongT5 model)"),UVe.forEach(t),UQr=i(we),f0=n(we,"LI",{});var JVe=s(f0);M0e=n(JVe,"STRONG",{});var pzt=s(M0e);JQr=r(pzt,"mbart"),pzt.forEach(t),YQr=r(JVe," \u2014 "),yoe=n(JVe,"A",{href:!0});var _zt=s(yoe);KQr=r(_zt,"FlaxMBartForConditionalGeneration"),_zt.forEach(t),ZQr=r(JVe," (mBART model)"),JVe.forEach(t),eHr=i(we),m0=n(we,"LI",{});var YVe=s(m0);E0e=n(YVe,"STRONG",{});var uzt=s(E0e);oHr=r(uzt,"mt5"),uzt.forEach(t),rHr=r(YVe," \u2014 "),xoe=n(YVe,"A",{href:!0});var bzt=s(xoe);tHr=r(bzt,"FlaxMT5ForConditionalGeneration"),bzt.forEach(t),aHr=r(YVe," (MT5 model)"),YVe.forEach(t),nHr=i(we),g0=n(we,"LI",{});var KVe=s(g0);C0e=n(KVe,"STRONG",{});var vzt=s(C0e);sHr=r(vzt,"roberta"),vzt.forEach(t),lHr=r(KVe," \u2014 "),$oe=n(KVe,"A",{href:!0});var Fzt=s($oe);iHr=r(Fzt,"FlaxRobertaForMaskedLM"),Fzt.forEach(t),dHr=r(KVe," (RoBERTa model)"),KVe.forEach(t),cHr=i(we),h0=n(we,"LI",{});var ZVe=s(h0);w0e=n(ZVe,"STRONG",{});var Tzt=s(w0e);fHr=r(Tzt,"roformer"),Tzt.forEach(t),mHr=r(ZVe," \u2014 "),koe=n(ZVe,"A",{href:!0});var Mzt=s(koe);gHr=r(Mzt,"FlaxRoFormerForMaskedLM"),Mzt.forEach(t),hHr=r(ZVe," (RoFormer model)"),ZVe.forEach(t),pHr=i(we),p0=n(we,"LI",{});var eXe=s(p0);A0e=n(eXe,"STRONG",{});var Ezt=s(A0e);_Hr=r(Ezt,"t5"),Ezt.forEach(t),uHr=r(eXe," \u2014 "),Soe=n(eXe,"A",{href:!0});var Czt=s(Soe);bHr=r(Czt,"FlaxT5ForConditionalGeneration"),Czt.forEach(t),vHr=r(eXe," (T5 model)"),eXe.forEach(t),FHr=i(we),_0=n(we,"LI",{});var oXe=s(_0);L0e=n(oXe,"STRONG",{});var wzt=s(L0e);THr=r(wzt,"wav2vec2"),wzt.forEach(t),MHr=r(oXe," \u2014 "),Roe=n(oXe,"A",{href:!0});var Azt=s(Roe);EHr=r(Azt,"FlaxWav2Vec2ForPreTraining"),Azt.forEach(t),CHr=r(oXe," (Wav2Vec2 model)"),oXe.forEach(t),wHr=i(we),u0=n(we,"LI",{});var rXe=s(u0);y0e=n(rXe,"STRONG",{});var Lzt=s(y0e);AHr=r(Lzt,"xlm-roberta"),Lzt.forEach(t),LHr=r(rXe," \u2014 "),Poe=n(rXe,"A",{href:!0});var yzt=s(Poe);yHr=r(yzt,"FlaxXLMRobertaForMaskedLM"),yzt.forEach(t),xHr=r(rXe," (XLM-RoBERTa model)"),rXe.forEach(t),we.forEach(t),$Hr=i(fi),T(b0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),JWe=i(f),nf=n(f,"H2",{class:!0});var nUe=s(nf);v0=n(nUe,"A",{id:!0,class:!0,href:!0});var xzt=s(v0);x0e=n(xzt,"SPAN",{});var $zt=s(x0e);T(j$.$$.fragment,$zt),$zt.forEach(t),xzt.forEach(t),kHr=i(nUe),$0e=n(nUe,"SPAN",{});var kzt=s($0e);SHr=r(kzt,"FlaxAutoModelForMaskedLM"),kzt.forEach(t),nUe.forEach(t),YWe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(D$.$$.fragment,mi),RHr=i(mi),sf=n(mi,"P",{});var Vae=s(sf);PHr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Boe=n(Vae,"A",{href:!0});var Szt=s(Boe);BHr=r(Szt,"from_pretrained()"),Szt.forEach(t),IHr=r(Vae," class method or the "),Ioe=n(Vae,"A",{href:!0});var Rzt=s(Ioe);NHr=r(Rzt,"from_config()"),Rzt.forEach(t),qHr=r(Vae,` class
method.`),Vae.forEach(t),jHr=i(mi),G$=n(mi,"P",{});var sUe=s(G$);DHr=r(sUe,"This class cannot be instantiated directly using "),k0e=n(sUe,"CODE",{});var Pzt=s(k0e);GHr=r(Pzt,"__init__()"),Pzt.forEach(t),OHr=r(sUe," (throws an error)."),sUe.forEach(t),VHr=i(mi),Jt=n(mi,"DIV",{class:!0});var Z7=s(Jt);T(O$.$$.fragment,Z7),XHr=i(Z7),S0e=n(Z7,"P",{});var Bzt=s(S0e);zHr=r(Bzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Bzt.forEach(t),WHr=i(Z7),lf=n(Z7,"P",{});var Xae=s(lf);QHr=r(Xae,`Note:
Loading a model from its configuration file does `),R0e=n(Xae,"STRONG",{});var Izt=s(R0e);HHr=r(Izt,"not"),Izt.forEach(t),UHr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Xae,"A",{href:!0});var Nzt=s(Noe);JHr=r(Nzt,"from_pretrained()"),Nzt.forEach(t),YHr=r(Xae," to load the model weights."),Xae.forEach(t),KHr=i(Z7),T(F0.$$.fragment,Z7),Z7.forEach(t),ZHr=i(mi),Qr=n(mi,"DIV",{class:!0});var gi=s(Qr);T(V$.$$.fragment,gi),eUr=i(gi),P0e=n(gi,"P",{});var qzt=s(P0e);oUr=r(qzt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qzt.forEach(t),rUr=i(gi),wn=n(gi,"P",{});var eL=s(wn);tUr=r(eL,"The model class to instantiate is selected based on the "),B0e=n(eL,"CODE",{});var jzt=s(B0e);aUr=r(jzt,"model_type"),jzt.forEach(t),nUr=r(eL,` property of the config object (either
passed as an argument or loaded from `),I0e=n(eL,"CODE",{});var Dzt=s(I0e);sUr=r(Dzt,"pretrained_model_name_or_path"),Dzt.forEach(t),lUr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(eL,"CODE",{});var Gzt=s(N0e);iUr=r(Gzt,"pretrained_model_name_or_path"),Gzt.forEach(t),dUr=r(eL,":"),eL.forEach(t),cUr=i(gi),$e=n(gi,"UL",{});var qe=s($e);T0=n(qe,"LI",{});var tXe=s(T0);q0e=n(tXe,"STRONG",{});var Ozt=s(q0e);fUr=r(Ozt,"albert"),Ozt.forEach(t),mUr=r(tXe," \u2014 "),qoe=n(tXe,"A",{href:!0});var Vzt=s(qoe);gUr=r(Vzt,"FlaxAlbertForMaskedLM"),Vzt.forEach(t),hUr=r(tXe," (ALBERT model)"),tXe.forEach(t),pUr=i(qe),M0=n(qe,"LI",{});var aXe=s(M0);j0e=n(aXe,"STRONG",{});var Xzt=s(j0e);_Ur=r(Xzt,"bart"),Xzt.forEach(t),uUr=r(aXe," \u2014 "),joe=n(aXe,"A",{href:!0});var zzt=s(joe);bUr=r(zzt,"FlaxBartForConditionalGeneration"),zzt.forEach(t),vUr=r(aXe," (BART model)"),aXe.forEach(t),FUr=i(qe),E0=n(qe,"LI",{});var nXe=s(E0);D0e=n(nXe,"STRONG",{});var Wzt=s(D0e);TUr=r(Wzt,"bert"),Wzt.forEach(t),MUr=r(nXe," \u2014 "),Doe=n(nXe,"A",{href:!0});var Qzt=s(Doe);EUr=r(Qzt,"FlaxBertForMaskedLM"),Qzt.forEach(t),CUr=r(nXe," (BERT model)"),nXe.forEach(t),wUr=i(qe),C0=n(qe,"LI",{});var sXe=s(C0);G0e=n(sXe,"STRONG",{});var Hzt=s(G0e);AUr=r(Hzt,"big_bird"),Hzt.forEach(t),LUr=r(sXe," \u2014 "),Goe=n(sXe,"A",{href:!0});var Uzt=s(Goe);yUr=r(Uzt,"FlaxBigBirdForMaskedLM"),Uzt.forEach(t),xUr=r(sXe," (BigBird model)"),sXe.forEach(t),$Ur=i(qe),w0=n(qe,"LI",{});var lXe=s(w0);O0e=n(lXe,"STRONG",{});var Jzt=s(O0e);kUr=r(Jzt,"distilbert"),Jzt.forEach(t),SUr=r(lXe," \u2014 "),Ooe=n(lXe,"A",{href:!0});var Yzt=s(Ooe);RUr=r(Yzt,"FlaxDistilBertForMaskedLM"),Yzt.forEach(t),PUr=r(lXe," (DistilBERT model)"),lXe.forEach(t),BUr=i(qe),A0=n(qe,"LI",{});var iXe=s(A0);V0e=n(iXe,"STRONG",{});var Kzt=s(V0e);IUr=r(Kzt,"electra"),Kzt.forEach(t),NUr=r(iXe," \u2014 "),Voe=n(iXe,"A",{href:!0});var Zzt=s(Voe);qUr=r(Zzt,"FlaxElectraForMaskedLM"),Zzt.forEach(t),jUr=r(iXe," (ELECTRA model)"),iXe.forEach(t),DUr=i(qe),L0=n(qe,"LI",{});var dXe=s(L0);X0e=n(dXe,"STRONG",{});var eWt=s(X0e);GUr=r(eWt,"mbart"),eWt.forEach(t),OUr=r(dXe," \u2014 "),Xoe=n(dXe,"A",{href:!0});var oWt=s(Xoe);VUr=r(oWt,"FlaxMBartForConditionalGeneration"),oWt.forEach(t),XUr=r(dXe," (mBART model)"),dXe.forEach(t),zUr=i(qe),y0=n(qe,"LI",{});var cXe=s(y0);z0e=n(cXe,"STRONG",{});var rWt=s(z0e);WUr=r(rWt,"roberta"),rWt.forEach(t),QUr=r(cXe," \u2014 "),zoe=n(cXe,"A",{href:!0});var tWt=s(zoe);HUr=r(tWt,"FlaxRobertaForMaskedLM"),tWt.forEach(t),UUr=r(cXe," (RoBERTa model)"),cXe.forEach(t),JUr=i(qe),x0=n(qe,"LI",{});var fXe=s(x0);W0e=n(fXe,"STRONG",{});var aWt=s(W0e);YUr=r(aWt,"roformer"),aWt.forEach(t),KUr=r(fXe," \u2014 "),Woe=n(fXe,"A",{href:!0});var nWt=s(Woe);ZUr=r(nWt,"FlaxRoFormerForMaskedLM"),nWt.forEach(t),eJr=r(fXe," (RoFormer model)"),fXe.forEach(t),oJr=i(qe),$0=n(qe,"LI",{});var mXe=s($0);Q0e=n(mXe,"STRONG",{});var sWt=s(Q0e);rJr=r(sWt,"xlm-roberta"),sWt.forEach(t),tJr=r(mXe," \u2014 "),Qoe=n(mXe,"A",{href:!0});var lWt=s(Qoe);aJr=r(lWt,"FlaxXLMRobertaForMaskedLM"),lWt.forEach(t),nJr=r(mXe," (XLM-RoBERTa model)"),mXe.forEach(t),qe.forEach(t),sJr=i(gi),T(k0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),KWe=i(f),df=n(f,"H2",{class:!0});var lUe=s(df);S0=n(lUe,"A",{id:!0,class:!0,href:!0});var iWt=s(S0);H0e=n(iWt,"SPAN",{});var dWt=s(H0e);T(X$.$$.fragment,dWt),dWt.forEach(t),iWt.forEach(t),lJr=i(lUe),U0e=n(lUe,"SPAN",{});var cWt=s(U0e);iJr=r(cWt,"FlaxAutoModelForSeq2SeqLM"),cWt.forEach(t),lUe.forEach(t),ZWe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(z$.$$.fragment,hi),dJr=i(hi),cf=n(hi,"P",{});var zae=s(cf);cJr=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Hoe=n(zae,"A",{href:!0});var fWt=s(Hoe);fJr=r(fWt,"from_pretrained()"),fWt.forEach(t),mJr=r(zae," class method or the "),Uoe=n(zae,"A",{href:!0});var mWt=s(Uoe);gJr=r(mWt,"from_config()"),mWt.forEach(t),hJr=r(zae,` class
method.`),zae.forEach(t),pJr=i(hi),W$=n(hi,"P",{});var iUe=s(W$);_Jr=r(iUe,"This class cannot be instantiated directly using "),J0e=n(iUe,"CODE",{});var gWt=s(J0e);uJr=r(gWt,"__init__()"),gWt.forEach(t),bJr=r(iUe," (throws an error)."),iUe.forEach(t),vJr=i(hi),Yt=n(hi,"DIV",{class:!0});var oL=s(Yt);T(Q$.$$.fragment,oL),FJr=i(oL),Y0e=n(oL,"P",{});var hWt=s(Y0e);TJr=r(hWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hWt.forEach(t),MJr=i(oL),ff=n(oL,"P",{});var Wae=s(ff);EJr=r(Wae,`Note:
Loading a model from its configuration file does `),K0e=n(Wae,"STRONG",{});var pWt=s(K0e);CJr=r(pWt,"not"),pWt.forEach(t),wJr=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Joe=n(Wae,"A",{href:!0});var _Wt=s(Joe);AJr=r(_Wt,"from_pretrained()"),_Wt.forEach(t),LJr=r(Wae," to load the model weights."),Wae.forEach(t),yJr=i(oL),T(R0.$$.fragment,oL),oL.forEach(t),xJr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(H$.$$.fragment,pi),$Jr=i(pi),Z0e=n(pi,"P",{});var uWt=s(Z0e);kJr=r(uWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uWt.forEach(t),SJr=i(pi),An=n(pi,"P",{});var rL=s(An);RJr=r(rL,"The model class to instantiate is selected based on the "),ewe=n(rL,"CODE",{});var bWt=s(ewe);PJr=r(bWt,"model_type"),bWt.forEach(t),BJr=r(rL,` property of the config object (either
passed as an argument or loaded from `),owe=n(rL,"CODE",{});var vWt=s(owe);IJr=r(vWt,"pretrained_model_name_or_path"),vWt.forEach(t),NJr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rwe=n(rL,"CODE",{});var FWt=s(rwe);qJr=r(FWt,"pretrained_model_name_or_path"),FWt.forEach(t),jJr=r(rL,":"),rL.forEach(t),DJr=i(pi),ke=n(pi,"UL",{});var je=s(ke);P0=n(je,"LI",{});var gXe=s(P0);twe=n(gXe,"STRONG",{});var TWt=s(twe);GJr=r(TWt,"bart"),TWt.forEach(t),OJr=r(gXe," \u2014 "),Yoe=n(gXe,"A",{href:!0});var MWt=s(Yoe);VJr=r(MWt,"FlaxBartForConditionalGeneration"),MWt.forEach(t),XJr=r(gXe," (BART model)"),gXe.forEach(t),zJr=i(je),B0=n(je,"LI",{});var hXe=s(B0);awe=n(hXe,"STRONG",{});var EWt=s(awe);WJr=r(EWt,"blenderbot"),EWt.forEach(t),QJr=r(hXe," \u2014 "),Koe=n(hXe,"A",{href:!0});var CWt=s(Koe);HJr=r(CWt,"FlaxBlenderbotForConditionalGeneration"),CWt.forEach(t),UJr=r(hXe," (Blenderbot model)"),hXe.forEach(t),JJr=i(je),I0=n(je,"LI",{});var pXe=s(I0);nwe=n(pXe,"STRONG",{});var wWt=s(nwe);YJr=r(wWt,"blenderbot-small"),wWt.forEach(t),KJr=r(pXe," \u2014 "),Zoe=n(pXe,"A",{href:!0});var AWt=s(Zoe);ZJr=r(AWt,"FlaxBlenderbotSmallForConditionalGeneration"),AWt.forEach(t),eYr=r(pXe," (BlenderbotSmall model)"),pXe.forEach(t),oYr=i(je),N0=n(je,"LI",{});var _Xe=s(N0);swe=n(_Xe,"STRONG",{});var LWt=s(swe);rYr=r(LWt,"encoder-decoder"),LWt.forEach(t),tYr=r(_Xe," \u2014 "),ere=n(_Xe,"A",{href:!0});var yWt=s(ere);aYr=r(yWt,"FlaxEncoderDecoderModel"),yWt.forEach(t),nYr=r(_Xe," (Encoder decoder model)"),_Xe.forEach(t),sYr=i(je),q0=n(je,"LI",{});var uXe=s(q0);lwe=n(uXe,"STRONG",{});var xWt=s(lwe);lYr=r(xWt,"longt5"),xWt.forEach(t),iYr=r(uXe," \u2014 "),ore=n(uXe,"A",{href:!0});var $Wt=s(ore);dYr=r($Wt,"FlaxLongT5ForConditionalGeneration"),$Wt.forEach(t),cYr=r(uXe," (LongT5 model)"),uXe.forEach(t),fYr=i(je),j0=n(je,"LI",{});var bXe=s(j0);iwe=n(bXe,"STRONG",{});var kWt=s(iwe);mYr=r(kWt,"marian"),kWt.forEach(t),gYr=r(bXe," \u2014 "),rre=n(bXe,"A",{href:!0});var SWt=s(rre);hYr=r(SWt,"FlaxMarianMTModel"),SWt.forEach(t),pYr=r(bXe," (Marian model)"),bXe.forEach(t),_Yr=i(je),D0=n(je,"LI",{});var vXe=s(D0);dwe=n(vXe,"STRONG",{});var RWt=s(dwe);uYr=r(RWt,"mbart"),RWt.forEach(t),bYr=r(vXe," \u2014 "),tre=n(vXe,"A",{href:!0});var PWt=s(tre);vYr=r(PWt,"FlaxMBartForConditionalGeneration"),PWt.forEach(t),FYr=r(vXe," (mBART model)"),vXe.forEach(t),TYr=i(je),G0=n(je,"LI",{});var FXe=s(G0);cwe=n(FXe,"STRONG",{});var BWt=s(cwe);MYr=r(BWt,"mt5"),BWt.forEach(t),EYr=r(FXe," \u2014 "),are=n(FXe,"A",{href:!0});var IWt=s(are);CYr=r(IWt,"FlaxMT5ForConditionalGeneration"),IWt.forEach(t),wYr=r(FXe," (MT5 model)"),FXe.forEach(t),AYr=i(je),O0=n(je,"LI",{});var TXe=s(O0);fwe=n(TXe,"STRONG",{});var NWt=s(fwe);LYr=r(NWt,"pegasus"),NWt.forEach(t),yYr=r(TXe," \u2014 "),nre=n(TXe,"A",{href:!0});var qWt=s(nre);xYr=r(qWt,"FlaxPegasusForConditionalGeneration"),qWt.forEach(t),$Yr=r(TXe," (Pegasus model)"),TXe.forEach(t),kYr=i(je),V0=n(je,"LI",{});var MXe=s(V0);mwe=n(MXe,"STRONG",{});var jWt=s(mwe);SYr=r(jWt,"t5"),jWt.forEach(t),RYr=r(MXe," \u2014 "),sre=n(MXe,"A",{href:!0});var DWt=s(sre);PYr=r(DWt,"FlaxT5ForConditionalGeneration"),DWt.forEach(t),BYr=r(MXe," (T5 model)"),MXe.forEach(t),je.forEach(t),IYr=i(pi),T(X0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),eQe=i(f),mf=n(f,"H2",{class:!0});var dUe=s(mf);z0=n(dUe,"A",{id:!0,class:!0,href:!0});var GWt=s(z0);gwe=n(GWt,"SPAN",{});var OWt=s(gwe);T(U$.$$.fragment,OWt),OWt.forEach(t),GWt.forEach(t),NYr=i(dUe),hwe=n(dUe,"SPAN",{});var VWt=s(hwe);qYr=r(VWt,"FlaxAutoModelForSequenceClassification"),VWt.forEach(t),dUe.forEach(t),oQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(J$.$$.fragment,_i),jYr=i(_i),gf=n(_i,"P",{});var Qae=s(gf);DYr=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lre=n(Qae,"A",{href:!0});var XWt=s(lre);GYr=r(XWt,"from_pretrained()"),XWt.forEach(t),OYr=r(Qae," class method or the "),ire=n(Qae,"A",{href:!0});var zWt=s(ire);VYr=r(zWt,"from_config()"),zWt.forEach(t),XYr=r(Qae,` class
method.`),Qae.forEach(t),zYr=i(_i),Y$=n(_i,"P",{});var cUe=s(Y$);WYr=r(cUe,"This class cannot be instantiated directly using "),pwe=n(cUe,"CODE",{});var WWt=s(pwe);QYr=r(WWt,"__init__()"),WWt.forEach(t),HYr=r(cUe," (throws an error)."),cUe.forEach(t),UYr=i(_i),Kt=n(_i,"DIV",{class:!0});var tL=s(Kt);T(K$.$$.fragment,tL),JYr=i(tL),_we=n(tL,"P",{});var QWt=s(_we);YYr=r(QWt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QWt.forEach(t),KYr=i(tL),hf=n(tL,"P",{});var Hae=s(hf);ZYr=r(Hae,`Note:
Loading a model from its configuration file does `),uwe=n(Hae,"STRONG",{});var HWt=s(uwe);eKr=r(HWt,"not"),HWt.forEach(t),oKr=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dre=n(Hae,"A",{href:!0});var UWt=s(dre);rKr=r(UWt,"from_pretrained()"),UWt.forEach(t),tKr=r(Hae," to load the model weights."),Hae.forEach(t),aKr=i(tL),T(W0.$$.fragment,tL),tL.forEach(t),nKr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(Z$.$$.fragment,ui),sKr=i(ui),bwe=n(ui,"P",{});var JWt=s(bwe);lKr=r(JWt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JWt.forEach(t),iKr=i(ui),Ln=n(ui,"P",{});var aL=s(Ln);dKr=r(aL,"The model class to instantiate is selected based on the "),vwe=n(aL,"CODE",{});var YWt=s(vwe);cKr=r(YWt,"model_type"),YWt.forEach(t),fKr=r(aL,` property of the config object (either
passed as an argument or loaded from `),Fwe=n(aL,"CODE",{});var KWt=s(Fwe);mKr=r(KWt,"pretrained_model_name_or_path"),KWt.forEach(t),gKr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Twe=n(aL,"CODE",{});var ZWt=s(Twe);hKr=r(ZWt,"pretrained_model_name_or_path"),ZWt.forEach(t),pKr=r(aL,":"),aL.forEach(t),_Kr=i(ui),Se=n(ui,"UL",{});var De=s(Se);Q0=n(De,"LI",{});var EXe=s(Q0);Mwe=n(EXe,"STRONG",{});var eQt=s(Mwe);uKr=r(eQt,"albert"),eQt.forEach(t),bKr=r(EXe," \u2014 "),cre=n(EXe,"A",{href:!0});var oQt=s(cre);vKr=r(oQt,"FlaxAlbertForSequenceClassification"),oQt.forEach(t),FKr=r(EXe," (ALBERT model)"),EXe.forEach(t),TKr=i(De),H0=n(De,"LI",{});var CXe=s(H0);Ewe=n(CXe,"STRONG",{});var rQt=s(Ewe);MKr=r(rQt,"bart"),rQt.forEach(t),EKr=r(CXe," \u2014 "),fre=n(CXe,"A",{href:!0});var tQt=s(fre);CKr=r(tQt,"FlaxBartForSequenceClassification"),tQt.forEach(t),wKr=r(CXe," (BART model)"),CXe.forEach(t),AKr=i(De),U0=n(De,"LI",{});var wXe=s(U0);Cwe=n(wXe,"STRONG",{});var aQt=s(Cwe);LKr=r(aQt,"bert"),aQt.forEach(t),yKr=r(wXe," \u2014 "),mre=n(wXe,"A",{href:!0});var nQt=s(mre);xKr=r(nQt,"FlaxBertForSequenceClassification"),nQt.forEach(t),$Kr=r(wXe," (BERT model)"),wXe.forEach(t),kKr=i(De),J0=n(De,"LI",{});var AXe=s(J0);wwe=n(AXe,"STRONG",{});var sQt=s(wwe);SKr=r(sQt,"big_bird"),sQt.forEach(t),RKr=r(AXe," \u2014 "),gre=n(AXe,"A",{href:!0});var lQt=s(gre);PKr=r(lQt,"FlaxBigBirdForSequenceClassification"),lQt.forEach(t),BKr=r(AXe," (BigBird model)"),AXe.forEach(t),IKr=i(De),Y0=n(De,"LI",{});var LXe=s(Y0);Awe=n(LXe,"STRONG",{});var iQt=s(Awe);NKr=r(iQt,"distilbert"),iQt.forEach(t),qKr=r(LXe," \u2014 "),hre=n(LXe,"A",{href:!0});var dQt=s(hre);jKr=r(dQt,"FlaxDistilBertForSequenceClassification"),dQt.forEach(t),DKr=r(LXe," (DistilBERT model)"),LXe.forEach(t),GKr=i(De),K0=n(De,"LI",{});var yXe=s(K0);Lwe=n(yXe,"STRONG",{});var cQt=s(Lwe);OKr=r(cQt,"electra"),cQt.forEach(t),VKr=r(yXe," \u2014 "),pre=n(yXe,"A",{href:!0});var fQt=s(pre);XKr=r(fQt,"FlaxElectraForSequenceClassification"),fQt.forEach(t),zKr=r(yXe," (ELECTRA model)"),yXe.forEach(t),WKr=i(De),Z0=n(De,"LI",{});var xXe=s(Z0);ywe=n(xXe,"STRONG",{});var mQt=s(ywe);QKr=r(mQt,"mbart"),mQt.forEach(t),HKr=r(xXe," \u2014 "),_re=n(xXe,"A",{href:!0});var gQt=s(_re);UKr=r(gQt,"FlaxMBartForSequenceClassification"),gQt.forEach(t),JKr=r(xXe," (mBART model)"),xXe.forEach(t),YKr=i(De),ew=n(De,"LI",{});var $Xe=s(ew);xwe=n($Xe,"STRONG",{});var hQt=s(xwe);KKr=r(hQt,"roberta"),hQt.forEach(t),ZKr=r($Xe," \u2014 "),ure=n($Xe,"A",{href:!0});var pQt=s(ure);eZr=r(pQt,"FlaxRobertaForSequenceClassification"),pQt.forEach(t),oZr=r($Xe," (RoBERTa model)"),$Xe.forEach(t),rZr=i(De),ow=n(De,"LI",{});var kXe=s(ow);$we=n(kXe,"STRONG",{});var _Qt=s($we);tZr=r(_Qt,"roformer"),_Qt.forEach(t),aZr=r(kXe," \u2014 "),bre=n(kXe,"A",{href:!0});var uQt=s(bre);nZr=r(uQt,"FlaxRoFormerForSequenceClassification"),uQt.forEach(t),sZr=r(kXe," (RoFormer model)"),kXe.forEach(t),lZr=i(De),rw=n(De,"LI",{});var SXe=s(rw);kwe=n(SXe,"STRONG",{});var bQt=s(kwe);iZr=r(bQt,"xlm-roberta"),bQt.forEach(t),dZr=r(SXe," \u2014 "),vre=n(SXe,"A",{href:!0});var vQt=s(vre);cZr=r(vQt,"FlaxXLMRobertaForSequenceClassification"),vQt.forEach(t),fZr=r(SXe," (XLM-RoBERTa model)"),SXe.forEach(t),De.forEach(t),mZr=i(ui),T(tw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),rQe=i(f),pf=n(f,"H2",{class:!0});var fUe=s(pf);aw=n(fUe,"A",{id:!0,class:!0,href:!0});var FQt=s(aw);Swe=n(FQt,"SPAN",{});var TQt=s(Swe);T(ek.$$.fragment,TQt),TQt.forEach(t),FQt.forEach(t),gZr=i(fUe),Rwe=n(fUe,"SPAN",{});var MQt=s(Rwe);hZr=r(MQt,"FlaxAutoModelForQuestionAnswering"),MQt.forEach(t),fUe.forEach(t),tQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(ok.$$.fragment,bi),pZr=i(bi),_f=n(bi,"P",{});var Uae=s(_f);_Zr=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fre=n(Uae,"A",{href:!0});var EQt=s(Fre);uZr=r(EQt,"from_pretrained()"),EQt.forEach(t),bZr=r(Uae," class method or the "),Tre=n(Uae,"A",{href:!0});var CQt=s(Tre);vZr=r(CQt,"from_config()"),CQt.forEach(t),FZr=r(Uae,` class
method.`),Uae.forEach(t),TZr=i(bi),rk=n(bi,"P",{});var mUe=s(rk);MZr=r(mUe,"This class cannot be instantiated directly using "),Pwe=n(mUe,"CODE",{});var wQt=s(Pwe);EZr=r(wQt,"__init__()"),wQt.forEach(t),CZr=r(mUe," (throws an error)."),mUe.forEach(t),wZr=i(bi),Zt=n(bi,"DIV",{class:!0});var nL=s(Zt);T(tk.$$.fragment,nL),AZr=i(nL),Bwe=n(nL,"P",{});var AQt=s(Bwe);LZr=r(AQt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AQt.forEach(t),yZr=i(nL),uf=n(nL,"P",{});var Jae=s(uf);xZr=r(Jae,`Note:
Loading a model from its configuration file does `),Iwe=n(Jae,"STRONG",{});var LQt=s(Iwe);$Zr=r(LQt,"not"),LQt.forEach(t),kZr=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(Jae,"A",{href:!0});var yQt=s(Mre);SZr=r(yQt,"from_pretrained()"),yQt.forEach(t),RZr=r(Jae," to load the model weights."),Jae.forEach(t),PZr=i(nL),T(nw.$$.fragment,nL),nL.forEach(t),BZr=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(ak.$$.fragment,vi),IZr=i(vi),Nwe=n(vi,"P",{});var xQt=s(Nwe);NZr=r(xQt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xQt.forEach(t),qZr=i(vi),yn=n(vi,"P",{});var sL=s(yn);jZr=r(sL,"The model class to instantiate is selected based on the "),qwe=n(sL,"CODE",{});var $Qt=s(qwe);DZr=r($Qt,"model_type"),$Qt.forEach(t),GZr=r(sL,` property of the config object (either
passed as an argument or loaded from `),jwe=n(sL,"CODE",{});var kQt=s(jwe);OZr=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),VZr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dwe=n(sL,"CODE",{});var SQt=s(Dwe);XZr=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),zZr=r(sL,":"),sL.forEach(t),WZr=i(vi),Re=n(vi,"UL",{});var Ge=s(Re);sw=n(Ge,"LI",{});var RXe=s(sw);Gwe=n(RXe,"STRONG",{});var RQt=s(Gwe);QZr=r(RQt,"albert"),RQt.forEach(t),HZr=r(RXe," \u2014 "),Ere=n(RXe,"A",{href:!0});var PQt=s(Ere);UZr=r(PQt,"FlaxAlbertForQuestionAnswering"),PQt.forEach(t),JZr=r(RXe," (ALBERT model)"),RXe.forEach(t),YZr=i(Ge),lw=n(Ge,"LI",{});var PXe=s(lw);Owe=n(PXe,"STRONG",{});var BQt=s(Owe);KZr=r(BQt,"bart"),BQt.forEach(t),ZZr=r(PXe," \u2014 "),Cre=n(PXe,"A",{href:!0});var IQt=s(Cre);eet=r(IQt,"FlaxBartForQuestionAnswering"),IQt.forEach(t),oet=r(PXe," (BART model)"),PXe.forEach(t),ret=i(Ge),iw=n(Ge,"LI",{});var BXe=s(iw);Vwe=n(BXe,"STRONG",{});var NQt=s(Vwe);tet=r(NQt,"bert"),NQt.forEach(t),aet=r(BXe," \u2014 "),wre=n(BXe,"A",{href:!0});var qQt=s(wre);net=r(qQt,"FlaxBertForQuestionAnswering"),qQt.forEach(t),set=r(BXe," (BERT model)"),BXe.forEach(t),iet=i(Ge),dw=n(Ge,"LI",{});var IXe=s(dw);Xwe=n(IXe,"STRONG",{});var jQt=s(Xwe);det=r(jQt,"big_bird"),jQt.forEach(t),cet=r(IXe," \u2014 "),Are=n(IXe,"A",{href:!0});var DQt=s(Are);fet=r(DQt,"FlaxBigBirdForQuestionAnswering"),DQt.forEach(t),met=r(IXe," (BigBird model)"),IXe.forEach(t),get=i(Ge),cw=n(Ge,"LI",{});var NXe=s(cw);zwe=n(NXe,"STRONG",{});var GQt=s(zwe);het=r(GQt,"distilbert"),GQt.forEach(t),pet=r(NXe," \u2014 "),Lre=n(NXe,"A",{href:!0});var OQt=s(Lre);_et=r(OQt,"FlaxDistilBertForQuestionAnswering"),OQt.forEach(t),uet=r(NXe," (DistilBERT model)"),NXe.forEach(t),bet=i(Ge),fw=n(Ge,"LI",{});var qXe=s(fw);Wwe=n(qXe,"STRONG",{});var VQt=s(Wwe);vet=r(VQt,"electra"),VQt.forEach(t),Fet=r(qXe," \u2014 "),yre=n(qXe,"A",{href:!0});var XQt=s(yre);Tet=r(XQt,"FlaxElectraForQuestionAnswering"),XQt.forEach(t),Met=r(qXe," (ELECTRA model)"),qXe.forEach(t),Eet=i(Ge),mw=n(Ge,"LI",{});var jXe=s(mw);Qwe=n(jXe,"STRONG",{});var zQt=s(Qwe);Cet=r(zQt,"mbart"),zQt.forEach(t),wet=r(jXe," \u2014 "),xre=n(jXe,"A",{href:!0});var WQt=s(xre);Aet=r(WQt,"FlaxMBartForQuestionAnswering"),WQt.forEach(t),Let=r(jXe," (mBART model)"),jXe.forEach(t),yet=i(Ge),gw=n(Ge,"LI",{});var DXe=s(gw);Hwe=n(DXe,"STRONG",{});var QQt=s(Hwe);xet=r(QQt,"roberta"),QQt.forEach(t),$et=r(DXe," \u2014 "),$re=n(DXe,"A",{href:!0});var HQt=s($re);ket=r(HQt,"FlaxRobertaForQuestionAnswering"),HQt.forEach(t),Set=r(DXe," (RoBERTa model)"),DXe.forEach(t),Ret=i(Ge),hw=n(Ge,"LI",{});var GXe=s(hw);Uwe=n(GXe,"STRONG",{});var UQt=s(Uwe);Pet=r(UQt,"roformer"),UQt.forEach(t),Bet=r(GXe," \u2014 "),kre=n(GXe,"A",{href:!0});var JQt=s(kre);Iet=r(JQt,"FlaxRoFormerForQuestionAnswering"),JQt.forEach(t),Net=r(GXe," (RoFormer model)"),GXe.forEach(t),qet=i(Ge),pw=n(Ge,"LI",{});var OXe=s(pw);Jwe=n(OXe,"STRONG",{});var YQt=s(Jwe);jet=r(YQt,"xlm-roberta"),YQt.forEach(t),Det=r(OXe," \u2014 "),Sre=n(OXe,"A",{href:!0});var KQt=s(Sre);Get=r(KQt,"FlaxXLMRobertaForQuestionAnswering"),KQt.forEach(t),Oet=r(OXe," (XLM-RoBERTa model)"),OXe.forEach(t),Ge.forEach(t),Vet=i(vi),T(_w.$$.fragment,vi),vi.forEach(t),bi.forEach(t),aQe=i(f),bf=n(f,"H2",{class:!0});var gUe=s(bf);uw=n(gUe,"A",{id:!0,class:!0,href:!0});var ZQt=s(uw);Ywe=n(ZQt,"SPAN",{});var eHt=s(Ywe);T(nk.$$.fragment,eHt),eHt.forEach(t),ZQt.forEach(t),Xet=i(gUe),Kwe=n(gUe,"SPAN",{});var oHt=s(Kwe);zet=r(oHt,"FlaxAutoModelForTokenClassification"),oHt.forEach(t),gUe.forEach(t),nQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(sk.$$.fragment,Fi),Wet=i(Fi),vf=n(Fi,"P",{});var Yae=s(vf);Qet=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rre=n(Yae,"A",{href:!0});var rHt=s(Rre);Het=r(rHt,"from_pretrained()"),rHt.forEach(t),Uet=r(Yae," class method or the "),Pre=n(Yae,"A",{href:!0});var tHt=s(Pre);Jet=r(tHt,"from_config()"),tHt.forEach(t),Yet=r(Yae,` class
method.`),Yae.forEach(t),Ket=i(Fi),lk=n(Fi,"P",{});var hUe=s(lk);Zet=r(hUe,"This class cannot be instantiated directly using "),Zwe=n(hUe,"CODE",{});var aHt=s(Zwe);eot=r(aHt,"__init__()"),aHt.forEach(t),oot=r(hUe," (throws an error)."),hUe.forEach(t),rot=i(Fi),ea=n(Fi,"DIV",{class:!0});var lL=s(ea);T(ik.$$.fragment,lL),tot=i(lL),eAe=n(lL,"P",{});var nHt=s(eAe);aot=r(nHt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nHt.forEach(t),not=i(lL),Ff=n(lL,"P",{});var Kae=s(Ff);sot=r(Kae,`Note:
Loading a model from its configuration file does `),oAe=n(Kae,"STRONG",{});var sHt=s(oAe);lot=r(sHt,"not"),sHt.forEach(t),iot=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Kae,"A",{href:!0});var lHt=s(Bre);dot=r(lHt,"from_pretrained()"),lHt.forEach(t),cot=r(Kae," to load the model weights."),Kae.forEach(t),fot=i(lL),T(bw.$$.fragment,lL),lL.forEach(t),mot=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(dk.$$.fragment,Ti),got=i(Ti),rAe=n(Ti,"P",{});var iHt=s(rAe);hot=r(iHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iHt.forEach(t),pot=i(Ti),xn=n(Ti,"P",{});var iL=s(xn);_ot=r(iL,"The model class to instantiate is selected based on the "),tAe=n(iL,"CODE",{});var dHt=s(tAe);uot=r(dHt,"model_type"),dHt.forEach(t),bot=r(iL,` property of the config object (either
passed as an argument or loaded from `),aAe=n(iL,"CODE",{});var cHt=s(aAe);vot=r(cHt,"pretrained_model_name_or_path"),cHt.forEach(t),Fot=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nAe=n(iL,"CODE",{});var fHt=s(nAe);Tot=r(fHt,"pretrained_model_name_or_path"),fHt.forEach(t),Mot=r(iL,":"),iL.forEach(t),Eot=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);vw=n(Eo,"LI",{});var VXe=s(vw);sAe=n(VXe,"STRONG",{});var mHt=s(sAe);Cot=r(mHt,"albert"),mHt.forEach(t),wot=r(VXe," \u2014 "),Ire=n(VXe,"A",{href:!0});var gHt=s(Ire);Aot=r(gHt,"FlaxAlbertForTokenClassification"),gHt.forEach(t),Lot=r(VXe," (ALBERT model)"),VXe.forEach(t),yot=i(Eo),Fw=n(Eo,"LI",{});var XXe=s(Fw);lAe=n(XXe,"STRONG",{});var hHt=s(lAe);xot=r(hHt,"bert"),hHt.forEach(t),$ot=r(XXe," \u2014 "),Nre=n(XXe,"A",{href:!0});var pHt=s(Nre);kot=r(pHt,"FlaxBertForTokenClassification"),pHt.forEach(t),Sot=r(XXe," (BERT model)"),XXe.forEach(t),Rot=i(Eo),Tw=n(Eo,"LI",{});var zXe=s(Tw);iAe=n(zXe,"STRONG",{});var _Ht=s(iAe);Pot=r(_Ht,"big_bird"),_Ht.forEach(t),Bot=r(zXe," \u2014 "),qre=n(zXe,"A",{href:!0});var uHt=s(qre);Iot=r(uHt,"FlaxBigBirdForTokenClassification"),uHt.forEach(t),Not=r(zXe," (BigBird model)"),zXe.forEach(t),qot=i(Eo),Mw=n(Eo,"LI",{});var WXe=s(Mw);dAe=n(WXe,"STRONG",{});var bHt=s(dAe);jot=r(bHt,"distilbert"),bHt.forEach(t),Dot=r(WXe," \u2014 "),jre=n(WXe,"A",{href:!0});var vHt=s(jre);Got=r(vHt,"FlaxDistilBertForTokenClassification"),vHt.forEach(t),Oot=r(WXe," (DistilBERT model)"),WXe.forEach(t),Vot=i(Eo),Ew=n(Eo,"LI",{});var QXe=s(Ew);cAe=n(QXe,"STRONG",{});var FHt=s(cAe);Xot=r(FHt,"electra"),FHt.forEach(t),zot=r(QXe," \u2014 "),Dre=n(QXe,"A",{href:!0});var THt=s(Dre);Wot=r(THt,"FlaxElectraForTokenClassification"),THt.forEach(t),Qot=r(QXe," (ELECTRA model)"),QXe.forEach(t),Hot=i(Eo),Cw=n(Eo,"LI",{});var HXe=s(Cw);fAe=n(HXe,"STRONG",{});var MHt=s(fAe);Uot=r(MHt,"roberta"),MHt.forEach(t),Jot=r(HXe," \u2014 "),Gre=n(HXe,"A",{href:!0});var EHt=s(Gre);Yot=r(EHt,"FlaxRobertaForTokenClassification"),EHt.forEach(t),Kot=r(HXe," (RoBERTa model)"),HXe.forEach(t),Zot=i(Eo),ww=n(Eo,"LI",{});var UXe=s(ww);mAe=n(UXe,"STRONG",{});var CHt=s(mAe);ert=r(CHt,"roformer"),CHt.forEach(t),ort=r(UXe," \u2014 "),Ore=n(UXe,"A",{href:!0});var wHt=s(Ore);rrt=r(wHt,"FlaxRoFormerForTokenClassification"),wHt.forEach(t),trt=r(UXe," (RoFormer model)"),UXe.forEach(t),art=i(Eo),Aw=n(Eo,"LI",{});var JXe=s(Aw);gAe=n(JXe,"STRONG",{});var AHt=s(gAe);nrt=r(AHt,"xlm-roberta"),AHt.forEach(t),srt=r(JXe," \u2014 "),Vre=n(JXe,"A",{href:!0});var LHt=s(Vre);lrt=r(LHt,"FlaxXLMRobertaForTokenClassification"),LHt.forEach(t),irt=r(JXe," (XLM-RoBERTa model)"),JXe.forEach(t),Eo.forEach(t),drt=i(Ti),T(Lw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),sQe=i(f),Tf=n(f,"H2",{class:!0});var pUe=s(Tf);yw=n(pUe,"A",{id:!0,class:!0,href:!0});var yHt=s(yw);hAe=n(yHt,"SPAN",{});var xHt=s(hAe);T(ck.$$.fragment,xHt),xHt.forEach(t),yHt.forEach(t),crt=i(pUe),pAe=n(pUe,"SPAN",{});var $Ht=s(pAe);frt=r($Ht,"FlaxAutoModelForMultipleChoice"),$Ht.forEach(t),pUe.forEach(t),lQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(fk.$$.fragment,Mi),mrt=i(Mi),Mf=n(Mi,"P",{});var Zae=s(Mf);grt=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xre=n(Zae,"A",{href:!0});var kHt=s(Xre);hrt=r(kHt,"from_pretrained()"),kHt.forEach(t),prt=r(Zae," class method or the "),zre=n(Zae,"A",{href:!0});var SHt=s(zre);_rt=r(SHt,"from_config()"),SHt.forEach(t),urt=r(Zae,` class
method.`),Zae.forEach(t),brt=i(Mi),mk=n(Mi,"P",{});var _Ue=s(mk);vrt=r(_Ue,"This class cannot be instantiated directly using "),_Ae=n(_Ue,"CODE",{});var RHt=s(_Ae);Frt=r(RHt,"__init__()"),RHt.forEach(t),Trt=r(_Ue," (throws an error)."),_Ue.forEach(t),Mrt=i(Mi),oa=n(Mi,"DIV",{class:!0});var dL=s(oa);T(gk.$$.fragment,dL),Ert=i(dL),uAe=n(dL,"P",{});var PHt=s(uAe);Crt=r(PHt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PHt.forEach(t),wrt=i(dL),Ef=n(dL,"P",{});var ene=s(Ef);Art=r(ene,`Note:
Loading a model from its configuration file does `),bAe=n(ene,"STRONG",{});var BHt=s(bAe);Lrt=r(BHt,"not"),BHt.forEach(t),yrt=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(ene,"A",{href:!0});var IHt=s(Wre);xrt=r(IHt,"from_pretrained()"),IHt.forEach(t),$rt=r(ene," to load the model weights."),ene.forEach(t),krt=i(dL),T(xw.$$.fragment,dL),dL.forEach(t),Srt=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(hk.$$.fragment,Ei),Rrt=i(Ei),vAe=n(Ei,"P",{});var NHt=s(vAe);Prt=r(NHt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NHt.forEach(t),Brt=i(Ei),$n=n(Ei,"P",{});var cL=s($n);Irt=r(cL,"The model class to instantiate is selected based on the "),FAe=n(cL,"CODE",{});var qHt=s(FAe);Nrt=r(qHt,"model_type"),qHt.forEach(t),qrt=r(cL,` property of the config object (either
passed as an argument or loaded from `),TAe=n(cL,"CODE",{});var jHt=s(TAe);jrt=r(jHt,"pretrained_model_name_or_path"),jHt.forEach(t),Drt=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=n(cL,"CODE",{});var DHt=s(MAe);Grt=r(DHt,"pretrained_model_name_or_path"),DHt.forEach(t),Ort=r(cL,":"),cL.forEach(t),Vrt=i(Ei),ze=n(Ei,"UL",{});var Co=s(ze);$w=n(Co,"LI",{});var YXe=s($w);EAe=n(YXe,"STRONG",{});var GHt=s(EAe);Xrt=r(GHt,"albert"),GHt.forEach(t),zrt=r(YXe," \u2014 "),Qre=n(YXe,"A",{href:!0});var OHt=s(Qre);Wrt=r(OHt,"FlaxAlbertForMultipleChoice"),OHt.forEach(t),Qrt=r(YXe," (ALBERT model)"),YXe.forEach(t),Hrt=i(Co),kw=n(Co,"LI",{});var KXe=s(kw);CAe=n(KXe,"STRONG",{});var VHt=s(CAe);Urt=r(VHt,"bert"),VHt.forEach(t),Jrt=r(KXe," \u2014 "),Hre=n(KXe,"A",{href:!0});var XHt=s(Hre);Yrt=r(XHt,"FlaxBertForMultipleChoice"),XHt.forEach(t),Krt=r(KXe," (BERT model)"),KXe.forEach(t),Zrt=i(Co),Sw=n(Co,"LI",{});var ZXe=s(Sw);wAe=n(ZXe,"STRONG",{});var zHt=s(wAe);ett=r(zHt,"big_bird"),zHt.forEach(t),ott=r(ZXe," \u2014 "),Ure=n(ZXe,"A",{href:!0});var WHt=s(Ure);rtt=r(WHt,"FlaxBigBirdForMultipleChoice"),WHt.forEach(t),ttt=r(ZXe," (BigBird model)"),ZXe.forEach(t),att=i(Co),Rw=n(Co,"LI",{});var eze=s(Rw);AAe=n(eze,"STRONG",{});var QHt=s(AAe);ntt=r(QHt,"distilbert"),QHt.forEach(t),stt=r(eze," \u2014 "),Jre=n(eze,"A",{href:!0});var HHt=s(Jre);ltt=r(HHt,"FlaxDistilBertForMultipleChoice"),HHt.forEach(t),itt=r(eze," (DistilBERT model)"),eze.forEach(t),dtt=i(Co),Pw=n(Co,"LI",{});var oze=s(Pw);LAe=n(oze,"STRONG",{});var UHt=s(LAe);ctt=r(UHt,"electra"),UHt.forEach(t),ftt=r(oze," \u2014 "),Yre=n(oze,"A",{href:!0});var JHt=s(Yre);mtt=r(JHt,"FlaxElectraForMultipleChoice"),JHt.forEach(t),gtt=r(oze," (ELECTRA model)"),oze.forEach(t),htt=i(Co),Bw=n(Co,"LI",{});var rze=s(Bw);yAe=n(rze,"STRONG",{});var YHt=s(yAe);ptt=r(YHt,"roberta"),YHt.forEach(t),_tt=r(rze," \u2014 "),Kre=n(rze,"A",{href:!0});var KHt=s(Kre);utt=r(KHt,"FlaxRobertaForMultipleChoice"),KHt.forEach(t),btt=r(rze," (RoBERTa model)"),rze.forEach(t),vtt=i(Co),Iw=n(Co,"LI",{});var tze=s(Iw);xAe=n(tze,"STRONG",{});var ZHt=s(xAe);Ftt=r(ZHt,"roformer"),ZHt.forEach(t),Ttt=r(tze," \u2014 "),Zre=n(tze,"A",{href:!0});var eUt=s(Zre);Mtt=r(eUt,"FlaxRoFormerForMultipleChoice"),eUt.forEach(t),Ett=r(tze," (RoFormer model)"),tze.forEach(t),Ctt=i(Co),Nw=n(Co,"LI",{});var aze=s(Nw);$Ae=n(aze,"STRONG",{});var oUt=s($Ae);wtt=r(oUt,"xlm-roberta"),oUt.forEach(t),Att=r(aze," \u2014 "),ete=n(aze,"A",{href:!0});var rUt=s(ete);Ltt=r(rUt,"FlaxXLMRobertaForMultipleChoice"),rUt.forEach(t),ytt=r(aze," (XLM-RoBERTa model)"),aze.forEach(t),Co.forEach(t),xtt=i(Ei),T(qw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),iQe=i(f),Cf=n(f,"H2",{class:!0});var uUe=s(Cf);jw=n(uUe,"A",{id:!0,class:!0,href:!0});var tUt=s(jw);kAe=n(tUt,"SPAN",{});var aUt=s(kAe);T(pk.$$.fragment,aUt),aUt.forEach(t),tUt.forEach(t),$tt=i(uUe),SAe=n(uUe,"SPAN",{});var nUt=s(SAe);ktt=r(nUt,"FlaxAutoModelForNextSentencePrediction"),nUt.forEach(t),uUe.forEach(t),dQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(_k.$$.fragment,Ci),Stt=i(Ci),wf=n(Ci,"P",{});var one=s(wf);Rtt=r(one,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ote=n(one,"A",{href:!0});var sUt=s(ote);Ptt=r(sUt,"from_pretrained()"),sUt.forEach(t),Btt=r(one," class method or the "),rte=n(one,"A",{href:!0});var lUt=s(rte);Itt=r(lUt,"from_config()"),lUt.forEach(t),Ntt=r(one,` class
method.`),one.forEach(t),qtt=i(Ci),uk=n(Ci,"P",{});var bUe=s(uk);jtt=r(bUe,"This class cannot be instantiated directly using "),RAe=n(bUe,"CODE",{});var iUt=s(RAe);Dtt=r(iUt,"__init__()"),iUt.forEach(t),Gtt=r(bUe," (throws an error)."),bUe.forEach(t),Ott=i(Ci),ra=n(Ci,"DIV",{class:!0});var fL=s(ra);T(bk.$$.fragment,fL),Vtt=i(fL),PAe=n(fL,"P",{});var dUt=s(PAe);Xtt=r(dUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dUt.forEach(t),ztt=i(fL),Af=n(fL,"P",{});var rne=s(Af);Wtt=r(rne,`Note:
Loading a model from its configuration file does `),BAe=n(rne,"STRONG",{});var cUt=s(BAe);Qtt=r(cUt,"not"),cUt.forEach(t),Htt=r(rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=n(rne,"A",{href:!0});var fUt=s(tte);Utt=r(fUt,"from_pretrained()"),fUt.forEach(t),Jtt=r(rne," to load the model weights."),rne.forEach(t),Ytt=i(fL),T(Dw.$$.fragment,fL),fL.forEach(t),Ktt=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(vk.$$.fragment,wi),Ztt=i(wi),IAe=n(wi,"P",{});var mUt=s(IAe);eat=r(mUt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mUt.forEach(t),oat=i(wi),kn=n(wi,"P",{});var mL=s(kn);rat=r(mL,"The model class to instantiate is selected based on the "),NAe=n(mL,"CODE",{});var gUt=s(NAe);tat=r(gUt,"model_type"),gUt.forEach(t),aat=r(mL,` property of the config object (either
passed as an argument or loaded from `),qAe=n(mL,"CODE",{});var hUt=s(qAe);nat=r(hUt,"pretrained_model_name_or_path"),hUt.forEach(t),sat=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jAe=n(mL,"CODE",{});var pUt=s(jAe);lat=r(pUt,"pretrained_model_name_or_path"),pUt.forEach(t),iat=r(mL,":"),mL.forEach(t),dat=i(wi),DAe=n(wi,"UL",{});var _Ut=s(DAe);Gw=n(_Ut,"LI",{});var nze=s(Gw);GAe=n(nze,"STRONG",{});var uUt=s(GAe);cat=r(uUt,"bert"),uUt.forEach(t),fat=r(nze," \u2014 "),ate=n(nze,"A",{href:!0});var bUt=s(ate);mat=r(bUt,"FlaxBertForNextSentencePrediction"),bUt.forEach(t),gat=r(nze," (BERT model)"),nze.forEach(t),_Ut.forEach(t),hat=i(wi),T(Ow.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),cQe=i(f),Lf=n(f,"H2",{class:!0});var vUe=s(Lf);Vw=n(vUe,"A",{id:!0,class:!0,href:!0});var vUt=s(Vw);OAe=n(vUt,"SPAN",{});var FUt=s(OAe);T(Fk.$$.fragment,FUt),FUt.forEach(t),vUt.forEach(t),pat=i(vUe),VAe=n(vUe,"SPAN",{});var TUt=s(VAe);_at=r(TUt,"FlaxAutoModelForImageClassification"),TUt.forEach(t),vUe.forEach(t),fQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(Tk.$$.fragment,Ai),uat=i(Ai),yf=n(Ai,"P",{});var tne=s(yf);bat=r(tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nte=n(tne,"A",{href:!0});var MUt=s(nte);vat=r(MUt,"from_pretrained()"),MUt.forEach(t),Fat=r(tne," class method or the "),ste=n(tne,"A",{href:!0});var EUt=s(ste);Tat=r(EUt,"from_config()"),EUt.forEach(t),Mat=r(tne,` class
method.`),tne.forEach(t),Eat=i(Ai),Mk=n(Ai,"P",{});var FUe=s(Mk);Cat=r(FUe,"This class cannot be instantiated directly using "),XAe=n(FUe,"CODE",{});var CUt=s(XAe);wat=r(CUt,"__init__()"),CUt.forEach(t),Aat=r(FUe," (throws an error)."),FUe.forEach(t),Lat=i(Ai),ta=n(Ai,"DIV",{class:!0});var gL=s(ta);T(Ek.$$.fragment,gL),yat=i(gL),zAe=n(gL,"P",{});var wUt=s(zAe);xat=r(wUt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wUt.forEach(t),$at=i(gL),xf=n(gL,"P",{});var ane=s(xf);kat=r(ane,`Note:
Loading a model from its configuration file does `),WAe=n(ane,"STRONG",{});var AUt=s(WAe);Sat=r(AUt,"not"),AUt.forEach(t),Rat=r(ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=n(ane,"A",{href:!0});var LUt=s(lte);Pat=r(LUt,"from_pretrained()"),LUt.forEach(t),Bat=r(ane," to load the model weights."),ane.forEach(t),Iat=i(gL),T(Xw.$$.fragment,gL),gL.forEach(t),Nat=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(Ck.$$.fragment,Li),qat=i(Li),QAe=n(Li,"P",{});var yUt=s(QAe);jat=r(yUt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yUt.forEach(t),Dat=i(Li),Sn=n(Li,"P",{});var hL=s(Sn);Gat=r(hL,"The model class to instantiate is selected based on the "),HAe=n(hL,"CODE",{});var xUt=s(HAe);Oat=r(xUt,"model_type"),xUt.forEach(t),Vat=r(hL,` property of the config object (either
passed as an argument or loaded from `),UAe=n(hL,"CODE",{});var $Ut=s(UAe);Xat=r($Ut,"pretrained_model_name_or_path"),$Ut.forEach(t),zat=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JAe=n(hL,"CODE",{});var kUt=s(JAe);Wat=r(kUt,"pretrained_model_name_or_path"),kUt.forEach(t),Qat=r(hL,":"),hL.forEach(t),Hat=i(Li),wk=n(Li,"UL",{});var TUe=s(wk);zw=n(TUe,"LI",{});var sze=s(zw);YAe=n(sze,"STRONG",{});var SUt=s(YAe);Uat=r(SUt,"beit"),SUt.forEach(t),Jat=r(sze," \u2014 "),ite=n(sze,"A",{href:!0});var RUt=s(ite);Yat=r(RUt,"FlaxBeitForImageClassification"),RUt.forEach(t),Kat=r(sze," (BEiT model)"),sze.forEach(t),Zat=i(TUe),Ww=n(TUe,"LI",{});var lze=s(Ww);KAe=n(lze,"STRONG",{});var PUt=s(KAe);ent=r(PUt,"vit"),PUt.forEach(t),ont=r(lze," \u2014 "),dte=n(lze,"A",{href:!0});var BUt=s(dte);rnt=r(BUt,"FlaxViTForImageClassification"),BUt.forEach(t),tnt=r(lze," (ViT model)"),lze.forEach(t),TUe.forEach(t),ant=i(Li),T(Qw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),mQe=i(f),$f=n(f,"H2",{class:!0});var MUe=s($f);Hw=n(MUe,"A",{id:!0,class:!0,href:!0});var IUt=s(Hw);ZAe=n(IUt,"SPAN",{});var NUt=s(ZAe);T(Ak.$$.fragment,NUt),NUt.forEach(t),IUt.forEach(t),nnt=i(MUe),e7e=n(MUe,"SPAN",{});var qUt=s(e7e);snt=r(qUt,"FlaxAutoModelForVision2Seq"),qUt.forEach(t),MUe.forEach(t),gQe=i(f),Lr=n(f,"DIV",{class:!0});var yi=s(Lr);T(Lk.$$.fragment,yi),lnt=i(yi),kf=n(yi,"P",{});var nne=s(kf);int=r(nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cte=n(nne,"A",{href:!0});var jUt=s(cte);dnt=r(jUt,"from_pretrained()"),jUt.forEach(t),cnt=r(nne," class method or the "),fte=n(nne,"A",{href:!0});var DUt=s(fte);fnt=r(DUt,"from_config()"),DUt.forEach(t),mnt=r(nne,` class
method.`),nne.forEach(t),gnt=i(yi),yk=n(yi,"P",{});var EUe=s(yk);hnt=r(EUe,"This class cannot be instantiated directly using "),o7e=n(EUe,"CODE",{});var GUt=s(o7e);pnt=r(GUt,"__init__()"),GUt.forEach(t),_nt=r(EUe," (throws an error)."),EUe.forEach(t),unt=i(yi),aa=n(yi,"DIV",{class:!0});var pL=s(aa);T(xk.$$.fragment,pL),bnt=i(pL),r7e=n(pL,"P",{});var OUt=s(r7e);vnt=r(OUt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OUt.forEach(t),Fnt=i(pL),Sf=n(pL,"P",{});var sne=s(Sf);Tnt=r(sne,`Note:
Loading a model from its configuration file does `),t7e=n(sne,"STRONG",{});var VUt=s(t7e);Mnt=r(VUt,"not"),VUt.forEach(t),Ent=r(sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(sne,"A",{href:!0});var XUt=s(mte);Cnt=r(XUt,"from_pretrained()"),XUt.forEach(t),wnt=r(sne," to load the model weights."),sne.forEach(t),Ant=i(pL),T(Uw.$$.fragment,pL),pL.forEach(t),Lnt=i(yi),ot=n(yi,"DIV",{class:!0});var xi=s(ot);T($k.$$.fragment,xi),ynt=i(xi),a7e=n(xi,"P",{});var zUt=s(a7e);xnt=r(zUt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zUt.forEach(t),$nt=i(xi),Rn=n(xi,"P",{});var _L=s(Rn);knt=r(_L,"The model class to instantiate is selected based on the "),n7e=n(_L,"CODE",{});var WUt=s(n7e);Snt=r(WUt,"model_type"),WUt.forEach(t),Rnt=r(_L,` property of the config object (either
passed as an argument or loaded from `),s7e=n(_L,"CODE",{});var QUt=s(s7e);Pnt=r(QUt,"pretrained_model_name_or_path"),QUt.forEach(t),Bnt=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(_L,"CODE",{});var HUt=s(l7e);Int=r(HUt,"pretrained_model_name_or_path"),HUt.forEach(t),Nnt=r(_L,":"),_L.forEach(t),qnt=i(xi),i7e=n(xi,"UL",{});var UUt=s(i7e);Jw=n(UUt,"LI",{});var ize=s(Jw);d7e=n(ize,"STRONG",{});var JUt=s(d7e);jnt=r(JUt,"vision-encoder-decoder"),JUt.forEach(t),Dnt=r(ize," \u2014 "),gte=n(ize,"A",{href:!0});var YUt=s(gte);Gnt=r(YUt,"FlaxVisionEncoderDecoderModel"),YUt.forEach(t),Ont=r(ize," (Vision Encoder decoder model)"),ize.forEach(t),UUt.forEach(t),Vnt=i(xi),T(Yw.$$.fragment,xi),xi.forEach(t),yi.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(tKt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Bn,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoConfig"),d(Nn,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoModel"),d(qn,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoTokenizer"),d(Ii,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ni,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(qi,"class","relative group"),d(sR,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(lR,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertConfig"),d(iR,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartConfig"),d(dR,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitConfig"),d(cR,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertConfig"),d(fR,"href","/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(mR,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdConfig"),d(gR,"href","/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(hR,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(pR,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(_R,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomConfig"),d(uR,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertConfig"),d(bR,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineConfig"),d(vR,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPConfig"),d(FR,"href","/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenConfig"),d(TR,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertConfig"),d(MR,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextConfig"),d(ER,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLConfig"),d(CR,"href","/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtConfig"),d(wR,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(AR,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(LR,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(yR,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaConfig"),d(xR,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d($R,"href","/docs/transformers/pr_18361/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(kR,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTConfig"),d(SR,"href","/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrConfig"),d(RR,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertConfig"),d(PR,"href","/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRConfig"),d(BR,"href","/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTConfig"),d(IR,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraConfig"),d(NR,"href","/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(qR,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertConfig"),d(jR,"href","/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaConfig"),d(DR,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetConfig"),d(GR,"href","/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTConfig"),d(OR,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelConfig"),d(VR,"href","/docs/transformers/pr_18361/en/model_doc/glpn#transformers.GLPNConfig"),d(XR,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Config"),d(zR,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(WR,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(QR,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJConfig"),d(HR,"href","/docs/transformers/pr_18361/en/model_doc/groupvit#transformers.GroupViTConfig"),d(UR,"href","/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertConfig"),d(JR,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertConfig"),d(YR,"href","/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(KR,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ZR,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(eP,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(oP,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDConfig"),d(rP,"href","/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitConfig"),d(tP,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerConfig"),d(aP,"href","/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Config"),d(nP,"href","/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeConfig"),d(sP,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertConfig"),d(lP,"href","/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Config"),d(iP,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianConfig"),d(dP,"href","/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(cP,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartConfig"),d(fP,"href","/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTConfig"),d(mP,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(gP,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(hP,"href","/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(pP,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetConfig"),d(_P,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Config"),d(uP,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpConfig"),d(bP,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaConfig"),d(vP,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(FP,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(TP,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTConfig"),d(MP,"href","/docs/transformers/pr_18361/en/model_doc/owlvit#transformers.OwlViTConfig"),d(EP,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusConfig"),d(CP,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverConfig"),d(wP,"href","/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartConfig"),d(AP,"href","/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(LP,"href","/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(yP,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(xP,"href","/docs/transformers/pr_18361/en/model_doc/rag#transformers.RagConfig"),d($P,"href","/docs/transformers/pr_18361/en/model_doc/realm#transformers.RealmConfig"),d(kP,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerConfig"),d(SP,"href","/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetConfig"),d(RP,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertConfig"),d(PP,"href","/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetConfig"),d(BP,"href","/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertConfig"),d(IP,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaConfig"),d(NP,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerConfig"),d(qP,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerConfig"),d(jP,"href","/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWConfig"),d(DP,"href","/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDConfig"),d(GP,"href","/docs/transformers/pr_18361/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(OP,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(VP,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(XP,"href","/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterConfig"),d(zP,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(WP,"href","/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinConfig"),d(QP,"href","/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2Config"),d(HP,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Config"),d(UP,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasConfig"),d(JP,"href","/docs/transformers/pr_18361/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(YP,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(KP,"href","/docs/transformers/pr_18361/en/model_doc/trocr#transformers.TrOCRConfig"),d(ZP,"href","/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(eB,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(oB,"href","/docs/transformers/pr_18361/en/model_doc/van#transformers.VanConfig"),d(rB,"href","/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltConfig"),d(tB,"href","/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(aB,"href","/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(nB,"href","/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(sB,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTConfig"),d(lB,"href","/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(iB,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(dB,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(cB,"href","/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMConfig"),d(fB,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMConfig"),d(mB,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMConfig"),d(gB,"href","/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(hB,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(pB,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(_B,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetConfig"),d(uB,"href","/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosConfig"),d(bB,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(th,"id","transformers.AutoTokenizer"),d(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(th,"href","#transformers.AutoTokenizer"),d(Di,"class","relative group"),d(vB,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(FB,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertTokenizer"),d(TB,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(MB,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartTokenizer"),d(EB,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartTokenizerFast"),d(CB,"href","/docs/transformers/pr_18361/en/model_doc/barthez#transformers.BarthezTokenizer"),d(wB,"href","/docs/transformers/pr_18361/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(AB,"href","/docs/transformers/pr_18361/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(LB,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizer"),d(yB,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizerFast"),d(xB,"href","/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d($B,"href","/docs/transformers/pr_18361/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(kB,"href","/docs/transformers/pr_18361/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(SB,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(RB,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(PB,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(BB,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(IB,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(NB,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(qB,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(jB,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(DB,"href","/docs/transformers/pr_18361/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(GB,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertTokenizer"),d(OB,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(VB,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineTokenizer"),d(XB,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPTokenizer"),d(zB,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(WB,"href","/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(QB,"href","/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(HB,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(UB,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(JB,"href","/docs/transformers/pr_18361/en/model_doc/cpm#transformers.CpmTokenizer"),d(YB,"href","/docs/transformers/pr_18361/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(KB,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(ZB,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizer"),d(eI,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(oI,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaTokenizer"),d(rI,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(tI,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(aI,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(nI,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(sI,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(lI,"href","/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(iI,"href","/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(dI,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraTokenizer"),d(cI,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(fI,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(mI,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetTokenizer"),d(gI,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(hI,"href","/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(pI,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelTokenizer"),d(_I,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(uI,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(bI,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vI,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FI,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(TI,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(MI,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(EI,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(CI,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPTokenizer"),d(wI,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(AI,"href","/docs/transformers/pr_18361/en/model_doc/herbert#transformers.HerbertTokenizer"),d(LI,"href","/docs/transformers/pr_18361/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(yI,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(xI,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizer"),d($I,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(kI,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(SI,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(RI,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(PI,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(BI,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(II,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(NI,"href","/docs/transformers/pr_18361/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(qI,"href","/docs/transformers/pr_18361/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(jI,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDTokenizer"),d(DI,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDTokenizerFast"),d(GI,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerTokenizer"),d(OI,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(VI,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.T5Tokenizer"),d(XI,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.T5TokenizerFast"),d(zI,"href","/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeTokenizer"),d(WI,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(QI,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(HI,"href","/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(UI,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianTokenizer"),d(JI,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartTokenizer"),d(YI,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(KI,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ZI,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(eN,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizer"),d(oN,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizerFast"),d(rN,"href","/docs/transformers/pr_18361/en/model_doc/mluke#transformers.MLukeTokenizer"),d(tN,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(aN,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(nN,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(sN,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(lN,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.T5Tokenizer"),d(iN,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.T5TokenizerFast"),d(dN,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpTokenizer"),d(cN,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(fN,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizer"),d(mN,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizerFast"),d(gN,"href","/docs/transformers/pr_18361/en/model_doc/nllb#transformers.NllbTokenizer"),d(hN,"href","/docs/transformers/pr_18361/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(pN,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertTokenizer"),d(_N,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(uN,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(bN,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(vN,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FN,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPTokenizer"),d(TN,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(MN,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(EN,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(CN,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(wN,"href","/docs/transformers/pr_18361/en/model_doc/phobert#transformers.PhobertTokenizer"),d(AN,"href","/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartTokenizer"),d(LN,"href","/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(yN,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizer"),d(xN,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizerFast"),d($N,"href","/docs/transformers/pr_18361/en/model_doc/rag#transformers.RagTokenizer"),d(kN,"href","/docs/transformers/pr_18361/en/model_doc/realm#transformers.RealmTokenizer"),d(SN,"href","/docs/transformers/pr_18361/en/model_doc/realm#transformers.RealmTokenizerFast"),d(RN,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerTokenizer"),d(PN,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(BN,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertTokenizer"),d(IN,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(NN,"href","/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(qN,"href","/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(jN,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizer"),d(DN,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(GN,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(ON,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(VN,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(XN,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(zN,"href","/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterTokenizer"),d(WN,"href","/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(QN,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(HN,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(UN,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.T5Tokenizer"),d(JN,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.T5TokenizerFast"),d(YN,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasTokenizer"),d(KN,"href","/docs/transformers/pr_18361/en/model_doc/tapex#transformers.TapexTokenizer"),d(ZN,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(eq,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizer"),d(oq,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizerFast"),d(rq,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizer"),d(tq,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertTokenizerFast"),d(aq,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(nq,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sq,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(lq,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMTokenizer"),d(iq,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(dq,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMTokenizer"),d(cq,"href","/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(fq,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(mq,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(gq,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizer"),d(hq,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(pq,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(_q,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(uq,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertTokenizer"),d(bq,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoFeatureExtractor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoFeatureExtractor"),d(Gi,"class","relative group"),d(vq,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(Fq,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Tq,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Mq,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Eq,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Cq,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(wq,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Aq,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Lq,"href","/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(yq,"href","/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(xq,"href","/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d($q,"href","/docs/transformers/pr_18361/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(kq,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Sq,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Rq,"href","/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(Pq,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Bq,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Iq,"href","/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(Nq,"href","/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(qq,"href","/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(jq,"href","/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Dq,"href","/docs/transformers/pr_18361/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Gq,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Xq,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(zq,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Wq,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Qq,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Hq,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Uq,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Jq,"href","/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Yq,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Kq,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Zq,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(ej,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(oj,"href","/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wp,"id","transformers.AutoProcessor"),d(wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wp,"href","#transformers.AutoProcessor"),d(Oi,"class","relative group"),d(rj,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(tj,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPProcessor"),d(aj,"href","/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaProcessor"),d(nj,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPProcessor"),d(sj,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(lj,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(ij,"href","/docs/transformers/pr_18361/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(dj,"href","/docs/transformers/pr_18361/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(cj,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(fj,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(mj,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(gj,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(hj,"href","/docs/transformers/pr_18361/en/model_doc/trocr#transformers.TrOCRProcessor"),d(pj,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(_j,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(uj,"href","/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltProcessor"),d(bj,"href","/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(vj,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Fj,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Tj,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hp,"id","transformers.AutoModel"),d(Hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hp,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(Mj,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ej,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cj,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wj,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertModel"),d(Aj,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartModel"),d(Lj,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitModel"),d(yj,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertModel"),d(xj,"href","/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d($j,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdModel"),d(kj,"href","/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Sj,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(Rj,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Pj,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomModel"),d(Bj,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertModel"),d(Ij,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineModel"),d(Nj,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.CLIPModel"),d(qj,"href","/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenModel"),d(jj,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertModel"),d(Dj,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextModel"),d(Gj,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLModel"),d(Oj,"href","/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtModel"),d(Vj,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Xj,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(zj,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Wj,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaModel"),d(Qj,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Hj,"href","/docs/transformers/pr_18361/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(Uj,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTModel"),d(Jj,"href","/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrModel"),d(Yj,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertModel"),d(Kj,"href","/docs/transformers/pr_18361/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(Zj,"href","/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTModel"),d(eD,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraModel"),d(oD,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertModel"),d(rD,"href","/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaModel"),d(tD,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetModel"),d(aD,"href","/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTModel"),d(nD,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelModel"),d(sD,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelBaseModel"),d(lD,"href","/docs/transformers/pr_18361/en/model_doc/glpn#transformers.GLPNModel"),d(iD,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2Model"),d(dD,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(cD,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(fD,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJModel"),d(mD,"href","/docs/transformers/pr_18361/en/model_doc/groupvit#transformers.GroupViTModel"),d(gD,"href","/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertModel"),d(hD,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertModel"),d(pD,"href","/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(_D,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(uD,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(bD,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(vD,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDModel"),d(FD,"href","/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitModel"),d(TD,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerModel"),d(MD,"href","/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5Model"),d(ED,"href","/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeModel"),d(CD,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertModel"),d(wD,"href","/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Model"),d(AD,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianModel"),d(LD,"href","/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerModel"),d(yD,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartModel"),d(xD,"href","/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTModel"),d($D,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(kD,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertModel"),d(SD,"href","/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTModel"),d(RD,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetModel"),d(PD,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5Model"),d(BD,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpModel"),d(ID,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaModel"),d(ND,"href","/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100Model"),d(qD,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerModel"),d(jD,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(DD,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTModel"),d(GD,"href","/docs/transformers/pr_18361/en/model_doc/owlvit#transformers.OwlViTModel"),d(OD,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusModel"),d(VD,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverModel"),d(XD,"href","/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartModel"),d(zD,"href","/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerModel"),d(WD,"href","/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(QD,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertModel"),d(HD,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerModel"),d(UD,"href","/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetModel"),d(JD,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertModel"),d(YD,"href","/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetModel"),d(KD,"href","/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertModel"),d(ZD,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaModel"),d(eG,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerModel"),d(oG,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerModel"),d(rG,"href","/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWModel"),d(tG,"href","/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDModel"),d(aG,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(nG,"href","/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterModel"),d(sG,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(lG,"href","/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinModel"),d(iG,"href","/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2Model"),d(dG,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5Model"),d(cG,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasModel"),d(fG,"href","/docs/transformers/pr_18361/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(mG,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(gG,"href","/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechModel"),d(hG,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(pG,"href","/docs/transformers/pr_18361/en/model_doc/van#transformers.VanModel"),d(_G,"href","/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltModel"),d(uG,"href","/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(bG,"href","/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertModel"),d(vG,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTModel"),d(FG,"href","/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(TG,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(MG,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(EG,"href","/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMModel"),d(CG,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMModel"),d(wG,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMModel"),d(AG,"href","/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(LG,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(yG,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(xG,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetModel"),d($G,"href","/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosModel"),d(kG,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t1,"id","transformers.AutoModelForPreTraining"),d(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t1,"href","#transformers.AutoModelForPreTraining"),d(Qi,"class","relative group"),d(SG,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RG,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BG,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForPreTraining"),d(IG,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(NG,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForPreTraining"),d(qG,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(jG,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForCausalLM"),d(DG,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(GG,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(OG,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(VG,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(XG,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(zG,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WG,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForPreTraining"),d(QG,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(HG,"href","/docs/transformers/pr_18361/en/model_doc/flava#transformers.FlavaForPreTraining"),d(UG,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForPreTraining"),d(JG,"href","/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(YG,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(KG,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(ZG,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(eO,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(oO,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(rO,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(tO,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(aO,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(nO,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(sO,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(lO,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(iO,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(dO,"href","/docs/transformers/pr_18361/en/model_doc/retribert#transformers.RetriBertModel"),d(cO,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(fO,"href","/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(mO,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(gO,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(hO,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(pO,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_O,"href","/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(uO,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(bO,"href","/docs/transformers/pr_18361/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(vO,"href","/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(FO,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(TO,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(MO,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(EO,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(CO,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(wO,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K1,"id","transformers.AutoModelForCausalLM"),d(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K1,"href","#transformers.AutoModelForCausalLM"),d(Ji,"class","relative group"),d(AO,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xO,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForCausalLM"),d($O,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertLMHeadModel"),d(kO,"href","/docs/transformers/pr_18361/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(SO,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(RO,"href","/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(PO,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(BO,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(IO,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForCausalLM"),d(NO,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(qO,"href","/docs/transformers/pr_18361/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(jO,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(DO,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(GO,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForCausalLM"),d(OO,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(VO,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(XO,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(zO,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(WO,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianForCausalLM"),d(QO,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForCausalLM"),d(HO,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(UO,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForCausalLM"),d(JO,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(YO,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTForCausalLM"),d(KO,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(ZO,"href","/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(eV,"href","/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(oV,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(rV,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(tV,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(aV,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(nV,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(sV,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(lV,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(iV,"href","/docs/transformers/pr_18361/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(dV,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(cV,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(fV,"href","/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(mV,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(gV,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(hV,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O2,"id","transformers.AutoModelForMaskedLM"),d(O2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O2,"href","#transformers.AutoModelForMaskedLM"),d(Zi,"class","relative group"),d(pV,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_V,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uV,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bV,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(vV,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(FV,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForMaskedLM"),d(TV,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(MV,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(EV,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(CV,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(wV,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(AV,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(LV,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(yV,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(xV,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d($V,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(kV,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(SV,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(RV,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(PV,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(BV,"href","/docs/transformers/pr_18361/en/model_doc/luke#transformers.LukeForMaskedLM"),d(IV,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(NV,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(qV,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(jV,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(DV,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(OV,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(VV,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(XV,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(zV,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(WV,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(QV,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(HV,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(UV,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(JV,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(YV,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(KV,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(ZV,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(eX,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($b,"id","transformers.AutoModelForSeq2SeqLM"),d($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($b,"href","#transformers.AutoModelForSeq2SeqLM"),d(rd,"class","relative group"),d(oX,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rX,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tX,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aX,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(nX,"href","/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(sX,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(lX,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(iX,"href","/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(dX,"href","/docs/transformers/pr_18361/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_18361/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.MarianMTModel"),d(hX,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_18361/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(vX,"href","/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_18361/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(TX,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(MX,"href","/docs/transformers/pr_18361/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zb,"id","transformers.AutoModelForSequenceClassification"),d(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zb,"href","#transformers.AutoModelForSequenceClassification"),d(nd,"class","relative group"),d(EX,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CX,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wX,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AX,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(LX,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yX,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d($X,"href","/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(kX,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(SX,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(PX,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(IX,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(NX,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(qX,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(jX,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(GX,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(VX,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(XX,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(zX,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(WX,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(QX,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(HX,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(UX,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(JX,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(YX,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDForSequenceClassification"),d(KX,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(ez,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(tz,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(az,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(nz,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sz,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lz,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(iz,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(dz,"href","/docs/transformers/pr_18361/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(cz,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(mz,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(pz,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(_z,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(uz,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(bz,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(vz,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e3,"id","transformers.AutoModelForMultipleChoice"),d(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e3,"href","#transformers.AutoModelForMultipleChoice"),d(id,"class","relative group"),d(Ez,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cz,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wz,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Az,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForMultipleChoice"),d(yz,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(xz,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d($z,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kz,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(qz,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jz,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(zz,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(eW,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(oW,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P3,"id","transformers.AutoModelForNextSentencePrediction"),d(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P3,"href","#transformers.AutoModelForNextSentencePrediction"),d(fd,"class","relative group"),d(rW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nW,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sW,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lW,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iW,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dW,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(cW,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X3,"id","transformers.AutoModelForTokenClassification"),d(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X3,"href","#transformers.AutoModelForTokenClassification"),d(hd,"class","relative group"),d(fW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hW,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(pW,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForTokenClassification"),d(_W,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(uW,"href","/docs/transformers/pr_18361/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(bW,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(vW,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForTokenClassification"),d(FW,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(TW,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(MW,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(EW,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(CW,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(wW,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(AW,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(LW,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(yW,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(xW,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d($W,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(kW,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(SW,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(RW,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(PW,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(BW,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(IW,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(NW,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(qW,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(jW,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(DW,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(GW,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(OW,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(VW,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(XW,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(zW,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(WW,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(QW,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(HW,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(UW,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($F,"id","transformers.AutoModelForQuestionAnswering"),d($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($F,"href","#transformers.AutoModelForQuestionAnswering"),d(ud,"class","relative group"),d(JW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KW,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZW,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_18361/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_18361/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(gQ,"href","/docs/transformers/pr_18361/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_18361/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_18361/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_18361/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_18361/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_18361/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_18361/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_18361/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_18361/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_18361/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_18361/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(DQ,"href","/docs/transformers/pr_18361/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M6,"id","transformers.AutoModelForTableQuestionAnswering"),d(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M6,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Fd,"class","relative group"),d(GQ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OQ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VQ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XQ,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L6,"id","transformers.AutoModelForImageClassification"),d(L6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L6,"href","#transformers.AutoModelForImageClassification"),d(Ed,"class","relative group"),d(zQ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WQ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HQ,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitForImageClassification"),d(UQ,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(JQ,"href","/docs/transformers/pr_18361/en/model_doc/cvt#transformers.CvtForImageClassification"),d(YQ,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(KQ,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTForImageClassification"),d(ZQ,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(eH,"href","/docs/transformers/pr_18361/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(oH,"href","/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitForImageClassification"),d(rH,"href","/docs/transformers/pr_18361/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(tH,"href","/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(aH,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(nH,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(sH,"href","/docs/transformers/pr_18361/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(lH,"href","/docs/transformers/pr_18361/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(iH,"href","/docs/transformers/pr_18361/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(dH,"href","/docs/transformers/pr_18361/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(cH,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(fH,"href","/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinForImageClassification"),d(mH,"href","/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(gH,"href","/docs/transformers/pr_18361/en/model_doc/van#transformers.VanForImageClassification"),d(hH,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z6,"id","transformers.AutoModelForVision2Seq"),d(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z6,"href","#transformers.AutoModelForVision2Seq"),d(Ad,"class","relative group"),d(pH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_H,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bH,"href","/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J6,"id","transformers.AutoModelForVisualQuestionAnswering"),d(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J6,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(xd,"class","relative group"),d(vH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MH,"href","/docs/transformers/pr_18361/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oT,"id","transformers.AutoModelForAudioClassification"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.AutoModelForAudioClassification"),d(Sd,"class","relative group"),d(EH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AH,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(LH,"href","/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(yH,"href","/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(xH,"href","/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d($H,"href","/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(kH,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(SH,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(RH,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(PH,"href","/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hT,"id","transformers.AutoModelForAudioFrameClassification"),d(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Bd,"class","relative group"),d(BH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qH,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(jH,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(DH,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(GH,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(OH,"href","/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ET,"id","transformers.AutoModelForCTC"),d(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ET,"href","#transformers.AutoModelForCTC"),d(qd,"class","relative group"),d(VH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zH,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WH,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(QH,"href","/docs/transformers/pr_18361/en/model_doc/hubert#transformers.HubertForCTC"),d(HH,"href","/docs/transformers/pr_18361/en/model_doc/mctct#transformers.MCTCTForCTC"),d(UH,"href","/docs/transformers/pr_18361/en/model_doc/sew#transformers.SEWForCTC"),d(JH,"href","/docs/transformers/pr_18361/en/model_doc/sew-d#transformers.SEWDForCTC"),d(YH,"href","/docs/transformers/pr_18361/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(KH,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(ZH,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(eU,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(oU,"href","/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Gd,"class","relative group"),d(rU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nU,"href","/docs/transformers/pr_18361/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(sU,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VT,"id","transformers.AutoModelForAudioXVector"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.AutoModelForAudioXVector"),d(Xd,"class","relative group"),d(lU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cU,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(fU,"href","/docs/transformers/pr_18361/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(mU,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(gU,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(hU,"href","/docs/transformers/pr_18361/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KT,"id","transformers.AutoModelForMaskedImageModeling"),d(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Qd,"class","relative group"),d(pU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_U,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bU,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(vU,"href","/docs/transformers/pr_18361/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(FU,"href","/docs/transformers/pr_18361/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(TU,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s8,"id","transformers.AutoModelForObjectDetection"),d(s8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s8,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(MU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wU,"href","/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrForObjectDetection"),d(AU,"href","/docs/transformers/pr_18361/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m8,"id","transformers.AutoModelForImageSegmentation"),d(m8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m8,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(LU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($U,"href","/docs/transformers/pr_18361/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u8,"id","transformers.AutoModelForSemanticSegmentation"),d(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u8,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(kU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PU,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(BU,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(IU,"href","/docs/transformers/pr_18361/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(NU,"href","/docs/transformers/pr_18361/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(qU,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A8,"id","transformers.AutoModelForInstanceSegmentation"),d(A8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A8,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(jU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OU,"href","/docs/transformers/pr_18361/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k8,"id","transformers.TFAutoModel"),d(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k8,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(VU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zU,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WU,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertModel"),d(QU,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.TFBartModel"),d(HU,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertModel"),d(UU,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(JU,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(YU,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertModel"),d(KU,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.TFCLIPModel"),d(ZU,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertModel"),d(eJ,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.TFConvNextModel"),d(oJ,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLModel"),d(rJ,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(tJ,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaModel"),d(aJ,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(nJ,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.TFDeiTModel"),d(sJ,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(lJ,"href","/docs/transformers/pr_18361/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(iJ,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraModel"),d(dJ,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(cJ,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelModel"),d(fJ,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(mJ,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2Model"),d(gJ,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJModel"),d(hJ,"href","/docs/transformers/pr_18361/en/model_doc/hubert#transformers.TFHubertModel"),d(pJ,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(_J,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.TFLEDModel"),d(uJ,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerModel"),d(bJ,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.TFLxmertModel"),d(vJ,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.TFMarianModel"),d(FJ,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.TFMBartModel"),d(TJ,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(MJ,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetModel"),d(EJ,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.TFMT5Model"),d(CJ,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(wJ,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.TFOPTModel"),d(AJ,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.TFPegasusModel"),d(LJ,"href","/docs/transformers/pr_18361/en/model_doc/regnet#transformers.TFRegNetModel"),d(yJ,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertModel"),d(xJ,"href","/docs/transformers/pr_18361/en/model_doc/resnet#transformers.TFResNetModel"),d($J,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaModel"),d(kJ,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerModel"),d(SJ,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.TFSegformerModel"),d(RJ,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(PJ,"href","/docs/transformers/pr_18361/en/model_doc/swin#transformers.TFSwinModel"),d(BJ,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.TFT5Model"),d(IJ,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasModel"),d(NJ,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(qJ,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.TFViTModel"),d(jJ,"href","/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(DJ,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(GJ,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMModel"),d(OJ,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(VJ,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($M,"id","transformers.TFAutoModelForPreTraining"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d(XJ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zJ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WJ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QJ,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(HJ,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(UJ,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForPreTraining"),d(JJ,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(YJ,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(KJ,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(ZJ,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(eY,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(oY,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(rY,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(tY,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aY,"href","/docs/transformers/pr_18361/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(nY,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(sY,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lY,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(iY,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dY,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(cY,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fY,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(mY,"href","/docs/transformers/pr_18361/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(gY,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hY,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(pY,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r4,"id","transformers.TFAutoModelForCausalLM"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(_Y,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vY,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(FY,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(TY,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MY,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EY,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(CY,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(wY,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(AY,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(LY,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(yY,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(xY,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($Y,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kY,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b4,"id","transformers.TFAutoModelForImageClassification"),d(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b4,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(SY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BY,"href","/docs/transformers/pr_18361/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(IY,"href","/docs/transformers/pr_18361/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(NY,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(qY,"href","/docs/transformers/pr_18361/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(jY,"href","/docs/transformers/pr_18361/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(DY,"href","/docs/transformers/pr_18361/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(GY,"href","/docs/transformers/pr_18361/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(OY,"href","/docs/transformers/pr_18361/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(VY,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y4,"id","transformers.TFAutoModelForMaskedLM"),d(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y4,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(XY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WY,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QY,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(HY,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(UY,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(JY,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(YY,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(KY,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(ZY,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eK,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(oK,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rK,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(tK,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aK,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(nK,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(sK,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lK,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(iK,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dK,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(cK,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fK,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(mK,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(gK,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hK,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pK,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_K,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(uK,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(bK,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(vK,"href","/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(FK,"href","/docs/transformers/pr_18361/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(TK,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.TFMarianMTModel"),d(MK,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(EK,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(CK,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(wK,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cE,"id","transformers.TFAutoModelForSequenceClassification"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(AK,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LK,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yK,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xK,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d($K,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(kK,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(SK,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(RK,"href","/docs/transformers/pr_18361/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(PK,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BK,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(IK,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(NK,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(qK,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(jK,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(DK,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(GK,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(OK,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(VK,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(XK,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(zK,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(WK,"href","/docs/transformers/pr_18361/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(QK,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(HK,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(UK,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(JK,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(YK,"href","/docs/transformers/pr_18361/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(KK,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(ZK,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(eZ,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jE,"id","transformers.TFAutoModelForMultipleChoice"),d(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jE,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(oZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aZ,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(nZ,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(sZ,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(lZ,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(iZ,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(dZ,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(cZ,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(fZ,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(mZ,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(gZ,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(hZ,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(pZ,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(_Z,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(uZ,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(bZ,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(vZ,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(FZ,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nC,"id","transformers.TFAutoModelForNextSentencePrediction"),d(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nC,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(TZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CZ,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(wZ,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cC,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(AZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xZ,"href","/docs/transformers/pr_18361/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hC,"id","transformers.TFAutoModelForTokenClassification"),d(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hC,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d($Z,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RZ,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(PZ,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(BZ,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(IZ,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(NZ,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(qZ,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(jZ,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(DZ,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(GZ,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(OZ,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(VZ,"href","/docs/transformers/pr_18361/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(XZ,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(zZ,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(WZ,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(QZ,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(HZ,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(UZ,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(JZ,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(YZ,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(KZ,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NC,"id","transformers.TFAutoModelForQuestionAnswering"),d(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NC,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(ZZ,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ree,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(tee,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(aee,"href","/docs/transformers/pr_18361/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(nee,"href","/docs/transformers/pr_18361/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(see,"href","/docs/transformers/pr_18361/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(lee,"href","/docs/transformers/pr_18361/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(iee,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(dee,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(cee,"href","/docs/transformers/pr_18361/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(fee,"href","/docs/transformers/pr_18361/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(mee,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(gee,"href","/docs/transformers/pr_18361/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(hee,"href","/docs/transformers/pr_18361/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(pee,"href","/docs/transformers/pr_18361/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(_ee,"href","/docs/transformers/pr_18361/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(uee,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(bee,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(vee,"href","/docs/transformers/pr_18361/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(Fee,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(Tee,"href","/docs/transformers/pr_18361/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s5,"id","transformers.TFAutoModelForVision2Seq"),d(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s5,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(Mee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Eee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wee,"href","/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(Aee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xee,"href","/docs/transformers/pr_18361/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h5,"id","transformers.FlaxAutoModel"),d(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h5,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d($ee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kee,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(See,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ree,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Pee,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartModel"),d(Bee,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.FlaxBeitModel"),d(Iee,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertModel"),d(Nee,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(qee,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(jee,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Dee,"href","/docs/transformers/pr_18361/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Gee,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Oee,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraModel"),d(Vee,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Xee,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(zee,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(Wee,"href","/docs/transformers/pr_18361/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Qee,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.FlaxMarianModel"),d(Hee,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartModel"),d(Uee,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.FlaxMT5Model"),d(Jee,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.FlaxOPTModel"),d(Yee,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(Kee,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Zee,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(eoe,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.FlaxT5Model"),d(ooe,"href","/docs/transformers/pr_18361/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(roe,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.FlaxViTModel"),d(toe,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(aoe,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(noe,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X5,"id","transformers.FlaxAutoModelForCausalLM"),d(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X5,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(soe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(loe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ioe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(doe,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(coe,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(foe,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(moe,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(goe,"href","/docs/transformers/pr_18361/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(hoe,"href","/docs/transformers/pr_18361/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(poe,"href","/docs/transformers/pr_18361/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(_oe,"href","/docs/transformers/pr_18361/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(uoe,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(boe,"href","/docs/transformers/pr_18361/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t0,"id","transformers.FlaxAutoModelForPreTraining"),d(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t0,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(voe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Foe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Toe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Moe,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(Eoe,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Coe,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(woe,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(Aoe,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Loe,"href","/docs/transformers/pr_18361/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(yoe,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xoe,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d($oe,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(koe,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Soe,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Roe,"href","/docs/transformers/pr_18361/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Poe,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v0,"id","transformers.FlaxAutoModelForMaskedLM"),d(v0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v0,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(Boe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ioe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Noe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qoe,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(joe,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Doe,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Goe,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Ooe,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Voe,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Xoe,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zoe,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Woe,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Qoe,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(Hoe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uoe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Joe,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yoe,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Koe,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Zoe,"href","/docs/transformers/pr_18361/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(ere,"href","/docs/transformers/pr_18361/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(ore,"href","/docs/transformers/pr_18361/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(rre,"href","/docs/transformers/pr_18361/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(tre,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(are,"href","/docs/transformers/pr_18361/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(nre,"href","/docs/transformers/pr_18361/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(sre,"href","/docs/transformers/pr_18361/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z0,"id","transformers.FlaxAutoModelForSequenceClassification"),d(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z0,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(lre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ire,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cre,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(fre,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(mre,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(gre,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(hre,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(pre,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(_re,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(ure,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(bre,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(vre,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aw,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d(Fre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ere,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Cre,"href","/docs/transformers/pr_18361/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(wre,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Are,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Lre,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(yre,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(xre,"href","/docs/transformers/pr_18361/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d($re,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(kre,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Sre,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uw,"id","transformers.FlaxAutoModelForTokenClassification"),d(uw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uw,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(Rre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ire,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Nre,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(qre,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(jre,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Dre,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Gre,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Ore,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Vre,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yw,"id","transformers.FlaxAutoModelForMultipleChoice"),d(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yw,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(Xre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wre,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qre,"href","/docs/transformers/pr_18361/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Hre,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Ure,"href","/docs/transformers/pr_18361/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Jre,"href","/docs/transformers/pr_18361/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Yre,"href","/docs/transformers/pr_18361/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Kre,"href","/docs/transformers/pr_18361/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Zre,"href","/docs/transformers/pr_18361/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(ete,"href","/docs/transformers/pr_18361/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(ote,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ate,"href","/docs/transformers/pr_18361/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vw,"id","transformers.FlaxAutoModelForImageClassification"),d(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vw,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(nte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ste,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ite,"href","/docs/transformers/pr_18361/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(dte,"href","/docs/transformers/pr_18361/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hw,"id","transformers.FlaxAutoModelForVision2Seq"),d(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hw,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(cte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mte,"href","/docs/transformers/pr_18361/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gte,"href","/docs/transformers/pr_18361/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,wo),e(wo,$i),b(f,If,u),b(f,lt,u),e(lt,ki),e(lt,Si),e(Si,uL),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ri),e(Qe,Bn),e(Bn,bL),e(Qe,In),e(Qe,Nn),e(Nn,vL),e(Qe,Pi),e(Qe,qn),e(qn,FL),e(Qe,Bi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,eR),e(Ae,Ii),e(Ii,oR),e(Ae,rR),b(f,Ao,u),b(f,Ra,u),e(Ra,tR),e(Ra,jf),e(jf,aR),e(Ra,CUe),b(f,dze,u),b(f,Ni,u),e(Ni,Df),e(Df,lne),M(TL,lne,null),e(Ni,wUe),e(Ni,ine),e(ine,AUe),b(f,cze,u),b(f,jn,u),e(jn,LUe),e(jn,dne),e(dne,yUe),e(jn,xUe),e(jn,cne),e(cne,$Ue),e(jn,kUe),b(f,fze,u),M(ML,f,u),b(f,mze,u),b(f,nR,u),e(nR,SUe),b(f,gze,u),M(Gf,f,u),b(f,hze,u),b(f,qi,u),e(qi,Of),e(Of,fne),M(EL,fne,null),e(qi,RUe),e(qi,mne),e(mne,PUe),b(f,pze,u),b(f,Lo,u),M(CL,Lo,null),e(Lo,BUe),e(Lo,wL),e(wL,IUe),e(wL,sR),e(sR,NUe),e(wL,qUe),e(Lo,jUe),e(Lo,AL),e(AL,DUe),e(AL,gne),e(gne,GUe),e(AL,OUe),e(Lo,VUe),e(Lo,yr),M(LL,yr,null),e(yr,XUe),e(yr,hne),e(hne,zUe),e(yr,WUe),e(yr,ji),e(ji,QUe),e(ji,pne),e(pne,HUe),e(ji,UUe),e(ji,_ne),e(_ne,JUe),e(ji,YUe),e(yr,KUe),e(yr,A),e(A,Vf),e(Vf,une),e(une,ZUe),e(Vf,eJe),e(Vf,lR),e(lR,oJe),e(Vf,rJe),e(A,tJe),e(A,Xf),e(Xf,bne),e(bne,aJe),e(Xf,nJe),e(Xf,iR),e(iR,sJe),e(Xf,lJe),e(A,iJe),e(A,zf),e(zf,vne),e(vne,dJe),e(zf,cJe),e(zf,dR),e(dR,fJe),e(zf,mJe),e(A,gJe),e(A,Wf),e(Wf,Fne),e(Fne,hJe),e(Wf,pJe),e(Wf,cR),e(cR,_Je),e(Wf,uJe),e(A,bJe),e(A,Qf),e(Qf,Tne),e(Tne,vJe),e(Qf,FJe),e(Qf,fR),e(fR,TJe),e(Qf,MJe),e(A,EJe),e(A,Hf),e(Hf,Mne),e(Mne,CJe),e(Hf,wJe),e(Hf,mR),e(mR,AJe),e(Hf,LJe),e(A,yJe),e(A,Uf),e(Uf,Ene),e(Ene,xJe),e(Uf,$Je),e(Uf,gR),e(gR,kJe),e(Uf,SJe),e(A,RJe),e(A,Jf),e(Jf,Cne),e(Cne,PJe),e(Jf,BJe),e(Jf,hR),e(hR,IJe),e(Jf,NJe),e(A,qJe),e(A,Yf),e(Yf,wne),e(wne,jJe),e(Yf,DJe),e(Yf,pR),e(pR,GJe),e(Yf,OJe),e(A,VJe),e(A,Kf),e(Kf,Ane),e(Ane,XJe),e(Kf,zJe),e(Kf,_R),e(_R,WJe),e(Kf,QJe),e(A,HJe),e(A,Zf),e(Zf,Lne),e(Lne,UJe),e(Zf,JJe),e(Zf,uR),e(uR,YJe),e(Zf,KJe),e(A,ZJe),e(A,em),e(em,yne),e(yne,eYe),e(em,oYe),e(em,bR),e(bR,rYe),e(em,tYe),e(A,aYe),e(A,om),e(om,xne),e(xne,nYe),e(om,sYe),e(om,vR),e(vR,lYe),e(om,iYe),e(A,dYe),e(A,rm),e(rm,$ne),e($ne,cYe),e(rm,fYe),e(rm,FR),e(FR,mYe),e(rm,gYe),e(A,hYe),e(A,tm),e(tm,kne),e(kne,pYe),e(tm,_Ye),e(tm,TR),e(TR,uYe),e(tm,bYe),e(A,vYe),e(A,am),e(am,Sne),e(Sne,FYe),e(am,TYe),e(am,MR),e(MR,MYe),e(am,EYe),e(A,CYe),e(A,nm),e(nm,Rne),e(Rne,wYe),e(nm,AYe),e(nm,ER),e(ER,LYe),e(nm,yYe),e(A,xYe),e(A,sm),e(sm,Pne),e(Pne,$Ye),e(sm,kYe),e(sm,CR),e(CR,SYe),e(sm,RYe),e(A,PYe),e(A,lm),e(lm,Bne),e(Bne,BYe),e(lm,IYe),e(lm,wR),e(wR,NYe),e(lm,qYe),e(A,jYe),e(A,im),e(im,Ine),e(Ine,DYe),e(im,GYe),e(im,AR),e(AR,OYe),e(im,VYe),e(A,XYe),e(A,dm),e(dm,Nne),e(Nne,zYe),e(dm,WYe),e(dm,LR),e(LR,QYe),e(dm,HYe),e(A,UYe),e(A,cm),e(cm,qne),e(qne,JYe),e(cm,YYe),e(cm,yR),e(yR,KYe),e(cm,ZYe),e(A,eKe),e(A,fm),e(fm,jne),e(jne,oKe),e(fm,rKe),e(fm,xR),e(xR,tKe),e(fm,aKe),e(A,nKe),e(A,mm),e(mm,Dne),e(Dne,sKe),e(mm,lKe),e(mm,$R),e($R,iKe),e(mm,dKe),e(A,cKe),e(A,gm),e(gm,Gne),e(Gne,fKe),e(gm,mKe),e(gm,kR),e(kR,gKe),e(gm,hKe),e(A,pKe),e(A,hm),e(hm,One),e(One,_Ke),e(hm,uKe),e(hm,SR),e(SR,bKe),e(hm,vKe),e(A,FKe),e(A,pm),e(pm,Vne),e(Vne,TKe),e(pm,MKe),e(pm,RR),e(RR,EKe),e(pm,CKe),e(A,wKe),e(A,_m),e(_m,Xne),e(Xne,AKe),e(_m,LKe),e(_m,PR),e(PR,yKe),e(_m,xKe),e(A,$Ke),e(A,um),e(um,zne),e(zne,kKe),e(um,SKe),e(um,BR),e(BR,RKe),e(um,PKe),e(A,BKe),e(A,bm),e(bm,Wne),e(Wne,IKe),e(bm,NKe),e(bm,IR),e(IR,qKe),e(bm,jKe),e(A,DKe),e(A,vm),e(vm,Qne),e(Qne,GKe),e(vm,OKe),e(vm,NR),e(NR,VKe),e(vm,XKe),e(A,zKe),e(A,Fm),e(Fm,Hne),e(Hne,WKe),e(Fm,QKe),e(Fm,qR),e(qR,HKe),e(Fm,UKe),e(A,JKe),e(A,Tm),e(Tm,Une),e(Une,YKe),e(Tm,KKe),e(Tm,jR),e(jR,ZKe),e(Tm,eZe),e(A,oZe),e(A,Mm),e(Mm,Jne),e(Jne,rZe),e(Mm,tZe),e(Mm,DR),e(DR,aZe),e(Mm,nZe),e(A,sZe),e(A,Em),e(Em,Yne),e(Yne,lZe),e(Em,iZe),e(Em,GR),e(GR,dZe),e(Em,cZe),e(A,fZe),e(A,Cm),e(Cm,Kne),e(Kne,mZe),e(Cm,gZe),e(Cm,OR),e(OR,hZe),e(Cm,pZe),e(A,_Ze),e(A,wm),e(wm,Zne),e(Zne,uZe),e(wm,bZe),e(wm,VR),e(VR,vZe),e(wm,FZe),e(A,TZe),e(A,Am),e(Am,ese),e(ese,MZe),e(Am,EZe),e(Am,XR),e(XR,CZe),e(Am,wZe),e(A,AZe),e(A,Lm),e(Lm,ose),e(ose,LZe),e(Lm,yZe),e(Lm,zR),e(zR,xZe),e(Lm,$Ze),e(A,kZe),e(A,ym),e(ym,rse),e(rse,SZe),e(ym,RZe),e(ym,WR),e(WR,PZe),e(ym,BZe),e(A,IZe),e(A,xm),e(xm,tse),e(tse,NZe),e(xm,qZe),e(xm,QR),e(QR,jZe),e(xm,DZe),e(A,GZe),e(A,$m),e($m,ase),e(ase,OZe),e($m,VZe),e($m,HR),e(HR,XZe),e($m,zZe),e(A,WZe),e(A,km),e(km,nse),e(nse,QZe),e(km,HZe),e(km,UR),e(UR,UZe),e(km,JZe),e(A,YZe),e(A,Sm),e(Sm,sse),e(sse,KZe),e(Sm,ZZe),e(Sm,JR),e(JR,eeo),e(Sm,oeo),e(A,reo),e(A,Rm),e(Rm,lse),e(lse,teo),e(Rm,aeo),e(Rm,YR),e(YR,neo),e(Rm,seo),e(A,leo),e(A,Pm),e(Pm,ise),e(ise,ieo),e(Pm,deo),e(Pm,KR),e(KR,ceo),e(Pm,feo),e(A,meo),e(A,Bm),e(Bm,dse),e(dse,geo),e(Bm,heo),e(Bm,ZR),e(ZR,peo),e(Bm,_eo),e(A,ueo),e(A,Im),e(Im,cse),e(cse,beo),e(Im,veo),e(Im,eP),e(eP,Feo),e(Im,Teo),e(A,Meo),e(A,Nm),e(Nm,fse),e(fse,Eeo),e(Nm,Ceo),e(Nm,oP),e(oP,weo),e(Nm,Aeo),e(A,Leo),e(A,qm),e(qm,mse),e(mse,yeo),e(qm,xeo),e(qm,rP),e(rP,$eo),e(qm,keo),e(A,Seo),e(A,jm),e(jm,gse),e(gse,Reo),e(jm,Peo),e(jm,tP),e(tP,Beo),e(jm,Ieo),e(A,Neo),e(A,Dm),e(Dm,hse),e(hse,qeo),e(Dm,jeo),e(Dm,aP),e(aP,Deo),e(Dm,Geo),e(A,Oeo),e(A,Gm),e(Gm,pse),e(pse,Veo),e(Gm,Xeo),e(Gm,nP),e(nP,zeo),e(Gm,Weo),e(A,Qeo),e(A,Om),e(Om,_se),e(_se,Heo),e(Om,Ueo),e(Om,sP),e(sP,Jeo),e(Om,Yeo),e(A,Keo),e(A,Vm),e(Vm,use),e(use,Zeo),e(Vm,eoo),e(Vm,lP),e(lP,ooo),e(Vm,roo),e(A,too),e(A,Xm),e(Xm,bse),e(bse,aoo),e(Xm,noo),e(Xm,iP),e(iP,soo),e(Xm,loo),e(A,ioo),e(A,zm),e(zm,vse),e(vse,doo),e(zm,coo),e(zm,dP),e(dP,foo),e(zm,moo),e(A,goo),e(A,Wm),e(Wm,Fse),e(Fse,hoo),e(Wm,poo),e(Wm,cP),e(cP,_oo),e(Wm,uoo),e(A,boo),e(A,Qm),e(Qm,Tse),e(Tse,voo),e(Qm,Foo),e(Qm,fP),e(fP,Too),e(Qm,Moo),e(A,Eoo),e(A,Hm),e(Hm,Mse),e(Mse,Coo),e(Hm,woo),e(Hm,mP),e(mP,Aoo),e(Hm,Loo),e(A,yoo),e(A,Um),e(Um,Ese),e(Ese,xoo),e(Um,$oo),e(Um,gP),e(gP,koo),e(Um,Soo),e(A,Roo),e(A,Jm),e(Jm,Cse),e(Cse,Poo),e(Jm,Boo),e(Jm,hP),e(hP,Ioo),e(Jm,Noo),e(A,qoo),e(A,Ym),e(Ym,wse),e(wse,joo),e(Ym,Doo),e(Ym,pP),e(pP,Goo),e(Ym,Ooo),e(A,Voo),e(A,Km),e(Km,Ase),e(Ase,Xoo),e(Km,zoo),e(Km,_P),e(_P,Woo),e(Km,Qoo),e(A,Hoo),e(A,Zm),e(Zm,Lse),e(Lse,Uoo),e(Zm,Joo),e(Zm,uP),e(uP,Yoo),e(Zm,Koo),e(A,Zoo),e(A,eg),e(eg,yse),e(yse,ero),e(eg,oro),e(eg,bP),e(bP,rro),e(eg,tro),e(A,aro),e(A,og),e(og,xse),e(xse,nro),e(og,sro),e(og,vP),e(vP,lro),e(og,iro),e(A,dro),e(A,rg),e(rg,$se),e($se,cro),e(rg,fro),e(rg,FP),e(FP,mro),e(rg,gro),e(A,hro),e(A,tg),e(tg,kse),e(kse,pro),e(tg,_ro),e(tg,TP),e(TP,uro),e(tg,bro),e(A,vro),e(A,ag),e(ag,Sse),e(Sse,Fro),e(ag,Tro),e(ag,MP),e(MP,Mro),e(ag,Ero),e(A,Cro),e(A,ng),e(ng,Rse),e(Rse,wro),e(ng,Aro),e(ng,EP),e(EP,Lro),e(ng,yro),e(A,xro),e(A,sg),e(sg,Pse),e(Pse,$ro),e(sg,kro),e(sg,CP),e(CP,Sro),e(sg,Rro),e(A,Pro),e(A,lg),e(lg,Bse),e(Bse,Bro),e(lg,Iro),e(lg,wP),e(wP,Nro),e(lg,qro),e(A,jro),e(A,ig),e(ig,Ise),e(Ise,Dro),e(ig,Gro),e(ig,AP),e(AP,Oro),e(ig,Vro),e(A,Xro),e(A,dg),e(dg,Nse),e(Nse,zro),e(dg,Wro),e(dg,LP),e(LP,Qro),e(dg,Hro),e(A,Uro),e(A,cg),e(cg,qse),e(qse,Jro),e(cg,Yro),e(cg,yP),e(yP,Kro),e(cg,Zro),e(A,eto),e(A,fg),e(fg,jse),e(jse,oto),e(fg,rto),e(fg,xP),e(xP,tto),e(fg,ato),e(A,nto),e(A,mg),e(mg,Dse),e(Dse,sto),e(mg,lto),e(mg,$P),e($P,ito),e(mg,dto),e(A,cto),e(A,gg),e(gg,Gse),e(Gse,fto),e(gg,mto),e(gg,kP),e(kP,gto),e(gg,hto),e(A,pto),e(A,hg),e(hg,Ose),e(Ose,_to),e(hg,uto),e(hg,SP),e(SP,bto),e(hg,vto),e(A,Fto),e(A,pg),e(pg,Vse),e(Vse,Tto),e(pg,Mto),e(pg,RP),e(RP,Eto),e(pg,Cto),e(A,wto),e(A,_g),e(_g,Xse),e(Xse,Ato),e(_g,Lto),e(_g,PP),e(PP,yto),e(_g,xto),e(A,$to),e(A,ug),e(ug,zse),e(zse,kto),e(ug,Sto),e(ug,BP),e(BP,Rto),e(ug,Pto),e(A,Bto),e(A,bg),e(bg,Wse),e(Wse,Ito),e(bg,Nto),e(bg,IP),e(IP,qto),e(bg,jto),e(A,Dto),e(A,vg),e(vg,Qse),e(Qse,Gto),e(vg,Oto),e(vg,NP),e(NP,Vto),e(vg,Xto),e(A,zto),e(A,Fg),e(Fg,Hse),e(Hse,Wto),e(Fg,Qto),e(Fg,qP),e(qP,Hto),e(Fg,Uto),e(A,Jto),e(A,Tg),e(Tg,Use),e(Use,Yto),e(Tg,Kto),e(Tg,jP),e(jP,Zto),e(Tg,eao),e(A,oao),e(A,Mg),e(Mg,Jse),e(Jse,rao),e(Mg,tao),e(Mg,DP),e(DP,aao),e(Mg,nao),e(A,sao),e(A,Eg),e(Eg,Yse),e(Yse,lao),e(Eg,iao),e(Eg,GP),e(GP,dao),e(Eg,cao),e(A,fao),e(A,Cg),e(Cg,Kse),e(Kse,mao),e(Cg,gao),e(Cg,OP),e(OP,hao),e(Cg,pao),e(A,_ao),e(A,wg),e(wg,Zse),e(Zse,uao),e(wg,bao),e(wg,VP),e(VP,vao),e(wg,Fao),e(A,Tao),e(A,Ag),e(Ag,ele),e(ele,Mao),e(Ag,Eao),e(Ag,XP),e(XP,Cao),e(Ag,wao),e(A,Aao),e(A,Lg),e(Lg,ole),e(ole,Lao),e(Lg,yao),e(Lg,zP),e(zP,xao),e(Lg,$ao),e(A,kao),e(A,yg),e(yg,rle),e(rle,Sao),e(yg,Rao),e(yg,WP),e(WP,Pao),e(yg,Bao),e(A,Iao),e(A,xg),e(xg,tle),e(tle,Nao),e(xg,qao),e(xg,QP),e(QP,jao),e(xg,Dao),e(A,Gao),e(A,$g),e($g,ale),e(ale,Oao),e($g,Vao),e($g,HP),e(HP,Xao),e($g,zao),e(A,Wao),e(A,kg),e(kg,nle),e(nle,Qao),e(kg,Hao),e(kg,UP),e(UP,Uao),e(kg,Jao),e(A,Yao),e(A,Sg),e(Sg,sle),e(sle,Kao),e(Sg,Zao),e(Sg,JP),e(JP,eno),e(Sg,ono),e(A,rno),e(A,Rg),e(Rg,lle),e(lle,tno),e(Rg,ano),e(Rg,YP),e(YP,nno),e(Rg,sno),e(A,lno),e(A,Pg),e(Pg,ile),e(ile,ino),e(Pg,dno),e(Pg,KP),e(KP,cno),e(Pg,fno),e(A,mno),e(A,Bg),e(Bg,dle),e(dle,gno),e(Bg,hno),e(Bg,ZP),e(ZP,pno),e(Bg,_no),e(A,uno),e(A,Ig),e(Ig,cle),e(cle,bno),e(Ig,vno),e(Ig,eB),e(eB,Fno),e(Ig,Tno),e(A,Mno),e(A,Ng),e(Ng,fle),e(fle,Eno),e(Ng,Cno),e(Ng,oB),e(oB,wno),e(Ng,Ano),e(A,Lno),e(A,qg),e(qg,mle),e(mle,yno),e(qg,xno),e(qg,rB),e(rB,$no),e(qg,kno),e(A,Sno),e(A,jg),e(jg,gle),e(gle,Rno),e(jg,Pno),e(jg,tB),e(tB,Bno),e(jg,Ino),e(A,Nno),e(A,Dg),e(Dg,hle),e(hle,qno),e(Dg,jno),e(Dg,aB),e(aB,Dno),e(Dg,Gno),e(A,Ono),e(A,Gg),e(Gg,ple),e(ple,Vno),e(Gg,Xno),e(Gg,nB),e(nB,zno),e(Gg,Wno),e(A,Qno),e(A,Og),e(Og,_le),e(_le,Hno),e(Og,Uno),e(Og,sB),e(sB,Jno),e(Og,Yno),e(A,Kno),e(A,Vg),e(Vg,ule),e(ule,Zno),e(Vg,eso),e(Vg,lB),e(lB,oso),e(Vg,rso),e(A,tso),e(A,Xg),e(Xg,ble),e(ble,aso),e(Xg,nso),e(Xg,iB),e(iB,sso),e(Xg,lso),e(A,iso),e(A,zg),e(zg,vle),e(vle,dso),e(zg,cso),e(zg,dB),e(dB,fso),e(zg,mso),e(A,gso),e(A,Wg),e(Wg,Fle),e(Fle,hso),e(Wg,pso),e(Wg,cB),e(cB,_so),e(Wg,uso),e(A,bso),e(A,Qg),e(Qg,Tle),e(Tle,vso),e(Qg,Fso),e(Qg,fB),e(fB,Tso),e(Qg,Mso),e(A,Eso),e(A,Hg),e(Hg,Mle),e(Mle,Cso),e(Hg,wso),e(Hg,mB),e(mB,Aso),e(Hg,Lso),e(A,yso),e(A,Ug),e(Ug,Ele),e(Ele,xso),e(Ug,$so),e(Ug,gB),e(gB,kso),e(Ug,Sso),e(A,Rso),e(A,Jg),e(Jg,Cle),e(Cle,Pso),e(Jg,Bso),e(Jg,hB),e(hB,Iso),e(Jg,Nso),e(A,qso),e(A,Yg),e(Yg,wle),e(wle,jso),e(Yg,Dso),e(Yg,pB),e(pB,Gso),e(Yg,Oso),e(A,Vso),e(A,Kg),e(Kg,Ale),e(Ale,Xso),e(Kg,zso),e(Kg,_B),e(_B,Wso),e(Kg,Qso),e(A,Hso),e(A,Zg),e(Zg,Lle),e(Lle,Uso),e(Zg,Jso),e(Zg,uB),e(uB,Yso),e(Zg,Kso),e(A,Zso),e(A,eh),e(eh,yle),e(yle,elo),e(eh,olo),e(eh,bB),e(bB,rlo),e(eh,tlo),e(yr,alo),M(oh,yr,null),e(Lo,nlo),e(Lo,rh),M(yL,rh,null),e(rh,slo),e(rh,xle),e(xle,llo),b(f,_ze,u),b(f,Di,u),e(Di,th),e(th,$le),M(xL,$le,null),e(Di,ilo),e(Di,kle),e(kle,dlo),b(f,uze,u),b(f,yo,u),M($L,yo,null),e(yo,clo),e(yo,kL),e(kL,flo),e(kL,vB),e(vB,mlo),e(kL,glo),e(yo,hlo),e(yo,SL),e(SL,plo),e(SL,Sle),e(Sle,_lo),e(SL,ulo),e(yo,blo),e(yo,xr),M(RL,xr,null),e(xr,vlo),e(xr,Rle),e(Rle,Flo),e(xr,Tlo),e(xr,Pa),e(Pa,Mlo),e(Pa,Ple),e(Ple,Elo),e(Pa,Clo),e(Pa,Ble),e(Ble,wlo),e(Pa,Alo),e(Pa,Ile),e(Ile,Llo),e(Pa,ylo),e(xr,xlo),e(xr,k),e(k,Dn),e(Dn,Nle),e(Nle,$lo),e(Dn,klo),e(Dn,FB),e(FB,Slo),e(Dn,Rlo),e(Dn,TB),e(TB,Plo),e(Dn,Blo),e(k,Ilo),e(k,Gn),e(Gn,qle),e(qle,Nlo),e(Gn,qlo),e(Gn,MB),e(MB,jlo),e(Gn,Dlo),e(Gn,EB),e(EB,Glo),e(Gn,Olo),e(k,Vlo),e(k,On),e(On,jle),e(jle,Xlo),e(On,zlo),e(On,CB),e(CB,Wlo),e(On,Qlo),e(On,wB),e(wB,Hlo),e(On,Ulo),e(k,Jlo),e(k,ah),e(ah,Dle),e(Dle,Ylo),e(ah,Klo),e(ah,AB),e(AB,Zlo),e(ah,eio),e(k,oio),e(k,Vn),e(Vn,Gle),e(Gle,rio),e(Vn,tio),e(Vn,LB),e(LB,aio),e(Vn,nio),e(Vn,yB),e(yB,sio),e(Vn,lio),e(k,iio),e(k,nh),e(nh,Ole),e(Ole,dio),e(nh,cio),e(nh,xB),e(xB,fio),e(nh,mio),e(k,gio),e(k,sh),e(sh,Vle),e(Vle,hio),e(sh,pio),e(sh,$B),e($B,_io),e(sh,uio),e(k,bio),e(k,lh),e(lh,Xle),e(Xle,vio),e(lh,Fio),e(lh,kB),e(kB,Tio),e(lh,Mio),e(k,Eio),e(k,Xn),e(Xn,zle),e(zle,Cio),e(Xn,wio),e(Xn,SB),e(SB,Aio),e(Xn,Lio),e(Xn,RB),e(RB,yio),e(Xn,xio),e(k,$io),e(k,zn),e(zn,Wle),e(Wle,kio),e(zn,Sio),e(zn,PB),e(PB,Rio),e(zn,Pio),e(zn,BB),e(BB,Bio),e(zn,Iio),e(k,Nio),e(k,Wn),e(Wn,Qle),e(Qle,qio),e(Wn,jio),e(Wn,IB),e(IB,Dio),e(Wn,Gio),e(Wn,NB),e(NB,Oio),e(Wn,Vio),e(k,Xio),e(k,ih),e(ih,Hle),e(Hle,zio),e(ih,Wio),e(ih,qB),e(qB,Qio),e(ih,Hio),e(k,Uio),e(k,dh),e(dh,Ule),e(Ule,Jio),e(dh,Yio),e(dh,jB),e(jB,Kio),e(dh,Zio),e(k,edo),e(k,ch),e(ch,Jle),e(Jle,odo),e(ch,rdo),e(ch,DB),e(DB,tdo),e(ch,ado),e(k,ndo),e(k,Qn),e(Qn,Yle),e(Yle,sdo),e(Qn,ldo),e(Qn,GB),e(GB,ido),e(Qn,ddo),e(Qn,OB),e(OB,cdo),e(Qn,fdo),e(k,mdo),e(k,fh),e(fh,Kle),e(Kle,gdo),e(fh,hdo),e(fh,VB),e(VB,pdo),e(fh,_do),e(k,udo),e(k,Hn),e(Hn,Zle),e(Zle,bdo),e(Hn,vdo),e(Hn,XB),e(XB,Fdo),e(Hn,Tdo),e(Hn,zB),e(zB,Mdo),e(Hn,Edo),e(k,Cdo),e(k,Un),e(Un,eie),e(eie,wdo),e(Un,Ado),e(Un,WB),e(WB,Ldo),e(Un,ydo),e(Un,QB),e(QB,xdo),e(Un,$do),e(k,kdo),e(k,Jn),e(Jn,oie),e(oie,Sdo),e(Jn,Rdo),e(Jn,HB),e(HB,Pdo),e(Jn,Bdo),e(Jn,UB),e(UB,Ido),e(Jn,Ndo),e(k,qdo),e(k,Yn),e(Yn,rie),e(rie,jdo),e(Yn,Ddo),e(Yn,JB),e(JB,Gdo),e(Yn,Odo),e(Yn,YB),e(YB,Vdo),e(Yn,Xdo),e(k,zdo),e(k,mh),e(mh,tie),e(tie,Wdo),e(mh,Qdo),e(mh,KB),e(KB,Hdo),e(mh,Udo),e(k,Jdo),e(k,Kn),e(Kn,aie),e(aie,Ydo),e(Kn,Kdo),e(Kn,ZB),e(ZB,Zdo),e(Kn,eco),e(Kn,eI),e(eI,oco),e(Kn,rco),e(k,tco),e(k,Zn),e(Zn,nie),e(nie,aco),e(Zn,nco),e(Zn,oI),e(oI,sco),e(Zn,lco),e(Zn,rI),e(rI,ico),e(Zn,dco),e(k,cco),e(k,es),e(es,sie),e(sie,fco),e(es,mco),e(es,tI),e(tI,gco),e(es,hco),e(es,aI),e(aI,pco),e(es,_co),e(k,uco),e(k,os),e(os,lie),e(lie,bco),e(os,vco),e(os,nI),e(nI,Fco),e(os,Tco),e(os,sI),e(sI,Mco),e(os,Eco),e(k,Cco),e(k,rs),e(rs,iie),e(iie,wco),e(rs,Aco),e(rs,lI),e(lI,Lco),e(rs,yco),e(rs,iI),e(iI,xco),e(rs,$co),e(k,kco),e(k,ts),e(ts,die),e(die,Sco),e(ts,Rco),e(ts,dI),e(dI,Pco),e(ts,Bco),e(ts,cI),e(cI,Ico),e(ts,Nco),e(k,qco),e(k,gh),e(gh,cie),e(cie,jco),e(gh,Dco),e(gh,fI),e(fI,Gco),e(gh,Oco),e(k,Vco),e(k,as),e(as,fie),e(fie,Xco),e(as,zco),e(as,mI),e(mI,Wco),e(as,Qco),e(as,gI),e(gI,Hco),e(as,Uco),e(k,Jco),e(k,hh),e(hh,mie),e(mie,Yco),e(hh,Kco),e(hh,hI),e(hI,Zco),e(hh,efo),e(k,ofo),e(k,ns),e(ns,gie),e(gie,rfo),e(ns,tfo),e(ns,pI),e(pI,afo),e(ns,nfo),e(ns,_I),e(_I,sfo),e(ns,lfo),e(k,ifo),e(k,ss),e(ss,hie),e(hie,dfo),e(ss,cfo),e(ss,uI),e(uI,ffo),e(ss,mfo),e(ss,bI),e(bI,gfo),e(ss,hfo),e(k,pfo),e(k,ls),e(ls,pie),e(pie,_fo),e(ls,ufo),e(ls,vI),e(vI,bfo),e(ls,vfo),e(ls,FI),e(FI,Ffo),e(ls,Tfo),e(k,Mfo),e(k,ph),e(ph,_ie),e(_ie,Efo),e(ph,Cfo),e(ph,TI),e(TI,wfo),e(ph,Afo),e(k,Lfo),e(k,is),e(is,uie),e(uie,yfo),e(is,xfo),e(is,MI),e(MI,$fo),e(is,kfo),e(is,EI),e(EI,Sfo),e(is,Rfo),e(k,Pfo),e(k,ds),e(ds,bie),e(bie,Bfo),e(ds,Ifo),e(ds,CI),e(CI,Nfo),e(ds,qfo),e(ds,wI),e(wI,jfo),e(ds,Dfo),e(k,Gfo),e(k,cs),e(cs,vie),e(vie,Ofo),e(cs,Vfo),e(cs,AI),e(AI,Xfo),e(cs,zfo),e(cs,LI),e(LI,Wfo),e(cs,Qfo),e(k,Hfo),e(k,_h),e(_h,Fie),e(Fie,Ufo),e(_h,Jfo),e(_h,yI),e(yI,Yfo),e(_h,Kfo),e(k,Zfo),e(k,fs),e(fs,Tie),e(Tie,emo),e(fs,omo),e(fs,xI),e(xI,rmo),e(fs,tmo),e(fs,$I),e($I,amo),e(fs,nmo),e(k,smo),e(k,ms),e(ms,Mie),e(Mie,lmo),e(ms,imo),e(ms,kI),e(kI,dmo),e(ms,cmo),e(ms,SI),e(SI,fmo),e(ms,mmo),e(k,gmo),e(k,gs),e(gs,Eie),e(Eie,hmo),e(gs,pmo),e(gs,RI),e(RI,_mo),e(gs,umo),e(gs,PI),e(PI,bmo),e(gs,vmo),e(k,Fmo),e(k,hs),e(hs,Cie),e(Cie,Tmo),e(hs,Mmo),e(hs,BI),e(BI,Emo),e(hs,Cmo),e(hs,II),e(II,wmo),e(hs,Amo),e(k,Lmo),e(k,ps),e(ps,wie),e(wie,ymo),e(ps,xmo),e(ps,NI),e(NI,$mo),e(ps,kmo),e(ps,qI),e(qI,Smo),e(ps,Rmo),e(k,Pmo),e(k,_s),e(_s,Aie),e(Aie,Bmo),e(_s,Imo),e(_s,jI),e(jI,Nmo),e(_s,qmo),e(_s,DI),e(DI,jmo),e(_s,Dmo),e(k,Gmo),e(k,us),e(us,Lie),e(Lie,Omo),e(us,Vmo),e(us,GI),e(GI,Xmo),e(us,zmo),e(us,OI),e(OI,Wmo),e(us,Qmo),e(k,Hmo),e(k,bs),e(bs,yie),e(yie,Umo),e(bs,Jmo),e(bs,VI),e(VI,Ymo),e(bs,Kmo),e(bs,XI),e(XI,Zmo),e(bs,ego),e(k,ogo),e(k,uh),e(uh,xie),e(xie,rgo),e(uh,tgo),e(uh,zI),e(zI,ago),e(uh,ngo),e(k,sgo),e(k,vs),e(vs,$ie),e($ie,lgo),e(vs,igo),e(vs,WI),e(WI,dgo),e(vs,cgo),e(vs,QI),e(QI,fgo),e(vs,mgo),e(k,ggo),e(k,bh),e(bh,kie),e(kie,hgo),e(bh,pgo),e(bh,HI),e(HI,_go),e(bh,ugo),e(k,bgo),e(k,vh),e(vh,Sie),e(Sie,vgo),e(vh,Fgo),e(vh,UI),e(UI,Tgo),e(vh,Mgo),e(k,Ego),e(k,Fs),e(Fs,Rie),e(Rie,Cgo),e(Fs,wgo),e(Fs,JI),e(JI,Ago),e(Fs,Lgo),e(Fs,YI),e(YI,ygo),e(Fs,xgo),e(k,$go),e(k,Ts),e(Ts,Pie),e(Pie,kgo),e(Ts,Sgo),e(Ts,KI),e(KI,Rgo),e(Ts,Pgo),e(Ts,ZI),e(ZI,Bgo),e(Ts,Igo),e(k,Ngo),e(k,Ms),e(Ms,Bie),e(Bie,qgo),e(Ms,jgo),e(Ms,eN),e(eN,Dgo),e(Ms,Ggo),e(Ms,oN),e(oN,Ogo),e(Ms,Vgo),e(k,Xgo),e(k,Fh),e(Fh,Iie),e(Iie,zgo),e(Fh,Wgo),e(Fh,rN),e(rN,Qgo),e(Fh,Hgo),e(k,Ugo),e(k,Es),e(Es,Nie),e(Nie,Jgo),e(Es,Ygo),e(Es,tN),e(tN,Kgo),e(Es,Zgo),e(Es,aN),e(aN,eho),e(Es,oho),e(k,rho),e(k,Cs),e(Cs,qie),e(qie,tho),e(Cs,aho),e(Cs,nN),e(nN,nho),e(Cs,sho),e(Cs,sN),e(sN,lho),e(Cs,iho),e(k,dho),e(k,ws),e(ws,jie),e(jie,cho),e(ws,fho),e(ws,lN),e(lN,mho),e(ws,gho),e(ws,iN),e(iN,hho),e(ws,pho),e(k,_ho),e(k,As),e(As,Die),e(Die,uho),e(As,bho),e(As,dN),e(dN,vho),e(As,Fho),e(As,cN),e(cN,Tho),e(As,Mho),e(k,Eho),e(k,Ls),e(Ls,Gie),e(Gie,Cho),e(Ls,who),e(Ls,fN),e(fN,Aho),e(Ls,Lho),e(Ls,mN),e(mN,yho),e(Ls,xho),e(k,$ho),e(k,ys),e(ys,Oie),e(Oie,kho),e(ys,Sho),e(ys,gN),e(gN,Rho),e(ys,Pho),e(ys,hN),e(hN,Bho),e(ys,Iho),e(k,Nho),e(k,xs),e(xs,Vie),e(Vie,qho),e(xs,jho),e(xs,pN),e(pN,Dho),e(xs,Gho),e(xs,_N),e(_N,Oho),e(xs,Vho),e(k,Xho),e(k,$s),e($s,Xie),e(Xie,zho),e($s,Who),e($s,uN),e(uN,Qho),e($s,Hho),e($s,bN),e(bN,Uho),e($s,Jho),e(k,Yho),e(k,Th),e(Th,zie),e(zie,Kho),e(Th,Zho),e(Th,vN),e(vN,epo),e(Th,opo),e(k,rpo),e(k,ks),e(ks,Wie),e(Wie,tpo),e(ks,apo),e(ks,FN),e(FN,npo),e(ks,spo),e(ks,TN),e(TN,lpo),e(ks,ipo),e(k,dpo),e(k,Ss),e(Ss,Qie),e(Qie,cpo),e(Ss,fpo),e(Ss,MN),e(MN,mpo),e(Ss,gpo),e(Ss,EN),e(EN,hpo),e(Ss,ppo),e(k,_po),e(k,Mh),e(Mh,Hie),e(Hie,upo),e(Mh,bpo),e(Mh,CN),e(CN,vpo),e(Mh,Fpo),e(k,Tpo),e(k,Eh),e(Eh,Uie),e(Uie,Mpo),e(Eh,Epo),e(Eh,wN),e(wN,Cpo),e(Eh,wpo),e(k,Apo),e(k,Ch),e(Ch,Jie),e(Jie,Lpo),e(Ch,ypo),e(Ch,AN),e(AN,xpo),e(Ch,$po),e(k,kpo),e(k,wh),e(wh,Yie),e(Yie,Spo),e(wh,Rpo),e(wh,LN),e(LN,Ppo),e(wh,Bpo),e(k,Ipo),e(k,Rs),e(Rs,Kie),e(Kie,Npo),e(Rs,qpo),e(Rs,yN),e(yN,jpo),e(Rs,Dpo),e(Rs,xN),e(xN,Gpo),e(Rs,Opo),e(k,Vpo),e(k,Ah),e(Ah,Zie),e(Zie,Xpo),e(Ah,zpo),e(Ah,$N),e($N,Wpo),e(Ah,Qpo),e(k,Hpo),e(k,Ps),e(Ps,ede),e(ede,Upo),e(Ps,Jpo),e(Ps,kN),e(kN,Ypo),e(Ps,Kpo),e(Ps,SN),e(SN,Zpo),e(Ps,e_o),e(k,o_o),e(k,Bs),e(Bs,ode),e(ode,r_o),e(Bs,t_o),e(Bs,RN),e(RN,a_o),e(Bs,n_o),e(Bs,PN),e(PN,s_o),e(Bs,l_o),e(k,i_o),e(k,Is),e(Is,rde),e(rde,d_o),e(Is,c_o),e(Is,BN),e(BN,f_o),e(Is,m_o),e(Is,IN),e(IN,g_o),e(Is,h_o),e(k,p_o),e(k,Ns),e(Ns,tde),e(tde,__o),e(Ns,u_o),e(Ns,NN),e(NN,b_o),e(Ns,v_o),e(Ns,qN),e(qN,F_o),e(Ns,T_o),e(k,M_o),e(k,qs),e(qs,ade),e(ade,E_o),e(qs,C_o),e(qs,jN),e(jN,w_o),e(qs,A_o),e(qs,DN),e(DN,L_o),e(qs,y_o),e(k,x_o),e(k,js),e(js,nde),e(nde,$_o),e(js,k_o),e(js,GN),e(GN,S_o),e(js,R_o),e(js,ON),e(ON,P_o),e(js,B_o),e(k,I_o),e(k,Lh),e(Lh,sde),e(sde,N_o),e(Lh,q_o),e(Lh,VN),e(VN,j_o),e(Lh,D_o),e(k,G_o),e(k,yh),e(yh,lde),e(lde,O_o),e(yh,V_o),e(yh,XN),e(XN,X_o),e(yh,z_o),e(k,W_o),e(k,Ds),e(Ds,ide),e(ide,Q_o),e(Ds,H_o),e(Ds,zN),e(zN,U_o),e(Ds,J_o),e(Ds,WN),e(WN,Y_o),e(Ds,K_o),e(k,Z_o),e(k,Gs),e(Gs,dde),e(dde,euo),e(Gs,ouo),e(Gs,QN),e(QN,ruo),e(Gs,tuo),e(Gs,HN),e(HN,auo),e(Gs,nuo),e(k,suo),e(k,Os),e(Os,cde),e(cde,luo),e(Os,iuo),e(Os,UN),e(UN,duo),e(Os,cuo),e(Os,JN),e(JN,fuo),e(Os,muo),e(k,guo),e(k,xh),e(xh,fde),e(fde,huo),e(xh,puo),e(xh,YN),e(YN,_uo),e(xh,uuo),e(k,buo),e(k,$h),e($h,mde),e(mde,vuo),e($h,Fuo),e($h,KN),e(KN,Tuo),e($h,Muo),e(k,Euo),e(k,kh),e(kh,gde),e(gde,Cuo),e(kh,wuo),e(kh,ZN),e(ZN,Auo),e(kh,Luo),e(k,yuo),e(k,Vs),e(Vs,hde),e(hde,xuo),e(Vs,$uo),e(Vs,eq),e(eq,kuo),e(Vs,Suo),e(Vs,oq),e(oq,Ruo),e(Vs,Puo),e(k,Buo),e(k,Xs),e(Xs,pde),e(pde,Iuo),e(Xs,Nuo),e(Xs,rq),e(rq,quo),e(Xs,juo),e(Xs,tq),e(tq,Duo),e(Xs,Guo),e(k,Ouo),e(k,Sh),e(Sh,_de),e(_de,Vuo),e(Sh,Xuo),e(Sh,aq),e(aq,zuo),e(Sh,Wuo),e(k,Quo),e(k,Rh),e(Rh,ude),e(ude,Huo),e(Rh,Uuo),e(Rh,nq),e(nq,Juo),e(Rh,Yuo),e(k,Kuo),e(k,Ph),e(Ph,bde),e(bde,Zuo),e(Ph,e1o),e(Ph,sq),e(sq,o1o),e(Ph,r1o),e(k,t1o),e(k,zs),e(zs,vde),e(vde,a1o),e(zs,n1o),e(zs,lq),e(lq,s1o),e(zs,l1o),e(zs,iq),e(iq,i1o),e(zs,d1o),e(k,c1o),e(k,Bh),e(Bh,Fde),e(Fde,f1o),e(Bh,m1o),e(Bh,dq),e(dq,g1o),e(Bh,h1o),e(k,p1o),e(k,Ih),e(Ih,Tde),e(Tde,_1o),e(Ih,u1o),e(Ih,cq),e(cq,b1o),e(Ih,v1o),e(k,F1o),e(k,Ws),e(Ws,Mde),e(Mde,T1o),e(Ws,M1o),e(Ws,fq),e(fq,E1o),e(Ws,C1o),e(Ws,mq),e(mq,w1o),e(Ws,A1o),e(k,L1o),e(k,Qs),e(Qs,Ede),e(Ede,y1o),e(Qs,x1o),e(Qs,gq),e(gq,$1o),e(Qs,k1o),e(Qs,hq),e(hq,S1o),e(Qs,R1o),e(k,P1o),e(k,Hs),e(Hs,Cde),e(Cde,B1o),e(Hs,I1o),e(Hs,pq),e(pq,N1o),e(Hs,q1o),e(Hs,_q),e(_q,j1o),e(Hs,D1o),e(k,G1o),e(k,Us),e(Us,wde),e(wde,O1o),e(Us,V1o),e(Us,uq),e(uq,X1o),e(Us,z1o),e(Us,bq),e(bq,W1o),e(Us,Q1o),e(xr,H1o),M(Nh,xr,null),e(yo,U1o),e(yo,qh),M(PL,qh,null),e(qh,J1o),e(qh,Ade),e(Ade,Y1o),b(f,bze,u),b(f,Gi,u),e(Gi,jh),e(jh,Lde),M(BL,Lde,null),e(Gi,K1o),e(Gi,yde),e(yde,Z1o),b(f,vze,u),b(f,xo,u),M(IL,xo,null),e(xo,e2o),e(xo,NL),e(NL,o2o),e(NL,vq),e(vq,r2o),e(NL,t2o),e(xo,a2o),e(xo,qL),e(qL,n2o),e(qL,xde),e(xde,s2o),e(qL,l2o),e(xo,i2o),e(xo,Ue),M(jL,Ue,null),e(Ue,d2o),e(Ue,$de),e($de,c2o),e(Ue,f2o),e(Ue,Ba),e(Ba,m2o),e(Ba,kde),e(kde,g2o),e(Ba,h2o),e(Ba,Sde),e(Sde,p2o),e(Ba,_2o),e(Ba,Rde),e(Rde,u2o),e(Ba,b2o),e(Ue,v2o),e(Ue,U),e(U,Dh),e(Dh,Pde),e(Pde,F2o),e(Dh,T2o),e(Dh,Fq),e(Fq,M2o),e(Dh,E2o),e(U,C2o),e(U,Gh),e(Gh,Bde),e(Bde,w2o),e(Gh,A2o),e(Gh,Tq),e(Tq,L2o),e(Gh,y2o),e(U,x2o),e(U,Oh),e(Oh,Ide),e(Ide,$2o),e(Oh,k2o),e(Oh,Mq),e(Mq,S2o),e(Oh,R2o),e(U,P2o),e(U,Vh),e(Vh,Nde),e(Nde,B2o),e(Vh,I2o),e(Vh,Eq),e(Eq,N2o),e(Vh,q2o),e(U,j2o),e(U,Xh),e(Xh,qde),e(qde,D2o),e(Xh,G2o),e(Xh,Cq),e(Cq,O2o),e(Xh,V2o),e(U,X2o),e(U,zh),e(zh,jde),e(jde,z2o),e(zh,W2o),e(zh,wq),e(wq,Q2o),e(zh,H2o),e(U,U2o),e(U,Wh),e(Wh,Dde),e(Dde,J2o),e(Wh,Y2o),e(Wh,Aq),e(Aq,K2o),e(Wh,Z2o),e(U,ebo),e(U,Qh),e(Qh,Gde),e(Gde,obo),e(Qh,rbo),e(Qh,Lq),e(Lq,tbo),e(Qh,abo),e(U,nbo),e(U,Hh),e(Hh,Ode),e(Ode,sbo),e(Hh,lbo),e(Hh,yq),e(yq,ibo),e(Hh,dbo),e(U,cbo),e(U,Uh),e(Uh,Vde),e(Vde,fbo),e(Uh,mbo),e(Uh,xq),e(xq,gbo),e(Uh,hbo),e(U,pbo),e(U,Jh),e(Jh,Xde),e(Xde,_bo),e(Jh,ubo),e(Jh,$q),e($q,bbo),e(Jh,vbo),e(U,Fbo),e(U,Yh),e(Yh,zde),e(zde,Tbo),e(Yh,Mbo),e(Yh,kq),e(kq,Ebo),e(Yh,Cbo),e(U,wbo),e(U,Kh),e(Kh,Wde),e(Wde,Abo),e(Kh,Lbo),e(Kh,Sq),e(Sq,ybo),e(Kh,xbo),e(U,$bo),e(U,Zh),e(Zh,Qde),e(Qde,kbo),e(Zh,Sbo),e(Zh,Rq),e(Rq,Rbo),e(Zh,Pbo),e(U,Bbo),e(U,ep),e(ep,Hde),e(Hde,Ibo),e(ep,Nbo),e(ep,Pq),e(Pq,qbo),e(ep,jbo),e(U,Dbo),e(U,op),e(op,Ude),e(Ude,Gbo),e(op,Obo),e(op,Bq),e(Bq,Vbo),e(op,Xbo),e(U,zbo),e(U,rp),e(rp,Jde),e(Jde,Wbo),e(rp,Qbo),e(rp,Iq),e(Iq,Hbo),e(rp,Ubo),e(U,Jbo),e(U,tp),e(tp,Yde),e(Yde,Ybo),e(tp,Kbo),e(tp,Nq),e(Nq,Zbo),e(tp,evo),e(U,ovo),e(U,ap),e(ap,Kde),e(Kde,rvo),e(ap,tvo),e(ap,qq),e(qq,avo),e(ap,nvo),e(U,svo),e(U,np),e(np,Zde),e(Zde,lvo),e(np,ivo),e(np,jq),e(jq,dvo),e(np,cvo),e(U,fvo),e(U,sp),e(sp,ece),e(ece,mvo),e(sp,gvo),e(sp,Dq),e(Dq,hvo),e(sp,pvo),e(U,_vo),e(U,lp),e(lp,oce),e(oce,uvo),e(lp,bvo),e(lp,Gq),e(Gq,vvo),e(lp,Fvo),e(U,Tvo),e(U,ip),e(ip,rce),e(rce,Mvo),e(ip,Evo),e(ip,Oq),e(Oq,Cvo),e(ip,wvo),e(U,Avo),e(U,dp),e(dp,tce),e(tce,Lvo),e(dp,yvo),e(dp,Vq),e(Vq,xvo),e(dp,$vo),e(U,kvo),e(U,cp),e(cp,ace),e(ace,Svo),e(cp,Rvo),e(cp,Xq),e(Xq,Pvo),e(cp,Bvo),e(U,Ivo),e(U,fp),e(fp,nce),e(nce,Nvo),e(fp,qvo),e(fp,zq),e(zq,jvo),e(fp,Dvo),e(U,Gvo),e(U,mp),e(mp,sce),e(sce,Ovo),e(mp,Vvo),e(mp,Wq),e(Wq,Xvo),e(mp,zvo),e(U,Wvo),e(U,gp),e(gp,lce),e(lce,Qvo),e(gp,Hvo),e(gp,Qq),e(Qq,Uvo),e(gp,Jvo),e(U,Yvo),e(U,hp),e(hp,ice),e(ice,Kvo),e(hp,Zvo),e(hp,Hq),e(Hq,e3o),e(hp,o3o),e(U,r3o),e(U,pp),e(pp,dce),e(dce,t3o),e(pp,a3o),e(pp,Uq),e(Uq,n3o),e(pp,s3o),e(U,l3o),e(U,_p),e(_p,cce),e(cce,i3o),e(_p,d3o),e(_p,Jq),e(Jq,c3o),e(_p,f3o),e(U,m3o),e(U,up),e(up,fce),e(fce,g3o),e(up,h3o),e(up,Yq),e(Yq,p3o),e(up,_3o),e(U,u3o),e(U,bp),e(bp,mce),e(mce,b3o),e(bp,v3o),e(bp,Kq),e(Kq,F3o),e(bp,T3o),e(U,M3o),e(U,vp),e(vp,gce),e(gce,E3o),e(vp,C3o),e(vp,Zq),e(Zq,w3o),e(vp,A3o),e(U,L3o),e(U,Fp),e(Fp,hce),e(hce,y3o),e(Fp,x3o),e(Fp,ej),e(ej,$3o),e(Fp,k3o),e(U,S3o),e(U,Tp),e(Tp,pce),e(pce,R3o),e(Tp,P3o),e(Tp,oj),e(oj,B3o),e(Tp,I3o),e(Ue,N3o),M(Mp,Ue,null),e(Ue,q3o),M(Ep,Ue,null),e(xo,j3o),e(xo,Cp),M(DL,Cp,null),e(Cp,D3o),e(Cp,_ce),e(_ce,G3o),b(f,Fze,u),b(f,Oi,u),e(Oi,wp),e(wp,uce),M(GL,uce,null),e(Oi,O3o),e(Oi,bce),e(bce,V3o),b(f,Tze,u),b(f,$o,u),M(OL,$o,null),e($o,X3o),e($o,VL),e(VL,z3o),e(VL,rj),e(rj,W3o),e(VL,Q3o),e($o,H3o),e($o,XL),e(XL,U3o),e(XL,vce),e(vce,J3o),e(XL,Y3o),e($o,K3o),e($o,Je),M(zL,Je,null),e(Je,Z3o),e(Je,Fce),e(Fce,eFo),e(Je,oFo),e(Je,Vi),e(Vi,rFo),e(Vi,Tce),e(Tce,tFo),e(Vi,aFo),e(Vi,Mce),e(Mce,nFo),e(Vi,sFo),e(Je,lFo),e(Je,fe),e(fe,Ap),e(Ap,Ece),e(Ece,iFo),e(Ap,dFo),e(Ap,tj),e(tj,cFo),e(Ap,fFo),e(fe,mFo),e(fe,Lp),e(Lp,Cce),e(Cce,gFo),e(Lp,hFo),e(Lp,aj),e(aj,pFo),e(Lp,_Fo),e(fe,uFo),e(fe,yp),e(yp,wce),e(wce,bFo),e(yp,vFo),e(yp,nj),e(nj,FFo),e(yp,TFo),e(fe,MFo),e(fe,xp),e(xp,Ace),e(Ace,EFo),e(xp,CFo),e(xp,sj),e(sj,wFo),e(xp,AFo),e(fe,LFo),e(fe,$p),e($p,Lce),e(Lce,yFo),e($p,xFo),e($p,lj),e(lj,$Fo),e($p,kFo),e(fe,SFo),e(fe,kp),e(kp,yce),e(yce,RFo),e(kp,PFo),e(kp,ij),e(ij,BFo),e(kp,IFo),e(fe,NFo),e(fe,Sp),e(Sp,xce),e(xce,qFo),e(Sp,jFo),e(Sp,dj),e(dj,DFo),e(Sp,GFo),e(fe,OFo),e(fe,Rp),e(Rp,$ce),e($ce,VFo),e(Rp,XFo),e(Rp,cj),e(cj,zFo),e(Rp,WFo),e(fe,QFo),e(fe,Pp),e(Pp,kce),e(kce,HFo),e(Pp,UFo),e(Pp,fj),e(fj,JFo),e(Pp,YFo),e(fe,KFo),e(fe,Bp),e(Bp,Sce),e(Sce,ZFo),e(Bp,e6o),e(Bp,mj),e(mj,o6o),e(Bp,r6o),e(fe,t6o),e(fe,Ip),e(Ip,Rce),e(Rce,a6o),e(Ip,n6o),e(Ip,gj),e(gj,s6o),e(Ip,l6o),e(fe,i6o),e(fe,Np),e(Np,Pce),e(Pce,d6o),e(Np,c6o),e(Np,hj),e(hj,f6o),e(Np,m6o),e(fe,g6o),e(fe,qp),e(qp,Bce),e(Bce,h6o),e(qp,p6o),e(qp,pj),e(pj,_6o),e(qp,u6o),e(fe,b6o),e(fe,jp),e(jp,Ice),e(Ice,v6o),e(jp,F6o),e(jp,_j),e(_j,T6o),e(jp,M6o),e(fe,E6o),e(fe,Dp),e(Dp,Nce),e(Nce,C6o),e(Dp,w6o),e(Dp,uj),e(uj,A6o),e(Dp,L6o),e(fe,y6o),e(fe,Gp),e(Gp,qce),e(qce,x6o),e(Gp,$6o),e(Gp,bj),e(bj,k6o),e(Gp,S6o),e(fe,R6o),e(fe,Op),e(Op,jce),e(jce,P6o),e(Op,B6o),e(Op,vj),e(vj,I6o),e(Op,N6o),e(fe,q6o),e(fe,Vp),e(Vp,Dce),e(Dce,j6o),e(Vp,D6o),e(Vp,Fj),e(Fj,G6o),e(Vp,O6o),e(fe,V6o),e(fe,Xp),e(Xp,Gce),e(Gce,X6o),e(Xp,z6o),e(Xp,Tj),e(Tj,W6o),e(Xp,Q6o),e(Je,H6o),M(zp,Je,null),e(Je,U6o),M(Wp,Je,null),e($o,J6o),e($o,Qp),M(WL,Qp,null),e(Qp,Y6o),e(Qp,Oce),e(Oce,K6o),b(f,Mze,u),b(f,Xi,u),e(Xi,Hp),e(Hp,Vce),M(QL,Vce,null),e(Xi,Z6o),e(Xi,Xce),e(Xce,eTo),b(f,Eze,u),b(f,ko,u),M(HL,ko,null),e(ko,oTo),e(ko,zi),e(zi,rTo),e(zi,Mj),e(Mj,tTo),e(zi,aTo),e(zi,Ej),e(Ej,nTo),e(zi,sTo),e(ko,lTo),e(ko,UL),e(UL,iTo),e(UL,zce),e(zce,dTo),e(UL,cTo),e(ko,fTo),e(ko,it),M(JL,it,null),e(it,mTo),e(it,Wce),e(Wce,gTo),e(it,hTo),e(it,Wi),e(Wi,pTo),e(Wi,Qce),e(Qce,_To),e(Wi,uTo),e(Wi,Cj),e(Cj,bTo),e(Wi,vTo),e(it,FTo),M(Up,it,null),e(ko,TTo),e(ko,Ye),M(YL,Ye,null),e(Ye,MTo),e(Ye,Hce),e(Hce,ETo),e(Ye,CTo),e(Ye,Ia),e(Ia,wTo),e(Ia,Uce),e(Uce,ATo),e(Ia,LTo),e(Ia,Jce),e(Jce,yTo),e(Ia,xTo),e(Ia,Yce),e(Yce,$To),e(Ia,kTo),e(Ye,STo),e(Ye,y),e(y,Jp),e(Jp,Kce),e(Kce,RTo),e(Jp,PTo),e(Jp,wj),e(wj,BTo),e(Jp,ITo),e(y,NTo),e(y,Yp),e(Yp,Zce),e(Zce,qTo),e(Yp,jTo),e(Yp,Aj),e(Aj,DTo),e(Yp,GTo),e(y,OTo),e(y,Kp),e(Kp,efe),e(efe,VTo),e(Kp,XTo),e(Kp,Lj),e(Lj,zTo),e(Kp,WTo),e(y,QTo),e(y,Zp),e(Zp,ofe),e(ofe,HTo),e(Zp,UTo),e(Zp,yj),e(yj,JTo),e(Zp,YTo),e(y,KTo),e(y,e_),e(e_,rfe),e(rfe,ZTo),e(e_,e8o),e(e_,xj),e(xj,o8o),e(e_,r8o),e(y,t8o),e(y,o_),e(o_,tfe),e(tfe,a8o),e(o_,n8o),e(o_,$j),e($j,s8o),e(o_,l8o),e(y,i8o),e(y,r_),e(r_,afe),e(afe,d8o),e(r_,c8o),e(r_,kj),e(kj,f8o),e(r_,m8o),e(y,g8o),e(y,t_),e(t_,nfe),e(nfe,h8o),e(t_,p8o),e(t_,Sj),e(Sj,_8o),e(t_,u8o),e(y,b8o),e(y,a_),e(a_,sfe),e(sfe,v8o),e(a_,F8o),e(a_,Rj),e(Rj,T8o),e(a_,M8o),e(y,E8o),e(y,n_),e(n_,lfe),e(lfe,C8o),e(n_,w8o),e(n_,Pj),e(Pj,A8o),e(n_,L8o),e(y,y8o),e(y,s_),e(s_,ife),e(ife,x8o),e(s_,$8o),e(s_,Bj),e(Bj,k8o),e(s_,S8o),e(y,R8o),e(y,l_),e(l_,dfe),e(dfe,P8o),e(l_,B8o),e(l_,Ij),e(Ij,I8o),e(l_,N8o),e(y,q8o),e(y,i_),e(i_,cfe),e(cfe,j8o),e(i_,D8o),e(i_,Nj),e(Nj,G8o),e(i_,O8o),e(y,V8o),e(y,d_),e(d_,ffe),e(ffe,X8o),e(d_,z8o),e(d_,qj),e(qj,W8o),e(d_,Q8o),e(y,H8o),e(y,c_),e(c_,mfe),e(mfe,U8o),e(c_,J8o),e(c_,jj),e(jj,Y8o),e(c_,K8o),e(y,Z8o),e(y,f_),e(f_,gfe),e(gfe,eMo),e(f_,oMo),e(f_,Dj),e(Dj,rMo),e(f_,tMo),e(y,aMo),e(y,m_),e(m_,hfe),e(hfe,nMo),e(m_,sMo),e(m_,Gj),e(Gj,lMo),e(m_,iMo),e(y,dMo),e(y,g_),e(g_,pfe),e(pfe,cMo),e(g_,fMo),e(g_,Oj),e(Oj,mMo),e(g_,gMo),e(y,hMo),e(y,h_),e(h_,_fe),e(_fe,pMo),e(h_,_Mo),e(h_,Vj),e(Vj,uMo),e(h_,bMo),e(y,vMo),e(y,p_),e(p_,ufe),e(ufe,FMo),e(p_,TMo),e(p_,Xj),e(Xj,MMo),e(p_,EMo),e(y,CMo),e(y,__),e(__,bfe),e(bfe,wMo),e(__,AMo),e(__,zj),e(zj,LMo),e(__,yMo),e(y,xMo),e(y,u_),e(u_,vfe),e(vfe,$Mo),e(u_,kMo),e(u_,Wj),e(Wj,SMo),e(u_,RMo),e(y,PMo),e(y,b_),e(b_,Ffe),e(Ffe,BMo),e(b_,IMo),e(b_,Qj),e(Qj,NMo),e(b_,qMo),e(y,jMo),e(y,v_),e(v_,Tfe),e(Tfe,DMo),e(v_,GMo),e(v_,Hj),e(Hj,OMo),e(v_,VMo),e(y,XMo),e(y,F_),e(F_,Mfe),e(Mfe,zMo),e(F_,WMo),e(F_,Uj),e(Uj,QMo),e(F_,HMo),e(y,UMo),e(y,T_),e(T_,Efe),e(Efe,JMo),e(T_,YMo),e(T_,Jj),e(Jj,KMo),e(T_,ZMo),e(y,e4o),e(y,M_),e(M_,Cfe),e(Cfe,o4o),e(M_,r4o),e(M_,Yj),e(Yj,t4o),e(M_,a4o),e(y,n4o),e(y,E_),e(E_,wfe),e(wfe,s4o),e(E_,l4o),e(E_,Kj),e(Kj,i4o),e(E_,d4o),e(y,c4o),e(y,C_),e(C_,Afe),e(Afe,f4o),e(C_,m4o),e(C_,Zj),e(Zj,g4o),e(C_,h4o),e(y,p4o),e(y,w_),e(w_,Lfe),e(Lfe,_4o),e(w_,u4o),e(w_,eD),e(eD,b4o),e(w_,v4o),e(y,F4o),e(y,A_),e(A_,yfe),e(yfe,T4o),e(A_,M4o),e(A_,oD),e(oD,E4o),e(A_,C4o),e(y,w4o),e(y,L_),e(L_,xfe),e(xfe,A4o),e(L_,L4o),e(L_,rD),e(rD,y4o),e(L_,x4o),e(y,$4o),e(y,y_),e(y_,$fe),e($fe,k4o),e(y_,S4o),e(y_,tD),e(tD,R4o),e(y_,P4o),e(y,B4o),e(y,x_),e(x_,kfe),e(kfe,I4o),e(x_,N4o),e(x_,aD),e(aD,q4o),e(x_,j4o),e(y,D4o),e(y,Js),e(Js,Sfe),e(Sfe,G4o),e(Js,O4o),e(Js,nD),e(nD,V4o),e(Js,X4o),e(Js,sD),e(sD,z4o),e(Js,W4o),e(y,Q4o),e(y,$_),e($_,Rfe),e(Rfe,H4o),e($_,U4o),e($_,lD),e(lD,J4o),e($_,Y4o),e(y,K4o),e(y,k_),e(k_,Pfe),e(Pfe,Z4o),e(k_,eEo),e(k_,iD),e(iD,oEo),e(k_,rEo),e(y,tEo),e(y,S_),e(S_,Bfe),e(Bfe,aEo),e(S_,nEo),e(S_,dD),e(dD,sEo),e(S_,lEo),e(y,iEo),e(y,R_),e(R_,Ife),e(Ife,dEo),e(R_,cEo),e(R_,cD),e(cD,fEo),e(R_,mEo),e(y,gEo),e(y,P_),e(P_,Nfe),e(Nfe,hEo),e(P_,pEo),e(P_,fD),e(fD,_Eo),e(P_,uEo),e(y,bEo),e(y,B_),e(B_,qfe),e(qfe,vEo),e(B_,FEo),e(B_,mD),e(mD,TEo),e(B_,MEo),e(y,EEo),e(y,I_),e(I_,jfe),e(jfe,CEo),e(I_,wEo),e(I_,gD),e(gD,AEo),e(I_,LEo),e(y,yEo),e(y,N_),e(N_,Dfe),e(Dfe,xEo),e(N_,$Eo),e(N_,hD),e(hD,kEo),e(N_,SEo),e(y,REo),e(y,q_),e(q_,Gfe),e(Gfe,PEo),e(q_,BEo),e(q_,pD),e(pD,IEo),e(q_,NEo),e(y,qEo),e(y,j_),e(j_,Ofe),e(Ofe,jEo),e(j_,DEo),e(j_,_D),e(_D,GEo),e(j_,OEo),e(y,VEo),e(y,D_),e(D_,Vfe),e(Vfe,XEo),e(D_,zEo),e(D_,uD),e(uD,WEo),e(D_,QEo),e(y,HEo),e(y,G_),e(G_,Xfe),e(Xfe,UEo),e(G_,JEo),e(G_,bD),e(bD,YEo),e(G_,KEo),e(y,ZEo),e(y,O_),e(O_,zfe),e(zfe,eCo),e(O_,oCo),e(O_,vD),e(vD,rCo),e(O_,tCo),e(y,aCo),e(y,V_),e(V_,Wfe),e(Wfe,nCo),e(V_,sCo),e(V_,FD),e(FD,lCo),e(V_,iCo),e(y,dCo),e(y,X_),e(X_,Qfe),e(Qfe,cCo),e(X_,fCo),e(X_,TD),e(TD,mCo),e(X_,gCo),e(y,hCo),e(y,z_),e(z_,Hfe),e(Hfe,pCo),e(z_,_Co),e(z_,MD),e(MD,uCo),e(z_,bCo),e(y,vCo),e(y,W_),e(W_,Ufe),e(Ufe,FCo),e(W_,TCo),e(W_,ED),e(ED,MCo),e(W_,ECo),e(y,CCo),e(y,Q_),e(Q_,Jfe),e(Jfe,wCo),e(Q_,ACo),e(Q_,CD),e(CD,LCo),e(Q_,yCo),e(y,xCo),e(y,H_),e(H_,Yfe),e(Yfe,$Co),e(H_,kCo),e(H_,wD),e(wD,SCo),e(H_,RCo),e(y,PCo),e(y,U_),e(U_,Kfe),e(Kfe,BCo),e(U_,ICo),e(U_,AD),e(AD,NCo),e(U_,qCo),e(y,jCo),e(y,J_),e(J_,Zfe),e(Zfe,DCo),e(J_,GCo),e(J_,LD),e(LD,OCo),e(J_,VCo),e(y,XCo),e(y,Y_),e(Y_,eme),e(eme,zCo),e(Y_,WCo),e(Y_,yD),e(yD,QCo),e(Y_,HCo),e(y,UCo),e(y,K_),e(K_,ome),e(ome,JCo),e(K_,YCo),e(K_,xD),e(xD,KCo),e(K_,ZCo),e(y,e5o),e(y,Z_),e(Z_,rme),e(rme,o5o),e(Z_,r5o),e(Z_,$D),e($D,t5o),e(Z_,a5o),e(y,n5o),e(y,eu),e(eu,tme),e(tme,s5o),e(eu,l5o),e(eu,kD),e(kD,i5o),e(eu,d5o),e(y,c5o),e(y,ou),e(ou,ame),e(ame,f5o),e(ou,m5o),e(ou,SD),e(SD,g5o),e(ou,h5o),e(y,p5o),e(y,ru),e(ru,nme),e(nme,_5o),e(ru,u5o),e(ru,RD),e(RD,b5o),e(ru,v5o),e(y,F5o),e(y,tu),e(tu,sme),e(sme,T5o),e(tu,M5o),e(tu,PD),e(PD,E5o),e(tu,C5o),e(y,w5o),e(y,au),e(au,lme),e(lme,A5o),e(au,L5o),e(au,BD),e(BD,y5o),e(au,x5o),e(y,$5o),e(y,nu),e(nu,ime),e(ime,k5o),e(nu,S5o),e(nu,ID),e(ID,R5o),e(nu,P5o),e(y,B5o),e(y,su),e(su,dme),e(dme,I5o),e(su,N5o),e(su,ND),e(ND,q5o),e(su,j5o),e(y,D5o),e(y,lu),e(lu,cme),e(cme,G5o),e(lu,O5o),e(lu,qD),e(qD,V5o),e(lu,X5o),e(y,z5o),e(y,iu),e(iu,fme),e(fme,W5o),e(iu,Q5o),e(iu,jD),e(jD,H5o),e(iu,U5o),e(y,J5o),e(y,du),e(du,mme),e(mme,Y5o),e(du,K5o),e(du,DD),e(DD,Z5o),e(du,e0o),e(y,o0o),e(y,cu),e(cu,gme),e(gme,r0o),e(cu,t0o),e(cu,GD),e(GD,a0o),e(cu,n0o),e(y,s0o),e(y,fu),e(fu,hme),e(hme,l0o),e(fu,i0o),e(fu,OD),e(OD,d0o),e(fu,c0o),e(y,f0o),e(y,mu),e(mu,pme),e(pme,m0o),e(mu,g0o),e(mu,VD),e(VD,h0o),e(mu,p0o),e(y,_0o),e(y,gu),e(gu,_me),e(_me,u0o),e(gu,b0o),e(gu,XD),e(XD,v0o),e(gu,F0o),e(y,T0o),e(y,hu),e(hu,ume),e(ume,M0o),e(hu,E0o),e(hu,zD),e(zD,C0o),e(hu,w0o),e(y,A0o),e(y,pu),e(pu,bme),e(bme,L0o),e(pu,y0o),e(pu,WD),e(WD,x0o),e(pu,$0o),e(y,k0o),e(y,_u),e(_u,vme),e(vme,S0o),e(_u,R0o),e(_u,QD),e(QD,P0o),e(_u,B0o),e(y,I0o),e(y,uu),e(uu,Fme),e(Fme,N0o),e(uu,q0o),e(uu,HD),e(HD,j0o),e(uu,D0o),e(y,G0o),e(y,bu),e(bu,Tme),e(Tme,O0o),e(bu,V0o),e(bu,UD),e(UD,X0o),e(bu,z0o),e(y,W0o),e(y,vu),e(vu,Mme),e(Mme,Q0o),e(vu,H0o),e(vu,JD),e(JD,U0o),e(vu,J0o),e(y,Y0o),e(y,Fu),e(Fu,Eme),e(Eme,K0o),e(Fu,Z0o),e(Fu,YD),e(YD,ewo),e(Fu,owo),e(y,rwo),e(y,Tu),e(Tu,Cme),e(Cme,two),e(Tu,awo),e(Tu,KD),e(KD,nwo),e(Tu,swo),e(y,lwo),e(y,Mu),e(Mu,wme),e(wme,iwo),e(Mu,dwo),e(Mu,ZD),e(ZD,cwo),e(Mu,fwo),e(y,mwo),e(y,Eu),e(Eu,Ame),e(Ame,gwo),e(Eu,hwo),e(Eu,eG),e(eG,pwo),e(Eu,_wo),e(y,uwo),e(y,Cu),e(Cu,Lme),e(Lme,bwo),e(Cu,vwo),e(Cu,oG),e(oG,Fwo),e(Cu,Two),e(y,Mwo),e(y,wu),e(wu,yme),e(yme,Ewo),e(wu,Cwo),e(wu,rG),e(rG,wwo),e(wu,Awo),e(y,Lwo),e(y,Au),e(Au,xme),e(xme,ywo),e(Au,xwo),e(Au,tG),e(tG,$wo),e(Au,kwo),e(y,Swo),e(y,Lu),e(Lu,$me),e($me,Rwo),e(Lu,Pwo),e(Lu,aG),e(aG,Bwo),e(Lu,Iwo),e(y,Nwo),e(y,yu),e(yu,kme),e(kme,qwo),e(yu,jwo),e(yu,nG),e(nG,Dwo),e(yu,Gwo),e(y,Owo),e(y,xu),e(xu,Sme),e(Sme,Vwo),e(xu,Xwo),e(xu,sG),e(sG,zwo),e(xu,Wwo),e(y,Qwo),e(y,$u),e($u,Rme),e(Rme,Hwo),e($u,Uwo),e($u,lG),e(lG,Jwo),e($u,Ywo),e(y,Kwo),e(y,ku),e(ku,Pme),e(Pme,Zwo),e(ku,eAo),e(ku,iG),e(iG,oAo),e(ku,rAo),e(y,tAo),e(y,Su),e(Su,Bme),e(Bme,aAo),e(Su,nAo),e(Su,dG),e(dG,sAo),e(Su,lAo),e(y,iAo),e(y,Ru),e(Ru,Ime),e(Ime,dAo),e(Ru,cAo),e(Ru,cG),e(cG,fAo),e(Ru,mAo),e(y,gAo),e(y,Pu),e(Pu,Nme),e(Nme,hAo),e(Pu,pAo),e(Pu,fG),e(fG,_Ao),e(Pu,uAo),e(y,bAo),e(y,Bu),e(Bu,qme),e(qme,vAo),e(Bu,FAo),e(Bu,mG),e(mG,TAo),e(Bu,MAo),e(y,EAo),e(y,Iu),e(Iu,jme),e(jme,CAo),e(Iu,wAo),e(Iu,gG),e(gG,AAo),e(Iu,LAo),e(y,yAo),e(y,Nu),e(Nu,Dme),e(Dme,xAo),e(Nu,$Ao),e(Nu,hG),e(hG,kAo),e(Nu,SAo),e(y,RAo),e(y,qu),e(qu,Gme),e(Gme,PAo),e(qu,BAo),e(qu,pG),e(pG,IAo),e(qu,NAo),e(y,qAo),e(y,ju),e(ju,Ome),e(Ome,jAo),e(ju,DAo),e(ju,_G),e(_G,GAo),e(ju,OAo),e(y,VAo),e(y,Du),e(Du,Vme),e(Vme,XAo),e(Du,zAo),e(Du,uG),e(uG,WAo),e(Du,QAo),e(y,HAo),e(y,Gu),e(Gu,Xme),e(Xme,UAo),e(Gu,JAo),e(Gu,bG),e(bG,YAo),e(Gu,KAo),e(y,ZAo),e(y,Ou),e(Ou,zme),e(zme,e7o),e(Ou,o7o),e(Ou,vG),e(vG,r7o),e(Ou,t7o),e(y,a7o),e(y,Vu),e(Vu,Wme),e(Wme,n7o),e(Vu,s7o),e(Vu,FG),e(FG,l7o),e(Vu,i7o),e(y,d7o),e(y,Xu),e(Xu,Qme),e(Qme,c7o),e(Xu,f7o),e(Xu,TG),e(TG,m7o),e(Xu,g7o),e(y,h7o),e(y,zu),e(zu,Hme),e(Hme,p7o),e(zu,_7o),e(zu,MG),e(MG,u7o),e(zu,b7o),e(y,v7o),e(y,Wu),e(Wu,Ume),e(Ume,F7o),e(Wu,T7o),e(Wu,EG),e(EG,M7o),e(Wu,E7o),e(y,C7o),e(y,Qu),e(Qu,Jme),e(Jme,w7o),e(Qu,A7o),e(Qu,CG),e(CG,L7o),e(Qu,y7o),e(y,x7o),e(y,Hu),e(Hu,Yme),e(Yme,$7o),e(Hu,k7o),e(Hu,wG),e(wG,S7o),e(Hu,R7o),e(y,P7o),e(y,Uu),e(Uu,Kme),e(Kme,B7o),e(Uu,I7o),e(Uu,AG),e(AG,N7o),e(Uu,q7o),e(y,j7o),e(y,Ju),e(Ju,Zme),e(Zme,D7o),e(Ju,G7o),e(Ju,LG),e(LG,O7o),e(Ju,V7o),e(y,X7o),e(y,Yu),e(Yu,ege),e(ege,z7o),e(Yu,W7o),e(Yu,yG),e(yG,Q7o),e(Yu,H7o),e(y,U7o),e(y,Ku),e(Ku,oge),e(oge,J7o),e(Ku,Y7o),e(Ku,xG),e(xG,K7o),e(Ku,Z7o),e(y,eLo),e(y,Zu),e(Zu,rge),e(rge,oLo),e(Zu,rLo),e(Zu,$G),e($G,tLo),e(Zu,aLo),e(y,nLo),e(y,e1),e(e1,tge),e(tge,sLo),e(e1,lLo),e(e1,kG),e(kG,iLo),e(e1,dLo),e(Ye,cLo),e(Ye,o1),e(o1,fLo),e(o1,age),e(age,mLo),e(o1,gLo),e(o1,nge),e(nge,hLo),e(Ye,pLo),M(r1,Ye,null),b(f,Cze,u),b(f,Qi,u),e(Qi,t1),e(t1,sge),M(KL,sge,null),e(Qi,_Lo),e(Qi,lge),e(lge,uLo),b(f,wze,u),b(f,So,u),M(ZL,So,null),e(So,bLo),e(So,Hi),e(Hi,vLo),e(Hi,SG),e(SG,FLo),e(Hi,TLo),e(Hi,RG),e(RG,MLo),e(Hi,ELo),e(So,CLo),e(So,ey),e(ey,wLo),e(ey,ige),e(ige,ALo),e(ey,LLo),e(So,yLo),e(So,dt),M(oy,dt,null),e(dt,xLo),e(dt,dge),e(dge,$Lo),e(dt,kLo),e(dt,Ui),e(Ui,SLo),e(Ui,cge),e(cge,RLo),e(Ui,PLo),e(Ui,PG),e(PG,BLo),e(Ui,ILo),e(dt,NLo),M(a1,dt,null),e(So,qLo),e(So,Ke),M(ry,Ke,null),e(Ke,jLo),e(Ke,fge),e(fge,DLo),e(Ke,GLo),e(Ke,Na),e(Na,OLo),e(Na,mge),e(mge,VLo),e(Na,XLo),e(Na,gge),e(gge,zLo),e(Na,WLo),e(Na,hge),e(hge,QLo),e(Na,HLo),e(Ke,ULo),e(Ke,G),e(G,n1),e(n1,pge),e(pge,JLo),e(n1,YLo),e(n1,BG),e(BG,KLo),e(n1,ZLo),e(G,eyo),e(G,s1),e(s1,_ge),e(_ge,oyo),e(s1,ryo),e(s1,IG),e(IG,tyo),e(s1,ayo),e(G,nyo),e(G,l1),e(l1,uge),e(uge,syo),e(l1,lyo),e(l1,NG),e(NG,iyo),e(l1,dyo),e(G,cyo),e(G,i1),e(i1,bge),e(bge,fyo),e(i1,myo),e(i1,qG),e(qG,gyo),e(i1,hyo),e(G,pyo),e(G,d1),e(d1,vge),e(vge,_yo),e(d1,uyo),e(d1,jG),e(jG,byo),e(d1,vyo),e(G,Fyo),e(G,c1),e(c1,Fge),e(Fge,Tyo),e(c1,Myo),e(c1,DG),e(DG,Eyo),e(c1,Cyo),e(G,wyo),e(G,f1),e(f1,Tge),e(Tge,Ayo),e(f1,Lyo),e(f1,GG),e(GG,yyo),e(f1,xyo),e(G,$yo),e(G,m1),e(m1,Mge),e(Mge,kyo),e(m1,Syo),e(m1,OG),e(OG,Ryo),e(m1,Pyo),e(G,Byo),e(G,g1),e(g1,Ege),e(Ege,Iyo),e(g1,Nyo),e(g1,VG),e(VG,qyo),e(g1,jyo),e(G,Dyo),e(G,h1),e(h1,Cge),e(Cge,Gyo),e(h1,Oyo),e(h1,XG),e(XG,Vyo),e(h1,Xyo),e(G,zyo),e(G,p1),e(p1,wge),e(wge,Wyo),e(p1,Qyo),e(p1,zG),e(zG,Hyo),e(p1,Uyo),e(G,Jyo),e(G,_1),e(_1,Age),e(Age,Yyo),e(_1,Kyo),e(_1,WG),e(WG,Zyo),e(_1,e9o),e(G,o9o),e(G,u1),e(u1,Lge),e(Lge,r9o),e(u1,t9o),e(u1,QG),e(QG,a9o),e(u1,n9o),e(G,s9o),e(G,b1),e(b1,yge),e(yge,l9o),e(b1,i9o),e(b1,HG),e(HG,d9o),e(b1,c9o),e(G,f9o),e(G,v1),e(v1,xge),e(xge,m9o),e(v1,g9o),e(v1,UG),e(UG,h9o),e(v1,p9o),e(G,_9o),e(G,F1),e(F1,$ge),e($ge,u9o),e(F1,b9o),e(F1,JG),e(JG,v9o),e(F1,F9o),e(G,T9o),e(G,T1),e(T1,kge),e(kge,M9o),e(T1,E9o),e(T1,YG),e(YG,C9o),e(T1,w9o),e(G,A9o),e(G,M1),e(M1,Sge),e(Sge,L9o),e(M1,y9o),e(M1,KG),e(KG,x9o),e(M1,$9o),e(G,k9o),e(G,E1),e(E1,Rge),e(Rge,S9o),e(E1,R9o),e(E1,ZG),e(ZG,P9o),e(E1,B9o),e(G,I9o),e(G,C1),e(C1,Pge),e(Pge,N9o),e(C1,q9o),e(C1,eO),e(eO,j9o),e(C1,D9o),e(G,G9o),e(G,w1),e(w1,Bge),e(Bge,O9o),e(w1,V9o),e(w1,oO),e(oO,X9o),e(w1,z9o),e(G,W9o),e(G,A1),e(A1,Ige),e(Ige,Q9o),e(A1,H9o),e(A1,rO),e(rO,U9o),e(A1,J9o),e(G,Y9o),e(G,L1),e(L1,Nge),e(Nge,K9o),e(L1,Z9o),e(L1,tO),e(tO,exo),e(L1,oxo),e(G,rxo),e(G,y1),e(y1,qge),e(qge,txo),e(y1,axo),e(y1,aO),e(aO,nxo),e(y1,sxo),e(G,lxo),e(G,x1),e(x1,jge),e(jge,ixo),e(x1,dxo),e(x1,nO),e(nO,cxo),e(x1,fxo),e(G,mxo),e(G,$1),e($1,Dge),e(Dge,gxo),e($1,hxo),e($1,sO),e(sO,pxo),e($1,_xo),e(G,uxo),e(G,k1),e(k1,Gge),e(Gge,bxo),e(k1,vxo),e(k1,lO),e(lO,Fxo),e(k1,Txo),e(G,Mxo),e(G,S1),e(S1,Oge),e(Oge,Exo),e(S1,Cxo),e(S1,iO),e(iO,wxo),e(S1,Axo),e(G,Lxo),e(G,R1),e(R1,Vge),e(Vge,yxo),e(R1,xxo),e(R1,dO),e(dO,$xo),e(R1,kxo),e(G,Sxo),e(G,P1),e(P1,Xge),e(Xge,Rxo),e(P1,Pxo),e(P1,cO),e(cO,Bxo),e(P1,Ixo),e(G,Nxo),e(G,B1),e(B1,zge),e(zge,qxo),e(B1,jxo),e(B1,fO),e(fO,Dxo),e(B1,Gxo),e(G,Oxo),e(G,I1),e(I1,Wge),e(Wge,Vxo),e(I1,Xxo),e(I1,mO),e(mO,zxo),e(I1,Wxo),e(G,Qxo),e(G,N1),e(N1,Qge),e(Qge,Hxo),e(N1,Uxo),e(N1,gO),e(gO,Jxo),e(N1,Yxo),e(G,Kxo),e(G,q1),e(q1,Hge),e(Hge,Zxo),e(q1,e$o),e(q1,hO),e(hO,o$o),e(q1,r$o),e(G,t$o),e(G,j1),e(j1,Uge),e(Uge,a$o),e(j1,n$o),e(j1,pO),e(pO,s$o),e(j1,l$o),e(G,i$o),e(G,D1),e(D1,Jge),e(Jge,d$o),e(D1,c$o),e(D1,_O),e(_O,f$o),e(D1,m$o),e(G,g$o),e(G,G1),e(G1,Yge),e(Yge,h$o),e(G1,p$o),e(G1,uO),e(uO,_$o),e(G1,u$o),e(G,b$o),e(G,O1),e(O1,Kge),e(Kge,v$o),e(O1,F$o),e(O1,bO),e(bO,T$o),e(O1,M$o),e(G,E$o),e(G,V1),e(V1,Zge),e(Zge,C$o),e(V1,w$o),e(V1,vO),e(vO,A$o),e(V1,L$o),e(G,y$o),e(G,X1),e(X1,ehe),e(ehe,x$o),e(X1,$$o),e(X1,FO),e(FO,k$o),e(X1,S$o),e(G,R$o),e(G,z1),e(z1,ohe),e(ohe,P$o),e(z1,B$o),e(z1,TO),e(TO,I$o),e(z1,N$o),e(G,q$o),e(G,W1),e(W1,rhe),e(rhe,j$o),e(W1,D$o),e(W1,MO),e(MO,G$o),e(W1,O$o),e(G,V$o),e(G,Q1),e(Q1,the),e(the,X$o),e(Q1,z$o),e(Q1,EO),e(EO,W$o),e(Q1,Q$o),e(G,H$o),e(G,H1),e(H1,ahe),e(ahe,U$o),e(H1,J$o),e(H1,CO),e(CO,Y$o),e(H1,K$o),e(G,Z$o),e(G,U1),e(U1,nhe),e(nhe,eko),e(U1,oko),e(U1,wO),e(wO,rko),e(U1,tko),e(Ke,ako),e(Ke,J1),e(J1,nko),e(J1,she),e(she,sko),e(J1,lko),e(J1,lhe),e(lhe,iko),e(Ke,dko),M(Y1,Ke,null),b(f,Aze,u),b(f,Ji,u),e(Ji,K1),e(K1,ihe),M(ty,ihe,null),e(Ji,cko),e(Ji,dhe),e(dhe,fko),b(f,Lze,u),b(f,Ro,u),M(ay,Ro,null),e(Ro,mko),e(Ro,Yi),e(Yi,gko),e(Yi,AO),e(AO,hko),e(Yi,pko),e(Yi,LO),e(LO,_ko),e(Yi,uko),e(Ro,bko),e(Ro,ny),e(ny,vko),e(ny,che),e(che,Fko),e(ny,Tko),e(Ro,Mko),e(Ro,ct),M(sy,ct,null),e(ct,Eko),e(ct,fhe),e(fhe,Cko),e(ct,wko),e(ct,Ki),e(Ki,Ako),e(Ki,mhe),e(mhe,Lko),e(Ki,yko),e(Ki,yO),e(yO,xko),e(Ki,$ko),e(ct,kko),M(Z1,ct,null),e(Ro,Sko),e(Ro,Ze),M(ly,Ze,null),e(Ze,Rko),e(Ze,ghe),e(ghe,Pko),e(Ze,Bko),e(Ze,qa),e(qa,Iko),e(qa,hhe),e(hhe,Nko),e(qa,qko),e(qa,phe),e(phe,jko),e(qa,Dko),e(qa,_he),e(_he,Gko),e(qa,Oko),e(Ze,Vko),e(Ze,z),e(z,e2),e(e2,uhe),e(uhe,Xko),e(e2,zko),e(e2,xO),e(xO,Wko),e(e2,Qko),e(z,Hko),e(z,o2),e(o2,bhe),e(bhe,Uko),e(o2,Jko),e(o2,$O),e($O,Yko),e(o2,Kko),e(z,Zko),e(z,r2),e(r2,vhe),e(vhe,eSo),e(r2,oSo),e(r2,kO),e(kO,rSo),e(r2,tSo),e(z,aSo),e(z,t2),e(t2,Fhe),e(Fhe,nSo),e(t2,sSo),e(t2,SO),e(SO,lSo),e(t2,iSo),e(z,dSo),e(z,a2),e(a2,The),e(The,cSo),e(a2,fSo),e(a2,RO),e(RO,mSo),e(a2,gSo),e(z,hSo),e(z,n2),e(n2,Mhe),e(Mhe,pSo),e(n2,_So),e(n2,PO),e(PO,uSo),e(n2,bSo),e(z,vSo),e(z,s2),e(s2,Ehe),e(Ehe,FSo),e(s2,TSo),e(s2,BO),e(BO,MSo),e(s2,ESo),e(z,CSo),e(z,l2),e(l2,Che),e(Che,wSo),e(l2,ASo),e(l2,IO),e(IO,LSo),e(l2,ySo),e(z,xSo),e(z,i2),e(i2,whe),e(whe,$So),e(i2,kSo),e(i2,NO),e(NO,SSo),e(i2,RSo),e(z,PSo),e(z,d2),e(d2,Ahe),e(Ahe,BSo),e(d2,ISo),e(d2,qO),e(qO,NSo),e(d2,qSo),e(z,jSo),e(z,c2),e(c2,Lhe),e(Lhe,DSo),e(c2,GSo),e(c2,jO),e(jO,OSo),e(c2,VSo),e(z,XSo),e(z,f2),e(f2,yhe),e(yhe,zSo),e(f2,WSo),e(f2,DO),e(DO,QSo),e(f2,HSo),e(z,USo),e(z,m2),e(m2,xhe),e(xhe,JSo),e(m2,YSo),e(m2,GO),e(GO,KSo),e(m2,ZSo),e(z,eRo),e(z,g2),e(g2,$he),e($he,oRo),e(g2,rRo),e(g2,OO),e(OO,tRo),e(g2,aRo),e(z,nRo),e(z,h2),e(h2,khe),e(khe,sRo),e(h2,lRo),e(h2,VO),e(VO,iRo),e(h2,dRo),e(z,cRo),e(z,p2),e(p2,She),e(She,fRo),e(p2,mRo),e(p2,XO),e(XO,gRo),e(p2,hRo),e(z,pRo),e(z,_2),e(_2,Rhe),e(Rhe,_Ro),e(_2,uRo),e(_2,zO),e(zO,bRo),e(_2,vRo),e(z,FRo),e(z,u2),e(u2,Phe),e(Phe,TRo),e(u2,MRo),e(u2,WO),e(WO,ERo),e(u2,CRo),e(z,wRo),e(z,b2),e(b2,Bhe),e(Bhe,ARo),e(b2,LRo),e(b2,QO),e(QO,yRo),e(b2,xRo),e(z,$Ro),e(z,v2),e(v2,Ihe),e(Ihe,kRo),e(v2,SRo),e(v2,HO),e(HO,RRo),e(v2,PRo),e(z,BRo),e(z,F2),e(F2,Nhe),e(Nhe,IRo),e(F2,NRo),e(F2,UO),e(UO,qRo),e(F2,jRo),e(z,DRo),e(z,T2),e(T2,qhe),e(qhe,GRo),e(T2,ORo),e(T2,JO),e(JO,VRo),e(T2,XRo),e(z,zRo),e(z,M2),e(M2,jhe),e(jhe,WRo),e(M2,QRo),e(M2,YO),e(YO,HRo),e(M2,URo),e(z,JRo),e(z,E2),e(E2,Dhe),e(Dhe,YRo),e(E2,KRo),e(E2,KO),e(KO,ZRo),e(E2,ePo),e(z,oPo),e(z,C2),e(C2,Ghe),e(Ghe,rPo),e(C2,tPo),e(C2,ZO),e(ZO,aPo),e(C2,nPo),e(z,sPo),e(z,w2),e(w2,Ohe),e(Ohe,lPo),e(w2,iPo),e(w2,eV),e(eV,dPo),e(w2,cPo),e(z,fPo),e(z,A2),e(A2,Vhe),e(Vhe,mPo),e(A2,gPo),e(A2,oV),e(oV,hPo),e(A2,pPo),e(z,_Po),e(z,L2),e(L2,Xhe),e(Xhe,uPo),e(L2,bPo),e(L2,rV),e(rV,vPo),e(L2,FPo),e(z,TPo),e(z,y2),e(y2,zhe),e(zhe,MPo),e(y2,EPo),e(y2,tV),e(tV,CPo),e(y2,wPo),e(z,APo),e(z,x2),e(x2,Whe),e(Whe,LPo),e(x2,yPo),e(x2,aV),e(aV,xPo),e(x2,$Po),e(z,kPo),e(z,$2),e($2,Qhe),e(Qhe,SPo),e($2,RPo),e($2,nV),e(nV,PPo),e($2,BPo),e(z,IPo),e(z,k2),e(k2,Hhe),e(Hhe,NPo),e(k2,qPo),e(k2,sV),e(sV,jPo),e(k2,DPo),e(z,GPo),e(z,S2),e(S2,Uhe),e(Uhe,OPo),e(S2,VPo),e(S2,lV),e(lV,XPo),e(S2,zPo),e(z,WPo),e(z,R2),e(R2,Jhe),e(Jhe,QPo),e(R2,HPo),e(R2,iV),e(iV,UPo),e(R2,JPo),e(z,YPo),e(z,P2),e(P2,Yhe),e(Yhe,KPo),e(P2,ZPo),e(P2,dV),e(dV,eBo),e(P2,oBo),e(z,rBo),e(z,B2),e(B2,Khe),e(Khe,tBo),e(B2,aBo),e(B2,cV),e(cV,nBo),e(B2,sBo),e(z,lBo),e(z,I2),e(I2,Zhe),e(Zhe,iBo),e(I2,dBo),e(I2,fV),e(fV,cBo),e(I2,fBo),e(z,mBo),e(z,N2),e(N2,epe),e(epe,gBo),e(N2,hBo),e(N2,mV),e(mV,pBo),e(N2,_Bo),e(z,uBo),e(z,q2),e(q2,ope),e(ope,bBo),e(q2,vBo),e(q2,gV),e(gV,FBo),e(q2,TBo),e(z,MBo),e(z,j2),e(j2,rpe),e(rpe,EBo),e(j2,CBo),e(j2,hV),e(hV,wBo),e(j2,ABo),e(Ze,LBo),e(Ze,D2),e(D2,yBo),e(D2,tpe),e(tpe,xBo),e(D2,$Bo),e(D2,ape),e(ape,kBo),e(Ze,SBo),M(G2,Ze,null),b(f,yze,u),b(f,Zi,u),e(Zi,O2),e(O2,npe),M(iy,npe,null),e(Zi,RBo),e(Zi,spe),e(spe,PBo),b(f,xze,u),b(f,Po,u),M(dy,Po,null),e(Po,BBo),e(Po,ed),e(ed,IBo),e(ed,pV),e(pV,NBo),e(ed,qBo),e(ed,_V),e(_V,jBo),e(ed,DBo),e(Po,GBo),e(Po,cy),e(cy,OBo),e(cy,lpe),e(lpe,VBo),e(cy,XBo),e(Po,zBo),e(Po,ft),M(fy,ft,null),e(ft,WBo),e(ft,ipe),e(ipe,QBo),e(ft,HBo),e(ft,od),e(od,UBo),e(od,dpe),e(dpe,JBo),e(od,YBo),e(od,uV),e(uV,KBo),e(od,ZBo),e(ft,eIo),M(V2,ft,null),e(Po,oIo),e(Po,eo),M(my,eo,null),e(eo,rIo),e(eo,cpe),e(cpe,tIo),e(eo,aIo),e(eo,ja),e(ja,nIo),e(ja,fpe),e(fpe,sIo),e(ja,lIo),e(ja,mpe),e(mpe,iIo),e(ja,dIo),e(ja,gpe),e(gpe,cIo),e(ja,fIo),e(eo,mIo),e(eo,Q),e(Q,X2),e(X2,hpe),e(hpe,gIo),e(X2,hIo),e(X2,bV),e(bV,pIo),e(X2,_Io),e(Q,uIo),e(Q,z2),e(z2,ppe),e(ppe,bIo),e(z2,vIo),e(z2,vV),e(vV,FIo),e(z2,TIo),e(Q,MIo),e(Q,W2),e(W2,_pe),e(_pe,EIo),e(W2,CIo),e(W2,FV),e(FV,wIo),e(W2,AIo),e(Q,LIo),e(Q,Q2),e(Q2,upe),e(upe,yIo),e(Q2,xIo),e(Q2,TV),e(TV,$Io),e(Q2,kIo),e(Q,SIo),e(Q,H2),e(H2,bpe),e(bpe,RIo),e(H2,PIo),e(H2,MV),e(MV,BIo),e(H2,IIo),e(Q,NIo),e(Q,U2),e(U2,vpe),e(vpe,qIo),e(U2,jIo),e(U2,EV),e(EV,DIo),e(U2,GIo),e(Q,OIo),e(Q,J2),e(J2,Fpe),e(Fpe,VIo),e(J2,XIo),e(J2,CV),e(CV,zIo),e(J2,WIo),e(Q,QIo),e(Q,Y2),e(Y2,Tpe),e(Tpe,HIo),e(Y2,UIo),e(Y2,wV),e(wV,JIo),e(Y2,YIo),e(Q,KIo),e(Q,K2),e(K2,Mpe),e(Mpe,ZIo),e(K2,eNo),e(K2,AV),e(AV,oNo),e(K2,rNo),e(Q,tNo),e(Q,Z2),e(Z2,Epe),e(Epe,aNo),e(Z2,nNo),e(Z2,LV),e(LV,sNo),e(Z2,lNo),e(Q,iNo),e(Q,eb),e(eb,Cpe),e(Cpe,dNo),e(eb,cNo),e(eb,yV),e(yV,fNo),e(eb,mNo),e(Q,gNo),e(Q,ob),e(ob,wpe),e(wpe,hNo),e(ob,pNo),e(ob,xV),e(xV,_No),e(ob,uNo),e(Q,bNo),e(Q,rb),e(rb,Ape),e(Ape,vNo),e(rb,FNo),e(rb,$V),e($V,TNo),e(rb,MNo),e(Q,ENo),e(Q,tb),e(tb,Lpe),e(Lpe,CNo),e(tb,wNo),e(tb,kV),e(kV,ANo),e(tb,LNo),e(Q,yNo),e(Q,ab),e(ab,ype),e(ype,xNo),e(ab,$No),e(ab,SV),e(SV,kNo),e(ab,SNo),e(Q,RNo),e(Q,nb),e(nb,xpe),e(xpe,PNo),e(nb,BNo),e(nb,RV),e(RV,INo),e(nb,NNo),e(Q,qNo),e(Q,sb),e(sb,$pe),e($pe,jNo),e(sb,DNo),e(sb,PV),e(PV,GNo),e(sb,ONo),e(Q,VNo),e(Q,lb),e(lb,kpe),e(kpe,XNo),e(lb,zNo),e(lb,BV),e(BV,WNo),e(lb,QNo),e(Q,HNo),e(Q,ib),e(ib,Spe),e(Spe,UNo),e(ib,JNo),e(ib,IV),e(IV,YNo),e(ib,KNo),e(Q,ZNo),e(Q,db),e(db,Rpe),e(Rpe,eqo),e(db,oqo),e(db,NV),e(NV,rqo),e(db,tqo),e(Q,aqo),e(Q,cb),e(cb,Ppe),e(Ppe,nqo),e(cb,sqo),e(cb,qV),e(qV,lqo),e(cb,iqo),e(Q,dqo),e(Q,fb),e(fb,Bpe),e(Bpe,cqo),e(fb,fqo),e(fb,jV),e(jV,mqo),e(fb,gqo),e(Q,hqo),e(Q,mb),e(mb,Ipe),e(Ipe,pqo),e(mb,_qo),e(mb,DV),e(DV,uqo),e(mb,bqo),e(Q,vqo),e(Q,gb),e(gb,Npe),e(Npe,Fqo),e(gb,Tqo),e(gb,GV),e(GV,Mqo),e(gb,Eqo),e(Q,Cqo),e(Q,hb),e(hb,qpe),e(qpe,wqo),e(hb,Aqo),e(hb,OV),e(OV,Lqo),e(hb,yqo),e(Q,xqo),e(Q,pb),e(pb,jpe),e(jpe,$qo),e(pb,kqo),e(pb,VV),e(VV,Sqo),e(pb,Rqo),e(Q,Pqo),e(Q,_b),e(_b,Dpe),e(Dpe,Bqo),e(_b,Iqo),e(_b,XV),e(XV,Nqo),e(_b,qqo),e(Q,jqo),e(Q,ub),e(ub,Gpe),e(Gpe,Dqo),e(ub,Gqo),e(ub,zV),e(zV,Oqo),e(ub,Vqo),e(Q,Xqo),e(Q,bb),e(bb,Ope),e(Ope,zqo),e(bb,Wqo),e(bb,WV),e(WV,Qqo),e(bb,Hqo),e(Q,Uqo),e(Q,vb),e(vb,Vpe),e(Vpe,Jqo),e(vb,Yqo),e(vb,QV),e(QV,Kqo),e(vb,Zqo),e(Q,ejo),e(Q,Fb),e(Fb,Xpe),e(Xpe,ojo),e(Fb,rjo),e(Fb,HV),e(HV,tjo),e(Fb,ajo),e(Q,njo),e(Q,Tb),e(Tb,zpe),e(zpe,sjo),e(Tb,ljo),e(Tb,UV),e(UV,ijo),e(Tb,djo),e(Q,cjo),e(Q,Mb),e(Mb,Wpe),e(Wpe,fjo),e(Mb,mjo),e(Mb,JV),e(JV,gjo),e(Mb,hjo),e(Q,pjo),e(Q,Eb),e(Eb,Qpe),e(Qpe,_jo),e(Eb,ujo),e(Eb,Hpe),e(Hpe,bjo),e(Eb,vjo),e(Q,Fjo),e(Q,Cb),e(Cb,Upe),e(Upe,Tjo),e(Cb,Mjo),e(Cb,YV),e(YV,Ejo),e(Cb,Cjo),e(Q,wjo),e(Q,wb),e(wb,Jpe),e(Jpe,Ajo),e(wb,Ljo),e(wb,KV),e(KV,yjo),e(wb,xjo),e(Q,$jo),e(Q,Ab),e(Ab,Ype),e(Ype,kjo),e(Ab,Sjo),e(Ab,ZV),e(ZV,Rjo),e(Ab,Pjo),e(Q,Bjo),e(Q,Lb),e(Lb,Kpe),e(Kpe,Ijo),e(Lb,Njo),e(Lb,eX),e(eX,qjo),e(Lb,jjo),e(eo,Djo),e(eo,yb),e(yb,Gjo),e(yb,Zpe),e(Zpe,Ojo),e(yb,Vjo),e(yb,e_e),e(e_e,Xjo),e(eo,zjo),M(xb,eo,null),b(f,$ze,u),b(f,rd,u),e(rd,$b),e($b,o_e),M(gy,o_e,null),e(rd,Wjo),e(rd,r_e),e(r_e,Qjo),b(f,kze,u),b(f,Bo,u),M(hy,Bo,null),e(Bo,Hjo),e(Bo,td),e(td,Ujo),e(td,oX),e(oX,Jjo),e(td,Yjo),e(td,rX),e(rX,Kjo),e(td,Zjo),e(Bo,eDo),e(Bo,py),e(py,oDo),e(py,t_e),e(t_e,rDo),e(py,tDo),e(Bo,aDo),e(Bo,mt),M(_y,mt,null),e(mt,nDo),e(mt,a_e),e(a_e,sDo),e(mt,lDo),e(mt,ad),e(ad,iDo),e(ad,n_e),e(n_e,dDo),e(ad,cDo),e(ad,tX),e(tX,fDo),e(ad,mDo),e(mt,gDo),M(kb,mt,null),e(Bo,hDo),e(Bo,oo),M(uy,oo,null),e(oo,pDo),e(oo,s_e),e(s_e,_Do),e(oo,uDo),e(oo,Da),e(Da,bDo),e(Da,l_e),e(l_e,vDo),e(Da,FDo),e(Da,i_e),e(i_e,TDo),e(Da,MDo),e(Da,d_e),e(d_e,EDo),e(Da,CDo),e(oo,wDo),e(oo,me),e(me,Sb),e(Sb,c_e),e(c_e,ADo),e(Sb,LDo),e(Sb,aX),e(aX,yDo),e(Sb,xDo),e(me,$Do),e(me,Rb),e(Rb,f_e),e(f_e,kDo),e(Rb,SDo),e(Rb,nX),e(nX,RDo),e(Rb,PDo),e(me,BDo),e(me,Pb),e(Pb,m_e),e(m_e,IDo),e(Pb,NDo),e(Pb,sX),e(sX,qDo),e(Pb,jDo),e(me,DDo),e(me,Bb),e(Bb,g_e),e(g_e,GDo),e(Bb,ODo),e(Bb,lX),e(lX,VDo),e(Bb,XDo),e(me,zDo),e(me,Ib),e(Ib,h_e),e(h_e,WDo),e(Ib,QDo),e(Ib,iX),e(iX,HDo),e(Ib,UDo),e(me,JDo),e(me,Nb),e(Nb,p_e),e(p_e,YDo),e(Nb,KDo),e(Nb,dX),e(dX,ZDo),e(Nb,eGo),e(me,oGo),e(me,qb),e(qb,__e),e(__e,rGo),e(qb,tGo),e(qb,cX),e(cX,aGo),e(qb,nGo),e(me,sGo),e(me,jb),e(jb,u_e),e(u_e,lGo),e(jb,iGo),e(jb,fX),e(fX,dGo),e(jb,cGo),e(me,fGo),e(me,Db),e(Db,b_e),e(b_e,mGo),e(Db,gGo),e(Db,mX),e(mX,hGo),e(Db,pGo),e(me,_Go),e(me,Gb),e(Gb,v_e),e(v_e,uGo),e(Gb,bGo),e(Gb,gX),e(gX,vGo),e(Gb,FGo),e(me,TGo),e(me,Ob),e(Ob,F_e),e(F_e,MGo),e(Ob,EGo),e(Ob,hX),e(hX,CGo),e(Ob,wGo),e(me,AGo),e(me,Vb),e(Vb,T_e),e(T_e,LGo),e(Vb,yGo),e(Vb,pX),e(pX,xGo),e(Vb,$Go),e(me,kGo),e(me,Xb),e(Xb,M_e),e(M_e,SGo),e(Xb,RGo),e(Xb,_X),e(_X,PGo),e(Xb,BGo),e(me,IGo),e(me,zb),e(zb,E_e),e(E_e,NGo),e(zb,qGo),e(zb,uX),e(uX,jGo),e(zb,DGo),e(me,GGo),e(me,Wb),e(Wb,C_e),e(C_e,OGo),e(Wb,VGo),e(Wb,bX),e(bX,XGo),e(Wb,zGo),e(me,WGo),e(me,Qb),e(Qb,w_e),e(w_e,QGo),e(Qb,HGo),e(Qb,vX),e(vX,UGo),e(Qb,JGo),e(me,YGo),e(me,Hb),e(Hb,A_e),e(A_e,KGo),e(Hb,ZGo),e(Hb,FX),e(FX,eOo),e(Hb,oOo),e(me,rOo),e(me,Ub),e(Ub,L_e),e(L_e,tOo),e(Ub,aOo),e(Ub,TX),e(TX,nOo),e(Ub,sOo),e(me,lOo),e(me,Jb),e(Jb,y_e),e(y_e,iOo),e(Jb,dOo),e(Jb,MX),e(MX,cOo),e(Jb,fOo),e(oo,mOo),e(oo,Yb),e(Yb,gOo),e(Yb,x_e),e(x_e,hOo),e(Yb,pOo),e(Yb,$_e),e($_e,_Oo),e(oo,uOo),M(Kb,oo,null),b(f,Sze,u),b(f,nd,u),e(nd,Zb),e(Zb,k_e),M(by,k_e,null),e(nd,bOo),e(nd,S_e),e(S_e,vOo),b(f,Rze,u),b(f,Io,u),M(vy,Io,null),e(Io,FOo),e(Io,sd),e(sd,TOo),e(sd,EX),e(EX,MOo),e(sd,EOo),e(sd,CX),e(CX,COo),e(sd,wOo),e(Io,AOo),e(Io,Fy),e(Fy,LOo),e(Fy,R_e),e(R_e,yOo),e(Fy,xOo),e(Io,$Oo),e(Io,gt),M(Ty,gt,null),e(gt,kOo),e(gt,P_e),e(P_e,SOo),e(gt,ROo),e(gt,ld),e(ld,POo),e(ld,B_e),e(B_e,BOo),e(ld,IOo),e(ld,wX),e(wX,NOo),e(ld,qOo),e(gt,jOo),M(ev,gt,null),e(Io,DOo),e(Io,ro),M(My,ro,null),e(ro,GOo),e(ro,I_e),e(I_e,OOo),e(ro,VOo),e(ro,Ga),e(Ga,XOo),e(Ga,N_e),e(N_e,zOo),e(Ga,WOo),e(Ga,q_e),e(q_e,QOo),e(Ga,HOo),e(Ga,j_e),e(j_e,UOo),e(Ga,JOo),e(ro,YOo),e(ro,B),e(B,ov),e(ov,D_e),e(D_e,KOo),e(ov,ZOo),e(ov,AX),e(AX,eVo),e(ov,oVo),e(B,rVo),e(B,rv),e(rv,G_e),e(G_e,tVo),e(rv,aVo),e(rv,LX),e(LX,nVo),e(rv,sVo),e(B,lVo),e(B,tv),e(tv,O_e),e(O_e,iVo),e(tv,dVo),e(tv,yX),e(yX,cVo),e(tv,fVo),e(B,mVo),e(B,av),e(av,V_e),e(V_e,gVo),e(av,hVo),e(av,xX),e(xX,pVo),e(av,_Vo),e(B,uVo),e(B,nv),e(nv,X_e),e(X_e,bVo),e(nv,vVo),e(nv,$X),e($X,FVo),e(nv,TVo),e(B,MVo),e(B,sv),e(sv,z_e),e(z_e,EVo),e(sv,CVo),e(sv,kX),e(kX,wVo),e(sv,AVo),e(B,LVo),e(B,lv),e(lv,W_e),e(W_e,yVo),e(lv,xVo),e(lv,SX),e(SX,$Vo),e(lv,kVo),e(B,SVo),e(B,iv),e(iv,Q_e),e(Q_e,RVo),e(iv,PVo),e(iv,RX),e(RX,BVo),e(iv,IVo),e(B,NVo),e(B,dv),e(dv,H_e),e(H_e,qVo),e(dv,jVo),e(dv,PX),e(PX,DVo),e(dv,GVo),e(B,OVo),e(B,cv),e(cv,U_e),e(U_e,VVo),e(cv,XVo),e(cv,BX),e(BX,zVo),e(cv,WVo),e(B,QVo),e(B,fv),e(fv,J_e),e(J_e,HVo),e(fv,UVo),e(fv,IX),e(IX,JVo),e(fv,YVo),e(B,KVo),e(B,mv),e(mv,Y_e),e(Y_e,ZVo),e(mv,eXo),e(mv,NX),e(NX,oXo),e(mv,rXo),e(B,tXo),e(B,gv),e(gv,K_e),e(K_e,aXo),e(gv,nXo),e(gv,qX),e(qX,sXo),e(gv,lXo),e(B,iXo),e(B,hv),e(hv,Z_e),e(Z_e,dXo),e(hv,cXo),e(hv,jX),e(jX,fXo),e(hv,mXo),e(B,gXo),e(B,pv),e(pv,eue),e(eue,hXo),e(pv,pXo),e(pv,DX),e(DX,_Xo),e(pv,uXo),e(B,bXo),e(B,_v),e(_v,oue),e(oue,vXo),e(_v,FXo),e(_v,GX),e(GX,TXo),e(_v,MXo),e(B,EXo),e(B,uv),e(uv,rue),e(rue,CXo),e(uv,wXo),e(uv,OX),e(OX,AXo),e(uv,LXo),e(B,yXo),e(B,bv),e(bv,tue),e(tue,xXo),e(bv,$Xo),e(bv,VX),e(VX,kXo),e(bv,SXo),e(B,RXo),e(B,vv),e(vv,aue),e(aue,PXo),e(vv,BXo),e(vv,XX),e(XX,IXo),e(vv,NXo),e(B,qXo),e(B,Fv),e(Fv,nue),e(nue,jXo),e(Fv,DXo),e(Fv,zX),e(zX,GXo),e(Fv,OXo),e(B,VXo),e(B,Tv),e(Tv,sue),e(sue,XXo),e(Tv,zXo),e(Tv,WX),e(WX,WXo),e(Tv,QXo),e(B,HXo),e(B,Mv),e(Mv,lue),e(lue,UXo),e(Mv,JXo),e(Mv,QX),e(QX,YXo),e(Mv,KXo),e(B,ZXo),e(B,Ev),e(Ev,iue),e(iue,ezo),e(Ev,ozo),e(Ev,HX),e(HX,rzo),e(Ev,tzo),e(B,azo),e(B,Cv),e(Cv,due),e(due,nzo),e(Cv,szo),e(Cv,UX),e(UX,lzo),e(Cv,izo),e(B,dzo),e(B,wv),e(wv,cue),e(cue,czo),e(wv,fzo),e(wv,JX),e(JX,mzo),e(wv,gzo),e(B,hzo),e(B,Av),e(Av,fue),e(fue,pzo),e(Av,_zo),e(Av,YX),e(YX,uzo),e(Av,bzo),e(B,vzo),e(B,Lv),e(Lv,mue),e(mue,Fzo),e(Lv,Tzo),e(Lv,KX),e(KX,Mzo),e(Lv,Ezo),e(B,Czo),e(B,yv),e(yv,gue),e(gue,wzo),e(yv,Azo),e(yv,ZX),e(ZX,Lzo),e(yv,yzo),e(B,xzo),e(B,xv),e(xv,hue),e(hue,$zo),e(xv,kzo),e(xv,ez),e(ez,Szo),e(xv,Rzo),e(B,Pzo),e(B,$v),e($v,pue),e(pue,Bzo),e($v,Izo),e($v,oz),e(oz,Nzo),e($v,qzo),e(B,jzo),e(B,kv),e(kv,_ue),e(_ue,Dzo),e(kv,Gzo),e(kv,rz),e(rz,Ozo),e(kv,Vzo),e(B,Xzo),e(B,Sv),e(Sv,uue),e(uue,zzo),e(Sv,Wzo),e(Sv,tz),e(tz,Qzo),e(Sv,Hzo),e(B,Uzo),e(B,Rv),e(Rv,bue),e(bue,Jzo),e(Rv,Yzo),e(Rv,az),e(az,Kzo),e(Rv,Zzo),e(B,eWo),e(B,Pv),e(Pv,vue),e(vue,oWo),e(Pv,rWo),e(Pv,nz),e(nz,tWo),e(Pv,aWo),e(B,nWo),e(B,Bv),e(Bv,Fue),e(Fue,sWo),e(Bv,lWo),e(Bv,sz),e(sz,iWo),e(Bv,dWo),e(B,cWo),e(B,Iv),e(Iv,Tue),e(Tue,fWo),e(Iv,mWo),e(Iv,lz),e(lz,gWo),e(Iv,hWo),e(B,pWo),e(B,Nv),e(Nv,Mue),e(Mue,_Wo),e(Nv,uWo),e(Nv,iz),e(iz,bWo),e(Nv,vWo),e(B,FWo),e(B,qv),e(qv,Eue),e(Eue,TWo),e(qv,MWo),e(qv,dz),e(dz,EWo),e(qv,CWo),e(B,wWo),e(B,jv),e(jv,Cue),e(Cue,AWo),e(jv,LWo),e(jv,cz),e(cz,yWo),e(jv,xWo),e(B,$Wo),e(B,Dv),e(Dv,wue),e(wue,kWo),e(Dv,SWo),e(Dv,fz),e(fz,RWo),e(Dv,PWo),e(B,BWo),e(B,Gv),e(Gv,Aue),e(Aue,IWo),e(Gv,NWo),e(Gv,mz),e(mz,qWo),e(Gv,jWo),e(B,DWo),e(B,Ov),e(Ov,Lue),e(Lue,GWo),e(Ov,OWo),e(Ov,gz),e(gz,VWo),e(Ov,XWo),e(B,zWo),e(B,Vv),e(Vv,yue),e(yue,WWo),e(Vv,QWo),e(Vv,hz),e(hz,HWo),e(Vv,UWo),e(B,JWo),e(B,Xv),e(Xv,xue),e(xue,YWo),e(Xv,KWo),e(Xv,pz),e(pz,ZWo),e(Xv,eQo),e(B,oQo),e(B,zv),e(zv,$ue),e($ue,rQo),e(zv,tQo),e(zv,_z),e(_z,aQo),e(zv,nQo),e(B,sQo),e(B,Wv),e(Wv,kue),e(kue,lQo),e(Wv,iQo),e(Wv,uz),e(uz,dQo),e(Wv,cQo),e(B,fQo),e(B,Qv),e(Qv,Sue),e(Sue,mQo),e(Qv,gQo),e(Qv,bz),e(bz,hQo),e(Qv,pQo),e(B,_Qo),e(B,Hv),e(Hv,Rue),e(Rue,uQo),e(Hv,bQo),e(Hv,vz),e(vz,vQo),e(Hv,FQo),e(B,TQo),e(B,Uv),e(Uv,Pue),e(Pue,MQo),e(Uv,EQo),e(Uv,Fz),e(Fz,CQo),e(Uv,wQo),e(B,AQo),e(B,Jv),e(Jv,Bue),e(Bue,LQo),e(Jv,yQo),e(Jv,Tz),e(Tz,xQo),e(Jv,$Qo),e(B,kQo),e(B,Yv),e(Yv,Iue),e(Iue,SQo),e(Yv,RQo),e(Yv,Mz),e(Mz,PQo),e(Yv,BQo),e(ro,IQo),e(ro,Kv),e(Kv,NQo),e(Kv,Nue),e(Nue,qQo),e(Kv,jQo),e(Kv,que),e(que,DQo),e(ro,GQo),M(Zv,ro,null),b(f,Pze,u),b(f,id,u),e(id,e3),e(e3,jue),M(Ey,jue,null),e(id,OQo),e(id,Due),e(Due,VQo),b(f,Bze,u),b(f,No,u),M(Cy,No,null),e(No,XQo),e(No,dd),e(dd,zQo),e(dd,Ez),e(Ez,WQo),e(dd,QQo),e(dd,Cz),e(Cz,HQo),e(dd,UQo),e(No,JQo),e(No,wy),e(wy,YQo),e(wy,Gue),e(Gue,KQo),e(wy,ZQo),e(No,eHo),e(No,ht),M(Ay,ht,null),e(ht,oHo),e(ht,Oue),e(Oue,rHo),e(ht,tHo),e(ht,cd),e(cd,aHo),e(cd,Vue),e(Vue,nHo),e(cd,sHo),e(cd,wz),e(wz,lHo),e(cd,iHo),e(ht,dHo),M(o3,ht,null),e(No,cHo),e(No,to),M(Ly,to,null),e(to,fHo),e(to,Xue),e(Xue,mHo),e(to,gHo),e(to,Oa),e(Oa,hHo),e(Oa,zue),e(zue,pHo),e(Oa,_Ho),e(Oa,Wue),e(Wue,uHo),e(Oa,bHo),e(Oa,Que),e(Que,vHo),e(Oa,FHo),e(to,THo),e(to,Z),e(Z,r3),e(r3,Hue),e(Hue,MHo),e(r3,EHo),e(r3,Az),e(Az,CHo),e(r3,wHo),e(Z,AHo),e(Z,t3),e(t3,Uue),e(Uue,LHo),e(t3,yHo),e(t3,Lz),e(Lz,xHo),e(t3,$Ho),e(Z,kHo),e(Z,a3),e(a3,Jue),e(Jue,SHo),e(a3,RHo),e(a3,yz),e(yz,PHo),e(a3,BHo),e(Z,IHo),e(Z,n3),e(n3,Yue),e(Yue,NHo),e(n3,qHo),e(n3,xz),e(xz,jHo),e(n3,DHo),e(Z,GHo),e(Z,s3),e(s3,Kue),e(Kue,OHo),e(s3,VHo),e(s3,$z),e($z,XHo),e(s3,zHo),e(Z,WHo),e(Z,l3),e(l3,Zue),e(Zue,QHo),e(l3,HHo),e(l3,kz),e(kz,UHo),e(l3,JHo),e(Z,YHo),e(Z,i3),e(i3,e1e),e(e1e,KHo),e(i3,ZHo),e(i3,Sz),e(Sz,eUo),e(i3,oUo),e(Z,rUo),e(Z,d3),e(d3,o1e),e(o1e,tUo),e(d3,aUo),e(d3,Rz),e(Rz,nUo),e(d3,sUo),e(Z,lUo),e(Z,c3),e(c3,r1e),e(r1e,iUo),e(c3,dUo),e(c3,Pz),e(Pz,cUo),e(c3,fUo),e(Z,mUo),e(Z,f3),e(f3,t1e),e(t1e,gUo),e(f3,hUo),e(f3,Bz),e(Bz,pUo),e(f3,_Uo),e(Z,uUo),e(Z,m3),e(m3,a1e),e(a1e,bUo),e(m3,vUo),e(m3,Iz),e(Iz,FUo),e(m3,TUo),e(Z,MUo),e(Z,g3),e(g3,n1e),e(n1e,EUo),e(g3,CUo),e(g3,Nz),e(Nz,wUo),e(g3,AUo),e(Z,LUo),e(Z,h3),e(h3,s1e),e(s1e,yUo),e(h3,xUo),e(h3,qz),e(qz,$Uo),e(h3,kUo),e(Z,SUo),e(Z,p3),e(p3,l1e),e(l1e,RUo),e(p3,PUo),e(p3,jz),e(jz,BUo),e(p3,IUo),e(Z,NUo),e(Z,_3),e(_3,i1e),e(i1e,qUo),e(_3,jUo),e(_3,Dz),e(Dz,DUo),e(_3,GUo),e(Z,OUo),e(Z,u3),e(u3,d1e),e(d1e,VUo),e(u3,XUo),e(u3,Gz),e(Gz,zUo),e(u3,WUo),e(Z,QUo),e(Z,b3),e(b3,c1e),e(c1e,HUo),e(b3,UUo),e(b3,Oz),e(Oz,JUo),e(b3,YUo),e(Z,KUo),e(Z,v3),e(v3,f1e),e(f1e,ZUo),e(v3,eJo),e(v3,Vz),e(Vz,oJo),e(v3,rJo),e(Z,tJo),e(Z,F3),e(F3,m1e),e(m1e,aJo),e(F3,nJo),e(F3,Xz),e(Xz,sJo),e(F3,lJo),e(Z,iJo),e(Z,T3),e(T3,g1e),e(g1e,dJo),e(T3,cJo),e(T3,zz),e(zz,fJo),e(T3,mJo),e(Z,gJo),e(Z,M3),e(M3,h1e),e(h1e,hJo),e(M3,pJo),e(M3,Wz),e(Wz,_Jo),e(M3,uJo),e(Z,bJo),e(Z,E3),e(E3,p1e),e(p1e,vJo),e(E3,FJo),e(E3,Qz),e(Qz,TJo),e(E3,MJo),e(Z,EJo),e(Z,C3),e(C3,_1e),e(_1e,CJo),e(C3,wJo),e(C3,Hz),e(Hz,AJo),e(C3,LJo),e(Z,yJo),e(Z,w3),e(w3,u1e),e(u1e,xJo),e(w3,$Jo),e(w3,Uz),e(Uz,kJo),e(w3,SJo),e(Z,RJo),e(Z,A3),e(A3,b1e),e(b1e,PJo),e(A3,BJo),e(A3,Jz),e(Jz,IJo),e(A3,NJo),e(Z,qJo),e(Z,L3),e(L3,v1e),e(v1e,jJo),e(L3,DJo),e(L3,Yz),e(Yz,GJo),e(L3,OJo),e(Z,VJo),e(Z,y3),e(y3,F1e),e(F1e,XJo),e(y3,zJo),e(y3,Kz),e(Kz,WJo),e(y3,QJo),e(Z,HJo),e(Z,x3),e(x3,T1e),e(T1e,UJo),e(x3,JJo),e(x3,Zz),e(Zz,YJo),e(x3,KJo),e(Z,ZJo),e(Z,$3),e($3,M1e),e(M1e,eYo),e($3,oYo),e($3,eW),e(eW,rYo),e($3,tYo),e(Z,aYo),e(Z,k3),e(k3,E1e),e(E1e,nYo),e(k3,sYo),e(k3,oW),e(oW,lYo),e(k3,iYo),e(to,dYo),e(to,S3),e(S3,cYo),e(S3,C1e),e(C1e,fYo),e(S3,mYo),e(S3,w1e),e(w1e,gYo),e(to,hYo),M(R3,to,null),b(f,Ize,u),b(f,fd,u),e(fd,P3),e(P3,A1e),M(yy,A1e,null),e(fd,pYo),e(fd,L1e),e(L1e,_Yo),b(f,Nze,u),b(f,qo,u),M(xy,qo,null),e(qo,uYo),e(qo,md),e(md,bYo),e(md,rW),e(rW,vYo),e(md,FYo),e(md,tW),e(tW,TYo),e(md,MYo),e(qo,EYo),e(qo,$y),e($y,CYo),e($y,y1e),e(y1e,wYo),e($y,AYo),e(qo,LYo),e(qo,pt),M(ky,pt,null),e(pt,yYo),e(pt,x1e),e(x1e,xYo),e(pt,$Yo),e(pt,gd),e(gd,kYo),e(gd,$1e),e($1e,SYo),e(gd,RYo),e(gd,aW),e(aW,PYo),e(gd,BYo),e(pt,IYo),M(B3,pt,null),e(qo,NYo),e(qo,ao),M(Sy,ao,null),e(ao,qYo),e(ao,k1e),e(k1e,jYo),e(ao,DYo),e(ao,Va),e(Va,GYo),e(Va,S1e),e(S1e,OYo),e(Va,VYo),e(Va,R1e),e(R1e,XYo),e(Va,zYo),e(Va,P1e),e(P1e,WYo),e(Va,QYo),e(ao,HYo),e(ao,jo),e(jo,I3),e(I3,B1e),e(B1e,UYo),e(I3,JYo),e(I3,nW),e(nW,YYo),e(I3,KYo),e(jo,ZYo),e(jo,N3),e(N3,I1e),e(I1e,eKo),e(N3,oKo),e(N3,sW),e(sW,rKo),e(N3,tKo),e(jo,aKo),e(jo,q3),e(q3,N1e),e(N1e,nKo),e(q3,sKo),e(q3,lW),e(lW,lKo),e(q3,iKo),e(jo,dKo),e(jo,j3),e(j3,q1e),e(q1e,cKo),e(j3,fKo),e(j3,iW),e(iW,mKo),e(j3,gKo),e(jo,hKo),e(jo,D3),e(D3,j1e),e(j1e,pKo),e(D3,_Ko),e(D3,dW),e(dW,uKo),e(D3,bKo),e(jo,vKo),e(jo,G3),e(G3,D1e),e(D1e,FKo),e(G3,TKo),e(G3,cW),e(cW,MKo),e(G3,EKo),e(ao,CKo),e(ao,O3),e(O3,wKo),e(O3,G1e),e(G1e,AKo),e(O3,LKo),e(O3,O1e),e(O1e,yKo),e(ao,xKo),M(V3,ao,null),b(f,qze,u),b(f,hd,u),e(hd,X3),e(X3,V1e),M(Ry,V1e,null),e(hd,$Ko),e(hd,X1e),e(X1e,kKo),b(f,jze,u),b(f,Do,u),M(Py,Do,null),e(Do,SKo),e(Do,pd),e(pd,RKo),e(pd,fW),e(fW,PKo),e(pd,BKo),e(pd,mW),e(mW,IKo),e(pd,NKo),e(Do,qKo),e(Do,By),e(By,jKo),e(By,z1e),e(z1e,DKo),e(By,GKo),e(Do,OKo),e(Do,_t),M(Iy,_t,null),e(_t,VKo),e(_t,W1e),e(W1e,XKo),e(_t,zKo),e(_t,_d),e(_d,WKo),e(_d,Q1e),e(Q1e,QKo),e(_d,HKo),e(_d,gW),e(gW,UKo),e(_d,JKo),e(_t,YKo),M(z3,_t,null),e(Do,KKo),e(Do,no),M(Ny,no,null),e(no,ZKo),e(no,H1e),e(H1e,eZo),e(no,oZo),e(no,Xa),e(Xa,rZo),e(Xa,U1e),e(U1e,tZo),e(Xa,aZo),e(Xa,J1e),e(J1e,nZo),e(Xa,sZo),e(Xa,Y1e),e(Y1e,lZo),e(Xa,iZo),e(no,dZo),e(no,J),e(J,W3),e(W3,K1e),e(K1e,cZo),e(W3,fZo),e(W3,hW),e(hW,mZo),e(W3,gZo),e(J,hZo),e(J,Q3),e(Q3,Z1e),e(Z1e,pZo),e(Q3,_Zo),e(Q3,pW),e(pW,uZo),e(Q3,bZo),e(J,vZo),e(J,H3),e(H3,e2e),e(e2e,FZo),e(H3,TZo),e(H3,_W),e(_W,MZo),e(H3,EZo),e(J,CZo),e(J,U3),e(U3,o2e),e(o2e,wZo),e(U3,AZo),e(U3,uW),e(uW,LZo),e(U3,yZo),e(J,xZo),e(J,J3),e(J3,r2e),e(r2e,$Zo),e(J3,kZo),e(J3,bW),e(bW,SZo),e(J3,RZo),e(J,PZo),e(J,Y3),e(Y3,t2e),e(t2e,BZo),e(Y3,IZo),e(Y3,vW),e(vW,NZo),e(Y3,qZo),e(J,jZo),e(J,K3),e(K3,a2e),e(a2e,DZo),e(K3,GZo),e(K3,FW),e(FW,OZo),e(K3,VZo),e(J,XZo),e(J,Z3),e(Z3,n2e),e(n2e,zZo),e(Z3,WZo),e(Z3,TW),e(TW,QZo),e(Z3,HZo),e(J,UZo),e(J,eF),e(eF,s2e),e(s2e,JZo),e(eF,YZo),e(eF,MW),e(MW,KZo),e(eF,ZZo),e(J,eer),e(J,oF),e(oF,l2e),e(l2e,oer),e(oF,rer),e(oF,EW),e(EW,ter),e(oF,aer),e(J,ner),e(J,rF),e(rF,i2e),e(i2e,ser),e(rF,ler),e(rF,CW),e(CW,ier),e(rF,der),e(J,cer),e(J,tF),e(tF,d2e),e(d2e,fer),e(tF,mer),e(tF,wW),e(wW,ger),e(tF,her),e(J,per),e(J,aF),e(aF,c2e),e(c2e,_er),e(aF,uer),e(aF,AW),e(AW,ber),e(aF,ver),e(J,Fer),e(J,nF),e(nF,f2e),e(f2e,Ter),e(nF,Mer),e(nF,LW),e(LW,Eer),e(nF,Cer),e(J,wer),e(J,sF),e(sF,m2e),e(m2e,Aer),e(sF,Ler),e(sF,yW),e(yW,yer),e(sF,xer),e(J,$er),e(J,lF),e(lF,g2e),e(g2e,ker),e(lF,Ser),e(lF,xW),e(xW,Rer),e(lF,Per),e(J,Ber),e(J,iF),e(iF,h2e),e(h2e,Ier),e(iF,Ner),e(iF,$W),e($W,qer),e(iF,jer),e(J,Der),e(J,dF),e(dF,p2e),e(p2e,Ger),e(dF,Oer),e(dF,kW),e(kW,Ver),e(dF,Xer),e(J,zer),e(J,cF),e(cF,_2e),e(_2e,Wer),e(cF,Qer),e(cF,SW),e(SW,Her),e(cF,Uer),e(J,Jer),e(J,fF),e(fF,u2e),e(u2e,Yer),e(fF,Ker),e(fF,RW),e(RW,Zer),e(fF,eor),e(J,oor),e(J,mF),e(mF,b2e),e(b2e,ror),e(mF,tor),e(mF,PW),e(PW,aor),e(mF,nor),e(J,sor),e(J,gF),e(gF,v2e),e(v2e,lor),e(gF,ior),e(gF,BW),e(BW,dor),e(gF,cor),e(J,mor),e(J,hF),e(hF,F2e),e(F2e,gor),e(hF,hor),e(hF,IW),e(IW,por),e(hF,_or),e(J,uor),e(J,pF),e(pF,T2e),e(T2e,bor),e(pF,vor),e(pF,NW),e(NW,For),e(pF,Tor),e(J,Mor),e(J,_F),e(_F,M2e),e(M2e,Eor),e(_F,Cor),e(_F,qW),e(qW,wor),e(_F,Aor),e(J,Lor),e(J,uF),e(uF,E2e),e(E2e,yor),e(uF,xor),e(uF,jW),e(jW,$or),e(uF,kor),e(J,Sor),e(J,bF),e(bF,C2e),e(C2e,Ror),e(bF,Por),e(bF,DW),e(DW,Bor),e(bF,Ior),e(J,Nor),e(J,vF),e(vF,w2e),e(w2e,qor),e(vF,jor),e(vF,GW),e(GW,Dor),e(vF,Gor),e(J,Oor),e(J,FF),e(FF,A2e),e(A2e,Vor),e(FF,Xor),e(FF,OW),e(OW,zor),e(FF,Wor),e(J,Qor),e(J,TF),e(TF,L2e),e(L2e,Hor),e(TF,Uor),e(TF,VW),e(VW,Jor),e(TF,Yor),e(J,Kor),e(J,MF),e(MF,y2e),e(y2e,Zor),e(MF,err),e(MF,XW),e(XW,orr),e(MF,rrr),e(J,trr),e(J,EF),e(EF,x2e),e(x2e,arr),e(EF,nrr),e(EF,zW),e(zW,srr),e(EF,lrr),e(J,irr),e(J,CF),e(CF,$2e),e($2e,drr),e(CF,crr),e(CF,WW),e(WW,frr),e(CF,mrr),e(J,grr),e(J,wF),e(wF,k2e),e(k2e,hrr),e(wF,prr),e(wF,QW),e(QW,_rr),e(wF,urr),e(J,brr),e(J,AF),e(AF,S2e),e(S2e,vrr),e(AF,Frr),e(AF,HW),e(HW,Trr),e(AF,Mrr),e(J,Err),e(J,LF),e(LF,R2e),e(R2e,Crr),e(LF,wrr),e(LF,UW),e(UW,Arr),e(LF,Lrr),e(no,yrr),e(no,yF),e(yF,xrr),e(yF,P2e),e(P2e,$rr),e(yF,krr),e(yF,B2e),e(B2e,Srr),e(no,Rrr),M(xF,no,null),b(f,Dze,u),b(f,ud,u),e(ud,$F),e($F,I2e),M(qy,I2e,null),e(ud,Prr),e(ud,N2e),e(N2e,Brr),b(f,Gze,u),b(f,Go,u),M(jy,Go,null),e(Go,Irr),e(Go,bd),e(bd,Nrr),e(bd,JW),e(JW,qrr),e(bd,jrr),e(bd,YW),e(YW,Drr),e(bd,Grr),e(Go,Orr),e(Go,Dy),e(Dy,Vrr),e(Dy,q2e),e(q2e,Xrr),e(Dy,zrr),e(Go,Wrr),e(Go,ut),M(Gy,ut,null),e(ut,Qrr),e(ut,j2e),e(j2e,Hrr),e(ut,Urr),e(ut,vd),e(vd,Jrr),e(vd,D2e),e(D2e,Yrr),e(vd,Krr),e(vd,KW),e(KW,Zrr),e(vd,etr),e(ut,otr),M(kF,ut,null),e(Go,rtr),e(Go,so),M(Oy,so,null),e(so,ttr),e(so,G2e),e(G2e,atr),e(so,ntr),e(so,za),e(za,str),e(za,O2e),e(O2e,ltr),e(za,itr),e(za,V2e),e(V2e,dtr),e(za,ctr),e(za,X2e),e(X2e,ftr),e(za,mtr),e(so,gtr),e(so,V),e(V,SF),e(SF,z2e),e(z2e,htr),e(SF,ptr),e(SF,ZW),e(ZW,_tr),e(SF,utr),e(V,btr),e(V,RF),e(RF,W2e),e(W2e,vtr),e(RF,Ftr),e(RF,eQ),e(eQ,Ttr),e(RF,Mtr),e(V,Etr),e(V,PF),e(PF,Q2e),e(Q2e,Ctr),e(PF,wtr),e(PF,oQ),e(oQ,Atr),e(PF,Ltr),e(V,ytr),e(V,BF),e(BF,H2e),e(H2e,xtr),e(BF,$tr),e(BF,rQ),e(rQ,ktr),e(BF,Str),e(V,Rtr),e(V,IF),e(IF,U2e),e(U2e,Ptr),e(IF,Btr),e(IF,tQ),e(tQ,Itr),e(IF,Ntr),e(V,qtr),e(V,NF),e(NF,J2e),e(J2e,jtr),e(NF,Dtr),e(NF,aQ),e(aQ,Gtr),e(NF,Otr),e(V,Vtr),e(V,qF),e(qF,Y2e),e(Y2e,Xtr),e(qF,ztr),e(qF,nQ),e(nQ,Wtr),e(qF,Qtr),e(V,Htr),e(V,jF),e(jF,K2e),e(K2e,Utr),e(jF,Jtr),e(jF,sQ),e(sQ,Ytr),e(jF,Ktr),e(V,Ztr),e(V,DF),e(DF,Z2e),e(Z2e,ear),e(DF,oar),e(DF,lQ),e(lQ,rar),e(DF,tar),e(V,aar),e(V,GF),e(GF,ebe),e(ebe,nar),e(GF,sar),e(GF,iQ),e(iQ,lar),e(GF,iar),e(V,dar),e(V,OF),e(OF,obe),e(obe,car),e(OF,far),e(OF,dQ),e(dQ,mar),e(OF,gar),e(V,har),e(V,VF),e(VF,rbe),e(rbe,par),e(VF,_ar),e(VF,cQ),e(cQ,uar),e(VF,bar),e(V,Far),e(V,XF),e(XF,tbe),e(tbe,Tar),e(XF,Mar),e(XF,fQ),e(fQ,Ear),e(XF,Car),e(V,war),e(V,zF),e(zF,abe),e(abe,Aar),e(zF,Lar),e(zF,mQ),e(mQ,yar),e(zF,xar),e(V,$ar),e(V,WF),e(WF,nbe),e(nbe,kar),e(WF,Sar),e(WF,gQ),e(gQ,Rar),e(WF,Par),e(V,Bar),e(V,QF),e(QF,sbe),e(sbe,Iar),e(QF,Nar),e(QF,hQ),e(hQ,qar),e(QF,jar),e(V,Dar),e(V,HF),e(HF,lbe),e(lbe,Gar),e(HF,Oar),e(HF,pQ),e(pQ,Var),e(HF,Xar),e(V,zar),e(V,UF),e(UF,ibe),e(ibe,War),e(UF,Qar),e(UF,_Q),e(_Q,Har),e(UF,Uar),e(V,Jar),e(V,JF),e(JF,dbe),e(dbe,Yar),e(JF,Kar),e(JF,uQ),e(uQ,Zar),e(JF,enr),e(V,onr),e(V,YF),e(YF,cbe),e(cbe,rnr),e(YF,tnr),e(YF,bQ),e(bQ,anr),e(YF,nnr),e(V,snr),e(V,KF),e(KF,fbe),e(fbe,lnr),e(KF,inr),e(KF,vQ),e(vQ,dnr),e(KF,cnr),e(V,fnr),e(V,ZF),e(ZF,mbe),e(mbe,mnr),e(ZF,gnr),e(ZF,FQ),e(FQ,hnr),e(ZF,pnr),e(V,_nr),e(V,e6),e(e6,gbe),e(gbe,unr),e(e6,bnr),e(e6,TQ),e(TQ,vnr),e(e6,Fnr),e(V,Tnr),e(V,o6),e(o6,hbe),e(hbe,Mnr),e(o6,Enr),e(o6,MQ),e(MQ,Cnr),e(o6,wnr),e(V,Anr),e(V,r6),e(r6,pbe),e(pbe,Lnr),e(r6,ynr),e(r6,EQ),e(EQ,xnr),e(r6,$nr),e(V,knr),e(V,t6),e(t6,_be),e(_be,Snr),e(t6,Rnr),e(t6,CQ),e(CQ,Pnr),e(t6,Bnr),e(V,Inr),e(V,a6),e(a6,ube),e(ube,Nnr),e(a6,qnr),e(a6,wQ),e(wQ,jnr),e(a6,Dnr),e(V,Gnr),e(V,n6),e(n6,bbe),e(bbe,Onr),e(n6,Vnr),e(n6,AQ),e(AQ,Xnr),e(n6,znr),e(V,Wnr),e(V,s6),e(s6,vbe),e(vbe,Qnr),e(s6,Hnr),e(s6,LQ),e(LQ,Unr),e(s6,Jnr),e(V,Ynr),e(V,l6),e(l6,Fbe),e(Fbe,Knr),e(l6,Znr),e(l6,yQ),e(yQ,esr),e(l6,osr),e(V,rsr),e(V,i6),e(i6,Tbe),e(Tbe,tsr),e(i6,asr),e(i6,xQ),e(xQ,nsr),e(i6,ssr),e(V,lsr),e(V,d6),e(d6,Mbe),e(Mbe,isr),e(d6,dsr),e(d6,$Q),e($Q,csr),e(d6,fsr),e(V,msr),e(V,c6),e(c6,Ebe),e(Ebe,gsr),e(c6,hsr),e(c6,kQ),e(kQ,psr),e(c6,_sr),e(V,usr),e(V,f6),e(f6,Cbe),e(Cbe,bsr),e(f6,vsr),e(f6,SQ),e(SQ,Fsr),e(f6,Tsr),e(V,Msr),e(V,m6),e(m6,wbe),e(wbe,Esr),e(m6,Csr),e(m6,RQ),e(RQ,wsr),e(m6,Asr),e(V,Lsr),e(V,g6),e(g6,Abe),e(Abe,ysr),e(g6,xsr),e(g6,PQ),e(PQ,$sr),e(g6,ksr),e(V,Ssr),e(V,h6),e(h6,Lbe),e(Lbe,Rsr),e(h6,Psr),e(h6,BQ),e(BQ,Bsr),e(h6,Isr),e(V,Nsr),e(V,p6),e(p6,ybe),e(ybe,qsr),e(p6,jsr),e(p6,IQ),e(IQ,Dsr),e(p6,Gsr),e(V,Osr),e(V,_6),e(_6,xbe),e(xbe,Vsr),e(_6,Xsr),e(_6,NQ),e(NQ,zsr),e(_6,Wsr),e(V,Qsr),e(V,u6),e(u6,$be),e($be,Hsr),e(u6,Usr),e(u6,qQ),e(qQ,Jsr),e(u6,Ysr),e(V,Ksr),e(V,b6),e(b6,kbe),e(kbe,Zsr),e(b6,elr),e(b6,jQ),e(jQ,olr),e(b6,rlr),e(V,tlr),e(V,v6),e(v6,Sbe),e(Sbe,alr),e(v6,nlr),e(v6,DQ),e(DQ,slr),e(v6,llr),e(so,ilr),e(so,F6),e(F6,dlr),e(F6,Rbe),e(Rbe,clr),e(F6,flr),e(F6,Pbe),e(Pbe,mlr),e(so,glr),M(T6,so,null),b(f,Oze,u),b(f,Fd,u),e(Fd,M6),e(M6,Bbe),M(Vy,Bbe,null),e(Fd,hlr),e(Fd,Ibe),e(Ibe,plr),b(f,Vze,u),b(f,Oo,u),M(Xy,Oo,null),e(Oo,_lr),e(Oo,Td),e(Td,ulr),e(Td,GQ),e(GQ,blr),e(Td,vlr),e(Td,OQ),e(OQ,Flr),e(Td,Tlr),e(Oo,Mlr),e(Oo,zy),e(zy,Elr),e(zy,Nbe),e(Nbe,Clr),e(zy,wlr),e(Oo,Alr),e(Oo,bt),M(Wy,bt,null),e(bt,Llr),e(bt,qbe),e(qbe,ylr),e(bt,xlr),e(bt,Md),e(Md,$lr),e(Md,jbe),e(jbe,klr),e(Md,Slr),e(Md,VQ),e(VQ,Rlr),e(Md,Plr),e(bt,Blr),M(E6,bt,null),e(Oo,Ilr),e(Oo,lo),M(Qy,lo,null),e(lo,Nlr),e(lo,Dbe),e(Dbe,qlr),e(lo,jlr),e(lo,Wa),e(Wa,Dlr),e(Wa,Gbe),e(Gbe,Glr),e(Wa,Olr),e(Wa,Obe),e(Obe,Vlr),e(Wa,Xlr),e(Wa,Vbe),e(Vbe,zlr),e(Wa,Wlr),e(lo,Qlr),e(lo,Xbe),e(Xbe,C6),e(C6,zbe),e(zbe,Hlr),e(C6,Ulr),e(C6,XQ),e(XQ,Jlr),e(C6,Ylr),e(lo,Klr),e(lo,w6),e(w6,Zlr),e(w6,Wbe),e(Wbe,eir),e(w6,oir),e(w6,Qbe),e(Qbe,rir),e(lo,tir),M(A6,lo,null),b(f,Xze,u),b(f,Ed,u),e(Ed,L6),e(L6,Hbe),M(Hy,Hbe,null),e(Ed,air),e(Ed,Ube),e(Ube,nir),b(f,zze,u),b(f,Vo,u),M(Uy,Vo,null),e(Vo,sir),e(Vo,Cd),e(Cd,lir),e(Cd,zQ),e(zQ,iir),e(Cd,dir),e(Cd,WQ),e(WQ,cir),e(Cd,fir),e(Vo,mir),e(Vo,Jy),e(Jy,gir),e(Jy,Jbe),e(Jbe,hir),e(Jy,pir),e(Vo,_ir),e(Vo,vt),M(Yy,vt,null),e(vt,uir),e(vt,Ybe),e(Ybe,bir),e(vt,vir),e(vt,wd),e(wd,Fir),e(wd,Kbe),e(Kbe,Tir),e(wd,Mir),e(wd,QQ),e(QQ,Eir),e(wd,Cir),e(vt,wir),M(y6,vt,null),e(Vo,Air),e(Vo,io),M(Ky,io,null),e(io,Lir),e(io,Zbe),e(Zbe,yir),e(io,xir),e(io,Qa),e(Qa,$ir),e(Qa,eve),e(eve,kir),e(Qa,Sir),e(Qa,ove),e(ove,Rir),e(Qa,Pir),e(Qa,rve),e(rve,Bir),e(Qa,Iir),e(io,Nir),e(io,be),e(be,x6),e(x6,tve),e(tve,qir),e(x6,jir),e(x6,HQ),e(HQ,Dir),e(x6,Gir),e(be,Oir),e(be,$6),e($6,ave),e(ave,Vir),e($6,Xir),e($6,UQ),e(UQ,zir),e($6,Wir),e(be,Qir),e(be,k6),e(k6,nve),e(nve,Hir),e(k6,Uir),e(k6,JQ),e(JQ,Jir),e(k6,Yir),e(be,Kir),e(be,S6),e(S6,sve),e(sve,Zir),e(S6,edr),e(S6,YQ),e(YQ,odr),e(S6,rdr),e(be,tdr),e(be,Ys),e(Ys,lve),e(lve,adr),e(Ys,ndr),e(Ys,KQ),e(KQ,sdr),e(Ys,ldr),e(Ys,ZQ),e(ZQ,idr),e(Ys,ddr),e(be,cdr),e(be,R6),e(R6,ive),e(ive,fdr),e(R6,mdr),e(R6,eH),e(eH,gdr),e(R6,hdr),e(be,pdr),e(be,Ks),e(Ks,dve),e(dve,_dr),e(Ks,udr),e(Ks,oH),e(oH,bdr),e(Ks,vdr),e(Ks,rH),e(rH,Fdr),e(Ks,Tdr),e(be,Mdr),e(be,P6),e(P6,cve),e(cve,Edr),e(P6,Cdr),e(P6,tH),e(tH,wdr),e(P6,Adr),e(be,Ldr),e(be,Ft),e(Ft,fve),e(fve,ydr),e(Ft,xdr),e(Ft,aH),e(aH,$dr),e(Ft,kdr),e(Ft,nH),e(nH,Sdr),e(Ft,Rdr),e(Ft,sH),e(sH,Pdr),e(Ft,Bdr),e(be,Idr),e(be,B6),e(B6,mve),e(mve,Ndr),e(B6,qdr),e(B6,lH),e(lH,jdr),e(B6,Ddr),e(be,Gdr),e(be,I6),e(I6,gve),e(gve,Odr),e(I6,Vdr),e(I6,iH),e(iH,Xdr),e(I6,zdr),e(be,Wdr),e(be,N6),e(N6,hve),e(hve,Qdr),e(N6,Hdr),e(N6,dH),e(dH,Udr),e(N6,Jdr),e(be,Ydr),e(be,q6),e(q6,pve),e(pve,Kdr),e(q6,Zdr),e(q6,cH),e(cH,ecr),e(q6,ocr),e(be,rcr),e(be,j6),e(j6,_ve),e(_ve,tcr),e(j6,acr),e(j6,fH),e(fH,ncr),e(j6,scr),e(be,lcr),e(be,D6),e(D6,uve),e(uve,icr),e(D6,dcr),e(D6,mH),e(mH,ccr),e(D6,fcr),e(be,mcr),e(be,G6),e(G6,bve),e(bve,gcr),e(G6,hcr),e(G6,gH),e(gH,pcr),e(G6,_cr),e(be,ucr),e(be,O6),e(O6,vve),e(vve,bcr),e(O6,vcr),e(O6,hH),e(hH,Fcr),e(O6,Tcr),e(io,Mcr),e(io,V6),e(V6,Ecr),e(V6,Fve),e(Fve,Ccr),e(V6,wcr),e(V6,Tve),e(Tve,Acr),e(io,Lcr),M(X6,io,null),b(f,Wze,u),b(f,Ad,u),e(Ad,z6),e(z6,Mve),M(Zy,Mve,null),e(Ad,ycr),e(Ad,Eve),e(Eve,xcr),b(f,Qze,u),b(f,Xo,u),M(e9,Xo,null),e(Xo,$cr),e(Xo,Ld),e(Ld,kcr),e(Ld,pH),e(pH,Scr),e(Ld,Rcr),e(Ld,_H),e(_H,Pcr),e(Ld,Bcr),e(Xo,Icr),e(Xo,o9),e(o9,Ncr),e(o9,Cve),e(Cve,qcr),e(o9,jcr),e(Xo,Dcr),e(Xo,Tt),M(r9,Tt,null),e(Tt,Gcr),e(Tt,wve),e(wve,Ocr),e(Tt,Vcr),e(Tt,yd),e(yd,Xcr),e(yd,Ave),e(Ave,zcr),e(yd,Wcr),e(yd,uH),e(uH,Qcr),e(yd,Hcr),e(Tt,Ucr),M(W6,Tt,null),e(Xo,Jcr),e(Xo,co),M(t9,co,null),e(co,Ycr),e(co,Lve),e(Lve,Kcr),e(co,Zcr),e(co,Ha),e(Ha,efr),e(Ha,yve),e(yve,ofr),e(Ha,rfr),e(Ha,xve),e(xve,tfr),e(Ha,afr),e(Ha,$ve),e($ve,nfr),e(Ha,sfr),e(co,lfr),e(co,kve),e(kve,Q6),e(Q6,Sve),e(Sve,ifr),e(Q6,dfr),e(Q6,bH),e(bH,cfr),e(Q6,ffr),e(co,mfr),e(co,H6),e(H6,gfr),e(H6,Rve),e(Rve,hfr),e(H6,pfr),e(H6,Pve),e(Pve,_fr),e(co,ufr),M(U6,co,null),b(f,Hze,u),b(f,xd,u),e(xd,J6),e(J6,Bve),M(a9,Bve,null),e(xd,bfr),e(xd,Ive),e(Ive,vfr),b(f,Uze,u),b(f,zo,u),M(n9,zo,null),e(zo,Ffr),e(zo,$d),e($d,Tfr),e($d,vH),e(vH,Mfr),e($d,Efr),e($d,FH),e(FH,Cfr),e($d,wfr),e(zo,Afr),e(zo,s9),e(s9,Lfr),e(s9,Nve),e(Nve,yfr),e(s9,xfr),e(zo,$fr),e(zo,Mt),M(l9,Mt,null),e(Mt,kfr),e(Mt,qve),e(qve,Sfr),e(Mt,Rfr),e(Mt,kd),e(kd,Pfr),e(kd,jve),e(jve,Bfr),e(kd,Ifr),e(kd,TH),e(TH,Nfr),e(kd,qfr),e(Mt,jfr),M(Y6,Mt,null),e(zo,Dfr),e(zo,fo),M(i9,fo,null),e(fo,Gfr),e(fo,Dve),e(Dve,Ofr),e(fo,Vfr),e(fo,Ua),e(Ua,Xfr),e(Ua,Gve),e(Gve,zfr),e(Ua,Wfr),e(Ua,Ove),e(Ove,Qfr),e(Ua,Hfr),e(Ua,Vve),e(Vve,Ufr),e(Ua,Jfr),e(fo,Yfr),e(fo,Xve),e(Xve,K6),e(K6,zve),e(zve,Kfr),e(K6,Zfr),e(K6,MH),e(MH,emr),e(K6,omr),e(fo,rmr),e(fo,Z6),e(Z6,tmr),e(Z6,Wve),e(Wve,amr),e(Z6,nmr),e(Z6,Qve),e(Qve,smr),e(fo,lmr),M(eT,fo,null),b(f,Jze,u),b(f,Sd,u),e(Sd,oT),e(oT,Hve),M(d9,Hve,null),e(Sd,imr),e(Sd,Uve),e(Uve,dmr),b(f,Yze,u),b(f,Wo,u),M(c9,Wo,null),e(Wo,cmr),e(Wo,Rd),e(Rd,fmr),e(Rd,EH),e(EH,mmr),e(Rd,gmr),e(Rd,CH),e(CH,hmr),e(Rd,pmr),e(Wo,_mr),e(Wo,f9),e(f9,umr),e(f9,Jve),e(Jve,bmr),e(f9,vmr),e(Wo,Fmr),e(Wo,Et),M(m9,Et,null),e(Et,Tmr),e(Et,Yve),e(Yve,Mmr),e(Et,Emr),e(Et,Pd),e(Pd,Cmr),e(Pd,Kve),e(Kve,wmr),e(Pd,Amr),e(Pd,wH),e(wH,Lmr),e(Pd,ymr),e(Et,xmr),M(rT,Et,null),e(Wo,$mr),e(Wo,mo),M(g9,mo,null),e(mo,kmr),e(mo,Zve),e(Zve,Smr),e(mo,Rmr),e(mo,Ja),e(Ja,Pmr),e(Ja,e3e),e(e3e,Bmr),e(Ja,Imr),e(Ja,o3e),e(o3e,Nmr),e(Ja,qmr),e(Ja,r3e),e(r3e,jmr),e(Ja,Dmr),e(mo,Gmr),e(mo,Pe),e(Pe,tT),e(tT,t3e),e(t3e,Omr),e(tT,Vmr),e(tT,AH),e(AH,Xmr),e(tT,zmr),e(Pe,Wmr),e(Pe,aT),e(aT,a3e),e(a3e,Qmr),e(aT,Hmr),e(aT,LH),e(LH,Umr),e(aT,Jmr),e(Pe,Ymr),e(Pe,nT),e(nT,n3e),e(n3e,Kmr),e(nT,Zmr),e(nT,yH),e(yH,egr),e(nT,ogr),e(Pe,rgr),e(Pe,sT),e(sT,s3e),e(s3e,tgr),e(sT,agr),e(sT,xH),e(xH,ngr),e(sT,sgr),e(Pe,lgr),e(Pe,lT),e(lT,l3e),e(l3e,igr),e(lT,dgr),e(lT,$H),e($H,cgr),e(lT,fgr),e(Pe,mgr),e(Pe,iT),e(iT,i3e),e(i3e,ggr),e(iT,hgr),e(iT,kH),e(kH,pgr),e(iT,_gr),e(Pe,ugr),e(Pe,dT),e(dT,d3e),e(d3e,bgr),e(dT,vgr),e(dT,SH),e(SH,Fgr),e(dT,Tgr),e(Pe,Mgr),e(Pe,cT),e(cT,c3e),e(c3e,Egr),e(cT,Cgr),e(cT,RH),e(RH,wgr),e(cT,Agr),e(Pe,Lgr),e(Pe,fT),e(fT,f3e),e(f3e,ygr),e(fT,xgr),e(fT,PH),e(PH,$gr),e(fT,kgr),e(mo,Sgr),e(mo,mT),e(mT,Rgr),e(mT,m3e),e(m3e,Pgr),e(mT,Bgr),e(mT,g3e),e(g3e,Igr),e(mo,Ngr),M(gT,mo,null),b(f,Kze,u),b(f,Bd,u),e(Bd,hT),e(hT,h3e),M(h9,h3e,null),e(Bd,qgr),e(Bd,p3e),e(p3e,jgr),b(f,Zze,u),b(f,Qo,u),M(p9,Qo,null),e(Qo,Dgr),e(Qo,Id),e(Id,Ggr),e(Id,BH),e(BH,Ogr),e(Id,Vgr),e(Id,IH),e(IH,Xgr),e(Id,zgr),e(Qo,Wgr),e(Qo,_9),e(_9,Qgr),e(_9,_3e),e(_3e,Hgr),e(_9,Ugr),e(Qo,Jgr),e(Qo,Ct),M(u9,Ct,null),e(Ct,Ygr),e(Ct,u3e),e(u3e,Kgr),e(Ct,Zgr),e(Ct,Nd),e(Nd,ehr),e(Nd,b3e),e(b3e,ohr),e(Nd,rhr),e(Nd,NH),e(NH,thr),e(Nd,ahr),e(Ct,nhr),M(pT,Ct,null),e(Qo,shr),e(Qo,go),M(b9,go,null),e(go,lhr),e(go,v3e),e(v3e,ihr),e(go,dhr),e(go,Ya),e(Ya,chr),e(Ya,F3e),e(F3e,fhr),e(Ya,mhr),e(Ya,T3e),e(T3e,ghr),e(Ya,hhr),e(Ya,M3e),e(M3e,phr),e(Ya,_hr),e(go,uhr),e(go,rt),e(rt,_T),e(_T,E3e),e(E3e,bhr),e(_T,vhr),e(_T,qH),e(qH,Fhr),e(_T,Thr),e(rt,Mhr),e(rt,uT),e(uT,C3e),e(C3e,Ehr),e(uT,Chr),e(uT,jH),e(jH,whr),e(uT,Ahr),e(rt,Lhr),e(rt,bT),e(bT,w3e),e(w3e,yhr),e(bT,xhr),e(bT,DH),e(DH,$hr),e(bT,khr),e(rt,Shr),e(rt,vT),e(vT,A3e),e(A3e,Rhr),e(vT,Phr),e(vT,GH),e(GH,Bhr),e(vT,Ihr),e(rt,Nhr),e(rt,FT),e(FT,L3e),e(L3e,qhr),e(FT,jhr),e(FT,OH),e(OH,Dhr),e(FT,Ghr),e(go,Ohr),e(go,TT),e(TT,Vhr),e(TT,y3e),e(y3e,Xhr),e(TT,zhr),e(TT,x3e),e(x3e,Whr),e(go,Qhr),M(MT,go,null),b(f,eWe,u),b(f,qd,u),e(qd,ET),e(ET,$3e),M(v9,$3e,null),e(qd,Hhr),e(qd,k3e),e(k3e,Uhr),b(f,oWe,u),b(f,Ho,u),M(F9,Ho,null),e(Ho,Jhr),e(Ho,jd),e(jd,Yhr),e(jd,VH),e(VH,Khr),e(jd,Zhr),e(jd,XH),e(XH,epr),e(jd,opr),e(Ho,rpr),e(Ho,T9),e(T9,tpr),e(T9,S3e),e(S3e,apr),e(T9,npr),e(Ho,spr),e(Ho,wt),M(M9,wt,null),e(wt,lpr),e(wt,R3e),e(R3e,ipr),e(wt,dpr),e(wt,Dd),e(Dd,cpr),e(Dd,P3e),e(P3e,fpr),e(Dd,mpr),e(Dd,zH),e(zH,gpr),e(Dd,hpr),e(wt,ppr),M(CT,wt,null),e(Ho,_pr),e(Ho,ho),M(E9,ho,null),e(ho,upr),e(ho,B3e),e(B3e,bpr),e(ho,vpr),e(ho,Ka),e(Ka,Fpr),e(Ka,I3e),e(I3e,Tpr),e(Ka,Mpr),e(Ka,N3e),e(N3e,Epr),e(Ka,Cpr),e(Ka,q3e),e(q3e,wpr),e(Ka,Apr),e(ho,Lpr),e(ho,Le),e(Le,wT),e(wT,j3e),e(j3e,ypr),e(wT,xpr),e(wT,WH),e(WH,$pr),e(wT,kpr),e(Le,Spr),e(Le,AT),e(AT,D3e),e(D3e,Rpr),e(AT,Ppr),e(AT,QH),e(QH,Bpr),e(AT,Ipr),e(Le,Npr),e(Le,LT),e(LT,G3e),e(G3e,qpr),e(LT,jpr),e(LT,HH),e(HH,Dpr),e(LT,Gpr),e(Le,Opr),e(Le,yT),e(yT,O3e),e(O3e,Vpr),e(yT,Xpr),e(yT,UH),e(UH,zpr),e(yT,Wpr),e(Le,Qpr),e(Le,xT),e(xT,V3e),e(V3e,Hpr),e(xT,Upr),e(xT,JH),e(JH,Jpr),e(xT,Ypr),e(Le,Kpr),e(Le,$T),e($T,X3e),e(X3e,Zpr),e($T,e_r),e($T,YH),e(YH,o_r),e($T,r_r),e(Le,t_r),e(Le,kT),e(kT,z3e),e(z3e,a_r),e(kT,n_r),e(kT,KH),e(KH,s_r),e(kT,l_r),e(Le,i_r),e(Le,ST),e(ST,W3e),e(W3e,d_r),e(ST,c_r),e(ST,ZH),e(ZH,f_r),e(ST,m_r),e(Le,g_r),e(Le,RT),e(RT,Q3e),e(Q3e,h_r),e(RT,p_r),e(RT,eU),e(eU,__r),e(RT,u_r),e(Le,b_r),e(Le,PT),e(PT,H3e),e(H3e,v_r),e(PT,F_r),e(PT,oU),e(oU,T_r),e(PT,M_r),e(ho,E_r),e(ho,BT),e(BT,C_r),e(BT,U3e),e(U3e,w_r),e(BT,A_r),e(BT,J3e),e(J3e,L_r),e(ho,y_r),M(IT,ho,null),b(f,rWe,u),b(f,Gd,u),e(Gd,NT),e(NT,Y3e),M(C9,Y3e,null),e(Gd,x_r),e(Gd,K3e),e(K3e,$_r),b(f,tWe,u),b(f,Uo,u),M(w9,Uo,null),e(Uo,k_r),e(Uo,Od),e(Od,S_r),e(Od,rU),e(rU,R_r),e(Od,P_r),e(Od,tU),e(tU,B_r),e(Od,I_r),e(Uo,N_r),e(Uo,A9),e(A9,q_r),e(A9,Z3e),e(Z3e,j_r),e(A9,D_r),e(Uo,G_r),e(Uo,At),M(L9,At,null),e(At,O_r),e(At,eFe),e(eFe,V_r),e(At,X_r),e(At,Vd),e(Vd,z_r),e(Vd,oFe),e(oFe,W_r),e(Vd,Q_r),e(Vd,aU),e(aU,H_r),e(Vd,U_r),e(At,J_r),M(qT,At,null),e(Uo,Y_r),e(Uo,po),M(y9,po,null),e(po,K_r),e(po,rFe),e(rFe,Z_r),e(po,eur),e(po,Za),e(Za,our),e(Za,tFe),e(tFe,rur),e(Za,tur),e(Za,aFe),e(aFe,aur),e(Za,nur),e(Za,nFe),e(nFe,sur),e(Za,lur),e(po,iur),e(po,x9),e(x9,jT),e(jT,sFe),e(sFe,dur),e(jT,cur),e(jT,nU),e(nU,fur),e(jT,mur),e(x9,gur),e(x9,DT),e(DT,lFe),e(lFe,hur),e(DT,pur),e(DT,sU),e(sU,_ur),e(DT,uur),e(po,bur),e(po,GT),e(GT,vur),e(GT,iFe),e(iFe,Fur),e(GT,Tur),e(GT,dFe),e(dFe,Mur),e(po,Eur),M(OT,po,null),b(f,aWe,u),b(f,Xd,u),e(Xd,VT),e(VT,cFe),M($9,cFe,null),e(Xd,Cur),e(Xd,fFe),e(fFe,wur),b(f,nWe,u),b(f,Jo,u),M(k9,Jo,null),e(Jo,Aur),e(Jo,zd),e(zd,Lur),e(zd,lU),e(lU,yur),e(zd,xur),e(zd,iU),e(iU,$ur),e(zd,kur),e(Jo,Sur),e(Jo,S9),e(S9,Rur),e(S9,mFe),e(mFe,Pur),e(S9,Bur),e(Jo,Iur),e(Jo,Lt),M(R9,Lt,null),e(Lt,Nur),e(Lt,gFe),e(gFe,qur),e(Lt,jur),e(Lt,Wd),e(Wd,Dur),e(Wd,hFe),e(hFe,Gur),e(Wd,Our),e(Wd,dU),e(dU,Vur),e(Wd,Xur),e(Lt,zur),M(XT,Lt,null),e(Jo,Wur),e(Jo,_o),M(P9,_o,null),e(_o,Qur),e(_o,pFe),e(pFe,Hur),e(_o,Uur),e(_o,en),e(en,Jur),e(en,_Fe),e(_Fe,Yur),e(en,Kur),e(en,uFe),e(uFe,Zur),e(en,e1r),e(en,bFe),e(bFe,o1r),e(en,r1r),e(_o,t1r),e(_o,tt),e(tt,zT),e(zT,vFe),e(vFe,a1r),e(zT,n1r),e(zT,cU),e(cU,s1r),e(zT,l1r),e(tt,i1r),e(tt,WT),e(WT,FFe),e(FFe,d1r),e(WT,c1r),e(WT,fU),e(fU,f1r),e(WT,m1r),e(tt,g1r),e(tt,QT),e(QT,TFe),e(TFe,h1r),e(QT,p1r),e(QT,mU),e(mU,_1r),e(QT,u1r),e(tt,b1r),e(tt,HT),e(HT,MFe),e(MFe,v1r),e(HT,F1r),e(HT,gU),e(gU,T1r),e(HT,M1r),e(tt,E1r),e(tt,UT),e(UT,EFe),e(EFe,C1r),e(UT,w1r),e(UT,hU),e(hU,A1r),e(UT,L1r),e(_o,y1r),e(_o,JT),e(JT,x1r),e(JT,CFe),e(CFe,$1r),e(JT,k1r),e(JT,wFe),e(wFe,S1r),e(_o,R1r),M(YT,_o,null),b(f,sWe,u),b(f,Qd,u),e(Qd,KT),e(KT,AFe),M(B9,AFe,null),e(Qd,P1r),e(Qd,LFe),e(LFe,B1r),b(f,lWe,u),b(f,Yo,u),M(I9,Yo,null),e(Yo,I1r),e(Yo,Hd),e(Hd,N1r),e(Hd,pU),e(pU,q1r),e(Hd,j1r),e(Hd,_U),e(_U,D1r),e(Hd,G1r),e(Yo,O1r),e(Yo,N9),e(N9,V1r),e(N9,yFe),e(yFe,X1r),e(N9,z1r),e(Yo,W1r),e(Yo,yt),M(q9,yt,null),e(yt,Q1r),e(yt,xFe),e(xFe,H1r),e(yt,U1r),e(yt,Ud),e(Ud,J1r),e(Ud,$Fe),e($Fe,Y1r),e(Ud,K1r),e(Ud,uU),e(uU,Z1r),e(Ud,e2r),e(yt,o2r),M(ZT,yt,null),e(Yo,r2r),e(Yo,uo),M(j9,uo,null),e(uo,t2r),e(uo,kFe),e(kFe,a2r),e(uo,n2r),e(uo,on),e(on,s2r),e(on,SFe),e(SFe,l2r),e(on,i2r),e(on,RFe),e(RFe,d2r),e(on,c2r),e(on,PFe),e(PFe,f2r),e(on,m2r),e(uo,g2r),e(uo,rn),e(rn,e8),e(e8,BFe),e(BFe,h2r),e(e8,p2r),e(e8,bU),e(bU,_2r),e(e8,u2r),e(rn,b2r),e(rn,o8),e(o8,IFe),e(IFe,v2r),e(o8,F2r),e(o8,vU),e(vU,T2r),e(o8,M2r),e(rn,E2r),e(rn,r8),e(r8,NFe),e(NFe,C2r),e(r8,w2r),e(r8,FU),e(FU,A2r),e(r8,L2r),e(rn,y2r),e(rn,t8),e(t8,qFe),e(qFe,x2r),e(t8,$2r),e(t8,TU),e(TU,k2r),e(t8,S2r),e(uo,R2r),e(uo,a8),e(a8,P2r),e(a8,jFe),e(jFe,B2r),e(a8,I2r),e(a8,DFe),e(DFe,N2r),e(uo,q2r),M(n8,uo,null),b(f,iWe,u),b(f,Jd,u),e(Jd,s8),e(s8,GFe),M(D9,GFe,null),e(Jd,j2r),e(Jd,OFe),e(OFe,D2r),b(f,dWe,u),b(f,Ko,u),M(G9,Ko,null),e(Ko,G2r),e(Ko,Yd),e(Yd,O2r),e(Yd,MU),e(MU,V2r),e(Yd,X2r),e(Yd,EU),e(EU,z2r),e(Yd,W2r),e(Ko,Q2r),e(Ko,O9),e(O9,H2r),e(O9,VFe),e(VFe,U2r),e(O9,J2r),e(Ko,Y2r),e(Ko,xt),M(V9,xt,null),e(xt,K2r),e(xt,XFe),e(XFe,Z2r),e(xt,ebr),e(xt,Kd),e(Kd,obr),e(Kd,zFe),e(zFe,rbr),e(Kd,tbr),e(Kd,CU),e(CU,abr),e(Kd,nbr),e(xt,sbr),M(l8,xt,null),e(Ko,lbr),e(Ko,bo),M(X9,bo,null),e(bo,ibr),e(bo,WFe),e(WFe,dbr),e(bo,cbr),e(bo,tn),e(tn,fbr),e(tn,QFe),e(QFe,mbr),e(tn,gbr),e(tn,HFe),e(HFe,hbr),e(tn,pbr),e(tn,UFe),e(UFe,_br),e(tn,ubr),e(bo,bbr),e(bo,z9),e(z9,i8),e(i8,JFe),e(JFe,vbr),e(i8,Fbr),e(i8,wU),e(wU,Tbr),e(i8,Mbr),e(z9,Ebr),e(z9,d8),e(d8,YFe),e(YFe,Cbr),e(d8,wbr),e(d8,AU),e(AU,Abr),e(d8,Lbr),e(bo,ybr),e(bo,c8),e(c8,xbr),e(c8,KFe),e(KFe,$br),e(c8,kbr),e(c8,ZFe),e(ZFe,Sbr),e(bo,Rbr),M(f8,bo,null),b(f,cWe,u),b(f,Zd,u),e(Zd,m8),e(m8,e6e),M(W9,e6e,null),e(Zd,Pbr),e(Zd,o6e),e(o6e,Bbr),b(f,fWe,u),b(f,Zo,u),M(Q9,Zo,null),e(Zo,Ibr),e(Zo,ec),e(ec,Nbr),e(ec,LU),e(LU,qbr),e(ec,jbr),e(ec,yU),e(yU,Dbr),e(ec,Gbr),e(Zo,Obr),e(Zo,H9),e(H9,Vbr),e(H9,r6e),e(r6e,Xbr),e(H9,zbr),e(Zo,Wbr),e(Zo,$t),M(U9,$t,null),e($t,Qbr),e($t,t6e),e(t6e,Hbr),e($t,Ubr),e($t,oc),e(oc,Jbr),e(oc,a6e),e(a6e,Ybr),e(oc,Kbr),e(oc,xU),e(xU,Zbr),e(oc,evr),e($t,ovr),M(g8,$t,null),e(Zo,rvr),e(Zo,vo),M(J9,vo,null),e(vo,tvr),e(vo,n6e),e(n6e,avr),e(vo,nvr),e(vo,an),e(an,svr),e(an,s6e),e(s6e,lvr),e(an,ivr),e(an,l6e),e(l6e,dvr),e(an,cvr),e(an,i6e),e(i6e,fvr),e(an,mvr),e(vo,gvr),e(vo,d6e),e(d6e,h8),e(h8,c6e),e(c6e,hvr),e(h8,pvr),e(h8,$U),e($U,_vr),e(h8,uvr),e(vo,bvr),e(vo,p8),e(p8,vvr),e(p8,f6e),e(f6e,Fvr),e(p8,Tvr),e(p8,m6e),e(m6e,Mvr),e(vo,Evr),M(_8,vo,null),b(f,mWe,u),b(f,rc,u),e(rc,u8),e(u8,g6e),M(Y9,g6e,null),e(rc,Cvr),e(rc,h6e),e(h6e,wvr),b(f,gWe,u),b(f,er,u),M(K9,er,null),e(er,Avr),e(er,tc),e(tc,Lvr),e(tc,kU),e(kU,yvr),e(tc,xvr),e(tc,SU),e(SU,$vr),e(tc,kvr),e(er,Svr),e(er,Z9),e(Z9,Rvr),e(Z9,p6e),e(p6e,Pvr),e(Z9,Bvr),e(er,Ivr),e(er,kt),M(ex,kt,null),e(kt,Nvr),e(kt,_6e),e(_6e,qvr),e(kt,jvr),e(kt,ac),e(ac,Dvr),e(ac,u6e),e(u6e,Gvr),e(ac,Ovr),e(ac,RU),e(RU,Vvr),e(ac,Xvr),e(kt,zvr),M(b8,kt,null),e(er,Wvr),e(er,Fo),M(ox,Fo,null),e(Fo,Qvr),e(Fo,b6e),e(b6e,Hvr),e(Fo,Uvr),e(Fo,nn),e(nn,Jvr),e(nn,v6e),e(v6e,Yvr),e(nn,Kvr),e(nn,F6e),e(F6e,Zvr),e(nn,e3r),e(nn,T6e),e(T6e,o3r),e(nn,r3r),e(Fo,t3r),e(Fo,at),e(at,v8),e(v8,M6e),e(M6e,a3r),e(v8,n3r),e(v8,PU),e(PU,s3r),e(v8,l3r),e(at,i3r),e(at,F8),e(F8,E6e),e(E6e,d3r),e(F8,c3r),e(F8,BU),e(BU,f3r),e(F8,m3r),e(at,g3r),e(at,T8),e(T8,C6e),e(C6e,h3r),e(T8,p3r),e(T8,IU),e(IU,_3r),e(T8,u3r),e(at,b3r),e(at,M8),e(M8,w6e),e(w6e,v3r),e(M8,F3r),e(M8,NU),e(NU,T3r),e(M8,M3r),e(at,E3r),e(at,E8),e(E8,A6e),e(A6e,C3r),e(E8,w3r),e(E8,qU),e(qU,A3r),e(E8,L3r),e(Fo,y3r),e(Fo,C8),e(C8,x3r),e(C8,L6e),e(L6e,$3r),e(C8,k3r),e(C8,y6e),e(y6e,S3r),e(Fo,R3r),M(w8,Fo,null),b(f,hWe,u),b(f,nc,u),e(nc,A8),e(A8,x6e),M(rx,x6e,null),e(nc,P3r),e(nc,$6e),e($6e,B3r),b(f,pWe,u),b(f,or,u),M(tx,or,null),e(or,I3r),e(or,sc),e(sc,N3r),e(sc,jU),e(jU,q3r),e(sc,j3r),e(sc,DU),e(DU,D3r),e(sc,G3r),e(or,O3r),e(or,ax),e(ax,V3r),e(ax,k6e),e(k6e,X3r),e(ax,z3r),e(or,W3r),e(or,St),M(nx,St,null),e(St,Q3r),e(St,S6e),e(S6e,H3r),e(St,U3r),e(St,lc),e(lc,J3r),e(lc,R6e),e(R6e,Y3r),e(lc,K3r),e(lc,GU),e(GU,Z3r),e(lc,eFr),e(St,oFr),M(L8,St,null),e(or,rFr),e(or,To),M(sx,To,null),e(To,tFr),e(To,P6e),e(P6e,aFr),e(To,nFr),e(To,sn),e(sn,sFr),e(sn,B6e),e(B6e,lFr),e(sn,iFr),e(sn,I6e),e(I6e,dFr),e(sn,cFr),e(sn,N6e),e(N6e,fFr),e(sn,mFr),e(To,gFr),e(To,q6e),e(q6e,y8),e(y8,j6e),e(j6e,hFr),e(y8,pFr),e(y8,OU),e(OU,_Fr),e(y8,uFr),e(To,bFr),e(To,x8),e(x8,vFr),e(x8,D6e),e(D6e,FFr),e(x8,TFr),e(x8,G6e),e(G6e,MFr),e(To,EFr),M($8,To,null),b(f,_We,u),b(f,ic,u),e(ic,k8),e(k8,O6e),M(lx,O6e,null),e(ic,CFr),e(ic,V6e),e(V6e,wFr),b(f,uWe,u),b(f,rr,u),M(ix,rr,null),e(rr,AFr),e(rr,dc),e(dc,LFr),e(dc,VU),e(VU,yFr),e(dc,xFr),e(dc,XU),e(XU,$Fr),e(dc,kFr),e(rr,SFr),e(rr,dx),e(dx,RFr),e(dx,X6e),e(X6e,PFr),e(dx,BFr),e(rr,IFr),e(rr,Rt),M(cx,Rt,null),e(Rt,NFr),e(Rt,z6e),e(z6e,qFr),e(Rt,jFr),e(Rt,cc),e(cc,DFr),e(cc,W6e),e(W6e,GFr),e(cc,OFr),e(cc,zU),e(zU,VFr),e(cc,XFr),e(Rt,zFr),M(S8,Rt,null),e(rr,WFr),e(rr,$r),M(fx,$r,null),e($r,QFr),e($r,Q6e),e(Q6e,HFr),e($r,UFr),e($r,ln),e(ln,JFr),e(ln,H6e),e(H6e,YFr),e(ln,KFr),e(ln,U6e),e(U6e,ZFr),e(ln,e6r),e(ln,J6e),e(J6e,o6r),e(ln,r6r),e($r,t6r),e($r,I),e(I,R8),e(R8,Y6e),e(Y6e,a6r),e(R8,n6r),e(R8,WU),e(WU,s6r),e(R8,l6r),e(I,i6r),e(I,P8),e(P8,K6e),e(K6e,d6r),e(P8,c6r),e(P8,QU),e(QU,f6r),e(P8,m6r),e(I,g6r),e(I,B8),e(B8,Z6e),e(Z6e,h6r),e(B8,p6r),e(B8,HU),e(HU,_6r),e(B8,u6r),e(I,b6r),e(I,I8),e(I8,eTe),e(eTe,v6r),e(I8,F6r),e(I8,UU),e(UU,T6r),e(I8,M6r),e(I,E6r),e(I,N8),e(N8,oTe),e(oTe,C6r),e(N8,w6r),e(N8,JU),e(JU,A6r),e(N8,L6r),e(I,y6r),e(I,q8),e(q8,rTe),e(rTe,x6r),e(q8,$6r),e(q8,YU),e(YU,k6r),e(q8,S6r),e(I,R6r),e(I,j8),e(j8,tTe),e(tTe,P6r),e(j8,B6r),e(j8,KU),e(KU,I6r),e(j8,N6r),e(I,q6r),e(I,D8),e(D8,aTe),e(aTe,j6r),e(D8,D6r),e(D8,ZU),e(ZU,G6r),e(D8,O6r),e(I,V6r),e(I,G8),e(G8,nTe),e(nTe,X6r),e(G8,z6r),e(G8,eJ),e(eJ,W6r),e(G8,Q6r),e(I,H6r),e(I,O8),e(O8,sTe),e(sTe,U6r),e(O8,J6r),e(O8,oJ),e(oJ,Y6r),e(O8,K6r),e(I,Z6r),e(I,V8),e(V8,lTe),e(lTe,eTr),e(V8,oTr),e(V8,rJ),e(rJ,rTr),e(V8,tTr),e(I,aTr),e(I,X8),e(X8,iTe),e(iTe,nTr),e(X8,sTr),e(X8,tJ),e(tJ,lTr),e(X8,iTr),e(I,dTr),e(I,z8),e(z8,dTe),e(dTe,cTr),e(z8,fTr),e(z8,aJ),e(aJ,mTr),e(z8,gTr),e(I,hTr),e(I,W8),e(W8,cTe),e(cTe,pTr),e(W8,_Tr),e(W8,nJ),e(nJ,uTr),e(W8,bTr),e(I,vTr),e(I,Q8),e(Q8,fTe),e(fTe,FTr),e(Q8,TTr),e(Q8,sJ),e(sJ,MTr),e(Q8,ETr),e(I,CTr),e(I,H8),e(H8,mTe),e(mTe,wTr),e(H8,ATr),e(H8,lJ),e(lJ,LTr),e(H8,yTr),e(I,xTr),e(I,U8),e(U8,gTe),e(gTe,$Tr),e(U8,kTr),e(U8,iJ),e(iJ,STr),e(U8,RTr),e(I,PTr),e(I,J8),e(J8,hTe),e(hTe,BTr),e(J8,ITr),e(J8,dJ),e(dJ,NTr),e(J8,qTr),e(I,jTr),e(I,Zs),e(Zs,pTe),e(pTe,DTr),e(Zs,GTr),e(Zs,cJ),e(cJ,OTr),e(Zs,VTr),e(Zs,fJ),e(fJ,XTr),e(Zs,zTr),e(I,WTr),e(I,Y8),e(Y8,_Te),e(_Te,QTr),e(Y8,HTr),e(Y8,mJ),e(mJ,UTr),e(Y8,JTr),e(I,YTr),e(I,K8),e(K8,uTe),e(uTe,KTr),e(K8,ZTr),e(K8,gJ),e(gJ,e8r),e(K8,o8r),e(I,r8r),e(I,Z8),e(Z8,bTe),e(bTe,t8r),e(Z8,a8r),e(Z8,hJ),e(hJ,n8r),e(Z8,s8r),e(I,l8r),e(I,eM),e(eM,vTe),e(vTe,i8r),e(eM,d8r),e(eM,pJ),e(pJ,c8r),e(eM,f8r),e(I,m8r),e(I,oM),e(oM,FTe),e(FTe,g8r),e(oM,h8r),e(oM,_J),e(_J,p8r),e(oM,_8r),e(I,u8r),e(I,rM),e(rM,TTe),e(TTe,b8r),e(rM,v8r),e(rM,uJ),e(uJ,F8r),e(rM,T8r),e(I,M8r),e(I,tM),e(tM,MTe),e(MTe,E8r),e(tM,C8r),e(tM,bJ),e(bJ,w8r),e(tM,A8r),e(I,L8r),e(I,aM),e(aM,ETe),e(ETe,y8r),e(aM,x8r),e(aM,vJ),e(vJ,$8r),e(aM,k8r),e(I,S8r),e(I,nM),e(nM,CTe),e(CTe,R8r),e(nM,P8r),e(nM,FJ),e(FJ,B8r),e(nM,I8r),e(I,N8r),e(I,sM),e(sM,wTe),e(wTe,q8r),e(sM,j8r),e(sM,TJ),e(TJ,D8r),e(sM,G8r),e(I,O8r),e(I,lM),e(lM,ATe),e(ATe,V8r),e(lM,X8r),e(lM,MJ),e(MJ,z8r),e(lM,W8r),e(I,Q8r),e(I,iM),e(iM,LTe),e(LTe,H8r),e(iM,U8r),e(iM,EJ),e(EJ,J8r),e(iM,Y8r),e(I,K8r),e(I,dM),e(dM,yTe),e(yTe,Z8r),e(dM,eMr),e(dM,CJ),e(CJ,oMr),e(dM,rMr),e(I,tMr),e(I,cM),e(cM,xTe),e(xTe,aMr),e(cM,nMr),e(cM,wJ),e(wJ,sMr),e(cM,lMr),e(I,iMr),e(I,fM),e(fM,$Te),e($Te,dMr),e(fM,cMr),e(fM,AJ),e(AJ,fMr),e(fM,mMr),e(I,gMr),e(I,mM),e(mM,kTe),e(kTe,hMr),e(mM,pMr),e(mM,LJ),e(LJ,_Mr),e(mM,uMr),e(I,bMr),e(I,gM),e(gM,STe),e(STe,vMr),e(gM,FMr),e(gM,yJ),e(yJ,TMr),e(gM,MMr),e(I,EMr),e(I,hM),e(hM,RTe),e(RTe,CMr),e(hM,wMr),e(hM,xJ),e(xJ,AMr),e(hM,LMr),e(I,yMr),e(I,pM),e(pM,PTe),e(PTe,xMr),e(pM,$Mr),e(pM,$J),e($J,kMr),e(pM,SMr),e(I,RMr),e(I,_M),e(_M,BTe),e(BTe,PMr),e(_M,BMr),e(_M,kJ),e(kJ,IMr),e(_M,NMr),e(I,qMr),e(I,uM),e(uM,ITe),e(ITe,jMr),e(uM,DMr),e(uM,SJ),e(SJ,GMr),e(uM,OMr),e(I,VMr),e(I,bM),e(bM,NTe),e(NTe,XMr),e(bM,zMr),e(bM,RJ),e(RJ,WMr),e(bM,QMr),e(I,HMr),e(I,vM),e(vM,qTe),e(qTe,UMr),e(vM,JMr),e(vM,PJ),e(PJ,YMr),e(vM,KMr),e(I,ZMr),e(I,FM),e(FM,jTe),e(jTe,e4r),e(FM,o4r),e(FM,BJ),e(BJ,r4r),e(FM,t4r),e(I,a4r),e(I,TM),e(TM,DTe),e(DTe,n4r),e(TM,s4r),e(TM,IJ),e(IJ,l4r),e(TM,i4r),e(I,d4r),e(I,MM),e(MM,GTe),e(GTe,c4r),e(MM,f4r),e(MM,NJ),e(NJ,m4r),e(MM,g4r),e(I,h4r),e(I,EM),e(EM,OTe),e(OTe,p4r),e(EM,_4r),e(EM,qJ),e(qJ,u4r),e(EM,b4r),e(I,v4r),e(I,CM),e(CM,VTe),e(VTe,F4r),e(CM,T4r),e(CM,jJ),e(jJ,M4r),e(CM,E4r),e(I,C4r),e(I,wM),e(wM,XTe),e(XTe,w4r),e(wM,A4r),e(wM,DJ),e(DJ,L4r),e(wM,y4r),e(I,x4r),e(I,AM),e(AM,zTe),e(zTe,$4r),e(AM,k4r),e(AM,GJ),e(GJ,S4r),e(AM,R4r),e(I,P4r),e(I,LM),e(LM,WTe),e(WTe,B4r),e(LM,I4r),e(LM,OJ),e(OJ,N4r),e(LM,q4r),e(I,j4r),e(I,yM),e(yM,QTe),e(QTe,D4r),e(yM,G4r),e(yM,VJ),e(VJ,O4r),e(yM,V4r),e($r,X4r),M(xM,$r,null),b(f,bWe,u),b(f,fc,u),e(fc,$M),e($M,HTe),M(mx,HTe,null),e(fc,z4r),e(fc,UTe),e(UTe,W4r),b(f,vWe,u),b(f,tr,u),M(gx,tr,null),e(tr,Q4r),e(tr,mc),e(mc,H4r),e(mc,XJ),e(XJ,U4r),e(mc,J4r),e(mc,zJ),e(zJ,Y4r),e(mc,K4r),e(tr,Z4r),e(tr,hx),e(hx,eEr),e(hx,JTe),e(JTe,oEr),e(hx,rEr),e(tr,tEr),e(tr,Pt),M(px,Pt,null),e(Pt,aEr),e(Pt,YTe),e(YTe,nEr),e(Pt,sEr),e(Pt,gc),e(gc,lEr),e(gc,KTe),e(KTe,iEr),e(gc,dEr),e(gc,WJ),e(WJ,cEr),e(gc,fEr),e(Pt,mEr),M(kM,Pt,null),e(tr,gEr),e(tr,kr),M(_x,kr,null),e(kr,hEr),e(kr,ZTe),e(ZTe,pEr),e(kr,_Er),e(kr,dn),e(dn,uEr),e(dn,e8e),e(e8e,bEr),e(dn,vEr),e(dn,o8e),e(o8e,FEr),e(dn,TEr),e(dn,r8e),e(r8e,MEr),e(dn,EEr),e(kr,CEr),e(kr,se),e(se,SM),e(SM,t8e),e(t8e,wEr),e(SM,AEr),e(SM,QJ),e(QJ,LEr),e(SM,yEr),e(se,xEr),e(se,RM),e(RM,a8e),e(a8e,$Er),e(RM,kEr),e(RM,HJ),e(HJ,SEr),e(RM,REr),e(se,PEr),e(se,PM),e(PM,n8e),e(n8e,BEr),e(PM,IEr),e(PM,UJ),e(UJ,NEr),e(PM,qEr),e(se,jEr),e(se,BM),e(BM,s8e),e(s8e,DEr),e(BM,GEr),e(BM,JJ),e(JJ,OEr),e(BM,VEr),e(se,XEr),e(se,IM),e(IM,l8e),e(l8e,zEr),e(IM,WEr),e(IM,YJ),e(YJ,QEr),e(IM,HEr),e(se,UEr),e(se,NM),e(NM,i8e),e(i8e,JEr),e(NM,YEr),e(NM,KJ),e(KJ,KEr),e(NM,ZEr),e(se,eCr),e(se,qM),e(qM,d8e),e(d8e,oCr),e(qM,rCr),e(qM,ZJ),e(ZJ,tCr),e(qM,aCr),e(se,nCr),e(se,jM),e(jM,c8e),e(c8e,sCr),e(jM,lCr),e(jM,eY),e(eY,iCr),e(jM,dCr),e(se,cCr),e(se,DM),e(DM,f8e),e(f8e,fCr),e(DM,mCr),e(DM,oY),e(oY,gCr),e(DM,hCr),e(se,pCr),e(se,GM),e(GM,m8e),e(m8e,_Cr),e(GM,uCr),e(GM,rY),e(rY,bCr),e(GM,vCr),e(se,FCr),e(se,OM),e(OM,g8e),e(g8e,TCr),e(OM,MCr),e(OM,tY),e(tY,ECr),e(OM,CCr),e(se,wCr),e(se,VM),e(VM,h8e),e(h8e,ACr),e(VM,LCr),e(VM,aY),e(aY,yCr),e(VM,xCr),e(se,$Cr),e(se,XM),e(XM,p8e),e(p8e,kCr),e(XM,SCr),e(XM,nY),e(nY,RCr),e(XM,PCr),e(se,BCr),e(se,zM),e(zM,_8e),e(_8e,ICr),e(zM,NCr),e(zM,sY),e(sY,qCr),e(zM,jCr),e(se,DCr),e(se,WM),e(WM,u8e),e(u8e,GCr),e(WM,OCr),e(WM,lY),e(lY,VCr),e(WM,XCr),e(se,zCr),e(se,QM),e(QM,b8e),e(b8e,WCr),e(QM,QCr),e(QM,iY),e(iY,HCr),e(QM,UCr),e(se,JCr),e(se,HM),e(HM,v8e),e(v8e,YCr),e(HM,KCr),e(HM,dY),e(dY,ZCr),e(HM,e5r),e(se,o5r),e(se,UM),e(UM,F8e),e(F8e,r5r),e(UM,t5r),e(UM,cY),e(cY,a5r),e(UM,n5r),e(se,s5r),e(se,JM),e(JM,T8e),e(T8e,l5r),e(JM,i5r),e(JM,fY),e(fY,d5r),e(JM,c5r),e(se,f5r),e(se,YM),e(YM,M8e),e(M8e,m5r),e(YM,g5r),e(YM,mY),e(mY,h5r),e(YM,p5r),e(se,_5r),e(se,KM),e(KM,E8e),e(E8e,u5r),e(KM,b5r),e(KM,gY),e(gY,v5r),e(KM,F5r),e(se,T5r),e(se,ZM),e(ZM,C8e),e(C8e,M5r),e(ZM,E5r),e(ZM,hY),e(hY,C5r),e(ZM,w5r),e(se,A5r),e(se,e4),e(e4,w8e),e(w8e,L5r),e(e4,y5r),e(e4,pY),e(pY,x5r),e(e4,$5r),e(kr,k5r),M(o4,kr,null),b(f,FWe,u),b(f,hc,u),e(hc,r4),e(r4,A8e),M(ux,A8e,null),e(hc,S5r),e(hc,L8e),e(L8e,R5r),b(f,TWe,u),b(f,ar,u),M(bx,ar,null),e(ar,P5r),e(ar,pc),e(pc,B5r),e(pc,_Y),e(_Y,I5r),e(pc,N5r),e(pc,uY),e(uY,q5r),e(pc,j5r),e(ar,D5r),e(ar,vx),e(vx,G5r),e(vx,y8e),e(y8e,O5r),e(vx,V5r),e(ar,X5r),e(ar,Bt),M(Fx,Bt,null),e(Bt,z5r),e(Bt,x8e),e(x8e,W5r),e(Bt,Q5r),e(Bt,_c),e(_c,H5r),e(_c,$8e),e($8e,U5r),e(_c,J5r),e(_c,bY),e(bY,Y5r),e(_c,K5r),e(Bt,Z5r),M(t4,Bt,null),e(ar,e0r),e(ar,Sr),M(Tx,Sr,null),e(Sr,o0r),e(Sr,k8e),e(k8e,r0r),e(Sr,t0r),e(Sr,cn),e(cn,a0r),e(cn,S8e),e(S8e,n0r),e(cn,s0r),e(cn,R8e),e(R8e,l0r),e(cn,i0r),e(cn,P8e),e(P8e,d0r),e(cn,c0r),e(Sr,f0r),e(Sr,Me),e(Me,a4),e(a4,B8e),e(B8e,m0r),e(a4,g0r),e(a4,vY),e(vY,h0r),e(a4,p0r),e(Me,_0r),e(Me,n4),e(n4,I8e),e(I8e,u0r),e(n4,b0r),e(n4,FY),e(FY,v0r),e(n4,F0r),e(Me,T0r),e(Me,s4),e(s4,N8e),e(N8e,M0r),e(s4,E0r),e(s4,TY),e(TY,C0r),e(s4,w0r),e(Me,A0r),e(Me,l4),e(l4,q8e),e(q8e,L0r),e(l4,y0r),e(l4,MY),e(MY,x0r),e(l4,$0r),e(Me,k0r),e(Me,i4),e(i4,j8e),e(j8e,S0r),e(i4,R0r),e(i4,EY),e(EY,P0r),e(i4,B0r),e(Me,I0r),e(Me,d4),e(d4,D8e),e(D8e,N0r),e(d4,q0r),e(d4,CY),e(CY,j0r),e(d4,D0r),e(Me,G0r),e(Me,c4),e(c4,G8e),e(G8e,O0r),e(c4,V0r),e(c4,wY),e(wY,X0r),e(c4,z0r),e(Me,W0r),e(Me,f4),e(f4,O8e),e(O8e,Q0r),e(f4,H0r),e(f4,AY),e(AY,U0r),e(f4,J0r),e(Me,Y0r),e(Me,m4),e(m4,V8e),e(V8e,K0r),e(m4,Z0r),e(m4,LY),e(LY,ewr),e(m4,owr),e(Me,rwr),e(Me,g4),e(g4,X8e),e(X8e,twr),e(g4,awr),e(g4,yY),e(yY,nwr),e(g4,swr),e(Me,lwr),e(Me,h4),e(h4,z8e),e(z8e,iwr),e(h4,dwr),e(h4,xY),e(xY,cwr),e(h4,fwr),e(Me,mwr),e(Me,p4),e(p4,W8e),e(W8e,gwr),e(p4,hwr),e(p4,$Y),e($Y,pwr),e(p4,_wr),e(Me,uwr),e(Me,_4),e(_4,Q8e),e(Q8e,bwr),e(_4,vwr),e(_4,kY),e(kY,Fwr),e(_4,Twr),e(Sr,Mwr),M(u4,Sr,null),b(f,MWe,u),b(f,uc,u),e(uc,b4),e(b4,H8e),M(Mx,H8e,null),e(uc,Ewr),e(uc,U8e),e(U8e,Cwr),b(f,EWe,u),b(f,nr,u),M(Ex,nr,null),e(nr,wwr),e(nr,bc),e(bc,Awr),e(bc,SY),e(SY,Lwr),e(bc,ywr),e(bc,RY),e(RY,xwr),e(bc,$wr),e(nr,kwr),e(nr,Cx),e(Cx,Swr),e(Cx,J8e),e(J8e,Rwr),e(Cx,Pwr),e(nr,Bwr),e(nr,It),M(wx,It,null),e(It,Iwr),e(It,Y8e),e(Y8e,Nwr),e(It,qwr),e(It,vc),e(vc,jwr),e(vc,K8e),e(K8e,Dwr),e(vc,Gwr),e(vc,PY),e(PY,Owr),e(vc,Vwr),e(It,Xwr),M(v4,It,null),e(nr,zwr),e(nr,Rr),M(Ax,Rr,null),e(Rr,Wwr),e(Rr,Z8e),e(Z8e,Qwr),e(Rr,Hwr),e(Rr,fn),e(fn,Uwr),e(fn,eMe),e(eMe,Jwr),e(fn,Ywr),e(fn,oMe),e(oMe,Kwr),e(fn,Zwr),e(fn,rMe),e(rMe,eAr),e(fn,oAr),e(Rr,rAr),e(Rr,Ve),e(Ve,F4),e(F4,tMe),e(tMe,tAr),e(F4,aAr),e(F4,BY),e(BY,nAr),e(F4,sAr),e(Ve,lAr),e(Ve,T4),e(T4,aMe),e(aMe,iAr),e(T4,dAr),e(T4,IY),e(IY,cAr),e(T4,fAr),e(Ve,mAr),e(Ve,el),e(el,nMe),e(nMe,gAr),e(el,hAr),e(el,NY),e(NY,pAr),e(el,_Ar),e(el,qY),e(qY,uAr),e(el,bAr),e(Ve,vAr),e(Ve,M4),e(M4,sMe),e(sMe,FAr),e(M4,TAr),e(M4,jY),e(jY,MAr),e(M4,EAr),e(Ve,CAr),e(Ve,E4),e(E4,lMe),e(lMe,wAr),e(E4,AAr),e(E4,DY),e(DY,LAr),e(E4,yAr),e(Ve,xAr),e(Ve,C4),e(C4,iMe),e(iMe,$Ar),e(C4,kAr),e(C4,GY),e(GY,SAr),e(C4,RAr),e(Ve,PAr),e(Ve,w4),e(w4,dMe),e(dMe,BAr),e(w4,IAr),e(w4,OY),e(OY,NAr),e(w4,qAr),e(Ve,jAr),e(Ve,A4),e(A4,cMe),e(cMe,DAr),e(A4,GAr),e(A4,VY),e(VY,OAr),e(A4,VAr),e(Rr,XAr),M(L4,Rr,null),b(f,CWe,u),b(f,Fc,u),e(Fc,y4),e(y4,fMe),M(Lx,fMe,null),e(Fc,zAr),e(Fc,mMe),e(mMe,WAr),b(f,wWe,u),b(f,sr,u),M(yx,sr,null),e(sr,QAr),e(sr,Tc),e(Tc,HAr),e(Tc,XY),e(XY,UAr),e(Tc,JAr),e(Tc,zY),e(zY,YAr),e(Tc,KAr),e(sr,ZAr),e(sr,xx),e(xx,e7r),e(xx,gMe),e(gMe,o7r),e(xx,r7r),e(sr,t7r),e(sr,Nt),M($x,Nt,null),e(Nt,a7r),e(Nt,hMe),e(hMe,n7r),e(Nt,s7r),e(Nt,Mc),e(Mc,l7r),e(Mc,pMe),e(pMe,i7r),e(Mc,d7r),e(Mc,WY),e(WY,c7r),e(Mc,f7r),e(Nt,m7r),M(x4,Nt,null),e(sr,g7r),e(sr,Pr),M(kx,Pr,null),e(Pr,h7r),e(Pr,_Me),e(_Me,p7r),e(Pr,_7r),e(Pr,mn),e(mn,u7r),e(mn,uMe),e(uMe,b7r),e(mn,v7r),e(mn,bMe),e(bMe,F7r),e(mn,T7r),e(mn,vMe),e(vMe,M7r),e(mn,E7r),e(Pr,C7r),e(Pr,ie),e(ie,$4),e($4,FMe),e(FMe,w7r),e($4,A7r),e($4,QY),e(QY,L7r),e($4,y7r),e(ie,x7r),e(ie,k4),e(k4,TMe),e(TMe,$7r),e(k4,k7r),e(k4,HY),e(HY,S7r),e(k4,R7r),e(ie,P7r),e(ie,S4),e(S4,MMe),e(MMe,B7r),e(S4,I7r),e(S4,UY),e(UY,N7r),e(S4,q7r),e(ie,j7r),e(ie,R4),e(R4,EMe),e(EMe,D7r),e(R4,G7r),e(R4,JY),e(JY,O7r),e(R4,V7r),e(ie,X7r),e(ie,P4),e(P4,CMe),e(CMe,z7r),e(P4,W7r),e(P4,YY),e(YY,Q7r),e(P4,H7r),e(ie,U7r),e(ie,B4),e(B4,wMe),e(wMe,J7r),e(B4,Y7r),e(B4,KY),e(KY,K7r),e(B4,Z7r),e(ie,eLr),e(ie,I4),e(I4,AMe),e(AMe,oLr),e(I4,rLr),e(I4,ZY),e(ZY,tLr),e(I4,aLr),e(ie,nLr),e(ie,N4),e(N4,LMe),e(LMe,sLr),e(N4,lLr),e(N4,eK),e(eK,iLr),e(N4,dLr),e(ie,cLr),e(ie,q4),e(q4,yMe),e(yMe,fLr),e(q4,mLr),e(q4,oK),e(oK,gLr),e(q4,hLr),e(ie,pLr),e(ie,j4),e(j4,xMe),e(xMe,_Lr),e(j4,uLr),e(j4,rK),e(rK,bLr),e(j4,vLr),e(ie,FLr),e(ie,D4),e(D4,$Me),e($Me,TLr),e(D4,MLr),e(D4,tK),e(tK,ELr),e(D4,CLr),e(ie,wLr),e(ie,G4),e(G4,kMe),e(kMe,ALr),e(G4,LLr),e(G4,aK),e(aK,yLr),e(G4,xLr),e(ie,$Lr),e(ie,O4),e(O4,SMe),e(SMe,kLr),e(O4,SLr),e(O4,nK),e(nK,RLr),e(O4,PLr),e(ie,BLr),e(ie,V4),e(V4,RMe),e(RMe,ILr),e(V4,NLr),e(V4,sK),e(sK,qLr),e(V4,jLr),e(ie,DLr),e(ie,X4),e(X4,PMe),e(PMe,GLr),e(X4,OLr),e(X4,lK),e(lK,VLr),e(X4,XLr),e(ie,zLr),e(ie,z4),e(z4,BMe),e(BMe,WLr),e(z4,QLr),e(z4,iK),e(iK,HLr),e(z4,ULr),e(ie,JLr),e(ie,W4),e(W4,IMe),e(IMe,YLr),e(W4,KLr),e(W4,dK),e(dK,ZLr),e(W4,eyr),e(ie,oyr),e(ie,Q4),e(Q4,NMe),e(NMe,ryr),e(Q4,tyr),e(Q4,cK),e(cK,ayr),e(Q4,nyr),e(ie,syr),e(ie,H4),e(H4,qMe),e(qMe,lyr),e(H4,iyr),e(H4,fK),e(fK,dyr),e(H4,cyr),e(ie,fyr),e(ie,U4),e(U4,jMe),e(jMe,myr),e(U4,gyr),e(U4,mK),e(mK,hyr),e(U4,pyr),e(Pr,_yr),M(J4,Pr,null),b(f,AWe,u),b(f,Ec,u),e(Ec,Y4),e(Y4,DMe),M(Sx,DMe,null),e(Ec,uyr),e(Ec,GMe),e(GMe,byr),b(f,LWe,u),b(f,lr,u),M(Rx,lr,null),e(lr,vyr),e(lr,Cc),e(Cc,Fyr),e(Cc,gK),e(gK,Tyr),e(Cc,Myr),e(Cc,hK),e(hK,Eyr),e(Cc,Cyr),e(lr,wyr),e(lr,Px),e(Px,Ayr),e(Px,OMe),e(OMe,Lyr),e(Px,yyr),e(lr,xyr),e(lr,qt),M(Bx,qt,null),e(qt,$yr),e(qt,VMe),e(VMe,kyr),e(qt,Syr),e(qt,wc),e(wc,Ryr),e(wc,XMe),e(XMe,Pyr),e(wc,Byr),e(wc,pK),e(pK,Iyr),e(wc,Nyr),e(qt,qyr),M(K4,qt,null),e(lr,jyr),e(lr,Br),M(Ix,Br,null),e(Br,Dyr),e(Br,zMe),e(zMe,Gyr),e(Br,Oyr),e(Br,gn),e(gn,Vyr),e(gn,WMe),e(WMe,Xyr),e(gn,zyr),e(gn,QMe),e(QMe,Wyr),e(gn,Qyr),e(gn,HMe),e(HMe,Hyr),e(gn,Uyr),e(Br,Jyr),e(Br,ye),e(ye,Z4),e(Z4,UMe),e(UMe,Yyr),e(Z4,Kyr),e(Z4,_K),e(_K,Zyr),e(Z4,e9r),e(ye,o9r),e(ye,eE),e(eE,JMe),e(JMe,r9r),e(eE,t9r),e(eE,uK),e(uK,a9r),e(eE,n9r),e(ye,s9r),e(ye,oE),e(oE,YMe),e(YMe,l9r),e(oE,i9r),e(oE,bK),e(bK,d9r),e(oE,c9r),e(ye,f9r),e(ye,rE),e(rE,KMe),e(KMe,m9r),e(rE,g9r),e(rE,vK),e(vK,h9r),e(rE,p9r),e(ye,_9r),e(ye,tE),e(tE,ZMe),e(ZMe,u9r),e(tE,b9r),e(tE,FK),e(FK,v9r),e(tE,F9r),e(ye,T9r),e(ye,aE),e(aE,e4e),e(e4e,M9r),e(aE,E9r),e(aE,TK),e(TK,C9r),e(aE,w9r),e(ye,A9r),e(ye,nE),e(nE,o4e),e(o4e,L9r),e(nE,y9r),e(nE,MK),e(MK,x9r),e(nE,$9r),e(ye,k9r),e(ye,sE),e(sE,r4e),e(r4e,S9r),e(sE,R9r),e(sE,EK),e(EK,P9r),e(sE,B9r),e(ye,I9r),e(ye,lE),e(lE,t4e),e(t4e,N9r),e(lE,q9r),e(lE,CK),e(CK,j9r),e(lE,D9r),e(ye,G9r),e(ye,iE),e(iE,a4e),e(a4e,O9r),e(iE,V9r),e(iE,wK),e(wK,X9r),e(iE,z9r),e(Br,W9r),M(dE,Br,null),b(f,yWe,u),b(f,Ac,u),e(Ac,cE),e(cE,n4e),M(Nx,n4e,null),e(Ac,Q9r),e(Ac,s4e),e(s4e,H9r),b(f,xWe,u),b(f,ir,u),M(qx,ir,null),e(ir,U9r),e(ir,Lc),e(Lc,J9r),e(Lc,AK),e(AK,Y9r),e(Lc,K9r),e(Lc,LK),e(LK,Z9r),e(Lc,exr),e(ir,oxr),e(ir,jx),e(jx,rxr),e(jx,l4e),e(l4e,txr),e(jx,axr),e(ir,nxr),e(ir,jt),M(Dx,jt,null),e(jt,sxr),e(jt,i4e),e(i4e,lxr),e(jt,ixr),e(jt,yc),e(yc,dxr),e(yc,d4e),e(d4e,cxr),e(yc,fxr),e(yc,yK),e(yK,mxr),e(yc,gxr),e(jt,hxr),M(fE,jt,null),e(ir,pxr),e(ir,Ir),M(Gx,Ir,null),e(Ir,_xr),e(Ir,c4e),e(c4e,uxr),e(Ir,bxr),e(Ir,hn),e(hn,vxr),e(hn,f4e),e(f4e,Fxr),e(hn,Txr),e(hn,m4e),e(m4e,Mxr),e(hn,Exr),e(hn,g4e),e(g4e,Cxr),e(hn,wxr),e(Ir,Axr),e(Ir,te),e(te,mE),e(mE,h4e),e(h4e,Lxr),e(mE,yxr),e(mE,xK),e(xK,xxr),e(mE,$xr),e(te,kxr),e(te,gE),e(gE,p4e),e(p4e,Sxr),e(gE,Rxr),e(gE,$K),e($K,Pxr),e(gE,Bxr),e(te,Ixr),e(te,hE),e(hE,_4e),e(_4e,Nxr),e(hE,qxr),e(hE,kK),e(kK,jxr),e(hE,Dxr),e(te,Gxr),e(te,pE),e(pE,u4e),e(u4e,Oxr),e(pE,Vxr),e(pE,SK),e(SK,Xxr),e(pE,zxr),e(te,Wxr),e(te,_E),e(_E,b4e),e(b4e,Qxr),e(_E,Hxr),e(_E,RK),e(RK,Uxr),e(_E,Jxr),e(te,Yxr),e(te,uE),e(uE,v4e),e(v4e,Kxr),e(uE,Zxr),e(uE,PK),e(PK,e$r),e(uE,o$r),e(te,r$r),e(te,bE),e(bE,F4e),e(F4e,t$r),e(bE,a$r),e(bE,BK),e(BK,n$r),e(bE,s$r),e(te,l$r),e(te,vE),e(vE,T4e),e(T4e,i$r),e(vE,d$r),e(vE,IK),e(IK,c$r),e(vE,f$r),e(te,m$r),e(te,FE),e(FE,M4e),e(M4e,g$r),e(FE,h$r),e(FE,NK),e(NK,p$r),e(FE,_$r),e(te,u$r),e(te,TE),e(TE,E4e),e(E4e,b$r),e(TE,v$r),e(TE,qK),e(qK,F$r),e(TE,T$r),e(te,M$r),e(te,ME),e(ME,C4e),e(C4e,E$r),e(ME,C$r),e(ME,jK),e(jK,w$r),e(ME,A$r),e(te,L$r),e(te,EE),e(EE,w4e),e(w4e,y$r),e(EE,x$r),e(EE,DK),e(DK,$$r),e(EE,k$r),e(te,S$r),e(te,CE),e(CE,A4e),e(A4e,R$r),e(CE,P$r),e(CE,GK),e(GK,B$r),e(CE,I$r),e(te,N$r),e(te,wE),e(wE,L4e),e(L4e,q$r),e(wE,j$r),e(wE,OK),e(OK,D$r),e(wE,G$r),e(te,O$r),e(te,AE),e(AE,y4e),e(y4e,V$r),e(AE,X$r),e(AE,VK),e(VK,z$r),e(AE,W$r),e(te,Q$r),e(te,LE),e(LE,x4e),e(x4e,H$r),e(LE,U$r),e(LE,XK),e(XK,J$r),e(LE,Y$r),e(te,K$r),e(te,yE),e(yE,$4e),e($4e,Z$r),e(yE,ekr),e(yE,zK),e(zK,okr),e(yE,rkr),e(te,tkr),e(te,xE),e(xE,k4e),e(k4e,akr),e(xE,nkr),e(xE,WK),e(WK,skr),e(xE,lkr),e(te,ikr),e(te,$E),e($E,S4e),e(S4e,dkr),e($E,ckr),e($E,QK),e(QK,fkr),e($E,mkr),e(te,gkr),e(te,kE),e(kE,R4e),e(R4e,hkr),e(kE,pkr),e(kE,HK),e(HK,_kr),e(kE,ukr),e(te,bkr),e(te,SE),e(SE,P4e),e(P4e,vkr),e(SE,Fkr),e(SE,UK),e(UK,Tkr),e(SE,Mkr),e(te,Ekr),e(te,RE),e(RE,B4e),e(B4e,Ckr),e(RE,wkr),e(RE,JK),e(JK,Akr),e(RE,Lkr),e(te,ykr),e(te,PE),e(PE,I4e),e(I4e,xkr),e(PE,$kr),e(PE,YK),e(YK,kkr),e(PE,Skr),e(te,Rkr),e(te,BE),e(BE,N4e),e(N4e,Pkr),e(BE,Bkr),e(BE,KK),e(KK,Ikr),e(BE,Nkr),e(te,qkr),e(te,IE),e(IE,q4e),e(q4e,jkr),e(IE,Dkr),e(IE,ZK),e(ZK,Gkr),e(IE,Okr),e(te,Vkr),e(te,NE),e(NE,j4e),e(j4e,Xkr),e(NE,zkr),e(NE,eZ),e(eZ,Wkr),e(NE,Qkr),e(Ir,Hkr),M(qE,Ir,null),b(f,$We,u),b(f,xc,u),e(xc,jE),e(jE,D4e),M(Ox,D4e,null),e(xc,Ukr),e(xc,G4e),e(G4e,Jkr),b(f,kWe,u),b(f,dr,u),M(Vx,dr,null),e(dr,Ykr),e(dr,$c),e($c,Kkr),e($c,oZ),e(oZ,Zkr),e($c,eSr),e($c,rZ),e(rZ,oSr),e($c,rSr),e(dr,tSr),e(dr,Xx),e(Xx,aSr),e(Xx,O4e),e(O4e,nSr),e(Xx,sSr),e(dr,lSr),e(dr,Dt),M(zx,Dt,null),e(Dt,iSr),e(Dt,V4e),e(V4e,dSr),e(Dt,cSr),e(Dt,kc),e(kc,fSr),e(kc,X4e),e(X4e,mSr),e(kc,gSr),e(kc,tZ),e(tZ,hSr),e(kc,pSr),e(Dt,_Sr),M(DE,Dt,null),e(dr,uSr),e(dr,Nr),M(Wx,Nr,null),e(Nr,bSr),e(Nr,z4e),e(z4e,vSr),e(Nr,FSr),e(Nr,pn),e(pn,TSr),e(pn,W4e),e(W4e,MSr),e(pn,ESr),e(pn,Q4e),e(Q4e,CSr),e(pn,wSr),e(pn,H4e),e(H4e,ASr),e(pn,LSr),e(Nr,ySr),e(Nr,ve),e(ve,GE),e(GE,U4e),e(U4e,xSr),e(GE,$Sr),e(GE,aZ),e(aZ,kSr),e(GE,SSr),e(ve,RSr),e(ve,OE),e(OE,J4e),e(J4e,PSr),e(OE,BSr),e(OE,nZ),e(nZ,ISr),e(OE,NSr),e(ve,qSr),e(ve,VE),e(VE,Y4e),e(Y4e,jSr),e(VE,DSr),e(VE,sZ),e(sZ,GSr),e(VE,OSr),e(ve,VSr),e(ve,XE),e(XE,K4e),e(K4e,XSr),e(XE,zSr),e(XE,lZ),e(lZ,WSr),e(XE,QSr),e(ve,HSr),e(ve,zE),e(zE,Z4e),e(Z4e,USr),e(zE,JSr),e(zE,iZ),e(iZ,YSr),e(zE,KSr),e(ve,ZSr),e(ve,WE),e(WE,eEe),e(eEe,eRr),e(WE,oRr),e(WE,dZ),e(dZ,rRr),e(WE,tRr),e(ve,aRr),e(ve,QE),e(QE,oEe),e(oEe,nRr),e(QE,sRr),e(QE,cZ),e(cZ,lRr),e(QE,iRr),e(ve,dRr),e(ve,HE),e(HE,rEe),e(rEe,cRr),e(HE,fRr),e(HE,fZ),e(fZ,mRr),e(HE,gRr),e(ve,hRr),e(ve,UE),e(UE,tEe),e(tEe,pRr),e(UE,_Rr),e(UE,mZ),e(mZ,uRr),e(UE,bRr),e(ve,vRr),e(ve,JE),e(JE,aEe),e(aEe,FRr),e(JE,TRr),e(JE,gZ),e(gZ,MRr),e(JE,ERr),e(ve,CRr),e(ve,YE),e(YE,nEe),e(nEe,wRr),e(YE,ARr),e(YE,hZ),e(hZ,LRr),e(YE,yRr),e(ve,xRr),e(ve,KE),e(KE,sEe),e(sEe,$Rr),e(KE,kRr),e(KE,pZ),e(pZ,SRr),e(KE,RRr),e(ve,PRr),e(ve,ZE),e(ZE,lEe),e(lEe,BRr),e(ZE,IRr),e(ZE,_Z),e(_Z,NRr),e(ZE,qRr),e(ve,jRr),e(ve,eC),e(eC,iEe),e(iEe,DRr),e(eC,GRr),e(eC,uZ),e(uZ,ORr),e(eC,VRr),e(ve,XRr),e(ve,oC),e(oC,dEe),e(dEe,zRr),e(oC,WRr),e(oC,bZ),e(bZ,QRr),e(oC,HRr),e(ve,URr),e(ve,rC),e(rC,cEe),e(cEe,JRr),e(rC,YRr),e(rC,vZ),e(vZ,KRr),e(rC,ZRr),e(ve,ePr),e(ve,tC),e(tC,fEe),e(fEe,oPr),e(tC,rPr),e(tC,FZ),e(FZ,tPr),e(tC,aPr),e(Nr,nPr),M(aC,Nr,null),b(f,SWe,u),b(f,Sc,u),e(Sc,nC),e(nC,mEe),M(Qx,mEe,null),e(Sc,sPr),e(Sc,gEe),e(gEe,lPr),b(f,RWe,u),b(f,cr,u),M(Hx,cr,null),e(cr,iPr),e(cr,Rc),e(Rc,dPr),e(Rc,TZ),e(TZ,cPr),e(Rc,fPr),e(Rc,MZ),e(MZ,mPr),e(Rc,gPr),e(cr,hPr),e(cr,Ux),e(Ux,pPr),e(Ux,hEe),e(hEe,_Pr),e(Ux,uPr),e(cr,bPr),e(cr,Gt),M(Jx,Gt,null),e(Gt,vPr),e(Gt,pEe),e(pEe,FPr),e(Gt,TPr),e(Gt,Pc),e(Pc,MPr),e(Pc,_Ee),e(_Ee,EPr),e(Pc,CPr),e(Pc,EZ),e(EZ,wPr),e(Pc,APr),e(Gt,LPr),M(sC,Gt,null),e(cr,yPr),e(cr,qr),M(Yx,qr,null),e(qr,xPr),e(qr,uEe),e(uEe,$Pr),e(qr,kPr),e(qr,_n),e(_n,SPr),e(_n,bEe),e(bEe,RPr),e(_n,PPr),e(_n,vEe),e(vEe,BPr),e(_n,IPr),e(_n,FEe),e(FEe,NPr),e(_n,qPr),e(qr,jPr),e(qr,Kx),e(Kx,lC),e(lC,TEe),e(TEe,DPr),e(lC,GPr),e(lC,CZ),e(CZ,OPr),e(lC,VPr),e(Kx,XPr),e(Kx,iC),e(iC,MEe),e(MEe,zPr),e(iC,WPr),e(iC,wZ),e(wZ,QPr),e(iC,HPr),e(qr,UPr),M(dC,qr,null),b(f,PWe,u),b(f,Bc,u),e(Bc,cC),e(cC,EEe),M(Zx,EEe,null),e(Bc,JPr),e(Bc,CEe),e(CEe,YPr),b(f,BWe,u),b(f,fr,u),M(e$,fr,null),e(fr,KPr),e(fr,Ic),e(Ic,ZPr),e(Ic,AZ),e(AZ,eBr),e(Ic,oBr),e(Ic,LZ),e(LZ,rBr),e(Ic,tBr),e(fr,aBr),e(fr,o$),e(o$,nBr),e(o$,wEe),e(wEe,sBr),e(o$,lBr),e(fr,iBr),e(fr,Ot),M(r$,Ot,null),e(Ot,dBr),e(Ot,AEe),e(AEe,cBr),e(Ot,fBr),e(Ot,Nc),e(Nc,mBr),e(Nc,LEe),e(LEe,gBr),e(Nc,hBr),e(Nc,yZ),e(yZ,pBr),e(Nc,_Br),e(Ot,uBr),M(fC,Ot,null),e(fr,bBr),e(fr,jr),M(t$,jr,null),e(jr,vBr),e(jr,yEe),e(yEe,FBr),e(jr,TBr),e(jr,un),e(un,MBr),e(un,xEe),e(xEe,EBr),e(un,CBr),e(un,$Ee),e($Ee,wBr),e(un,ABr),e(un,kEe),e(kEe,LBr),e(un,yBr),e(jr,xBr),e(jr,SEe),e(SEe,mC),e(mC,REe),e(REe,$Br),e(mC,kBr),e(mC,xZ),e(xZ,SBr),e(mC,RBr),e(jr,PBr),M(gC,jr,null),b(f,IWe,u),b(f,qc,u),e(qc,hC),e(hC,PEe),M(a$,PEe,null),e(qc,BBr),e(qc,BEe),e(BEe,IBr),b(f,NWe,u),b(f,mr,u),M(n$,mr,null),e(mr,NBr),e(mr,jc),e(jc,qBr),e(jc,$Z),e($Z,jBr),e(jc,DBr),e(jc,kZ),e(kZ,GBr),e(jc,OBr),e(mr,VBr),e(mr,s$),e(s$,XBr),e(s$,IEe),e(IEe,zBr),e(s$,WBr),e(mr,QBr),e(mr,Vt),M(l$,Vt,null),e(Vt,HBr),e(Vt,NEe),e(NEe,UBr),e(Vt,JBr),e(Vt,Dc),e(Dc,YBr),e(Dc,qEe),e(qEe,KBr),e(Dc,ZBr),e(Dc,SZ),e(SZ,eIr),e(Dc,oIr),e(Vt,rIr),M(pC,Vt,null),e(mr,tIr),e(mr,Dr),M(i$,Dr,null),e(Dr,aIr),e(Dr,jEe),e(jEe,nIr),e(Dr,sIr),e(Dr,bn),e(bn,lIr),e(bn,DEe),e(DEe,iIr),e(bn,dIr),e(bn,GEe),e(GEe,cIr),e(bn,fIr),e(bn,OEe),e(OEe,mIr),e(bn,gIr),e(Dr,hIr),e(Dr,de),e(de,_C),e(_C,VEe),e(VEe,pIr),e(_C,_Ir),e(_C,RZ),e(RZ,uIr),e(_C,bIr),e(de,vIr),e(de,uC),e(uC,XEe),e(XEe,FIr),e(uC,TIr),e(uC,PZ),e(PZ,MIr),e(uC,EIr),e(de,CIr),e(de,bC),e(bC,zEe),e(zEe,wIr),e(bC,AIr),e(bC,BZ),e(BZ,LIr),e(bC,yIr),e(de,xIr),e(de,vC),e(vC,WEe),e(WEe,$Ir),e(vC,kIr),e(vC,IZ),e(IZ,SIr),e(vC,RIr),e(de,PIr),e(de,FC),e(FC,QEe),e(QEe,BIr),e(FC,IIr),e(FC,NZ),e(NZ,NIr),e(FC,qIr),e(de,jIr),e(de,TC),e(TC,HEe),e(HEe,DIr),e(TC,GIr),e(TC,qZ),e(qZ,OIr),e(TC,VIr),e(de,XIr),e(de,MC),e(MC,UEe),e(UEe,zIr),e(MC,WIr),e(MC,jZ),e(jZ,QIr),e(MC,HIr),e(de,UIr),e(de,EC),e(EC,JEe),e(JEe,JIr),e(EC,YIr),e(EC,DZ),e(DZ,KIr),e(EC,ZIr),e(de,eNr),e(de,CC),e(CC,YEe),e(YEe,oNr),e(CC,rNr),e(CC,GZ),e(GZ,tNr),e(CC,aNr),e(de,nNr),e(de,wC),e(wC,KEe),e(KEe,sNr),e(wC,lNr),e(wC,OZ),e(OZ,iNr),e(wC,dNr),e(de,cNr),e(de,AC),e(AC,ZEe),e(ZEe,fNr),e(AC,mNr),e(AC,VZ),e(VZ,gNr),e(AC,hNr),e(de,pNr),e(de,LC),e(LC,eCe),e(eCe,_Nr),e(LC,uNr),e(LC,XZ),e(XZ,bNr),e(LC,vNr),e(de,FNr),e(de,yC),e(yC,oCe),e(oCe,TNr),e(yC,MNr),e(yC,zZ),e(zZ,ENr),e(yC,CNr),e(de,wNr),e(de,xC),e(xC,rCe),e(rCe,ANr),e(xC,LNr),e(xC,WZ),e(WZ,yNr),e(xC,xNr),e(de,$Nr),e(de,$C),e($C,tCe),e(tCe,kNr),e($C,SNr),e($C,QZ),e(QZ,RNr),e($C,PNr),e(de,BNr),e(de,kC),e(kC,aCe),e(aCe,INr),e(kC,NNr),e(kC,HZ),e(HZ,qNr),e(kC,jNr),e(de,DNr),e(de,SC),e(SC,nCe),e(nCe,GNr),e(SC,ONr),e(SC,UZ),e(UZ,VNr),e(SC,XNr),e(de,zNr),e(de,RC),e(RC,sCe),e(sCe,WNr),e(RC,QNr),e(RC,JZ),e(JZ,HNr),e(RC,UNr),e(de,JNr),e(de,PC),e(PC,lCe),e(lCe,YNr),e(PC,KNr),e(PC,YZ),e(YZ,ZNr),e(PC,eqr),e(de,oqr),e(de,BC),e(BC,iCe),e(iCe,rqr),e(BC,tqr),e(BC,KZ),e(KZ,aqr),e(BC,nqr),e(Dr,sqr),M(IC,Dr,null),b(f,qWe,u),b(f,Gc,u),e(Gc,NC),e(NC,dCe),M(d$,dCe,null),e(Gc,lqr),e(Gc,cCe),e(cCe,iqr),b(f,jWe,u),b(f,gr,u),M(c$,gr,null),e(gr,dqr),e(gr,Oc),e(Oc,cqr),e(Oc,ZZ),e(ZZ,fqr),e(Oc,mqr),e(Oc,eee),e(eee,gqr),e(Oc,hqr),e(gr,pqr),e(gr,f$),e(f$,_qr),e(f$,fCe),e(fCe,uqr),e(f$,bqr),e(gr,vqr),e(gr,Xt),M(m$,Xt,null),e(Xt,Fqr),e(Xt,mCe),e(mCe,Tqr),e(Xt,Mqr),e(Xt,Vc),e(Vc,Eqr),e(Vc,gCe),e(gCe,Cqr),e(Vc,wqr),e(Vc,oee),e(oee,Aqr),e(Vc,Lqr),e(Xt,yqr),M(qC,Xt,null),e(gr,xqr),e(gr,Gr),M(g$,Gr,null),e(Gr,$qr),e(Gr,hCe),e(hCe,kqr),e(Gr,Sqr),e(Gr,vn),e(vn,Rqr),e(vn,pCe),e(pCe,Pqr),e(vn,Bqr),e(vn,_Ce),e(_Ce,Iqr),e(vn,Nqr),e(vn,uCe),e(uCe,qqr),e(vn,jqr),e(Gr,Dqr),e(Gr,ce),e(ce,jC),e(jC,bCe),e(bCe,Gqr),e(jC,Oqr),e(jC,ree),e(ree,Vqr),e(jC,Xqr),e(ce,zqr),e(ce,DC),e(DC,vCe),e(vCe,Wqr),e(DC,Qqr),e(DC,tee),e(tee,Hqr),e(DC,Uqr),e(ce,Jqr),e(ce,GC),e(GC,FCe),e(FCe,Yqr),e(GC,Kqr),e(GC,aee),e(aee,Zqr),e(GC,ejr),e(ce,ojr),e(ce,OC),e(OC,TCe),e(TCe,rjr),e(OC,tjr),e(OC,nee),e(nee,ajr),e(OC,njr),e(ce,sjr),e(ce,VC),e(VC,MCe),e(MCe,ljr),e(VC,ijr),e(VC,see),e(see,djr),e(VC,cjr),e(ce,fjr),e(ce,XC),e(XC,ECe),e(ECe,mjr),e(XC,gjr),e(XC,lee),e(lee,hjr),e(XC,pjr),e(ce,_jr),e(ce,zC),e(zC,CCe),e(CCe,ujr),e(zC,bjr),e(zC,iee),e(iee,vjr),e(zC,Fjr),e(ce,Tjr),e(ce,WC),e(WC,wCe),e(wCe,Mjr),e(WC,Ejr),e(WC,dee),e(dee,Cjr),e(WC,wjr),e(ce,Ajr),e(ce,QC),e(QC,ACe),e(ACe,Ljr),e(QC,yjr),e(QC,cee),e(cee,xjr),e(QC,$jr),e(ce,kjr),e(ce,HC),e(HC,LCe),e(LCe,Sjr),e(HC,Rjr),e(HC,fee),e(fee,Pjr),e(HC,Bjr),e(ce,Ijr),e(ce,UC),e(UC,yCe),e(yCe,Njr),e(UC,qjr),e(UC,mee),e(mee,jjr),e(UC,Djr),e(ce,Gjr),e(ce,JC),e(JC,xCe),e(xCe,Ojr),e(JC,Vjr),e(JC,gee),e(gee,Xjr),e(JC,zjr),e(ce,Wjr),e(ce,YC),e(YC,$Ce),e($Ce,Qjr),e(YC,Hjr),e(YC,hee),e(hee,Ujr),e(YC,Jjr),e(ce,Yjr),e(ce,KC),e(KC,kCe),e(kCe,Kjr),e(KC,Zjr),e(KC,pee),e(pee,eDr),e(KC,oDr),e(ce,rDr),e(ce,ZC),e(ZC,SCe),e(SCe,tDr),e(ZC,aDr),e(ZC,_ee),e(_ee,nDr),e(ZC,sDr),e(ce,lDr),e(ce,e5),e(e5,RCe),e(RCe,iDr),e(e5,dDr),e(e5,uee),e(uee,cDr),e(e5,fDr),e(ce,mDr),e(ce,o5),e(o5,PCe),e(PCe,gDr),e(o5,hDr),e(o5,bee),e(bee,pDr),e(o5,_Dr),e(ce,uDr),e(ce,r5),e(r5,BCe),e(BCe,bDr),e(r5,vDr),e(r5,vee),e(vee,FDr),e(r5,TDr),e(ce,MDr),e(ce,t5),e(t5,ICe),e(ICe,EDr),e(t5,CDr),e(t5,Fee),e(Fee,wDr),e(t5,ADr),e(ce,LDr),e(ce,a5),e(a5,NCe),e(NCe,yDr),e(a5,xDr),e(a5,Tee),e(Tee,$Dr),e(a5,kDr),e(Gr,SDr),M(n5,Gr,null),b(f,DWe,u),b(f,Xc,u),e(Xc,s5),e(s5,qCe),M(h$,qCe,null),e(Xc,RDr),e(Xc,jCe),e(jCe,PDr),b(f,GWe,u),b(f,hr,u),M(p$,hr,null),e(hr,BDr),e(hr,zc),e(zc,IDr),e(zc,Mee),e(Mee,NDr),e(zc,qDr),e(zc,Eee),e(Eee,jDr),e(zc,DDr),e(hr,GDr),e(hr,_$),e(_$,ODr),e(_$,DCe),e(DCe,VDr),e(_$,XDr),e(hr,zDr),e(hr,zt),M(u$,zt,null),e(zt,WDr),e(zt,GCe),e(GCe,QDr),e(zt,HDr),e(zt,Wc),e(Wc,UDr),e(Wc,OCe),e(OCe,JDr),e(Wc,YDr),e(Wc,Cee),e(Cee,KDr),e(Wc,ZDr),e(zt,eGr),M(l5,zt,null),e(hr,oGr),e(hr,Or),M(b$,Or,null),e(Or,rGr),e(Or,VCe),e(VCe,tGr),e(Or,aGr),e(Or,Fn),e(Fn,nGr),e(Fn,XCe),e(XCe,sGr),e(Fn,lGr),e(Fn,zCe),e(zCe,iGr),e(Fn,dGr),e(Fn,WCe),e(WCe,cGr),e(Fn,fGr),e(Or,mGr),e(Or,QCe),e(QCe,i5),e(i5,HCe),e(HCe,gGr),e(i5,hGr),e(i5,wee),e(wee,pGr),e(i5,_Gr),e(Or,uGr),M(d5,Or,null),b(f,OWe,u),b(f,Qc,u),e(Qc,c5),e(c5,UCe),M(v$,UCe,null),e(Qc,bGr),e(Qc,JCe),e(JCe,vGr),b(f,VWe,u),b(f,pr,u),M(F$,pr,null),e(pr,FGr),e(pr,Hc),e(Hc,TGr),e(Hc,Aee),e(Aee,MGr),e(Hc,EGr),e(Hc,Lee),e(Lee,CGr),e(Hc,wGr),e(pr,AGr),e(pr,T$),e(T$,LGr),e(T$,YCe),e(YCe,yGr),e(T$,xGr),e(pr,$Gr),e(pr,Wt),M(M$,Wt,null),e(Wt,kGr),e(Wt,KCe),e(KCe,SGr),e(Wt,RGr),e(Wt,Uc),e(Uc,PGr),e(Uc,ZCe),e(ZCe,BGr),e(Uc,IGr),e(Uc,yee),e(yee,NGr),e(Uc,qGr),e(Wt,jGr),M(f5,Wt,null),e(pr,DGr),e(pr,Vr),M(E$,Vr,null),e(Vr,GGr),e(Vr,e5e),e(e5e,OGr),e(Vr,VGr),e(Vr,Tn),e(Tn,XGr),e(Tn,o5e),e(o5e,zGr),e(Tn,WGr),e(Tn,r5e),e(r5e,QGr),e(Tn,HGr),e(Tn,t5e),e(t5e,UGr),e(Tn,JGr),e(Vr,YGr),e(Vr,a5e),e(a5e,m5),e(m5,n5e),e(n5e,KGr),e(m5,ZGr),e(m5,xee),e(xee,eOr),e(m5,oOr),e(Vr,rOr),M(g5,Vr,null),b(f,XWe,u),b(f,Jc,u),e(Jc,h5),e(h5,s5e),M(C$,s5e,null),e(Jc,tOr),e(Jc,l5e),e(l5e,aOr),b(f,zWe,u),b(f,_r,u),M(w$,_r,null),e(_r,nOr),e(_r,Yc),e(Yc,sOr),e(Yc,$ee),e($ee,lOr),e(Yc,iOr),e(Yc,kee),e(kee,dOr),e(Yc,cOr),e(_r,fOr),e(_r,A$),e(A$,mOr),e(A$,i5e),e(i5e,gOr),e(A$,hOr),e(_r,pOr),e(_r,Qt),M(L$,Qt,null),e(Qt,_Or),e(Qt,d5e),e(d5e,uOr),e(Qt,bOr),e(Qt,Kc),e(Kc,vOr),e(Kc,c5e),e(c5e,FOr),e(Kc,TOr),e(Kc,See),e(See,MOr),e(Kc,EOr),e(Qt,COr),M(p5,Qt,null),e(_r,wOr),e(_r,Xr),M(y$,Xr,null),e(Xr,AOr),e(Xr,f5e),e(f5e,LOr),e(Xr,yOr),e(Xr,Mn),e(Mn,xOr),e(Mn,m5e),e(m5e,$Or),e(Mn,kOr),e(Mn,g5e),e(g5e,SOr),e(Mn,ROr),e(Mn,h5e),e(h5e,POr),e(Mn,BOr),e(Xr,IOr),e(Xr,oe),e(oe,_5),e(_5,p5e),e(p5e,NOr),e(_5,qOr),e(_5,Ree),e(Ree,jOr),e(_5,DOr),e(oe,GOr),e(oe,u5),e(u5,_5e),e(_5e,OOr),e(u5,VOr),e(u5,Pee),e(Pee,XOr),e(u5,zOr),e(oe,WOr),e(oe,b5),e(b5,u5e),e(u5e,QOr),e(b5,HOr),e(b5,Bee),e(Bee,UOr),e(b5,JOr),e(oe,YOr),e(oe,v5),e(v5,b5e),e(b5e,KOr),e(v5,ZOr),e(v5,Iee),e(Iee,eVr),e(v5,oVr),e(oe,rVr),e(oe,F5),e(F5,v5e),e(v5e,tVr),e(F5,aVr),e(F5,Nee),e(Nee,nVr),e(F5,sVr),e(oe,lVr),e(oe,T5),e(T5,F5e),e(F5e,iVr),e(T5,dVr),e(T5,qee),e(qee,cVr),e(T5,fVr),e(oe,mVr),e(oe,M5),e(M5,T5e),e(T5e,gVr),e(M5,hVr),e(M5,jee),e(jee,pVr),e(M5,_Vr),e(oe,uVr),e(oe,E5),e(E5,M5e),e(M5e,bVr),e(E5,vVr),e(E5,Dee),e(Dee,FVr),e(E5,TVr),e(oe,MVr),e(oe,C5),e(C5,E5e),e(E5e,EVr),e(C5,CVr),e(C5,Gee),e(Gee,wVr),e(C5,AVr),e(oe,LVr),e(oe,w5),e(w5,C5e),e(C5e,yVr),e(w5,xVr),e(w5,Oee),e(Oee,$Vr),e(w5,kVr),e(oe,SVr),e(oe,A5),e(A5,w5e),e(w5e,RVr),e(A5,PVr),e(A5,Vee),e(Vee,BVr),e(A5,IVr),e(oe,NVr),e(oe,L5),e(L5,A5e),e(A5e,qVr),e(L5,jVr),e(L5,Xee),e(Xee,DVr),e(L5,GVr),e(oe,OVr),e(oe,y5),e(y5,L5e),e(L5e,VVr),e(y5,XVr),e(y5,zee),e(zee,zVr),e(y5,WVr),e(oe,QVr),e(oe,x5),e(x5,y5e),e(y5e,HVr),e(x5,UVr),e(x5,Wee),e(Wee,JVr),e(x5,YVr),e(oe,KVr),e(oe,$5),e($5,x5e),e(x5e,ZVr),e($5,eXr),e($5,Qee),e(Qee,oXr),e($5,rXr),e(oe,tXr),e(oe,k5),e(k5,$5e),e($5e,aXr),e(k5,nXr),e(k5,Hee),e(Hee,sXr),e(k5,lXr),e(oe,iXr),e(oe,S5),e(S5,k5e),e(k5e,dXr),e(S5,cXr),e(S5,Uee),e(Uee,fXr),e(S5,mXr),e(oe,gXr),e(oe,R5),e(R5,S5e),e(S5e,hXr),e(R5,pXr),e(R5,Jee),e(Jee,_Xr),e(R5,uXr),e(oe,bXr),e(oe,P5),e(P5,R5e),e(R5e,vXr),e(P5,FXr),e(P5,Yee),e(Yee,TXr),e(P5,MXr),e(oe,EXr),e(oe,B5),e(B5,P5e),e(P5e,CXr),e(B5,wXr),e(B5,Kee),e(Kee,AXr),e(B5,LXr),e(oe,yXr),e(oe,I5),e(I5,B5e),e(B5e,xXr),e(I5,$Xr),e(I5,Zee),e(Zee,kXr),e(I5,SXr),e(oe,RXr),e(oe,N5),e(N5,I5e),e(I5e,PXr),e(N5,BXr),e(N5,eoe),e(eoe,IXr),e(N5,NXr),e(oe,qXr),e(oe,q5),e(q5,N5e),e(N5e,jXr),e(q5,DXr),e(q5,ooe),e(ooe,GXr),e(q5,OXr),e(oe,VXr),e(oe,j5),e(j5,q5e),e(q5e,XXr),e(j5,zXr),e(j5,roe),e(roe,WXr),e(j5,QXr),e(oe,HXr),e(oe,D5),e(D5,j5e),e(j5e,UXr),e(D5,JXr),e(D5,toe),e(toe,YXr),e(D5,KXr),e(oe,ZXr),e(oe,G5),e(G5,D5e),e(D5e,ezr),e(G5,ozr),e(G5,aoe),e(aoe,rzr),e(G5,tzr),e(oe,azr),e(oe,O5),e(O5,G5e),e(G5e,nzr),e(O5,szr),e(O5,noe),e(noe,lzr),e(O5,izr),e(Xr,dzr),M(V5,Xr,null),b(f,WWe,u),b(f,Zc,u),e(Zc,X5),e(X5,O5e),M(x$,O5e,null),e(Zc,czr),e(Zc,V5e),e(V5e,fzr),b(f,QWe,u),b(f,ur,u),M($$,ur,null),e(ur,mzr),e(ur,ef),e(ef,gzr),e(ef,soe),e(soe,hzr),e(ef,pzr),e(ef,loe),e(loe,_zr),e(ef,uzr),e(ur,bzr),e(ur,k$),e(k$,vzr),e(k$,X5e),e(X5e,Fzr),e(k$,Tzr),e(ur,Mzr),e(ur,Ht),M(S$,Ht,null),e(Ht,Ezr),e(Ht,z5e),e(z5e,Czr),e(Ht,wzr),e(Ht,of),e(of,Azr),e(of,W5e),e(W5e,Lzr),e(of,yzr),e(of,ioe),e(ioe,xzr),e(of,$zr),e(Ht,kzr),M(z5,Ht,null),e(ur,Szr),e(ur,zr),M(R$,zr,null),e(zr,Rzr),e(zr,Q5e),e(Q5e,Pzr),e(zr,Bzr),e(zr,En),e(En,Izr),e(En,H5e),e(H5e,Nzr),e(En,qzr),e(En,U5e),e(U5e,jzr),e(En,Dzr),e(En,J5e),e(J5e,Gzr),e(En,Ozr),e(zr,Vzr),e(zr,xe),e(xe,W5),e(W5,Y5e),e(Y5e,Xzr),e(W5,zzr),e(W5,doe),e(doe,Wzr),e(W5,Qzr),e(xe,Hzr),e(xe,Q5),e(Q5,K5e),e(K5e,Uzr),e(Q5,Jzr),e(Q5,coe),e(coe,Yzr),e(Q5,Kzr),e(xe,Zzr),e(xe,H5),e(H5,Z5e),e(Z5e,eWr),e(H5,oWr),e(H5,foe),e(foe,rWr),e(H5,tWr),e(xe,aWr),e(xe,U5),e(U5,e0e),e(e0e,nWr),e(U5,sWr),e(U5,moe),e(moe,lWr),e(U5,iWr),e(xe,dWr),e(xe,J5),e(J5,o0e),e(o0e,cWr),e(J5,fWr),e(J5,goe),e(goe,mWr),e(J5,gWr),e(xe,hWr),e(xe,Y5),e(Y5,r0e),e(r0e,pWr),e(Y5,_Wr),e(Y5,hoe),e(hoe,uWr),e(Y5,bWr),e(xe,vWr),e(xe,K5),e(K5,t0e),e(t0e,FWr),e(K5,TWr),e(K5,poe),e(poe,MWr),e(K5,EWr),e(xe,CWr),e(xe,Z5),e(Z5,a0e),e(a0e,wWr),e(Z5,AWr),e(Z5,_oe),e(_oe,LWr),e(Z5,yWr),e(xe,xWr),e(xe,e0),e(e0,n0e),e(n0e,$Wr),e(e0,kWr),e(e0,uoe),e(uoe,SWr),e(e0,RWr),e(xe,PWr),e(xe,o0),e(o0,s0e),e(s0e,BWr),e(o0,IWr),e(o0,boe),e(boe,NWr),e(o0,qWr),e(zr,jWr),M(r0,zr,null),b(f,HWe,u),b(f,rf,u),e(rf,t0),e(t0,l0e),M(P$,l0e,null),e(rf,DWr),e(rf,i0e),e(i0e,GWr),b(f,UWe,u),b(f,br,u),M(B$,br,null),e(br,OWr),e(br,tf),e(tf,VWr),e(tf,voe),e(voe,XWr),e(tf,zWr),e(tf,Foe),e(Foe,WWr),e(tf,QWr),e(br,HWr),e(br,I$),e(I$,UWr),e(I$,d0e),e(d0e,JWr),e(I$,YWr),e(br,KWr),e(br,Ut),M(N$,Ut,null),e(Ut,ZWr),e(Ut,c0e),e(c0e,eQr),e(Ut,oQr),e(Ut,af),e(af,rQr),e(af,f0e),e(f0e,tQr),e(af,aQr),e(af,Toe),e(Toe,nQr),e(af,sQr),e(Ut,lQr),M(a0,Ut,null),e(br,iQr),e(br,Wr),M(q$,Wr,null),e(Wr,dQr),e(Wr,m0e),e(m0e,cQr),e(Wr,fQr),e(Wr,Cn),e(Cn,mQr),e(Cn,g0e),e(g0e,gQr),e(Cn,hQr),e(Cn,h0e),e(h0e,pQr),e(Cn,_Qr),e(Cn,p0e),e(p0e,uQr),e(Cn,bQr),e(Wr,vQr),e(Wr,Ee),e(Ee,n0),e(n0,_0e),e(_0e,FQr),e(n0,TQr),e(n0,Moe),e(Moe,MQr),e(n0,EQr),e(Ee,CQr),e(Ee,s0),e(s0,u0e),e(u0e,wQr),e(s0,AQr),e(s0,Eoe),e(Eoe,LQr),e(s0,yQr),e(Ee,xQr),e(Ee,l0),e(l0,b0e),e(b0e,$Qr),e(l0,kQr),e(l0,Coe),e(Coe,SQr),e(l0,RQr),e(Ee,PQr),e(Ee,i0),e(i0,v0e),e(v0e,BQr),e(i0,IQr),e(i0,woe),e(woe,NQr),e(i0,qQr),e(Ee,jQr),e(Ee,d0),e(d0,F0e),e(F0e,DQr),e(d0,GQr),e(d0,Aoe),e(Aoe,OQr),e(d0,VQr),e(Ee,XQr),e(Ee,c0),e(c0,T0e),e(T0e,zQr),e(c0,WQr),e(c0,Loe),e(Loe,QQr),e(c0,HQr),e(Ee,UQr),e(Ee,f0),e(f0,M0e),e(M0e,JQr),e(f0,YQr),e(f0,yoe),e(yoe,KQr),e(f0,ZQr),e(Ee,eHr),e(Ee,m0),e(m0,E0e),e(E0e,oHr),e(m0,rHr),e(m0,xoe),e(xoe,tHr),e(m0,aHr),e(Ee,nHr),e(Ee,g0),e(g0,C0e),e(C0e,sHr),e(g0,lHr),e(g0,$oe),e($oe,iHr),e(g0,dHr),e(Ee,cHr),e(Ee,h0),e(h0,w0e),e(w0e,fHr),e(h0,mHr),e(h0,koe),e(koe,gHr),e(h0,hHr),e(Ee,pHr),e(Ee,p0),e(p0,A0e),e(A0e,_Hr),e(p0,uHr),e(p0,Soe),e(Soe,bHr),e(p0,vHr),e(Ee,FHr),e(Ee,_0),e(_0,L0e),e(L0e,THr),e(_0,MHr),e(_0,Roe),e(Roe,EHr),e(_0,CHr),e(Ee,wHr),e(Ee,u0),e(u0,y0e),e(y0e,AHr),e(u0,LHr),e(u0,Poe),e(Poe,yHr),e(u0,xHr),e(Wr,$Hr),M(b0,Wr,null),b(f,JWe,u),b(f,nf,u),e(nf,v0),e(v0,x0e),M(j$,x0e,null),e(nf,kHr),e(nf,$0e),e($0e,SHr),b(f,YWe,u),b(f,vr,u),M(D$,vr,null),e(vr,RHr),e(vr,sf),e(sf,PHr),e(sf,Boe),e(Boe,BHr),e(sf,IHr),e(sf,Ioe),e(Ioe,NHr),e(sf,qHr),e(vr,jHr),e(vr,G$),e(G$,DHr),e(G$,k0e),e(k0e,GHr),e(G$,OHr),e(vr,VHr),e(vr,Jt),M(O$,Jt,null),e(Jt,XHr),e(Jt,S0e),e(S0e,zHr),e(Jt,WHr),e(Jt,lf),e(lf,QHr),e(lf,R0e),e(R0e,HHr),e(lf,UHr),e(lf,Noe),e(Noe,JHr),e(lf,YHr),e(Jt,KHr),M(F0,Jt,null),e(vr,ZHr),e(vr,Qr),M(V$,Qr,null),e(Qr,eUr),e(Qr,P0e),e(P0e,oUr),e(Qr,rUr),e(Qr,wn),e(wn,tUr),e(wn,B0e),e(B0e,aUr),e(wn,nUr),e(wn,I0e),e(I0e,sUr),e(wn,lUr),e(wn,N0e),e(N0e,iUr),e(wn,dUr),e(Qr,cUr),e(Qr,$e),e($e,T0),e(T0,q0e),e(q0e,fUr),e(T0,mUr),e(T0,qoe),e(qoe,gUr),e(T0,hUr),e($e,pUr),e($e,M0),e(M0,j0e),e(j0e,_Ur),e(M0,uUr),e(M0,joe),e(joe,bUr),e(M0,vUr),e($e,FUr),e($e,E0),e(E0,D0e),e(D0e,TUr),e(E0,MUr),e(E0,Doe),e(Doe,EUr),e(E0,CUr),e($e,wUr),e($e,C0),e(C0,G0e),e(G0e,AUr),e(C0,LUr),e(C0,Goe),e(Goe,yUr),e(C0,xUr),e($e,$Ur),e($e,w0),e(w0,O0e),e(O0e,kUr),e(w0,SUr),e(w0,Ooe),e(Ooe,RUr),e(w0,PUr),e($e,BUr),e($e,A0),e(A0,V0e),e(V0e,IUr),e(A0,NUr),e(A0,Voe),e(Voe,qUr),e(A0,jUr),e($e,DUr),e($e,L0),e(L0,X0e),e(X0e,GUr),e(L0,OUr),e(L0,Xoe),e(Xoe,VUr),e(L0,XUr),e($e,zUr),e($e,y0),e(y0,z0e),e(z0e,WUr),e(y0,QUr),e(y0,zoe),e(zoe,HUr),e(y0,UUr),e($e,JUr),e($e,x0),e(x0,W0e),e(W0e,YUr),e(x0,KUr),e(x0,Woe),e(Woe,ZUr),e(x0,eJr),e($e,oJr),e($e,$0),e($0,Q0e),e(Q0e,rJr),e($0,tJr),e($0,Qoe),e(Qoe,aJr),e($0,nJr),e(Qr,sJr),M(k0,Qr,null),b(f,KWe,u),b(f,df,u),e(df,S0),e(S0,H0e),M(X$,H0e,null),e(df,lJr),e(df,U0e),e(U0e,iJr),b(f,ZWe,u),b(f,Fr,u),M(z$,Fr,null),e(Fr,dJr),e(Fr,cf),e(cf,cJr),e(cf,Hoe),e(Hoe,fJr),e(cf,mJr),e(cf,Uoe),e(Uoe,gJr),e(cf,hJr),e(Fr,pJr),e(Fr,W$),e(W$,_Jr),e(W$,J0e),e(J0e,uJr),e(W$,bJr),e(Fr,vJr),e(Fr,Yt),M(Q$,Yt,null),e(Yt,FJr),e(Yt,Y0e),e(Y0e,TJr),e(Yt,MJr),e(Yt,ff),e(ff,EJr),e(ff,K0e),e(K0e,CJr),e(ff,wJr),e(ff,Joe),e(Joe,AJr),e(ff,LJr),e(Yt,yJr),M(R0,Yt,null),e(Fr,xJr),e(Fr,Hr),M(H$,Hr,null),e(Hr,$Jr),e(Hr,Z0e),e(Z0e,kJr),e(Hr,SJr),e(Hr,An),e(An,RJr),e(An,ewe),e(ewe,PJr),e(An,BJr),e(An,owe),e(owe,IJr),e(An,NJr),e(An,rwe),e(rwe,qJr),e(An,jJr),e(Hr,DJr),e(Hr,ke),e(ke,P0),e(P0,twe),e(twe,GJr),e(P0,OJr),e(P0,Yoe),e(Yoe,VJr),e(P0,XJr),e(ke,zJr),e(ke,B0),e(B0,awe),e(awe,WJr),e(B0,QJr),e(B0,Koe),e(Koe,HJr),e(B0,UJr),e(ke,JJr),e(ke,I0),e(I0,nwe),e(nwe,YJr),e(I0,KJr),e(I0,Zoe),e(Zoe,ZJr),e(I0,eYr),e(ke,oYr),e(ke,N0),e(N0,swe),e(swe,rYr),e(N0,tYr),e(N0,ere),e(ere,aYr),e(N0,nYr),e(ke,sYr),e(ke,q0),e(q0,lwe),e(lwe,lYr),e(q0,iYr),e(q0,ore),e(ore,dYr),e(q0,cYr),e(ke,fYr),e(ke,j0),e(j0,iwe),e(iwe,mYr),e(j0,gYr),e(j0,rre),e(rre,hYr),e(j0,pYr),e(ke,_Yr),e(ke,D0),e(D0,dwe),e(dwe,uYr),e(D0,bYr),e(D0,tre),e(tre,vYr),e(D0,FYr),e(ke,TYr),e(ke,G0),e(G0,cwe),e(cwe,MYr),e(G0,EYr),e(G0,are),e(are,CYr),e(G0,wYr),e(ke,AYr),e(ke,O0),e(O0,fwe),e(fwe,LYr),e(O0,yYr),e(O0,nre),e(nre,xYr),e(O0,$Yr),e(ke,kYr),e(ke,V0),e(V0,mwe),e(mwe,SYr),e(V0,RYr),e(V0,sre),e(sre,PYr),e(V0,BYr),e(Hr,IYr),M(X0,Hr,null),b(f,eQe,u),b(f,mf,u),e(mf,z0),e(z0,gwe),M(U$,gwe,null),e(mf,NYr),e(mf,hwe),e(hwe,qYr),b(f,oQe,u),b(f,Tr,u),M(J$,Tr,null),e(Tr,jYr),e(Tr,gf),e(gf,DYr),e(gf,lre),e(lre,GYr),e(gf,OYr),e(gf,ire),e(ire,VYr),e(gf,XYr),e(Tr,zYr),e(Tr,Y$),e(Y$,WYr),e(Y$,pwe),e(pwe,QYr),e(Y$,HYr),e(Tr,UYr),e(Tr,Kt),M(K$,Kt,null),e(Kt,JYr),e(Kt,_we),e(_we,YYr),e(Kt,KYr),e(Kt,hf),e(hf,ZYr),e(hf,uwe),e(uwe,eKr),e(hf,oKr),e(hf,dre),e(dre,rKr),e(hf,tKr),e(Kt,aKr),M(W0,Kt,null),e(Tr,nKr),e(Tr,Ur),M(Z$,Ur,null),e(Ur,sKr),e(Ur,bwe),e(bwe,lKr),e(Ur,iKr),e(Ur,Ln),e(Ln,dKr),e(Ln,vwe),e(vwe,cKr),e(Ln,fKr),e(Ln,Fwe),e(Fwe,mKr),e(Ln,gKr),e(Ln,Twe),e(Twe,hKr),e(Ln,pKr),e(Ur,_Kr),e(Ur,Se),e(Se,Q0),e(Q0,Mwe),e(Mwe,uKr),e(Q0,bKr),e(Q0,cre),e(cre,vKr),e(Q0,FKr),e(Se,TKr),e(Se,H0),e(H0,Ewe),e(Ewe,MKr),e(H0,EKr),e(H0,fre),e(fre,CKr),e(H0,wKr),e(Se,AKr),e(Se,U0),e(U0,Cwe),e(Cwe,LKr),e(U0,yKr),e(U0,mre),e(mre,xKr),e(U0,$Kr),e(Se,kKr),e(Se,J0),e(J0,wwe),e(wwe,SKr),e(J0,RKr),e(J0,gre),e(gre,PKr),e(J0,BKr),e(Se,IKr),e(Se,Y0),e(Y0,Awe),e(Awe,NKr),e(Y0,qKr),e(Y0,hre),e(hre,jKr),e(Y0,DKr),e(Se,GKr),e(Se,K0),e(K0,Lwe),e(Lwe,OKr),e(K0,VKr),e(K0,pre),e(pre,XKr),e(K0,zKr),e(Se,WKr),e(Se,Z0),e(Z0,ywe),e(ywe,QKr),e(Z0,HKr),e(Z0,_re),e(_re,UKr),e(Z0,JKr),e(Se,YKr),e(Se,ew),e(ew,xwe),e(xwe,KKr),e(ew,ZKr),e(ew,ure),e(ure,eZr),e(ew,oZr),e(Se,rZr),e(Se,ow),e(ow,$we),e($we,tZr),e(ow,aZr),e(ow,bre),e(bre,nZr),e(ow,sZr),e(Se,lZr),e(Se,rw),e(rw,kwe),e(kwe,iZr),e(rw,dZr),e(rw,vre),e(vre,cZr),e(rw,fZr),e(Ur,mZr),M(tw,Ur,null),b(f,rQe,u),b(f,pf,u),e(pf,aw),e(aw,Swe),M(ek,Swe,null),e(pf,gZr),e(pf,Rwe),e(Rwe,hZr),b(f,tQe,u),b(f,Mr,u),M(ok,Mr,null),e(Mr,pZr),e(Mr,_f),e(_f,_Zr),e(_f,Fre),e(Fre,uZr),e(_f,bZr),e(_f,Tre),e(Tre,vZr),e(_f,FZr),e(Mr,TZr),e(Mr,rk),e(rk,MZr),e(rk,Pwe),e(Pwe,EZr),e(rk,CZr),e(Mr,wZr),e(Mr,Zt),M(tk,Zt,null),e(Zt,AZr),e(Zt,Bwe),e(Bwe,LZr),e(Zt,yZr),e(Zt,uf),e(uf,xZr),e(uf,Iwe),e(Iwe,$Zr),e(uf,kZr),e(uf,Mre),e(Mre,SZr),e(uf,RZr),e(Zt,PZr),M(nw,Zt,null),e(Mr,BZr),e(Mr,Jr),M(ak,Jr,null),e(Jr,IZr),e(Jr,Nwe),e(Nwe,NZr),e(Jr,qZr),e(Jr,yn),e(yn,jZr),e(yn,qwe),e(qwe,DZr),e(yn,GZr),e(yn,jwe),e(jwe,OZr),e(yn,VZr),e(yn,Dwe),e(Dwe,XZr),e(yn,zZr),e(Jr,WZr),e(Jr,Re),e(Re,sw),e(sw,Gwe),e(Gwe,QZr),e(sw,HZr),e(sw,Ere),e(Ere,UZr),e(sw,JZr),e(Re,YZr),e(Re,lw),e(lw,Owe),e(Owe,KZr),e(lw,ZZr),e(lw,Cre),e(Cre,eet),e(lw,oet),e(Re,ret),e(Re,iw),e(iw,Vwe),e(Vwe,tet),e(iw,aet),e(iw,wre),e(wre,net),e(iw,set),e(Re,iet),e(Re,dw),e(dw,Xwe),e(Xwe,det),e(dw,cet),e(dw,Are),e(Are,fet),e(dw,met),e(Re,get),e(Re,cw),e(cw,zwe),e(zwe,het),e(cw,pet),e(cw,Lre),e(Lre,_et),e(cw,uet),e(Re,bet),e(Re,fw),e(fw,Wwe),e(Wwe,vet),e(fw,Fet),e(fw,yre),e(yre,Tet),e(fw,Met),e(Re,Eet),e(Re,mw),e(mw,Qwe),e(Qwe,Cet),e(mw,wet),e(mw,xre),e(xre,Aet),e(mw,Let),e(Re,yet),e(Re,gw),e(gw,Hwe),e(Hwe,xet),e(gw,$et),e(gw,$re),e($re,ket),e(gw,Set),e(Re,Ret),e(Re,hw),e(hw,Uwe),e(Uwe,Pet),e(hw,Bet),e(hw,kre),e(kre,Iet),e(hw,Net),e(Re,qet),e(Re,pw),e(pw,Jwe),e(Jwe,jet),e(pw,Det),e(pw,Sre),e(Sre,Get),e(pw,Oet),e(Jr,Vet),M(_w,Jr,null),b(f,aQe,u),b(f,bf,u),e(bf,uw),e(uw,Ywe),M(nk,Ywe,null),e(bf,Xet),e(bf,Kwe),e(Kwe,zet),b(f,nQe,u),b(f,Er,u),M(sk,Er,null),e(Er,Wet),e(Er,vf),e(vf,Qet),e(vf,Rre),e(Rre,Het),e(vf,Uet),e(vf,Pre),e(Pre,Jet),e(vf,Yet),e(Er,Ket),e(Er,lk),e(lk,Zet),e(lk,Zwe),e(Zwe,eot),e(lk,oot),e(Er,rot),e(Er,ea),M(ik,ea,null),e(ea,tot),e(ea,eAe),e(eAe,aot),e(ea,not),e(ea,Ff),e(Ff,sot),e(Ff,oAe),e(oAe,lot),e(Ff,iot),e(Ff,Bre),e(Bre,dot),e(Ff,cot),e(ea,fot),M(bw,ea,null),e(Er,mot),e(Er,Yr),M(dk,Yr,null),e(Yr,got),e(Yr,rAe),e(rAe,hot),e(Yr,pot),e(Yr,xn),e(xn,_ot),e(xn,tAe),e(tAe,uot),e(xn,bot),e(xn,aAe),e(aAe,vot),e(xn,Fot),e(xn,nAe),e(nAe,Tot),e(xn,Mot),e(Yr,Eot),e(Yr,Xe),e(Xe,vw),e(vw,sAe),e(sAe,Cot),e(vw,wot),e(vw,Ire),e(Ire,Aot),e(vw,Lot),e(Xe,yot),e(Xe,Fw),e(Fw,lAe),e(lAe,xot),e(Fw,$ot),e(Fw,Nre),e(Nre,kot),e(Fw,Sot),e(Xe,Rot),e(Xe,Tw),e(Tw,iAe),e(iAe,Pot),e(Tw,Bot),e(Tw,qre),e(qre,Iot),e(Tw,Not),e(Xe,qot),e(Xe,Mw),e(Mw,dAe),e(dAe,jot),e(Mw,Dot),e(Mw,jre),e(jre,Got),e(Mw,Oot),e(Xe,Vot),e(Xe,Ew),e(Ew,cAe),e(cAe,Xot),e(Ew,zot),e(Ew,Dre),e(Dre,Wot),e(Ew,Qot),e(Xe,Hot),e(Xe,Cw),e(Cw,fAe),e(fAe,Uot),e(Cw,Jot),e(Cw,Gre),e(Gre,Yot),e(Cw,Kot),e(Xe,Zot),e(Xe,ww),e(ww,mAe),e(mAe,ert),e(ww,ort),e(ww,Ore),e(Ore,rrt),e(ww,trt),e(Xe,art),e(Xe,Aw),e(Aw,gAe),e(gAe,nrt),e(Aw,srt),e(Aw,Vre),e(Vre,lrt),e(Aw,irt),e(Yr,drt),M(Lw,Yr,null),b(f,sQe,u),b(f,Tf,u),e(Tf,yw),e(yw,hAe),M(ck,hAe,null),e(Tf,crt),e(Tf,pAe),e(pAe,frt),b(f,lQe,u),b(f,Cr,u),M(fk,Cr,null),e(Cr,mrt),e(Cr,Mf),e(Mf,grt),e(Mf,Xre),e(Xre,hrt),e(Mf,prt),e(Mf,zre),e(zre,_rt),e(Mf,urt),e(Cr,brt),e(Cr,mk),e(mk,vrt),e(mk,_Ae),e(_Ae,Frt),e(mk,Trt),e(Cr,Mrt),e(Cr,oa),M(gk,oa,null),e(oa,Ert),e(oa,uAe),e(uAe,Crt),e(oa,wrt),e(oa,Ef),e(Ef,Art),e(Ef,bAe),e(bAe,Lrt),e(Ef,yrt),e(Ef,Wre),e(Wre,xrt),e(Ef,$rt),e(oa,krt),M(xw,oa,null),e(Cr,Srt),e(Cr,Kr),M(hk,Kr,null),e(Kr,Rrt),e(Kr,vAe),e(vAe,Prt),e(Kr,Brt),e(Kr,$n),e($n,Irt),e($n,FAe),e(FAe,Nrt),e($n,qrt),e($n,TAe),e(TAe,jrt),e($n,Drt),e($n,MAe),e(MAe,Grt),e($n,Ort),e(Kr,Vrt),e(Kr,ze),e(ze,$w),e($w,EAe),e(EAe,Xrt),e($w,zrt),e($w,Qre),e(Qre,Wrt),e($w,Qrt),e(ze,Hrt),e(ze,kw),e(kw,CAe),e(CAe,Urt),e(kw,Jrt),e(kw,Hre),e(Hre,Yrt),e(kw,Krt),e(ze,Zrt),e(ze,Sw),e(Sw,wAe),e(wAe,ett),e(Sw,ott),e(Sw,Ure),e(Ure,rtt),e(Sw,ttt),e(ze,att),e(ze,Rw),e(Rw,AAe),e(AAe,ntt),e(Rw,stt),e(Rw,Jre),e(Jre,ltt),e(Rw,itt),e(ze,dtt),e(ze,Pw),e(Pw,LAe),e(LAe,ctt),e(Pw,ftt),e(Pw,Yre),e(Yre,mtt),e(Pw,gtt),e(ze,htt),e(ze,Bw),e(Bw,yAe),e(yAe,ptt),e(Bw,_tt),e(Bw,Kre),e(Kre,utt),e(Bw,btt),e(ze,vtt),e(ze,Iw),e(Iw,xAe),e(xAe,Ftt),e(Iw,Ttt),e(Iw,Zre),e(Zre,Mtt),e(Iw,Ett),e(ze,Ctt),e(ze,Nw),e(Nw,$Ae),e($Ae,wtt),e(Nw,Att),e(Nw,ete),e(ete,Ltt),e(Nw,ytt),e(Kr,xtt),M(qw,Kr,null),b(f,iQe,u),b(f,Cf,u),e(Cf,jw),e(jw,kAe),M(pk,kAe,null),e(Cf,$tt),e(Cf,SAe),e(SAe,ktt),b(f,dQe,u),b(f,wr,u),M(_k,wr,null),e(wr,Stt),e(wr,wf),e(wf,Rtt),e(wf,ote),e(ote,Ptt),e(wf,Btt),e(wf,rte),e(rte,Itt),e(wf,Ntt),e(wr,qtt),e(wr,uk),e(uk,jtt),e(uk,RAe),e(RAe,Dtt),e(uk,Gtt),e(wr,Ott),e(wr,ra),M(bk,ra,null),e(ra,Vtt),e(ra,PAe),e(PAe,Xtt),e(ra,ztt),e(ra,Af),e(Af,Wtt),e(Af,BAe),e(BAe,Qtt),e(Af,Htt),e(Af,tte),e(tte,Utt),e(Af,Jtt),e(ra,Ytt),M(Dw,ra,null),e(wr,Ktt),e(wr,Zr),M(vk,Zr,null),e(Zr,Ztt),e(Zr,IAe),e(IAe,eat),e(Zr,oat),e(Zr,kn),e(kn,rat),e(kn,NAe),e(NAe,tat),e(kn,aat),e(kn,qAe),e(qAe,nat),e(kn,sat),e(kn,jAe),e(jAe,lat),e(kn,iat),e(Zr,dat),e(Zr,DAe),e(DAe,Gw),e(Gw,GAe),e(GAe,cat),e(Gw,fat),e(Gw,ate),e(ate,mat),e(Gw,gat),e(Zr,hat),M(Ow,Zr,null),b(f,cQe,u),b(f,Lf,u),e(Lf,Vw),e(Vw,OAe),M(Fk,OAe,null),e(Lf,pat),e(Lf,VAe),e(VAe,_at),b(f,fQe,u),b(f,Ar,u),M(Tk,Ar,null),e(Ar,uat),e(Ar,yf),e(yf,bat),e(yf,nte),e(nte,vat),e(yf,Fat),e(yf,ste),e(ste,Tat),e(yf,Mat),e(Ar,Eat),e(Ar,Mk),e(Mk,Cat),e(Mk,XAe),e(XAe,wat),e(Mk,Aat),e(Ar,Lat),e(Ar,ta),M(Ek,ta,null),e(ta,yat),e(ta,zAe),e(zAe,xat),e(ta,$at),e(ta,xf),e(xf,kat),e(xf,WAe),e(WAe,Sat),e(xf,Rat),e(xf,lte),e(lte,Pat),e(xf,Bat),e(ta,Iat),M(Xw,ta,null),e(Ar,Nat),e(Ar,et),M(Ck,et,null),e(et,qat),e(et,QAe),e(QAe,jat),e(et,Dat),e(et,Sn),e(Sn,Gat),e(Sn,HAe),e(HAe,Oat),e(Sn,Vat),e(Sn,UAe),e(UAe,Xat),e(Sn,zat),e(Sn,JAe),e(JAe,Wat),e(Sn,Qat),e(et,Hat),e(et,wk),e(wk,zw),e(zw,YAe),e(YAe,Uat),e(zw,Jat),e(zw,ite),e(ite,Yat),e(zw,Kat),e(wk,Zat),e(wk,Ww),e(Ww,KAe),e(KAe,ent),e(Ww,ont),e(Ww,dte),e(dte,rnt),e(Ww,tnt),e(et,ant),M(Qw,et,null),b(f,mQe,u),b(f,$f,u),e($f,Hw),e(Hw,ZAe),M(Ak,ZAe,null),e($f,nnt),e($f,e7e),e(e7e,snt),b(f,gQe,u),b(f,Lr,u),M(Lk,Lr,null),e(Lr,lnt),e(Lr,kf),e(kf,int),e(kf,cte),e(cte,dnt),e(kf,cnt),e(kf,fte),e(fte,fnt),e(kf,mnt),e(Lr,gnt),e(Lr,yk),e(yk,hnt),e(yk,o7e),e(o7e,pnt),e(yk,_nt),e(Lr,unt),e(Lr,aa),M(xk,aa,null),e(aa,bnt),e(aa,r7e),e(r7e,vnt),e(aa,Fnt),e(aa,Sf),e(Sf,Tnt),e(Sf,t7e),e(t7e,Mnt),e(Sf,Ent),e(Sf,mte),e(mte,Cnt),e(Sf,wnt),e(aa,Ant),M(Uw,aa,null),e(Lr,Lnt),e(Lr,ot),M($k,ot,null),e(ot,ynt),e(ot,a7e),e(a7e,xnt),e(ot,$nt),e(ot,Rn),e(Rn,knt),e(Rn,n7e),e(n7e,Snt),e(Rn,Rnt),e(Rn,s7e),e(s7e,Pnt),e(Rn,Bnt),e(Rn,l7e),e(l7e,Int),e(Rn,Nnt),e(ot,qnt),e(ot,i7e),e(i7e,Jw),e(Jw,d7e),e(d7e,jnt),e(Jw,Dnt),e(Jw,gte),e(gte,Gnt),e(Jw,Ont),e(ot,Vnt),M(Yw,ot,null),hQe=!0},p(f,[u]){const kk={};u&2&&(kk.$$scope={dirty:u,ctx:f}),Gf.$set(kk);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:f}),oh.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:f}),Nh.$set(f7e);const m7e={};u&2&&(m7e.$$scope={dirty:u,ctx:f}),Mp.$set(m7e);const Sk={};u&2&&(Sk.$$scope={dirty:u,ctx:f}),Ep.$set(Sk);const g7e={};u&2&&(g7e.$$scope={dirty:u,ctx:f}),zp.$set(g7e);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Wp.$set(Pn);const h7e={};u&2&&(h7e.$$scope={dirty:u,ctx:f}),Up.$set(h7e);const p7e={};u&2&&(p7e.$$scope={dirty:u,ctx:f}),r1.$set(p7e);const _7e={};u&2&&(_7e.$$scope={dirty:u,ctx:f}),a1.$set(_7e);const Rk={};u&2&&(Rk.$$scope={dirty:u,ctx:f}),Y1.$set(Rk);const u7e={};u&2&&(u7e.$$scope={dirty:u,ctx:f}),Z1.$set(u7e);const Pk={};u&2&&(Pk.$$scope={dirty:u,ctx:f}),G2.$set(Pk);const b7e={};u&2&&(b7e.$$scope={dirty:u,ctx:f}),V2.$set(b7e);const Bk={};u&2&&(Bk.$$scope={dirty:u,ctx:f}),xb.$set(Bk);const v7e={};u&2&&(v7e.$$scope={dirty:u,ctx:f}),kb.$set(v7e);const F7e={};u&2&&(F7e.$$scope={dirty:u,ctx:f}),Kb.$set(F7e);const T7e={};u&2&&(T7e.$$scope={dirty:u,ctx:f}),ev.$set(T7e);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),Zv.$set(Rf);const M7e={};u&2&&(M7e.$$scope={dirty:u,ctx:f}),o3.$set(M7e);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),R3.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),B3.$set(C7e);const Ik={};u&2&&(Ik.$$scope={dirty:u,ctx:f}),V3.$set(Ik);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),z3.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),xF.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),kF.$set(L7e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),T6.$set(nt);const Nk={};u&2&&(Nk.$$scope={dirty:u,ctx:f}),E6.$set(Nk);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),A6.$set(y7e);const qk={};u&2&&(qk.$$scope={dirty:u,ctx:f}),y6.$set(qk);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),X6.$set(x7e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),W6.$set(st);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),U6.$set($7e);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),Y6.$set(Pf);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),eT.$set(k7e);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),rT.$set(S7e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),gT.$set(L);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),pT.$set(Kw);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),MT.$set(R7e);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),CT.$set(P7e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),IT.$set(Zw);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),qT.$set(B7e);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),OT.$set(I7e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),XT.$set(eA);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),YT.$set(N7e);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),ZT.$set(q7e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),n8.$set(oA);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),l8.$set(j7e);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),f8.$set(D7e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),g8.$set(rA);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),_8.$set(G7e);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),b8.$set(O7e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),w8.$set(tA);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),L8.$set(V7e);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:f}),$8.$set(X7e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),S8.$set(aA);const z7e={};u&2&&(z7e.$$scope={dirty:u,ctx:f}),xM.$set(z7e);const W7e={};u&2&&(W7e.$$scope={dirty:u,ctx:f}),kM.$set(W7e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),o4.$set(nA);const Q7e={};u&2&&(Q7e.$$scope={dirty:u,ctx:f}),t4.$set(Q7e);const H7e={};u&2&&(H7e.$$scope={dirty:u,ctx:f}),u4.$set(H7e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),v4.$set(sA);const U7e={};u&2&&(U7e.$$scope={dirty:u,ctx:f}),L4.$set(U7e);const J7e={};u&2&&(J7e.$$scope={dirty:u,ctx:f}),x4.$set(J7e);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),J4.$set(lA);const Y7e={};u&2&&(Y7e.$$scope={dirty:u,ctx:f}),K4.$set(Y7e);const K7e={};u&2&&(K7e.$$scope={dirty:u,ctx:f}),dE.$set(K7e);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),fE.$set(iA);const Z7e={};u&2&&(Z7e.$$scope={dirty:u,ctx:f}),qE.$set(Z7e);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),DE.$set(eLe);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),aC.$set(dA);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),sC.$set(oLe);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),dC.$set(rLe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),fC.$set(cA);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),gC.$set(tLe);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),pC.$set(aLe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),IC.$set(fA);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),qC.$set(nLe);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),n5.$set(sLe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),l5.$set(mA);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),d5.$set(lLe);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),f5.$set(iLe);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),g5.$set(gA);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),p5.$set(dLe);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),V5.$set(cLe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),z5.$set(hA);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),r0.$set(fLe);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),a0.$set(mLe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),b0.$set(pA);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),F0.$set(gLe);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),k0.$set(hLe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),R0.$set(_A);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),X0.$set(pLe);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),W0.$set(_Le);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),tw.$set(uA);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),nw.$set(uLe);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),_w.$set(bLe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),bw.$set(bA);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),Lw.$set(vLe);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),xw.$set(FLe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),qw.$set(vA);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),Dw.$set(TLe);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),Ow.$set(MLe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),Xw.$set(FA);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),Qw.$set(ELe);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),Uw.$set(CLe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),Yw.$set(TA)},i(f){hQe||(E(c.$$.fragment,f),E(Sa.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(Gf.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(LL.$$.fragment,f),E(oh.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(RL.$$.fragment,f),E(Nh.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(Mp.$$.fragment,f),E(Ep.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(zL.$$.fragment,f),E(zp.$$.fragment,f),E(Wp.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(Up.$$.fragment,f),E(YL.$$.fragment,f),E(r1.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(a1.$$.fragment,f),E(ry.$$.fragment,f),E(Y1.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(Z1.$$.fragment,f),E(ly.$$.fragment,f),E(G2.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(V2.$$.fragment,f),E(my.$$.fragment,f),E(xb.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(kb.$$.fragment,f),E(uy.$$.fragment,f),E(Kb.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(ev.$$.fragment,f),E(My.$$.fragment,f),E(Zv.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(o3.$$.fragment,f),E(Ly.$$.fragment,f),E(R3.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(B3.$$.fragment,f),E(Sy.$$.fragment,f),E(V3.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(z3.$$.fragment,f),E(Ny.$$.fragment,f),E(xF.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(kF.$$.fragment,f),E(Oy.$$.fragment,f),E(T6.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(E6.$$.fragment,f),E(Qy.$$.fragment,f),E(A6.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(y6.$$.fragment,f),E(Ky.$$.fragment,f),E(X6.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(W6.$$.fragment,f),E(t9.$$.fragment,f),E(U6.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(Y6.$$.fragment,f),E(i9.$$.fragment,f),E(eT.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(rT.$$.fragment,f),E(g9.$$.fragment,f),E(gT.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(pT.$$.fragment,f),E(b9.$$.fragment,f),E(MT.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(CT.$$.fragment,f),E(E9.$$.fragment,f),E(IT.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(qT.$$.fragment,f),E(y9.$$.fragment,f),E(OT.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(XT.$$.fragment,f),E(P9.$$.fragment,f),E(YT.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(ZT.$$.fragment,f),E(j9.$$.fragment,f),E(n8.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(l8.$$.fragment,f),E(X9.$$.fragment,f),E(f8.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(g8.$$.fragment,f),E(J9.$$.fragment,f),E(_8.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(b8.$$.fragment,f),E(ox.$$.fragment,f),E(w8.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(L8.$$.fragment,f),E(sx.$$.fragment,f),E($8.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(S8.$$.fragment,f),E(fx.$$.fragment,f),E(xM.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(kM.$$.fragment,f),E(_x.$$.fragment,f),E(o4.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(t4.$$.fragment,f),E(Tx.$$.fragment,f),E(u4.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(v4.$$.fragment,f),E(Ax.$$.fragment,f),E(L4.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(x4.$$.fragment,f),E(kx.$$.fragment,f),E(J4.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(K4.$$.fragment,f),E(Ix.$$.fragment,f),E(dE.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(fE.$$.fragment,f),E(Gx.$$.fragment,f),E(qE.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(DE.$$.fragment,f),E(Wx.$$.fragment,f),E(aC.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(sC.$$.fragment,f),E(Yx.$$.fragment,f),E(dC.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(r$.$$.fragment,f),E(fC.$$.fragment,f),E(t$.$$.fragment,f),E(gC.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(pC.$$.fragment,f),E(i$.$$.fragment,f),E(IC.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(qC.$$.fragment,f),E(g$.$$.fragment,f),E(n5.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(l5.$$.fragment,f),E(b$.$$.fragment,f),E(d5.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(f5.$$.fragment,f),E(E$.$$.fragment,f),E(g5.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(p5.$$.fragment,f),E(y$.$$.fragment,f),E(V5.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(z5.$$.fragment,f),E(R$.$$.fragment,f),E(r0.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(a0.$$.fragment,f),E(q$.$$.fragment,f),E(b0.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(F0.$$.fragment,f),E(V$.$$.fragment,f),E(k0.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(R0.$$.fragment,f),E(H$.$$.fragment,f),E(X0.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(W0.$$.fragment,f),E(Z$.$$.fragment,f),E(tw.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(nw.$$.fragment,f),E(ak.$$.fragment,f),E(_w.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(bw.$$.fragment,f),E(dk.$$.fragment,f),E(Lw.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(xw.$$.fragment,f),E(hk.$$.fragment,f),E(qw.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(Dw.$$.fragment,f),E(vk.$$.fragment,f),E(Ow.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(Xw.$$.fragment,f),E(Ck.$$.fragment,f),E(Qw.$$.fragment,f),E(Ak.$$.fragment,f),E(Lk.$$.fragment,f),E(xk.$$.fragment,f),E(Uw.$$.fragment,f),E($k.$$.fragment,f),E(Yw.$$.fragment,f),hQe=!0)},o(f){C(c.$$.fragment,f),C(Sa.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(Gf.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(LL.$$.fragment,f),C(oh.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(RL.$$.fragment,f),C(Nh.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(Mp.$$.fragment,f),C(Ep.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(zL.$$.fragment,f),C(zp.$$.fragment,f),C(Wp.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(Up.$$.fragment,f),C(YL.$$.fragment,f),C(r1.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(a1.$$.fragment,f),C(ry.$$.fragment,f),C(Y1.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(Z1.$$.fragment,f),C(ly.$$.fragment,f),C(G2.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(V2.$$.fragment,f),C(my.$$.fragment,f),C(xb.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(kb.$$.fragment,f),C(uy.$$.fragment,f),C(Kb.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(ev.$$.fragment,f),C(My.$$.fragment,f),C(Zv.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(o3.$$.fragment,f),C(Ly.$$.fragment,f),C(R3.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(B3.$$.fragment,f),C(Sy.$$.fragment,f),C(V3.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(z3.$$.fragment,f),C(Ny.$$.fragment,f),C(xF.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(kF.$$.fragment,f),C(Oy.$$.fragment,f),C(T6.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(E6.$$.fragment,f),C(Qy.$$.fragment,f),C(A6.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(y6.$$.fragment,f),C(Ky.$$.fragment,f),C(X6.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(W6.$$.fragment,f),C(t9.$$.fragment,f),C(U6.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(Y6.$$.fragment,f),C(i9.$$.fragment,f),C(eT.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(rT.$$.fragment,f),C(g9.$$.fragment,f),C(gT.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(pT.$$.fragment,f),C(b9.$$.fragment,f),C(MT.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(CT.$$.fragment,f),C(E9.$$.fragment,f),C(IT.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(qT.$$.fragment,f),C(y9.$$.fragment,f),C(OT.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(XT.$$.fragment,f),C(P9.$$.fragment,f),C(YT.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(ZT.$$.fragment,f),C(j9.$$.fragment,f),C(n8.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(l8.$$.fragment,f),C(X9.$$.fragment,f),C(f8.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(g8.$$.fragment,f),C(J9.$$.fragment,f),C(_8.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(b8.$$.fragment,f),C(ox.$$.fragment,f),C(w8.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(L8.$$.fragment,f),C(sx.$$.fragment,f),C($8.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(S8.$$.fragment,f),C(fx.$$.fragment,f),C(xM.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(kM.$$.fragment,f),C(_x.$$.fragment,f),C(o4.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(t4.$$.fragment,f),C(Tx.$$.fragment,f),C(u4.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(v4.$$.fragment,f),C(Ax.$$.fragment,f),C(L4.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(x4.$$.fragment,f),C(kx.$$.fragment,f),C(J4.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(K4.$$.fragment,f),C(Ix.$$.fragment,f),C(dE.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(fE.$$.fragment,f),C(Gx.$$.fragment,f),C(qE.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(DE.$$.fragment,f),C(Wx.$$.fragment,f),C(aC.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(sC.$$.fragment,f),C(Yx.$$.fragment,f),C(dC.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(r$.$$.fragment,f),C(fC.$$.fragment,f),C(t$.$$.fragment,f),C(gC.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(pC.$$.fragment,f),C(i$.$$.fragment,f),C(IC.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(qC.$$.fragment,f),C(g$.$$.fragment,f),C(n5.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(l5.$$.fragment,f),C(b$.$$.fragment,f),C(d5.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(f5.$$.fragment,f),C(E$.$$.fragment,f),C(g5.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(p5.$$.fragment,f),C(y$.$$.fragment,f),C(V5.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(z5.$$.fragment,f),C(R$.$$.fragment,f),C(r0.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(a0.$$.fragment,f),C(q$.$$.fragment,f),C(b0.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(F0.$$.fragment,f),C(V$.$$.fragment,f),C(k0.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(R0.$$.fragment,f),C(H$.$$.fragment,f),C(X0.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(W0.$$.fragment,f),C(Z$.$$.fragment,f),C(tw.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(nw.$$.fragment,f),C(ak.$$.fragment,f),C(_w.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(bw.$$.fragment,f),C(dk.$$.fragment,f),C(Lw.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(xw.$$.fragment,f),C(hk.$$.fragment,f),C(qw.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(Dw.$$.fragment,f),C(vk.$$.fragment,f),C(Ow.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(Xw.$$.fragment,f),C(Ck.$$.fragment,f),C(Qw.$$.fragment,f),C(Ak.$$.fragment,f),C(Lk.$$.fragment,f),C(xk.$$.fragment,f),C(Uw.$$.fragment,f),C($k.$$.fragment,f),C(Yw.$$.fragment,f),hQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(dze),f&&t(Ni),w(TL),f&&t(cze),f&&t(jn),f&&t(fze),w(ML,f),f&&t(mze),f&&t(nR),f&&t(gze),w(Gf,f),f&&t(hze),f&&t(qi),w(EL),f&&t(pze),f&&t(Lo),w(CL),w(LL),w(oh),w(yL),f&&t(_ze),f&&t(Di),w(xL),f&&t(uze),f&&t(yo),w($L),w(RL),w(Nh),w(PL),f&&t(bze),f&&t(Gi),w(BL),f&&t(vze),f&&t(xo),w(IL),w(jL),w(Mp),w(Ep),w(DL),f&&t(Fze),f&&t(Oi),w(GL),f&&t(Tze),f&&t($o),w(OL),w(zL),w(zp),w(Wp),w(WL),f&&t(Mze),f&&t(Xi),w(QL),f&&t(Eze),f&&t(ko),w(HL),w(JL),w(Up),w(YL),w(r1),f&&t(Cze),f&&t(Qi),w(KL),f&&t(wze),f&&t(So),w(ZL),w(oy),w(a1),w(ry),w(Y1),f&&t(Aze),f&&t(Ji),w(ty),f&&t(Lze),f&&t(Ro),w(ay),w(sy),w(Z1),w(ly),w(G2),f&&t(yze),f&&t(Zi),w(iy),f&&t(xze),f&&t(Po),w(dy),w(fy),w(V2),w(my),w(xb),f&&t($ze),f&&t(rd),w(gy),f&&t(kze),f&&t(Bo),w(hy),w(_y),w(kb),w(uy),w(Kb),f&&t(Sze),f&&t(nd),w(by),f&&t(Rze),f&&t(Io),w(vy),w(Ty),w(ev),w(My),w(Zv),f&&t(Pze),f&&t(id),w(Ey),f&&t(Bze),f&&t(No),w(Cy),w(Ay),w(o3),w(Ly),w(R3),f&&t(Ize),f&&t(fd),w(yy),f&&t(Nze),f&&t(qo),w(xy),w(ky),w(B3),w(Sy),w(V3),f&&t(qze),f&&t(hd),w(Ry),f&&t(jze),f&&t(Do),w(Py),w(Iy),w(z3),w(Ny),w(xF),f&&t(Dze),f&&t(ud),w(qy),f&&t(Gze),f&&t(Go),w(jy),w(Gy),w(kF),w(Oy),w(T6),f&&t(Oze),f&&t(Fd),w(Vy),f&&t(Vze),f&&t(Oo),w(Xy),w(Wy),w(E6),w(Qy),w(A6),f&&t(Xze),f&&t(Ed),w(Hy),f&&t(zze),f&&t(Vo),w(Uy),w(Yy),w(y6),w(Ky),w(X6),f&&t(Wze),f&&t(Ad),w(Zy),f&&t(Qze),f&&t(Xo),w(e9),w(r9),w(W6),w(t9),w(U6),f&&t(Hze),f&&t(xd),w(a9),f&&t(Uze),f&&t(zo),w(n9),w(l9),w(Y6),w(i9),w(eT),f&&t(Jze),f&&t(Sd),w(d9),f&&t(Yze),f&&t(Wo),w(c9),w(m9),w(rT),w(g9),w(gT),f&&t(Kze),f&&t(Bd),w(h9),f&&t(Zze),f&&t(Qo),w(p9),w(u9),w(pT),w(b9),w(MT),f&&t(eWe),f&&t(qd),w(v9),f&&t(oWe),f&&t(Ho),w(F9),w(M9),w(CT),w(E9),w(IT),f&&t(rWe),f&&t(Gd),w(C9),f&&t(tWe),f&&t(Uo),w(w9),w(L9),w(qT),w(y9),w(OT),f&&t(aWe),f&&t(Xd),w($9),f&&t(nWe),f&&t(Jo),w(k9),w(R9),w(XT),w(P9),w(YT),f&&t(sWe),f&&t(Qd),w(B9),f&&t(lWe),f&&t(Yo),w(I9),w(q9),w(ZT),w(j9),w(n8),f&&t(iWe),f&&t(Jd),w(D9),f&&t(dWe),f&&t(Ko),w(G9),w(V9),w(l8),w(X9),w(f8),f&&t(cWe),f&&t(Zd),w(W9),f&&t(fWe),f&&t(Zo),w(Q9),w(U9),w(g8),w(J9),w(_8),f&&t(mWe),f&&t(rc),w(Y9),f&&t(gWe),f&&t(er),w(K9),w(ex),w(b8),w(ox),w(w8),f&&t(hWe),f&&t(nc),w(rx),f&&t(pWe),f&&t(or),w(tx),w(nx),w(L8),w(sx),w($8),f&&t(_We),f&&t(ic),w(lx),f&&t(uWe),f&&t(rr),w(ix),w(cx),w(S8),w(fx),w(xM),f&&t(bWe),f&&t(fc),w(mx),f&&t(vWe),f&&t(tr),w(gx),w(px),w(kM),w(_x),w(o4),f&&t(FWe),f&&t(hc),w(ux),f&&t(TWe),f&&t(ar),w(bx),w(Fx),w(t4),w(Tx),w(u4),f&&t(MWe),f&&t(uc),w(Mx),f&&t(EWe),f&&t(nr),w(Ex),w(wx),w(v4),w(Ax),w(L4),f&&t(CWe),f&&t(Fc),w(Lx),f&&t(wWe),f&&t(sr),w(yx),w($x),w(x4),w(kx),w(J4),f&&t(AWe),f&&t(Ec),w(Sx),f&&t(LWe),f&&t(lr),w(Rx),w(Bx),w(K4),w(Ix),w(dE),f&&t(yWe),f&&t(Ac),w(Nx),f&&t(xWe),f&&t(ir),w(qx),w(Dx),w(fE),w(Gx),w(qE),f&&t($We),f&&t(xc),w(Ox),f&&t(kWe),f&&t(dr),w(Vx),w(zx),w(DE),w(Wx),w(aC),f&&t(SWe),f&&t(Sc),w(Qx),f&&t(RWe),f&&t(cr),w(Hx),w(Jx),w(sC),w(Yx),w(dC),f&&t(PWe),f&&t(Bc),w(Zx),f&&t(BWe),f&&t(fr),w(e$),w(r$),w(fC),w(t$),w(gC),f&&t(IWe),f&&t(qc),w(a$),f&&t(NWe),f&&t(mr),w(n$),w(l$),w(pC),w(i$),w(IC),f&&t(qWe),f&&t(Gc),w(d$),f&&t(jWe),f&&t(gr),w(c$),w(m$),w(qC),w(g$),w(n5),f&&t(DWe),f&&t(Xc),w(h$),f&&t(GWe),f&&t(hr),w(p$),w(u$),w(l5),w(b$),w(d5),f&&t(OWe),f&&t(Qc),w(v$),f&&t(VWe),f&&t(pr),w(F$),w(M$),w(f5),w(E$),w(g5),f&&t(XWe),f&&t(Jc),w(C$),f&&t(zWe),f&&t(_r),w(w$),w(L$),w(p5),w(y$),w(V5),f&&t(WWe),f&&t(Zc),w(x$),f&&t(QWe),f&&t(ur),w($$),w(S$),w(z5),w(R$),w(r0),f&&t(HWe),f&&t(rf),w(P$),f&&t(UWe),f&&t(br),w(B$),w(N$),w(a0),w(q$),w(b0),f&&t(JWe),f&&t(nf),w(j$),f&&t(YWe),f&&t(vr),w(D$),w(O$),w(F0),w(V$),w(k0),f&&t(KWe),f&&t(df),w(X$),f&&t(ZWe),f&&t(Fr),w(z$),w(Q$),w(R0),w(H$),w(X0),f&&t(eQe),f&&t(mf),w(U$),f&&t(oQe),f&&t(Tr),w(J$),w(K$),w(W0),w(Z$),w(tw),f&&t(rQe),f&&t(pf),w(ek),f&&t(tQe),f&&t(Mr),w(ok),w(tk),w(nw),w(ak),w(_w),f&&t(aQe),f&&t(bf),w(nk),f&&t(nQe),f&&t(Er),w(sk),w(ik),w(bw),w(dk),w(Lw),f&&t(sQe),f&&t(Tf),w(ck),f&&t(lQe),f&&t(Cr),w(fk),w(gk),w(xw),w(hk),w(qw),f&&t(iQe),f&&t(Cf),w(pk),f&&t(dQe),f&&t(wr),w(_k),w(bk),w(Dw),w(vk),w(Ow),f&&t(cQe),f&&t(Lf),w(Fk),f&&t(fQe),f&&t(Ar),w(Tk),w(Ek),w(Xw),w(Ck),w(Qw),f&&t(mQe),f&&t($f),w(Ak),f&&t(gQe),f&&t(Lr),w(Lk),w(xk),w(Uw),w($k),w(Yw)}}}const tKt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function aKt($){return rJt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fKt extends KUt{constructor(g){super();ZUt(this,g,aKt,rKt,eJt,{})}}export{fKt as default,tKt as metadata};
