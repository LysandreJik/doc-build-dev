import{S as VZt,i as XZt,s as zZt,e as a,k as l,w as F,t as o,M as WZt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as QZt,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as odt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function HZt($){let g,v,p,m,_,d,h,Ao,Ii,zf,dt,Ni,qi,O7,Wf,Oe,Qe,ji,Dn,V7,Gn,On,X7,Di,Vn,z7,Gi,Qf,Ia;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Ii=a("code"),zf=o("model_type"),dt=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),qi=o('"new-model"'),O7=o(")."),Wf=l(),Oe=a("p"),Qe=o("Likewise, if your "),ji=a("code"),Dn=o("NewModel"),V7=o(" is a subclass of "),Gn=a("a"),On=o("PreTrainedModel"),X7=o(`, make sure its
`),Di=a("code"),Vn=o("config_class"),z7=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),Qf=o("NewModelConfig"),Ia=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var $R=s(p);m=r($R,"NewModelConfig"),$R.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Oi=s(d);h=r(Oi,"PretrainedConfig"),Oi.forEach(t),Ao=r(Ae,`, make sure its
`),Ii=n(Ae,"CODE",{});var kR=s(Ii);zf=r(kR,"model_type"),kR.forEach(t),dt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ni=n(Ae,"CODE",{});var SR=s(Ni);qi=r(SR,'"new-model"'),SR.forEach(t),O7=r(Ae,")."),Ae.forEach(t),Wf=i(He),Oe=n(He,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),ji=n(Lo,"CODE",{});var Na=s(ji);Dn=r(Na,"NewModel"),Na.forEach(t),V7=r(Lo," is a subclass of "),Gn=n(Lo,"A",{href:!0});var RR=s(Gn);On=r(RR,"PreTrainedModel"),RR.forEach(t),X7=r(Lo,`, make sure its
`),Di=n(Lo,"CODE",{});var Hf=s(Di);Vn=r(Hf,"config_class"),Hf.forEach(t),z7=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(Lo,"CODE",{});var PR=s(Gi);Qf=r(PR,"NewModelConfig"),PR.forEach(t),Ia=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(Gn,"href","/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Ao),e(g,Ii),e(Ii,zf),e(g,dt),e(g,Ni),e(Ni,qi),e(g,O7),b(He,Wf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,ji),e(ji,Dn),e(Oe,V7),e(Oe,Gn),e(Gn,On),e(Oe,X7),e(Oe,Di),e(Di,Vn),e(Oe,z7),e(Oe,Gi),e(Gi,Qf),e(Oe,Ia)},d(He){He&&t(g),He&&t(Wf),He&&t(Oe)}}}function UZt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JZt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YZt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function KZt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZZt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Ao=s(p);m=r(Ao,"use_auth_token=True"),Ao.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function eea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _ea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $ea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zea($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ooa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function roa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function toa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function noa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function soa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function loa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ioa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function doa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function coa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function foa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function moa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function goa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function poa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _oa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function boa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function voa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Foa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Toa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Moa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Coa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function woa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Loa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $oa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function koa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Soa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Roa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Poa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Boa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ioa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Noa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function joa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Doa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Goa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ooa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Voa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Woa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hoa($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:N,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uoa($){let g,v,p,m,_,d,h,Ao,Ii,zf,dt,Ni,qi,O7,Wf,Oe,Qe,ji,Dn,V7,Gn,On,X7,Di,Vn,z7,Gi,Qf,Ia,He,Ae,$R,Oi,kR,SR,Lo,Na,RR,Hf,PR,eYe,BWe,Vi,Uf,Kne,W7,oYe,Zne,rYe,IWe,Xn,tYe,ese,aYe,nYe,ose,sYe,lYe,NWe,Q7,qWe,BR,iYe,jWe,Jf,DWe,Xi,Yf,rse,H7,dYe,tse,cYe,GWe,yo,U7,fYe,J7,mYe,IR,gYe,hYe,pYe,Y7,_Ye,ase,uYe,bYe,vYe,$r,K7,FYe,nse,TYe,MYe,zi,EYe,sse,CYe,wYe,lse,AYe,LYe,yYe,A,Kf,ise,xYe,$Ye,NR,kYe,SYe,RYe,Zf,dse,PYe,BYe,qR,IYe,NYe,qYe,em,cse,jYe,DYe,jR,GYe,OYe,VYe,om,fse,XYe,zYe,DR,WYe,QYe,HYe,rm,mse,UYe,JYe,GR,YYe,KYe,ZYe,tm,gse,eKe,oKe,OR,rKe,tKe,aKe,am,hse,nKe,sKe,VR,lKe,iKe,dKe,nm,pse,cKe,fKe,XR,mKe,gKe,hKe,sm,_se,pKe,_Ke,zR,uKe,bKe,vKe,lm,use,FKe,TKe,WR,MKe,EKe,CKe,im,bse,wKe,AKe,QR,LKe,yKe,xKe,dm,vse,$Ke,kKe,HR,SKe,RKe,PKe,cm,Fse,BKe,IKe,UR,NKe,qKe,jKe,fm,Tse,DKe,GKe,JR,OKe,VKe,XKe,mm,Mse,zKe,WKe,YR,QKe,HKe,UKe,gm,Ese,JKe,YKe,KR,KKe,ZKe,eZe,hm,Cse,oZe,rZe,ZR,tZe,aZe,nZe,pm,wse,sZe,lZe,eP,iZe,dZe,cZe,_m,Ase,fZe,mZe,oP,gZe,hZe,pZe,um,Lse,_Ze,uZe,rP,bZe,vZe,FZe,bm,yse,TZe,MZe,tP,EZe,CZe,wZe,vm,xse,AZe,LZe,aP,yZe,xZe,$Ze,Fm,$se,kZe,SZe,nP,RZe,PZe,BZe,Tm,kse,IZe,NZe,sP,qZe,jZe,DZe,Mm,Sse,GZe,OZe,lP,VZe,XZe,zZe,Em,Rse,WZe,QZe,iP,HZe,UZe,JZe,Cm,Pse,YZe,KZe,dP,ZZe,eeo,oeo,wm,Bse,reo,teo,cP,aeo,neo,seo,Am,Ise,leo,ieo,fP,deo,ceo,feo,Lm,Nse,meo,geo,mP,heo,peo,_eo,ym,qse,ueo,beo,gP,veo,Feo,Teo,xm,jse,Meo,Eeo,hP,Ceo,weo,Aeo,$m,Dse,Leo,yeo,pP,xeo,$eo,keo,km,Gse,Seo,Reo,_P,Peo,Beo,Ieo,Sm,Ose,Neo,qeo,uP,jeo,Deo,Geo,Rm,Vse,Oeo,Veo,bP,Xeo,zeo,Weo,Pm,Xse,Qeo,Heo,vP,Ueo,Jeo,Yeo,Bm,zse,Keo,Zeo,FP,eoo,ooo,roo,Im,Wse,too,aoo,TP,noo,soo,loo,Nm,Qse,ioo,doo,MP,coo,foo,moo,qm,Hse,goo,hoo,EP,poo,_oo,uoo,jm,Use,boo,voo,CP,Foo,Too,Moo,Dm,Jse,Eoo,Coo,wP,woo,Aoo,Loo,Gm,Yse,yoo,xoo,AP,$oo,koo,Soo,Om,Kse,Roo,Poo,LP,Boo,Ioo,Noo,Vm,Zse,qoo,joo,yP,Doo,Goo,Ooo,Xm,ele,Voo,Xoo,xP,zoo,Woo,Qoo,zm,ole,Hoo,Uoo,$P,Joo,Yoo,Koo,Wm,rle,Zoo,ero,kP,oro,rro,tro,Qm,tle,aro,nro,SP,sro,lro,iro,Hm,ale,dro,cro,RP,fro,mro,gro,Um,nle,hro,pro,PP,_ro,uro,bro,Jm,sle,vro,Fro,BP,Tro,Mro,Ero,Ym,lle,Cro,wro,IP,Aro,Lro,yro,Km,ile,xro,$ro,NP,kro,Sro,Rro,Zm,dle,Pro,Bro,qP,Iro,Nro,qro,eg,cle,jro,Dro,jP,Gro,Oro,Vro,og,fle,Xro,zro,DP,Wro,Qro,Hro,rg,mle,Uro,Jro,GP,Yro,Kro,Zro,tg,gle,eto,oto,OP,rto,tto,ato,ag,hle,nto,sto,VP,lto,ito,dto,ng,ple,cto,fto,XP,mto,gto,hto,sg,_le,pto,_to,zP,uto,bto,vto,lg,ule,Fto,Tto,WP,Mto,Eto,Cto,ig,ble,wto,Ato,QP,Lto,yto,xto,dg,vle,$to,kto,HP,Sto,Rto,Pto,cg,Fle,Bto,Ito,UP,Nto,qto,jto,fg,Tle,Dto,Gto,JP,Oto,Vto,Xto,mg,Mle,zto,Wto,YP,Qto,Hto,Uto,gg,Ele,Jto,Yto,KP,Kto,Zto,eao,hg,Cle,oao,rao,ZP,tao,aao,nao,pg,wle,sao,lao,eB,iao,dao,cao,_g,Ale,fao,mao,oB,gao,hao,pao,ug,Lle,_ao,uao,rB,bao,vao,Fao,bg,yle,Tao,Mao,tB,Eao,Cao,wao,vg,xle,Aao,Lao,aB,yao,xao,$ao,Fg,$le,kao,Sao,nB,Rao,Pao,Bao,Tg,kle,Iao,Nao,sB,qao,jao,Dao,Mg,Sle,Gao,Oao,lB,Vao,Xao,zao,Eg,Rle,Wao,Qao,iB,Hao,Uao,Jao,Cg,Ple,Yao,Kao,dB,Zao,eno,ono,wg,Ble,rno,tno,cB,ano,nno,sno,Ag,Ile,lno,ino,fB,dno,cno,fno,Lg,Nle,mno,gno,mB,hno,pno,_no,yg,qle,uno,bno,gB,vno,Fno,Tno,xg,jle,Mno,Eno,hB,Cno,wno,Ano,$g,Dle,Lno,yno,pB,xno,$no,kno,kg,Gle,Sno,Rno,_B,Pno,Bno,Ino,Sg,Ole,Nno,qno,uB,jno,Dno,Gno,Rg,Vle,Ono,Vno,bB,Xno,zno,Wno,Pg,Xle,Qno,Hno,vB,Uno,Jno,Yno,Bg,zle,Kno,Zno,FB,eso,oso,rso,Ig,Wle,tso,aso,TB,nso,sso,lso,Ng,Qle,iso,dso,MB,cso,fso,mso,qg,Hle,gso,hso,EB,pso,_so,uso,jg,Ule,bso,vso,CB,Fso,Tso,Mso,Dg,Jle,Eso,Cso,wB,wso,Aso,Lso,Gg,Yle,yso,xso,AB,$so,kso,Sso,Og,Kle,Rso,Pso,LB,Bso,Iso,Nso,Vg,Zle,qso,jso,yB,Dso,Gso,Oso,Xg,eie,Vso,Xso,xB,zso,Wso,Qso,zg,oie,Hso,Uso,$B,Jso,Yso,Kso,Wg,rie,Zso,elo,kB,olo,rlo,tlo,Qg,tie,alo,nlo,SB,slo,llo,ilo,Hg,aie,dlo,clo,RB,flo,mlo,glo,Ug,nie,hlo,plo,PB,_lo,ulo,blo,Jg,sie,vlo,Flo,BB,Tlo,Mlo,Elo,Yg,lie,Clo,wlo,IB,Alo,Llo,ylo,Kg,iie,xlo,$lo,NB,klo,Slo,Rlo,Zg,die,Plo,Blo,qB,Ilo,Nlo,qlo,eh,cie,jlo,Dlo,jB,Glo,Olo,Vlo,oh,fie,Xlo,zlo,DB,Wlo,Qlo,Hlo,rh,mie,Ulo,Jlo,GB,Ylo,Klo,Zlo,th,gie,eio,oio,OB,rio,tio,aio,ah,hie,nio,sio,VB,lio,iio,dio,nh,pie,cio,fio,XB,mio,gio,hio,sh,_ie,pio,_io,zB,uio,bio,vio,lh,uie,Fio,Tio,WB,Mio,Eio,Cio,ih,bie,wio,Aio,QB,Lio,yio,xio,dh,vie,$io,kio,HB,Sio,Rio,Pio,ch,Fie,Bio,Iio,UB,Nio,qio,jio,fh,Dio,mh,Z7,Gio,Tie,Oio,OWe,Wi,gh,Mie,eL,Vio,Eie,Xio,VWe,xo,oL,zio,rL,Wio,JB,Qio,Hio,Uio,tL,Jio,Cie,Yio,Kio,Zio,kr,aL,edo,wie,odo,rdo,qa,tdo,Aie,ado,ndo,Lie,sdo,ldo,yie,ido,ddo,cdo,k,zn,xie,fdo,mdo,YB,gdo,hdo,KB,pdo,_do,udo,Wn,$ie,bdo,vdo,ZB,Fdo,Tdo,eI,Mdo,Edo,Cdo,Qn,kie,wdo,Ado,oI,Ldo,ydo,rI,xdo,$do,kdo,hh,Sie,Sdo,Rdo,tI,Pdo,Bdo,Ido,Hn,Rie,Ndo,qdo,aI,jdo,Ddo,nI,Gdo,Odo,Vdo,ph,Pie,Xdo,zdo,sI,Wdo,Qdo,Hdo,_h,Bie,Udo,Jdo,lI,Ydo,Kdo,Zdo,uh,Iie,eco,oco,iI,rco,tco,aco,Un,Nie,nco,sco,dI,lco,ico,cI,dco,cco,fco,Jn,qie,mco,gco,fI,hco,pco,mI,_co,uco,bco,Yn,jie,vco,Fco,gI,Tco,Mco,hI,Eco,Cco,wco,bh,Die,Aco,Lco,pI,yco,xco,$co,vh,Gie,kco,Sco,_I,Rco,Pco,Bco,Fh,Oie,Ico,Nco,uI,qco,jco,Dco,Kn,Vie,Gco,Oco,bI,Vco,Xco,vI,zco,Wco,Qco,Th,Xie,Hco,Uco,FI,Jco,Yco,Kco,Zn,zie,Zco,efo,TI,ofo,rfo,MI,tfo,afo,nfo,es,Wie,sfo,lfo,EI,ifo,dfo,CI,cfo,ffo,mfo,os,Qie,gfo,hfo,wI,pfo,_fo,AI,ufo,bfo,vfo,rs,Hie,Ffo,Tfo,LI,Mfo,Efo,yI,Cfo,wfo,Afo,Mh,Uie,Lfo,yfo,xI,xfo,$fo,kfo,ts,Jie,Sfo,Rfo,$I,Pfo,Bfo,kI,Ifo,Nfo,qfo,as,Yie,jfo,Dfo,SI,Gfo,Ofo,RI,Vfo,Xfo,zfo,ns,Kie,Wfo,Qfo,PI,Hfo,Ufo,BI,Jfo,Yfo,Kfo,ss,Zie,Zfo,emo,II,omo,rmo,NI,tmo,amo,nmo,ls,ede,smo,lmo,qI,imo,dmo,jI,cmo,fmo,mmo,is,ode,gmo,hmo,DI,pmo,_mo,GI,umo,bmo,vmo,Eh,rde,Fmo,Tmo,OI,Mmo,Emo,Cmo,ds,tde,wmo,Amo,VI,Lmo,ymo,XI,xmo,$mo,kmo,Ch,ade,Smo,Rmo,zI,Pmo,Bmo,Imo,cs,nde,Nmo,qmo,WI,jmo,Dmo,QI,Gmo,Omo,Vmo,fs,sde,Xmo,zmo,HI,Wmo,Qmo,UI,Hmo,Umo,Jmo,ms,lde,Ymo,Kmo,JI,Zmo,ego,YI,ogo,rgo,tgo,wh,ide,ago,ngo,KI,sgo,lgo,igo,gs,dde,dgo,cgo,ZI,fgo,mgo,eN,ggo,hgo,pgo,hs,cde,_go,ugo,oN,bgo,vgo,rN,Fgo,Tgo,Mgo,ps,fde,Ego,Cgo,tN,wgo,Ago,aN,Lgo,ygo,xgo,Ah,mde,$go,kgo,nN,Sgo,Rgo,Pgo,_s,gde,Bgo,Igo,sN,Ngo,qgo,lN,jgo,Dgo,Ggo,us,hde,Ogo,Vgo,iN,Xgo,zgo,dN,Wgo,Qgo,Hgo,bs,pde,Ugo,Jgo,cN,Ygo,Kgo,fN,Zgo,eho,oho,vs,_de,rho,tho,mN,aho,nho,gN,sho,lho,iho,Fs,ude,dho,cho,hN,fho,mho,pN,gho,hho,pho,Ts,bde,_ho,uho,_N,bho,vho,uN,Fho,Tho,Mho,Ms,vde,Eho,Cho,bN,who,Aho,vN,Lho,yho,xho,Es,Fde,$ho,kho,FN,Sho,Rho,TN,Pho,Bho,Iho,Lh,Tde,Nho,qho,MN,jho,Dho,Gho,Cs,Mde,Oho,Vho,EN,Xho,zho,CN,Who,Qho,Hho,yh,Ede,Uho,Jho,wN,Yho,Kho,Zho,xh,Cde,epo,opo,AN,rpo,tpo,apo,ws,wde,npo,spo,LN,lpo,ipo,yN,dpo,cpo,fpo,As,Ade,mpo,gpo,xN,hpo,ppo,$N,_po,upo,bpo,Ls,Lde,vpo,Fpo,kN,Tpo,Mpo,SN,Epo,Cpo,wpo,$h,yde,Apo,Lpo,RN,ypo,xpo,$po,ys,xde,kpo,Spo,PN,Rpo,Ppo,BN,Bpo,Ipo,Npo,xs,$de,qpo,jpo,IN,Dpo,Gpo,NN,Opo,Vpo,Xpo,$s,kde,zpo,Wpo,qN,Qpo,Hpo,jN,Upo,Jpo,Ypo,ks,Sde,Kpo,Zpo,DN,e_o,o_o,GN,r_o,t_o,a_o,Ss,Rde,n_o,s_o,ON,l_o,i_o,VN,d_o,c_o,f_o,Rs,Pde,m_o,g_o,XN,h_o,p_o,zN,__o,u_o,b_o,Ps,Bde,v_o,F_o,WN,T_o,M_o,QN,E_o,C_o,w_o,Bs,Ide,A_o,L_o,HN,y_o,x_o,UN,$_o,k_o,S_o,kh,Nde,R_o,P_o,JN,B_o,I_o,N_o,Is,qde,q_o,j_o,YN,D_o,G_o,KN,O_o,V_o,X_o,Ns,jde,z_o,W_o,ZN,Q_o,H_o,eq,U_o,J_o,Y_o,Sh,Dde,K_o,Z_o,oq,euo,ouo,ruo,Rh,Gde,tuo,auo,rq,nuo,suo,luo,Ph,Ode,iuo,duo,tq,cuo,fuo,muo,Bh,Vde,guo,huo,aq,puo,_uo,uuo,qs,Xde,buo,vuo,nq,Fuo,Tuo,sq,Muo,Euo,Cuo,Ih,zde,wuo,Auo,lq,Luo,yuo,xuo,js,Wde,$uo,kuo,iq,Suo,Ruo,dq,Puo,Buo,Iuo,Ds,Qde,Nuo,quo,cq,juo,Duo,fq,Guo,Ouo,Vuo,Gs,Hde,Xuo,zuo,mq,Wuo,Quo,gq,Huo,Uuo,Juo,Os,Ude,Yuo,Kuo,hq,Zuo,e2o,pq,o2o,r2o,t2o,Vs,Jde,a2o,n2o,_q,s2o,l2o,uq,i2o,d2o,c2o,Xs,Yde,f2o,m2o,bq,g2o,h2o,vq,p2o,_2o,u2o,Nh,Kde,b2o,v2o,Fq,F2o,T2o,M2o,qh,Zde,E2o,C2o,Tq,w2o,A2o,L2o,zs,ece,y2o,x2o,Mq,$2o,k2o,Eq,S2o,R2o,P2o,Ws,oce,B2o,I2o,Cq,N2o,q2o,wq,j2o,D2o,G2o,Qs,rce,O2o,V2o,Aq,X2o,z2o,Lq,W2o,Q2o,H2o,jh,tce,U2o,J2o,yq,Y2o,K2o,Z2o,Dh,ace,e1o,o1o,xq,r1o,t1o,a1o,Gh,nce,n1o,s1o,$q,l1o,i1o,d1o,Hs,sce,c1o,f1o,kq,m1o,g1o,Sq,h1o,p1o,_1o,Us,lce,u1o,b1o,Rq,v1o,F1o,Pq,T1o,M1o,E1o,Oh,ice,C1o,w1o,Bq,A1o,L1o,y1o,Vh,dce,x1o,$1o,Iq,k1o,S1o,R1o,Xh,cce,P1o,B1o,Nq,I1o,N1o,q1o,Js,fce,j1o,D1o,qq,G1o,O1o,jq,V1o,X1o,z1o,zh,mce,W1o,Q1o,Dq,H1o,U1o,J1o,Wh,gce,Y1o,K1o,Gq,Z1o,ebo,obo,Ys,hce,rbo,tbo,Oq,abo,nbo,Vq,sbo,lbo,ibo,Ks,pce,dbo,cbo,Xq,fbo,mbo,zq,gbo,hbo,pbo,Zs,_ce,_bo,ubo,Wq,bbo,vbo,Qq,Fbo,Tbo,Mbo,el,uce,Ebo,Cbo,Hq,wbo,Abo,Uq,Lbo,ybo,xbo,Qh,$bo,Hh,nL,kbo,bce,Sbo,XWe,Qi,Uh,vce,sL,Rbo,Fce,Pbo,zWe,$o,lL,Bbo,iL,Ibo,Jq,Nbo,qbo,jbo,dL,Dbo,Tce,Gbo,Obo,Vbo,Ue,cL,Xbo,Mce,zbo,Wbo,ja,Qbo,Ece,Hbo,Ubo,Cce,Jbo,Ybo,wce,Kbo,Zbo,evo,H,Jh,Ace,ovo,rvo,Yq,tvo,avo,nvo,Yh,Lce,svo,lvo,Kq,ivo,dvo,cvo,Kh,yce,fvo,mvo,Zq,gvo,hvo,pvo,Zh,xce,_vo,uvo,ej,bvo,vvo,Fvo,ep,$ce,Tvo,Mvo,oj,Evo,Cvo,wvo,op,kce,Avo,Lvo,rj,yvo,xvo,$vo,rp,Sce,kvo,Svo,tj,Rvo,Pvo,Bvo,tp,Rce,Ivo,Nvo,aj,qvo,jvo,Dvo,ap,Pce,Gvo,Ovo,nj,Vvo,Xvo,zvo,np,Bce,Wvo,Qvo,sj,Hvo,Uvo,Jvo,sp,Ice,Yvo,Kvo,lj,Zvo,e5o,o5o,lp,Nce,r5o,t5o,ij,a5o,n5o,s5o,ip,qce,l5o,i5o,dj,d5o,c5o,f5o,dp,jce,m5o,g5o,cj,h5o,p5o,_5o,cp,Dce,u5o,b5o,fj,v5o,F5o,T5o,fp,Gce,M5o,E5o,mj,C5o,w5o,A5o,mp,Oce,L5o,y5o,gj,x5o,$5o,k5o,gp,Vce,S5o,R5o,hj,P5o,B5o,I5o,hp,Xce,N5o,q5o,pj,j5o,D5o,G5o,pp,zce,O5o,V5o,_j,X5o,z5o,W5o,_p,Wce,Q5o,H5o,uj,U5o,J5o,Y5o,up,Qce,K5o,Z5o,bj,eFo,oFo,rFo,bp,Hce,tFo,aFo,vj,nFo,sFo,lFo,vp,Uce,iFo,dFo,Fj,cFo,fFo,mFo,Fp,Jce,gFo,hFo,Tj,pFo,_Fo,uFo,Tp,Yce,bFo,vFo,Mj,FFo,TFo,MFo,Mp,Kce,EFo,CFo,Ej,wFo,AFo,LFo,Ep,Zce,yFo,xFo,Cj,$Fo,kFo,SFo,Cp,efe,RFo,PFo,wj,BFo,IFo,NFo,wp,ofe,qFo,jFo,Aj,DFo,GFo,OFo,Ap,rfe,VFo,XFo,Lj,zFo,WFo,QFo,Lp,tfe,HFo,UFo,yj,JFo,YFo,KFo,yp,afe,ZFo,eTo,xj,oTo,rTo,tTo,xp,nfe,aTo,nTo,$j,sTo,lTo,iTo,$p,sfe,dTo,cTo,kj,fTo,mTo,gTo,kp,lfe,hTo,pTo,Sj,_To,uTo,bTo,Sp,ife,vTo,FTo,Rj,TTo,MTo,ETo,Rp,CTo,Pp,wTo,Bp,fL,ATo,dfe,LTo,WWe,Hi,Ip,cfe,mL,yTo,ffe,xTo,QWe,ko,gL,$To,hL,kTo,Pj,STo,RTo,PTo,pL,BTo,mfe,ITo,NTo,qTo,Je,_L,jTo,gfe,DTo,GTo,Ui,OTo,hfe,VTo,XTo,pfe,zTo,WTo,QTo,fe,Np,_fe,HTo,UTo,Bj,JTo,YTo,KTo,qp,ufe,ZTo,e8o,Ij,o8o,r8o,t8o,jp,bfe,a8o,n8o,Nj,s8o,l8o,i8o,Dp,vfe,d8o,c8o,qj,f8o,m8o,g8o,Gp,Ffe,h8o,p8o,jj,_8o,u8o,b8o,Op,Tfe,v8o,F8o,Dj,T8o,M8o,E8o,Vp,Mfe,C8o,w8o,Gj,A8o,L8o,y8o,Xp,Efe,x8o,$8o,Oj,k8o,S8o,R8o,zp,Cfe,P8o,B8o,Vj,I8o,N8o,q8o,Wp,wfe,j8o,D8o,Xj,G8o,O8o,V8o,Qp,Afe,X8o,z8o,zj,W8o,Q8o,H8o,Hp,Lfe,U8o,J8o,Wj,Y8o,K8o,Z8o,Up,yfe,e9o,o9o,Qj,r9o,t9o,a9o,Jp,xfe,n9o,s9o,Hj,l9o,i9o,d9o,Yp,$fe,c9o,f9o,Uj,m9o,g9o,h9o,Kp,kfe,p9o,_9o,Jj,u9o,b9o,v9o,Zp,Sfe,F9o,T9o,Yj,M9o,E9o,C9o,e_,Rfe,w9o,A9o,Kj,L9o,y9o,x9o,o_,Pfe,$9o,k9o,Zj,S9o,R9o,P9o,r_,B9o,t_,I9o,a_,uL,N9o,Bfe,q9o,HWe,Ji,n_,Ife,bL,j9o,Nfe,D9o,UWe,So,vL,G9o,Yi,O9o,eD,V9o,X9o,oD,z9o,W9o,Q9o,FL,H9o,qfe,U9o,J9o,Y9o,ct,TL,K9o,jfe,Z9o,eMo,Ki,oMo,Dfe,rMo,tMo,rD,aMo,nMo,sMo,s_,lMo,Ye,ML,iMo,Gfe,dMo,cMo,Da,fMo,Ofe,mMo,gMo,Vfe,hMo,pMo,Xfe,_Mo,uMo,bMo,y,l_,zfe,vMo,FMo,tD,TMo,MMo,EMo,i_,Wfe,CMo,wMo,aD,AMo,LMo,yMo,d_,Qfe,xMo,$Mo,nD,kMo,SMo,RMo,c_,Hfe,PMo,BMo,sD,IMo,NMo,qMo,f_,Ufe,jMo,DMo,lD,GMo,OMo,VMo,m_,Jfe,XMo,zMo,iD,WMo,QMo,HMo,g_,Yfe,UMo,JMo,dD,YMo,KMo,ZMo,h_,Kfe,eEo,oEo,cD,rEo,tEo,aEo,p_,Zfe,nEo,sEo,fD,lEo,iEo,dEo,__,eme,cEo,fEo,mD,mEo,gEo,hEo,u_,ome,pEo,_Eo,gD,uEo,bEo,vEo,b_,rme,FEo,TEo,hD,MEo,EEo,CEo,v_,tme,wEo,AEo,pD,LEo,yEo,xEo,F_,ame,$Eo,kEo,_D,SEo,REo,PEo,T_,nme,BEo,IEo,uD,NEo,qEo,jEo,M_,sme,DEo,GEo,bD,OEo,VEo,XEo,E_,lme,zEo,WEo,vD,QEo,HEo,UEo,C_,ime,JEo,YEo,FD,KEo,ZEo,e4o,w_,dme,o4o,r4o,TD,t4o,a4o,n4o,A_,cme,s4o,l4o,MD,i4o,d4o,c4o,L_,fme,f4o,m4o,ED,g4o,h4o,p4o,y_,mme,_4o,u4o,CD,b4o,v4o,F4o,x_,gme,T4o,M4o,wD,E4o,C4o,w4o,$_,hme,A4o,L4o,AD,y4o,x4o,$4o,k_,pme,k4o,S4o,LD,R4o,P4o,B4o,S_,_me,I4o,N4o,yD,q4o,j4o,D4o,R_,ume,G4o,O4o,xD,V4o,X4o,z4o,P_,bme,W4o,Q4o,$D,H4o,U4o,J4o,B_,vme,Y4o,K4o,kD,Z4o,eCo,oCo,I_,Fme,rCo,tCo,SD,aCo,nCo,sCo,N_,Tme,lCo,iCo,RD,dCo,cCo,fCo,q_,Mme,mCo,gCo,PD,hCo,pCo,_Co,j_,Eme,uCo,bCo,BD,vCo,FCo,TCo,D_,Cme,MCo,ECo,ID,CCo,wCo,ACo,ol,wme,LCo,yCo,ND,xCo,$Co,qD,kCo,SCo,RCo,G_,Ame,PCo,BCo,jD,ICo,NCo,qCo,O_,Lme,jCo,DCo,DD,GCo,OCo,VCo,V_,yme,XCo,zCo,GD,WCo,QCo,HCo,X_,xme,UCo,JCo,OD,YCo,KCo,ZCo,z_,$me,e3o,o3o,VD,r3o,t3o,a3o,W_,kme,n3o,s3o,XD,l3o,i3o,d3o,Q_,Sme,c3o,f3o,zD,m3o,g3o,h3o,H_,Rme,p3o,_3o,WD,u3o,b3o,v3o,U_,Pme,F3o,T3o,QD,M3o,E3o,C3o,J_,Bme,w3o,A3o,HD,L3o,y3o,x3o,Y_,Ime,$3o,k3o,UD,S3o,R3o,P3o,K_,Nme,B3o,I3o,JD,N3o,q3o,j3o,Z_,qme,D3o,G3o,YD,O3o,V3o,X3o,eu,jme,z3o,W3o,KD,Q3o,H3o,U3o,ou,Dme,J3o,Y3o,ZD,K3o,Z3o,e0o,ru,Gme,o0o,r0o,eG,t0o,a0o,n0o,tu,Ome,s0o,l0o,oG,i0o,d0o,c0o,au,Vme,f0o,m0o,rG,g0o,h0o,p0o,nu,Xme,_0o,u0o,tG,b0o,v0o,F0o,su,zme,T0o,M0o,aG,E0o,C0o,w0o,lu,Wme,A0o,L0o,nG,y0o,x0o,$0o,iu,Qme,k0o,S0o,sG,R0o,P0o,B0o,du,Hme,I0o,N0o,lG,q0o,j0o,D0o,cu,Ume,G0o,O0o,iG,V0o,X0o,z0o,fu,Jme,W0o,Q0o,dG,H0o,U0o,J0o,mu,Yme,Y0o,K0o,cG,Z0o,ewo,owo,gu,Kme,rwo,two,fG,awo,nwo,swo,hu,Zme,lwo,iwo,mG,dwo,cwo,fwo,pu,ege,mwo,gwo,gG,hwo,pwo,_wo,_u,oge,uwo,bwo,hG,vwo,Fwo,Two,uu,rge,Mwo,Ewo,pG,Cwo,wwo,Awo,bu,tge,Lwo,ywo,_G,xwo,$wo,kwo,vu,age,Swo,Rwo,uG,Pwo,Bwo,Iwo,Fu,nge,Nwo,qwo,bG,jwo,Dwo,Gwo,Tu,sge,Owo,Vwo,vG,Xwo,zwo,Wwo,Mu,lge,Qwo,Hwo,FG,Uwo,Jwo,Ywo,Eu,ige,Kwo,Zwo,TG,e6o,o6o,r6o,Cu,dge,t6o,a6o,MG,n6o,s6o,l6o,wu,cge,i6o,d6o,EG,c6o,f6o,m6o,Au,fge,g6o,h6o,CG,p6o,_6o,u6o,Lu,mge,b6o,v6o,wG,F6o,T6o,M6o,yu,gge,E6o,C6o,AG,w6o,A6o,L6o,xu,hge,y6o,x6o,LG,$6o,k6o,S6o,$u,pge,R6o,P6o,yG,B6o,I6o,N6o,ku,_ge,q6o,j6o,xG,D6o,G6o,O6o,Su,uge,V6o,X6o,$G,z6o,W6o,Q6o,Ru,bge,H6o,U6o,kG,J6o,Y6o,K6o,Pu,vge,Z6o,eAo,SG,oAo,rAo,tAo,Bu,Fge,aAo,nAo,RG,sAo,lAo,iAo,Iu,Tge,dAo,cAo,PG,fAo,mAo,gAo,Nu,Mge,hAo,pAo,BG,_Ao,uAo,bAo,qu,Ege,vAo,FAo,IG,TAo,MAo,EAo,ju,Cge,CAo,wAo,NG,AAo,LAo,yAo,Du,wge,xAo,$Ao,qG,kAo,SAo,RAo,Gu,Age,PAo,BAo,jG,IAo,NAo,qAo,Ou,Lge,jAo,DAo,DG,GAo,OAo,VAo,Vu,yge,XAo,zAo,GG,WAo,QAo,HAo,Xu,xge,UAo,JAo,OG,YAo,KAo,ZAo,zu,$ge,e7o,o7o,VG,r7o,t7o,a7o,Wu,kge,n7o,s7o,XG,l7o,i7o,d7o,Qu,Sge,c7o,f7o,zG,m7o,g7o,h7o,Hu,Rge,p7o,_7o,WG,u7o,b7o,v7o,Uu,Pge,F7o,T7o,QG,M7o,E7o,C7o,Ju,Bge,w7o,A7o,HG,L7o,y7o,x7o,Yu,Ige,$7o,k7o,UG,S7o,R7o,P7o,Ku,Nge,B7o,I7o,JG,N7o,q7o,j7o,Zu,qge,D7o,G7o,YG,O7o,V7o,X7o,e2,jge,z7o,W7o,KG,Q7o,H7o,U7o,o2,Dge,J7o,Y7o,ZG,K7o,Z7o,eLo,r2,Gge,oLo,rLo,eO,tLo,aLo,nLo,t2,Oge,sLo,lLo,oO,iLo,dLo,cLo,a2,Vge,fLo,mLo,rO,gLo,hLo,pLo,n2,Xge,_Lo,uLo,tO,bLo,vLo,FLo,s2,zge,TLo,MLo,aO,ELo,CLo,wLo,l2,Wge,ALo,LLo,nO,yLo,xLo,$Lo,i2,Qge,kLo,SLo,sO,RLo,PLo,BLo,d2,Hge,ILo,NLo,lO,qLo,jLo,DLo,c2,Uge,GLo,OLo,iO,VLo,XLo,zLo,f2,Jge,WLo,QLo,dO,HLo,ULo,JLo,m2,Yge,YLo,KLo,cO,ZLo,eyo,oyo,g2,ryo,Kge,tyo,ayo,Zge,nyo,syo,h2,JWe,Zi,p2,ehe,EL,lyo,ohe,iyo,YWe,Ro,CL,dyo,ed,cyo,fO,fyo,myo,mO,gyo,hyo,pyo,wL,_yo,rhe,uyo,byo,vyo,ft,AL,Fyo,the,Tyo,Myo,od,Eyo,ahe,Cyo,wyo,gO,Ayo,Lyo,yyo,_2,xyo,Ke,LL,$yo,nhe,kyo,Syo,Ga,Ryo,she,Pyo,Byo,lhe,Iyo,Nyo,ihe,qyo,jyo,Dyo,G,u2,dhe,Gyo,Oyo,hO,Vyo,Xyo,zyo,b2,che,Wyo,Qyo,pO,Hyo,Uyo,Jyo,v2,fhe,Yyo,Kyo,_O,Zyo,exo,oxo,F2,mhe,rxo,txo,uO,axo,nxo,sxo,T2,ghe,lxo,ixo,bO,dxo,cxo,fxo,M2,hhe,mxo,gxo,vO,hxo,pxo,_xo,E2,phe,uxo,bxo,FO,vxo,Fxo,Txo,C2,_he,Mxo,Exo,TO,Cxo,wxo,Axo,w2,uhe,Lxo,yxo,MO,xxo,$xo,kxo,A2,bhe,Sxo,Rxo,EO,Pxo,Bxo,Ixo,L2,vhe,Nxo,qxo,CO,jxo,Dxo,Gxo,y2,Fhe,Oxo,Vxo,wO,Xxo,zxo,Wxo,x2,The,Qxo,Hxo,AO,Uxo,Jxo,Yxo,$2,Mhe,Kxo,Zxo,LO,e$o,o$o,r$o,k2,Ehe,t$o,a$o,yO,n$o,s$o,l$o,S2,Che,i$o,d$o,xO,c$o,f$o,m$o,R2,whe,g$o,h$o,$O,p$o,_$o,u$o,P2,Ahe,b$o,v$o,kO,F$o,T$o,M$o,B2,Lhe,E$o,C$o,SO,w$o,A$o,L$o,I2,yhe,y$o,x$o,RO,$$o,k$o,S$o,N2,xhe,R$o,P$o,PO,B$o,I$o,N$o,q2,$he,q$o,j$o,BO,D$o,G$o,O$o,j2,khe,V$o,X$o,IO,z$o,W$o,Q$o,D2,She,H$o,U$o,NO,J$o,Y$o,K$o,G2,Rhe,Z$o,eko,qO,oko,rko,tko,O2,Phe,ako,nko,jO,sko,lko,iko,V2,Bhe,dko,cko,DO,fko,mko,gko,X2,Ihe,hko,pko,GO,_ko,uko,bko,z2,Nhe,vko,Fko,OO,Tko,Mko,Eko,W2,qhe,Cko,wko,VO,Ako,Lko,yko,Q2,jhe,xko,$ko,XO,kko,Sko,Rko,H2,Dhe,Pko,Bko,zO,Iko,Nko,qko,U2,Ghe,jko,Dko,WO,Gko,Oko,Vko,J2,Ohe,Xko,zko,QO,Wko,Qko,Hko,Y2,Vhe,Uko,Jko,HO,Yko,Kko,Zko,K2,Xhe,eSo,oSo,UO,rSo,tSo,aSo,Z2,zhe,nSo,sSo,JO,lSo,iSo,dSo,e1,Whe,cSo,fSo,YO,mSo,gSo,hSo,o1,Qhe,pSo,_So,KO,uSo,bSo,vSo,r1,Hhe,FSo,TSo,ZO,MSo,ESo,CSo,t1,Uhe,wSo,ASo,eV,LSo,ySo,xSo,a1,Jhe,$So,kSo,oV,SSo,RSo,PSo,n1,Yhe,BSo,ISo,rV,NSo,qSo,jSo,s1,Khe,DSo,GSo,tV,OSo,VSo,XSo,l1,Zhe,zSo,WSo,aV,QSo,HSo,USo,i1,epe,JSo,YSo,nV,KSo,ZSo,eRo,d1,ope,oRo,rRo,sV,tRo,aRo,nRo,c1,sRo,rpe,lRo,iRo,tpe,dRo,cRo,f1,KWe,rd,m1,ape,yL,fRo,npe,mRo,ZWe,Po,xL,gRo,td,hRo,lV,pRo,_Ro,iV,uRo,bRo,vRo,$L,FRo,spe,TRo,MRo,ERo,mt,kL,CRo,lpe,wRo,ARo,ad,LRo,ipe,yRo,xRo,dV,$Ro,kRo,SRo,g1,RRo,Ze,SL,PRo,dpe,BRo,IRo,Oa,NRo,cpe,qRo,jRo,fpe,DRo,GRo,mpe,ORo,VRo,XRo,z,h1,gpe,zRo,WRo,cV,QRo,HRo,URo,p1,hpe,JRo,YRo,fV,KRo,ZRo,ePo,_1,ppe,oPo,rPo,mV,tPo,aPo,nPo,u1,_pe,sPo,lPo,gV,iPo,dPo,cPo,b1,upe,fPo,mPo,hV,gPo,hPo,pPo,v1,bpe,_Po,uPo,pV,bPo,vPo,FPo,F1,vpe,TPo,MPo,_V,EPo,CPo,wPo,T1,Fpe,APo,LPo,uV,yPo,xPo,$Po,M1,Tpe,kPo,SPo,bV,RPo,PPo,BPo,E1,Mpe,IPo,NPo,vV,qPo,jPo,DPo,C1,Epe,GPo,OPo,FV,VPo,XPo,zPo,w1,Cpe,WPo,QPo,TV,HPo,UPo,JPo,A1,wpe,YPo,KPo,MV,ZPo,eBo,oBo,L1,Ape,rBo,tBo,EV,aBo,nBo,sBo,y1,Lpe,lBo,iBo,CV,dBo,cBo,fBo,x1,ype,mBo,gBo,wV,hBo,pBo,_Bo,$1,xpe,uBo,bBo,AV,vBo,FBo,TBo,k1,$pe,MBo,EBo,LV,CBo,wBo,ABo,S1,kpe,LBo,yBo,yV,xBo,$Bo,kBo,R1,Spe,SBo,RBo,xV,PBo,BBo,IBo,P1,Rpe,NBo,qBo,$V,jBo,DBo,GBo,B1,Ppe,OBo,VBo,kV,XBo,zBo,WBo,I1,Bpe,QBo,HBo,SV,UBo,JBo,YBo,N1,Ipe,KBo,ZBo,RV,eIo,oIo,rIo,q1,Npe,tIo,aIo,PV,nIo,sIo,lIo,j1,qpe,iIo,dIo,BV,cIo,fIo,mIo,D1,jpe,gIo,hIo,IV,pIo,_Io,uIo,G1,Dpe,bIo,vIo,NV,FIo,TIo,MIo,O1,Gpe,EIo,CIo,qV,wIo,AIo,LIo,V1,Ope,yIo,xIo,jV,$Io,kIo,SIo,X1,Vpe,RIo,PIo,DV,BIo,IIo,NIo,z1,Xpe,qIo,jIo,GV,DIo,GIo,OIo,W1,zpe,VIo,XIo,OV,zIo,WIo,QIo,Q1,Wpe,HIo,UIo,VV,JIo,YIo,KIo,H1,Qpe,ZIo,eNo,XV,oNo,rNo,tNo,U1,Hpe,aNo,nNo,zV,sNo,lNo,iNo,J1,Upe,dNo,cNo,WV,fNo,mNo,gNo,Y1,Jpe,hNo,pNo,QV,_No,uNo,bNo,K1,Ype,vNo,FNo,HV,TNo,MNo,ENo,Z1,Kpe,CNo,wNo,UV,ANo,LNo,yNo,eb,xNo,Zpe,$No,kNo,e_e,SNo,RNo,ob,eQe,nd,rb,o_e,RL,PNo,r_e,BNo,oQe,Bo,PL,INo,sd,NNo,JV,qNo,jNo,YV,DNo,GNo,ONo,BL,VNo,t_e,XNo,zNo,WNo,gt,IL,QNo,a_e,HNo,UNo,ld,JNo,n_e,YNo,KNo,KV,ZNo,eqo,oqo,tb,rqo,eo,NL,tqo,s_e,aqo,nqo,Va,sqo,l_e,lqo,iqo,i_e,dqo,cqo,d_e,fqo,mqo,gqo,Q,ab,c_e,hqo,pqo,ZV,_qo,uqo,bqo,nb,f_e,vqo,Fqo,eX,Tqo,Mqo,Eqo,sb,m_e,Cqo,wqo,oX,Aqo,Lqo,yqo,lb,g_e,xqo,$qo,rX,kqo,Sqo,Rqo,ib,h_e,Pqo,Bqo,tX,Iqo,Nqo,qqo,db,p_e,jqo,Dqo,aX,Gqo,Oqo,Vqo,cb,__e,Xqo,zqo,nX,Wqo,Qqo,Hqo,fb,u_e,Uqo,Jqo,sX,Yqo,Kqo,Zqo,mb,b_e,ejo,ojo,lX,rjo,tjo,ajo,gb,v_e,njo,sjo,iX,ljo,ijo,djo,hb,F_e,cjo,fjo,dX,mjo,gjo,hjo,pb,T_e,pjo,_jo,cX,ujo,bjo,vjo,_b,M_e,Fjo,Tjo,fX,Mjo,Ejo,Cjo,ub,E_e,wjo,Ajo,mX,Ljo,yjo,xjo,bb,C_e,$jo,kjo,gX,Sjo,Rjo,Pjo,vb,w_e,Bjo,Ijo,hX,Njo,qjo,jjo,Fb,A_e,Djo,Gjo,pX,Ojo,Vjo,Xjo,Tb,L_e,zjo,Wjo,_X,Qjo,Hjo,Ujo,Mb,y_e,Jjo,Yjo,uX,Kjo,Zjo,eDo,Eb,x_e,oDo,rDo,bX,tDo,aDo,nDo,Cb,$_e,sDo,lDo,vX,iDo,dDo,cDo,wb,k_e,fDo,mDo,FX,gDo,hDo,pDo,Ab,S_e,_Do,uDo,TX,bDo,vDo,FDo,Lb,R_e,TDo,MDo,MX,EDo,CDo,wDo,yb,P_e,ADo,LDo,EX,yDo,xDo,$Do,xb,B_e,kDo,SDo,CX,RDo,PDo,BDo,$b,I_e,IDo,NDo,wX,qDo,jDo,DDo,kb,N_e,GDo,ODo,AX,VDo,XDo,zDo,Sb,q_e,WDo,QDo,LX,HDo,UDo,JDo,Rb,j_e,YDo,KDo,yX,ZDo,eGo,oGo,Pb,D_e,rGo,tGo,xX,aGo,nGo,sGo,Bb,G_e,lGo,iGo,$X,dGo,cGo,fGo,Ib,O_e,mGo,gGo,kX,hGo,pGo,_Go,Nb,V_e,uGo,bGo,X_e,vGo,FGo,TGo,qb,z_e,MGo,EGo,SX,CGo,wGo,AGo,jb,W_e,LGo,yGo,RX,xGo,$Go,kGo,Db,Q_e,SGo,RGo,PX,PGo,BGo,IGo,Gb,H_e,NGo,qGo,BX,jGo,DGo,GGo,Ob,OGo,U_e,VGo,XGo,J_e,zGo,WGo,Vb,rQe,id,Xb,Y_e,qL,QGo,K_e,HGo,tQe,Io,jL,UGo,dd,JGo,IX,YGo,KGo,NX,ZGo,eOo,oOo,DL,rOo,Z_e,tOo,aOo,nOo,ht,GL,sOo,eue,lOo,iOo,cd,dOo,oue,cOo,fOo,qX,mOo,gOo,hOo,zb,pOo,oo,OL,_Oo,rue,uOo,bOo,Xa,vOo,tue,FOo,TOo,aue,MOo,EOo,nue,COo,wOo,AOo,me,Wb,sue,LOo,yOo,jX,xOo,$Oo,kOo,Qb,lue,SOo,ROo,DX,POo,BOo,IOo,Hb,iue,NOo,qOo,GX,jOo,DOo,GOo,Ub,due,OOo,VOo,OX,XOo,zOo,WOo,Jb,cue,QOo,HOo,VX,UOo,JOo,YOo,Yb,fue,KOo,ZOo,XX,eVo,oVo,rVo,Kb,mue,tVo,aVo,zX,nVo,sVo,lVo,Zb,gue,iVo,dVo,WX,cVo,fVo,mVo,ev,hue,gVo,hVo,QX,pVo,_Vo,uVo,ov,pue,bVo,vVo,HX,FVo,TVo,MVo,rv,_ue,EVo,CVo,UX,wVo,AVo,LVo,tv,uue,yVo,xVo,JX,$Vo,kVo,SVo,av,bue,RVo,PVo,YX,BVo,IVo,NVo,nv,vue,qVo,jVo,KX,DVo,GVo,OVo,sv,Fue,VVo,XVo,ZX,zVo,WVo,QVo,lv,Tue,HVo,UVo,ez,JVo,YVo,KVo,iv,Mue,ZVo,eXo,oz,oXo,rXo,tXo,dv,Eue,aXo,nXo,rz,sXo,lXo,iXo,cv,Cue,dXo,cXo,tz,fXo,mXo,gXo,fv,hXo,wue,pXo,_Xo,Aue,uXo,bXo,mv,aQe,fd,gv,Lue,VL,vXo,yue,FXo,nQe,No,XL,TXo,md,MXo,az,EXo,CXo,nz,wXo,AXo,LXo,zL,yXo,xue,xXo,$Xo,kXo,pt,WL,SXo,$ue,RXo,PXo,gd,BXo,kue,IXo,NXo,sz,qXo,jXo,DXo,hv,GXo,ro,QL,OXo,Sue,VXo,XXo,za,zXo,Rue,WXo,QXo,Pue,HXo,UXo,Bue,JXo,YXo,KXo,B,pv,Iue,ZXo,ezo,lz,ozo,rzo,tzo,_v,Nue,azo,nzo,iz,szo,lzo,izo,uv,que,dzo,czo,dz,fzo,mzo,gzo,bv,jue,hzo,pzo,cz,_zo,uzo,bzo,vv,Due,vzo,Fzo,fz,Tzo,Mzo,Ezo,Fv,Gue,Czo,wzo,mz,Azo,Lzo,yzo,Tv,Oue,xzo,$zo,gz,kzo,Szo,Rzo,Mv,Vue,Pzo,Bzo,hz,Izo,Nzo,qzo,Ev,Xue,jzo,Dzo,pz,Gzo,Ozo,Vzo,Cv,zue,Xzo,zzo,_z,Wzo,Qzo,Hzo,wv,Wue,Uzo,Jzo,uz,Yzo,Kzo,Zzo,Av,Que,eWo,oWo,bz,rWo,tWo,aWo,Lv,Hue,nWo,sWo,vz,lWo,iWo,dWo,yv,Uue,cWo,fWo,Fz,mWo,gWo,hWo,xv,Jue,pWo,_Wo,Tz,uWo,bWo,vWo,$v,Yue,FWo,TWo,Mz,MWo,EWo,CWo,kv,Kue,wWo,AWo,Ez,LWo,yWo,xWo,Sv,Zue,$Wo,kWo,Cz,SWo,RWo,PWo,Rv,e2e,BWo,IWo,wz,NWo,qWo,jWo,Pv,o2e,DWo,GWo,Az,OWo,VWo,XWo,Bv,r2e,zWo,WWo,Lz,QWo,HWo,UWo,Iv,t2e,JWo,YWo,yz,KWo,ZWo,eQo,Nv,a2e,oQo,rQo,xz,tQo,aQo,nQo,qv,n2e,sQo,lQo,$z,iQo,dQo,cQo,jv,s2e,fQo,mQo,kz,gQo,hQo,pQo,Dv,l2e,_Qo,uQo,Sz,bQo,vQo,FQo,Gv,i2e,TQo,MQo,Rz,EQo,CQo,wQo,Ov,d2e,AQo,LQo,Pz,yQo,xQo,$Qo,Vv,c2e,kQo,SQo,Bz,RQo,PQo,BQo,Xv,f2e,IQo,NQo,Iz,qQo,jQo,DQo,zv,m2e,GQo,OQo,Nz,VQo,XQo,zQo,Wv,g2e,WQo,QQo,qz,HQo,UQo,JQo,Qv,h2e,YQo,KQo,jz,ZQo,eHo,oHo,Hv,p2e,rHo,tHo,Dz,aHo,nHo,sHo,Uv,_2e,lHo,iHo,Gz,dHo,cHo,fHo,Jv,u2e,mHo,gHo,Oz,hHo,pHo,_Ho,Yv,b2e,uHo,bHo,Vz,vHo,FHo,THo,Kv,v2e,MHo,EHo,Xz,CHo,wHo,AHo,Zv,F2e,LHo,yHo,zz,xHo,$Ho,kHo,e5,T2e,SHo,RHo,Wz,PHo,BHo,IHo,o5,M2e,NHo,qHo,Qz,jHo,DHo,GHo,r5,E2e,OHo,VHo,Hz,XHo,zHo,WHo,t5,C2e,QHo,HHo,Uz,UHo,JHo,YHo,a5,w2e,KHo,ZHo,Jz,eUo,oUo,rUo,n5,A2e,tUo,aUo,Yz,nUo,sUo,lUo,s5,L2e,iUo,dUo,Kz,cUo,fUo,mUo,l5,y2e,gUo,hUo,Zz,pUo,_Uo,uUo,i5,x2e,bUo,vUo,eW,FUo,TUo,MUo,d5,$2e,EUo,CUo,oW,wUo,AUo,LUo,c5,k2e,yUo,xUo,rW,$Uo,kUo,SUo,f5,S2e,RUo,PUo,tW,BUo,IUo,NUo,m5,R2e,qUo,jUo,aW,DUo,GUo,OUo,g5,VUo,P2e,XUo,zUo,B2e,WUo,QUo,h5,sQe,hd,p5,I2e,HL,HUo,N2e,UUo,lQe,qo,UL,JUo,pd,YUo,nW,KUo,ZUo,sW,eJo,oJo,rJo,JL,tJo,q2e,aJo,nJo,sJo,_t,YL,lJo,j2e,iJo,dJo,_d,cJo,D2e,fJo,mJo,lW,gJo,hJo,pJo,_5,_Jo,to,KL,uJo,G2e,bJo,vJo,Wa,FJo,O2e,TJo,MJo,V2e,EJo,CJo,X2e,wJo,AJo,LJo,Z,u5,z2e,yJo,xJo,iW,$Jo,kJo,SJo,b5,W2e,RJo,PJo,dW,BJo,IJo,NJo,v5,Q2e,qJo,jJo,cW,DJo,GJo,OJo,F5,H2e,VJo,XJo,fW,zJo,WJo,QJo,T5,U2e,HJo,UJo,mW,JJo,YJo,KJo,M5,J2e,ZJo,eYo,gW,oYo,rYo,tYo,E5,Y2e,aYo,nYo,hW,sYo,lYo,iYo,C5,K2e,dYo,cYo,pW,fYo,mYo,gYo,w5,Z2e,hYo,pYo,_W,_Yo,uYo,bYo,A5,e1e,vYo,FYo,uW,TYo,MYo,EYo,L5,o1e,CYo,wYo,bW,AYo,LYo,yYo,y5,r1e,xYo,$Yo,vW,kYo,SYo,RYo,x5,t1e,PYo,BYo,FW,IYo,NYo,qYo,$5,a1e,jYo,DYo,TW,GYo,OYo,VYo,k5,n1e,XYo,zYo,MW,WYo,QYo,HYo,S5,s1e,UYo,JYo,EW,YYo,KYo,ZYo,R5,l1e,eKo,oKo,CW,rKo,tKo,aKo,P5,i1e,nKo,sKo,wW,lKo,iKo,dKo,B5,d1e,cKo,fKo,AW,mKo,gKo,hKo,I5,c1e,pKo,_Ko,LW,uKo,bKo,vKo,N5,f1e,FKo,TKo,yW,MKo,EKo,CKo,q5,m1e,wKo,AKo,xW,LKo,yKo,xKo,j5,g1e,$Ko,kKo,$W,SKo,RKo,PKo,D5,h1e,BKo,IKo,kW,NKo,qKo,jKo,G5,p1e,DKo,GKo,SW,OKo,VKo,XKo,O5,_1e,zKo,WKo,RW,QKo,HKo,UKo,V5,u1e,JKo,YKo,PW,KKo,ZKo,eZo,X5,b1e,oZo,rZo,BW,tZo,aZo,nZo,z5,v1e,sZo,lZo,IW,iZo,dZo,cZo,W5,F1e,fZo,mZo,NW,gZo,hZo,pZo,Q5,T1e,_Zo,uZo,qW,bZo,vZo,FZo,H5,TZo,M1e,MZo,EZo,E1e,CZo,wZo,U5,iQe,ud,J5,C1e,ZL,AZo,w1e,LZo,dQe,jo,ey,yZo,bd,xZo,jW,$Zo,kZo,DW,SZo,RZo,PZo,oy,BZo,A1e,IZo,NZo,qZo,ut,ry,jZo,L1e,DZo,GZo,vd,OZo,y1e,VZo,XZo,GW,zZo,WZo,QZo,Y5,HZo,ao,ty,UZo,x1e,JZo,YZo,Qa,KZo,$1e,ZZo,eer,k1e,oer,rer,S1e,ter,aer,ner,Do,K5,R1e,ser,ler,OW,ier,der,cer,Z5,P1e,fer,mer,VW,ger,her,per,eF,B1e,_er,uer,XW,ber,ver,Fer,oF,I1e,Ter,Mer,zW,Eer,Cer,wer,rF,N1e,Aer,Ler,WW,yer,xer,$er,tF,q1e,ker,Ser,QW,Rer,Per,Ber,aF,Ier,j1e,Ner,qer,D1e,jer,Der,nF,cQe,Fd,sF,G1e,ay,Ger,O1e,Oer,fQe,Go,ny,Ver,Td,Xer,HW,zer,Wer,UW,Qer,Her,Uer,sy,Jer,V1e,Yer,Ker,Zer,bt,ly,eor,X1e,oor,ror,Md,tor,z1e,aor,nor,JW,sor,lor,ior,lF,dor,no,iy,cor,W1e,mor,gor,Ha,hor,Q1e,por,_or,H1e,uor,bor,U1e,vor,For,Tor,U,iF,J1e,Mor,Eor,YW,Cor,wor,Aor,dF,Y1e,Lor,yor,KW,xor,$or,kor,cF,K1e,Sor,Ror,ZW,Por,Bor,Ior,fF,Z1e,Nor,qor,eQ,jor,Dor,Gor,mF,ebe,Oor,Vor,oQ,Xor,zor,Wor,gF,obe,Qor,Hor,rQ,Uor,Jor,Yor,hF,rbe,Kor,Zor,tQ,err,orr,rrr,pF,tbe,trr,arr,aQ,nrr,srr,lrr,_F,abe,irr,drr,nQ,crr,frr,mrr,uF,nbe,grr,hrr,sQ,prr,_rr,urr,bF,sbe,brr,vrr,lQ,Frr,Trr,Mrr,vF,lbe,Err,Crr,iQ,wrr,Arr,Lrr,FF,ibe,yrr,xrr,dQ,$rr,krr,Srr,TF,dbe,Rrr,Prr,cQ,Brr,Irr,Nrr,MF,cbe,qrr,jrr,fQ,Drr,Grr,Orr,EF,fbe,Vrr,Xrr,mQ,zrr,Wrr,Qrr,CF,mbe,Hrr,Urr,gQ,Jrr,Yrr,Krr,wF,gbe,Zrr,etr,hQ,otr,rtr,ttr,AF,hbe,atr,ntr,pQ,str,ltr,itr,LF,pbe,dtr,ctr,_Q,ftr,mtr,gtr,yF,_be,htr,ptr,uQ,_tr,utr,btr,xF,ube,vtr,Ftr,bQ,Ttr,Mtr,Etr,$F,bbe,Ctr,wtr,vQ,Atr,Ltr,ytr,kF,vbe,xtr,$tr,FQ,ktr,Str,Rtr,SF,Fbe,Ptr,Btr,TQ,Itr,Ntr,qtr,RF,Tbe,jtr,Dtr,MQ,Gtr,Otr,Vtr,PF,Mbe,Xtr,ztr,EQ,Wtr,Qtr,Htr,BF,Ebe,Utr,Jtr,CQ,Ytr,Ktr,Ztr,IF,Cbe,ear,oar,wQ,rar,tar,aar,NF,wbe,nar,sar,AQ,lar,iar,dar,qF,Abe,car,far,LQ,mar,gar,har,jF,Lbe,par,_ar,yQ,uar,bar,Far,DF,ybe,Tar,Mar,xQ,Ear,Car,war,GF,xbe,Aar,Lar,$Q,yar,xar,$ar,OF,$be,kar,Sar,kQ,Rar,Par,Bar,VF,kbe,Iar,Nar,SQ,qar,jar,Dar,XF,Sbe,Gar,Oar,RQ,Var,Xar,zar,zF,War,Rbe,Qar,Har,Pbe,Uar,Jar,WF,mQe,Ed,QF,Bbe,dy,Yar,Ibe,Kar,gQe,Oo,cy,Zar,Cd,enr,PQ,onr,rnr,BQ,tnr,anr,nnr,fy,snr,Nbe,lnr,inr,dnr,vt,my,cnr,qbe,fnr,mnr,wd,gnr,jbe,hnr,pnr,IQ,_nr,unr,bnr,HF,vnr,so,gy,Fnr,Dbe,Tnr,Mnr,Ua,Enr,Gbe,Cnr,wnr,Obe,Anr,Lnr,Vbe,ynr,xnr,$nr,V,UF,Xbe,knr,Snr,NQ,Rnr,Pnr,Bnr,JF,zbe,Inr,Nnr,qQ,qnr,jnr,Dnr,YF,Wbe,Gnr,Onr,jQ,Vnr,Xnr,znr,KF,Qbe,Wnr,Qnr,DQ,Hnr,Unr,Jnr,ZF,Hbe,Ynr,Knr,GQ,Znr,esr,osr,eT,Ube,rsr,tsr,OQ,asr,nsr,ssr,oT,Jbe,lsr,isr,VQ,dsr,csr,fsr,rT,Ybe,msr,gsr,XQ,hsr,psr,_sr,tT,Kbe,usr,bsr,zQ,vsr,Fsr,Tsr,aT,Zbe,Msr,Esr,WQ,Csr,wsr,Asr,nT,eve,Lsr,ysr,QQ,xsr,$sr,ksr,sT,ove,Ssr,Rsr,HQ,Psr,Bsr,Isr,lT,rve,Nsr,qsr,UQ,jsr,Dsr,Gsr,iT,tve,Osr,Vsr,JQ,Xsr,zsr,Wsr,dT,ave,Qsr,Hsr,YQ,Usr,Jsr,Ysr,cT,nve,Ksr,Zsr,KQ,elr,olr,rlr,fT,sve,tlr,alr,ZQ,nlr,slr,llr,mT,lve,ilr,dlr,eH,clr,flr,mlr,gT,ive,glr,hlr,oH,plr,_lr,ulr,hT,dve,blr,vlr,rH,Flr,Tlr,Mlr,pT,cve,Elr,Clr,tH,wlr,Alr,Llr,_T,fve,ylr,xlr,aH,$lr,klr,Slr,uT,mve,Rlr,Plr,nH,Blr,Ilr,Nlr,bT,gve,qlr,jlr,sH,Dlr,Glr,Olr,vT,hve,Vlr,Xlr,lH,zlr,Wlr,Qlr,FT,pve,Hlr,Ulr,iH,Jlr,Ylr,Klr,TT,_ve,Zlr,eir,dH,oir,rir,tir,MT,uve,air,nir,cH,sir,lir,iir,ET,bve,dir,cir,fH,fir,mir,gir,CT,vve,hir,pir,mH,_ir,uir,bir,wT,Fve,vir,Fir,gH,Tir,Mir,Eir,AT,Tve,Cir,wir,hH,Air,Lir,yir,LT,Mve,xir,$ir,pH,kir,Sir,Rir,yT,Eve,Pir,Bir,_H,Iir,Nir,qir,xT,Cve,jir,Dir,uH,Gir,Oir,Vir,$T,wve,Xir,zir,bH,Wir,Qir,Hir,kT,Ave,Uir,Jir,vH,Yir,Kir,Zir,ST,Lve,edr,odr,FH,rdr,tdr,adr,RT,yve,ndr,sdr,TH,ldr,idr,ddr,PT,xve,cdr,fdr,MH,mdr,gdr,hdr,BT,$ve,pdr,_dr,EH,udr,bdr,vdr,IT,kve,Fdr,Tdr,CH,Mdr,Edr,Cdr,NT,Sve,wdr,Adr,wH,Ldr,ydr,xdr,qT,$dr,Rve,kdr,Sdr,Pve,Rdr,Pdr,jT,hQe,Ad,DT,Bve,hy,Bdr,Ive,Idr,pQe,Vo,py,Ndr,Ld,qdr,AH,jdr,Ddr,LH,Gdr,Odr,Vdr,_y,Xdr,Nve,zdr,Wdr,Qdr,Ft,uy,Hdr,qve,Udr,Jdr,yd,Ydr,jve,Kdr,Zdr,yH,ecr,ocr,rcr,GT,tcr,lo,by,acr,Dve,ncr,scr,Ja,lcr,Gve,icr,dcr,Ove,ccr,fcr,Vve,mcr,gcr,hcr,Xve,OT,zve,pcr,_cr,xH,ucr,bcr,vcr,VT,Fcr,Wve,Tcr,Mcr,Qve,Ecr,Ccr,XT,_Qe,xd,zT,Hve,vy,wcr,Uve,Acr,uQe,Xo,Fy,Lcr,$d,ycr,$H,xcr,$cr,kH,kcr,Scr,Rcr,Ty,Pcr,Jve,Bcr,Icr,Ncr,Tt,My,qcr,Yve,jcr,Dcr,kd,Gcr,Kve,Ocr,Vcr,SH,Xcr,zcr,Wcr,WT,Qcr,io,Ey,Hcr,Zve,Ucr,Jcr,Ya,Ycr,e5e,Kcr,Zcr,o5e,efr,ofr,r5e,rfr,tfr,afr,be,QT,t5e,nfr,sfr,RH,lfr,ifr,dfr,HT,a5e,cfr,ffr,PH,mfr,gfr,hfr,UT,n5e,pfr,_fr,BH,ufr,bfr,vfr,JT,s5e,Ffr,Tfr,IH,Mfr,Efr,Cfr,rl,l5e,wfr,Afr,NH,Lfr,yfr,qH,xfr,$fr,kfr,YT,i5e,Sfr,Rfr,jH,Pfr,Bfr,Ifr,tl,d5e,Nfr,qfr,DH,jfr,Dfr,GH,Gfr,Ofr,Vfr,KT,c5e,Xfr,zfr,OH,Wfr,Qfr,Hfr,Mt,f5e,Ufr,Jfr,VH,Yfr,Kfr,XH,Zfr,emr,zH,omr,rmr,tmr,ZT,m5e,amr,nmr,WH,smr,lmr,imr,e8,g5e,dmr,cmr,QH,fmr,mmr,gmr,o8,h5e,hmr,pmr,HH,_mr,umr,bmr,r8,p5e,vmr,Fmr,UH,Tmr,Mmr,Emr,t8,_5e,Cmr,wmr,JH,Amr,Lmr,ymr,a8,u5e,xmr,$mr,YH,kmr,Smr,Rmr,n8,b5e,Pmr,Bmr,KH,Imr,Nmr,qmr,s8,v5e,jmr,Dmr,ZH,Gmr,Omr,Vmr,l8,Xmr,F5e,zmr,Wmr,T5e,Qmr,Hmr,i8,bQe,Sd,d8,M5e,Cy,Umr,E5e,Jmr,vQe,zo,wy,Ymr,Rd,Kmr,eU,Zmr,egr,oU,ogr,rgr,tgr,Ay,agr,C5e,ngr,sgr,lgr,Et,Ly,igr,w5e,dgr,cgr,Pd,fgr,A5e,mgr,ggr,rU,hgr,pgr,_gr,c8,ugr,co,yy,bgr,L5e,vgr,Fgr,Ka,Tgr,y5e,Mgr,Egr,x5e,Cgr,wgr,$5e,Agr,Lgr,ygr,k5e,f8,S5e,xgr,$gr,tU,kgr,Sgr,Rgr,m8,Pgr,R5e,Bgr,Igr,P5e,Ngr,qgr,g8,FQe,Bd,h8,B5e,xy,jgr,I5e,Dgr,TQe,Wo,$y,Ggr,Id,Ogr,aU,Vgr,Xgr,nU,zgr,Wgr,Qgr,ky,Hgr,N5e,Ugr,Jgr,Ygr,Ct,Sy,Kgr,q5e,Zgr,ehr,Nd,ohr,j5e,rhr,thr,sU,ahr,nhr,shr,p8,lhr,fo,Ry,ihr,D5e,dhr,chr,Za,fhr,G5e,mhr,ghr,O5e,hhr,phr,V5e,_hr,uhr,bhr,X5e,_8,z5e,vhr,Fhr,lU,Thr,Mhr,Ehr,u8,Chr,W5e,whr,Ahr,Q5e,Lhr,yhr,b8,MQe,qd,v8,H5e,Py,xhr,U5e,$hr,EQe,Qo,By,khr,jd,Shr,iU,Rhr,Phr,dU,Bhr,Ihr,Nhr,Iy,qhr,J5e,jhr,Dhr,Ghr,wt,Ny,Ohr,Y5e,Vhr,Xhr,Dd,zhr,K5e,Whr,Qhr,cU,Hhr,Uhr,Jhr,F8,Yhr,mo,qy,Khr,Z5e,Zhr,epr,en,opr,eFe,rpr,tpr,oFe,apr,npr,rFe,spr,lpr,ipr,tFe,T8,aFe,dpr,cpr,fU,fpr,mpr,gpr,M8,hpr,nFe,ppr,_pr,sFe,upr,bpr,E8,CQe,Gd,C8,lFe,jy,vpr,iFe,Fpr,wQe,Ho,Dy,Tpr,Od,Mpr,mU,Epr,Cpr,gU,wpr,Apr,Lpr,Gy,ypr,dFe,xpr,$pr,kpr,At,Oy,Spr,cFe,Rpr,Ppr,Vd,Bpr,fFe,Ipr,Npr,hU,qpr,jpr,Dpr,w8,Gpr,go,Vy,Opr,mFe,Vpr,Xpr,on,zpr,gFe,Wpr,Qpr,hFe,Hpr,Upr,pFe,Jpr,Ypr,Kpr,Pe,A8,_Fe,Zpr,e_r,pU,o_r,r_r,t_r,L8,uFe,a_r,n_r,_U,s_r,l_r,i_r,y8,bFe,d_r,c_r,uU,f_r,m_r,g_r,x8,vFe,h_r,p_r,bU,__r,u_r,b_r,$8,FFe,v_r,F_r,vU,T_r,M_r,E_r,k8,TFe,C_r,w_r,FU,A_r,L_r,y_r,S8,MFe,x_r,$_r,TU,k_r,S_r,R_r,R8,EFe,P_r,B_r,MU,I_r,N_r,q_r,P8,CFe,j_r,D_r,EU,G_r,O_r,V_r,B8,X_r,wFe,z_r,W_r,AFe,Q_r,H_r,I8,AQe,Xd,N8,LFe,Xy,U_r,yFe,J_r,LQe,Uo,zy,Y_r,zd,K_r,CU,Z_r,eur,wU,our,rur,tur,Wy,aur,xFe,nur,sur,lur,Lt,Qy,iur,$Fe,dur,cur,Wd,fur,kFe,mur,gur,AU,hur,pur,_ur,q8,uur,ho,Hy,bur,SFe,vur,Fur,rn,Tur,RFe,Mur,Eur,PFe,Cur,wur,BFe,Aur,Lur,yur,at,j8,IFe,xur,$ur,LU,kur,Sur,Rur,D8,NFe,Pur,Bur,yU,Iur,Nur,qur,G8,qFe,jur,Dur,xU,Gur,Our,Vur,O8,jFe,Xur,zur,$U,Wur,Qur,Hur,V8,DFe,Uur,Jur,kU,Yur,Kur,Zur,X8,e2r,GFe,o2r,r2r,OFe,t2r,a2r,z8,yQe,Qd,W8,VFe,Uy,n2r,XFe,s2r,xQe,Jo,Jy,l2r,Hd,i2r,SU,d2r,c2r,RU,f2r,m2r,g2r,Yy,h2r,zFe,p2r,_2r,u2r,yt,Ky,b2r,WFe,v2r,F2r,Ud,T2r,QFe,M2r,E2r,PU,C2r,w2r,A2r,Q8,L2r,po,Zy,y2r,HFe,x2r,$2r,tn,k2r,UFe,S2r,R2r,JFe,P2r,B2r,YFe,I2r,N2r,q2r,Le,H8,KFe,j2r,D2r,BU,G2r,O2r,V2r,U8,ZFe,X2r,z2r,IU,W2r,Q2r,H2r,J8,eTe,U2r,J2r,NU,Y2r,K2r,Z2r,Y8,oTe,e1r,o1r,qU,r1r,t1r,a1r,K8,rTe,n1r,s1r,jU,l1r,i1r,d1r,Z8,tTe,c1r,f1r,DU,m1r,g1r,h1r,e9,aTe,p1r,_1r,GU,u1r,b1r,v1r,o9,nTe,F1r,T1r,OU,M1r,E1r,C1r,r9,sTe,w1r,A1r,VU,L1r,y1r,x1r,t9,lTe,$1r,k1r,XU,S1r,R1r,P1r,a9,B1r,iTe,I1r,N1r,dTe,q1r,j1r,n9,$Qe,Jd,s9,cTe,ex,D1r,fTe,G1r,kQe,Yo,ox,O1r,Yd,V1r,zU,X1r,z1r,WU,W1r,Q1r,H1r,rx,U1r,mTe,J1r,Y1r,K1r,xt,tx,Z1r,gTe,ebr,obr,Kd,rbr,hTe,tbr,abr,QU,nbr,sbr,lbr,l9,ibr,_o,ax,dbr,pTe,cbr,fbr,an,mbr,_Te,gbr,hbr,uTe,pbr,_br,bTe,ubr,bbr,vbr,nx,i9,vTe,Fbr,Tbr,HU,Mbr,Ebr,Cbr,d9,FTe,wbr,Abr,UU,Lbr,ybr,xbr,c9,$br,TTe,kbr,Sbr,MTe,Rbr,Pbr,f9,SQe,Zd,m9,ETe,sx,Bbr,CTe,Ibr,RQe,Ko,lx,Nbr,ec,qbr,JU,jbr,Dbr,YU,Gbr,Obr,Vbr,ix,Xbr,wTe,zbr,Wbr,Qbr,$t,dx,Hbr,ATe,Ubr,Jbr,oc,Ybr,LTe,Kbr,Zbr,KU,evr,ovr,rvr,g9,tvr,uo,cx,avr,yTe,nvr,svr,nn,lvr,xTe,ivr,dvr,$Te,cvr,fvr,kTe,mvr,gvr,hvr,nt,h9,STe,pvr,_vr,ZU,uvr,bvr,vvr,p9,RTe,Fvr,Tvr,eJ,Mvr,Evr,Cvr,_9,PTe,wvr,Avr,oJ,Lvr,yvr,xvr,u9,BTe,$vr,kvr,rJ,Svr,Rvr,Pvr,b9,ITe,Bvr,Ivr,tJ,Nvr,qvr,jvr,v9,Dvr,NTe,Gvr,Ovr,qTe,Vvr,Xvr,F9,PQe,rc,T9,jTe,fx,zvr,DTe,Wvr,BQe,Zo,mx,Qvr,tc,Hvr,aJ,Uvr,Jvr,nJ,Yvr,Kvr,Zvr,gx,e5r,GTe,o5r,r5r,t5r,kt,hx,a5r,OTe,n5r,s5r,ac,l5r,VTe,i5r,d5r,sJ,c5r,f5r,m5r,M9,g5r,bo,px,h5r,XTe,p5r,_5r,sn,u5r,zTe,b5r,v5r,WTe,F5r,T5r,QTe,M5r,E5r,C5r,ln,E9,HTe,w5r,A5r,lJ,L5r,y5r,x5r,C9,UTe,$5r,k5r,iJ,S5r,R5r,P5r,w9,JTe,B5r,I5r,dJ,N5r,q5r,j5r,A9,YTe,D5r,G5r,cJ,O5r,V5r,X5r,L9,z5r,KTe,W5r,Q5r,ZTe,H5r,U5r,y9,IQe,nc,x9,e8e,_x,J5r,o8e,Y5r,NQe,er,ux,K5r,sc,Z5r,fJ,eFr,oFr,mJ,rFr,tFr,aFr,bx,nFr,r8e,sFr,lFr,iFr,St,vx,dFr,t8e,cFr,fFr,lc,mFr,a8e,gFr,hFr,gJ,pFr,_Fr,uFr,$9,bFr,vo,Fx,vFr,n8e,FFr,TFr,dn,MFr,s8e,EFr,CFr,l8e,wFr,AFr,i8e,LFr,yFr,xFr,Tx,k9,d8e,$Fr,kFr,hJ,SFr,RFr,PFr,S9,c8e,BFr,IFr,pJ,NFr,qFr,jFr,R9,DFr,f8e,GFr,OFr,m8e,VFr,XFr,P9,qQe,ic,B9,g8e,Mx,zFr,h8e,WFr,jQe,or,Ex,QFr,dc,HFr,_J,UFr,JFr,uJ,YFr,KFr,ZFr,Cx,eTr,p8e,oTr,rTr,tTr,Rt,wx,aTr,_8e,nTr,sTr,cc,lTr,u8e,iTr,dTr,bJ,cTr,fTr,mTr,I9,gTr,Fo,Ax,hTr,b8e,pTr,_Tr,cn,uTr,v8e,bTr,vTr,F8e,FTr,TTr,T8e,MTr,ETr,CTr,M8e,N9,E8e,wTr,ATr,vJ,LTr,yTr,xTr,q9,$Tr,C8e,kTr,STr,w8e,RTr,PTr,j9,DQe,fc,D9,A8e,Lx,BTr,L8e,ITr,GQe,rr,yx,NTr,mc,qTr,FJ,jTr,DTr,TJ,GTr,OTr,VTr,xx,XTr,y8e,zTr,WTr,QTr,Pt,$x,HTr,x8e,UTr,JTr,gc,YTr,$8e,KTr,ZTr,MJ,e8r,o8r,r8r,G9,t8r,To,kx,a8r,k8e,n8r,s8r,fn,l8r,S8e,i8r,d8r,R8e,c8r,f8r,P8e,m8r,g8r,h8r,st,O9,B8e,p8r,_8r,EJ,u8r,b8r,v8r,V9,I8e,F8r,T8r,CJ,M8r,E8r,C8r,X9,N8e,w8r,A8r,wJ,L8r,y8r,x8r,z9,q8e,$8r,k8r,AJ,S8r,R8r,P8r,W9,j8e,B8r,I8r,LJ,N8r,q8r,j8r,Q9,D8r,D8e,G8r,O8r,G8e,V8r,X8r,H9,OQe,hc,U9,O8e,Sx,z8r,V8e,W8r,VQe,tr,Rx,Q8r,pc,H8r,yJ,U8r,J8r,xJ,Y8r,K8r,Z8r,Px,e9r,X8e,o9r,r9r,t9r,Bt,Bx,a9r,z8e,n9r,s9r,_c,l9r,W8e,i9r,d9r,$J,c9r,f9r,m9r,J9,g9r,Mo,Ix,h9r,Q8e,p9r,_9r,mn,u9r,H8e,b9r,v9r,U8e,F9r,T9r,J8e,M9r,E9r,C9r,Y8e,Y9,K8e,w9r,A9r,kJ,L9r,y9r,x9r,K9,$9r,Z8e,k9r,S9r,e9e,R9r,P9r,Z9,XQe,uc,eM,o9e,Nx,B9r,r9e,I9r,zQe,ar,qx,N9r,bc,q9r,SJ,j9r,D9r,RJ,G9r,O9r,V9r,jx,X9r,t9e,z9r,W9r,Q9r,It,Dx,H9r,a9e,U9r,J9r,vc,Y9r,n9e,K9r,Z9r,PJ,eMr,oMr,rMr,oM,tMr,Sr,Gx,aMr,s9e,nMr,sMr,gn,lMr,l9e,iMr,dMr,i9e,cMr,fMr,d9e,mMr,gMr,hMr,q,rM,c9e,pMr,_Mr,BJ,uMr,bMr,vMr,tM,f9e,FMr,TMr,IJ,MMr,EMr,CMr,aM,m9e,wMr,AMr,NJ,LMr,yMr,xMr,nM,g9e,$Mr,kMr,qJ,SMr,RMr,PMr,sM,h9e,BMr,IMr,jJ,NMr,qMr,jMr,lM,p9e,DMr,GMr,DJ,OMr,VMr,XMr,iM,_9e,zMr,WMr,GJ,QMr,HMr,UMr,dM,u9e,JMr,YMr,OJ,KMr,ZMr,eEr,cM,b9e,oEr,rEr,VJ,tEr,aEr,nEr,fM,v9e,sEr,lEr,XJ,iEr,dEr,cEr,mM,F9e,fEr,mEr,zJ,gEr,hEr,pEr,gM,T9e,_Er,uEr,WJ,bEr,vEr,FEr,hM,M9e,TEr,MEr,QJ,EEr,CEr,wEr,pM,E9e,AEr,LEr,HJ,yEr,xEr,$Er,_M,C9e,kEr,SEr,UJ,REr,PEr,BEr,uM,w9e,IEr,NEr,JJ,qEr,jEr,DEr,bM,A9e,GEr,OEr,YJ,VEr,XEr,zEr,vM,L9e,WEr,QEr,KJ,HEr,UEr,JEr,al,y9e,YEr,KEr,ZJ,ZEr,e4r,eY,o4r,r4r,t4r,FM,x9e,a4r,n4r,oY,s4r,l4r,i4r,TM,$9e,d4r,c4r,rY,f4r,m4r,g4r,MM,k9e,h4r,p4r,tY,_4r,u4r,b4r,EM,S9e,v4r,F4r,aY,T4r,M4r,E4r,CM,R9e,C4r,w4r,nY,A4r,L4r,y4r,wM,P9e,x4r,$4r,sY,k4r,S4r,R4r,AM,B9e,P4r,B4r,lY,I4r,N4r,q4r,LM,I9e,j4r,D4r,iY,G4r,O4r,V4r,yM,N9e,X4r,z4r,dY,W4r,Q4r,H4r,xM,q9e,U4r,J4r,cY,Y4r,K4r,Z4r,$M,j9e,eCr,oCr,fY,rCr,tCr,aCr,kM,D9e,nCr,sCr,mY,lCr,iCr,dCr,SM,G9e,cCr,fCr,gY,mCr,gCr,hCr,RM,O9e,pCr,_Cr,hY,uCr,bCr,vCr,PM,V9e,FCr,TCr,pY,MCr,ECr,CCr,BM,X9e,wCr,ACr,_Y,LCr,yCr,xCr,IM,z9e,$Cr,kCr,uY,SCr,RCr,PCr,NM,W9e,BCr,ICr,bY,NCr,qCr,jCr,qM,Q9e,DCr,GCr,vY,OCr,VCr,XCr,jM,H9e,zCr,WCr,FY,QCr,HCr,UCr,DM,U9e,JCr,YCr,TY,KCr,ZCr,e3r,GM,J9e,o3r,r3r,MY,t3r,a3r,n3r,OM,Y9e,s3r,l3r,EY,i3r,d3r,c3r,VM,K9e,f3r,m3r,CY,g3r,h3r,p3r,XM,Z9e,_3r,u3r,wY,b3r,v3r,F3r,zM,eMe,T3r,M3r,AY,E3r,C3r,w3r,WM,oMe,A3r,L3r,LY,y3r,x3r,$3r,QM,rMe,k3r,S3r,yY,R3r,P3r,B3r,HM,tMe,I3r,N3r,xY,q3r,j3r,D3r,UM,aMe,G3r,O3r,$Y,V3r,X3r,z3r,JM,nMe,W3r,Q3r,kY,H3r,U3r,J3r,YM,sMe,Y3r,K3r,SY,Z3r,e0r,o0r,KM,WQe,Fc,ZM,lMe,Ox,r0r,iMe,t0r,QQe,nr,Vx,a0r,Tc,n0r,RY,s0r,l0r,PY,i0r,d0r,c0r,Xx,f0r,dMe,m0r,g0r,h0r,Nt,zx,p0r,cMe,_0r,u0r,Mc,b0r,fMe,v0r,F0r,BY,T0r,M0r,E0r,eE,C0r,Rr,Wx,w0r,mMe,A0r,L0r,hn,y0r,gMe,x0r,$0r,hMe,k0r,S0r,pMe,R0r,P0r,B0r,se,oE,_Me,I0r,N0r,IY,q0r,j0r,D0r,rE,uMe,G0r,O0r,NY,V0r,X0r,z0r,tE,bMe,W0r,Q0r,qY,H0r,U0r,J0r,aE,vMe,Y0r,K0r,jY,Z0r,ewr,owr,nE,FMe,rwr,twr,DY,awr,nwr,swr,sE,TMe,lwr,iwr,GY,dwr,cwr,fwr,lE,MMe,mwr,gwr,OY,hwr,pwr,_wr,iE,EMe,uwr,bwr,VY,vwr,Fwr,Twr,dE,CMe,Mwr,Ewr,XY,Cwr,wwr,Awr,cE,wMe,Lwr,ywr,zY,xwr,$wr,kwr,fE,AMe,Swr,Rwr,WY,Pwr,Bwr,Iwr,mE,LMe,Nwr,qwr,QY,jwr,Dwr,Gwr,gE,yMe,Owr,Vwr,HY,Xwr,zwr,Wwr,hE,xMe,Qwr,Hwr,UY,Uwr,Jwr,Ywr,pE,$Me,Kwr,Zwr,JY,e6r,o6r,r6r,_E,kMe,t6r,a6r,YY,n6r,s6r,l6r,uE,SMe,i6r,d6r,KY,c6r,f6r,m6r,bE,RMe,g6r,h6r,ZY,p6r,_6r,u6r,vE,PMe,b6r,v6r,eK,F6r,T6r,M6r,FE,BMe,E6r,C6r,oK,w6r,A6r,L6r,TE,IMe,y6r,x6r,rK,$6r,k6r,S6r,ME,NMe,R6r,P6r,tK,B6r,I6r,N6r,EE,qMe,q6r,j6r,aK,D6r,G6r,O6r,CE,HQe,Ec,wE,jMe,Qx,V6r,DMe,X6r,UQe,sr,Hx,z6r,Cc,W6r,nK,Q6r,H6r,sK,U6r,J6r,Y6r,Ux,K6r,GMe,Z6r,eAr,oAr,qt,Jx,rAr,OMe,tAr,aAr,wc,nAr,VMe,sAr,lAr,lK,iAr,dAr,cAr,AE,fAr,Pr,Yx,mAr,XMe,gAr,hAr,pn,pAr,zMe,_Ar,uAr,WMe,bAr,vAr,QMe,FAr,TAr,MAr,Me,LE,HMe,EAr,CAr,iK,wAr,AAr,LAr,yE,UMe,yAr,xAr,dK,$Ar,kAr,SAr,xE,JMe,RAr,PAr,cK,BAr,IAr,NAr,$E,YMe,qAr,jAr,fK,DAr,GAr,OAr,kE,KMe,VAr,XAr,mK,zAr,WAr,QAr,SE,ZMe,HAr,UAr,gK,JAr,YAr,KAr,RE,eEe,ZAr,e7r,hK,o7r,r7r,t7r,PE,oEe,a7r,n7r,pK,s7r,l7r,i7r,BE,rEe,d7r,c7r,_K,f7r,m7r,g7r,IE,tEe,h7r,p7r,uK,_7r,u7r,b7r,NE,aEe,v7r,F7r,bK,T7r,M7r,E7r,qE,nEe,C7r,w7r,vK,A7r,L7r,y7r,jE,sEe,x7r,$7r,FK,k7r,S7r,R7r,DE,JQe,Ac,GE,lEe,Kx,P7r,iEe,B7r,YQe,lr,Zx,I7r,Lc,N7r,TK,q7r,j7r,MK,D7r,G7r,O7r,e$,V7r,dEe,X7r,z7r,W7r,jt,o$,Q7r,cEe,H7r,U7r,yc,J7r,fEe,Y7r,K7r,EK,Z7r,eLr,oLr,OE,rLr,Br,r$,tLr,mEe,aLr,nLr,_n,sLr,gEe,lLr,iLr,hEe,dLr,cLr,pEe,fLr,mLr,gLr,Ve,VE,_Ee,hLr,pLr,CK,_Lr,uLr,bLr,XE,uEe,vLr,FLr,wK,TLr,MLr,ELr,nl,bEe,CLr,wLr,AK,ALr,LLr,LK,yLr,xLr,$Lr,zE,vEe,kLr,SLr,yK,RLr,PLr,BLr,WE,FEe,ILr,NLr,xK,qLr,jLr,DLr,QE,TEe,GLr,OLr,$K,VLr,XLr,zLr,HE,MEe,WLr,QLr,kK,HLr,ULr,JLr,UE,EEe,YLr,KLr,SK,ZLr,eyr,oyr,JE,KQe,xc,YE,CEe,t$,ryr,wEe,tyr,ZQe,ir,a$,ayr,$c,nyr,RK,syr,lyr,PK,iyr,dyr,cyr,n$,fyr,AEe,myr,gyr,hyr,Dt,s$,pyr,LEe,_yr,uyr,kc,byr,yEe,vyr,Fyr,BK,Tyr,Myr,Eyr,KE,Cyr,Ir,l$,wyr,xEe,Ayr,Lyr,un,yyr,$Ee,xyr,$yr,kEe,kyr,Syr,SEe,Ryr,Pyr,Byr,ie,ZE,REe,Iyr,Nyr,IK,qyr,jyr,Dyr,e4,PEe,Gyr,Oyr,NK,Vyr,Xyr,zyr,o4,BEe,Wyr,Qyr,qK,Hyr,Uyr,Jyr,r4,IEe,Yyr,Kyr,jK,Zyr,exr,oxr,t4,NEe,rxr,txr,DK,axr,nxr,sxr,a4,qEe,lxr,ixr,GK,dxr,cxr,fxr,n4,jEe,mxr,gxr,OK,hxr,pxr,_xr,s4,DEe,uxr,bxr,VK,vxr,Fxr,Txr,l4,GEe,Mxr,Exr,XK,Cxr,wxr,Axr,i4,OEe,Lxr,yxr,zK,xxr,$xr,kxr,d4,VEe,Sxr,Rxr,WK,Pxr,Bxr,Ixr,c4,XEe,Nxr,qxr,QK,jxr,Dxr,Gxr,f4,zEe,Oxr,Vxr,HK,Xxr,zxr,Wxr,m4,WEe,Qxr,Hxr,UK,Uxr,Jxr,Yxr,g4,QEe,Kxr,Zxr,JK,e$r,o$r,r$r,h4,HEe,t$r,a$r,YK,n$r,s$r,l$r,p4,UEe,i$r,d$r,KK,c$r,f$r,m$r,_4,JEe,g$r,h$r,ZK,p$r,_$r,u$r,u4,YEe,b$r,v$r,eZ,F$r,T$r,M$r,b4,KEe,E$r,C$r,oZ,w$r,A$r,L$r,v4,eHe,Sc,F4,ZEe,i$,y$r,e4e,x$r,oHe,dr,d$,$$r,Rc,k$r,rZ,S$r,R$r,tZ,P$r,B$r,I$r,c$,N$r,o4e,q$r,j$r,D$r,Gt,f$,G$r,r4e,O$r,V$r,Pc,X$r,t4e,z$r,W$r,aZ,Q$r,H$r,U$r,T4,J$r,Nr,m$,Y$r,a4e,K$r,Z$r,bn,ekr,n4e,okr,rkr,s4e,tkr,akr,l4e,nkr,skr,lkr,ye,M4,i4e,ikr,dkr,nZ,ckr,fkr,mkr,E4,d4e,gkr,hkr,sZ,pkr,_kr,ukr,C4,c4e,bkr,vkr,lZ,Fkr,Tkr,Mkr,w4,f4e,Ekr,Ckr,iZ,wkr,Akr,Lkr,A4,m4e,ykr,xkr,dZ,$kr,kkr,Skr,L4,g4e,Rkr,Pkr,cZ,Bkr,Ikr,Nkr,y4,h4e,qkr,jkr,fZ,Dkr,Gkr,Okr,x4,p4e,Vkr,Xkr,mZ,zkr,Wkr,Qkr,$4,_4e,Hkr,Ukr,gZ,Jkr,Ykr,Kkr,k4,u4e,Zkr,eSr,hZ,oSr,rSr,tSr,S4,rHe,Bc,R4,b4e,g$,aSr,v4e,nSr,tHe,cr,h$,sSr,Ic,lSr,pZ,iSr,dSr,_Z,cSr,fSr,mSr,p$,gSr,F4e,hSr,pSr,_Sr,Ot,_$,uSr,T4e,bSr,vSr,Nc,FSr,M4e,TSr,MSr,uZ,ESr,CSr,wSr,P4,ASr,qr,u$,LSr,E4e,ySr,xSr,vn,$Sr,C4e,kSr,SSr,w4e,RSr,PSr,A4e,BSr,ISr,NSr,te,B4,L4e,qSr,jSr,bZ,DSr,GSr,OSr,I4,y4e,VSr,XSr,vZ,zSr,WSr,QSr,N4,x4e,HSr,USr,FZ,JSr,YSr,KSr,q4,$4e,ZSr,eRr,TZ,oRr,rRr,tRr,j4,k4e,aRr,nRr,MZ,sRr,lRr,iRr,D4,S4e,dRr,cRr,EZ,fRr,mRr,gRr,G4,R4e,hRr,pRr,CZ,_Rr,uRr,bRr,O4,P4e,vRr,FRr,wZ,TRr,MRr,ERr,V4,B4e,CRr,wRr,AZ,ARr,LRr,yRr,X4,I4e,xRr,$Rr,LZ,kRr,SRr,RRr,z4,N4e,PRr,BRr,yZ,IRr,NRr,qRr,W4,q4e,jRr,DRr,xZ,GRr,ORr,VRr,Q4,j4e,XRr,zRr,$Z,WRr,QRr,HRr,H4,D4e,URr,JRr,kZ,YRr,KRr,ZRr,U4,G4e,ePr,oPr,SZ,rPr,tPr,aPr,J4,O4e,nPr,sPr,RZ,lPr,iPr,dPr,Y4,V4e,cPr,fPr,PZ,mPr,gPr,hPr,K4,X4e,pPr,_Pr,BZ,uPr,bPr,vPr,Z4,z4e,FPr,TPr,IZ,MPr,EPr,CPr,eC,W4e,wPr,APr,NZ,LPr,yPr,xPr,oC,Q4e,$Pr,kPr,qZ,SPr,RPr,PPr,rC,H4e,BPr,IPr,jZ,NPr,qPr,jPr,tC,U4e,DPr,GPr,DZ,OPr,VPr,XPr,aC,J4e,zPr,WPr,GZ,QPr,HPr,UPr,nC,Y4e,JPr,YPr,OZ,KPr,ZPr,eBr,sC,K4e,oBr,rBr,VZ,tBr,aBr,nBr,lC,aHe,qc,iC,Z4e,b$,sBr,eCe,lBr,nHe,fr,v$,iBr,jc,dBr,XZ,cBr,fBr,zZ,mBr,gBr,hBr,F$,pBr,oCe,_Br,uBr,bBr,Vt,T$,vBr,rCe,FBr,TBr,Dc,MBr,tCe,EBr,CBr,WZ,wBr,ABr,LBr,dC,yBr,jr,M$,xBr,aCe,$Br,kBr,Fn,SBr,nCe,RBr,PBr,sCe,BBr,IBr,lCe,NBr,qBr,jBr,ve,cC,iCe,DBr,GBr,QZ,OBr,VBr,XBr,fC,dCe,zBr,WBr,HZ,QBr,HBr,UBr,mC,cCe,JBr,YBr,UZ,KBr,ZBr,eIr,gC,fCe,oIr,rIr,JZ,tIr,aIr,nIr,hC,mCe,sIr,lIr,YZ,iIr,dIr,cIr,pC,gCe,fIr,mIr,KZ,gIr,hIr,pIr,_C,hCe,_Ir,uIr,ZZ,bIr,vIr,FIr,uC,pCe,TIr,MIr,eee,EIr,CIr,wIr,bC,_Ce,AIr,LIr,oee,yIr,xIr,$Ir,vC,uCe,kIr,SIr,ree,RIr,PIr,BIr,FC,bCe,IIr,NIr,tee,qIr,jIr,DIr,TC,vCe,GIr,OIr,aee,VIr,XIr,zIr,MC,FCe,WIr,QIr,nee,HIr,UIr,JIr,EC,TCe,YIr,KIr,see,ZIr,eNr,oNr,CC,MCe,rNr,tNr,lee,aNr,nNr,sNr,wC,ECe,lNr,iNr,iee,dNr,cNr,fNr,AC,CCe,mNr,gNr,dee,hNr,pNr,_Nr,LC,sHe,Gc,yC,wCe,E$,uNr,ACe,bNr,lHe,mr,C$,vNr,Oc,FNr,cee,TNr,MNr,fee,ENr,CNr,wNr,w$,ANr,LCe,LNr,yNr,xNr,Xt,A$,$Nr,yCe,kNr,SNr,Vc,RNr,xCe,PNr,BNr,mee,INr,NNr,qNr,xC,jNr,Dr,L$,DNr,$Ce,GNr,ONr,Tn,VNr,kCe,XNr,zNr,SCe,WNr,QNr,RCe,HNr,UNr,JNr,y$,$C,PCe,YNr,KNr,gee,ZNr,eqr,oqr,kC,BCe,rqr,tqr,hee,aqr,nqr,sqr,SC,iHe,Xc,RC,ICe,x$,lqr,NCe,iqr,dHe,gr,$$,dqr,zc,cqr,pee,fqr,mqr,_ee,gqr,hqr,pqr,k$,_qr,qCe,uqr,bqr,vqr,zt,S$,Fqr,jCe,Tqr,Mqr,Wc,Eqr,DCe,Cqr,wqr,uee,Aqr,Lqr,yqr,PC,xqr,Gr,R$,$qr,GCe,kqr,Sqr,Mn,Rqr,OCe,Pqr,Bqr,VCe,Iqr,Nqr,XCe,qqr,jqr,Dqr,zCe,BC,WCe,Gqr,Oqr,bee,Vqr,Xqr,zqr,IC,cHe,Qc,NC,QCe,P$,Wqr,HCe,Qqr,fHe,hr,B$,Hqr,Hc,Uqr,vee,Jqr,Yqr,Fee,Kqr,Zqr,ejr,I$,ojr,UCe,rjr,tjr,ajr,Wt,N$,njr,JCe,sjr,ljr,Uc,ijr,YCe,djr,cjr,Tee,fjr,mjr,gjr,qC,hjr,Or,q$,pjr,KCe,_jr,ujr,En,bjr,ZCe,vjr,Fjr,e3e,Tjr,Mjr,o3e,Ejr,Cjr,wjr,de,jC,r3e,Ajr,Ljr,Mee,yjr,xjr,$jr,DC,t3e,kjr,Sjr,Eee,Rjr,Pjr,Bjr,GC,a3e,Ijr,Njr,Cee,qjr,jjr,Djr,OC,n3e,Gjr,Ojr,wee,Vjr,Xjr,zjr,VC,s3e,Wjr,Qjr,Aee,Hjr,Ujr,Jjr,XC,l3e,Yjr,Kjr,Lee,Zjr,eDr,oDr,zC,i3e,rDr,tDr,yee,aDr,nDr,sDr,WC,d3e,lDr,iDr,xee,dDr,cDr,fDr,QC,c3e,mDr,gDr,$ee,hDr,pDr,_Dr,HC,f3e,uDr,bDr,kee,vDr,FDr,TDr,UC,m3e,MDr,EDr,See,CDr,wDr,ADr,JC,g3e,LDr,yDr,Ree,xDr,$Dr,kDr,YC,h3e,SDr,RDr,Pee,PDr,BDr,IDr,KC,p3e,NDr,qDr,Bee,jDr,DDr,GDr,ZC,_3e,ODr,VDr,Iee,XDr,zDr,WDr,e3,u3e,QDr,HDr,Nee,UDr,JDr,YDr,o3,b3e,KDr,ZDr,qee,eGr,oGr,rGr,r3,v3e,tGr,aGr,jee,nGr,sGr,lGr,t3,F3e,iGr,dGr,Dee,cGr,fGr,mGr,a3,T3e,gGr,hGr,Gee,pGr,_Gr,uGr,n3,mHe,Jc,s3,M3e,j$,bGr,E3e,vGr,gHe,pr,D$,FGr,Yc,TGr,Oee,MGr,EGr,Vee,CGr,wGr,AGr,G$,LGr,C3e,yGr,xGr,$Gr,Qt,O$,kGr,w3e,SGr,RGr,Kc,PGr,A3e,BGr,IGr,Xee,NGr,qGr,jGr,l3,DGr,Vr,V$,GGr,L3e,OGr,VGr,Cn,XGr,y3e,zGr,WGr,x3e,QGr,HGr,$3e,UGr,JGr,YGr,ce,i3,k3e,KGr,ZGr,zee,eOr,oOr,rOr,d3,S3e,tOr,aOr,Wee,nOr,sOr,lOr,c3,R3e,iOr,dOr,Qee,cOr,fOr,mOr,f3,P3e,gOr,hOr,Hee,pOr,_Or,uOr,m3,B3e,bOr,vOr,Uee,FOr,TOr,MOr,g3,I3e,EOr,COr,Jee,wOr,AOr,LOr,h3,N3e,yOr,xOr,Yee,$Or,kOr,SOr,p3,q3e,ROr,POr,Kee,BOr,IOr,NOr,_3,j3e,qOr,jOr,Zee,DOr,GOr,OOr,u3,D3e,VOr,XOr,eoe,zOr,WOr,QOr,b3,G3e,HOr,UOr,ooe,JOr,YOr,KOr,v3,O3e,ZOr,eVr,roe,oVr,rVr,tVr,F3,V3e,aVr,nVr,toe,sVr,lVr,iVr,T3,X3e,dVr,cVr,aoe,fVr,mVr,gVr,M3,z3e,hVr,pVr,noe,_Vr,uVr,bVr,E3,W3e,vVr,FVr,soe,TVr,MVr,EVr,C3,Q3e,CVr,wVr,loe,AVr,LVr,yVr,w3,H3e,xVr,$Vr,ioe,kVr,SVr,RVr,A3,U3e,PVr,BVr,doe,IVr,NVr,qVr,L3,J3e,jVr,DVr,coe,GVr,OVr,VVr,y3,hHe,Zc,x3,Y3e,X$,XVr,K3e,zVr,pHe,_r,z$,WVr,ef,QVr,foe,HVr,UVr,moe,JVr,YVr,KVr,W$,ZVr,Z3e,eXr,oXr,rXr,Ht,Q$,tXr,e0e,aXr,nXr,of,sXr,o0e,lXr,iXr,goe,dXr,cXr,fXr,$3,mXr,Xr,H$,gXr,r0e,hXr,pXr,wn,_Xr,t0e,uXr,bXr,a0e,vXr,FXr,n0e,TXr,MXr,EXr,s0e,k3,l0e,CXr,wXr,hoe,AXr,LXr,yXr,S3,_He,rf,R3,i0e,U$,xXr,d0e,$Xr,uHe,ur,J$,kXr,tf,SXr,poe,RXr,PXr,_oe,BXr,IXr,NXr,Y$,qXr,c0e,jXr,DXr,GXr,Ut,K$,OXr,f0e,VXr,XXr,af,zXr,m0e,WXr,QXr,uoe,HXr,UXr,JXr,P3,YXr,zr,Z$,KXr,g0e,ZXr,ezr,An,ozr,h0e,rzr,tzr,p0e,azr,nzr,_0e,szr,lzr,izr,u0e,B3,b0e,dzr,czr,boe,fzr,mzr,gzr,I3,bHe,nf,N3,v0e,ek,hzr,F0e,pzr,vHe,br,ok,_zr,sf,uzr,voe,bzr,vzr,Foe,Fzr,Tzr,Mzr,rk,Ezr,T0e,Czr,wzr,Azr,Jt,tk,Lzr,M0e,yzr,xzr,lf,$zr,E0e,kzr,Szr,Toe,Rzr,Pzr,Bzr,q3,Izr,Wr,ak,Nzr,C0e,qzr,jzr,Ln,Dzr,w0e,Gzr,Ozr,A0e,Vzr,Xzr,L0e,zzr,Wzr,Qzr,oe,j3,y0e,Hzr,Uzr,Moe,Jzr,Yzr,Kzr,D3,x0e,Zzr,eWr,Eoe,oWr,rWr,tWr,G3,$0e,aWr,nWr,Coe,sWr,lWr,iWr,O3,k0e,dWr,cWr,woe,fWr,mWr,gWr,V3,S0e,hWr,pWr,Aoe,_Wr,uWr,bWr,X3,R0e,vWr,FWr,Loe,TWr,MWr,EWr,z3,P0e,CWr,wWr,yoe,AWr,LWr,yWr,W3,B0e,xWr,$Wr,xoe,kWr,SWr,RWr,Q3,I0e,PWr,BWr,$oe,IWr,NWr,qWr,H3,N0e,jWr,DWr,koe,GWr,OWr,VWr,U3,q0e,XWr,zWr,Soe,WWr,QWr,HWr,J3,j0e,UWr,JWr,Roe,YWr,KWr,ZWr,Y3,D0e,eQr,oQr,Poe,rQr,tQr,aQr,K3,G0e,nQr,sQr,Boe,lQr,iQr,dQr,Z3,O0e,cQr,fQr,Ioe,mQr,gQr,hQr,e0,V0e,pQr,_Qr,Noe,uQr,bQr,vQr,o0,X0e,FQr,TQr,qoe,MQr,EQr,CQr,r0,z0e,wQr,AQr,joe,LQr,yQr,xQr,t0,W0e,$Qr,kQr,Doe,SQr,RQr,PQr,a0,Q0e,BQr,IQr,Goe,NQr,qQr,jQr,n0,H0e,DQr,GQr,Ooe,OQr,VQr,XQr,s0,U0e,zQr,WQr,Voe,QQr,HQr,UQr,l0,J0e,JQr,YQr,Xoe,KQr,ZQr,eHr,i0,Y0e,oHr,rHr,zoe,tHr,aHr,nHr,d0,K0e,sHr,lHr,Woe,iHr,dHr,cHr,c0,Z0e,fHr,mHr,Qoe,gHr,hHr,pHr,f0,ewe,_Hr,uHr,Hoe,bHr,vHr,FHr,m0,FHe,df,g0,owe,nk,THr,rwe,MHr,THe,vr,sk,EHr,cf,CHr,Uoe,wHr,AHr,Joe,LHr,yHr,xHr,lk,$Hr,twe,kHr,SHr,RHr,Yt,ik,PHr,awe,BHr,IHr,ff,NHr,nwe,qHr,jHr,Yoe,DHr,GHr,OHr,h0,VHr,Qr,dk,XHr,swe,zHr,WHr,yn,QHr,lwe,HHr,UHr,iwe,JHr,YHr,dwe,KHr,ZHr,eUr,xe,p0,cwe,oUr,rUr,Koe,tUr,aUr,nUr,_0,fwe,sUr,lUr,Zoe,iUr,dUr,cUr,u0,mwe,fUr,mUr,ere,gUr,hUr,pUr,b0,gwe,_Ur,uUr,ore,bUr,vUr,FUr,v0,hwe,TUr,MUr,rre,EUr,CUr,wUr,F0,pwe,AUr,LUr,tre,yUr,xUr,$Ur,T0,_we,kUr,SUr,are,RUr,PUr,BUr,M0,uwe,IUr,NUr,nre,qUr,jUr,DUr,E0,bwe,GUr,OUr,sre,VUr,XUr,zUr,C0,vwe,WUr,QUr,lre,HUr,UUr,JUr,w0,MHe,mf,A0,Fwe,ck,YUr,Twe,KUr,EHe,Fr,fk,ZUr,gf,eJr,ire,oJr,rJr,dre,tJr,aJr,nJr,mk,sJr,Mwe,lJr,iJr,dJr,Kt,gk,cJr,Ewe,fJr,mJr,hf,gJr,Cwe,hJr,pJr,cre,_Jr,uJr,bJr,L0,vJr,Hr,hk,FJr,wwe,TJr,MJr,xn,EJr,Awe,CJr,wJr,Lwe,AJr,LJr,ywe,yJr,xJr,$Jr,Ee,y0,xwe,kJr,SJr,fre,RJr,PJr,BJr,x0,$we,IJr,NJr,mre,qJr,jJr,DJr,$0,kwe,GJr,OJr,gre,VJr,XJr,zJr,k0,Swe,WJr,QJr,hre,HJr,UJr,JJr,S0,Rwe,YJr,KJr,pre,ZJr,eYr,oYr,R0,Pwe,rYr,tYr,_re,aYr,nYr,sYr,P0,Bwe,lYr,iYr,ure,dYr,cYr,fYr,B0,Iwe,mYr,gYr,bre,hYr,pYr,_Yr,I0,Nwe,uYr,bYr,vre,vYr,FYr,TYr,N0,qwe,MYr,EYr,Fre,CYr,wYr,AYr,q0,jwe,LYr,yYr,Tre,xYr,$Yr,kYr,j0,Dwe,SYr,RYr,Mre,PYr,BYr,IYr,D0,Gwe,NYr,qYr,Ere,jYr,DYr,GYr,G0,CHe,pf,O0,Owe,pk,OYr,Vwe,VYr,wHe,Tr,_k,XYr,_f,zYr,Cre,WYr,QYr,wre,HYr,UYr,JYr,uk,YYr,Xwe,KYr,ZYr,eKr,Zt,bk,oKr,zwe,rKr,tKr,uf,aKr,Wwe,nKr,sKr,Are,lKr,iKr,dKr,V0,cKr,Ur,vk,fKr,Qwe,mKr,gKr,$n,hKr,Hwe,pKr,_Kr,Uwe,uKr,bKr,Jwe,vKr,FKr,TKr,$e,X0,Ywe,MKr,EKr,Lre,CKr,wKr,AKr,z0,Kwe,LKr,yKr,yre,xKr,$Kr,kKr,W0,Zwe,SKr,RKr,xre,PKr,BKr,IKr,Q0,e6e,NKr,qKr,$re,jKr,DKr,GKr,H0,o6e,OKr,VKr,kre,XKr,zKr,WKr,U0,r6e,QKr,HKr,Sre,UKr,JKr,YKr,J0,t6e,KKr,ZKr,Rre,eZr,oZr,rZr,Y0,a6e,tZr,aZr,Pre,nZr,sZr,lZr,K0,n6e,iZr,dZr,Bre,cZr,fZr,mZr,Z0,s6e,gZr,hZr,Ire,pZr,_Zr,uZr,ew,AHe,bf,ow,l6e,Fk,bZr,i6e,vZr,LHe,Mr,Tk,FZr,vf,TZr,Nre,MZr,EZr,qre,CZr,wZr,AZr,Mk,LZr,d6e,yZr,xZr,$Zr,ea,Ek,kZr,c6e,SZr,RZr,Ff,PZr,f6e,BZr,IZr,jre,NZr,qZr,jZr,rw,DZr,Jr,Ck,GZr,m6e,OZr,VZr,kn,XZr,g6e,zZr,WZr,h6e,QZr,HZr,p6e,UZr,JZr,YZr,ke,tw,_6e,KZr,ZZr,Dre,eet,oet,ret,aw,u6e,tet,aet,Gre,net,set,iet,nw,b6e,det,cet,Ore,fet,met,get,sw,v6e,het,pet,Vre,_et,uet,bet,lw,F6e,vet,Fet,Xre,Tet,Met,Eet,iw,T6e,Cet,wet,zre,Aet,Let,yet,dw,M6e,xet,$et,Wre,ket,Set,Ret,cw,E6e,Pet,Bet,Qre,Iet,Net,qet,fw,C6e,jet,Det,Hre,Get,Oet,Vet,mw,w6e,Xet,zet,Ure,Wet,Qet,Het,gw,yHe,Tf,hw,A6e,wk,Uet,L6e,Jet,xHe,Er,Ak,Yet,Mf,Ket,Jre,Zet,eot,Yre,oot,rot,tot,Lk,aot,y6e,not,sot,lot,oa,yk,iot,x6e,dot,cot,Ef,fot,$6e,mot,got,Kre,hot,pot,_ot,pw,uot,Yr,xk,bot,k6e,vot,Fot,Sn,Tot,S6e,Mot,Eot,R6e,Cot,wot,P6e,Aot,Lot,yot,Se,_w,B6e,xot,$ot,Zre,kot,Sot,Rot,uw,I6e,Pot,Bot,ete,Iot,Not,qot,bw,N6e,jot,Dot,ote,Got,Oot,Vot,vw,q6e,Xot,zot,rte,Wot,Qot,Hot,Fw,j6e,Uot,Jot,tte,Yot,Kot,Zot,Tw,D6e,ert,ort,ate,rrt,trt,art,Mw,G6e,nrt,srt,nte,lrt,irt,drt,Ew,O6e,crt,frt,ste,mrt,grt,hrt,Cw,V6e,prt,_rt,lte,urt,brt,vrt,ww,X6e,Frt,Trt,ite,Mrt,Ert,Crt,Aw,$He,Cf,Lw,z6e,$k,wrt,W6e,Art,kHe,Cr,kk,Lrt,wf,yrt,dte,xrt,$rt,cte,krt,Srt,Rrt,Sk,Prt,Q6e,Brt,Irt,Nrt,ra,Rk,qrt,H6e,jrt,Drt,Af,Grt,U6e,Ort,Vrt,fte,Xrt,zrt,Wrt,yw,Qrt,Kr,Pk,Hrt,J6e,Urt,Jrt,Rn,Yrt,Y6e,Krt,Zrt,K6e,ett,ott,Z6e,rtt,ttt,att,Re,xw,eAe,ntt,stt,mte,ltt,itt,dtt,$w,oAe,ctt,ftt,gte,mtt,gtt,htt,kw,rAe,ptt,_tt,hte,utt,btt,vtt,Sw,tAe,Ftt,Ttt,pte,Mtt,Ett,Ctt,Rw,aAe,wtt,Att,_te,Ltt,ytt,xtt,Pw,nAe,$tt,ktt,ute,Stt,Rtt,Ptt,Bw,sAe,Btt,Itt,bte,Ntt,qtt,jtt,Iw,lAe,Dtt,Gtt,vte,Ott,Vtt,Xtt,Nw,iAe,ztt,Wtt,Fte,Qtt,Htt,Utt,qw,dAe,Jtt,Ytt,Tte,Ktt,Ztt,eat,jw,SHe,Lf,Dw,cAe,Bk,oat,fAe,rat,RHe,wr,Ik,tat,yf,aat,Mte,nat,sat,Ete,lat,iat,dat,Nk,cat,mAe,fat,mat,gat,ta,qk,hat,gAe,pat,_at,xf,uat,hAe,bat,vat,Cte,Fat,Tat,Mat,Gw,Eat,Zr,jk,Cat,pAe,wat,Aat,Pn,Lat,_Ae,yat,xat,uAe,$at,kat,bAe,Sat,Rat,Pat,Xe,Ow,vAe,Bat,Iat,wte,Nat,qat,jat,Vw,FAe,Dat,Gat,Ate,Oat,Vat,Xat,Xw,TAe,zat,Wat,Lte,Qat,Hat,Uat,zw,MAe,Jat,Yat,yte,Kat,Zat,ent,Ww,EAe,ont,rnt,xte,tnt,ant,nnt,Qw,CAe,snt,lnt,$te,int,dnt,cnt,Hw,wAe,fnt,mnt,kte,gnt,hnt,pnt,Uw,AAe,_nt,unt,Ste,bnt,vnt,Fnt,Jw,PHe,$f,Yw,LAe,Dk,Tnt,yAe,Mnt,BHe,Ar,Gk,Ent,kf,Cnt,Rte,wnt,Ant,Pte,Lnt,ynt,xnt,Ok,$nt,xAe,knt,Snt,Rnt,aa,Vk,Pnt,$Ae,Bnt,Int,Sf,Nnt,kAe,qnt,jnt,Bte,Dnt,Gnt,Ont,Kw,Vnt,et,Xk,Xnt,SAe,znt,Wnt,Bn,Qnt,RAe,Hnt,Unt,PAe,Jnt,Ynt,BAe,Knt,Znt,est,ze,Zw,IAe,ost,rst,Ite,tst,ast,nst,e6,NAe,sst,lst,Nte,ist,dst,cst,o6,qAe,fst,mst,qte,gst,hst,pst,r6,jAe,_st,ust,jte,bst,vst,Fst,t6,DAe,Tst,Mst,Dte,Est,Cst,wst,a6,GAe,Ast,Lst,Gte,yst,xst,$st,n6,OAe,kst,Sst,Ote,Rst,Pst,Bst,s6,VAe,Ist,Nst,Vte,qst,jst,Dst,l6,IHe,Rf,i6,XAe,zk,Gst,zAe,Ost,NHe,Lr,Wk,Vst,Pf,Xst,Xte,zst,Wst,zte,Qst,Hst,Ust,Qk,Jst,WAe,Yst,Kst,Zst,na,Hk,elt,QAe,olt,rlt,Bf,tlt,HAe,alt,nlt,Wte,slt,llt,ilt,d6,dlt,ot,Uk,clt,UAe,flt,mlt,In,glt,JAe,hlt,plt,YAe,_lt,ult,KAe,blt,vlt,Flt,ZAe,c6,e7e,Tlt,Mlt,Qte,Elt,Clt,wlt,f6,qHe,If,m6,o7e,Jk,Alt,r7e,Llt,jHe,yr,Yk,ylt,Nf,xlt,Hte,$lt,klt,Ute,Slt,Rlt,Plt,Kk,Blt,t7e,Ilt,Nlt,qlt,sa,Zk,jlt,a7e,Dlt,Glt,qf,Olt,n7e,Vlt,Xlt,Jte,zlt,Wlt,Qlt,g6,Hlt,rt,eS,Ult,s7e,Jlt,Ylt,Nn,Klt,l7e,Zlt,eit,i7e,oit,rit,d7e,tit,ait,nit,oS,h6,c7e,sit,lit,Yte,iit,dit,cit,p6,f7e,fit,mit,Kte,git,hit,pit,_6,DHe,jf,u6,m7e,rS,_it,g7e,uit,GHe,xr,tS,bit,Df,vit,Zte,Fit,Tit,eae,Mit,Eit,Cit,aS,wit,h7e,Ait,Lit,yit,la,nS,xit,p7e,$it,kit,Gf,Sit,_7e,Rit,Pit,oae,Bit,Iit,Nit,b6,qit,tt,sS,jit,u7e,Dit,Git,qn,Oit,b7e,Vit,Xit,v7e,zit,Wit,F7e,Qit,Hit,Uit,T7e,v6,M7e,Jit,Yit,rae,Kit,Zit,edt,F6,OHe;return d=new re({}),Ia=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),W7=new re({}),Q7=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Jf=new odt({props:{warning:!0,$$slots:{default:[HZt]},$$scope:{ctx:$}}}),H7=new re({}),U7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/configuration_auto.py#L620"}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/configuration_auto.py#L643"}}),fh=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[UZt]},$$scope:{ctx:$}}}),Z7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/configuration_auto.py#L766"}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/tokenization_auto.py#L411"}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18529/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/tokenization_auto.py#L425"}}),Qh=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[JZt]},$$scope:{ctx:$}}}),nL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/tokenization_auto.py#L624"}}),sL=new re({}),lL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/feature_extraction_auto.py#L198"}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18529/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/feature_extraction_auto.py#L212"}}),Rp=new odt({props:{$$slots:{default:[YZt]},$$scope:{ctx:$}}}),Pp=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[KZt]},$$scope:{ctx:$}}}),fL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/feature_extraction_auto.py#L339"}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/processing_auto.py#L90"}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/processing_auto.py#L104"}}),r_=new odt({props:{$$slots:{default:[ZZt]},$$scope:{ctx:$}}}),t_=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[eea]},$$scope:{ctx:$}}}),uL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/processing_auto.py#L257"}}),bL=new re({}),vL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L807"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),s_=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[oea]},$$scope:{ctx:$}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[rea]},$$scope:{ctx:$}}}),EL=new re({}),CL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L814"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[tea]},$$scope:{ctx:$}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[aea]},$$scope:{ctx:$}}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L829"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[nea]},$$scope:{ctx:$}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),ob=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[sea]},$$scope:{ctx:$}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L836"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),tb=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[lea]},$$scope:{ctx:$}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iea]},$$scope:{ctx:$}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L843"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dea]},$$scope:{ctx:$}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cea]},$$scope:{ctx:$}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L852"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[fea]},$$scope:{ctx:$}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mea]},$$scope:{ctx:$}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L897"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[gea]},$$scope:{ctx:$}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hea]},$$scope:{ctx:$}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L904"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pea]},$$scope:{ctx:$}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_ea]},$$scope:{ctx:$}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L890"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[uea]},$$scope:{ctx:$}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bea]},$$scope:{ctx:$}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L861"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vea]},$$scope:{ctx:$}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fea]},$$scope:{ctx:$}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L868"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Tea]},$$scope:{ctx:$}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Mea]},$$scope:{ctx:$}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L913"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Eea]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),i8=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Cea]},$$scope:{ctx:$}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L952"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),c8=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[wea]},$$scope:{ctx:$}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),g8=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Aea]},$$scope:{ctx:$}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L959"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Lea]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yea]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L879"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xea]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),E8=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$ea]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L966"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),w8=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kea]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Sea]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L989"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Rea]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Pea]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L973"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),Q8=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Bea]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),n9=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Iea]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L980"}}),tx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),l9=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Nea]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qea]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L998"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jea]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),F9=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Dea]},$$scope:{ctx:$}}}),fx=new re({}),mx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L1005"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),M9=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Gea]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),y9=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Oea]},$$scope:{ctx:$}}}),_x=new re({}),ux=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L945"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),$9=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Vea]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),P9=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Xea]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L920"}}),wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),I9=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zea]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),j9=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Wea]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L927"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),G9=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Qea]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),H9=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Hea]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_auto.py#L936"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),J9=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Uea]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),Z9=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Jea]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Yea]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Kea]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Zea]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eoa]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ooa]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[roa]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18529/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[toa]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aoa]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[noa]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[soa]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),f$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[loa]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ioa]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),_$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[doa]},$$scope:{ctx:$}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[coa]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),T$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[foa]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[moa]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),A$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[goa]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hoa]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),S$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[poa]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[_oa]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),N$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[uoa]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[boa]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),O$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[voa]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Foa]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Toa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),S3=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Moa]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),K$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Eoa]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Coa]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[woa]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Aoa]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Loa]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yoa]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xoa]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$oa]},$$scope:{ctx:$}}}),pk=new re({}),_k=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[koa]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Soa]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Roa]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Poa]},$$scope:{ctx:$}}}),wk=new re({}),Ak=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Boa]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ioa]},$$scope:{ctx:$}}}),$k=new re({}),kk=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Noa]},$$scope:{ctx:$}}}),Pk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qoa]},$$scope:{ctx:$}}}),Bk=new re({}),Ik=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),qk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[joa]},$$scope:{ctx:$}}}),jk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Doa]},$$scope:{ctx:$}}}),Dk=new re({}),Gk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),Vk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Goa]},$$scope:{ctx:$}}}),Xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ooa]},$$scope:{ctx:$}}}),zk=new re({}),Wk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Hk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Voa]},$$scope:{ctx:$}}}),Uk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Xoa]},$$scope:{ctx:$}}}),Jk=new re({}),Yk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),Zk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zoa]},$$scope:{ctx:$}}}),eS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),_6=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Woa]},$$scope:{ctx:$}}}),rS=new re({}),tS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),nS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L389"}}),b6=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Qoa]},$$scope:{ctx:$}}}),sS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18529/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18529/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18529/src/transformers/models/auto/auto_factory.py#L417"}}),F6=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Hoa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Ii=o("Auto Classes"),zf=l(),dt=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),qi=a("code"),O7=o("from_pretrained()"),Wf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),ji=o("Instantiating one of "),Dn=a("a"),V7=o("AutoConfig"),Gn=o(", "),On=a("a"),X7=o("AutoModel"),Di=o(`, and
`),Vn=a("a"),z7=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),Qf=l(),F(Ia.$$.fragment),He=l(),Ae=a("p"),$R=o("will create a model that is an instance of "),Oi=a("a"),kR=o("BertModel"),SR=o("."),Lo=l(),Na=a("p"),RR=o("There is one class of "),Hf=a("code"),PR=o("AutoModel"),eYe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BWe=l(),Vi=a("h2"),Uf=a("a"),Kne=a("span"),F(W7.$$.fragment),oYe=l(),Zne=a("span"),rYe=o("Extending the Auto Classes"),IWe=l(),Xn=a("p"),tYe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ese=a("code"),aYe=o("NewModel"),nYe=o(", make sure you have a "),ose=a("code"),sYe=o("NewModelConfig"),lYe=o(` then you can add those to the auto
classes like this:`),NWe=l(),F(Q7.$$.fragment),qWe=l(),BR=a("p"),iYe=o("You will then be able to use the auto classes like you would usually do!"),jWe=l(),F(Jf.$$.fragment),DWe=l(),Xi=a("h2"),Yf=a("a"),rse=a("span"),F(H7.$$.fragment),dYe=l(),tse=a("span"),cYe=o("AutoConfig"),GWe=l(),yo=a("div"),F(U7.$$.fragment),fYe=l(),J7=a("p"),mYe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),IR=a("a"),gYe=o("from_pretrained()"),hYe=o(" class method."),pYe=l(),Y7=a("p"),_Ye=o("This class cannot be instantiated directly using "),ase=a("code"),uYe=o("__init__()"),bYe=o(" (throws an error)."),vYe=l(),$r=a("div"),F(K7.$$.fragment),FYe=l(),nse=a("p"),TYe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MYe=l(),zi=a("p"),EYe=o("The configuration class to instantiate is selected based on the "),sse=a("code"),CYe=o("model_type"),wYe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lse=a("code"),AYe=o("pretrained_model_name_or_path"),LYe=o(":"),yYe=l(),A=a("ul"),Kf=a("li"),ise=a("strong"),xYe=o("albert"),$Ye=o(" \u2014 "),NR=a("a"),kYe=o("AlbertConfig"),SYe=o(" (ALBERT model)"),RYe=l(),Zf=a("li"),dse=a("strong"),PYe=o("bart"),BYe=o(" \u2014 "),qR=a("a"),IYe=o("BartConfig"),NYe=o(" (BART model)"),qYe=l(),em=a("li"),cse=a("strong"),jYe=o("beit"),DYe=o(" \u2014 "),jR=a("a"),GYe=o("BeitConfig"),OYe=o(" (BEiT model)"),VYe=l(),om=a("li"),fse=a("strong"),XYe=o("bert"),zYe=o(" \u2014 "),DR=a("a"),WYe=o("BertConfig"),QYe=o(" (BERT model)"),HYe=l(),rm=a("li"),mse=a("strong"),UYe=o("bert-generation"),JYe=o(" \u2014 "),GR=a("a"),YYe=o("BertGenerationConfig"),KYe=o(" (Bert Generation model)"),ZYe=l(),tm=a("li"),gse=a("strong"),eKe=o("big_bird"),oKe=o(" \u2014 "),OR=a("a"),rKe=o("BigBirdConfig"),tKe=o(" (BigBird model)"),aKe=l(),am=a("li"),hse=a("strong"),nKe=o("bigbird_pegasus"),sKe=o(" \u2014 "),VR=a("a"),lKe=o("BigBirdPegasusConfig"),iKe=o(" (BigBird-Pegasus model)"),dKe=l(),nm=a("li"),pse=a("strong"),cKe=o("blenderbot"),fKe=o(" \u2014 "),XR=a("a"),mKe=o("BlenderbotConfig"),gKe=o(" (Blenderbot model)"),hKe=l(),sm=a("li"),_se=a("strong"),pKe=o("blenderbot-small"),_Ke=o(" \u2014 "),zR=a("a"),uKe=o("BlenderbotSmallConfig"),bKe=o(" (BlenderbotSmall model)"),vKe=l(),lm=a("li"),use=a("strong"),FKe=o("bloom"),TKe=o(" \u2014 "),WR=a("a"),MKe=o("BloomConfig"),EKe=o(" (BLOOM model)"),CKe=l(),im=a("li"),bse=a("strong"),wKe=o("camembert"),AKe=o(" \u2014 "),QR=a("a"),LKe=o("CamembertConfig"),yKe=o(" (CamemBERT model)"),xKe=l(),dm=a("li"),vse=a("strong"),$Ke=o("canine"),kKe=o(" \u2014 "),HR=a("a"),SKe=o("CanineConfig"),RKe=o(" (CANINE model)"),PKe=l(),cm=a("li"),Fse=a("strong"),BKe=o("clip"),IKe=o(" \u2014 "),UR=a("a"),NKe=o("CLIPConfig"),qKe=o(" (CLIP model)"),jKe=l(),fm=a("li"),Tse=a("strong"),DKe=o("codegen"),GKe=o(" \u2014 "),JR=a("a"),OKe=o("CodeGenConfig"),VKe=o(" (CodeGen model)"),XKe=l(),mm=a("li"),Mse=a("strong"),zKe=o("convbert"),WKe=o(" \u2014 "),YR=a("a"),QKe=o("ConvBertConfig"),HKe=o(" (ConvBERT model)"),UKe=l(),gm=a("li"),Ese=a("strong"),JKe=o("convnext"),YKe=o(" \u2014 "),KR=a("a"),KKe=o("ConvNextConfig"),ZKe=o(" (ConvNeXT model)"),eZe=l(),hm=a("li"),Cse=a("strong"),oZe=o("ctrl"),rZe=o(" \u2014 "),ZR=a("a"),tZe=o("CTRLConfig"),aZe=o(" (CTRL model)"),nZe=l(),pm=a("li"),wse=a("strong"),sZe=o("cvt"),lZe=o(" \u2014 "),eP=a("a"),iZe=o("CvtConfig"),dZe=o(" (CvT model)"),cZe=l(),_m=a("li"),Ase=a("strong"),fZe=o("data2vec-audio"),mZe=o(" \u2014 "),oP=a("a"),gZe=o("Data2VecAudioConfig"),hZe=o(" (Data2VecAudio model)"),pZe=l(),um=a("li"),Lse=a("strong"),_Ze=o("data2vec-text"),uZe=o(" \u2014 "),rP=a("a"),bZe=o("Data2VecTextConfig"),vZe=o(" (Data2VecText model)"),FZe=l(),bm=a("li"),yse=a("strong"),TZe=o("data2vec-vision"),MZe=o(" \u2014 "),tP=a("a"),EZe=o("Data2VecVisionConfig"),CZe=o(" (Data2VecVision model)"),wZe=l(),vm=a("li"),xse=a("strong"),AZe=o("deberta"),LZe=o(" \u2014 "),aP=a("a"),yZe=o("DebertaConfig"),xZe=o(" (DeBERTa model)"),$Ze=l(),Fm=a("li"),$se=a("strong"),kZe=o("deberta-v2"),SZe=o(" \u2014 "),nP=a("a"),RZe=o("DebertaV2Config"),PZe=o(" (DeBERTa-v2 model)"),BZe=l(),Tm=a("li"),kse=a("strong"),IZe=o("decision_transformer"),NZe=o(" \u2014 "),sP=a("a"),qZe=o("DecisionTransformerConfig"),jZe=o(" (Decision Transformer model)"),DZe=l(),Mm=a("li"),Sse=a("strong"),GZe=o("deit"),OZe=o(" \u2014 "),lP=a("a"),VZe=o("DeiTConfig"),XZe=o(" (DeiT model)"),zZe=l(),Em=a("li"),Rse=a("strong"),WZe=o("detr"),QZe=o(" \u2014 "),iP=a("a"),HZe=o("DetrConfig"),UZe=o(" (DETR model)"),JZe=l(),Cm=a("li"),Pse=a("strong"),YZe=o("distilbert"),KZe=o(" \u2014 "),dP=a("a"),ZZe=o("DistilBertConfig"),eeo=o(" (DistilBERT model)"),oeo=l(),wm=a("li"),Bse=a("strong"),reo=o("dpr"),teo=o(" \u2014 "),cP=a("a"),aeo=o("DPRConfig"),neo=o(" (DPR model)"),seo=l(),Am=a("li"),Ise=a("strong"),leo=o("dpt"),ieo=o(" \u2014 "),fP=a("a"),deo=o("DPTConfig"),ceo=o(" (DPT model)"),feo=l(),Lm=a("li"),Nse=a("strong"),meo=o("electra"),geo=o(" \u2014 "),mP=a("a"),heo=o("ElectraConfig"),peo=o(" (ELECTRA model)"),_eo=l(),ym=a("li"),qse=a("strong"),ueo=o("encoder-decoder"),beo=o(" \u2014 "),gP=a("a"),veo=o("EncoderDecoderConfig"),Feo=o(" (Encoder decoder model)"),Teo=l(),xm=a("li"),jse=a("strong"),Meo=o("flaubert"),Eeo=o(" \u2014 "),hP=a("a"),Ceo=o("FlaubertConfig"),weo=o(" (FlauBERT model)"),Aeo=l(),$m=a("li"),Dse=a("strong"),Leo=o("flava"),yeo=o(" \u2014 "),pP=a("a"),xeo=o("FlavaConfig"),$eo=o(" (FLAVA model)"),keo=l(),km=a("li"),Gse=a("strong"),Seo=o("fnet"),Reo=o(" \u2014 "),_P=a("a"),Peo=o("FNetConfig"),Beo=o(" (FNet model)"),Ieo=l(),Sm=a("li"),Ose=a("strong"),Neo=o("fsmt"),qeo=o(" \u2014 "),uP=a("a"),jeo=o("FSMTConfig"),Deo=o(" (FairSeq Machine-Translation model)"),Geo=l(),Rm=a("li"),Vse=a("strong"),Oeo=o("funnel"),Veo=o(" \u2014 "),bP=a("a"),Xeo=o("FunnelConfig"),zeo=o(" (Funnel Transformer model)"),Weo=l(),Pm=a("li"),Xse=a("strong"),Qeo=o("glpn"),Heo=o(" \u2014 "),vP=a("a"),Ueo=o("GLPNConfig"),Jeo=o(" (GLPN model)"),Yeo=l(),Bm=a("li"),zse=a("strong"),Keo=o("gpt2"),Zeo=o(" \u2014 "),FP=a("a"),eoo=o("GPT2Config"),ooo=o(" (OpenAI GPT-2 model)"),roo=l(),Im=a("li"),Wse=a("strong"),too=o("gpt_neo"),aoo=o(" \u2014 "),TP=a("a"),noo=o("GPTNeoConfig"),soo=o(" (GPT Neo model)"),loo=l(),Nm=a("li"),Qse=a("strong"),ioo=o("gpt_neox"),doo=o(" \u2014 "),MP=a("a"),coo=o("GPTNeoXConfig"),foo=o(" (GPT NeoX model)"),moo=l(),qm=a("li"),Hse=a("strong"),goo=o("gptj"),hoo=o(" \u2014 "),EP=a("a"),poo=o("GPTJConfig"),_oo=o(" (GPT-J model)"),uoo=l(),jm=a("li"),Use=a("strong"),boo=o("groupvit"),voo=o(" \u2014 "),CP=a("a"),Foo=o("GroupViTConfig"),Too=o(" (GroupViT model)"),Moo=l(),Dm=a("li"),Jse=a("strong"),Eoo=o("hubert"),Coo=o(" \u2014 "),wP=a("a"),woo=o("HubertConfig"),Aoo=o(" (Hubert model)"),Loo=l(),Gm=a("li"),Yse=a("strong"),yoo=o("ibert"),xoo=o(" \u2014 "),AP=a("a"),$oo=o("IBertConfig"),koo=o(" (I-BERT model)"),Soo=l(),Om=a("li"),Kse=a("strong"),Roo=o("imagegpt"),Poo=o(" \u2014 "),LP=a("a"),Boo=o("ImageGPTConfig"),Ioo=o(" (ImageGPT model)"),Noo=l(),Vm=a("li"),Zse=a("strong"),qoo=o("layoutlm"),joo=o(" \u2014 "),yP=a("a"),Doo=o("LayoutLMConfig"),Goo=o(" (LayoutLM model)"),Ooo=l(),Xm=a("li"),ele=a("strong"),Voo=o("layoutlmv2"),Xoo=o(" \u2014 "),xP=a("a"),zoo=o("LayoutLMv2Config"),Woo=o(" (LayoutLMv2 model)"),Qoo=l(),zm=a("li"),ole=a("strong"),Hoo=o("layoutlmv3"),Uoo=o(" \u2014 "),$P=a("a"),Joo=o("LayoutLMv3Config"),Yoo=o(" (LayoutLMv3 model)"),Koo=l(),Wm=a("li"),rle=a("strong"),Zoo=o("led"),ero=o(" \u2014 "),kP=a("a"),oro=o("LEDConfig"),rro=o(" (LED model)"),tro=l(),Qm=a("li"),tle=a("strong"),aro=o("levit"),nro=o(" \u2014 "),SP=a("a"),sro=o("LevitConfig"),lro=o(" (LeViT model)"),iro=l(),Hm=a("li"),ale=a("strong"),dro=o("longformer"),cro=o(" \u2014 "),RP=a("a"),fro=o("LongformerConfig"),mro=o(" (Longformer model)"),gro=l(),Um=a("li"),nle=a("strong"),hro=o("longt5"),pro=o(" \u2014 "),PP=a("a"),_ro=o("LongT5Config"),uro=o(" (LongT5 model)"),bro=l(),Jm=a("li"),sle=a("strong"),vro=o("luke"),Fro=o(" \u2014 "),BP=a("a"),Tro=o("LukeConfig"),Mro=o(" (LUKE model)"),Ero=l(),Ym=a("li"),lle=a("strong"),Cro=o("lxmert"),wro=o(" \u2014 "),IP=a("a"),Aro=o("LxmertConfig"),Lro=o(" (LXMERT model)"),yro=l(),Km=a("li"),ile=a("strong"),xro=o("m2m_100"),$ro=o(" \u2014 "),NP=a("a"),kro=o("M2M100Config"),Sro=o(" (M2M100 model)"),Rro=l(),Zm=a("li"),dle=a("strong"),Pro=o("marian"),Bro=o(" \u2014 "),qP=a("a"),Iro=o("MarianConfig"),Nro=o(" (Marian model)"),qro=l(),eg=a("li"),cle=a("strong"),jro=o("maskformer"),Dro=o(" \u2014 "),jP=a("a"),Gro=o("MaskFormerConfig"),Oro=o(" (MaskFormer model)"),Vro=l(),og=a("li"),fle=a("strong"),Xro=o("mbart"),zro=o(" \u2014 "),DP=a("a"),Wro=o("MBartConfig"),Qro=o(" (mBART model)"),Hro=l(),rg=a("li"),mle=a("strong"),Uro=o("mctct"),Jro=o(" \u2014 "),GP=a("a"),Yro=o("MCTCTConfig"),Kro=o(" (M-CTC-T model)"),Zro=l(),tg=a("li"),gle=a("strong"),eto=o("megatron-bert"),oto=o(" \u2014 "),OP=a("a"),rto=o("MegatronBertConfig"),tto=o(" (Megatron-BERT model)"),ato=l(),ag=a("li"),hle=a("strong"),nto=o("mobilebert"),sto=o(" \u2014 "),VP=a("a"),lto=o("MobileBertConfig"),ito=o(" (MobileBERT model)"),dto=l(),ng=a("li"),ple=a("strong"),cto=o("mobilevit"),fto=o(" \u2014 "),XP=a("a"),mto=o("MobileViTConfig"),gto=o(" (MobileViT model)"),hto=l(),sg=a("li"),_le=a("strong"),pto=o("mpnet"),_to=o(" \u2014 "),zP=a("a"),uto=o("MPNetConfig"),bto=o(" (MPNet model)"),vto=l(),lg=a("li"),ule=a("strong"),Fto=o("mt5"),Tto=o(" \u2014 "),WP=a("a"),Mto=o("MT5Config"),Eto=o(" (MT5 model)"),Cto=l(),ig=a("li"),ble=a("strong"),wto=o("mvp"),Ato=o(" \u2014 "),QP=a("a"),Lto=o("MvpConfig"),yto=o(" (MVP model)"),xto=l(),dg=a("li"),vle=a("strong"),$to=o("nezha"),kto=o(" \u2014 "),HP=a("a"),Sto=o("NezhaConfig"),Rto=o(" (Nezha model)"),Pto=l(),cg=a("li"),Fle=a("strong"),Bto=o("nystromformer"),Ito=o(" \u2014 "),UP=a("a"),Nto=o("NystromformerConfig"),qto=o(" (Nystr\xF6mformer model)"),jto=l(),fg=a("li"),Tle=a("strong"),Dto=o("openai-gpt"),Gto=o(" \u2014 "),JP=a("a"),Oto=o("OpenAIGPTConfig"),Vto=o(" (OpenAI GPT model)"),Xto=l(),mg=a("li"),Mle=a("strong"),zto=o("opt"),Wto=o(" \u2014 "),YP=a("a"),Qto=o("OPTConfig"),Hto=o(" (OPT model)"),Uto=l(),gg=a("li"),Ele=a("strong"),Jto=o("owlvit"),Yto=o(" \u2014 "),KP=a("a"),Kto=o("OwlViTConfig"),Zto=o(" (OWL-ViT model)"),eao=l(),hg=a("li"),Cle=a("strong"),oao=o("pegasus"),rao=o(" \u2014 "),ZP=a("a"),tao=o("PegasusConfig"),aao=o(" (Pegasus model)"),nao=l(),pg=a("li"),wle=a("strong"),sao=o("perceiver"),lao=o(" \u2014 "),eB=a("a"),iao=o("PerceiverConfig"),dao=o(" (Perceiver model)"),cao=l(),_g=a("li"),Ale=a("strong"),fao=o("plbart"),mao=o(" \u2014 "),oB=a("a"),gao=o("PLBartConfig"),hao=o(" (PLBart model)"),pao=l(),ug=a("li"),Lle=a("strong"),_ao=o("poolformer"),uao=o(" \u2014 "),rB=a("a"),bao=o("PoolFormerConfig"),vao=o(" (PoolFormer model)"),Fao=l(),bg=a("li"),yle=a("strong"),Tao=o("prophetnet"),Mao=o(" \u2014 "),tB=a("a"),Eao=o("ProphetNetConfig"),Cao=o(" (ProphetNet model)"),wao=l(),vg=a("li"),xle=a("strong"),Aao=o("qdqbert"),Lao=o(" \u2014 "),aB=a("a"),yao=o("QDQBertConfig"),xao=o(" (QDQBert model)"),$ao=l(),Fg=a("li"),$le=a("strong"),kao=o("rag"),Sao=o(" \u2014 "),nB=a("a"),Rao=o("RagConfig"),Pao=o(" (RAG model)"),Bao=l(),Tg=a("li"),kle=a("strong"),Iao=o("realm"),Nao=o(" \u2014 "),sB=a("a"),qao=o("RealmConfig"),jao=o(" (REALM model)"),Dao=l(),Mg=a("li"),Sle=a("strong"),Gao=o("reformer"),Oao=o(" \u2014 "),lB=a("a"),Vao=o("ReformerConfig"),Xao=o(" (Reformer model)"),zao=l(),Eg=a("li"),Rle=a("strong"),Wao=o("regnet"),Qao=o(" \u2014 "),iB=a("a"),Hao=o("RegNetConfig"),Uao=o(" (RegNet model)"),Jao=l(),Cg=a("li"),Ple=a("strong"),Yao=o("rembert"),Kao=o(" \u2014 "),dB=a("a"),Zao=o("RemBertConfig"),eno=o(" (RemBERT model)"),ono=l(),wg=a("li"),Ble=a("strong"),rno=o("resnet"),tno=o(" \u2014 "),cB=a("a"),ano=o("ResNetConfig"),nno=o(" (ResNet model)"),sno=l(),Ag=a("li"),Ile=a("strong"),lno=o("retribert"),ino=o(" \u2014 "),fB=a("a"),dno=o("RetriBertConfig"),cno=o(" (RetriBERT model)"),fno=l(),Lg=a("li"),Nle=a("strong"),mno=o("roberta"),gno=o(" \u2014 "),mB=a("a"),hno=o("RobertaConfig"),pno=o(" (RoBERTa model)"),_no=l(),yg=a("li"),qle=a("strong"),uno=o("roformer"),bno=o(" \u2014 "),gB=a("a"),vno=o("RoFormerConfig"),Fno=o(" (RoFormer model)"),Tno=l(),xg=a("li"),jle=a("strong"),Mno=o("segformer"),Eno=o(" \u2014 "),hB=a("a"),Cno=o("SegformerConfig"),wno=o(" (SegFormer model)"),Ano=l(),$g=a("li"),Dle=a("strong"),Lno=o("sew"),yno=o(" \u2014 "),pB=a("a"),xno=o("SEWConfig"),$no=o(" (SEW model)"),kno=l(),kg=a("li"),Gle=a("strong"),Sno=o("sew-d"),Rno=o(" \u2014 "),_B=a("a"),Pno=o("SEWDConfig"),Bno=o(" (SEW-D model)"),Ino=l(),Sg=a("li"),Ole=a("strong"),Nno=o("speech-encoder-decoder"),qno=o(" \u2014 "),uB=a("a"),jno=o("SpeechEncoderDecoderConfig"),Dno=o(" (Speech Encoder decoder model)"),Gno=l(),Rg=a("li"),Vle=a("strong"),Ono=o("speech_to_text"),Vno=o(" \u2014 "),bB=a("a"),Xno=o("Speech2TextConfig"),zno=o(" (Speech2Text model)"),Wno=l(),Pg=a("li"),Xle=a("strong"),Qno=o("speech_to_text_2"),Hno=o(" \u2014 "),vB=a("a"),Uno=o("Speech2Text2Config"),Jno=o(" (Speech2Text2 model)"),Yno=l(),Bg=a("li"),zle=a("strong"),Kno=o("splinter"),Zno=o(" \u2014 "),FB=a("a"),eso=o("SplinterConfig"),oso=o(" (Splinter model)"),rso=l(),Ig=a("li"),Wle=a("strong"),tso=o("squeezebert"),aso=o(" \u2014 "),TB=a("a"),nso=o("SqueezeBertConfig"),sso=o(" (SqueezeBERT model)"),lso=l(),Ng=a("li"),Qle=a("strong"),iso=o("swin"),dso=o(" \u2014 "),MB=a("a"),cso=o("SwinConfig"),fso=o(" (Swin Transformer model)"),mso=l(),qg=a("li"),Hle=a("strong"),gso=o("swinv2"),hso=o(" \u2014 "),EB=a("a"),pso=o("Swinv2Config"),_so=o(" (Swin Transformer V2 model)"),uso=l(),jg=a("li"),Ule=a("strong"),bso=o("t5"),vso=o(" \u2014 "),CB=a("a"),Fso=o("T5Config"),Tso=o(" (T5 model)"),Mso=l(),Dg=a("li"),Jle=a("strong"),Eso=o("tapas"),Cso=o(" \u2014 "),wB=a("a"),wso=o("TapasConfig"),Aso=o(" (TAPAS model)"),Lso=l(),Gg=a("li"),Yle=a("strong"),yso=o("trajectory_transformer"),xso=o(" \u2014 "),AB=a("a"),$so=o("TrajectoryTransformerConfig"),kso=o(" (Trajectory Transformer model)"),Sso=l(),Og=a("li"),Kle=a("strong"),Rso=o("transfo-xl"),Pso=o(" \u2014 "),LB=a("a"),Bso=o("TransfoXLConfig"),Iso=o(" (Transformer-XL model)"),Nso=l(),Vg=a("li"),Zle=a("strong"),qso=o("trocr"),jso=o(" \u2014 "),yB=a("a"),Dso=o("TrOCRConfig"),Gso=o(" (TrOCR model)"),Oso=l(),Xg=a("li"),eie=a("strong"),Vso=o("unispeech"),Xso=o(" \u2014 "),xB=a("a"),zso=o("UniSpeechConfig"),Wso=o(" (UniSpeech model)"),Qso=l(),zg=a("li"),oie=a("strong"),Hso=o("unispeech-sat"),Uso=o(" \u2014 "),$B=a("a"),Jso=o("UniSpeechSatConfig"),Yso=o(" (UniSpeechSat model)"),Kso=l(),Wg=a("li"),rie=a("strong"),Zso=o("van"),elo=o(" \u2014 "),kB=a("a"),olo=o("VanConfig"),rlo=o(" (VAN model)"),tlo=l(),Qg=a("li"),tie=a("strong"),alo=o("videomae"),nlo=o(" \u2014 "),SB=a("a"),slo=o("VideoMAEConfig"),llo=o(" (VideoMAE model)"),ilo=l(),Hg=a("li"),aie=a("strong"),dlo=o("vilt"),clo=o(" \u2014 "),RB=a("a"),flo=o("ViltConfig"),mlo=o(" (ViLT model)"),glo=l(),Ug=a("li"),nie=a("strong"),hlo=o("vision-encoder-decoder"),plo=o(" \u2014 "),PB=a("a"),_lo=o("VisionEncoderDecoderConfig"),ulo=o(" (Vision Encoder decoder model)"),blo=l(),Jg=a("li"),sie=a("strong"),vlo=o("vision-text-dual-encoder"),Flo=o(" \u2014 "),BB=a("a"),Tlo=o("VisionTextDualEncoderConfig"),Mlo=o(" (VisionTextDualEncoder model)"),Elo=l(),Yg=a("li"),lie=a("strong"),Clo=o("visual_bert"),wlo=o(" \u2014 "),IB=a("a"),Alo=o("VisualBertConfig"),Llo=o(" (VisualBERT model)"),ylo=l(),Kg=a("li"),iie=a("strong"),xlo=o("vit"),$lo=o(" \u2014 "),NB=a("a"),klo=o("ViTConfig"),Slo=o(" (ViT model)"),Rlo=l(),Zg=a("li"),die=a("strong"),Plo=o("vit_mae"),Blo=o(" \u2014 "),qB=a("a"),Ilo=o("ViTMAEConfig"),Nlo=o(" (ViTMAE model)"),qlo=l(),eh=a("li"),cie=a("strong"),jlo=o("wav2vec2"),Dlo=o(" \u2014 "),jB=a("a"),Glo=o("Wav2Vec2Config"),Olo=o(" (Wav2Vec2 model)"),Vlo=l(),oh=a("li"),fie=a("strong"),Xlo=o("wav2vec2-conformer"),zlo=o(" \u2014 "),DB=a("a"),Wlo=o("Wav2Vec2ConformerConfig"),Qlo=o(" (Wav2Vec2-Conformer model)"),Hlo=l(),rh=a("li"),mie=a("strong"),Ulo=o("wavlm"),Jlo=o(" \u2014 "),GB=a("a"),Ylo=o("WavLMConfig"),Klo=o(" (WavLM model)"),Zlo=l(),th=a("li"),gie=a("strong"),eio=o("xglm"),oio=o(" \u2014 "),OB=a("a"),rio=o("XGLMConfig"),tio=o(" (XGLM model)"),aio=l(),ah=a("li"),hie=a("strong"),nio=o("xlm"),sio=o(" \u2014 "),VB=a("a"),lio=o("XLMConfig"),iio=o(" (XLM model)"),dio=l(),nh=a("li"),pie=a("strong"),cio=o("xlm-prophetnet"),fio=o(" \u2014 "),XB=a("a"),mio=o("XLMProphetNetConfig"),gio=o(" (XLM-ProphetNet model)"),hio=l(),sh=a("li"),_ie=a("strong"),pio=o("xlm-roberta"),_io=o(" \u2014 "),zB=a("a"),uio=o("XLMRobertaConfig"),bio=o(" (XLM-RoBERTa model)"),vio=l(),lh=a("li"),uie=a("strong"),Fio=o("xlm-roberta-xl"),Tio=o(" \u2014 "),WB=a("a"),Mio=o("XLMRobertaXLConfig"),Eio=o(" (XLM-RoBERTa-XL model)"),Cio=l(),ih=a("li"),bie=a("strong"),wio=o("xlnet"),Aio=o(" \u2014 "),QB=a("a"),Lio=o("XLNetConfig"),yio=o(" (XLNet model)"),xio=l(),dh=a("li"),vie=a("strong"),$io=o("yolos"),kio=o(" \u2014 "),HB=a("a"),Sio=o("YolosConfig"),Rio=o(" (YOLOS model)"),Pio=l(),ch=a("li"),Fie=a("strong"),Bio=o("yoso"),Iio=o(" \u2014 "),UB=a("a"),Nio=o("YosoConfig"),qio=o(" (YOSO model)"),jio=l(),F(fh.$$.fragment),Dio=l(),mh=a("div"),F(Z7.$$.fragment),Gio=l(),Tie=a("p"),Oio=o("Register a new configuration for this class."),OWe=l(),Wi=a("h2"),gh=a("a"),Mie=a("span"),F(eL.$$.fragment),Vio=l(),Eie=a("span"),Xio=o("AutoTokenizer"),VWe=l(),xo=a("div"),F(oL.$$.fragment),zio=l(),rL=a("p"),Wio=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=a("a"),Qio=o("AutoTokenizer.from_pretrained()"),Hio=o(" class method."),Uio=l(),tL=a("p"),Jio=o("This class cannot be instantiated directly using "),Cie=a("code"),Yio=o("__init__()"),Kio=o(" (throws an error)."),Zio=l(),kr=a("div"),F(aL.$$.fragment),edo=l(),wie=a("p"),odo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rdo=l(),qa=a("p"),tdo=o("The tokenizer class to instantiate is selected based on the "),Aie=a("code"),ado=o("model_type"),ndo=o(` property of the config object (either
passed as an argument or loaded from `),Lie=a("code"),sdo=o("pretrained_model_name_or_path"),ldo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),ido=o("pretrained_model_name_or_path"),ddo=o(":"),cdo=l(),k=a("ul"),zn=a("li"),xie=a("strong"),fdo=o("albert"),mdo=o(" \u2014 "),YB=a("a"),gdo=o("AlbertTokenizer"),hdo=o(" or "),KB=a("a"),pdo=o("AlbertTokenizerFast"),_do=o(" (ALBERT model)"),udo=l(),Wn=a("li"),$ie=a("strong"),bdo=o("bart"),vdo=o(" \u2014 "),ZB=a("a"),Fdo=o("BartTokenizer"),Tdo=o(" or "),eI=a("a"),Mdo=o("BartTokenizerFast"),Edo=o(" (BART model)"),Cdo=l(),Qn=a("li"),kie=a("strong"),wdo=o("barthez"),Ado=o(" \u2014 "),oI=a("a"),Ldo=o("BarthezTokenizer"),ydo=o(" or "),rI=a("a"),xdo=o("BarthezTokenizerFast"),$do=o(" (BARThez model)"),kdo=l(),hh=a("li"),Sie=a("strong"),Sdo=o("bartpho"),Rdo=o(" \u2014 "),tI=a("a"),Pdo=o("BartphoTokenizer"),Bdo=o(" (BARTpho model)"),Ido=l(),Hn=a("li"),Rie=a("strong"),Ndo=o("bert"),qdo=o(" \u2014 "),aI=a("a"),jdo=o("BertTokenizer"),Ddo=o(" or "),nI=a("a"),Gdo=o("BertTokenizerFast"),Odo=o(" (BERT model)"),Vdo=l(),ph=a("li"),Pie=a("strong"),Xdo=o("bert-generation"),zdo=o(" \u2014 "),sI=a("a"),Wdo=o("BertGenerationTokenizer"),Qdo=o(" (Bert Generation model)"),Hdo=l(),_h=a("li"),Bie=a("strong"),Udo=o("bert-japanese"),Jdo=o(" \u2014 "),lI=a("a"),Ydo=o("BertJapaneseTokenizer"),Kdo=o(" (BertJapanese model)"),Zdo=l(),uh=a("li"),Iie=a("strong"),eco=o("bertweet"),oco=o(" \u2014 "),iI=a("a"),rco=o("BertweetTokenizer"),tco=o(" (BERTweet model)"),aco=l(),Un=a("li"),Nie=a("strong"),nco=o("big_bird"),sco=o(" \u2014 "),dI=a("a"),lco=o("BigBirdTokenizer"),ico=o(" or "),cI=a("a"),dco=o("BigBirdTokenizerFast"),cco=o(" (BigBird model)"),fco=l(),Jn=a("li"),qie=a("strong"),mco=o("bigbird_pegasus"),gco=o(" \u2014 "),fI=a("a"),hco=o("PegasusTokenizer"),pco=o(" or "),mI=a("a"),_co=o("PegasusTokenizerFast"),uco=o(" (BigBird-Pegasus model)"),bco=l(),Yn=a("li"),jie=a("strong"),vco=o("blenderbot"),Fco=o(" \u2014 "),gI=a("a"),Tco=o("BlenderbotTokenizer"),Mco=o(" or "),hI=a("a"),Eco=o("BlenderbotTokenizerFast"),Cco=o(" (Blenderbot model)"),wco=l(),bh=a("li"),Die=a("strong"),Aco=o("blenderbot-small"),Lco=o(" \u2014 "),pI=a("a"),yco=o("BlenderbotSmallTokenizer"),xco=o(" (BlenderbotSmall model)"),$co=l(),vh=a("li"),Gie=a("strong"),kco=o("bloom"),Sco=o(" \u2014 "),_I=a("a"),Rco=o("BloomTokenizerFast"),Pco=o(" (BLOOM model)"),Bco=l(),Fh=a("li"),Oie=a("strong"),Ico=o("byt5"),Nco=o(" \u2014 "),uI=a("a"),qco=o("ByT5Tokenizer"),jco=o(" (ByT5 model)"),Dco=l(),Kn=a("li"),Vie=a("strong"),Gco=o("camembert"),Oco=o(" \u2014 "),bI=a("a"),Vco=o("CamembertTokenizer"),Xco=o(" or "),vI=a("a"),zco=o("CamembertTokenizerFast"),Wco=o(" (CamemBERT model)"),Qco=l(),Th=a("li"),Xie=a("strong"),Hco=o("canine"),Uco=o(" \u2014 "),FI=a("a"),Jco=o("CanineTokenizer"),Yco=o(" (CANINE model)"),Kco=l(),Zn=a("li"),zie=a("strong"),Zco=o("clip"),efo=o(" \u2014 "),TI=a("a"),ofo=o("CLIPTokenizer"),rfo=o(" or "),MI=a("a"),tfo=o("CLIPTokenizerFast"),afo=o(" (CLIP model)"),nfo=l(),es=a("li"),Wie=a("strong"),sfo=o("codegen"),lfo=o(" \u2014 "),EI=a("a"),ifo=o("CodeGenTokenizer"),dfo=o(" or "),CI=a("a"),cfo=o("CodeGenTokenizerFast"),ffo=o(" (CodeGen model)"),mfo=l(),os=a("li"),Qie=a("strong"),gfo=o("convbert"),hfo=o(" \u2014 "),wI=a("a"),pfo=o("ConvBertTokenizer"),_fo=o(" or "),AI=a("a"),ufo=o("ConvBertTokenizerFast"),bfo=o(" (ConvBERT model)"),vfo=l(),rs=a("li"),Hie=a("strong"),Ffo=o("cpm"),Tfo=o(" \u2014 "),LI=a("a"),Mfo=o("CpmTokenizer"),Efo=o(" or "),yI=a("a"),Cfo=o("CpmTokenizerFast"),wfo=o(" (CPM model)"),Afo=l(),Mh=a("li"),Uie=a("strong"),Lfo=o("ctrl"),yfo=o(" \u2014 "),xI=a("a"),xfo=o("CTRLTokenizer"),$fo=o(" (CTRL model)"),kfo=l(),ts=a("li"),Jie=a("strong"),Sfo=o("data2vec-text"),Rfo=o(" \u2014 "),$I=a("a"),Pfo=o("RobertaTokenizer"),Bfo=o(" or "),kI=a("a"),Ifo=o("RobertaTokenizerFast"),Nfo=o(" (Data2VecText model)"),qfo=l(),as=a("li"),Yie=a("strong"),jfo=o("deberta"),Dfo=o(" \u2014 "),SI=a("a"),Gfo=o("DebertaTokenizer"),Ofo=o(" or "),RI=a("a"),Vfo=o("DebertaTokenizerFast"),Xfo=o(" (DeBERTa model)"),zfo=l(),ns=a("li"),Kie=a("strong"),Wfo=o("deberta-v2"),Qfo=o(" \u2014 "),PI=a("a"),Hfo=o("DebertaV2Tokenizer"),Ufo=o(" or "),BI=a("a"),Jfo=o("DebertaV2TokenizerFast"),Yfo=o(" (DeBERTa-v2 model)"),Kfo=l(),ss=a("li"),Zie=a("strong"),Zfo=o("distilbert"),emo=o(" \u2014 "),II=a("a"),omo=o("DistilBertTokenizer"),rmo=o(" or "),NI=a("a"),tmo=o("DistilBertTokenizerFast"),amo=o(" (DistilBERT model)"),nmo=l(),ls=a("li"),ede=a("strong"),smo=o("dpr"),lmo=o(" \u2014 "),qI=a("a"),imo=o("DPRQuestionEncoderTokenizer"),dmo=o(" or "),jI=a("a"),cmo=o("DPRQuestionEncoderTokenizerFast"),fmo=o(" (DPR model)"),mmo=l(),is=a("li"),ode=a("strong"),gmo=o("electra"),hmo=o(" \u2014 "),DI=a("a"),pmo=o("ElectraTokenizer"),_mo=o(" or "),GI=a("a"),umo=o("ElectraTokenizerFast"),bmo=o(" (ELECTRA model)"),vmo=l(),Eh=a("li"),rde=a("strong"),Fmo=o("flaubert"),Tmo=o(" \u2014 "),OI=a("a"),Mmo=o("FlaubertTokenizer"),Emo=o(" (FlauBERT model)"),Cmo=l(),ds=a("li"),tde=a("strong"),wmo=o("fnet"),Amo=o(" \u2014 "),VI=a("a"),Lmo=o("FNetTokenizer"),ymo=o(" or "),XI=a("a"),xmo=o("FNetTokenizerFast"),$mo=o(" (FNet model)"),kmo=l(),Ch=a("li"),ade=a("strong"),Smo=o("fsmt"),Rmo=o(" \u2014 "),zI=a("a"),Pmo=o("FSMTTokenizer"),Bmo=o(" (FairSeq Machine-Translation model)"),Imo=l(),cs=a("li"),nde=a("strong"),Nmo=o("funnel"),qmo=o(" \u2014 "),WI=a("a"),jmo=o("FunnelTokenizer"),Dmo=o(" or "),QI=a("a"),Gmo=o("FunnelTokenizerFast"),Omo=o(" (Funnel Transformer model)"),Vmo=l(),fs=a("li"),sde=a("strong"),Xmo=o("gpt2"),zmo=o(" \u2014 "),HI=a("a"),Wmo=o("GPT2Tokenizer"),Qmo=o(" or "),UI=a("a"),Hmo=o("GPT2TokenizerFast"),Umo=o(" (OpenAI GPT-2 model)"),Jmo=l(),ms=a("li"),lde=a("strong"),Ymo=o("gpt_neo"),Kmo=o(" \u2014 "),JI=a("a"),Zmo=o("GPT2Tokenizer"),ego=o(" or "),YI=a("a"),ogo=o("GPT2TokenizerFast"),rgo=o(" (GPT Neo model)"),tgo=l(),wh=a("li"),ide=a("strong"),ago=o("gpt_neox"),ngo=o(" \u2014 "),KI=a("a"),sgo=o("GPTNeoXTokenizerFast"),lgo=o(" (GPT NeoX model)"),igo=l(),gs=a("li"),dde=a("strong"),dgo=o("gptj"),cgo=o(" \u2014 "),ZI=a("a"),fgo=o("GPT2Tokenizer"),mgo=o(" or "),eN=a("a"),ggo=o("GPT2TokenizerFast"),hgo=o(" (GPT-J model)"),pgo=l(),hs=a("li"),cde=a("strong"),_go=o("groupvit"),ugo=o(" \u2014 "),oN=a("a"),bgo=o("CLIPTokenizer"),vgo=o(" or "),rN=a("a"),Fgo=o("CLIPTokenizerFast"),Tgo=o(" (GroupViT model)"),Mgo=l(),ps=a("li"),fde=a("strong"),Ego=o("herbert"),Cgo=o(" \u2014 "),tN=a("a"),wgo=o("HerbertTokenizer"),Ago=o(" or "),aN=a("a"),Lgo=o("HerbertTokenizerFast"),ygo=o(" (HerBERT model)"),xgo=l(),Ah=a("li"),mde=a("strong"),$go=o("hubert"),kgo=o(" \u2014 "),nN=a("a"),Sgo=o("Wav2Vec2CTCTokenizer"),Rgo=o(" (Hubert model)"),Pgo=l(),_s=a("li"),gde=a("strong"),Bgo=o("ibert"),Igo=o(" \u2014 "),sN=a("a"),Ngo=o("RobertaTokenizer"),qgo=o(" or "),lN=a("a"),jgo=o("RobertaTokenizerFast"),Dgo=o(" (I-BERT model)"),Ggo=l(),us=a("li"),hde=a("strong"),Ogo=o("layoutlm"),Vgo=o(" \u2014 "),iN=a("a"),Xgo=o("LayoutLMTokenizer"),zgo=o(" or "),dN=a("a"),Wgo=o("LayoutLMTokenizerFast"),Qgo=o(" (LayoutLM model)"),Hgo=l(),bs=a("li"),pde=a("strong"),Ugo=o("layoutlmv2"),Jgo=o(" \u2014 "),cN=a("a"),Ygo=o("LayoutLMv2Tokenizer"),Kgo=o(" or "),fN=a("a"),Zgo=o("LayoutLMv2TokenizerFast"),eho=o(" (LayoutLMv2 model)"),oho=l(),vs=a("li"),_de=a("strong"),rho=o("layoutlmv3"),tho=o(" \u2014 "),mN=a("a"),aho=o("LayoutLMv3Tokenizer"),nho=o(" or "),gN=a("a"),sho=o("LayoutLMv3TokenizerFast"),lho=o(" (LayoutLMv3 model)"),iho=l(),Fs=a("li"),ude=a("strong"),dho=o("layoutxlm"),cho=o(" \u2014 "),hN=a("a"),fho=o("LayoutXLMTokenizer"),mho=o(" or "),pN=a("a"),gho=o("LayoutXLMTokenizerFast"),hho=o(" (LayoutXLM model)"),pho=l(),Ts=a("li"),bde=a("strong"),_ho=o("led"),uho=o(" \u2014 "),_N=a("a"),bho=o("LEDTokenizer"),vho=o(" or "),uN=a("a"),Fho=o("LEDTokenizerFast"),Tho=o(" (LED model)"),Mho=l(),Ms=a("li"),vde=a("strong"),Eho=o("longformer"),Cho=o(" \u2014 "),bN=a("a"),who=o("LongformerTokenizer"),Aho=o(" or "),vN=a("a"),Lho=o("LongformerTokenizerFast"),yho=o(" (Longformer model)"),xho=l(),Es=a("li"),Fde=a("strong"),$ho=o("longt5"),kho=o(" \u2014 "),FN=a("a"),Sho=o("T5Tokenizer"),Rho=o(" or "),TN=a("a"),Pho=o("T5TokenizerFast"),Bho=o(" (LongT5 model)"),Iho=l(),Lh=a("li"),Tde=a("strong"),Nho=o("luke"),qho=o(" \u2014 "),MN=a("a"),jho=o("LukeTokenizer"),Dho=o(" (LUKE model)"),Gho=l(),Cs=a("li"),Mde=a("strong"),Oho=o("lxmert"),Vho=o(" \u2014 "),EN=a("a"),Xho=o("LxmertTokenizer"),zho=o(" or "),CN=a("a"),Who=o("LxmertTokenizerFast"),Qho=o(" (LXMERT model)"),Hho=l(),yh=a("li"),Ede=a("strong"),Uho=o("m2m_100"),Jho=o(" \u2014 "),wN=a("a"),Yho=o("M2M100Tokenizer"),Kho=o(" (M2M100 model)"),Zho=l(),xh=a("li"),Cde=a("strong"),epo=o("marian"),opo=o(" \u2014 "),AN=a("a"),rpo=o("MarianTokenizer"),tpo=o(" (Marian model)"),apo=l(),ws=a("li"),wde=a("strong"),npo=o("mbart"),spo=o(" \u2014 "),LN=a("a"),lpo=o("MBartTokenizer"),ipo=o(" or "),yN=a("a"),dpo=o("MBartTokenizerFast"),cpo=o(" (mBART model)"),fpo=l(),As=a("li"),Ade=a("strong"),mpo=o("mbart50"),gpo=o(" \u2014 "),xN=a("a"),hpo=o("MBart50Tokenizer"),ppo=o(" or "),$N=a("a"),_po=o("MBart50TokenizerFast"),upo=o(" (mBART-50 model)"),bpo=l(),Ls=a("li"),Lde=a("strong"),vpo=o("megatron-bert"),Fpo=o(" \u2014 "),kN=a("a"),Tpo=o("BertTokenizer"),Mpo=o(" or "),SN=a("a"),Epo=o("BertTokenizerFast"),Cpo=o(" (Megatron-BERT model)"),wpo=l(),$h=a("li"),yde=a("strong"),Apo=o("mluke"),Lpo=o(" \u2014 "),RN=a("a"),ypo=o("MLukeTokenizer"),xpo=o(" (mLUKE model)"),$po=l(),ys=a("li"),xde=a("strong"),kpo=o("mobilebert"),Spo=o(" \u2014 "),PN=a("a"),Rpo=o("MobileBertTokenizer"),Ppo=o(" or "),BN=a("a"),Bpo=o("MobileBertTokenizerFast"),Ipo=o(" (MobileBERT model)"),Npo=l(),xs=a("li"),$de=a("strong"),qpo=o("mpnet"),jpo=o(" \u2014 "),IN=a("a"),Dpo=o("MPNetTokenizer"),Gpo=o(" or "),NN=a("a"),Opo=o("MPNetTokenizerFast"),Vpo=o(" (MPNet model)"),Xpo=l(),$s=a("li"),kde=a("strong"),zpo=o("mt5"),Wpo=o(" \u2014 "),qN=a("a"),Qpo=o("MT5Tokenizer"),Hpo=o(" or "),jN=a("a"),Upo=o("MT5TokenizerFast"),Jpo=o(" (MT5 model)"),Ypo=l(),ks=a("li"),Sde=a("strong"),Kpo=o("mvp"),Zpo=o(" \u2014 "),DN=a("a"),e_o=o("MvpTokenizer"),o_o=o(" or "),GN=a("a"),r_o=o("MvpTokenizerFast"),t_o=o(" (MVP model)"),a_o=l(),Ss=a("li"),Rde=a("strong"),n_o=o("nezha"),s_o=o(" \u2014 "),ON=a("a"),l_o=o("BertTokenizer"),i_o=o(" or "),VN=a("a"),d_o=o("BertTokenizerFast"),c_o=o(" (Nezha model)"),f_o=l(),Rs=a("li"),Pde=a("strong"),m_o=o("nllb"),g_o=o(" \u2014 "),XN=a("a"),h_o=o("NllbTokenizer"),p_o=o(" or "),zN=a("a"),__o=o("NllbTokenizerFast"),u_o=o(" (NLLB model)"),b_o=l(),Ps=a("li"),Bde=a("strong"),v_o=o("nystromformer"),F_o=o(" \u2014 "),WN=a("a"),T_o=o("AlbertTokenizer"),M_o=o(" or "),QN=a("a"),E_o=o("AlbertTokenizerFast"),C_o=o(" (Nystr\xF6mformer model)"),w_o=l(),Bs=a("li"),Ide=a("strong"),A_o=o("openai-gpt"),L_o=o(" \u2014 "),HN=a("a"),y_o=o("OpenAIGPTTokenizer"),x_o=o(" or "),UN=a("a"),$_o=o("OpenAIGPTTokenizerFast"),k_o=o(" (OpenAI GPT model)"),S_o=l(),kh=a("li"),Nde=a("strong"),R_o=o("opt"),P_o=o(" \u2014 "),JN=a("a"),B_o=o("GPT2Tokenizer"),I_o=o(" (OPT model)"),N_o=l(),Is=a("li"),qde=a("strong"),q_o=o("owlvit"),j_o=o(" \u2014 "),YN=a("a"),D_o=o("CLIPTokenizer"),G_o=o(" or "),KN=a("a"),O_o=o("CLIPTokenizerFast"),V_o=o(" (OWL-ViT model)"),X_o=l(),Ns=a("li"),jde=a("strong"),z_o=o("pegasus"),W_o=o(" \u2014 "),ZN=a("a"),Q_o=o("PegasusTokenizer"),H_o=o(" or "),eq=a("a"),U_o=o("PegasusTokenizerFast"),J_o=o(" (Pegasus model)"),Y_o=l(),Sh=a("li"),Dde=a("strong"),K_o=o("perceiver"),Z_o=o(" \u2014 "),oq=a("a"),euo=o("PerceiverTokenizer"),ouo=o(" (Perceiver model)"),ruo=l(),Rh=a("li"),Gde=a("strong"),tuo=o("phobert"),auo=o(" \u2014 "),rq=a("a"),nuo=o("PhobertTokenizer"),suo=o(" (PhoBERT model)"),luo=l(),Ph=a("li"),Ode=a("strong"),iuo=o("plbart"),duo=o(" \u2014 "),tq=a("a"),cuo=o("PLBartTokenizer"),fuo=o(" (PLBart model)"),muo=l(),Bh=a("li"),Vde=a("strong"),guo=o("prophetnet"),huo=o(" \u2014 "),aq=a("a"),puo=o("ProphetNetTokenizer"),_uo=o(" (ProphetNet model)"),uuo=l(),qs=a("li"),Xde=a("strong"),buo=o("qdqbert"),vuo=o(" \u2014 "),nq=a("a"),Fuo=o("BertTokenizer"),Tuo=o(" or "),sq=a("a"),Muo=o("BertTokenizerFast"),Euo=o(" (QDQBert model)"),Cuo=l(),Ih=a("li"),zde=a("strong"),wuo=o("rag"),Auo=o(" \u2014 "),lq=a("a"),Luo=o("RagTokenizer"),yuo=o(" (RAG model)"),xuo=l(),js=a("li"),Wde=a("strong"),$uo=o("realm"),kuo=o(" \u2014 "),iq=a("a"),Suo=o("RealmTokenizer"),Ruo=o(" or "),dq=a("a"),Puo=o("RealmTokenizerFast"),Buo=o(" (REALM model)"),Iuo=l(),Ds=a("li"),Qde=a("strong"),Nuo=o("reformer"),quo=o(" \u2014 "),cq=a("a"),juo=o("ReformerTokenizer"),Duo=o(" or "),fq=a("a"),Guo=o("ReformerTokenizerFast"),Ouo=o(" (Reformer model)"),Vuo=l(),Gs=a("li"),Hde=a("strong"),Xuo=o("rembert"),zuo=o(" \u2014 "),mq=a("a"),Wuo=o("RemBertTokenizer"),Quo=o(" or "),gq=a("a"),Huo=o("RemBertTokenizerFast"),Uuo=o(" (RemBERT model)"),Juo=l(),Os=a("li"),Ude=a("strong"),Yuo=o("retribert"),Kuo=o(" \u2014 "),hq=a("a"),Zuo=o("RetriBertTokenizer"),e2o=o(" or "),pq=a("a"),o2o=o("RetriBertTokenizerFast"),r2o=o(" (RetriBERT model)"),t2o=l(),Vs=a("li"),Jde=a("strong"),a2o=o("roberta"),n2o=o(" \u2014 "),_q=a("a"),s2o=o("RobertaTokenizer"),l2o=o(" or "),uq=a("a"),i2o=o("RobertaTokenizerFast"),d2o=o(" (RoBERTa model)"),c2o=l(),Xs=a("li"),Yde=a("strong"),f2o=o("roformer"),m2o=o(" \u2014 "),bq=a("a"),g2o=o("RoFormerTokenizer"),h2o=o(" or "),vq=a("a"),p2o=o("RoFormerTokenizerFast"),_2o=o(" (RoFormer model)"),u2o=l(),Nh=a("li"),Kde=a("strong"),b2o=o("speech_to_text"),v2o=o(" \u2014 "),Fq=a("a"),F2o=o("Speech2TextTokenizer"),T2o=o(" (Speech2Text model)"),M2o=l(),qh=a("li"),Zde=a("strong"),E2o=o("speech_to_text_2"),C2o=o(" \u2014 "),Tq=a("a"),w2o=o("Speech2Text2Tokenizer"),A2o=o(" (Speech2Text2 model)"),L2o=l(),zs=a("li"),ece=a("strong"),y2o=o("splinter"),x2o=o(" \u2014 "),Mq=a("a"),$2o=o("SplinterTokenizer"),k2o=o(" or "),Eq=a("a"),S2o=o("SplinterTokenizerFast"),R2o=o(" (Splinter model)"),P2o=l(),Ws=a("li"),oce=a("strong"),B2o=o("squeezebert"),I2o=o(" \u2014 "),Cq=a("a"),N2o=o("SqueezeBertTokenizer"),q2o=o(" or "),wq=a("a"),j2o=o("SqueezeBertTokenizerFast"),D2o=o(" (SqueezeBERT model)"),G2o=l(),Qs=a("li"),rce=a("strong"),O2o=o("t5"),V2o=o(" \u2014 "),Aq=a("a"),X2o=o("T5Tokenizer"),z2o=o(" or "),Lq=a("a"),W2o=o("T5TokenizerFast"),Q2o=o(" (T5 model)"),H2o=l(),jh=a("li"),tce=a("strong"),U2o=o("tapas"),J2o=o(" \u2014 "),yq=a("a"),Y2o=o("TapasTokenizer"),K2o=o(" (TAPAS model)"),Z2o=l(),Dh=a("li"),ace=a("strong"),e1o=o("tapex"),o1o=o(" \u2014 "),xq=a("a"),r1o=o("TapexTokenizer"),t1o=o(" (TAPEX model)"),a1o=l(),Gh=a("li"),nce=a("strong"),n1o=o("transfo-xl"),s1o=o(" \u2014 "),$q=a("a"),l1o=o("TransfoXLTokenizer"),i1o=o(" (Transformer-XL model)"),d1o=l(),Hs=a("li"),sce=a("strong"),c1o=o("vilt"),f1o=o(" \u2014 "),kq=a("a"),m1o=o("BertTokenizer"),g1o=o(" or "),Sq=a("a"),h1o=o("BertTokenizerFast"),p1o=o(" (ViLT model)"),_1o=l(),Us=a("li"),lce=a("strong"),u1o=o("visual_bert"),b1o=o(" \u2014 "),Rq=a("a"),v1o=o("BertTokenizer"),F1o=o(" or "),Pq=a("a"),T1o=o("BertTokenizerFast"),M1o=o(" (VisualBERT model)"),E1o=l(),Oh=a("li"),ice=a("strong"),C1o=o("wav2vec2"),w1o=o(" \u2014 "),Bq=a("a"),A1o=o("Wav2Vec2CTCTokenizer"),L1o=o(" (Wav2Vec2 model)"),y1o=l(),Vh=a("li"),dce=a("strong"),x1o=o("wav2vec2-conformer"),$1o=o(" \u2014 "),Iq=a("a"),k1o=o("Wav2Vec2CTCTokenizer"),S1o=o(" (Wav2Vec2-Conformer model)"),R1o=l(),Xh=a("li"),cce=a("strong"),P1o=o("wav2vec2_phoneme"),B1o=o(" \u2014 "),Nq=a("a"),I1o=o("Wav2Vec2PhonemeCTCTokenizer"),N1o=o(" (Wav2Vec2Phoneme model)"),q1o=l(),Js=a("li"),fce=a("strong"),j1o=o("xglm"),D1o=o(" \u2014 "),qq=a("a"),G1o=o("XGLMTokenizer"),O1o=o(" or "),jq=a("a"),V1o=o("XGLMTokenizerFast"),X1o=o(" (XGLM model)"),z1o=l(),zh=a("li"),mce=a("strong"),W1o=o("xlm"),Q1o=o(" \u2014 "),Dq=a("a"),H1o=o("XLMTokenizer"),U1o=o(" (XLM model)"),J1o=l(),Wh=a("li"),gce=a("strong"),Y1o=o("xlm-prophetnet"),K1o=o(" \u2014 "),Gq=a("a"),Z1o=o("XLMProphetNetTokenizer"),ebo=o(" (XLM-ProphetNet model)"),obo=l(),Ys=a("li"),hce=a("strong"),rbo=o("xlm-roberta"),tbo=o(" \u2014 "),Oq=a("a"),abo=o("XLMRobertaTokenizer"),nbo=o(" or "),Vq=a("a"),sbo=o("XLMRobertaTokenizerFast"),lbo=o(" (XLM-RoBERTa model)"),ibo=l(),Ks=a("li"),pce=a("strong"),dbo=o("xlm-roberta-xl"),cbo=o(" \u2014 "),Xq=a("a"),fbo=o("RobertaTokenizer"),mbo=o(" or "),zq=a("a"),gbo=o("RobertaTokenizerFast"),hbo=o(" (XLM-RoBERTa-XL model)"),pbo=l(),Zs=a("li"),_ce=a("strong"),_bo=o("xlnet"),ubo=o(" \u2014 "),Wq=a("a"),bbo=o("XLNetTokenizer"),vbo=o(" or "),Qq=a("a"),Fbo=o("XLNetTokenizerFast"),Tbo=o(" (XLNet model)"),Mbo=l(),el=a("li"),uce=a("strong"),Ebo=o("yoso"),Cbo=o(" \u2014 "),Hq=a("a"),wbo=o("AlbertTokenizer"),Abo=o(" or "),Uq=a("a"),Lbo=o("AlbertTokenizerFast"),ybo=o(" (YOSO model)"),xbo=l(),F(Qh.$$.fragment),$bo=l(),Hh=a("div"),F(nL.$$.fragment),kbo=l(),bce=a("p"),Sbo=o("Register a new tokenizer in this mapping."),XWe=l(),Qi=a("h2"),Uh=a("a"),vce=a("span"),F(sL.$$.fragment),Rbo=l(),Fce=a("span"),Pbo=o("AutoFeatureExtractor"),zWe=l(),$o=a("div"),F(lL.$$.fragment),Bbo=l(),iL=a("p"),Ibo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Jq=a("a"),Nbo=o("AutoFeatureExtractor.from_pretrained()"),qbo=o(" class method."),jbo=l(),dL=a("p"),Dbo=o("This class cannot be instantiated directly using "),Tce=a("code"),Gbo=o("__init__()"),Obo=o(" (throws an error)."),Vbo=l(),Ue=a("div"),F(cL.$$.fragment),Xbo=l(),Mce=a("p"),zbo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Wbo=l(),ja=a("p"),Qbo=o("The feature extractor class to instantiate is selected based on the "),Ece=a("code"),Hbo=o("model_type"),Ubo=o(` property of the config object
(either passed as an argument or loaded from `),Cce=a("code"),Jbo=o("pretrained_model_name_or_path"),Ybo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wce=a("code"),Kbo=o("pretrained_model_name_or_path"),Zbo=o(":"),evo=l(),H=a("ul"),Jh=a("li"),Ace=a("strong"),ovo=o("beit"),rvo=o(" \u2014 "),Yq=a("a"),tvo=o("BeitFeatureExtractor"),avo=o(" (BEiT model)"),nvo=l(),Yh=a("li"),Lce=a("strong"),svo=o("clip"),lvo=o(" \u2014 "),Kq=a("a"),ivo=o("CLIPFeatureExtractor"),dvo=o(" (CLIP model)"),cvo=l(),Kh=a("li"),yce=a("strong"),fvo=o("convnext"),mvo=o(" \u2014 "),Zq=a("a"),gvo=o("ConvNextFeatureExtractor"),hvo=o(" (ConvNeXT model)"),pvo=l(),Zh=a("li"),xce=a("strong"),_vo=o("cvt"),uvo=o(" \u2014 "),ej=a("a"),bvo=o("ConvNextFeatureExtractor"),vvo=o(" (CvT model)"),Fvo=l(),ep=a("li"),$ce=a("strong"),Tvo=o("data2vec-audio"),Mvo=o(" \u2014 "),oj=a("a"),Evo=o("Wav2Vec2FeatureExtractor"),Cvo=o(" (Data2VecAudio model)"),wvo=l(),op=a("li"),kce=a("strong"),Avo=o("data2vec-vision"),Lvo=o(" \u2014 "),rj=a("a"),yvo=o("BeitFeatureExtractor"),xvo=o(" (Data2VecVision model)"),$vo=l(),rp=a("li"),Sce=a("strong"),kvo=o("deit"),Svo=o(" \u2014 "),tj=a("a"),Rvo=o("DeiTFeatureExtractor"),Pvo=o(" (DeiT model)"),Bvo=l(),tp=a("li"),Rce=a("strong"),Ivo=o("detr"),Nvo=o(" \u2014 "),aj=a("a"),qvo=o("DetrFeatureExtractor"),jvo=o(" (DETR model)"),Dvo=l(),ap=a("li"),Pce=a("strong"),Gvo=o("dpt"),Ovo=o(" \u2014 "),nj=a("a"),Vvo=o("DPTFeatureExtractor"),Xvo=o(" (DPT model)"),zvo=l(),np=a("li"),Bce=a("strong"),Wvo=o("flava"),Qvo=o(" \u2014 "),sj=a("a"),Hvo=o("FlavaFeatureExtractor"),Uvo=o(" (FLAVA model)"),Jvo=l(),sp=a("li"),Ice=a("strong"),Yvo=o("glpn"),Kvo=o(" \u2014 "),lj=a("a"),Zvo=o("GLPNFeatureExtractor"),e5o=o(" (GLPN model)"),o5o=l(),lp=a("li"),Nce=a("strong"),r5o=o("groupvit"),t5o=o(" \u2014 "),ij=a("a"),a5o=o("CLIPFeatureExtractor"),n5o=o(" (GroupViT model)"),s5o=l(),ip=a("li"),qce=a("strong"),l5o=o("hubert"),i5o=o(" \u2014 "),dj=a("a"),d5o=o("Wav2Vec2FeatureExtractor"),c5o=o(" (Hubert model)"),f5o=l(),dp=a("li"),jce=a("strong"),m5o=o("imagegpt"),g5o=o(" \u2014 "),cj=a("a"),h5o=o("ImageGPTFeatureExtractor"),p5o=o(" (ImageGPT model)"),_5o=l(),cp=a("li"),Dce=a("strong"),u5o=o("layoutlmv2"),b5o=o(" \u2014 "),fj=a("a"),v5o=o("LayoutLMv2FeatureExtractor"),F5o=o(" (LayoutLMv2 model)"),T5o=l(),fp=a("li"),Gce=a("strong"),M5o=o("layoutlmv3"),E5o=o(" \u2014 "),mj=a("a"),C5o=o("LayoutLMv3FeatureExtractor"),w5o=o(" (LayoutLMv3 model)"),A5o=l(),mp=a("li"),Oce=a("strong"),L5o=o("levit"),y5o=o(" \u2014 "),gj=a("a"),x5o=o("LevitFeatureExtractor"),$5o=o(" (LeViT model)"),k5o=l(),gp=a("li"),Vce=a("strong"),S5o=o("maskformer"),R5o=o(" \u2014 "),hj=a("a"),P5o=o("MaskFormerFeatureExtractor"),B5o=o(" (MaskFormer model)"),I5o=l(),hp=a("li"),Xce=a("strong"),N5o=o("mctct"),q5o=o(" \u2014 "),pj=a("a"),j5o=o("MCTCTFeatureExtractor"),D5o=o(" (M-CTC-T model)"),G5o=l(),pp=a("li"),zce=a("strong"),O5o=o("mobilevit"),V5o=o(" \u2014 "),_j=a("a"),X5o=o("MobileViTFeatureExtractor"),z5o=o(" (MobileViT model)"),W5o=l(),_p=a("li"),Wce=a("strong"),Q5o=o("owlvit"),H5o=o(" \u2014 "),uj=a("a"),U5o=o("OwlViTFeatureExtractor"),J5o=o(" (OWL-ViT model)"),Y5o=l(),up=a("li"),Qce=a("strong"),K5o=o("perceiver"),Z5o=o(" \u2014 "),bj=a("a"),eFo=o("PerceiverFeatureExtractor"),oFo=o(" (Perceiver model)"),rFo=l(),bp=a("li"),Hce=a("strong"),tFo=o("poolformer"),aFo=o(" \u2014 "),vj=a("a"),nFo=o("PoolFormerFeatureExtractor"),sFo=o(" (PoolFormer model)"),lFo=l(),vp=a("li"),Uce=a("strong"),iFo=o("regnet"),dFo=o(" \u2014 "),Fj=a("a"),cFo=o("ConvNextFeatureExtractor"),fFo=o(" (RegNet model)"),mFo=l(),Fp=a("li"),Jce=a("strong"),gFo=o("resnet"),hFo=o(" \u2014 "),Tj=a("a"),pFo=o("ConvNextFeatureExtractor"),_Fo=o(" (ResNet model)"),uFo=l(),Tp=a("li"),Yce=a("strong"),bFo=o("segformer"),vFo=o(" \u2014 "),Mj=a("a"),FFo=o("SegformerFeatureExtractor"),TFo=o(" (SegFormer model)"),MFo=l(),Mp=a("li"),Kce=a("strong"),EFo=o("speech_to_text"),CFo=o(" \u2014 "),Ej=a("a"),wFo=o("Speech2TextFeatureExtractor"),AFo=o(" (Speech2Text model)"),LFo=l(),Ep=a("li"),Zce=a("strong"),yFo=o("swin"),xFo=o(" \u2014 "),Cj=a("a"),$Fo=o("ViTFeatureExtractor"),kFo=o(" (Swin Transformer model)"),SFo=l(),Cp=a("li"),efe=a("strong"),RFo=o("swinv2"),PFo=o(" \u2014 "),wj=a("a"),BFo=o("ViTFeatureExtractor"),IFo=o(" (Swin Transformer V2 model)"),NFo=l(),wp=a("li"),ofe=a("strong"),qFo=o("van"),jFo=o(" \u2014 "),Aj=a("a"),DFo=o("ConvNextFeatureExtractor"),GFo=o(" (VAN model)"),OFo=l(),Ap=a("li"),rfe=a("strong"),VFo=o("videomae"),XFo=o(" \u2014 "),Lj=a("a"),zFo=o("ViTFeatureExtractor"),WFo=o(" (VideoMAE model)"),QFo=l(),Lp=a("li"),tfe=a("strong"),HFo=o("vilt"),UFo=o(" \u2014 "),yj=a("a"),JFo=o("ViltFeatureExtractor"),YFo=o(" (ViLT model)"),KFo=l(),yp=a("li"),afe=a("strong"),ZFo=o("vit"),eTo=o(" \u2014 "),xj=a("a"),oTo=o("ViTFeatureExtractor"),rTo=o(" (ViT model)"),tTo=l(),xp=a("li"),nfe=a("strong"),aTo=o("vit_mae"),nTo=o(" \u2014 "),$j=a("a"),sTo=o("ViTFeatureExtractor"),lTo=o(" (ViTMAE model)"),iTo=l(),$p=a("li"),sfe=a("strong"),dTo=o("wav2vec2"),cTo=o(" \u2014 "),kj=a("a"),fTo=o("Wav2Vec2FeatureExtractor"),mTo=o(" (Wav2Vec2 model)"),gTo=l(),kp=a("li"),lfe=a("strong"),hTo=o("wav2vec2-conformer"),pTo=o(" \u2014 "),Sj=a("a"),_To=o("Wav2Vec2FeatureExtractor"),uTo=o(" (Wav2Vec2-Conformer model)"),bTo=l(),Sp=a("li"),ife=a("strong"),vTo=o("yolos"),FTo=o(" \u2014 "),Rj=a("a"),TTo=o("YolosFeatureExtractor"),MTo=o(" (YOLOS model)"),ETo=l(),F(Rp.$$.fragment),CTo=l(),F(Pp.$$.fragment),wTo=l(),Bp=a("div"),F(fL.$$.fragment),ATo=l(),dfe=a("p"),LTo=o("Register a new feature extractor for this class."),WWe=l(),Hi=a("h2"),Ip=a("a"),cfe=a("span"),F(mL.$$.fragment),yTo=l(),ffe=a("span"),xTo=o("AutoProcessor"),QWe=l(),ko=a("div"),F(gL.$$.fragment),$To=l(),hL=a("p"),kTo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Pj=a("a"),STo=o("AutoProcessor.from_pretrained()"),RTo=o(" class method."),PTo=l(),pL=a("p"),BTo=o("This class cannot be instantiated directly using "),mfe=a("code"),ITo=o("__init__()"),NTo=o(" (throws an error)."),qTo=l(),Je=a("div"),F(_L.$$.fragment),jTo=l(),gfe=a("p"),DTo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),GTo=l(),Ui=a("p"),OTo=o("The processor class to instantiate is selected based on the "),hfe=a("code"),VTo=o("model_type"),XTo=o(` property of the config object (either
passed as an argument or loaded from `),pfe=a("code"),zTo=o("pretrained_model_name_or_path"),WTo=o(" if possible):"),QTo=l(),fe=a("ul"),Np=a("li"),_fe=a("strong"),HTo=o("clip"),UTo=o(" \u2014 "),Bj=a("a"),JTo=o("CLIPProcessor"),YTo=o(" (CLIP model)"),KTo=l(),qp=a("li"),ufe=a("strong"),ZTo=o("flava"),e8o=o(" \u2014 "),Ij=a("a"),o8o=o("FlavaProcessor"),r8o=o(" (FLAVA model)"),t8o=l(),jp=a("li"),bfe=a("strong"),a8o=o("groupvit"),n8o=o(" \u2014 "),Nj=a("a"),s8o=o("CLIPProcessor"),l8o=o(" (GroupViT model)"),i8o=l(),Dp=a("li"),vfe=a("strong"),d8o=o("layoutlmv2"),c8o=o(" \u2014 "),qj=a("a"),f8o=o("LayoutLMv2Processor"),m8o=o(" (LayoutLMv2 model)"),g8o=l(),Gp=a("li"),Ffe=a("strong"),h8o=o("layoutlmv3"),p8o=o(" \u2014 "),jj=a("a"),_8o=o("LayoutLMv3Processor"),u8o=o(" (LayoutLMv3 model)"),b8o=l(),Op=a("li"),Tfe=a("strong"),v8o=o("layoutxlm"),F8o=o(" \u2014 "),Dj=a("a"),T8o=o("LayoutXLMProcessor"),M8o=o(" (LayoutXLM model)"),E8o=l(),Vp=a("li"),Mfe=a("strong"),C8o=o("owlvit"),w8o=o(" \u2014 "),Gj=a("a"),A8o=o("OwlViTProcessor"),L8o=o(" (OWL-ViT model)"),y8o=l(),Xp=a("li"),Efe=a("strong"),x8o=o("sew"),$8o=o(" \u2014 "),Oj=a("a"),k8o=o("Wav2Vec2Processor"),S8o=o(" (SEW model)"),R8o=l(),zp=a("li"),Cfe=a("strong"),P8o=o("sew-d"),B8o=o(" \u2014 "),Vj=a("a"),I8o=o("Wav2Vec2Processor"),N8o=o(" (SEW-D model)"),q8o=l(),Wp=a("li"),wfe=a("strong"),j8o=o("speech_to_text"),D8o=o(" \u2014 "),Xj=a("a"),G8o=o("Speech2TextProcessor"),O8o=o(" (Speech2Text model)"),V8o=l(),Qp=a("li"),Afe=a("strong"),X8o=o("speech_to_text_2"),z8o=o(" \u2014 "),zj=a("a"),W8o=o("Speech2Text2Processor"),Q8o=o(" (Speech2Text2 model)"),H8o=l(),Hp=a("li"),Lfe=a("strong"),U8o=o("trocr"),J8o=o(" \u2014 "),Wj=a("a"),Y8o=o("TrOCRProcessor"),K8o=o(" (TrOCR model)"),Z8o=l(),Up=a("li"),yfe=a("strong"),e9o=o("unispeech"),o9o=o(" \u2014 "),Qj=a("a"),r9o=o("Wav2Vec2Processor"),t9o=o(" (UniSpeech model)"),a9o=l(),Jp=a("li"),xfe=a("strong"),n9o=o("unispeech-sat"),s9o=o(" \u2014 "),Hj=a("a"),l9o=o("Wav2Vec2Processor"),i9o=o(" (UniSpeechSat model)"),d9o=l(),Yp=a("li"),$fe=a("strong"),c9o=o("vilt"),f9o=o(" \u2014 "),Uj=a("a"),m9o=o("ViltProcessor"),g9o=o(" (ViLT model)"),h9o=l(),Kp=a("li"),kfe=a("strong"),p9o=o("vision-text-dual-encoder"),_9o=o(" \u2014 "),Jj=a("a"),u9o=o("VisionTextDualEncoderProcessor"),b9o=o(" (VisionTextDualEncoder model)"),v9o=l(),Zp=a("li"),Sfe=a("strong"),F9o=o("wav2vec2"),T9o=o(" \u2014 "),Yj=a("a"),M9o=o("Wav2Vec2Processor"),E9o=o(" (Wav2Vec2 model)"),C9o=l(),e_=a("li"),Rfe=a("strong"),w9o=o("wav2vec2-conformer"),A9o=o(" \u2014 "),Kj=a("a"),L9o=o("Wav2Vec2Processor"),y9o=o(" (Wav2Vec2-Conformer model)"),x9o=l(),o_=a("li"),Pfe=a("strong"),$9o=o("wavlm"),k9o=o(" \u2014 "),Zj=a("a"),S9o=o("Wav2Vec2Processor"),R9o=o(" (WavLM model)"),P9o=l(),F(r_.$$.fragment),B9o=l(),F(t_.$$.fragment),I9o=l(),a_=a("div"),F(uL.$$.fragment),N9o=l(),Bfe=a("p"),q9o=o("Register a new processor for this class."),HWe=l(),Ji=a("h2"),n_=a("a"),Ife=a("span"),F(bL.$$.fragment),j9o=l(),Nfe=a("span"),D9o=o("AutoModel"),UWe=l(),So=a("div"),F(vL.$$.fragment),G9o=l(),Yi=a("p"),O9o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eD=a("a"),V9o=o("from_pretrained()"),X9o=o(" class method or the "),oD=a("a"),z9o=o("from_config()"),W9o=o(` class
method.`),Q9o=l(),FL=a("p"),H9o=o("This class cannot be instantiated directly using "),qfe=a("code"),U9o=o("__init__()"),J9o=o(" (throws an error)."),Y9o=l(),ct=a("div"),F(TL.$$.fragment),K9o=l(),jfe=a("p"),Z9o=o("Instantiates one of the base model classes of the library from a configuration."),eMo=l(),Ki=a("p"),oMo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),rMo=o("not"),tMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),aMo=o("from_pretrained()"),nMo=o(" to load the model weights."),sMo=l(),F(s_.$$.fragment),lMo=l(),Ye=a("div"),F(ML.$$.fragment),iMo=l(),Gfe=a("p"),dMo=o("Instantiate one of the base model classes of the library from a pretrained model."),cMo=l(),Da=a("p"),fMo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),mMo=o("model_type"),gMo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),hMo=o("pretrained_model_name_or_path"),pMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),_Mo=o("pretrained_model_name_or_path"),uMo=o(":"),bMo=l(),y=a("ul"),l_=a("li"),zfe=a("strong"),vMo=o("albert"),FMo=o(" \u2014 "),tD=a("a"),TMo=o("AlbertModel"),MMo=o(" (ALBERT model)"),EMo=l(),i_=a("li"),Wfe=a("strong"),CMo=o("bart"),wMo=o(" \u2014 "),aD=a("a"),AMo=o("BartModel"),LMo=o(" (BART model)"),yMo=l(),d_=a("li"),Qfe=a("strong"),xMo=o("beit"),$Mo=o(" \u2014 "),nD=a("a"),kMo=o("BeitModel"),SMo=o(" (BEiT model)"),RMo=l(),c_=a("li"),Hfe=a("strong"),PMo=o("bert"),BMo=o(" \u2014 "),sD=a("a"),IMo=o("BertModel"),NMo=o(" (BERT model)"),qMo=l(),f_=a("li"),Ufe=a("strong"),jMo=o("bert-generation"),DMo=o(" \u2014 "),lD=a("a"),GMo=o("BertGenerationEncoder"),OMo=o(" (Bert Generation model)"),VMo=l(),m_=a("li"),Jfe=a("strong"),XMo=o("big_bird"),zMo=o(" \u2014 "),iD=a("a"),WMo=o("BigBirdModel"),QMo=o(" (BigBird model)"),HMo=l(),g_=a("li"),Yfe=a("strong"),UMo=o("bigbird_pegasus"),JMo=o(" \u2014 "),dD=a("a"),YMo=o("BigBirdPegasusModel"),KMo=o(" (BigBird-Pegasus model)"),ZMo=l(),h_=a("li"),Kfe=a("strong"),eEo=o("blenderbot"),oEo=o(" \u2014 "),cD=a("a"),rEo=o("BlenderbotModel"),tEo=o(" (Blenderbot model)"),aEo=l(),p_=a("li"),Zfe=a("strong"),nEo=o("blenderbot-small"),sEo=o(" \u2014 "),fD=a("a"),lEo=o("BlenderbotSmallModel"),iEo=o(" (BlenderbotSmall model)"),dEo=l(),__=a("li"),eme=a("strong"),cEo=o("bloom"),fEo=o(" \u2014 "),mD=a("a"),mEo=o("BloomModel"),gEo=o(" (BLOOM model)"),hEo=l(),u_=a("li"),ome=a("strong"),pEo=o("camembert"),_Eo=o(" \u2014 "),gD=a("a"),uEo=o("CamembertModel"),bEo=o(" (CamemBERT model)"),vEo=l(),b_=a("li"),rme=a("strong"),FEo=o("canine"),TEo=o(" \u2014 "),hD=a("a"),MEo=o("CanineModel"),EEo=o(" (CANINE model)"),CEo=l(),v_=a("li"),tme=a("strong"),wEo=o("clip"),AEo=o(" \u2014 "),pD=a("a"),LEo=o("CLIPModel"),yEo=o(" (CLIP model)"),xEo=l(),F_=a("li"),ame=a("strong"),$Eo=o("codegen"),kEo=o(" \u2014 "),_D=a("a"),SEo=o("CodeGenModel"),REo=o(" (CodeGen model)"),PEo=l(),T_=a("li"),nme=a("strong"),BEo=o("convbert"),IEo=o(" \u2014 "),uD=a("a"),NEo=o("ConvBertModel"),qEo=o(" (ConvBERT model)"),jEo=l(),M_=a("li"),sme=a("strong"),DEo=o("convnext"),GEo=o(" \u2014 "),bD=a("a"),OEo=o("ConvNextModel"),VEo=o(" (ConvNeXT model)"),XEo=l(),E_=a("li"),lme=a("strong"),zEo=o("ctrl"),WEo=o(" \u2014 "),vD=a("a"),QEo=o("CTRLModel"),HEo=o(" (CTRL model)"),UEo=l(),C_=a("li"),ime=a("strong"),JEo=o("cvt"),YEo=o(" \u2014 "),FD=a("a"),KEo=o("CvtModel"),ZEo=o(" (CvT model)"),e4o=l(),w_=a("li"),dme=a("strong"),o4o=o("data2vec-audio"),r4o=o(" \u2014 "),TD=a("a"),t4o=o("Data2VecAudioModel"),a4o=o(" (Data2VecAudio model)"),n4o=l(),A_=a("li"),cme=a("strong"),s4o=o("data2vec-text"),l4o=o(" \u2014 "),MD=a("a"),i4o=o("Data2VecTextModel"),d4o=o(" (Data2VecText model)"),c4o=l(),L_=a("li"),fme=a("strong"),f4o=o("data2vec-vision"),m4o=o(" \u2014 "),ED=a("a"),g4o=o("Data2VecVisionModel"),h4o=o(" (Data2VecVision model)"),p4o=l(),y_=a("li"),mme=a("strong"),_4o=o("deberta"),u4o=o(" \u2014 "),CD=a("a"),b4o=o("DebertaModel"),v4o=o(" (DeBERTa model)"),F4o=l(),x_=a("li"),gme=a("strong"),T4o=o("deberta-v2"),M4o=o(" \u2014 "),wD=a("a"),E4o=o("DebertaV2Model"),C4o=o(" (DeBERTa-v2 model)"),w4o=l(),$_=a("li"),hme=a("strong"),A4o=o("decision_transformer"),L4o=o(" \u2014 "),AD=a("a"),y4o=o("DecisionTransformerModel"),x4o=o(" (Decision Transformer model)"),$4o=l(),k_=a("li"),pme=a("strong"),k4o=o("deit"),S4o=o(" \u2014 "),LD=a("a"),R4o=o("DeiTModel"),P4o=o(" (DeiT model)"),B4o=l(),S_=a("li"),_me=a("strong"),I4o=o("detr"),N4o=o(" \u2014 "),yD=a("a"),q4o=o("DetrModel"),j4o=o(" (DETR model)"),D4o=l(),R_=a("li"),ume=a("strong"),G4o=o("distilbert"),O4o=o(" \u2014 "),xD=a("a"),V4o=o("DistilBertModel"),X4o=o(" (DistilBERT model)"),z4o=l(),P_=a("li"),bme=a("strong"),W4o=o("dpr"),Q4o=o(" \u2014 "),$D=a("a"),H4o=o("DPRQuestionEncoder"),U4o=o(" (DPR model)"),J4o=l(),B_=a("li"),vme=a("strong"),Y4o=o("dpt"),K4o=o(" \u2014 "),kD=a("a"),Z4o=o("DPTModel"),eCo=o(" (DPT model)"),oCo=l(),I_=a("li"),Fme=a("strong"),rCo=o("electra"),tCo=o(" \u2014 "),SD=a("a"),aCo=o("ElectraModel"),nCo=o(" (ELECTRA model)"),sCo=l(),N_=a("li"),Tme=a("strong"),lCo=o("flaubert"),iCo=o(" \u2014 "),RD=a("a"),dCo=o("FlaubertModel"),cCo=o(" (FlauBERT model)"),fCo=l(),q_=a("li"),Mme=a("strong"),mCo=o("flava"),gCo=o(" \u2014 "),PD=a("a"),hCo=o("FlavaModel"),pCo=o(" (FLAVA model)"),_Co=l(),j_=a("li"),Eme=a("strong"),uCo=o("fnet"),bCo=o(" \u2014 "),BD=a("a"),vCo=o("FNetModel"),FCo=o(" (FNet model)"),TCo=l(),D_=a("li"),Cme=a("strong"),MCo=o("fsmt"),ECo=o(" \u2014 "),ID=a("a"),CCo=o("FSMTModel"),wCo=o(" (FairSeq Machine-Translation model)"),ACo=l(),ol=a("li"),wme=a("strong"),LCo=o("funnel"),yCo=o(" \u2014 "),ND=a("a"),xCo=o("FunnelModel"),$Co=o(" or "),qD=a("a"),kCo=o("FunnelBaseModel"),SCo=o(" (Funnel Transformer model)"),RCo=l(),G_=a("li"),Ame=a("strong"),PCo=o("glpn"),BCo=o(" \u2014 "),jD=a("a"),ICo=o("GLPNModel"),NCo=o(" (GLPN model)"),qCo=l(),O_=a("li"),Lme=a("strong"),jCo=o("gpt2"),DCo=o(" \u2014 "),DD=a("a"),GCo=o("GPT2Model"),OCo=o(" (OpenAI GPT-2 model)"),VCo=l(),V_=a("li"),yme=a("strong"),XCo=o("gpt_neo"),zCo=o(" \u2014 "),GD=a("a"),WCo=o("GPTNeoModel"),QCo=o(" (GPT Neo model)"),HCo=l(),X_=a("li"),xme=a("strong"),UCo=o("gpt_neox"),JCo=o(" \u2014 "),OD=a("a"),YCo=o("GPTNeoXModel"),KCo=o(" (GPT NeoX model)"),ZCo=l(),z_=a("li"),$me=a("strong"),e3o=o("gptj"),o3o=o(" \u2014 "),VD=a("a"),r3o=o("GPTJModel"),t3o=o(" (GPT-J model)"),a3o=l(),W_=a("li"),kme=a("strong"),n3o=o("groupvit"),s3o=o(" \u2014 "),XD=a("a"),l3o=o("GroupViTModel"),i3o=o(" (GroupViT model)"),d3o=l(),Q_=a("li"),Sme=a("strong"),c3o=o("hubert"),f3o=o(" \u2014 "),zD=a("a"),m3o=o("HubertModel"),g3o=o(" (Hubert model)"),h3o=l(),H_=a("li"),Rme=a("strong"),p3o=o("ibert"),_3o=o(" \u2014 "),WD=a("a"),u3o=o("IBertModel"),b3o=o(" (I-BERT model)"),v3o=l(),U_=a("li"),Pme=a("strong"),F3o=o("imagegpt"),T3o=o(" \u2014 "),QD=a("a"),M3o=o("ImageGPTModel"),E3o=o(" (ImageGPT model)"),C3o=l(),J_=a("li"),Bme=a("strong"),w3o=o("layoutlm"),A3o=o(" \u2014 "),HD=a("a"),L3o=o("LayoutLMModel"),y3o=o(" (LayoutLM model)"),x3o=l(),Y_=a("li"),Ime=a("strong"),$3o=o("layoutlmv2"),k3o=o(" \u2014 "),UD=a("a"),S3o=o("LayoutLMv2Model"),R3o=o(" (LayoutLMv2 model)"),P3o=l(),K_=a("li"),Nme=a("strong"),B3o=o("layoutlmv3"),I3o=o(" \u2014 "),JD=a("a"),N3o=o("LayoutLMv3Model"),q3o=o(" (LayoutLMv3 model)"),j3o=l(),Z_=a("li"),qme=a("strong"),D3o=o("led"),G3o=o(" \u2014 "),YD=a("a"),O3o=o("LEDModel"),V3o=o(" (LED model)"),X3o=l(),eu=a("li"),jme=a("strong"),z3o=o("levit"),W3o=o(" \u2014 "),KD=a("a"),Q3o=o("LevitModel"),H3o=o(" (LeViT model)"),U3o=l(),ou=a("li"),Dme=a("strong"),J3o=o("longformer"),Y3o=o(" \u2014 "),ZD=a("a"),K3o=o("LongformerModel"),Z3o=o(" (Longformer model)"),e0o=l(),ru=a("li"),Gme=a("strong"),o0o=o("longt5"),r0o=o(" \u2014 "),eG=a("a"),t0o=o("LongT5Model"),a0o=o(" (LongT5 model)"),n0o=l(),tu=a("li"),Ome=a("strong"),s0o=o("luke"),l0o=o(" \u2014 "),oG=a("a"),i0o=o("LukeModel"),d0o=o(" (LUKE model)"),c0o=l(),au=a("li"),Vme=a("strong"),f0o=o("lxmert"),m0o=o(" \u2014 "),rG=a("a"),g0o=o("LxmertModel"),h0o=o(" (LXMERT model)"),p0o=l(),nu=a("li"),Xme=a("strong"),_0o=o("m2m_100"),u0o=o(" \u2014 "),tG=a("a"),b0o=o("M2M100Model"),v0o=o(" (M2M100 model)"),F0o=l(),su=a("li"),zme=a("strong"),T0o=o("marian"),M0o=o(" \u2014 "),aG=a("a"),E0o=o("MarianModel"),C0o=o(" (Marian model)"),w0o=l(),lu=a("li"),Wme=a("strong"),A0o=o("maskformer"),L0o=o(" \u2014 "),nG=a("a"),y0o=o("MaskFormerModel"),x0o=o(" (MaskFormer model)"),$0o=l(),iu=a("li"),Qme=a("strong"),k0o=o("mbart"),S0o=o(" \u2014 "),sG=a("a"),R0o=o("MBartModel"),P0o=o(" (mBART model)"),B0o=l(),du=a("li"),Hme=a("strong"),I0o=o("mctct"),N0o=o(" \u2014 "),lG=a("a"),q0o=o("MCTCTModel"),j0o=o(" (M-CTC-T model)"),D0o=l(),cu=a("li"),Ume=a("strong"),G0o=o("megatron-bert"),O0o=o(" \u2014 "),iG=a("a"),V0o=o("MegatronBertModel"),X0o=o(" (Megatron-BERT model)"),z0o=l(),fu=a("li"),Jme=a("strong"),W0o=o("mobilebert"),Q0o=o(" \u2014 "),dG=a("a"),H0o=o("MobileBertModel"),U0o=o(" (MobileBERT model)"),J0o=l(),mu=a("li"),Yme=a("strong"),Y0o=o("mobilevit"),K0o=o(" \u2014 "),cG=a("a"),Z0o=o("MobileViTModel"),ewo=o(" (MobileViT model)"),owo=l(),gu=a("li"),Kme=a("strong"),rwo=o("mpnet"),two=o(" \u2014 "),fG=a("a"),awo=o("MPNetModel"),nwo=o(" (MPNet model)"),swo=l(),hu=a("li"),Zme=a("strong"),lwo=o("mt5"),iwo=o(" \u2014 "),mG=a("a"),dwo=o("MT5Model"),cwo=o(" (MT5 model)"),fwo=l(),pu=a("li"),ege=a("strong"),mwo=o("mvp"),gwo=o(" \u2014 "),gG=a("a"),hwo=o("MvpModel"),pwo=o(" (MVP model)"),_wo=l(),_u=a("li"),oge=a("strong"),uwo=o("nezha"),bwo=o(" \u2014 "),hG=a("a"),vwo=o("NezhaModel"),Fwo=o(" (Nezha model)"),Two=l(),uu=a("li"),rge=a("strong"),Mwo=o("nllb"),Ewo=o(" \u2014 "),pG=a("a"),Cwo=o("M2M100Model"),wwo=o(" (NLLB model)"),Awo=l(),bu=a("li"),tge=a("strong"),Lwo=o("nystromformer"),ywo=o(" \u2014 "),_G=a("a"),xwo=o("NystromformerModel"),$wo=o(" (Nystr\xF6mformer model)"),kwo=l(),vu=a("li"),age=a("strong"),Swo=o("openai-gpt"),Rwo=o(" \u2014 "),uG=a("a"),Pwo=o("OpenAIGPTModel"),Bwo=o(" (OpenAI GPT model)"),Iwo=l(),Fu=a("li"),nge=a("strong"),Nwo=o("opt"),qwo=o(" \u2014 "),bG=a("a"),jwo=o("OPTModel"),Dwo=o(" (OPT model)"),Gwo=l(),Tu=a("li"),sge=a("strong"),Owo=o("owlvit"),Vwo=o(" \u2014 "),vG=a("a"),Xwo=o("OwlViTModel"),zwo=o(" (OWL-ViT model)"),Wwo=l(),Mu=a("li"),lge=a("strong"),Qwo=o("pegasus"),Hwo=o(" \u2014 "),FG=a("a"),Uwo=o("PegasusModel"),Jwo=o(" (Pegasus model)"),Ywo=l(),Eu=a("li"),ige=a("strong"),Kwo=o("perceiver"),Zwo=o(" \u2014 "),TG=a("a"),e6o=o("PerceiverModel"),o6o=o(" (Perceiver model)"),r6o=l(),Cu=a("li"),dge=a("strong"),t6o=o("plbart"),a6o=o(" \u2014 "),MG=a("a"),n6o=o("PLBartModel"),s6o=o(" (PLBart model)"),l6o=l(),wu=a("li"),cge=a("strong"),i6o=o("poolformer"),d6o=o(" \u2014 "),EG=a("a"),c6o=o("PoolFormerModel"),f6o=o(" (PoolFormer model)"),m6o=l(),Au=a("li"),fge=a("strong"),g6o=o("prophetnet"),h6o=o(" \u2014 "),CG=a("a"),p6o=o("ProphetNetModel"),_6o=o(" (ProphetNet model)"),u6o=l(),Lu=a("li"),mge=a("strong"),b6o=o("qdqbert"),v6o=o(" \u2014 "),wG=a("a"),F6o=o("QDQBertModel"),T6o=o(" (QDQBert model)"),M6o=l(),yu=a("li"),gge=a("strong"),E6o=o("reformer"),C6o=o(" \u2014 "),AG=a("a"),w6o=o("ReformerModel"),A6o=o(" (Reformer model)"),L6o=l(),xu=a("li"),hge=a("strong"),y6o=o("regnet"),x6o=o(" \u2014 "),LG=a("a"),$6o=o("RegNetModel"),k6o=o(" (RegNet model)"),S6o=l(),$u=a("li"),pge=a("strong"),R6o=o("rembert"),P6o=o(" \u2014 "),yG=a("a"),B6o=o("RemBertModel"),I6o=o(" (RemBERT model)"),N6o=l(),ku=a("li"),_ge=a("strong"),q6o=o("resnet"),j6o=o(" \u2014 "),xG=a("a"),D6o=o("ResNetModel"),G6o=o(" (ResNet model)"),O6o=l(),Su=a("li"),uge=a("strong"),V6o=o("retribert"),X6o=o(" \u2014 "),$G=a("a"),z6o=o("RetriBertModel"),W6o=o(" (RetriBERT model)"),Q6o=l(),Ru=a("li"),bge=a("strong"),H6o=o("roberta"),U6o=o(" \u2014 "),kG=a("a"),J6o=o("RobertaModel"),Y6o=o(" (RoBERTa model)"),K6o=l(),Pu=a("li"),vge=a("strong"),Z6o=o("roformer"),eAo=o(" \u2014 "),SG=a("a"),oAo=o("RoFormerModel"),rAo=o(" (RoFormer model)"),tAo=l(),Bu=a("li"),Fge=a("strong"),aAo=o("segformer"),nAo=o(" \u2014 "),RG=a("a"),sAo=o("SegformerModel"),lAo=o(" (SegFormer model)"),iAo=l(),Iu=a("li"),Tge=a("strong"),dAo=o("sew"),cAo=o(" \u2014 "),PG=a("a"),fAo=o("SEWModel"),mAo=o(" (SEW model)"),gAo=l(),Nu=a("li"),Mge=a("strong"),hAo=o("sew-d"),pAo=o(" \u2014 "),BG=a("a"),_Ao=o("SEWDModel"),uAo=o(" (SEW-D model)"),bAo=l(),qu=a("li"),Ege=a("strong"),vAo=o("speech_to_text"),FAo=o(" \u2014 "),IG=a("a"),TAo=o("Speech2TextModel"),MAo=o(" (Speech2Text model)"),EAo=l(),ju=a("li"),Cge=a("strong"),CAo=o("splinter"),wAo=o(" \u2014 "),NG=a("a"),AAo=o("SplinterModel"),LAo=o(" (Splinter model)"),yAo=l(),Du=a("li"),wge=a("strong"),xAo=o("squeezebert"),$Ao=o(" \u2014 "),qG=a("a"),kAo=o("SqueezeBertModel"),SAo=o(" (SqueezeBERT model)"),RAo=l(),Gu=a("li"),Age=a("strong"),PAo=o("swin"),BAo=o(" \u2014 "),jG=a("a"),IAo=o("SwinModel"),NAo=o(" (Swin Transformer model)"),qAo=l(),Ou=a("li"),Lge=a("strong"),jAo=o("swinv2"),DAo=o(" \u2014 "),DG=a("a"),GAo=o("Swinv2Model"),OAo=o(" (Swin Transformer V2 model)"),VAo=l(),Vu=a("li"),yge=a("strong"),XAo=o("t5"),zAo=o(" \u2014 "),GG=a("a"),WAo=o("T5Model"),QAo=o(" (T5 model)"),HAo=l(),Xu=a("li"),xge=a("strong"),UAo=o("tapas"),JAo=o(" \u2014 "),OG=a("a"),YAo=o("TapasModel"),KAo=o(" (TAPAS model)"),ZAo=l(),zu=a("li"),$ge=a("strong"),e7o=o("trajectory_transformer"),o7o=o(" \u2014 "),VG=a("a"),r7o=o("TrajectoryTransformerModel"),t7o=o(" (Trajectory Transformer model)"),a7o=l(),Wu=a("li"),kge=a("strong"),n7o=o("transfo-xl"),s7o=o(" \u2014 "),XG=a("a"),l7o=o("TransfoXLModel"),i7o=o(" (Transformer-XL model)"),d7o=l(),Qu=a("li"),Sge=a("strong"),c7o=o("unispeech"),f7o=o(" \u2014 "),zG=a("a"),m7o=o("UniSpeechModel"),g7o=o(" (UniSpeech model)"),h7o=l(),Hu=a("li"),Rge=a("strong"),p7o=o("unispeech-sat"),_7o=o(" \u2014 "),WG=a("a"),u7o=o("UniSpeechSatModel"),b7o=o(" (UniSpeechSat model)"),v7o=l(),Uu=a("li"),Pge=a("strong"),F7o=o("van"),T7o=o(" \u2014 "),QG=a("a"),M7o=o("VanModel"),E7o=o(" (VAN model)"),C7o=l(),Ju=a("li"),Bge=a("strong"),w7o=o("videomae"),A7o=o(" \u2014 "),HG=a("a"),L7o=o("VideoMAEModel"),y7o=o(" (VideoMAE model)"),x7o=l(),Yu=a("li"),Ige=a("strong"),$7o=o("vilt"),k7o=o(" \u2014 "),UG=a("a"),S7o=o("ViltModel"),R7o=o(" (ViLT model)"),P7o=l(),Ku=a("li"),Nge=a("strong"),B7o=o("vision-text-dual-encoder"),I7o=o(" \u2014 "),JG=a("a"),N7o=o("VisionTextDualEncoderModel"),q7o=o(" (VisionTextDualEncoder model)"),j7o=l(),Zu=a("li"),qge=a("strong"),D7o=o("visual_bert"),G7o=o(" \u2014 "),YG=a("a"),O7o=o("VisualBertModel"),V7o=o(" (VisualBERT model)"),X7o=l(),e2=a("li"),jge=a("strong"),z7o=o("vit"),W7o=o(" \u2014 "),KG=a("a"),Q7o=o("ViTModel"),H7o=o(" (ViT model)"),U7o=l(),o2=a("li"),Dge=a("strong"),J7o=o("vit_mae"),Y7o=o(" \u2014 "),ZG=a("a"),K7o=o("ViTMAEModel"),Z7o=o(" (ViTMAE model)"),eLo=l(),r2=a("li"),Gge=a("strong"),oLo=o("wav2vec2"),rLo=o(" \u2014 "),eO=a("a"),tLo=o("Wav2Vec2Model"),aLo=o(" (Wav2Vec2 model)"),nLo=l(),t2=a("li"),Oge=a("strong"),sLo=o("wav2vec2-conformer"),lLo=o(" \u2014 "),oO=a("a"),iLo=o("Wav2Vec2ConformerModel"),dLo=o(" (Wav2Vec2-Conformer model)"),cLo=l(),a2=a("li"),Vge=a("strong"),fLo=o("wavlm"),mLo=o(" \u2014 "),rO=a("a"),gLo=o("WavLMModel"),hLo=o(" (WavLM model)"),pLo=l(),n2=a("li"),Xge=a("strong"),_Lo=o("xglm"),uLo=o(" \u2014 "),tO=a("a"),bLo=o("XGLMModel"),vLo=o(" (XGLM model)"),FLo=l(),s2=a("li"),zge=a("strong"),TLo=o("xlm"),MLo=o(" \u2014 "),aO=a("a"),ELo=o("XLMModel"),CLo=o(" (XLM model)"),wLo=l(),l2=a("li"),Wge=a("strong"),ALo=o("xlm-prophetnet"),LLo=o(" \u2014 "),nO=a("a"),yLo=o("XLMProphetNetModel"),xLo=o(" (XLM-ProphetNet model)"),$Lo=l(),i2=a("li"),Qge=a("strong"),kLo=o("xlm-roberta"),SLo=o(" \u2014 "),sO=a("a"),RLo=o("XLMRobertaModel"),PLo=o(" (XLM-RoBERTa model)"),BLo=l(),d2=a("li"),Hge=a("strong"),ILo=o("xlm-roberta-xl"),NLo=o(" \u2014 "),lO=a("a"),qLo=o("XLMRobertaXLModel"),jLo=o(" (XLM-RoBERTa-XL model)"),DLo=l(),c2=a("li"),Uge=a("strong"),GLo=o("xlnet"),OLo=o(" \u2014 "),iO=a("a"),VLo=o("XLNetModel"),XLo=o(" (XLNet model)"),zLo=l(),f2=a("li"),Jge=a("strong"),WLo=o("yolos"),QLo=o(" \u2014 "),dO=a("a"),HLo=o("YolosModel"),ULo=o(" (YOLOS model)"),JLo=l(),m2=a("li"),Yge=a("strong"),YLo=o("yoso"),KLo=o(" \u2014 "),cO=a("a"),ZLo=o("YosoModel"),eyo=o(" (YOSO model)"),oyo=l(),g2=a("p"),ryo=o("The model is set in evaluation mode by default using "),Kge=a("code"),tyo=o("model.eval()"),ayo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),nyo=o("model.train()"),syo=l(),F(h2.$$.fragment),JWe=l(),Zi=a("h2"),p2=a("a"),ehe=a("span"),F(EL.$$.fragment),lyo=l(),ohe=a("span"),iyo=o("AutoModelForPreTraining"),YWe=l(),Ro=a("div"),F(CL.$$.fragment),dyo=l(),ed=a("p"),cyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fO=a("a"),fyo=o("from_pretrained()"),myo=o(" class method or the "),mO=a("a"),gyo=o("from_config()"),hyo=o(` class
method.`),pyo=l(),wL=a("p"),_yo=o("This class cannot be instantiated directly using "),rhe=a("code"),uyo=o("__init__()"),byo=o(" (throws an error)."),vyo=l(),ft=a("div"),F(AL.$$.fragment),Fyo=l(),the=a("p"),Tyo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Myo=l(),od=a("p"),Eyo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),Cyo=o("not"),wyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),Ayo=o("from_pretrained()"),Lyo=o(" to load the model weights."),yyo=l(),F(_2.$$.fragment),xyo=l(),Ke=a("div"),F(LL.$$.fragment),$yo=l(),nhe=a("p"),kyo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Syo=l(),Ga=a("p"),Ryo=o("The model class to instantiate is selected based on the "),she=a("code"),Pyo=o("model_type"),Byo=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),Iyo=o("pretrained_model_name_or_path"),Nyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),qyo=o("pretrained_model_name_or_path"),jyo=o(":"),Dyo=l(),G=a("ul"),u2=a("li"),dhe=a("strong"),Gyo=o("albert"),Oyo=o(" \u2014 "),hO=a("a"),Vyo=o("AlbertForPreTraining"),Xyo=o(" (ALBERT model)"),zyo=l(),b2=a("li"),che=a("strong"),Wyo=o("bart"),Qyo=o(" \u2014 "),pO=a("a"),Hyo=o("BartForConditionalGeneration"),Uyo=o(" (BART model)"),Jyo=l(),v2=a("li"),fhe=a("strong"),Yyo=o("bert"),Kyo=o(" \u2014 "),_O=a("a"),Zyo=o("BertForPreTraining"),exo=o(" (BERT model)"),oxo=l(),F2=a("li"),mhe=a("strong"),rxo=o("big_bird"),txo=o(" \u2014 "),uO=a("a"),axo=o("BigBirdForPreTraining"),nxo=o(" (BigBird model)"),sxo=l(),T2=a("li"),ghe=a("strong"),lxo=o("bloom"),ixo=o(" \u2014 "),bO=a("a"),dxo=o("BloomForCausalLM"),cxo=o(" (BLOOM model)"),fxo=l(),M2=a("li"),hhe=a("strong"),mxo=o("camembert"),gxo=o(" \u2014 "),vO=a("a"),hxo=o("CamembertForMaskedLM"),pxo=o(" (CamemBERT model)"),_xo=l(),E2=a("li"),phe=a("strong"),uxo=o("ctrl"),bxo=o(" \u2014 "),FO=a("a"),vxo=o("CTRLLMHeadModel"),Fxo=o(" (CTRL model)"),Txo=l(),C2=a("li"),_he=a("strong"),Mxo=o("data2vec-text"),Exo=o(" \u2014 "),TO=a("a"),Cxo=o("Data2VecTextForMaskedLM"),wxo=o(" (Data2VecText model)"),Axo=l(),w2=a("li"),uhe=a("strong"),Lxo=o("deberta"),yxo=o(" \u2014 "),MO=a("a"),xxo=o("DebertaForMaskedLM"),$xo=o(" (DeBERTa model)"),kxo=l(),A2=a("li"),bhe=a("strong"),Sxo=o("deberta-v2"),Rxo=o(" \u2014 "),EO=a("a"),Pxo=o("DebertaV2ForMaskedLM"),Bxo=o(" (DeBERTa-v2 model)"),Ixo=l(),L2=a("li"),vhe=a("strong"),Nxo=o("distilbert"),qxo=o(" \u2014 "),CO=a("a"),jxo=o("DistilBertForMaskedLM"),Dxo=o(" (DistilBERT model)"),Gxo=l(),y2=a("li"),Fhe=a("strong"),Oxo=o("electra"),Vxo=o(" \u2014 "),wO=a("a"),Xxo=o("ElectraForPreTraining"),zxo=o(" (ELECTRA model)"),Wxo=l(),x2=a("li"),The=a("strong"),Qxo=o("flaubert"),Hxo=o(" \u2014 "),AO=a("a"),Uxo=o("FlaubertWithLMHeadModel"),Jxo=o(" (FlauBERT model)"),Yxo=l(),$2=a("li"),Mhe=a("strong"),Kxo=o("flava"),Zxo=o(" \u2014 "),LO=a("a"),e$o=o("FlavaForPreTraining"),o$o=o(" (FLAVA model)"),r$o=l(),k2=a("li"),Ehe=a("strong"),t$o=o("fnet"),a$o=o(" \u2014 "),yO=a("a"),n$o=o("FNetForPreTraining"),s$o=o(" (FNet model)"),l$o=l(),S2=a("li"),Che=a("strong"),i$o=o("fsmt"),d$o=o(" \u2014 "),xO=a("a"),c$o=o("FSMTForConditionalGeneration"),f$o=o(" (FairSeq Machine-Translation model)"),m$o=l(),R2=a("li"),whe=a("strong"),g$o=o("funnel"),h$o=o(" \u2014 "),$O=a("a"),p$o=o("FunnelForPreTraining"),_$o=o(" (Funnel Transformer model)"),u$o=l(),P2=a("li"),Ahe=a("strong"),b$o=o("gpt2"),v$o=o(" \u2014 "),kO=a("a"),F$o=o("GPT2LMHeadModel"),T$o=o(" (OpenAI GPT-2 model)"),M$o=l(),B2=a("li"),Lhe=a("strong"),E$o=o("ibert"),C$o=o(" \u2014 "),SO=a("a"),w$o=o("IBertForMaskedLM"),A$o=o(" (I-BERT model)"),L$o=l(),I2=a("li"),yhe=a("strong"),y$o=o("layoutlm"),x$o=o(" \u2014 "),RO=a("a"),$$o=o("LayoutLMForMaskedLM"),k$o=o(" (LayoutLM model)"),S$o=l(),N2=a("li"),xhe=a("strong"),R$o=o("longformer"),P$o=o(" \u2014 "),PO=a("a"),B$o=o("LongformerForMaskedLM"),I$o=o(" (Longformer model)"),N$o=l(),q2=a("li"),$he=a("strong"),q$o=o("luke"),j$o=o(" \u2014 "),BO=a("a"),D$o=o("LukeForMaskedLM"),G$o=o(" (LUKE model)"),O$o=l(),j2=a("li"),khe=a("strong"),V$o=o("lxmert"),X$o=o(" \u2014 "),IO=a("a"),z$o=o("LxmertForPreTraining"),W$o=o(" (LXMERT model)"),Q$o=l(),D2=a("li"),She=a("strong"),H$o=o("megatron-bert"),U$o=o(" \u2014 "),NO=a("a"),J$o=o("MegatronBertForPreTraining"),Y$o=o(" (Megatron-BERT model)"),K$o=l(),G2=a("li"),Rhe=a("strong"),Z$o=o("mobilebert"),eko=o(" \u2014 "),qO=a("a"),oko=o("MobileBertForPreTraining"),rko=o(" (MobileBERT model)"),tko=l(),O2=a("li"),Phe=a("strong"),ako=o("mpnet"),nko=o(" \u2014 "),jO=a("a"),sko=o("MPNetForMaskedLM"),lko=o(" (MPNet model)"),iko=l(),V2=a("li"),Bhe=a("strong"),dko=o("mvp"),cko=o(" \u2014 "),DO=a("a"),fko=o("MvpForConditionalGeneration"),mko=o(" (MVP model)"),gko=l(),X2=a("li"),Ihe=a("strong"),hko=o("nezha"),pko=o(" \u2014 "),GO=a("a"),_ko=o("NezhaForPreTraining"),uko=o(" (Nezha model)"),bko=l(),z2=a("li"),Nhe=a("strong"),vko=o("openai-gpt"),Fko=o(" \u2014 "),OO=a("a"),Tko=o("OpenAIGPTLMHeadModel"),Mko=o(" (OpenAI GPT model)"),Eko=l(),W2=a("li"),qhe=a("strong"),Cko=o("retribert"),wko=o(" \u2014 "),VO=a("a"),Ako=o("RetriBertModel"),Lko=o(" (RetriBERT model)"),yko=l(),Q2=a("li"),jhe=a("strong"),xko=o("roberta"),$ko=o(" \u2014 "),XO=a("a"),kko=o("RobertaForMaskedLM"),Sko=o(" (RoBERTa model)"),Rko=l(),H2=a("li"),Dhe=a("strong"),Pko=o("splinter"),Bko=o(" \u2014 "),zO=a("a"),Iko=o("SplinterForPreTraining"),Nko=o(" (Splinter model)"),qko=l(),U2=a("li"),Ghe=a("strong"),jko=o("squeezebert"),Dko=o(" \u2014 "),WO=a("a"),Gko=o("SqueezeBertForMaskedLM"),Oko=o(" (SqueezeBERT model)"),Vko=l(),J2=a("li"),Ohe=a("strong"),Xko=o("t5"),zko=o(" \u2014 "),QO=a("a"),Wko=o("T5ForConditionalGeneration"),Qko=o(" (T5 model)"),Hko=l(),Y2=a("li"),Vhe=a("strong"),Uko=o("tapas"),Jko=o(" \u2014 "),HO=a("a"),Yko=o("TapasForMaskedLM"),Kko=o(" (TAPAS model)"),Zko=l(),K2=a("li"),Xhe=a("strong"),eSo=o("transfo-xl"),oSo=o(" \u2014 "),UO=a("a"),rSo=o("TransfoXLLMHeadModel"),tSo=o(" (Transformer-XL model)"),aSo=l(),Z2=a("li"),zhe=a("strong"),nSo=o("unispeech"),sSo=o(" \u2014 "),JO=a("a"),lSo=o("UniSpeechForPreTraining"),iSo=o(" (UniSpeech model)"),dSo=l(),e1=a("li"),Whe=a("strong"),cSo=o("unispeech-sat"),fSo=o(" \u2014 "),YO=a("a"),mSo=o("UniSpeechSatForPreTraining"),gSo=o(" (UniSpeechSat model)"),hSo=l(),o1=a("li"),Qhe=a("strong"),pSo=o("videomae"),_So=o(" \u2014 "),KO=a("a"),uSo=o("VideoMAEForPreTraining"),bSo=o(" (VideoMAE model)"),vSo=l(),r1=a("li"),Hhe=a("strong"),FSo=o("visual_bert"),TSo=o(" \u2014 "),ZO=a("a"),MSo=o("VisualBertForPreTraining"),ESo=o(" (VisualBERT model)"),CSo=l(),t1=a("li"),Uhe=a("strong"),wSo=o("vit_mae"),ASo=o(" \u2014 "),eV=a("a"),LSo=o("ViTMAEForPreTraining"),ySo=o(" (ViTMAE model)"),xSo=l(),a1=a("li"),Jhe=a("strong"),$So=o("wav2vec2"),kSo=o(" \u2014 "),oV=a("a"),SSo=o("Wav2Vec2ForPreTraining"),RSo=o(" (Wav2Vec2 model)"),PSo=l(),n1=a("li"),Yhe=a("strong"),BSo=o("wav2vec2-conformer"),ISo=o(" \u2014 "),rV=a("a"),NSo=o("Wav2Vec2ConformerForPreTraining"),qSo=o(" (Wav2Vec2-Conformer model)"),jSo=l(),s1=a("li"),Khe=a("strong"),DSo=o("xlm"),GSo=o(" \u2014 "),tV=a("a"),OSo=o("XLMWithLMHeadModel"),VSo=o(" (XLM model)"),XSo=l(),l1=a("li"),Zhe=a("strong"),zSo=o("xlm-roberta"),WSo=o(" \u2014 "),aV=a("a"),QSo=o("XLMRobertaForMaskedLM"),HSo=o(" (XLM-RoBERTa model)"),USo=l(),i1=a("li"),epe=a("strong"),JSo=o("xlm-roberta-xl"),YSo=o(" \u2014 "),nV=a("a"),KSo=o("XLMRobertaXLForMaskedLM"),ZSo=o(" (XLM-RoBERTa-XL model)"),eRo=l(),d1=a("li"),ope=a("strong"),oRo=o("xlnet"),rRo=o(" \u2014 "),sV=a("a"),tRo=o("XLNetLMHeadModel"),aRo=o(" (XLNet model)"),nRo=l(),c1=a("p"),sRo=o("The model is set in evaluation mode by default using "),rpe=a("code"),lRo=o("model.eval()"),iRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),dRo=o("model.train()"),cRo=l(),F(f1.$$.fragment),KWe=l(),rd=a("h2"),m1=a("a"),ape=a("span"),F(yL.$$.fragment),fRo=l(),npe=a("span"),mRo=o("AutoModelForCausalLM"),ZWe=l(),Po=a("div"),F(xL.$$.fragment),gRo=l(),td=a("p"),hRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lV=a("a"),pRo=o("from_pretrained()"),_Ro=o(" class method or the "),iV=a("a"),uRo=o("from_config()"),bRo=o(` class
method.`),vRo=l(),$L=a("p"),FRo=o("This class cannot be instantiated directly using "),spe=a("code"),TRo=o("__init__()"),MRo=o(" (throws an error)."),ERo=l(),mt=a("div"),F(kL.$$.fragment),CRo=l(),lpe=a("p"),wRo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ARo=l(),ad=a("p"),LRo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),yRo=o("not"),xRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),$Ro=o("from_pretrained()"),kRo=o(" to load the model weights."),SRo=l(),F(g1.$$.fragment),RRo=l(),Ze=a("div"),F(SL.$$.fragment),PRo=l(),dpe=a("p"),BRo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),IRo=l(),Oa=a("p"),NRo=o("The model class to instantiate is selected based on the "),cpe=a("code"),qRo=o("model_type"),jRo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),DRo=o("pretrained_model_name_or_path"),GRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),ORo=o("pretrained_model_name_or_path"),VRo=o(":"),XRo=l(),z=a("ul"),h1=a("li"),gpe=a("strong"),zRo=o("bart"),WRo=o(" \u2014 "),cV=a("a"),QRo=o("BartForCausalLM"),HRo=o(" (BART model)"),URo=l(),p1=a("li"),hpe=a("strong"),JRo=o("bert"),YRo=o(" \u2014 "),fV=a("a"),KRo=o("BertLMHeadModel"),ZRo=o(" (BERT model)"),ePo=l(),_1=a("li"),ppe=a("strong"),oPo=o("bert-generation"),rPo=o(" \u2014 "),mV=a("a"),tPo=o("BertGenerationDecoder"),aPo=o(" (Bert Generation model)"),nPo=l(),u1=a("li"),_pe=a("strong"),sPo=o("big_bird"),lPo=o(" \u2014 "),gV=a("a"),iPo=o("BigBirdForCausalLM"),dPo=o(" (BigBird model)"),cPo=l(),b1=a("li"),upe=a("strong"),fPo=o("bigbird_pegasus"),mPo=o(" \u2014 "),hV=a("a"),gPo=o("BigBirdPegasusForCausalLM"),hPo=o(" (BigBird-Pegasus model)"),pPo=l(),v1=a("li"),bpe=a("strong"),_Po=o("blenderbot"),uPo=o(" \u2014 "),pV=a("a"),bPo=o("BlenderbotForCausalLM"),vPo=o(" (Blenderbot model)"),FPo=l(),F1=a("li"),vpe=a("strong"),TPo=o("blenderbot-small"),MPo=o(" \u2014 "),_V=a("a"),EPo=o("BlenderbotSmallForCausalLM"),CPo=o(" (BlenderbotSmall model)"),wPo=l(),T1=a("li"),Fpe=a("strong"),APo=o("bloom"),LPo=o(" \u2014 "),uV=a("a"),yPo=o("BloomForCausalLM"),xPo=o(" (BLOOM model)"),$Po=l(),M1=a("li"),Tpe=a("strong"),kPo=o("camembert"),SPo=o(" \u2014 "),bV=a("a"),RPo=o("CamembertForCausalLM"),PPo=o(" (CamemBERT model)"),BPo=l(),E1=a("li"),Mpe=a("strong"),IPo=o("codegen"),NPo=o(" \u2014 "),vV=a("a"),qPo=o("CodeGenForCausalLM"),jPo=o(" (CodeGen model)"),DPo=l(),C1=a("li"),Epe=a("strong"),GPo=o("ctrl"),OPo=o(" \u2014 "),FV=a("a"),VPo=o("CTRLLMHeadModel"),XPo=o(" (CTRL model)"),zPo=l(),w1=a("li"),Cpe=a("strong"),WPo=o("data2vec-text"),QPo=o(" \u2014 "),TV=a("a"),HPo=o("Data2VecTextForCausalLM"),UPo=o(" (Data2VecText model)"),JPo=l(),A1=a("li"),wpe=a("strong"),YPo=o("electra"),KPo=o(" \u2014 "),MV=a("a"),ZPo=o("ElectraForCausalLM"),eBo=o(" (ELECTRA model)"),oBo=l(),L1=a("li"),Ape=a("strong"),rBo=o("gpt2"),tBo=o(" \u2014 "),EV=a("a"),aBo=o("GPT2LMHeadModel"),nBo=o(" (OpenAI GPT-2 model)"),sBo=l(),y1=a("li"),Lpe=a("strong"),lBo=o("gpt_neo"),iBo=o(" \u2014 "),CV=a("a"),dBo=o("GPTNeoForCausalLM"),cBo=o(" (GPT Neo model)"),fBo=l(),x1=a("li"),ype=a("strong"),mBo=o("gpt_neox"),gBo=o(" \u2014 "),wV=a("a"),hBo=o("GPTNeoXForCausalLM"),pBo=o(" (GPT NeoX model)"),_Bo=l(),$1=a("li"),xpe=a("strong"),uBo=o("gptj"),bBo=o(" \u2014 "),AV=a("a"),vBo=o("GPTJForCausalLM"),FBo=o(" (GPT-J model)"),TBo=l(),k1=a("li"),$pe=a("strong"),MBo=o("marian"),EBo=o(" \u2014 "),LV=a("a"),CBo=o("MarianForCausalLM"),wBo=o(" (Marian model)"),ABo=l(),S1=a("li"),kpe=a("strong"),LBo=o("mbart"),yBo=o(" \u2014 "),yV=a("a"),xBo=o("MBartForCausalLM"),$Bo=o(" (mBART model)"),kBo=l(),R1=a("li"),Spe=a("strong"),SBo=o("megatron-bert"),RBo=o(" \u2014 "),xV=a("a"),PBo=o("MegatronBertForCausalLM"),BBo=o(" (Megatron-BERT model)"),IBo=l(),P1=a("li"),Rpe=a("strong"),NBo=o("mvp"),qBo=o(" \u2014 "),$V=a("a"),jBo=o("MvpForCausalLM"),DBo=o(" (MVP model)"),GBo=l(),B1=a("li"),Ppe=a("strong"),OBo=o("openai-gpt"),VBo=o(" \u2014 "),kV=a("a"),XBo=o("OpenAIGPTLMHeadModel"),zBo=o(" (OpenAI GPT model)"),WBo=l(),I1=a("li"),Bpe=a("strong"),QBo=o("opt"),HBo=o(" \u2014 "),SV=a("a"),UBo=o("OPTForCausalLM"),JBo=o(" (OPT model)"),YBo=l(),N1=a("li"),Ipe=a("strong"),KBo=o("pegasus"),ZBo=o(" \u2014 "),RV=a("a"),eIo=o("PegasusForCausalLM"),oIo=o(" (Pegasus model)"),rIo=l(),q1=a("li"),Npe=a("strong"),tIo=o("plbart"),aIo=o(" \u2014 "),PV=a("a"),nIo=o("PLBartForCausalLM"),sIo=o(" (PLBart model)"),lIo=l(),j1=a("li"),qpe=a("strong"),iIo=o("prophetnet"),dIo=o(" \u2014 "),BV=a("a"),cIo=o("ProphetNetForCausalLM"),fIo=o(" (ProphetNet model)"),mIo=l(),D1=a("li"),jpe=a("strong"),gIo=o("qdqbert"),hIo=o(" \u2014 "),IV=a("a"),pIo=o("QDQBertLMHeadModel"),_Io=o(" (QDQBert model)"),uIo=l(),G1=a("li"),Dpe=a("strong"),bIo=o("reformer"),vIo=o(" \u2014 "),NV=a("a"),FIo=o("ReformerModelWithLMHead"),TIo=o(" (Reformer model)"),MIo=l(),O1=a("li"),Gpe=a("strong"),EIo=o("rembert"),CIo=o(" \u2014 "),qV=a("a"),wIo=o("RemBertForCausalLM"),AIo=o(" (RemBERT model)"),LIo=l(),V1=a("li"),Ope=a("strong"),yIo=o("roberta"),xIo=o(" \u2014 "),jV=a("a"),$Io=o("RobertaForCausalLM"),kIo=o(" (RoBERTa model)"),SIo=l(),X1=a("li"),Vpe=a("strong"),RIo=o("roformer"),PIo=o(" \u2014 "),DV=a("a"),BIo=o("RoFormerForCausalLM"),IIo=o(" (RoFormer model)"),NIo=l(),z1=a("li"),Xpe=a("strong"),qIo=o("speech_to_text_2"),jIo=o(" \u2014 "),GV=a("a"),DIo=o("Speech2Text2ForCausalLM"),GIo=o(" (Speech2Text2 model)"),OIo=l(),W1=a("li"),zpe=a("strong"),VIo=o("transfo-xl"),XIo=o(" \u2014 "),OV=a("a"),zIo=o("TransfoXLLMHeadModel"),WIo=o(" (Transformer-XL model)"),QIo=l(),Q1=a("li"),Wpe=a("strong"),HIo=o("trocr"),UIo=o(" \u2014 "),VV=a("a"),JIo=o("TrOCRForCausalLM"),YIo=o(" (TrOCR model)"),KIo=l(),H1=a("li"),Qpe=a("strong"),ZIo=o("xglm"),eNo=o(" \u2014 "),XV=a("a"),oNo=o("XGLMForCausalLM"),rNo=o(" (XGLM model)"),tNo=l(),U1=a("li"),Hpe=a("strong"),aNo=o("xlm"),nNo=o(" \u2014 "),zV=a("a"),sNo=o("XLMWithLMHeadModel"),lNo=o(" (XLM model)"),iNo=l(),J1=a("li"),Upe=a("strong"),dNo=o("xlm-prophetnet"),cNo=o(" \u2014 "),WV=a("a"),fNo=o("XLMProphetNetForCausalLM"),mNo=o(" (XLM-ProphetNet model)"),gNo=l(),Y1=a("li"),Jpe=a("strong"),hNo=o("xlm-roberta"),pNo=o(" \u2014 "),QV=a("a"),_No=o("XLMRobertaForCausalLM"),uNo=o(" (XLM-RoBERTa model)"),bNo=l(),K1=a("li"),Ype=a("strong"),vNo=o("xlm-roberta-xl"),FNo=o(" \u2014 "),HV=a("a"),TNo=o("XLMRobertaXLForCausalLM"),MNo=o(" (XLM-RoBERTa-XL model)"),ENo=l(),Z1=a("li"),Kpe=a("strong"),CNo=o("xlnet"),wNo=o(" \u2014 "),UV=a("a"),ANo=o("XLNetLMHeadModel"),LNo=o(" (XLNet model)"),yNo=l(),eb=a("p"),xNo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),$No=o("model.eval()"),kNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),SNo=o("model.train()"),RNo=l(),F(ob.$$.fragment),eQe=l(),nd=a("h2"),rb=a("a"),o_e=a("span"),F(RL.$$.fragment),PNo=l(),r_e=a("span"),BNo=o("AutoModelForMaskedLM"),oQe=l(),Bo=a("div"),F(PL.$$.fragment),INo=l(),sd=a("p"),NNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JV=a("a"),qNo=o("from_pretrained()"),jNo=o(" class method or the "),YV=a("a"),DNo=o("from_config()"),GNo=o(` class
method.`),ONo=l(),BL=a("p"),VNo=o("This class cannot be instantiated directly using "),t_e=a("code"),XNo=o("__init__()"),zNo=o(" (throws an error)."),WNo=l(),gt=a("div"),F(IL.$$.fragment),QNo=l(),a_e=a("p"),HNo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UNo=l(),ld=a("p"),JNo=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),YNo=o("not"),KNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),ZNo=o("from_pretrained()"),eqo=o(" to load the model weights."),oqo=l(),F(tb.$$.fragment),rqo=l(),eo=a("div"),F(NL.$$.fragment),tqo=l(),s_e=a("p"),aqo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nqo=l(),Va=a("p"),sqo=o("The model class to instantiate is selected based on the "),l_e=a("code"),lqo=o("model_type"),iqo=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),dqo=o("pretrained_model_name_or_path"),cqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),fqo=o("pretrained_model_name_or_path"),mqo=o(":"),gqo=l(),Q=a("ul"),ab=a("li"),c_e=a("strong"),hqo=o("albert"),pqo=o(" \u2014 "),ZV=a("a"),_qo=o("AlbertForMaskedLM"),uqo=o(" (ALBERT model)"),bqo=l(),nb=a("li"),f_e=a("strong"),vqo=o("bart"),Fqo=o(" \u2014 "),eX=a("a"),Tqo=o("BartForConditionalGeneration"),Mqo=o(" (BART model)"),Eqo=l(),sb=a("li"),m_e=a("strong"),Cqo=o("bert"),wqo=o(" \u2014 "),oX=a("a"),Aqo=o("BertForMaskedLM"),Lqo=o(" (BERT model)"),yqo=l(),lb=a("li"),g_e=a("strong"),xqo=o("big_bird"),$qo=o(" \u2014 "),rX=a("a"),kqo=o("BigBirdForMaskedLM"),Sqo=o(" (BigBird model)"),Rqo=l(),ib=a("li"),h_e=a("strong"),Pqo=o("camembert"),Bqo=o(" \u2014 "),tX=a("a"),Iqo=o("CamembertForMaskedLM"),Nqo=o(" (CamemBERT model)"),qqo=l(),db=a("li"),p_e=a("strong"),jqo=o("convbert"),Dqo=o(" \u2014 "),aX=a("a"),Gqo=o("ConvBertForMaskedLM"),Oqo=o(" (ConvBERT model)"),Vqo=l(),cb=a("li"),__e=a("strong"),Xqo=o("data2vec-text"),zqo=o(" \u2014 "),nX=a("a"),Wqo=o("Data2VecTextForMaskedLM"),Qqo=o(" (Data2VecText model)"),Hqo=l(),fb=a("li"),u_e=a("strong"),Uqo=o("deberta"),Jqo=o(" \u2014 "),sX=a("a"),Yqo=o("DebertaForMaskedLM"),Kqo=o(" (DeBERTa model)"),Zqo=l(),mb=a("li"),b_e=a("strong"),ejo=o("deberta-v2"),ojo=o(" \u2014 "),lX=a("a"),rjo=o("DebertaV2ForMaskedLM"),tjo=o(" (DeBERTa-v2 model)"),ajo=l(),gb=a("li"),v_e=a("strong"),njo=o("distilbert"),sjo=o(" \u2014 "),iX=a("a"),ljo=o("DistilBertForMaskedLM"),ijo=o(" (DistilBERT model)"),djo=l(),hb=a("li"),F_e=a("strong"),cjo=o("electra"),fjo=o(" \u2014 "),dX=a("a"),mjo=o("ElectraForMaskedLM"),gjo=o(" (ELECTRA model)"),hjo=l(),pb=a("li"),T_e=a("strong"),pjo=o("flaubert"),_jo=o(" \u2014 "),cX=a("a"),ujo=o("FlaubertWithLMHeadModel"),bjo=o(" (FlauBERT model)"),vjo=l(),_b=a("li"),M_e=a("strong"),Fjo=o("fnet"),Tjo=o(" \u2014 "),fX=a("a"),Mjo=o("FNetForMaskedLM"),Ejo=o(" (FNet model)"),Cjo=l(),ub=a("li"),E_e=a("strong"),wjo=o("funnel"),Ajo=o(" \u2014 "),mX=a("a"),Ljo=o("FunnelForMaskedLM"),yjo=o(" (Funnel Transformer model)"),xjo=l(),bb=a("li"),C_e=a("strong"),$jo=o("ibert"),kjo=o(" \u2014 "),gX=a("a"),Sjo=o("IBertForMaskedLM"),Rjo=o(" (I-BERT model)"),Pjo=l(),vb=a("li"),w_e=a("strong"),Bjo=o("layoutlm"),Ijo=o(" \u2014 "),hX=a("a"),Njo=o("LayoutLMForMaskedLM"),qjo=o(" (LayoutLM model)"),jjo=l(),Fb=a("li"),A_e=a("strong"),Djo=o("longformer"),Gjo=o(" \u2014 "),pX=a("a"),Ojo=o("LongformerForMaskedLM"),Vjo=o(" (Longformer model)"),Xjo=l(),Tb=a("li"),L_e=a("strong"),zjo=o("luke"),Wjo=o(" \u2014 "),_X=a("a"),Qjo=o("LukeForMaskedLM"),Hjo=o(" (LUKE model)"),Ujo=l(),Mb=a("li"),y_e=a("strong"),Jjo=o("mbart"),Yjo=o(" \u2014 "),uX=a("a"),Kjo=o("MBartForConditionalGeneration"),Zjo=o(" (mBART model)"),eDo=l(),Eb=a("li"),x_e=a("strong"),oDo=o("megatron-bert"),rDo=o(" \u2014 "),bX=a("a"),tDo=o("MegatronBertForMaskedLM"),aDo=o(" (Megatron-BERT model)"),nDo=l(),Cb=a("li"),$_e=a("strong"),sDo=o("mobilebert"),lDo=o(" \u2014 "),vX=a("a"),iDo=o("MobileBertForMaskedLM"),dDo=o(" (MobileBERT model)"),cDo=l(),wb=a("li"),k_e=a("strong"),fDo=o("mpnet"),mDo=o(" \u2014 "),FX=a("a"),gDo=o("MPNetForMaskedLM"),hDo=o(" (MPNet model)"),pDo=l(),Ab=a("li"),S_e=a("strong"),_Do=o("mvp"),uDo=o(" \u2014 "),TX=a("a"),bDo=o("MvpForConditionalGeneration"),vDo=o(" (MVP model)"),FDo=l(),Lb=a("li"),R_e=a("strong"),TDo=o("nezha"),MDo=o(" \u2014 "),MX=a("a"),EDo=o("NezhaForMaskedLM"),CDo=o(" (Nezha model)"),wDo=l(),yb=a("li"),P_e=a("strong"),ADo=o("nystromformer"),LDo=o(" \u2014 "),EX=a("a"),yDo=o("NystromformerForMaskedLM"),xDo=o(" (Nystr\xF6mformer model)"),$Do=l(),xb=a("li"),B_e=a("strong"),kDo=o("perceiver"),SDo=o(" \u2014 "),CX=a("a"),RDo=o("PerceiverForMaskedLM"),PDo=o(" (Perceiver model)"),BDo=l(),$b=a("li"),I_e=a("strong"),IDo=o("qdqbert"),NDo=o(" \u2014 "),wX=a("a"),qDo=o("QDQBertForMaskedLM"),jDo=o(" (QDQBert model)"),DDo=l(),kb=a("li"),N_e=a("strong"),GDo=o("reformer"),ODo=o(" \u2014 "),AX=a("a"),VDo=o("ReformerForMaskedLM"),XDo=o(" (Reformer model)"),zDo=l(),Sb=a("li"),q_e=a("strong"),WDo=o("rembert"),QDo=o(" \u2014 "),LX=a("a"),HDo=o("RemBertForMaskedLM"),UDo=o(" (RemBERT model)"),JDo=l(),Rb=a("li"),j_e=a("strong"),YDo=o("roberta"),KDo=o(" \u2014 "),yX=a("a"),ZDo=o("RobertaForMaskedLM"),eGo=o(" (RoBERTa model)"),oGo=l(),Pb=a("li"),D_e=a("strong"),rGo=o("roformer"),tGo=o(" \u2014 "),xX=a("a"),aGo=o("RoFormerForMaskedLM"),nGo=o(" (RoFormer model)"),sGo=l(),Bb=a("li"),G_e=a("strong"),lGo=o("squeezebert"),iGo=o(" \u2014 "),$X=a("a"),dGo=o("SqueezeBertForMaskedLM"),cGo=o(" (SqueezeBERT model)"),fGo=l(),Ib=a("li"),O_e=a("strong"),mGo=o("tapas"),gGo=o(" \u2014 "),kX=a("a"),hGo=o("TapasForMaskedLM"),pGo=o(" (TAPAS model)"),_Go=l(),Nb=a("li"),V_e=a("strong"),uGo=o("wav2vec2"),bGo=o(" \u2014 "),X_e=a("code"),vGo=o("Wav2Vec2ForMaskedLM"),FGo=o(" (Wav2Vec2 model)"),TGo=l(),qb=a("li"),z_e=a("strong"),MGo=o("xlm"),EGo=o(" \u2014 "),SX=a("a"),CGo=o("XLMWithLMHeadModel"),wGo=o(" (XLM model)"),AGo=l(),jb=a("li"),W_e=a("strong"),LGo=o("xlm-roberta"),yGo=o(" \u2014 "),RX=a("a"),xGo=o("XLMRobertaForMaskedLM"),$Go=o(" (XLM-RoBERTa model)"),kGo=l(),Db=a("li"),Q_e=a("strong"),SGo=o("xlm-roberta-xl"),RGo=o(" \u2014 "),PX=a("a"),PGo=o("XLMRobertaXLForMaskedLM"),BGo=o(" (XLM-RoBERTa-XL model)"),IGo=l(),Gb=a("li"),H_e=a("strong"),NGo=o("yoso"),qGo=o(" \u2014 "),BX=a("a"),jGo=o("YosoForMaskedLM"),DGo=o(" (YOSO model)"),GGo=l(),Ob=a("p"),OGo=o("The model is set in evaluation mode by default using "),U_e=a("code"),VGo=o("model.eval()"),XGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),zGo=o("model.train()"),WGo=l(),F(Vb.$$.fragment),rQe=l(),id=a("h2"),Xb=a("a"),Y_e=a("span"),F(qL.$$.fragment),QGo=l(),K_e=a("span"),HGo=o("AutoModelForSeq2SeqLM"),tQe=l(),Io=a("div"),F(jL.$$.fragment),UGo=l(),dd=a("p"),JGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=a("a"),YGo=o("from_pretrained()"),KGo=o(" class method or the "),NX=a("a"),ZGo=o("from_config()"),eOo=o(` class
method.`),oOo=l(),DL=a("p"),rOo=o("This class cannot be instantiated directly using "),Z_e=a("code"),tOo=o("__init__()"),aOo=o(" (throws an error)."),nOo=l(),ht=a("div"),F(GL.$$.fragment),sOo=l(),eue=a("p"),lOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iOo=l(),cd=a("p"),dOo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),cOo=o("not"),fOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),mOo=o("from_pretrained()"),gOo=o(" to load the model weights."),hOo=l(),F(zb.$$.fragment),pOo=l(),oo=a("div"),F(OL.$$.fragment),_Oo=l(),rue=a("p"),uOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bOo=l(),Xa=a("p"),vOo=o("The model class to instantiate is selected based on the "),tue=a("code"),FOo=o("model_type"),TOo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),MOo=o("pretrained_model_name_or_path"),EOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(":"),AOo=l(),me=a("ul"),Wb=a("li"),sue=a("strong"),LOo=o("bart"),yOo=o(" \u2014 "),jX=a("a"),xOo=o("BartForConditionalGeneration"),$Oo=o(" (BART model)"),kOo=l(),Qb=a("li"),lue=a("strong"),SOo=o("bigbird_pegasus"),ROo=o(" \u2014 "),DX=a("a"),POo=o("BigBirdPegasusForConditionalGeneration"),BOo=o(" (BigBird-Pegasus model)"),IOo=l(),Hb=a("li"),iue=a("strong"),NOo=o("blenderbot"),qOo=o(" \u2014 "),GX=a("a"),jOo=o("BlenderbotForConditionalGeneration"),DOo=o(" (Blenderbot model)"),GOo=l(),Ub=a("li"),due=a("strong"),OOo=o("blenderbot-small"),VOo=o(" \u2014 "),OX=a("a"),XOo=o("BlenderbotSmallForConditionalGeneration"),zOo=o(" (BlenderbotSmall model)"),WOo=l(),Jb=a("li"),cue=a("strong"),QOo=o("encoder-decoder"),HOo=o(" \u2014 "),VX=a("a"),UOo=o("EncoderDecoderModel"),JOo=o(" (Encoder decoder model)"),YOo=l(),Yb=a("li"),fue=a("strong"),KOo=o("fsmt"),ZOo=o(" \u2014 "),XX=a("a"),eVo=o("FSMTForConditionalGeneration"),oVo=o(" (FairSeq Machine-Translation model)"),rVo=l(),Kb=a("li"),mue=a("strong"),tVo=o("led"),aVo=o(" \u2014 "),zX=a("a"),nVo=o("LEDForConditionalGeneration"),sVo=o(" (LED model)"),lVo=l(),Zb=a("li"),gue=a("strong"),iVo=o("longt5"),dVo=o(" \u2014 "),WX=a("a"),cVo=o("LongT5ForConditionalGeneration"),fVo=o(" (LongT5 model)"),mVo=l(),ev=a("li"),hue=a("strong"),gVo=o("m2m_100"),hVo=o(" \u2014 "),QX=a("a"),pVo=o("M2M100ForConditionalGeneration"),_Vo=o(" (M2M100 model)"),uVo=l(),ov=a("li"),pue=a("strong"),bVo=o("marian"),vVo=o(" \u2014 "),HX=a("a"),FVo=o("MarianMTModel"),TVo=o(" (Marian model)"),MVo=l(),rv=a("li"),_ue=a("strong"),EVo=o("mbart"),CVo=o(" \u2014 "),UX=a("a"),wVo=o("MBartForConditionalGeneration"),AVo=o(" (mBART model)"),LVo=l(),tv=a("li"),uue=a("strong"),yVo=o("mt5"),xVo=o(" \u2014 "),JX=a("a"),$Vo=o("MT5ForConditionalGeneration"),kVo=o(" (MT5 model)"),SVo=l(),av=a("li"),bue=a("strong"),RVo=o("mvp"),PVo=o(" \u2014 "),YX=a("a"),BVo=o("MvpForConditionalGeneration"),IVo=o(" (MVP model)"),NVo=l(),nv=a("li"),vue=a("strong"),qVo=o("nllb"),jVo=o(" \u2014 "),KX=a("a"),DVo=o("M2M100ForConditionalGeneration"),GVo=o(" (NLLB model)"),OVo=l(),sv=a("li"),Fue=a("strong"),VVo=o("pegasus"),XVo=o(" \u2014 "),ZX=a("a"),zVo=o("PegasusForConditionalGeneration"),WVo=o(" (Pegasus model)"),QVo=l(),lv=a("li"),Tue=a("strong"),HVo=o("plbart"),UVo=o(" \u2014 "),ez=a("a"),JVo=o("PLBartForConditionalGeneration"),YVo=o(" (PLBart model)"),KVo=l(),iv=a("li"),Mue=a("strong"),ZVo=o("prophetnet"),eXo=o(" \u2014 "),oz=a("a"),oXo=o("ProphetNetForConditionalGeneration"),rXo=o(" (ProphetNet model)"),tXo=l(),dv=a("li"),Eue=a("strong"),aXo=o("t5"),nXo=o(" \u2014 "),rz=a("a"),sXo=o("T5ForConditionalGeneration"),lXo=o(" (T5 model)"),iXo=l(),cv=a("li"),Cue=a("strong"),dXo=o("xlm-prophetnet"),cXo=o(" \u2014 "),tz=a("a"),fXo=o("XLMProphetNetForConditionalGeneration"),mXo=o(" (XLM-ProphetNet model)"),gXo=l(),fv=a("p"),hXo=o("The model is set in evaluation mode by default using "),wue=a("code"),pXo=o("model.eval()"),_Xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),uXo=o("model.train()"),bXo=l(),F(mv.$$.fragment),aQe=l(),fd=a("h2"),gv=a("a"),Lue=a("span"),F(VL.$$.fragment),vXo=l(),yue=a("span"),FXo=o("AutoModelForSequenceClassification"),nQe=l(),No=a("div"),F(XL.$$.fragment),TXo=l(),md=a("p"),MXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),az=a("a"),EXo=o("from_pretrained()"),CXo=o(" class method or the "),nz=a("a"),wXo=o("from_config()"),AXo=o(` class
method.`),LXo=l(),zL=a("p"),yXo=o("This class cannot be instantiated directly using "),xue=a("code"),xXo=o("__init__()"),$Xo=o(" (throws an error)."),kXo=l(),pt=a("div"),F(WL.$$.fragment),SXo=l(),$ue=a("p"),RXo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PXo=l(),gd=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),IXo=o("not"),NXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),qXo=o("from_pretrained()"),jXo=o(" to load the model weights."),DXo=l(),F(hv.$$.fragment),GXo=l(),ro=a("div"),F(QL.$$.fragment),OXo=l(),Sue=a("p"),VXo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XXo=l(),za=a("p"),zXo=o("The model class to instantiate is selected based on the "),Rue=a("code"),WXo=o("model_type"),QXo=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),HXo=o("pretrained_model_name_or_path"),UXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),JXo=o("pretrained_model_name_or_path"),YXo=o(":"),KXo=l(),B=a("ul"),pv=a("li"),Iue=a("strong"),ZXo=o("albert"),ezo=o(" \u2014 "),lz=a("a"),ozo=o("AlbertForSequenceClassification"),rzo=o(" (ALBERT model)"),tzo=l(),_v=a("li"),Nue=a("strong"),azo=o("bart"),nzo=o(" \u2014 "),iz=a("a"),szo=o("BartForSequenceClassification"),lzo=o(" (BART model)"),izo=l(),uv=a("li"),que=a("strong"),dzo=o("bert"),czo=o(" \u2014 "),dz=a("a"),fzo=o("BertForSequenceClassification"),mzo=o(" (BERT model)"),gzo=l(),bv=a("li"),jue=a("strong"),hzo=o("big_bird"),pzo=o(" \u2014 "),cz=a("a"),_zo=o("BigBirdForSequenceClassification"),uzo=o(" (BigBird model)"),bzo=l(),vv=a("li"),Due=a("strong"),vzo=o("bigbird_pegasus"),Fzo=o(" \u2014 "),fz=a("a"),Tzo=o("BigBirdPegasusForSequenceClassification"),Mzo=o(" (BigBird-Pegasus model)"),Ezo=l(),Fv=a("li"),Gue=a("strong"),Czo=o("bloom"),wzo=o(" \u2014 "),mz=a("a"),Azo=o("BloomForSequenceClassification"),Lzo=o(" (BLOOM model)"),yzo=l(),Tv=a("li"),Oue=a("strong"),xzo=o("camembert"),$zo=o(" \u2014 "),gz=a("a"),kzo=o("CamembertForSequenceClassification"),Szo=o(" (CamemBERT model)"),Rzo=l(),Mv=a("li"),Vue=a("strong"),Pzo=o("canine"),Bzo=o(" \u2014 "),hz=a("a"),Izo=o("CanineForSequenceClassification"),Nzo=o(" (CANINE model)"),qzo=l(),Ev=a("li"),Xue=a("strong"),jzo=o("convbert"),Dzo=o(" \u2014 "),pz=a("a"),Gzo=o("ConvBertForSequenceClassification"),Ozo=o(" (ConvBERT model)"),Vzo=l(),Cv=a("li"),zue=a("strong"),Xzo=o("ctrl"),zzo=o(" \u2014 "),_z=a("a"),Wzo=o("CTRLForSequenceClassification"),Qzo=o(" (CTRL model)"),Hzo=l(),wv=a("li"),Wue=a("strong"),Uzo=o("data2vec-text"),Jzo=o(" \u2014 "),uz=a("a"),Yzo=o("Data2VecTextForSequenceClassification"),Kzo=o(" (Data2VecText model)"),Zzo=l(),Av=a("li"),Que=a("strong"),eWo=o("deberta"),oWo=o(" \u2014 "),bz=a("a"),rWo=o("DebertaForSequenceClassification"),tWo=o(" (DeBERTa model)"),aWo=l(),Lv=a("li"),Hue=a("strong"),nWo=o("deberta-v2"),sWo=o(" \u2014 "),vz=a("a"),lWo=o("DebertaV2ForSequenceClassification"),iWo=o(" (DeBERTa-v2 model)"),dWo=l(),yv=a("li"),Uue=a("strong"),cWo=o("distilbert"),fWo=o(" \u2014 "),Fz=a("a"),mWo=o("DistilBertForSequenceClassification"),gWo=o(" (DistilBERT model)"),hWo=l(),xv=a("li"),Jue=a("strong"),pWo=o("electra"),_Wo=o(" \u2014 "),Tz=a("a"),uWo=o("ElectraForSequenceClassification"),bWo=o(" (ELECTRA model)"),vWo=l(),$v=a("li"),Yue=a("strong"),FWo=o("flaubert"),TWo=o(" \u2014 "),Mz=a("a"),MWo=o("FlaubertForSequenceClassification"),EWo=o(" (FlauBERT model)"),CWo=l(),kv=a("li"),Kue=a("strong"),wWo=o("fnet"),AWo=o(" \u2014 "),Ez=a("a"),LWo=o("FNetForSequenceClassification"),yWo=o(" (FNet model)"),xWo=l(),Sv=a("li"),Zue=a("strong"),$Wo=o("funnel"),kWo=o(" \u2014 "),Cz=a("a"),SWo=o("FunnelForSequenceClassification"),RWo=o(" (Funnel Transformer model)"),PWo=l(),Rv=a("li"),e2e=a("strong"),BWo=o("gpt2"),IWo=o(" \u2014 "),wz=a("a"),NWo=o("GPT2ForSequenceClassification"),qWo=o(" (OpenAI GPT-2 model)"),jWo=l(),Pv=a("li"),o2e=a("strong"),DWo=o("gpt_neo"),GWo=o(" \u2014 "),Az=a("a"),OWo=o("GPTNeoForSequenceClassification"),VWo=o(" (GPT Neo model)"),XWo=l(),Bv=a("li"),r2e=a("strong"),zWo=o("gptj"),WWo=o(" \u2014 "),Lz=a("a"),QWo=o("GPTJForSequenceClassification"),HWo=o(" (GPT-J model)"),UWo=l(),Iv=a("li"),t2e=a("strong"),JWo=o("ibert"),YWo=o(" \u2014 "),yz=a("a"),KWo=o("IBertForSequenceClassification"),ZWo=o(" (I-BERT model)"),eQo=l(),Nv=a("li"),a2e=a("strong"),oQo=o("layoutlm"),rQo=o(" \u2014 "),xz=a("a"),tQo=o("LayoutLMForSequenceClassification"),aQo=o(" (LayoutLM model)"),nQo=l(),qv=a("li"),n2e=a("strong"),sQo=o("layoutlmv2"),lQo=o(" \u2014 "),$z=a("a"),iQo=o("LayoutLMv2ForSequenceClassification"),dQo=o(" (LayoutLMv2 model)"),cQo=l(),jv=a("li"),s2e=a("strong"),fQo=o("layoutlmv3"),mQo=o(" \u2014 "),kz=a("a"),gQo=o("LayoutLMv3ForSequenceClassification"),hQo=o(" (LayoutLMv3 model)"),pQo=l(),Dv=a("li"),l2e=a("strong"),_Qo=o("led"),uQo=o(" \u2014 "),Sz=a("a"),bQo=o("LEDForSequenceClassification"),vQo=o(" (LED model)"),FQo=l(),Gv=a("li"),i2e=a("strong"),TQo=o("longformer"),MQo=o(" \u2014 "),Rz=a("a"),EQo=o("LongformerForSequenceClassification"),CQo=o(" (Longformer model)"),wQo=l(),Ov=a("li"),d2e=a("strong"),AQo=o("luke"),LQo=o(" \u2014 "),Pz=a("a"),yQo=o("LukeForSequenceClassification"),xQo=o(" (LUKE model)"),$Qo=l(),Vv=a("li"),c2e=a("strong"),kQo=o("mbart"),SQo=o(" \u2014 "),Bz=a("a"),RQo=o("MBartForSequenceClassification"),PQo=o(" (mBART model)"),BQo=l(),Xv=a("li"),f2e=a("strong"),IQo=o("megatron-bert"),NQo=o(" \u2014 "),Iz=a("a"),qQo=o("MegatronBertForSequenceClassification"),jQo=o(" (Megatron-BERT model)"),DQo=l(),zv=a("li"),m2e=a("strong"),GQo=o("mobilebert"),OQo=o(" \u2014 "),Nz=a("a"),VQo=o("MobileBertForSequenceClassification"),XQo=o(" (MobileBERT model)"),zQo=l(),Wv=a("li"),g2e=a("strong"),WQo=o("mpnet"),QQo=o(" \u2014 "),qz=a("a"),HQo=o("MPNetForSequenceClassification"),UQo=o(" (MPNet model)"),JQo=l(),Qv=a("li"),h2e=a("strong"),YQo=o("mvp"),KQo=o(" \u2014 "),jz=a("a"),ZQo=o("MvpForSequenceClassification"),eHo=o(" (MVP model)"),oHo=l(),Hv=a("li"),p2e=a("strong"),rHo=o("nezha"),tHo=o(" \u2014 "),Dz=a("a"),aHo=o("NezhaForSequenceClassification"),nHo=o(" (Nezha model)"),sHo=l(),Uv=a("li"),_2e=a("strong"),lHo=o("nystromformer"),iHo=o(" \u2014 "),Gz=a("a"),dHo=o("NystromformerForSequenceClassification"),cHo=o(" (Nystr\xF6mformer model)"),fHo=l(),Jv=a("li"),u2e=a("strong"),mHo=o("openai-gpt"),gHo=o(" \u2014 "),Oz=a("a"),hHo=o("OpenAIGPTForSequenceClassification"),pHo=o(" (OpenAI GPT model)"),_Ho=l(),Yv=a("li"),b2e=a("strong"),uHo=o("opt"),bHo=o(" \u2014 "),Vz=a("a"),vHo=o("OPTForSequenceClassification"),FHo=o(" (OPT model)"),THo=l(),Kv=a("li"),v2e=a("strong"),MHo=o("perceiver"),EHo=o(" \u2014 "),Xz=a("a"),CHo=o("PerceiverForSequenceClassification"),wHo=o(" (Perceiver model)"),AHo=l(),Zv=a("li"),F2e=a("strong"),LHo=o("plbart"),yHo=o(" \u2014 "),zz=a("a"),xHo=o("PLBartForSequenceClassification"),$Ho=o(" (PLBart model)"),kHo=l(),e5=a("li"),T2e=a("strong"),SHo=o("qdqbert"),RHo=o(" \u2014 "),Wz=a("a"),PHo=o("QDQBertForSequenceClassification"),BHo=o(" (QDQBert model)"),IHo=l(),o5=a("li"),M2e=a("strong"),NHo=o("reformer"),qHo=o(" \u2014 "),Qz=a("a"),jHo=o("ReformerForSequenceClassification"),DHo=o(" (Reformer model)"),GHo=l(),r5=a("li"),E2e=a("strong"),OHo=o("rembert"),VHo=o(" \u2014 "),Hz=a("a"),XHo=o("RemBertForSequenceClassification"),zHo=o(" (RemBERT model)"),WHo=l(),t5=a("li"),C2e=a("strong"),QHo=o("roberta"),HHo=o(" \u2014 "),Uz=a("a"),UHo=o("RobertaForSequenceClassification"),JHo=o(" (RoBERTa model)"),YHo=l(),a5=a("li"),w2e=a("strong"),KHo=o("roformer"),ZHo=o(" \u2014 "),Jz=a("a"),eUo=o("RoFormerForSequenceClassification"),oUo=o(" (RoFormer model)"),rUo=l(),n5=a("li"),A2e=a("strong"),tUo=o("squeezebert"),aUo=o(" \u2014 "),Yz=a("a"),nUo=o("SqueezeBertForSequenceClassification"),sUo=o(" (SqueezeBERT model)"),lUo=l(),s5=a("li"),L2e=a("strong"),iUo=o("tapas"),dUo=o(" \u2014 "),Kz=a("a"),cUo=o("TapasForSequenceClassification"),fUo=o(" (TAPAS model)"),mUo=l(),l5=a("li"),y2e=a("strong"),gUo=o("transfo-xl"),hUo=o(" \u2014 "),Zz=a("a"),pUo=o("TransfoXLForSequenceClassification"),_Uo=o(" (Transformer-XL model)"),uUo=l(),i5=a("li"),x2e=a("strong"),bUo=o("xlm"),vUo=o(" \u2014 "),eW=a("a"),FUo=o("XLMForSequenceClassification"),TUo=o(" (XLM model)"),MUo=l(),d5=a("li"),$2e=a("strong"),EUo=o("xlm-roberta"),CUo=o(" \u2014 "),oW=a("a"),wUo=o("XLMRobertaForSequenceClassification"),AUo=o(" (XLM-RoBERTa model)"),LUo=l(),c5=a("li"),k2e=a("strong"),yUo=o("xlm-roberta-xl"),xUo=o(" \u2014 "),rW=a("a"),$Uo=o("XLMRobertaXLForSequenceClassification"),kUo=o(" (XLM-RoBERTa-XL model)"),SUo=l(),f5=a("li"),S2e=a("strong"),RUo=o("xlnet"),PUo=o(" \u2014 "),tW=a("a"),BUo=o("XLNetForSequenceClassification"),IUo=o(" (XLNet model)"),NUo=l(),m5=a("li"),R2e=a("strong"),qUo=o("yoso"),jUo=o(" \u2014 "),aW=a("a"),DUo=o("YosoForSequenceClassification"),GUo=o(" (YOSO model)"),OUo=l(),g5=a("p"),VUo=o("The model is set in evaluation mode by default using "),P2e=a("code"),XUo=o("model.eval()"),zUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),WUo=o("model.train()"),QUo=l(),F(h5.$$.fragment),sQe=l(),hd=a("h2"),p5=a("a"),I2e=a("span"),F(HL.$$.fragment),HUo=l(),N2e=a("span"),UUo=o("AutoModelForMultipleChoice"),lQe=l(),qo=a("div"),F(UL.$$.fragment),JUo=l(),pd=a("p"),YUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nW=a("a"),KUo=o("from_pretrained()"),ZUo=o(" class method or the "),sW=a("a"),eJo=o("from_config()"),oJo=o(` class
method.`),rJo=l(),JL=a("p"),tJo=o("This class cannot be instantiated directly using "),q2e=a("code"),aJo=o("__init__()"),nJo=o(" (throws an error)."),sJo=l(),_t=a("div"),F(YL.$$.fragment),lJo=l(),j2e=a("p"),iJo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dJo=l(),_d=a("p"),cJo=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),fJo=o("not"),mJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),gJo=o("from_pretrained()"),hJo=o(" to load the model weights."),pJo=l(),F(_5.$$.fragment),_Jo=l(),to=a("div"),F(KL.$$.fragment),uJo=l(),G2e=a("p"),bJo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vJo=l(),Wa=a("p"),FJo=o("The model class to instantiate is selected based on the "),O2e=a("code"),TJo=o("model_type"),MJo=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),EJo=o("pretrained_model_name_or_path"),CJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(":"),LJo=l(),Z=a("ul"),u5=a("li"),z2e=a("strong"),yJo=o("albert"),xJo=o(" \u2014 "),iW=a("a"),$Jo=o("AlbertForMultipleChoice"),kJo=o(" (ALBERT model)"),SJo=l(),b5=a("li"),W2e=a("strong"),RJo=o("bert"),PJo=o(" \u2014 "),dW=a("a"),BJo=o("BertForMultipleChoice"),IJo=o(" (BERT model)"),NJo=l(),v5=a("li"),Q2e=a("strong"),qJo=o("big_bird"),jJo=o(" \u2014 "),cW=a("a"),DJo=o("BigBirdForMultipleChoice"),GJo=o(" (BigBird model)"),OJo=l(),F5=a("li"),H2e=a("strong"),VJo=o("camembert"),XJo=o(" \u2014 "),fW=a("a"),zJo=o("CamembertForMultipleChoice"),WJo=o(" (CamemBERT model)"),QJo=l(),T5=a("li"),U2e=a("strong"),HJo=o("canine"),UJo=o(" \u2014 "),mW=a("a"),JJo=o("CanineForMultipleChoice"),YJo=o(" (CANINE model)"),KJo=l(),M5=a("li"),J2e=a("strong"),ZJo=o("convbert"),eYo=o(" \u2014 "),gW=a("a"),oYo=o("ConvBertForMultipleChoice"),rYo=o(" (ConvBERT model)"),tYo=l(),E5=a("li"),Y2e=a("strong"),aYo=o("data2vec-text"),nYo=o(" \u2014 "),hW=a("a"),sYo=o("Data2VecTextForMultipleChoice"),lYo=o(" (Data2VecText model)"),iYo=l(),C5=a("li"),K2e=a("strong"),dYo=o("deberta-v2"),cYo=o(" \u2014 "),pW=a("a"),fYo=o("DebertaV2ForMultipleChoice"),mYo=o(" (DeBERTa-v2 model)"),gYo=l(),w5=a("li"),Z2e=a("strong"),hYo=o("distilbert"),pYo=o(" \u2014 "),_W=a("a"),_Yo=o("DistilBertForMultipleChoice"),uYo=o(" (DistilBERT model)"),bYo=l(),A5=a("li"),e1e=a("strong"),vYo=o("electra"),FYo=o(" \u2014 "),uW=a("a"),TYo=o("ElectraForMultipleChoice"),MYo=o(" (ELECTRA model)"),EYo=l(),L5=a("li"),o1e=a("strong"),CYo=o("flaubert"),wYo=o(" \u2014 "),bW=a("a"),AYo=o("FlaubertForMultipleChoice"),LYo=o(" (FlauBERT model)"),yYo=l(),y5=a("li"),r1e=a("strong"),xYo=o("fnet"),$Yo=o(" \u2014 "),vW=a("a"),kYo=o("FNetForMultipleChoice"),SYo=o(" (FNet model)"),RYo=l(),x5=a("li"),t1e=a("strong"),PYo=o("funnel"),BYo=o(" \u2014 "),FW=a("a"),IYo=o("FunnelForMultipleChoice"),NYo=o(" (Funnel Transformer model)"),qYo=l(),$5=a("li"),a1e=a("strong"),jYo=o("ibert"),DYo=o(" \u2014 "),TW=a("a"),GYo=o("IBertForMultipleChoice"),OYo=o(" (I-BERT model)"),VYo=l(),k5=a("li"),n1e=a("strong"),XYo=o("longformer"),zYo=o(" \u2014 "),MW=a("a"),WYo=o("LongformerForMultipleChoice"),QYo=o(" (Longformer model)"),HYo=l(),S5=a("li"),s1e=a("strong"),UYo=o("luke"),JYo=o(" \u2014 "),EW=a("a"),YYo=o("LukeForMultipleChoice"),KYo=o(" (LUKE model)"),ZYo=l(),R5=a("li"),l1e=a("strong"),eKo=o("megatron-bert"),oKo=o(" \u2014 "),CW=a("a"),rKo=o("MegatronBertForMultipleChoice"),tKo=o(" (Megatron-BERT model)"),aKo=l(),P5=a("li"),i1e=a("strong"),nKo=o("mobilebert"),sKo=o(" \u2014 "),wW=a("a"),lKo=o("MobileBertForMultipleChoice"),iKo=o(" (MobileBERT model)"),dKo=l(),B5=a("li"),d1e=a("strong"),cKo=o("mpnet"),fKo=o(" \u2014 "),AW=a("a"),mKo=o("MPNetForMultipleChoice"),gKo=o(" (MPNet model)"),hKo=l(),I5=a("li"),c1e=a("strong"),pKo=o("nezha"),_Ko=o(" \u2014 "),LW=a("a"),uKo=o("NezhaForMultipleChoice"),bKo=o(" (Nezha model)"),vKo=l(),N5=a("li"),f1e=a("strong"),FKo=o("nystromformer"),TKo=o(" \u2014 "),yW=a("a"),MKo=o("NystromformerForMultipleChoice"),EKo=o(" (Nystr\xF6mformer model)"),CKo=l(),q5=a("li"),m1e=a("strong"),wKo=o("qdqbert"),AKo=o(" \u2014 "),xW=a("a"),LKo=o("QDQBertForMultipleChoice"),yKo=o(" (QDQBert model)"),xKo=l(),j5=a("li"),g1e=a("strong"),$Ko=o("rembert"),kKo=o(" \u2014 "),$W=a("a"),SKo=o("RemBertForMultipleChoice"),RKo=o(" (RemBERT model)"),PKo=l(),D5=a("li"),h1e=a("strong"),BKo=o("roberta"),IKo=o(" \u2014 "),kW=a("a"),NKo=o("RobertaForMultipleChoice"),qKo=o(" (RoBERTa model)"),jKo=l(),G5=a("li"),p1e=a("strong"),DKo=o("roformer"),GKo=o(" \u2014 "),SW=a("a"),OKo=o("RoFormerForMultipleChoice"),VKo=o(" (RoFormer model)"),XKo=l(),O5=a("li"),_1e=a("strong"),zKo=o("squeezebert"),WKo=o(" \u2014 "),RW=a("a"),QKo=o("SqueezeBertForMultipleChoice"),HKo=o(" (SqueezeBERT model)"),UKo=l(),V5=a("li"),u1e=a("strong"),JKo=o("xlm"),YKo=o(" \u2014 "),PW=a("a"),KKo=o("XLMForMultipleChoice"),ZKo=o(" (XLM model)"),eZo=l(),X5=a("li"),b1e=a("strong"),oZo=o("xlm-roberta"),rZo=o(" \u2014 "),BW=a("a"),tZo=o("XLMRobertaForMultipleChoice"),aZo=o(" (XLM-RoBERTa model)"),nZo=l(),z5=a("li"),v1e=a("strong"),sZo=o("xlm-roberta-xl"),lZo=o(" \u2014 "),IW=a("a"),iZo=o("XLMRobertaXLForMultipleChoice"),dZo=o(" (XLM-RoBERTa-XL model)"),cZo=l(),W5=a("li"),F1e=a("strong"),fZo=o("xlnet"),mZo=o(" \u2014 "),NW=a("a"),gZo=o("XLNetForMultipleChoice"),hZo=o(" (XLNet model)"),pZo=l(),Q5=a("li"),T1e=a("strong"),_Zo=o("yoso"),uZo=o(" \u2014 "),qW=a("a"),bZo=o("YosoForMultipleChoice"),vZo=o(" (YOSO model)"),FZo=l(),H5=a("p"),TZo=o("The model is set in evaluation mode by default using "),M1e=a("code"),MZo=o("model.eval()"),EZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E1e=a("code"),CZo=o("model.train()"),wZo=l(),F(U5.$$.fragment),iQe=l(),ud=a("h2"),J5=a("a"),C1e=a("span"),F(ZL.$$.fragment),AZo=l(),w1e=a("span"),LZo=o("AutoModelForNextSentencePrediction"),dQe=l(),jo=a("div"),F(ey.$$.fragment),yZo=l(),bd=a("p"),xZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jW=a("a"),$Zo=o("from_pretrained()"),kZo=o(" class method or the "),DW=a("a"),SZo=o("from_config()"),RZo=o(` class
method.`),PZo=l(),oy=a("p"),BZo=o("This class cannot be instantiated directly using "),A1e=a("code"),IZo=o("__init__()"),NZo=o(" (throws an error)."),qZo=l(),ut=a("div"),F(ry.$$.fragment),jZo=l(),L1e=a("p"),DZo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GZo=l(),vd=a("p"),OZo=o(`Note:
Loading a model from its configuration file does `),y1e=a("strong"),VZo=o("not"),XZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),zZo=o("from_pretrained()"),WZo=o(" to load the model weights."),QZo=l(),F(Y5.$$.fragment),HZo=l(),ao=a("div"),F(ty.$$.fragment),UZo=l(),x1e=a("p"),JZo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YZo=l(),Qa=a("p"),KZo=o("The model class to instantiate is selected based on the "),$1e=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),Do=a("ul"),K5=a("li"),R1e=a("strong"),ser=o("bert"),ler=o(" \u2014 "),OW=a("a"),ier=o("BertForNextSentencePrediction"),der=o(" (BERT model)"),cer=l(),Z5=a("li"),P1e=a("strong"),fer=o("fnet"),mer=o(" \u2014 "),VW=a("a"),ger=o("FNetForNextSentencePrediction"),her=o(" (FNet model)"),per=l(),eF=a("li"),B1e=a("strong"),_er=o("megatron-bert"),uer=o(" \u2014 "),XW=a("a"),ber=o("MegatronBertForNextSentencePrediction"),ver=o(" (Megatron-BERT model)"),Fer=l(),oF=a("li"),I1e=a("strong"),Ter=o("mobilebert"),Mer=o(" \u2014 "),zW=a("a"),Eer=o("MobileBertForNextSentencePrediction"),Cer=o(" (MobileBERT model)"),wer=l(),rF=a("li"),N1e=a("strong"),Aer=o("nezha"),Ler=o(" \u2014 "),WW=a("a"),yer=o("NezhaForNextSentencePrediction"),xer=o(" (Nezha model)"),$er=l(),tF=a("li"),q1e=a("strong"),ker=o("qdqbert"),Ser=o(" \u2014 "),QW=a("a"),Rer=o("QDQBertForNextSentencePrediction"),Per=o(" (QDQBert model)"),Ber=l(),aF=a("p"),Ier=o("The model is set in evaluation mode by default using "),j1e=a("code"),Ner=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=a("code"),jer=o("model.train()"),Der=l(),F(nF.$$.fragment),cQe=l(),Fd=a("h2"),sF=a("a"),G1e=a("span"),F(ay.$$.fragment),Ger=l(),O1e=a("span"),Oer=o("AutoModelForTokenClassification"),fQe=l(),Go=a("div"),F(ny.$$.fragment),Ver=l(),Td=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HW=a("a"),zer=o("from_pretrained()"),Wer=o(" class method or the "),UW=a("a"),Qer=o("from_config()"),Her=o(` class
method.`),Uer=l(),sy=a("p"),Jer=o("This class cannot be instantiated directly using "),V1e=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),bt=a("div"),F(ly.$$.fragment),eor=l(),X1e=a("p"),oor=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ror=l(),Md=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(lF.$$.fragment),dor=l(),no=a("div"),F(iy.$$.fragment),cor=l(),W1e=a("p"),mor=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gor=l(),Ha=a("p"),hor=o("The model class to instantiate is selected based on the "),Q1e=a("code"),por=o("model_type"),_or=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),uor=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),U=a("ul"),iF=a("li"),J1e=a("strong"),Mor=o("albert"),Eor=o(" \u2014 "),YW=a("a"),Cor=o("AlbertForTokenClassification"),wor=o(" (ALBERT model)"),Aor=l(),dF=a("li"),Y1e=a("strong"),Lor=o("bert"),yor=o(" \u2014 "),KW=a("a"),xor=o("BertForTokenClassification"),$or=o(" (BERT model)"),kor=l(),cF=a("li"),K1e=a("strong"),Sor=o("big_bird"),Ror=o(" \u2014 "),ZW=a("a"),Por=o("BigBirdForTokenClassification"),Bor=o(" (BigBird model)"),Ior=l(),fF=a("li"),Z1e=a("strong"),Nor=o("bloom"),qor=o(" \u2014 "),eQ=a("a"),jor=o("BloomForTokenClassification"),Dor=o(" (BLOOM model)"),Gor=l(),mF=a("li"),ebe=a("strong"),Oor=o("camembert"),Vor=o(" \u2014 "),oQ=a("a"),Xor=o("CamembertForTokenClassification"),zor=o(" (CamemBERT model)"),Wor=l(),gF=a("li"),obe=a("strong"),Qor=o("canine"),Hor=o(" \u2014 "),rQ=a("a"),Uor=o("CanineForTokenClassification"),Jor=o(" (CANINE model)"),Yor=l(),hF=a("li"),rbe=a("strong"),Kor=o("convbert"),Zor=o(" \u2014 "),tQ=a("a"),err=o("ConvBertForTokenClassification"),orr=o(" (ConvBERT model)"),rrr=l(),pF=a("li"),tbe=a("strong"),trr=o("data2vec-text"),arr=o(" \u2014 "),aQ=a("a"),nrr=o("Data2VecTextForTokenClassification"),srr=o(" (Data2VecText model)"),lrr=l(),_F=a("li"),abe=a("strong"),irr=o("deberta"),drr=o(" \u2014 "),nQ=a("a"),crr=o("DebertaForTokenClassification"),frr=o(" (DeBERTa model)"),mrr=l(),uF=a("li"),nbe=a("strong"),grr=o("deberta-v2"),hrr=o(" \u2014 "),sQ=a("a"),prr=o("DebertaV2ForTokenClassification"),_rr=o(" (DeBERTa-v2 model)"),urr=l(),bF=a("li"),sbe=a("strong"),brr=o("distilbert"),vrr=o(" \u2014 "),lQ=a("a"),Frr=o("DistilBertForTokenClassification"),Trr=o(" (DistilBERT model)"),Mrr=l(),vF=a("li"),lbe=a("strong"),Err=o("electra"),Crr=o(" \u2014 "),iQ=a("a"),wrr=o("ElectraForTokenClassification"),Arr=o(" (ELECTRA model)"),Lrr=l(),FF=a("li"),ibe=a("strong"),yrr=o("flaubert"),xrr=o(" \u2014 "),dQ=a("a"),$rr=o("FlaubertForTokenClassification"),krr=o(" (FlauBERT model)"),Srr=l(),TF=a("li"),dbe=a("strong"),Rrr=o("fnet"),Prr=o(" \u2014 "),cQ=a("a"),Brr=o("FNetForTokenClassification"),Irr=o(" (FNet model)"),Nrr=l(),MF=a("li"),cbe=a("strong"),qrr=o("funnel"),jrr=o(" \u2014 "),fQ=a("a"),Drr=o("FunnelForTokenClassification"),Grr=o(" (Funnel Transformer model)"),Orr=l(),EF=a("li"),fbe=a("strong"),Vrr=o("gpt2"),Xrr=o(" \u2014 "),mQ=a("a"),zrr=o("GPT2ForTokenClassification"),Wrr=o(" (OpenAI GPT-2 model)"),Qrr=l(),CF=a("li"),mbe=a("strong"),Hrr=o("ibert"),Urr=o(" \u2014 "),gQ=a("a"),Jrr=o("IBertForTokenClassification"),Yrr=o(" (I-BERT model)"),Krr=l(),wF=a("li"),gbe=a("strong"),Zrr=o("layoutlm"),etr=o(" \u2014 "),hQ=a("a"),otr=o("LayoutLMForTokenClassification"),rtr=o(" (LayoutLM model)"),ttr=l(),AF=a("li"),hbe=a("strong"),atr=o("layoutlmv2"),ntr=o(" \u2014 "),pQ=a("a"),str=o("LayoutLMv2ForTokenClassification"),ltr=o(" (LayoutLMv2 model)"),itr=l(),LF=a("li"),pbe=a("strong"),dtr=o("layoutlmv3"),ctr=o(" \u2014 "),_Q=a("a"),ftr=o("LayoutLMv3ForTokenClassification"),mtr=o(" (LayoutLMv3 model)"),gtr=l(),yF=a("li"),_be=a("strong"),htr=o("longformer"),ptr=o(" \u2014 "),uQ=a("a"),_tr=o("LongformerForTokenClassification"),utr=o(" (Longformer model)"),btr=l(),xF=a("li"),ube=a("strong"),vtr=o("luke"),Ftr=o(" \u2014 "),bQ=a("a"),Ttr=o("LukeForTokenClassification"),Mtr=o(" (LUKE model)"),Etr=l(),$F=a("li"),bbe=a("strong"),Ctr=o("megatron-bert"),wtr=o(" \u2014 "),vQ=a("a"),Atr=o("MegatronBertForTokenClassification"),Ltr=o(" (Megatron-BERT model)"),ytr=l(),kF=a("li"),vbe=a("strong"),xtr=o("mobilebert"),$tr=o(" \u2014 "),FQ=a("a"),ktr=o("MobileBertForTokenClassification"),Str=o(" (MobileBERT model)"),Rtr=l(),SF=a("li"),Fbe=a("strong"),Ptr=o("mpnet"),Btr=o(" \u2014 "),TQ=a("a"),Itr=o("MPNetForTokenClassification"),Ntr=o(" (MPNet model)"),qtr=l(),RF=a("li"),Tbe=a("strong"),jtr=o("nezha"),Dtr=o(" \u2014 "),MQ=a("a"),Gtr=o("NezhaForTokenClassification"),Otr=o(" (Nezha model)"),Vtr=l(),PF=a("li"),Mbe=a("strong"),Xtr=o("nystromformer"),ztr=o(" \u2014 "),EQ=a("a"),Wtr=o("NystromformerForTokenClassification"),Qtr=o(" (Nystr\xF6mformer model)"),Htr=l(),BF=a("li"),Ebe=a("strong"),Utr=o("qdqbert"),Jtr=o(" \u2014 "),CQ=a("a"),Ytr=o("QDQBertForTokenClassification"),Ktr=o(" (QDQBert model)"),Ztr=l(),IF=a("li"),Cbe=a("strong"),ear=o("rembert"),oar=o(" \u2014 "),wQ=a("a"),rar=o("RemBertForTokenClassification"),tar=o(" (RemBERT model)"),aar=l(),NF=a("li"),wbe=a("strong"),nar=o("roberta"),sar=o(" \u2014 "),AQ=a("a"),lar=o("RobertaForTokenClassification"),iar=o(" (RoBERTa model)"),dar=l(),qF=a("li"),Abe=a("strong"),car=o("roformer"),far=o(" \u2014 "),LQ=a("a"),mar=o("RoFormerForTokenClassification"),gar=o(" (RoFormer model)"),har=l(),jF=a("li"),Lbe=a("strong"),par=o("squeezebert"),_ar=o(" \u2014 "),yQ=a("a"),uar=o("SqueezeBertForTokenClassification"),bar=o(" (SqueezeBERT model)"),Far=l(),DF=a("li"),ybe=a("strong"),Tar=o("xlm"),Mar=o(" \u2014 "),xQ=a("a"),Ear=o("XLMForTokenClassification"),Car=o(" (XLM model)"),war=l(),GF=a("li"),xbe=a("strong"),Aar=o("xlm-roberta"),Lar=o(" \u2014 "),$Q=a("a"),yar=o("XLMRobertaForTokenClassification"),xar=o(" (XLM-RoBERTa model)"),$ar=l(),OF=a("li"),$be=a("strong"),kar=o("xlm-roberta-xl"),Sar=o(" \u2014 "),kQ=a("a"),Rar=o("XLMRobertaXLForTokenClassification"),Par=o(" (XLM-RoBERTa-XL model)"),Bar=l(),VF=a("li"),kbe=a("strong"),Iar=o("xlnet"),Nar=o(" \u2014 "),SQ=a("a"),qar=o("XLNetForTokenClassification"),jar=o(" (XLNet model)"),Dar=l(),XF=a("li"),Sbe=a("strong"),Gar=o("yoso"),Oar=o(" \u2014 "),RQ=a("a"),Var=o("YosoForTokenClassification"),Xar=o(" (YOSO model)"),zar=l(),zF=a("p"),War=o("The model is set in evaluation mode by default using "),Rbe=a("code"),Qar=o("model.eval()"),Har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=a("code"),Uar=o("model.train()"),Jar=l(),F(WF.$$.fragment),mQe=l(),Ed=a("h2"),QF=a("a"),Bbe=a("span"),F(dy.$$.fragment),Yar=l(),Ibe=a("span"),Kar=o("AutoModelForQuestionAnswering"),gQe=l(),Oo=a("div"),F(cy.$$.fragment),Zar=l(),Cd=a("p"),enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PQ=a("a"),onr=o("from_pretrained()"),rnr=o(" class method or the "),BQ=a("a"),tnr=o("from_config()"),anr=o(` class
method.`),nnr=l(),fy=a("p"),snr=o("This class cannot be instantiated directly using "),Nbe=a("code"),lnr=o("__init__()"),inr=o(" (throws an error)."),dnr=l(),vt=a("div"),F(my.$$.fragment),cnr=l(),qbe=a("p"),fnr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mnr=l(),wd=a("p"),gnr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),hnr=o("not"),pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),_nr=o("from_pretrained()"),unr=o(" to load the model weights."),bnr=l(),F(HF.$$.fragment),vnr=l(),so=a("div"),F(gy.$$.fragment),Fnr=l(),Dbe=a("p"),Tnr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mnr=l(),Ua=a("p"),Enr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),Cnr=o("model_type"),wnr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),Anr=o("pretrained_model_name_or_path"),Lnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),ynr=o("pretrained_model_name_or_path"),xnr=o(":"),$nr=l(),V=a("ul"),UF=a("li"),Xbe=a("strong"),knr=o("albert"),Snr=o(" \u2014 "),NQ=a("a"),Rnr=o("AlbertForQuestionAnswering"),Pnr=o(" (ALBERT model)"),Bnr=l(),JF=a("li"),zbe=a("strong"),Inr=o("bart"),Nnr=o(" \u2014 "),qQ=a("a"),qnr=o("BartForQuestionAnswering"),jnr=o(" (BART model)"),Dnr=l(),YF=a("li"),Wbe=a("strong"),Gnr=o("bert"),Onr=o(" \u2014 "),jQ=a("a"),Vnr=o("BertForQuestionAnswering"),Xnr=o(" (BERT model)"),znr=l(),KF=a("li"),Qbe=a("strong"),Wnr=o("big_bird"),Qnr=o(" \u2014 "),DQ=a("a"),Hnr=o("BigBirdForQuestionAnswering"),Unr=o(" (BigBird model)"),Jnr=l(),ZF=a("li"),Hbe=a("strong"),Ynr=o("bigbird_pegasus"),Knr=o(" \u2014 "),GQ=a("a"),Znr=o("BigBirdPegasusForQuestionAnswering"),esr=o(" (BigBird-Pegasus model)"),osr=l(),eT=a("li"),Ube=a("strong"),rsr=o("camembert"),tsr=o(" \u2014 "),OQ=a("a"),asr=o("CamembertForQuestionAnswering"),nsr=o(" (CamemBERT model)"),ssr=l(),oT=a("li"),Jbe=a("strong"),lsr=o("canine"),isr=o(" \u2014 "),VQ=a("a"),dsr=o("CanineForQuestionAnswering"),csr=o(" (CANINE model)"),fsr=l(),rT=a("li"),Ybe=a("strong"),msr=o("convbert"),gsr=o(" \u2014 "),XQ=a("a"),hsr=o("ConvBertForQuestionAnswering"),psr=o(" (ConvBERT model)"),_sr=l(),tT=a("li"),Kbe=a("strong"),usr=o("data2vec-text"),bsr=o(" \u2014 "),zQ=a("a"),vsr=o("Data2VecTextForQuestionAnswering"),Fsr=o(" (Data2VecText model)"),Tsr=l(),aT=a("li"),Zbe=a("strong"),Msr=o("deberta"),Esr=o(" \u2014 "),WQ=a("a"),Csr=o("DebertaForQuestionAnswering"),wsr=o(" (DeBERTa model)"),Asr=l(),nT=a("li"),eve=a("strong"),Lsr=o("deberta-v2"),ysr=o(" \u2014 "),QQ=a("a"),xsr=o("DebertaV2ForQuestionAnswering"),$sr=o(" (DeBERTa-v2 model)"),ksr=l(),sT=a("li"),ove=a("strong"),Ssr=o("distilbert"),Rsr=o(" \u2014 "),HQ=a("a"),Psr=o("DistilBertForQuestionAnswering"),Bsr=o(" (DistilBERT model)"),Isr=l(),lT=a("li"),rve=a("strong"),Nsr=o("electra"),qsr=o(" \u2014 "),UQ=a("a"),jsr=o("ElectraForQuestionAnswering"),Dsr=o(" (ELECTRA model)"),Gsr=l(),iT=a("li"),tve=a("strong"),Osr=o("flaubert"),Vsr=o(" \u2014 "),JQ=a("a"),Xsr=o("FlaubertForQuestionAnsweringSimple"),zsr=o(" (FlauBERT model)"),Wsr=l(),dT=a("li"),ave=a("strong"),Qsr=o("fnet"),Hsr=o(" \u2014 "),YQ=a("a"),Usr=o("FNetForQuestionAnswering"),Jsr=o(" (FNet model)"),Ysr=l(),cT=a("li"),nve=a("strong"),Ksr=o("funnel"),Zsr=o(" \u2014 "),KQ=a("a"),elr=o("FunnelForQuestionAnswering"),olr=o(" (Funnel Transformer model)"),rlr=l(),fT=a("li"),sve=a("strong"),tlr=o("gptj"),alr=o(" \u2014 "),ZQ=a("a"),nlr=o("GPTJForQuestionAnswering"),slr=o(" (GPT-J model)"),llr=l(),mT=a("li"),lve=a("strong"),ilr=o("ibert"),dlr=o(" \u2014 "),eH=a("a"),clr=o("IBertForQuestionAnswering"),flr=o(" (I-BERT model)"),mlr=l(),gT=a("li"),ive=a("strong"),glr=o("layoutlmv2"),hlr=o(" \u2014 "),oH=a("a"),plr=o("LayoutLMv2ForQuestionAnswering"),_lr=o(" (LayoutLMv2 model)"),ulr=l(),hT=a("li"),dve=a("strong"),blr=o("layoutlmv3"),vlr=o(" \u2014 "),rH=a("a"),Flr=o("LayoutLMv3ForQuestionAnswering"),Tlr=o(" (LayoutLMv3 model)"),Mlr=l(),pT=a("li"),cve=a("strong"),Elr=o("led"),Clr=o(" \u2014 "),tH=a("a"),wlr=o("LEDForQuestionAnswering"),Alr=o(" (LED model)"),Llr=l(),_T=a("li"),fve=a("strong"),ylr=o("longformer"),xlr=o(" \u2014 "),aH=a("a"),$lr=o("LongformerForQuestionAnswering"),klr=o(" (Longformer model)"),Slr=l(),uT=a("li"),mve=a("strong"),Rlr=o("luke"),Plr=o(" \u2014 "),nH=a("a"),Blr=o("LukeForQuestionAnswering"),Ilr=o(" (LUKE model)"),Nlr=l(),bT=a("li"),gve=a("strong"),qlr=o("lxmert"),jlr=o(" \u2014 "),sH=a("a"),Dlr=o("LxmertForQuestionAnswering"),Glr=o(" (LXMERT model)"),Olr=l(),vT=a("li"),hve=a("strong"),Vlr=o("mbart"),Xlr=o(" \u2014 "),lH=a("a"),zlr=o("MBartForQuestionAnswering"),Wlr=o(" (mBART model)"),Qlr=l(),FT=a("li"),pve=a("strong"),Hlr=o("megatron-bert"),Ulr=o(" \u2014 "),iH=a("a"),Jlr=o("MegatronBertForQuestionAnswering"),Ylr=o(" (Megatron-BERT model)"),Klr=l(),TT=a("li"),_ve=a("strong"),Zlr=o("mobilebert"),eir=o(" \u2014 "),dH=a("a"),oir=o("MobileBertForQuestionAnswering"),rir=o(" (MobileBERT model)"),tir=l(),MT=a("li"),uve=a("strong"),air=o("mpnet"),nir=o(" \u2014 "),cH=a("a"),sir=o("MPNetForQuestionAnswering"),lir=o(" (MPNet model)"),iir=l(),ET=a("li"),bve=a("strong"),dir=o("mvp"),cir=o(" \u2014 "),fH=a("a"),fir=o("MvpForQuestionAnswering"),mir=o(" (MVP model)"),gir=l(),CT=a("li"),vve=a("strong"),hir=o("nezha"),pir=o(" \u2014 "),mH=a("a"),_ir=o("NezhaForQuestionAnswering"),uir=o(" (Nezha model)"),bir=l(),wT=a("li"),Fve=a("strong"),vir=o("nystromformer"),Fir=o(" \u2014 "),gH=a("a"),Tir=o("NystromformerForQuestionAnswering"),Mir=o(" (Nystr\xF6mformer model)"),Eir=l(),AT=a("li"),Tve=a("strong"),Cir=o("qdqbert"),wir=o(" \u2014 "),hH=a("a"),Air=o("QDQBertForQuestionAnswering"),Lir=o(" (QDQBert model)"),yir=l(),LT=a("li"),Mve=a("strong"),xir=o("reformer"),$ir=o(" \u2014 "),pH=a("a"),kir=o("ReformerForQuestionAnswering"),Sir=o(" (Reformer model)"),Rir=l(),yT=a("li"),Eve=a("strong"),Pir=o("rembert"),Bir=o(" \u2014 "),_H=a("a"),Iir=o("RemBertForQuestionAnswering"),Nir=o(" (RemBERT model)"),qir=l(),xT=a("li"),Cve=a("strong"),jir=o("roberta"),Dir=o(" \u2014 "),uH=a("a"),Gir=o("RobertaForQuestionAnswering"),Oir=o(" (RoBERTa model)"),Vir=l(),$T=a("li"),wve=a("strong"),Xir=o("roformer"),zir=o(" \u2014 "),bH=a("a"),Wir=o("RoFormerForQuestionAnswering"),Qir=o(" (RoFormer model)"),Hir=l(),kT=a("li"),Ave=a("strong"),Uir=o("splinter"),Jir=o(" \u2014 "),vH=a("a"),Yir=o("SplinterForQuestionAnswering"),Kir=o(" (Splinter model)"),Zir=l(),ST=a("li"),Lve=a("strong"),edr=o("squeezebert"),odr=o(" \u2014 "),FH=a("a"),rdr=o("SqueezeBertForQuestionAnswering"),tdr=o(" (SqueezeBERT model)"),adr=l(),RT=a("li"),yve=a("strong"),ndr=o("xlm"),sdr=o(" \u2014 "),TH=a("a"),ldr=o("XLMForQuestionAnsweringSimple"),idr=o(" (XLM model)"),ddr=l(),PT=a("li"),xve=a("strong"),cdr=o("xlm-roberta"),fdr=o(" \u2014 "),MH=a("a"),mdr=o("XLMRobertaForQuestionAnswering"),gdr=o(" (XLM-RoBERTa model)"),hdr=l(),BT=a("li"),$ve=a("strong"),pdr=o("xlm-roberta-xl"),_dr=o(" \u2014 "),EH=a("a"),udr=o("XLMRobertaXLForQuestionAnswering"),bdr=o(" (XLM-RoBERTa-XL model)"),vdr=l(),IT=a("li"),kve=a("strong"),Fdr=o("xlnet"),Tdr=o(" \u2014 "),CH=a("a"),Mdr=o("XLNetForQuestionAnsweringSimple"),Edr=o(" (XLNet model)"),Cdr=l(),NT=a("li"),Sve=a("strong"),wdr=o("yoso"),Adr=o(" \u2014 "),wH=a("a"),Ldr=o("YosoForQuestionAnswering"),ydr=o(" (YOSO model)"),xdr=l(),qT=a("p"),$dr=o("The model is set in evaluation mode by default using "),Rve=a("code"),kdr=o("model.eval()"),Sdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),Rdr=o("model.train()"),Pdr=l(),F(jT.$$.fragment),hQe=l(),Ad=a("h2"),DT=a("a"),Bve=a("span"),F(hy.$$.fragment),Bdr=l(),Ive=a("span"),Idr=o("AutoModelForTableQuestionAnswering"),pQe=l(),Vo=a("div"),F(py.$$.fragment),Ndr=l(),Ld=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AH=a("a"),jdr=o("from_pretrained()"),Ddr=o(" class method or the "),LH=a("a"),Gdr=o("from_config()"),Odr=o(` class
method.`),Vdr=l(),_y=a("p"),Xdr=o("This class cannot be instantiated directly using "),Nve=a("code"),zdr=o("__init__()"),Wdr=o(" (throws an error)."),Qdr=l(),Ft=a("div"),F(uy.$$.fragment),Hdr=l(),qve=a("p"),Udr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jdr=l(),yd=a("p"),Ydr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),Kdr=o("not"),Zdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),ecr=o("from_pretrained()"),ocr=o(" to load the model weights."),rcr=l(),F(GT.$$.fragment),tcr=l(),lo=a("div"),F(by.$$.fragment),acr=l(),Dve=a("p"),ncr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),scr=l(),Ja=a("p"),lcr=o("The model class to instantiate is selected based on the "),Gve=a("code"),icr=o("model_type"),dcr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),ccr=o("pretrained_model_name_or_path"),fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),mcr=o("pretrained_model_name_or_path"),gcr=o(":"),hcr=l(),Xve=a("ul"),OT=a("li"),zve=a("strong"),pcr=o("tapas"),_cr=o(" \u2014 "),xH=a("a"),ucr=o("TapasForQuestionAnswering"),bcr=o(" (TAPAS model)"),vcr=l(),VT=a("p"),Fcr=o("The model is set in evaluation mode by default using "),Wve=a("code"),Tcr=o("model.eval()"),Mcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),Ecr=o("model.train()"),Ccr=l(),F(XT.$$.fragment),_Qe=l(),xd=a("h2"),zT=a("a"),Hve=a("span"),F(vy.$$.fragment),wcr=l(),Uve=a("span"),Acr=o("AutoModelForImageClassification"),uQe=l(),Xo=a("div"),F(Fy.$$.fragment),Lcr=l(),$d=a("p"),ycr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$H=a("a"),xcr=o("from_pretrained()"),$cr=o(" class method or the "),kH=a("a"),kcr=o("from_config()"),Scr=o(` class
method.`),Rcr=l(),Ty=a("p"),Pcr=o("This class cannot be instantiated directly using "),Jve=a("code"),Bcr=o("__init__()"),Icr=o(" (throws an error)."),Ncr=l(),Tt=a("div"),F(My.$$.fragment),qcr=l(),Yve=a("p"),jcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dcr=l(),kd=a("p"),Gcr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),Ocr=o("not"),Vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),Xcr=o("from_pretrained()"),zcr=o(" to load the model weights."),Wcr=l(),F(WT.$$.fragment),Qcr=l(),io=a("div"),F(Ey.$$.fragment),Hcr=l(),Zve=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jcr=l(),Ya=a("p"),Ycr=o("The model class to instantiate is selected based on the "),e5e=a("code"),Kcr=o("model_type"),Zcr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),rfr=o("pretrained_model_name_or_path"),tfr=o(":"),afr=l(),be=a("ul"),QT=a("li"),t5e=a("strong"),nfr=o("beit"),sfr=o(" \u2014 "),RH=a("a"),lfr=o("BeitForImageClassification"),ifr=o(" (BEiT model)"),dfr=l(),HT=a("li"),a5e=a("strong"),cfr=o("convnext"),ffr=o(" \u2014 "),PH=a("a"),mfr=o("ConvNextForImageClassification"),gfr=o(" (ConvNeXT model)"),hfr=l(),UT=a("li"),n5e=a("strong"),pfr=o("cvt"),_fr=o(" \u2014 "),BH=a("a"),ufr=o("CvtForImageClassification"),bfr=o(" (CvT model)"),vfr=l(),JT=a("li"),s5e=a("strong"),Ffr=o("data2vec-vision"),Tfr=o(" \u2014 "),IH=a("a"),Mfr=o("Data2VecVisionForImageClassification"),Efr=o(" (Data2VecVision model)"),Cfr=l(),rl=a("li"),l5e=a("strong"),wfr=o("deit"),Afr=o(" \u2014 "),NH=a("a"),Lfr=o("DeiTForImageClassification"),yfr=o(" or "),qH=a("a"),xfr=o("DeiTForImageClassificationWithTeacher"),$fr=o(" (DeiT model)"),kfr=l(),YT=a("li"),i5e=a("strong"),Sfr=o("imagegpt"),Rfr=o(" \u2014 "),jH=a("a"),Pfr=o("ImageGPTForImageClassification"),Bfr=o(" (ImageGPT model)"),Ifr=l(),tl=a("li"),d5e=a("strong"),Nfr=o("levit"),qfr=o(" \u2014 "),DH=a("a"),jfr=o("LevitForImageClassification"),Dfr=o(" or "),GH=a("a"),Gfr=o("LevitForImageClassificationWithTeacher"),Ofr=o(" (LeViT model)"),Vfr=l(),KT=a("li"),c5e=a("strong"),Xfr=o("mobilevit"),zfr=o(" \u2014 "),OH=a("a"),Wfr=o("MobileViTForImageClassification"),Qfr=o(" (MobileViT model)"),Hfr=l(),Mt=a("li"),f5e=a("strong"),Ufr=o("perceiver"),Jfr=o(" \u2014 "),VH=a("a"),Yfr=o("PerceiverForImageClassificationLearned"),Kfr=o(" or "),XH=a("a"),Zfr=o("PerceiverForImageClassificationFourier"),emr=o(" or "),zH=a("a"),omr=o("PerceiverForImageClassificationConvProcessing"),rmr=o(" (Perceiver model)"),tmr=l(),ZT=a("li"),m5e=a("strong"),amr=o("poolformer"),nmr=o(" \u2014 "),WH=a("a"),smr=o("PoolFormerForImageClassification"),lmr=o(" (PoolFormer model)"),imr=l(),e8=a("li"),g5e=a("strong"),dmr=o("regnet"),cmr=o(" \u2014 "),QH=a("a"),fmr=o("RegNetForImageClassification"),mmr=o(" (RegNet model)"),gmr=l(),o8=a("li"),h5e=a("strong"),hmr=o("resnet"),pmr=o(" \u2014 "),HH=a("a"),_mr=o("ResNetForImageClassification"),umr=o(" (ResNet model)"),bmr=l(),r8=a("li"),p5e=a("strong"),vmr=o("segformer"),Fmr=o(" \u2014 "),UH=a("a"),Tmr=o("SegformerForImageClassification"),Mmr=o(" (SegFormer model)"),Emr=l(),t8=a("li"),_5e=a("strong"),Cmr=o("swin"),wmr=o(" \u2014 "),JH=a("a"),Amr=o("SwinForImageClassification"),Lmr=o(" (Swin Transformer model)"),ymr=l(),a8=a("li"),u5e=a("strong"),xmr=o("swinv2"),$mr=o(" \u2014 "),YH=a("a"),kmr=o("Swinv2ForImageClassification"),Smr=o(" (Swin Transformer V2 model)"),Rmr=l(),n8=a("li"),b5e=a("strong"),Pmr=o("van"),Bmr=o(" \u2014 "),KH=a("a"),Imr=o("VanForImageClassification"),Nmr=o(" (VAN model)"),qmr=l(),s8=a("li"),v5e=a("strong"),jmr=o("vit"),Dmr=o(" \u2014 "),ZH=a("a"),Gmr=o("ViTForImageClassification"),Omr=o(" (ViT model)"),Vmr=l(),l8=a("p"),Xmr=o("The model is set in evaluation mode by default using "),F5e=a("code"),zmr=o("model.eval()"),Wmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T5e=a("code"),Qmr=o("model.train()"),Hmr=l(),F(i8.$$.fragment),bQe=l(),Sd=a("h2"),d8=a("a"),M5e=a("span"),F(Cy.$$.fragment),Umr=l(),E5e=a("span"),Jmr=o("AutoModelForVideoClassification"),vQe=l(),zo=a("div"),F(wy.$$.fragment),Ymr=l(),Rd=a("p"),Kmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),eU=a("a"),Zmr=o("from_pretrained()"),egr=o(" class method or the "),oU=a("a"),ogr=o("from_config()"),rgr=o(` class
method.`),tgr=l(),Ay=a("p"),agr=o("This class cannot be instantiated directly using "),C5e=a("code"),ngr=o("__init__()"),sgr=o(" (throws an error)."),lgr=l(),Et=a("div"),F(Ly.$$.fragment),igr=l(),w5e=a("p"),dgr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),cgr=l(),Pd=a("p"),fgr=o(`Note:
Loading a model from its configuration file does `),A5e=a("strong"),mgr=o("not"),ggr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),hgr=o("from_pretrained()"),pgr=o(" to load the model weights."),_gr=l(),F(c8.$$.fragment),ugr=l(),co=a("div"),F(yy.$$.fragment),bgr=l(),L5e=a("p"),vgr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Fgr=l(),Ka=a("p"),Tgr=o("The model class to instantiate is selected based on the "),y5e=a("code"),Mgr=o("model_type"),Egr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),Cgr=o("pretrained_model_name_or_path"),wgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=a("code"),Agr=o("pretrained_model_name_or_path"),Lgr=o(":"),ygr=l(),k5e=a("ul"),f8=a("li"),S5e=a("strong"),xgr=o("videomae"),$gr=o(" \u2014 "),tU=a("a"),kgr=o("VideoMAEForVideoClassification"),Sgr=o(" (VideoMAE model)"),Rgr=l(),m8=a("p"),Pgr=o("The model is set in evaluation mode by default using "),R5e=a("code"),Bgr=o("model.eval()"),Igr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P5e=a("code"),Ngr=o("model.train()"),qgr=l(),F(g8.$$.fragment),FQe=l(),Bd=a("h2"),h8=a("a"),B5e=a("span"),F(xy.$$.fragment),jgr=l(),I5e=a("span"),Dgr=o("AutoModelForVision2Seq"),TQe=l(),Wo=a("div"),F($y.$$.fragment),Ggr=l(),Id=a("p"),Ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" class method or the "),nU=a("a"),zgr=o("from_config()"),Wgr=o(` class
method.`),Qgr=l(),ky=a("p"),Hgr=o("This class cannot be instantiated directly using "),N5e=a("code"),Ugr=o("__init__()"),Jgr=o(" (throws an error)."),Ygr=l(),Ct=a("div"),F(Sy.$$.fragment),Kgr=l(),q5e=a("p"),Zgr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ehr=l(),Nd=a("p"),ohr=o(`Note:
Loading a model from its configuration file does `),j5e=a("strong"),rhr=o("not"),thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),ahr=o("from_pretrained()"),nhr=o(" to load the model weights."),shr=l(),F(p8.$$.fragment),lhr=l(),fo=a("div"),F(Ry.$$.fragment),ihr=l(),D5e=a("p"),dhr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),chr=l(),Za=a("p"),fhr=o("The model class to instantiate is selected based on the "),G5e=a("code"),mhr=o("model_type"),ghr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),hhr=o("pretrained_model_name_or_path"),phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),_hr=o("pretrained_model_name_or_path"),uhr=o(":"),bhr=l(),X5e=a("ul"),_8=a("li"),z5e=a("strong"),vhr=o("vision-encoder-decoder"),Fhr=o(" \u2014 "),lU=a("a"),Thr=o("VisionEncoderDecoderModel"),Mhr=o(" (Vision Encoder decoder model)"),Ehr=l(),u8=a("p"),Chr=o("The model is set in evaluation mode by default using "),W5e=a("code"),whr=o("model.eval()"),Ahr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q5e=a("code"),Lhr=o("model.train()"),yhr=l(),F(b8.$$.fragment),MQe=l(),qd=a("h2"),v8=a("a"),H5e=a("span"),F(Py.$$.fragment),xhr=l(),U5e=a("span"),$hr=o("AutoModelForVisualQuestionAnswering"),EQe=l(),Qo=a("div"),F(By.$$.fragment),khr=l(),jd=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iU=a("a"),Rhr=o("from_pretrained()"),Phr=o(" class method or the "),dU=a("a"),Bhr=o("from_config()"),Ihr=o(` class
method.`),Nhr=l(),Iy=a("p"),qhr=o("This class cannot be instantiated directly using "),J5e=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Ghr=l(),wt=a("div"),F(Ny.$$.fragment),Ohr=l(),Y5e=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Xhr=l(),Dd=a("p"),zhr=o(`Note:
Loading a model from its configuration file does `),K5e=a("strong"),Whr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" to load the model weights."),Jhr=l(),F(F8.$$.fragment),Yhr=l(),mo=a("div"),F(qy.$$.fragment),Khr=l(),Z5e=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),epr=l(),en=a("p"),opr=o("The model class to instantiate is selected based on the "),eFe=a("code"),rpr=o("model_type"),tpr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),spr=o("pretrained_model_name_or_path"),lpr=o(":"),ipr=l(),tFe=a("ul"),T8=a("li"),aFe=a("strong"),dpr=o("vilt"),cpr=o(" \u2014 "),fU=a("a"),fpr=o("ViltForQuestionAnswering"),mpr=o(" (ViLT model)"),gpr=l(),M8=a("p"),hpr=o("The model is set in evaluation mode by default using "),nFe=a("code"),ppr=o("model.eval()"),_pr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),upr=o("model.train()"),bpr=l(),F(E8.$$.fragment),CQe=l(),Gd=a("h2"),C8=a("a"),lFe=a("span"),F(jy.$$.fragment),vpr=l(),iFe=a("span"),Fpr=o("AutoModelForAudioClassification"),wQe=l(),Ho=a("div"),F(Dy.$$.fragment),Tpr=l(),Od=a("p"),Mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mU=a("a"),Epr=o("from_pretrained()"),Cpr=o(" class method or the "),gU=a("a"),wpr=o("from_config()"),Apr=o(` class
method.`),Lpr=l(),Gy=a("p"),ypr=o("This class cannot be instantiated directly using "),dFe=a("code"),xpr=o("__init__()"),$pr=o(" (throws an error)."),kpr=l(),At=a("div"),F(Oy.$$.fragment),Spr=l(),cFe=a("p"),Rpr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ppr=l(),Vd=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),Ipr=o("not"),Npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),qpr=o("from_pretrained()"),jpr=o(" to load the model weights."),Dpr=l(),F(w8.$$.fragment),Gpr=l(),go=a("div"),F(Vy.$$.fragment),Opr=l(),mFe=a("p"),Vpr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xpr=l(),on=a("p"),zpr=o("The model class to instantiate is selected based on the "),gFe=a("code"),Wpr=o("model_type"),Qpr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(":"),Kpr=l(),Pe=a("ul"),A8=a("li"),_Fe=a("strong"),Zpr=o("data2vec-audio"),e_r=o(" \u2014 "),pU=a("a"),o_r=o("Data2VecAudioForSequenceClassification"),r_r=o(" (Data2VecAudio model)"),t_r=l(),L8=a("li"),uFe=a("strong"),a_r=o("hubert"),n_r=o(" \u2014 "),_U=a("a"),s_r=o("HubertForSequenceClassification"),l_r=o(" (Hubert model)"),i_r=l(),y8=a("li"),bFe=a("strong"),d_r=o("sew"),c_r=o(" \u2014 "),uU=a("a"),f_r=o("SEWForSequenceClassification"),m_r=o(" (SEW model)"),g_r=l(),x8=a("li"),vFe=a("strong"),h_r=o("sew-d"),p_r=o(" \u2014 "),bU=a("a"),__r=o("SEWDForSequenceClassification"),u_r=o(" (SEW-D model)"),b_r=l(),$8=a("li"),FFe=a("strong"),v_r=o("unispeech"),F_r=o(" \u2014 "),vU=a("a"),T_r=o("UniSpeechForSequenceClassification"),M_r=o(" (UniSpeech model)"),E_r=l(),k8=a("li"),TFe=a("strong"),C_r=o("unispeech-sat"),w_r=o(" \u2014 "),FU=a("a"),A_r=o("UniSpeechSatForSequenceClassification"),L_r=o(" (UniSpeechSat model)"),y_r=l(),S8=a("li"),MFe=a("strong"),x_r=o("wav2vec2"),$_r=o(" \u2014 "),TU=a("a"),k_r=o("Wav2Vec2ForSequenceClassification"),S_r=o(" (Wav2Vec2 model)"),R_r=l(),R8=a("li"),EFe=a("strong"),P_r=o("wav2vec2-conformer"),B_r=o(" \u2014 "),MU=a("a"),I_r=o("Wav2Vec2ConformerForSequenceClassification"),N_r=o(" (Wav2Vec2-Conformer model)"),q_r=l(),P8=a("li"),CFe=a("strong"),j_r=o("wavlm"),D_r=o(" \u2014 "),EU=a("a"),G_r=o("WavLMForSequenceClassification"),O_r=o(" (WavLM model)"),V_r=l(),B8=a("p"),X_r=o("The model is set in evaluation mode by default using "),wFe=a("code"),z_r=o("model.eval()"),W_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=a("code"),Q_r=o("model.train()"),H_r=l(),F(I8.$$.fragment),AQe=l(),Xd=a("h2"),N8=a("a"),LFe=a("span"),F(Xy.$$.fragment),U_r=l(),yFe=a("span"),J_r=o("AutoModelForAudioFrameClassification"),LQe=l(),Uo=a("div"),F(zy.$$.fragment),Y_r=l(),zd=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CU=a("a"),Z_r=o("from_pretrained()"),eur=o(" class method or the "),wU=a("a"),our=o("from_config()"),rur=o(` class
method.`),tur=l(),Wy=a("p"),aur=o("This class cannot be instantiated directly using "),xFe=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),Lt=a("div"),F(Qy.$$.fragment),iur=l(),$Fe=a("p"),dur=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cur=l(),Wd=a("p"),fur=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),mur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),hur=o("from_pretrained()"),pur=o(" to load the model weights."),_ur=l(),F(q8.$$.fragment),uur=l(),ho=a("div"),F(Hy.$$.fragment),bur=l(),SFe=a("p"),vur=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Fur=l(),rn=a("p"),Tur=o("The model class to instantiate is selected based on the "),RFe=a("code"),Mur=o("model_type"),Eur=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(":"),yur=l(),at=a("ul"),j8=a("li"),IFe=a("strong"),xur=o("data2vec-audio"),$ur=o(" \u2014 "),LU=a("a"),kur=o("Data2VecAudioForAudioFrameClassification"),Sur=o(" (Data2VecAudio model)"),Rur=l(),D8=a("li"),NFe=a("strong"),Pur=o("unispeech-sat"),Bur=o(" \u2014 "),yU=a("a"),Iur=o("UniSpeechSatForAudioFrameClassification"),Nur=o(" (UniSpeechSat model)"),qur=l(),G8=a("li"),qFe=a("strong"),jur=o("wav2vec2"),Dur=o(" \u2014 "),xU=a("a"),Gur=o("Wav2Vec2ForAudioFrameClassification"),Our=o(" (Wav2Vec2 model)"),Vur=l(),O8=a("li"),jFe=a("strong"),Xur=o("wav2vec2-conformer"),zur=o(" \u2014 "),$U=a("a"),Wur=o("Wav2Vec2ConformerForAudioFrameClassification"),Qur=o(" (Wav2Vec2-Conformer model)"),Hur=l(),V8=a("li"),DFe=a("strong"),Uur=o("wavlm"),Jur=o(" \u2014 "),kU=a("a"),Yur=o("WavLMForAudioFrameClassification"),Kur=o(" (WavLM model)"),Zur=l(),X8=a("p"),e2r=o("The model is set in evaluation mode by default using "),GFe=a("code"),o2r=o("model.eval()"),r2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OFe=a("code"),t2r=o("model.train()"),a2r=l(),F(z8.$$.fragment),yQe=l(),Qd=a("h2"),W8=a("a"),VFe=a("span"),F(Uy.$$.fragment),n2r=l(),XFe=a("span"),s2r=o("AutoModelForCTC"),xQe=l(),Jo=a("div"),F(Jy.$$.fragment),l2r=l(),Hd=a("p"),i2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SU=a("a"),d2r=o("from_pretrained()"),c2r=o(" class method or the "),RU=a("a"),f2r=o("from_config()"),m2r=o(` class
method.`),g2r=l(),Yy=a("p"),h2r=o("This class cannot be instantiated directly using "),zFe=a("code"),p2r=o("__init__()"),_2r=o(" (throws an error)."),u2r=l(),yt=a("div"),F(Ky.$$.fragment),b2r=l(),WFe=a("p"),v2r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),F2r=l(),Ud=a("p"),T2r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),M2r=o("not"),E2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),C2r=o("from_pretrained()"),w2r=o(" to load the model weights."),A2r=l(),F(Q8.$$.fragment),L2r=l(),po=a("div"),F(Zy.$$.fragment),y2r=l(),HFe=a("p"),x2r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$2r=l(),tn=a("p"),k2r=o("The model class to instantiate is selected based on the "),UFe=a("code"),S2r=o("model_type"),R2r=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),I2r=o("pretrained_model_name_or_path"),N2r=o(":"),q2r=l(),Le=a("ul"),H8=a("li"),KFe=a("strong"),j2r=o("data2vec-audio"),D2r=o(" \u2014 "),BU=a("a"),G2r=o("Data2VecAudioForCTC"),O2r=o(" (Data2VecAudio model)"),V2r=l(),U8=a("li"),ZFe=a("strong"),X2r=o("hubert"),z2r=o(" \u2014 "),IU=a("a"),W2r=o("HubertForCTC"),Q2r=o(" (Hubert model)"),H2r=l(),J8=a("li"),eTe=a("strong"),U2r=o("mctct"),J2r=o(" \u2014 "),NU=a("a"),Y2r=o("MCTCTForCTC"),K2r=o(" (M-CTC-T model)"),Z2r=l(),Y8=a("li"),oTe=a("strong"),e1r=o("sew"),o1r=o(" \u2014 "),qU=a("a"),r1r=o("SEWForCTC"),t1r=o(" (SEW model)"),a1r=l(),K8=a("li"),rTe=a("strong"),n1r=o("sew-d"),s1r=o(" \u2014 "),jU=a("a"),l1r=o("SEWDForCTC"),i1r=o(" (SEW-D model)"),d1r=l(),Z8=a("li"),tTe=a("strong"),c1r=o("unispeech"),f1r=o(" \u2014 "),DU=a("a"),m1r=o("UniSpeechForCTC"),g1r=o(" (UniSpeech model)"),h1r=l(),e9=a("li"),aTe=a("strong"),p1r=o("unispeech-sat"),_1r=o(" \u2014 "),GU=a("a"),u1r=o("UniSpeechSatForCTC"),b1r=o(" (UniSpeechSat model)"),v1r=l(),o9=a("li"),nTe=a("strong"),F1r=o("wav2vec2"),T1r=o(" \u2014 "),OU=a("a"),M1r=o("Wav2Vec2ForCTC"),E1r=o(" (Wav2Vec2 model)"),C1r=l(),r9=a("li"),sTe=a("strong"),w1r=o("wav2vec2-conformer"),A1r=o(" \u2014 "),VU=a("a"),L1r=o("Wav2Vec2ConformerForCTC"),y1r=o(" (Wav2Vec2-Conformer model)"),x1r=l(),t9=a("li"),lTe=a("strong"),$1r=o("wavlm"),k1r=o(" \u2014 "),XU=a("a"),S1r=o("WavLMForCTC"),R1r=o(" (WavLM model)"),P1r=l(),a9=a("p"),B1r=o("The model is set in evaluation mode by default using "),iTe=a("code"),I1r=o("model.eval()"),N1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=a("code"),q1r=o("model.train()"),j1r=l(),F(n9.$$.fragment),$Qe=l(),Jd=a("h2"),s9=a("a"),cTe=a("span"),F(ex.$$.fragment),D1r=l(),fTe=a("span"),G1r=o("AutoModelForSpeechSeq2Seq"),kQe=l(),Yo=a("div"),F(ox.$$.fragment),O1r=l(),Yd=a("p"),V1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=a("a"),X1r=o("from_pretrained()"),z1r=o(" class method or the "),WU=a("a"),W1r=o("from_config()"),Q1r=o(` class
method.`),H1r=l(),rx=a("p"),U1r=o("This class cannot be instantiated directly using "),mTe=a("code"),J1r=o("__init__()"),Y1r=o(" (throws an error)."),K1r=l(),xt=a("div"),F(tx.$$.fragment),Z1r=l(),gTe=a("p"),ebr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),obr=l(),Kd=a("p"),rbr=o(`Note:
Loading a model from its configuration file does `),hTe=a("strong"),tbr=o("not"),abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),nbr=o("from_pretrained()"),sbr=o(" to load the model weights."),lbr=l(),F(l9.$$.fragment),ibr=l(),_o=a("div"),F(ax.$$.fragment),dbr=l(),pTe=a("p"),cbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fbr=l(),an=a("p"),mbr=o("The model class to instantiate is selected based on the "),_Te=a("code"),gbr=o("model_type"),hbr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),pbr=o("pretrained_model_name_or_path"),_br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),ubr=o("pretrained_model_name_or_path"),bbr=o(":"),vbr=l(),nx=a("ul"),i9=a("li"),vTe=a("strong"),Fbr=o("speech-encoder-decoder"),Tbr=o(" \u2014 "),HU=a("a"),Mbr=o("SpeechEncoderDecoderModel"),Ebr=o(" (Speech Encoder decoder model)"),Cbr=l(),d9=a("li"),FTe=a("strong"),wbr=o("speech_to_text"),Abr=o(" \u2014 "),UU=a("a"),Lbr=o("Speech2TextForConditionalGeneration"),ybr=o(" (Speech2Text model)"),xbr=l(),c9=a("p"),$br=o("The model is set in evaluation mode by default using "),TTe=a("code"),kbr=o("model.eval()"),Sbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MTe=a("code"),Rbr=o("model.train()"),Pbr=l(),F(f9.$$.fragment),SQe=l(),Zd=a("h2"),m9=a("a"),ETe=a("span"),F(sx.$$.fragment),Bbr=l(),CTe=a("span"),Ibr=o("AutoModelForAudioXVector"),RQe=l(),Ko=a("div"),F(lx.$$.fragment),Nbr=l(),ec=a("p"),qbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JU=a("a"),jbr=o("from_pretrained()"),Dbr=o(" class method or the "),YU=a("a"),Gbr=o("from_config()"),Obr=o(` class
method.`),Vbr=l(),ix=a("p"),Xbr=o("This class cannot be instantiated directly using "),wTe=a("code"),zbr=o("__init__()"),Wbr=o(" (throws an error)."),Qbr=l(),$t=a("div"),F(dx.$$.fragment),Hbr=l(),ATe=a("p"),Ubr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jbr=l(),oc=a("p"),Ybr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),Kbr=o("not"),Zbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),evr=o("from_pretrained()"),ovr=o(" to load the model weights."),rvr=l(),F(g9.$$.fragment),tvr=l(),uo=a("div"),F(cx.$$.fragment),avr=l(),yTe=a("p"),nvr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),svr=l(),nn=a("p"),lvr=o("The model class to instantiate is selected based on the "),xTe=a("code"),ivr=o("model_type"),dvr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),cvr=o("pretrained_model_name_or_path"),fvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),mvr=o("pretrained_model_name_or_path"),gvr=o(":"),hvr=l(),nt=a("ul"),h9=a("li"),STe=a("strong"),pvr=o("data2vec-audio"),_vr=o(" \u2014 "),ZU=a("a"),uvr=o("Data2VecAudioForXVector"),bvr=o(" (Data2VecAudio model)"),vvr=l(),p9=a("li"),RTe=a("strong"),Fvr=o("unispeech-sat"),Tvr=o(" \u2014 "),eJ=a("a"),Mvr=o("UniSpeechSatForXVector"),Evr=o(" (UniSpeechSat model)"),Cvr=l(),_9=a("li"),PTe=a("strong"),wvr=o("wav2vec2"),Avr=o(" \u2014 "),oJ=a("a"),Lvr=o("Wav2Vec2ForXVector"),yvr=o(" (Wav2Vec2 model)"),xvr=l(),u9=a("li"),BTe=a("strong"),$vr=o("wav2vec2-conformer"),kvr=o(" \u2014 "),rJ=a("a"),Svr=o("Wav2Vec2ConformerForXVector"),Rvr=o(" (Wav2Vec2-Conformer model)"),Pvr=l(),b9=a("li"),ITe=a("strong"),Bvr=o("wavlm"),Ivr=o(" \u2014 "),tJ=a("a"),Nvr=o("WavLMForXVector"),qvr=o(" (WavLM model)"),jvr=l(),v9=a("p"),Dvr=o("The model is set in evaluation mode by default using "),NTe=a("code"),Gvr=o("model.eval()"),Ovr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qTe=a("code"),Vvr=o("model.train()"),Xvr=l(),F(F9.$$.fragment),PQe=l(),rc=a("h2"),T9=a("a"),jTe=a("span"),F(fx.$$.fragment),zvr=l(),DTe=a("span"),Wvr=o("AutoModelForMaskedImageModeling"),BQe=l(),Zo=a("div"),F(mx.$$.fragment),Qvr=l(),tc=a("p"),Hvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aJ=a("a"),Uvr=o("from_pretrained()"),Jvr=o(" class method or the "),nJ=a("a"),Yvr=o("from_config()"),Kvr=o(` class
method.`),Zvr=l(),gx=a("p"),e5r=o("This class cannot be instantiated directly using "),GTe=a("code"),o5r=o("__init__()"),r5r=o(" (throws an error)."),t5r=l(),kt=a("div"),F(hx.$$.fragment),a5r=l(),OTe=a("p"),n5r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),s5r=l(),ac=a("p"),l5r=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),i5r=o("not"),d5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),c5r=o("from_pretrained()"),f5r=o(" to load the model weights."),m5r=l(),F(M9.$$.fragment),g5r=l(),bo=a("div"),F(px.$$.fragment),h5r=l(),XTe=a("p"),p5r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_5r=l(),sn=a("p"),u5r=o("The model class to instantiate is selected based on the "),zTe=a("code"),b5r=o("model_type"),v5r=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(":"),C5r=l(),ln=a("ul"),E9=a("li"),HTe=a("strong"),w5r=o("deit"),A5r=o(" \u2014 "),lJ=a("a"),L5r=o("DeiTForMaskedImageModeling"),y5r=o(" (DeiT model)"),x5r=l(),C9=a("li"),UTe=a("strong"),$5r=o("swin"),k5r=o(" \u2014 "),iJ=a("a"),S5r=o("SwinForMaskedImageModeling"),R5r=o(" (Swin Transformer model)"),P5r=l(),w9=a("li"),JTe=a("strong"),B5r=o("swinv2"),I5r=o(" \u2014 "),dJ=a("a"),N5r=o("Swinv2ForMaskedImageModeling"),q5r=o(" (Swin Transformer V2 model)"),j5r=l(),A9=a("li"),YTe=a("strong"),D5r=o("vit"),G5r=o(" \u2014 "),cJ=a("a"),O5r=o("ViTForMaskedImageModeling"),V5r=o(" (ViT model)"),X5r=l(),L9=a("p"),z5r=o("The model is set in evaluation mode by default using "),KTe=a("code"),W5r=o("model.eval()"),Q5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZTe=a("code"),H5r=o("model.train()"),U5r=l(),F(y9.$$.fragment),IQe=l(),nc=a("h2"),x9=a("a"),e8e=a("span"),F(_x.$$.fragment),J5r=l(),o8e=a("span"),Y5r=o("AutoModelForObjectDetection"),NQe=l(),er=a("div"),F(ux.$$.fragment),K5r=l(),sc=a("p"),Z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fJ=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),mJ=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),bx=a("p"),nFr=o("This class cannot be instantiated directly using "),r8e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),St=a("div"),F(vx.$$.fragment),dFr=l(),t8e=a("p"),cFr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fFr=l(),lc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),pFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),uFr=l(),F($9.$$.fragment),bFr=l(),vo=a("div"),F(Fx.$$.fragment),vFr=l(),n8e=a("p"),FFr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),TFr=l(),dn=a("p"),MFr=o("The model class to instantiate is selected based on the "),s8e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),l8e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=a("code"),LFr=o("pretrained_model_name_or_path"),yFr=o(":"),xFr=l(),Tx=a("ul"),k9=a("li"),d8e=a("strong"),$Fr=o("detr"),kFr=o(" \u2014 "),hJ=a("a"),SFr=o("DetrForObjectDetection"),RFr=o(" (DETR model)"),PFr=l(),S9=a("li"),c8e=a("strong"),BFr=o("yolos"),IFr=o(" \u2014 "),pJ=a("a"),NFr=o("YolosForObjectDetection"),qFr=o(" (YOLOS model)"),jFr=l(),R9=a("p"),DFr=o("The model is set in evaluation mode by default using "),f8e=a("code"),GFr=o("model.eval()"),OFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m8e=a("code"),VFr=o("model.train()"),XFr=l(),F(P9.$$.fragment),qQe=l(),ic=a("h2"),B9=a("a"),g8e=a("span"),F(Mx.$$.fragment),zFr=l(),h8e=a("span"),WFr=o("AutoModelForImageSegmentation"),jQe=l(),or=a("div"),F(Ex.$$.fragment),QFr=l(),dc=a("p"),HFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_J=a("a"),UFr=o("from_pretrained()"),JFr=o(" class method or the "),uJ=a("a"),YFr=o("from_config()"),KFr=o(` class
method.`),ZFr=l(),Cx=a("p"),eTr=o("This class cannot be instantiated directly using "),p8e=a("code"),oTr=o("__init__()"),rTr=o(" (throws an error)."),tTr=l(),Rt=a("div"),F(wx.$$.fragment),aTr=l(),_8e=a("p"),nTr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),sTr=l(),cc=a("p"),lTr=o(`Note:
Loading a model from its configuration file does `),u8e=a("strong"),iTr=o("not"),dTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),cTr=o("from_pretrained()"),fTr=o(" to load the model weights."),mTr=l(),F(I9.$$.fragment),gTr=l(),Fo=a("div"),F(Ax.$$.fragment),hTr=l(),b8e=a("p"),pTr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_Tr=l(),cn=a("p"),uTr=o("The model class to instantiate is selected based on the "),v8e=a("code"),bTr=o("model_type"),vTr=o(` property of the config object (either
passed as an argument or loaded from `),F8e=a("code"),FTr=o("pretrained_model_name_or_path"),TTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=a("code"),MTr=o("pretrained_model_name_or_path"),ETr=o(":"),CTr=l(),M8e=a("ul"),N9=a("li"),E8e=a("strong"),wTr=o("detr"),ATr=o(" \u2014 "),vJ=a("a"),LTr=o("DetrForSegmentation"),yTr=o(" (DETR model)"),xTr=l(),q9=a("p"),$Tr=o("The model is set in evaluation mode by default using "),C8e=a("code"),kTr=o("model.eval()"),STr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w8e=a("code"),RTr=o("model.train()"),PTr=l(),F(j9.$$.fragment),DQe=l(),fc=a("h2"),D9=a("a"),A8e=a("span"),F(Lx.$$.fragment),BTr=l(),L8e=a("span"),ITr=o("AutoModelForSemanticSegmentation"),GQe=l(),rr=a("div"),F(yx.$$.fragment),NTr=l(),mc=a("p"),qTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FJ=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),TJ=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),xx=a("p"),XTr=o("This class cannot be instantiated directly using "),y8e=a("code"),zTr=o("__init__()"),WTr=o(" (throws an error)."),QTr=l(),Pt=a("div"),F($x.$$.fragment),HTr=l(),x8e=a("p"),UTr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),JTr=l(),gc=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),$8e=a("strong"),KTr=o("not"),ZTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),e8r=o("from_pretrained()"),o8r=o(" to load the model weights."),r8r=l(),F(G9.$$.fragment),t8r=l(),To=a("div"),F(kx.$$.fragment),a8r=l(),k8e=a("p"),n8r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),s8r=l(),fn=a("p"),l8r=o("The model class to instantiate is selected based on the "),S8e=a("code"),i8r=o("model_type"),d8r=o(` property of the config object (either
passed as an argument or loaded from `),R8e=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=a("code"),m8r=o("pretrained_model_name_or_path"),g8r=o(":"),h8r=l(),st=a("ul"),O9=a("li"),B8e=a("strong"),p8r=o("beit"),_8r=o(" \u2014 "),EJ=a("a"),u8r=o("BeitForSemanticSegmentation"),b8r=o(" (BEiT model)"),v8r=l(),V9=a("li"),I8e=a("strong"),F8r=o("data2vec-vision"),T8r=o(" \u2014 "),CJ=a("a"),M8r=o("Data2VecVisionForSemanticSegmentation"),E8r=o(" (Data2VecVision model)"),C8r=l(),X9=a("li"),N8e=a("strong"),w8r=o("dpt"),A8r=o(" \u2014 "),wJ=a("a"),L8r=o("DPTForSemanticSegmentation"),y8r=o(" (DPT model)"),x8r=l(),z9=a("li"),q8e=a("strong"),$8r=o("mobilevit"),k8r=o(" \u2014 "),AJ=a("a"),S8r=o("MobileViTForSemanticSegmentation"),R8r=o(" (MobileViT model)"),P8r=l(),W9=a("li"),j8e=a("strong"),B8r=o("segformer"),I8r=o(" \u2014 "),LJ=a("a"),N8r=o("SegformerForSemanticSegmentation"),q8r=o(" (SegFormer model)"),j8r=l(),Q9=a("p"),D8r=o("The model is set in evaluation mode by default using "),D8e=a("code"),G8r=o("model.eval()"),O8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G8e=a("code"),V8r=o("model.train()"),X8r=l(),F(H9.$$.fragment),OQe=l(),hc=a("h2"),U9=a("a"),O8e=a("span"),F(Sx.$$.fragment),z8r=l(),V8e=a("span"),W8r=o("AutoModelForInstanceSegmentation"),VQe=l(),tr=a("div"),F(Rx.$$.fragment),Q8r=l(),pc=a("p"),H8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yJ=a("a"),U8r=o("from_pretrained()"),J8r=o(" class method or the "),xJ=a("a"),Y8r=o("from_config()"),K8r=o(` class
method.`),Z8r=l(),Px=a("p"),e9r=o("This class cannot be instantiated directly using "),X8e=a("code"),o9r=o("__init__()"),r9r=o(" (throws an error)."),t9r=l(),Bt=a("div"),F(Bx.$$.fragment),a9r=l(),z8e=a("p"),n9r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s9r=l(),_c=a("p"),l9r=o(`Note:
Loading a model from its configuration file does `),W8e=a("strong"),i9r=o("not"),d9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),c9r=o("from_pretrained()"),f9r=o(" to load the model weights."),m9r=l(),F(J9.$$.fragment),g9r=l(),Mo=a("div"),F(Ix.$$.fragment),h9r=l(),Q8e=a("p"),p9r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),_9r=l(),mn=a("p"),u9r=o("The model class to instantiate is selected based on the "),H8e=a("code"),b9r=o("model_type"),v9r=o(` property of the config object (either
passed as an argument or loaded from `),U8e=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(":"),C9r=l(),Y8e=a("ul"),Y9=a("li"),K8e=a("strong"),w9r=o("maskformer"),A9r=o(" \u2014 "),kJ=a("a"),L9r=o("MaskFormerForInstanceSegmentation"),y9r=o(" (MaskFormer model)"),x9r=l(),K9=a("p"),$9r=o("The model is set in evaluation mode by default using "),Z8e=a("code"),k9r=o("model.eval()"),S9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e9e=a("code"),R9r=o("model.train()"),P9r=l(),F(Z9.$$.fragment),XQe=l(),uc=a("h2"),eM=a("a"),o9e=a("span"),F(Nx.$$.fragment),B9r=l(),r9e=a("span"),I9r=o("TFAutoModel"),zQe=l(),ar=a("div"),F(qx.$$.fragment),N9r=l(),bc=a("p"),q9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SJ=a("a"),j9r=o("from_pretrained()"),D9r=o(" class method or the "),RJ=a("a"),G9r=o("from_config()"),O9r=o(` class
method.`),V9r=l(),jx=a("p"),X9r=o("This class cannot be instantiated directly using "),t9e=a("code"),z9r=o("__init__()"),W9r=o(" (throws an error)."),Q9r=l(),It=a("div"),F(Dx.$$.fragment),H9r=l(),a9e=a("p"),U9r=o("Instantiates one of the base model classes of the library from a configuration."),J9r=l(),vc=a("p"),Y9r=o(`Note:
Loading a model from its configuration file does `),n9e=a("strong"),K9r=o("not"),Z9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),eMr=o("from_pretrained()"),oMr=o(" to load the model weights."),rMr=l(),F(oM.$$.fragment),tMr=l(),Sr=a("div"),F(Gx.$$.fragment),aMr=l(),s9e=a("p"),nMr=o("Instantiate one of the base model classes of the library from a pretrained model."),sMr=l(),gn=a("p"),lMr=o("The model class to instantiate is selected based on the "),l9e=a("code"),iMr=o("model_type"),dMr=o(` property of the config object (either
passed as an argument or loaded from `),i9e=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=a("code"),mMr=o("pretrained_model_name_or_path"),gMr=o(":"),hMr=l(),q=a("ul"),rM=a("li"),c9e=a("strong"),pMr=o("albert"),_Mr=o(" \u2014 "),BJ=a("a"),uMr=o("TFAlbertModel"),bMr=o(" (ALBERT model)"),vMr=l(),tM=a("li"),f9e=a("strong"),FMr=o("bart"),TMr=o(" \u2014 "),IJ=a("a"),MMr=o("TFBartModel"),EMr=o(" (BART model)"),CMr=l(),aM=a("li"),m9e=a("strong"),wMr=o("bert"),AMr=o(" \u2014 "),NJ=a("a"),LMr=o("TFBertModel"),yMr=o(" (BERT model)"),xMr=l(),nM=a("li"),g9e=a("strong"),$Mr=o("blenderbot"),kMr=o(" \u2014 "),qJ=a("a"),SMr=o("TFBlenderbotModel"),RMr=o(" (Blenderbot model)"),PMr=l(),sM=a("li"),h9e=a("strong"),BMr=o("blenderbot-small"),IMr=o(" \u2014 "),jJ=a("a"),NMr=o("TFBlenderbotSmallModel"),qMr=o(" (BlenderbotSmall model)"),jMr=l(),lM=a("li"),p9e=a("strong"),DMr=o("camembert"),GMr=o(" \u2014 "),DJ=a("a"),OMr=o("TFCamembertModel"),VMr=o(" (CamemBERT model)"),XMr=l(),iM=a("li"),_9e=a("strong"),zMr=o("clip"),WMr=o(" \u2014 "),GJ=a("a"),QMr=o("TFCLIPModel"),HMr=o(" (CLIP model)"),UMr=l(),dM=a("li"),u9e=a("strong"),JMr=o("convbert"),YMr=o(" \u2014 "),OJ=a("a"),KMr=o("TFConvBertModel"),ZMr=o(" (ConvBERT model)"),eEr=l(),cM=a("li"),b9e=a("strong"),oEr=o("convnext"),rEr=o(" \u2014 "),VJ=a("a"),tEr=o("TFConvNextModel"),aEr=o(" (ConvNeXT model)"),nEr=l(),fM=a("li"),v9e=a("strong"),sEr=o("ctrl"),lEr=o(" \u2014 "),XJ=a("a"),iEr=o("TFCTRLModel"),dEr=o(" (CTRL model)"),cEr=l(),mM=a("li"),F9e=a("strong"),fEr=o("data2vec-vision"),mEr=o(" \u2014 "),zJ=a("a"),gEr=o("TFData2VecVisionModel"),hEr=o(" (Data2VecVision model)"),pEr=l(),gM=a("li"),T9e=a("strong"),_Er=o("deberta"),uEr=o(" \u2014 "),WJ=a("a"),bEr=o("TFDebertaModel"),vEr=o(" (DeBERTa model)"),FEr=l(),hM=a("li"),M9e=a("strong"),TEr=o("deberta-v2"),MEr=o(" \u2014 "),QJ=a("a"),EEr=o("TFDebertaV2Model"),CEr=o(" (DeBERTa-v2 model)"),wEr=l(),pM=a("li"),E9e=a("strong"),AEr=o("deit"),LEr=o(" \u2014 "),HJ=a("a"),yEr=o("TFDeiTModel"),xEr=o(" (DeiT model)"),$Er=l(),_M=a("li"),C9e=a("strong"),kEr=o("distilbert"),SEr=o(" \u2014 "),UJ=a("a"),REr=o("TFDistilBertModel"),PEr=o(" (DistilBERT model)"),BEr=l(),uM=a("li"),w9e=a("strong"),IEr=o("dpr"),NEr=o(" \u2014 "),JJ=a("a"),qEr=o("TFDPRQuestionEncoder"),jEr=o(" (DPR model)"),DEr=l(),bM=a("li"),A9e=a("strong"),GEr=o("electra"),OEr=o(" \u2014 "),YJ=a("a"),VEr=o("TFElectraModel"),XEr=o(" (ELECTRA model)"),zEr=l(),vM=a("li"),L9e=a("strong"),WEr=o("flaubert"),QEr=o(" \u2014 "),KJ=a("a"),HEr=o("TFFlaubertModel"),UEr=o(" (FlauBERT model)"),JEr=l(),al=a("li"),y9e=a("strong"),YEr=o("funnel"),KEr=o(" \u2014 "),ZJ=a("a"),ZEr=o("TFFunnelModel"),e4r=o(" or "),eY=a("a"),o4r=o("TFFunnelBaseModel"),r4r=o(" (Funnel Transformer model)"),t4r=l(),FM=a("li"),x9e=a("strong"),a4r=o("gpt2"),n4r=o(" \u2014 "),oY=a("a"),s4r=o("TFGPT2Model"),l4r=o(" (OpenAI GPT-2 model)"),i4r=l(),TM=a("li"),$9e=a("strong"),d4r=o("gptj"),c4r=o(" \u2014 "),rY=a("a"),f4r=o("TFGPTJModel"),m4r=o(" (GPT-J model)"),g4r=l(),MM=a("li"),k9e=a("strong"),h4r=o("hubert"),p4r=o(" \u2014 "),tY=a("a"),_4r=o("TFHubertModel"),u4r=o(" (Hubert model)"),b4r=l(),EM=a("li"),S9e=a("strong"),v4r=o("layoutlm"),F4r=o(" \u2014 "),aY=a("a"),T4r=o("TFLayoutLMModel"),M4r=o(" (LayoutLM model)"),E4r=l(),CM=a("li"),R9e=a("strong"),C4r=o("led"),w4r=o(" \u2014 "),nY=a("a"),A4r=o("TFLEDModel"),L4r=o(" (LED model)"),y4r=l(),wM=a("li"),P9e=a("strong"),x4r=o("longformer"),$4r=o(" \u2014 "),sY=a("a"),k4r=o("TFLongformerModel"),S4r=o(" (Longformer model)"),R4r=l(),AM=a("li"),B9e=a("strong"),P4r=o("lxmert"),B4r=o(" \u2014 "),lY=a("a"),I4r=o("TFLxmertModel"),N4r=o(" (LXMERT model)"),q4r=l(),LM=a("li"),I9e=a("strong"),j4r=o("marian"),D4r=o(" \u2014 "),iY=a("a"),G4r=o("TFMarianModel"),O4r=o(" (Marian model)"),V4r=l(),yM=a("li"),N9e=a("strong"),X4r=o("mbart"),z4r=o(" \u2014 "),dY=a("a"),W4r=o("TFMBartModel"),Q4r=o(" (mBART model)"),H4r=l(),xM=a("li"),q9e=a("strong"),U4r=o("mobilebert"),J4r=o(" \u2014 "),cY=a("a"),Y4r=o("TFMobileBertModel"),K4r=o(" (MobileBERT model)"),Z4r=l(),$M=a("li"),j9e=a("strong"),eCr=o("mpnet"),oCr=o(" \u2014 "),fY=a("a"),rCr=o("TFMPNetModel"),tCr=o(" (MPNet model)"),aCr=l(),kM=a("li"),D9e=a("strong"),nCr=o("mt5"),sCr=o(" \u2014 "),mY=a("a"),lCr=o("TFMT5Model"),iCr=o(" (MT5 model)"),dCr=l(),SM=a("li"),G9e=a("strong"),cCr=o("openai-gpt"),fCr=o(" \u2014 "),gY=a("a"),mCr=o("TFOpenAIGPTModel"),gCr=o(" (OpenAI GPT model)"),hCr=l(),RM=a("li"),O9e=a("strong"),pCr=o("opt"),_Cr=o(" \u2014 "),hY=a("a"),uCr=o("TFOPTModel"),bCr=o(" (OPT model)"),vCr=l(),PM=a("li"),V9e=a("strong"),FCr=o("pegasus"),TCr=o(" \u2014 "),pY=a("a"),MCr=o("TFPegasusModel"),ECr=o(" (Pegasus model)"),CCr=l(),BM=a("li"),X9e=a("strong"),wCr=o("regnet"),ACr=o(" \u2014 "),_Y=a("a"),LCr=o("TFRegNetModel"),yCr=o(" (RegNet model)"),xCr=l(),IM=a("li"),z9e=a("strong"),$Cr=o("rembert"),kCr=o(" \u2014 "),uY=a("a"),SCr=o("TFRemBertModel"),RCr=o(" (RemBERT model)"),PCr=l(),NM=a("li"),W9e=a("strong"),BCr=o("resnet"),ICr=o(" \u2014 "),bY=a("a"),NCr=o("TFResNetModel"),qCr=o(" (ResNet model)"),jCr=l(),qM=a("li"),Q9e=a("strong"),DCr=o("roberta"),GCr=o(" \u2014 "),vY=a("a"),OCr=o("TFRobertaModel"),VCr=o(" (RoBERTa model)"),XCr=l(),jM=a("li"),H9e=a("strong"),zCr=o("roformer"),WCr=o(" \u2014 "),FY=a("a"),QCr=o("TFRoFormerModel"),HCr=o(" (RoFormer model)"),UCr=l(),DM=a("li"),U9e=a("strong"),JCr=o("segformer"),YCr=o(" \u2014 "),TY=a("a"),KCr=o("TFSegformerModel"),ZCr=o(" (SegFormer model)"),e3r=l(),GM=a("li"),J9e=a("strong"),o3r=o("speech_to_text"),r3r=o(" \u2014 "),MY=a("a"),t3r=o("TFSpeech2TextModel"),a3r=o(" (Speech2Text model)"),n3r=l(),OM=a("li"),Y9e=a("strong"),s3r=o("swin"),l3r=o(" \u2014 "),EY=a("a"),i3r=o("TFSwinModel"),d3r=o(" (Swin Transformer model)"),c3r=l(),VM=a("li"),K9e=a("strong"),f3r=o("t5"),m3r=o(" \u2014 "),CY=a("a"),g3r=o("TFT5Model"),h3r=o(" (T5 model)"),p3r=l(),XM=a("li"),Z9e=a("strong"),_3r=o("tapas"),u3r=o(" \u2014 "),wY=a("a"),b3r=o("TFTapasModel"),v3r=o(" (TAPAS model)"),F3r=l(),zM=a("li"),eMe=a("strong"),T3r=o("transfo-xl"),M3r=o(" \u2014 "),AY=a("a"),E3r=o("TFTransfoXLModel"),C3r=o(" (Transformer-XL model)"),w3r=l(),WM=a("li"),oMe=a("strong"),A3r=o("vit"),L3r=o(" \u2014 "),LY=a("a"),y3r=o("TFViTModel"),x3r=o(" (ViT model)"),$3r=l(),QM=a("li"),rMe=a("strong"),k3r=o("vit_mae"),S3r=o(" \u2014 "),yY=a("a"),R3r=o("TFViTMAEModel"),P3r=o(" (ViTMAE model)"),B3r=l(),HM=a("li"),tMe=a("strong"),I3r=o("wav2vec2"),N3r=o(" \u2014 "),xY=a("a"),q3r=o("TFWav2Vec2Model"),j3r=o(" (Wav2Vec2 model)"),D3r=l(),UM=a("li"),aMe=a("strong"),G3r=o("xlm"),O3r=o(" \u2014 "),$Y=a("a"),V3r=o("TFXLMModel"),X3r=o(" (XLM model)"),z3r=l(),JM=a("li"),nMe=a("strong"),W3r=o("xlm-roberta"),Q3r=o(" \u2014 "),kY=a("a"),H3r=o("TFXLMRobertaModel"),U3r=o(" (XLM-RoBERTa model)"),J3r=l(),YM=a("li"),sMe=a("strong"),Y3r=o("xlnet"),K3r=o(" \u2014 "),SY=a("a"),Z3r=o("TFXLNetModel"),e0r=o(" (XLNet model)"),o0r=l(),F(KM.$$.fragment),WQe=l(),Fc=a("h2"),ZM=a("a"),lMe=a("span"),F(Ox.$$.fragment),r0r=l(),iMe=a("span"),t0r=o("TFAutoModelForPreTraining"),QQe=l(),nr=a("div"),F(Vx.$$.fragment),a0r=l(),Tc=a("p"),n0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RY=a("a"),s0r=o("from_pretrained()"),l0r=o(" class method or the "),PY=a("a"),i0r=o("from_config()"),d0r=o(` class
method.`),c0r=l(),Xx=a("p"),f0r=o("This class cannot be instantiated directly using "),dMe=a("code"),m0r=o("__init__()"),g0r=o(" (throws an error)."),h0r=l(),Nt=a("div"),F(zx.$$.fragment),p0r=l(),cMe=a("p"),_0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u0r=l(),Mc=a("p"),b0r=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),v0r=o("not"),F0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),T0r=o("from_pretrained()"),M0r=o(" to load the model weights."),E0r=l(),F(eE.$$.fragment),C0r=l(),Rr=a("div"),F(Wx.$$.fragment),w0r=l(),mMe=a("p"),A0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L0r=l(),hn=a("p"),y0r=o("The model class to instantiate is selected based on the "),gMe=a("code"),x0r=o("model_type"),$0r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),k0r=o("pretrained_model_name_or_path"),S0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),R0r=o("pretrained_model_name_or_path"),P0r=o(":"),B0r=l(),se=a("ul"),oE=a("li"),_Me=a("strong"),I0r=o("albert"),N0r=o(" \u2014 "),IY=a("a"),q0r=o("TFAlbertForPreTraining"),j0r=o(" (ALBERT model)"),D0r=l(),rE=a("li"),uMe=a("strong"),G0r=o("bart"),O0r=o(" \u2014 "),NY=a("a"),V0r=o("TFBartForConditionalGeneration"),X0r=o(" (BART model)"),z0r=l(),tE=a("li"),bMe=a("strong"),W0r=o("bert"),Q0r=o(" \u2014 "),qY=a("a"),H0r=o("TFBertForPreTraining"),U0r=o(" (BERT model)"),J0r=l(),aE=a("li"),vMe=a("strong"),Y0r=o("camembert"),K0r=o(" \u2014 "),jY=a("a"),Z0r=o("TFCamembertForMaskedLM"),ewr=o(" (CamemBERT model)"),owr=l(),nE=a("li"),FMe=a("strong"),rwr=o("ctrl"),twr=o(" \u2014 "),DY=a("a"),awr=o("TFCTRLLMHeadModel"),nwr=o(" (CTRL model)"),swr=l(),sE=a("li"),TMe=a("strong"),lwr=o("distilbert"),iwr=o(" \u2014 "),GY=a("a"),dwr=o("TFDistilBertForMaskedLM"),cwr=o(" (DistilBERT model)"),fwr=l(),lE=a("li"),MMe=a("strong"),mwr=o("electra"),gwr=o(" \u2014 "),OY=a("a"),hwr=o("TFElectraForPreTraining"),pwr=o(" (ELECTRA model)"),_wr=l(),iE=a("li"),EMe=a("strong"),uwr=o("flaubert"),bwr=o(" \u2014 "),VY=a("a"),vwr=o("TFFlaubertWithLMHeadModel"),Fwr=o(" (FlauBERT model)"),Twr=l(),dE=a("li"),CMe=a("strong"),Mwr=o("funnel"),Ewr=o(" \u2014 "),XY=a("a"),Cwr=o("TFFunnelForPreTraining"),wwr=o(" (Funnel Transformer model)"),Awr=l(),cE=a("li"),wMe=a("strong"),Lwr=o("gpt2"),ywr=o(" \u2014 "),zY=a("a"),xwr=o("TFGPT2LMHeadModel"),$wr=o(" (OpenAI GPT-2 model)"),kwr=l(),fE=a("li"),AMe=a("strong"),Swr=o("layoutlm"),Rwr=o(" \u2014 "),WY=a("a"),Pwr=o("TFLayoutLMForMaskedLM"),Bwr=o(" (LayoutLM model)"),Iwr=l(),mE=a("li"),LMe=a("strong"),Nwr=o("lxmert"),qwr=o(" \u2014 "),QY=a("a"),jwr=o("TFLxmertForPreTraining"),Dwr=o(" (LXMERT model)"),Gwr=l(),gE=a("li"),yMe=a("strong"),Owr=o("mobilebert"),Vwr=o(" \u2014 "),HY=a("a"),Xwr=o("TFMobileBertForPreTraining"),zwr=o(" (MobileBERT model)"),Wwr=l(),hE=a("li"),xMe=a("strong"),Qwr=o("mpnet"),Hwr=o(" \u2014 "),UY=a("a"),Uwr=o("TFMPNetForMaskedLM"),Jwr=o(" (MPNet model)"),Ywr=l(),pE=a("li"),$Me=a("strong"),Kwr=o("openai-gpt"),Zwr=o(" \u2014 "),JY=a("a"),e6r=o("TFOpenAIGPTLMHeadModel"),o6r=o(" (OpenAI GPT model)"),r6r=l(),_E=a("li"),kMe=a("strong"),t6r=o("roberta"),a6r=o(" \u2014 "),YY=a("a"),n6r=o("TFRobertaForMaskedLM"),s6r=o(" (RoBERTa model)"),l6r=l(),uE=a("li"),SMe=a("strong"),i6r=o("t5"),d6r=o(" \u2014 "),KY=a("a"),c6r=o("TFT5ForConditionalGeneration"),f6r=o(" (T5 model)"),m6r=l(),bE=a("li"),RMe=a("strong"),g6r=o("tapas"),h6r=o(" \u2014 "),ZY=a("a"),p6r=o("TFTapasForMaskedLM"),_6r=o(" (TAPAS model)"),u6r=l(),vE=a("li"),PMe=a("strong"),b6r=o("transfo-xl"),v6r=o(" \u2014 "),eK=a("a"),F6r=o("TFTransfoXLLMHeadModel"),T6r=o(" (Transformer-XL model)"),M6r=l(),FE=a("li"),BMe=a("strong"),E6r=o("vit_mae"),C6r=o(" \u2014 "),oK=a("a"),w6r=o("TFViTMAEForPreTraining"),A6r=o(" (ViTMAE model)"),L6r=l(),TE=a("li"),IMe=a("strong"),y6r=o("xlm"),x6r=o(" \u2014 "),rK=a("a"),$6r=o("TFXLMWithLMHeadModel"),k6r=o(" (XLM model)"),S6r=l(),ME=a("li"),NMe=a("strong"),R6r=o("xlm-roberta"),P6r=o(" \u2014 "),tK=a("a"),B6r=o("TFXLMRobertaForMaskedLM"),I6r=o(" (XLM-RoBERTa model)"),N6r=l(),EE=a("li"),qMe=a("strong"),q6r=o("xlnet"),j6r=o(" \u2014 "),aK=a("a"),D6r=o("TFXLNetLMHeadModel"),G6r=o(" (XLNet model)"),O6r=l(),F(CE.$$.fragment),HQe=l(),Ec=a("h2"),wE=a("a"),jMe=a("span"),F(Qx.$$.fragment),V6r=l(),DMe=a("span"),X6r=o("TFAutoModelForCausalLM"),UQe=l(),sr=a("div"),F(Hx.$$.fragment),z6r=l(),Cc=a("p"),W6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nK=a("a"),Q6r=o("from_pretrained()"),H6r=o(" class method or the "),sK=a("a"),U6r=o("from_config()"),J6r=o(` class
method.`),Y6r=l(),Ux=a("p"),K6r=o("This class cannot be instantiated directly using "),GMe=a("code"),Z6r=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),qt=a("div"),F(Jx.$$.fragment),rAr=l(),OMe=a("p"),tAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aAr=l(),wc=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),iAr=o("from_pretrained()"),dAr=o(" to load the model weights."),cAr=l(),F(AE.$$.fragment),fAr=l(),Pr=a("div"),F(Yx.$$.fragment),mAr=l(),XMe=a("p"),gAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hAr=l(),pn=a("p"),pAr=o("The model class to instantiate is selected based on the "),zMe=a("code"),_Ar=o("model_type"),uAr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),Me=a("ul"),LE=a("li"),HMe=a("strong"),EAr=o("bert"),CAr=o(" \u2014 "),iK=a("a"),wAr=o("TFBertLMHeadModel"),AAr=o(" (BERT model)"),LAr=l(),yE=a("li"),UMe=a("strong"),yAr=o("camembert"),xAr=o(" \u2014 "),dK=a("a"),$Ar=o("TFCamembertForCausalLM"),kAr=o(" (CamemBERT model)"),SAr=l(),xE=a("li"),JMe=a("strong"),RAr=o("ctrl"),PAr=o(" \u2014 "),cK=a("a"),BAr=o("TFCTRLLMHeadModel"),IAr=o(" (CTRL model)"),NAr=l(),$E=a("li"),YMe=a("strong"),qAr=o("gpt2"),jAr=o(" \u2014 "),fK=a("a"),DAr=o("TFGPT2LMHeadModel"),GAr=o(" (OpenAI GPT-2 model)"),OAr=l(),kE=a("li"),KMe=a("strong"),VAr=o("gptj"),XAr=o(" \u2014 "),mK=a("a"),zAr=o("TFGPTJForCausalLM"),WAr=o(" (GPT-J model)"),QAr=l(),SE=a("li"),ZMe=a("strong"),HAr=o("openai-gpt"),UAr=o(" \u2014 "),gK=a("a"),JAr=o("TFOpenAIGPTLMHeadModel"),YAr=o(" (OpenAI GPT model)"),KAr=l(),RE=a("li"),eEe=a("strong"),ZAr=o("opt"),e7r=o(" \u2014 "),hK=a("a"),o7r=o("TFOPTForCausalLM"),r7r=o(" (OPT model)"),t7r=l(),PE=a("li"),oEe=a("strong"),a7r=o("rembert"),n7r=o(" \u2014 "),pK=a("a"),s7r=o("TFRemBertForCausalLM"),l7r=o(" (RemBERT model)"),i7r=l(),BE=a("li"),rEe=a("strong"),d7r=o("roberta"),c7r=o(" \u2014 "),_K=a("a"),f7r=o("TFRobertaForCausalLM"),m7r=o(" (RoBERTa model)"),g7r=l(),IE=a("li"),tEe=a("strong"),h7r=o("roformer"),p7r=o(" \u2014 "),uK=a("a"),_7r=o("TFRoFormerForCausalLM"),u7r=o(" (RoFormer model)"),b7r=l(),NE=a("li"),aEe=a("strong"),v7r=o("transfo-xl"),F7r=o(" \u2014 "),bK=a("a"),T7r=o("TFTransfoXLLMHeadModel"),M7r=o(" (Transformer-XL model)"),E7r=l(),qE=a("li"),nEe=a("strong"),C7r=o("xlm"),w7r=o(" \u2014 "),vK=a("a"),A7r=o("TFXLMWithLMHeadModel"),L7r=o(" (XLM model)"),y7r=l(),jE=a("li"),sEe=a("strong"),x7r=o("xlnet"),$7r=o(" \u2014 "),FK=a("a"),k7r=o("TFXLNetLMHeadModel"),S7r=o(" (XLNet model)"),R7r=l(),F(DE.$$.fragment),JQe=l(),Ac=a("h2"),GE=a("a"),lEe=a("span"),F(Kx.$$.fragment),P7r=l(),iEe=a("span"),B7r=o("TFAutoModelForImageClassification"),YQe=l(),lr=a("div"),F(Zx.$$.fragment),I7r=l(),Lc=a("p"),N7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TK=a("a"),q7r=o("from_pretrained()"),j7r=o(" class method or the "),MK=a("a"),D7r=o("from_config()"),G7r=o(` class
method.`),O7r=l(),e$=a("p"),V7r=o("This class cannot be instantiated directly using "),dEe=a("code"),X7r=o("__init__()"),z7r=o(" (throws an error)."),W7r=l(),jt=a("div"),F(o$.$$.fragment),Q7r=l(),cEe=a("p"),H7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),U7r=l(),yc=a("p"),J7r=o(`Note:
Loading a model from its configuration file does `),fEe=a("strong"),Y7r=o("not"),K7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),Z7r=o("from_pretrained()"),eLr=o(" to load the model weights."),oLr=l(),F(OE.$$.fragment),rLr=l(),Br=a("div"),F(r$.$$.fragment),tLr=l(),mEe=a("p"),aLr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nLr=l(),_n=a("p"),sLr=o("The model class to instantiate is selected based on the "),gEe=a("code"),lLr=o("model_type"),iLr=o(` property of the config object (either
passed as an argument or loaded from `),hEe=a("code"),dLr=o("pretrained_model_name_or_path"),cLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(":"),gLr=l(),Ve=a("ul"),VE=a("li"),_Ee=a("strong"),hLr=o("convnext"),pLr=o(" \u2014 "),CK=a("a"),_Lr=o("TFConvNextForImageClassification"),uLr=o(" (ConvNeXT model)"),bLr=l(),XE=a("li"),uEe=a("strong"),vLr=o("data2vec-vision"),FLr=o(" \u2014 "),wK=a("a"),TLr=o("TFData2VecVisionForImageClassification"),MLr=o(" (Data2VecVision model)"),ELr=l(),nl=a("li"),bEe=a("strong"),CLr=o("deit"),wLr=o(" \u2014 "),AK=a("a"),ALr=o("TFDeiTForImageClassification"),LLr=o(" or "),LK=a("a"),yLr=o("TFDeiTForImageClassificationWithTeacher"),xLr=o(" (DeiT model)"),$Lr=l(),zE=a("li"),vEe=a("strong"),kLr=o("regnet"),SLr=o(" \u2014 "),yK=a("a"),RLr=o("TFRegNetForImageClassification"),PLr=o(" (RegNet model)"),BLr=l(),WE=a("li"),FEe=a("strong"),ILr=o("resnet"),NLr=o(" \u2014 "),xK=a("a"),qLr=o("TFResNetForImageClassification"),jLr=o(" (ResNet model)"),DLr=l(),QE=a("li"),TEe=a("strong"),GLr=o("segformer"),OLr=o(" \u2014 "),$K=a("a"),VLr=o("TFSegformerForImageClassification"),XLr=o(" (SegFormer model)"),zLr=l(),HE=a("li"),MEe=a("strong"),WLr=o("swin"),QLr=o(" \u2014 "),kK=a("a"),HLr=o("TFSwinForImageClassification"),ULr=o(" (Swin Transformer model)"),JLr=l(),UE=a("li"),EEe=a("strong"),YLr=o("vit"),KLr=o(" \u2014 "),SK=a("a"),ZLr=o("TFViTForImageClassification"),eyr=o(" (ViT model)"),oyr=l(),F(JE.$$.fragment),KQe=l(),xc=a("h2"),YE=a("a"),CEe=a("span"),F(t$.$$.fragment),ryr=l(),wEe=a("span"),tyr=o("TFAutoModelForMaskedLM"),ZQe=l(),ir=a("div"),F(a$.$$.fragment),ayr=l(),$c=a("p"),nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RK=a("a"),syr=o("from_pretrained()"),lyr=o(" class method or the "),PK=a("a"),iyr=o("from_config()"),dyr=o(` class
method.`),cyr=l(),n$=a("p"),fyr=o("This class cannot be instantiated directly using "),AEe=a("code"),myr=o("__init__()"),gyr=o(" (throws an error)."),hyr=l(),Dt=a("div"),F(s$.$$.fragment),pyr=l(),LEe=a("p"),_yr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uyr=l(),kc=a("p"),byr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),vyr=o("not"),Fyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),Tyr=o("from_pretrained()"),Myr=o(" to load the model weights."),Eyr=l(),F(KE.$$.fragment),Cyr=l(),Ir=a("div"),F(l$.$$.fragment),wyr=l(),xEe=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Lyr=l(),un=a("p"),yyr=o("The model class to instantiate is selected based on the "),$Ee=a("code"),xyr=o("model_type"),$yr=o(` property of the config object (either
passed as an argument or loaded from `),kEe=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=a("code"),Ryr=o("pretrained_model_name_or_path"),Pyr=o(":"),Byr=l(),ie=a("ul"),ZE=a("li"),REe=a("strong"),Iyr=o("albert"),Nyr=o(" \u2014 "),IK=a("a"),qyr=o("TFAlbertForMaskedLM"),jyr=o(" (ALBERT model)"),Dyr=l(),e4=a("li"),PEe=a("strong"),Gyr=o("bert"),Oyr=o(" \u2014 "),NK=a("a"),Vyr=o("TFBertForMaskedLM"),Xyr=o(" (BERT model)"),zyr=l(),o4=a("li"),BEe=a("strong"),Wyr=o("camembert"),Qyr=o(" \u2014 "),qK=a("a"),Hyr=o("TFCamembertForMaskedLM"),Uyr=o(" (CamemBERT model)"),Jyr=l(),r4=a("li"),IEe=a("strong"),Yyr=o("convbert"),Kyr=o(" \u2014 "),jK=a("a"),Zyr=o("TFConvBertForMaskedLM"),exr=o(" (ConvBERT model)"),oxr=l(),t4=a("li"),NEe=a("strong"),rxr=o("deberta"),txr=o(" \u2014 "),DK=a("a"),axr=o("TFDebertaForMaskedLM"),nxr=o(" (DeBERTa model)"),sxr=l(),a4=a("li"),qEe=a("strong"),lxr=o("deberta-v2"),ixr=o(" \u2014 "),GK=a("a"),dxr=o("TFDebertaV2ForMaskedLM"),cxr=o(" (DeBERTa-v2 model)"),fxr=l(),n4=a("li"),jEe=a("strong"),mxr=o("distilbert"),gxr=o(" \u2014 "),OK=a("a"),hxr=o("TFDistilBertForMaskedLM"),pxr=o(" (DistilBERT model)"),_xr=l(),s4=a("li"),DEe=a("strong"),uxr=o("electra"),bxr=o(" \u2014 "),VK=a("a"),vxr=o("TFElectraForMaskedLM"),Fxr=o(" (ELECTRA model)"),Txr=l(),l4=a("li"),GEe=a("strong"),Mxr=o("flaubert"),Exr=o(" \u2014 "),XK=a("a"),Cxr=o("TFFlaubertWithLMHeadModel"),wxr=o(" (FlauBERT model)"),Axr=l(),i4=a("li"),OEe=a("strong"),Lxr=o("funnel"),yxr=o(" \u2014 "),zK=a("a"),xxr=o("TFFunnelForMaskedLM"),$xr=o(" (Funnel Transformer model)"),kxr=l(),d4=a("li"),VEe=a("strong"),Sxr=o("layoutlm"),Rxr=o(" \u2014 "),WK=a("a"),Pxr=o("TFLayoutLMForMaskedLM"),Bxr=o(" (LayoutLM model)"),Ixr=l(),c4=a("li"),XEe=a("strong"),Nxr=o("longformer"),qxr=o(" \u2014 "),QK=a("a"),jxr=o("TFLongformerForMaskedLM"),Dxr=o(" (Longformer model)"),Gxr=l(),f4=a("li"),zEe=a("strong"),Oxr=o("mobilebert"),Vxr=o(" \u2014 "),HK=a("a"),Xxr=o("TFMobileBertForMaskedLM"),zxr=o(" (MobileBERT model)"),Wxr=l(),m4=a("li"),WEe=a("strong"),Qxr=o("mpnet"),Hxr=o(" \u2014 "),UK=a("a"),Uxr=o("TFMPNetForMaskedLM"),Jxr=o(" (MPNet model)"),Yxr=l(),g4=a("li"),QEe=a("strong"),Kxr=o("rembert"),Zxr=o(" \u2014 "),JK=a("a"),e$r=o("TFRemBertForMaskedLM"),o$r=o(" (RemBERT model)"),r$r=l(),h4=a("li"),HEe=a("strong"),t$r=o("roberta"),a$r=o(" \u2014 "),YK=a("a"),n$r=o("TFRobertaForMaskedLM"),s$r=o(" (RoBERTa model)"),l$r=l(),p4=a("li"),UEe=a("strong"),i$r=o("roformer"),d$r=o(" \u2014 "),KK=a("a"),c$r=o("TFRoFormerForMaskedLM"),f$r=o(" (RoFormer model)"),m$r=l(),_4=a("li"),JEe=a("strong"),g$r=o("tapas"),h$r=o(" \u2014 "),ZK=a("a"),p$r=o("TFTapasForMaskedLM"),_$r=o(" (TAPAS model)"),u$r=l(),u4=a("li"),YEe=a("strong"),b$r=o("xlm"),v$r=o(" \u2014 "),eZ=a("a"),F$r=o("TFXLMWithLMHeadModel"),T$r=o(" (XLM model)"),M$r=l(),b4=a("li"),KEe=a("strong"),E$r=o("xlm-roberta"),C$r=o(" \u2014 "),oZ=a("a"),w$r=o("TFXLMRobertaForMaskedLM"),A$r=o(" (XLM-RoBERTa model)"),L$r=l(),F(v4.$$.fragment),eHe=l(),Sc=a("h2"),F4=a("a"),ZEe=a("span"),F(i$.$$.fragment),y$r=l(),e4e=a("span"),x$r=o("TFAutoModelForSeq2SeqLM"),oHe=l(),dr=a("div"),F(d$.$$.fragment),$$r=l(),Rc=a("p"),k$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rZ=a("a"),S$r=o("from_pretrained()"),R$r=o(" class method or the "),tZ=a("a"),P$r=o("from_config()"),B$r=o(` class
method.`),I$r=l(),c$=a("p"),N$r=o("This class cannot be instantiated directly using "),o4e=a("code"),q$r=o("__init__()"),j$r=o(" (throws an error)."),D$r=l(),Gt=a("div"),F(f$.$$.fragment),G$r=l(),r4e=a("p"),O$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),V$r=l(),Pc=a("p"),X$r=o(`Note:
Loading a model from its configuration file does `),t4e=a("strong"),z$r=o("not"),W$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),Q$r=o("from_pretrained()"),H$r=o(" to load the model weights."),U$r=l(),F(T4.$$.fragment),J$r=l(),Nr=a("div"),F(m$.$$.fragment),Y$r=l(),a4e=a("p"),K$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Z$r=l(),bn=a("p"),ekr=o("The model class to instantiate is selected based on the "),n4e=a("code"),okr=o("model_type"),rkr=o(` property of the config object (either
passed as an argument or loaded from `),s4e=a("code"),tkr=o("pretrained_model_name_or_path"),akr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(":"),lkr=l(),ye=a("ul"),M4=a("li"),i4e=a("strong"),ikr=o("bart"),dkr=o(" \u2014 "),nZ=a("a"),ckr=o("TFBartForConditionalGeneration"),fkr=o(" (BART model)"),mkr=l(),E4=a("li"),d4e=a("strong"),gkr=o("blenderbot"),hkr=o(" \u2014 "),sZ=a("a"),pkr=o("TFBlenderbotForConditionalGeneration"),_kr=o(" (Blenderbot model)"),ukr=l(),C4=a("li"),c4e=a("strong"),bkr=o("blenderbot-small"),vkr=o(" \u2014 "),lZ=a("a"),Fkr=o("TFBlenderbotSmallForConditionalGeneration"),Tkr=o(" (BlenderbotSmall model)"),Mkr=l(),w4=a("li"),f4e=a("strong"),Ekr=o("encoder-decoder"),Ckr=o(" \u2014 "),iZ=a("a"),wkr=o("TFEncoderDecoderModel"),Akr=o(" (Encoder decoder model)"),Lkr=l(),A4=a("li"),m4e=a("strong"),ykr=o("led"),xkr=o(" \u2014 "),dZ=a("a"),$kr=o("TFLEDForConditionalGeneration"),kkr=o(" (LED model)"),Skr=l(),L4=a("li"),g4e=a("strong"),Rkr=o("marian"),Pkr=o(" \u2014 "),cZ=a("a"),Bkr=o("TFMarianMTModel"),Ikr=o(" (Marian model)"),Nkr=l(),y4=a("li"),h4e=a("strong"),qkr=o("mbart"),jkr=o(" \u2014 "),fZ=a("a"),Dkr=o("TFMBartForConditionalGeneration"),Gkr=o(" (mBART model)"),Okr=l(),x4=a("li"),p4e=a("strong"),Vkr=o("mt5"),Xkr=o(" \u2014 "),mZ=a("a"),zkr=o("TFMT5ForConditionalGeneration"),Wkr=o(" (MT5 model)"),Qkr=l(),$4=a("li"),_4e=a("strong"),Hkr=o("pegasus"),Ukr=o(" \u2014 "),gZ=a("a"),Jkr=o("TFPegasusForConditionalGeneration"),Ykr=o(" (Pegasus model)"),Kkr=l(),k4=a("li"),u4e=a("strong"),Zkr=o("t5"),eSr=o(" \u2014 "),hZ=a("a"),oSr=o("TFT5ForConditionalGeneration"),rSr=o(" (T5 model)"),tSr=l(),F(S4.$$.fragment),rHe=l(),Bc=a("h2"),R4=a("a"),b4e=a("span"),F(g$.$$.fragment),aSr=l(),v4e=a("span"),nSr=o("TFAutoModelForSequenceClassification"),tHe=l(),cr=a("div"),F(h$.$$.fragment),sSr=l(),Ic=a("p"),lSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pZ=a("a"),iSr=o("from_pretrained()"),dSr=o(" class method or the "),_Z=a("a"),cSr=o("from_config()"),fSr=o(` class
method.`),mSr=l(),p$=a("p"),gSr=o("This class cannot be instantiated directly using "),F4e=a("code"),hSr=o("__init__()"),pSr=o(" (throws an error)."),_Sr=l(),Ot=a("div"),F(_$.$$.fragment),uSr=l(),T4e=a("p"),bSr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vSr=l(),Nc=a("p"),FSr=o(`Note:
Loading a model from its configuration file does `),M4e=a("strong"),TSr=o("not"),MSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),ESr=o("from_pretrained()"),CSr=o(" to load the model weights."),wSr=l(),F(P4.$$.fragment),ASr=l(),qr=a("div"),F(u$.$$.fragment),LSr=l(),E4e=a("p"),ySr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xSr=l(),vn=a("p"),$Sr=o("The model class to instantiate is selected based on the "),C4e=a("code"),kSr=o("model_type"),SSr=o(` property of the config object (either
passed as an argument or loaded from `),w4e=a("code"),RSr=o("pretrained_model_name_or_path"),PSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=a("code"),BSr=o("pretrained_model_name_or_path"),ISr=o(":"),NSr=l(),te=a("ul"),B4=a("li"),L4e=a("strong"),qSr=o("albert"),jSr=o(" \u2014 "),bZ=a("a"),DSr=o("TFAlbertForSequenceClassification"),GSr=o(" (ALBERT model)"),OSr=l(),I4=a("li"),y4e=a("strong"),VSr=o("bert"),XSr=o(" \u2014 "),vZ=a("a"),zSr=o("TFBertForSequenceClassification"),WSr=o(" (BERT model)"),QSr=l(),N4=a("li"),x4e=a("strong"),HSr=o("camembert"),USr=o(" \u2014 "),FZ=a("a"),JSr=o("TFCamembertForSequenceClassification"),YSr=o(" (CamemBERT model)"),KSr=l(),q4=a("li"),$4e=a("strong"),ZSr=o("convbert"),eRr=o(" \u2014 "),TZ=a("a"),oRr=o("TFConvBertForSequenceClassification"),rRr=o(" (ConvBERT model)"),tRr=l(),j4=a("li"),k4e=a("strong"),aRr=o("ctrl"),nRr=o(" \u2014 "),MZ=a("a"),sRr=o("TFCTRLForSequenceClassification"),lRr=o(" (CTRL model)"),iRr=l(),D4=a("li"),S4e=a("strong"),dRr=o("deberta"),cRr=o(" \u2014 "),EZ=a("a"),fRr=o("TFDebertaForSequenceClassification"),mRr=o(" (DeBERTa model)"),gRr=l(),G4=a("li"),R4e=a("strong"),hRr=o("deberta-v2"),pRr=o(" \u2014 "),CZ=a("a"),_Rr=o("TFDebertaV2ForSequenceClassification"),uRr=o(" (DeBERTa-v2 model)"),bRr=l(),O4=a("li"),P4e=a("strong"),vRr=o("distilbert"),FRr=o(" \u2014 "),wZ=a("a"),TRr=o("TFDistilBertForSequenceClassification"),MRr=o(" (DistilBERT model)"),ERr=l(),V4=a("li"),B4e=a("strong"),CRr=o("electra"),wRr=o(" \u2014 "),AZ=a("a"),ARr=o("TFElectraForSequenceClassification"),LRr=o(" (ELECTRA model)"),yRr=l(),X4=a("li"),I4e=a("strong"),xRr=o("flaubert"),$Rr=o(" \u2014 "),LZ=a("a"),kRr=o("TFFlaubertForSequenceClassification"),SRr=o(" (FlauBERT model)"),RRr=l(),z4=a("li"),N4e=a("strong"),PRr=o("funnel"),BRr=o(" \u2014 "),yZ=a("a"),IRr=o("TFFunnelForSequenceClassification"),NRr=o(" (Funnel Transformer model)"),qRr=l(),W4=a("li"),q4e=a("strong"),jRr=o("gpt2"),DRr=o(" \u2014 "),xZ=a("a"),GRr=o("TFGPT2ForSequenceClassification"),ORr=o(" (OpenAI GPT-2 model)"),VRr=l(),Q4=a("li"),j4e=a("strong"),XRr=o("gptj"),zRr=o(" \u2014 "),$Z=a("a"),WRr=o("TFGPTJForSequenceClassification"),QRr=o(" (GPT-J model)"),HRr=l(),H4=a("li"),D4e=a("strong"),URr=o("layoutlm"),JRr=o(" \u2014 "),kZ=a("a"),YRr=o("TFLayoutLMForSequenceClassification"),KRr=o(" (LayoutLM model)"),ZRr=l(),U4=a("li"),G4e=a("strong"),ePr=o("longformer"),oPr=o(" \u2014 "),SZ=a("a"),rPr=o("TFLongformerForSequenceClassification"),tPr=o(" (Longformer model)"),aPr=l(),J4=a("li"),O4e=a("strong"),nPr=o("mobilebert"),sPr=o(" \u2014 "),RZ=a("a"),lPr=o("TFMobileBertForSequenceClassification"),iPr=o(" (MobileBERT model)"),dPr=l(),Y4=a("li"),V4e=a("strong"),cPr=o("mpnet"),fPr=o(" \u2014 "),PZ=a("a"),mPr=o("TFMPNetForSequenceClassification"),gPr=o(" (MPNet model)"),hPr=l(),K4=a("li"),X4e=a("strong"),pPr=o("openai-gpt"),_Pr=o(" \u2014 "),BZ=a("a"),uPr=o("TFOpenAIGPTForSequenceClassification"),bPr=o(" (OpenAI GPT model)"),vPr=l(),Z4=a("li"),z4e=a("strong"),FPr=o("rembert"),TPr=o(" \u2014 "),IZ=a("a"),MPr=o("TFRemBertForSequenceClassification"),EPr=o(" (RemBERT model)"),CPr=l(),eC=a("li"),W4e=a("strong"),wPr=o("roberta"),APr=o(" \u2014 "),NZ=a("a"),LPr=o("TFRobertaForSequenceClassification"),yPr=o(" (RoBERTa model)"),xPr=l(),oC=a("li"),Q4e=a("strong"),$Pr=o("roformer"),kPr=o(" \u2014 "),qZ=a("a"),SPr=o("TFRoFormerForSequenceClassification"),RPr=o(" (RoFormer model)"),PPr=l(),rC=a("li"),H4e=a("strong"),BPr=o("tapas"),IPr=o(" \u2014 "),jZ=a("a"),NPr=o("TFTapasForSequenceClassification"),qPr=o(" (TAPAS model)"),jPr=l(),tC=a("li"),U4e=a("strong"),DPr=o("transfo-xl"),GPr=o(" \u2014 "),DZ=a("a"),OPr=o("TFTransfoXLForSequenceClassification"),VPr=o(" (Transformer-XL model)"),XPr=l(),aC=a("li"),J4e=a("strong"),zPr=o("xlm"),WPr=o(" \u2014 "),GZ=a("a"),QPr=o("TFXLMForSequenceClassification"),HPr=o(" (XLM model)"),UPr=l(),nC=a("li"),Y4e=a("strong"),JPr=o("xlm-roberta"),YPr=o(" \u2014 "),OZ=a("a"),KPr=o("TFXLMRobertaForSequenceClassification"),ZPr=o(" (XLM-RoBERTa model)"),eBr=l(),sC=a("li"),K4e=a("strong"),oBr=o("xlnet"),rBr=o(" \u2014 "),VZ=a("a"),tBr=o("TFXLNetForSequenceClassification"),aBr=o(" (XLNet model)"),nBr=l(),F(lC.$$.fragment),aHe=l(),qc=a("h2"),iC=a("a"),Z4e=a("span"),F(b$.$$.fragment),sBr=l(),eCe=a("span"),lBr=o("TFAutoModelForMultipleChoice"),nHe=l(),fr=a("div"),F(v$.$$.fragment),iBr=l(),jc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XZ=a("a"),cBr=o("from_pretrained()"),fBr=o(" class method or the "),zZ=a("a"),mBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),F$=a("p"),pBr=o("This class cannot be instantiated directly using "),oCe=a("code"),_Br=o("__init__()"),uBr=o(" (throws an error)."),bBr=l(),Vt=a("div"),F(T$.$$.fragment),vBr=l(),rCe=a("p"),FBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),TBr=l(),Dc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),LBr=l(),F(dC.$$.fragment),yBr=l(),jr=a("div"),F(M$.$$.fragment),xBr=l(),aCe=a("p"),$Br=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kBr=l(),Fn=a("p"),SBr=o("The model class to instantiate is selected based on the "),nCe=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),ve=a("ul"),cC=a("li"),iCe=a("strong"),DBr=o("albert"),GBr=o(" \u2014 "),QZ=a("a"),OBr=o("TFAlbertForMultipleChoice"),VBr=o(" (ALBERT model)"),XBr=l(),fC=a("li"),dCe=a("strong"),zBr=o("bert"),WBr=o(" \u2014 "),HZ=a("a"),QBr=o("TFBertForMultipleChoice"),HBr=o(" (BERT model)"),UBr=l(),mC=a("li"),cCe=a("strong"),JBr=o("camembert"),YBr=o(" \u2014 "),UZ=a("a"),KBr=o("TFCamembertForMultipleChoice"),ZBr=o(" (CamemBERT model)"),eIr=l(),gC=a("li"),fCe=a("strong"),oIr=o("convbert"),rIr=o(" \u2014 "),JZ=a("a"),tIr=o("TFConvBertForMultipleChoice"),aIr=o(" (ConvBERT model)"),nIr=l(),hC=a("li"),mCe=a("strong"),sIr=o("distilbert"),lIr=o(" \u2014 "),YZ=a("a"),iIr=o("TFDistilBertForMultipleChoice"),dIr=o(" (DistilBERT model)"),cIr=l(),pC=a("li"),gCe=a("strong"),fIr=o("electra"),mIr=o(" \u2014 "),KZ=a("a"),gIr=o("TFElectraForMultipleChoice"),hIr=o(" (ELECTRA model)"),pIr=l(),_C=a("li"),hCe=a("strong"),_Ir=o("flaubert"),uIr=o(" \u2014 "),ZZ=a("a"),bIr=o("TFFlaubertForMultipleChoice"),vIr=o(" (FlauBERT model)"),FIr=l(),uC=a("li"),pCe=a("strong"),TIr=o("funnel"),MIr=o(" \u2014 "),eee=a("a"),EIr=o("TFFunnelForMultipleChoice"),CIr=o(" (Funnel Transformer model)"),wIr=l(),bC=a("li"),_Ce=a("strong"),AIr=o("longformer"),LIr=o(" \u2014 "),oee=a("a"),yIr=o("TFLongformerForMultipleChoice"),xIr=o(" (Longformer model)"),$Ir=l(),vC=a("li"),uCe=a("strong"),kIr=o("mobilebert"),SIr=o(" \u2014 "),ree=a("a"),RIr=o("TFMobileBertForMultipleChoice"),PIr=o(" (MobileBERT model)"),BIr=l(),FC=a("li"),bCe=a("strong"),IIr=o("mpnet"),NIr=o(" \u2014 "),tee=a("a"),qIr=o("TFMPNetForMultipleChoice"),jIr=o(" (MPNet model)"),DIr=l(),TC=a("li"),vCe=a("strong"),GIr=o("rembert"),OIr=o(" \u2014 "),aee=a("a"),VIr=o("TFRemBertForMultipleChoice"),XIr=o(" (RemBERT model)"),zIr=l(),MC=a("li"),FCe=a("strong"),WIr=o("roberta"),QIr=o(" \u2014 "),nee=a("a"),HIr=o("TFRobertaForMultipleChoice"),UIr=o(" (RoBERTa model)"),JIr=l(),EC=a("li"),TCe=a("strong"),YIr=o("roformer"),KIr=o(" \u2014 "),see=a("a"),ZIr=o("TFRoFormerForMultipleChoice"),eNr=o(" (RoFormer model)"),oNr=l(),CC=a("li"),MCe=a("strong"),rNr=o("xlm"),tNr=o(" \u2014 "),lee=a("a"),aNr=o("TFXLMForMultipleChoice"),nNr=o(" (XLM model)"),sNr=l(),wC=a("li"),ECe=a("strong"),lNr=o("xlm-roberta"),iNr=o(" \u2014 "),iee=a("a"),dNr=o("TFXLMRobertaForMultipleChoice"),cNr=o(" (XLM-RoBERTa model)"),fNr=l(),AC=a("li"),CCe=a("strong"),mNr=o("xlnet"),gNr=o(" \u2014 "),dee=a("a"),hNr=o("TFXLNetForMultipleChoice"),pNr=o(" (XLNet model)"),_Nr=l(),F(LC.$$.fragment),sHe=l(),Gc=a("h2"),yC=a("a"),wCe=a("span"),F(E$.$$.fragment),uNr=l(),ACe=a("span"),bNr=o("TFAutoModelForNextSentencePrediction"),lHe=l(),mr=a("div"),F(C$.$$.fragment),vNr=l(),Oc=a("p"),FNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cee=a("a"),TNr=o("from_pretrained()"),MNr=o(" class method or the "),fee=a("a"),ENr=o("from_config()"),CNr=o(` class
method.`),wNr=l(),w$=a("p"),ANr=o("This class cannot be instantiated directly using "),LCe=a("code"),LNr=o("__init__()"),yNr=o(" (throws an error)."),xNr=l(),Xt=a("div"),F(A$.$$.fragment),$Nr=l(),yCe=a("p"),kNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SNr=l(),Vc=a("p"),RNr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),PNr=o("not"),BNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),INr=o("from_pretrained()"),NNr=o(" to load the model weights."),qNr=l(),F(xC.$$.fragment),jNr=l(),Dr=a("div"),F(L$.$$.fragment),DNr=l(),$Ce=a("p"),GNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ONr=l(),Tn=a("p"),VNr=o("The model class to instantiate is selected based on the "),kCe=a("code"),XNr=o("model_type"),zNr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),WNr=o("pretrained_model_name_or_path"),QNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),HNr=o("pretrained_model_name_or_path"),UNr=o(":"),JNr=l(),y$=a("ul"),$C=a("li"),PCe=a("strong"),YNr=o("bert"),KNr=o(" \u2014 "),gee=a("a"),ZNr=o("TFBertForNextSentencePrediction"),eqr=o(" (BERT model)"),oqr=l(),kC=a("li"),BCe=a("strong"),rqr=o("mobilebert"),tqr=o(" \u2014 "),hee=a("a"),aqr=o("TFMobileBertForNextSentencePrediction"),nqr=o(" (MobileBERT model)"),sqr=l(),F(SC.$$.fragment),iHe=l(),Xc=a("h2"),RC=a("a"),ICe=a("span"),F(x$.$$.fragment),lqr=l(),NCe=a("span"),iqr=o("TFAutoModelForTableQuestionAnswering"),dHe=l(),gr=a("div"),F($$.$$.fragment),dqr=l(),zc=a("p"),cqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pee=a("a"),fqr=o("from_pretrained()"),mqr=o(" class method or the "),_ee=a("a"),gqr=o("from_config()"),hqr=o(` class
method.`),pqr=l(),k$=a("p"),_qr=o("This class cannot be instantiated directly using "),qCe=a("code"),uqr=o("__init__()"),bqr=o(" (throws an error)."),vqr=l(),zt=a("div"),F(S$.$$.fragment),Fqr=l(),jCe=a("p"),Tqr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Mqr=l(),Wc=a("p"),Eqr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),Cqr=o("not"),wqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=a("a"),Aqr=o("from_pretrained()"),Lqr=o(" to load the model weights."),yqr=l(),F(PC.$$.fragment),xqr=l(),Gr=a("div"),F(R$.$$.fragment),$qr=l(),GCe=a("p"),kqr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Sqr=l(),Mn=a("p"),Rqr=o("The model class to instantiate is selected based on the "),OCe=a("code"),Pqr=o("model_type"),Bqr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),Iqr=o("pretrained_model_name_or_path"),Nqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(":"),Dqr=l(),zCe=a("ul"),BC=a("li"),WCe=a("strong"),Gqr=o("tapas"),Oqr=o(" \u2014 "),bee=a("a"),Vqr=o("TFTapasForQuestionAnswering"),Xqr=o(" (TAPAS model)"),zqr=l(),F(IC.$$.fragment),cHe=l(),Qc=a("h2"),NC=a("a"),QCe=a("span"),F(P$.$$.fragment),Wqr=l(),HCe=a("span"),Qqr=o("TFAutoModelForTokenClassification"),fHe=l(),hr=a("div"),F(B$.$$.fragment),Hqr=l(),Hc=a("p"),Uqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=a("a"),Jqr=o("from_pretrained()"),Yqr=o(" class method or the "),Fee=a("a"),Kqr=o("from_config()"),Zqr=o(` class
method.`),ejr=l(),I$=a("p"),ojr=o("This class cannot be instantiated directly using "),UCe=a("code"),rjr=o("__init__()"),tjr=o(" (throws an error)."),ajr=l(),Wt=a("div"),F(N$.$$.fragment),njr=l(),JCe=a("p"),sjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ljr=l(),Uc=a("p"),ijr=o(`Note:
Loading a model from its configuration file does `),YCe=a("strong"),djr=o("not"),cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),fjr=o("from_pretrained()"),mjr=o(" to load the model weights."),gjr=l(),F(qC.$$.fragment),hjr=l(),Or=a("div"),F(q$.$$.fragment),pjr=l(),KCe=a("p"),_jr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ujr=l(),En=a("p"),bjr=o("The model class to instantiate is selected based on the "),ZCe=a("code"),vjr=o("model_type"),Fjr=o(` property of the config object (either
passed as an argument or loaded from `),e3e=a("code"),Tjr=o("pretrained_model_name_or_path"),Mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(":"),wjr=l(),de=a("ul"),jC=a("li"),r3e=a("strong"),Ajr=o("albert"),Ljr=o(" \u2014 "),Mee=a("a"),yjr=o("TFAlbertForTokenClassification"),xjr=o(" (ALBERT model)"),$jr=l(),DC=a("li"),t3e=a("strong"),kjr=o("bert"),Sjr=o(" \u2014 "),Eee=a("a"),Rjr=o("TFBertForTokenClassification"),Pjr=o(" (BERT model)"),Bjr=l(),GC=a("li"),a3e=a("strong"),Ijr=o("camembert"),Njr=o(" \u2014 "),Cee=a("a"),qjr=o("TFCamembertForTokenClassification"),jjr=o(" (CamemBERT model)"),Djr=l(),OC=a("li"),n3e=a("strong"),Gjr=o("convbert"),Ojr=o(" \u2014 "),wee=a("a"),Vjr=o("TFConvBertForTokenClassification"),Xjr=o(" (ConvBERT model)"),zjr=l(),VC=a("li"),s3e=a("strong"),Wjr=o("deberta"),Qjr=o(" \u2014 "),Aee=a("a"),Hjr=o("TFDebertaForTokenClassification"),Ujr=o(" (DeBERTa model)"),Jjr=l(),XC=a("li"),l3e=a("strong"),Yjr=o("deberta-v2"),Kjr=o(" \u2014 "),Lee=a("a"),Zjr=o("TFDebertaV2ForTokenClassification"),eDr=o(" (DeBERTa-v2 model)"),oDr=l(),zC=a("li"),i3e=a("strong"),rDr=o("distilbert"),tDr=o(" \u2014 "),yee=a("a"),aDr=o("TFDistilBertForTokenClassification"),nDr=o(" (DistilBERT model)"),sDr=l(),WC=a("li"),d3e=a("strong"),lDr=o("electra"),iDr=o(" \u2014 "),xee=a("a"),dDr=o("TFElectraForTokenClassification"),cDr=o(" (ELECTRA model)"),fDr=l(),QC=a("li"),c3e=a("strong"),mDr=o("flaubert"),gDr=o(" \u2014 "),$ee=a("a"),hDr=o("TFFlaubertForTokenClassification"),pDr=o(" (FlauBERT model)"),_Dr=l(),HC=a("li"),f3e=a("strong"),uDr=o("funnel"),bDr=o(" \u2014 "),kee=a("a"),vDr=o("TFFunnelForTokenClassification"),FDr=o(" (Funnel Transformer model)"),TDr=l(),UC=a("li"),m3e=a("strong"),MDr=o("layoutlm"),EDr=o(" \u2014 "),See=a("a"),CDr=o("TFLayoutLMForTokenClassification"),wDr=o(" (LayoutLM model)"),ADr=l(),JC=a("li"),g3e=a("strong"),LDr=o("longformer"),yDr=o(" \u2014 "),Ree=a("a"),xDr=o("TFLongformerForTokenClassification"),$Dr=o(" (Longformer model)"),kDr=l(),YC=a("li"),h3e=a("strong"),SDr=o("mobilebert"),RDr=o(" \u2014 "),Pee=a("a"),PDr=o("TFMobileBertForTokenClassification"),BDr=o(" (MobileBERT model)"),IDr=l(),KC=a("li"),p3e=a("strong"),NDr=o("mpnet"),qDr=o(" \u2014 "),Bee=a("a"),jDr=o("TFMPNetForTokenClassification"),DDr=o(" (MPNet model)"),GDr=l(),ZC=a("li"),_3e=a("strong"),ODr=o("rembert"),VDr=o(" \u2014 "),Iee=a("a"),XDr=o("TFRemBertForTokenClassification"),zDr=o(" (RemBERT model)"),WDr=l(),e3=a("li"),u3e=a("strong"),QDr=o("roberta"),HDr=o(" \u2014 "),Nee=a("a"),UDr=o("TFRobertaForTokenClassification"),JDr=o(" (RoBERTa model)"),YDr=l(),o3=a("li"),b3e=a("strong"),KDr=o("roformer"),ZDr=o(" \u2014 "),qee=a("a"),eGr=o("TFRoFormerForTokenClassification"),oGr=o(" (RoFormer model)"),rGr=l(),r3=a("li"),v3e=a("strong"),tGr=o("xlm"),aGr=o(" \u2014 "),jee=a("a"),nGr=o("TFXLMForTokenClassification"),sGr=o(" (XLM model)"),lGr=l(),t3=a("li"),F3e=a("strong"),iGr=o("xlm-roberta"),dGr=o(" \u2014 "),Dee=a("a"),cGr=o("TFXLMRobertaForTokenClassification"),fGr=o(" (XLM-RoBERTa model)"),mGr=l(),a3=a("li"),T3e=a("strong"),gGr=o("xlnet"),hGr=o(" \u2014 "),Gee=a("a"),pGr=o("TFXLNetForTokenClassification"),_Gr=o(" (XLNet model)"),uGr=l(),F(n3.$$.fragment),mHe=l(),Jc=a("h2"),s3=a("a"),M3e=a("span"),F(j$.$$.fragment),bGr=l(),E3e=a("span"),vGr=o("TFAutoModelForQuestionAnswering"),gHe=l(),pr=a("div"),F(D$.$$.fragment),FGr=l(),Yc=a("p"),TGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oee=a("a"),MGr=o("from_pretrained()"),EGr=o(" class method or the "),Vee=a("a"),CGr=o("from_config()"),wGr=o(` class
method.`),AGr=l(),G$=a("p"),LGr=o("This class cannot be instantiated directly using "),C3e=a("code"),yGr=o("__init__()"),xGr=o(" (throws an error)."),$Gr=l(),Qt=a("div"),F(O$.$$.fragment),kGr=l(),w3e=a("p"),SGr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RGr=l(),Kc=a("p"),PGr=o(`Note:
Loading a model from its configuration file does `),A3e=a("strong"),BGr=o("not"),IGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),NGr=o("from_pretrained()"),qGr=o(" to load the model weights."),jGr=l(),F(l3.$$.fragment),DGr=l(),Vr=a("div"),F(V$.$$.fragment),GGr=l(),L3e=a("p"),OGr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VGr=l(),Cn=a("p"),XGr=o("The model class to instantiate is selected based on the "),y3e=a("code"),zGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),UGr=o("pretrained_model_name_or_path"),JGr=o(":"),YGr=l(),ce=a("ul"),i3=a("li"),k3e=a("strong"),KGr=o("albert"),ZGr=o(" \u2014 "),zee=a("a"),eOr=o("TFAlbertForQuestionAnswering"),oOr=o(" (ALBERT model)"),rOr=l(),d3=a("li"),S3e=a("strong"),tOr=o("bert"),aOr=o(" \u2014 "),Wee=a("a"),nOr=o("TFBertForQuestionAnswering"),sOr=o(" (BERT model)"),lOr=l(),c3=a("li"),R3e=a("strong"),iOr=o("camembert"),dOr=o(" \u2014 "),Qee=a("a"),cOr=o("TFCamembertForQuestionAnswering"),fOr=o(" (CamemBERT model)"),mOr=l(),f3=a("li"),P3e=a("strong"),gOr=o("convbert"),hOr=o(" \u2014 "),Hee=a("a"),pOr=o("TFConvBertForQuestionAnswering"),_Or=o(" (ConvBERT model)"),uOr=l(),m3=a("li"),B3e=a("strong"),bOr=o("deberta"),vOr=o(" \u2014 "),Uee=a("a"),FOr=o("TFDebertaForQuestionAnswering"),TOr=o(" (DeBERTa model)"),MOr=l(),g3=a("li"),I3e=a("strong"),EOr=o("deberta-v2"),COr=o(" \u2014 "),Jee=a("a"),wOr=o("TFDebertaV2ForQuestionAnswering"),AOr=o(" (DeBERTa-v2 model)"),LOr=l(),h3=a("li"),N3e=a("strong"),yOr=o("distilbert"),xOr=o(" \u2014 "),Yee=a("a"),$Or=o("TFDistilBertForQuestionAnswering"),kOr=o(" (DistilBERT model)"),SOr=l(),p3=a("li"),q3e=a("strong"),ROr=o("electra"),POr=o(" \u2014 "),Kee=a("a"),BOr=o("TFElectraForQuestionAnswering"),IOr=o(" (ELECTRA model)"),NOr=l(),_3=a("li"),j3e=a("strong"),qOr=o("flaubert"),jOr=o(" \u2014 "),Zee=a("a"),DOr=o("TFFlaubertForQuestionAnsweringSimple"),GOr=o(" (FlauBERT model)"),OOr=l(),u3=a("li"),D3e=a("strong"),VOr=o("funnel"),XOr=o(" \u2014 "),eoe=a("a"),zOr=o("TFFunnelForQuestionAnswering"),WOr=o(" (Funnel Transformer model)"),QOr=l(),b3=a("li"),G3e=a("strong"),HOr=o("gptj"),UOr=o(" \u2014 "),ooe=a("a"),JOr=o("TFGPTJForQuestionAnswering"),YOr=o(" (GPT-J model)"),KOr=l(),v3=a("li"),O3e=a("strong"),ZOr=o("longformer"),eVr=o(" \u2014 "),roe=a("a"),oVr=o("TFLongformerForQuestionAnswering"),rVr=o(" (Longformer model)"),tVr=l(),F3=a("li"),V3e=a("strong"),aVr=o("mobilebert"),nVr=o(" \u2014 "),toe=a("a"),sVr=o("TFMobileBertForQuestionAnswering"),lVr=o(" (MobileBERT model)"),iVr=l(),T3=a("li"),X3e=a("strong"),dVr=o("mpnet"),cVr=o(" \u2014 "),aoe=a("a"),fVr=o("TFMPNetForQuestionAnswering"),mVr=o(" (MPNet model)"),gVr=l(),M3=a("li"),z3e=a("strong"),hVr=o("rembert"),pVr=o(" \u2014 "),noe=a("a"),_Vr=o("TFRemBertForQuestionAnswering"),uVr=o(" (RemBERT model)"),bVr=l(),E3=a("li"),W3e=a("strong"),vVr=o("roberta"),FVr=o(" \u2014 "),soe=a("a"),TVr=o("TFRobertaForQuestionAnswering"),MVr=o(" (RoBERTa model)"),EVr=l(),C3=a("li"),Q3e=a("strong"),CVr=o("roformer"),wVr=o(" \u2014 "),loe=a("a"),AVr=o("TFRoFormerForQuestionAnswering"),LVr=o(" (RoFormer model)"),yVr=l(),w3=a("li"),H3e=a("strong"),xVr=o("xlm"),$Vr=o(" \u2014 "),ioe=a("a"),kVr=o("TFXLMForQuestionAnsweringSimple"),SVr=o(" (XLM model)"),RVr=l(),A3=a("li"),U3e=a("strong"),PVr=o("xlm-roberta"),BVr=o(" \u2014 "),doe=a("a"),IVr=o("TFXLMRobertaForQuestionAnswering"),NVr=o(" (XLM-RoBERTa model)"),qVr=l(),L3=a("li"),J3e=a("strong"),jVr=o("xlnet"),DVr=o(" \u2014 "),coe=a("a"),GVr=o("TFXLNetForQuestionAnsweringSimple"),OVr=o(" (XLNet model)"),VVr=l(),F(y3.$$.fragment),hHe=l(),Zc=a("h2"),x3=a("a"),Y3e=a("span"),F(X$.$$.fragment),XVr=l(),K3e=a("span"),zVr=o("TFAutoModelForVision2Seq"),pHe=l(),_r=a("div"),F(z$.$$.fragment),WVr=l(),ef=a("p"),QVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),foe=a("a"),HVr=o("from_pretrained()"),UVr=o(" class method or the "),moe=a("a"),JVr=o("from_config()"),YVr=o(` class
method.`),KVr=l(),W$=a("p"),ZVr=o("This class cannot be instantiated directly using "),Z3e=a("code"),eXr=o("__init__()"),oXr=o(" (throws an error)."),rXr=l(),Ht=a("div"),F(Q$.$$.fragment),tXr=l(),e0e=a("p"),aXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nXr=l(),of=a("p"),sXr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),lXr=o("not"),iXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=a("a"),dXr=o("from_pretrained()"),cXr=o(" to load the model weights."),fXr=l(),F($3.$$.fragment),mXr=l(),Xr=a("div"),F(H$.$$.fragment),gXr=l(),r0e=a("p"),hXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),pXr=l(),wn=a("p"),_Xr=o("The model class to instantiate is selected based on the "),t0e=a("code"),uXr=o("model_type"),bXr=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),vXr=o("pretrained_model_name_or_path"),FXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),TXr=o("pretrained_model_name_or_path"),MXr=o(":"),EXr=l(),s0e=a("ul"),k3=a("li"),l0e=a("strong"),CXr=o("vision-encoder-decoder"),wXr=o(" \u2014 "),hoe=a("a"),AXr=o("TFVisionEncoderDecoderModel"),LXr=o(" (Vision Encoder decoder model)"),yXr=l(),F(S3.$$.fragment),_He=l(),rf=a("h2"),R3=a("a"),i0e=a("span"),F(U$.$$.fragment),xXr=l(),d0e=a("span"),$Xr=o("TFAutoModelForSpeechSeq2Seq"),uHe=l(),ur=a("div"),F(J$.$$.fragment),kXr=l(),tf=a("p"),SXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),poe=a("a"),RXr=o("from_pretrained()"),PXr=o(" class method or the "),_oe=a("a"),BXr=o("from_config()"),IXr=o(` class
method.`),NXr=l(),Y$=a("p"),qXr=o("This class cannot be instantiated directly using "),c0e=a("code"),jXr=o("__init__()"),DXr=o(" (throws an error)."),GXr=l(),Ut=a("div"),F(K$.$$.fragment),OXr=l(),f0e=a("p"),VXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),XXr=l(),af=a("p"),zXr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),WXr=o("not"),QXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("a"),HXr=o("from_pretrained()"),UXr=o(" to load the model weights."),JXr=l(),F(P3.$$.fragment),YXr=l(),zr=a("div"),F(Z$.$$.fragment),KXr=l(),g0e=a("p"),ZXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ezr=l(),An=a("p"),ozr=o("The model class to instantiate is selected based on the "),h0e=a("code"),rzr=o("model_type"),tzr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),azr=o("pretrained_model_name_or_path"),nzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(":"),izr=l(),u0e=a("ul"),B3=a("li"),b0e=a("strong"),dzr=o("speech_to_text"),czr=o(" \u2014 "),boe=a("a"),fzr=o("TFSpeech2TextForConditionalGeneration"),mzr=o(" (Speech2Text model)"),gzr=l(),F(I3.$$.fragment),bHe=l(),nf=a("h2"),N3=a("a"),v0e=a("span"),F(ek.$$.fragment),hzr=l(),F0e=a("span"),pzr=o("FlaxAutoModel"),vHe=l(),br=a("div"),F(ok.$$.fragment),_zr=l(),sf=a("p"),uzr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),voe=a("a"),bzr=o("from_pretrained()"),vzr=o(" class method or the "),Foe=a("a"),Fzr=o("from_config()"),Tzr=o(` class
method.`),Mzr=l(),rk=a("p"),Ezr=o("This class cannot be instantiated directly using "),T0e=a("code"),Czr=o("__init__()"),wzr=o(" (throws an error)."),Azr=l(),Jt=a("div"),F(tk.$$.fragment),Lzr=l(),M0e=a("p"),yzr=o("Instantiates one of the base model classes of the library from a configuration."),xzr=l(),lf=a("p"),$zr=o(`Note:
Loading a model from its configuration file does `),E0e=a("strong"),kzr=o("not"),Szr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),Rzr=o("from_pretrained()"),Pzr=o(" to load the model weights."),Bzr=l(),F(q3.$$.fragment),Izr=l(),Wr=a("div"),F(ak.$$.fragment),Nzr=l(),C0e=a("p"),qzr=o("Instantiate one of the base model classes of the library from a pretrained model."),jzr=l(),Ln=a("p"),Dzr=o("The model class to instantiate is selected based on the "),w0e=a("code"),Gzr=o("model_type"),Ozr=o(` property of the config object (either
passed as an argument or loaded from `),A0e=a("code"),Vzr=o("pretrained_model_name_or_path"),Xzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=a("code"),zzr=o("pretrained_model_name_or_path"),Wzr=o(":"),Qzr=l(),oe=a("ul"),j3=a("li"),y0e=a("strong"),Hzr=o("albert"),Uzr=o(" \u2014 "),Moe=a("a"),Jzr=o("FlaxAlbertModel"),Yzr=o(" (ALBERT model)"),Kzr=l(),D3=a("li"),x0e=a("strong"),Zzr=o("bart"),eWr=o(" \u2014 "),Eoe=a("a"),oWr=o("FlaxBartModel"),rWr=o(" (BART model)"),tWr=l(),G3=a("li"),$0e=a("strong"),aWr=o("beit"),nWr=o(" \u2014 "),Coe=a("a"),sWr=o("FlaxBeitModel"),lWr=o(" (BEiT model)"),iWr=l(),O3=a("li"),k0e=a("strong"),dWr=o("bert"),cWr=o(" \u2014 "),woe=a("a"),fWr=o("FlaxBertModel"),mWr=o(" (BERT model)"),gWr=l(),V3=a("li"),S0e=a("strong"),hWr=o("big_bird"),pWr=o(" \u2014 "),Aoe=a("a"),_Wr=o("FlaxBigBirdModel"),uWr=o(" (BigBird model)"),bWr=l(),X3=a("li"),R0e=a("strong"),vWr=o("blenderbot"),FWr=o(" \u2014 "),Loe=a("a"),TWr=o("FlaxBlenderbotModel"),MWr=o(" (Blenderbot model)"),EWr=l(),z3=a("li"),P0e=a("strong"),CWr=o("blenderbot-small"),wWr=o(" \u2014 "),yoe=a("a"),AWr=o("FlaxBlenderbotSmallModel"),LWr=o(" (BlenderbotSmall model)"),yWr=l(),W3=a("li"),B0e=a("strong"),xWr=o("clip"),$Wr=o(" \u2014 "),xoe=a("a"),kWr=o("FlaxCLIPModel"),SWr=o(" (CLIP model)"),RWr=l(),Q3=a("li"),I0e=a("strong"),PWr=o("distilbert"),BWr=o(" \u2014 "),$oe=a("a"),IWr=o("FlaxDistilBertModel"),NWr=o(" (DistilBERT model)"),qWr=l(),H3=a("li"),N0e=a("strong"),jWr=o("electra"),DWr=o(" \u2014 "),koe=a("a"),GWr=o("FlaxElectraModel"),OWr=o(" (ELECTRA model)"),VWr=l(),U3=a("li"),q0e=a("strong"),XWr=o("gpt2"),zWr=o(" \u2014 "),Soe=a("a"),WWr=o("FlaxGPT2Model"),QWr=o(" (OpenAI GPT-2 model)"),HWr=l(),J3=a("li"),j0e=a("strong"),UWr=o("gpt_neo"),JWr=o(" \u2014 "),Roe=a("a"),YWr=o("FlaxGPTNeoModel"),KWr=o(" (GPT Neo model)"),ZWr=l(),Y3=a("li"),D0e=a("strong"),eQr=o("gptj"),oQr=o(" \u2014 "),Poe=a("a"),rQr=o("FlaxGPTJModel"),tQr=o(" (GPT-J model)"),aQr=l(),K3=a("li"),G0e=a("strong"),nQr=o("longt5"),sQr=o(" \u2014 "),Boe=a("a"),lQr=o("FlaxLongT5Model"),iQr=o(" (LongT5 model)"),dQr=l(),Z3=a("li"),O0e=a("strong"),cQr=o("marian"),fQr=o(" \u2014 "),Ioe=a("a"),mQr=o("FlaxMarianModel"),gQr=o(" (Marian model)"),hQr=l(),e0=a("li"),V0e=a("strong"),pQr=o("mbart"),_Qr=o(" \u2014 "),Noe=a("a"),uQr=o("FlaxMBartModel"),bQr=o(" (mBART model)"),vQr=l(),o0=a("li"),X0e=a("strong"),FQr=o("mt5"),TQr=o(" \u2014 "),qoe=a("a"),MQr=o("FlaxMT5Model"),EQr=o(" (MT5 model)"),CQr=l(),r0=a("li"),z0e=a("strong"),wQr=o("opt"),AQr=o(" \u2014 "),joe=a("a"),LQr=o("FlaxOPTModel"),yQr=o(" (OPT model)"),xQr=l(),t0=a("li"),W0e=a("strong"),$Qr=o("pegasus"),kQr=o(" \u2014 "),Doe=a("a"),SQr=o("FlaxPegasusModel"),RQr=o(" (Pegasus model)"),PQr=l(),a0=a("li"),Q0e=a("strong"),BQr=o("roberta"),IQr=o(" \u2014 "),Goe=a("a"),NQr=o("FlaxRobertaModel"),qQr=o(" (RoBERTa model)"),jQr=l(),n0=a("li"),H0e=a("strong"),DQr=o("roformer"),GQr=o(" \u2014 "),Ooe=a("a"),OQr=o("FlaxRoFormerModel"),VQr=o(" (RoFormer model)"),XQr=l(),s0=a("li"),U0e=a("strong"),zQr=o("t5"),WQr=o(" \u2014 "),Voe=a("a"),QQr=o("FlaxT5Model"),HQr=o(" (T5 model)"),UQr=l(),l0=a("li"),J0e=a("strong"),JQr=o("vision-text-dual-encoder"),YQr=o(" \u2014 "),Xoe=a("a"),KQr=o("FlaxVisionTextDualEncoderModel"),ZQr=o(" (VisionTextDualEncoder model)"),eHr=l(),i0=a("li"),Y0e=a("strong"),oHr=o("vit"),rHr=o(" \u2014 "),zoe=a("a"),tHr=o("FlaxViTModel"),aHr=o(" (ViT model)"),nHr=l(),d0=a("li"),K0e=a("strong"),sHr=o("wav2vec2"),lHr=o(" \u2014 "),Woe=a("a"),iHr=o("FlaxWav2Vec2Model"),dHr=o(" (Wav2Vec2 model)"),cHr=l(),c0=a("li"),Z0e=a("strong"),fHr=o("xglm"),mHr=o(" \u2014 "),Qoe=a("a"),gHr=o("FlaxXGLMModel"),hHr=o(" (XGLM model)"),pHr=l(),f0=a("li"),ewe=a("strong"),_Hr=o("xlm-roberta"),uHr=o(" \u2014 "),Hoe=a("a"),bHr=o("FlaxXLMRobertaModel"),vHr=o(" (XLM-RoBERTa model)"),FHr=l(),F(m0.$$.fragment),FHe=l(),df=a("h2"),g0=a("a"),owe=a("span"),F(nk.$$.fragment),THr=l(),rwe=a("span"),MHr=o("FlaxAutoModelForCausalLM"),THe=l(),vr=a("div"),F(sk.$$.fragment),EHr=l(),cf=a("p"),CHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uoe=a("a"),wHr=o("from_pretrained()"),AHr=o(" class method or the "),Joe=a("a"),LHr=o("from_config()"),yHr=o(` class
method.`),xHr=l(),lk=a("p"),$Hr=o("This class cannot be instantiated directly using "),twe=a("code"),kHr=o("__init__()"),SHr=o(" (throws an error)."),RHr=l(),Yt=a("div"),F(ik.$$.fragment),PHr=l(),awe=a("p"),BHr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IHr=l(),ff=a("p"),NHr=o(`Note:
Loading a model from its configuration file does `),nwe=a("strong"),qHr=o("not"),jHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=a("a"),DHr=o("from_pretrained()"),GHr=o(" to load the model weights."),OHr=l(),F(h0.$$.fragment),VHr=l(),Qr=a("div"),F(dk.$$.fragment),XHr=l(),swe=a("p"),zHr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WHr=l(),yn=a("p"),QHr=o("The model class to instantiate is selected based on the "),lwe=a("code"),HHr=o("model_type"),UHr=o(` property of the config object (either
passed as an argument or loaded from `),iwe=a("code"),JHr=o("pretrained_model_name_or_path"),YHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=a("code"),KHr=o("pretrained_model_name_or_path"),ZHr=o(":"),eUr=l(),xe=a("ul"),p0=a("li"),cwe=a("strong"),oUr=o("bart"),rUr=o(" \u2014 "),Koe=a("a"),tUr=o("FlaxBartForCausalLM"),aUr=o(" (BART model)"),nUr=l(),_0=a("li"),fwe=a("strong"),sUr=o("bert"),lUr=o(" \u2014 "),Zoe=a("a"),iUr=o("FlaxBertForCausalLM"),dUr=o(" (BERT model)"),cUr=l(),u0=a("li"),mwe=a("strong"),fUr=o("big_bird"),mUr=o(" \u2014 "),ere=a("a"),gUr=o("FlaxBigBirdForCausalLM"),hUr=o(" (BigBird model)"),pUr=l(),b0=a("li"),gwe=a("strong"),_Ur=o("electra"),uUr=o(" \u2014 "),ore=a("a"),bUr=o("FlaxElectraForCausalLM"),vUr=o(" (ELECTRA model)"),FUr=l(),v0=a("li"),hwe=a("strong"),TUr=o("gpt2"),MUr=o(" \u2014 "),rre=a("a"),EUr=o("FlaxGPT2LMHeadModel"),CUr=o(" (OpenAI GPT-2 model)"),wUr=l(),F0=a("li"),pwe=a("strong"),AUr=o("gpt_neo"),LUr=o(" \u2014 "),tre=a("a"),yUr=o("FlaxGPTNeoForCausalLM"),xUr=o(" (GPT Neo model)"),$Ur=l(),T0=a("li"),_we=a("strong"),kUr=o("gptj"),SUr=o(" \u2014 "),are=a("a"),RUr=o("FlaxGPTJForCausalLM"),PUr=o(" (GPT-J model)"),BUr=l(),M0=a("li"),uwe=a("strong"),IUr=o("opt"),NUr=o(" \u2014 "),nre=a("a"),qUr=o("FlaxOPTForCausalLM"),jUr=o(" (OPT model)"),DUr=l(),E0=a("li"),bwe=a("strong"),GUr=o("roberta"),OUr=o(" \u2014 "),sre=a("a"),VUr=o("FlaxRobertaForCausalLM"),XUr=o(" (RoBERTa model)"),zUr=l(),C0=a("li"),vwe=a("strong"),WUr=o("xglm"),QUr=o(" \u2014 "),lre=a("a"),HUr=o("FlaxXGLMForCausalLM"),UUr=o(" (XGLM model)"),JUr=l(),F(w0.$$.fragment),MHe=l(),mf=a("h2"),A0=a("a"),Fwe=a("span"),F(ck.$$.fragment),YUr=l(),Twe=a("span"),KUr=o("FlaxAutoModelForPreTraining"),EHe=l(),Fr=a("div"),F(fk.$$.fragment),ZUr=l(),gf=a("p"),eJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ire=a("a"),oJr=o("from_pretrained()"),rJr=o(" class method or the "),dre=a("a"),tJr=o("from_config()"),aJr=o(` class
method.`),nJr=l(),mk=a("p"),sJr=o("This class cannot be instantiated directly using "),Mwe=a("code"),lJr=o("__init__()"),iJr=o(" (throws an error)."),dJr=l(),Kt=a("div"),F(gk.$$.fragment),cJr=l(),Ewe=a("p"),fJr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mJr=l(),hf=a("p"),gJr=o(`Note:
Loading a model from its configuration file does `),Cwe=a("strong"),hJr=o("not"),pJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=a("a"),_Jr=o("from_pretrained()"),uJr=o(" to load the model weights."),bJr=l(),F(L0.$$.fragment),vJr=l(),Hr=a("div"),F(hk.$$.fragment),FJr=l(),wwe=a("p"),TJr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MJr=l(),xn=a("p"),EJr=o("The model class to instantiate is selected based on the "),Awe=a("code"),CJr=o("model_type"),wJr=o(` property of the config object (either
passed as an argument or loaded from `),Lwe=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ywe=a("code"),yJr=o("pretrained_model_name_or_path"),xJr=o(":"),$Jr=l(),Ee=a("ul"),y0=a("li"),xwe=a("strong"),kJr=o("albert"),SJr=o(" \u2014 "),fre=a("a"),RJr=o("FlaxAlbertForPreTraining"),PJr=o(" (ALBERT model)"),BJr=l(),x0=a("li"),$we=a("strong"),IJr=o("bart"),NJr=o(" \u2014 "),mre=a("a"),qJr=o("FlaxBartForConditionalGeneration"),jJr=o(" (BART model)"),DJr=l(),$0=a("li"),kwe=a("strong"),GJr=o("bert"),OJr=o(" \u2014 "),gre=a("a"),VJr=o("FlaxBertForPreTraining"),XJr=o(" (BERT model)"),zJr=l(),k0=a("li"),Swe=a("strong"),WJr=o("big_bird"),QJr=o(" \u2014 "),hre=a("a"),HJr=o("FlaxBigBirdForPreTraining"),UJr=o(" (BigBird model)"),JJr=l(),S0=a("li"),Rwe=a("strong"),YJr=o("electra"),KJr=o(" \u2014 "),pre=a("a"),ZJr=o("FlaxElectraForPreTraining"),eYr=o(" (ELECTRA model)"),oYr=l(),R0=a("li"),Pwe=a("strong"),rYr=o("longt5"),tYr=o(" \u2014 "),_re=a("a"),aYr=o("FlaxLongT5ForConditionalGeneration"),nYr=o(" (LongT5 model)"),sYr=l(),P0=a("li"),Bwe=a("strong"),lYr=o("mbart"),iYr=o(" \u2014 "),ure=a("a"),dYr=o("FlaxMBartForConditionalGeneration"),cYr=o(" (mBART model)"),fYr=l(),B0=a("li"),Iwe=a("strong"),mYr=o("mt5"),gYr=o(" \u2014 "),bre=a("a"),hYr=o("FlaxMT5ForConditionalGeneration"),pYr=o(" (MT5 model)"),_Yr=l(),I0=a("li"),Nwe=a("strong"),uYr=o("roberta"),bYr=o(" \u2014 "),vre=a("a"),vYr=o("FlaxRobertaForMaskedLM"),FYr=o(" (RoBERTa model)"),TYr=l(),N0=a("li"),qwe=a("strong"),MYr=o("roformer"),EYr=o(" \u2014 "),Fre=a("a"),CYr=o("FlaxRoFormerForMaskedLM"),wYr=o(" (RoFormer model)"),AYr=l(),q0=a("li"),jwe=a("strong"),LYr=o("t5"),yYr=o(" \u2014 "),Tre=a("a"),xYr=o("FlaxT5ForConditionalGeneration"),$Yr=o(" (T5 model)"),kYr=l(),j0=a("li"),Dwe=a("strong"),SYr=o("wav2vec2"),RYr=o(" \u2014 "),Mre=a("a"),PYr=o("FlaxWav2Vec2ForPreTraining"),BYr=o(" (Wav2Vec2 model)"),IYr=l(),D0=a("li"),Gwe=a("strong"),NYr=o("xlm-roberta"),qYr=o(" \u2014 "),Ere=a("a"),jYr=o("FlaxXLMRobertaForMaskedLM"),DYr=o(" (XLM-RoBERTa model)"),GYr=l(),F(G0.$$.fragment),CHe=l(),pf=a("h2"),O0=a("a"),Owe=a("span"),F(pk.$$.fragment),OYr=l(),Vwe=a("span"),VYr=o("FlaxAutoModelForMaskedLM"),wHe=l(),Tr=a("div"),F(_k.$$.fragment),XYr=l(),_f=a("p"),zYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cre=a("a"),WYr=o("from_pretrained()"),QYr=o(" class method or the "),wre=a("a"),HYr=o("from_config()"),UYr=o(` class
method.`),JYr=l(),uk=a("p"),YYr=o("This class cannot be instantiated directly using "),Xwe=a("code"),KYr=o("__init__()"),ZYr=o(" (throws an error)."),eKr=l(),Zt=a("div"),F(bk.$$.fragment),oKr=l(),zwe=a("p"),rKr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tKr=l(),uf=a("p"),aKr=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),nKr=o("not"),sKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),lKr=o("from_pretrained()"),iKr=o(" to load the model weights."),dKr=l(),F(V0.$$.fragment),cKr=l(),Ur=a("div"),F(vk.$$.fragment),fKr=l(),Qwe=a("p"),mKr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gKr=l(),$n=a("p"),hKr=o("The model class to instantiate is selected based on the "),Hwe=a("code"),pKr=o("model_type"),_Kr=o(` property of the config object (either
passed as an argument or loaded from `),Uwe=a("code"),uKr=o("pretrained_model_name_or_path"),bKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=a("code"),vKr=o("pretrained_model_name_or_path"),FKr=o(":"),TKr=l(),$e=a("ul"),X0=a("li"),Ywe=a("strong"),MKr=o("albert"),EKr=o(" \u2014 "),Lre=a("a"),CKr=o("FlaxAlbertForMaskedLM"),wKr=o(" (ALBERT model)"),AKr=l(),z0=a("li"),Kwe=a("strong"),LKr=o("bart"),yKr=o(" \u2014 "),yre=a("a"),xKr=o("FlaxBartForConditionalGeneration"),$Kr=o(" (BART model)"),kKr=l(),W0=a("li"),Zwe=a("strong"),SKr=o("bert"),RKr=o(" \u2014 "),xre=a("a"),PKr=o("FlaxBertForMaskedLM"),BKr=o(" (BERT model)"),IKr=l(),Q0=a("li"),e6e=a("strong"),NKr=o("big_bird"),qKr=o(" \u2014 "),$re=a("a"),jKr=o("FlaxBigBirdForMaskedLM"),DKr=o(" (BigBird model)"),GKr=l(),H0=a("li"),o6e=a("strong"),OKr=o("distilbert"),VKr=o(" \u2014 "),kre=a("a"),XKr=o("FlaxDistilBertForMaskedLM"),zKr=o(" (DistilBERT model)"),WKr=l(),U0=a("li"),r6e=a("strong"),QKr=o("electra"),HKr=o(" \u2014 "),Sre=a("a"),UKr=o("FlaxElectraForMaskedLM"),JKr=o(" (ELECTRA model)"),YKr=l(),J0=a("li"),t6e=a("strong"),KKr=o("mbart"),ZKr=o(" \u2014 "),Rre=a("a"),eZr=o("FlaxMBartForConditionalGeneration"),oZr=o(" (mBART model)"),rZr=l(),Y0=a("li"),a6e=a("strong"),tZr=o("roberta"),aZr=o(" \u2014 "),Pre=a("a"),nZr=o("FlaxRobertaForMaskedLM"),sZr=o(" (RoBERTa model)"),lZr=l(),K0=a("li"),n6e=a("strong"),iZr=o("roformer"),dZr=o(" \u2014 "),Bre=a("a"),cZr=o("FlaxRoFormerForMaskedLM"),fZr=o(" (RoFormer model)"),mZr=l(),Z0=a("li"),s6e=a("strong"),gZr=o("xlm-roberta"),hZr=o(" \u2014 "),Ire=a("a"),pZr=o("FlaxXLMRobertaForMaskedLM"),_Zr=o(" (XLM-RoBERTa model)"),uZr=l(),F(ew.$$.fragment),AHe=l(),bf=a("h2"),ow=a("a"),l6e=a("span"),F(Fk.$$.fragment),bZr=l(),i6e=a("span"),vZr=o("FlaxAutoModelForSeq2SeqLM"),LHe=l(),Mr=a("div"),F(Tk.$$.fragment),FZr=l(),vf=a("p"),TZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nre=a("a"),MZr=o("from_pretrained()"),EZr=o(" class method or the "),qre=a("a"),CZr=o("from_config()"),wZr=o(` class
method.`),AZr=l(),Mk=a("p"),LZr=o("This class cannot be instantiated directly using "),d6e=a("code"),yZr=o("__init__()"),xZr=o(" (throws an error)."),$Zr=l(),ea=a("div"),F(Ek.$$.fragment),kZr=l(),c6e=a("p"),SZr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RZr=l(),Ff=a("p"),PZr=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),BZr=o("not"),IZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=a("a"),NZr=o("from_pretrained()"),qZr=o(" to load the model weights."),jZr=l(),F(rw.$$.fragment),DZr=l(),Jr=a("div"),F(Ck.$$.fragment),GZr=l(),m6e=a("p"),OZr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VZr=l(),kn=a("p"),XZr=o("The model class to instantiate is selected based on the "),g6e=a("code"),zZr=o("model_type"),WZr=o(` property of the config object (either
passed as an argument or loaded from `),h6e=a("code"),QZr=o("pretrained_model_name_or_path"),HZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),UZr=o("pretrained_model_name_or_path"),JZr=o(":"),YZr=l(),ke=a("ul"),tw=a("li"),_6e=a("strong"),KZr=o("bart"),ZZr=o(" \u2014 "),Dre=a("a"),eet=o("FlaxBartForConditionalGeneration"),oet=o(" (BART model)"),ret=l(),aw=a("li"),u6e=a("strong"),tet=o("blenderbot"),aet=o(" \u2014 "),Gre=a("a"),net=o("FlaxBlenderbotForConditionalGeneration"),set=o(" (Blenderbot model)"),iet=l(),nw=a("li"),b6e=a("strong"),det=o("blenderbot-small"),cet=o(" \u2014 "),Ore=a("a"),fet=o("FlaxBlenderbotSmallForConditionalGeneration"),met=o(" (BlenderbotSmall model)"),get=l(),sw=a("li"),v6e=a("strong"),het=o("encoder-decoder"),pet=o(" \u2014 "),Vre=a("a"),_et=o("FlaxEncoderDecoderModel"),uet=o(" (Encoder decoder model)"),bet=l(),lw=a("li"),F6e=a("strong"),vet=o("longt5"),Fet=o(" \u2014 "),Xre=a("a"),Tet=o("FlaxLongT5ForConditionalGeneration"),Met=o(" (LongT5 model)"),Eet=l(),iw=a("li"),T6e=a("strong"),Cet=o("marian"),wet=o(" \u2014 "),zre=a("a"),Aet=o("FlaxMarianMTModel"),Let=o(" (Marian model)"),yet=l(),dw=a("li"),M6e=a("strong"),xet=o("mbart"),$et=o(" \u2014 "),Wre=a("a"),ket=o("FlaxMBartForConditionalGeneration"),Set=o(" (mBART model)"),Ret=l(),cw=a("li"),E6e=a("strong"),Pet=o("mt5"),Bet=o(" \u2014 "),Qre=a("a"),Iet=o("FlaxMT5ForConditionalGeneration"),Net=o(" (MT5 model)"),qet=l(),fw=a("li"),C6e=a("strong"),jet=o("pegasus"),Det=o(" \u2014 "),Hre=a("a"),Get=o("FlaxPegasusForConditionalGeneration"),Oet=o(" (Pegasus model)"),Vet=l(),mw=a("li"),w6e=a("strong"),Xet=o("t5"),zet=o(" \u2014 "),Ure=a("a"),Wet=o("FlaxT5ForConditionalGeneration"),Qet=o(" (T5 model)"),Het=l(),F(gw.$$.fragment),yHe=l(),Tf=a("h2"),hw=a("a"),A6e=a("span"),F(wk.$$.fragment),Uet=l(),L6e=a("span"),Jet=o("FlaxAutoModelForSequenceClassification"),xHe=l(),Er=a("div"),F(Ak.$$.fragment),Yet=l(),Mf=a("p"),Ket=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jre=a("a"),Zet=o("from_pretrained()"),eot=o(" class method or the "),Yre=a("a"),oot=o("from_config()"),rot=o(` class
method.`),tot=l(),Lk=a("p"),aot=o("This class cannot be instantiated directly using "),y6e=a("code"),not=o("__init__()"),sot=o(" (throws an error)."),lot=l(),oa=a("div"),F(yk.$$.fragment),iot=l(),x6e=a("p"),dot=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cot=l(),Ef=a("p"),fot=o(`Note:
Loading a model from its configuration file does `),$6e=a("strong"),mot=o("not"),got=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=a("a"),hot=o("from_pretrained()"),pot=o(" to load the model weights."),_ot=l(),F(pw.$$.fragment),uot=l(),Yr=a("div"),F(xk.$$.fragment),bot=l(),k6e=a("p"),vot=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fot=l(),Sn=a("p"),Tot=o("The model class to instantiate is selected based on the "),S6e=a("code"),Mot=o("model_type"),Eot=o(` property of the config object (either
passed as an argument or loaded from `),R6e=a("code"),Cot=o("pretrained_model_name_or_path"),wot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Aot=o("pretrained_model_name_or_path"),Lot=o(":"),yot=l(),Se=a("ul"),_w=a("li"),B6e=a("strong"),xot=o("albert"),$ot=o(" \u2014 "),Zre=a("a"),kot=o("FlaxAlbertForSequenceClassification"),Sot=o(" (ALBERT model)"),Rot=l(),uw=a("li"),I6e=a("strong"),Pot=o("bart"),Bot=o(" \u2014 "),ete=a("a"),Iot=o("FlaxBartForSequenceClassification"),Not=o(" (BART model)"),qot=l(),bw=a("li"),N6e=a("strong"),jot=o("bert"),Dot=o(" \u2014 "),ote=a("a"),Got=o("FlaxBertForSequenceClassification"),Oot=o(" (BERT model)"),Vot=l(),vw=a("li"),q6e=a("strong"),Xot=o("big_bird"),zot=o(" \u2014 "),rte=a("a"),Wot=o("FlaxBigBirdForSequenceClassification"),Qot=o(" (BigBird model)"),Hot=l(),Fw=a("li"),j6e=a("strong"),Uot=o("distilbert"),Jot=o(" \u2014 "),tte=a("a"),Yot=o("FlaxDistilBertForSequenceClassification"),Kot=o(" (DistilBERT model)"),Zot=l(),Tw=a("li"),D6e=a("strong"),ert=o("electra"),ort=o(" \u2014 "),ate=a("a"),rrt=o("FlaxElectraForSequenceClassification"),trt=o(" (ELECTRA model)"),art=l(),Mw=a("li"),G6e=a("strong"),nrt=o("mbart"),srt=o(" \u2014 "),nte=a("a"),lrt=o("FlaxMBartForSequenceClassification"),irt=o(" (mBART model)"),drt=l(),Ew=a("li"),O6e=a("strong"),crt=o("roberta"),frt=o(" \u2014 "),ste=a("a"),mrt=o("FlaxRobertaForSequenceClassification"),grt=o(" (RoBERTa model)"),hrt=l(),Cw=a("li"),V6e=a("strong"),prt=o("roformer"),_rt=o(" \u2014 "),lte=a("a"),urt=o("FlaxRoFormerForSequenceClassification"),brt=o(" (RoFormer model)"),vrt=l(),ww=a("li"),X6e=a("strong"),Frt=o("xlm-roberta"),Trt=o(" \u2014 "),ite=a("a"),Mrt=o("FlaxXLMRobertaForSequenceClassification"),Ert=o(" (XLM-RoBERTa model)"),Crt=l(),F(Aw.$$.fragment),$He=l(),Cf=a("h2"),Lw=a("a"),z6e=a("span"),F($k.$$.fragment),wrt=l(),W6e=a("span"),Art=o("FlaxAutoModelForQuestionAnswering"),kHe=l(),Cr=a("div"),F(kk.$$.fragment),Lrt=l(),wf=a("p"),yrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dte=a("a"),xrt=o("from_pretrained()"),$rt=o(" class method or the "),cte=a("a"),krt=o("from_config()"),Srt=o(` class
method.`),Rrt=l(),Sk=a("p"),Prt=o("This class cannot be instantiated directly using "),Q6e=a("code"),Brt=o("__init__()"),Irt=o(" (throws an error)."),Nrt=l(),ra=a("div"),F(Rk.$$.fragment),qrt=l(),H6e=a("p"),jrt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Drt=l(),Af=a("p"),Grt=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),Ort=o("not"),Vrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=a("a"),Xrt=o("from_pretrained()"),zrt=o(" to load the model weights."),Wrt=l(),F(yw.$$.fragment),Qrt=l(),Kr=a("div"),F(Pk.$$.fragment),Hrt=l(),J6e=a("p"),Urt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jrt=l(),Rn=a("p"),Yrt=o("The model class to instantiate is selected based on the "),Y6e=a("code"),Krt=o("model_type"),Zrt=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),ett=o("pretrained_model_name_or_path"),ott=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),rtt=o("pretrained_model_name_or_path"),ttt=o(":"),att=l(),Re=a("ul"),xw=a("li"),eAe=a("strong"),ntt=o("albert"),stt=o(" \u2014 "),mte=a("a"),ltt=o("FlaxAlbertForQuestionAnswering"),itt=o(" (ALBERT model)"),dtt=l(),$w=a("li"),oAe=a("strong"),ctt=o("bart"),ftt=o(" \u2014 "),gte=a("a"),mtt=o("FlaxBartForQuestionAnswering"),gtt=o(" (BART model)"),htt=l(),kw=a("li"),rAe=a("strong"),ptt=o("bert"),_tt=o(" \u2014 "),hte=a("a"),utt=o("FlaxBertForQuestionAnswering"),btt=o(" (BERT model)"),vtt=l(),Sw=a("li"),tAe=a("strong"),Ftt=o("big_bird"),Ttt=o(" \u2014 "),pte=a("a"),Mtt=o("FlaxBigBirdForQuestionAnswering"),Ett=o(" (BigBird model)"),Ctt=l(),Rw=a("li"),aAe=a("strong"),wtt=o("distilbert"),Att=o(" \u2014 "),_te=a("a"),Ltt=o("FlaxDistilBertForQuestionAnswering"),ytt=o(" (DistilBERT model)"),xtt=l(),Pw=a("li"),nAe=a("strong"),$tt=o("electra"),ktt=o(" \u2014 "),ute=a("a"),Stt=o("FlaxElectraForQuestionAnswering"),Rtt=o(" (ELECTRA model)"),Ptt=l(),Bw=a("li"),sAe=a("strong"),Btt=o("mbart"),Itt=o(" \u2014 "),bte=a("a"),Ntt=o("FlaxMBartForQuestionAnswering"),qtt=o(" (mBART model)"),jtt=l(),Iw=a("li"),lAe=a("strong"),Dtt=o("roberta"),Gtt=o(" \u2014 "),vte=a("a"),Ott=o("FlaxRobertaForQuestionAnswering"),Vtt=o(" (RoBERTa model)"),Xtt=l(),Nw=a("li"),iAe=a("strong"),ztt=o("roformer"),Wtt=o(" \u2014 "),Fte=a("a"),Qtt=o("FlaxRoFormerForQuestionAnswering"),Htt=o(" (RoFormer model)"),Utt=l(),qw=a("li"),dAe=a("strong"),Jtt=o("xlm-roberta"),Ytt=o(" \u2014 "),Tte=a("a"),Ktt=o("FlaxXLMRobertaForQuestionAnswering"),Ztt=o(" (XLM-RoBERTa model)"),eat=l(),F(jw.$$.fragment),SHe=l(),Lf=a("h2"),Dw=a("a"),cAe=a("span"),F(Bk.$$.fragment),oat=l(),fAe=a("span"),rat=o("FlaxAutoModelForTokenClassification"),RHe=l(),wr=a("div"),F(Ik.$$.fragment),tat=l(),yf=a("p"),aat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mte=a("a"),nat=o("from_pretrained()"),sat=o(" class method or the "),Ete=a("a"),lat=o("from_config()"),iat=o(` class
method.`),dat=l(),Nk=a("p"),cat=o("This class cannot be instantiated directly using "),mAe=a("code"),fat=o("__init__()"),mat=o(" (throws an error)."),gat=l(),ta=a("div"),F(qk.$$.fragment),hat=l(),gAe=a("p"),pat=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_at=l(),xf=a("p"),uat=o(`Note:
Loading a model from its configuration file does `),hAe=a("strong"),bat=o("not"),vat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=a("a"),Fat=o("from_pretrained()"),Tat=o(" to load the model weights."),Mat=l(),F(Gw.$$.fragment),Eat=l(),Zr=a("div"),F(jk.$$.fragment),Cat=l(),pAe=a("p"),wat=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Aat=l(),Pn=a("p"),Lat=o("The model class to instantiate is selected based on the "),_Ae=a("code"),yat=o("model_type"),xat=o(` property of the config object (either
passed as an argument or loaded from `),uAe=a("code"),$at=o("pretrained_model_name_or_path"),kat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=a("code"),Sat=o("pretrained_model_name_or_path"),Rat=o(":"),Pat=l(),Xe=a("ul"),Ow=a("li"),vAe=a("strong"),Bat=o("albert"),Iat=o(" \u2014 "),wte=a("a"),Nat=o("FlaxAlbertForTokenClassification"),qat=o(" (ALBERT model)"),jat=l(),Vw=a("li"),FAe=a("strong"),Dat=o("bert"),Gat=o(" \u2014 "),Ate=a("a"),Oat=o("FlaxBertForTokenClassification"),Vat=o(" (BERT model)"),Xat=l(),Xw=a("li"),TAe=a("strong"),zat=o("big_bird"),Wat=o(" \u2014 "),Lte=a("a"),Qat=o("FlaxBigBirdForTokenClassification"),Hat=o(" (BigBird model)"),Uat=l(),zw=a("li"),MAe=a("strong"),Jat=o("distilbert"),Yat=o(" \u2014 "),yte=a("a"),Kat=o("FlaxDistilBertForTokenClassification"),Zat=o(" (DistilBERT model)"),ent=l(),Ww=a("li"),EAe=a("strong"),ont=o("electra"),rnt=o(" \u2014 "),xte=a("a"),tnt=o("FlaxElectraForTokenClassification"),ant=o(" (ELECTRA model)"),nnt=l(),Qw=a("li"),CAe=a("strong"),snt=o("roberta"),lnt=o(" \u2014 "),$te=a("a"),int=o("FlaxRobertaForTokenClassification"),dnt=o(" (RoBERTa model)"),cnt=l(),Hw=a("li"),wAe=a("strong"),fnt=o("roformer"),mnt=o(" \u2014 "),kte=a("a"),gnt=o("FlaxRoFormerForTokenClassification"),hnt=o(" (RoFormer model)"),pnt=l(),Uw=a("li"),AAe=a("strong"),_nt=o("xlm-roberta"),unt=o(" \u2014 "),Ste=a("a"),bnt=o("FlaxXLMRobertaForTokenClassification"),vnt=o(" (XLM-RoBERTa model)"),Fnt=l(),F(Jw.$$.fragment),PHe=l(),$f=a("h2"),Yw=a("a"),LAe=a("span"),F(Dk.$$.fragment),Tnt=l(),yAe=a("span"),Mnt=o("FlaxAutoModelForMultipleChoice"),BHe=l(),Ar=a("div"),F(Gk.$$.fragment),Ent=l(),kf=a("p"),Cnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rte=a("a"),wnt=o("from_pretrained()"),Ant=o(" class method or the "),Pte=a("a"),Lnt=o("from_config()"),ynt=o(` class
method.`),xnt=l(),Ok=a("p"),$nt=o("This class cannot be instantiated directly using "),xAe=a("code"),knt=o("__init__()"),Snt=o(" (throws an error)."),Rnt=l(),aa=a("div"),F(Vk.$$.fragment),Pnt=l(),$Ae=a("p"),Bnt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Int=l(),Sf=a("p"),Nnt=o(`Note:
Loading a model from its configuration file does `),kAe=a("strong"),qnt=o("not"),jnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=a("a"),Dnt=o("from_pretrained()"),Gnt=o(" to load the model weights."),Ont=l(),F(Kw.$$.fragment),Vnt=l(),et=a("div"),F(Xk.$$.fragment),Xnt=l(),SAe=a("p"),znt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wnt=l(),Bn=a("p"),Qnt=o("The model class to instantiate is selected based on the "),RAe=a("code"),Hnt=o("model_type"),Unt=o(` property of the config object (either
passed as an argument or loaded from `),PAe=a("code"),Jnt=o("pretrained_model_name_or_path"),Ynt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BAe=a("code"),Knt=o("pretrained_model_name_or_path"),Znt=o(":"),est=l(),ze=a("ul"),Zw=a("li"),IAe=a("strong"),ost=o("albert"),rst=o(" \u2014 "),Ite=a("a"),tst=o("FlaxAlbertForMultipleChoice"),ast=o(" (ALBERT model)"),nst=l(),e6=a("li"),NAe=a("strong"),sst=o("bert"),lst=o(" \u2014 "),Nte=a("a"),ist=o("FlaxBertForMultipleChoice"),dst=o(" (BERT model)"),cst=l(),o6=a("li"),qAe=a("strong"),fst=o("big_bird"),mst=o(" \u2014 "),qte=a("a"),gst=o("FlaxBigBirdForMultipleChoice"),hst=o(" (BigBird model)"),pst=l(),r6=a("li"),jAe=a("strong"),_st=o("distilbert"),ust=o(" \u2014 "),jte=a("a"),bst=o("FlaxDistilBertForMultipleChoice"),vst=o(" (DistilBERT model)"),Fst=l(),t6=a("li"),DAe=a("strong"),Tst=o("electra"),Mst=o(" \u2014 "),Dte=a("a"),Est=o("FlaxElectraForMultipleChoice"),Cst=o(" (ELECTRA model)"),wst=l(),a6=a("li"),GAe=a("strong"),Ast=o("roberta"),Lst=o(" \u2014 "),Gte=a("a"),yst=o("FlaxRobertaForMultipleChoice"),xst=o(" (RoBERTa model)"),$st=l(),n6=a("li"),OAe=a("strong"),kst=o("roformer"),Sst=o(" \u2014 "),Ote=a("a"),Rst=o("FlaxRoFormerForMultipleChoice"),Pst=o(" (RoFormer model)"),Bst=l(),s6=a("li"),VAe=a("strong"),Ist=o("xlm-roberta"),Nst=o(" \u2014 "),Vte=a("a"),qst=o("FlaxXLMRobertaForMultipleChoice"),jst=o(" (XLM-RoBERTa model)"),Dst=l(),F(l6.$$.fragment),IHe=l(),Rf=a("h2"),i6=a("a"),XAe=a("span"),F(zk.$$.fragment),Gst=l(),zAe=a("span"),Ost=o("FlaxAutoModelForNextSentencePrediction"),NHe=l(),Lr=a("div"),F(Wk.$$.fragment),Vst=l(),Pf=a("p"),Xst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xte=a("a"),zst=o("from_pretrained()"),Wst=o(" class method or the "),zte=a("a"),Qst=o("from_config()"),Hst=o(` class
method.`),Ust=l(),Qk=a("p"),Jst=o("This class cannot be instantiated directly using "),WAe=a("code"),Yst=o("__init__()"),Kst=o(" (throws an error)."),Zst=l(),na=a("div"),F(Hk.$$.fragment),elt=l(),QAe=a("p"),olt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rlt=l(),Bf=a("p"),tlt=o(`Note:
Loading a model from its configuration file does `),HAe=a("strong"),alt=o("not"),nlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wte=a("a"),slt=o("from_pretrained()"),llt=o(" to load the model weights."),ilt=l(),F(d6.$$.fragment),dlt=l(),ot=a("div"),F(Uk.$$.fragment),clt=l(),UAe=a("p"),flt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mlt=l(),In=a("p"),glt=o("The model class to instantiate is selected based on the "),JAe=a("code"),hlt=o("model_type"),plt=o(` property of the config object (either
passed as an argument or loaded from `),YAe=a("code"),_lt=o("pretrained_model_name_or_path"),ult=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=a("code"),blt=o("pretrained_model_name_or_path"),vlt=o(":"),Flt=l(),ZAe=a("ul"),c6=a("li"),e7e=a("strong"),Tlt=o("bert"),Mlt=o(" \u2014 "),Qte=a("a"),Elt=o("FlaxBertForNextSentencePrediction"),Clt=o(" (BERT model)"),wlt=l(),F(f6.$$.fragment),qHe=l(),If=a("h2"),m6=a("a"),o7e=a("span"),F(Jk.$$.fragment),Alt=l(),r7e=a("span"),Llt=o("FlaxAutoModelForImageClassification"),jHe=l(),yr=a("div"),F(Yk.$$.fragment),ylt=l(),Nf=a("p"),xlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hte=a("a"),$lt=o("from_pretrained()"),klt=o(" class method or the "),Ute=a("a"),Slt=o("from_config()"),Rlt=o(` class
method.`),Plt=l(),Kk=a("p"),Blt=o("This class cannot be instantiated directly using "),t7e=a("code"),Ilt=o("__init__()"),Nlt=o(" (throws an error)."),qlt=l(),sa=a("div"),F(Zk.$$.fragment),jlt=l(),a7e=a("p"),Dlt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Glt=l(),qf=a("p"),Olt=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),Vlt=o("not"),Xlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("a"),zlt=o("from_pretrained()"),Wlt=o(" to load the model weights."),Qlt=l(),F(g6.$$.fragment),Hlt=l(),rt=a("div"),F(eS.$$.fragment),Ult=l(),s7e=a("p"),Jlt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ylt=l(),Nn=a("p"),Klt=o("The model class to instantiate is selected based on the "),l7e=a("code"),Zlt=o("model_type"),eit=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),oit=o("pretrained_model_name_or_path"),rit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),tit=o("pretrained_model_name_or_path"),ait=o(":"),nit=l(),oS=a("ul"),h6=a("li"),c7e=a("strong"),sit=o("beit"),lit=o(" \u2014 "),Yte=a("a"),iit=o("FlaxBeitForImageClassification"),dit=o(" (BEiT model)"),cit=l(),p6=a("li"),f7e=a("strong"),fit=o("vit"),mit=o(" \u2014 "),Kte=a("a"),git=o("FlaxViTForImageClassification"),hit=o(" (ViT model)"),pit=l(),F(_6.$$.fragment),DHe=l(),jf=a("h2"),u6=a("a"),m7e=a("span"),F(rS.$$.fragment),_it=l(),g7e=a("span"),uit=o("FlaxAutoModelForVision2Seq"),GHe=l(),xr=a("div"),F(tS.$$.fragment),bit=l(),Df=a("p"),vit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zte=a("a"),Fit=o("from_pretrained()"),Tit=o(" class method or the "),eae=a("a"),Mit=o("from_config()"),Eit=o(` class
method.`),Cit=l(),aS=a("p"),wit=o("This class cannot be instantiated directly using "),h7e=a("code"),Ait=o("__init__()"),Lit=o(" (throws an error)."),yit=l(),la=a("div"),F(nS.$$.fragment),xit=l(),p7e=a("p"),$it=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kit=l(),Gf=a("p"),Sit=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),Rit=o("not"),Pit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=a("a"),Bit=o("from_pretrained()"),Iit=o(" to load the model weights."),Nit=l(),F(b6.$$.fragment),qit=l(),tt=a("div"),F(sS.$$.fragment),jit=l(),u7e=a("p"),Dit=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Git=l(),qn=a("p"),Oit=o("The model class to instantiate is selected based on the "),b7e=a("code"),Vit=o("model_type"),Xit=o(` property of the config object (either
passed as an argument or loaded from `),v7e=a("code"),zit=o("pretrained_model_name_or_path"),Wit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=a("code"),Qit=o("pretrained_model_name_or_path"),Hit=o(":"),Uit=l(),T7e=a("ul"),v6=a("li"),M7e=a("strong"),Jit=o("vision-encoder-decoder"),Yit=o(" \u2014 "),rae=a("a"),Kit=o("FlaxVisionEncoderDecoderModel"),Zit=o(" (Vision Encoder decoder model)"),edt=l(),F(F6.$$.fragment),this.h()},l(f){const u=WZt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var lS=s(p);m=n(lS,"A",{id:!0,class:!0,href:!0});var E7e=s(m);_=n(E7e,"SPAN",{});var C7e=s(_);T(d.$$.fragment,C7e),C7e.forEach(t),E7e.forEach(t),h=i(lS),Ao=n(lS,"SPAN",{});var w7e=s(Ao);Ii=r(w7e,"Auto Classes"),w7e.forEach(t),lS.forEach(t),zf=i(f),dt=n(f,"P",{});var iS=s(dt);Ni=r(iS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),qi=n(iS,"CODE",{});var A7e=s(qi);O7=r(A7e,"from_pretrained()"),A7e.forEach(t),Wf=r(iS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),iS.forEach(t),Oe=i(f),Qe=n(f,"P",{});var jn=s(Qe);ji=r(jn,"Instantiating one of "),Dn=n(jn,"A",{href:!0});var L7e=s(Dn);V7=r(L7e,"AutoConfig"),L7e.forEach(t),Gn=r(jn,", "),On=n(jn,"A",{href:!0});var y7e=s(On);X7=r(y7e,"AutoModel"),y7e.forEach(t),Di=r(jn,`, and
`),Vn=n(jn,"A",{href:!0});var x7e=s(Vn);z7=r(x7e,"AutoTokenizer"),x7e.forEach(t),Gi=r(jn," will directly create a class of the relevant architecture. For instance"),jn.forEach(t),Qf=i(f),T(Ia.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var dS=s(Ae);$R=r(dS,"will create a model that is an instance of "),Oi=n(dS,"A",{href:!0});var $7e=s(Oi);kR=r($7e,"BertModel"),$7e.forEach(t),SR=r(dS,"."),dS.forEach(t),Lo=i(f),Na=n(f,"P",{});var cS=s(Na);RR=r(cS,"There is one class of "),Hf=n(cS,"CODE",{});var k7e=s(Hf);PR=r(k7e,"AutoModel"),k7e.forEach(t),eYe=r(cS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cS.forEach(t),BWe=i(f),Vi=n(f,"H2",{class:!0});var fS=s(Vi);Uf=n(fS,"A",{id:!0,class:!0,href:!0});var S7e=s(Uf);Kne=n(S7e,"SPAN",{});var R7e=s(Kne);T(W7.$$.fragment,R7e),R7e.forEach(t),S7e.forEach(t),oYe=i(fS),Zne=n(fS,"SPAN",{});var P7e=s(Zne);rYe=r(P7e,"Extending the Auto Classes"),P7e.forEach(t),fS.forEach(t),IWe=i(f),Xn=n(f,"P",{});var Of=s(Xn);tYe=r(Of,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ese=n(Of,"CODE",{});var B7e=s(ese);aYe=r(B7e,"NewModel"),B7e.forEach(t),nYe=r(Of,", make sure you have a "),ose=n(Of,"CODE",{});var I7e=s(ose);sYe=r(I7e,"NewModelConfig"),I7e.forEach(t),lYe=r(Of,` then you can add those to the auto
classes like this:`),Of.forEach(t),NWe=i(f),T(Q7.$$.fragment,f),qWe=i(f),BR=n(f,"P",{});var N7e=s(BR);iYe=r(N7e,"You will then be able to use the auto classes like you would usually do!"),N7e.forEach(t),jWe=i(f),T(Jf.$$.fragment,f),DWe=i(f),Xi=n(f,"H2",{class:!0});var mS=s(Xi);Yf=n(mS,"A",{id:!0,class:!0,href:!0});var q7e=s(Yf);rse=n(q7e,"SPAN",{});var j7e=s(rse);T(H7.$$.fragment,j7e),j7e.forEach(t),q7e.forEach(t),dYe=i(mS),tse=n(mS,"SPAN",{});var D7e=s(tse);cYe=r(D7e,"AutoConfig"),D7e.forEach(t),mS.forEach(t),GWe=i(f),yo=n(f,"DIV",{class:!0});var lt=s(yo);T(U7.$$.fragment,lt),fYe=i(lt),J7=n(lt,"P",{});var gS=s(J7);mYe=r(gS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),IR=n(gS,"A",{href:!0});var G7e=s(IR);gYe=r(G7e,"from_pretrained()"),G7e.forEach(t),hYe=r(gS," class method."),gS.forEach(t),pYe=i(lt),Y7=n(lt,"P",{});var hS=s(Y7);_Ye=r(hS,"This class cannot be instantiated directly using "),ase=n(hS,"CODE",{});var O7e=s(ase);uYe=r(O7e,"__init__()"),O7e.forEach(t),bYe=r(hS," (throws an error)."),hS.forEach(t),vYe=i(lt),$r=n(lt,"DIV",{class:!0});var it=s($r);T(K7.$$.fragment,it),FYe=i(it),nse=n(it,"P",{});var V7e=s(nse);TYe=r(V7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),V7e.forEach(t),MYe=i(it),zi=n(it,"P",{});var Vf=s(zi);EYe=r(Vf,"The configuration class to instantiate is selected based on the "),sse=n(Vf,"CODE",{});var X7e=s(sse);CYe=r(X7e,"model_type"),X7e.forEach(t),wYe=r(Vf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lse=n(Vf,"CODE",{});var z7e=s(lse);AYe=r(z7e,"pretrained_model_name_or_path"),z7e.forEach(t),LYe=r(Vf,":"),Vf.forEach(t),yYe=i(it),A=n(it,"UL",{});var L=s(A);Kf=n(L,"LI",{});var T6=s(Kf);ise=n(T6,"STRONG",{});var W7e=s(ise);xYe=r(W7e,"albert"),W7e.forEach(t),$Ye=r(T6," \u2014 "),NR=n(T6,"A",{href:!0});var Q7e=s(NR);kYe=r(Q7e,"AlbertConfig"),Q7e.forEach(t),SYe=r(T6," (ALBERT model)"),T6.forEach(t),RYe=i(L),Zf=n(L,"LI",{});var M6=s(Zf);dse=n(M6,"STRONG",{});var H7e=s(dse);PYe=r(H7e,"bart"),H7e.forEach(t),BYe=r(M6," \u2014 "),qR=n(M6,"A",{href:!0});var U7e=s(qR);IYe=r(U7e,"BartConfig"),U7e.forEach(t),NYe=r(M6," (BART model)"),M6.forEach(t),qYe=i(L),em=n(L,"LI",{});var E6=s(em);cse=n(E6,"STRONG",{});var J7e=s(cse);jYe=r(J7e,"beit"),J7e.forEach(t),DYe=r(E6," \u2014 "),jR=n(E6,"A",{href:!0});var Y7e=s(jR);GYe=r(Y7e,"BeitConfig"),Y7e.forEach(t),OYe=r(E6," (BEiT model)"),E6.forEach(t),VYe=i(L),om=n(L,"LI",{});var C6=s(om);fse=n(C6,"STRONG",{});var K7e=s(fse);XYe=r(K7e,"bert"),K7e.forEach(t),zYe=r(C6," \u2014 "),DR=n(C6,"A",{href:!0});var Z7e=s(DR);WYe=r(Z7e,"BertConfig"),Z7e.forEach(t),QYe=r(C6," (BERT model)"),C6.forEach(t),HYe=i(L),rm=n(L,"LI",{});var w6=s(rm);mse=n(w6,"STRONG",{});var eLe=s(mse);UYe=r(eLe,"bert-generation"),eLe.forEach(t),JYe=r(w6," \u2014 "),GR=n(w6,"A",{href:!0});var oLe=s(GR);YYe=r(oLe,"BertGenerationConfig"),oLe.forEach(t),KYe=r(w6," (Bert Generation model)"),w6.forEach(t),ZYe=i(L),tm=n(L,"LI",{});var A6=s(tm);gse=n(A6,"STRONG",{});var rLe=s(gse);eKe=r(rLe,"big_bird"),rLe.forEach(t),oKe=r(A6," \u2014 "),OR=n(A6,"A",{href:!0});var tLe=s(OR);rKe=r(tLe,"BigBirdConfig"),tLe.forEach(t),tKe=r(A6," (BigBird model)"),A6.forEach(t),aKe=i(L),am=n(L,"LI",{});var L6=s(am);hse=n(L6,"STRONG",{});var aLe=s(hse);nKe=r(aLe,"bigbird_pegasus"),aLe.forEach(t),sKe=r(L6," \u2014 "),VR=n(L6,"A",{href:!0});var nLe=s(VR);lKe=r(nLe,"BigBirdPegasusConfig"),nLe.forEach(t),iKe=r(L6," (BigBird-Pegasus model)"),L6.forEach(t),dKe=i(L),nm=n(L,"LI",{});var y6=s(nm);pse=n(y6,"STRONG",{});var sLe=s(pse);cKe=r(sLe,"blenderbot"),sLe.forEach(t),fKe=r(y6," \u2014 "),XR=n(y6,"A",{href:!0});var lLe=s(XR);mKe=r(lLe,"BlenderbotConfig"),lLe.forEach(t),gKe=r(y6," (Blenderbot model)"),y6.forEach(t),hKe=i(L),sm=n(L,"LI",{});var x6=s(sm);_se=n(x6,"STRONG",{});var iLe=s(_se);pKe=r(iLe,"blenderbot-small"),iLe.forEach(t),_Ke=r(x6," \u2014 "),zR=n(x6,"A",{href:!0});var dLe=s(zR);uKe=r(dLe,"BlenderbotSmallConfig"),dLe.forEach(t),bKe=r(x6," (BlenderbotSmall model)"),x6.forEach(t),vKe=i(L),lm=n(L,"LI",{});var $6=s(lm);use=n($6,"STRONG",{});var cLe=s(use);FKe=r(cLe,"bloom"),cLe.forEach(t),TKe=r($6," \u2014 "),WR=n($6,"A",{href:!0});var fLe=s(WR);MKe=r(fLe,"BloomConfig"),fLe.forEach(t),EKe=r($6," (BLOOM model)"),$6.forEach(t),CKe=i(L),im=n(L,"LI",{});var k6=s(im);bse=n(k6,"STRONG",{});var mLe=s(bse);wKe=r(mLe,"camembert"),mLe.forEach(t),AKe=r(k6," \u2014 "),QR=n(k6,"A",{href:!0});var gLe=s(QR);LKe=r(gLe,"CamembertConfig"),gLe.forEach(t),yKe=r(k6," (CamemBERT model)"),k6.forEach(t),xKe=i(L),dm=n(L,"LI",{});var S6=s(dm);vse=n(S6,"STRONG",{});var hLe=s(vse);$Ke=r(hLe,"canine"),hLe.forEach(t),kKe=r(S6," \u2014 "),HR=n(S6,"A",{href:!0});var pLe=s(HR);SKe=r(pLe,"CanineConfig"),pLe.forEach(t),RKe=r(S6," (CANINE model)"),S6.forEach(t),PKe=i(L),cm=n(L,"LI",{});var R6=s(cm);Fse=n(R6,"STRONG",{});var _Le=s(Fse);BKe=r(_Le,"clip"),_Le.forEach(t),IKe=r(R6," \u2014 "),UR=n(R6,"A",{href:!0});var uLe=s(UR);NKe=r(uLe,"CLIPConfig"),uLe.forEach(t),qKe=r(R6," (CLIP model)"),R6.forEach(t),jKe=i(L),fm=n(L,"LI",{});var P6=s(fm);Tse=n(P6,"STRONG",{});var bLe=s(Tse);DKe=r(bLe,"codegen"),bLe.forEach(t),GKe=r(P6," \u2014 "),JR=n(P6,"A",{href:!0});var vLe=s(JR);OKe=r(vLe,"CodeGenConfig"),vLe.forEach(t),VKe=r(P6," (CodeGen model)"),P6.forEach(t),XKe=i(L),mm=n(L,"LI",{});var B6=s(mm);Mse=n(B6,"STRONG",{});var FLe=s(Mse);zKe=r(FLe,"convbert"),FLe.forEach(t),WKe=r(B6," \u2014 "),YR=n(B6,"A",{href:!0});var TLe=s(YR);QKe=r(TLe,"ConvBertConfig"),TLe.forEach(t),HKe=r(B6," (ConvBERT model)"),B6.forEach(t),UKe=i(L),gm=n(L,"LI",{});var I6=s(gm);Ese=n(I6,"STRONG",{});var MLe=s(Ese);JKe=r(MLe,"convnext"),MLe.forEach(t),YKe=r(I6," \u2014 "),KR=n(I6,"A",{href:!0});var ELe=s(KR);KKe=r(ELe,"ConvNextConfig"),ELe.forEach(t),ZKe=r(I6," (ConvNeXT model)"),I6.forEach(t),eZe=i(L),hm=n(L,"LI",{});var N6=s(hm);Cse=n(N6,"STRONG",{});var CLe=s(Cse);oZe=r(CLe,"ctrl"),CLe.forEach(t),rZe=r(N6," \u2014 "),ZR=n(N6,"A",{href:!0});var wLe=s(ZR);tZe=r(wLe,"CTRLConfig"),wLe.forEach(t),aZe=r(N6," (CTRL model)"),N6.forEach(t),nZe=i(L),pm=n(L,"LI",{});var q6=s(pm);wse=n(q6,"STRONG",{});var ALe=s(wse);sZe=r(ALe,"cvt"),ALe.forEach(t),lZe=r(q6," \u2014 "),eP=n(q6,"A",{href:!0});var LLe=s(eP);iZe=r(LLe,"CvtConfig"),LLe.forEach(t),dZe=r(q6," (CvT model)"),q6.forEach(t),cZe=i(L),_m=n(L,"LI",{});var j6=s(_m);Ase=n(j6,"STRONG",{});var yLe=s(Ase);fZe=r(yLe,"data2vec-audio"),yLe.forEach(t),mZe=r(j6," \u2014 "),oP=n(j6,"A",{href:!0});var xLe=s(oP);gZe=r(xLe,"Data2VecAudioConfig"),xLe.forEach(t),hZe=r(j6," (Data2VecAudio model)"),j6.forEach(t),pZe=i(L),um=n(L,"LI",{});var D6=s(um);Lse=n(D6,"STRONG",{});var $Le=s(Lse);_Ze=r($Le,"data2vec-text"),$Le.forEach(t),uZe=r(D6," \u2014 "),rP=n(D6,"A",{href:!0});var kLe=s(rP);bZe=r(kLe,"Data2VecTextConfig"),kLe.forEach(t),vZe=r(D6," (Data2VecText model)"),D6.forEach(t),FZe=i(L),bm=n(L,"LI",{});var G6=s(bm);yse=n(G6,"STRONG",{});var SLe=s(yse);TZe=r(SLe,"data2vec-vision"),SLe.forEach(t),MZe=r(G6," \u2014 "),tP=n(G6,"A",{href:!0});var RLe=s(tP);EZe=r(RLe,"Data2VecVisionConfig"),RLe.forEach(t),CZe=r(G6," (Data2VecVision model)"),G6.forEach(t),wZe=i(L),vm=n(L,"LI",{});var O6=s(vm);xse=n(O6,"STRONG",{});var PLe=s(xse);AZe=r(PLe,"deberta"),PLe.forEach(t),LZe=r(O6," \u2014 "),aP=n(O6,"A",{href:!0});var BLe=s(aP);yZe=r(BLe,"DebertaConfig"),BLe.forEach(t),xZe=r(O6," (DeBERTa model)"),O6.forEach(t),$Ze=i(L),Fm=n(L,"LI",{});var V6=s(Fm);$se=n(V6,"STRONG",{});var ILe=s($se);kZe=r(ILe,"deberta-v2"),ILe.forEach(t),SZe=r(V6," \u2014 "),nP=n(V6,"A",{href:!0});var NLe=s(nP);RZe=r(NLe,"DebertaV2Config"),NLe.forEach(t),PZe=r(V6," (DeBERTa-v2 model)"),V6.forEach(t),BZe=i(L),Tm=n(L,"LI",{});var X6=s(Tm);kse=n(X6,"STRONG",{});var qLe=s(kse);IZe=r(qLe,"decision_transformer"),qLe.forEach(t),NZe=r(X6," \u2014 "),sP=n(X6,"A",{href:!0});var jLe=s(sP);qZe=r(jLe,"DecisionTransformerConfig"),jLe.forEach(t),jZe=r(X6," (Decision Transformer model)"),X6.forEach(t),DZe=i(L),Mm=n(L,"LI",{});var DLe=s(Mm);Sse=n(DLe,"STRONG",{});var rdt=s(Sse);GZe=r(rdt,"deit"),rdt.forEach(t),OZe=r(DLe," \u2014 "),lP=n(DLe,"A",{href:!0});var tdt=s(lP);VZe=r(tdt,"DeiTConfig"),tdt.forEach(t),XZe=r(DLe," (DeiT model)"),DLe.forEach(t),zZe=i(L),Em=n(L,"LI",{});var GLe=s(Em);Rse=n(GLe,"STRONG",{});var adt=s(Rse);WZe=r(adt,"detr"),adt.forEach(t),QZe=r(GLe," \u2014 "),iP=n(GLe,"A",{href:!0});var ndt=s(iP);HZe=r(ndt,"DetrConfig"),ndt.forEach(t),UZe=r(GLe," (DETR model)"),GLe.forEach(t),JZe=i(L),Cm=n(L,"LI",{});var OLe=s(Cm);Pse=n(OLe,"STRONG",{});var sdt=s(Pse);YZe=r(sdt,"distilbert"),sdt.forEach(t),KZe=r(OLe," \u2014 "),dP=n(OLe,"A",{href:!0});var ldt=s(dP);ZZe=r(ldt,"DistilBertConfig"),ldt.forEach(t),eeo=r(OLe," (DistilBERT model)"),OLe.forEach(t),oeo=i(L),wm=n(L,"LI",{});var VLe=s(wm);Bse=n(VLe,"STRONG",{});var idt=s(Bse);reo=r(idt,"dpr"),idt.forEach(t),teo=r(VLe," \u2014 "),cP=n(VLe,"A",{href:!0});var ddt=s(cP);aeo=r(ddt,"DPRConfig"),ddt.forEach(t),neo=r(VLe," (DPR model)"),VLe.forEach(t),seo=i(L),Am=n(L,"LI",{});var XLe=s(Am);Ise=n(XLe,"STRONG",{});var cdt=s(Ise);leo=r(cdt,"dpt"),cdt.forEach(t),ieo=r(XLe," \u2014 "),fP=n(XLe,"A",{href:!0});var fdt=s(fP);deo=r(fdt,"DPTConfig"),fdt.forEach(t),ceo=r(XLe," (DPT model)"),XLe.forEach(t),feo=i(L),Lm=n(L,"LI",{});var zLe=s(Lm);Nse=n(zLe,"STRONG",{});var mdt=s(Nse);meo=r(mdt,"electra"),mdt.forEach(t),geo=r(zLe," \u2014 "),mP=n(zLe,"A",{href:!0});var gdt=s(mP);heo=r(gdt,"ElectraConfig"),gdt.forEach(t),peo=r(zLe," (ELECTRA model)"),zLe.forEach(t),_eo=i(L),ym=n(L,"LI",{});var WLe=s(ym);qse=n(WLe,"STRONG",{});var hdt=s(qse);ueo=r(hdt,"encoder-decoder"),hdt.forEach(t),beo=r(WLe," \u2014 "),gP=n(WLe,"A",{href:!0});var pdt=s(gP);veo=r(pdt,"EncoderDecoderConfig"),pdt.forEach(t),Feo=r(WLe," (Encoder decoder model)"),WLe.forEach(t),Teo=i(L),xm=n(L,"LI",{});var QLe=s(xm);jse=n(QLe,"STRONG",{});var _dt=s(jse);Meo=r(_dt,"flaubert"),_dt.forEach(t),Eeo=r(QLe," \u2014 "),hP=n(QLe,"A",{href:!0});var udt=s(hP);Ceo=r(udt,"FlaubertConfig"),udt.forEach(t),weo=r(QLe," (FlauBERT model)"),QLe.forEach(t),Aeo=i(L),$m=n(L,"LI",{});var HLe=s($m);Dse=n(HLe,"STRONG",{});var bdt=s(Dse);Leo=r(bdt,"flava"),bdt.forEach(t),yeo=r(HLe," \u2014 "),pP=n(HLe,"A",{href:!0});var vdt=s(pP);xeo=r(vdt,"FlavaConfig"),vdt.forEach(t),$eo=r(HLe," (FLAVA model)"),HLe.forEach(t),keo=i(L),km=n(L,"LI",{});var ULe=s(km);Gse=n(ULe,"STRONG",{});var Fdt=s(Gse);Seo=r(Fdt,"fnet"),Fdt.forEach(t),Reo=r(ULe," \u2014 "),_P=n(ULe,"A",{href:!0});var Tdt=s(_P);Peo=r(Tdt,"FNetConfig"),Tdt.forEach(t),Beo=r(ULe," (FNet model)"),ULe.forEach(t),Ieo=i(L),Sm=n(L,"LI",{});var JLe=s(Sm);Ose=n(JLe,"STRONG",{});var Mdt=s(Ose);Neo=r(Mdt,"fsmt"),Mdt.forEach(t),qeo=r(JLe," \u2014 "),uP=n(JLe,"A",{href:!0});var Edt=s(uP);jeo=r(Edt,"FSMTConfig"),Edt.forEach(t),Deo=r(JLe," (FairSeq Machine-Translation model)"),JLe.forEach(t),Geo=i(L),Rm=n(L,"LI",{});var YLe=s(Rm);Vse=n(YLe,"STRONG",{});var Cdt=s(Vse);Oeo=r(Cdt,"funnel"),Cdt.forEach(t),Veo=r(YLe," \u2014 "),bP=n(YLe,"A",{href:!0});var wdt=s(bP);Xeo=r(wdt,"FunnelConfig"),wdt.forEach(t),zeo=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),Weo=i(L),Pm=n(L,"LI",{});var KLe=s(Pm);Xse=n(KLe,"STRONG",{});var Adt=s(Xse);Qeo=r(Adt,"glpn"),Adt.forEach(t),Heo=r(KLe," \u2014 "),vP=n(KLe,"A",{href:!0});var Ldt=s(vP);Ueo=r(Ldt,"GLPNConfig"),Ldt.forEach(t),Jeo=r(KLe," (GLPN model)"),KLe.forEach(t),Yeo=i(L),Bm=n(L,"LI",{});var ZLe=s(Bm);zse=n(ZLe,"STRONG",{});var ydt=s(zse);Keo=r(ydt,"gpt2"),ydt.forEach(t),Zeo=r(ZLe," \u2014 "),FP=n(ZLe,"A",{href:!0});var xdt=s(FP);eoo=r(xdt,"GPT2Config"),xdt.forEach(t),ooo=r(ZLe," (OpenAI GPT-2 model)"),ZLe.forEach(t),roo=i(L),Im=n(L,"LI",{});var eye=s(Im);Wse=n(eye,"STRONG",{});var $dt=s(Wse);too=r($dt,"gpt_neo"),$dt.forEach(t),aoo=r(eye," \u2014 "),TP=n(eye,"A",{href:!0});var kdt=s(TP);noo=r(kdt,"GPTNeoConfig"),kdt.forEach(t),soo=r(eye," (GPT Neo model)"),eye.forEach(t),loo=i(L),Nm=n(L,"LI",{});var oye=s(Nm);Qse=n(oye,"STRONG",{});var Sdt=s(Qse);ioo=r(Sdt,"gpt_neox"),Sdt.forEach(t),doo=r(oye," \u2014 "),MP=n(oye,"A",{href:!0});var Rdt=s(MP);coo=r(Rdt,"GPTNeoXConfig"),Rdt.forEach(t),foo=r(oye," (GPT NeoX model)"),oye.forEach(t),moo=i(L),qm=n(L,"LI",{});var rye=s(qm);Hse=n(rye,"STRONG",{});var Pdt=s(Hse);goo=r(Pdt,"gptj"),Pdt.forEach(t),hoo=r(rye," \u2014 "),EP=n(rye,"A",{href:!0});var Bdt=s(EP);poo=r(Bdt,"GPTJConfig"),Bdt.forEach(t),_oo=r(rye," (GPT-J model)"),rye.forEach(t),uoo=i(L),jm=n(L,"LI",{});var tye=s(jm);Use=n(tye,"STRONG",{});var Idt=s(Use);boo=r(Idt,"groupvit"),Idt.forEach(t),voo=r(tye," \u2014 "),CP=n(tye,"A",{href:!0});var Ndt=s(CP);Foo=r(Ndt,"GroupViTConfig"),Ndt.forEach(t),Too=r(tye," (GroupViT model)"),tye.forEach(t),Moo=i(L),Dm=n(L,"LI",{});var aye=s(Dm);Jse=n(aye,"STRONG",{});var qdt=s(Jse);Eoo=r(qdt,"hubert"),qdt.forEach(t),Coo=r(aye," \u2014 "),wP=n(aye,"A",{href:!0});var jdt=s(wP);woo=r(jdt,"HubertConfig"),jdt.forEach(t),Aoo=r(aye," (Hubert model)"),aye.forEach(t),Loo=i(L),Gm=n(L,"LI",{});var nye=s(Gm);Yse=n(nye,"STRONG",{});var Ddt=s(Yse);yoo=r(Ddt,"ibert"),Ddt.forEach(t),xoo=r(nye," \u2014 "),AP=n(nye,"A",{href:!0});var Gdt=s(AP);$oo=r(Gdt,"IBertConfig"),Gdt.forEach(t),koo=r(nye," (I-BERT model)"),nye.forEach(t),Soo=i(L),Om=n(L,"LI",{});var sye=s(Om);Kse=n(sye,"STRONG",{});var Odt=s(Kse);Roo=r(Odt,"imagegpt"),Odt.forEach(t),Poo=r(sye," \u2014 "),LP=n(sye,"A",{href:!0});var Vdt=s(LP);Boo=r(Vdt,"ImageGPTConfig"),Vdt.forEach(t),Ioo=r(sye," (ImageGPT model)"),sye.forEach(t),Noo=i(L),Vm=n(L,"LI",{});var lye=s(Vm);Zse=n(lye,"STRONG",{});var Xdt=s(Zse);qoo=r(Xdt,"layoutlm"),Xdt.forEach(t),joo=r(lye," \u2014 "),yP=n(lye,"A",{href:!0});var zdt=s(yP);Doo=r(zdt,"LayoutLMConfig"),zdt.forEach(t),Goo=r(lye," (LayoutLM model)"),lye.forEach(t),Ooo=i(L),Xm=n(L,"LI",{});var iye=s(Xm);ele=n(iye,"STRONG",{});var Wdt=s(ele);Voo=r(Wdt,"layoutlmv2"),Wdt.forEach(t),Xoo=r(iye," \u2014 "),xP=n(iye,"A",{href:!0});var Qdt=s(xP);zoo=r(Qdt,"LayoutLMv2Config"),Qdt.forEach(t),Woo=r(iye," (LayoutLMv2 model)"),iye.forEach(t),Qoo=i(L),zm=n(L,"LI",{});var dye=s(zm);ole=n(dye,"STRONG",{});var Hdt=s(ole);Hoo=r(Hdt,"layoutlmv3"),Hdt.forEach(t),Uoo=r(dye," \u2014 "),$P=n(dye,"A",{href:!0});var Udt=s($P);Joo=r(Udt,"LayoutLMv3Config"),Udt.forEach(t),Yoo=r(dye," (LayoutLMv3 model)"),dye.forEach(t),Koo=i(L),Wm=n(L,"LI",{});var cye=s(Wm);rle=n(cye,"STRONG",{});var Jdt=s(rle);Zoo=r(Jdt,"led"),Jdt.forEach(t),ero=r(cye," \u2014 "),kP=n(cye,"A",{href:!0});var Ydt=s(kP);oro=r(Ydt,"LEDConfig"),Ydt.forEach(t),rro=r(cye," (LED model)"),cye.forEach(t),tro=i(L),Qm=n(L,"LI",{});var fye=s(Qm);tle=n(fye,"STRONG",{});var Kdt=s(tle);aro=r(Kdt,"levit"),Kdt.forEach(t),nro=r(fye," \u2014 "),SP=n(fye,"A",{href:!0});var Zdt=s(SP);sro=r(Zdt,"LevitConfig"),Zdt.forEach(t),lro=r(fye," (LeViT model)"),fye.forEach(t),iro=i(L),Hm=n(L,"LI",{});var mye=s(Hm);ale=n(mye,"STRONG",{});var ect=s(ale);dro=r(ect,"longformer"),ect.forEach(t),cro=r(mye," \u2014 "),RP=n(mye,"A",{href:!0});var oct=s(RP);fro=r(oct,"LongformerConfig"),oct.forEach(t),mro=r(mye," (Longformer model)"),mye.forEach(t),gro=i(L),Um=n(L,"LI",{});var gye=s(Um);nle=n(gye,"STRONG",{});var rct=s(nle);hro=r(rct,"longt5"),rct.forEach(t),pro=r(gye," \u2014 "),PP=n(gye,"A",{href:!0});var tct=s(PP);_ro=r(tct,"LongT5Config"),tct.forEach(t),uro=r(gye," (LongT5 model)"),gye.forEach(t),bro=i(L),Jm=n(L,"LI",{});var hye=s(Jm);sle=n(hye,"STRONG",{});var act=s(sle);vro=r(act,"luke"),act.forEach(t),Fro=r(hye," \u2014 "),BP=n(hye,"A",{href:!0});var nct=s(BP);Tro=r(nct,"LukeConfig"),nct.forEach(t),Mro=r(hye," (LUKE model)"),hye.forEach(t),Ero=i(L),Ym=n(L,"LI",{});var pye=s(Ym);lle=n(pye,"STRONG",{});var sct=s(lle);Cro=r(sct,"lxmert"),sct.forEach(t),wro=r(pye," \u2014 "),IP=n(pye,"A",{href:!0});var lct=s(IP);Aro=r(lct,"LxmertConfig"),lct.forEach(t),Lro=r(pye," (LXMERT model)"),pye.forEach(t),yro=i(L),Km=n(L,"LI",{});var _ye=s(Km);ile=n(_ye,"STRONG",{});var ict=s(ile);xro=r(ict,"m2m_100"),ict.forEach(t),$ro=r(_ye," \u2014 "),NP=n(_ye,"A",{href:!0});var dct=s(NP);kro=r(dct,"M2M100Config"),dct.forEach(t),Sro=r(_ye," (M2M100 model)"),_ye.forEach(t),Rro=i(L),Zm=n(L,"LI",{});var uye=s(Zm);dle=n(uye,"STRONG",{});var cct=s(dle);Pro=r(cct,"marian"),cct.forEach(t),Bro=r(uye," \u2014 "),qP=n(uye,"A",{href:!0});var fct=s(qP);Iro=r(fct,"MarianConfig"),fct.forEach(t),Nro=r(uye," (Marian model)"),uye.forEach(t),qro=i(L),eg=n(L,"LI",{});var bye=s(eg);cle=n(bye,"STRONG",{});var mct=s(cle);jro=r(mct,"maskformer"),mct.forEach(t),Dro=r(bye," \u2014 "),jP=n(bye,"A",{href:!0});var gct=s(jP);Gro=r(gct,"MaskFormerConfig"),gct.forEach(t),Oro=r(bye," (MaskFormer model)"),bye.forEach(t),Vro=i(L),og=n(L,"LI",{});var vye=s(og);fle=n(vye,"STRONG",{});var hct=s(fle);Xro=r(hct,"mbart"),hct.forEach(t),zro=r(vye," \u2014 "),DP=n(vye,"A",{href:!0});var pct=s(DP);Wro=r(pct,"MBartConfig"),pct.forEach(t),Qro=r(vye," (mBART model)"),vye.forEach(t),Hro=i(L),rg=n(L,"LI",{});var Fye=s(rg);mle=n(Fye,"STRONG",{});var _ct=s(mle);Uro=r(_ct,"mctct"),_ct.forEach(t),Jro=r(Fye," \u2014 "),GP=n(Fye,"A",{href:!0});var uct=s(GP);Yro=r(uct,"MCTCTConfig"),uct.forEach(t),Kro=r(Fye," (M-CTC-T model)"),Fye.forEach(t),Zro=i(L),tg=n(L,"LI",{});var Tye=s(tg);gle=n(Tye,"STRONG",{});var bct=s(gle);eto=r(bct,"megatron-bert"),bct.forEach(t),oto=r(Tye," \u2014 "),OP=n(Tye,"A",{href:!0});var vct=s(OP);rto=r(vct,"MegatronBertConfig"),vct.forEach(t),tto=r(Tye," (Megatron-BERT model)"),Tye.forEach(t),ato=i(L),ag=n(L,"LI",{});var Mye=s(ag);hle=n(Mye,"STRONG",{});var Fct=s(hle);nto=r(Fct,"mobilebert"),Fct.forEach(t),sto=r(Mye," \u2014 "),VP=n(Mye,"A",{href:!0});var Tct=s(VP);lto=r(Tct,"MobileBertConfig"),Tct.forEach(t),ito=r(Mye," (MobileBERT model)"),Mye.forEach(t),dto=i(L),ng=n(L,"LI",{});var Eye=s(ng);ple=n(Eye,"STRONG",{});var Mct=s(ple);cto=r(Mct,"mobilevit"),Mct.forEach(t),fto=r(Eye," \u2014 "),XP=n(Eye,"A",{href:!0});var Ect=s(XP);mto=r(Ect,"MobileViTConfig"),Ect.forEach(t),gto=r(Eye," (MobileViT model)"),Eye.forEach(t),hto=i(L),sg=n(L,"LI",{});var Cye=s(sg);_le=n(Cye,"STRONG",{});var Cct=s(_le);pto=r(Cct,"mpnet"),Cct.forEach(t),_to=r(Cye," \u2014 "),zP=n(Cye,"A",{href:!0});var wct=s(zP);uto=r(wct,"MPNetConfig"),wct.forEach(t),bto=r(Cye," (MPNet model)"),Cye.forEach(t),vto=i(L),lg=n(L,"LI",{});var wye=s(lg);ule=n(wye,"STRONG",{});var Act=s(ule);Fto=r(Act,"mt5"),Act.forEach(t),Tto=r(wye," \u2014 "),WP=n(wye,"A",{href:!0});var Lct=s(WP);Mto=r(Lct,"MT5Config"),Lct.forEach(t),Eto=r(wye," (MT5 model)"),wye.forEach(t),Cto=i(L),ig=n(L,"LI",{});var Aye=s(ig);ble=n(Aye,"STRONG",{});var yct=s(ble);wto=r(yct,"mvp"),yct.forEach(t),Ato=r(Aye," \u2014 "),QP=n(Aye,"A",{href:!0});var xct=s(QP);Lto=r(xct,"MvpConfig"),xct.forEach(t),yto=r(Aye," (MVP model)"),Aye.forEach(t),xto=i(L),dg=n(L,"LI",{});var Lye=s(dg);vle=n(Lye,"STRONG",{});var $ct=s(vle);$to=r($ct,"nezha"),$ct.forEach(t),kto=r(Lye," \u2014 "),HP=n(Lye,"A",{href:!0});var kct=s(HP);Sto=r(kct,"NezhaConfig"),kct.forEach(t),Rto=r(Lye," (Nezha model)"),Lye.forEach(t),Pto=i(L),cg=n(L,"LI",{});var yye=s(cg);Fle=n(yye,"STRONG",{});var Sct=s(Fle);Bto=r(Sct,"nystromformer"),Sct.forEach(t),Ito=r(yye," \u2014 "),UP=n(yye,"A",{href:!0});var Rct=s(UP);Nto=r(Rct,"NystromformerConfig"),Rct.forEach(t),qto=r(yye," (Nystr\xF6mformer model)"),yye.forEach(t),jto=i(L),fg=n(L,"LI",{});var xye=s(fg);Tle=n(xye,"STRONG",{});var Pct=s(Tle);Dto=r(Pct,"openai-gpt"),Pct.forEach(t),Gto=r(xye," \u2014 "),JP=n(xye,"A",{href:!0});var Bct=s(JP);Oto=r(Bct,"OpenAIGPTConfig"),Bct.forEach(t),Vto=r(xye," (OpenAI GPT model)"),xye.forEach(t),Xto=i(L),mg=n(L,"LI",{});var $ye=s(mg);Mle=n($ye,"STRONG",{});var Ict=s(Mle);zto=r(Ict,"opt"),Ict.forEach(t),Wto=r($ye," \u2014 "),YP=n($ye,"A",{href:!0});var Nct=s(YP);Qto=r(Nct,"OPTConfig"),Nct.forEach(t),Hto=r($ye," (OPT model)"),$ye.forEach(t),Uto=i(L),gg=n(L,"LI",{});var kye=s(gg);Ele=n(kye,"STRONG",{});var qct=s(Ele);Jto=r(qct,"owlvit"),qct.forEach(t),Yto=r(kye," \u2014 "),KP=n(kye,"A",{href:!0});var jct=s(KP);Kto=r(jct,"OwlViTConfig"),jct.forEach(t),Zto=r(kye," (OWL-ViT model)"),kye.forEach(t),eao=i(L),hg=n(L,"LI",{});var Sye=s(hg);Cle=n(Sye,"STRONG",{});var Dct=s(Cle);oao=r(Dct,"pegasus"),Dct.forEach(t),rao=r(Sye," \u2014 "),ZP=n(Sye,"A",{href:!0});var Gct=s(ZP);tao=r(Gct,"PegasusConfig"),Gct.forEach(t),aao=r(Sye," (Pegasus model)"),Sye.forEach(t),nao=i(L),pg=n(L,"LI",{});var Rye=s(pg);wle=n(Rye,"STRONG",{});var Oct=s(wle);sao=r(Oct,"perceiver"),Oct.forEach(t),lao=r(Rye," \u2014 "),eB=n(Rye,"A",{href:!0});var Vct=s(eB);iao=r(Vct,"PerceiverConfig"),Vct.forEach(t),dao=r(Rye," (Perceiver model)"),Rye.forEach(t),cao=i(L),_g=n(L,"LI",{});var Pye=s(_g);Ale=n(Pye,"STRONG",{});var Xct=s(Ale);fao=r(Xct,"plbart"),Xct.forEach(t),mao=r(Pye," \u2014 "),oB=n(Pye,"A",{href:!0});var zct=s(oB);gao=r(zct,"PLBartConfig"),zct.forEach(t),hao=r(Pye," (PLBart model)"),Pye.forEach(t),pao=i(L),ug=n(L,"LI",{});var Bye=s(ug);Lle=n(Bye,"STRONG",{});var Wct=s(Lle);_ao=r(Wct,"poolformer"),Wct.forEach(t),uao=r(Bye," \u2014 "),rB=n(Bye,"A",{href:!0});var Qct=s(rB);bao=r(Qct,"PoolFormerConfig"),Qct.forEach(t),vao=r(Bye," (PoolFormer model)"),Bye.forEach(t),Fao=i(L),bg=n(L,"LI",{});var Iye=s(bg);yle=n(Iye,"STRONG",{});var Hct=s(yle);Tao=r(Hct,"prophetnet"),Hct.forEach(t),Mao=r(Iye," \u2014 "),tB=n(Iye,"A",{href:!0});var Uct=s(tB);Eao=r(Uct,"ProphetNetConfig"),Uct.forEach(t),Cao=r(Iye," (ProphetNet model)"),Iye.forEach(t),wao=i(L),vg=n(L,"LI",{});var Nye=s(vg);xle=n(Nye,"STRONG",{});var Jct=s(xle);Aao=r(Jct,"qdqbert"),Jct.forEach(t),Lao=r(Nye," \u2014 "),aB=n(Nye,"A",{href:!0});var Yct=s(aB);yao=r(Yct,"QDQBertConfig"),Yct.forEach(t),xao=r(Nye," (QDQBert model)"),Nye.forEach(t),$ao=i(L),Fg=n(L,"LI",{});var qye=s(Fg);$le=n(qye,"STRONG",{});var Kct=s($le);kao=r(Kct,"rag"),Kct.forEach(t),Sao=r(qye," \u2014 "),nB=n(qye,"A",{href:!0});var Zct=s(nB);Rao=r(Zct,"RagConfig"),Zct.forEach(t),Pao=r(qye," (RAG model)"),qye.forEach(t),Bao=i(L),Tg=n(L,"LI",{});var jye=s(Tg);kle=n(jye,"STRONG",{});var eft=s(kle);Iao=r(eft,"realm"),eft.forEach(t),Nao=r(jye," \u2014 "),sB=n(jye,"A",{href:!0});var oft=s(sB);qao=r(oft,"RealmConfig"),oft.forEach(t),jao=r(jye," (REALM model)"),jye.forEach(t),Dao=i(L),Mg=n(L,"LI",{});var Dye=s(Mg);Sle=n(Dye,"STRONG",{});var rft=s(Sle);Gao=r(rft,"reformer"),rft.forEach(t),Oao=r(Dye," \u2014 "),lB=n(Dye,"A",{href:!0});var tft=s(lB);Vao=r(tft,"ReformerConfig"),tft.forEach(t),Xao=r(Dye," (Reformer model)"),Dye.forEach(t),zao=i(L),Eg=n(L,"LI",{});var Gye=s(Eg);Rle=n(Gye,"STRONG",{});var aft=s(Rle);Wao=r(aft,"regnet"),aft.forEach(t),Qao=r(Gye," \u2014 "),iB=n(Gye,"A",{href:!0});var nft=s(iB);Hao=r(nft,"RegNetConfig"),nft.forEach(t),Uao=r(Gye," (RegNet model)"),Gye.forEach(t),Jao=i(L),Cg=n(L,"LI",{});var Oye=s(Cg);Ple=n(Oye,"STRONG",{});var sft=s(Ple);Yao=r(sft,"rembert"),sft.forEach(t),Kao=r(Oye," \u2014 "),dB=n(Oye,"A",{href:!0});var lft=s(dB);Zao=r(lft,"RemBertConfig"),lft.forEach(t),eno=r(Oye," (RemBERT model)"),Oye.forEach(t),ono=i(L),wg=n(L,"LI",{});var Vye=s(wg);Ble=n(Vye,"STRONG",{});var ift=s(Ble);rno=r(ift,"resnet"),ift.forEach(t),tno=r(Vye," \u2014 "),cB=n(Vye,"A",{href:!0});var dft=s(cB);ano=r(dft,"ResNetConfig"),dft.forEach(t),nno=r(Vye," (ResNet model)"),Vye.forEach(t),sno=i(L),Ag=n(L,"LI",{});var Xye=s(Ag);Ile=n(Xye,"STRONG",{});var cft=s(Ile);lno=r(cft,"retribert"),cft.forEach(t),ino=r(Xye," \u2014 "),fB=n(Xye,"A",{href:!0});var fft=s(fB);dno=r(fft,"RetriBertConfig"),fft.forEach(t),cno=r(Xye," (RetriBERT model)"),Xye.forEach(t),fno=i(L),Lg=n(L,"LI",{});var zye=s(Lg);Nle=n(zye,"STRONG",{});var mft=s(Nle);mno=r(mft,"roberta"),mft.forEach(t),gno=r(zye," \u2014 "),mB=n(zye,"A",{href:!0});var gft=s(mB);hno=r(gft,"RobertaConfig"),gft.forEach(t),pno=r(zye," (RoBERTa model)"),zye.forEach(t),_no=i(L),yg=n(L,"LI",{});var Wye=s(yg);qle=n(Wye,"STRONG",{});var hft=s(qle);uno=r(hft,"roformer"),hft.forEach(t),bno=r(Wye," \u2014 "),gB=n(Wye,"A",{href:!0});var pft=s(gB);vno=r(pft,"RoFormerConfig"),pft.forEach(t),Fno=r(Wye," (RoFormer model)"),Wye.forEach(t),Tno=i(L),xg=n(L,"LI",{});var Qye=s(xg);jle=n(Qye,"STRONG",{});var _ft=s(jle);Mno=r(_ft,"segformer"),_ft.forEach(t),Eno=r(Qye," \u2014 "),hB=n(Qye,"A",{href:!0});var uft=s(hB);Cno=r(uft,"SegformerConfig"),uft.forEach(t),wno=r(Qye," (SegFormer model)"),Qye.forEach(t),Ano=i(L),$g=n(L,"LI",{});var Hye=s($g);Dle=n(Hye,"STRONG",{});var bft=s(Dle);Lno=r(bft,"sew"),bft.forEach(t),yno=r(Hye," \u2014 "),pB=n(Hye,"A",{href:!0});var vft=s(pB);xno=r(vft,"SEWConfig"),vft.forEach(t),$no=r(Hye," (SEW model)"),Hye.forEach(t),kno=i(L),kg=n(L,"LI",{});var Uye=s(kg);Gle=n(Uye,"STRONG",{});var Fft=s(Gle);Sno=r(Fft,"sew-d"),Fft.forEach(t),Rno=r(Uye," \u2014 "),_B=n(Uye,"A",{href:!0});var Tft=s(_B);Pno=r(Tft,"SEWDConfig"),Tft.forEach(t),Bno=r(Uye," (SEW-D model)"),Uye.forEach(t),Ino=i(L),Sg=n(L,"LI",{});var Jye=s(Sg);Ole=n(Jye,"STRONG",{});var Mft=s(Ole);Nno=r(Mft,"speech-encoder-decoder"),Mft.forEach(t),qno=r(Jye," \u2014 "),uB=n(Jye,"A",{href:!0});var Eft=s(uB);jno=r(Eft,"SpeechEncoderDecoderConfig"),Eft.forEach(t),Dno=r(Jye," (Speech Encoder decoder model)"),Jye.forEach(t),Gno=i(L),Rg=n(L,"LI",{});var Yye=s(Rg);Vle=n(Yye,"STRONG",{});var Cft=s(Vle);Ono=r(Cft,"speech_to_text"),Cft.forEach(t),Vno=r(Yye," \u2014 "),bB=n(Yye,"A",{href:!0});var wft=s(bB);Xno=r(wft,"Speech2TextConfig"),wft.forEach(t),zno=r(Yye," (Speech2Text model)"),Yye.forEach(t),Wno=i(L),Pg=n(L,"LI",{});var Kye=s(Pg);Xle=n(Kye,"STRONG",{});var Aft=s(Xle);Qno=r(Aft,"speech_to_text_2"),Aft.forEach(t),Hno=r(Kye," \u2014 "),vB=n(Kye,"A",{href:!0});var Lft=s(vB);Uno=r(Lft,"Speech2Text2Config"),Lft.forEach(t),Jno=r(Kye," (Speech2Text2 model)"),Kye.forEach(t),Yno=i(L),Bg=n(L,"LI",{});var Zye=s(Bg);zle=n(Zye,"STRONG",{});var yft=s(zle);Kno=r(yft,"splinter"),yft.forEach(t),Zno=r(Zye," \u2014 "),FB=n(Zye,"A",{href:!0});var xft=s(FB);eso=r(xft,"SplinterConfig"),xft.forEach(t),oso=r(Zye," (Splinter model)"),Zye.forEach(t),rso=i(L),Ig=n(L,"LI",{});var exe=s(Ig);Wle=n(exe,"STRONG",{});var $ft=s(Wle);tso=r($ft,"squeezebert"),$ft.forEach(t),aso=r(exe," \u2014 "),TB=n(exe,"A",{href:!0});var kft=s(TB);nso=r(kft,"SqueezeBertConfig"),kft.forEach(t),sso=r(exe," (SqueezeBERT model)"),exe.forEach(t),lso=i(L),Ng=n(L,"LI",{});var oxe=s(Ng);Qle=n(oxe,"STRONG",{});var Sft=s(Qle);iso=r(Sft,"swin"),Sft.forEach(t),dso=r(oxe," \u2014 "),MB=n(oxe,"A",{href:!0});var Rft=s(MB);cso=r(Rft,"SwinConfig"),Rft.forEach(t),fso=r(oxe," (Swin Transformer model)"),oxe.forEach(t),mso=i(L),qg=n(L,"LI",{});var rxe=s(qg);Hle=n(rxe,"STRONG",{});var Pft=s(Hle);gso=r(Pft,"swinv2"),Pft.forEach(t),hso=r(rxe," \u2014 "),EB=n(rxe,"A",{href:!0});var Bft=s(EB);pso=r(Bft,"Swinv2Config"),Bft.forEach(t),_so=r(rxe," (Swin Transformer V2 model)"),rxe.forEach(t),uso=i(L),jg=n(L,"LI",{});var txe=s(jg);Ule=n(txe,"STRONG",{});var Ift=s(Ule);bso=r(Ift,"t5"),Ift.forEach(t),vso=r(txe," \u2014 "),CB=n(txe,"A",{href:!0});var Nft=s(CB);Fso=r(Nft,"T5Config"),Nft.forEach(t),Tso=r(txe," (T5 model)"),txe.forEach(t),Mso=i(L),Dg=n(L,"LI",{});var axe=s(Dg);Jle=n(axe,"STRONG",{});var qft=s(Jle);Eso=r(qft,"tapas"),qft.forEach(t),Cso=r(axe," \u2014 "),wB=n(axe,"A",{href:!0});var jft=s(wB);wso=r(jft,"TapasConfig"),jft.forEach(t),Aso=r(axe," (TAPAS model)"),axe.forEach(t),Lso=i(L),Gg=n(L,"LI",{});var nxe=s(Gg);Yle=n(nxe,"STRONG",{});var Dft=s(Yle);yso=r(Dft,"trajectory_transformer"),Dft.forEach(t),xso=r(nxe," \u2014 "),AB=n(nxe,"A",{href:!0});var Gft=s(AB);$so=r(Gft,"TrajectoryTransformerConfig"),Gft.forEach(t),kso=r(nxe," (Trajectory Transformer model)"),nxe.forEach(t),Sso=i(L),Og=n(L,"LI",{});var sxe=s(Og);Kle=n(sxe,"STRONG",{});var Oft=s(Kle);Rso=r(Oft,"transfo-xl"),Oft.forEach(t),Pso=r(sxe," \u2014 "),LB=n(sxe,"A",{href:!0});var Vft=s(LB);Bso=r(Vft,"TransfoXLConfig"),Vft.forEach(t),Iso=r(sxe," (Transformer-XL model)"),sxe.forEach(t),Nso=i(L),Vg=n(L,"LI",{});var lxe=s(Vg);Zle=n(lxe,"STRONG",{});var Xft=s(Zle);qso=r(Xft,"trocr"),Xft.forEach(t),jso=r(lxe," \u2014 "),yB=n(lxe,"A",{href:!0});var zft=s(yB);Dso=r(zft,"TrOCRConfig"),zft.forEach(t),Gso=r(lxe," (TrOCR model)"),lxe.forEach(t),Oso=i(L),Xg=n(L,"LI",{});var ixe=s(Xg);eie=n(ixe,"STRONG",{});var Wft=s(eie);Vso=r(Wft,"unispeech"),Wft.forEach(t),Xso=r(ixe," \u2014 "),xB=n(ixe,"A",{href:!0});var Qft=s(xB);zso=r(Qft,"UniSpeechConfig"),Qft.forEach(t),Wso=r(ixe," (UniSpeech model)"),ixe.forEach(t),Qso=i(L),zg=n(L,"LI",{});var dxe=s(zg);oie=n(dxe,"STRONG",{});var Hft=s(oie);Hso=r(Hft,"unispeech-sat"),Hft.forEach(t),Uso=r(dxe," \u2014 "),$B=n(dxe,"A",{href:!0});var Uft=s($B);Jso=r(Uft,"UniSpeechSatConfig"),Uft.forEach(t),Yso=r(dxe," (UniSpeechSat model)"),dxe.forEach(t),Kso=i(L),Wg=n(L,"LI",{});var cxe=s(Wg);rie=n(cxe,"STRONG",{});var Jft=s(rie);Zso=r(Jft,"van"),Jft.forEach(t),elo=r(cxe," \u2014 "),kB=n(cxe,"A",{href:!0});var Yft=s(kB);olo=r(Yft,"VanConfig"),Yft.forEach(t),rlo=r(cxe," (VAN model)"),cxe.forEach(t),tlo=i(L),Qg=n(L,"LI",{});var fxe=s(Qg);tie=n(fxe,"STRONG",{});var Kft=s(tie);alo=r(Kft,"videomae"),Kft.forEach(t),nlo=r(fxe," \u2014 "),SB=n(fxe,"A",{href:!0});var Zft=s(SB);slo=r(Zft,"VideoMAEConfig"),Zft.forEach(t),llo=r(fxe," (VideoMAE model)"),fxe.forEach(t),ilo=i(L),Hg=n(L,"LI",{});var mxe=s(Hg);aie=n(mxe,"STRONG",{});var emt=s(aie);dlo=r(emt,"vilt"),emt.forEach(t),clo=r(mxe," \u2014 "),RB=n(mxe,"A",{href:!0});var omt=s(RB);flo=r(omt,"ViltConfig"),omt.forEach(t),mlo=r(mxe," (ViLT model)"),mxe.forEach(t),glo=i(L),Ug=n(L,"LI",{});var gxe=s(Ug);nie=n(gxe,"STRONG",{});var rmt=s(nie);hlo=r(rmt,"vision-encoder-decoder"),rmt.forEach(t),plo=r(gxe," \u2014 "),PB=n(gxe,"A",{href:!0});var tmt=s(PB);_lo=r(tmt,"VisionEncoderDecoderConfig"),tmt.forEach(t),ulo=r(gxe," (Vision Encoder decoder model)"),gxe.forEach(t),blo=i(L),Jg=n(L,"LI",{});var hxe=s(Jg);sie=n(hxe,"STRONG",{});var amt=s(sie);vlo=r(amt,"vision-text-dual-encoder"),amt.forEach(t),Flo=r(hxe," \u2014 "),BB=n(hxe,"A",{href:!0});var nmt=s(BB);Tlo=r(nmt,"VisionTextDualEncoderConfig"),nmt.forEach(t),Mlo=r(hxe," (VisionTextDualEncoder model)"),hxe.forEach(t),Elo=i(L),Yg=n(L,"LI",{});var pxe=s(Yg);lie=n(pxe,"STRONG",{});var smt=s(lie);Clo=r(smt,"visual_bert"),smt.forEach(t),wlo=r(pxe," \u2014 "),IB=n(pxe,"A",{href:!0});var lmt=s(IB);Alo=r(lmt,"VisualBertConfig"),lmt.forEach(t),Llo=r(pxe," (VisualBERT model)"),pxe.forEach(t),ylo=i(L),Kg=n(L,"LI",{});var _xe=s(Kg);iie=n(_xe,"STRONG",{});var imt=s(iie);xlo=r(imt,"vit"),imt.forEach(t),$lo=r(_xe," \u2014 "),NB=n(_xe,"A",{href:!0});var dmt=s(NB);klo=r(dmt,"ViTConfig"),dmt.forEach(t),Slo=r(_xe," (ViT model)"),_xe.forEach(t),Rlo=i(L),Zg=n(L,"LI",{});var uxe=s(Zg);die=n(uxe,"STRONG",{});var cmt=s(die);Plo=r(cmt,"vit_mae"),cmt.forEach(t),Blo=r(uxe," \u2014 "),qB=n(uxe,"A",{href:!0});var fmt=s(qB);Ilo=r(fmt,"ViTMAEConfig"),fmt.forEach(t),Nlo=r(uxe," (ViTMAE model)"),uxe.forEach(t),qlo=i(L),eh=n(L,"LI",{});var bxe=s(eh);cie=n(bxe,"STRONG",{});var mmt=s(cie);jlo=r(mmt,"wav2vec2"),mmt.forEach(t),Dlo=r(bxe," \u2014 "),jB=n(bxe,"A",{href:!0});var gmt=s(jB);Glo=r(gmt,"Wav2Vec2Config"),gmt.forEach(t),Olo=r(bxe," (Wav2Vec2 model)"),bxe.forEach(t),Vlo=i(L),oh=n(L,"LI",{});var vxe=s(oh);fie=n(vxe,"STRONG",{});var hmt=s(fie);Xlo=r(hmt,"wav2vec2-conformer"),hmt.forEach(t),zlo=r(vxe," \u2014 "),DB=n(vxe,"A",{href:!0});var pmt=s(DB);Wlo=r(pmt,"Wav2Vec2ConformerConfig"),pmt.forEach(t),Qlo=r(vxe," (Wav2Vec2-Conformer model)"),vxe.forEach(t),Hlo=i(L),rh=n(L,"LI",{});var Fxe=s(rh);mie=n(Fxe,"STRONG",{});var _mt=s(mie);Ulo=r(_mt,"wavlm"),_mt.forEach(t),Jlo=r(Fxe," \u2014 "),GB=n(Fxe,"A",{href:!0});var umt=s(GB);Ylo=r(umt,"WavLMConfig"),umt.forEach(t),Klo=r(Fxe," (WavLM model)"),Fxe.forEach(t),Zlo=i(L),th=n(L,"LI",{});var Txe=s(th);gie=n(Txe,"STRONG",{});var bmt=s(gie);eio=r(bmt,"xglm"),bmt.forEach(t),oio=r(Txe," \u2014 "),OB=n(Txe,"A",{href:!0});var vmt=s(OB);rio=r(vmt,"XGLMConfig"),vmt.forEach(t),tio=r(Txe," (XGLM model)"),Txe.forEach(t),aio=i(L),ah=n(L,"LI",{});var Mxe=s(ah);hie=n(Mxe,"STRONG",{});var Fmt=s(hie);nio=r(Fmt,"xlm"),Fmt.forEach(t),sio=r(Mxe," \u2014 "),VB=n(Mxe,"A",{href:!0});var Tmt=s(VB);lio=r(Tmt,"XLMConfig"),Tmt.forEach(t),iio=r(Mxe," (XLM model)"),Mxe.forEach(t),dio=i(L),nh=n(L,"LI",{});var Exe=s(nh);pie=n(Exe,"STRONG",{});var Mmt=s(pie);cio=r(Mmt,"xlm-prophetnet"),Mmt.forEach(t),fio=r(Exe," \u2014 "),XB=n(Exe,"A",{href:!0});var Emt=s(XB);mio=r(Emt,"XLMProphetNetConfig"),Emt.forEach(t),gio=r(Exe," (XLM-ProphetNet model)"),Exe.forEach(t),hio=i(L),sh=n(L,"LI",{});var Cxe=s(sh);_ie=n(Cxe,"STRONG",{});var Cmt=s(_ie);pio=r(Cmt,"xlm-roberta"),Cmt.forEach(t),_io=r(Cxe," \u2014 "),zB=n(Cxe,"A",{href:!0});var wmt=s(zB);uio=r(wmt,"XLMRobertaConfig"),wmt.forEach(t),bio=r(Cxe," (XLM-RoBERTa model)"),Cxe.forEach(t),vio=i(L),lh=n(L,"LI",{});var wxe=s(lh);uie=n(wxe,"STRONG",{});var Amt=s(uie);Fio=r(Amt,"xlm-roberta-xl"),Amt.forEach(t),Tio=r(wxe," \u2014 "),WB=n(wxe,"A",{href:!0});var Lmt=s(WB);Mio=r(Lmt,"XLMRobertaXLConfig"),Lmt.forEach(t),Eio=r(wxe," (XLM-RoBERTa-XL model)"),wxe.forEach(t),Cio=i(L),ih=n(L,"LI",{});var Axe=s(ih);bie=n(Axe,"STRONG",{});var ymt=s(bie);wio=r(ymt,"xlnet"),ymt.forEach(t),Aio=r(Axe," \u2014 "),QB=n(Axe,"A",{href:!0});var xmt=s(QB);Lio=r(xmt,"XLNetConfig"),xmt.forEach(t),yio=r(Axe," (XLNet model)"),Axe.forEach(t),xio=i(L),dh=n(L,"LI",{});var Lxe=s(dh);vie=n(Lxe,"STRONG",{});var $mt=s(vie);$io=r($mt,"yolos"),$mt.forEach(t),kio=r(Lxe," \u2014 "),HB=n(Lxe,"A",{href:!0});var kmt=s(HB);Sio=r(kmt,"YolosConfig"),kmt.forEach(t),Rio=r(Lxe," (YOLOS model)"),Lxe.forEach(t),Pio=i(L),ch=n(L,"LI",{});var yxe=s(ch);Fie=n(yxe,"STRONG",{});var Smt=s(Fie);Bio=r(Smt,"yoso"),Smt.forEach(t),Iio=r(yxe," \u2014 "),UB=n(yxe,"A",{href:!0});var Rmt=s(UB);Nio=r(Rmt,"YosoConfig"),Rmt.forEach(t),qio=r(yxe," (YOSO model)"),yxe.forEach(t),L.forEach(t),jio=i(it),T(fh.$$.fragment,it),it.forEach(t),Dio=i(lt),mh=n(lt,"DIV",{class:!0});var VHe=s(mh);T(Z7.$$.fragment,VHe),Gio=i(VHe),Tie=n(VHe,"P",{});var Pmt=s(Tie);Oio=r(Pmt,"Register a new configuration for this class."),Pmt.forEach(t),VHe.forEach(t),lt.forEach(t),OWe=i(f),Wi=n(f,"H2",{class:!0});var XHe=s(Wi);gh=n(XHe,"A",{id:!0,class:!0,href:!0});var Bmt=s(gh);Mie=n(Bmt,"SPAN",{});var Imt=s(Mie);T(eL.$$.fragment,Imt),Imt.forEach(t),Bmt.forEach(t),Vio=i(XHe),Eie=n(XHe,"SPAN",{});var Nmt=s(Eie);Xio=r(Nmt,"AutoTokenizer"),Nmt.forEach(t),XHe.forEach(t),VWe=i(f),xo=n(f,"DIV",{class:!0});var sl=s(xo);T(oL.$$.fragment,sl),zio=i(sl),rL=n(sl,"P",{});var zHe=s(rL);Wio=r(zHe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=n(zHe,"A",{href:!0});var qmt=s(JB);Qio=r(qmt,"AutoTokenizer.from_pretrained()"),qmt.forEach(t),Hio=r(zHe," class method."),zHe.forEach(t),Uio=i(sl),tL=n(sl,"P",{});var WHe=s(tL);Jio=r(WHe,"This class cannot be instantiated directly using "),Cie=n(WHe,"CODE",{});var jmt=s(Cie);Yio=r(jmt,"__init__()"),jmt.forEach(t),Kio=r(WHe," (throws an error)."),WHe.forEach(t),Zio=i(sl),kr=n(sl,"DIV",{class:!0});var ll=s(kr);T(aL.$$.fragment,ll),edo=i(ll),wie=n(ll,"P",{});var Dmt=s(wie);odo=r(Dmt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Dmt.forEach(t),rdo=i(ll),qa=n(ll,"P",{});var z6=s(qa);tdo=r(z6,"The tokenizer class to instantiate is selected based on the "),Aie=n(z6,"CODE",{});var Gmt=s(Aie);ado=r(Gmt,"model_type"),Gmt.forEach(t),ndo=r(z6,` property of the config object (either
passed as an argument or loaded from `),Lie=n(z6,"CODE",{});var Omt=s(Lie);sdo=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),ldo=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(z6,"CODE",{});var Vmt=s(yie);ido=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),ddo=r(z6,":"),z6.forEach(t),cdo=i(ll),k=n(ll,"UL",{});var S=s(k);zn=n(S,"LI",{});var pS=s(zn);xie=n(pS,"STRONG",{});var Xmt=s(xie);fdo=r(Xmt,"albert"),Xmt.forEach(t),mdo=r(pS," \u2014 "),YB=n(pS,"A",{href:!0});var zmt=s(YB);gdo=r(zmt,"AlbertTokenizer"),zmt.forEach(t),hdo=r(pS," or "),KB=n(pS,"A",{href:!0});var Wmt=s(KB);pdo=r(Wmt,"AlbertTokenizerFast"),Wmt.forEach(t),_do=r(pS," (ALBERT model)"),pS.forEach(t),udo=i(S),Wn=n(S,"LI",{});var _S=s(Wn);$ie=n(_S,"STRONG",{});var Qmt=s($ie);bdo=r(Qmt,"bart"),Qmt.forEach(t),vdo=r(_S," \u2014 "),ZB=n(_S,"A",{href:!0});var Hmt=s(ZB);Fdo=r(Hmt,"BartTokenizer"),Hmt.forEach(t),Tdo=r(_S," or "),eI=n(_S,"A",{href:!0});var Umt=s(eI);Mdo=r(Umt,"BartTokenizerFast"),Umt.forEach(t),Edo=r(_S," (BART model)"),_S.forEach(t),Cdo=i(S),Qn=n(S,"LI",{});var uS=s(Qn);kie=n(uS,"STRONG",{});var Jmt=s(kie);wdo=r(Jmt,"barthez"),Jmt.forEach(t),Ado=r(uS," \u2014 "),oI=n(uS,"A",{href:!0});var Ymt=s(oI);Ldo=r(Ymt,"BarthezTokenizer"),Ymt.forEach(t),ydo=r(uS," or "),rI=n(uS,"A",{href:!0});var Kmt=s(rI);xdo=r(Kmt,"BarthezTokenizerFast"),Kmt.forEach(t),$do=r(uS," (BARThez model)"),uS.forEach(t),kdo=i(S),hh=n(S,"LI",{});var xxe=s(hh);Sie=n(xxe,"STRONG",{});var Zmt=s(Sie);Sdo=r(Zmt,"bartpho"),Zmt.forEach(t),Rdo=r(xxe," \u2014 "),tI=n(xxe,"A",{href:!0});var egt=s(tI);Pdo=r(egt,"BartphoTokenizer"),egt.forEach(t),Bdo=r(xxe," (BARTpho model)"),xxe.forEach(t),Ido=i(S),Hn=n(S,"LI",{});var bS=s(Hn);Rie=n(bS,"STRONG",{});var ogt=s(Rie);Ndo=r(ogt,"bert"),ogt.forEach(t),qdo=r(bS," \u2014 "),aI=n(bS,"A",{href:!0});var rgt=s(aI);jdo=r(rgt,"BertTokenizer"),rgt.forEach(t),Ddo=r(bS," or "),nI=n(bS,"A",{href:!0});var tgt=s(nI);Gdo=r(tgt,"BertTokenizerFast"),tgt.forEach(t),Odo=r(bS," (BERT model)"),bS.forEach(t),Vdo=i(S),ph=n(S,"LI",{});var $xe=s(ph);Pie=n($xe,"STRONG",{});var agt=s(Pie);Xdo=r(agt,"bert-generation"),agt.forEach(t),zdo=r($xe," \u2014 "),sI=n($xe,"A",{href:!0});var ngt=s(sI);Wdo=r(ngt,"BertGenerationTokenizer"),ngt.forEach(t),Qdo=r($xe," (Bert Generation model)"),$xe.forEach(t),Hdo=i(S),_h=n(S,"LI",{});var kxe=s(_h);Bie=n(kxe,"STRONG",{});var sgt=s(Bie);Udo=r(sgt,"bert-japanese"),sgt.forEach(t),Jdo=r(kxe," \u2014 "),lI=n(kxe,"A",{href:!0});var lgt=s(lI);Ydo=r(lgt,"BertJapaneseTokenizer"),lgt.forEach(t),Kdo=r(kxe," (BertJapanese model)"),kxe.forEach(t),Zdo=i(S),uh=n(S,"LI",{});var Sxe=s(uh);Iie=n(Sxe,"STRONG",{});var igt=s(Iie);eco=r(igt,"bertweet"),igt.forEach(t),oco=r(Sxe," \u2014 "),iI=n(Sxe,"A",{href:!0});var dgt=s(iI);rco=r(dgt,"BertweetTokenizer"),dgt.forEach(t),tco=r(Sxe," (BERTweet model)"),Sxe.forEach(t),aco=i(S),Un=n(S,"LI",{});var vS=s(Un);Nie=n(vS,"STRONG",{});var cgt=s(Nie);nco=r(cgt,"big_bird"),cgt.forEach(t),sco=r(vS," \u2014 "),dI=n(vS,"A",{href:!0});var fgt=s(dI);lco=r(fgt,"BigBirdTokenizer"),fgt.forEach(t),ico=r(vS," or "),cI=n(vS,"A",{href:!0});var mgt=s(cI);dco=r(mgt,"BigBirdTokenizerFast"),mgt.forEach(t),cco=r(vS," (BigBird model)"),vS.forEach(t),fco=i(S),Jn=n(S,"LI",{});var FS=s(Jn);qie=n(FS,"STRONG",{});var ggt=s(qie);mco=r(ggt,"bigbird_pegasus"),ggt.forEach(t),gco=r(FS," \u2014 "),fI=n(FS,"A",{href:!0});var hgt=s(fI);hco=r(hgt,"PegasusTokenizer"),hgt.forEach(t),pco=r(FS," or "),mI=n(FS,"A",{href:!0});var pgt=s(mI);_co=r(pgt,"PegasusTokenizerFast"),pgt.forEach(t),uco=r(FS," (BigBird-Pegasus model)"),FS.forEach(t),bco=i(S),Yn=n(S,"LI",{});var TS=s(Yn);jie=n(TS,"STRONG",{});var _gt=s(jie);vco=r(_gt,"blenderbot"),_gt.forEach(t),Fco=r(TS," \u2014 "),gI=n(TS,"A",{href:!0});var ugt=s(gI);Tco=r(ugt,"BlenderbotTokenizer"),ugt.forEach(t),Mco=r(TS," or "),hI=n(TS,"A",{href:!0});var bgt=s(hI);Eco=r(bgt,"BlenderbotTokenizerFast"),bgt.forEach(t),Cco=r(TS," (Blenderbot model)"),TS.forEach(t),wco=i(S),bh=n(S,"LI",{});var Rxe=s(bh);Die=n(Rxe,"STRONG",{});var vgt=s(Die);Aco=r(vgt,"blenderbot-small"),vgt.forEach(t),Lco=r(Rxe," \u2014 "),pI=n(Rxe,"A",{href:!0});var Fgt=s(pI);yco=r(Fgt,"BlenderbotSmallTokenizer"),Fgt.forEach(t),xco=r(Rxe," (BlenderbotSmall model)"),Rxe.forEach(t),$co=i(S),vh=n(S,"LI",{});var Pxe=s(vh);Gie=n(Pxe,"STRONG",{});var Tgt=s(Gie);kco=r(Tgt,"bloom"),Tgt.forEach(t),Sco=r(Pxe," \u2014 "),_I=n(Pxe,"A",{href:!0});var Mgt=s(_I);Rco=r(Mgt,"BloomTokenizerFast"),Mgt.forEach(t),Pco=r(Pxe," (BLOOM model)"),Pxe.forEach(t),Bco=i(S),Fh=n(S,"LI",{});var Bxe=s(Fh);Oie=n(Bxe,"STRONG",{});var Egt=s(Oie);Ico=r(Egt,"byt5"),Egt.forEach(t),Nco=r(Bxe," \u2014 "),uI=n(Bxe,"A",{href:!0});var Cgt=s(uI);qco=r(Cgt,"ByT5Tokenizer"),Cgt.forEach(t),jco=r(Bxe," (ByT5 model)"),Bxe.forEach(t),Dco=i(S),Kn=n(S,"LI",{});var MS=s(Kn);Vie=n(MS,"STRONG",{});var wgt=s(Vie);Gco=r(wgt,"camembert"),wgt.forEach(t),Oco=r(MS," \u2014 "),bI=n(MS,"A",{href:!0});var Agt=s(bI);Vco=r(Agt,"CamembertTokenizer"),Agt.forEach(t),Xco=r(MS," or "),vI=n(MS,"A",{href:!0});var Lgt=s(vI);zco=r(Lgt,"CamembertTokenizerFast"),Lgt.forEach(t),Wco=r(MS," (CamemBERT model)"),MS.forEach(t),Qco=i(S),Th=n(S,"LI",{});var Ixe=s(Th);Xie=n(Ixe,"STRONG",{});var ygt=s(Xie);Hco=r(ygt,"canine"),ygt.forEach(t),Uco=r(Ixe," \u2014 "),FI=n(Ixe,"A",{href:!0});var xgt=s(FI);Jco=r(xgt,"CanineTokenizer"),xgt.forEach(t),Yco=r(Ixe," (CANINE model)"),Ixe.forEach(t),Kco=i(S),Zn=n(S,"LI",{});var ES=s(Zn);zie=n(ES,"STRONG",{});var $gt=s(zie);Zco=r($gt,"clip"),$gt.forEach(t),efo=r(ES," \u2014 "),TI=n(ES,"A",{href:!0});var kgt=s(TI);ofo=r(kgt,"CLIPTokenizer"),kgt.forEach(t),rfo=r(ES," or "),MI=n(ES,"A",{href:!0});var Sgt=s(MI);tfo=r(Sgt,"CLIPTokenizerFast"),Sgt.forEach(t),afo=r(ES," (CLIP model)"),ES.forEach(t),nfo=i(S),es=n(S,"LI",{});var CS=s(es);Wie=n(CS,"STRONG",{});var Rgt=s(Wie);sfo=r(Rgt,"codegen"),Rgt.forEach(t),lfo=r(CS," \u2014 "),EI=n(CS,"A",{href:!0});var Pgt=s(EI);ifo=r(Pgt,"CodeGenTokenizer"),Pgt.forEach(t),dfo=r(CS," or "),CI=n(CS,"A",{href:!0});var Bgt=s(CI);cfo=r(Bgt,"CodeGenTokenizerFast"),Bgt.forEach(t),ffo=r(CS," (CodeGen model)"),CS.forEach(t),mfo=i(S),os=n(S,"LI",{});var wS=s(os);Qie=n(wS,"STRONG",{});var Igt=s(Qie);gfo=r(Igt,"convbert"),Igt.forEach(t),hfo=r(wS," \u2014 "),wI=n(wS,"A",{href:!0});var Ngt=s(wI);pfo=r(Ngt,"ConvBertTokenizer"),Ngt.forEach(t),_fo=r(wS," or "),AI=n(wS,"A",{href:!0});var qgt=s(AI);ufo=r(qgt,"ConvBertTokenizerFast"),qgt.forEach(t),bfo=r(wS," (ConvBERT model)"),wS.forEach(t),vfo=i(S),rs=n(S,"LI",{});var AS=s(rs);Hie=n(AS,"STRONG",{});var jgt=s(Hie);Ffo=r(jgt,"cpm"),jgt.forEach(t),Tfo=r(AS," \u2014 "),LI=n(AS,"A",{href:!0});var Dgt=s(LI);Mfo=r(Dgt,"CpmTokenizer"),Dgt.forEach(t),Efo=r(AS," or "),yI=n(AS,"A",{href:!0});var Ggt=s(yI);Cfo=r(Ggt,"CpmTokenizerFast"),Ggt.forEach(t),wfo=r(AS," (CPM model)"),AS.forEach(t),Afo=i(S),Mh=n(S,"LI",{});var Nxe=s(Mh);Uie=n(Nxe,"STRONG",{});var Ogt=s(Uie);Lfo=r(Ogt,"ctrl"),Ogt.forEach(t),yfo=r(Nxe," \u2014 "),xI=n(Nxe,"A",{href:!0});var Vgt=s(xI);xfo=r(Vgt,"CTRLTokenizer"),Vgt.forEach(t),$fo=r(Nxe," (CTRL model)"),Nxe.forEach(t),kfo=i(S),ts=n(S,"LI",{});var LS=s(ts);Jie=n(LS,"STRONG",{});var Xgt=s(Jie);Sfo=r(Xgt,"data2vec-text"),Xgt.forEach(t),Rfo=r(LS," \u2014 "),$I=n(LS,"A",{href:!0});var zgt=s($I);Pfo=r(zgt,"RobertaTokenizer"),zgt.forEach(t),Bfo=r(LS," or "),kI=n(LS,"A",{href:!0});var Wgt=s(kI);Ifo=r(Wgt,"RobertaTokenizerFast"),Wgt.forEach(t),Nfo=r(LS," (Data2VecText model)"),LS.forEach(t),qfo=i(S),as=n(S,"LI",{});var yS=s(as);Yie=n(yS,"STRONG",{});var Qgt=s(Yie);jfo=r(Qgt,"deberta"),Qgt.forEach(t),Dfo=r(yS," \u2014 "),SI=n(yS,"A",{href:!0});var Hgt=s(SI);Gfo=r(Hgt,"DebertaTokenizer"),Hgt.forEach(t),Ofo=r(yS," or "),RI=n(yS,"A",{href:!0});var Ugt=s(RI);Vfo=r(Ugt,"DebertaTokenizerFast"),Ugt.forEach(t),Xfo=r(yS," (DeBERTa model)"),yS.forEach(t),zfo=i(S),ns=n(S,"LI",{});var xS=s(ns);Kie=n(xS,"STRONG",{});var Jgt=s(Kie);Wfo=r(Jgt,"deberta-v2"),Jgt.forEach(t),Qfo=r(xS," \u2014 "),PI=n(xS,"A",{href:!0});var Ygt=s(PI);Hfo=r(Ygt,"DebertaV2Tokenizer"),Ygt.forEach(t),Ufo=r(xS," or "),BI=n(xS,"A",{href:!0});var Kgt=s(BI);Jfo=r(Kgt,"DebertaV2TokenizerFast"),Kgt.forEach(t),Yfo=r(xS," (DeBERTa-v2 model)"),xS.forEach(t),Kfo=i(S),ss=n(S,"LI",{});var $S=s(ss);Zie=n($S,"STRONG",{});var Zgt=s(Zie);Zfo=r(Zgt,"distilbert"),Zgt.forEach(t),emo=r($S," \u2014 "),II=n($S,"A",{href:!0});var eht=s(II);omo=r(eht,"DistilBertTokenizer"),eht.forEach(t),rmo=r($S," or "),NI=n($S,"A",{href:!0});var oht=s(NI);tmo=r(oht,"DistilBertTokenizerFast"),oht.forEach(t),amo=r($S," (DistilBERT model)"),$S.forEach(t),nmo=i(S),ls=n(S,"LI",{});var kS=s(ls);ede=n(kS,"STRONG",{});var rht=s(ede);smo=r(rht,"dpr"),rht.forEach(t),lmo=r(kS," \u2014 "),qI=n(kS,"A",{href:!0});var tht=s(qI);imo=r(tht,"DPRQuestionEncoderTokenizer"),tht.forEach(t),dmo=r(kS," or "),jI=n(kS,"A",{href:!0});var aht=s(jI);cmo=r(aht,"DPRQuestionEncoderTokenizerFast"),aht.forEach(t),fmo=r(kS," (DPR model)"),kS.forEach(t),mmo=i(S),is=n(S,"LI",{});var SS=s(is);ode=n(SS,"STRONG",{});var nht=s(ode);gmo=r(nht,"electra"),nht.forEach(t),hmo=r(SS," \u2014 "),DI=n(SS,"A",{href:!0});var sht=s(DI);pmo=r(sht,"ElectraTokenizer"),sht.forEach(t),_mo=r(SS," or "),GI=n(SS,"A",{href:!0});var lht=s(GI);umo=r(lht,"ElectraTokenizerFast"),lht.forEach(t),bmo=r(SS," (ELECTRA model)"),SS.forEach(t),vmo=i(S),Eh=n(S,"LI",{});var qxe=s(Eh);rde=n(qxe,"STRONG",{});var iht=s(rde);Fmo=r(iht,"flaubert"),iht.forEach(t),Tmo=r(qxe," \u2014 "),OI=n(qxe,"A",{href:!0});var dht=s(OI);Mmo=r(dht,"FlaubertTokenizer"),dht.forEach(t),Emo=r(qxe," (FlauBERT model)"),qxe.forEach(t),Cmo=i(S),ds=n(S,"LI",{});var RS=s(ds);tde=n(RS,"STRONG",{});var cht=s(tde);wmo=r(cht,"fnet"),cht.forEach(t),Amo=r(RS," \u2014 "),VI=n(RS,"A",{href:!0});var fht=s(VI);Lmo=r(fht,"FNetTokenizer"),fht.forEach(t),ymo=r(RS," or "),XI=n(RS,"A",{href:!0});var mht=s(XI);xmo=r(mht,"FNetTokenizerFast"),mht.forEach(t),$mo=r(RS," (FNet model)"),RS.forEach(t),kmo=i(S),Ch=n(S,"LI",{});var jxe=s(Ch);ade=n(jxe,"STRONG",{});var ght=s(ade);Smo=r(ght,"fsmt"),ght.forEach(t),Rmo=r(jxe," \u2014 "),zI=n(jxe,"A",{href:!0});var hht=s(zI);Pmo=r(hht,"FSMTTokenizer"),hht.forEach(t),Bmo=r(jxe," (FairSeq Machine-Translation model)"),jxe.forEach(t),Imo=i(S),cs=n(S,"LI",{});var PS=s(cs);nde=n(PS,"STRONG",{});var pht=s(nde);Nmo=r(pht,"funnel"),pht.forEach(t),qmo=r(PS," \u2014 "),WI=n(PS,"A",{href:!0});var _ht=s(WI);jmo=r(_ht,"FunnelTokenizer"),_ht.forEach(t),Dmo=r(PS," or "),QI=n(PS,"A",{href:!0});var uht=s(QI);Gmo=r(uht,"FunnelTokenizerFast"),uht.forEach(t),Omo=r(PS," (Funnel Transformer model)"),PS.forEach(t),Vmo=i(S),fs=n(S,"LI",{});var BS=s(fs);sde=n(BS,"STRONG",{});var bht=s(sde);Xmo=r(bht,"gpt2"),bht.forEach(t),zmo=r(BS," \u2014 "),HI=n(BS,"A",{href:!0});var vht=s(HI);Wmo=r(vht,"GPT2Tokenizer"),vht.forEach(t),Qmo=r(BS," or "),UI=n(BS,"A",{href:!0});var Fht=s(UI);Hmo=r(Fht,"GPT2TokenizerFast"),Fht.forEach(t),Umo=r(BS," (OpenAI GPT-2 model)"),BS.forEach(t),Jmo=i(S),ms=n(S,"LI",{});var IS=s(ms);lde=n(IS,"STRONG",{});var Tht=s(lde);Ymo=r(Tht,"gpt_neo"),Tht.forEach(t),Kmo=r(IS," \u2014 "),JI=n(IS,"A",{href:!0});var Mht=s(JI);Zmo=r(Mht,"GPT2Tokenizer"),Mht.forEach(t),ego=r(IS," or "),YI=n(IS,"A",{href:!0});var Eht=s(YI);ogo=r(Eht,"GPT2TokenizerFast"),Eht.forEach(t),rgo=r(IS," (GPT Neo model)"),IS.forEach(t),tgo=i(S),wh=n(S,"LI",{});var Dxe=s(wh);ide=n(Dxe,"STRONG",{});var Cht=s(ide);ago=r(Cht,"gpt_neox"),Cht.forEach(t),ngo=r(Dxe," \u2014 "),KI=n(Dxe,"A",{href:!0});var wht=s(KI);sgo=r(wht,"GPTNeoXTokenizerFast"),wht.forEach(t),lgo=r(Dxe," (GPT NeoX model)"),Dxe.forEach(t),igo=i(S),gs=n(S,"LI",{});var NS=s(gs);dde=n(NS,"STRONG",{});var Aht=s(dde);dgo=r(Aht,"gptj"),Aht.forEach(t),cgo=r(NS," \u2014 "),ZI=n(NS,"A",{href:!0});var Lht=s(ZI);fgo=r(Lht,"GPT2Tokenizer"),Lht.forEach(t),mgo=r(NS," or "),eN=n(NS,"A",{href:!0});var yht=s(eN);ggo=r(yht,"GPT2TokenizerFast"),yht.forEach(t),hgo=r(NS," (GPT-J model)"),NS.forEach(t),pgo=i(S),hs=n(S,"LI",{});var qS=s(hs);cde=n(qS,"STRONG",{});var xht=s(cde);_go=r(xht,"groupvit"),xht.forEach(t),ugo=r(qS," \u2014 "),oN=n(qS,"A",{href:!0});var $ht=s(oN);bgo=r($ht,"CLIPTokenizer"),$ht.forEach(t),vgo=r(qS," or "),rN=n(qS,"A",{href:!0});var kht=s(rN);Fgo=r(kht,"CLIPTokenizerFast"),kht.forEach(t),Tgo=r(qS," (GroupViT model)"),qS.forEach(t),Mgo=i(S),ps=n(S,"LI",{});var jS=s(ps);fde=n(jS,"STRONG",{});var Sht=s(fde);Ego=r(Sht,"herbert"),Sht.forEach(t),Cgo=r(jS," \u2014 "),tN=n(jS,"A",{href:!0});var Rht=s(tN);wgo=r(Rht,"HerbertTokenizer"),Rht.forEach(t),Ago=r(jS," or "),aN=n(jS,"A",{href:!0});var Pht=s(aN);Lgo=r(Pht,"HerbertTokenizerFast"),Pht.forEach(t),ygo=r(jS," (HerBERT model)"),jS.forEach(t),xgo=i(S),Ah=n(S,"LI",{});var Gxe=s(Ah);mde=n(Gxe,"STRONG",{});var Bht=s(mde);$go=r(Bht,"hubert"),Bht.forEach(t),kgo=r(Gxe," \u2014 "),nN=n(Gxe,"A",{href:!0});var Iht=s(nN);Sgo=r(Iht,"Wav2Vec2CTCTokenizer"),Iht.forEach(t),Rgo=r(Gxe," (Hubert model)"),Gxe.forEach(t),Pgo=i(S),_s=n(S,"LI",{});var DS=s(_s);gde=n(DS,"STRONG",{});var Nht=s(gde);Bgo=r(Nht,"ibert"),Nht.forEach(t),Igo=r(DS," \u2014 "),sN=n(DS,"A",{href:!0});var qht=s(sN);Ngo=r(qht,"RobertaTokenizer"),qht.forEach(t),qgo=r(DS," or "),lN=n(DS,"A",{href:!0});var jht=s(lN);jgo=r(jht,"RobertaTokenizerFast"),jht.forEach(t),Dgo=r(DS," (I-BERT model)"),DS.forEach(t),Ggo=i(S),us=n(S,"LI",{});var GS=s(us);hde=n(GS,"STRONG",{});var Dht=s(hde);Ogo=r(Dht,"layoutlm"),Dht.forEach(t),Vgo=r(GS," \u2014 "),iN=n(GS,"A",{href:!0});var Ght=s(iN);Xgo=r(Ght,"LayoutLMTokenizer"),Ght.forEach(t),zgo=r(GS," or "),dN=n(GS,"A",{href:!0});var Oht=s(dN);Wgo=r(Oht,"LayoutLMTokenizerFast"),Oht.forEach(t),Qgo=r(GS," (LayoutLM model)"),GS.forEach(t),Hgo=i(S),bs=n(S,"LI",{});var OS=s(bs);pde=n(OS,"STRONG",{});var Vht=s(pde);Ugo=r(Vht,"layoutlmv2"),Vht.forEach(t),Jgo=r(OS," \u2014 "),cN=n(OS,"A",{href:!0});var Xht=s(cN);Ygo=r(Xht,"LayoutLMv2Tokenizer"),Xht.forEach(t),Kgo=r(OS," or "),fN=n(OS,"A",{href:!0});var zht=s(fN);Zgo=r(zht,"LayoutLMv2TokenizerFast"),zht.forEach(t),eho=r(OS," (LayoutLMv2 model)"),OS.forEach(t),oho=i(S),vs=n(S,"LI",{});var VS=s(vs);_de=n(VS,"STRONG",{});var Wht=s(_de);rho=r(Wht,"layoutlmv3"),Wht.forEach(t),tho=r(VS," \u2014 "),mN=n(VS,"A",{href:!0});var Qht=s(mN);aho=r(Qht,"LayoutLMv3Tokenizer"),Qht.forEach(t),nho=r(VS," or "),gN=n(VS,"A",{href:!0});var Hht=s(gN);sho=r(Hht,"LayoutLMv3TokenizerFast"),Hht.forEach(t),lho=r(VS," (LayoutLMv3 model)"),VS.forEach(t),iho=i(S),Fs=n(S,"LI",{});var XS=s(Fs);ude=n(XS,"STRONG",{});var Uht=s(ude);dho=r(Uht,"layoutxlm"),Uht.forEach(t),cho=r(XS," \u2014 "),hN=n(XS,"A",{href:!0});var Jht=s(hN);fho=r(Jht,"LayoutXLMTokenizer"),Jht.forEach(t),mho=r(XS," or "),pN=n(XS,"A",{href:!0});var Yht=s(pN);gho=r(Yht,"LayoutXLMTokenizerFast"),Yht.forEach(t),hho=r(XS," (LayoutXLM model)"),XS.forEach(t),pho=i(S),Ts=n(S,"LI",{});var zS=s(Ts);bde=n(zS,"STRONG",{});var Kht=s(bde);_ho=r(Kht,"led"),Kht.forEach(t),uho=r(zS," \u2014 "),_N=n(zS,"A",{href:!0});var Zht=s(_N);bho=r(Zht,"LEDTokenizer"),Zht.forEach(t),vho=r(zS," or "),uN=n(zS,"A",{href:!0});var ept=s(uN);Fho=r(ept,"LEDTokenizerFast"),ept.forEach(t),Tho=r(zS," (LED model)"),zS.forEach(t),Mho=i(S),Ms=n(S,"LI",{});var WS=s(Ms);vde=n(WS,"STRONG",{});var opt=s(vde);Eho=r(opt,"longformer"),opt.forEach(t),Cho=r(WS," \u2014 "),bN=n(WS,"A",{href:!0});var rpt=s(bN);who=r(rpt,"LongformerTokenizer"),rpt.forEach(t),Aho=r(WS," or "),vN=n(WS,"A",{href:!0});var tpt=s(vN);Lho=r(tpt,"LongformerTokenizerFast"),tpt.forEach(t),yho=r(WS," (Longformer model)"),WS.forEach(t),xho=i(S),Es=n(S,"LI",{});var QS=s(Es);Fde=n(QS,"STRONG",{});var apt=s(Fde);$ho=r(apt,"longt5"),apt.forEach(t),kho=r(QS," \u2014 "),FN=n(QS,"A",{href:!0});var npt=s(FN);Sho=r(npt,"T5Tokenizer"),npt.forEach(t),Rho=r(QS," or "),TN=n(QS,"A",{href:!0});var spt=s(TN);Pho=r(spt,"T5TokenizerFast"),spt.forEach(t),Bho=r(QS," (LongT5 model)"),QS.forEach(t),Iho=i(S),Lh=n(S,"LI",{});var Oxe=s(Lh);Tde=n(Oxe,"STRONG",{});var lpt=s(Tde);Nho=r(lpt,"luke"),lpt.forEach(t),qho=r(Oxe," \u2014 "),MN=n(Oxe,"A",{href:!0});var ipt=s(MN);jho=r(ipt,"LukeTokenizer"),ipt.forEach(t),Dho=r(Oxe," (LUKE model)"),Oxe.forEach(t),Gho=i(S),Cs=n(S,"LI",{});var HS=s(Cs);Mde=n(HS,"STRONG",{});var dpt=s(Mde);Oho=r(dpt,"lxmert"),dpt.forEach(t),Vho=r(HS," \u2014 "),EN=n(HS,"A",{href:!0});var cpt=s(EN);Xho=r(cpt,"LxmertTokenizer"),cpt.forEach(t),zho=r(HS," or "),CN=n(HS,"A",{href:!0});var fpt=s(CN);Who=r(fpt,"LxmertTokenizerFast"),fpt.forEach(t),Qho=r(HS," (LXMERT model)"),HS.forEach(t),Hho=i(S),yh=n(S,"LI",{});var Vxe=s(yh);Ede=n(Vxe,"STRONG",{});var mpt=s(Ede);Uho=r(mpt,"m2m_100"),mpt.forEach(t),Jho=r(Vxe," \u2014 "),wN=n(Vxe,"A",{href:!0});var gpt=s(wN);Yho=r(gpt,"M2M100Tokenizer"),gpt.forEach(t),Kho=r(Vxe," (M2M100 model)"),Vxe.forEach(t),Zho=i(S),xh=n(S,"LI",{});var Xxe=s(xh);Cde=n(Xxe,"STRONG",{});var hpt=s(Cde);epo=r(hpt,"marian"),hpt.forEach(t),opo=r(Xxe," \u2014 "),AN=n(Xxe,"A",{href:!0});var ppt=s(AN);rpo=r(ppt,"MarianTokenizer"),ppt.forEach(t),tpo=r(Xxe," (Marian model)"),Xxe.forEach(t),apo=i(S),ws=n(S,"LI",{});var US=s(ws);wde=n(US,"STRONG",{});var _pt=s(wde);npo=r(_pt,"mbart"),_pt.forEach(t),spo=r(US," \u2014 "),LN=n(US,"A",{href:!0});var upt=s(LN);lpo=r(upt,"MBartTokenizer"),upt.forEach(t),ipo=r(US," or "),yN=n(US,"A",{href:!0});var bpt=s(yN);dpo=r(bpt,"MBartTokenizerFast"),bpt.forEach(t),cpo=r(US," (mBART model)"),US.forEach(t),fpo=i(S),As=n(S,"LI",{});var JS=s(As);Ade=n(JS,"STRONG",{});var vpt=s(Ade);mpo=r(vpt,"mbart50"),vpt.forEach(t),gpo=r(JS," \u2014 "),xN=n(JS,"A",{href:!0});var Fpt=s(xN);hpo=r(Fpt,"MBart50Tokenizer"),Fpt.forEach(t),ppo=r(JS," or "),$N=n(JS,"A",{href:!0});var Tpt=s($N);_po=r(Tpt,"MBart50TokenizerFast"),Tpt.forEach(t),upo=r(JS," (mBART-50 model)"),JS.forEach(t),bpo=i(S),Ls=n(S,"LI",{});var YS=s(Ls);Lde=n(YS,"STRONG",{});var Mpt=s(Lde);vpo=r(Mpt,"megatron-bert"),Mpt.forEach(t),Fpo=r(YS," \u2014 "),kN=n(YS,"A",{href:!0});var Ept=s(kN);Tpo=r(Ept,"BertTokenizer"),Ept.forEach(t),Mpo=r(YS," or "),SN=n(YS,"A",{href:!0});var Cpt=s(SN);Epo=r(Cpt,"BertTokenizerFast"),Cpt.forEach(t),Cpo=r(YS," (Megatron-BERT model)"),YS.forEach(t),wpo=i(S),$h=n(S,"LI",{});var zxe=s($h);yde=n(zxe,"STRONG",{});var wpt=s(yde);Apo=r(wpt,"mluke"),wpt.forEach(t),Lpo=r(zxe," \u2014 "),RN=n(zxe,"A",{href:!0});var Apt=s(RN);ypo=r(Apt,"MLukeTokenizer"),Apt.forEach(t),xpo=r(zxe," (mLUKE model)"),zxe.forEach(t),$po=i(S),ys=n(S,"LI",{});var KS=s(ys);xde=n(KS,"STRONG",{});var Lpt=s(xde);kpo=r(Lpt,"mobilebert"),Lpt.forEach(t),Spo=r(KS," \u2014 "),PN=n(KS,"A",{href:!0});var ypt=s(PN);Rpo=r(ypt,"MobileBertTokenizer"),ypt.forEach(t),Ppo=r(KS," or "),BN=n(KS,"A",{href:!0});var xpt=s(BN);Bpo=r(xpt,"MobileBertTokenizerFast"),xpt.forEach(t),Ipo=r(KS," (MobileBERT model)"),KS.forEach(t),Npo=i(S),xs=n(S,"LI",{});var ZS=s(xs);$de=n(ZS,"STRONG",{});var $pt=s($de);qpo=r($pt,"mpnet"),$pt.forEach(t),jpo=r(ZS," \u2014 "),IN=n(ZS,"A",{href:!0});var kpt=s(IN);Dpo=r(kpt,"MPNetTokenizer"),kpt.forEach(t),Gpo=r(ZS," or "),NN=n(ZS,"A",{href:!0});var Spt=s(NN);Opo=r(Spt,"MPNetTokenizerFast"),Spt.forEach(t),Vpo=r(ZS," (MPNet model)"),ZS.forEach(t),Xpo=i(S),$s=n(S,"LI",{});var eR=s($s);kde=n(eR,"STRONG",{});var Rpt=s(kde);zpo=r(Rpt,"mt5"),Rpt.forEach(t),Wpo=r(eR," \u2014 "),qN=n(eR,"A",{href:!0});var Ppt=s(qN);Qpo=r(Ppt,"MT5Tokenizer"),Ppt.forEach(t),Hpo=r(eR," or "),jN=n(eR,"A",{href:!0});var Bpt=s(jN);Upo=r(Bpt,"MT5TokenizerFast"),Bpt.forEach(t),Jpo=r(eR," (MT5 model)"),eR.forEach(t),Ypo=i(S),ks=n(S,"LI",{});var oR=s(ks);Sde=n(oR,"STRONG",{});var Ipt=s(Sde);Kpo=r(Ipt,"mvp"),Ipt.forEach(t),Zpo=r(oR," \u2014 "),DN=n(oR,"A",{href:!0});var Npt=s(DN);e_o=r(Npt,"MvpTokenizer"),Npt.forEach(t),o_o=r(oR," or "),GN=n(oR,"A",{href:!0});var qpt=s(GN);r_o=r(qpt,"MvpTokenizerFast"),qpt.forEach(t),t_o=r(oR," (MVP model)"),oR.forEach(t),a_o=i(S),Ss=n(S,"LI",{});var rR=s(Ss);Rde=n(rR,"STRONG",{});var jpt=s(Rde);n_o=r(jpt,"nezha"),jpt.forEach(t),s_o=r(rR," \u2014 "),ON=n(rR,"A",{href:!0});var Dpt=s(ON);l_o=r(Dpt,"BertTokenizer"),Dpt.forEach(t),i_o=r(rR," or "),VN=n(rR,"A",{href:!0});var Gpt=s(VN);d_o=r(Gpt,"BertTokenizerFast"),Gpt.forEach(t),c_o=r(rR," (Nezha model)"),rR.forEach(t),f_o=i(S),Rs=n(S,"LI",{});var tR=s(Rs);Pde=n(tR,"STRONG",{});var Opt=s(Pde);m_o=r(Opt,"nllb"),Opt.forEach(t),g_o=r(tR," \u2014 "),XN=n(tR,"A",{href:!0});var Vpt=s(XN);h_o=r(Vpt,"NllbTokenizer"),Vpt.forEach(t),p_o=r(tR," or "),zN=n(tR,"A",{href:!0});var Xpt=s(zN);__o=r(Xpt,"NllbTokenizerFast"),Xpt.forEach(t),u_o=r(tR," (NLLB model)"),tR.forEach(t),b_o=i(S),Ps=n(S,"LI",{});var aR=s(Ps);Bde=n(aR,"STRONG",{});var zpt=s(Bde);v_o=r(zpt,"nystromformer"),zpt.forEach(t),F_o=r(aR," \u2014 "),WN=n(aR,"A",{href:!0});var Wpt=s(WN);T_o=r(Wpt,"AlbertTokenizer"),Wpt.forEach(t),M_o=r(aR," or "),QN=n(aR,"A",{href:!0});var Qpt=s(QN);E_o=r(Qpt,"AlbertTokenizerFast"),Qpt.forEach(t),C_o=r(aR," (Nystr\xF6mformer model)"),aR.forEach(t),w_o=i(S),Bs=n(S,"LI",{});var nR=s(Bs);Ide=n(nR,"STRONG",{});var Hpt=s(Ide);A_o=r(Hpt,"openai-gpt"),Hpt.forEach(t),L_o=r(nR," \u2014 "),HN=n(nR,"A",{href:!0});var Upt=s(HN);y_o=r(Upt,"OpenAIGPTTokenizer"),Upt.forEach(t),x_o=r(nR," or "),UN=n(nR,"A",{href:!0});var Jpt=s(UN);$_o=r(Jpt,"OpenAIGPTTokenizerFast"),Jpt.forEach(t),k_o=r(nR," (OpenAI GPT model)"),nR.forEach(t),S_o=i(S),kh=n(S,"LI",{});var Wxe=s(kh);Nde=n(Wxe,"STRONG",{});var Ypt=s(Nde);R_o=r(Ypt,"opt"),Ypt.forEach(t),P_o=r(Wxe," \u2014 "),JN=n(Wxe,"A",{href:!0});var Kpt=s(JN);B_o=r(Kpt,"GPT2Tokenizer"),Kpt.forEach(t),I_o=r(Wxe," (OPT model)"),Wxe.forEach(t),N_o=i(S),Is=n(S,"LI",{});var sR=s(Is);qde=n(sR,"STRONG",{});var Zpt=s(qde);q_o=r(Zpt,"owlvit"),Zpt.forEach(t),j_o=r(sR," \u2014 "),YN=n(sR,"A",{href:!0});var e_t=s(YN);D_o=r(e_t,"CLIPTokenizer"),e_t.forEach(t),G_o=r(sR," or "),KN=n(sR,"A",{href:!0});var o_t=s(KN);O_o=r(o_t,"CLIPTokenizerFast"),o_t.forEach(t),V_o=r(sR," (OWL-ViT model)"),sR.forEach(t),X_o=i(S),Ns=n(S,"LI",{});var lR=s(Ns);jde=n(lR,"STRONG",{});var r_t=s(jde);z_o=r(r_t,"pegasus"),r_t.forEach(t),W_o=r(lR," \u2014 "),ZN=n(lR,"A",{href:!0});var t_t=s(ZN);Q_o=r(t_t,"PegasusTokenizer"),t_t.forEach(t),H_o=r(lR," or "),eq=n(lR,"A",{href:!0});var a_t=s(eq);U_o=r(a_t,"PegasusTokenizerFast"),a_t.forEach(t),J_o=r(lR," (Pegasus model)"),lR.forEach(t),Y_o=i(S),Sh=n(S,"LI",{});var Qxe=s(Sh);Dde=n(Qxe,"STRONG",{});var n_t=s(Dde);K_o=r(n_t,"perceiver"),n_t.forEach(t),Z_o=r(Qxe," \u2014 "),oq=n(Qxe,"A",{href:!0});var s_t=s(oq);euo=r(s_t,"PerceiverTokenizer"),s_t.forEach(t),ouo=r(Qxe," (Perceiver model)"),Qxe.forEach(t),ruo=i(S),Rh=n(S,"LI",{});var Hxe=s(Rh);Gde=n(Hxe,"STRONG",{});var l_t=s(Gde);tuo=r(l_t,"phobert"),l_t.forEach(t),auo=r(Hxe," \u2014 "),rq=n(Hxe,"A",{href:!0});var i_t=s(rq);nuo=r(i_t,"PhobertTokenizer"),i_t.forEach(t),suo=r(Hxe," (PhoBERT model)"),Hxe.forEach(t),luo=i(S),Ph=n(S,"LI",{});var Uxe=s(Ph);Ode=n(Uxe,"STRONG",{});var d_t=s(Ode);iuo=r(d_t,"plbart"),d_t.forEach(t),duo=r(Uxe," \u2014 "),tq=n(Uxe,"A",{href:!0});var c_t=s(tq);cuo=r(c_t,"PLBartTokenizer"),c_t.forEach(t),fuo=r(Uxe," (PLBart model)"),Uxe.forEach(t),muo=i(S),Bh=n(S,"LI",{});var Jxe=s(Bh);Vde=n(Jxe,"STRONG",{});var f_t=s(Vde);guo=r(f_t,"prophetnet"),f_t.forEach(t),huo=r(Jxe," \u2014 "),aq=n(Jxe,"A",{href:!0});var m_t=s(aq);puo=r(m_t,"ProphetNetTokenizer"),m_t.forEach(t),_uo=r(Jxe," (ProphetNet model)"),Jxe.forEach(t),uuo=i(S),qs=n(S,"LI",{});var iR=s(qs);Xde=n(iR,"STRONG",{});var g_t=s(Xde);buo=r(g_t,"qdqbert"),g_t.forEach(t),vuo=r(iR," \u2014 "),nq=n(iR,"A",{href:!0});var h_t=s(nq);Fuo=r(h_t,"BertTokenizer"),h_t.forEach(t),Tuo=r(iR," or "),sq=n(iR,"A",{href:!0});var p_t=s(sq);Muo=r(p_t,"BertTokenizerFast"),p_t.forEach(t),Euo=r(iR," (QDQBert model)"),iR.forEach(t),Cuo=i(S),Ih=n(S,"LI",{});var Yxe=s(Ih);zde=n(Yxe,"STRONG",{});var __t=s(zde);wuo=r(__t,"rag"),__t.forEach(t),Auo=r(Yxe," \u2014 "),lq=n(Yxe,"A",{href:!0});var u_t=s(lq);Luo=r(u_t,"RagTokenizer"),u_t.forEach(t),yuo=r(Yxe," (RAG model)"),Yxe.forEach(t),xuo=i(S),js=n(S,"LI",{});var dR=s(js);Wde=n(dR,"STRONG",{});var b_t=s(Wde);$uo=r(b_t,"realm"),b_t.forEach(t),kuo=r(dR," \u2014 "),iq=n(dR,"A",{href:!0});var v_t=s(iq);Suo=r(v_t,"RealmTokenizer"),v_t.forEach(t),Ruo=r(dR," or "),dq=n(dR,"A",{href:!0});var F_t=s(dq);Puo=r(F_t,"RealmTokenizerFast"),F_t.forEach(t),Buo=r(dR," (REALM model)"),dR.forEach(t),Iuo=i(S),Ds=n(S,"LI",{});var cR=s(Ds);Qde=n(cR,"STRONG",{});var T_t=s(Qde);Nuo=r(T_t,"reformer"),T_t.forEach(t),quo=r(cR," \u2014 "),cq=n(cR,"A",{href:!0});var M_t=s(cq);juo=r(M_t,"ReformerTokenizer"),M_t.forEach(t),Duo=r(cR," or "),fq=n(cR,"A",{href:!0});var E_t=s(fq);Guo=r(E_t,"ReformerTokenizerFast"),E_t.forEach(t),Ouo=r(cR," (Reformer model)"),cR.forEach(t),Vuo=i(S),Gs=n(S,"LI",{});var fR=s(Gs);Hde=n(fR,"STRONG",{});var C_t=s(Hde);Xuo=r(C_t,"rembert"),C_t.forEach(t),zuo=r(fR," \u2014 "),mq=n(fR,"A",{href:!0});var w_t=s(mq);Wuo=r(w_t,"RemBertTokenizer"),w_t.forEach(t),Quo=r(fR," or "),gq=n(fR,"A",{href:!0});var A_t=s(gq);Huo=r(A_t,"RemBertTokenizerFast"),A_t.forEach(t),Uuo=r(fR," (RemBERT model)"),fR.forEach(t),Juo=i(S),Os=n(S,"LI",{});var mR=s(Os);Ude=n(mR,"STRONG",{});var L_t=s(Ude);Yuo=r(L_t,"retribert"),L_t.forEach(t),Kuo=r(mR," \u2014 "),hq=n(mR,"A",{href:!0});var y_t=s(hq);Zuo=r(y_t,"RetriBertTokenizer"),y_t.forEach(t),e2o=r(mR," or "),pq=n(mR,"A",{href:!0});var x_t=s(pq);o2o=r(x_t,"RetriBertTokenizerFast"),x_t.forEach(t),r2o=r(mR," (RetriBERT model)"),mR.forEach(t),t2o=i(S),Vs=n(S,"LI",{});var gR=s(Vs);Jde=n(gR,"STRONG",{});var $_t=s(Jde);a2o=r($_t,"roberta"),$_t.forEach(t),n2o=r(gR," \u2014 "),_q=n(gR,"A",{href:!0});var k_t=s(_q);s2o=r(k_t,"RobertaTokenizer"),k_t.forEach(t),l2o=r(gR," or "),uq=n(gR,"A",{href:!0});var S_t=s(uq);i2o=r(S_t,"RobertaTokenizerFast"),S_t.forEach(t),d2o=r(gR," (RoBERTa model)"),gR.forEach(t),c2o=i(S),Xs=n(S,"LI",{});var hR=s(Xs);Yde=n(hR,"STRONG",{});var R_t=s(Yde);f2o=r(R_t,"roformer"),R_t.forEach(t),m2o=r(hR," \u2014 "),bq=n(hR,"A",{href:!0});var P_t=s(bq);g2o=r(P_t,"RoFormerTokenizer"),P_t.forEach(t),h2o=r(hR," or "),vq=n(hR,"A",{href:!0});var B_t=s(vq);p2o=r(B_t,"RoFormerTokenizerFast"),B_t.forEach(t),_2o=r(hR," (RoFormer model)"),hR.forEach(t),u2o=i(S),Nh=n(S,"LI",{});var Kxe=s(Nh);Kde=n(Kxe,"STRONG",{});var I_t=s(Kde);b2o=r(I_t,"speech_to_text"),I_t.forEach(t),v2o=r(Kxe," \u2014 "),Fq=n(Kxe,"A",{href:!0});var N_t=s(Fq);F2o=r(N_t,"Speech2TextTokenizer"),N_t.forEach(t),T2o=r(Kxe," (Speech2Text model)"),Kxe.forEach(t),M2o=i(S),qh=n(S,"LI",{});var Zxe=s(qh);Zde=n(Zxe,"STRONG",{});var q_t=s(Zde);E2o=r(q_t,"speech_to_text_2"),q_t.forEach(t),C2o=r(Zxe," \u2014 "),Tq=n(Zxe,"A",{href:!0});var j_t=s(Tq);w2o=r(j_t,"Speech2Text2Tokenizer"),j_t.forEach(t),A2o=r(Zxe," (Speech2Text2 model)"),Zxe.forEach(t),L2o=i(S),zs=n(S,"LI",{});var pR=s(zs);ece=n(pR,"STRONG",{});var D_t=s(ece);y2o=r(D_t,"splinter"),D_t.forEach(t),x2o=r(pR," \u2014 "),Mq=n(pR,"A",{href:!0});var G_t=s(Mq);$2o=r(G_t,"SplinterTokenizer"),G_t.forEach(t),k2o=r(pR," or "),Eq=n(pR,"A",{href:!0});var O_t=s(Eq);S2o=r(O_t,"SplinterTokenizerFast"),O_t.forEach(t),R2o=r(pR," (Splinter model)"),pR.forEach(t),P2o=i(S),Ws=n(S,"LI",{});var _R=s(Ws);oce=n(_R,"STRONG",{});var V_t=s(oce);B2o=r(V_t,"squeezebert"),V_t.forEach(t),I2o=r(_R," \u2014 "),Cq=n(_R,"A",{href:!0});var X_t=s(Cq);N2o=r(X_t,"SqueezeBertTokenizer"),X_t.forEach(t),q2o=r(_R," or "),wq=n(_R,"A",{href:!0});var z_t=s(wq);j2o=r(z_t,"SqueezeBertTokenizerFast"),z_t.forEach(t),D2o=r(_R," (SqueezeBERT model)"),_R.forEach(t),G2o=i(S),Qs=n(S,"LI",{});var uR=s(Qs);rce=n(uR,"STRONG",{});var W_t=s(rce);O2o=r(W_t,"t5"),W_t.forEach(t),V2o=r(uR," \u2014 "),Aq=n(uR,"A",{href:!0});var Q_t=s(Aq);X2o=r(Q_t,"T5Tokenizer"),Q_t.forEach(t),z2o=r(uR," or "),Lq=n(uR,"A",{href:!0});var H_t=s(Lq);W2o=r(H_t,"T5TokenizerFast"),H_t.forEach(t),Q2o=r(uR," (T5 model)"),uR.forEach(t),H2o=i(S),jh=n(S,"LI",{});var e$e=s(jh);tce=n(e$e,"STRONG",{});var U_t=s(tce);U2o=r(U_t,"tapas"),U_t.forEach(t),J2o=r(e$e," \u2014 "),yq=n(e$e,"A",{href:!0});var J_t=s(yq);Y2o=r(J_t,"TapasTokenizer"),J_t.forEach(t),K2o=r(e$e," (TAPAS model)"),e$e.forEach(t),Z2o=i(S),Dh=n(S,"LI",{});var o$e=s(Dh);ace=n(o$e,"STRONG",{});var Y_t=s(ace);e1o=r(Y_t,"tapex"),Y_t.forEach(t),o1o=r(o$e," \u2014 "),xq=n(o$e,"A",{href:!0});var K_t=s(xq);r1o=r(K_t,"TapexTokenizer"),K_t.forEach(t),t1o=r(o$e," (TAPEX model)"),o$e.forEach(t),a1o=i(S),Gh=n(S,"LI",{});var r$e=s(Gh);nce=n(r$e,"STRONG",{});var Z_t=s(nce);n1o=r(Z_t,"transfo-xl"),Z_t.forEach(t),s1o=r(r$e," \u2014 "),$q=n(r$e,"A",{href:!0});var eut=s($q);l1o=r(eut,"TransfoXLTokenizer"),eut.forEach(t),i1o=r(r$e," (Transformer-XL model)"),r$e.forEach(t),d1o=i(S),Hs=n(S,"LI",{});var bR=s(Hs);sce=n(bR,"STRONG",{});var out=s(sce);c1o=r(out,"vilt"),out.forEach(t),f1o=r(bR," \u2014 "),kq=n(bR,"A",{href:!0});var rut=s(kq);m1o=r(rut,"BertTokenizer"),rut.forEach(t),g1o=r(bR," or "),Sq=n(bR,"A",{href:!0});var tut=s(Sq);h1o=r(tut,"BertTokenizerFast"),tut.forEach(t),p1o=r(bR," (ViLT model)"),bR.forEach(t),_1o=i(S),Us=n(S,"LI",{});var vR=s(Us);lce=n(vR,"STRONG",{});var aut=s(lce);u1o=r(aut,"visual_bert"),aut.forEach(t),b1o=r(vR," \u2014 "),Rq=n(vR,"A",{href:!0});var nut=s(Rq);v1o=r(nut,"BertTokenizer"),nut.forEach(t),F1o=r(vR," or "),Pq=n(vR,"A",{href:!0});var sut=s(Pq);T1o=r(sut,"BertTokenizerFast"),sut.forEach(t),M1o=r(vR," (VisualBERT model)"),vR.forEach(t),E1o=i(S),Oh=n(S,"LI",{});var t$e=s(Oh);ice=n(t$e,"STRONG",{});var lut=s(ice);C1o=r(lut,"wav2vec2"),lut.forEach(t),w1o=r(t$e," \u2014 "),Bq=n(t$e,"A",{href:!0});var iut=s(Bq);A1o=r(iut,"Wav2Vec2CTCTokenizer"),iut.forEach(t),L1o=r(t$e," (Wav2Vec2 model)"),t$e.forEach(t),y1o=i(S),Vh=n(S,"LI",{});var a$e=s(Vh);dce=n(a$e,"STRONG",{});var dut=s(dce);x1o=r(dut,"wav2vec2-conformer"),dut.forEach(t),$1o=r(a$e," \u2014 "),Iq=n(a$e,"A",{href:!0});var cut=s(Iq);k1o=r(cut,"Wav2Vec2CTCTokenizer"),cut.forEach(t),S1o=r(a$e," (Wav2Vec2-Conformer model)"),a$e.forEach(t),R1o=i(S),Xh=n(S,"LI",{});var n$e=s(Xh);cce=n(n$e,"STRONG",{});var fut=s(cce);P1o=r(fut,"wav2vec2_phoneme"),fut.forEach(t),B1o=r(n$e," \u2014 "),Nq=n(n$e,"A",{href:!0});var mut=s(Nq);I1o=r(mut,"Wav2Vec2PhonemeCTCTokenizer"),mut.forEach(t),N1o=r(n$e," (Wav2Vec2Phoneme model)"),n$e.forEach(t),q1o=i(S),Js=n(S,"LI",{});var FR=s(Js);fce=n(FR,"STRONG",{});var gut=s(fce);j1o=r(gut,"xglm"),gut.forEach(t),D1o=r(FR," \u2014 "),qq=n(FR,"A",{href:!0});var hut=s(qq);G1o=r(hut,"XGLMTokenizer"),hut.forEach(t),O1o=r(FR," or "),jq=n(FR,"A",{href:!0});var put=s(jq);V1o=r(put,"XGLMTokenizerFast"),put.forEach(t),X1o=r(FR," (XGLM model)"),FR.forEach(t),z1o=i(S),zh=n(S,"LI",{});var s$e=s(zh);mce=n(s$e,"STRONG",{});var _ut=s(mce);W1o=r(_ut,"xlm"),_ut.forEach(t),Q1o=r(s$e," \u2014 "),Dq=n(s$e,"A",{href:!0});var uut=s(Dq);H1o=r(uut,"XLMTokenizer"),uut.forEach(t),U1o=r(s$e," (XLM model)"),s$e.forEach(t),J1o=i(S),Wh=n(S,"LI",{});var l$e=s(Wh);gce=n(l$e,"STRONG",{});var but=s(gce);Y1o=r(but,"xlm-prophetnet"),but.forEach(t),K1o=r(l$e," \u2014 "),Gq=n(l$e,"A",{href:!0});var vut=s(Gq);Z1o=r(vut,"XLMProphetNetTokenizer"),vut.forEach(t),ebo=r(l$e," (XLM-ProphetNet model)"),l$e.forEach(t),obo=i(S),Ys=n(S,"LI",{});var TR=s(Ys);hce=n(TR,"STRONG",{});var Fut=s(hce);rbo=r(Fut,"xlm-roberta"),Fut.forEach(t),tbo=r(TR," \u2014 "),Oq=n(TR,"A",{href:!0});var Tut=s(Oq);abo=r(Tut,"XLMRobertaTokenizer"),Tut.forEach(t),nbo=r(TR," or "),Vq=n(TR,"A",{href:!0});var Mut=s(Vq);sbo=r(Mut,"XLMRobertaTokenizerFast"),Mut.forEach(t),lbo=r(TR," (XLM-RoBERTa model)"),TR.forEach(t),ibo=i(S),Ks=n(S,"LI",{});var MR=s(Ks);pce=n(MR,"STRONG",{});var Eut=s(pce);dbo=r(Eut,"xlm-roberta-xl"),Eut.forEach(t),cbo=r(MR," \u2014 "),Xq=n(MR,"A",{href:!0});var Cut=s(Xq);fbo=r(Cut,"RobertaTokenizer"),Cut.forEach(t),mbo=r(MR," or "),zq=n(MR,"A",{href:!0});var wut=s(zq);gbo=r(wut,"RobertaTokenizerFast"),wut.forEach(t),hbo=r(MR," (XLM-RoBERTa-XL model)"),MR.forEach(t),pbo=i(S),Zs=n(S,"LI",{});var ER=s(Zs);_ce=n(ER,"STRONG",{});var Aut=s(_ce);_bo=r(Aut,"xlnet"),Aut.forEach(t),ubo=r(ER," \u2014 "),Wq=n(ER,"A",{href:!0});var Lut=s(Wq);bbo=r(Lut,"XLNetTokenizer"),Lut.forEach(t),vbo=r(ER," or "),Qq=n(ER,"A",{href:!0});var yut=s(Qq);Fbo=r(yut,"XLNetTokenizerFast"),yut.forEach(t),Tbo=r(ER," (XLNet model)"),ER.forEach(t),Mbo=i(S),el=n(S,"LI",{});var CR=s(el);uce=n(CR,"STRONG",{});var xut=s(uce);Ebo=r(xut,"yoso"),xut.forEach(t),Cbo=r(CR," \u2014 "),Hq=n(CR,"A",{href:!0});var $ut=s(Hq);wbo=r($ut,"AlbertTokenizer"),$ut.forEach(t),Abo=r(CR," or "),Uq=n(CR,"A",{href:!0});var kut=s(Uq);Lbo=r(kut,"AlbertTokenizerFast"),kut.forEach(t),ybo=r(CR," (YOSO model)"),CR.forEach(t),S.forEach(t),xbo=i(ll),T(Qh.$$.fragment,ll),ll.forEach(t),$bo=i(sl),Hh=n(sl,"DIV",{class:!0});var QHe=s(Hh);T(nL.$$.fragment,QHe),kbo=i(QHe),bce=n(QHe,"P",{});var Sut=s(bce);Sbo=r(Sut,"Register a new tokenizer in this mapping."),Sut.forEach(t),QHe.forEach(t),sl.forEach(t),XWe=i(f),Qi=n(f,"H2",{class:!0});var HHe=s(Qi);Uh=n(HHe,"A",{id:!0,class:!0,href:!0});var Rut=s(Uh);vce=n(Rut,"SPAN",{});var Put=s(vce);T(sL.$$.fragment,Put),Put.forEach(t),Rut.forEach(t),Rbo=i(HHe),Fce=n(HHe,"SPAN",{});var But=s(Fce);Pbo=r(But,"AutoFeatureExtractor"),But.forEach(t),HHe.forEach(t),zWe=i(f),$o=n(f,"DIV",{class:!0});var il=s($o);T(lL.$$.fragment,il),Bbo=i(il),iL=n(il,"P",{});var UHe=s(iL);Ibo=r(UHe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Jq=n(UHe,"A",{href:!0});var Iut=s(Jq);Nbo=r(Iut,"AutoFeatureExtractor.from_pretrained()"),Iut.forEach(t),qbo=r(UHe," class method."),UHe.forEach(t),jbo=i(il),dL=n(il,"P",{});var JHe=s(dL);Dbo=r(JHe,"This class cannot be instantiated directly using "),Tce=n(JHe,"CODE",{});var Nut=s(Tce);Gbo=r(Nut,"__init__()"),Nut.forEach(t),Obo=r(JHe," (throws an error)."),JHe.forEach(t),Vbo=i(il),Ue=n(il,"DIV",{class:!0});var ia=s(Ue);T(cL.$$.fragment,ia),Xbo=i(ia),Mce=n(ia,"P",{});var qut=s(Mce);zbo=r(qut,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qut.forEach(t),Wbo=i(ia),ja=n(ia,"P",{});var W6=s(ja);Qbo=r(W6,"The feature extractor class to instantiate is selected based on the "),Ece=n(W6,"CODE",{});var jut=s(Ece);Hbo=r(jut,"model_type"),jut.forEach(t),Ubo=r(W6,` property of the config object
(either passed as an argument or loaded from `),Cce=n(W6,"CODE",{});var Dut=s(Cce);Jbo=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Ybo=r(W6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),wce=n(W6,"CODE",{});var Gut=s(wce);Kbo=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Zbo=r(W6,":"),W6.forEach(t),evo=i(ia),H=n(ia,"UL",{});var Y=s(H);Jh=n(Y,"LI",{});var i$e=s(Jh);Ace=n(i$e,"STRONG",{});var Out=s(Ace);ovo=r(Out,"beit"),Out.forEach(t),rvo=r(i$e," \u2014 "),Yq=n(i$e,"A",{href:!0});var Vut=s(Yq);tvo=r(Vut,"BeitFeatureExtractor"),Vut.forEach(t),avo=r(i$e," (BEiT model)"),i$e.forEach(t),nvo=i(Y),Yh=n(Y,"LI",{});var d$e=s(Yh);Lce=n(d$e,"STRONG",{});var Xut=s(Lce);svo=r(Xut,"clip"),Xut.forEach(t),lvo=r(d$e," \u2014 "),Kq=n(d$e,"A",{href:!0});var zut=s(Kq);ivo=r(zut,"CLIPFeatureExtractor"),zut.forEach(t),dvo=r(d$e," (CLIP model)"),d$e.forEach(t),cvo=i(Y),Kh=n(Y,"LI",{});var c$e=s(Kh);yce=n(c$e,"STRONG",{});var Wut=s(yce);fvo=r(Wut,"convnext"),Wut.forEach(t),mvo=r(c$e," \u2014 "),Zq=n(c$e,"A",{href:!0});var Qut=s(Zq);gvo=r(Qut,"ConvNextFeatureExtractor"),Qut.forEach(t),hvo=r(c$e," (ConvNeXT model)"),c$e.forEach(t),pvo=i(Y),Zh=n(Y,"LI",{});var f$e=s(Zh);xce=n(f$e,"STRONG",{});var Hut=s(xce);_vo=r(Hut,"cvt"),Hut.forEach(t),uvo=r(f$e," \u2014 "),ej=n(f$e,"A",{href:!0});var Uut=s(ej);bvo=r(Uut,"ConvNextFeatureExtractor"),Uut.forEach(t),vvo=r(f$e," (CvT model)"),f$e.forEach(t),Fvo=i(Y),ep=n(Y,"LI",{});var m$e=s(ep);$ce=n(m$e,"STRONG",{});var Jut=s($ce);Tvo=r(Jut,"data2vec-audio"),Jut.forEach(t),Mvo=r(m$e," \u2014 "),oj=n(m$e,"A",{href:!0});var Yut=s(oj);Evo=r(Yut,"Wav2Vec2FeatureExtractor"),Yut.forEach(t),Cvo=r(m$e," (Data2VecAudio model)"),m$e.forEach(t),wvo=i(Y),op=n(Y,"LI",{});var g$e=s(op);kce=n(g$e,"STRONG",{});var Kut=s(kce);Avo=r(Kut,"data2vec-vision"),Kut.forEach(t),Lvo=r(g$e," \u2014 "),rj=n(g$e,"A",{href:!0});var Zut=s(rj);yvo=r(Zut,"BeitFeatureExtractor"),Zut.forEach(t),xvo=r(g$e," (Data2VecVision model)"),g$e.forEach(t),$vo=i(Y),rp=n(Y,"LI",{});var h$e=s(rp);Sce=n(h$e,"STRONG",{});var e2t=s(Sce);kvo=r(e2t,"deit"),e2t.forEach(t),Svo=r(h$e," \u2014 "),tj=n(h$e,"A",{href:!0});var o2t=s(tj);Rvo=r(o2t,"DeiTFeatureExtractor"),o2t.forEach(t),Pvo=r(h$e," (DeiT model)"),h$e.forEach(t),Bvo=i(Y),tp=n(Y,"LI",{});var p$e=s(tp);Rce=n(p$e,"STRONG",{});var r2t=s(Rce);Ivo=r(r2t,"detr"),r2t.forEach(t),Nvo=r(p$e," \u2014 "),aj=n(p$e,"A",{href:!0});var t2t=s(aj);qvo=r(t2t,"DetrFeatureExtractor"),t2t.forEach(t),jvo=r(p$e," (DETR model)"),p$e.forEach(t),Dvo=i(Y),ap=n(Y,"LI",{});var _$e=s(ap);Pce=n(_$e,"STRONG",{});var a2t=s(Pce);Gvo=r(a2t,"dpt"),a2t.forEach(t),Ovo=r(_$e," \u2014 "),nj=n(_$e,"A",{href:!0});var n2t=s(nj);Vvo=r(n2t,"DPTFeatureExtractor"),n2t.forEach(t),Xvo=r(_$e," (DPT model)"),_$e.forEach(t),zvo=i(Y),np=n(Y,"LI",{});var u$e=s(np);Bce=n(u$e,"STRONG",{});var s2t=s(Bce);Wvo=r(s2t,"flava"),s2t.forEach(t),Qvo=r(u$e," \u2014 "),sj=n(u$e,"A",{href:!0});var l2t=s(sj);Hvo=r(l2t,"FlavaFeatureExtractor"),l2t.forEach(t),Uvo=r(u$e," (FLAVA model)"),u$e.forEach(t),Jvo=i(Y),sp=n(Y,"LI",{});var b$e=s(sp);Ice=n(b$e,"STRONG",{});var i2t=s(Ice);Yvo=r(i2t,"glpn"),i2t.forEach(t),Kvo=r(b$e," \u2014 "),lj=n(b$e,"A",{href:!0});var d2t=s(lj);Zvo=r(d2t,"GLPNFeatureExtractor"),d2t.forEach(t),e5o=r(b$e," (GLPN model)"),b$e.forEach(t),o5o=i(Y),lp=n(Y,"LI",{});var v$e=s(lp);Nce=n(v$e,"STRONG",{});var c2t=s(Nce);r5o=r(c2t,"groupvit"),c2t.forEach(t),t5o=r(v$e," \u2014 "),ij=n(v$e,"A",{href:!0});var f2t=s(ij);a5o=r(f2t,"CLIPFeatureExtractor"),f2t.forEach(t),n5o=r(v$e," (GroupViT model)"),v$e.forEach(t),s5o=i(Y),ip=n(Y,"LI",{});var F$e=s(ip);qce=n(F$e,"STRONG",{});var m2t=s(qce);l5o=r(m2t,"hubert"),m2t.forEach(t),i5o=r(F$e," \u2014 "),dj=n(F$e,"A",{href:!0});var g2t=s(dj);d5o=r(g2t,"Wav2Vec2FeatureExtractor"),g2t.forEach(t),c5o=r(F$e," (Hubert model)"),F$e.forEach(t),f5o=i(Y),dp=n(Y,"LI",{});var T$e=s(dp);jce=n(T$e,"STRONG",{});var h2t=s(jce);m5o=r(h2t,"imagegpt"),h2t.forEach(t),g5o=r(T$e," \u2014 "),cj=n(T$e,"A",{href:!0});var p2t=s(cj);h5o=r(p2t,"ImageGPTFeatureExtractor"),p2t.forEach(t),p5o=r(T$e," (ImageGPT model)"),T$e.forEach(t),_5o=i(Y),cp=n(Y,"LI",{});var M$e=s(cp);Dce=n(M$e,"STRONG",{});var _2t=s(Dce);u5o=r(_2t,"layoutlmv2"),_2t.forEach(t),b5o=r(M$e," \u2014 "),fj=n(M$e,"A",{href:!0});var u2t=s(fj);v5o=r(u2t,"LayoutLMv2FeatureExtractor"),u2t.forEach(t),F5o=r(M$e," (LayoutLMv2 model)"),M$e.forEach(t),T5o=i(Y),fp=n(Y,"LI",{});var E$e=s(fp);Gce=n(E$e,"STRONG",{});var b2t=s(Gce);M5o=r(b2t,"layoutlmv3"),b2t.forEach(t),E5o=r(E$e," \u2014 "),mj=n(E$e,"A",{href:!0});var v2t=s(mj);C5o=r(v2t,"LayoutLMv3FeatureExtractor"),v2t.forEach(t),w5o=r(E$e," (LayoutLMv3 model)"),E$e.forEach(t),A5o=i(Y),mp=n(Y,"LI",{});var C$e=s(mp);Oce=n(C$e,"STRONG",{});var F2t=s(Oce);L5o=r(F2t,"levit"),F2t.forEach(t),y5o=r(C$e," \u2014 "),gj=n(C$e,"A",{href:!0});var T2t=s(gj);x5o=r(T2t,"LevitFeatureExtractor"),T2t.forEach(t),$5o=r(C$e," (LeViT model)"),C$e.forEach(t),k5o=i(Y),gp=n(Y,"LI",{});var w$e=s(gp);Vce=n(w$e,"STRONG",{});var M2t=s(Vce);S5o=r(M2t,"maskformer"),M2t.forEach(t),R5o=r(w$e," \u2014 "),hj=n(w$e,"A",{href:!0});var E2t=s(hj);P5o=r(E2t,"MaskFormerFeatureExtractor"),E2t.forEach(t),B5o=r(w$e," (MaskFormer model)"),w$e.forEach(t),I5o=i(Y),hp=n(Y,"LI",{});var A$e=s(hp);Xce=n(A$e,"STRONG",{});var C2t=s(Xce);N5o=r(C2t,"mctct"),C2t.forEach(t),q5o=r(A$e," \u2014 "),pj=n(A$e,"A",{href:!0});var w2t=s(pj);j5o=r(w2t,"MCTCTFeatureExtractor"),w2t.forEach(t),D5o=r(A$e," (M-CTC-T model)"),A$e.forEach(t),G5o=i(Y),pp=n(Y,"LI",{});var L$e=s(pp);zce=n(L$e,"STRONG",{});var A2t=s(zce);O5o=r(A2t,"mobilevit"),A2t.forEach(t),V5o=r(L$e," \u2014 "),_j=n(L$e,"A",{href:!0});var L2t=s(_j);X5o=r(L2t,"MobileViTFeatureExtractor"),L2t.forEach(t),z5o=r(L$e," (MobileViT model)"),L$e.forEach(t),W5o=i(Y),_p=n(Y,"LI",{});var y$e=s(_p);Wce=n(y$e,"STRONG",{});var y2t=s(Wce);Q5o=r(y2t,"owlvit"),y2t.forEach(t),H5o=r(y$e," \u2014 "),uj=n(y$e,"A",{href:!0});var x2t=s(uj);U5o=r(x2t,"OwlViTFeatureExtractor"),x2t.forEach(t),J5o=r(y$e," (OWL-ViT model)"),y$e.forEach(t),Y5o=i(Y),up=n(Y,"LI",{});var x$e=s(up);Qce=n(x$e,"STRONG",{});var $2t=s(Qce);K5o=r($2t,"perceiver"),$2t.forEach(t),Z5o=r(x$e," \u2014 "),bj=n(x$e,"A",{href:!0});var k2t=s(bj);eFo=r(k2t,"PerceiverFeatureExtractor"),k2t.forEach(t),oFo=r(x$e," (Perceiver model)"),x$e.forEach(t),rFo=i(Y),bp=n(Y,"LI",{});var $$e=s(bp);Hce=n($$e,"STRONG",{});var S2t=s(Hce);tFo=r(S2t,"poolformer"),S2t.forEach(t),aFo=r($$e," \u2014 "),vj=n($$e,"A",{href:!0});var R2t=s(vj);nFo=r(R2t,"PoolFormerFeatureExtractor"),R2t.forEach(t),sFo=r($$e," (PoolFormer model)"),$$e.forEach(t),lFo=i(Y),vp=n(Y,"LI",{});var k$e=s(vp);Uce=n(k$e,"STRONG",{});var P2t=s(Uce);iFo=r(P2t,"regnet"),P2t.forEach(t),dFo=r(k$e," \u2014 "),Fj=n(k$e,"A",{href:!0});var B2t=s(Fj);cFo=r(B2t,"ConvNextFeatureExtractor"),B2t.forEach(t),fFo=r(k$e," (RegNet model)"),k$e.forEach(t),mFo=i(Y),Fp=n(Y,"LI",{});var S$e=s(Fp);Jce=n(S$e,"STRONG",{});var I2t=s(Jce);gFo=r(I2t,"resnet"),I2t.forEach(t),hFo=r(S$e," \u2014 "),Tj=n(S$e,"A",{href:!0});var N2t=s(Tj);pFo=r(N2t,"ConvNextFeatureExtractor"),N2t.forEach(t),_Fo=r(S$e," (ResNet model)"),S$e.forEach(t),uFo=i(Y),Tp=n(Y,"LI",{});var R$e=s(Tp);Yce=n(R$e,"STRONG",{});var q2t=s(Yce);bFo=r(q2t,"segformer"),q2t.forEach(t),vFo=r(R$e," \u2014 "),Mj=n(R$e,"A",{href:!0});var j2t=s(Mj);FFo=r(j2t,"SegformerFeatureExtractor"),j2t.forEach(t),TFo=r(R$e," (SegFormer model)"),R$e.forEach(t),MFo=i(Y),Mp=n(Y,"LI",{});var P$e=s(Mp);Kce=n(P$e,"STRONG",{});var D2t=s(Kce);EFo=r(D2t,"speech_to_text"),D2t.forEach(t),CFo=r(P$e," \u2014 "),Ej=n(P$e,"A",{href:!0});var G2t=s(Ej);wFo=r(G2t,"Speech2TextFeatureExtractor"),G2t.forEach(t),AFo=r(P$e," (Speech2Text model)"),P$e.forEach(t),LFo=i(Y),Ep=n(Y,"LI",{});var B$e=s(Ep);Zce=n(B$e,"STRONG",{});var O2t=s(Zce);yFo=r(O2t,"swin"),O2t.forEach(t),xFo=r(B$e," \u2014 "),Cj=n(B$e,"A",{href:!0});var V2t=s(Cj);$Fo=r(V2t,"ViTFeatureExtractor"),V2t.forEach(t),kFo=r(B$e," (Swin Transformer model)"),B$e.forEach(t),SFo=i(Y),Cp=n(Y,"LI",{});var I$e=s(Cp);efe=n(I$e,"STRONG",{});var X2t=s(efe);RFo=r(X2t,"swinv2"),X2t.forEach(t),PFo=r(I$e," \u2014 "),wj=n(I$e,"A",{href:!0});var z2t=s(wj);BFo=r(z2t,"ViTFeatureExtractor"),z2t.forEach(t),IFo=r(I$e," (Swin Transformer V2 model)"),I$e.forEach(t),NFo=i(Y),wp=n(Y,"LI",{});var N$e=s(wp);ofe=n(N$e,"STRONG",{});var W2t=s(ofe);qFo=r(W2t,"van"),W2t.forEach(t),jFo=r(N$e," \u2014 "),Aj=n(N$e,"A",{href:!0});var Q2t=s(Aj);DFo=r(Q2t,"ConvNextFeatureExtractor"),Q2t.forEach(t),GFo=r(N$e," (VAN model)"),N$e.forEach(t),OFo=i(Y),Ap=n(Y,"LI",{});var q$e=s(Ap);rfe=n(q$e,"STRONG",{});var H2t=s(rfe);VFo=r(H2t,"videomae"),H2t.forEach(t),XFo=r(q$e," \u2014 "),Lj=n(q$e,"A",{href:!0});var U2t=s(Lj);zFo=r(U2t,"ViTFeatureExtractor"),U2t.forEach(t),WFo=r(q$e," (VideoMAE model)"),q$e.forEach(t),QFo=i(Y),Lp=n(Y,"LI",{});var j$e=s(Lp);tfe=n(j$e,"STRONG",{});var J2t=s(tfe);HFo=r(J2t,"vilt"),J2t.forEach(t),UFo=r(j$e," \u2014 "),yj=n(j$e,"A",{href:!0});var Y2t=s(yj);JFo=r(Y2t,"ViltFeatureExtractor"),Y2t.forEach(t),YFo=r(j$e," (ViLT model)"),j$e.forEach(t),KFo=i(Y),yp=n(Y,"LI",{});var D$e=s(yp);afe=n(D$e,"STRONG",{});var K2t=s(afe);ZFo=r(K2t,"vit"),K2t.forEach(t),eTo=r(D$e," \u2014 "),xj=n(D$e,"A",{href:!0});var Z2t=s(xj);oTo=r(Z2t,"ViTFeatureExtractor"),Z2t.forEach(t),rTo=r(D$e," (ViT model)"),D$e.forEach(t),tTo=i(Y),xp=n(Y,"LI",{});var G$e=s(xp);nfe=n(G$e,"STRONG",{});var e1t=s(nfe);aTo=r(e1t,"vit_mae"),e1t.forEach(t),nTo=r(G$e," \u2014 "),$j=n(G$e,"A",{href:!0});var o1t=s($j);sTo=r(o1t,"ViTFeatureExtractor"),o1t.forEach(t),lTo=r(G$e," (ViTMAE model)"),G$e.forEach(t),iTo=i(Y),$p=n(Y,"LI",{});var O$e=s($p);sfe=n(O$e,"STRONG",{});var r1t=s(sfe);dTo=r(r1t,"wav2vec2"),r1t.forEach(t),cTo=r(O$e," \u2014 "),kj=n(O$e,"A",{href:!0});var t1t=s(kj);fTo=r(t1t,"Wav2Vec2FeatureExtractor"),t1t.forEach(t),mTo=r(O$e," (Wav2Vec2 model)"),O$e.forEach(t),gTo=i(Y),kp=n(Y,"LI",{});var V$e=s(kp);lfe=n(V$e,"STRONG",{});var a1t=s(lfe);hTo=r(a1t,"wav2vec2-conformer"),a1t.forEach(t),pTo=r(V$e," \u2014 "),Sj=n(V$e,"A",{href:!0});var n1t=s(Sj);_To=r(n1t,"Wav2Vec2FeatureExtractor"),n1t.forEach(t),uTo=r(V$e," (Wav2Vec2-Conformer model)"),V$e.forEach(t),bTo=i(Y),Sp=n(Y,"LI",{});var X$e=s(Sp);ife=n(X$e,"STRONG",{});var s1t=s(ife);vTo=r(s1t,"yolos"),s1t.forEach(t),FTo=r(X$e," \u2014 "),Rj=n(X$e,"A",{href:!0});var l1t=s(Rj);TTo=r(l1t,"YolosFeatureExtractor"),l1t.forEach(t),MTo=r(X$e," (YOLOS model)"),X$e.forEach(t),Y.forEach(t),ETo=i(ia),T(Rp.$$.fragment,ia),CTo=i(ia),T(Pp.$$.fragment,ia),ia.forEach(t),wTo=i(il),Bp=n(il,"DIV",{class:!0});var YHe=s(Bp);T(fL.$$.fragment,YHe),ATo=i(YHe),dfe=n(YHe,"P",{});var i1t=s(dfe);LTo=r(i1t,"Register a new feature extractor for this class."),i1t.forEach(t),YHe.forEach(t),il.forEach(t),WWe=i(f),Hi=n(f,"H2",{class:!0});var KHe=s(Hi);Ip=n(KHe,"A",{id:!0,class:!0,href:!0});var d1t=s(Ip);cfe=n(d1t,"SPAN",{});var c1t=s(cfe);T(mL.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),yTo=i(KHe),ffe=n(KHe,"SPAN",{});var f1t=s(ffe);xTo=r(f1t,"AutoProcessor"),f1t.forEach(t),KHe.forEach(t),QWe=i(f),ko=n(f,"DIV",{class:!0});var dl=s(ko);T(gL.$$.fragment,dl),$To=i(dl),hL=n(dl,"P",{});var ZHe=s(hL);kTo=r(ZHe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Pj=n(ZHe,"A",{href:!0});var m1t=s(Pj);STo=r(m1t,"AutoProcessor.from_pretrained()"),m1t.forEach(t),RTo=r(ZHe," class method."),ZHe.forEach(t),PTo=i(dl),pL=n(dl,"P",{});var eUe=s(pL);BTo=r(eUe,"This class cannot be instantiated directly using "),mfe=n(eUe,"CODE",{});var g1t=s(mfe);ITo=r(g1t,"__init__()"),g1t.forEach(t),NTo=r(eUe," (throws an error)."),eUe.forEach(t),qTo=i(dl),Je=n(dl,"DIV",{class:!0});var da=s(Je);T(_L.$$.fragment,da),jTo=i(da),gfe=n(da,"P",{});var h1t=s(gfe);DTo=r(h1t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),h1t.forEach(t),GTo=i(da),Ui=n(da,"P",{});var tae=s(Ui);OTo=r(tae,"The processor class to instantiate is selected based on the "),hfe=n(tae,"CODE",{});var p1t=s(hfe);VTo=r(p1t,"model_type"),p1t.forEach(t),XTo=r(tae,` property of the config object (either
passed as an argument or loaded from `),pfe=n(tae,"CODE",{});var _1t=s(pfe);zTo=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),WTo=r(tae," if possible):"),tae.forEach(t),QTo=i(da),fe=n(da,"UL",{});var _e=s(fe);Np=n(_e,"LI",{});var z$e=s(Np);_fe=n(z$e,"STRONG",{});var u1t=s(_fe);HTo=r(u1t,"clip"),u1t.forEach(t),UTo=r(z$e," \u2014 "),Bj=n(z$e,"A",{href:!0});var b1t=s(Bj);JTo=r(b1t,"CLIPProcessor"),b1t.forEach(t),YTo=r(z$e," (CLIP model)"),z$e.forEach(t),KTo=i(_e),qp=n(_e,"LI",{});var W$e=s(qp);ufe=n(W$e,"STRONG",{});var v1t=s(ufe);ZTo=r(v1t,"flava"),v1t.forEach(t),e8o=r(W$e," \u2014 "),Ij=n(W$e,"A",{href:!0});var F1t=s(Ij);o8o=r(F1t,"FlavaProcessor"),F1t.forEach(t),r8o=r(W$e," (FLAVA model)"),W$e.forEach(t),t8o=i(_e),jp=n(_e,"LI",{});var Q$e=s(jp);bfe=n(Q$e,"STRONG",{});var T1t=s(bfe);a8o=r(T1t,"groupvit"),T1t.forEach(t),n8o=r(Q$e," \u2014 "),Nj=n(Q$e,"A",{href:!0});var M1t=s(Nj);s8o=r(M1t,"CLIPProcessor"),M1t.forEach(t),l8o=r(Q$e," (GroupViT model)"),Q$e.forEach(t),i8o=i(_e),Dp=n(_e,"LI",{});var H$e=s(Dp);vfe=n(H$e,"STRONG",{});var E1t=s(vfe);d8o=r(E1t,"layoutlmv2"),E1t.forEach(t),c8o=r(H$e," \u2014 "),qj=n(H$e,"A",{href:!0});var C1t=s(qj);f8o=r(C1t,"LayoutLMv2Processor"),C1t.forEach(t),m8o=r(H$e," (LayoutLMv2 model)"),H$e.forEach(t),g8o=i(_e),Gp=n(_e,"LI",{});var U$e=s(Gp);Ffe=n(U$e,"STRONG",{});var w1t=s(Ffe);h8o=r(w1t,"layoutlmv3"),w1t.forEach(t),p8o=r(U$e," \u2014 "),jj=n(U$e,"A",{href:!0});var A1t=s(jj);_8o=r(A1t,"LayoutLMv3Processor"),A1t.forEach(t),u8o=r(U$e," (LayoutLMv3 model)"),U$e.forEach(t),b8o=i(_e),Op=n(_e,"LI",{});var J$e=s(Op);Tfe=n(J$e,"STRONG",{});var L1t=s(Tfe);v8o=r(L1t,"layoutxlm"),L1t.forEach(t),F8o=r(J$e," \u2014 "),Dj=n(J$e,"A",{href:!0});var y1t=s(Dj);T8o=r(y1t,"LayoutXLMProcessor"),y1t.forEach(t),M8o=r(J$e," (LayoutXLM model)"),J$e.forEach(t),E8o=i(_e),Vp=n(_e,"LI",{});var Y$e=s(Vp);Mfe=n(Y$e,"STRONG",{});var x1t=s(Mfe);C8o=r(x1t,"owlvit"),x1t.forEach(t),w8o=r(Y$e," \u2014 "),Gj=n(Y$e,"A",{href:!0});var $1t=s(Gj);A8o=r($1t,"OwlViTProcessor"),$1t.forEach(t),L8o=r(Y$e," (OWL-ViT model)"),Y$e.forEach(t),y8o=i(_e),Xp=n(_e,"LI",{});var K$e=s(Xp);Efe=n(K$e,"STRONG",{});var k1t=s(Efe);x8o=r(k1t,"sew"),k1t.forEach(t),$8o=r(K$e," \u2014 "),Oj=n(K$e,"A",{href:!0});var S1t=s(Oj);k8o=r(S1t,"Wav2Vec2Processor"),S1t.forEach(t),S8o=r(K$e," (SEW model)"),K$e.forEach(t),R8o=i(_e),zp=n(_e,"LI",{});var Z$e=s(zp);Cfe=n(Z$e,"STRONG",{});var R1t=s(Cfe);P8o=r(R1t,"sew-d"),R1t.forEach(t),B8o=r(Z$e," \u2014 "),Vj=n(Z$e,"A",{href:!0});var P1t=s(Vj);I8o=r(P1t,"Wav2Vec2Processor"),P1t.forEach(t),N8o=r(Z$e," (SEW-D model)"),Z$e.forEach(t),q8o=i(_e),Wp=n(_e,"LI",{});var eke=s(Wp);wfe=n(eke,"STRONG",{});var B1t=s(wfe);j8o=r(B1t,"speech_to_text"),B1t.forEach(t),D8o=r(eke," \u2014 "),Xj=n(eke,"A",{href:!0});var I1t=s(Xj);G8o=r(I1t,"Speech2TextProcessor"),I1t.forEach(t),O8o=r(eke," (Speech2Text model)"),eke.forEach(t),V8o=i(_e),Qp=n(_e,"LI",{});var oke=s(Qp);Afe=n(oke,"STRONG",{});var N1t=s(Afe);X8o=r(N1t,"speech_to_text_2"),N1t.forEach(t),z8o=r(oke," \u2014 "),zj=n(oke,"A",{href:!0});var q1t=s(zj);W8o=r(q1t,"Speech2Text2Processor"),q1t.forEach(t),Q8o=r(oke," (Speech2Text2 model)"),oke.forEach(t),H8o=i(_e),Hp=n(_e,"LI",{});var rke=s(Hp);Lfe=n(rke,"STRONG",{});var j1t=s(Lfe);U8o=r(j1t,"trocr"),j1t.forEach(t),J8o=r(rke," \u2014 "),Wj=n(rke,"A",{href:!0});var D1t=s(Wj);Y8o=r(D1t,"TrOCRProcessor"),D1t.forEach(t),K8o=r(rke," (TrOCR model)"),rke.forEach(t),Z8o=i(_e),Up=n(_e,"LI",{});var tke=s(Up);yfe=n(tke,"STRONG",{});var G1t=s(yfe);e9o=r(G1t,"unispeech"),G1t.forEach(t),o9o=r(tke," \u2014 "),Qj=n(tke,"A",{href:!0});var O1t=s(Qj);r9o=r(O1t,"Wav2Vec2Processor"),O1t.forEach(t),t9o=r(tke," (UniSpeech model)"),tke.forEach(t),a9o=i(_e),Jp=n(_e,"LI",{});var ake=s(Jp);xfe=n(ake,"STRONG",{});var V1t=s(xfe);n9o=r(V1t,"unispeech-sat"),V1t.forEach(t),s9o=r(ake," \u2014 "),Hj=n(ake,"A",{href:!0});var X1t=s(Hj);l9o=r(X1t,"Wav2Vec2Processor"),X1t.forEach(t),i9o=r(ake," (UniSpeechSat model)"),ake.forEach(t),d9o=i(_e),Yp=n(_e,"LI",{});var nke=s(Yp);$fe=n(nke,"STRONG",{});var z1t=s($fe);c9o=r(z1t,"vilt"),z1t.forEach(t),f9o=r(nke," \u2014 "),Uj=n(nke,"A",{href:!0});var W1t=s(Uj);m9o=r(W1t,"ViltProcessor"),W1t.forEach(t),g9o=r(nke," (ViLT model)"),nke.forEach(t),h9o=i(_e),Kp=n(_e,"LI",{});var ske=s(Kp);kfe=n(ske,"STRONG",{});var Q1t=s(kfe);p9o=r(Q1t,"vision-text-dual-encoder"),Q1t.forEach(t),_9o=r(ske," \u2014 "),Jj=n(ske,"A",{href:!0});var H1t=s(Jj);u9o=r(H1t,"VisionTextDualEncoderProcessor"),H1t.forEach(t),b9o=r(ske," (VisionTextDualEncoder model)"),ske.forEach(t),v9o=i(_e),Zp=n(_e,"LI",{});var lke=s(Zp);Sfe=n(lke,"STRONG",{});var U1t=s(Sfe);F9o=r(U1t,"wav2vec2"),U1t.forEach(t),T9o=r(lke," \u2014 "),Yj=n(lke,"A",{href:!0});var J1t=s(Yj);M9o=r(J1t,"Wav2Vec2Processor"),J1t.forEach(t),E9o=r(lke," (Wav2Vec2 model)"),lke.forEach(t),C9o=i(_e),e_=n(_e,"LI",{});var ike=s(e_);Rfe=n(ike,"STRONG",{});var Y1t=s(Rfe);w9o=r(Y1t,"wav2vec2-conformer"),Y1t.forEach(t),A9o=r(ike," \u2014 "),Kj=n(ike,"A",{href:!0});var K1t=s(Kj);L9o=r(K1t,"Wav2Vec2Processor"),K1t.forEach(t),y9o=r(ike," (Wav2Vec2-Conformer model)"),ike.forEach(t),x9o=i(_e),o_=n(_e,"LI",{});var dke=s(o_);Pfe=n(dke,"STRONG",{});var Z1t=s(Pfe);$9o=r(Z1t,"wavlm"),Z1t.forEach(t),k9o=r(dke," \u2014 "),Zj=n(dke,"A",{href:!0});var ebt=s(Zj);S9o=r(ebt,"Wav2Vec2Processor"),ebt.forEach(t),R9o=r(dke," (WavLM model)"),dke.forEach(t),_e.forEach(t),P9o=i(da),T(r_.$$.fragment,da),B9o=i(da),T(t_.$$.fragment,da),da.forEach(t),I9o=i(dl),a_=n(dl,"DIV",{class:!0});var oUe=s(a_);T(uL.$$.fragment,oUe),N9o=i(oUe),Bfe=n(oUe,"P",{});var obt=s(Bfe);q9o=r(obt,"Register a new processor for this class."),obt.forEach(t),oUe.forEach(t),dl.forEach(t),HWe=i(f),Ji=n(f,"H2",{class:!0});var rUe=s(Ji);n_=n(rUe,"A",{id:!0,class:!0,href:!0});var rbt=s(n_);Ife=n(rbt,"SPAN",{});var tbt=s(Ife);T(bL.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),j9o=i(rUe),Nfe=n(rUe,"SPAN",{});var abt=s(Nfe);D9o=r(abt,"AutoModel"),abt.forEach(t),rUe.forEach(t),UWe=i(f),So=n(f,"DIV",{class:!0});var cl=s(So);T(vL.$$.fragment,cl),G9o=i(cl),Yi=n(cl,"P",{});var aae=s(Yi);O9o=r(aae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eD=n(aae,"A",{href:!0});var nbt=s(eD);V9o=r(nbt,"from_pretrained()"),nbt.forEach(t),X9o=r(aae," class method or the "),oD=n(aae,"A",{href:!0});var sbt=s(oD);z9o=r(sbt,"from_config()"),sbt.forEach(t),W9o=r(aae,` class
method.`),aae.forEach(t),Q9o=i(cl),FL=n(cl,"P",{});var tUe=s(FL);H9o=r(tUe,"This class cannot be instantiated directly using "),qfe=n(tUe,"CODE",{});var lbt=s(qfe);U9o=r(lbt,"__init__()"),lbt.forEach(t),J9o=r(tUe," (throws an error)."),tUe.forEach(t),Y9o=i(cl),ct=n(cl,"DIV",{class:!0});var Q6=s(ct);T(TL.$$.fragment,Q6),K9o=i(Q6),jfe=n(Q6,"P",{});var ibt=s(jfe);Z9o=r(ibt,"Instantiates one of the base model classes of the library from a configuration."),ibt.forEach(t),eMo=i(Q6),Ki=n(Q6,"P",{});var nae=s(Ki);oMo=r(nae,`Note:
Loading a model from its configuration file does `),Dfe=n(nae,"STRONG",{});var dbt=s(Dfe);rMo=r(dbt,"not"),dbt.forEach(t),tMo=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(nae,"A",{href:!0});var cbt=s(rD);aMo=r(cbt,"from_pretrained()"),cbt.forEach(t),nMo=r(nae," to load the model weights."),nae.forEach(t),sMo=i(Q6),T(s_.$$.fragment,Q6),Q6.forEach(t),lMo=i(cl),Ye=n(cl,"DIV",{class:!0});var ca=s(Ye);T(ML.$$.fragment,ca),iMo=i(ca),Gfe=n(ca,"P",{});var fbt=s(Gfe);dMo=r(fbt,"Instantiate one of the base model classes of the library from a pretrained model."),fbt.forEach(t),cMo=i(ca),Da=n(ca,"P",{});var H6=s(Da);fMo=r(H6,"The model class to instantiate is selected based on the "),Ofe=n(H6,"CODE",{});var mbt=s(Ofe);mMo=r(mbt,"model_type"),mbt.forEach(t),gMo=r(H6,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(H6,"CODE",{});var gbt=s(Vfe);hMo=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),pMo=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(H6,"CODE",{});var hbt=s(Xfe);_Mo=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),uMo=r(H6,":"),H6.forEach(t),bMo=i(ca),y=n(ca,"UL",{});var x=s(y);l_=n(x,"LI",{});var cke=s(l_);zfe=n(cke,"STRONG",{});var pbt=s(zfe);vMo=r(pbt,"albert"),pbt.forEach(t),FMo=r(cke," \u2014 "),tD=n(cke,"A",{href:!0});var _bt=s(tD);TMo=r(_bt,"AlbertModel"),_bt.forEach(t),MMo=r(cke," (ALBERT model)"),cke.forEach(t),EMo=i(x),i_=n(x,"LI",{});var fke=s(i_);Wfe=n(fke,"STRONG",{});var ubt=s(Wfe);CMo=r(ubt,"bart"),ubt.forEach(t),wMo=r(fke," \u2014 "),aD=n(fke,"A",{href:!0});var bbt=s(aD);AMo=r(bbt,"BartModel"),bbt.forEach(t),LMo=r(fke," (BART model)"),fke.forEach(t),yMo=i(x),d_=n(x,"LI",{});var mke=s(d_);Qfe=n(mke,"STRONG",{});var vbt=s(Qfe);xMo=r(vbt,"beit"),vbt.forEach(t),$Mo=r(mke," \u2014 "),nD=n(mke,"A",{href:!0});var Fbt=s(nD);kMo=r(Fbt,"BeitModel"),Fbt.forEach(t),SMo=r(mke," (BEiT model)"),mke.forEach(t),RMo=i(x),c_=n(x,"LI",{});var gke=s(c_);Hfe=n(gke,"STRONG",{});var Tbt=s(Hfe);PMo=r(Tbt,"bert"),Tbt.forEach(t),BMo=r(gke," \u2014 "),sD=n(gke,"A",{href:!0});var Mbt=s(sD);IMo=r(Mbt,"BertModel"),Mbt.forEach(t),NMo=r(gke," (BERT model)"),gke.forEach(t),qMo=i(x),f_=n(x,"LI",{});var hke=s(f_);Ufe=n(hke,"STRONG",{});var Ebt=s(Ufe);jMo=r(Ebt,"bert-generation"),Ebt.forEach(t),DMo=r(hke," \u2014 "),lD=n(hke,"A",{href:!0});var Cbt=s(lD);GMo=r(Cbt,"BertGenerationEncoder"),Cbt.forEach(t),OMo=r(hke," (Bert Generation model)"),hke.forEach(t),VMo=i(x),m_=n(x,"LI",{});var pke=s(m_);Jfe=n(pke,"STRONG",{});var wbt=s(Jfe);XMo=r(wbt,"big_bird"),wbt.forEach(t),zMo=r(pke," \u2014 "),iD=n(pke,"A",{href:!0});var Abt=s(iD);WMo=r(Abt,"BigBirdModel"),Abt.forEach(t),QMo=r(pke," (BigBird model)"),pke.forEach(t),HMo=i(x),g_=n(x,"LI",{});var _ke=s(g_);Yfe=n(_ke,"STRONG",{});var Lbt=s(Yfe);UMo=r(Lbt,"bigbird_pegasus"),Lbt.forEach(t),JMo=r(_ke," \u2014 "),dD=n(_ke,"A",{href:!0});var ybt=s(dD);YMo=r(ybt,"BigBirdPegasusModel"),ybt.forEach(t),KMo=r(_ke," (BigBird-Pegasus model)"),_ke.forEach(t),ZMo=i(x),h_=n(x,"LI",{});var uke=s(h_);Kfe=n(uke,"STRONG",{});var xbt=s(Kfe);eEo=r(xbt,"blenderbot"),xbt.forEach(t),oEo=r(uke," \u2014 "),cD=n(uke,"A",{href:!0});var $bt=s(cD);rEo=r($bt,"BlenderbotModel"),$bt.forEach(t),tEo=r(uke," (Blenderbot model)"),uke.forEach(t),aEo=i(x),p_=n(x,"LI",{});var bke=s(p_);Zfe=n(bke,"STRONG",{});var kbt=s(Zfe);nEo=r(kbt,"blenderbot-small"),kbt.forEach(t),sEo=r(bke," \u2014 "),fD=n(bke,"A",{href:!0});var Sbt=s(fD);lEo=r(Sbt,"BlenderbotSmallModel"),Sbt.forEach(t),iEo=r(bke," (BlenderbotSmall model)"),bke.forEach(t),dEo=i(x),__=n(x,"LI",{});var vke=s(__);eme=n(vke,"STRONG",{});var Rbt=s(eme);cEo=r(Rbt,"bloom"),Rbt.forEach(t),fEo=r(vke," \u2014 "),mD=n(vke,"A",{href:!0});var Pbt=s(mD);mEo=r(Pbt,"BloomModel"),Pbt.forEach(t),gEo=r(vke," (BLOOM model)"),vke.forEach(t),hEo=i(x),u_=n(x,"LI",{});var Fke=s(u_);ome=n(Fke,"STRONG",{});var Bbt=s(ome);pEo=r(Bbt,"camembert"),Bbt.forEach(t),_Eo=r(Fke," \u2014 "),gD=n(Fke,"A",{href:!0});var Ibt=s(gD);uEo=r(Ibt,"CamembertModel"),Ibt.forEach(t),bEo=r(Fke," (CamemBERT model)"),Fke.forEach(t),vEo=i(x),b_=n(x,"LI",{});var Tke=s(b_);rme=n(Tke,"STRONG",{});var Nbt=s(rme);FEo=r(Nbt,"canine"),Nbt.forEach(t),TEo=r(Tke," \u2014 "),hD=n(Tke,"A",{href:!0});var qbt=s(hD);MEo=r(qbt,"CanineModel"),qbt.forEach(t),EEo=r(Tke," (CANINE model)"),Tke.forEach(t),CEo=i(x),v_=n(x,"LI",{});var Mke=s(v_);tme=n(Mke,"STRONG",{});var jbt=s(tme);wEo=r(jbt,"clip"),jbt.forEach(t),AEo=r(Mke," \u2014 "),pD=n(Mke,"A",{href:!0});var Dbt=s(pD);LEo=r(Dbt,"CLIPModel"),Dbt.forEach(t),yEo=r(Mke," (CLIP model)"),Mke.forEach(t),xEo=i(x),F_=n(x,"LI",{});var Eke=s(F_);ame=n(Eke,"STRONG",{});var Gbt=s(ame);$Eo=r(Gbt,"codegen"),Gbt.forEach(t),kEo=r(Eke," \u2014 "),_D=n(Eke,"A",{href:!0});var Obt=s(_D);SEo=r(Obt,"CodeGenModel"),Obt.forEach(t),REo=r(Eke," (CodeGen model)"),Eke.forEach(t),PEo=i(x),T_=n(x,"LI",{});var Cke=s(T_);nme=n(Cke,"STRONG",{});var Vbt=s(nme);BEo=r(Vbt,"convbert"),Vbt.forEach(t),IEo=r(Cke," \u2014 "),uD=n(Cke,"A",{href:!0});var Xbt=s(uD);NEo=r(Xbt,"ConvBertModel"),Xbt.forEach(t),qEo=r(Cke," (ConvBERT model)"),Cke.forEach(t),jEo=i(x),M_=n(x,"LI",{});var wke=s(M_);sme=n(wke,"STRONG",{});var zbt=s(sme);DEo=r(zbt,"convnext"),zbt.forEach(t),GEo=r(wke," \u2014 "),bD=n(wke,"A",{href:!0});var Wbt=s(bD);OEo=r(Wbt,"ConvNextModel"),Wbt.forEach(t),VEo=r(wke," (ConvNeXT model)"),wke.forEach(t),XEo=i(x),E_=n(x,"LI",{});var Ake=s(E_);lme=n(Ake,"STRONG",{});var Qbt=s(lme);zEo=r(Qbt,"ctrl"),Qbt.forEach(t),WEo=r(Ake," \u2014 "),vD=n(Ake,"A",{href:!0});var Hbt=s(vD);QEo=r(Hbt,"CTRLModel"),Hbt.forEach(t),HEo=r(Ake," (CTRL model)"),Ake.forEach(t),UEo=i(x),C_=n(x,"LI",{});var Lke=s(C_);ime=n(Lke,"STRONG",{});var Ubt=s(ime);JEo=r(Ubt,"cvt"),Ubt.forEach(t),YEo=r(Lke," \u2014 "),FD=n(Lke,"A",{href:!0});var Jbt=s(FD);KEo=r(Jbt,"CvtModel"),Jbt.forEach(t),ZEo=r(Lke," (CvT model)"),Lke.forEach(t),e4o=i(x),w_=n(x,"LI",{});var yke=s(w_);dme=n(yke,"STRONG",{});var Ybt=s(dme);o4o=r(Ybt,"data2vec-audio"),Ybt.forEach(t),r4o=r(yke," \u2014 "),TD=n(yke,"A",{href:!0});var Kbt=s(TD);t4o=r(Kbt,"Data2VecAudioModel"),Kbt.forEach(t),a4o=r(yke," (Data2VecAudio model)"),yke.forEach(t),n4o=i(x),A_=n(x,"LI",{});var xke=s(A_);cme=n(xke,"STRONG",{});var Zbt=s(cme);s4o=r(Zbt,"data2vec-text"),Zbt.forEach(t),l4o=r(xke," \u2014 "),MD=n(xke,"A",{href:!0});var evt=s(MD);i4o=r(evt,"Data2VecTextModel"),evt.forEach(t),d4o=r(xke," (Data2VecText model)"),xke.forEach(t),c4o=i(x),L_=n(x,"LI",{});var $ke=s(L_);fme=n($ke,"STRONG",{});var ovt=s(fme);f4o=r(ovt,"data2vec-vision"),ovt.forEach(t),m4o=r($ke," \u2014 "),ED=n($ke,"A",{href:!0});var rvt=s(ED);g4o=r(rvt,"Data2VecVisionModel"),rvt.forEach(t),h4o=r($ke," (Data2VecVision model)"),$ke.forEach(t),p4o=i(x),y_=n(x,"LI",{});var kke=s(y_);mme=n(kke,"STRONG",{});var tvt=s(mme);_4o=r(tvt,"deberta"),tvt.forEach(t),u4o=r(kke," \u2014 "),CD=n(kke,"A",{href:!0});var avt=s(CD);b4o=r(avt,"DebertaModel"),avt.forEach(t),v4o=r(kke," (DeBERTa model)"),kke.forEach(t),F4o=i(x),x_=n(x,"LI",{});var Ske=s(x_);gme=n(Ske,"STRONG",{});var nvt=s(gme);T4o=r(nvt,"deberta-v2"),nvt.forEach(t),M4o=r(Ske," \u2014 "),wD=n(Ske,"A",{href:!0});var svt=s(wD);E4o=r(svt,"DebertaV2Model"),svt.forEach(t),C4o=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),w4o=i(x),$_=n(x,"LI",{});var Rke=s($_);hme=n(Rke,"STRONG",{});var lvt=s(hme);A4o=r(lvt,"decision_transformer"),lvt.forEach(t),L4o=r(Rke," \u2014 "),AD=n(Rke,"A",{href:!0});var ivt=s(AD);y4o=r(ivt,"DecisionTransformerModel"),ivt.forEach(t),x4o=r(Rke," (Decision Transformer model)"),Rke.forEach(t),$4o=i(x),k_=n(x,"LI",{});var Pke=s(k_);pme=n(Pke,"STRONG",{});var dvt=s(pme);k4o=r(dvt,"deit"),dvt.forEach(t),S4o=r(Pke," \u2014 "),LD=n(Pke,"A",{href:!0});var cvt=s(LD);R4o=r(cvt,"DeiTModel"),cvt.forEach(t),P4o=r(Pke," (DeiT model)"),Pke.forEach(t),B4o=i(x),S_=n(x,"LI",{});var Bke=s(S_);_me=n(Bke,"STRONG",{});var fvt=s(_me);I4o=r(fvt,"detr"),fvt.forEach(t),N4o=r(Bke," \u2014 "),yD=n(Bke,"A",{href:!0});var mvt=s(yD);q4o=r(mvt,"DetrModel"),mvt.forEach(t),j4o=r(Bke," (DETR model)"),Bke.forEach(t),D4o=i(x),R_=n(x,"LI",{});var Ike=s(R_);ume=n(Ike,"STRONG",{});var gvt=s(ume);G4o=r(gvt,"distilbert"),gvt.forEach(t),O4o=r(Ike," \u2014 "),xD=n(Ike,"A",{href:!0});var hvt=s(xD);V4o=r(hvt,"DistilBertModel"),hvt.forEach(t),X4o=r(Ike," (DistilBERT model)"),Ike.forEach(t),z4o=i(x),P_=n(x,"LI",{});var Nke=s(P_);bme=n(Nke,"STRONG",{});var pvt=s(bme);W4o=r(pvt,"dpr"),pvt.forEach(t),Q4o=r(Nke," \u2014 "),$D=n(Nke,"A",{href:!0});var _vt=s($D);H4o=r(_vt,"DPRQuestionEncoder"),_vt.forEach(t),U4o=r(Nke," (DPR model)"),Nke.forEach(t),J4o=i(x),B_=n(x,"LI",{});var qke=s(B_);vme=n(qke,"STRONG",{});var uvt=s(vme);Y4o=r(uvt,"dpt"),uvt.forEach(t),K4o=r(qke," \u2014 "),kD=n(qke,"A",{href:!0});var bvt=s(kD);Z4o=r(bvt,"DPTModel"),bvt.forEach(t),eCo=r(qke," (DPT model)"),qke.forEach(t),oCo=i(x),I_=n(x,"LI",{});var jke=s(I_);Fme=n(jke,"STRONG",{});var vvt=s(Fme);rCo=r(vvt,"electra"),vvt.forEach(t),tCo=r(jke," \u2014 "),SD=n(jke,"A",{href:!0});var Fvt=s(SD);aCo=r(Fvt,"ElectraModel"),Fvt.forEach(t),nCo=r(jke," (ELECTRA model)"),jke.forEach(t),sCo=i(x),N_=n(x,"LI",{});var Dke=s(N_);Tme=n(Dke,"STRONG",{});var Tvt=s(Tme);lCo=r(Tvt,"flaubert"),Tvt.forEach(t),iCo=r(Dke," \u2014 "),RD=n(Dke,"A",{href:!0});var Mvt=s(RD);dCo=r(Mvt,"FlaubertModel"),Mvt.forEach(t),cCo=r(Dke," (FlauBERT model)"),Dke.forEach(t),fCo=i(x),q_=n(x,"LI",{});var Gke=s(q_);Mme=n(Gke,"STRONG",{});var Evt=s(Mme);mCo=r(Evt,"flava"),Evt.forEach(t),gCo=r(Gke," \u2014 "),PD=n(Gke,"A",{href:!0});var Cvt=s(PD);hCo=r(Cvt,"FlavaModel"),Cvt.forEach(t),pCo=r(Gke," (FLAVA model)"),Gke.forEach(t),_Co=i(x),j_=n(x,"LI",{});var Oke=s(j_);Eme=n(Oke,"STRONG",{});var wvt=s(Eme);uCo=r(wvt,"fnet"),wvt.forEach(t),bCo=r(Oke," \u2014 "),BD=n(Oke,"A",{href:!0});var Avt=s(BD);vCo=r(Avt,"FNetModel"),Avt.forEach(t),FCo=r(Oke," (FNet model)"),Oke.forEach(t),TCo=i(x),D_=n(x,"LI",{});var Vke=s(D_);Cme=n(Vke,"STRONG",{});var Lvt=s(Cme);MCo=r(Lvt,"fsmt"),Lvt.forEach(t),ECo=r(Vke," \u2014 "),ID=n(Vke,"A",{href:!0});var yvt=s(ID);CCo=r(yvt,"FSMTModel"),yvt.forEach(t),wCo=r(Vke," (FairSeq Machine-Translation model)"),Vke.forEach(t),ACo=i(x),ol=n(x,"LI",{});var wR=s(ol);wme=n(wR,"STRONG",{});var xvt=s(wme);LCo=r(xvt,"funnel"),xvt.forEach(t),yCo=r(wR," \u2014 "),ND=n(wR,"A",{href:!0});var $vt=s(ND);xCo=r($vt,"FunnelModel"),$vt.forEach(t),$Co=r(wR," or "),qD=n(wR,"A",{href:!0});var kvt=s(qD);kCo=r(kvt,"FunnelBaseModel"),kvt.forEach(t),SCo=r(wR," (Funnel Transformer model)"),wR.forEach(t),RCo=i(x),G_=n(x,"LI",{});var Xke=s(G_);Ame=n(Xke,"STRONG",{});var Svt=s(Ame);PCo=r(Svt,"glpn"),Svt.forEach(t),BCo=r(Xke," \u2014 "),jD=n(Xke,"A",{href:!0});var Rvt=s(jD);ICo=r(Rvt,"GLPNModel"),Rvt.forEach(t),NCo=r(Xke," (GLPN model)"),Xke.forEach(t),qCo=i(x),O_=n(x,"LI",{});var zke=s(O_);Lme=n(zke,"STRONG",{});var Pvt=s(Lme);jCo=r(Pvt,"gpt2"),Pvt.forEach(t),DCo=r(zke," \u2014 "),DD=n(zke,"A",{href:!0});var Bvt=s(DD);GCo=r(Bvt,"GPT2Model"),Bvt.forEach(t),OCo=r(zke," (OpenAI GPT-2 model)"),zke.forEach(t),VCo=i(x),V_=n(x,"LI",{});var Wke=s(V_);yme=n(Wke,"STRONG",{});var Ivt=s(yme);XCo=r(Ivt,"gpt_neo"),Ivt.forEach(t),zCo=r(Wke," \u2014 "),GD=n(Wke,"A",{href:!0});var Nvt=s(GD);WCo=r(Nvt,"GPTNeoModel"),Nvt.forEach(t),QCo=r(Wke," (GPT Neo model)"),Wke.forEach(t),HCo=i(x),X_=n(x,"LI",{});var Qke=s(X_);xme=n(Qke,"STRONG",{});var qvt=s(xme);UCo=r(qvt,"gpt_neox"),qvt.forEach(t),JCo=r(Qke," \u2014 "),OD=n(Qke,"A",{href:!0});var jvt=s(OD);YCo=r(jvt,"GPTNeoXModel"),jvt.forEach(t),KCo=r(Qke," (GPT NeoX model)"),Qke.forEach(t),ZCo=i(x),z_=n(x,"LI",{});var Hke=s(z_);$me=n(Hke,"STRONG",{});var Dvt=s($me);e3o=r(Dvt,"gptj"),Dvt.forEach(t),o3o=r(Hke," \u2014 "),VD=n(Hke,"A",{href:!0});var Gvt=s(VD);r3o=r(Gvt,"GPTJModel"),Gvt.forEach(t),t3o=r(Hke," (GPT-J model)"),Hke.forEach(t),a3o=i(x),W_=n(x,"LI",{});var Uke=s(W_);kme=n(Uke,"STRONG",{});var Ovt=s(kme);n3o=r(Ovt,"groupvit"),Ovt.forEach(t),s3o=r(Uke," \u2014 "),XD=n(Uke,"A",{href:!0});var Vvt=s(XD);l3o=r(Vvt,"GroupViTModel"),Vvt.forEach(t),i3o=r(Uke," (GroupViT model)"),Uke.forEach(t),d3o=i(x),Q_=n(x,"LI",{});var Jke=s(Q_);Sme=n(Jke,"STRONG",{});var Xvt=s(Sme);c3o=r(Xvt,"hubert"),Xvt.forEach(t),f3o=r(Jke," \u2014 "),zD=n(Jke,"A",{href:!0});var zvt=s(zD);m3o=r(zvt,"HubertModel"),zvt.forEach(t),g3o=r(Jke," (Hubert model)"),Jke.forEach(t),h3o=i(x),H_=n(x,"LI",{});var Yke=s(H_);Rme=n(Yke,"STRONG",{});var Wvt=s(Rme);p3o=r(Wvt,"ibert"),Wvt.forEach(t),_3o=r(Yke," \u2014 "),WD=n(Yke,"A",{href:!0});var Qvt=s(WD);u3o=r(Qvt,"IBertModel"),Qvt.forEach(t),b3o=r(Yke," (I-BERT model)"),Yke.forEach(t),v3o=i(x),U_=n(x,"LI",{});var Kke=s(U_);Pme=n(Kke,"STRONG",{});var Hvt=s(Pme);F3o=r(Hvt,"imagegpt"),Hvt.forEach(t),T3o=r(Kke," \u2014 "),QD=n(Kke,"A",{href:!0});var Uvt=s(QD);M3o=r(Uvt,"ImageGPTModel"),Uvt.forEach(t),E3o=r(Kke," (ImageGPT model)"),Kke.forEach(t),C3o=i(x),J_=n(x,"LI",{});var Zke=s(J_);Bme=n(Zke,"STRONG",{});var Jvt=s(Bme);w3o=r(Jvt,"layoutlm"),Jvt.forEach(t),A3o=r(Zke," \u2014 "),HD=n(Zke,"A",{href:!0});var Yvt=s(HD);L3o=r(Yvt,"LayoutLMModel"),Yvt.forEach(t),y3o=r(Zke," (LayoutLM model)"),Zke.forEach(t),x3o=i(x),Y_=n(x,"LI",{});var eSe=s(Y_);Ime=n(eSe,"STRONG",{});var Kvt=s(Ime);$3o=r(Kvt,"layoutlmv2"),Kvt.forEach(t),k3o=r(eSe," \u2014 "),UD=n(eSe,"A",{href:!0});var Zvt=s(UD);S3o=r(Zvt,"LayoutLMv2Model"),Zvt.forEach(t),R3o=r(eSe," (LayoutLMv2 model)"),eSe.forEach(t),P3o=i(x),K_=n(x,"LI",{});var oSe=s(K_);Nme=n(oSe,"STRONG",{});var e5t=s(Nme);B3o=r(e5t,"layoutlmv3"),e5t.forEach(t),I3o=r(oSe," \u2014 "),JD=n(oSe,"A",{href:!0});var o5t=s(JD);N3o=r(o5t,"LayoutLMv3Model"),o5t.forEach(t),q3o=r(oSe," (LayoutLMv3 model)"),oSe.forEach(t),j3o=i(x),Z_=n(x,"LI",{});var rSe=s(Z_);qme=n(rSe,"STRONG",{});var r5t=s(qme);D3o=r(r5t,"led"),r5t.forEach(t),G3o=r(rSe," \u2014 "),YD=n(rSe,"A",{href:!0});var t5t=s(YD);O3o=r(t5t,"LEDModel"),t5t.forEach(t),V3o=r(rSe," (LED model)"),rSe.forEach(t),X3o=i(x),eu=n(x,"LI",{});var tSe=s(eu);jme=n(tSe,"STRONG",{});var a5t=s(jme);z3o=r(a5t,"levit"),a5t.forEach(t),W3o=r(tSe," \u2014 "),KD=n(tSe,"A",{href:!0});var n5t=s(KD);Q3o=r(n5t,"LevitModel"),n5t.forEach(t),H3o=r(tSe," (LeViT model)"),tSe.forEach(t),U3o=i(x),ou=n(x,"LI",{});var aSe=s(ou);Dme=n(aSe,"STRONG",{});var s5t=s(Dme);J3o=r(s5t,"longformer"),s5t.forEach(t),Y3o=r(aSe," \u2014 "),ZD=n(aSe,"A",{href:!0});var l5t=s(ZD);K3o=r(l5t,"LongformerModel"),l5t.forEach(t),Z3o=r(aSe," (Longformer model)"),aSe.forEach(t),e0o=i(x),ru=n(x,"LI",{});var nSe=s(ru);Gme=n(nSe,"STRONG",{});var i5t=s(Gme);o0o=r(i5t,"longt5"),i5t.forEach(t),r0o=r(nSe," \u2014 "),eG=n(nSe,"A",{href:!0});var d5t=s(eG);t0o=r(d5t,"LongT5Model"),d5t.forEach(t),a0o=r(nSe," (LongT5 model)"),nSe.forEach(t),n0o=i(x),tu=n(x,"LI",{});var sSe=s(tu);Ome=n(sSe,"STRONG",{});var c5t=s(Ome);s0o=r(c5t,"luke"),c5t.forEach(t),l0o=r(sSe," \u2014 "),oG=n(sSe,"A",{href:!0});var f5t=s(oG);i0o=r(f5t,"LukeModel"),f5t.forEach(t),d0o=r(sSe," (LUKE model)"),sSe.forEach(t),c0o=i(x),au=n(x,"LI",{});var lSe=s(au);Vme=n(lSe,"STRONG",{});var m5t=s(Vme);f0o=r(m5t,"lxmert"),m5t.forEach(t),m0o=r(lSe," \u2014 "),rG=n(lSe,"A",{href:!0});var g5t=s(rG);g0o=r(g5t,"LxmertModel"),g5t.forEach(t),h0o=r(lSe," (LXMERT model)"),lSe.forEach(t),p0o=i(x),nu=n(x,"LI",{});var iSe=s(nu);Xme=n(iSe,"STRONG",{});var h5t=s(Xme);_0o=r(h5t,"m2m_100"),h5t.forEach(t),u0o=r(iSe," \u2014 "),tG=n(iSe,"A",{href:!0});var p5t=s(tG);b0o=r(p5t,"M2M100Model"),p5t.forEach(t),v0o=r(iSe," (M2M100 model)"),iSe.forEach(t),F0o=i(x),su=n(x,"LI",{});var dSe=s(su);zme=n(dSe,"STRONG",{});var _5t=s(zme);T0o=r(_5t,"marian"),_5t.forEach(t),M0o=r(dSe," \u2014 "),aG=n(dSe,"A",{href:!0});var u5t=s(aG);E0o=r(u5t,"MarianModel"),u5t.forEach(t),C0o=r(dSe," (Marian model)"),dSe.forEach(t),w0o=i(x),lu=n(x,"LI",{});var cSe=s(lu);Wme=n(cSe,"STRONG",{});var b5t=s(Wme);A0o=r(b5t,"maskformer"),b5t.forEach(t),L0o=r(cSe," \u2014 "),nG=n(cSe,"A",{href:!0});var v5t=s(nG);y0o=r(v5t,"MaskFormerModel"),v5t.forEach(t),x0o=r(cSe," (MaskFormer model)"),cSe.forEach(t),$0o=i(x),iu=n(x,"LI",{});var fSe=s(iu);Qme=n(fSe,"STRONG",{});var F5t=s(Qme);k0o=r(F5t,"mbart"),F5t.forEach(t),S0o=r(fSe," \u2014 "),sG=n(fSe,"A",{href:!0});var T5t=s(sG);R0o=r(T5t,"MBartModel"),T5t.forEach(t),P0o=r(fSe," (mBART model)"),fSe.forEach(t),B0o=i(x),du=n(x,"LI",{});var mSe=s(du);Hme=n(mSe,"STRONG",{});var M5t=s(Hme);I0o=r(M5t,"mctct"),M5t.forEach(t),N0o=r(mSe," \u2014 "),lG=n(mSe,"A",{href:!0});var E5t=s(lG);q0o=r(E5t,"MCTCTModel"),E5t.forEach(t),j0o=r(mSe," (M-CTC-T model)"),mSe.forEach(t),D0o=i(x),cu=n(x,"LI",{});var gSe=s(cu);Ume=n(gSe,"STRONG",{});var C5t=s(Ume);G0o=r(C5t,"megatron-bert"),C5t.forEach(t),O0o=r(gSe," \u2014 "),iG=n(gSe,"A",{href:!0});var w5t=s(iG);V0o=r(w5t,"MegatronBertModel"),w5t.forEach(t),X0o=r(gSe," (Megatron-BERT model)"),gSe.forEach(t),z0o=i(x),fu=n(x,"LI",{});var hSe=s(fu);Jme=n(hSe,"STRONG",{});var A5t=s(Jme);W0o=r(A5t,"mobilebert"),A5t.forEach(t),Q0o=r(hSe," \u2014 "),dG=n(hSe,"A",{href:!0});var L5t=s(dG);H0o=r(L5t,"MobileBertModel"),L5t.forEach(t),U0o=r(hSe," (MobileBERT model)"),hSe.forEach(t),J0o=i(x),mu=n(x,"LI",{});var pSe=s(mu);Yme=n(pSe,"STRONG",{});var y5t=s(Yme);Y0o=r(y5t,"mobilevit"),y5t.forEach(t),K0o=r(pSe," \u2014 "),cG=n(pSe,"A",{href:!0});var x5t=s(cG);Z0o=r(x5t,"MobileViTModel"),x5t.forEach(t),ewo=r(pSe," (MobileViT model)"),pSe.forEach(t),owo=i(x),gu=n(x,"LI",{});var _Se=s(gu);Kme=n(_Se,"STRONG",{});var $5t=s(Kme);rwo=r($5t,"mpnet"),$5t.forEach(t),two=r(_Se," \u2014 "),fG=n(_Se,"A",{href:!0});var k5t=s(fG);awo=r(k5t,"MPNetModel"),k5t.forEach(t),nwo=r(_Se," (MPNet model)"),_Se.forEach(t),swo=i(x),hu=n(x,"LI",{});var uSe=s(hu);Zme=n(uSe,"STRONG",{});var S5t=s(Zme);lwo=r(S5t,"mt5"),S5t.forEach(t),iwo=r(uSe," \u2014 "),mG=n(uSe,"A",{href:!0});var R5t=s(mG);dwo=r(R5t,"MT5Model"),R5t.forEach(t),cwo=r(uSe," (MT5 model)"),uSe.forEach(t),fwo=i(x),pu=n(x,"LI",{});var bSe=s(pu);ege=n(bSe,"STRONG",{});var P5t=s(ege);mwo=r(P5t,"mvp"),P5t.forEach(t),gwo=r(bSe," \u2014 "),gG=n(bSe,"A",{href:!0});var B5t=s(gG);hwo=r(B5t,"MvpModel"),B5t.forEach(t),pwo=r(bSe," (MVP model)"),bSe.forEach(t),_wo=i(x),_u=n(x,"LI",{});var vSe=s(_u);oge=n(vSe,"STRONG",{});var I5t=s(oge);uwo=r(I5t,"nezha"),I5t.forEach(t),bwo=r(vSe," \u2014 "),hG=n(vSe,"A",{href:!0});var N5t=s(hG);vwo=r(N5t,"NezhaModel"),N5t.forEach(t),Fwo=r(vSe," (Nezha model)"),vSe.forEach(t),Two=i(x),uu=n(x,"LI",{});var FSe=s(uu);rge=n(FSe,"STRONG",{});var q5t=s(rge);Mwo=r(q5t,"nllb"),q5t.forEach(t),Ewo=r(FSe," \u2014 "),pG=n(FSe,"A",{href:!0});var j5t=s(pG);Cwo=r(j5t,"M2M100Model"),j5t.forEach(t),wwo=r(FSe," (NLLB model)"),FSe.forEach(t),Awo=i(x),bu=n(x,"LI",{});var TSe=s(bu);tge=n(TSe,"STRONG",{});var D5t=s(tge);Lwo=r(D5t,"nystromformer"),D5t.forEach(t),ywo=r(TSe," \u2014 "),_G=n(TSe,"A",{href:!0});var G5t=s(_G);xwo=r(G5t,"NystromformerModel"),G5t.forEach(t),$wo=r(TSe," (Nystr\xF6mformer model)"),TSe.forEach(t),kwo=i(x),vu=n(x,"LI",{});var MSe=s(vu);age=n(MSe,"STRONG",{});var O5t=s(age);Swo=r(O5t,"openai-gpt"),O5t.forEach(t),Rwo=r(MSe," \u2014 "),uG=n(MSe,"A",{href:!0});var V5t=s(uG);Pwo=r(V5t,"OpenAIGPTModel"),V5t.forEach(t),Bwo=r(MSe," (OpenAI GPT model)"),MSe.forEach(t),Iwo=i(x),Fu=n(x,"LI",{});var ESe=s(Fu);nge=n(ESe,"STRONG",{});var X5t=s(nge);Nwo=r(X5t,"opt"),X5t.forEach(t),qwo=r(ESe," \u2014 "),bG=n(ESe,"A",{href:!0});var z5t=s(bG);jwo=r(z5t,"OPTModel"),z5t.forEach(t),Dwo=r(ESe," (OPT model)"),ESe.forEach(t),Gwo=i(x),Tu=n(x,"LI",{});var CSe=s(Tu);sge=n(CSe,"STRONG",{});var W5t=s(sge);Owo=r(W5t,"owlvit"),W5t.forEach(t),Vwo=r(CSe," \u2014 "),vG=n(CSe,"A",{href:!0});var Q5t=s(vG);Xwo=r(Q5t,"OwlViTModel"),Q5t.forEach(t),zwo=r(CSe," (OWL-ViT model)"),CSe.forEach(t),Wwo=i(x),Mu=n(x,"LI",{});var wSe=s(Mu);lge=n(wSe,"STRONG",{});var H5t=s(lge);Qwo=r(H5t,"pegasus"),H5t.forEach(t),Hwo=r(wSe," \u2014 "),FG=n(wSe,"A",{href:!0});var U5t=s(FG);Uwo=r(U5t,"PegasusModel"),U5t.forEach(t),Jwo=r(wSe," (Pegasus model)"),wSe.forEach(t),Ywo=i(x),Eu=n(x,"LI",{});var ASe=s(Eu);ige=n(ASe,"STRONG",{});var J5t=s(ige);Kwo=r(J5t,"perceiver"),J5t.forEach(t),Zwo=r(ASe," \u2014 "),TG=n(ASe,"A",{href:!0});var Y5t=s(TG);e6o=r(Y5t,"PerceiverModel"),Y5t.forEach(t),o6o=r(ASe," (Perceiver model)"),ASe.forEach(t),r6o=i(x),Cu=n(x,"LI",{});var LSe=s(Cu);dge=n(LSe,"STRONG",{});var K5t=s(dge);t6o=r(K5t,"plbart"),K5t.forEach(t),a6o=r(LSe," \u2014 "),MG=n(LSe,"A",{href:!0});var Z5t=s(MG);n6o=r(Z5t,"PLBartModel"),Z5t.forEach(t),s6o=r(LSe," (PLBart model)"),LSe.forEach(t),l6o=i(x),wu=n(x,"LI",{});var ySe=s(wu);cge=n(ySe,"STRONG",{});var eFt=s(cge);i6o=r(eFt,"poolformer"),eFt.forEach(t),d6o=r(ySe," \u2014 "),EG=n(ySe,"A",{href:!0});var oFt=s(EG);c6o=r(oFt,"PoolFormerModel"),oFt.forEach(t),f6o=r(ySe," (PoolFormer model)"),ySe.forEach(t),m6o=i(x),Au=n(x,"LI",{});var xSe=s(Au);fge=n(xSe,"STRONG",{});var rFt=s(fge);g6o=r(rFt,"prophetnet"),rFt.forEach(t),h6o=r(xSe," \u2014 "),CG=n(xSe,"A",{href:!0});var tFt=s(CG);p6o=r(tFt,"ProphetNetModel"),tFt.forEach(t),_6o=r(xSe," (ProphetNet model)"),xSe.forEach(t),u6o=i(x),Lu=n(x,"LI",{});var $Se=s(Lu);mge=n($Se,"STRONG",{});var aFt=s(mge);b6o=r(aFt,"qdqbert"),aFt.forEach(t),v6o=r($Se," \u2014 "),wG=n($Se,"A",{href:!0});var nFt=s(wG);F6o=r(nFt,"QDQBertModel"),nFt.forEach(t),T6o=r($Se," (QDQBert model)"),$Se.forEach(t),M6o=i(x),yu=n(x,"LI",{});var kSe=s(yu);gge=n(kSe,"STRONG",{});var sFt=s(gge);E6o=r(sFt,"reformer"),sFt.forEach(t),C6o=r(kSe," \u2014 "),AG=n(kSe,"A",{href:!0});var lFt=s(AG);w6o=r(lFt,"ReformerModel"),lFt.forEach(t),A6o=r(kSe," (Reformer model)"),kSe.forEach(t),L6o=i(x),xu=n(x,"LI",{});var SSe=s(xu);hge=n(SSe,"STRONG",{});var iFt=s(hge);y6o=r(iFt,"regnet"),iFt.forEach(t),x6o=r(SSe," \u2014 "),LG=n(SSe,"A",{href:!0});var dFt=s(LG);$6o=r(dFt,"RegNetModel"),dFt.forEach(t),k6o=r(SSe," (RegNet model)"),SSe.forEach(t),S6o=i(x),$u=n(x,"LI",{});var RSe=s($u);pge=n(RSe,"STRONG",{});var cFt=s(pge);R6o=r(cFt,"rembert"),cFt.forEach(t),P6o=r(RSe," \u2014 "),yG=n(RSe,"A",{href:!0});var fFt=s(yG);B6o=r(fFt,"RemBertModel"),fFt.forEach(t),I6o=r(RSe," (RemBERT model)"),RSe.forEach(t),N6o=i(x),ku=n(x,"LI",{});var PSe=s(ku);_ge=n(PSe,"STRONG",{});var mFt=s(_ge);q6o=r(mFt,"resnet"),mFt.forEach(t),j6o=r(PSe," \u2014 "),xG=n(PSe,"A",{href:!0});var gFt=s(xG);D6o=r(gFt,"ResNetModel"),gFt.forEach(t),G6o=r(PSe," (ResNet model)"),PSe.forEach(t),O6o=i(x),Su=n(x,"LI",{});var BSe=s(Su);uge=n(BSe,"STRONG",{});var hFt=s(uge);V6o=r(hFt,"retribert"),hFt.forEach(t),X6o=r(BSe," \u2014 "),$G=n(BSe,"A",{href:!0});var pFt=s($G);z6o=r(pFt,"RetriBertModel"),pFt.forEach(t),W6o=r(BSe," (RetriBERT model)"),BSe.forEach(t),Q6o=i(x),Ru=n(x,"LI",{});var ISe=s(Ru);bge=n(ISe,"STRONG",{});var _Ft=s(bge);H6o=r(_Ft,"roberta"),_Ft.forEach(t),U6o=r(ISe," \u2014 "),kG=n(ISe,"A",{href:!0});var uFt=s(kG);J6o=r(uFt,"RobertaModel"),uFt.forEach(t),Y6o=r(ISe," (RoBERTa model)"),ISe.forEach(t),K6o=i(x),Pu=n(x,"LI",{});var NSe=s(Pu);vge=n(NSe,"STRONG",{});var bFt=s(vge);Z6o=r(bFt,"roformer"),bFt.forEach(t),eAo=r(NSe," \u2014 "),SG=n(NSe,"A",{href:!0});var vFt=s(SG);oAo=r(vFt,"RoFormerModel"),vFt.forEach(t),rAo=r(NSe," (RoFormer model)"),NSe.forEach(t),tAo=i(x),Bu=n(x,"LI",{});var qSe=s(Bu);Fge=n(qSe,"STRONG",{});var FFt=s(Fge);aAo=r(FFt,"segformer"),FFt.forEach(t),nAo=r(qSe," \u2014 "),RG=n(qSe,"A",{href:!0});var TFt=s(RG);sAo=r(TFt,"SegformerModel"),TFt.forEach(t),lAo=r(qSe," (SegFormer model)"),qSe.forEach(t),iAo=i(x),Iu=n(x,"LI",{});var jSe=s(Iu);Tge=n(jSe,"STRONG",{});var MFt=s(Tge);dAo=r(MFt,"sew"),MFt.forEach(t),cAo=r(jSe," \u2014 "),PG=n(jSe,"A",{href:!0});var EFt=s(PG);fAo=r(EFt,"SEWModel"),EFt.forEach(t),mAo=r(jSe," (SEW model)"),jSe.forEach(t),gAo=i(x),Nu=n(x,"LI",{});var DSe=s(Nu);Mge=n(DSe,"STRONG",{});var CFt=s(Mge);hAo=r(CFt,"sew-d"),CFt.forEach(t),pAo=r(DSe," \u2014 "),BG=n(DSe,"A",{href:!0});var wFt=s(BG);_Ao=r(wFt,"SEWDModel"),wFt.forEach(t),uAo=r(DSe," (SEW-D model)"),DSe.forEach(t),bAo=i(x),qu=n(x,"LI",{});var GSe=s(qu);Ege=n(GSe,"STRONG",{});var AFt=s(Ege);vAo=r(AFt,"speech_to_text"),AFt.forEach(t),FAo=r(GSe," \u2014 "),IG=n(GSe,"A",{href:!0});var LFt=s(IG);TAo=r(LFt,"Speech2TextModel"),LFt.forEach(t),MAo=r(GSe," (Speech2Text model)"),GSe.forEach(t),EAo=i(x),ju=n(x,"LI",{});var OSe=s(ju);Cge=n(OSe,"STRONG",{});var yFt=s(Cge);CAo=r(yFt,"splinter"),yFt.forEach(t),wAo=r(OSe," \u2014 "),NG=n(OSe,"A",{href:!0});var xFt=s(NG);AAo=r(xFt,"SplinterModel"),xFt.forEach(t),LAo=r(OSe," (Splinter model)"),OSe.forEach(t),yAo=i(x),Du=n(x,"LI",{});var VSe=s(Du);wge=n(VSe,"STRONG",{});var $Ft=s(wge);xAo=r($Ft,"squeezebert"),$Ft.forEach(t),$Ao=r(VSe," \u2014 "),qG=n(VSe,"A",{href:!0});var kFt=s(qG);kAo=r(kFt,"SqueezeBertModel"),kFt.forEach(t),SAo=r(VSe," (SqueezeBERT model)"),VSe.forEach(t),RAo=i(x),Gu=n(x,"LI",{});var XSe=s(Gu);Age=n(XSe,"STRONG",{});var SFt=s(Age);PAo=r(SFt,"swin"),SFt.forEach(t),BAo=r(XSe," \u2014 "),jG=n(XSe,"A",{href:!0});var RFt=s(jG);IAo=r(RFt,"SwinModel"),RFt.forEach(t),NAo=r(XSe," (Swin Transformer model)"),XSe.forEach(t),qAo=i(x),Ou=n(x,"LI",{});var zSe=s(Ou);Lge=n(zSe,"STRONG",{});var PFt=s(Lge);jAo=r(PFt,"swinv2"),PFt.forEach(t),DAo=r(zSe," \u2014 "),DG=n(zSe,"A",{href:!0});var BFt=s(DG);GAo=r(BFt,"Swinv2Model"),BFt.forEach(t),OAo=r(zSe," (Swin Transformer V2 model)"),zSe.forEach(t),VAo=i(x),Vu=n(x,"LI",{});var WSe=s(Vu);yge=n(WSe,"STRONG",{});var IFt=s(yge);XAo=r(IFt,"t5"),IFt.forEach(t),zAo=r(WSe," \u2014 "),GG=n(WSe,"A",{href:!0});var NFt=s(GG);WAo=r(NFt,"T5Model"),NFt.forEach(t),QAo=r(WSe," (T5 model)"),WSe.forEach(t),HAo=i(x),Xu=n(x,"LI",{});var QSe=s(Xu);xge=n(QSe,"STRONG",{});var qFt=s(xge);UAo=r(qFt,"tapas"),qFt.forEach(t),JAo=r(QSe," \u2014 "),OG=n(QSe,"A",{href:!0});var jFt=s(OG);YAo=r(jFt,"TapasModel"),jFt.forEach(t),KAo=r(QSe," (TAPAS model)"),QSe.forEach(t),ZAo=i(x),zu=n(x,"LI",{});var HSe=s(zu);$ge=n(HSe,"STRONG",{});var DFt=s($ge);e7o=r(DFt,"trajectory_transformer"),DFt.forEach(t),o7o=r(HSe," \u2014 "),VG=n(HSe,"A",{href:!0});var GFt=s(VG);r7o=r(GFt,"TrajectoryTransformerModel"),GFt.forEach(t),t7o=r(HSe," (Trajectory Transformer model)"),HSe.forEach(t),a7o=i(x),Wu=n(x,"LI",{});var USe=s(Wu);kge=n(USe,"STRONG",{});var OFt=s(kge);n7o=r(OFt,"transfo-xl"),OFt.forEach(t),s7o=r(USe," \u2014 "),XG=n(USe,"A",{href:!0});var VFt=s(XG);l7o=r(VFt,"TransfoXLModel"),VFt.forEach(t),i7o=r(USe," (Transformer-XL model)"),USe.forEach(t),d7o=i(x),Qu=n(x,"LI",{});var JSe=s(Qu);Sge=n(JSe,"STRONG",{});var XFt=s(Sge);c7o=r(XFt,"unispeech"),XFt.forEach(t),f7o=r(JSe," \u2014 "),zG=n(JSe,"A",{href:!0});var zFt=s(zG);m7o=r(zFt,"UniSpeechModel"),zFt.forEach(t),g7o=r(JSe," (UniSpeech model)"),JSe.forEach(t),h7o=i(x),Hu=n(x,"LI",{});var YSe=s(Hu);Rge=n(YSe,"STRONG",{});var WFt=s(Rge);p7o=r(WFt,"unispeech-sat"),WFt.forEach(t),_7o=r(YSe," \u2014 "),WG=n(YSe,"A",{href:!0});var QFt=s(WG);u7o=r(QFt,"UniSpeechSatModel"),QFt.forEach(t),b7o=r(YSe," (UniSpeechSat model)"),YSe.forEach(t),v7o=i(x),Uu=n(x,"LI",{});var KSe=s(Uu);Pge=n(KSe,"STRONG",{});var HFt=s(Pge);F7o=r(HFt,"van"),HFt.forEach(t),T7o=r(KSe," \u2014 "),QG=n(KSe,"A",{href:!0});var UFt=s(QG);M7o=r(UFt,"VanModel"),UFt.forEach(t),E7o=r(KSe," (VAN model)"),KSe.forEach(t),C7o=i(x),Ju=n(x,"LI",{});var ZSe=s(Ju);Bge=n(ZSe,"STRONG",{});var JFt=s(Bge);w7o=r(JFt,"videomae"),JFt.forEach(t),A7o=r(ZSe," \u2014 "),HG=n(ZSe,"A",{href:!0});var YFt=s(HG);L7o=r(YFt,"VideoMAEModel"),YFt.forEach(t),y7o=r(ZSe," (VideoMAE model)"),ZSe.forEach(t),x7o=i(x),Yu=n(x,"LI",{});var eRe=s(Yu);Ige=n(eRe,"STRONG",{});var KFt=s(Ige);$7o=r(KFt,"vilt"),KFt.forEach(t),k7o=r(eRe," \u2014 "),UG=n(eRe,"A",{href:!0});var ZFt=s(UG);S7o=r(ZFt,"ViltModel"),ZFt.forEach(t),R7o=r(eRe," (ViLT model)"),eRe.forEach(t),P7o=i(x),Ku=n(x,"LI",{});var oRe=s(Ku);Nge=n(oRe,"STRONG",{});var eTt=s(Nge);B7o=r(eTt,"vision-text-dual-encoder"),eTt.forEach(t),I7o=r(oRe," \u2014 "),JG=n(oRe,"A",{href:!0});var oTt=s(JG);N7o=r(oTt,"VisionTextDualEncoderModel"),oTt.forEach(t),q7o=r(oRe," (VisionTextDualEncoder model)"),oRe.forEach(t),j7o=i(x),Zu=n(x,"LI",{});var rRe=s(Zu);qge=n(rRe,"STRONG",{});var rTt=s(qge);D7o=r(rTt,"visual_bert"),rTt.forEach(t),G7o=r(rRe," \u2014 "),YG=n(rRe,"A",{href:!0});var tTt=s(YG);O7o=r(tTt,"VisualBertModel"),tTt.forEach(t),V7o=r(rRe," (VisualBERT model)"),rRe.forEach(t),X7o=i(x),e2=n(x,"LI",{});var tRe=s(e2);jge=n(tRe,"STRONG",{});var aTt=s(jge);z7o=r(aTt,"vit"),aTt.forEach(t),W7o=r(tRe," \u2014 "),KG=n(tRe,"A",{href:!0});var nTt=s(KG);Q7o=r(nTt,"ViTModel"),nTt.forEach(t),H7o=r(tRe," (ViT model)"),tRe.forEach(t),U7o=i(x),o2=n(x,"LI",{});var aRe=s(o2);Dge=n(aRe,"STRONG",{});var sTt=s(Dge);J7o=r(sTt,"vit_mae"),sTt.forEach(t),Y7o=r(aRe," \u2014 "),ZG=n(aRe,"A",{href:!0});var lTt=s(ZG);K7o=r(lTt,"ViTMAEModel"),lTt.forEach(t),Z7o=r(aRe," (ViTMAE model)"),aRe.forEach(t),eLo=i(x),r2=n(x,"LI",{});var nRe=s(r2);Gge=n(nRe,"STRONG",{});var iTt=s(Gge);oLo=r(iTt,"wav2vec2"),iTt.forEach(t),rLo=r(nRe," \u2014 "),eO=n(nRe,"A",{href:!0});var dTt=s(eO);tLo=r(dTt,"Wav2Vec2Model"),dTt.forEach(t),aLo=r(nRe," (Wav2Vec2 model)"),nRe.forEach(t),nLo=i(x),t2=n(x,"LI",{});var sRe=s(t2);Oge=n(sRe,"STRONG",{});var cTt=s(Oge);sLo=r(cTt,"wav2vec2-conformer"),cTt.forEach(t),lLo=r(sRe," \u2014 "),oO=n(sRe,"A",{href:!0});var fTt=s(oO);iLo=r(fTt,"Wav2Vec2ConformerModel"),fTt.forEach(t),dLo=r(sRe," (Wav2Vec2-Conformer model)"),sRe.forEach(t),cLo=i(x),a2=n(x,"LI",{});var lRe=s(a2);Vge=n(lRe,"STRONG",{});var mTt=s(Vge);fLo=r(mTt,"wavlm"),mTt.forEach(t),mLo=r(lRe," \u2014 "),rO=n(lRe,"A",{href:!0});var gTt=s(rO);gLo=r(gTt,"WavLMModel"),gTt.forEach(t),hLo=r(lRe," (WavLM model)"),lRe.forEach(t),pLo=i(x),n2=n(x,"LI",{});var iRe=s(n2);Xge=n(iRe,"STRONG",{});var hTt=s(Xge);_Lo=r(hTt,"xglm"),hTt.forEach(t),uLo=r(iRe," \u2014 "),tO=n(iRe,"A",{href:!0});var pTt=s(tO);bLo=r(pTt,"XGLMModel"),pTt.forEach(t),vLo=r(iRe," (XGLM model)"),iRe.forEach(t),FLo=i(x),s2=n(x,"LI",{});var dRe=s(s2);zge=n(dRe,"STRONG",{});var _Tt=s(zge);TLo=r(_Tt,"xlm"),_Tt.forEach(t),MLo=r(dRe," \u2014 "),aO=n(dRe,"A",{href:!0});var uTt=s(aO);ELo=r(uTt,"XLMModel"),uTt.forEach(t),CLo=r(dRe," (XLM model)"),dRe.forEach(t),wLo=i(x),l2=n(x,"LI",{});var cRe=s(l2);Wge=n(cRe,"STRONG",{});var bTt=s(Wge);ALo=r(bTt,"xlm-prophetnet"),bTt.forEach(t),LLo=r(cRe," \u2014 "),nO=n(cRe,"A",{href:!0});var vTt=s(nO);yLo=r(vTt,"XLMProphetNetModel"),vTt.forEach(t),xLo=r(cRe," (XLM-ProphetNet model)"),cRe.forEach(t),$Lo=i(x),i2=n(x,"LI",{});var fRe=s(i2);Qge=n(fRe,"STRONG",{});var FTt=s(Qge);kLo=r(FTt,"xlm-roberta"),FTt.forEach(t),SLo=r(fRe," \u2014 "),sO=n(fRe,"A",{href:!0});var TTt=s(sO);RLo=r(TTt,"XLMRobertaModel"),TTt.forEach(t),PLo=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),BLo=i(x),d2=n(x,"LI",{});var mRe=s(d2);Hge=n(mRe,"STRONG",{});var MTt=s(Hge);ILo=r(MTt,"xlm-roberta-xl"),MTt.forEach(t),NLo=r(mRe," \u2014 "),lO=n(mRe,"A",{href:!0});var ETt=s(lO);qLo=r(ETt,"XLMRobertaXLModel"),ETt.forEach(t),jLo=r(mRe," (XLM-RoBERTa-XL model)"),mRe.forEach(t),DLo=i(x),c2=n(x,"LI",{});var gRe=s(c2);Uge=n(gRe,"STRONG",{});var CTt=s(Uge);GLo=r(CTt,"xlnet"),CTt.forEach(t),OLo=r(gRe," \u2014 "),iO=n(gRe,"A",{href:!0});var wTt=s(iO);VLo=r(wTt,"XLNetModel"),wTt.forEach(t),XLo=r(gRe," (XLNet model)"),gRe.forEach(t),zLo=i(x),f2=n(x,"LI",{});var hRe=s(f2);Jge=n(hRe,"STRONG",{});var ATt=s(Jge);WLo=r(ATt,"yolos"),ATt.forEach(t),QLo=r(hRe," \u2014 "),dO=n(hRe,"A",{href:!0});var LTt=s(dO);HLo=r(LTt,"YolosModel"),LTt.forEach(t),ULo=r(hRe," (YOLOS model)"),hRe.forEach(t),JLo=i(x),m2=n(x,"LI",{});var pRe=s(m2);Yge=n(pRe,"STRONG",{});var yTt=s(Yge);YLo=r(yTt,"yoso"),yTt.forEach(t),KLo=r(pRe," \u2014 "),cO=n(pRe,"A",{href:!0});var xTt=s(cO);ZLo=r(xTt,"YosoModel"),xTt.forEach(t),eyo=r(pRe," (YOSO model)"),pRe.forEach(t),x.forEach(t),oyo=i(ca),g2=n(ca,"P",{});var _Re=s(g2);ryo=r(_Re,"The model is set in evaluation mode by default using "),Kge=n(_Re,"CODE",{});var $Tt=s(Kge);tyo=r($Tt,"model.eval()"),$Tt.forEach(t),ayo=r(_Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(_Re,"CODE",{});var kTt=s(Zge);nyo=r(kTt,"model.train()"),kTt.forEach(t),_Re.forEach(t),syo=i(ca),T(h2.$$.fragment,ca),ca.forEach(t),cl.forEach(t),JWe=i(f),Zi=n(f,"H2",{class:!0});var aUe=s(Zi);p2=n(aUe,"A",{id:!0,class:!0,href:!0});var STt=s(p2);ehe=n(STt,"SPAN",{});var RTt=s(ehe);T(EL.$$.fragment,RTt),RTt.forEach(t),STt.forEach(t),lyo=i(aUe),ohe=n(aUe,"SPAN",{});var PTt=s(ohe);iyo=r(PTt,"AutoModelForPreTraining"),PTt.forEach(t),aUe.forEach(t),YWe=i(f),Ro=n(f,"DIV",{class:!0});var fl=s(Ro);T(CL.$$.fragment,fl),dyo=i(fl),ed=n(fl,"P",{});var sae=s(ed);cyo=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fO=n(sae,"A",{href:!0});var BTt=s(fO);fyo=r(BTt,"from_pretrained()"),BTt.forEach(t),myo=r(sae," class method or the "),mO=n(sae,"A",{href:!0});var ITt=s(mO);gyo=r(ITt,"from_config()"),ITt.forEach(t),hyo=r(sae,` class
method.`),sae.forEach(t),pyo=i(fl),wL=n(fl,"P",{});var nUe=s(wL);_yo=r(nUe,"This class cannot be instantiated directly using "),rhe=n(nUe,"CODE",{});var NTt=s(rhe);uyo=r(NTt,"__init__()"),NTt.forEach(t),byo=r(nUe," (throws an error)."),nUe.forEach(t),vyo=i(fl),ft=n(fl,"DIV",{class:!0});var U6=s(ft);T(AL.$$.fragment,U6),Fyo=i(U6),the=n(U6,"P",{});var qTt=s(the);Tyo=r(qTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qTt.forEach(t),Myo=i(U6),od=n(U6,"P",{});var lae=s(od);Eyo=r(lae,`Note:
Loading a model from its configuration file does `),ahe=n(lae,"STRONG",{});var jTt=s(ahe);Cyo=r(jTt,"not"),jTt.forEach(t),wyo=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(lae,"A",{href:!0});var DTt=s(gO);Ayo=r(DTt,"from_pretrained()"),DTt.forEach(t),Lyo=r(lae," to load the model weights."),lae.forEach(t),yyo=i(U6),T(_2.$$.fragment,U6),U6.forEach(t),xyo=i(fl),Ke=n(fl,"DIV",{class:!0});var fa=s(Ke);T(LL.$$.fragment,fa),$yo=i(fa),nhe=n(fa,"P",{});var GTt=s(nhe);kyo=r(GTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GTt.forEach(t),Syo=i(fa),Ga=n(fa,"P",{});var J6=s(Ga);Ryo=r(J6,"The model class to instantiate is selected based on the "),she=n(J6,"CODE",{});var OTt=s(she);Pyo=r(OTt,"model_type"),OTt.forEach(t),Byo=r(J6,` property of the config object (either
passed as an argument or loaded from `),lhe=n(J6,"CODE",{});var VTt=s(lhe);Iyo=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),Nyo=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(J6,"CODE",{});var XTt=s(ihe);qyo=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),jyo=r(J6,":"),J6.forEach(t),Dyo=i(fa),G=n(fa,"UL",{});var O=s(G);u2=n(O,"LI",{});var uRe=s(u2);dhe=n(uRe,"STRONG",{});var zTt=s(dhe);Gyo=r(zTt,"albert"),zTt.forEach(t),Oyo=r(uRe," \u2014 "),hO=n(uRe,"A",{href:!0});var WTt=s(hO);Vyo=r(WTt,"AlbertForPreTraining"),WTt.forEach(t),Xyo=r(uRe," (ALBERT model)"),uRe.forEach(t),zyo=i(O),b2=n(O,"LI",{});var bRe=s(b2);che=n(bRe,"STRONG",{});var QTt=s(che);Wyo=r(QTt,"bart"),QTt.forEach(t),Qyo=r(bRe," \u2014 "),pO=n(bRe,"A",{href:!0});var HTt=s(pO);Hyo=r(HTt,"BartForConditionalGeneration"),HTt.forEach(t),Uyo=r(bRe," (BART model)"),bRe.forEach(t),Jyo=i(O),v2=n(O,"LI",{});var vRe=s(v2);fhe=n(vRe,"STRONG",{});var UTt=s(fhe);Yyo=r(UTt,"bert"),UTt.forEach(t),Kyo=r(vRe," \u2014 "),_O=n(vRe,"A",{href:!0});var JTt=s(_O);Zyo=r(JTt,"BertForPreTraining"),JTt.forEach(t),exo=r(vRe," (BERT model)"),vRe.forEach(t),oxo=i(O),F2=n(O,"LI",{});var FRe=s(F2);mhe=n(FRe,"STRONG",{});var YTt=s(mhe);rxo=r(YTt,"big_bird"),YTt.forEach(t),txo=r(FRe," \u2014 "),uO=n(FRe,"A",{href:!0});var KTt=s(uO);axo=r(KTt,"BigBirdForPreTraining"),KTt.forEach(t),nxo=r(FRe," (BigBird model)"),FRe.forEach(t),sxo=i(O),T2=n(O,"LI",{});var TRe=s(T2);ghe=n(TRe,"STRONG",{});var ZTt=s(ghe);lxo=r(ZTt,"bloom"),ZTt.forEach(t),ixo=r(TRe," \u2014 "),bO=n(TRe,"A",{href:!0});var e8t=s(bO);dxo=r(e8t,"BloomForCausalLM"),e8t.forEach(t),cxo=r(TRe," (BLOOM model)"),TRe.forEach(t),fxo=i(O),M2=n(O,"LI",{});var MRe=s(M2);hhe=n(MRe,"STRONG",{});var o8t=s(hhe);mxo=r(o8t,"camembert"),o8t.forEach(t),gxo=r(MRe," \u2014 "),vO=n(MRe,"A",{href:!0});var r8t=s(vO);hxo=r(r8t,"CamembertForMaskedLM"),r8t.forEach(t),pxo=r(MRe," (CamemBERT model)"),MRe.forEach(t),_xo=i(O),E2=n(O,"LI",{});var ERe=s(E2);phe=n(ERe,"STRONG",{});var t8t=s(phe);uxo=r(t8t,"ctrl"),t8t.forEach(t),bxo=r(ERe," \u2014 "),FO=n(ERe,"A",{href:!0});var a8t=s(FO);vxo=r(a8t,"CTRLLMHeadModel"),a8t.forEach(t),Fxo=r(ERe," (CTRL model)"),ERe.forEach(t),Txo=i(O),C2=n(O,"LI",{});var CRe=s(C2);_he=n(CRe,"STRONG",{});var n8t=s(_he);Mxo=r(n8t,"data2vec-text"),n8t.forEach(t),Exo=r(CRe," \u2014 "),TO=n(CRe,"A",{href:!0});var s8t=s(TO);Cxo=r(s8t,"Data2VecTextForMaskedLM"),s8t.forEach(t),wxo=r(CRe," (Data2VecText model)"),CRe.forEach(t),Axo=i(O),w2=n(O,"LI",{});var wRe=s(w2);uhe=n(wRe,"STRONG",{});var l8t=s(uhe);Lxo=r(l8t,"deberta"),l8t.forEach(t),yxo=r(wRe," \u2014 "),MO=n(wRe,"A",{href:!0});var i8t=s(MO);xxo=r(i8t,"DebertaForMaskedLM"),i8t.forEach(t),$xo=r(wRe," (DeBERTa model)"),wRe.forEach(t),kxo=i(O),A2=n(O,"LI",{});var ARe=s(A2);bhe=n(ARe,"STRONG",{});var d8t=s(bhe);Sxo=r(d8t,"deberta-v2"),d8t.forEach(t),Rxo=r(ARe," \u2014 "),EO=n(ARe,"A",{href:!0});var c8t=s(EO);Pxo=r(c8t,"DebertaV2ForMaskedLM"),c8t.forEach(t),Bxo=r(ARe," (DeBERTa-v2 model)"),ARe.forEach(t),Ixo=i(O),L2=n(O,"LI",{});var LRe=s(L2);vhe=n(LRe,"STRONG",{});var f8t=s(vhe);Nxo=r(f8t,"distilbert"),f8t.forEach(t),qxo=r(LRe," \u2014 "),CO=n(LRe,"A",{href:!0});var m8t=s(CO);jxo=r(m8t,"DistilBertForMaskedLM"),m8t.forEach(t),Dxo=r(LRe," (DistilBERT model)"),LRe.forEach(t),Gxo=i(O),y2=n(O,"LI",{});var yRe=s(y2);Fhe=n(yRe,"STRONG",{});var g8t=s(Fhe);Oxo=r(g8t,"electra"),g8t.forEach(t),Vxo=r(yRe," \u2014 "),wO=n(yRe,"A",{href:!0});var h8t=s(wO);Xxo=r(h8t,"ElectraForPreTraining"),h8t.forEach(t),zxo=r(yRe," (ELECTRA model)"),yRe.forEach(t),Wxo=i(O),x2=n(O,"LI",{});var xRe=s(x2);The=n(xRe,"STRONG",{});var p8t=s(The);Qxo=r(p8t,"flaubert"),p8t.forEach(t),Hxo=r(xRe," \u2014 "),AO=n(xRe,"A",{href:!0});var _8t=s(AO);Uxo=r(_8t,"FlaubertWithLMHeadModel"),_8t.forEach(t),Jxo=r(xRe," (FlauBERT model)"),xRe.forEach(t),Yxo=i(O),$2=n(O,"LI",{});var $Re=s($2);Mhe=n($Re,"STRONG",{});var u8t=s(Mhe);Kxo=r(u8t,"flava"),u8t.forEach(t),Zxo=r($Re," \u2014 "),LO=n($Re,"A",{href:!0});var b8t=s(LO);e$o=r(b8t,"FlavaForPreTraining"),b8t.forEach(t),o$o=r($Re," (FLAVA model)"),$Re.forEach(t),r$o=i(O),k2=n(O,"LI",{});var kRe=s(k2);Ehe=n(kRe,"STRONG",{});var v8t=s(Ehe);t$o=r(v8t,"fnet"),v8t.forEach(t),a$o=r(kRe," \u2014 "),yO=n(kRe,"A",{href:!0});var F8t=s(yO);n$o=r(F8t,"FNetForPreTraining"),F8t.forEach(t),s$o=r(kRe," (FNet model)"),kRe.forEach(t),l$o=i(O),S2=n(O,"LI",{});var SRe=s(S2);Che=n(SRe,"STRONG",{});var T8t=s(Che);i$o=r(T8t,"fsmt"),T8t.forEach(t),d$o=r(SRe," \u2014 "),xO=n(SRe,"A",{href:!0});var M8t=s(xO);c$o=r(M8t,"FSMTForConditionalGeneration"),M8t.forEach(t),f$o=r(SRe," (FairSeq Machine-Translation model)"),SRe.forEach(t),m$o=i(O),R2=n(O,"LI",{});var RRe=s(R2);whe=n(RRe,"STRONG",{});var E8t=s(whe);g$o=r(E8t,"funnel"),E8t.forEach(t),h$o=r(RRe," \u2014 "),$O=n(RRe,"A",{href:!0});var C8t=s($O);p$o=r(C8t,"FunnelForPreTraining"),C8t.forEach(t),_$o=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),u$o=i(O),P2=n(O,"LI",{});var PRe=s(P2);Ahe=n(PRe,"STRONG",{});var w8t=s(Ahe);b$o=r(w8t,"gpt2"),w8t.forEach(t),v$o=r(PRe," \u2014 "),kO=n(PRe,"A",{href:!0});var A8t=s(kO);F$o=r(A8t,"GPT2LMHeadModel"),A8t.forEach(t),T$o=r(PRe," (OpenAI GPT-2 model)"),PRe.forEach(t),M$o=i(O),B2=n(O,"LI",{});var BRe=s(B2);Lhe=n(BRe,"STRONG",{});var L8t=s(Lhe);E$o=r(L8t,"ibert"),L8t.forEach(t),C$o=r(BRe," \u2014 "),SO=n(BRe,"A",{href:!0});var y8t=s(SO);w$o=r(y8t,"IBertForMaskedLM"),y8t.forEach(t),A$o=r(BRe," (I-BERT model)"),BRe.forEach(t),L$o=i(O),I2=n(O,"LI",{});var IRe=s(I2);yhe=n(IRe,"STRONG",{});var x8t=s(yhe);y$o=r(x8t,"layoutlm"),x8t.forEach(t),x$o=r(IRe," \u2014 "),RO=n(IRe,"A",{href:!0});var $8t=s(RO);$$o=r($8t,"LayoutLMForMaskedLM"),$8t.forEach(t),k$o=r(IRe," (LayoutLM model)"),IRe.forEach(t),S$o=i(O),N2=n(O,"LI",{});var NRe=s(N2);xhe=n(NRe,"STRONG",{});var k8t=s(xhe);R$o=r(k8t,"longformer"),k8t.forEach(t),P$o=r(NRe," \u2014 "),PO=n(NRe,"A",{href:!0});var S8t=s(PO);B$o=r(S8t,"LongformerForMaskedLM"),S8t.forEach(t),I$o=r(NRe," (Longformer model)"),NRe.forEach(t),N$o=i(O),q2=n(O,"LI",{});var qRe=s(q2);$he=n(qRe,"STRONG",{});var R8t=s($he);q$o=r(R8t,"luke"),R8t.forEach(t),j$o=r(qRe," \u2014 "),BO=n(qRe,"A",{href:!0});var P8t=s(BO);D$o=r(P8t,"LukeForMaskedLM"),P8t.forEach(t),G$o=r(qRe," (LUKE model)"),qRe.forEach(t),O$o=i(O),j2=n(O,"LI",{});var jRe=s(j2);khe=n(jRe,"STRONG",{});var B8t=s(khe);V$o=r(B8t,"lxmert"),B8t.forEach(t),X$o=r(jRe," \u2014 "),IO=n(jRe,"A",{href:!0});var I8t=s(IO);z$o=r(I8t,"LxmertForPreTraining"),I8t.forEach(t),W$o=r(jRe," (LXMERT model)"),jRe.forEach(t),Q$o=i(O),D2=n(O,"LI",{});var DRe=s(D2);She=n(DRe,"STRONG",{});var N8t=s(She);H$o=r(N8t,"megatron-bert"),N8t.forEach(t),U$o=r(DRe," \u2014 "),NO=n(DRe,"A",{href:!0});var q8t=s(NO);J$o=r(q8t,"MegatronBertForPreTraining"),q8t.forEach(t),Y$o=r(DRe," (Megatron-BERT model)"),DRe.forEach(t),K$o=i(O),G2=n(O,"LI",{});var GRe=s(G2);Rhe=n(GRe,"STRONG",{});var j8t=s(Rhe);Z$o=r(j8t,"mobilebert"),j8t.forEach(t),eko=r(GRe," \u2014 "),qO=n(GRe,"A",{href:!0});var D8t=s(qO);oko=r(D8t,"MobileBertForPreTraining"),D8t.forEach(t),rko=r(GRe," (MobileBERT model)"),GRe.forEach(t),tko=i(O),O2=n(O,"LI",{});var ORe=s(O2);Phe=n(ORe,"STRONG",{});var G8t=s(Phe);ako=r(G8t,"mpnet"),G8t.forEach(t),nko=r(ORe," \u2014 "),jO=n(ORe,"A",{href:!0});var O8t=s(jO);sko=r(O8t,"MPNetForMaskedLM"),O8t.forEach(t),lko=r(ORe," (MPNet model)"),ORe.forEach(t),iko=i(O),V2=n(O,"LI",{});var VRe=s(V2);Bhe=n(VRe,"STRONG",{});var V8t=s(Bhe);dko=r(V8t,"mvp"),V8t.forEach(t),cko=r(VRe," \u2014 "),DO=n(VRe,"A",{href:!0});var X8t=s(DO);fko=r(X8t,"MvpForConditionalGeneration"),X8t.forEach(t),mko=r(VRe," (MVP model)"),VRe.forEach(t),gko=i(O),X2=n(O,"LI",{});var XRe=s(X2);Ihe=n(XRe,"STRONG",{});var z8t=s(Ihe);hko=r(z8t,"nezha"),z8t.forEach(t),pko=r(XRe," \u2014 "),GO=n(XRe,"A",{href:!0});var W8t=s(GO);_ko=r(W8t,"NezhaForPreTraining"),W8t.forEach(t),uko=r(XRe," (Nezha model)"),XRe.forEach(t),bko=i(O),z2=n(O,"LI",{});var zRe=s(z2);Nhe=n(zRe,"STRONG",{});var Q8t=s(Nhe);vko=r(Q8t,"openai-gpt"),Q8t.forEach(t),Fko=r(zRe," \u2014 "),OO=n(zRe,"A",{href:!0});var H8t=s(OO);Tko=r(H8t,"OpenAIGPTLMHeadModel"),H8t.forEach(t),Mko=r(zRe," (OpenAI GPT model)"),zRe.forEach(t),Eko=i(O),W2=n(O,"LI",{});var WRe=s(W2);qhe=n(WRe,"STRONG",{});var U8t=s(qhe);Cko=r(U8t,"retribert"),U8t.forEach(t),wko=r(WRe," \u2014 "),VO=n(WRe,"A",{href:!0});var J8t=s(VO);Ako=r(J8t,"RetriBertModel"),J8t.forEach(t),Lko=r(WRe," (RetriBERT model)"),WRe.forEach(t),yko=i(O),Q2=n(O,"LI",{});var QRe=s(Q2);jhe=n(QRe,"STRONG",{});var Y8t=s(jhe);xko=r(Y8t,"roberta"),Y8t.forEach(t),$ko=r(QRe," \u2014 "),XO=n(QRe,"A",{href:!0});var K8t=s(XO);kko=r(K8t,"RobertaForMaskedLM"),K8t.forEach(t),Sko=r(QRe," (RoBERTa model)"),QRe.forEach(t),Rko=i(O),H2=n(O,"LI",{});var HRe=s(H2);Dhe=n(HRe,"STRONG",{});var Z8t=s(Dhe);Pko=r(Z8t,"splinter"),Z8t.forEach(t),Bko=r(HRe," \u2014 "),zO=n(HRe,"A",{href:!0});var e9t=s(zO);Iko=r(e9t,"SplinterForPreTraining"),e9t.forEach(t),Nko=r(HRe," (Splinter model)"),HRe.forEach(t),qko=i(O),U2=n(O,"LI",{});var URe=s(U2);Ghe=n(URe,"STRONG",{});var o9t=s(Ghe);jko=r(o9t,"squeezebert"),o9t.forEach(t),Dko=r(URe," \u2014 "),WO=n(URe,"A",{href:!0});var r9t=s(WO);Gko=r(r9t,"SqueezeBertForMaskedLM"),r9t.forEach(t),Oko=r(URe," (SqueezeBERT model)"),URe.forEach(t),Vko=i(O),J2=n(O,"LI",{});var JRe=s(J2);Ohe=n(JRe,"STRONG",{});var t9t=s(Ohe);Xko=r(t9t,"t5"),t9t.forEach(t),zko=r(JRe," \u2014 "),QO=n(JRe,"A",{href:!0});var a9t=s(QO);Wko=r(a9t,"T5ForConditionalGeneration"),a9t.forEach(t),Qko=r(JRe," (T5 model)"),JRe.forEach(t),Hko=i(O),Y2=n(O,"LI",{});var YRe=s(Y2);Vhe=n(YRe,"STRONG",{});var n9t=s(Vhe);Uko=r(n9t,"tapas"),n9t.forEach(t),Jko=r(YRe," \u2014 "),HO=n(YRe,"A",{href:!0});var s9t=s(HO);Yko=r(s9t,"TapasForMaskedLM"),s9t.forEach(t),Kko=r(YRe," (TAPAS model)"),YRe.forEach(t),Zko=i(O),K2=n(O,"LI",{});var KRe=s(K2);Xhe=n(KRe,"STRONG",{});var l9t=s(Xhe);eSo=r(l9t,"transfo-xl"),l9t.forEach(t),oSo=r(KRe," \u2014 "),UO=n(KRe,"A",{href:!0});var i9t=s(UO);rSo=r(i9t,"TransfoXLLMHeadModel"),i9t.forEach(t),tSo=r(KRe," (Transformer-XL model)"),KRe.forEach(t),aSo=i(O),Z2=n(O,"LI",{});var ZRe=s(Z2);zhe=n(ZRe,"STRONG",{});var d9t=s(zhe);nSo=r(d9t,"unispeech"),d9t.forEach(t),sSo=r(ZRe," \u2014 "),JO=n(ZRe,"A",{href:!0});var c9t=s(JO);lSo=r(c9t,"UniSpeechForPreTraining"),c9t.forEach(t),iSo=r(ZRe," (UniSpeech model)"),ZRe.forEach(t),dSo=i(O),e1=n(O,"LI",{});var ePe=s(e1);Whe=n(ePe,"STRONG",{});var f9t=s(Whe);cSo=r(f9t,"unispeech-sat"),f9t.forEach(t),fSo=r(ePe," \u2014 "),YO=n(ePe,"A",{href:!0});var m9t=s(YO);mSo=r(m9t,"UniSpeechSatForPreTraining"),m9t.forEach(t),gSo=r(ePe," (UniSpeechSat model)"),ePe.forEach(t),hSo=i(O),o1=n(O,"LI",{});var oPe=s(o1);Qhe=n(oPe,"STRONG",{});var g9t=s(Qhe);pSo=r(g9t,"videomae"),g9t.forEach(t),_So=r(oPe," \u2014 "),KO=n(oPe,"A",{href:!0});var h9t=s(KO);uSo=r(h9t,"VideoMAEForPreTraining"),h9t.forEach(t),bSo=r(oPe," (VideoMAE model)"),oPe.forEach(t),vSo=i(O),r1=n(O,"LI",{});var rPe=s(r1);Hhe=n(rPe,"STRONG",{});var p9t=s(Hhe);FSo=r(p9t,"visual_bert"),p9t.forEach(t),TSo=r(rPe," \u2014 "),ZO=n(rPe,"A",{href:!0});var _9t=s(ZO);MSo=r(_9t,"VisualBertForPreTraining"),_9t.forEach(t),ESo=r(rPe," (VisualBERT model)"),rPe.forEach(t),CSo=i(O),t1=n(O,"LI",{});var tPe=s(t1);Uhe=n(tPe,"STRONG",{});var u9t=s(Uhe);wSo=r(u9t,"vit_mae"),u9t.forEach(t),ASo=r(tPe," \u2014 "),eV=n(tPe,"A",{href:!0});var b9t=s(eV);LSo=r(b9t,"ViTMAEForPreTraining"),b9t.forEach(t),ySo=r(tPe," (ViTMAE model)"),tPe.forEach(t),xSo=i(O),a1=n(O,"LI",{});var aPe=s(a1);Jhe=n(aPe,"STRONG",{});var v9t=s(Jhe);$So=r(v9t,"wav2vec2"),v9t.forEach(t),kSo=r(aPe," \u2014 "),oV=n(aPe,"A",{href:!0});var F9t=s(oV);SSo=r(F9t,"Wav2Vec2ForPreTraining"),F9t.forEach(t),RSo=r(aPe," (Wav2Vec2 model)"),aPe.forEach(t),PSo=i(O),n1=n(O,"LI",{});var nPe=s(n1);Yhe=n(nPe,"STRONG",{});var T9t=s(Yhe);BSo=r(T9t,"wav2vec2-conformer"),T9t.forEach(t),ISo=r(nPe," \u2014 "),rV=n(nPe,"A",{href:!0});var M9t=s(rV);NSo=r(M9t,"Wav2Vec2ConformerForPreTraining"),M9t.forEach(t),qSo=r(nPe," (Wav2Vec2-Conformer model)"),nPe.forEach(t),jSo=i(O),s1=n(O,"LI",{});var sPe=s(s1);Khe=n(sPe,"STRONG",{});var E9t=s(Khe);DSo=r(E9t,"xlm"),E9t.forEach(t),GSo=r(sPe," \u2014 "),tV=n(sPe,"A",{href:!0});var C9t=s(tV);OSo=r(C9t,"XLMWithLMHeadModel"),C9t.forEach(t),VSo=r(sPe," (XLM model)"),sPe.forEach(t),XSo=i(O),l1=n(O,"LI",{});var lPe=s(l1);Zhe=n(lPe,"STRONG",{});var w9t=s(Zhe);zSo=r(w9t,"xlm-roberta"),w9t.forEach(t),WSo=r(lPe," \u2014 "),aV=n(lPe,"A",{href:!0});var A9t=s(aV);QSo=r(A9t,"XLMRobertaForMaskedLM"),A9t.forEach(t),HSo=r(lPe," (XLM-RoBERTa model)"),lPe.forEach(t),USo=i(O),i1=n(O,"LI",{});var iPe=s(i1);epe=n(iPe,"STRONG",{});var L9t=s(epe);JSo=r(L9t,"xlm-roberta-xl"),L9t.forEach(t),YSo=r(iPe," \u2014 "),nV=n(iPe,"A",{href:!0});var y9t=s(nV);KSo=r(y9t,"XLMRobertaXLForMaskedLM"),y9t.forEach(t),ZSo=r(iPe," (XLM-RoBERTa-XL model)"),iPe.forEach(t),eRo=i(O),d1=n(O,"LI",{});var dPe=s(d1);ope=n(dPe,"STRONG",{});var x9t=s(ope);oRo=r(x9t,"xlnet"),x9t.forEach(t),rRo=r(dPe," \u2014 "),sV=n(dPe,"A",{href:!0});var $9t=s(sV);tRo=r($9t,"XLNetLMHeadModel"),$9t.forEach(t),aRo=r(dPe," (XLNet model)"),dPe.forEach(t),O.forEach(t),nRo=i(fa),c1=n(fa,"P",{});var cPe=s(c1);sRo=r(cPe,"The model is set in evaluation mode by default using "),rpe=n(cPe,"CODE",{});var k9t=s(rpe);lRo=r(k9t,"model.eval()"),k9t.forEach(t),iRo=r(cPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(cPe,"CODE",{});var S9t=s(tpe);dRo=r(S9t,"model.train()"),S9t.forEach(t),cPe.forEach(t),cRo=i(fa),T(f1.$$.fragment,fa),fa.forEach(t),fl.forEach(t),KWe=i(f),rd=n(f,"H2",{class:!0});var sUe=s(rd);m1=n(sUe,"A",{id:!0,class:!0,href:!0});var R9t=s(m1);ape=n(R9t,"SPAN",{});var P9t=s(ape);T(yL.$$.fragment,P9t),P9t.forEach(t),R9t.forEach(t),fRo=i(sUe),npe=n(sUe,"SPAN",{});var B9t=s(npe);mRo=r(B9t,"AutoModelForCausalLM"),B9t.forEach(t),sUe.forEach(t),ZWe=i(f),Po=n(f,"DIV",{class:!0});var ml=s(Po);T(xL.$$.fragment,ml),gRo=i(ml),td=n(ml,"P",{});var iae=s(td);hRo=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lV=n(iae,"A",{href:!0});var I9t=s(lV);pRo=r(I9t,"from_pretrained()"),I9t.forEach(t),_Ro=r(iae," class method or the "),iV=n(iae,"A",{href:!0});var N9t=s(iV);uRo=r(N9t,"from_config()"),N9t.forEach(t),bRo=r(iae,` class
method.`),iae.forEach(t),vRo=i(ml),$L=n(ml,"P",{});var lUe=s($L);FRo=r(lUe,"This class cannot be instantiated directly using "),spe=n(lUe,"CODE",{});var q9t=s(spe);TRo=r(q9t,"__init__()"),q9t.forEach(t),MRo=r(lUe," (throws an error)."),lUe.forEach(t),ERo=i(ml),mt=n(ml,"DIV",{class:!0});var Y6=s(mt);T(kL.$$.fragment,Y6),CRo=i(Y6),lpe=n(Y6,"P",{});var j9t=s(lpe);wRo=r(j9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j9t.forEach(t),ARo=i(Y6),ad=n(Y6,"P",{});var dae=s(ad);LRo=r(dae,`Note:
Loading a model from its configuration file does `),ipe=n(dae,"STRONG",{});var D9t=s(ipe);yRo=r(D9t,"not"),D9t.forEach(t),xRo=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(dae,"A",{href:!0});var G9t=s(dV);$Ro=r(G9t,"from_pretrained()"),G9t.forEach(t),kRo=r(dae," to load the model weights."),dae.forEach(t),SRo=i(Y6),T(g1.$$.fragment,Y6),Y6.forEach(t),RRo=i(ml),Ze=n(ml,"DIV",{class:!0});var ma=s(Ze);T(SL.$$.fragment,ma),PRo=i(ma),dpe=n(ma,"P",{});var O9t=s(dpe);BRo=r(O9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O9t.forEach(t),IRo=i(ma),Oa=n(ma,"P",{});var K6=s(Oa);NRo=r(K6,"The model class to instantiate is selected based on the "),cpe=n(K6,"CODE",{});var V9t=s(cpe);qRo=r(V9t,"model_type"),V9t.forEach(t),jRo=r(K6,` property of the config object (either
passed as an argument or loaded from `),fpe=n(K6,"CODE",{});var X9t=s(fpe);DRo=r(X9t,"pretrained_model_name_or_path"),X9t.forEach(t),GRo=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(K6,"CODE",{});var z9t=s(mpe);ORo=r(z9t,"pretrained_model_name_or_path"),z9t.forEach(t),VRo=r(K6,":"),K6.forEach(t),XRo=i(ma),z=n(ma,"UL",{});var W=s(z);h1=n(W,"LI",{});var fPe=s(h1);gpe=n(fPe,"STRONG",{});var W9t=s(gpe);zRo=r(W9t,"bart"),W9t.forEach(t),WRo=r(fPe," \u2014 "),cV=n(fPe,"A",{href:!0});var Q9t=s(cV);QRo=r(Q9t,"BartForCausalLM"),Q9t.forEach(t),HRo=r(fPe," (BART model)"),fPe.forEach(t),URo=i(W),p1=n(W,"LI",{});var mPe=s(p1);hpe=n(mPe,"STRONG",{});var H9t=s(hpe);JRo=r(H9t,"bert"),H9t.forEach(t),YRo=r(mPe," \u2014 "),fV=n(mPe,"A",{href:!0});var U9t=s(fV);KRo=r(U9t,"BertLMHeadModel"),U9t.forEach(t),ZRo=r(mPe," (BERT model)"),mPe.forEach(t),ePo=i(W),_1=n(W,"LI",{});var gPe=s(_1);ppe=n(gPe,"STRONG",{});var J9t=s(ppe);oPo=r(J9t,"bert-generation"),J9t.forEach(t),rPo=r(gPe," \u2014 "),mV=n(gPe,"A",{href:!0});var Y9t=s(mV);tPo=r(Y9t,"BertGenerationDecoder"),Y9t.forEach(t),aPo=r(gPe," (Bert Generation model)"),gPe.forEach(t),nPo=i(W),u1=n(W,"LI",{});var hPe=s(u1);_pe=n(hPe,"STRONG",{});var K9t=s(_pe);sPo=r(K9t,"big_bird"),K9t.forEach(t),lPo=r(hPe," \u2014 "),gV=n(hPe,"A",{href:!0});var Z9t=s(gV);iPo=r(Z9t,"BigBirdForCausalLM"),Z9t.forEach(t),dPo=r(hPe," (BigBird model)"),hPe.forEach(t),cPo=i(W),b1=n(W,"LI",{});var pPe=s(b1);upe=n(pPe,"STRONG",{});var eMt=s(upe);fPo=r(eMt,"bigbird_pegasus"),eMt.forEach(t),mPo=r(pPe," \u2014 "),hV=n(pPe,"A",{href:!0});var oMt=s(hV);gPo=r(oMt,"BigBirdPegasusForCausalLM"),oMt.forEach(t),hPo=r(pPe," (BigBird-Pegasus model)"),pPe.forEach(t),pPo=i(W),v1=n(W,"LI",{});var _Pe=s(v1);bpe=n(_Pe,"STRONG",{});var rMt=s(bpe);_Po=r(rMt,"blenderbot"),rMt.forEach(t),uPo=r(_Pe," \u2014 "),pV=n(_Pe,"A",{href:!0});var tMt=s(pV);bPo=r(tMt,"BlenderbotForCausalLM"),tMt.forEach(t),vPo=r(_Pe," (Blenderbot model)"),_Pe.forEach(t),FPo=i(W),F1=n(W,"LI",{});var uPe=s(F1);vpe=n(uPe,"STRONG",{});var aMt=s(vpe);TPo=r(aMt,"blenderbot-small"),aMt.forEach(t),MPo=r(uPe," \u2014 "),_V=n(uPe,"A",{href:!0});var nMt=s(_V);EPo=r(nMt,"BlenderbotSmallForCausalLM"),nMt.forEach(t),CPo=r(uPe," (BlenderbotSmall model)"),uPe.forEach(t),wPo=i(W),T1=n(W,"LI",{});var bPe=s(T1);Fpe=n(bPe,"STRONG",{});var sMt=s(Fpe);APo=r(sMt,"bloom"),sMt.forEach(t),LPo=r(bPe," \u2014 "),uV=n(bPe,"A",{href:!0});var lMt=s(uV);yPo=r(lMt,"BloomForCausalLM"),lMt.forEach(t),xPo=r(bPe," (BLOOM model)"),bPe.forEach(t),$Po=i(W),M1=n(W,"LI",{});var vPe=s(M1);Tpe=n(vPe,"STRONG",{});var iMt=s(Tpe);kPo=r(iMt,"camembert"),iMt.forEach(t),SPo=r(vPe," \u2014 "),bV=n(vPe,"A",{href:!0});var dMt=s(bV);RPo=r(dMt,"CamembertForCausalLM"),dMt.forEach(t),PPo=r(vPe," (CamemBERT model)"),vPe.forEach(t),BPo=i(W),E1=n(W,"LI",{});var FPe=s(E1);Mpe=n(FPe,"STRONG",{});var cMt=s(Mpe);IPo=r(cMt,"codegen"),cMt.forEach(t),NPo=r(FPe," \u2014 "),vV=n(FPe,"A",{href:!0});var fMt=s(vV);qPo=r(fMt,"CodeGenForCausalLM"),fMt.forEach(t),jPo=r(FPe," (CodeGen model)"),FPe.forEach(t),DPo=i(W),C1=n(W,"LI",{});var TPe=s(C1);Epe=n(TPe,"STRONG",{});var mMt=s(Epe);GPo=r(mMt,"ctrl"),mMt.forEach(t),OPo=r(TPe," \u2014 "),FV=n(TPe,"A",{href:!0});var gMt=s(FV);VPo=r(gMt,"CTRLLMHeadModel"),gMt.forEach(t),XPo=r(TPe," (CTRL model)"),TPe.forEach(t),zPo=i(W),w1=n(W,"LI",{});var MPe=s(w1);Cpe=n(MPe,"STRONG",{});var hMt=s(Cpe);WPo=r(hMt,"data2vec-text"),hMt.forEach(t),QPo=r(MPe," \u2014 "),TV=n(MPe,"A",{href:!0});var pMt=s(TV);HPo=r(pMt,"Data2VecTextForCausalLM"),pMt.forEach(t),UPo=r(MPe," (Data2VecText model)"),MPe.forEach(t),JPo=i(W),A1=n(W,"LI",{});var EPe=s(A1);wpe=n(EPe,"STRONG",{});var _Mt=s(wpe);YPo=r(_Mt,"electra"),_Mt.forEach(t),KPo=r(EPe," \u2014 "),MV=n(EPe,"A",{href:!0});var uMt=s(MV);ZPo=r(uMt,"ElectraForCausalLM"),uMt.forEach(t),eBo=r(EPe," (ELECTRA model)"),EPe.forEach(t),oBo=i(W),L1=n(W,"LI",{});var CPe=s(L1);Ape=n(CPe,"STRONG",{});var bMt=s(Ape);rBo=r(bMt,"gpt2"),bMt.forEach(t),tBo=r(CPe," \u2014 "),EV=n(CPe,"A",{href:!0});var vMt=s(EV);aBo=r(vMt,"GPT2LMHeadModel"),vMt.forEach(t),nBo=r(CPe," (OpenAI GPT-2 model)"),CPe.forEach(t),sBo=i(W),y1=n(W,"LI",{});var wPe=s(y1);Lpe=n(wPe,"STRONG",{});var FMt=s(Lpe);lBo=r(FMt,"gpt_neo"),FMt.forEach(t),iBo=r(wPe," \u2014 "),CV=n(wPe,"A",{href:!0});var TMt=s(CV);dBo=r(TMt,"GPTNeoForCausalLM"),TMt.forEach(t),cBo=r(wPe," (GPT Neo model)"),wPe.forEach(t),fBo=i(W),x1=n(W,"LI",{});var APe=s(x1);ype=n(APe,"STRONG",{});var MMt=s(ype);mBo=r(MMt,"gpt_neox"),MMt.forEach(t),gBo=r(APe," \u2014 "),wV=n(APe,"A",{href:!0});var EMt=s(wV);hBo=r(EMt,"GPTNeoXForCausalLM"),EMt.forEach(t),pBo=r(APe," (GPT NeoX model)"),APe.forEach(t),_Bo=i(W),$1=n(W,"LI",{});var LPe=s($1);xpe=n(LPe,"STRONG",{});var CMt=s(xpe);uBo=r(CMt,"gptj"),CMt.forEach(t),bBo=r(LPe," \u2014 "),AV=n(LPe,"A",{href:!0});var wMt=s(AV);vBo=r(wMt,"GPTJForCausalLM"),wMt.forEach(t),FBo=r(LPe," (GPT-J model)"),LPe.forEach(t),TBo=i(W),k1=n(W,"LI",{});var yPe=s(k1);$pe=n(yPe,"STRONG",{});var AMt=s($pe);MBo=r(AMt,"marian"),AMt.forEach(t),EBo=r(yPe," \u2014 "),LV=n(yPe,"A",{href:!0});var LMt=s(LV);CBo=r(LMt,"MarianForCausalLM"),LMt.forEach(t),wBo=r(yPe," (Marian model)"),yPe.forEach(t),ABo=i(W),S1=n(W,"LI",{});var xPe=s(S1);kpe=n(xPe,"STRONG",{});var yMt=s(kpe);LBo=r(yMt,"mbart"),yMt.forEach(t),yBo=r(xPe," \u2014 "),yV=n(xPe,"A",{href:!0});var xMt=s(yV);xBo=r(xMt,"MBartForCausalLM"),xMt.forEach(t),$Bo=r(xPe," (mBART model)"),xPe.forEach(t),kBo=i(W),R1=n(W,"LI",{});var $Pe=s(R1);Spe=n($Pe,"STRONG",{});var $Mt=s(Spe);SBo=r($Mt,"megatron-bert"),$Mt.forEach(t),RBo=r($Pe," \u2014 "),xV=n($Pe,"A",{href:!0});var kMt=s(xV);PBo=r(kMt,"MegatronBertForCausalLM"),kMt.forEach(t),BBo=r($Pe," (Megatron-BERT model)"),$Pe.forEach(t),IBo=i(W),P1=n(W,"LI",{});var kPe=s(P1);Rpe=n(kPe,"STRONG",{});var SMt=s(Rpe);NBo=r(SMt,"mvp"),SMt.forEach(t),qBo=r(kPe," \u2014 "),$V=n(kPe,"A",{href:!0});var RMt=s($V);jBo=r(RMt,"MvpForCausalLM"),RMt.forEach(t),DBo=r(kPe," (MVP model)"),kPe.forEach(t),GBo=i(W),B1=n(W,"LI",{});var SPe=s(B1);Ppe=n(SPe,"STRONG",{});var PMt=s(Ppe);OBo=r(PMt,"openai-gpt"),PMt.forEach(t),VBo=r(SPe," \u2014 "),kV=n(SPe,"A",{href:!0});var BMt=s(kV);XBo=r(BMt,"OpenAIGPTLMHeadModel"),BMt.forEach(t),zBo=r(SPe," (OpenAI GPT model)"),SPe.forEach(t),WBo=i(W),I1=n(W,"LI",{});var RPe=s(I1);Bpe=n(RPe,"STRONG",{});var IMt=s(Bpe);QBo=r(IMt,"opt"),IMt.forEach(t),HBo=r(RPe," \u2014 "),SV=n(RPe,"A",{href:!0});var NMt=s(SV);UBo=r(NMt,"OPTForCausalLM"),NMt.forEach(t),JBo=r(RPe," (OPT model)"),RPe.forEach(t),YBo=i(W),N1=n(W,"LI",{});var PPe=s(N1);Ipe=n(PPe,"STRONG",{});var qMt=s(Ipe);KBo=r(qMt,"pegasus"),qMt.forEach(t),ZBo=r(PPe," \u2014 "),RV=n(PPe,"A",{href:!0});var jMt=s(RV);eIo=r(jMt,"PegasusForCausalLM"),jMt.forEach(t),oIo=r(PPe," (Pegasus model)"),PPe.forEach(t),rIo=i(W),q1=n(W,"LI",{});var BPe=s(q1);Npe=n(BPe,"STRONG",{});var DMt=s(Npe);tIo=r(DMt,"plbart"),DMt.forEach(t),aIo=r(BPe," \u2014 "),PV=n(BPe,"A",{href:!0});var GMt=s(PV);nIo=r(GMt,"PLBartForCausalLM"),GMt.forEach(t),sIo=r(BPe," (PLBart model)"),BPe.forEach(t),lIo=i(W),j1=n(W,"LI",{});var IPe=s(j1);qpe=n(IPe,"STRONG",{});var OMt=s(qpe);iIo=r(OMt,"prophetnet"),OMt.forEach(t),dIo=r(IPe," \u2014 "),BV=n(IPe,"A",{href:!0});var VMt=s(BV);cIo=r(VMt,"ProphetNetForCausalLM"),VMt.forEach(t),fIo=r(IPe," (ProphetNet model)"),IPe.forEach(t),mIo=i(W),D1=n(W,"LI",{});var NPe=s(D1);jpe=n(NPe,"STRONG",{});var XMt=s(jpe);gIo=r(XMt,"qdqbert"),XMt.forEach(t),hIo=r(NPe," \u2014 "),IV=n(NPe,"A",{href:!0});var zMt=s(IV);pIo=r(zMt,"QDQBertLMHeadModel"),zMt.forEach(t),_Io=r(NPe," (QDQBert model)"),NPe.forEach(t),uIo=i(W),G1=n(W,"LI",{});var qPe=s(G1);Dpe=n(qPe,"STRONG",{});var WMt=s(Dpe);bIo=r(WMt,"reformer"),WMt.forEach(t),vIo=r(qPe," \u2014 "),NV=n(qPe,"A",{href:!0});var QMt=s(NV);FIo=r(QMt,"ReformerModelWithLMHead"),QMt.forEach(t),TIo=r(qPe," (Reformer model)"),qPe.forEach(t),MIo=i(W),O1=n(W,"LI",{});var jPe=s(O1);Gpe=n(jPe,"STRONG",{});var HMt=s(Gpe);EIo=r(HMt,"rembert"),HMt.forEach(t),CIo=r(jPe," \u2014 "),qV=n(jPe,"A",{href:!0});var UMt=s(qV);wIo=r(UMt,"RemBertForCausalLM"),UMt.forEach(t),AIo=r(jPe," (RemBERT model)"),jPe.forEach(t),LIo=i(W),V1=n(W,"LI",{});var DPe=s(V1);Ope=n(DPe,"STRONG",{});var JMt=s(Ope);yIo=r(JMt,"roberta"),JMt.forEach(t),xIo=r(DPe," \u2014 "),jV=n(DPe,"A",{href:!0});var YMt=s(jV);$Io=r(YMt,"RobertaForCausalLM"),YMt.forEach(t),kIo=r(DPe," (RoBERTa model)"),DPe.forEach(t),SIo=i(W),X1=n(W,"LI",{});var GPe=s(X1);Vpe=n(GPe,"STRONG",{});var KMt=s(Vpe);RIo=r(KMt,"roformer"),KMt.forEach(t),PIo=r(GPe," \u2014 "),DV=n(GPe,"A",{href:!0});var ZMt=s(DV);BIo=r(ZMt,"RoFormerForCausalLM"),ZMt.forEach(t),IIo=r(GPe," (RoFormer model)"),GPe.forEach(t),NIo=i(W),z1=n(W,"LI",{});var OPe=s(z1);Xpe=n(OPe,"STRONG",{});var eEt=s(Xpe);qIo=r(eEt,"speech_to_text_2"),eEt.forEach(t),jIo=r(OPe," \u2014 "),GV=n(OPe,"A",{href:!0});var oEt=s(GV);DIo=r(oEt,"Speech2Text2ForCausalLM"),oEt.forEach(t),GIo=r(OPe," (Speech2Text2 model)"),OPe.forEach(t),OIo=i(W),W1=n(W,"LI",{});var VPe=s(W1);zpe=n(VPe,"STRONG",{});var rEt=s(zpe);VIo=r(rEt,"transfo-xl"),rEt.forEach(t),XIo=r(VPe," \u2014 "),OV=n(VPe,"A",{href:!0});var tEt=s(OV);zIo=r(tEt,"TransfoXLLMHeadModel"),tEt.forEach(t),WIo=r(VPe," (Transformer-XL model)"),VPe.forEach(t),QIo=i(W),Q1=n(W,"LI",{});var XPe=s(Q1);Wpe=n(XPe,"STRONG",{});var aEt=s(Wpe);HIo=r(aEt,"trocr"),aEt.forEach(t),UIo=r(XPe," \u2014 "),VV=n(XPe,"A",{href:!0});var nEt=s(VV);JIo=r(nEt,"TrOCRForCausalLM"),nEt.forEach(t),YIo=r(XPe," (TrOCR model)"),XPe.forEach(t),KIo=i(W),H1=n(W,"LI",{});var zPe=s(H1);Qpe=n(zPe,"STRONG",{});var sEt=s(Qpe);ZIo=r(sEt,"xglm"),sEt.forEach(t),eNo=r(zPe," \u2014 "),XV=n(zPe,"A",{href:!0});var lEt=s(XV);oNo=r(lEt,"XGLMForCausalLM"),lEt.forEach(t),rNo=r(zPe," (XGLM model)"),zPe.forEach(t),tNo=i(W),U1=n(W,"LI",{});var WPe=s(U1);Hpe=n(WPe,"STRONG",{});var iEt=s(Hpe);aNo=r(iEt,"xlm"),iEt.forEach(t),nNo=r(WPe," \u2014 "),zV=n(WPe,"A",{href:!0});var dEt=s(zV);sNo=r(dEt,"XLMWithLMHeadModel"),dEt.forEach(t),lNo=r(WPe," (XLM model)"),WPe.forEach(t),iNo=i(W),J1=n(W,"LI",{});var QPe=s(J1);Upe=n(QPe,"STRONG",{});var cEt=s(Upe);dNo=r(cEt,"xlm-prophetnet"),cEt.forEach(t),cNo=r(QPe," \u2014 "),WV=n(QPe,"A",{href:!0});var fEt=s(WV);fNo=r(fEt,"XLMProphetNetForCausalLM"),fEt.forEach(t),mNo=r(QPe," (XLM-ProphetNet model)"),QPe.forEach(t),gNo=i(W),Y1=n(W,"LI",{});var HPe=s(Y1);Jpe=n(HPe,"STRONG",{});var mEt=s(Jpe);hNo=r(mEt,"xlm-roberta"),mEt.forEach(t),pNo=r(HPe," \u2014 "),QV=n(HPe,"A",{href:!0});var gEt=s(QV);_No=r(gEt,"XLMRobertaForCausalLM"),gEt.forEach(t),uNo=r(HPe," (XLM-RoBERTa model)"),HPe.forEach(t),bNo=i(W),K1=n(W,"LI",{});var UPe=s(K1);Ype=n(UPe,"STRONG",{});var hEt=s(Ype);vNo=r(hEt,"xlm-roberta-xl"),hEt.forEach(t),FNo=r(UPe," \u2014 "),HV=n(UPe,"A",{href:!0});var pEt=s(HV);TNo=r(pEt,"XLMRobertaXLForCausalLM"),pEt.forEach(t),MNo=r(UPe," (XLM-RoBERTa-XL model)"),UPe.forEach(t),ENo=i(W),Z1=n(W,"LI",{});var JPe=s(Z1);Kpe=n(JPe,"STRONG",{});var _Et=s(Kpe);CNo=r(_Et,"xlnet"),_Et.forEach(t),wNo=r(JPe," \u2014 "),UV=n(JPe,"A",{href:!0});var uEt=s(UV);ANo=r(uEt,"XLNetLMHeadModel"),uEt.forEach(t),LNo=r(JPe," (XLNet model)"),JPe.forEach(t),W.forEach(t),yNo=i(ma),eb=n(ma,"P",{});var YPe=s(eb);xNo=r(YPe,"The model is set in evaluation mode by default using "),Zpe=n(YPe,"CODE",{});var bEt=s(Zpe);$No=r(bEt,"model.eval()"),bEt.forEach(t),kNo=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(YPe,"CODE",{});var vEt=s(e_e);SNo=r(vEt,"model.train()"),vEt.forEach(t),YPe.forEach(t),RNo=i(ma),T(ob.$$.fragment,ma),ma.forEach(t),ml.forEach(t),eQe=i(f),nd=n(f,"H2",{class:!0});var iUe=s(nd);rb=n(iUe,"A",{id:!0,class:!0,href:!0});var FEt=s(rb);o_e=n(FEt,"SPAN",{});var TEt=s(o_e);T(RL.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),PNo=i(iUe),r_e=n(iUe,"SPAN",{});var MEt=s(r_e);BNo=r(MEt,"AutoModelForMaskedLM"),MEt.forEach(t),iUe.forEach(t),oQe=i(f),Bo=n(f,"DIV",{class:!0});var gl=s(Bo);T(PL.$$.fragment,gl),INo=i(gl),sd=n(gl,"P",{});var cae=s(sd);NNo=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JV=n(cae,"A",{href:!0});var EEt=s(JV);qNo=r(EEt,"from_pretrained()"),EEt.forEach(t),jNo=r(cae," class method or the "),YV=n(cae,"A",{href:!0});var CEt=s(YV);DNo=r(CEt,"from_config()"),CEt.forEach(t),GNo=r(cae,` class
method.`),cae.forEach(t),ONo=i(gl),BL=n(gl,"P",{});var dUe=s(BL);VNo=r(dUe,"This class cannot be instantiated directly using "),t_e=n(dUe,"CODE",{});var wEt=s(t_e);XNo=r(wEt,"__init__()"),wEt.forEach(t),zNo=r(dUe," (throws an error)."),dUe.forEach(t),WNo=i(gl),gt=n(gl,"DIV",{class:!0});var Z6=s(gt);T(IL.$$.fragment,Z6),QNo=i(Z6),a_e=n(Z6,"P",{});var AEt=s(a_e);HNo=r(AEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AEt.forEach(t),UNo=i(Z6),ld=n(Z6,"P",{});var fae=s(ld);JNo=r(fae,`Note:
Loading a model from its configuration file does `),n_e=n(fae,"STRONG",{});var LEt=s(n_e);YNo=r(LEt,"not"),LEt.forEach(t),KNo=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(fae,"A",{href:!0});var yEt=s(KV);ZNo=r(yEt,"from_pretrained()"),yEt.forEach(t),eqo=r(fae," to load the model weights."),fae.forEach(t),oqo=i(Z6),T(tb.$$.fragment,Z6),Z6.forEach(t),rqo=i(gl),eo=n(gl,"DIV",{class:!0});var ga=s(eo);T(NL.$$.fragment,ga),tqo=i(ga),s_e=n(ga,"P",{});var xEt=s(s_e);aqo=r(xEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xEt.forEach(t),nqo=i(ga),Va=n(ga,"P",{});var eA=s(Va);sqo=r(eA,"The model class to instantiate is selected based on the "),l_e=n(eA,"CODE",{});var $Et=s(l_e);lqo=r($Et,"model_type"),$Et.forEach(t),iqo=r(eA,` property of the config object (either
passed as an argument or loaded from `),i_e=n(eA,"CODE",{});var kEt=s(i_e);dqo=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),cqo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(eA,"CODE",{});var SEt=s(d_e);fqo=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),mqo=r(eA,":"),eA.forEach(t),gqo=i(ga),Q=n(ga,"UL",{});var J=s(Q);ab=n(J,"LI",{});var KPe=s(ab);c_e=n(KPe,"STRONG",{});var REt=s(c_e);hqo=r(REt,"albert"),REt.forEach(t),pqo=r(KPe," \u2014 "),ZV=n(KPe,"A",{href:!0});var PEt=s(ZV);_qo=r(PEt,"AlbertForMaskedLM"),PEt.forEach(t),uqo=r(KPe," (ALBERT model)"),KPe.forEach(t),bqo=i(J),nb=n(J,"LI",{});var ZPe=s(nb);f_e=n(ZPe,"STRONG",{});var BEt=s(f_e);vqo=r(BEt,"bart"),BEt.forEach(t),Fqo=r(ZPe," \u2014 "),eX=n(ZPe,"A",{href:!0});var IEt=s(eX);Tqo=r(IEt,"BartForConditionalGeneration"),IEt.forEach(t),Mqo=r(ZPe," (BART model)"),ZPe.forEach(t),Eqo=i(J),sb=n(J,"LI",{});var eBe=s(sb);m_e=n(eBe,"STRONG",{});var NEt=s(m_e);Cqo=r(NEt,"bert"),NEt.forEach(t),wqo=r(eBe," \u2014 "),oX=n(eBe,"A",{href:!0});var qEt=s(oX);Aqo=r(qEt,"BertForMaskedLM"),qEt.forEach(t),Lqo=r(eBe," (BERT model)"),eBe.forEach(t),yqo=i(J),lb=n(J,"LI",{});var oBe=s(lb);g_e=n(oBe,"STRONG",{});var jEt=s(g_e);xqo=r(jEt,"big_bird"),jEt.forEach(t),$qo=r(oBe," \u2014 "),rX=n(oBe,"A",{href:!0});var DEt=s(rX);kqo=r(DEt,"BigBirdForMaskedLM"),DEt.forEach(t),Sqo=r(oBe," (BigBird model)"),oBe.forEach(t),Rqo=i(J),ib=n(J,"LI",{});var rBe=s(ib);h_e=n(rBe,"STRONG",{});var GEt=s(h_e);Pqo=r(GEt,"camembert"),GEt.forEach(t),Bqo=r(rBe," \u2014 "),tX=n(rBe,"A",{href:!0});var OEt=s(tX);Iqo=r(OEt,"CamembertForMaskedLM"),OEt.forEach(t),Nqo=r(rBe," (CamemBERT model)"),rBe.forEach(t),qqo=i(J),db=n(J,"LI",{});var tBe=s(db);p_e=n(tBe,"STRONG",{});var VEt=s(p_e);jqo=r(VEt,"convbert"),VEt.forEach(t),Dqo=r(tBe," \u2014 "),aX=n(tBe,"A",{href:!0});var XEt=s(aX);Gqo=r(XEt,"ConvBertForMaskedLM"),XEt.forEach(t),Oqo=r(tBe," (ConvBERT model)"),tBe.forEach(t),Vqo=i(J),cb=n(J,"LI",{});var aBe=s(cb);__e=n(aBe,"STRONG",{});var zEt=s(__e);Xqo=r(zEt,"data2vec-text"),zEt.forEach(t),zqo=r(aBe," \u2014 "),nX=n(aBe,"A",{href:!0});var WEt=s(nX);Wqo=r(WEt,"Data2VecTextForMaskedLM"),WEt.forEach(t),Qqo=r(aBe," (Data2VecText model)"),aBe.forEach(t),Hqo=i(J),fb=n(J,"LI",{});var nBe=s(fb);u_e=n(nBe,"STRONG",{});var QEt=s(u_e);Uqo=r(QEt,"deberta"),QEt.forEach(t),Jqo=r(nBe," \u2014 "),sX=n(nBe,"A",{href:!0});var HEt=s(sX);Yqo=r(HEt,"DebertaForMaskedLM"),HEt.forEach(t),Kqo=r(nBe," (DeBERTa model)"),nBe.forEach(t),Zqo=i(J),mb=n(J,"LI",{});var sBe=s(mb);b_e=n(sBe,"STRONG",{});var UEt=s(b_e);ejo=r(UEt,"deberta-v2"),UEt.forEach(t),ojo=r(sBe," \u2014 "),lX=n(sBe,"A",{href:!0});var JEt=s(lX);rjo=r(JEt,"DebertaV2ForMaskedLM"),JEt.forEach(t),tjo=r(sBe," (DeBERTa-v2 model)"),sBe.forEach(t),ajo=i(J),gb=n(J,"LI",{});var lBe=s(gb);v_e=n(lBe,"STRONG",{});var YEt=s(v_e);njo=r(YEt,"distilbert"),YEt.forEach(t),sjo=r(lBe," \u2014 "),iX=n(lBe,"A",{href:!0});var KEt=s(iX);ljo=r(KEt,"DistilBertForMaskedLM"),KEt.forEach(t),ijo=r(lBe," (DistilBERT model)"),lBe.forEach(t),djo=i(J),hb=n(J,"LI",{});var iBe=s(hb);F_e=n(iBe,"STRONG",{});var ZEt=s(F_e);cjo=r(ZEt,"electra"),ZEt.forEach(t),fjo=r(iBe," \u2014 "),dX=n(iBe,"A",{href:!0});var e4t=s(dX);mjo=r(e4t,"ElectraForMaskedLM"),e4t.forEach(t),gjo=r(iBe," (ELECTRA model)"),iBe.forEach(t),hjo=i(J),pb=n(J,"LI",{});var dBe=s(pb);T_e=n(dBe,"STRONG",{});var o4t=s(T_e);pjo=r(o4t,"flaubert"),o4t.forEach(t),_jo=r(dBe," \u2014 "),cX=n(dBe,"A",{href:!0});var r4t=s(cX);ujo=r(r4t,"FlaubertWithLMHeadModel"),r4t.forEach(t),bjo=r(dBe," (FlauBERT model)"),dBe.forEach(t),vjo=i(J),_b=n(J,"LI",{});var cBe=s(_b);M_e=n(cBe,"STRONG",{});var t4t=s(M_e);Fjo=r(t4t,"fnet"),t4t.forEach(t),Tjo=r(cBe," \u2014 "),fX=n(cBe,"A",{href:!0});var a4t=s(fX);Mjo=r(a4t,"FNetForMaskedLM"),a4t.forEach(t),Ejo=r(cBe," (FNet model)"),cBe.forEach(t),Cjo=i(J),ub=n(J,"LI",{});var fBe=s(ub);E_e=n(fBe,"STRONG",{});var n4t=s(E_e);wjo=r(n4t,"funnel"),n4t.forEach(t),Ajo=r(fBe," \u2014 "),mX=n(fBe,"A",{href:!0});var s4t=s(mX);Ljo=r(s4t,"FunnelForMaskedLM"),s4t.forEach(t),yjo=r(fBe," (Funnel Transformer model)"),fBe.forEach(t),xjo=i(J),bb=n(J,"LI",{});var mBe=s(bb);C_e=n(mBe,"STRONG",{});var l4t=s(C_e);$jo=r(l4t,"ibert"),l4t.forEach(t),kjo=r(mBe," \u2014 "),gX=n(mBe,"A",{href:!0});var i4t=s(gX);Sjo=r(i4t,"IBertForMaskedLM"),i4t.forEach(t),Rjo=r(mBe," (I-BERT model)"),mBe.forEach(t),Pjo=i(J),vb=n(J,"LI",{});var gBe=s(vb);w_e=n(gBe,"STRONG",{});var d4t=s(w_e);Bjo=r(d4t,"layoutlm"),d4t.forEach(t),Ijo=r(gBe," \u2014 "),hX=n(gBe,"A",{href:!0});var c4t=s(hX);Njo=r(c4t,"LayoutLMForMaskedLM"),c4t.forEach(t),qjo=r(gBe," (LayoutLM model)"),gBe.forEach(t),jjo=i(J),Fb=n(J,"LI",{});var hBe=s(Fb);A_e=n(hBe,"STRONG",{});var f4t=s(A_e);Djo=r(f4t,"longformer"),f4t.forEach(t),Gjo=r(hBe," \u2014 "),pX=n(hBe,"A",{href:!0});var m4t=s(pX);Ojo=r(m4t,"LongformerForMaskedLM"),m4t.forEach(t),Vjo=r(hBe," (Longformer model)"),hBe.forEach(t),Xjo=i(J),Tb=n(J,"LI",{});var pBe=s(Tb);L_e=n(pBe,"STRONG",{});var g4t=s(L_e);zjo=r(g4t,"luke"),g4t.forEach(t),Wjo=r(pBe," \u2014 "),_X=n(pBe,"A",{href:!0});var h4t=s(_X);Qjo=r(h4t,"LukeForMaskedLM"),h4t.forEach(t),Hjo=r(pBe," (LUKE model)"),pBe.forEach(t),Ujo=i(J),Mb=n(J,"LI",{});var _Be=s(Mb);y_e=n(_Be,"STRONG",{});var p4t=s(y_e);Jjo=r(p4t,"mbart"),p4t.forEach(t),Yjo=r(_Be," \u2014 "),uX=n(_Be,"A",{href:!0});var _4t=s(uX);Kjo=r(_4t,"MBartForConditionalGeneration"),_4t.forEach(t),Zjo=r(_Be," (mBART model)"),_Be.forEach(t),eDo=i(J),Eb=n(J,"LI",{});var uBe=s(Eb);x_e=n(uBe,"STRONG",{});var u4t=s(x_e);oDo=r(u4t,"megatron-bert"),u4t.forEach(t),rDo=r(uBe," \u2014 "),bX=n(uBe,"A",{href:!0});var b4t=s(bX);tDo=r(b4t,"MegatronBertForMaskedLM"),b4t.forEach(t),aDo=r(uBe," (Megatron-BERT model)"),uBe.forEach(t),nDo=i(J),Cb=n(J,"LI",{});var bBe=s(Cb);$_e=n(bBe,"STRONG",{});var v4t=s($_e);sDo=r(v4t,"mobilebert"),v4t.forEach(t),lDo=r(bBe," \u2014 "),vX=n(bBe,"A",{href:!0});var F4t=s(vX);iDo=r(F4t,"MobileBertForMaskedLM"),F4t.forEach(t),dDo=r(bBe," (MobileBERT model)"),bBe.forEach(t),cDo=i(J),wb=n(J,"LI",{});var vBe=s(wb);k_e=n(vBe,"STRONG",{});var T4t=s(k_e);fDo=r(T4t,"mpnet"),T4t.forEach(t),mDo=r(vBe," \u2014 "),FX=n(vBe,"A",{href:!0});var M4t=s(FX);gDo=r(M4t,"MPNetForMaskedLM"),M4t.forEach(t),hDo=r(vBe," (MPNet model)"),vBe.forEach(t),pDo=i(J),Ab=n(J,"LI",{});var FBe=s(Ab);S_e=n(FBe,"STRONG",{});var E4t=s(S_e);_Do=r(E4t,"mvp"),E4t.forEach(t),uDo=r(FBe," \u2014 "),TX=n(FBe,"A",{href:!0});var C4t=s(TX);bDo=r(C4t,"MvpForConditionalGeneration"),C4t.forEach(t),vDo=r(FBe," (MVP model)"),FBe.forEach(t),FDo=i(J),Lb=n(J,"LI",{});var TBe=s(Lb);R_e=n(TBe,"STRONG",{});var w4t=s(R_e);TDo=r(w4t,"nezha"),w4t.forEach(t),MDo=r(TBe," \u2014 "),MX=n(TBe,"A",{href:!0});var A4t=s(MX);EDo=r(A4t,"NezhaForMaskedLM"),A4t.forEach(t),CDo=r(TBe," (Nezha model)"),TBe.forEach(t),wDo=i(J),yb=n(J,"LI",{});var MBe=s(yb);P_e=n(MBe,"STRONG",{});var L4t=s(P_e);ADo=r(L4t,"nystromformer"),L4t.forEach(t),LDo=r(MBe," \u2014 "),EX=n(MBe,"A",{href:!0});var y4t=s(EX);yDo=r(y4t,"NystromformerForMaskedLM"),y4t.forEach(t),xDo=r(MBe," (Nystr\xF6mformer model)"),MBe.forEach(t),$Do=i(J),xb=n(J,"LI",{});var EBe=s(xb);B_e=n(EBe,"STRONG",{});var x4t=s(B_e);kDo=r(x4t,"perceiver"),x4t.forEach(t),SDo=r(EBe," \u2014 "),CX=n(EBe,"A",{href:!0});var $4t=s(CX);RDo=r($4t,"PerceiverForMaskedLM"),$4t.forEach(t),PDo=r(EBe," (Perceiver model)"),EBe.forEach(t),BDo=i(J),$b=n(J,"LI",{});var CBe=s($b);I_e=n(CBe,"STRONG",{});var k4t=s(I_e);IDo=r(k4t,"qdqbert"),k4t.forEach(t),NDo=r(CBe," \u2014 "),wX=n(CBe,"A",{href:!0});var S4t=s(wX);qDo=r(S4t,"QDQBertForMaskedLM"),S4t.forEach(t),jDo=r(CBe," (QDQBert model)"),CBe.forEach(t),DDo=i(J),kb=n(J,"LI",{});var wBe=s(kb);N_e=n(wBe,"STRONG",{});var R4t=s(N_e);GDo=r(R4t,"reformer"),R4t.forEach(t),ODo=r(wBe," \u2014 "),AX=n(wBe,"A",{href:!0});var P4t=s(AX);VDo=r(P4t,"ReformerForMaskedLM"),P4t.forEach(t),XDo=r(wBe," (Reformer model)"),wBe.forEach(t),zDo=i(J),Sb=n(J,"LI",{});var ABe=s(Sb);q_e=n(ABe,"STRONG",{});var B4t=s(q_e);WDo=r(B4t,"rembert"),B4t.forEach(t),QDo=r(ABe," \u2014 "),LX=n(ABe,"A",{href:!0});var I4t=s(LX);HDo=r(I4t,"RemBertForMaskedLM"),I4t.forEach(t),UDo=r(ABe," (RemBERT model)"),ABe.forEach(t),JDo=i(J),Rb=n(J,"LI",{});var LBe=s(Rb);j_e=n(LBe,"STRONG",{});var N4t=s(j_e);YDo=r(N4t,"roberta"),N4t.forEach(t),KDo=r(LBe," \u2014 "),yX=n(LBe,"A",{href:!0});var q4t=s(yX);ZDo=r(q4t,"RobertaForMaskedLM"),q4t.forEach(t),eGo=r(LBe," (RoBERTa model)"),LBe.forEach(t),oGo=i(J),Pb=n(J,"LI",{});var yBe=s(Pb);D_e=n(yBe,"STRONG",{});var j4t=s(D_e);rGo=r(j4t,"roformer"),j4t.forEach(t),tGo=r(yBe," \u2014 "),xX=n(yBe,"A",{href:!0});var D4t=s(xX);aGo=r(D4t,"RoFormerForMaskedLM"),D4t.forEach(t),nGo=r(yBe," (RoFormer model)"),yBe.forEach(t),sGo=i(J),Bb=n(J,"LI",{});var xBe=s(Bb);G_e=n(xBe,"STRONG",{});var G4t=s(G_e);lGo=r(G4t,"squeezebert"),G4t.forEach(t),iGo=r(xBe," \u2014 "),$X=n(xBe,"A",{href:!0});var O4t=s($X);dGo=r(O4t,"SqueezeBertForMaskedLM"),O4t.forEach(t),cGo=r(xBe," (SqueezeBERT model)"),xBe.forEach(t),fGo=i(J),Ib=n(J,"LI",{});var $Be=s(Ib);O_e=n($Be,"STRONG",{});var V4t=s(O_e);mGo=r(V4t,"tapas"),V4t.forEach(t),gGo=r($Be," \u2014 "),kX=n($Be,"A",{href:!0});var X4t=s(kX);hGo=r(X4t,"TapasForMaskedLM"),X4t.forEach(t),pGo=r($Be," (TAPAS model)"),$Be.forEach(t),_Go=i(J),Nb=n(J,"LI",{});var kBe=s(Nb);V_e=n(kBe,"STRONG",{});var z4t=s(V_e);uGo=r(z4t,"wav2vec2"),z4t.forEach(t),bGo=r(kBe," \u2014 "),X_e=n(kBe,"CODE",{});var W4t=s(X_e);vGo=r(W4t,"Wav2Vec2ForMaskedLM"),W4t.forEach(t),FGo=r(kBe," (Wav2Vec2 model)"),kBe.forEach(t),TGo=i(J),qb=n(J,"LI",{});var SBe=s(qb);z_e=n(SBe,"STRONG",{});var Q4t=s(z_e);MGo=r(Q4t,"xlm"),Q4t.forEach(t),EGo=r(SBe," \u2014 "),SX=n(SBe,"A",{href:!0});var H4t=s(SX);CGo=r(H4t,"XLMWithLMHeadModel"),H4t.forEach(t),wGo=r(SBe," (XLM model)"),SBe.forEach(t),AGo=i(J),jb=n(J,"LI",{});var RBe=s(jb);W_e=n(RBe,"STRONG",{});var U4t=s(W_e);LGo=r(U4t,"xlm-roberta"),U4t.forEach(t),yGo=r(RBe," \u2014 "),RX=n(RBe,"A",{href:!0});var J4t=s(RX);xGo=r(J4t,"XLMRobertaForMaskedLM"),J4t.forEach(t),$Go=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),kGo=i(J),Db=n(J,"LI",{});var PBe=s(Db);Q_e=n(PBe,"STRONG",{});var Y4t=s(Q_e);SGo=r(Y4t,"xlm-roberta-xl"),Y4t.forEach(t),RGo=r(PBe," \u2014 "),PX=n(PBe,"A",{href:!0});var K4t=s(PX);PGo=r(K4t,"XLMRobertaXLForMaskedLM"),K4t.forEach(t),BGo=r(PBe," (XLM-RoBERTa-XL model)"),PBe.forEach(t),IGo=i(J),Gb=n(J,"LI",{});var BBe=s(Gb);H_e=n(BBe,"STRONG",{});var Z4t=s(H_e);NGo=r(Z4t,"yoso"),Z4t.forEach(t),qGo=r(BBe," \u2014 "),BX=n(BBe,"A",{href:!0});var eCt=s(BX);jGo=r(eCt,"YosoForMaskedLM"),eCt.forEach(t),DGo=r(BBe," (YOSO model)"),BBe.forEach(t),J.forEach(t),GGo=i(ga),Ob=n(ga,"P",{});var IBe=s(Ob);OGo=r(IBe,"The model is set in evaluation mode by default using "),U_e=n(IBe,"CODE",{});var oCt=s(U_e);VGo=r(oCt,"model.eval()"),oCt.forEach(t),XGo=r(IBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(IBe,"CODE",{});var rCt=s(J_e);zGo=r(rCt,"model.train()"),rCt.forEach(t),IBe.forEach(t),WGo=i(ga),T(Vb.$$.fragment,ga),ga.forEach(t),gl.forEach(t),rQe=i(f),id=n(f,"H2",{class:!0});var cUe=s(id);Xb=n(cUe,"A",{id:!0,class:!0,href:!0});var tCt=s(Xb);Y_e=n(tCt,"SPAN",{});var aCt=s(Y_e);T(qL.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),QGo=i(cUe),K_e=n(cUe,"SPAN",{});var nCt=s(K_e);HGo=r(nCt,"AutoModelForSeq2SeqLM"),nCt.forEach(t),cUe.forEach(t),tQe=i(f),Io=n(f,"DIV",{class:!0});var hl=s(Io);T(jL.$$.fragment,hl),UGo=i(hl),dd=n(hl,"P",{});var mae=s(dd);JGo=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=n(mae,"A",{href:!0});var sCt=s(IX);YGo=r(sCt,"from_pretrained()"),sCt.forEach(t),KGo=r(mae," class method or the "),NX=n(mae,"A",{href:!0});var lCt=s(NX);ZGo=r(lCt,"from_config()"),lCt.forEach(t),eOo=r(mae,` class
method.`),mae.forEach(t),oOo=i(hl),DL=n(hl,"P",{});var fUe=s(DL);rOo=r(fUe,"This class cannot be instantiated directly using "),Z_e=n(fUe,"CODE",{});var iCt=s(Z_e);tOo=r(iCt,"__init__()"),iCt.forEach(t),aOo=r(fUe," (throws an error)."),fUe.forEach(t),nOo=i(hl),ht=n(hl,"DIV",{class:!0});var oA=s(ht);T(GL.$$.fragment,oA),sOo=i(oA),eue=n(oA,"P",{});var dCt=s(eue);lOo=r(dCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dCt.forEach(t),iOo=i(oA),cd=n(oA,"P",{});var gae=s(cd);dOo=r(gae,`Note:
Loading a model from its configuration file does `),oue=n(gae,"STRONG",{});var cCt=s(oue);cOo=r(cCt,"not"),cCt.forEach(t),fOo=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(gae,"A",{href:!0});var fCt=s(qX);mOo=r(fCt,"from_pretrained()"),fCt.forEach(t),gOo=r(gae," to load the model weights."),gae.forEach(t),hOo=i(oA),T(zb.$$.fragment,oA),oA.forEach(t),pOo=i(hl),oo=n(hl,"DIV",{class:!0});var ha=s(oo);T(OL.$$.fragment,ha),_Oo=i(ha),rue=n(ha,"P",{});var mCt=s(rue);uOo=r(mCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mCt.forEach(t),bOo=i(ha),Xa=n(ha,"P",{});var rA=s(Xa);vOo=r(rA,"The model class to instantiate is selected based on the "),tue=n(rA,"CODE",{});var gCt=s(tue);FOo=r(gCt,"model_type"),gCt.forEach(t),TOo=r(rA,` property of the config object (either
passed as an argument or loaded from `),aue=n(rA,"CODE",{});var hCt=s(aue);MOo=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),EOo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(rA,"CODE",{});var pCt=s(nue);COo=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),wOo=r(rA,":"),rA.forEach(t),AOo=i(ha),me=n(ha,"UL",{});var ue=s(me);Wb=n(ue,"LI",{});var NBe=s(Wb);sue=n(NBe,"STRONG",{});var _Ct=s(sue);LOo=r(_Ct,"bart"),_Ct.forEach(t),yOo=r(NBe," \u2014 "),jX=n(NBe,"A",{href:!0});var uCt=s(jX);xOo=r(uCt,"BartForConditionalGeneration"),uCt.forEach(t),$Oo=r(NBe," (BART model)"),NBe.forEach(t),kOo=i(ue),Qb=n(ue,"LI",{});var qBe=s(Qb);lue=n(qBe,"STRONG",{});var bCt=s(lue);SOo=r(bCt,"bigbird_pegasus"),bCt.forEach(t),ROo=r(qBe," \u2014 "),DX=n(qBe,"A",{href:!0});var vCt=s(DX);POo=r(vCt,"BigBirdPegasusForConditionalGeneration"),vCt.forEach(t),BOo=r(qBe," (BigBird-Pegasus model)"),qBe.forEach(t),IOo=i(ue),Hb=n(ue,"LI",{});var jBe=s(Hb);iue=n(jBe,"STRONG",{});var FCt=s(iue);NOo=r(FCt,"blenderbot"),FCt.forEach(t),qOo=r(jBe," \u2014 "),GX=n(jBe,"A",{href:!0});var TCt=s(GX);jOo=r(TCt,"BlenderbotForConditionalGeneration"),TCt.forEach(t),DOo=r(jBe," (Blenderbot model)"),jBe.forEach(t),GOo=i(ue),Ub=n(ue,"LI",{});var DBe=s(Ub);due=n(DBe,"STRONG",{});var MCt=s(due);OOo=r(MCt,"blenderbot-small"),MCt.forEach(t),VOo=r(DBe," \u2014 "),OX=n(DBe,"A",{href:!0});var ECt=s(OX);XOo=r(ECt,"BlenderbotSmallForConditionalGeneration"),ECt.forEach(t),zOo=r(DBe," (BlenderbotSmall model)"),DBe.forEach(t),WOo=i(ue),Jb=n(ue,"LI",{});var GBe=s(Jb);cue=n(GBe,"STRONG",{});var CCt=s(cue);QOo=r(CCt,"encoder-decoder"),CCt.forEach(t),HOo=r(GBe," \u2014 "),VX=n(GBe,"A",{href:!0});var wCt=s(VX);UOo=r(wCt,"EncoderDecoderModel"),wCt.forEach(t),JOo=r(GBe," (Encoder decoder model)"),GBe.forEach(t),YOo=i(ue),Yb=n(ue,"LI",{});var OBe=s(Yb);fue=n(OBe,"STRONG",{});var ACt=s(fue);KOo=r(ACt,"fsmt"),ACt.forEach(t),ZOo=r(OBe," \u2014 "),XX=n(OBe,"A",{href:!0});var LCt=s(XX);eVo=r(LCt,"FSMTForConditionalGeneration"),LCt.forEach(t),oVo=r(OBe," (FairSeq Machine-Translation model)"),OBe.forEach(t),rVo=i(ue),Kb=n(ue,"LI",{});var VBe=s(Kb);mue=n(VBe,"STRONG",{});var yCt=s(mue);tVo=r(yCt,"led"),yCt.forEach(t),aVo=r(VBe," \u2014 "),zX=n(VBe,"A",{href:!0});var xCt=s(zX);nVo=r(xCt,"LEDForConditionalGeneration"),xCt.forEach(t),sVo=r(VBe," (LED model)"),VBe.forEach(t),lVo=i(ue),Zb=n(ue,"LI",{});var XBe=s(Zb);gue=n(XBe,"STRONG",{});var $Ct=s(gue);iVo=r($Ct,"longt5"),$Ct.forEach(t),dVo=r(XBe," \u2014 "),WX=n(XBe,"A",{href:!0});var kCt=s(WX);cVo=r(kCt,"LongT5ForConditionalGeneration"),kCt.forEach(t),fVo=r(XBe," (LongT5 model)"),XBe.forEach(t),mVo=i(ue),ev=n(ue,"LI",{});var zBe=s(ev);hue=n(zBe,"STRONG",{});var SCt=s(hue);gVo=r(SCt,"m2m_100"),SCt.forEach(t),hVo=r(zBe," \u2014 "),QX=n(zBe,"A",{href:!0});var RCt=s(QX);pVo=r(RCt,"M2M100ForConditionalGeneration"),RCt.forEach(t),_Vo=r(zBe," (M2M100 model)"),zBe.forEach(t),uVo=i(ue),ov=n(ue,"LI",{});var WBe=s(ov);pue=n(WBe,"STRONG",{});var PCt=s(pue);bVo=r(PCt,"marian"),PCt.forEach(t),vVo=r(WBe," \u2014 "),HX=n(WBe,"A",{href:!0});var BCt=s(HX);FVo=r(BCt,"MarianMTModel"),BCt.forEach(t),TVo=r(WBe," (Marian model)"),WBe.forEach(t),MVo=i(ue),rv=n(ue,"LI",{});var QBe=s(rv);_ue=n(QBe,"STRONG",{});var ICt=s(_ue);EVo=r(ICt,"mbart"),ICt.forEach(t),CVo=r(QBe," \u2014 "),UX=n(QBe,"A",{href:!0});var NCt=s(UX);wVo=r(NCt,"MBartForConditionalGeneration"),NCt.forEach(t),AVo=r(QBe," (mBART model)"),QBe.forEach(t),LVo=i(ue),tv=n(ue,"LI",{});var HBe=s(tv);uue=n(HBe,"STRONG",{});var qCt=s(uue);yVo=r(qCt,"mt5"),qCt.forEach(t),xVo=r(HBe," \u2014 "),JX=n(HBe,"A",{href:!0});var jCt=s(JX);$Vo=r(jCt,"MT5ForConditionalGeneration"),jCt.forEach(t),kVo=r(HBe," (MT5 model)"),HBe.forEach(t),SVo=i(ue),av=n(ue,"LI",{});var UBe=s(av);bue=n(UBe,"STRONG",{});var DCt=s(bue);RVo=r(DCt,"mvp"),DCt.forEach(t),PVo=r(UBe," \u2014 "),YX=n(UBe,"A",{href:!0});var GCt=s(YX);BVo=r(GCt,"MvpForConditionalGeneration"),GCt.forEach(t),IVo=r(UBe," (MVP model)"),UBe.forEach(t),NVo=i(ue),nv=n(ue,"LI",{});var JBe=s(nv);vue=n(JBe,"STRONG",{});var OCt=s(vue);qVo=r(OCt,"nllb"),OCt.forEach(t),jVo=r(JBe," \u2014 "),KX=n(JBe,"A",{href:!0});var VCt=s(KX);DVo=r(VCt,"M2M100ForConditionalGeneration"),VCt.forEach(t),GVo=r(JBe," (NLLB model)"),JBe.forEach(t),OVo=i(ue),sv=n(ue,"LI",{});var YBe=s(sv);Fue=n(YBe,"STRONG",{});var XCt=s(Fue);VVo=r(XCt,"pegasus"),XCt.forEach(t),XVo=r(YBe," \u2014 "),ZX=n(YBe,"A",{href:!0});var zCt=s(ZX);zVo=r(zCt,"PegasusForConditionalGeneration"),zCt.forEach(t),WVo=r(YBe," (Pegasus model)"),YBe.forEach(t),QVo=i(ue),lv=n(ue,"LI",{});var KBe=s(lv);Tue=n(KBe,"STRONG",{});var WCt=s(Tue);HVo=r(WCt,"plbart"),WCt.forEach(t),UVo=r(KBe," \u2014 "),ez=n(KBe,"A",{href:!0});var QCt=s(ez);JVo=r(QCt,"PLBartForConditionalGeneration"),QCt.forEach(t),YVo=r(KBe," (PLBart model)"),KBe.forEach(t),KVo=i(ue),iv=n(ue,"LI",{});var ZBe=s(iv);Mue=n(ZBe,"STRONG",{});var HCt=s(Mue);ZVo=r(HCt,"prophetnet"),HCt.forEach(t),eXo=r(ZBe," \u2014 "),oz=n(ZBe,"A",{href:!0});var UCt=s(oz);oXo=r(UCt,"ProphetNetForConditionalGeneration"),UCt.forEach(t),rXo=r(ZBe," (ProphetNet model)"),ZBe.forEach(t),tXo=i(ue),dv=n(ue,"LI",{});var eIe=s(dv);Eue=n(eIe,"STRONG",{});var JCt=s(Eue);aXo=r(JCt,"t5"),JCt.forEach(t),nXo=r(eIe," \u2014 "),rz=n(eIe,"A",{href:!0});var YCt=s(rz);sXo=r(YCt,"T5ForConditionalGeneration"),YCt.forEach(t),lXo=r(eIe," (T5 model)"),eIe.forEach(t),iXo=i(ue),cv=n(ue,"LI",{});var oIe=s(cv);Cue=n(oIe,"STRONG",{});var KCt=s(Cue);dXo=r(KCt,"xlm-prophetnet"),KCt.forEach(t),cXo=r(oIe," \u2014 "),tz=n(oIe,"A",{href:!0});var ZCt=s(tz);fXo=r(ZCt,"XLMProphetNetForConditionalGeneration"),ZCt.forEach(t),mXo=r(oIe," (XLM-ProphetNet model)"),oIe.forEach(t),ue.forEach(t),gXo=i(ha),fv=n(ha,"P",{});var rIe=s(fv);hXo=r(rIe,"The model is set in evaluation mode by default using "),wue=n(rIe,"CODE",{});var e3t=s(wue);pXo=r(e3t,"model.eval()"),e3t.forEach(t),_Xo=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(rIe,"CODE",{});var o3t=s(Aue);uXo=r(o3t,"model.train()"),o3t.forEach(t),rIe.forEach(t),bXo=i(ha),T(mv.$$.fragment,ha),ha.forEach(t),hl.forEach(t),aQe=i(f),fd=n(f,"H2",{class:!0});var mUe=s(fd);gv=n(mUe,"A",{id:!0,class:!0,href:!0});var r3t=s(gv);Lue=n(r3t,"SPAN",{});var t3t=s(Lue);T(VL.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),vXo=i(mUe),yue=n(mUe,"SPAN",{});var a3t=s(yue);FXo=r(a3t,"AutoModelForSequenceClassification"),a3t.forEach(t),mUe.forEach(t),nQe=i(f),No=n(f,"DIV",{class:!0});var pl=s(No);T(XL.$$.fragment,pl),TXo=i(pl),md=n(pl,"P",{});var hae=s(md);MXo=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),az=n(hae,"A",{href:!0});var n3t=s(az);EXo=r(n3t,"from_pretrained()"),n3t.forEach(t),CXo=r(hae," class method or the "),nz=n(hae,"A",{href:!0});var s3t=s(nz);wXo=r(s3t,"from_config()"),s3t.forEach(t),AXo=r(hae,` class
method.`),hae.forEach(t),LXo=i(pl),zL=n(pl,"P",{});var gUe=s(zL);yXo=r(gUe,"This class cannot be instantiated directly using "),xue=n(gUe,"CODE",{});var l3t=s(xue);xXo=r(l3t,"__init__()"),l3t.forEach(t),$Xo=r(gUe," (throws an error)."),gUe.forEach(t),kXo=i(pl),pt=n(pl,"DIV",{class:!0});var tA=s(pt);T(WL.$$.fragment,tA),SXo=i(tA),$ue=n(tA,"P",{});var i3t=s($ue);RXo=r(i3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i3t.forEach(t),PXo=i(tA),gd=n(tA,"P",{});var pae=s(gd);BXo=r(pae,`Note:
Loading a model from its configuration file does `),kue=n(pae,"STRONG",{});var d3t=s(kue);IXo=r(d3t,"not"),d3t.forEach(t),NXo=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(pae,"A",{href:!0});var c3t=s(sz);qXo=r(c3t,"from_pretrained()"),c3t.forEach(t),jXo=r(pae," to load the model weights."),pae.forEach(t),DXo=i(tA),T(hv.$$.fragment,tA),tA.forEach(t),GXo=i(pl),ro=n(pl,"DIV",{class:!0});var pa=s(ro);T(QL.$$.fragment,pa),OXo=i(pa),Sue=n(pa,"P",{});var f3t=s(Sue);VXo=r(f3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),f3t.forEach(t),XXo=i(pa),za=n(pa,"P",{});var aA=s(za);zXo=r(aA,"The model class to instantiate is selected based on the "),Rue=n(aA,"CODE",{});var m3t=s(Rue);WXo=r(m3t,"model_type"),m3t.forEach(t),QXo=r(aA,` property of the config object (either
passed as an argument or loaded from `),Pue=n(aA,"CODE",{});var g3t=s(Pue);HXo=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),UXo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(aA,"CODE",{});var h3t=s(Bue);JXo=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),YXo=r(aA,":"),aA.forEach(t),KXo=i(pa),B=n(pa,"UL",{});var j=s(B);pv=n(j,"LI",{});var tIe=s(pv);Iue=n(tIe,"STRONG",{});var p3t=s(Iue);ZXo=r(p3t,"albert"),p3t.forEach(t),ezo=r(tIe," \u2014 "),lz=n(tIe,"A",{href:!0});var _3t=s(lz);ozo=r(_3t,"AlbertForSequenceClassification"),_3t.forEach(t),rzo=r(tIe," (ALBERT model)"),tIe.forEach(t),tzo=i(j),_v=n(j,"LI",{});var aIe=s(_v);Nue=n(aIe,"STRONG",{});var u3t=s(Nue);azo=r(u3t,"bart"),u3t.forEach(t),nzo=r(aIe," \u2014 "),iz=n(aIe,"A",{href:!0});var b3t=s(iz);szo=r(b3t,"BartForSequenceClassification"),b3t.forEach(t),lzo=r(aIe," (BART model)"),aIe.forEach(t),izo=i(j),uv=n(j,"LI",{});var nIe=s(uv);que=n(nIe,"STRONG",{});var v3t=s(que);dzo=r(v3t,"bert"),v3t.forEach(t),czo=r(nIe," \u2014 "),dz=n(nIe,"A",{href:!0});var F3t=s(dz);fzo=r(F3t,"BertForSequenceClassification"),F3t.forEach(t),mzo=r(nIe," (BERT model)"),nIe.forEach(t),gzo=i(j),bv=n(j,"LI",{});var sIe=s(bv);jue=n(sIe,"STRONG",{});var T3t=s(jue);hzo=r(T3t,"big_bird"),T3t.forEach(t),pzo=r(sIe," \u2014 "),cz=n(sIe,"A",{href:!0});var M3t=s(cz);_zo=r(M3t,"BigBirdForSequenceClassification"),M3t.forEach(t),uzo=r(sIe," (BigBird model)"),sIe.forEach(t),bzo=i(j),vv=n(j,"LI",{});var lIe=s(vv);Due=n(lIe,"STRONG",{});var E3t=s(Due);vzo=r(E3t,"bigbird_pegasus"),E3t.forEach(t),Fzo=r(lIe," \u2014 "),fz=n(lIe,"A",{href:!0});var C3t=s(fz);Tzo=r(C3t,"BigBirdPegasusForSequenceClassification"),C3t.forEach(t),Mzo=r(lIe," (BigBird-Pegasus model)"),lIe.forEach(t),Ezo=i(j),Fv=n(j,"LI",{});var iIe=s(Fv);Gue=n(iIe,"STRONG",{});var w3t=s(Gue);Czo=r(w3t,"bloom"),w3t.forEach(t),wzo=r(iIe," \u2014 "),mz=n(iIe,"A",{href:!0});var A3t=s(mz);Azo=r(A3t,"BloomForSequenceClassification"),A3t.forEach(t),Lzo=r(iIe," (BLOOM model)"),iIe.forEach(t),yzo=i(j),Tv=n(j,"LI",{});var dIe=s(Tv);Oue=n(dIe,"STRONG",{});var L3t=s(Oue);xzo=r(L3t,"camembert"),L3t.forEach(t),$zo=r(dIe," \u2014 "),gz=n(dIe,"A",{href:!0});var y3t=s(gz);kzo=r(y3t,"CamembertForSequenceClassification"),y3t.forEach(t),Szo=r(dIe," (CamemBERT model)"),dIe.forEach(t),Rzo=i(j),Mv=n(j,"LI",{});var cIe=s(Mv);Vue=n(cIe,"STRONG",{});var x3t=s(Vue);Pzo=r(x3t,"canine"),x3t.forEach(t),Bzo=r(cIe," \u2014 "),hz=n(cIe,"A",{href:!0});var $3t=s(hz);Izo=r($3t,"CanineForSequenceClassification"),$3t.forEach(t),Nzo=r(cIe," (CANINE model)"),cIe.forEach(t),qzo=i(j),Ev=n(j,"LI",{});var fIe=s(Ev);Xue=n(fIe,"STRONG",{});var k3t=s(Xue);jzo=r(k3t,"convbert"),k3t.forEach(t),Dzo=r(fIe," \u2014 "),pz=n(fIe,"A",{href:!0});var S3t=s(pz);Gzo=r(S3t,"ConvBertForSequenceClassification"),S3t.forEach(t),Ozo=r(fIe," (ConvBERT model)"),fIe.forEach(t),Vzo=i(j),Cv=n(j,"LI",{});var mIe=s(Cv);zue=n(mIe,"STRONG",{});var R3t=s(zue);Xzo=r(R3t,"ctrl"),R3t.forEach(t),zzo=r(mIe," \u2014 "),_z=n(mIe,"A",{href:!0});var P3t=s(_z);Wzo=r(P3t,"CTRLForSequenceClassification"),P3t.forEach(t),Qzo=r(mIe," (CTRL model)"),mIe.forEach(t),Hzo=i(j),wv=n(j,"LI",{});var gIe=s(wv);Wue=n(gIe,"STRONG",{});var B3t=s(Wue);Uzo=r(B3t,"data2vec-text"),B3t.forEach(t),Jzo=r(gIe," \u2014 "),uz=n(gIe,"A",{href:!0});var I3t=s(uz);Yzo=r(I3t,"Data2VecTextForSequenceClassification"),I3t.forEach(t),Kzo=r(gIe," (Data2VecText model)"),gIe.forEach(t),Zzo=i(j),Av=n(j,"LI",{});var hIe=s(Av);Que=n(hIe,"STRONG",{});var N3t=s(Que);eWo=r(N3t,"deberta"),N3t.forEach(t),oWo=r(hIe," \u2014 "),bz=n(hIe,"A",{href:!0});var q3t=s(bz);rWo=r(q3t,"DebertaForSequenceClassification"),q3t.forEach(t),tWo=r(hIe," (DeBERTa model)"),hIe.forEach(t),aWo=i(j),Lv=n(j,"LI",{});var pIe=s(Lv);Hue=n(pIe,"STRONG",{});var j3t=s(Hue);nWo=r(j3t,"deberta-v2"),j3t.forEach(t),sWo=r(pIe," \u2014 "),vz=n(pIe,"A",{href:!0});var D3t=s(vz);lWo=r(D3t,"DebertaV2ForSequenceClassification"),D3t.forEach(t),iWo=r(pIe," (DeBERTa-v2 model)"),pIe.forEach(t),dWo=i(j),yv=n(j,"LI",{});var _Ie=s(yv);Uue=n(_Ie,"STRONG",{});var G3t=s(Uue);cWo=r(G3t,"distilbert"),G3t.forEach(t),fWo=r(_Ie," \u2014 "),Fz=n(_Ie,"A",{href:!0});var O3t=s(Fz);mWo=r(O3t,"DistilBertForSequenceClassification"),O3t.forEach(t),gWo=r(_Ie," (DistilBERT model)"),_Ie.forEach(t),hWo=i(j),xv=n(j,"LI",{});var uIe=s(xv);Jue=n(uIe,"STRONG",{});var V3t=s(Jue);pWo=r(V3t,"electra"),V3t.forEach(t),_Wo=r(uIe," \u2014 "),Tz=n(uIe,"A",{href:!0});var X3t=s(Tz);uWo=r(X3t,"ElectraForSequenceClassification"),X3t.forEach(t),bWo=r(uIe," (ELECTRA model)"),uIe.forEach(t),vWo=i(j),$v=n(j,"LI",{});var bIe=s($v);Yue=n(bIe,"STRONG",{});var z3t=s(Yue);FWo=r(z3t,"flaubert"),z3t.forEach(t),TWo=r(bIe," \u2014 "),Mz=n(bIe,"A",{href:!0});var W3t=s(Mz);MWo=r(W3t,"FlaubertForSequenceClassification"),W3t.forEach(t),EWo=r(bIe," (FlauBERT model)"),bIe.forEach(t),CWo=i(j),kv=n(j,"LI",{});var vIe=s(kv);Kue=n(vIe,"STRONG",{});var Q3t=s(Kue);wWo=r(Q3t,"fnet"),Q3t.forEach(t),AWo=r(vIe," \u2014 "),Ez=n(vIe,"A",{href:!0});var H3t=s(Ez);LWo=r(H3t,"FNetForSequenceClassification"),H3t.forEach(t),yWo=r(vIe," (FNet model)"),vIe.forEach(t),xWo=i(j),Sv=n(j,"LI",{});var FIe=s(Sv);Zue=n(FIe,"STRONG",{});var U3t=s(Zue);$Wo=r(U3t,"funnel"),U3t.forEach(t),kWo=r(FIe," \u2014 "),Cz=n(FIe,"A",{href:!0});var J3t=s(Cz);SWo=r(J3t,"FunnelForSequenceClassification"),J3t.forEach(t),RWo=r(FIe," (Funnel Transformer model)"),FIe.forEach(t),PWo=i(j),Rv=n(j,"LI",{});var TIe=s(Rv);e2e=n(TIe,"STRONG",{});var Y3t=s(e2e);BWo=r(Y3t,"gpt2"),Y3t.forEach(t),IWo=r(TIe," \u2014 "),wz=n(TIe,"A",{href:!0});var K3t=s(wz);NWo=r(K3t,"GPT2ForSequenceClassification"),K3t.forEach(t),qWo=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),jWo=i(j),Pv=n(j,"LI",{});var MIe=s(Pv);o2e=n(MIe,"STRONG",{});var Z3t=s(o2e);DWo=r(Z3t,"gpt_neo"),Z3t.forEach(t),GWo=r(MIe," \u2014 "),Az=n(MIe,"A",{href:!0});var e0t=s(Az);OWo=r(e0t,"GPTNeoForSequenceClassification"),e0t.forEach(t),VWo=r(MIe," (GPT Neo model)"),MIe.forEach(t),XWo=i(j),Bv=n(j,"LI",{});var EIe=s(Bv);r2e=n(EIe,"STRONG",{});var o0t=s(r2e);zWo=r(o0t,"gptj"),o0t.forEach(t),WWo=r(EIe," \u2014 "),Lz=n(EIe,"A",{href:!0});var r0t=s(Lz);QWo=r(r0t,"GPTJForSequenceClassification"),r0t.forEach(t),HWo=r(EIe," (GPT-J model)"),EIe.forEach(t),UWo=i(j),Iv=n(j,"LI",{});var CIe=s(Iv);t2e=n(CIe,"STRONG",{});var t0t=s(t2e);JWo=r(t0t,"ibert"),t0t.forEach(t),YWo=r(CIe," \u2014 "),yz=n(CIe,"A",{href:!0});var a0t=s(yz);KWo=r(a0t,"IBertForSequenceClassification"),a0t.forEach(t),ZWo=r(CIe," (I-BERT model)"),CIe.forEach(t),eQo=i(j),Nv=n(j,"LI",{});var wIe=s(Nv);a2e=n(wIe,"STRONG",{});var n0t=s(a2e);oQo=r(n0t,"layoutlm"),n0t.forEach(t),rQo=r(wIe," \u2014 "),xz=n(wIe,"A",{href:!0});var s0t=s(xz);tQo=r(s0t,"LayoutLMForSequenceClassification"),s0t.forEach(t),aQo=r(wIe," (LayoutLM model)"),wIe.forEach(t),nQo=i(j),qv=n(j,"LI",{});var AIe=s(qv);n2e=n(AIe,"STRONG",{});var l0t=s(n2e);sQo=r(l0t,"layoutlmv2"),l0t.forEach(t),lQo=r(AIe," \u2014 "),$z=n(AIe,"A",{href:!0});var i0t=s($z);iQo=r(i0t,"LayoutLMv2ForSequenceClassification"),i0t.forEach(t),dQo=r(AIe," (LayoutLMv2 model)"),AIe.forEach(t),cQo=i(j),jv=n(j,"LI",{});var LIe=s(jv);s2e=n(LIe,"STRONG",{});var d0t=s(s2e);fQo=r(d0t,"layoutlmv3"),d0t.forEach(t),mQo=r(LIe," \u2014 "),kz=n(LIe,"A",{href:!0});var c0t=s(kz);gQo=r(c0t,"LayoutLMv3ForSequenceClassification"),c0t.forEach(t),hQo=r(LIe," (LayoutLMv3 model)"),LIe.forEach(t),pQo=i(j),Dv=n(j,"LI",{});var yIe=s(Dv);l2e=n(yIe,"STRONG",{});var f0t=s(l2e);_Qo=r(f0t,"led"),f0t.forEach(t),uQo=r(yIe," \u2014 "),Sz=n(yIe,"A",{href:!0});var m0t=s(Sz);bQo=r(m0t,"LEDForSequenceClassification"),m0t.forEach(t),vQo=r(yIe," (LED model)"),yIe.forEach(t),FQo=i(j),Gv=n(j,"LI",{});var xIe=s(Gv);i2e=n(xIe,"STRONG",{});var g0t=s(i2e);TQo=r(g0t,"longformer"),g0t.forEach(t),MQo=r(xIe," \u2014 "),Rz=n(xIe,"A",{href:!0});var h0t=s(Rz);EQo=r(h0t,"LongformerForSequenceClassification"),h0t.forEach(t),CQo=r(xIe," (Longformer model)"),xIe.forEach(t),wQo=i(j),Ov=n(j,"LI",{});var $Ie=s(Ov);d2e=n($Ie,"STRONG",{});var p0t=s(d2e);AQo=r(p0t,"luke"),p0t.forEach(t),LQo=r($Ie," \u2014 "),Pz=n($Ie,"A",{href:!0});var _0t=s(Pz);yQo=r(_0t,"LukeForSequenceClassification"),_0t.forEach(t),xQo=r($Ie," (LUKE model)"),$Ie.forEach(t),$Qo=i(j),Vv=n(j,"LI",{});var kIe=s(Vv);c2e=n(kIe,"STRONG",{});var u0t=s(c2e);kQo=r(u0t,"mbart"),u0t.forEach(t),SQo=r(kIe," \u2014 "),Bz=n(kIe,"A",{href:!0});var b0t=s(Bz);RQo=r(b0t,"MBartForSequenceClassification"),b0t.forEach(t),PQo=r(kIe," (mBART model)"),kIe.forEach(t),BQo=i(j),Xv=n(j,"LI",{});var SIe=s(Xv);f2e=n(SIe,"STRONG",{});var v0t=s(f2e);IQo=r(v0t,"megatron-bert"),v0t.forEach(t),NQo=r(SIe," \u2014 "),Iz=n(SIe,"A",{href:!0});var F0t=s(Iz);qQo=r(F0t,"MegatronBertForSequenceClassification"),F0t.forEach(t),jQo=r(SIe," (Megatron-BERT model)"),SIe.forEach(t),DQo=i(j),zv=n(j,"LI",{});var RIe=s(zv);m2e=n(RIe,"STRONG",{});var T0t=s(m2e);GQo=r(T0t,"mobilebert"),T0t.forEach(t),OQo=r(RIe," \u2014 "),Nz=n(RIe,"A",{href:!0});var M0t=s(Nz);VQo=r(M0t,"MobileBertForSequenceClassification"),M0t.forEach(t),XQo=r(RIe," (MobileBERT model)"),RIe.forEach(t),zQo=i(j),Wv=n(j,"LI",{});var PIe=s(Wv);g2e=n(PIe,"STRONG",{});var E0t=s(g2e);WQo=r(E0t,"mpnet"),E0t.forEach(t),QQo=r(PIe," \u2014 "),qz=n(PIe,"A",{href:!0});var C0t=s(qz);HQo=r(C0t,"MPNetForSequenceClassification"),C0t.forEach(t),UQo=r(PIe," (MPNet model)"),PIe.forEach(t),JQo=i(j),Qv=n(j,"LI",{});var BIe=s(Qv);h2e=n(BIe,"STRONG",{});var w0t=s(h2e);YQo=r(w0t,"mvp"),w0t.forEach(t),KQo=r(BIe," \u2014 "),jz=n(BIe,"A",{href:!0});var A0t=s(jz);ZQo=r(A0t,"MvpForSequenceClassification"),A0t.forEach(t),eHo=r(BIe," (MVP model)"),BIe.forEach(t),oHo=i(j),Hv=n(j,"LI",{});var IIe=s(Hv);p2e=n(IIe,"STRONG",{});var L0t=s(p2e);rHo=r(L0t,"nezha"),L0t.forEach(t),tHo=r(IIe," \u2014 "),Dz=n(IIe,"A",{href:!0});var y0t=s(Dz);aHo=r(y0t,"NezhaForSequenceClassification"),y0t.forEach(t),nHo=r(IIe," (Nezha model)"),IIe.forEach(t),sHo=i(j),Uv=n(j,"LI",{});var NIe=s(Uv);_2e=n(NIe,"STRONG",{});var x0t=s(_2e);lHo=r(x0t,"nystromformer"),x0t.forEach(t),iHo=r(NIe," \u2014 "),Gz=n(NIe,"A",{href:!0});var $0t=s(Gz);dHo=r($0t,"NystromformerForSequenceClassification"),$0t.forEach(t),cHo=r(NIe," (Nystr\xF6mformer model)"),NIe.forEach(t),fHo=i(j),Jv=n(j,"LI",{});var qIe=s(Jv);u2e=n(qIe,"STRONG",{});var k0t=s(u2e);mHo=r(k0t,"openai-gpt"),k0t.forEach(t),gHo=r(qIe," \u2014 "),Oz=n(qIe,"A",{href:!0});var S0t=s(Oz);hHo=r(S0t,"OpenAIGPTForSequenceClassification"),S0t.forEach(t),pHo=r(qIe," (OpenAI GPT model)"),qIe.forEach(t),_Ho=i(j),Yv=n(j,"LI",{});var jIe=s(Yv);b2e=n(jIe,"STRONG",{});var R0t=s(b2e);uHo=r(R0t,"opt"),R0t.forEach(t),bHo=r(jIe," \u2014 "),Vz=n(jIe,"A",{href:!0});var P0t=s(Vz);vHo=r(P0t,"OPTForSequenceClassification"),P0t.forEach(t),FHo=r(jIe," (OPT model)"),jIe.forEach(t),THo=i(j),Kv=n(j,"LI",{});var DIe=s(Kv);v2e=n(DIe,"STRONG",{});var B0t=s(v2e);MHo=r(B0t,"perceiver"),B0t.forEach(t),EHo=r(DIe," \u2014 "),Xz=n(DIe,"A",{href:!0});var I0t=s(Xz);CHo=r(I0t,"PerceiverForSequenceClassification"),I0t.forEach(t),wHo=r(DIe," (Perceiver model)"),DIe.forEach(t),AHo=i(j),Zv=n(j,"LI",{});var GIe=s(Zv);F2e=n(GIe,"STRONG",{});var N0t=s(F2e);LHo=r(N0t,"plbart"),N0t.forEach(t),yHo=r(GIe," \u2014 "),zz=n(GIe,"A",{href:!0});var q0t=s(zz);xHo=r(q0t,"PLBartForSequenceClassification"),q0t.forEach(t),$Ho=r(GIe," (PLBart model)"),GIe.forEach(t),kHo=i(j),e5=n(j,"LI",{});var OIe=s(e5);T2e=n(OIe,"STRONG",{});var j0t=s(T2e);SHo=r(j0t,"qdqbert"),j0t.forEach(t),RHo=r(OIe," \u2014 "),Wz=n(OIe,"A",{href:!0});var D0t=s(Wz);PHo=r(D0t,"QDQBertForSequenceClassification"),D0t.forEach(t),BHo=r(OIe," (QDQBert model)"),OIe.forEach(t),IHo=i(j),o5=n(j,"LI",{});var VIe=s(o5);M2e=n(VIe,"STRONG",{});var G0t=s(M2e);NHo=r(G0t,"reformer"),G0t.forEach(t),qHo=r(VIe," \u2014 "),Qz=n(VIe,"A",{href:!0});var O0t=s(Qz);jHo=r(O0t,"ReformerForSequenceClassification"),O0t.forEach(t),DHo=r(VIe," (Reformer model)"),VIe.forEach(t),GHo=i(j),r5=n(j,"LI",{});var XIe=s(r5);E2e=n(XIe,"STRONG",{});var V0t=s(E2e);OHo=r(V0t,"rembert"),V0t.forEach(t),VHo=r(XIe," \u2014 "),Hz=n(XIe,"A",{href:!0});var X0t=s(Hz);XHo=r(X0t,"RemBertForSequenceClassification"),X0t.forEach(t),zHo=r(XIe," (RemBERT model)"),XIe.forEach(t),WHo=i(j),t5=n(j,"LI",{});var zIe=s(t5);C2e=n(zIe,"STRONG",{});var z0t=s(C2e);QHo=r(z0t,"roberta"),z0t.forEach(t),HHo=r(zIe," \u2014 "),Uz=n(zIe,"A",{href:!0});var W0t=s(Uz);UHo=r(W0t,"RobertaForSequenceClassification"),W0t.forEach(t),JHo=r(zIe," (RoBERTa model)"),zIe.forEach(t),YHo=i(j),a5=n(j,"LI",{});var WIe=s(a5);w2e=n(WIe,"STRONG",{});var Q0t=s(w2e);KHo=r(Q0t,"roformer"),Q0t.forEach(t),ZHo=r(WIe," \u2014 "),Jz=n(WIe,"A",{href:!0});var H0t=s(Jz);eUo=r(H0t,"RoFormerForSequenceClassification"),H0t.forEach(t),oUo=r(WIe," (RoFormer model)"),WIe.forEach(t),rUo=i(j),n5=n(j,"LI",{});var QIe=s(n5);A2e=n(QIe,"STRONG",{});var U0t=s(A2e);tUo=r(U0t,"squeezebert"),U0t.forEach(t),aUo=r(QIe," \u2014 "),Yz=n(QIe,"A",{href:!0});var J0t=s(Yz);nUo=r(J0t,"SqueezeBertForSequenceClassification"),J0t.forEach(t),sUo=r(QIe," (SqueezeBERT model)"),QIe.forEach(t),lUo=i(j),s5=n(j,"LI",{});var HIe=s(s5);L2e=n(HIe,"STRONG",{});var Y0t=s(L2e);iUo=r(Y0t,"tapas"),Y0t.forEach(t),dUo=r(HIe," \u2014 "),Kz=n(HIe,"A",{href:!0});var K0t=s(Kz);cUo=r(K0t,"TapasForSequenceClassification"),K0t.forEach(t),fUo=r(HIe," (TAPAS model)"),HIe.forEach(t),mUo=i(j),l5=n(j,"LI",{});var UIe=s(l5);y2e=n(UIe,"STRONG",{});var Z0t=s(y2e);gUo=r(Z0t,"transfo-xl"),Z0t.forEach(t),hUo=r(UIe," \u2014 "),Zz=n(UIe,"A",{href:!0});var ewt=s(Zz);pUo=r(ewt,"TransfoXLForSequenceClassification"),ewt.forEach(t),_Uo=r(UIe," (Transformer-XL model)"),UIe.forEach(t),uUo=i(j),i5=n(j,"LI",{});var JIe=s(i5);x2e=n(JIe,"STRONG",{});var owt=s(x2e);bUo=r(owt,"xlm"),owt.forEach(t),vUo=r(JIe," \u2014 "),eW=n(JIe,"A",{href:!0});var rwt=s(eW);FUo=r(rwt,"XLMForSequenceClassification"),rwt.forEach(t),TUo=r(JIe," (XLM model)"),JIe.forEach(t),MUo=i(j),d5=n(j,"LI",{});var YIe=s(d5);$2e=n(YIe,"STRONG",{});var twt=s($2e);EUo=r(twt,"xlm-roberta"),twt.forEach(t),CUo=r(YIe," \u2014 "),oW=n(YIe,"A",{href:!0});var awt=s(oW);wUo=r(awt,"XLMRobertaForSequenceClassification"),awt.forEach(t),AUo=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),LUo=i(j),c5=n(j,"LI",{});var KIe=s(c5);k2e=n(KIe,"STRONG",{});var nwt=s(k2e);yUo=r(nwt,"xlm-roberta-xl"),nwt.forEach(t),xUo=r(KIe," \u2014 "),rW=n(KIe,"A",{href:!0});var swt=s(rW);$Uo=r(swt,"XLMRobertaXLForSequenceClassification"),swt.forEach(t),kUo=r(KIe," (XLM-RoBERTa-XL model)"),KIe.forEach(t),SUo=i(j),f5=n(j,"LI",{});var ZIe=s(f5);S2e=n(ZIe,"STRONG",{});var lwt=s(S2e);RUo=r(lwt,"xlnet"),lwt.forEach(t),PUo=r(ZIe," \u2014 "),tW=n(ZIe,"A",{href:!0});var iwt=s(tW);BUo=r(iwt,"XLNetForSequenceClassification"),iwt.forEach(t),IUo=r(ZIe," (XLNet model)"),ZIe.forEach(t),NUo=i(j),m5=n(j,"LI",{});var eNe=s(m5);R2e=n(eNe,"STRONG",{});var dwt=s(R2e);qUo=r(dwt,"yoso"),dwt.forEach(t),jUo=r(eNe," \u2014 "),aW=n(eNe,"A",{href:!0});var cwt=s(aW);DUo=r(cwt,"YosoForSequenceClassification"),cwt.forEach(t),GUo=r(eNe," (YOSO model)"),eNe.forEach(t),j.forEach(t),OUo=i(pa),g5=n(pa,"P",{});var oNe=s(g5);VUo=r(oNe,"The model is set in evaluation mode by default using "),P2e=n(oNe,"CODE",{});var fwt=s(P2e);XUo=r(fwt,"model.eval()"),fwt.forEach(t),zUo=r(oNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(oNe,"CODE",{});var mwt=s(B2e);WUo=r(mwt,"model.train()"),mwt.forEach(t),oNe.forEach(t),QUo=i(pa),T(h5.$$.fragment,pa),pa.forEach(t),pl.forEach(t),sQe=i(f),hd=n(f,"H2",{class:!0});var hUe=s(hd);p5=n(hUe,"A",{id:!0,class:!0,href:!0});var gwt=s(p5);I2e=n(gwt,"SPAN",{});var hwt=s(I2e);T(HL.$$.fragment,hwt),hwt.forEach(t),gwt.forEach(t),HUo=i(hUe),N2e=n(hUe,"SPAN",{});var pwt=s(N2e);UUo=r(pwt,"AutoModelForMultipleChoice"),pwt.forEach(t),hUe.forEach(t),lQe=i(f),qo=n(f,"DIV",{class:!0});var _l=s(qo);T(UL.$$.fragment,_l),JUo=i(_l),pd=n(_l,"P",{});var _ae=s(pd);YUo=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nW=n(_ae,"A",{href:!0});var _wt=s(nW);KUo=r(_wt,"from_pretrained()"),_wt.forEach(t),ZUo=r(_ae," class method or the "),sW=n(_ae,"A",{href:!0});var uwt=s(sW);eJo=r(uwt,"from_config()"),uwt.forEach(t),oJo=r(_ae,` class
method.`),_ae.forEach(t),rJo=i(_l),JL=n(_l,"P",{});var pUe=s(JL);tJo=r(pUe,"This class cannot be instantiated directly using "),q2e=n(pUe,"CODE",{});var bwt=s(q2e);aJo=r(bwt,"__init__()"),bwt.forEach(t),nJo=r(pUe," (throws an error)."),pUe.forEach(t),sJo=i(_l),_t=n(_l,"DIV",{class:!0});var nA=s(_t);T(YL.$$.fragment,nA),lJo=i(nA),j2e=n(nA,"P",{});var vwt=s(j2e);iJo=r(vwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vwt.forEach(t),dJo=i(nA),_d=n(nA,"P",{});var uae=s(_d);cJo=r(uae,`Note:
Loading a model from its configuration file does `),D2e=n(uae,"STRONG",{});var Fwt=s(D2e);fJo=r(Fwt,"not"),Fwt.forEach(t),mJo=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(uae,"A",{href:!0});var Twt=s(lW);gJo=r(Twt,"from_pretrained()"),Twt.forEach(t),hJo=r(uae," to load the model weights."),uae.forEach(t),pJo=i(nA),T(_5.$$.fragment,nA),nA.forEach(t),_Jo=i(_l),to=n(_l,"DIV",{class:!0});var _a=s(to);T(KL.$$.fragment,_a),uJo=i(_a),G2e=n(_a,"P",{});var Mwt=s(G2e);bJo=r(Mwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mwt.forEach(t),vJo=i(_a),Wa=n(_a,"P",{});var sA=s(Wa);FJo=r(sA,"The model class to instantiate is selected based on the "),O2e=n(sA,"CODE",{});var Ewt=s(O2e);TJo=r(Ewt,"model_type"),Ewt.forEach(t),MJo=r(sA,` property of the config object (either
passed as an argument or loaded from `),V2e=n(sA,"CODE",{});var Cwt=s(V2e);EJo=r(Cwt,"pretrained_model_name_or_path"),Cwt.forEach(t),CJo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(sA,"CODE",{});var wwt=s(X2e);wJo=r(wwt,"pretrained_model_name_or_path"),wwt.forEach(t),AJo=r(sA,":"),sA.forEach(t),LJo=i(_a),Z=n(_a,"UL",{});var ee=s(Z);u5=n(ee,"LI",{});var rNe=s(u5);z2e=n(rNe,"STRONG",{});var Awt=s(z2e);yJo=r(Awt,"albert"),Awt.forEach(t),xJo=r(rNe," \u2014 "),iW=n(rNe,"A",{href:!0});var Lwt=s(iW);$Jo=r(Lwt,"AlbertForMultipleChoice"),Lwt.forEach(t),kJo=r(rNe," (ALBERT model)"),rNe.forEach(t),SJo=i(ee),b5=n(ee,"LI",{});var tNe=s(b5);W2e=n(tNe,"STRONG",{});var ywt=s(W2e);RJo=r(ywt,"bert"),ywt.forEach(t),PJo=r(tNe," \u2014 "),dW=n(tNe,"A",{href:!0});var xwt=s(dW);BJo=r(xwt,"BertForMultipleChoice"),xwt.forEach(t),IJo=r(tNe," (BERT model)"),tNe.forEach(t),NJo=i(ee),v5=n(ee,"LI",{});var aNe=s(v5);Q2e=n(aNe,"STRONG",{});var $wt=s(Q2e);qJo=r($wt,"big_bird"),$wt.forEach(t),jJo=r(aNe," \u2014 "),cW=n(aNe,"A",{href:!0});var kwt=s(cW);DJo=r(kwt,"BigBirdForMultipleChoice"),kwt.forEach(t),GJo=r(aNe," (BigBird model)"),aNe.forEach(t),OJo=i(ee),F5=n(ee,"LI",{});var nNe=s(F5);H2e=n(nNe,"STRONG",{});var Swt=s(H2e);VJo=r(Swt,"camembert"),Swt.forEach(t),XJo=r(nNe," \u2014 "),fW=n(nNe,"A",{href:!0});var Rwt=s(fW);zJo=r(Rwt,"CamembertForMultipleChoice"),Rwt.forEach(t),WJo=r(nNe," (CamemBERT model)"),nNe.forEach(t),QJo=i(ee),T5=n(ee,"LI",{});var sNe=s(T5);U2e=n(sNe,"STRONG",{});var Pwt=s(U2e);HJo=r(Pwt,"canine"),Pwt.forEach(t),UJo=r(sNe," \u2014 "),mW=n(sNe,"A",{href:!0});var Bwt=s(mW);JJo=r(Bwt,"CanineForMultipleChoice"),Bwt.forEach(t),YJo=r(sNe," (CANINE model)"),sNe.forEach(t),KJo=i(ee),M5=n(ee,"LI",{});var lNe=s(M5);J2e=n(lNe,"STRONG",{});var Iwt=s(J2e);ZJo=r(Iwt,"convbert"),Iwt.forEach(t),eYo=r(lNe," \u2014 "),gW=n(lNe,"A",{href:!0});var Nwt=s(gW);oYo=r(Nwt,"ConvBertForMultipleChoice"),Nwt.forEach(t),rYo=r(lNe," (ConvBERT model)"),lNe.forEach(t),tYo=i(ee),E5=n(ee,"LI",{});var iNe=s(E5);Y2e=n(iNe,"STRONG",{});var qwt=s(Y2e);aYo=r(qwt,"data2vec-text"),qwt.forEach(t),nYo=r(iNe," \u2014 "),hW=n(iNe,"A",{href:!0});var jwt=s(hW);sYo=r(jwt,"Data2VecTextForMultipleChoice"),jwt.forEach(t),lYo=r(iNe," (Data2VecText model)"),iNe.forEach(t),iYo=i(ee),C5=n(ee,"LI",{});var dNe=s(C5);K2e=n(dNe,"STRONG",{});var Dwt=s(K2e);dYo=r(Dwt,"deberta-v2"),Dwt.forEach(t),cYo=r(dNe," \u2014 "),pW=n(dNe,"A",{href:!0});var Gwt=s(pW);fYo=r(Gwt,"DebertaV2ForMultipleChoice"),Gwt.forEach(t),mYo=r(dNe," (DeBERTa-v2 model)"),dNe.forEach(t),gYo=i(ee),w5=n(ee,"LI",{});var cNe=s(w5);Z2e=n(cNe,"STRONG",{});var Owt=s(Z2e);hYo=r(Owt,"distilbert"),Owt.forEach(t),pYo=r(cNe," \u2014 "),_W=n(cNe,"A",{href:!0});var Vwt=s(_W);_Yo=r(Vwt,"DistilBertForMultipleChoice"),Vwt.forEach(t),uYo=r(cNe," (DistilBERT model)"),cNe.forEach(t),bYo=i(ee),A5=n(ee,"LI",{});var fNe=s(A5);e1e=n(fNe,"STRONG",{});var Xwt=s(e1e);vYo=r(Xwt,"electra"),Xwt.forEach(t),FYo=r(fNe," \u2014 "),uW=n(fNe,"A",{href:!0});var zwt=s(uW);TYo=r(zwt,"ElectraForMultipleChoice"),zwt.forEach(t),MYo=r(fNe," (ELECTRA model)"),fNe.forEach(t),EYo=i(ee),L5=n(ee,"LI",{});var mNe=s(L5);o1e=n(mNe,"STRONG",{});var Wwt=s(o1e);CYo=r(Wwt,"flaubert"),Wwt.forEach(t),wYo=r(mNe," \u2014 "),bW=n(mNe,"A",{href:!0});var Qwt=s(bW);AYo=r(Qwt,"FlaubertForMultipleChoice"),Qwt.forEach(t),LYo=r(mNe," (FlauBERT model)"),mNe.forEach(t),yYo=i(ee),y5=n(ee,"LI",{});var gNe=s(y5);r1e=n(gNe,"STRONG",{});var Hwt=s(r1e);xYo=r(Hwt,"fnet"),Hwt.forEach(t),$Yo=r(gNe," \u2014 "),vW=n(gNe,"A",{href:!0});var Uwt=s(vW);kYo=r(Uwt,"FNetForMultipleChoice"),Uwt.forEach(t),SYo=r(gNe," (FNet model)"),gNe.forEach(t),RYo=i(ee),x5=n(ee,"LI",{});var hNe=s(x5);t1e=n(hNe,"STRONG",{});var Jwt=s(t1e);PYo=r(Jwt,"funnel"),Jwt.forEach(t),BYo=r(hNe," \u2014 "),FW=n(hNe,"A",{href:!0});var Ywt=s(FW);IYo=r(Ywt,"FunnelForMultipleChoice"),Ywt.forEach(t),NYo=r(hNe," (Funnel Transformer model)"),hNe.forEach(t),qYo=i(ee),$5=n(ee,"LI",{});var pNe=s($5);a1e=n(pNe,"STRONG",{});var Kwt=s(a1e);jYo=r(Kwt,"ibert"),Kwt.forEach(t),DYo=r(pNe," \u2014 "),TW=n(pNe,"A",{href:!0});var Zwt=s(TW);GYo=r(Zwt,"IBertForMultipleChoice"),Zwt.forEach(t),OYo=r(pNe," (I-BERT model)"),pNe.forEach(t),VYo=i(ee),k5=n(ee,"LI",{});var _Ne=s(k5);n1e=n(_Ne,"STRONG",{});var e6t=s(n1e);XYo=r(e6t,"longformer"),e6t.forEach(t),zYo=r(_Ne," \u2014 "),MW=n(_Ne,"A",{href:!0});var o6t=s(MW);WYo=r(o6t,"LongformerForMultipleChoice"),o6t.forEach(t),QYo=r(_Ne," (Longformer model)"),_Ne.forEach(t),HYo=i(ee),S5=n(ee,"LI",{});var uNe=s(S5);s1e=n(uNe,"STRONG",{});var r6t=s(s1e);UYo=r(r6t,"luke"),r6t.forEach(t),JYo=r(uNe," \u2014 "),EW=n(uNe,"A",{href:!0});var t6t=s(EW);YYo=r(t6t,"LukeForMultipleChoice"),t6t.forEach(t),KYo=r(uNe," (LUKE model)"),uNe.forEach(t),ZYo=i(ee),R5=n(ee,"LI",{});var bNe=s(R5);l1e=n(bNe,"STRONG",{});var a6t=s(l1e);eKo=r(a6t,"megatron-bert"),a6t.forEach(t),oKo=r(bNe," \u2014 "),CW=n(bNe,"A",{href:!0});var n6t=s(CW);rKo=r(n6t,"MegatronBertForMultipleChoice"),n6t.forEach(t),tKo=r(bNe," (Megatron-BERT model)"),bNe.forEach(t),aKo=i(ee),P5=n(ee,"LI",{});var vNe=s(P5);i1e=n(vNe,"STRONG",{});var s6t=s(i1e);nKo=r(s6t,"mobilebert"),s6t.forEach(t),sKo=r(vNe," \u2014 "),wW=n(vNe,"A",{href:!0});var l6t=s(wW);lKo=r(l6t,"MobileBertForMultipleChoice"),l6t.forEach(t),iKo=r(vNe," (MobileBERT model)"),vNe.forEach(t),dKo=i(ee),B5=n(ee,"LI",{});var FNe=s(B5);d1e=n(FNe,"STRONG",{});var i6t=s(d1e);cKo=r(i6t,"mpnet"),i6t.forEach(t),fKo=r(FNe," \u2014 "),AW=n(FNe,"A",{href:!0});var d6t=s(AW);mKo=r(d6t,"MPNetForMultipleChoice"),d6t.forEach(t),gKo=r(FNe," (MPNet model)"),FNe.forEach(t),hKo=i(ee),I5=n(ee,"LI",{});var TNe=s(I5);c1e=n(TNe,"STRONG",{});var c6t=s(c1e);pKo=r(c6t,"nezha"),c6t.forEach(t),_Ko=r(TNe," \u2014 "),LW=n(TNe,"A",{href:!0});var f6t=s(LW);uKo=r(f6t,"NezhaForMultipleChoice"),f6t.forEach(t),bKo=r(TNe," (Nezha model)"),TNe.forEach(t),vKo=i(ee),N5=n(ee,"LI",{});var MNe=s(N5);f1e=n(MNe,"STRONG",{});var m6t=s(f1e);FKo=r(m6t,"nystromformer"),m6t.forEach(t),TKo=r(MNe," \u2014 "),yW=n(MNe,"A",{href:!0});var g6t=s(yW);MKo=r(g6t,"NystromformerForMultipleChoice"),g6t.forEach(t),EKo=r(MNe," (Nystr\xF6mformer model)"),MNe.forEach(t),CKo=i(ee),q5=n(ee,"LI",{});var ENe=s(q5);m1e=n(ENe,"STRONG",{});var h6t=s(m1e);wKo=r(h6t,"qdqbert"),h6t.forEach(t),AKo=r(ENe," \u2014 "),xW=n(ENe,"A",{href:!0});var p6t=s(xW);LKo=r(p6t,"QDQBertForMultipleChoice"),p6t.forEach(t),yKo=r(ENe," (QDQBert model)"),ENe.forEach(t),xKo=i(ee),j5=n(ee,"LI",{});var CNe=s(j5);g1e=n(CNe,"STRONG",{});var _6t=s(g1e);$Ko=r(_6t,"rembert"),_6t.forEach(t),kKo=r(CNe," \u2014 "),$W=n(CNe,"A",{href:!0});var u6t=s($W);SKo=r(u6t,"RemBertForMultipleChoice"),u6t.forEach(t),RKo=r(CNe," (RemBERT model)"),CNe.forEach(t),PKo=i(ee),D5=n(ee,"LI",{});var wNe=s(D5);h1e=n(wNe,"STRONG",{});var b6t=s(h1e);BKo=r(b6t,"roberta"),b6t.forEach(t),IKo=r(wNe," \u2014 "),kW=n(wNe,"A",{href:!0});var v6t=s(kW);NKo=r(v6t,"RobertaForMultipleChoice"),v6t.forEach(t),qKo=r(wNe," (RoBERTa model)"),wNe.forEach(t),jKo=i(ee),G5=n(ee,"LI",{});var ANe=s(G5);p1e=n(ANe,"STRONG",{});var F6t=s(p1e);DKo=r(F6t,"roformer"),F6t.forEach(t),GKo=r(ANe," \u2014 "),SW=n(ANe,"A",{href:!0});var T6t=s(SW);OKo=r(T6t,"RoFormerForMultipleChoice"),T6t.forEach(t),VKo=r(ANe," (RoFormer model)"),ANe.forEach(t),XKo=i(ee),O5=n(ee,"LI",{});var LNe=s(O5);_1e=n(LNe,"STRONG",{});var M6t=s(_1e);zKo=r(M6t,"squeezebert"),M6t.forEach(t),WKo=r(LNe," \u2014 "),RW=n(LNe,"A",{href:!0});var E6t=s(RW);QKo=r(E6t,"SqueezeBertForMultipleChoice"),E6t.forEach(t),HKo=r(LNe," (SqueezeBERT model)"),LNe.forEach(t),UKo=i(ee),V5=n(ee,"LI",{});var yNe=s(V5);u1e=n(yNe,"STRONG",{});var C6t=s(u1e);JKo=r(C6t,"xlm"),C6t.forEach(t),YKo=r(yNe," \u2014 "),PW=n(yNe,"A",{href:!0});var w6t=s(PW);KKo=r(w6t,"XLMForMultipleChoice"),w6t.forEach(t),ZKo=r(yNe," (XLM model)"),yNe.forEach(t),eZo=i(ee),X5=n(ee,"LI",{});var xNe=s(X5);b1e=n(xNe,"STRONG",{});var A6t=s(b1e);oZo=r(A6t,"xlm-roberta"),A6t.forEach(t),rZo=r(xNe," \u2014 "),BW=n(xNe,"A",{href:!0});var L6t=s(BW);tZo=r(L6t,"XLMRobertaForMultipleChoice"),L6t.forEach(t),aZo=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),nZo=i(ee),z5=n(ee,"LI",{});var $Ne=s(z5);v1e=n($Ne,"STRONG",{});var y6t=s(v1e);sZo=r(y6t,"xlm-roberta-xl"),y6t.forEach(t),lZo=r($Ne," \u2014 "),IW=n($Ne,"A",{href:!0});var x6t=s(IW);iZo=r(x6t,"XLMRobertaXLForMultipleChoice"),x6t.forEach(t),dZo=r($Ne," (XLM-RoBERTa-XL model)"),$Ne.forEach(t),cZo=i(ee),W5=n(ee,"LI",{});var kNe=s(W5);F1e=n(kNe,"STRONG",{});var $6t=s(F1e);fZo=r($6t,"xlnet"),$6t.forEach(t),mZo=r(kNe," \u2014 "),NW=n(kNe,"A",{href:!0});var k6t=s(NW);gZo=r(k6t,"XLNetForMultipleChoice"),k6t.forEach(t),hZo=r(kNe," (XLNet model)"),kNe.forEach(t),pZo=i(ee),Q5=n(ee,"LI",{});var SNe=s(Q5);T1e=n(SNe,"STRONG",{});var S6t=s(T1e);_Zo=r(S6t,"yoso"),S6t.forEach(t),uZo=r(SNe," \u2014 "),qW=n(SNe,"A",{href:!0});var R6t=s(qW);bZo=r(R6t,"YosoForMultipleChoice"),R6t.forEach(t),vZo=r(SNe," (YOSO model)"),SNe.forEach(t),ee.forEach(t),FZo=i(_a),H5=n(_a,"P",{});var RNe=s(H5);TZo=r(RNe,"The model is set in evaluation mode by default using "),M1e=n(RNe,"CODE",{});var P6t=s(M1e);MZo=r(P6t,"model.eval()"),P6t.forEach(t),EZo=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E1e=n(RNe,"CODE",{});var B6t=s(E1e);CZo=r(B6t,"model.train()"),B6t.forEach(t),RNe.forEach(t),wZo=i(_a),T(U5.$$.fragment,_a),_a.forEach(t),_l.forEach(t),iQe=i(f),ud=n(f,"H2",{class:!0});var _Ue=s(ud);J5=n(_Ue,"A",{id:!0,class:!0,href:!0});var I6t=s(J5);C1e=n(I6t,"SPAN",{});var N6t=s(C1e);T(ZL.$$.fragment,N6t),N6t.forEach(t),I6t.forEach(t),AZo=i(_Ue),w1e=n(_Ue,"SPAN",{});var q6t=s(w1e);LZo=r(q6t,"AutoModelForNextSentencePrediction"),q6t.forEach(t),_Ue.forEach(t),dQe=i(f),jo=n(f,"DIV",{class:!0});var ul=s(jo);T(ey.$$.fragment,ul),yZo=i(ul),bd=n(ul,"P",{});var bae=s(bd);xZo=r(bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jW=n(bae,"A",{href:!0});var j6t=s(jW);$Zo=r(j6t,"from_pretrained()"),j6t.forEach(t),kZo=r(bae," class method or the "),DW=n(bae,"A",{href:!0});var D6t=s(DW);SZo=r(D6t,"from_config()"),D6t.forEach(t),RZo=r(bae,` class
method.`),bae.forEach(t),PZo=i(ul),oy=n(ul,"P",{});var uUe=s(oy);BZo=r(uUe,"This class cannot be instantiated directly using "),A1e=n(uUe,"CODE",{});var G6t=s(A1e);IZo=r(G6t,"__init__()"),G6t.forEach(t),NZo=r(uUe," (throws an error)."),uUe.forEach(t),qZo=i(ul),ut=n(ul,"DIV",{class:!0});var lA=s(ut);T(ry.$$.fragment,lA),jZo=i(lA),L1e=n(lA,"P",{});var O6t=s(L1e);DZo=r(O6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O6t.forEach(t),GZo=i(lA),vd=n(lA,"P",{});var vae=s(vd);OZo=r(vae,`Note:
Loading a model from its configuration file does `),y1e=n(vae,"STRONG",{});var V6t=s(y1e);VZo=r(V6t,"not"),V6t.forEach(t),XZo=r(vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(vae,"A",{href:!0});var X6t=s(GW);zZo=r(X6t,"from_pretrained()"),X6t.forEach(t),WZo=r(vae," to load the model weights."),vae.forEach(t),QZo=i(lA),T(Y5.$$.fragment,lA),lA.forEach(t),HZo=i(ul),ao=n(ul,"DIV",{class:!0});var ua=s(ao);T(ty.$$.fragment,ua),UZo=i(ua),x1e=n(ua,"P",{});var z6t=s(x1e);JZo=r(z6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z6t.forEach(t),YZo=i(ua),Qa=n(ua,"P",{});var iA=s(Qa);KZo=r(iA,"The model class to instantiate is selected based on the "),$1e=n(iA,"CODE",{});var W6t=s($1e);ZZo=r(W6t,"model_type"),W6t.forEach(t),eer=r(iA,` property of the config object (either
passed as an argument or loaded from `),k1e=n(iA,"CODE",{});var Q6t=s(k1e);oer=r(Q6t,"pretrained_model_name_or_path"),Q6t.forEach(t),rer=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S1e=n(iA,"CODE",{});var H6t=s(S1e);ter=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),aer=r(iA,":"),iA.forEach(t),ner=i(ua),Do=n(ua,"UL",{});var ba=s(Do);K5=n(ba,"LI",{});var PNe=s(K5);R1e=n(PNe,"STRONG",{});var U6t=s(R1e);ser=r(U6t,"bert"),U6t.forEach(t),ler=r(PNe," \u2014 "),OW=n(PNe,"A",{href:!0});var J6t=s(OW);ier=r(J6t,"BertForNextSentencePrediction"),J6t.forEach(t),der=r(PNe," (BERT model)"),PNe.forEach(t),cer=i(ba),Z5=n(ba,"LI",{});var BNe=s(Z5);P1e=n(BNe,"STRONG",{});var Y6t=s(P1e);fer=r(Y6t,"fnet"),Y6t.forEach(t),mer=r(BNe," \u2014 "),VW=n(BNe,"A",{href:!0});var K6t=s(VW);ger=r(K6t,"FNetForNextSentencePrediction"),K6t.forEach(t),her=r(BNe," (FNet model)"),BNe.forEach(t),per=i(ba),eF=n(ba,"LI",{});var INe=s(eF);B1e=n(INe,"STRONG",{});var Z6t=s(B1e);_er=r(Z6t,"megatron-bert"),Z6t.forEach(t),uer=r(INe," \u2014 "),XW=n(INe,"A",{href:!0});var eAt=s(XW);ber=r(eAt,"MegatronBertForNextSentencePrediction"),eAt.forEach(t),ver=r(INe," (Megatron-BERT model)"),INe.forEach(t),Fer=i(ba),oF=n(ba,"LI",{});var NNe=s(oF);I1e=n(NNe,"STRONG",{});var oAt=s(I1e);Ter=r(oAt,"mobilebert"),oAt.forEach(t),Mer=r(NNe," \u2014 "),zW=n(NNe,"A",{href:!0});var rAt=s(zW);Eer=r(rAt,"MobileBertForNextSentencePrediction"),rAt.forEach(t),Cer=r(NNe," (MobileBERT model)"),NNe.forEach(t),wer=i(ba),rF=n(ba,"LI",{});var qNe=s(rF);N1e=n(qNe,"STRONG",{});var tAt=s(N1e);Aer=r(tAt,"nezha"),tAt.forEach(t),Ler=r(qNe," \u2014 "),WW=n(qNe,"A",{href:!0});var aAt=s(WW);yer=r(aAt,"NezhaForNextSentencePrediction"),aAt.forEach(t),xer=r(qNe," (Nezha model)"),qNe.forEach(t),$er=i(ba),tF=n(ba,"LI",{});var jNe=s(tF);q1e=n(jNe,"STRONG",{});var nAt=s(q1e);ker=r(nAt,"qdqbert"),nAt.forEach(t),Ser=r(jNe," \u2014 "),QW=n(jNe,"A",{href:!0});var sAt=s(QW);Rer=r(sAt,"QDQBertForNextSentencePrediction"),sAt.forEach(t),Per=r(jNe," (QDQBert model)"),jNe.forEach(t),ba.forEach(t),Ber=i(ua),aF=n(ua,"P",{});var DNe=s(aF);Ier=r(DNe,"The model is set in evaluation mode by default using "),j1e=n(DNe,"CODE",{});var lAt=s(j1e);Ner=r(lAt,"model.eval()"),lAt.forEach(t),qer=r(DNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D1e=n(DNe,"CODE",{});var iAt=s(D1e);jer=r(iAt,"model.train()"),iAt.forEach(t),DNe.forEach(t),Der=i(ua),T(nF.$$.fragment,ua),ua.forEach(t),ul.forEach(t),cQe=i(f),Fd=n(f,"H2",{class:!0});var bUe=s(Fd);sF=n(bUe,"A",{id:!0,class:!0,href:!0});var dAt=s(sF);G1e=n(dAt,"SPAN",{});var cAt=s(G1e);T(ay.$$.fragment,cAt),cAt.forEach(t),dAt.forEach(t),Ger=i(bUe),O1e=n(bUe,"SPAN",{});var fAt=s(O1e);Oer=r(fAt,"AutoModelForTokenClassification"),fAt.forEach(t),bUe.forEach(t),fQe=i(f),Go=n(f,"DIV",{class:!0});var bl=s(Go);T(ny.$$.fragment,bl),Ver=i(bl),Td=n(bl,"P",{});var Fae=s(Td);Xer=r(Fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HW=n(Fae,"A",{href:!0});var mAt=s(HW);zer=r(mAt,"from_pretrained()"),mAt.forEach(t),Wer=r(Fae," class method or the "),UW=n(Fae,"A",{href:!0});var gAt=s(UW);Qer=r(gAt,"from_config()"),gAt.forEach(t),Her=r(Fae,` class
method.`),Fae.forEach(t),Uer=i(bl),sy=n(bl,"P",{});var vUe=s(sy);Jer=r(vUe,"This class cannot be instantiated directly using "),V1e=n(vUe,"CODE",{});var hAt=s(V1e);Yer=r(hAt,"__init__()"),hAt.forEach(t),Ker=r(vUe," (throws an error)."),vUe.forEach(t),Zer=i(bl),bt=n(bl,"DIV",{class:!0});var dA=s(bt);T(ly.$$.fragment,dA),eor=i(dA),X1e=n(dA,"P",{});var pAt=s(X1e);oor=r(pAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pAt.forEach(t),ror=i(dA),Md=n(dA,"P",{});var Tae=s(Md);tor=r(Tae,`Note:
Loading a model from its configuration file does `),z1e=n(Tae,"STRONG",{});var _At=s(z1e);aor=r(_At,"not"),_At.forEach(t),nor=r(Tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(Tae,"A",{href:!0});var uAt=s(JW);sor=r(uAt,"from_pretrained()"),uAt.forEach(t),lor=r(Tae," to load the model weights."),Tae.forEach(t),ior=i(dA),T(lF.$$.fragment,dA),dA.forEach(t),dor=i(bl),no=n(bl,"DIV",{class:!0});var va=s(no);T(iy.$$.fragment,va),cor=i(va),W1e=n(va,"P",{});var bAt=s(W1e);mor=r(bAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bAt.forEach(t),gor=i(va),Ha=n(va,"P",{});var cA=s(Ha);hor=r(cA,"The model class to instantiate is selected based on the "),Q1e=n(cA,"CODE",{});var vAt=s(Q1e);por=r(vAt,"model_type"),vAt.forEach(t),_or=r(cA,` property of the config object (either
passed as an argument or loaded from `),H1e=n(cA,"CODE",{});var FAt=s(H1e);uor=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),bor=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(cA,"CODE",{});var TAt=s(U1e);vor=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),For=r(cA,":"),cA.forEach(t),Tor=i(va),U=n(va,"UL",{});var K=s(U);iF=n(K,"LI",{});var GNe=s(iF);J1e=n(GNe,"STRONG",{});var MAt=s(J1e);Mor=r(MAt,"albert"),MAt.forEach(t),Eor=r(GNe," \u2014 "),YW=n(GNe,"A",{href:!0});var EAt=s(YW);Cor=r(EAt,"AlbertForTokenClassification"),EAt.forEach(t),wor=r(GNe," (ALBERT model)"),GNe.forEach(t),Aor=i(K),dF=n(K,"LI",{});var ONe=s(dF);Y1e=n(ONe,"STRONG",{});var CAt=s(Y1e);Lor=r(CAt,"bert"),CAt.forEach(t),yor=r(ONe," \u2014 "),KW=n(ONe,"A",{href:!0});var wAt=s(KW);xor=r(wAt,"BertForTokenClassification"),wAt.forEach(t),$or=r(ONe," (BERT model)"),ONe.forEach(t),kor=i(K),cF=n(K,"LI",{});var VNe=s(cF);K1e=n(VNe,"STRONG",{});var AAt=s(K1e);Sor=r(AAt,"big_bird"),AAt.forEach(t),Ror=r(VNe," \u2014 "),ZW=n(VNe,"A",{href:!0});var LAt=s(ZW);Por=r(LAt,"BigBirdForTokenClassification"),LAt.forEach(t),Bor=r(VNe," (BigBird model)"),VNe.forEach(t),Ior=i(K),fF=n(K,"LI",{});var XNe=s(fF);Z1e=n(XNe,"STRONG",{});var yAt=s(Z1e);Nor=r(yAt,"bloom"),yAt.forEach(t),qor=r(XNe," \u2014 "),eQ=n(XNe,"A",{href:!0});var xAt=s(eQ);jor=r(xAt,"BloomForTokenClassification"),xAt.forEach(t),Dor=r(XNe," (BLOOM model)"),XNe.forEach(t),Gor=i(K),mF=n(K,"LI",{});var zNe=s(mF);ebe=n(zNe,"STRONG",{});var $At=s(ebe);Oor=r($At,"camembert"),$At.forEach(t),Vor=r(zNe," \u2014 "),oQ=n(zNe,"A",{href:!0});var kAt=s(oQ);Xor=r(kAt,"CamembertForTokenClassification"),kAt.forEach(t),zor=r(zNe," (CamemBERT model)"),zNe.forEach(t),Wor=i(K),gF=n(K,"LI",{});var WNe=s(gF);obe=n(WNe,"STRONG",{});var SAt=s(obe);Qor=r(SAt,"canine"),SAt.forEach(t),Hor=r(WNe," \u2014 "),rQ=n(WNe,"A",{href:!0});var RAt=s(rQ);Uor=r(RAt,"CanineForTokenClassification"),RAt.forEach(t),Jor=r(WNe," (CANINE model)"),WNe.forEach(t),Yor=i(K),hF=n(K,"LI",{});var QNe=s(hF);rbe=n(QNe,"STRONG",{});var PAt=s(rbe);Kor=r(PAt,"convbert"),PAt.forEach(t),Zor=r(QNe," \u2014 "),tQ=n(QNe,"A",{href:!0});var BAt=s(tQ);err=r(BAt,"ConvBertForTokenClassification"),BAt.forEach(t),orr=r(QNe," (ConvBERT model)"),QNe.forEach(t),rrr=i(K),pF=n(K,"LI",{});var HNe=s(pF);tbe=n(HNe,"STRONG",{});var IAt=s(tbe);trr=r(IAt,"data2vec-text"),IAt.forEach(t),arr=r(HNe," \u2014 "),aQ=n(HNe,"A",{href:!0});var NAt=s(aQ);nrr=r(NAt,"Data2VecTextForTokenClassification"),NAt.forEach(t),srr=r(HNe," (Data2VecText model)"),HNe.forEach(t),lrr=i(K),_F=n(K,"LI",{});var UNe=s(_F);abe=n(UNe,"STRONG",{});var qAt=s(abe);irr=r(qAt,"deberta"),qAt.forEach(t),drr=r(UNe," \u2014 "),nQ=n(UNe,"A",{href:!0});var jAt=s(nQ);crr=r(jAt,"DebertaForTokenClassification"),jAt.forEach(t),frr=r(UNe," (DeBERTa model)"),UNe.forEach(t),mrr=i(K),uF=n(K,"LI",{});var JNe=s(uF);nbe=n(JNe,"STRONG",{});var DAt=s(nbe);grr=r(DAt,"deberta-v2"),DAt.forEach(t),hrr=r(JNe," \u2014 "),sQ=n(JNe,"A",{href:!0});var GAt=s(sQ);prr=r(GAt,"DebertaV2ForTokenClassification"),GAt.forEach(t),_rr=r(JNe," (DeBERTa-v2 model)"),JNe.forEach(t),urr=i(K),bF=n(K,"LI",{});var YNe=s(bF);sbe=n(YNe,"STRONG",{});var OAt=s(sbe);brr=r(OAt,"distilbert"),OAt.forEach(t),vrr=r(YNe," \u2014 "),lQ=n(YNe,"A",{href:!0});var VAt=s(lQ);Frr=r(VAt,"DistilBertForTokenClassification"),VAt.forEach(t),Trr=r(YNe," (DistilBERT model)"),YNe.forEach(t),Mrr=i(K),vF=n(K,"LI",{});var KNe=s(vF);lbe=n(KNe,"STRONG",{});var XAt=s(lbe);Err=r(XAt,"electra"),XAt.forEach(t),Crr=r(KNe," \u2014 "),iQ=n(KNe,"A",{href:!0});var zAt=s(iQ);wrr=r(zAt,"ElectraForTokenClassification"),zAt.forEach(t),Arr=r(KNe," (ELECTRA model)"),KNe.forEach(t),Lrr=i(K),FF=n(K,"LI",{});var ZNe=s(FF);ibe=n(ZNe,"STRONG",{});var WAt=s(ibe);yrr=r(WAt,"flaubert"),WAt.forEach(t),xrr=r(ZNe," \u2014 "),dQ=n(ZNe,"A",{href:!0});var QAt=s(dQ);$rr=r(QAt,"FlaubertForTokenClassification"),QAt.forEach(t),krr=r(ZNe," (FlauBERT model)"),ZNe.forEach(t),Srr=i(K),TF=n(K,"LI",{});var eqe=s(TF);dbe=n(eqe,"STRONG",{});var HAt=s(dbe);Rrr=r(HAt,"fnet"),HAt.forEach(t),Prr=r(eqe," \u2014 "),cQ=n(eqe,"A",{href:!0});var UAt=s(cQ);Brr=r(UAt,"FNetForTokenClassification"),UAt.forEach(t),Irr=r(eqe," (FNet model)"),eqe.forEach(t),Nrr=i(K),MF=n(K,"LI",{});var oqe=s(MF);cbe=n(oqe,"STRONG",{});var JAt=s(cbe);qrr=r(JAt,"funnel"),JAt.forEach(t),jrr=r(oqe," \u2014 "),fQ=n(oqe,"A",{href:!0});var YAt=s(fQ);Drr=r(YAt,"FunnelForTokenClassification"),YAt.forEach(t),Grr=r(oqe," (Funnel Transformer model)"),oqe.forEach(t),Orr=i(K),EF=n(K,"LI",{});var rqe=s(EF);fbe=n(rqe,"STRONG",{});var KAt=s(fbe);Vrr=r(KAt,"gpt2"),KAt.forEach(t),Xrr=r(rqe," \u2014 "),mQ=n(rqe,"A",{href:!0});var ZAt=s(mQ);zrr=r(ZAt,"GPT2ForTokenClassification"),ZAt.forEach(t),Wrr=r(rqe," (OpenAI GPT-2 model)"),rqe.forEach(t),Qrr=i(K),CF=n(K,"LI",{});var tqe=s(CF);mbe=n(tqe,"STRONG",{});var e7t=s(mbe);Hrr=r(e7t,"ibert"),e7t.forEach(t),Urr=r(tqe," \u2014 "),gQ=n(tqe,"A",{href:!0});var o7t=s(gQ);Jrr=r(o7t,"IBertForTokenClassification"),o7t.forEach(t),Yrr=r(tqe," (I-BERT model)"),tqe.forEach(t),Krr=i(K),wF=n(K,"LI",{});var aqe=s(wF);gbe=n(aqe,"STRONG",{});var r7t=s(gbe);Zrr=r(r7t,"layoutlm"),r7t.forEach(t),etr=r(aqe," \u2014 "),hQ=n(aqe,"A",{href:!0});var t7t=s(hQ);otr=r(t7t,"LayoutLMForTokenClassification"),t7t.forEach(t),rtr=r(aqe," (LayoutLM model)"),aqe.forEach(t),ttr=i(K),AF=n(K,"LI",{});var nqe=s(AF);hbe=n(nqe,"STRONG",{});var a7t=s(hbe);atr=r(a7t,"layoutlmv2"),a7t.forEach(t),ntr=r(nqe," \u2014 "),pQ=n(nqe,"A",{href:!0});var n7t=s(pQ);str=r(n7t,"LayoutLMv2ForTokenClassification"),n7t.forEach(t),ltr=r(nqe," (LayoutLMv2 model)"),nqe.forEach(t),itr=i(K),LF=n(K,"LI",{});var sqe=s(LF);pbe=n(sqe,"STRONG",{});var s7t=s(pbe);dtr=r(s7t,"layoutlmv3"),s7t.forEach(t),ctr=r(sqe," \u2014 "),_Q=n(sqe,"A",{href:!0});var l7t=s(_Q);ftr=r(l7t,"LayoutLMv3ForTokenClassification"),l7t.forEach(t),mtr=r(sqe," (LayoutLMv3 model)"),sqe.forEach(t),gtr=i(K),yF=n(K,"LI",{});var lqe=s(yF);_be=n(lqe,"STRONG",{});var i7t=s(_be);htr=r(i7t,"longformer"),i7t.forEach(t),ptr=r(lqe," \u2014 "),uQ=n(lqe,"A",{href:!0});var d7t=s(uQ);_tr=r(d7t,"LongformerForTokenClassification"),d7t.forEach(t),utr=r(lqe," (Longformer model)"),lqe.forEach(t),btr=i(K),xF=n(K,"LI",{});var iqe=s(xF);ube=n(iqe,"STRONG",{});var c7t=s(ube);vtr=r(c7t,"luke"),c7t.forEach(t),Ftr=r(iqe," \u2014 "),bQ=n(iqe,"A",{href:!0});var f7t=s(bQ);Ttr=r(f7t,"LukeForTokenClassification"),f7t.forEach(t),Mtr=r(iqe," (LUKE model)"),iqe.forEach(t),Etr=i(K),$F=n(K,"LI",{});var dqe=s($F);bbe=n(dqe,"STRONG",{});var m7t=s(bbe);Ctr=r(m7t,"megatron-bert"),m7t.forEach(t),wtr=r(dqe," \u2014 "),vQ=n(dqe,"A",{href:!0});var g7t=s(vQ);Atr=r(g7t,"MegatronBertForTokenClassification"),g7t.forEach(t),Ltr=r(dqe," (Megatron-BERT model)"),dqe.forEach(t),ytr=i(K),kF=n(K,"LI",{});var cqe=s(kF);vbe=n(cqe,"STRONG",{});var h7t=s(vbe);xtr=r(h7t,"mobilebert"),h7t.forEach(t),$tr=r(cqe," \u2014 "),FQ=n(cqe,"A",{href:!0});var p7t=s(FQ);ktr=r(p7t,"MobileBertForTokenClassification"),p7t.forEach(t),Str=r(cqe," (MobileBERT model)"),cqe.forEach(t),Rtr=i(K),SF=n(K,"LI",{});var fqe=s(SF);Fbe=n(fqe,"STRONG",{});var _7t=s(Fbe);Ptr=r(_7t,"mpnet"),_7t.forEach(t),Btr=r(fqe," \u2014 "),TQ=n(fqe,"A",{href:!0});var u7t=s(TQ);Itr=r(u7t,"MPNetForTokenClassification"),u7t.forEach(t),Ntr=r(fqe," (MPNet model)"),fqe.forEach(t),qtr=i(K),RF=n(K,"LI",{});var mqe=s(RF);Tbe=n(mqe,"STRONG",{});var b7t=s(Tbe);jtr=r(b7t,"nezha"),b7t.forEach(t),Dtr=r(mqe," \u2014 "),MQ=n(mqe,"A",{href:!0});var v7t=s(MQ);Gtr=r(v7t,"NezhaForTokenClassification"),v7t.forEach(t),Otr=r(mqe," (Nezha model)"),mqe.forEach(t),Vtr=i(K),PF=n(K,"LI",{});var gqe=s(PF);Mbe=n(gqe,"STRONG",{});var F7t=s(Mbe);Xtr=r(F7t,"nystromformer"),F7t.forEach(t),ztr=r(gqe," \u2014 "),EQ=n(gqe,"A",{href:!0});var T7t=s(EQ);Wtr=r(T7t,"NystromformerForTokenClassification"),T7t.forEach(t),Qtr=r(gqe," (Nystr\xF6mformer model)"),gqe.forEach(t),Htr=i(K),BF=n(K,"LI",{});var hqe=s(BF);Ebe=n(hqe,"STRONG",{});var M7t=s(Ebe);Utr=r(M7t,"qdqbert"),M7t.forEach(t),Jtr=r(hqe," \u2014 "),CQ=n(hqe,"A",{href:!0});var E7t=s(CQ);Ytr=r(E7t,"QDQBertForTokenClassification"),E7t.forEach(t),Ktr=r(hqe," (QDQBert model)"),hqe.forEach(t),Ztr=i(K),IF=n(K,"LI",{});var pqe=s(IF);Cbe=n(pqe,"STRONG",{});var C7t=s(Cbe);ear=r(C7t,"rembert"),C7t.forEach(t),oar=r(pqe," \u2014 "),wQ=n(pqe,"A",{href:!0});var w7t=s(wQ);rar=r(w7t,"RemBertForTokenClassification"),w7t.forEach(t),tar=r(pqe," (RemBERT model)"),pqe.forEach(t),aar=i(K),NF=n(K,"LI",{});var _qe=s(NF);wbe=n(_qe,"STRONG",{});var A7t=s(wbe);nar=r(A7t,"roberta"),A7t.forEach(t),sar=r(_qe," \u2014 "),AQ=n(_qe,"A",{href:!0});var L7t=s(AQ);lar=r(L7t,"RobertaForTokenClassification"),L7t.forEach(t),iar=r(_qe," (RoBERTa model)"),_qe.forEach(t),dar=i(K),qF=n(K,"LI",{});var uqe=s(qF);Abe=n(uqe,"STRONG",{});var y7t=s(Abe);car=r(y7t,"roformer"),y7t.forEach(t),far=r(uqe," \u2014 "),LQ=n(uqe,"A",{href:!0});var x7t=s(LQ);mar=r(x7t,"RoFormerForTokenClassification"),x7t.forEach(t),gar=r(uqe," (RoFormer model)"),uqe.forEach(t),har=i(K),jF=n(K,"LI",{});var bqe=s(jF);Lbe=n(bqe,"STRONG",{});var $7t=s(Lbe);par=r($7t,"squeezebert"),$7t.forEach(t),_ar=r(bqe," \u2014 "),yQ=n(bqe,"A",{href:!0});var k7t=s(yQ);uar=r(k7t,"SqueezeBertForTokenClassification"),k7t.forEach(t),bar=r(bqe," (SqueezeBERT model)"),bqe.forEach(t),Far=i(K),DF=n(K,"LI",{});var vqe=s(DF);ybe=n(vqe,"STRONG",{});var S7t=s(ybe);Tar=r(S7t,"xlm"),S7t.forEach(t),Mar=r(vqe," \u2014 "),xQ=n(vqe,"A",{href:!0});var R7t=s(xQ);Ear=r(R7t,"XLMForTokenClassification"),R7t.forEach(t),Car=r(vqe," (XLM model)"),vqe.forEach(t),war=i(K),GF=n(K,"LI",{});var Fqe=s(GF);xbe=n(Fqe,"STRONG",{});var P7t=s(xbe);Aar=r(P7t,"xlm-roberta"),P7t.forEach(t),Lar=r(Fqe," \u2014 "),$Q=n(Fqe,"A",{href:!0});var B7t=s($Q);yar=r(B7t,"XLMRobertaForTokenClassification"),B7t.forEach(t),xar=r(Fqe," (XLM-RoBERTa model)"),Fqe.forEach(t),$ar=i(K),OF=n(K,"LI",{});var Tqe=s(OF);$be=n(Tqe,"STRONG",{});var I7t=s($be);kar=r(I7t,"xlm-roberta-xl"),I7t.forEach(t),Sar=r(Tqe," \u2014 "),kQ=n(Tqe,"A",{href:!0});var N7t=s(kQ);Rar=r(N7t,"XLMRobertaXLForTokenClassification"),N7t.forEach(t),Par=r(Tqe," (XLM-RoBERTa-XL model)"),Tqe.forEach(t),Bar=i(K),VF=n(K,"LI",{});var Mqe=s(VF);kbe=n(Mqe,"STRONG",{});var q7t=s(kbe);Iar=r(q7t,"xlnet"),q7t.forEach(t),Nar=r(Mqe," \u2014 "),SQ=n(Mqe,"A",{href:!0});var j7t=s(SQ);qar=r(j7t,"XLNetForTokenClassification"),j7t.forEach(t),jar=r(Mqe," (XLNet model)"),Mqe.forEach(t),Dar=i(K),XF=n(K,"LI",{});var Eqe=s(XF);Sbe=n(Eqe,"STRONG",{});var D7t=s(Sbe);Gar=r(D7t,"yoso"),D7t.forEach(t),Oar=r(Eqe," \u2014 "),RQ=n(Eqe,"A",{href:!0});var G7t=s(RQ);Var=r(G7t,"YosoForTokenClassification"),G7t.forEach(t),Xar=r(Eqe," (YOSO model)"),Eqe.forEach(t),K.forEach(t),zar=i(va),zF=n(va,"P",{});var Cqe=s(zF);War=r(Cqe,"The model is set in evaluation mode by default using "),Rbe=n(Cqe,"CODE",{});var O7t=s(Rbe);Qar=r(O7t,"model.eval()"),O7t.forEach(t),Har=r(Cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=n(Cqe,"CODE",{});var V7t=s(Pbe);Uar=r(V7t,"model.train()"),V7t.forEach(t),Cqe.forEach(t),Jar=i(va),T(WF.$$.fragment,va),va.forEach(t),bl.forEach(t),mQe=i(f),Ed=n(f,"H2",{class:!0});var FUe=s(Ed);QF=n(FUe,"A",{id:!0,class:!0,href:!0});var X7t=s(QF);Bbe=n(X7t,"SPAN",{});var z7t=s(Bbe);T(dy.$$.fragment,z7t),z7t.forEach(t),X7t.forEach(t),Yar=i(FUe),Ibe=n(FUe,"SPAN",{});var W7t=s(Ibe);Kar=r(W7t,"AutoModelForQuestionAnswering"),W7t.forEach(t),FUe.forEach(t),gQe=i(f),Oo=n(f,"DIV",{class:!0});var vl=s(Oo);T(cy.$$.fragment,vl),Zar=i(vl),Cd=n(vl,"P",{});var Mae=s(Cd);enr=r(Mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PQ=n(Mae,"A",{href:!0});var Q7t=s(PQ);onr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),rnr=r(Mae," class method or the "),BQ=n(Mae,"A",{href:!0});var H7t=s(BQ);tnr=r(H7t,"from_config()"),H7t.forEach(t),anr=r(Mae,` class
method.`),Mae.forEach(t),nnr=i(vl),fy=n(vl,"P",{});var TUe=s(fy);snr=r(TUe,"This class cannot be instantiated directly using "),Nbe=n(TUe,"CODE",{});var U7t=s(Nbe);lnr=r(U7t,"__init__()"),U7t.forEach(t),inr=r(TUe," (throws an error)."),TUe.forEach(t),dnr=i(vl),vt=n(vl,"DIV",{class:!0});var fA=s(vt);T(my.$$.fragment,fA),cnr=i(fA),qbe=n(fA,"P",{});var J7t=s(qbe);fnr=r(J7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J7t.forEach(t),mnr=i(fA),wd=n(fA,"P",{});var Eae=s(wd);gnr=r(Eae,`Note:
Loading a model from its configuration file does `),jbe=n(Eae,"STRONG",{});var Y7t=s(jbe);hnr=r(Y7t,"not"),Y7t.forEach(t),pnr=r(Eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Eae,"A",{href:!0});var K7t=s(IQ);_nr=r(K7t,"from_pretrained()"),K7t.forEach(t),unr=r(Eae," to load the model weights."),Eae.forEach(t),bnr=i(fA),T(HF.$$.fragment,fA),fA.forEach(t),vnr=i(vl),so=n(vl,"DIV",{class:!0});var Fa=s(so);T(gy.$$.fragment,Fa),Fnr=i(Fa),Dbe=n(Fa,"P",{});var Z7t=s(Dbe);Tnr=r(Z7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z7t.forEach(t),Mnr=i(Fa),Ua=n(Fa,"P",{});var mA=s(Ua);Enr=r(mA,"The model class to instantiate is selected based on the "),Gbe=n(mA,"CODE",{});var eLt=s(Gbe);Cnr=r(eLt,"model_type"),eLt.forEach(t),wnr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Obe=n(mA,"CODE",{});var oLt=s(Obe);Anr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),Lnr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(mA,"CODE",{});var rLt=s(Vbe);ynr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),xnr=r(mA,":"),mA.forEach(t),$nr=i(Fa),V=n(Fa,"UL",{});var X=s(V);UF=n(X,"LI",{});var wqe=s(UF);Xbe=n(wqe,"STRONG",{});var tLt=s(Xbe);knr=r(tLt,"albert"),tLt.forEach(t),Snr=r(wqe," \u2014 "),NQ=n(wqe,"A",{href:!0});var aLt=s(NQ);Rnr=r(aLt,"AlbertForQuestionAnswering"),aLt.forEach(t),Pnr=r(wqe," (ALBERT model)"),wqe.forEach(t),Bnr=i(X),JF=n(X,"LI",{});var Aqe=s(JF);zbe=n(Aqe,"STRONG",{});var nLt=s(zbe);Inr=r(nLt,"bart"),nLt.forEach(t),Nnr=r(Aqe," \u2014 "),qQ=n(Aqe,"A",{href:!0});var sLt=s(qQ);qnr=r(sLt,"BartForQuestionAnswering"),sLt.forEach(t),jnr=r(Aqe," (BART model)"),Aqe.forEach(t),Dnr=i(X),YF=n(X,"LI",{});var Lqe=s(YF);Wbe=n(Lqe,"STRONG",{});var lLt=s(Wbe);Gnr=r(lLt,"bert"),lLt.forEach(t),Onr=r(Lqe," \u2014 "),jQ=n(Lqe,"A",{href:!0});var iLt=s(jQ);Vnr=r(iLt,"BertForQuestionAnswering"),iLt.forEach(t),Xnr=r(Lqe," (BERT model)"),Lqe.forEach(t),znr=i(X),KF=n(X,"LI",{});var yqe=s(KF);Qbe=n(yqe,"STRONG",{});var dLt=s(Qbe);Wnr=r(dLt,"big_bird"),dLt.forEach(t),Qnr=r(yqe," \u2014 "),DQ=n(yqe,"A",{href:!0});var cLt=s(DQ);Hnr=r(cLt,"BigBirdForQuestionAnswering"),cLt.forEach(t),Unr=r(yqe," (BigBird model)"),yqe.forEach(t),Jnr=i(X),ZF=n(X,"LI",{});var xqe=s(ZF);Hbe=n(xqe,"STRONG",{});var fLt=s(Hbe);Ynr=r(fLt,"bigbird_pegasus"),fLt.forEach(t),Knr=r(xqe," \u2014 "),GQ=n(xqe,"A",{href:!0});var mLt=s(GQ);Znr=r(mLt,"BigBirdPegasusForQuestionAnswering"),mLt.forEach(t),esr=r(xqe," (BigBird-Pegasus model)"),xqe.forEach(t),osr=i(X),eT=n(X,"LI",{});var $qe=s(eT);Ube=n($qe,"STRONG",{});var gLt=s(Ube);rsr=r(gLt,"camembert"),gLt.forEach(t),tsr=r($qe," \u2014 "),OQ=n($qe,"A",{href:!0});var hLt=s(OQ);asr=r(hLt,"CamembertForQuestionAnswering"),hLt.forEach(t),nsr=r($qe," (CamemBERT model)"),$qe.forEach(t),ssr=i(X),oT=n(X,"LI",{});var kqe=s(oT);Jbe=n(kqe,"STRONG",{});var pLt=s(Jbe);lsr=r(pLt,"canine"),pLt.forEach(t),isr=r(kqe," \u2014 "),VQ=n(kqe,"A",{href:!0});var _Lt=s(VQ);dsr=r(_Lt,"CanineForQuestionAnswering"),_Lt.forEach(t),csr=r(kqe," (CANINE model)"),kqe.forEach(t),fsr=i(X),rT=n(X,"LI",{});var Sqe=s(rT);Ybe=n(Sqe,"STRONG",{});var uLt=s(Ybe);msr=r(uLt,"convbert"),uLt.forEach(t),gsr=r(Sqe," \u2014 "),XQ=n(Sqe,"A",{href:!0});var bLt=s(XQ);hsr=r(bLt,"ConvBertForQuestionAnswering"),bLt.forEach(t),psr=r(Sqe," (ConvBERT model)"),Sqe.forEach(t),_sr=i(X),tT=n(X,"LI",{});var Rqe=s(tT);Kbe=n(Rqe,"STRONG",{});var vLt=s(Kbe);usr=r(vLt,"data2vec-text"),vLt.forEach(t),bsr=r(Rqe," \u2014 "),zQ=n(Rqe,"A",{href:!0});var FLt=s(zQ);vsr=r(FLt,"Data2VecTextForQuestionAnswering"),FLt.forEach(t),Fsr=r(Rqe," (Data2VecText model)"),Rqe.forEach(t),Tsr=i(X),aT=n(X,"LI",{});var Pqe=s(aT);Zbe=n(Pqe,"STRONG",{});var TLt=s(Zbe);Msr=r(TLt,"deberta"),TLt.forEach(t),Esr=r(Pqe," \u2014 "),WQ=n(Pqe,"A",{href:!0});var MLt=s(WQ);Csr=r(MLt,"DebertaForQuestionAnswering"),MLt.forEach(t),wsr=r(Pqe," (DeBERTa model)"),Pqe.forEach(t),Asr=i(X),nT=n(X,"LI",{});var Bqe=s(nT);eve=n(Bqe,"STRONG",{});var ELt=s(eve);Lsr=r(ELt,"deberta-v2"),ELt.forEach(t),ysr=r(Bqe," \u2014 "),QQ=n(Bqe,"A",{href:!0});var CLt=s(QQ);xsr=r(CLt,"DebertaV2ForQuestionAnswering"),CLt.forEach(t),$sr=r(Bqe," (DeBERTa-v2 model)"),Bqe.forEach(t),ksr=i(X),sT=n(X,"LI",{});var Iqe=s(sT);ove=n(Iqe,"STRONG",{});var wLt=s(ove);Ssr=r(wLt,"distilbert"),wLt.forEach(t),Rsr=r(Iqe," \u2014 "),HQ=n(Iqe,"A",{href:!0});var ALt=s(HQ);Psr=r(ALt,"DistilBertForQuestionAnswering"),ALt.forEach(t),Bsr=r(Iqe," (DistilBERT model)"),Iqe.forEach(t),Isr=i(X),lT=n(X,"LI",{});var Nqe=s(lT);rve=n(Nqe,"STRONG",{});var LLt=s(rve);Nsr=r(LLt,"electra"),LLt.forEach(t),qsr=r(Nqe," \u2014 "),UQ=n(Nqe,"A",{href:!0});var yLt=s(UQ);jsr=r(yLt,"ElectraForQuestionAnswering"),yLt.forEach(t),Dsr=r(Nqe," (ELECTRA model)"),Nqe.forEach(t),Gsr=i(X),iT=n(X,"LI",{});var qqe=s(iT);tve=n(qqe,"STRONG",{});var xLt=s(tve);Osr=r(xLt,"flaubert"),xLt.forEach(t),Vsr=r(qqe," \u2014 "),JQ=n(qqe,"A",{href:!0});var $Lt=s(JQ);Xsr=r($Lt,"FlaubertForQuestionAnsweringSimple"),$Lt.forEach(t),zsr=r(qqe," (FlauBERT model)"),qqe.forEach(t),Wsr=i(X),dT=n(X,"LI",{});var jqe=s(dT);ave=n(jqe,"STRONG",{});var kLt=s(ave);Qsr=r(kLt,"fnet"),kLt.forEach(t),Hsr=r(jqe," \u2014 "),YQ=n(jqe,"A",{href:!0});var SLt=s(YQ);Usr=r(SLt,"FNetForQuestionAnswering"),SLt.forEach(t),Jsr=r(jqe," (FNet model)"),jqe.forEach(t),Ysr=i(X),cT=n(X,"LI",{});var Dqe=s(cT);nve=n(Dqe,"STRONG",{});var RLt=s(nve);Ksr=r(RLt,"funnel"),RLt.forEach(t),Zsr=r(Dqe," \u2014 "),KQ=n(Dqe,"A",{href:!0});var PLt=s(KQ);elr=r(PLt,"FunnelForQuestionAnswering"),PLt.forEach(t),olr=r(Dqe," (Funnel Transformer model)"),Dqe.forEach(t),rlr=i(X),fT=n(X,"LI",{});var Gqe=s(fT);sve=n(Gqe,"STRONG",{});var BLt=s(sve);tlr=r(BLt,"gptj"),BLt.forEach(t),alr=r(Gqe," \u2014 "),ZQ=n(Gqe,"A",{href:!0});var ILt=s(ZQ);nlr=r(ILt,"GPTJForQuestionAnswering"),ILt.forEach(t),slr=r(Gqe," (GPT-J model)"),Gqe.forEach(t),llr=i(X),mT=n(X,"LI",{});var Oqe=s(mT);lve=n(Oqe,"STRONG",{});var NLt=s(lve);ilr=r(NLt,"ibert"),NLt.forEach(t),dlr=r(Oqe," \u2014 "),eH=n(Oqe,"A",{href:!0});var qLt=s(eH);clr=r(qLt,"IBertForQuestionAnswering"),qLt.forEach(t),flr=r(Oqe," (I-BERT model)"),Oqe.forEach(t),mlr=i(X),gT=n(X,"LI",{});var Vqe=s(gT);ive=n(Vqe,"STRONG",{});var jLt=s(ive);glr=r(jLt,"layoutlmv2"),jLt.forEach(t),hlr=r(Vqe," \u2014 "),oH=n(Vqe,"A",{href:!0});var DLt=s(oH);plr=r(DLt,"LayoutLMv2ForQuestionAnswering"),DLt.forEach(t),_lr=r(Vqe," (LayoutLMv2 model)"),Vqe.forEach(t),ulr=i(X),hT=n(X,"LI",{});var Xqe=s(hT);dve=n(Xqe,"STRONG",{});var GLt=s(dve);blr=r(GLt,"layoutlmv3"),GLt.forEach(t),vlr=r(Xqe," \u2014 "),rH=n(Xqe,"A",{href:!0});var OLt=s(rH);Flr=r(OLt,"LayoutLMv3ForQuestionAnswering"),OLt.forEach(t),Tlr=r(Xqe," (LayoutLMv3 model)"),Xqe.forEach(t),Mlr=i(X),pT=n(X,"LI",{});var zqe=s(pT);cve=n(zqe,"STRONG",{});var VLt=s(cve);Elr=r(VLt,"led"),VLt.forEach(t),Clr=r(zqe," \u2014 "),tH=n(zqe,"A",{href:!0});var XLt=s(tH);wlr=r(XLt,"LEDForQuestionAnswering"),XLt.forEach(t),Alr=r(zqe," (LED model)"),zqe.forEach(t),Llr=i(X),_T=n(X,"LI",{});var Wqe=s(_T);fve=n(Wqe,"STRONG",{});var zLt=s(fve);ylr=r(zLt,"longformer"),zLt.forEach(t),xlr=r(Wqe," \u2014 "),aH=n(Wqe,"A",{href:!0});var WLt=s(aH);$lr=r(WLt,"LongformerForQuestionAnswering"),WLt.forEach(t),klr=r(Wqe," (Longformer model)"),Wqe.forEach(t),Slr=i(X),uT=n(X,"LI",{});var Qqe=s(uT);mve=n(Qqe,"STRONG",{});var QLt=s(mve);Rlr=r(QLt,"luke"),QLt.forEach(t),Plr=r(Qqe," \u2014 "),nH=n(Qqe,"A",{href:!0});var HLt=s(nH);Blr=r(HLt,"LukeForQuestionAnswering"),HLt.forEach(t),Ilr=r(Qqe," (LUKE model)"),Qqe.forEach(t),Nlr=i(X),bT=n(X,"LI",{});var Hqe=s(bT);gve=n(Hqe,"STRONG",{});var ULt=s(gve);qlr=r(ULt,"lxmert"),ULt.forEach(t),jlr=r(Hqe," \u2014 "),sH=n(Hqe,"A",{href:!0});var JLt=s(sH);Dlr=r(JLt,"LxmertForQuestionAnswering"),JLt.forEach(t),Glr=r(Hqe," (LXMERT model)"),Hqe.forEach(t),Olr=i(X),vT=n(X,"LI",{});var Uqe=s(vT);hve=n(Uqe,"STRONG",{});var YLt=s(hve);Vlr=r(YLt,"mbart"),YLt.forEach(t),Xlr=r(Uqe," \u2014 "),lH=n(Uqe,"A",{href:!0});var KLt=s(lH);zlr=r(KLt,"MBartForQuestionAnswering"),KLt.forEach(t),Wlr=r(Uqe," (mBART model)"),Uqe.forEach(t),Qlr=i(X),FT=n(X,"LI",{});var Jqe=s(FT);pve=n(Jqe,"STRONG",{});var ZLt=s(pve);Hlr=r(ZLt,"megatron-bert"),ZLt.forEach(t),Ulr=r(Jqe," \u2014 "),iH=n(Jqe,"A",{href:!0});var eyt=s(iH);Jlr=r(eyt,"MegatronBertForQuestionAnswering"),eyt.forEach(t),Ylr=r(Jqe," (Megatron-BERT model)"),Jqe.forEach(t),Klr=i(X),TT=n(X,"LI",{});var Yqe=s(TT);_ve=n(Yqe,"STRONG",{});var oyt=s(_ve);Zlr=r(oyt,"mobilebert"),oyt.forEach(t),eir=r(Yqe," \u2014 "),dH=n(Yqe,"A",{href:!0});var ryt=s(dH);oir=r(ryt,"MobileBertForQuestionAnswering"),ryt.forEach(t),rir=r(Yqe," (MobileBERT model)"),Yqe.forEach(t),tir=i(X),MT=n(X,"LI",{});var Kqe=s(MT);uve=n(Kqe,"STRONG",{});var tyt=s(uve);air=r(tyt,"mpnet"),tyt.forEach(t),nir=r(Kqe," \u2014 "),cH=n(Kqe,"A",{href:!0});var ayt=s(cH);sir=r(ayt,"MPNetForQuestionAnswering"),ayt.forEach(t),lir=r(Kqe," (MPNet model)"),Kqe.forEach(t),iir=i(X),ET=n(X,"LI",{});var Zqe=s(ET);bve=n(Zqe,"STRONG",{});var nyt=s(bve);dir=r(nyt,"mvp"),nyt.forEach(t),cir=r(Zqe," \u2014 "),fH=n(Zqe,"A",{href:!0});var syt=s(fH);fir=r(syt,"MvpForQuestionAnswering"),syt.forEach(t),mir=r(Zqe," (MVP model)"),Zqe.forEach(t),gir=i(X),CT=n(X,"LI",{});var eje=s(CT);vve=n(eje,"STRONG",{});var lyt=s(vve);hir=r(lyt,"nezha"),lyt.forEach(t),pir=r(eje," \u2014 "),mH=n(eje,"A",{href:!0});var iyt=s(mH);_ir=r(iyt,"NezhaForQuestionAnswering"),iyt.forEach(t),uir=r(eje," (Nezha model)"),eje.forEach(t),bir=i(X),wT=n(X,"LI",{});var oje=s(wT);Fve=n(oje,"STRONG",{});var dyt=s(Fve);vir=r(dyt,"nystromformer"),dyt.forEach(t),Fir=r(oje," \u2014 "),gH=n(oje,"A",{href:!0});var cyt=s(gH);Tir=r(cyt,"NystromformerForQuestionAnswering"),cyt.forEach(t),Mir=r(oje," (Nystr\xF6mformer model)"),oje.forEach(t),Eir=i(X),AT=n(X,"LI",{});var rje=s(AT);Tve=n(rje,"STRONG",{});var fyt=s(Tve);Cir=r(fyt,"qdqbert"),fyt.forEach(t),wir=r(rje," \u2014 "),hH=n(rje,"A",{href:!0});var myt=s(hH);Air=r(myt,"QDQBertForQuestionAnswering"),myt.forEach(t),Lir=r(rje," (QDQBert model)"),rje.forEach(t),yir=i(X),LT=n(X,"LI",{});var tje=s(LT);Mve=n(tje,"STRONG",{});var gyt=s(Mve);xir=r(gyt,"reformer"),gyt.forEach(t),$ir=r(tje," \u2014 "),pH=n(tje,"A",{href:!0});var hyt=s(pH);kir=r(hyt,"ReformerForQuestionAnswering"),hyt.forEach(t),Sir=r(tje," (Reformer model)"),tje.forEach(t),Rir=i(X),yT=n(X,"LI",{});var aje=s(yT);Eve=n(aje,"STRONG",{});var pyt=s(Eve);Pir=r(pyt,"rembert"),pyt.forEach(t),Bir=r(aje," \u2014 "),_H=n(aje,"A",{href:!0});var _yt=s(_H);Iir=r(_yt,"RemBertForQuestionAnswering"),_yt.forEach(t),Nir=r(aje," (RemBERT model)"),aje.forEach(t),qir=i(X),xT=n(X,"LI",{});var nje=s(xT);Cve=n(nje,"STRONG",{});var uyt=s(Cve);jir=r(uyt,"roberta"),uyt.forEach(t),Dir=r(nje," \u2014 "),uH=n(nje,"A",{href:!0});var byt=s(uH);Gir=r(byt,"RobertaForQuestionAnswering"),byt.forEach(t),Oir=r(nje," (RoBERTa model)"),nje.forEach(t),Vir=i(X),$T=n(X,"LI",{});var sje=s($T);wve=n(sje,"STRONG",{});var vyt=s(wve);Xir=r(vyt,"roformer"),vyt.forEach(t),zir=r(sje," \u2014 "),bH=n(sje,"A",{href:!0});var Fyt=s(bH);Wir=r(Fyt,"RoFormerForQuestionAnswering"),Fyt.forEach(t),Qir=r(sje," (RoFormer model)"),sje.forEach(t),Hir=i(X),kT=n(X,"LI",{});var lje=s(kT);Ave=n(lje,"STRONG",{});var Tyt=s(Ave);Uir=r(Tyt,"splinter"),Tyt.forEach(t),Jir=r(lje," \u2014 "),vH=n(lje,"A",{href:!0});var Myt=s(vH);Yir=r(Myt,"SplinterForQuestionAnswering"),Myt.forEach(t),Kir=r(lje," (Splinter model)"),lje.forEach(t),Zir=i(X),ST=n(X,"LI",{});var ije=s(ST);Lve=n(ije,"STRONG",{});var Eyt=s(Lve);edr=r(Eyt,"squeezebert"),Eyt.forEach(t),odr=r(ije," \u2014 "),FH=n(ije,"A",{href:!0});var Cyt=s(FH);rdr=r(Cyt,"SqueezeBertForQuestionAnswering"),Cyt.forEach(t),tdr=r(ije," (SqueezeBERT model)"),ije.forEach(t),adr=i(X),RT=n(X,"LI",{});var dje=s(RT);yve=n(dje,"STRONG",{});var wyt=s(yve);ndr=r(wyt,"xlm"),wyt.forEach(t),sdr=r(dje," \u2014 "),TH=n(dje,"A",{href:!0});var Ayt=s(TH);ldr=r(Ayt,"XLMForQuestionAnsweringSimple"),Ayt.forEach(t),idr=r(dje," (XLM model)"),dje.forEach(t),ddr=i(X),PT=n(X,"LI",{});var cje=s(PT);xve=n(cje,"STRONG",{});var Lyt=s(xve);cdr=r(Lyt,"xlm-roberta"),Lyt.forEach(t),fdr=r(cje," \u2014 "),MH=n(cje,"A",{href:!0});var yyt=s(MH);mdr=r(yyt,"XLMRobertaForQuestionAnswering"),yyt.forEach(t),gdr=r(cje," (XLM-RoBERTa model)"),cje.forEach(t),hdr=i(X),BT=n(X,"LI",{});var fje=s(BT);$ve=n(fje,"STRONG",{});var xyt=s($ve);pdr=r(xyt,"xlm-roberta-xl"),xyt.forEach(t),_dr=r(fje," \u2014 "),EH=n(fje,"A",{href:!0});var $yt=s(EH);udr=r($yt,"XLMRobertaXLForQuestionAnswering"),$yt.forEach(t),bdr=r(fje," (XLM-RoBERTa-XL model)"),fje.forEach(t),vdr=i(X),IT=n(X,"LI",{});var mje=s(IT);kve=n(mje,"STRONG",{});var kyt=s(kve);Fdr=r(kyt,"xlnet"),kyt.forEach(t),Tdr=r(mje," \u2014 "),CH=n(mje,"A",{href:!0});var Syt=s(CH);Mdr=r(Syt,"XLNetForQuestionAnsweringSimple"),Syt.forEach(t),Edr=r(mje," (XLNet model)"),mje.forEach(t),Cdr=i(X),NT=n(X,"LI",{});var gje=s(NT);Sve=n(gje,"STRONG",{});var Ryt=s(Sve);wdr=r(Ryt,"yoso"),Ryt.forEach(t),Adr=r(gje," \u2014 "),wH=n(gje,"A",{href:!0});var Pyt=s(wH);Ldr=r(Pyt,"YosoForQuestionAnswering"),Pyt.forEach(t),ydr=r(gje," (YOSO model)"),gje.forEach(t),X.forEach(t),xdr=i(Fa),qT=n(Fa,"P",{});var hje=s(qT);$dr=r(hje,"The model is set in evaluation mode by default using "),Rve=n(hje,"CODE",{});var Byt=s(Rve);kdr=r(Byt,"model.eval()"),Byt.forEach(t),Sdr=r(hje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(hje,"CODE",{});var Iyt=s(Pve);Rdr=r(Iyt,"model.train()"),Iyt.forEach(t),hje.forEach(t),Pdr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),vl.forEach(t),hQe=i(f),Ad=n(f,"H2",{class:!0});var MUe=s(Ad);DT=n(MUe,"A",{id:!0,class:!0,href:!0});var Nyt=s(DT);Bve=n(Nyt,"SPAN",{});var qyt=s(Bve);T(hy.$$.fragment,qyt),qyt.forEach(t),Nyt.forEach(t),Bdr=i(MUe),Ive=n(MUe,"SPAN",{});var jyt=s(Ive);Idr=r(jyt,"AutoModelForTableQuestionAnswering"),jyt.forEach(t),MUe.forEach(t),pQe=i(f),Vo=n(f,"DIV",{class:!0});var Fl=s(Vo);T(py.$$.fragment,Fl),Ndr=i(Fl),Ld=n(Fl,"P",{});var Cae=s(Ld);qdr=r(Cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AH=n(Cae,"A",{href:!0});var Dyt=s(AH);jdr=r(Dyt,"from_pretrained()"),Dyt.forEach(t),Ddr=r(Cae," class method or the "),LH=n(Cae,"A",{href:!0});var Gyt=s(LH);Gdr=r(Gyt,"from_config()"),Gyt.forEach(t),Odr=r(Cae,` class
method.`),Cae.forEach(t),Vdr=i(Fl),_y=n(Fl,"P",{});var EUe=s(_y);Xdr=r(EUe,"This class cannot be instantiated directly using "),Nve=n(EUe,"CODE",{});var Oyt=s(Nve);zdr=r(Oyt,"__init__()"),Oyt.forEach(t),Wdr=r(EUe," (throws an error)."),EUe.forEach(t),Qdr=i(Fl),Ft=n(Fl,"DIV",{class:!0});var gA=s(Ft);T(uy.$$.fragment,gA),Hdr=i(gA),qve=n(gA,"P",{});var Vyt=s(qve);Udr=r(Vyt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vyt.forEach(t),Jdr=i(gA),yd=n(gA,"P",{});var wae=s(yd);Ydr=r(wae,`Note:
Loading a model from its configuration file does `),jve=n(wae,"STRONG",{});var Xyt=s(jve);Kdr=r(Xyt,"not"),Xyt.forEach(t),Zdr=r(wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(wae,"A",{href:!0});var zyt=s(yH);ecr=r(zyt,"from_pretrained()"),zyt.forEach(t),ocr=r(wae," to load the model weights."),wae.forEach(t),rcr=i(gA),T(GT.$$.fragment,gA),gA.forEach(t),tcr=i(Fl),lo=n(Fl,"DIV",{class:!0});var Ta=s(lo);T(by.$$.fragment,Ta),acr=i(Ta),Dve=n(Ta,"P",{});var Wyt=s(Dve);ncr=r(Wyt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wyt.forEach(t),scr=i(Ta),Ja=n(Ta,"P",{});var hA=s(Ja);lcr=r(hA,"The model class to instantiate is selected based on the "),Gve=n(hA,"CODE",{});var Qyt=s(Gve);icr=r(Qyt,"model_type"),Qyt.forEach(t),dcr=r(hA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(hA,"CODE",{});var Hyt=s(Ove);ccr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),fcr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(hA,"CODE",{});var Uyt=s(Vve);mcr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),gcr=r(hA,":"),hA.forEach(t),hcr=i(Ta),Xve=n(Ta,"UL",{});var Jyt=s(Xve);OT=n(Jyt,"LI",{});var pje=s(OT);zve=n(pje,"STRONG",{});var Yyt=s(zve);pcr=r(Yyt,"tapas"),Yyt.forEach(t),_cr=r(pje," \u2014 "),xH=n(pje,"A",{href:!0});var Kyt=s(xH);ucr=r(Kyt,"TapasForQuestionAnswering"),Kyt.forEach(t),bcr=r(pje," (TAPAS model)"),pje.forEach(t),Jyt.forEach(t),vcr=i(Ta),VT=n(Ta,"P",{});var _je=s(VT);Fcr=r(_je,"The model is set in evaluation mode by default using "),Wve=n(_je,"CODE",{});var Zyt=s(Wve);Tcr=r(Zyt,"model.eval()"),Zyt.forEach(t),Mcr=r(_je,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(_je,"CODE",{});var ext=s(Qve);Ecr=r(ext,"model.train()"),ext.forEach(t),_je.forEach(t),Ccr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),Fl.forEach(t),_Qe=i(f),xd=n(f,"H2",{class:!0});var CUe=s(xd);zT=n(CUe,"A",{id:!0,class:!0,href:!0});var oxt=s(zT);Hve=n(oxt,"SPAN",{});var rxt=s(Hve);T(vy.$$.fragment,rxt),rxt.forEach(t),oxt.forEach(t),wcr=i(CUe),Uve=n(CUe,"SPAN",{});var txt=s(Uve);Acr=r(txt,"AutoModelForImageClassification"),txt.forEach(t),CUe.forEach(t),uQe=i(f),Xo=n(f,"DIV",{class:!0});var Tl=s(Xo);T(Fy.$$.fragment,Tl),Lcr=i(Tl),$d=n(Tl,"P",{});var Aae=s($d);ycr=r(Aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$H=n(Aae,"A",{href:!0});var axt=s($H);xcr=r(axt,"from_pretrained()"),axt.forEach(t),$cr=r(Aae," class method or the "),kH=n(Aae,"A",{href:!0});var nxt=s(kH);kcr=r(nxt,"from_config()"),nxt.forEach(t),Scr=r(Aae,` class
method.`),Aae.forEach(t),Rcr=i(Tl),Ty=n(Tl,"P",{});var wUe=s(Ty);Pcr=r(wUe,"This class cannot be instantiated directly using "),Jve=n(wUe,"CODE",{});var sxt=s(Jve);Bcr=r(sxt,"__init__()"),sxt.forEach(t),Icr=r(wUe," (throws an error)."),wUe.forEach(t),Ncr=i(Tl),Tt=n(Tl,"DIV",{class:!0});var pA=s(Tt);T(My.$$.fragment,pA),qcr=i(pA),Yve=n(pA,"P",{});var lxt=s(Yve);jcr=r(lxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lxt.forEach(t),Dcr=i(pA),kd=n(pA,"P",{});var Lae=s(kd);Gcr=r(Lae,`Note:
Loading a model from its configuration file does `),Kve=n(Lae,"STRONG",{});var ixt=s(Kve);Ocr=r(ixt,"not"),ixt.forEach(t),Vcr=r(Lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(Lae,"A",{href:!0});var dxt=s(SH);Xcr=r(dxt,"from_pretrained()"),dxt.forEach(t),zcr=r(Lae," to load the model weights."),Lae.forEach(t),Wcr=i(pA),T(WT.$$.fragment,pA),pA.forEach(t),Qcr=i(Tl),io=n(Tl,"DIV",{class:!0});var Ma=s(io);T(Ey.$$.fragment,Ma),Hcr=i(Ma),Zve=n(Ma,"P",{});var cxt=s(Zve);Ucr=r(cxt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cxt.forEach(t),Jcr=i(Ma),Ya=n(Ma,"P",{});var _A=s(Ya);Ycr=r(_A,"The model class to instantiate is selected based on the "),e5e=n(_A,"CODE",{});var fxt=s(e5e);Kcr=r(fxt,"model_type"),fxt.forEach(t),Zcr=r(_A,` property of the config object (either
passed as an argument or loaded from `),o5e=n(_A,"CODE",{});var mxt=s(o5e);efr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),ofr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(_A,"CODE",{});var gxt=s(r5e);rfr=r(gxt,"pretrained_model_name_or_path"),gxt.forEach(t),tfr=r(_A,":"),_A.forEach(t),afr=i(Ma),be=n(Ma,"UL",{});var Fe=s(be);QT=n(Fe,"LI",{});var uje=s(QT);t5e=n(uje,"STRONG",{});var hxt=s(t5e);nfr=r(hxt,"beit"),hxt.forEach(t),sfr=r(uje," \u2014 "),RH=n(uje,"A",{href:!0});var pxt=s(RH);lfr=r(pxt,"BeitForImageClassification"),pxt.forEach(t),ifr=r(uje," (BEiT model)"),uje.forEach(t),dfr=i(Fe),HT=n(Fe,"LI",{});var bje=s(HT);a5e=n(bje,"STRONG",{});var _xt=s(a5e);cfr=r(_xt,"convnext"),_xt.forEach(t),ffr=r(bje," \u2014 "),PH=n(bje,"A",{href:!0});var uxt=s(PH);mfr=r(uxt,"ConvNextForImageClassification"),uxt.forEach(t),gfr=r(bje," (ConvNeXT model)"),bje.forEach(t),hfr=i(Fe),UT=n(Fe,"LI",{});var vje=s(UT);n5e=n(vje,"STRONG",{});var bxt=s(n5e);pfr=r(bxt,"cvt"),bxt.forEach(t),_fr=r(vje," \u2014 "),BH=n(vje,"A",{href:!0});var vxt=s(BH);ufr=r(vxt,"CvtForImageClassification"),vxt.forEach(t),bfr=r(vje," (CvT model)"),vje.forEach(t),vfr=i(Fe),JT=n(Fe,"LI",{});var Fje=s(JT);s5e=n(Fje,"STRONG",{});var Fxt=s(s5e);Ffr=r(Fxt,"data2vec-vision"),Fxt.forEach(t),Tfr=r(Fje," \u2014 "),IH=n(Fje,"A",{href:!0});var Txt=s(IH);Mfr=r(Txt,"Data2VecVisionForImageClassification"),Txt.forEach(t),Efr=r(Fje," (Data2VecVision model)"),Fje.forEach(t),Cfr=i(Fe),rl=n(Fe,"LI",{});var AR=s(rl);l5e=n(AR,"STRONG",{});var Mxt=s(l5e);wfr=r(Mxt,"deit"),Mxt.forEach(t),Afr=r(AR," \u2014 "),NH=n(AR,"A",{href:!0});var Ext=s(NH);Lfr=r(Ext,"DeiTForImageClassification"),Ext.forEach(t),yfr=r(AR," or "),qH=n(AR,"A",{href:!0});var Cxt=s(qH);xfr=r(Cxt,"DeiTForImageClassificationWithTeacher"),Cxt.forEach(t),$fr=r(AR," (DeiT model)"),AR.forEach(t),kfr=i(Fe),YT=n(Fe,"LI",{});var Tje=s(YT);i5e=n(Tje,"STRONG",{});var wxt=s(i5e);Sfr=r(wxt,"imagegpt"),wxt.forEach(t),Rfr=r(Tje," \u2014 "),jH=n(Tje,"A",{href:!0});var Axt=s(jH);Pfr=r(Axt,"ImageGPTForImageClassification"),Axt.forEach(t),Bfr=r(Tje," (ImageGPT model)"),Tje.forEach(t),Ifr=i(Fe),tl=n(Fe,"LI",{});var LR=s(tl);d5e=n(LR,"STRONG",{});var Lxt=s(d5e);Nfr=r(Lxt,"levit"),Lxt.forEach(t),qfr=r(LR," \u2014 "),DH=n(LR,"A",{href:!0});var yxt=s(DH);jfr=r(yxt,"LevitForImageClassification"),yxt.forEach(t),Dfr=r(LR," or "),GH=n(LR,"A",{href:!0});var xxt=s(GH);Gfr=r(xxt,"LevitForImageClassificationWithTeacher"),xxt.forEach(t),Ofr=r(LR," (LeViT model)"),LR.forEach(t),Vfr=i(Fe),KT=n(Fe,"LI",{});var Mje=s(KT);c5e=n(Mje,"STRONG",{});var $xt=s(c5e);Xfr=r($xt,"mobilevit"),$xt.forEach(t),zfr=r(Mje," \u2014 "),OH=n(Mje,"A",{href:!0});var kxt=s(OH);Wfr=r(kxt,"MobileViTForImageClassification"),kxt.forEach(t),Qfr=r(Mje," (MobileViT model)"),Mje.forEach(t),Hfr=i(Fe),Mt=n(Fe,"LI",{});var Xf=s(Mt);f5e=n(Xf,"STRONG",{});var Sxt=s(f5e);Ufr=r(Sxt,"perceiver"),Sxt.forEach(t),Jfr=r(Xf," \u2014 "),VH=n(Xf,"A",{href:!0});var Rxt=s(VH);Yfr=r(Rxt,"PerceiverForImageClassificationLearned"),Rxt.forEach(t),Kfr=r(Xf," or "),XH=n(Xf,"A",{href:!0});var Pxt=s(XH);Zfr=r(Pxt,"PerceiverForImageClassificationFourier"),Pxt.forEach(t),emr=r(Xf," or "),zH=n(Xf,"A",{href:!0});var Bxt=s(zH);omr=r(Bxt,"PerceiverForImageClassificationConvProcessing"),Bxt.forEach(t),rmr=r(Xf," (Perceiver model)"),Xf.forEach(t),tmr=i(Fe),ZT=n(Fe,"LI",{});var Eje=s(ZT);m5e=n(Eje,"STRONG",{});var Ixt=s(m5e);amr=r(Ixt,"poolformer"),Ixt.forEach(t),nmr=r(Eje," \u2014 "),WH=n(Eje,"A",{href:!0});var Nxt=s(WH);smr=r(Nxt,"PoolFormerForImageClassification"),Nxt.forEach(t),lmr=r(Eje," (PoolFormer model)"),Eje.forEach(t),imr=i(Fe),e8=n(Fe,"LI",{});var Cje=s(e8);g5e=n(Cje,"STRONG",{});var qxt=s(g5e);dmr=r(qxt,"regnet"),qxt.forEach(t),cmr=r(Cje," \u2014 "),QH=n(Cje,"A",{href:!0});var jxt=s(QH);fmr=r(jxt,"RegNetForImageClassification"),jxt.forEach(t),mmr=r(Cje," (RegNet model)"),Cje.forEach(t),gmr=i(Fe),o8=n(Fe,"LI",{});var wje=s(o8);h5e=n(wje,"STRONG",{});var Dxt=s(h5e);hmr=r(Dxt,"resnet"),Dxt.forEach(t),pmr=r(wje," \u2014 "),HH=n(wje,"A",{href:!0});var Gxt=s(HH);_mr=r(Gxt,"ResNetForImageClassification"),Gxt.forEach(t),umr=r(wje," (ResNet model)"),wje.forEach(t),bmr=i(Fe),r8=n(Fe,"LI",{});var Aje=s(r8);p5e=n(Aje,"STRONG",{});var Oxt=s(p5e);vmr=r(Oxt,"segformer"),Oxt.forEach(t),Fmr=r(Aje," \u2014 "),UH=n(Aje,"A",{href:!0});var Vxt=s(UH);Tmr=r(Vxt,"SegformerForImageClassification"),Vxt.forEach(t),Mmr=r(Aje," (SegFormer model)"),Aje.forEach(t),Emr=i(Fe),t8=n(Fe,"LI",{});var Lje=s(t8);_5e=n(Lje,"STRONG",{});var Xxt=s(_5e);Cmr=r(Xxt,"swin"),Xxt.forEach(t),wmr=r(Lje," \u2014 "),JH=n(Lje,"A",{href:!0});var zxt=s(JH);Amr=r(zxt,"SwinForImageClassification"),zxt.forEach(t),Lmr=r(Lje," (Swin Transformer model)"),Lje.forEach(t),ymr=i(Fe),a8=n(Fe,"LI",{});var yje=s(a8);u5e=n(yje,"STRONG",{});var Wxt=s(u5e);xmr=r(Wxt,"swinv2"),Wxt.forEach(t),$mr=r(yje," \u2014 "),YH=n(yje,"A",{href:!0});var Qxt=s(YH);kmr=r(Qxt,"Swinv2ForImageClassification"),Qxt.forEach(t),Smr=r(yje," (Swin Transformer V2 model)"),yje.forEach(t),Rmr=i(Fe),n8=n(Fe,"LI",{});var xje=s(n8);b5e=n(xje,"STRONG",{});var Hxt=s(b5e);Pmr=r(Hxt,"van"),Hxt.forEach(t),Bmr=r(xje," \u2014 "),KH=n(xje,"A",{href:!0});var Uxt=s(KH);Imr=r(Uxt,"VanForImageClassification"),Uxt.forEach(t),Nmr=r(xje," (VAN model)"),xje.forEach(t),qmr=i(Fe),s8=n(Fe,"LI",{});var $je=s(s8);v5e=n($je,"STRONG",{});var Jxt=s(v5e);jmr=r(Jxt,"vit"),Jxt.forEach(t),Dmr=r($je," \u2014 "),ZH=n($je,"A",{href:!0});var Yxt=s(ZH);Gmr=r(Yxt,"ViTForImageClassification"),Yxt.forEach(t),Omr=r($je," (ViT model)"),$je.forEach(t),Fe.forEach(t),Vmr=i(Ma),l8=n(Ma,"P",{});var kje=s(l8);Xmr=r(kje,"The model is set in evaluation mode by default using "),F5e=n(kje,"CODE",{});var Kxt=s(F5e);zmr=r(Kxt,"model.eval()"),Kxt.forEach(t),Wmr=r(kje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T5e=n(kje,"CODE",{});var Zxt=s(T5e);Qmr=r(Zxt,"model.train()"),Zxt.forEach(t),kje.forEach(t),Hmr=i(Ma),T(i8.$$.fragment,Ma),Ma.forEach(t),Tl.forEach(t),bQe=i(f),Sd=n(f,"H2",{class:!0});var AUe=s(Sd);d8=n(AUe,"A",{id:!0,class:!0,href:!0});var e$t=s(d8);M5e=n(e$t,"SPAN",{});var o$t=s(M5e);T(Cy.$$.fragment,o$t),o$t.forEach(t),e$t.forEach(t),Umr=i(AUe),E5e=n(AUe,"SPAN",{});var r$t=s(E5e);Jmr=r(r$t,"AutoModelForVideoClassification"),r$t.forEach(t),AUe.forEach(t),vQe=i(f),zo=n(f,"DIV",{class:!0});var Ml=s(zo);T(wy.$$.fragment,Ml),Ymr=i(Ml),Rd=n(Ml,"P",{});var yae=s(Rd);Kmr=r(yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),eU=n(yae,"A",{href:!0});var t$t=s(eU);Zmr=r(t$t,"from_pretrained()"),t$t.forEach(t),egr=r(yae," class method or the "),oU=n(yae,"A",{href:!0});var a$t=s(oU);ogr=r(a$t,"from_config()"),a$t.forEach(t),rgr=r(yae,` class
method.`),yae.forEach(t),tgr=i(Ml),Ay=n(Ml,"P",{});var LUe=s(Ay);agr=r(LUe,"This class cannot be instantiated directly using "),C5e=n(LUe,"CODE",{});var n$t=s(C5e);ngr=r(n$t,"__init__()"),n$t.forEach(t),sgr=r(LUe," (throws an error)."),LUe.forEach(t),lgr=i(Ml),Et=n(Ml,"DIV",{class:!0});var uA=s(Et);T(Ly.$$.fragment,uA),igr=i(uA),w5e=n(uA,"P",{});var s$t=s(w5e);dgr=r(s$t,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),s$t.forEach(t),cgr=i(uA),Pd=n(uA,"P",{});var xae=s(Pd);fgr=r(xae,`Note:
Loading a model from its configuration file does `),A5e=n(xae,"STRONG",{});var l$t=s(A5e);mgr=r(l$t,"not"),l$t.forEach(t),ggr=r(xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(xae,"A",{href:!0});var i$t=s(rU);hgr=r(i$t,"from_pretrained()"),i$t.forEach(t),pgr=r(xae," to load the model weights."),xae.forEach(t),_gr=i(uA),T(c8.$$.fragment,uA),uA.forEach(t),ugr=i(Ml),co=n(Ml,"DIV",{class:!0});var Ea=s(co);T(yy.$$.fragment,Ea),bgr=i(Ea),L5e=n(Ea,"P",{});var d$t=s(L5e);vgr=r(d$t,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),d$t.forEach(t),Fgr=i(Ea),Ka=n(Ea,"P",{});var bA=s(Ka);Tgr=r(bA,"The model class to instantiate is selected based on the "),y5e=n(bA,"CODE",{});var c$t=s(y5e);Mgr=r(c$t,"model_type"),c$t.forEach(t),Egr=r(bA,` property of the config object (either
passed as an argument or loaded from `),x5e=n(bA,"CODE",{});var f$t=s(x5e);Cgr=r(f$t,"pretrained_model_name_or_path"),f$t.forEach(t),wgr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$5e=n(bA,"CODE",{});var m$t=s($5e);Agr=r(m$t,"pretrained_model_name_or_path"),m$t.forEach(t),Lgr=r(bA,":"),bA.forEach(t),ygr=i(Ea),k5e=n(Ea,"UL",{});var g$t=s(k5e);f8=n(g$t,"LI",{});var Sje=s(f8);S5e=n(Sje,"STRONG",{});var h$t=s(S5e);xgr=r(h$t,"videomae"),h$t.forEach(t),$gr=r(Sje," \u2014 "),tU=n(Sje,"A",{href:!0});var p$t=s(tU);kgr=r(p$t,"VideoMAEForVideoClassification"),p$t.forEach(t),Sgr=r(Sje," (VideoMAE model)"),Sje.forEach(t),g$t.forEach(t),Rgr=i(Ea),m8=n(Ea,"P",{});var Rje=s(m8);Pgr=r(Rje,"The model is set in evaluation mode by default using "),R5e=n(Rje,"CODE",{});var _$t=s(R5e);Bgr=r(_$t,"model.eval()"),_$t.forEach(t),Igr=r(Rje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P5e=n(Rje,"CODE",{});var u$t=s(P5e);Ngr=r(u$t,"model.train()"),u$t.forEach(t),Rje.forEach(t),qgr=i(Ea),T(g8.$$.fragment,Ea),Ea.forEach(t),Ml.forEach(t),FQe=i(f),Bd=n(f,"H2",{class:!0});var yUe=s(Bd);h8=n(yUe,"A",{id:!0,class:!0,href:!0});var b$t=s(h8);B5e=n(b$t,"SPAN",{});var v$t=s(B5e);T(xy.$$.fragment,v$t),v$t.forEach(t),b$t.forEach(t),jgr=i(yUe),I5e=n(yUe,"SPAN",{});var F$t=s(I5e);Dgr=r(F$t,"AutoModelForVision2Seq"),F$t.forEach(t),yUe.forEach(t),TQe=i(f),Wo=n(f,"DIV",{class:!0});var El=s(Wo);T($y.$$.fragment,El),Ggr=i(El),Id=n(El,"P",{});var $ae=s(Id);Ogr=r($ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aU=n($ae,"A",{href:!0});var T$t=s(aU);Vgr=r(T$t,"from_pretrained()"),T$t.forEach(t),Xgr=r($ae," class method or the "),nU=n($ae,"A",{href:!0});var M$t=s(nU);zgr=r(M$t,"from_config()"),M$t.forEach(t),Wgr=r($ae,` class
method.`),$ae.forEach(t),Qgr=i(El),ky=n(El,"P",{});var xUe=s(ky);Hgr=r(xUe,"This class cannot be instantiated directly using "),N5e=n(xUe,"CODE",{});var E$t=s(N5e);Ugr=r(E$t,"__init__()"),E$t.forEach(t),Jgr=r(xUe," (throws an error)."),xUe.forEach(t),Ygr=i(El),Ct=n(El,"DIV",{class:!0});var vA=s(Ct);T(Sy.$$.fragment,vA),Kgr=i(vA),q5e=n(vA,"P",{});var C$t=s(q5e);Zgr=r(C$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),C$t.forEach(t),ehr=i(vA),Nd=n(vA,"P",{});var kae=s(Nd);ohr=r(kae,`Note:
Loading a model from its configuration file does `),j5e=n(kae,"STRONG",{});var w$t=s(j5e);rhr=r(w$t,"not"),w$t.forEach(t),thr=r(kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(kae,"A",{href:!0});var A$t=s(sU);ahr=r(A$t,"from_pretrained()"),A$t.forEach(t),nhr=r(kae," to load the model weights."),kae.forEach(t),shr=i(vA),T(p8.$$.fragment,vA),vA.forEach(t),lhr=i(El),fo=n(El,"DIV",{class:!0});var Ca=s(fo);T(Ry.$$.fragment,Ca),ihr=i(Ca),D5e=n(Ca,"P",{});var L$t=s(D5e);dhr=r(L$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),L$t.forEach(t),chr=i(Ca),Za=n(Ca,"P",{});var FA=s(Za);fhr=r(FA,"The model class to instantiate is selected based on the "),G5e=n(FA,"CODE",{});var y$t=s(G5e);mhr=r(y$t,"model_type"),y$t.forEach(t),ghr=r(FA,` property of the config object (either
passed as an argument or loaded from `),O5e=n(FA,"CODE",{});var x$t=s(O5e);hhr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),phr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(FA,"CODE",{});var $$t=s(V5e);_hr=r($$t,"pretrained_model_name_or_path"),$$t.forEach(t),uhr=r(FA,":"),FA.forEach(t),bhr=i(Ca),X5e=n(Ca,"UL",{});var k$t=s(X5e);_8=n(k$t,"LI",{});var Pje=s(_8);z5e=n(Pje,"STRONG",{});var S$t=s(z5e);vhr=r(S$t,"vision-encoder-decoder"),S$t.forEach(t),Fhr=r(Pje," \u2014 "),lU=n(Pje,"A",{href:!0});var R$t=s(lU);Thr=r(R$t,"VisionEncoderDecoderModel"),R$t.forEach(t),Mhr=r(Pje," (Vision Encoder decoder model)"),Pje.forEach(t),k$t.forEach(t),Ehr=i(Ca),u8=n(Ca,"P",{});var Bje=s(u8);Chr=r(Bje,"The model is set in evaluation mode by default using "),W5e=n(Bje,"CODE",{});var P$t=s(W5e);whr=r(P$t,"model.eval()"),P$t.forEach(t),Ahr=r(Bje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q5e=n(Bje,"CODE",{});var B$t=s(Q5e);Lhr=r(B$t,"model.train()"),B$t.forEach(t),Bje.forEach(t),yhr=i(Ca),T(b8.$$.fragment,Ca),Ca.forEach(t),El.forEach(t),MQe=i(f),qd=n(f,"H2",{class:!0});var $Ue=s(qd);v8=n($Ue,"A",{id:!0,class:!0,href:!0});var I$t=s(v8);H5e=n(I$t,"SPAN",{});var N$t=s(H5e);T(Py.$$.fragment,N$t),N$t.forEach(t),I$t.forEach(t),xhr=i($Ue),U5e=n($Ue,"SPAN",{});var q$t=s(U5e);$hr=r(q$t,"AutoModelForVisualQuestionAnswering"),q$t.forEach(t),$Ue.forEach(t),EQe=i(f),Qo=n(f,"DIV",{class:!0});var Cl=s(Qo);T(By.$$.fragment,Cl),khr=i(Cl),jd=n(Cl,"P",{});var Sae=s(jd);Shr=r(Sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iU=n(Sae,"A",{href:!0});var j$t=s(iU);Rhr=r(j$t,"from_pretrained()"),j$t.forEach(t),Phr=r(Sae," class method or the "),dU=n(Sae,"A",{href:!0});var D$t=s(dU);Bhr=r(D$t,"from_config()"),D$t.forEach(t),Ihr=r(Sae,` class
method.`),Sae.forEach(t),Nhr=i(Cl),Iy=n(Cl,"P",{});var kUe=s(Iy);qhr=r(kUe,"This class cannot be instantiated directly using "),J5e=n(kUe,"CODE",{});var G$t=s(J5e);jhr=r(G$t,"__init__()"),G$t.forEach(t),Dhr=r(kUe," (throws an error)."),kUe.forEach(t),Ghr=i(Cl),wt=n(Cl,"DIV",{class:!0});var TA=s(wt);T(Ny.$$.fragment,TA),Ohr=i(TA),Y5e=n(TA,"P",{});var O$t=s(Y5e);Vhr=r(O$t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),O$t.forEach(t),Xhr=i(TA),Dd=n(TA,"P",{});var Rae=s(Dd);zhr=r(Rae,`Note:
Loading a model from its configuration file does `),K5e=n(Rae,"STRONG",{});var V$t=s(K5e);Whr=r(V$t,"not"),V$t.forEach(t),Qhr=r(Rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(Rae,"A",{href:!0});var X$t=s(cU);Hhr=r(X$t,"from_pretrained()"),X$t.forEach(t),Uhr=r(Rae," to load the model weights."),Rae.forEach(t),Jhr=i(TA),T(F8.$$.fragment,TA),TA.forEach(t),Yhr=i(Cl),mo=n(Cl,"DIV",{class:!0});var wa=s(mo);T(qy.$$.fragment,wa),Khr=i(wa),Z5e=n(wa,"P",{});var z$t=s(Z5e);Zhr=r(z$t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),z$t.forEach(t),epr=i(wa),en=n(wa,"P",{});var MA=s(en);opr=r(MA,"The model class to instantiate is selected based on the "),eFe=n(MA,"CODE",{});var W$t=s(eFe);rpr=r(W$t,"model_type"),W$t.forEach(t),tpr=r(MA,` property of the config object (either
passed as an argument or loaded from `),oFe=n(MA,"CODE",{});var Q$t=s(oFe);apr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),npr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(MA,"CODE",{});var H$t=s(rFe);spr=r(H$t,"pretrained_model_name_or_path"),H$t.forEach(t),lpr=r(MA,":"),MA.forEach(t),ipr=i(wa),tFe=n(wa,"UL",{});var U$t=s(tFe);T8=n(U$t,"LI",{});var Ije=s(T8);aFe=n(Ije,"STRONG",{});var J$t=s(aFe);dpr=r(J$t,"vilt"),J$t.forEach(t),cpr=r(Ije," \u2014 "),fU=n(Ije,"A",{href:!0});var Y$t=s(fU);fpr=r(Y$t,"ViltForQuestionAnswering"),Y$t.forEach(t),mpr=r(Ije," (ViLT model)"),Ije.forEach(t),U$t.forEach(t),gpr=i(wa),M8=n(wa,"P",{});var Nje=s(M8);hpr=r(Nje,"The model is set in evaluation mode by default using "),nFe=n(Nje,"CODE",{});var K$t=s(nFe);ppr=r(K$t,"model.eval()"),K$t.forEach(t),_pr=r(Nje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(Nje,"CODE",{});var Z$t=s(sFe);upr=r(Z$t,"model.train()"),Z$t.forEach(t),Nje.forEach(t),bpr=i(wa),T(E8.$$.fragment,wa),wa.forEach(t),Cl.forEach(t),CQe=i(f),Gd=n(f,"H2",{class:!0});var SUe=s(Gd);C8=n(SUe,"A",{id:!0,class:!0,href:!0});var ekt=s(C8);lFe=n(ekt,"SPAN",{});var okt=s(lFe);T(jy.$$.fragment,okt),okt.forEach(t),ekt.forEach(t),vpr=i(SUe),iFe=n(SUe,"SPAN",{});var rkt=s(iFe);Fpr=r(rkt,"AutoModelForAudioClassification"),rkt.forEach(t),SUe.forEach(t),wQe=i(f),Ho=n(f,"DIV",{class:!0});var wl=s(Ho);T(Dy.$$.fragment,wl),Tpr=i(wl),Od=n(wl,"P",{});var Pae=s(Od);Mpr=r(Pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),mU=n(Pae,"A",{href:!0});var tkt=s(mU);Epr=r(tkt,"from_pretrained()"),tkt.forEach(t),Cpr=r(Pae," class method or the "),gU=n(Pae,"A",{href:!0});var akt=s(gU);wpr=r(akt,"from_config()"),akt.forEach(t),Apr=r(Pae,` class
method.`),Pae.forEach(t),Lpr=i(wl),Gy=n(wl,"P",{});var RUe=s(Gy);ypr=r(RUe,"This class cannot be instantiated directly using "),dFe=n(RUe,"CODE",{});var nkt=s(dFe);xpr=r(nkt,"__init__()"),nkt.forEach(t),$pr=r(RUe," (throws an error)."),RUe.forEach(t),kpr=i(wl),At=n(wl,"DIV",{class:!0});var EA=s(At);T(Oy.$$.fragment,EA),Spr=i(EA),cFe=n(EA,"P",{});var skt=s(cFe);Rpr=r(skt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),skt.forEach(t),Ppr=i(EA),Vd=n(EA,"P",{});var Bae=s(Vd);Bpr=r(Bae,`Note:
Loading a model from its configuration file does `),fFe=n(Bae,"STRONG",{});var lkt=s(fFe);Ipr=r(lkt,"not"),lkt.forEach(t),Npr=r(Bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(Bae,"A",{href:!0});var ikt=s(hU);qpr=r(ikt,"from_pretrained()"),ikt.forEach(t),jpr=r(Bae," to load the model weights."),Bae.forEach(t),Dpr=i(EA),T(w8.$$.fragment,EA),EA.forEach(t),Gpr=i(wl),go=n(wl,"DIV",{class:!0});var Aa=s(go);T(Vy.$$.fragment,Aa),Opr=i(Aa),mFe=n(Aa,"P",{});var dkt=s(mFe);Vpr=r(dkt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),dkt.forEach(t),Xpr=i(Aa),on=n(Aa,"P",{});var CA=s(on);zpr=r(CA,"The model class to instantiate is selected based on the "),gFe=n(CA,"CODE",{});var ckt=s(gFe);Wpr=r(ckt,"model_type"),ckt.forEach(t),Qpr=r(CA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(CA,"CODE",{});var fkt=s(hFe);Hpr=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),Upr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(CA,"CODE",{});var mkt=s(pFe);Jpr=r(mkt,"pretrained_model_name_or_path"),mkt.forEach(t),Ypr=r(CA,":"),CA.forEach(t),Kpr=i(Aa),Pe=n(Aa,"UL",{});var We=s(Pe);A8=n(We,"LI",{});var qje=s(A8);_Fe=n(qje,"STRONG",{});var gkt=s(_Fe);Zpr=r(gkt,"data2vec-audio"),gkt.forEach(t),e_r=r(qje," \u2014 "),pU=n(qje,"A",{href:!0});var hkt=s(pU);o_r=r(hkt,"Data2VecAudioForSequenceClassification"),hkt.forEach(t),r_r=r(qje," (Data2VecAudio model)"),qje.forEach(t),t_r=i(We),L8=n(We,"LI",{});var jje=s(L8);uFe=n(jje,"STRONG",{});var pkt=s(uFe);a_r=r(pkt,"hubert"),pkt.forEach(t),n_r=r(jje," \u2014 "),_U=n(jje,"A",{href:!0});var _kt=s(_U);s_r=r(_kt,"HubertForSequenceClassification"),_kt.forEach(t),l_r=r(jje," (Hubert model)"),jje.forEach(t),i_r=i(We),y8=n(We,"LI",{});var Dje=s(y8);bFe=n(Dje,"STRONG",{});var ukt=s(bFe);d_r=r(ukt,"sew"),ukt.forEach(t),c_r=r(Dje," \u2014 "),uU=n(Dje,"A",{href:!0});var bkt=s(uU);f_r=r(bkt,"SEWForSequenceClassification"),bkt.forEach(t),m_r=r(Dje," (SEW model)"),Dje.forEach(t),g_r=i(We),x8=n(We,"LI",{});var Gje=s(x8);vFe=n(Gje,"STRONG",{});var vkt=s(vFe);h_r=r(vkt,"sew-d"),vkt.forEach(t),p_r=r(Gje," \u2014 "),bU=n(Gje,"A",{href:!0});var Fkt=s(bU);__r=r(Fkt,"SEWDForSequenceClassification"),Fkt.forEach(t),u_r=r(Gje," (SEW-D model)"),Gje.forEach(t),b_r=i(We),$8=n(We,"LI",{});var Oje=s($8);FFe=n(Oje,"STRONG",{});var Tkt=s(FFe);v_r=r(Tkt,"unispeech"),Tkt.forEach(t),F_r=r(Oje," \u2014 "),vU=n(Oje,"A",{href:!0});var Mkt=s(vU);T_r=r(Mkt,"UniSpeechForSequenceClassification"),Mkt.forEach(t),M_r=r(Oje," (UniSpeech model)"),Oje.forEach(t),E_r=i(We),k8=n(We,"LI",{});var Vje=s(k8);TFe=n(Vje,"STRONG",{});var Ekt=s(TFe);C_r=r(Ekt,"unispeech-sat"),Ekt.forEach(t),w_r=r(Vje," \u2014 "),FU=n(Vje,"A",{href:!0});var Ckt=s(FU);A_r=r(Ckt,"UniSpeechSatForSequenceClassification"),Ckt.forEach(t),L_r=r(Vje," (UniSpeechSat model)"),Vje.forEach(t),y_r=i(We),S8=n(We,"LI",{});var Xje=s(S8);MFe=n(Xje,"STRONG",{});var wkt=s(MFe);x_r=r(wkt,"wav2vec2"),wkt.forEach(t),$_r=r(Xje," \u2014 "),TU=n(Xje,"A",{href:!0});var Akt=s(TU);k_r=r(Akt,"Wav2Vec2ForSequenceClassification"),Akt.forEach(t),S_r=r(Xje," (Wav2Vec2 model)"),Xje.forEach(t),R_r=i(We),R8=n(We,"LI",{});var zje=s(R8);EFe=n(zje,"STRONG",{});var Lkt=s(EFe);P_r=r(Lkt,"wav2vec2-conformer"),Lkt.forEach(t),B_r=r(zje," \u2014 "),MU=n(zje,"A",{href:!0});var ykt=s(MU);I_r=r(ykt,"Wav2Vec2ConformerForSequenceClassification"),ykt.forEach(t),N_r=r(zje," (Wav2Vec2-Conformer model)"),zje.forEach(t),q_r=i(We),P8=n(We,"LI",{});var Wje=s(P8);CFe=n(Wje,"STRONG",{});var xkt=s(CFe);j_r=r(xkt,"wavlm"),xkt.forEach(t),D_r=r(Wje," \u2014 "),EU=n(Wje,"A",{href:!0});var $kt=s(EU);G_r=r($kt,"WavLMForSequenceClassification"),$kt.forEach(t),O_r=r(Wje," (WavLM model)"),Wje.forEach(t),We.forEach(t),V_r=i(Aa),B8=n(Aa,"P",{});var Qje=s(B8);X_r=r(Qje,"The model is set in evaluation mode by default using "),wFe=n(Qje,"CODE",{});var kkt=s(wFe);z_r=r(kkt,"model.eval()"),kkt.forEach(t),W_r=r(Qje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=n(Qje,"CODE",{});var Skt=s(AFe);Q_r=r(Skt,"model.train()"),Skt.forEach(t),Qje.forEach(t),H_r=i(Aa),T(I8.$$.fragment,Aa),Aa.forEach(t),wl.forEach(t),AQe=i(f),Xd=n(f,"H2",{class:!0});var PUe=s(Xd);N8=n(PUe,"A",{id:!0,class:!0,href:!0});var Rkt=s(N8);LFe=n(Rkt,"SPAN",{});var Pkt=s(LFe);T(Xy.$$.fragment,Pkt),Pkt.forEach(t),Rkt.forEach(t),U_r=i(PUe),yFe=n(PUe,"SPAN",{});var Bkt=s(yFe);J_r=r(Bkt,"AutoModelForAudioFrameClassification"),Bkt.forEach(t),PUe.forEach(t),LQe=i(f),Uo=n(f,"DIV",{class:!0});var Al=s(Uo);T(zy.$$.fragment,Al),Y_r=i(Al),zd=n(Al,"P",{});var Iae=s(zd);K_r=r(Iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CU=n(Iae,"A",{href:!0});var Ikt=s(CU);Z_r=r(Ikt,"from_pretrained()"),Ikt.forEach(t),eur=r(Iae," class method or the "),wU=n(Iae,"A",{href:!0});var Nkt=s(wU);our=r(Nkt,"from_config()"),Nkt.forEach(t),rur=r(Iae,` class
method.`),Iae.forEach(t),tur=i(Al),Wy=n(Al,"P",{});var BUe=s(Wy);aur=r(BUe,"This class cannot be instantiated directly using "),xFe=n(BUe,"CODE",{});var qkt=s(xFe);nur=r(qkt,"__init__()"),qkt.forEach(t),sur=r(BUe," (throws an error)."),BUe.forEach(t),lur=i(Al),Lt=n(Al,"DIV",{class:!0});var wA=s(Lt);T(Qy.$$.fragment,wA),iur=i(wA),$Fe=n(wA,"P",{});var jkt=s($Fe);dur=r(jkt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jkt.forEach(t),cur=i(wA),Wd=n(wA,"P",{});var Nae=s(Wd);fur=r(Nae,`Note:
Loading a model from its configuration file does `),kFe=n(Nae,"STRONG",{});var Dkt=s(kFe);mur=r(Dkt,"not"),Dkt.forEach(t),gur=r(Nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Nae,"A",{href:!0});var Gkt=s(AU);hur=r(Gkt,"from_pretrained()"),Gkt.forEach(t),pur=r(Nae," to load the model weights."),Nae.forEach(t),_ur=i(wA),T(q8.$$.fragment,wA),wA.forEach(t),uur=i(Al),ho=n(Al,"DIV",{class:!0});var La=s(ho);T(Hy.$$.fragment,La),bur=i(La),SFe=n(La,"P",{});var Okt=s(SFe);vur=r(Okt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Okt.forEach(t),Fur=i(La),rn=n(La,"P",{});var AA=s(rn);Tur=r(AA,"The model class to instantiate is selected based on the "),RFe=n(AA,"CODE",{});var Vkt=s(RFe);Mur=r(Vkt,"model_type"),Vkt.forEach(t),Eur=r(AA,` property of the config object (either
passed as an argument or loaded from `),PFe=n(AA,"CODE",{});var Xkt=s(PFe);Cur=r(Xkt,"pretrained_model_name_or_path"),Xkt.forEach(t),wur=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(AA,"CODE",{});var zkt=s(BFe);Aur=r(zkt,"pretrained_model_name_or_path"),zkt.forEach(t),Lur=r(AA,":"),AA.forEach(t),yur=i(La),at=n(La,"UL",{});var Ll=s(at);j8=n(Ll,"LI",{});var Hje=s(j8);IFe=n(Hje,"STRONG",{});var Wkt=s(IFe);xur=r(Wkt,"data2vec-audio"),Wkt.forEach(t),$ur=r(Hje," \u2014 "),LU=n(Hje,"A",{href:!0});var Qkt=s(LU);kur=r(Qkt,"Data2VecAudioForAudioFrameClassification"),Qkt.forEach(t),Sur=r(Hje," (Data2VecAudio model)"),Hje.forEach(t),Rur=i(Ll),D8=n(Ll,"LI",{});var Uje=s(D8);NFe=n(Uje,"STRONG",{});var Hkt=s(NFe);Pur=r(Hkt,"unispeech-sat"),Hkt.forEach(t),Bur=r(Uje," \u2014 "),yU=n(Uje,"A",{href:!0});var Ukt=s(yU);Iur=r(Ukt,"UniSpeechSatForAudioFrameClassification"),Ukt.forEach(t),Nur=r(Uje," (UniSpeechSat model)"),Uje.forEach(t),qur=i(Ll),G8=n(Ll,"LI",{});var Jje=s(G8);qFe=n(Jje,"STRONG",{});var Jkt=s(qFe);jur=r(Jkt,"wav2vec2"),Jkt.forEach(t),Dur=r(Jje," \u2014 "),xU=n(Jje,"A",{href:!0});var Ykt=s(xU);Gur=r(Ykt,"Wav2Vec2ForAudioFrameClassification"),Ykt.forEach(t),Our=r(Jje," (Wav2Vec2 model)"),Jje.forEach(t),Vur=i(Ll),O8=n(Ll,"LI",{});var Yje=s(O8);jFe=n(Yje,"STRONG",{});var Kkt=s(jFe);Xur=r(Kkt,"wav2vec2-conformer"),Kkt.forEach(t),zur=r(Yje," \u2014 "),$U=n(Yje,"A",{href:!0});var Zkt=s($U);Wur=r(Zkt,"Wav2Vec2ConformerForAudioFrameClassification"),Zkt.forEach(t),Qur=r(Yje," (Wav2Vec2-Conformer model)"),Yje.forEach(t),Hur=i(Ll),V8=n(Ll,"LI",{});var Kje=s(V8);DFe=n(Kje,"STRONG",{});var eSt=s(DFe);Uur=r(eSt,"wavlm"),eSt.forEach(t),Jur=r(Kje," \u2014 "),kU=n(Kje,"A",{href:!0});var oSt=s(kU);Yur=r(oSt,"WavLMForAudioFrameClassification"),oSt.forEach(t),Kur=r(Kje," (WavLM model)"),Kje.forEach(t),Ll.forEach(t),Zur=i(La),X8=n(La,"P",{});var Zje=s(X8);e2r=r(Zje,"The model is set in evaluation mode by default using "),GFe=n(Zje,"CODE",{});var rSt=s(GFe);o2r=r(rSt,"model.eval()"),rSt.forEach(t),r2r=r(Zje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OFe=n(Zje,"CODE",{});var tSt=s(OFe);t2r=r(tSt,"model.train()"),tSt.forEach(t),Zje.forEach(t),a2r=i(La),T(z8.$$.fragment,La),La.forEach(t),Al.forEach(t),yQe=i(f),Qd=n(f,"H2",{class:!0});var IUe=s(Qd);W8=n(IUe,"A",{id:!0,class:!0,href:!0});var aSt=s(W8);VFe=n(aSt,"SPAN",{});var nSt=s(VFe);T(Uy.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),n2r=i(IUe),XFe=n(IUe,"SPAN",{});var sSt=s(XFe);s2r=r(sSt,"AutoModelForCTC"),sSt.forEach(t),IUe.forEach(t),xQe=i(f),Jo=n(f,"DIV",{class:!0});var yl=s(Jo);T(Jy.$$.fragment,yl),l2r=i(yl),Hd=n(yl,"P",{});var qae=s(Hd);i2r=r(qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SU=n(qae,"A",{href:!0});var lSt=s(SU);d2r=r(lSt,"from_pretrained()"),lSt.forEach(t),c2r=r(qae," class method or the "),RU=n(qae,"A",{href:!0});var iSt=s(RU);f2r=r(iSt,"from_config()"),iSt.forEach(t),m2r=r(qae,` class
method.`),qae.forEach(t),g2r=i(yl),Yy=n(yl,"P",{});var NUe=s(Yy);h2r=r(NUe,"This class cannot be instantiated directly using "),zFe=n(NUe,"CODE",{});var dSt=s(zFe);p2r=r(dSt,"__init__()"),dSt.forEach(t),_2r=r(NUe," (throws an error)."),NUe.forEach(t),u2r=i(yl),yt=n(yl,"DIV",{class:!0});var LA=s(yt);T(Ky.$$.fragment,LA),b2r=i(LA),WFe=n(LA,"P",{});var cSt=s(WFe);v2r=r(cSt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cSt.forEach(t),F2r=i(LA),Ud=n(LA,"P",{});var jae=s(Ud);T2r=r(jae,`Note:
Loading a model from its configuration file does `),QFe=n(jae,"STRONG",{});var fSt=s(QFe);M2r=r(fSt,"not"),fSt.forEach(t),E2r=r(jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(jae,"A",{href:!0});var mSt=s(PU);C2r=r(mSt,"from_pretrained()"),mSt.forEach(t),w2r=r(jae," to load the model weights."),jae.forEach(t),A2r=i(LA),T(Q8.$$.fragment,LA),LA.forEach(t),L2r=i(yl),po=n(yl,"DIV",{class:!0});var ya=s(po);T(Zy.$$.fragment,ya),y2r=i(ya),HFe=n(ya,"P",{});var gSt=s(HFe);x2r=r(gSt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gSt.forEach(t),$2r=i(ya),tn=n(ya,"P",{});var yA=s(tn);k2r=r(yA,"The model class to instantiate is selected based on the "),UFe=n(yA,"CODE",{});var hSt=s(UFe);S2r=r(hSt,"model_type"),hSt.forEach(t),R2r=r(yA,` property of the config object (either
passed as an argument or loaded from `),JFe=n(yA,"CODE",{});var pSt=s(JFe);P2r=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),B2r=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(yA,"CODE",{});var _St=s(YFe);I2r=r(_St,"pretrained_model_name_or_path"),_St.forEach(t),N2r=r(yA,":"),yA.forEach(t),q2r=i(ya),Le=n(ya,"UL",{});var Be=s(Le);H8=n(Be,"LI",{});var eDe=s(H8);KFe=n(eDe,"STRONG",{});var uSt=s(KFe);j2r=r(uSt,"data2vec-audio"),uSt.forEach(t),D2r=r(eDe," \u2014 "),BU=n(eDe,"A",{href:!0});var bSt=s(BU);G2r=r(bSt,"Data2VecAudioForCTC"),bSt.forEach(t),O2r=r(eDe," (Data2VecAudio model)"),eDe.forEach(t),V2r=i(Be),U8=n(Be,"LI",{});var oDe=s(U8);ZFe=n(oDe,"STRONG",{});var vSt=s(ZFe);X2r=r(vSt,"hubert"),vSt.forEach(t),z2r=r(oDe," \u2014 "),IU=n(oDe,"A",{href:!0});var FSt=s(IU);W2r=r(FSt,"HubertForCTC"),FSt.forEach(t),Q2r=r(oDe," (Hubert model)"),oDe.forEach(t),H2r=i(Be),J8=n(Be,"LI",{});var rDe=s(J8);eTe=n(rDe,"STRONG",{});var TSt=s(eTe);U2r=r(TSt,"mctct"),TSt.forEach(t),J2r=r(rDe," \u2014 "),NU=n(rDe,"A",{href:!0});var MSt=s(NU);Y2r=r(MSt,"MCTCTForCTC"),MSt.forEach(t),K2r=r(rDe," (M-CTC-T model)"),rDe.forEach(t),Z2r=i(Be),Y8=n(Be,"LI",{});var tDe=s(Y8);oTe=n(tDe,"STRONG",{});var ESt=s(oTe);e1r=r(ESt,"sew"),ESt.forEach(t),o1r=r(tDe," \u2014 "),qU=n(tDe,"A",{href:!0});var CSt=s(qU);r1r=r(CSt,"SEWForCTC"),CSt.forEach(t),t1r=r(tDe," (SEW model)"),tDe.forEach(t),a1r=i(Be),K8=n(Be,"LI",{});var aDe=s(K8);rTe=n(aDe,"STRONG",{});var wSt=s(rTe);n1r=r(wSt,"sew-d"),wSt.forEach(t),s1r=r(aDe," \u2014 "),jU=n(aDe,"A",{href:!0});var ASt=s(jU);l1r=r(ASt,"SEWDForCTC"),ASt.forEach(t),i1r=r(aDe," (SEW-D model)"),aDe.forEach(t),d1r=i(Be),Z8=n(Be,"LI",{});var nDe=s(Z8);tTe=n(nDe,"STRONG",{});var LSt=s(tTe);c1r=r(LSt,"unispeech"),LSt.forEach(t),f1r=r(nDe," \u2014 "),DU=n(nDe,"A",{href:!0});var ySt=s(DU);m1r=r(ySt,"UniSpeechForCTC"),ySt.forEach(t),g1r=r(nDe," (UniSpeech model)"),nDe.forEach(t),h1r=i(Be),e9=n(Be,"LI",{});var sDe=s(e9);aTe=n(sDe,"STRONG",{});var xSt=s(aTe);p1r=r(xSt,"unispeech-sat"),xSt.forEach(t),_1r=r(sDe," \u2014 "),GU=n(sDe,"A",{href:!0});var $St=s(GU);u1r=r($St,"UniSpeechSatForCTC"),$St.forEach(t),b1r=r(sDe," (UniSpeechSat model)"),sDe.forEach(t),v1r=i(Be),o9=n(Be,"LI",{});var lDe=s(o9);nTe=n(lDe,"STRONG",{});var kSt=s(nTe);F1r=r(kSt,"wav2vec2"),kSt.forEach(t),T1r=r(lDe," \u2014 "),OU=n(lDe,"A",{href:!0});var SSt=s(OU);M1r=r(SSt,"Wav2Vec2ForCTC"),SSt.forEach(t),E1r=r(lDe," (Wav2Vec2 model)"),lDe.forEach(t),C1r=i(Be),r9=n(Be,"LI",{});var iDe=s(r9);sTe=n(iDe,"STRONG",{});var RSt=s(sTe);w1r=r(RSt,"wav2vec2-conformer"),RSt.forEach(t),A1r=r(iDe," \u2014 "),VU=n(iDe,"A",{href:!0});var PSt=s(VU);L1r=r(PSt,"Wav2Vec2ConformerForCTC"),PSt.forEach(t),y1r=r(iDe," (Wav2Vec2-Conformer model)"),iDe.forEach(t),x1r=i(Be),t9=n(Be,"LI",{});var dDe=s(t9);lTe=n(dDe,"STRONG",{});var BSt=s(lTe);$1r=r(BSt,"wavlm"),BSt.forEach(t),k1r=r(dDe," \u2014 "),XU=n(dDe,"A",{href:!0});var ISt=s(XU);S1r=r(ISt,"WavLMForCTC"),ISt.forEach(t),R1r=r(dDe," (WavLM model)"),dDe.forEach(t),Be.forEach(t),P1r=i(ya),a9=n(ya,"P",{});var cDe=s(a9);B1r=r(cDe,"The model is set in evaluation mode by default using "),iTe=n(cDe,"CODE",{});var NSt=s(iTe);I1r=r(NSt,"model.eval()"),NSt.forEach(t),N1r=r(cDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dTe=n(cDe,"CODE",{});var qSt=s(dTe);q1r=r(qSt,"model.train()"),qSt.forEach(t),cDe.forEach(t),j1r=i(ya),T(n9.$$.fragment,ya),ya.forEach(t),yl.forEach(t),$Qe=i(f),Jd=n(f,"H2",{class:!0});var qUe=s(Jd);s9=n(qUe,"A",{id:!0,class:!0,href:!0});var jSt=s(s9);cTe=n(jSt,"SPAN",{});var DSt=s(cTe);T(ex.$$.fragment,DSt),DSt.forEach(t),jSt.forEach(t),D1r=i(qUe),fTe=n(qUe,"SPAN",{});var GSt=s(fTe);G1r=r(GSt,"AutoModelForSpeechSeq2Seq"),GSt.forEach(t),qUe.forEach(t),kQe=i(f),Yo=n(f,"DIV",{class:!0});var xl=s(Yo);T(ox.$$.fragment,xl),O1r=i(xl),Yd=n(xl,"P",{});var Dae=s(Yd);V1r=r(Dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=n(Dae,"A",{href:!0});var OSt=s(zU);X1r=r(OSt,"from_pretrained()"),OSt.forEach(t),z1r=r(Dae," class method or the "),WU=n(Dae,"A",{href:!0});var VSt=s(WU);W1r=r(VSt,"from_config()"),VSt.forEach(t),Q1r=r(Dae,` class
method.`),Dae.forEach(t),H1r=i(xl),rx=n(xl,"P",{});var jUe=s(rx);U1r=r(jUe,"This class cannot be instantiated directly using "),mTe=n(jUe,"CODE",{});var XSt=s(mTe);J1r=r(XSt,"__init__()"),XSt.forEach(t),Y1r=r(jUe," (throws an error)."),jUe.forEach(t),K1r=i(xl),xt=n(xl,"DIV",{class:!0});var xA=s(xt);T(tx.$$.fragment,xA),Z1r=i(xA),gTe=n(xA,"P",{});var zSt=s(gTe);ebr=r(zSt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zSt.forEach(t),obr=i(xA),Kd=n(xA,"P",{});var Gae=s(Kd);rbr=r(Gae,`Note:
Loading a model from its configuration file does `),hTe=n(Gae,"STRONG",{});var WSt=s(hTe);tbr=r(WSt,"not"),WSt.forEach(t),abr=r(Gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Gae,"A",{href:!0});var QSt=s(QU);nbr=r(QSt,"from_pretrained()"),QSt.forEach(t),sbr=r(Gae," to load the model weights."),Gae.forEach(t),lbr=i(xA),T(l9.$$.fragment,xA),xA.forEach(t),ibr=i(xl),_o=n(xl,"DIV",{class:!0});var xa=s(_o);T(ax.$$.fragment,xa),dbr=i(xa),pTe=n(xa,"P",{});var HSt=s(pTe);cbr=r(HSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HSt.forEach(t),fbr=i(xa),an=n(xa,"P",{});var $A=s(an);mbr=r($A,"The model class to instantiate is selected based on the "),_Te=n($A,"CODE",{});var USt=s(_Te);gbr=r(USt,"model_type"),USt.forEach(t),hbr=r($A,` property of the config object (either
passed as an argument or loaded from `),uTe=n($A,"CODE",{});var JSt=s(uTe);pbr=r(JSt,"pretrained_model_name_or_path"),JSt.forEach(t),_br=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n($A,"CODE",{});var YSt=s(bTe);ubr=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),bbr=r($A,":"),$A.forEach(t),vbr=i(xa),nx=n(xa,"UL",{});var DUe=s(nx);i9=n(DUe,"LI",{});var fDe=s(i9);vTe=n(fDe,"STRONG",{});var KSt=s(vTe);Fbr=r(KSt,"speech-encoder-decoder"),KSt.forEach(t),Tbr=r(fDe," \u2014 "),HU=n(fDe,"A",{href:!0});var ZSt=s(HU);Mbr=r(ZSt,"SpeechEncoderDecoderModel"),ZSt.forEach(t),Ebr=r(fDe," (Speech Encoder decoder model)"),fDe.forEach(t),Cbr=i(DUe),d9=n(DUe,"LI",{});var mDe=s(d9);FTe=n(mDe,"STRONG",{});var eRt=s(FTe);wbr=r(eRt,"speech_to_text"),eRt.forEach(t),Abr=r(mDe," \u2014 "),UU=n(mDe,"A",{href:!0});var oRt=s(UU);Lbr=r(oRt,"Speech2TextForConditionalGeneration"),oRt.forEach(t),ybr=r(mDe," (Speech2Text model)"),mDe.forEach(t),DUe.forEach(t),xbr=i(xa),c9=n(xa,"P",{});var gDe=s(c9);$br=r(gDe,"The model is set in evaluation mode by default using "),TTe=n(gDe,"CODE",{});var rRt=s(TTe);kbr=r(rRt,"model.eval()"),rRt.forEach(t),Sbr=r(gDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MTe=n(gDe,"CODE",{});var tRt=s(MTe);Rbr=r(tRt,"model.train()"),tRt.forEach(t),gDe.forEach(t),Pbr=i(xa),T(f9.$$.fragment,xa),xa.forEach(t),xl.forEach(t),SQe=i(f),Zd=n(f,"H2",{class:!0});var GUe=s(Zd);m9=n(GUe,"A",{id:!0,class:!0,href:!0});var aRt=s(m9);ETe=n(aRt,"SPAN",{});var nRt=s(ETe);T(sx.$$.fragment,nRt),nRt.forEach(t),aRt.forEach(t),Bbr=i(GUe),CTe=n(GUe,"SPAN",{});var sRt=s(CTe);Ibr=r(sRt,"AutoModelForAudioXVector"),sRt.forEach(t),GUe.forEach(t),RQe=i(f),Ko=n(f,"DIV",{class:!0});var $l=s(Ko);T(lx.$$.fragment,$l),Nbr=i($l),ec=n($l,"P",{});var Oae=s(ec);qbr=r(Oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JU=n(Oae,"A",{href:!0});var lRt=s(JU);jbr=r(lRt,"from_pretrained()"),lRt.forEach(t),Dbr=r(Oae," class method or the "),YU=n(Oae,"A",{href:!0});var iRt=s(YU);Gbr=r(iRt,"from_config()"),iRt.forEach(t),Obr=r(Oae,` class
method.`),Oae.forEach(t),Vbr=i($l),ix=n($l,"P",{});var OUe=s(ix);Xbr=r(OUe,"This class cannot be instantiated directly using "),wTe=n(OUe,"CODE",{});var dRt=s(wTe);zbr=r(dRt,"__init__()"),dRt.forEach(t),Wbr=r(OUe," (throws an error)."),OUe.forEach(t),Qbr=i($l),$t=n($l,"DIV",{class:!0});var kA=s($t);T(dx.$$.fragment,kA),Hbr=i(kA),ATe=n(kA,"P",{});var cRt=s(ATe);Ubr=r(cRt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cRt.forEach(t),Jbr=i(kA),oc=n(kA,"P",{});var Vae=s(oc);Ybr=r(Vae,`Note:
Loading a model from its configuration file does `),LTe=n(Vae,"STRONG",{});var fRt=s(LTe);Kbr=r(fRt,"not"),fRt.forEach(t),Zbr=r(Vae,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(Vae,"A",{href:!0});var mRt=s(KU);evr=r(mRt,"from_pretrained()"),mRt.forEach(t),ovr=r(Vae," to load the model weights."),Vae.forEach(t),rvr=i(kA),T(g9.$$.fragment,kA),kA.forEach(t),tvr=i($l),uo=n($l,"DIV",{class:!0});var $a=s(uo);T(cx.$$.fragment,$a),avr=i($a),yTe=n($a,"P",{});var gRt=s(yTe);nvr=r(gRt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gRt.forEach(t),svr=i($a),nn=n($a,"P",{});var SA=s(nn);lvr=r(SA,"The model class to instantiate is selected based on the "),xTe=n(SA,"CODE",{});var hRt=s(xTe);ivr=r(hRt,"model_type"),hRt.forEach(t),dvr=r(SA,` property of the config object (either
passed as an argument or loaded from `),$Te=n(SA,"CODE",{});var pRt=s($Te);cvr=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),fvr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(SA,"CODE",{});var _Rt=s(kTe);mvr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),gvr=r(SA,":"),SA.forEach(t),hvr=i($a),nt=n($a,"UL",{});var kl=s(nt);h9=n(kl,"LI",{});var hDe=s(h9);STe=n(hDe,"STRONG",{});var uRt=s(STe);pvr=r(uRt,"data2vec-audio"),uRt.forEach(t),_vr=r(hDe," \u2014 "),ZU=n(hDe,"A",{href:!0});var bRt=s(ZU);uvr=r(bRt,"Data2VecAudioForXVector"),bRt.forEach(t),bvr=r(hDe," (Data2VecAudio model)"),hDe.forEach(t),vvr=i(kl),p9=n(kl,"LI",{});var pDe=s(p9);RTe=n(pDe,"STRONG",{});var vRt=s(RTe);Fvr=r(vRt,"unispeech-sat"),vRt.forEach(t),Tvr=r(pDe," \u2014 "),eJ=n(pDe,"A",{href:!0});var FRt=s(eJ);Mvr=r(FRt,"UniSpeechSatForXVector"),FRt.forEach(t),Evr=r(pDe," (UniSpeechSat model)"),pDe.forEach(t),Cvr=i(kl),_9=n(kl,"LI",{});var _De=s(_9);PTe=n(_De,"STRONG",{});var TRt=s(PTe);wvr=r(TRt,"wav2vec2"),TRt.forEach(t),Avr=r(_De," \u2014 "),oJ=n(_De,"A",{href:!0});var MRt=s(oJ);Lvr=r(MRt,"Wav2Vec2ForXVector"),MRt.forEach(t),yvr=r(_De," (Wav2Vec2 model)"),_De.forEach(t),xvr=i(kl),u9=n(kl,"LI",{});var uDe=s(u9);BTe=n(uDe,"STRONG",{});var ERt=s(BTe);$vr=r(ERt,"wav2vec2-conformer"),ERt.forEach(t),kvr=r(uDe," \u2014 "),rJ=n(uDe,"A",{href:!0});var CRt=s(rJ);Svr=r(CRt,"Wav2Vec2ConformerForXVector"),CRt.forEach(t),Rvr=r(uDe," (Wav2Vec2-Conformer model)"),uDe.forEach(t),Pvr=i(kl),b9=n(kl,"LI",{});var bDe=s(b9);ITe=n(bDe,"STRONG",{});var wRt=s(ITe);Bvr=r(wRt,"wavlm"),wRt.forEach(t),Ivr=r(bDe," \u2014 "),tJ=n(bDe,"A",{href:!0});var ARt=s(tJ);Nvr=r(ARt,"WavLMForXVector"),ARt.forEach(t),qvr=r(bDe," (WavLM model)"),bDe.forEach(t),kl.forEach(t),jvr=i($a),v9=n($a,"P",{});var vDe=s(v9);Dvr=r(vDe,"The model is set in evaluation mode by default using "),NTe=n(vDe,"CODE",{});var LRt=s(NTe);Gvr=r(LRt,"model.eval()"),LRt.forEach(t),Ovr=r(vDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qTe=n(vDe,"CODE",{});var yRt=s(qTe);Vvr=r(yRt,"model.train()"),yRt.forEach(t),vDe.forEach(t),Xvr=i($a),T(F9.$$.fragment,$a),$a.forEach(t),$l.forEach(t),PQe=i(f),rc=n(f,"H2",{class:!0});var VUe=s(rc);T9=n(VUe,"A",{id:!0,class:!0,href:!0});var xRt=s(T9);jTe=n(xRt,"SPAN",{});var $Rt=s(jTe);T(fx.$$.fragment,$Rt),$Rt.forEach(t),xRt.forEach(t),zvr=i(VUe),DTe=n(VUe,"SPAN",{});var kRt=s(DTe);Wvr=r(kRt,"AutoModelForMaskedImageModeling"),kRt.forEach(t),VUe.forEach(t),BQe=i(f),Zo=n(f,"DIV",{class:!0});var Sl=s(Zo);T(mx.$$.fragment,Sl),Qvr=i(Sl),tc=n(Sl,"P",{});var Xae=s(tc);Hvr=r(Xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aJ=n(Xae,"A",{href:!0});var SRt=s(aJ);Uvr=r(SRt,"from_pretrained()"),SRt.forEach(t),Jvr=r(Xae," class method or the "),nJ=n(Xae,"A",{href:!0});var RRt=s(nJ);Yvr=r(RRt,"from_config()"),RRt.forEach(t),Kvr=r(Xae,` class
method.`),Xae.forEach(t),Zvr=i(Sl),gx=n(Sl,"P",{});var XUe=s(gx);e5r=r(XUe,"This class cannot be instantiated directly using "),GTe=n(XUe,"CODE",{});var PRt=s(GTe);o5r=r(PRt,"__init__()"),PRt.forEach(t),r5r=r(XUe," (throws an error)."),XUe.forEach(t),t5r=i(Sl),kt=n(Sl,"DIV",{class:!0});var RA=s(kt);T(hx.$$.fragment,RA),a5r=i(RA),OTe=n(RA,"P",{});var BRt=s(OTe);n5r=r(BRt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),BRt.forEach(t),s5r=i(RA),ac=n(RA,"P",{});var zae=s(ac);l5r=r(zae,`Note:
Loading a model from its configuration file does `),VTe=n(zae,"STRONG",{});var IRt=s(VTe);i5r=r(IRt,"not"),IRt.forEach(t),d5r=r(zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(zae,"A",{href:!0});var NRt=s(sJ);c5r=r(NRt,"from_pretrained()"),NRt.forEach(t),f5r=r(zae," to load the model weights."),zae.forEach(t),m5r=i(RA),T(M9.$$.fragment,RA),RA.forEach(t),g5r=i(Sl),bo=n(Sl,"DIV",{class:!0});var ka=s(bo);T(px.$$.fragment,ka),h5r=i(ka),XTe=n(ka,"P",{});var qRt=s(XTe);p5r=r(qRt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),qRt.forEach(t),_5r=i(ka),sn=n(ka,"P",{});var PA=s(sn);u5r=r(PA,"The model class to instantiate is selected based on the "),zTe=n(PA,"CODE",{});var jRt=s(zTe);b5r=r(jRt,"model_type"),jRt.forEach(t),v5r=r(PA,` property of the config object (either
passed as an argument or loaded from `),WTe=n(PA,"CODE",{});var DRt=s(WTe);F5r=r(DRt,"pretrained_model_name_or_path"),DRt.forEach(t),T5r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(PA,"CODE",{});var GRt=s(QTe);M5r=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),E5r=r(PA,":"),PA.forEach(t),C5r=i(ka),ln=n(ka,"UL",{});var BA=s(ln);E9=n(BA,"LI",{});var FDe=s(E9);HTe=n(FDe,"STRONG",{});var ORt=s(HTe);w5r=r(ORt,"deit"),ORt.forEach(t),A5r=r(FDe," \u2014 "),lJ=n(FDe,"A",{href:!0});var VRt=s(lJ);L5r=r(VRt,"DeiTForMaskedImageModeling"),VRt.forEach(t),y5r=r(FDe," (DeiT model)"),FDe.forEach(t),x5r=i(BA),C9=n(BA,"LI",{});var TDe=s(C9);UTe=n(TDe,"STRONG",{});var XRt=s(UTe);$5r=r(XRt,"swin"),XRt.forEach(t),k5r=r(TDe," \u2014 "),iJ=n(TDe,"A",{href:!0});var zRt=s(iJ);S5r=r(zRt,"SwinForMaskedImageModeling"),zRt.forEach(t),R5r=r(TDe," (Swin Transformer model)"),TDe.forEach(t),P5r=i(BA),w9=n(BA,"LI",{});var MDe=s(w9);JTe=n(MDe,"STRONG",{});var WRt=s(JTe);B5r=r(WRt,"swinv2"),WRt.forEach(t),I5r=r(MDe," \u2014 "),dJ=n(MDe,"A",{href:!0});var QRt=s(dJ);N5r=r(QRt,"Swinv2ForMaskedImageModeling"),QRt.forEach(t),q5r=r(MDe," (Swin Transformer V2 model)"),MDe.forEach(t),j5r=i(BA),A9=n(BA,"LI",{});var EDe=s(A9);YTe=n(EDe,"STRONG",{});var HRt=s(YTe);D5r=r(HRt,"vit"),HRt.forEach(t),G5r=r(EDe," \u2014 "),cJ=n(EDe,"A",{href:!0});var URt=s(cJ);O5r=r(URt,"ViTForMaskedImageModeling"),URt.forEach(t),V5r=r(EDe," (ViT model)"),EDe.forEach(t),BA.forEach(t),X5r=i(ka),L9=n(ka,"P",{});var CDe=s(L9);z5r=r(CDe,"The model is set in evaluation mode by default using "),KTe=n(CDe,"CODE",{});var JRt=s(KTe);W5r=r(JRt,"model.eval()"),JRt.forEach(t),Q5r=r(CDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZTe=n(CDe,"CODE",{});var YRt=s(ZTe);H5r=r(YRt,"model.train()"),YRt.forEach(t),CDe.forEach(t),U5r=i(ka),T(y9.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),IQe=i(f),nc=n(f,"H2",{class:!0});var zUe=s(nc);x9=n(zUe,"A",{id:!0,class:!0,href:!0});var KRt=s(x9);e8e=n(KRt,"SPAN",{});var ZRt=s(e8e);T(_x.$$.fragment,ZRt),ZRt.forEach(t),KRt.forEach(t),J5r=i(zUe),o8e=n(zUe,"SPAN",{});var ePt=s(o8e);Y5r=r(ePt,"AutoModelForObjectDetection"),ePt.forEach(t),zUe.forEach(t),NQe=i(f),er=n(f,"DIV",{class:!0});var Rl=s(er);T(ux.$$.fragment,Rl),K5r=i(Rl),sc=n(Rl,"P",{});var Wae=s(sc);Z5r=r(Wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fJ=n(Wae,"A",{href:!0});var oPt=s(fJ);eFr=r(oPt,"from_pretrained()"),oPt.forEach(t),oFr=r(Wae," class method or the "),mJ=n(Wae,"A",{href:!0});var rPt=s(mJ);rFr=r(rPt,"from_config()"),rPt.forEach(t),tFr=r(Wae,` class
method.`),Wae.forEach(t),aFr=i(Rl),bx=n(Rl,"P",{});var WUe=s(bx);nFr=r(WUe,"This class cannot be instantiated directly using "),r8e=n(WUe,"CODE",{});var tPt=s(r8e);sFr=r(tPt,"__init__()"),tPt.forEach(t),lFr=r(WUe," (throws an error)."),WUe.forEach(t),iFr=i(Rl),St=n(Rl,"DIV",{class:!0});var IA=s(St);T(vx.$$.fragment,IA),dFr=i(IA),t8e=n(IA,"P",{});var aPt=s(t8e);cFr=r(aPt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aPt.forEach(t),fFr=i(IA),lc=n(IA,"P",{});var Qae=s(lc);mFr=r(Qae,`Note:
Loading a model from its configuration file does `),a8e=n(Qae,"STRONG",{});var nPt=s(a8e);gFr=r(nPt,"not"),nPt.forEach(t),hFr=r(Qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(Qae,"A",{href:!0});var sPt=s(gJ);pFr=r(sPt,"from_pretrained()"),sPt.forEach(t),_Fr=r(Qae," to load the model weights."),Qae.forEach(t),uFr=i(IA),T($9.$$.fragment,IA),IA.forEach(t),bFr=i(Rl),vo=n(Rl,"DIV",{class:!0});var Sa=s(vo);T(Fx.$$.fragment,Sa),vFr=i(Sa),n8e=n(Sa,"P",{});var lPt=s(n8e);FFr=r(lPt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lPt.forEach(t),TFr=i(Sa),dn=n(Sa,"P",{});var NA=s(dn);MFr=r(NA,"The model class to instantiate is selected based on the "),s8e=n(NA,"CODE",{});var iPt=s(s8e);EFr=r(iPt,"model_type"),iPt.forEach(t),CFr=r(NA,` property of the config object (either
passed as an argument or loaded from `),l8e=n(NA,"CODE",{});var dPt=s(l8e);wFr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),AFr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=n(NA,"CODE",{});var cPt=s(i8e);LFr=r(cPt,"pretrained_model_name_or_path"),cPt.forEach(t),yFr=r(NA,":"),NA.forEach(t),xFr=i(Sa),Tx=n(Sa,"UL",{});var QUe=s(Tx);k9=n(QUe,"LI",{});var wDe=s(k9);d8e=n(wDe,"STRONG",{});var fPt=s(d8e);$Fr=r(fPt,"detr"),fPt.forEach(t),kFr=r(wDe," \u2014 "),hJ=n(wDe,"A",{href:!0});var mPt=s(hJ);SFr=r(mPt,"DetrForObjectDetection"),mPt.forEach(t),RFr=r(wDe," (DETR model)"),wDe.forEach(t),PFr=i(QUe),S9=n(QUe,"LI",{});var ADe=s(S9);c8e=n(ADe,"STRONG",{});var gPt=s(c8e);BFr=r(gPt,"yolos"),gPt.forEach(t),IFr=r(ADe," \u2014 "),pJ=n(ADe,"A",{href:!0});var hPt=s(pJ);NFr=r(hPt,"YolosForObjectDetection"),hPt.forEach(t),qFr=r(ADe," (YOLOS model)"),ADe.forEach(t),QUe.forEach(t),jFr=i(Sa),R9=n(Sa,"P",{});var LDe=s(R9);DFr=r(LDe,"The model is set in evaluation mode by default using "),f8e=n(LDe,"CODE",{});var pPt=s(f8e);GFr=r(pPt,"model.eval()"),pPt.forEach(t),OFr=r(LDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m8e=n(LDe,"CODE",{});var _Pt=s(m8e);VFr=r(_Pt,"model.train()"),_Pt.forEach(t),LDe.forEach(t),XFr=i(Sa),T(P9.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),qQe=i(f),ic=n(f,"H2",{class:!0});var HUe=s(ic);B9=n(HUe,"A",{id:!0,class:!0,href:!0});var uPt=s(B9);g8e=n(uPt,"SPAN",{});var bPt=s(g8e);T(Mx.$$.fragment,bPt),bPt.forEach(t),uPt.forEach(t),zFr=i(HUe),h8e=n(HUe,"SPAN",{});var vPt=s(h8e);WFr=r(vPt,"AutoModelForImageSegmentation"),vPt.forEach(t),HUe.forEach(t),jQe=i(f),or=n(f,"DIV",{class:!0});var Pl=s(or);T(Ex.$$.fragment,Pl),QFr=i(Pl),dc=n(Pl,"P",{});var Hae=s(dc);HFr=r(Hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_J=n(Hae,"A",{href:!0});var FPt=s(_J);UFr=r(FPt,"from_pretrained()"),FPt.forEach(t),JFr=r(Hae," class method or the "),uJ=n(Hae,"A",{href:!0});var TPt=s(uJ);YFr=r(TPt,"from_config()"),TPt.forEach(t),KFr=r(Hae,` class
method.`),Hae.forEach(t),ZFr=i(Pl),Cx=n(Pl,"P",{});var UUe=s(Cx);eTr=r(UUe,"This class cannot be instantiated directly using "),p8e=n(UUe,"CODE",{});var MPt=s(p8e);oTr=r(MPt,"__init__()"),MPt.forEach(t),rTr=r(UUe," (throws an error)."),UUe.forEach(t),tTr=i(Pl),Rt=n(Pl,"DIV",{class:!0});var qA=s(Rt);T(wx.$$.fragment,qA),aTr=i(qA),_8e=n(qA,"P",{});var EPt=s(_8e);nTr=r(EPt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EPt.forEach(t),sTr=i(qA),cc=n(qA,"P",{});var Uae=s(cc);lTr=r(Uae,`Note:
Loading a model from its configuration file does `),u8e=n(Uae,"STRONG",{});var CPt=s(u8e);iTr=r(CPt,"not"),CPt.forEach(t),dTr=r(Uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Uae,"A",{href:!0});var wPt=s(bJ);cTr=r(wPt,"from_pretrained()"),wPt.forEach(t),fTr=r(Uae," to load the model weights."),Uae.forEach(t),mTr=i(qA),T(I9.$$.fragment,qA),qA.forEach(t),gTr=i(Pl),Fo=n(Pl,"DIV",{class:!0});var Ra=s(Fo);T(Ax.$$.fragment,Ra),hTr=i(Ra),b8e=n(Ra,"P",{});var APt=s(b8e);pTr=r(APt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),APt.forEach(t),_Tr=i(Ra),cn=n(Ra,"P",{});var jA=s(cn);uTr=r(jA,"The model class to instantiate is selected based on the "),v8e=n(jA,"CODE",{});var LPt=s(v8e);bTr=r(LPt,"model_type"),LPt.forEach(t),vTr=r(jA,` property of the config object (either
passed as an argument or loaded from `),F8e=n(jA,"CODE",{});var yPt=s(F8e);FTr=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),TTr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=n(jA,"CODE",{});var xPt=s(T8e);MTr=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),ETr=r(jA,":"),jA.forEach(t),CTr=i(Ra),M8e=n(Ra,"UL",{});var $Pt=s(M8e);N9=n($Pt,"LI",{});var yDe=s(N9);E8e=n(yDe,"STRONG",{});var kPt=s(E8e);wTr=r(kPt,"detr"),kPt.forEach(t),ATr=r(yDe," \u2014 "),vJ=n(yDe,"A",{href:!0});var SPt=s(vJ);LTr=r(SPt,"DetrForSegmentation"),SPt.forEach(t),yTr=r(yDe," (DETR model)"),yDe.forEach(t),$Pt.forEach(t),xTr=i(Ra),q9=n(Ra,"P",{});var xDe=s(q9);$Tr=r(xDe,"The model is set in evaluation mode by default using "),C8e=n(xDe,"CODE",{});var RPt=s(C8e);kTr=r(RPt,"model.eval()"),RPt.forEach(t),STr=r(xDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w8e=n(xDe,"CODE",{});var PPt=s(w8e);RTr=r(PPt,"model.train()"),PPt.forEach(t),xDe.forEach(t),PTr=i(Ra),T(j9.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),DQe=i(f),fc=n(f,"H2",{class:!0});var JUe=s(fc);D9=n(JUe,"A",{id:!0,class:!0,href:!0});var BPt=s(D9);A8e=n(BPt,"SPAN",{});var IPt=s(A8e);T(Lx.$$.fragment,IPt),IPt.forEach(t),BPt.forEach(t),BTr=i(JUe),L8e=n(JUe,"SPAN",{});var NPt=s(L8e);ITr=r(NPt,"AutoModelForSemanticSegmentation"),NPt.forEach(t),JUe.forEach(t),GQe=i(f),rr=n(f,"DIV",{class:!0});var Bl=s(rr);T(yx.$$.fragment,Bl),NTr=i(Bl),mc=n(Bl,"P",{});var Jae=s(mc);qTr=r(Jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FJ=n(Jae,"A",{href:!0});var qPt=s(FJ);jTr=r(qPt,"from_pretrained()"),qPt.forEach(t),DTr=r(Jae," class method or the "),TJ=n(Jae,"A",{href:!0});var jPt=s(TJ);GTr=r(jPt,"from_config()"),jPt.forEach(t),OTr=r(Jae,` class
method.`),Jae.forEach(t),VTr=i(Bl),xx=n(Bl,"P",{});var YUe=s(xx);XTr=r(YUe,"This class cannot be instantiated directly using "),y8e=n(YUe,"CODE",{});var DPt=s(y8e);zTr=r(DPt,"__init__()"),DPt.forEach(t),WTr=r(YUe," (throws an error)."),YUe.forEach(t),QTr=i(Bl),Pt=n(Bl,"DIV",{class:!0});var DA=s(Pt);T($x.$$.fragment,DA),HTr=i(DA),x8e=n(DA,"P",{});var GPt=s(x8e);UTr=r(GPt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GPt.forEach(t),JTr=i(DA),gc=n(DA,"P",{});var Yae=s(gc);YTr=r(Yae,`Note:
Loading a model from its configuration file does `),$8e=n(Yae,"STRONG",{});var OPt=s($8e);KTr=r(OPt,"not"),OPt.forEach(t),ZTr=r(Yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Yae,"A",{href:!0});var VPt=s(MJ);e8r=r(VPt,"from_pretrained()"),VPt.forEach(t),o8r=r(Yae," to load the model weights."),Yae.forEach(t),r8r=i(DA),T(G9.$$.fragment,DA),DA.forEach(t),t8r=i(Bl),To=n(Bl,"DIV",{class:!0});var Pa=s(To);T(kx.$$.fragment,Pa),a8r=i(Pa),k8e=n(Pa,"P",{});var XPt=s(k8e);n8r=r(XPt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XPt.forEach(t),s8r=i(Pa),fn=n(Pa,"P",{});var GA=s(fn);l8r=r(GA,"The model class to instantiate is selected based on the "),S8e=n(GA,"CODE",{});var zPt=s(S8e);i8r=r(zPt,"model_type"),zPt.forEach(t),d8r=r(GA,` property of the config object (either
passed as an argument or loaded from `),R8e=n(GA,"CODE",{});var WPt=s(R8e);c8r=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),f8r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=n(GA,"CODE",{});var QPt=s(P8e);m8r=r(QPt,"pretrained_model_name_or_path"),QPt.forEach(t),g8r=r(GA,":"),GA.forEach(t),h8r=i(Pa),st=n(Pa,"UL",{});var Il=s(st);O9=n(Il,"LI",{});var $De=s(O9);B8e=n($De,"STRONG",{});var HPt=s(B8e);p8r=r(HPt,"beit"),HPt.forEach(t),_8r=r($De," \u2014 "),EJ=n($De,"A",{href:!0});var UPt=s(EJ);u8r=r(UPt,"BeitForSemanticSegmentation"),UPt.forEach(t),b8r=r($De," (BEiT model)"),$De.forEach(t),v8r=i(Il),V9=n(Il,"LI",{});var kDe=s(V9);I8e=n(kDe,"STRONG",{});var JPt=s(I8e);F8r=r(JPt,"data2vec-vision"),JPt.forEach(t),T8r=r(kDe," \u2014 "),CJ=n(kDe,"A",{href:!0});var YPt=s(CJ);M8r=r(YPt,"Data2VecVisionForSemanticSegmentation"),YPt.forEach(t),E8r=r(kDe," (Data2VecVision model)"),kDe.forEach(t),C8r=i(Il),X9=n(Il,"LI",{});var SDe=s(X9);N8e=n(SDe,"STRONG",{});var KPt=s(N8e);w8r=r(KPt,"dpt"),KPt.forEach(t),A8r=r(SDe," \u2014 "),wJ=n(SDe,"A",{href:!0});var ZPt=s(wJ);L8r=r(ZPt,"DPTForSemanticSegmentation"),ZPt.forEach(t),y8r=r(SDe," (DPT model)"),SDe.forEach(t),x8r=i(Il),z9=n(Il,"LI",{});var RDe=s(z9);q8e=n(RDe,"STRONG",{});var eBt=s(q8e);$8r=r(eBt,"mobilevit"),eBt.forEach(t),k8r=r(RDe," \u2014 "),AJ=n(RDe,"A",{href:!0});var oBt=s(AJ);S8r=r(oBt,"MobileViTForSemanticSegmentation"),oBt.forEach(t),R8r=r(RDe," (MobileViT model)"),RDe.forEach(t),P8r=i(Il),W9=n(Il,"LI",{});var PDe=s(W9);j8e=n(PDe,"STRONG",{});var rBt=s(j8e);B8r=r(rBt,"segformer"),rBt.forEach(t),I8r=r(PDe," \u2014 "),LJ=n(PDe,"A",{href:!0});var tBt=s(LJ);N8r=r(tBt,"SegformerForSemanticSegmentation"),tBt.forEach(t),q8r=r(PDe," (SegFormer model)"),PDe.forEach(t),Il.forEach(t),j8r=i(Pa),Q9=n(Pa,"P",{});var BDe=s(Q9);D8r=r(BDe,"The model is set in evaluation mode by default using "),D8e=n(BDe,"CODE",{});var aBt=s(D8e);G8r=r(aBt,"model.eval()"),aBt.forEach(t),O8r=r(BDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G8e=n(BDe,"CODE",{});var nBt=s(G8e);V8r=r(nBt,"model.train()"),nBt.forEach(t),BDe.forEach(t),X8r=i(Pa),T(H9.$$.fragment,Pa),Pa.forEach(t),Bl.forEach(t),OQe=i(f),hc=n(f,"H2",{class:!0});var KUe=s(hc);U9=n(KUe,"A",{id:!0,class:!0,href:!0});var sBt=s(U9);O8e=n(sBt,"SPAN",{});var lBt=s(O8e);T(Sx.$$.fragment,lBt),lBt.forEach(t),sBt.forEach(t),z8r=i(KUe),V8e=n(KUe,"SPAN",{});var iBt=s(V8e);W8r=r(iBt,"AutoModelForInstanceSegmentation"),iBt.forEach(t),KUe.forEach(t),VQe=i(f),tr=n(f,"DIV",{class:!0});var Nl=s(tr);T(Rx.$$.fragment,Nl),Q8r=i(Nl),pc=n(Nl,"P",{});var Kae=s(pc);H8r=r(Kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yJ=n(Kae,"A",{href:!0});var dBt=s(yJ);U8r=r(dBt,"from_pretrained()"),dBt.forEach(t),J8r=r(Kae," class method or the "),xJ=n(Kae,"A",{href:!0});var cBt=s(xJ);Y8r=r(cBt,"from_config()"),cBt.forEach(t),K8r=r(Kae,` class
method.`),Kae.forEach(t),Z8r=i(Nl),Px=n(Nl,"P",{});var ZUe=s(Px);e9r=r(ZUe,"This class cannot be instantiated directly using "),X8e=n(ZUe,"CODE",{});var fBt=s(X8e);o9r=r(fBt,"__init__()"),fBt.forEach(t),r9r=r(ZUe," (throws an error)."),ZUe.forEach(t),t9r=i(Nl),Bt=n(Nl,"DIV",{class:!0});var OA=s(Bt);T(Bx.$$.fragment,OA),a9r=i(OA),z8e=n(OA,"P",{});var mBt=s(z8e);n9r=r(mBt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),mBt.forEach(t),s9r=i(OA),_c=n(OA,"P",{});var Zae=s(_c);l9r=r(Zae,`Note:
Loading a model from its configuration file does `),W8e=n(Zae,"STRONG",{});var gBt=s(W8e);i9r=r(gBt,"not"),gBt.forEach(t),d9r=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(Zae,"A",{href:!0});var hBt=s($J);c9r=r(hBt,"from_pretrained()"),hBt.forEach(t),f9r=r(Zae," to load the model weights."),Zae.forEach(t),m9r=i(OA),T(J9.$$.fragment,OA),OA.forEach(t),g9r=i(Nl),Mo=n(Nl,"DIV",{class:!0});var Ba=s(Mo);T(Ix.$$.fragment,Ba),h9r=i(Ba),Q8e=n(Ba,"P",{});var pBt=s(Q8e);p9r=r(pBt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pBt.forEach(t),_9r=i(Ba),mn=n(Ba,"P",{});var VA=s(mn);u9r=r(VA,"The model class to instantiate is selected based on the "),H8e=n(VA,"CODE",{});var _Bt=s(H8e);b9r=r(_Bt,"model_type"),_Bt.forEach(t),v9r=r(VA,` property of the config object (either
passed as an argument or loaded from `),U8e=n(VA,"CODE",{});var uBt=s(U8e);F9r=r(uBt,"pretrained_model_name_or_path"),uBt.forEach(t),T9r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J8e=n(VA,"CODE",{});var bBt=s(J8e);M9r=r(bBt,"pretrained_model_name_or_path"),bBt.forEach(t),E9r=r(VA,":"),VA.forEach(t),C9r=i(Ba),Y8e=n(Ba,"UL",{});var vBt=s(Y8e);Y9=n(vBt,"LI",{});var IDe=s(Y9);K8e=n(IDe,"STRONG",{});var FBt=s(K8e);w9r=r(FBt,"maskformer"),FBt.forEach(t),A9r=r(IDe," \u2014 "),kJ=n(IDe,"A",{href:!0});var TBt=s(kJ);L9r=r(TBt,"MaskFormerForInstanceSegmentation"),TBt.forEach(t),y9r=r(IDe," (MaskFormer model)"),IDe.forEach(t),vBt.forEach(t),x9r=i(Ba),K9=n(Ba,"P",{});var NDe=s(K9);$9r=r(NDe,"The model is set in evaluation mode by default using "),Z8e=n(NDe,"CODE",{});var MBt=s(Z8e);k9r=r(MBt,"model.eval()"),MBt.forEach(t),S9r=r(NDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e9e=n(NDe,"CODE",{});var EBt=s(e9e);R9r=r(EBt,"model.train()"),EBt.forEach(t),NDe.forEach(t),P9r=i(Ba),T(Z9.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),XQe=i(f),uc=n(f,"H2",{class:!0});var eJe=s(uc);eM=n(eJe,"A",{id:!0,class:!0,href:!0});var CBt=s(eM);o9e=n(CBt,"SPAN",{});var wBt=s(o9e);T(Nx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),B9r=i(eJe),r9e=n(eJe,"SPAN",{});var ABt=s(r9e);I9r=r(ABt,"TFAutoModel"),ABt.forEach(t),eJe.forEach(t),zQe=i(f),ar=n(f,"DIV",{class:!0});var ql=s(ar);T(qx.$$.fragment,ql),N9r=i(ql),bc=n(ql,"P",{});var ene=s(bc);q9r=r(ene,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SJ=n(ene,"A",{href:!0});var LBt=s(SJ);j9r=r(LBt,"from_pretrained()"),LBt.forEach(t),D9r=r(ene," class method or the "),RJ=n(ene,"A",{href:!0});var yBt=s(RJ);G9r=r(yBt,"from_config()"),yBt.forEach(t),O9r=r(ene,` class
method.`),ene.forEach(t),V9r=i(ql),jx=n(ql,"P",{});var oJe=s(jx);X9r=r(oJe,"This class cannot be instantiated directly using "),t9e=n(oJe,"CODE",{});var xBt=s(t9e);z9r=r(xBt,"__init__()"),xBt.forEach(t),W9r=r(oJe," (throws an error)."),oJe.forEach(t),Q9r=i(ql),It=n(ql,"DIV",{class:!0});var XA=s(It);T(Dx.$$.fragment,XA),H9r=i(XA),a9e=n(XA,"P",{});var $Bt=s(a9e);U9r=r($Bt,"Instantiates one of the base model classes of the library from a configuration."),$Bt.forEach(t),J9r=i(XA),vc=n(XA,"P",{});var one=s(vc);Y9r=r(one,`Note:
Loading a model from its configuration file does `),n9e=n(one,"STRONG",{});var kBt=s(n9e);K9r=r(kBt,"not"),kBt.forEach(t),Z9r=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(one,"A",{href:!0});var SBt=s(PJ);eMr=r(SBt,"from_pretrained()"),SBt.forEach(t),oMr=r(one," to load the model weights."),one.forEach(t),rMr=i(XA),T(oM.$$.fragment,XA),XA.forEach(t),tMr=i(ql),Sr=n(ql,"DIV",{class:!0});var jl=s(Sr);T(Gx.$$.fragment,jl),aMr=i(jl),s9e=n(jl,"P",{});var RBt=s(s9e);nMr=r(RBt,"Instantiate one of the base model classes of the library from a pretrained model."),RBt.forEach(t),sMr=i(jl),gn=n(jl,"P",{});var zA=s(gn);lMr=r(zA,"The model class to instantiate is selected based on the "),l9e=n(zA,"CODE",{});var PBt=s(l9e);iMr=r(PBt,"model_type"),PBt.forEach(t),dMr=r(zA,` property of the config object (either
passed as an argument or loaded from `),i9e=n(zA,"CODE",{});var BBt=s(i9e);cMr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),fMr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d9e=n(zA,"CODE",{});var IBt=s(d9e);mMr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),gMr=r(zA,":"),zA.forEach(t),hMr=i(jl),q=n(jl,"UL",{});var D=s(q);rM=n(D,"LI",{});var qDe=s(rM);c9e=n(qDe,"STRONG",{});var NBt=s(c9e);pMr=r(NBt,"albert"),NBt.forEach(t),_Mr=r(qDe," \u2014 "),BJ=n(qDe,"A",{href:!0});var qBt=s(BJ);uMr=r(qBt,"TFAlbertModel"),qBt.forEach(t),bMr=r(qDe," (ALBERT model)"),qDe.forEach(t),vMr=i(D),tM=n(D,"LI",{});var jDe=s(tM);f9e=n(jDe,"STRONG",{});var jBt=s(f9e);FMr=r(jBt,"bart"),jBt.forEach(t),TMr=r(jDe," \u2014 "),IJ=n(jDe,"A",{href:!0});var DBt=s(IJ);MMr=r(DBt,"TFBartModel"),DBt.forEach(t),EMr=r(jDe," (BART model)"),jDe.forEach(t),CMr=i(D),aM=n(D,"LI",{});var DDe=s(aM);m9e=n(DDe,"STRONG",{});var GBt=s(m9e);wMr=r(GBt,"bert"),GBt.forEach(t),AMr=r(DDe," \u2014 "),NJ=n(DDe,"A",{href:!0});var OBt=s(NJ);LMr=r(OBt,"TFBertModel"),OBt.forEach(t),yMr=r(DDe," (BERT model)"),DDe.forEach(t),xMr=i(D),nM=n(D,"LI",{});var GDe=s(nM);g9e=n(GDe,"STRONG",{});var VBt=s(g9e);$Mr=r(VBt,"blenderbot"),VBt.forEach(t),kMr=r(GDe," \u2014 "),qJ=n(GDe,"A",{href:!0});var XBt=s(qJ);SMr=r(XBt,"TFBlenderbotModel"),XBt.forEach(t),RMr=r(GDe," (Blenderbot model)"),GDe.forEach(t),PMr=i(D),sM=n(D,"LI",{});var ODe=s(sM);h9e=n(ODe,"STRONG",{});var zBt=s(h9e);BMr=r(zBt,"blenderbot-small"),zBt.forEach(t),IMr=r(ODe," \u2014 "),jJ=n(ODe,"A",{href:!0});var WBt=s(jJ);NMr=r(WBt,"TFBlenderbotSmallModel"),WBt.forEach(t),qMr=r(ODe," (BlenderbotSmall model)"),ODe.forEach(t),jMr=i(D),lM=n(D,"LI",{});var VDe=s(lM);p9e=n(VDe,"STRONG",{});var QBt=s(p9e);DMr=r(QBt,"camembert"),QBt.forEach(t),GMr=r(VDe," \u2014 "),DJ=n(VDe,"A",{href:!0});var HBt=s(DJ);OMr=r(HBt,"TFCamembertModel"),HBt.forEach(t),VMr=r(VDe," (CamemBERT model)"),VDe.forEach(t),XMr=i(D),iM=n(D,"LI",{});var XDe=s(iM);_9e=n(XDe,"STRONG",{});var UBt=s(_9e);zMr=r(UBt,"clip"),UBt.forEach(t),WMr=r(XDe," \u2014 "),GJ=n(XDe,"A",{href:!0});var JBt=s(GJ);QMr=r(JBt,"TFCLIPModel"),JBt.forEach(t),HMr=r(XDe," (CLIP model)"),XDe.forEach(t),UMr=i(D),dM=n(D,"LI",{});var zDe=s(dM);u9e=n(zDe,"STRONG",{});var YBt=s(u9e);JMr=r(YBt,"convbert"),YBt.forEach(t),YMr=r(zDe," \u2014 "),OJ=n(zDe,"A",{href:!0});var KBt=s(OJ);KMr=r(KBt,"TFConvBertModel"),KBt.forEach(t),ZMr=r(zDe," (ConvBERT model)"),zDe.forEach(t),eEr=i(D),cM=n(D,"LI",{});var WDe=s(cM);b9e=n(WDe,"STRONG",{});var ZBt=s(b9e);oEr=r(ZBt,"convnext"),ZBt.forEach(t),rEr=r(WDe," \u2014 "),VJ=n(WDe,"A",{href:!0});var eIt=s(VJ);tEr=r(eIt,"TFConvNextModel"),eIt.forEach(t),aEr=r(WDe," (ConvNeXT model)"),WDe.forEach(t),nEr=i(D),fM=n(D,"LI",{});var QDe=s(fM);v9e=n(QDe,"STRONG",{});var oIt=s(v9e);sEr=r(oIt,"ctrl"),oIt.forEach(t),lEr=r(QDe," \u2014 "),XJ=n(QDe,"A",{href:!0});var rIt=s(XJ);iEr=r(rIt,"TFCTRLModel"),rIt.forEach(t),dEr=r(QDe," (CTRL model)"),QDe.forEach(t),cEr=i(D),mM=n(D,"LI",{});var HDe=s(mM);F9e=n(HDe,"STRONG",{});var tIt=s(F9e);fEr=r(tIt,"data2vec-vision"),tIt.forEach(t),mEr=r(HDe," \u2014 "),zJ=n(HDe,"A",{href:!0});var aIt=s(zJ);gEr=r(aIt,"TFData2VecVisionModel"),aIt.forEach(t),hEr=r(HDe," (Data2VecVision model)"),HDe.forEach(t),pEr=i(D),gM=n(D,"LI",{});var UDe=s(gM);T9e=n(UDe,"STRONG",{});var nIt=s(T9e);_Er=r(nIt,"deberta"),nIt.forEach(t),uEr=r(UDe," \u2014 "),WJ=n(UDe,"A",{href:!0});var sIt=s(WJ);bEr=r(sIt,"TFDebertaModel"),sIt.forEach(t),vEr=r(UDe," (DeBERTa model)"),UDe.forEach(t),FEr=i(D),hM=n(D,"LI",{});var JDe=s(hM);M9e=n(JDe,"STRONG",{});var lIt=s(M9e);TEr=r(lIt,"deberta-v2"),lIt.forEach(t),MEr=r(JDe," \u2014 "),QJ=n(JDe,"A",{href:!0});var iIt=s(QJ);EEr=r(iIt,"TFDebertaV2Model"),iIt.forEach(t),CEr=r(JDe," (DeBERTa-v2 model)"),JDe.forEach(t),wEr=i(D),pM=n(D,"LI",{});var YDe=s(pM);E9e=n(YDe,"STRONG",{});var dIt=s(E9e);AEr=r(dIt,"deit"),dIt.forEach(t),LEr=r(YDe," \u2014 "),HJ=n(YDe,"A",{href:!0});var cIt=s(HJ);yEr=r(cIt,"TFDeiTModel"),cIt.forEach(t),xEr=r(YDe," (DeiT model)"),YDe.forEach(t),$Er=i(D),_M=n(D,"LI",{});var KDe=s(_M);C9e=n(KDe,"STRONG",{});var fIt=s(C9e);kEr=r(fIt,"distilbert"),fIt.forEach(t),SEr=r(KDe," \u2014 "),UJ=n(KDe,"A",{href:!0});var mIt=s(UJ);REr=r(mIt,"TFDistilBertModel"),mIt.forEach(t),PEr=r(KDe," (DistilBERT model)"),KDe.forEach(t),BEr=i(D),uM=n(D,"LI",{});var ZDe=s(uM);w9e=n(ZDe,"STRONG",{});var gIt=s(w9e);IEr=r(gIt,"dpr"),gIt.forEach(t),NEr=r(ZDe," \u2014 "),JJ=n(ZDe,"A",{href:!0});var hIt=s(JJ);qEr=r(hIt,"TFDPRQuestionEncoder"),hIt.forEach(t),jEr=r(ZDe," (DPR model)"),ZDe.forEach(t),DEr=i(D),bM=n(D,"LI",{});var eGe=s(bM);A9e=n(eGe,"STRONG",{});var pIt=s(A9e);GEr=r(pIt,"electra"),pIt.forEach(t),OEr=r(eGe," \u2014 "),YJ=n(eGe,"A",{href:!0});var _It=s(YJ);VEr=r(_It,"TFElectraModel"),_It.forEach(t),XEr=r(eGe," (ELECTRA model)"),eGe.forEach(t),zEr=i(D),vM=n(D,"LI",{});var oGe=s(vM);L9e=n(oGe,"STRONG",{});var uIt=s(L9e);WEr=r(uIt,"flaubert"),uIt.forEach(t),QEr=r(oGe," \u2014 "),KJ=n(oGe,"A",{href:!0});var bIt=s(KJ);HEr=r(bIt,"TFFlaubertModel"),bIt.forEach(t),UEr=r(oGe," (FlauBERT model)"),oGe.forEach(t),JEr=i(D),al=n(D,"LI",{});var yR=s(al);y9e=n(yR,"STRONG",{});var vIt=s(y9e);YEr=r(vIt,"funnel"),vIt.forEach(t),KEr=r(yR," \u2014 "),ZJ=n(yR,"A",{href:!0});var FIt=s(ZJ);ZEr=r(FIt,"TFFunnelModel"),FIt.forEach(t),e4r=r(yR," or "),eY=n(yR,"A",{href:!0});var TIt=s(eY);o4r=r(TIt,"TFFunnelBaseModel"),TIt.forEach(t),r4r=r(yR," (Funnel Transformer model)"),yR.forEach(t),t4r=i(D),FM=n(D,"LI",{});var rGe=s(FM);x9e=n(rGe,"STRONG",{});var MIt=s(x9e);a4r=r(MIt,"gpt2"),MIt.forEach(t),n4r=r(rGe," \u2014 "),oY=n(rGe,"A",{href:!0});var EIt=s(oY);s4r=r(EIt,"TFGPT2Model"),EIt.forEach(t),l4r=r(rGe," (OpenAI GPT-2 model)"),rGe.forEach(t),i4r=i(D),TM=n(D,"LI",{});var tGe=s(TM);$9e=n(tGe,"STRONG",{});var CIt=s($9e);d4r=r(CIt,"gptj"),CIt.forEach(t),c4r=r(tGe," \u2014 "),rY=n(tGe,"A",{href:!0});var wIt=s(rY);f4r=r(wIt,"TFGPTJModel"),wIt.forEach(t),m4r=r(tGe," (GPT-J model)"),tGe.forEach(t),g4r=i(D),MM=n(D,"LI",{});var aGe=s(MM);k9e=n(aGe,"STRONG",{});var AIt=s(k9e);h4r=r(AIt,"hubert"),AIt.forEach(t),p4r=r(aGe," \u2014 "),tY=n(aGe,"A",{href:!0});var LIt=s(tY);_4r=r(LIt,"TFHubertModel"),LIt.forEach(t),u4r=r(aGe," (Hubert model)"),aGe.forEach(t),b4r=i(D),EM=n(D,"LI",{});var nGe=s(EM);S9e=n(nGe,"STRONG",{});var yIt=s(S9e);v4r=r(yIt,"layoutlm"),yIt.forEach(t),F4r=r(nGe," \u2014 "),aY=n(nGe,"A",{href:!0});var xIt=s(aY);T4r=r(xIt,"TFLayoutLMModel"),xIt.forEach(t),M4r=r(nGe," (LayoutLM model)"),nGe.forEach(t),E4r=i(D),CM=n(D,"LI",{});var sGe=s(CM);R9e=n(sGe,"STRONG",{});var $It=s(R9e);C4r=r($It,"led"),$It.forEach(t),w4r=r(sGe," \u2014 "),nY=n(sGe,"A",{href:!0});var kIt=s(nY);A4r=r(kIt,"TFLEDModel"),kIt.forEach(t),L4r=r(sGe," (LED model)"),sGe.forEach(t),y4r=i(D),wM=n(D,"LI",{});var lGe=s(wM);P9e=n(lGe,"STRONG",{});var SIt=s(P9e);x4r=r(SIt,"longformer"),SIt.forEach(t),$4r=r(lGe," \u2014 "),sY=n(lGe,"A",{href:!0});var RIt=s(sY);k4r=r(RIt,"TFLongformerModel"),RIt.forEach(t),S4r=r(lGe," (Longformer model)"),lGe.forEach(t),R4r=i(D),AM=n(D,"LI",{});var iGe=s(AM);B9e=n(iGe,"STRONG",{});var PIt=s(B9e);P4r=r(PIt,"lxmert"),PIt.forEach(t),B4r=r(iGe," \u2014 "),lY=n(iGe,"A",{href:!0});var BIt=s(lY);I4r=r(BIt,"TFLxmertModel"),BIt.forEach(t),N4r=r(iGe," (LXMERT model)"),iGe.forEach(t),q4r=i(D),LM=n(D,"LI",{});var dGe=s(LM);I9e=n(dGe,"STRONG",{});var IIt=s(I9e);j4r=r(IIt,"marian"),IIt.forEach(t),D4r=r(dGe," \u2014 "),iY=n(dGe,"A",{href:!0});var NIt=s(iY);G4r=r(NIt,"TFMarianModel"),NIt.forEach(t),O4r=r(dGe," (Marian model)"),dGe.forEach(t),V4r=i(D),yM=n(D,"LI",{});var cGe=s(yM);N9e=n(cGe,"STRONG",{});var qIt=s(N9e);X4r=r(qIt,"mbart"),qIt.forEach(t),z4r=r(cGe," \u2014 "),dY=n(cGe,"A",{href:!0});var jIt=s(dY);W4r=r(jIt,"TFMBartModel"),jIt.forEach(t),Q4r=r(cGe," (mBART model)"),cGe.forEach(t),H4r=i(D),xM=n(D,"LI",{});var fGe=s(xM);q9e=n(fGe,"STRONG",{});var DIt=s(q9e);U4r=r(DIt,"mobilebert"),DIt.forEach(t),J4r=r(fGe," \u2014 "),cY=n(fGe,"A",{href:!0});var GIt=s(cY);Y4r=r(GIt,"TFMobileBertModel"),GIt.forEach(t),K4r=r(fGe," (MobileBERT model)"),fGe.forEach(t),Z4r=i(D),$M=n(D,"LI",{});var mGe=s($M);j9e=n(mGe,"STRONG",{});var OIt=s(j9e);eCr=r(OIt,"mpnet"),OIt.forEach(t),oCr=r(mGe," \u2014 "),fY=n(mGe,"A",{href:!0});var VIt=s(fY);rCr=r(VIt,"TFMPNetModel"),VIt.forEach(t),tCr=r(mGe," (MPNet model)"),mGe.forEach(t),aCr=i(D),kM=n(D,"LI",{});var gGe=s(kM);D9e=n(gGe,"STRONG",{});var XIt=s(D9e);nCr=r(XIt,"mt5"),XIt.forEach(t),sCr=r(gGe," \u2014 "),mY=n(gGe,"A",{href:!0});var zIt=s(mY);lCr=r(zIt,"TFMT5Model"),zIt.forEach(t),iCr=r(gGe," (MT5 model)"),gGe.forEach(t),dCr=i(D),SM=n(D,"LI",{});var hGe=s(SM);G9e=n(hGe,"STRONG",{});var WIt=s(G9e);cCr=r(WIt,"openai-gpt"),WIt.forEach(t),fCr=r(hGe," \u2014 "),gY=n(hGe,"A",{href:!0});var QIt=s(gY);mCr=r(QIt,"TFOpenAIGPTModel"),QIt.forEach(t),gCr=r(hGe," (OpenAI GPT model)"),hGe.forEach(t),hCr=i(D),RM=n(D,"LI",{});var pGe=s(RM);O9e=n(pGe,"STRONG",{});var HIt=s(O9e);pCr=r(HIt,"opt"),HIt.forEach(t),_Cr=r(pGe," \u2014 "),hY=n(pGe,"A",{href:!0});var UIt=s(hY);uCr=r(UIt,"TFOPTModel"),UIt.forEach(t),bCr=r(pGe," (OPT model)"),pGe.forEach(t),vCr=i(D),PM=n(D,"LI",{});var _Ge=s(PM);V9e=n(_Ge,"STRONG",{});var JIt=s(V9e);FCr=r(JIt,"pegasus"),JIt.forEach(t),TCr=r(_Ge," \u2014 "),pY=n(_Ge,"A",{href:!0});var YIt=s(pY);MCr=r(YIt,"TFPegasusModel"),YIt.forEach(t),ECr=r(_Ge," (Pegasus model)"),_Ge.forEach(t),CCr=i(D),BM=n(D,"LI",{});var uGe=s(BM);X9e=n(uGe,"STRONG",{});var KIt=s(X9e);wCr=r(KIt,"regnet"),KIt.forEach(t),ACr=r(uGe," \u2014 "),_Y=n(uGe,"A",{href:!0});var ZIt=s(_Y);LCr=r(ZIt,"TFRegNetModel"),ZIt.forEach(t),yCr=r(uGe," (RegNet model)"),uGe.forEach(t),xCr=i(D),IM=n(D,"LI",{});var bGe=s(IM);z9e=n(bGe,"STRONG",{});var eNt=s(z9e);$Cr=r(eNt,"rembert"),eNt.forEach(t),kCr=r(bGe," \u2014 "),uY=n(bGe,"A",{href:!0});var oNt=s(uY);SCr=r(oNt,"TFRemBertModel"),oNt.forEach(t),RCr=r(bGe," (RemBERT model)"),bGe.forEach(t),PCr=i(D),NM=n(D,"LI",{});var vGe=s(NM);W9e=n(vGe,"STRONG",{});var rNt=s(W9e);BCr=r(rNt,"resnet"),rNt.forEach(t),ICr=r(vGe," \u2014 "),bY=n(vGe,"A",{href:!0});var tNt=s(bY);NCr=r(tNt,"TFResNetModel"),tNt.forEach(t),qCr=r(vGe," (ResNet model)"),vGe.forEach(t),jCr=i(D),qM=n(D,"LI",{});var FGe=s(qM);Q9e=n(FGe,"STRONG",{});var aNt=s(Q9e);DCr=r(aNt,"roberta"),aNt.forEach(t),GCr=r(FGe," \u2014 "),vY=n(FGe,"A",{href:!0});var nNt=s(vY);OCr=r(nNt,"TFRobertaModel"),nNt.forEach(t),VCr=r(FGe," (RoBERTa model)"),FGe.forEach(t),XCr=i(D),jM=n(D,"LI",{});var TGe=s(jM);H9e=n(TGe,"STRONG",{});var sNt=s(H9e);zCr=r(sNt,"roformer"),sNt.forEach(t),WCr=r(TGe," \u2014 "),FY=n(TGe,"A",{href:!0});var lNt=s(FY);QCr=r(lNt,"TFRoFormerModel"),lNt.forEach(t),HCr=r(TGe," (RoFormer model)"),TGe.forEach(t),UCr=i(D),DM=n(D,"LI",{});var MGe=s(DM);U9e=n(MGe,"STRONG",{});var iNt=s(U9e);JCr=r(iNt,"segformer"),iNt.forEach(t),YCr=r(MGe," \u2014 "),TY=n(MGe,"A",{href:!0});var dNt=s(TY);KCr=r(dNt,"TFSegformerModel"),dNt.forEach(t),ZCr=r(MGe," (SegFormer model)"),MGe.forEach(t),e3r=i(D),GM=n(D,"LI",{});var EGe=s(GM);J9e=n(EGe,"STRONG",{});var cNt=s(J9e);o3r=r(cNt,"speech_to_text"),cNt.forEach(t),r3r=r(EGe," \u2014 "),MY=n(EGe,"A",{href:!0});var fNt=s(MY);t3r=r(fNt,"TFSpeech2TextModel"),fNt.forEach(t),a3r=r(EGe," (Speech2Text model)"),EGe.forEach(t),n3r=i(D),OM=n(D,"LI",{});var CGe=s(OM);Y9e=n(CGe,"STRONG",{});var mNt=s(Y9e);s3r=r(mNt,"swin"),mNt.forEach(t),l3r=r(CGe," \u2014 "),EY=n(CGe,"A",{href:!0});var gNt=s(EY);i3r=r(gNt,"TFSwinModel"),gNt.forEach(t),d3r=r(CGe," (Swin Transformer model)"),CGe.forEach(t),c3r=i(D),VM=n(D,"LI",{});var wGe=s(VM);K9e=n(wGe,"STRONG",{});var hNt=s(K9e);f3r=r(hNt,"t5"),hNt.forEach(t),m3r=r(wGe," \u2014 "),CY=n(wGe,"A",{href:!0});var pNt=s(CY);g3r=r(pNt,"TFT5Model"),pNt.forEach(t),h3r=r(wGe," (T5 model)"),wGe.forEach(t),p3r=i(D),XM=n(D,"LI",{});var AGe=s(XM);Z9e=n(AGe,"STRONG",{});var _Nt=s(Z9e);_3r=r(_Nt,"tapas"),_Nt.forEach(t),u3r=r(AGe," \u2014 "),wY=n(AGe,"A",{href:!0});var uNt=s(wY);b3r=r(uNt,"TFTapasModel"),uNt.forEach(t),v3r=r(AGe," (TAPAS model)"),AGe.forEach(t),F3r=i(D),zM=n(D,"LI",{});var LGe=s(zM);eMe=n(LGe,"STRONG",{});var bNt=s(eMe);T3r=r(bNt,"transfo-xl"),bNt.forEach(t),M3r=r(LGe," \u2014 "),AY=n(LGe,"A",{href:!0});var vNt=s(AY);E3r=r(vNt,"TFTransfoXLModel"),vNt.forEach(t),C3r=r(LGe," (Transformer-XL model)"),LGe.forEach(t),w3r=i(D),WM=n(D,"LI",{});var yGe=s(WM);oMe=n(yGe,"STRONG",{});var FNt=s(oMe);A3r=r(FNt,"vit"),FNt.forEach(t),L3r=r(yGe," \u2014 "),LY=n(yGe,"A",{href:!0});var TNt=s(LY);y3r=r(TNt,"TFViTModel"),TNt.forEach(t),x3r=r(yGe," (ViT model)"),yGe.forEach(t),$3r=i(D),QM=n(D,"LI",{});var xGe=s(QM);rMe=n(xGe,"STRONG",{});var MNt=s(rMe);k3r=r(MNt,"vit_mae"),MNt.forEach(t),S3r=r(xGe," \u2014 "),yY=n(xGe,"A",{href:!0});var ENt=s(yY);R3r=r(ENt,"TFViTMAEModel"),ENt.forEach(t),P3r=r(xGe," (ViTMAE model)"),xGe.forEach(t),B3r=i(D),HM=n(D,"LI",{});var $Ge=s(HM);tMe=n($Ge,"STRONG",{});var CNt=s(tMe);I3r=r(CNt,"wav2vec2"),CNt.forEach(t),N3r=r($Ge," \u2014 "),xY=n($Ge,"A",{href:!0});var wNt=s(xY);q3r=r(wNt,"TFWav2Vec2Model"),wNt.forEach(t),j3r=r($Ge," (Wav2Vec2 model)"),$Ge.forEach(t),D3r=i(D),UM=n(D,"LI",{});var kGe=s(UM);aMe=n(kGe,"STRONG",{});var ANt=s(aMe);G3r=r(ANt,"xlm"),ANt.forEach(t),O3r=r(kGe," \u2014 "),$Y=n(kGe,"A",{href:!0});var LNt=s($Y);V3r=r(LNt,"TFXLMModel"),LNt.forEach(t),X3r=r(kGe," (XLM model)"),kGe.forEach(t),z3r=i(D),JM=n(D,"LI",{});var SGe=s(JM);nMe=n(SGe,"STRONG",{});var yNt=s(nMe);W3r=r(yNt,"xlm-roberta"),yNt.forEach(t),Q3r=r(SGe," \u2014 "),kY=n(SGe,"A",{href:!0});var xNt=s(kY);H3r=r(xNt,"TFXLMRobertaModel"),xNt.forEach(t),U3r=r(SGe," (XLM-RoBERTa model)"),SGe.forEach(t),J3r=i(D),YM=n(D,"LI",{});var RGe=s(YM);sMe=n(RGe,"STRONG",{});var $Nt=s(sMe);Y3r=r($Nt,"xlnet"),$Nt.forEach(t),K3r=r(RGe," \u2014 "),SY=n(RGe,"A",{href:!0});var kNt=s(SY);Z3r=r(kNt,"TFXLNetModel"),kNt.forEach(t),e0r=r(RGe," (XLNet model)"),RGe.forEach(t),D.forEach(t),o0r=i(jl),T(KM.$$.fragment,jl),jl.forEach(t),ql.forEach(t),WQe=i(f),Fc=n(f,"H2",{class:!0});var rJe=s(Fc);ZM=n(rJe,"A",{id:!0,class:!0,href:!0});var SNt=s(ZM);lMe=n(SNt,"SPAN",{});var RNt=s(lMe);T(Ox.$$.fragment,RNt),RNt.forEach(t),SNt.forEach(t),r0r=i(rJe),iMe=n(rJe,"SPAN",{});var PNt=s(iMe);t0r=r(PNt,"TFAutoModelForPreTraining"),PNt.forEach(t),rJe.forEach(t),QQe=i(f),nr=n(f,"DIV",{class:!0});var Dl=s(nr);T(Vx.$$.fragment,Dl),a0r=i(Dl),Tc=n(Dl,"P",{});var rne=s(Tc);n0r=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RY=n(rne,"A",{href:!0});var BNt=s(RY);s0r=r(BNt,"from_pretrained()"),BNt.forEach(t),l0r=r(rne," class method or the "),PY=n(rne,"A",{href:!0});var INt=s(PY);i0r=r(INt,"from_config()"),INt.forEach(t),d0r=r(rne,` class
method.`),rne.forEach(t),c0r=i(Dl),Xx=n(Dl,"P",{});var tJe=s(Xx);f0r=r(tJe,"This class cannot be instantiated directly using "),dMe=n(tJe,"CODE",{});var NNt=s(dMe);m0r=r(NNt,"__init__()"),NNt.forEach(t),g0r=r(tJe," (throws an error)."),tJe.forEach(t),h0r=i(Dl),Nt=n(Dl,"DIV",{class:!0});var WA=s(Nt);T(zx.$$.fragment,WA),p0r=i(WA),cMe=n(WA,"P",{});var qNt=s(cMe);_0r=r(qNt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qNt.forEach(t),u0r=i(WA),Mc=n(WA,"P",{});var tne=s(Mc);b0r=r(tne,`Note:
Loading a model from its configuration file does `),fMe=n(tne,"STRONG",{});var jNt=s(fMe);v0r=r(jNt,"not"),jNt.forEach(t),F0r=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(tne,"A",{href:!0});var DNt=s(BY);T0r=r(DNt,"from_pretrained()"),DNt.forEach(t),M0r=r(tne," to load the model weights."),tne.forEach(t),E0r=i(WA),T(eE.$$.fragment,WA),WA.forEach(t),C0r=i(Dl),Rr=n(Dl,"DIV",{class:!0});var Gl=s(Rr);T(Wx.$$.fragment,Gl),w0r=i(Gl),mMe=n(Gl,"P",{});var GNt=s(mMe);A0r=r(GNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GNt.forEach(t),L0r=i(Gl),hn=n(Gl,"P",{});var QA=s(hn);y0r=r(QA,"The model class to instantiate is selected based on the "),gMe=n(QA,"CODE",{});var ONt=s(gMe);x0r=r(ONt,"model_type"),ONt.forEach(t),$0r=r(QA,` property of the config object (either
passed as an argument or loaded from `),hMe=n(QA,"CODE",{});var VNt=s(hMe);k0r=r(VNt,"pretrained_model_name_or_path"),VNt.forEach(t),S0r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(QA,"CODE",{});var XNt=s(pMe);R0r=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),P0r=r(QA,":"),QA.forEach(t),B0r=i(Gl),se=n(Gl,"UL",{});var le=s(se);oE=n(le,"LI",{});var PGe=s(oE);_Me=n(PGe,"STRONG",{});var zNt=s(_Me);I0r=r(zNt,"albert"),zNt.forEach(t),N0r=r(PGe," \u2014 "),IY=n(PGe,"A",{href:!0});var WNt=s(IY);q0r=r(WNt,"TFAlbertForPreTraining"),WNt.forEach(t),j0r=r(PGe," (ALBERT model)"),PGe.forEach(t),D0r=i(le),rE=n(le,"LI",{});var BGe=s(rE);uMe=n(BGe,"STRONG",{});var QNt=s(uMe);G0r=r(QNt,"bart"),QNt.forEach(t),O0r=r(BGe," \u2014 "),NY=n(BGe,"A",{href:!0});var HNt=s(NY);V0r=r(HNt,"TFBartForConditionalGeneration"),HNt.forEach(t),X0r=r(BGe," (BART model)"),BGe.forEach(t),z0r=i(le),tE=n(le,"LI",{});var IGe=s(tE);bMe=n(IGe,"STRONG",{});var UNt=s(bMe);W0r=r(UNt,"bert"),UNt.forEach(t),Q0r=r(IGe," \u2014 "),qY=n(IGe,"A",{href:!0});var JNt=s(qY);H0r=r(JNt,"TFBertForPreTraining"),JNt.forEach(t),U0r=r(IGe," (BERT model)"),IGe.forEach(t),J0r=i(le),aE=n(le,"LI",{});var NGe=s(aE);vMe=n(NGe,"STRONG",{});var YNt=s(vMe);Y0r=r(YNt,"camembert"),YNt.forEach(t),K0r=r(NGe," \u2014 "),jY=n(NGe,"A",{href:!0});var KNt=s(jY);Z0r=r(KNt,"TFCamembertForMaskedLM"),KNt.forEach(t),ewr=r(NGe," (CamemBERT model)"),NGe.forEach(t),owr=i(le),nE=n(le,"LI",{});var qGe=s(nE);FMe=n(qGe,"STRONG",{});var ZNt=s(FMe);rwr=r(ZNt,"ctrl"),ZNt.forEach(t),twr=r(qGe," \u2014 "),DY=n(qGe,"A",{href:!0});var eqt=s(DY);awr=r(eqt,"TFCTRLLMHeadModel"),eqt.forEach(t),nwr=r(qGe," (CTRL model)"),qGe.forEach(t),swr=i(le),sE=n(le,"LI",{});var jGe=s(sE);TMe=n(jGe,"STRONG",{});var oqt=s(TMe);lwr=r(oqt,"distilbert"),oqt.forEach(t),iwr=r(jGe," \u2014 "),GY=n(jGe,"A",{href:!0});var rqt=s(GY);dwr=r(rqt,"TFDistilBertForMaskedLM"),rqt.forEach(t),cwr=r(jGe," (DistilBERT model)"),jGe.forEach(t),fwr=i(le),lE=n(le,"LI",{});var DGe=s(lE);MMe=n(DGe,"STRONG",{});var tqt=s(MMe);mwr=r(tqt,"electra"),tqt.forEach(t),gwr=r(DGe," \u2014 "),OY=n(DGe,"A",{href:!0});var aqt=s(OY);hwr=r(aqt,"TFElectraForPreTraining"),aqt.forEach(t),pwr=r(DGe," (ELECTRA model)"),DGe.forEach(t),_wr=i(le),iE=n(le,"LI",{});var GGe=s(iE);EMe=n(GGe,"STRONG",{});var nqt=s(EMe);uwr=r(nqt,"flaubert"),nqt.forEach(t),bwr=r(GGe," \u2014 "),VY=n(GGe,"A",{href:!0});var sqt=s(VY);vwr=r(sqt,"TFFlaubertWithLMHeadModel"),sqt.forEach(t),Fwr=r(GGe," (FlauBERT model)"),GGe.forEach(t),Twr=i(le),dE=n(le,"LI",{});var OGe=s(dE);CMe=n(OGe,"STRONG",{});var lqt=s(CMe);Mwr=r(lqt,"funnel"),lqt.forEach(t),Ewr=r(OGe," \u2014 "),XY=n(OGe,"A",{href:!0});var iqt=s(XY);Cwr=r(iqt,"TFFunnelForPreTraining"),iqt.forEach(t),wwr=r(OGe," (Funnel Transformer model)"),OGe.forEach(t),Awr=i(le),cE=n(le,"LI",{});var VGe=s(cE);wMe=n(VGe,"STRONG",{});var dqt=s(wMe);Lwr=r(dqt,"gpt2"),dqt.forEach(t),ywr=r(VGe," \u2014 "),zY=n(VGe,"A",{href:!0});var cqt=s(zY);xwr=r(cqt,"TFGPT2LMHeadModel"),cqt.forEach(t),$wr=r(VGe," (OpenAI GPT-2 model)"),VGe.forEach(t),kwr=i(le),fE=n(le,"LI",{});var XGe=s(fE);AMe=n(XGe,"STRONG",{});var fqt=s(AMe);Swr=r(fqt,"layoutlm"),fqt.forEach(t),Rwr=r(XGe," \u2014 "),WY=n(XGe,"A",{href:!0});var mqt=s(WY);Pwr=r(mqt,"TFLayoutLMForMaskedLM"),mqt.forEach(t),Bwr=r(XGe," (LayoutLM model)"),XGe.forEach(t),Iwr=i(le),mE=n(le,"LI",{});var zGe=s(mE);LMe=n(zGe,"STRONG",{});var gqt=s(LMe);Nwr=r(gqt,"lxmert"),gqt.forEach(t),qwr=r(zGe," \u2014 "),QY=n(zGe,"A",{href:!0});var hqt=s(QY);jwr=r(hqt,"TFLxmertForPreTraining"),hqt.forEach(t),Dwr=r(zGe," (LXMERT model)"),zGe.forEach(t),Gwr=i(le),gE=n(le,"LI",{});var WGe=s(gE);yMe=n(WGe,"STRONG",{});var pqt=s(yMe);Owr=r(pqt,"mobilebert"),pqt.forEach(t),Vwr=r(WGe," \u2014 "),HY=n(WGe,"A",{href:!0});var _qt=s(HY);Xwr=r(_qt,"TFMobileBertForPreTraining"),_qt.forEach(t),zwr=r(WGe," (MobileBERT model)"),WGe.forEach(t),Wwr=i(le),hE=n(le,"LI",{});var QGe=s(hE);xMe=n(QGe,"STRONG",{});var uqt=s(xMe);Qwr=r(uqt,"mpnet"),uqt.forEach(t),Hwr=r(QGe," \u2014 "),UY=n(QGe,"A",{href:!0});var bqt=s(UY);Uwr=r(bqt,"TFMPNetForMaskedLM"),bqt.forEach(t),Jwr=r(QGe," (MPNet model)"),QGe.forEach(t),Ywr=i(le),pE=n(le,"LI",{});var HGe=s(pE);$Me=n(HGe,"STRONG",{});var vqt=s($Me);Kwr=r(vqt,"openai-gpt"),vqt.forEach(t),Zwr=r(HGe," \u2014 "),JY=n(HGe,"A",{href:!0});var Fqt=s(JY);e6r=r(Fqt,"TFOpenAIGPTLMHeadModel"),Fqt.forEach(t),o6r=r(HGe," (OpenAI GPT model)"),HGe.forEach(t),r6r=i(le),_E=n(le,"LI",{});var UGe=s(_E);kMe=n(UGe,"STRONG",{});var Tqt=s(kMe);t6r=r(Tqt,"roberta"),Tqt.forEach(t),a6r=r(UGe," \u2014 "),YY=n(UGe,"A",{href:!0});var Mqt=s(YY);n6r=r(Mqt,"TFRobertaForMaskedLM"),Mqt.forEach(t),s6r=r(UGe," (RoBERTa model)"),UGe.forEach(t),l6r=i(le),uE=n(le,"LI",{});var JGe=s(uE);SMe=n(JGe,"STRONG",{});var Eqt=s(SMe);i6r=r(Eqt,"t5"),Eqt.forEach(t),d6r=r(JGe," \u2014 "),KY=n(JGe,"A",{href:!0});var Cqt=s(KY);c6r=r(Cqt,"TFT5ForConditionalGeneration"),Cqt.forEach(t),f6r=r(JGe," (T5 model)"),JGe.forEach(t),m6r=i(le),bE=n(le,"LI",{});var YGe=s(bE);RMe=n(YGe,"STRONG",{});var wqt=s(RMe);g6r=r(wqt,"tapas"),wqt.forEach(t),h6r=r(YGe," \u2014 "),ZY=n(YGe,"A",{href:!0});var Aqt=s(ZY);p6r=r(Aqt,"TFTapasForMaskedLM"),Aqt.forEach(t),_6r=r(YGe," (TAPAS model)"),YGe.forEach(t),u6r=i(le),vE=n(le,"LI",{});var KGe=s(vE);PMe=n(KGe,"STRONG",{});var Lqt=s(PMe);b6r=r(Lqt,"transfo-xl"),Lqt.forEach(t),v6r=r(KGe," \u2014 "),eK=n(KGe,"A",{href:!0});var yqt=s(eK);F6r=r(yqt,"TFTransfoXLLMHeadModel"),yqt.forEach(t),T6r=r(KGe," (Transformer-XL model)"),KGe.forEach(t),M6r=i(le),FE=n(le,"LI",{});var ZGe=s(FE);BMe=n(ZGe,"STRONG",{});var xqt=s(BMe);E6r=r(xqt,"vit_mae"),xqt.forEach(t),C6r=r(ZGe," \u2014 "),oK=n(ZGe,"A",{href:!0});var $qt=s(oK);w6r=r($qt,"TFViTMAEForPreTraining"),$qt.forEach(t),A6r=r(ZGe," (ViTMAE model)"),ZGe.forEach(t),L6r=i(le),TE=n(le,"LI",{});var eOe=s(TE);IMe=n(eOe,"STRONG",{});var kqt=s(IMe);y6r=r(kqt,"xlm"),kqt.forEach(t),x6r=r(eOe," \u2014 "),rK=n(eOe,"A",{href:!0});var Sqt=s(rK);$6r=r(Sqt,"TFXLMWithLMHeadModel"),Sqt.forEach(t),k6r=r(eOe," (XLM model)"),eOe.forEach(t),S6r=i(le),ME=n(le,"LI",{});var oOe=s(ME);NMe=n(oOe,"STRONG",{});var Rqt=s(NMe);R6r=r(Rqt,"xlm-roberta"),Rqt.forEach(t),P6r=r(oOe," \u2014 "),tK=n(oOe,"A",{href:!0});var Pqt=s(tK);B6r=r(Pqt,"TFXLMRobertaForMaskedLM"),Pqt.forEach(t),I6r=r(oOe," (XLM-RoBERTa model)"),oOe.forEach(t),N6r=i(le),EE=n(le,"LI",{});var rOe=s(EE);qMe=n(rOe,"STRONG",{});var Bqt=s(qMe);q6r=r(Bqt,"xlnet"),Bqt.forEach(t),j6r=r(rOe," \u2014 "),aK=n(rOe,"A",{href:!0});var Iqt=s(aK);D6r=r(Iqt,"TFXLNetLMHeadModel"),Iqt.forEach(t),G6r=r(rOe," (XLNet model)"),rOe.forEach(t),le.forEach(t),O6r=i(Gl),T(CE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),HQe=i(f),Ec=n(f,"H2",{class:!0});var aJe=s(Ec);wE=n(aJe,"A",{id:!0,class:!0,href:!0});var Nqt=s(wE);jMe=n(Nqt,"SPAN",{});var qqt=s(jMe);T(Qx.$$.fragment,qqt),qqt.forEach(t),Nqt.forEach(t),V6r=i(aJe),DMe=n(aJe,"SPAN",{});var jqt=s(DMe);X6r=r(jqt,"TFAutoModelForCausalLM"),jqt.forEach(t),aJe.forEach(t),UQe=i(f),sr=n(f,"DIV",{class:!0});var Ol=s(sr);T(Hx.$$.fragment,Ol),z6r=i(Ol),Cc=n(Ol,"P",{});var ane=s(Cc);W6r=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nK=n(ane,"A",{href:!0});var Dqt=s(nK);Q6r=r(Dqt,"from_pretrained()"),Dqt.forEach(t),H6r=r(ane," class method or the "),sK=n(ane,"A",{href:!0});var Gqt=s(sK);U6r=r(Gqt,"from_config()"),Gqt.forEach(t),J6r=r(ane,` class
method.`),ane.forEach(t),Y6r=i(Ol),Ux=n(Ol,"P",{});var nJe=s(Ux);K6r=r(nJe,"This class cannot be instantiated directly using "),GMe=n(nJe,"CODE",{});var Oqt=s(GMe);Z6r=r(Oqt,"__init__()"),Oqt.forEach(t),eAr=r(nJe," (throws an error)."),nJe.forEach(t),oAr=i(Ol),qt=n(Ol,"DIV",{class:!0});var HA=s(qt);T(Jx.$$.fragment,HA),rAr=i(HA),OMe=n(HA,"P",{});var Vqt=s(OMe);tAr=r(Vqt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vqt.forEach(t),aAr=i(HA),wc=n(HA,"P",{});var nne=s(wc);nAr=r(nne,`Note:
Loading a model from its configuration file does `),VMe=n(nne,"STRONG",{});var Xqt=s(VMe);sAr=r(Xqt,"not"),Xqt.forEach(t),lAr=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(nne,"A",{href:!0});var zqt=s(lK);iAr=r(zqt,"from_pretrained()"),zqt.forEach(t),dAr=r(nne," to load the model weights."),nne.forEach(t),cAr=i(HA),T(AE.$$.fragment,HA),HA.forEach(t),fAr=i(Ol),Pr=n(Ol,"DIV",{class:!0});var Vl=s(Pr);T(Yx.$$.fragment,Vl),mAr=i(Vl),XMe=n(Vl,"P",{});var Wqt=s(XMe);gAr=r(Wqt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wqt.forEach(t),hAr=i(Vl),pn=n(Vl,"P",{});var UA=s(pn);pAr=r(UA,"The model class to instantiate is selected based on the "),zMe=n(UA,"CODE",{});var Qqt=s(zMe);_Ar=r(Qqt,"model_type"),Qqt.forEach(t),uAr=r(UA,` property of the config object (either
passed as an argument or loaded from `),WMe=n(UA,"CODE",{});var Hqt=s(WMe);bAr=r(Hqt,"pretrained_model_name_or_path"),Hqt.forEach(t),vAr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(UA,"CODE",{});var Uqt=s(QMe);FAr=r(Uqt,"pretrained_model_name_or_path"),Uqt.forEach(t),TAr=r(UA,":"),UA.forEach(t),MAr=i(Vl),Me=n(Vl,"UL",{});var Ce=s(Me);LE=n(Ce,"LI",{});var tOe=s(LE);HMe=n(tOe,"STRONG",{});var Jqt=s(HMe);EAr=r(Jqt,"bert"),Jqt.forEach(t),CAr=r(tOe," \u2014 "),iK=n(tOe,"A",{href:!0});var Yqt=s(iK);wAr=r(Yqt,"TFBertLMHeadModel"),Yqt.forEach(t),AAr=r(tOe," (BERT model)"),tOe.forEach(t),LAr=i(Ce),yE=n(Ce,"LI",{});var aOe=s(yE);UMe=n(aOe,"STRONG",{});var Kqt=s(UMe);yAr=r(Kqt,"camembert"),Kqt.forEach(t),xAr=r(aOe," \u2014 "),dK=n(aOe,"A",{href:!0});var Zqt=s(dK);$Ar=r(Zqt,"TFCamembertForCausalLM"),Zqt.forEach(t),kAr=r(aOe," (CamemBERT model)"),aOe.forEach(t),SAr=i(Ce),xE=n(Ce,"LI",{});var nOe=s(xE);JMe=n(nOe,"STRONG",{});var ejt=s(JMe);RAr=r(ejt,"ctrl"),ejt.forEach(t),PAr=r(nOe," \u2014 "),cK=n(nOe,"A",{href:!0});var ojt=s(cK);BAr=r(ojt,"TFCTRLLMHeadModel"),ojt.forEach(t),IAr=r(nOe," (CTRL model)"),nOe.forEach(t),NAr=i(Ce),$E=n(Ce,"LI",{});var sOe=s($E);YMe=n(sOe,"STRONG",{});var rjt=s(YMe);qAr=r(rjt,"gpt2"),rjt.forEach(t),jAr=r(sOe," \u2014 "),fK=n(sOe,"A",{href:!0});var tjt=s(fK);DAr=r(tjt,"TFGPT2LMHeadModel"),tjt.forEach(t),GAr=r(sOe," (OpenAI GPT-2 model)"),sOe.forEach(t),OAr=i(Ce),kE=n(Ce,"LI",{});var lOe=s(kE);KMe=n(lOe,"STRONG",{});var ajt=s(KMe);VAr=r(ajt,"gptj"),ajt.forEach(t),XAr=r(lOe," \u2014 "),mK=n(lOe,"A",{href:!0});var njt=s(mK);zAr=r(njt,"TFGPTJForCausalLM"),njt.forEach(t),WAr=r(lOe," (GPT-J model)"),lOe.forEach(t),QAr=i(Ce),SE=n(Ce,"LI",{});var iOe=s(SE);ZMe=n(iOe,"STRONG",{});var sjt=s(ZMe);HAr=r(sjt,"openai-gpt"),sjt.forEach(t),UAr=r(iOe," \u2014 "),gK=n(iOe,"A",{href:!0});var ljt=s(gK);JAr=r(ljt,"TFOpenAIGPTLMHeadModel"),ljt.forEach(t),YAr=r(iOe," (OpenAI GPT model)"),iOe.forEach(t),KAr=i(Ce),RE=n(Ce,"LI",{});var dOe=s(RE);eEe=n(dOe,"STRONG",{});var ijt=s(eEe);ZAr=r(ijt,"opt"),ijt.forEach(t),e7r=r(dOe," \u2014 "),hK=n(dOe,"A",{href:!0});var djt=s(hK);o7r=r(djt,"TFOPTForCausalLM"),djt.forEach(t),r7r=r(dOe," (OPT model)"),dOe.forEach(t),t7r=i(Ce),PE=n(Ce,"LI",{});var cOe=s(PE);oEe=n(cOe,"STRONG",{});var cjt=s(oEe);a7r=r(cjt,"rembert"),cjt.forEach(t),n7r=r(cOe," \u2014 "),pK=n(cOe,"A",{href:!0});var fjt=s(pK);s7r=r(fjt,"TFRemBertForCausalLM"),fjt.forEach(t),l7r=r(cOe," (RemBERT model)"),cOe.forEach(t),i7r=i(Ce),BE=n(Ce,"LI",{});var fOe=s(BE);rEe=n(fOe,"STRONG",{});var mjt=s(rEe);d7r=r(mjt,"roberta"),mjt.forEach(t),c7r=r(fOe," \u2014 "),_K=n(fOe,"A",{href:!0});var gjt=s(_K);f7r=r(gjt,"TFRobertaForCausalLM"),gjt.forEach(t),m7r=r(fOe," (RoBERTa model)"),fOe.forEach(t),g7r=i(Ce),IE=n(Ce,"LI",{});var mOe=s(IE);tEe=n(mOe,"STRONG",{});var hjt=s(tEe);h7r=r(hjt,"roformer"),hjt.forEach(t),p7r=r(mOe," \u2014 "),uK=n(mOe,"A",{href:!0});var pjt=s(uK);_7r=r(pjt,"TFRoFormerForCausalLM"),pjt.forEach(t),u7r=r(mOe," (RoFormer model)"),mOe.forEach(t),b7r=i(Ce),NE=n(Ce,"LI",{});var gOe=s(NE);aEe=n(gOe,"STRONG",{});var _jt=s(aEe);v7r=r(_jt,"transfo-xl"),_jt.forEach(t),F7r=r(gOe," \u2014 "),bK=n(gOe,"A",{href:!0});var ujt=s(bK);T7r=r(ujt,"TFTransfoXLLMHeadModel"),ujt.forEach(t),M7r=r(gOe," (Transformer-XL model)"),gOe.forEach(t),E7r=i(Ce),qE=n(Ce,"LI",{});var hOe=s(qE);nEe=n(hOe,"STRONG",{});var bjt=s(nEe);C7r=r(bjt,"xlm"),bjt.forEach(t),w7r=r(hOe," \u2014 "),vK=n(hOe,"A",{href:!0});var vjt=s(vK);A7r=r(vjt,"TFXLMWithLMHeadModel"),vjt.forEach(t),L7r=r(hOe," (XLM model)"),hOe.forEach(t),y7r=i(Ce),jE=n(Ce,"LI",{});var pOe=s(jE);sEe=n(pOe,"STRONG",{});var Fjt=s(sEe);x7r=r(Fjt,"xlnet"),Fjt.forEach(t),$7r=r(pOe," \u2014 "),FK=n(pOe,"A",{href:!0});var Tjt=s(FK);k7r=r(Tjt,"TFXLNetLMHeadModel"),Tjt.forEach(t),S7r=r(pOe," (XLNet model)"),pOe.forEach(t),Ce.forEach(t),R7r=i(Vl),T(DE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),JQe=i(f),Ac=n(f,"H2",{class:!0});var sJe=s(Ac);GE=n(sJe,"A",{id:!0,class:!0,href:!0});var Mjt=s(GE);lEe=n(Mjt,"SPAN",{});var Ejt=s(lEe);T(Kx.$$.fragment,Ejt),Ejt.forEach(t),Mjt.forEach(t),P7r=i(sJe),iEe=n(sJe,"SPAN",{});var Cjt=s(iEe);B7r=r(Cjt,"TFAutoModelForImageClassification"),Cjt.forEach(t),sJe.forEach(t),YQe=i(f),lr=n(f,"DIV",{class:!0});var Xl=s(lr);T(Zx.$$.fragment,Xl),I7r=i(Xl),Lc=n(Xl,"P",{});var sne=s(Lc);N7r=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TK=n(sne,"A",{href:!0});var wjt=s(TK);q7r=r(wjt,"from_pretrained()"),wjt.forEach(t),j7r=r(sne," class method or the "),MK=n(sne,"A",{href:!0});var Ajt=s(MK);D7r=r(Ajt,"from_config()"),Ajt.forEach(t),G7r=r(sne,` class
method.`),sne.forEach(t),O7r=i(Xl),e$=n(Xl,"P",{});var lJe=s(e$);V7r=r(lJe,"This class cannot be instantiated directly using "),dEe=n(lJe,"CODE",{});var Ljt=s(dEe);X7r=r(Ljt,"__init__()"),Ljt.forEach(t),z7r=r(lJe," (throws an error)."),lJe.forEach(t),W7r=i(Xl),jt=n(Xl,"DIV",{class:!0});var JA=s(jt);T(o$.$$.fragment,JA),Q7r=i(JA),cEe=n(JA,"P",{});var yjt=s(cEe);H7r=r(yjt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yjt.forEach(t),U7r=i(JA),yc=n(JA,"P",{});var lne=s(yc);J7r=r(lne,`Note:
Loading a model from its configuration file does `),fEe=n(lne,"STRONG",{});var xjt=s(fEe);Y7r=r(xjt,"not"),xjt.forEach(t),K7r=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(lne,"A",{href:!0});var $jt=s(EK);Z7r=r($jt,"from_pretrained()"),$jt.forEach(t),eLr=r(lne," to load the model weights."),lne.forEach(t),oLr=i(JA),T(OE.$$.fragment,JA),JA.forEach(t),rLr=i(Xl),Br=n(Xl,"DIV",{class:!0});var zl=s(Br);T(r$.$$.fragment,zl),tLr=i(zl),mEe=n(zl,"P",{});var kjt=s(mEe);aLr=r(kjt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kjt.forEach(t),nLr=i(zl),_n=n(zl,"P",{});var YA=s(_n);sLr=r(YA,"The model class to instantiate is selected based on the "),gEe=n(YA,"CODE",{});var Sjt=s(gEe);lLr=r(Sjt,"model_type"),Sjt.forEach(t),iLr=r(YA,` property of the config object (either
passed as an argument or loaded from `),hEe=n(YA,"CODE",{});var Rjt=s(hEe);dLr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),cLr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pEe=n(YA,"CODE",{});var Pjt=s(pEe);fLr=r(Pjt,"pretrained_model_name_or_path"),Pjt.forEach(t),mLr=r(YA,":"),YA.forEach(t),gLr=i(zl),Ve=n(zl,"UL",{});var Eo=s(Ve);VE=n(Eo,"LI",{});var _Oe=s(VE);_Ee=n(_Oe,"STRONG",{});var Bjt=s(_Ee);hLr=r(Bjt,"convnext"),Bjt.forEach(t),pLr=r(_Oe," \u2014 "),CK=n(_Oe,"A",{href:!0});var Ijt=s(CK);_Lr=r(Ijt,"TFConvNextForImageClassification"),Ijt.forEach(t),uLr=r(_Oe," (ConvNeXT model)"),_Oe.forEach(t),bLr=i(Eo),XE=n(Eo,"LI",{});var uOe=s(XE);uEe=n(uOe,"STRONG",{});var Njt=s(uEe);vLr=r(Njt,"data2vec-vision"),Njt.forEach(t),FLr=r(uOe," \u2014 "),wK=n(uOe,"A",{href:!0});var qjt=s(wK);TLr=r(qjt,"TFData2VecVisionForImageClassification"),qjt.forEach(t),MLr=r(uOe," (Data2VecVision model)"),uOe.forEach(t),ELr=i(Eo),nl=n(Eo,"LI",{});var xR=s(nl);bEe=n(xR,"STRONG",{});var jjt=s(bEe);CLr=r(jjt,"deit"),jjt.forEach(t),wLr=r(xR," \u2014 "),AK=n(xR,"A",{href:!0});var Djt=s(AK);ALr=r(Djt,"TFDeiTForImageClassification"),Djt.forEach(t),LLr=r(xR," or "),LK=n(xR,"A",{href:!0});var Gjt=s(LK);yLr=r(Gjt,"TFDeiTForImageClassificationWithTeacher"),Gjt.forEach(t),xLr=r(xR," (DeiT model)"),xR.forEach(t),$Lr=i(Eo),zE=n(Eo,"LI",{});var bOe=s(zE);vEe=n(bOe,"STRONG",{});var Ojt=s(vEe);kLr=r(Ojt,"regnet"),Ojt.forEach(t),SLr=r(bOe," \u2014 "),yK=n(bOe,"A",{href:!0});var Vjt=s(yK);RLr=r(Vjt,"TFRegNetForImageClassification"),Vjt.forEach(t),PLr=r(bOe," (RegNet model)"),bOe.forEach(t),BLr=i(Eo),WE=n(Eo,"LI",{});var vOe=s(WE);FEe=n(vOe,"STRONG",{});var Xjt=s(FEe);ILr=r(Xjt,"resnet"),Xjt.forEach(t),NLr=r(vOe," \u2014 "),xK=n(vOe,"A",{href:!0});var zjt=s(xK);qLr=r(zjt,"TFResNetForImageClassification"),zjt.forEach(t),jLr=r(vOe," (ResNet model)"),vOe.forEach(t),DLr=i(Eo),QE=n(Eo,"LI",{});var FOe=s(QE);TEe=n(FOe,"STRONG",{});var Wjt=s(TEe);GLr=r(Wjt,"segformer"),Wjt.forEach(t),OLr=r(FOe," \u2014 "),$K=n(FOe,"A",{href:!0});var Qjt=s($K);VLr=r(Qjt,"TFSegformerForImageClassification"),Qjt.forEach(t),XLr=r(FOe," (SegFormer model)"),FOe.forEach(t),zLr=i(Eo),HE=n(Eo,"LI",{});var TOe=s(HE);MEe=n(TOe,"STRONG",{});var Hjt=s(MEe);WLr=r(Hjt,"swin"),Hjt.forEach(t),QLr=r(TOe," \u2014 "),kK=n(TOe,"A",{href:!0});var Ujt=s(kK);HLr=r(Ujt,"TFSwinForImageClassification"),Ujt.forEach(t),ULr=r(TOe," (Swin Transformer model)"),TOe.forEach(t),JLr=i(Eo),UE=n(Eo,"LI",{});var MOe=s(UE);EEe=n(MOe,"STRONG",{});var Jjt=s(EEe);YLr=r(Jjt,"vit"),Jjt.forEach(t),KLr=r(MOe," \u2014 "),SK=n(MOe,"A",{href:!0});var Yjt=s(SK);ZLr=r(Yjt,"TFViTForImageClassification"),Yjt.forEach(t),eyr=r(MOe," (ViT model)"),MOe.forEach(t),Eo.forEach(t),oyr=i(zl),T(JE.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),KQe=i(f),xc=n(f,"H2",{class:!0});var iJe=s(xc);YE=n(iJe,"A",{id:!0,class:!0,href:!0});var Kjt=s(YE);CEe=n(Kjt,"SPAN",{});var Zjt=s(CEe);T(t$.$$.fragment,Zjt),Zjt.forEach(t),Kjt.forEach(t),ryr=i(iJe),wEe=n(iJe,"SPAN",{});var eDt=s(wEe);tyr=r(eDt,"TFAutoModelForMaskedLM"),eDt.forEach(t),iJe.forEach(t),ZQe=i(f),ir=n(f,"DIV",{class:!0});var Wl=s(ir);T(a$.$$.fragment,Wl),ayr=i(Wl),$c=n(Wl,"P",{});var ine=s($c);nyr=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RK=n(ine,"A",{href:!0});var oDt=s(RK);syr=r(oDt,"from_pretrained()"),oDt.forEach(t),lyr=r(ine," class method or the "),PK=n(ine,"A",{href:!0});var rDt=s(PK);iyr=r(rDt,"from_config()"),rDt.forEach(t),dyr=r(ine,` class
method.`),ine.forEach(t),cyr=i(Wl),n$=n(Wl,"P",{});var dJe=s(n$);fyr=r(dJe,"This class cannot be instantiated directly using "),AEe=n(dJe,"CODE",{});var tDt=s(AEe);myr=r(tDt,"__init__()"),tDt.forEach(t),gyr=r(dJe," (throws an error)."),dJe.forEach(t),hyr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var KA=s(Dt);T(s$.$$.fragment,KA),pyr=i(KA),LEe=n(KA,"P",{});var aDt=s(LEe);_yr=r(aDt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aDt.forEach(t),uyr=i(KA),kc=n(KA,"P",{});var dne=s(kc);byr=r(dne,`Note:
Loading a model from its configuration file does `),yEe=n(dne,"STRONG",{});var nDt=s(yEe);vyr=r(nDt,"not"),nDt.forEach(t),Fyr=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(dne,"A",{href:!0});var sDt=s(BK);Tyr=r(sDt,"from_pretrained()"),sDt.forEach(t),Myr=r(dne," to load the model weights."),dne.forEach(t),Eyr=i(KA),T(KE.$$.fragment,KA),KA.forEach(t),Cyr=i(Wl),Ir=n(Wl,"DIV",{class:!0});var Ql=s(Ir);T(l$.$$.fragment,Ql),wyr=i(Ql),xEe=n(Ql,"P",{});var lDt=s(xEe);Ayr=r(lDt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lDt.forEach(t),Lyr=i(Ql),un=n(Ql,"P",{});var ZA=s(un);yyr=r(ZA,"The model class to instantiate is selected based on the "),$Ee=n(ZA,"CODE",{});var iDt=s($Ee);xyr=r(iDt,"model_type"),iDt.forEach(t),$yr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),kEe=n(ZA,"CODE",{});var dDt=s(kEe);kyr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),Syr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SEe=n(ZA,"CODE",{});var cDt=s(SEe);Ryr=r(cDt,"pretrained_model_name_or_path"),cDt.forEach(t),Pyr=r(ZA,":"),ZA.forEach(t),Byr=i(Ql),ie=n(Ql,"UL",{});var ge=s(ie);ZE=n(ge,"LI",{});var EOe=s(ZE);REe=n(EOe,"STRONG",{});var fDt=s(REe);Iyr=r(fDt,"albert"),fDt.forEach(t),Nyr=r(EOe," \u2014 "),IK=n(EOe,"A",{href:!0});var mDt=s(IK);qyr=r(mDt,"TFAlbertForMaskedLM"),mDt.forEach(t),jyr=r(EOe," (ALBERT model)"),EOe.forEach(t),Dyr=i(ge),e4=n(ge,"LI",{});var COe=s(e4);PEe=n(COe,"STRONG",{});var gDt=s(PEe);Gyr=r(gDt,"bert"),gDt.forEach(t),Oyr=r(COe," \u2014 "),NK=n(COe,"A",{href:!0});var hDt=s(NK);Vyr=r(hDt,"TFBertForMaskedLM"),hDt.forEach(t),Xyr=r(COe," (BERT model)"),COe.forEach(t),zyr=i(ge),o4=n(ge,"LI",{});var wOe=s(o4);BEe=n(wOe,"STRONG",{});var pDt=s(BEe);Wyr=r(pDt,"camembert"),pDt.forEach(t),Qyr=r(wOe," \u2014 "),qK=n(wOe,"A",{href:!0});var _Dt=s(qK);Hyr=r(_Dt,"TFCamembertForMaskedLM"),_Dt.forEach(t),Uyr=r(wOe," (CamemBERT model)"),wOe.forEach(t),Jyr=i(ge),r4=n(ge,"LI",{});var AOe=s(r4);IEe=n(AOe,"STRONG",{});var uDt=s(IEe);Yyr=r(uDt,"convbert"),uDt.forEach(t),Kyr=r(AOe," \u2014 "),jK=n(AOe,"A",{href:!0});var bDt=s(jK);Zyr=r(bDt,"TFConvBertForMaskedLM"),bDt.forEach(t),exr=r(AOe," (ConvBERT model)"),AOe.forEach(t),oxr=i(ge),t4=n(ge,"LI",{});var LOe=s(t4);NEe=n(LOe,"STRONG",{});var vDt=s(NEe);rxr=r(vDt,"deberta"),vDt.forEach(t),txr=r(LOe," \u2014 "),DK=n(LOe,"A",{href:!0});var FDt=s(DK);axr=r(FDt,"TFDebertaForMaskedLM"),FDt.forEach(t),nxr=r(LOe," (DeBERTa model)"),LOe.forEach(t),sxr=i(ge),a4=n(ge,"LI",{});var yOe=s(a4);qEe=n(yOe,"STRONG",{});var TDt=s(qEe);lxr=r(TDt,"deberta-v2"),TDt.forEach(t),ixr=r(yOe," \u2014 "),GK=n(yOe,"A",{href:!0});var MDt=s(GK);dxr=r(MDt,"TFDebertaV2ForMaskedLM"),MDt.forEach(t),cxr=r(yOe," (DeBERTa-v2 model)"),yOe.forEach(t),fxr=i(ge),n4=n(ge,"LI",{});var xOe=s(n4);jEe=n(xOe,"STRONG",{});var EDt=s(jEe);mxr=r(EDt,"distilbert"),EDt.forEach(t),gxr=r(xOe," \u2014 "),OK=n(xOe,"A",{href:!0});var CDt=s(OK);hxr=r(CDt,"TFDistilBertForMaskedLM"),CDt.forEach(t),pxr=r(xOe," (DistilBERT model)"),xOe.forEach(t),_xr=i(ge),s4=n(ge,"LI",{});var $Oe=s(s4);DEe=n($Oe,"STRONG",{});var wDt=s(DEe);uxr=r(wDt,"electra"),wDt.forEach(t),bxr=r($Oe," \u2014 "),VK=n($Oe,"A",{href:!0});var ADt=s(VK);vxr=r(ADt,"TFElectraForMaskedLM"),ADt.forEach(t),Fxr=r($Oe," (ELECTRA model)"),$Oe.forEach(t),Txr=i(ge),l4=n(ge,"LI",{});var kOe=s(l4);GEe=n(kOe,"STRONG",{});var LDt=s(GEe);Mxr=r(LDt,"flaubert"),LDt.forEach(t),Exr=r(kOe," \u2014 "),XK=n(kOe,"A",{href:!0});var yDt=s(XK);Cxr=r(yDt,"TFFlaubertWithLMHeadModel"),yDt.forEach(t),wxr=r(kOe," (FlauBERT model)"),kOe.forEach(t),Axr=i(ge),i4=n(ge,"LI",{});var SOe=s(i4);OEe=n(SOe,"STRONG",{});var xDt=s(OEe);Lxr=r(xDt,"funnel"),xDt.forEach(t),yxr=r(SOe," \u2014 "),zK=n(SOe,"A",{href:!0});var $Dt=s(zK);xxr=r($Dt,"TFFunnelForMaskedLM"),$Dt.forEach(t),$xr=r(SOe," (Funnel Transformer model)"),SOe.forEach(t),kxr=i(ge),d4=n(ge,"LI",{});var ROe=s(d4);VEe=n(ROe,"STRONG",{});var kDt=s(VEe);Sxr=r(kDt,"layoutlm"),kDt.forEach(t),Rxr=r(ROe," \u2014 "),WK=n(ROe,"A",{href:!0});var SDt=s(WK);Pxr=r(SDt,"TFLayoutLMForMaskedLM"),SDt.forEach(t),Bxr=r(ROe," (LayoutLM model)"),ROe.forEach(t),Ixr=i(ge),c4=n(ge,"LI",{});var POe=s(c4);XEe=n(POe,"STRONG",{});var RDt=s(XEe);Nxr=r(RDt,"longformer"),RDt.forEach(t),qxr=r(POe," \u2014 "),QK=n(POe,"A",{href:!0});var PDt=s(QK);jxr=r(PDt,"TFLongformerForMaskedLM"),PDt.forEach(t),Dxr=r(POe," (Longformer model)"),POe.forEach(t),Gxr=i(ge),f4=n(ge,"LI",{});var BOe=s(f4);zEe=n(BOe,"STRONG",{});var BDt=s(zEe);Oxr=r(BDt,"mobilebert"),BDt.forEach(t),Vxr=r(BOe," \u2014 "),HK=n(BOe,"A",{href:!0});var IDt=s(HK);Xxr=r(IDt,"TFMobileBertForMaskedLM"),IDt.forEach(t),zxr=r(BOe," (MobileBERT model)"),BOe.forEach(t),Wxr=i(ge),m4=n(ge,"LI",{});var IOe=s(m4);WEe=n(IOe,"STRONG",{});var NDt=s(WEe);Qxr=r(NDt,"mpnet"),NDt.forEach(t),Hxr=r(IOe," \u2014 "),UK=n(IOe,"A",{href:!0});var qDt=s(UK);Uxr=r(qDt,"TFMPNetForMaskedLM"),qDt.forEach(t),Jxr=r(IOe," (MPNet model)"),IOe.forEach(t),Yxr=i(ge),g4=n(ge,"LI",{});var NOe=s(g4);QEe=n(NOe,"STRONG",{});var jDt=s(QEe);Kxr=r(jDt,"rembert"),jDt.forEach(t),Zxr=r(NOe," \u2014 "),JK=n(NOe,"A",{href:!0});var DDt=s(JK);e$r=r(DDt,"TFRemBertForMaskedLM"),DDt.forEach(t),o$r=r(NOe," (RemBERT model)"),NOe.forEach(t),r$r=i(ge),h4=n(ge,"LI",{});var qOe=s(h4);HEe=n(qOe,"STRONG",{});var GDt=s(HEe);t$r=r(GDt,"roberta"),GDt.forEach(t),a$r=r(qOe," \u2014 "),YK=n(qOe,"A",{href:!0});var ODt=s(YK);n$r=r(ODt,"TFRobertaForMaskedLM"),ODt.forEach(t),s$r=r(qOe," (RoBERTa model)"),qOe.forEach(t),l$r=i(ge),p4=n(ge,"LI",{});var jOe=s(p4);UEe=n(jOe,"STRONG",{});var VDt=s(UEe);i$r=r(VDt,"roformer"),VDt.forEach(t),d$r=r(jOe," \u2014 "),KK=n(jOe,"A",{href:!0});var XDt=s(KK);c$r=r(XDt,"TFRoFormerForMaskedLM"),XDt.forEach(t),f$r=r(jOe," (RoFormer model)"),jOe.forEach(t),m$r=i(ge),_4=n(ge,"LI",{});var DOe=s(_4);JEe=n(DOe,"STRONG",{});var zDt=s(JEe);g$r=r(zDt,"tapas"),zDt.forEach(t),h$r=r(DOe," \u2014 "),ZK=n(DOe,"A",{href:!0});var WDt=s(ZK);p$r=r(WDt,"TFTapasForMaskedLM"),WDt.forEach(t),_$r=r(DOe," (TAPAS model)"),DOe.forEach(t),u$r=i(ge),u4=n(ge,"LI",{});var GOe=s(u4);YEe=n(GOe,"STRONG",{});var QDt=s(YEe);b$r=r(QDt,"xlm"),QDt.forEach(t),v$r=r(GOe," \u2014 "),eZ=n(GOe,"A",{href:!0});var HDt=s(eZ);F$r=r(HDt,"TFXLMWithLMHeadModel"),HDt.forEach(t),T$r=r(GOe," (XLM model)"),GOe.forEach(t),M$r=i(ge),b4=n(ge,"LI",{});var OOe=s(b4);KEe=n(OOe,"STRONG",{});var UDt=s(KEe);E$r=r(UDt,"xlm-roberta"),UDt.forEach(t),C$r=r(OOe," \u2014 "),oZ=n(OOe,"A",{href:!0});var JDt=s(oZ);w$r=r(JDt,"TFXLMRobertaForMaskedLM"),JDt.forEach(t),A$r=r(OOe," (XLM-RoBERTa model)"),OOe.forEach(t),ge.forEach(t),L$r=i(Ql),T(v4.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),eHe=i(f),Sc=n(f,"H2",{class:!0});var cJe=s(Sc);F4=n(cJe,"A",{id:!0,class:!0,href:!0});var YDt=s(F4);ZEe=n(YDt,"SPAN",{});var KDt=s(ZEe);T(i$.$$.fragment,KDt),KDt.forEach(t),YDt.forEach(t),y$r=i(cJe),e4e=n(cJe,"SPAN",{});var ZDt=s(e4e);x$r=r(ZDt,"TFAutoModelForSeq2SeqLM"),ZDt.forEach(t),cJe.forEach(t),oHe=i(f),dr=n(f,"DIV",{class:!0});var Hl=s(dr);T(d$.$$.fragment,Hl),$$r=i(Hl),Rc=n(Hl,"P",{});var cne=s(Rc);k$r=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rZ=n(cne,"A",{href:!0});var eGt=s(rZ);S$r=r(eGt,"from_pretrained()"),eGt.forEach(t),R$r=r(cne," class method or the "),tZ=n(cne,"A",{href:!0});var oGt=s(tZ);P$r=r(oGt,"from_config()"),oGt.forEach(t),B$r=r(cne,` class
method.`),cne.forEach(t),I$r=i(Hl),c$=n(Hl,"P",{});var fJe=s(c$);N$r=r(fJe,"This class cannot be instantiated directly using "),o4e=n(fJe,"CODE",{});var rGt=s(o4e);q$r=r(rGt,"__init__()"),rGt.forEach(t),j$r=r(fJe," (throws an error)."),fJe.forEach(t),D$r=i(Hl),Gt=n(Hl,"DIV",{class:!0});var e7=s(Gt);T(f$.$$.fragment,e7),G$r=i(e7),r4e=n(e7,"P",{});var tGt=s(r4e);O$r=r(tGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tGt.forEach(t),V$r=i(e7),Pc=n(e7,"P",{});var fne=s(Pc);X$r=r(fne,`Note:
Loading a model from its configuration file does `),t4e=n(fne,"STRONG",{});var aGt=s(t4e);z$r=r(aGt,"not"),aGt.forEach(t),W$r=r(fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(fne,"A",{href:!0});var nGt=s(aZ);Q$r=r(nGt,"from_pretrained()"),nGt.forEach(t),H$r=r(fne," to load the model weights."),fne.forEach(t),U$r=i(e7),T(T4.$$.fragment,e7),e7.forEach(t),J$r=i(Hl),Nr=n(Hl,"DIV",{class:!0});var Ul=s(Nr);T(m$.$$.fragment,Ul),Y$r=i(Ul),a4e=n(Ul,"P",{});var sGt=s(a4e);K$r=r(sGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sGt.forEach(t),Z$r=i(Ul),bn=n(Ul,"P",{});var o7=s(bn);ekr=r(o7,"The model class to instantiate is selected based on the "),n4e=n(o7,"CODE",{});var lGt=s(n4e);okr=r(lGt,"model_type"),lGt.forEach(t),rkr=r(o7,` property of the config object (either
passed as an argument or loaded from `),s4e=n(o7,"CODE",{});var iGt=s(s4e);tkr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),akr=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l4e=n(o7,"CODE",{});var dGt=s(l4e);nkr=r(dGt,"pretrained_model_name_or_path"),dGt.forEach(t),skr=r(o7,":"),o7.forEach(t),lkr=i(Ul),ye=n(Ul,"UL",{});var Ie=s(ye);M4=n(Ie,"LI",{});var VOe=s(M4);i4e=n(VOe,"STRONG",{});var cGt=s(i4e);ikr=r(cGt,"bart"),cGt.forEach(t),dkr=r(VOe," \u2014 "),nZ=n(VOe,"A",{href:!0});var fGt=s(nZ);ckr=r(fGt,"TFBartForConditionalGeneration"),fGt.forEach(t),fkr=r(VOe," (BART model)"),VOe.forEach(t),mkr=i(Ie),E4=n(Ie,"LI",{});var XOe=s(E4);d4e=n(XOe,"STRONG",{});var mGt=s(d4e);gkr=r(mGt,"blenderbot"),mGt.forEach(t),hkr=r(XOe," \u2014 "),sZ=n(XOe,"A",{href:!0});var gGt=s(sZ);pkr=r(gGt,"TFBlenderbotForConditionalGeneration"),gGt.forEach(t),_kr=r(XOe," (Blenderbot model)"),XOe.forEach(t),ukr=i(Ie),C4=n(Ie,"LI",{});var zOe=s(C4);c4e=n(zOe,"STRONG",{});var hGt=s(c4e);bkr=r(hGt,"blenderbot-small"),hGt.forEach(t),vkr=r(zOe," \u2014 "),lZ=n(zOe,"A",{href:!0});var pGt=s(lZ);Fkr=r(pGt,"TFBlenderbotSmallForConditionalGeneration"),pGt.forEach(t),Tkr=r(zOe," (BlenderbotSmall model)"),zOe.forEach(t),Mkr=i(Ie),w4=n(Ie,"LI",{});var WOe=s(w4);f4e=n(WOe,"STRONG",{});var _Gt=s(f4e);Ekr=r(_Gt,"encoder-decoder"),_Gt.forEach(t),Ckr=r(WOe," \u2014 "),iZ=n(WOe,"A",{href:!0});var uGt=s(iZ);wkr=r(uGt,"TFEncoderDecoderModel"),uGt.forEach(t),Akr=r(WOe," (Encoder decoder model)"),WOe.forEach(t),Lkr=i(Ie),A4=n(Ie,"LI",{});var QOe=s(A4);m4e=n(QOe,"STRONG",{});var bGt=s(m4e);ykr=r(bGt,"led"),bGt.forEach(t),xkr=r(QOe," \u2014 "),dZ=n(QOe,"A",{href:!0});var vGt=s(dZ);$kr=r(vGt,"TFLEDForConditionalGeneration"),vGt.forEach(t),kkr=r(QOe," (LED model)"),QOe.forEach(t),Skr=i(Ie),L4=n(Ie,"LI",{});var HOe=s(L4);g4e=n(HOe,"STRONG",{});var FGt=s(g4e);Rkr=r(FGt,"marian"),FGt.forEach(t),Pkr=r(HOe," \u2014 "),cZ=n(HOe,"A",{href:!0});var TGt=s(cZ);Bkr=r(TGt,"TFMarianMTModel"),TGt.forEach(t),Ikr=r(HOe," (Marian model)"),HOe.forEach(t),Nkr=i(Ie),y4=n(Ie,"LI",{});var UOe=s(y4);h4e=n(UOe,"STRONG",{});var MGt=s(h4e);qkr=r(MGt,"mbart"),MGt.forEach(t),jkr=r(UOe," \u2014 "),fZ=n(UOe,"A",{href:!0});var EGt=s(fZ);Dkr=r(EGt,"TFMBartForConditionalGeneration"),EGt.forEach(t),Gkr=r(UOe," (mBART model)"),UOe.forEach(t),Okr=i(Ie),x4=n(Ie,"LI",{});var JOe=s(x4);p4e=n(JOe,"STRONG",{});var CGt=s(p4e);Vkr=r(CGt,"mt5"),CGt.forEach(t),Xkr=r(JOe," \u2014 "),mZ=n(JOe,"A",{href:!0});var wGt=s(mZ);zkr=r(wGt,"TFMT5ForConditionalGeneration"),wGt.forEach(t),Wkr=r(JOe," (MT5 model)"),JOe.forEach(t),Qkr=i(Ie),$4=n(Ie,"LI",{});var YOe=s($4);_4e=n(YOe,"STRONG",{});var AGt=s(_4e);Hkr=r(AGt,"pegasus"),AGt.forEach(t),Ukr=r(YOe," \u2014 "),gZ=n(YOe,"A",{href:!0});var LGt=s(gZ);Jkr=r(LGt,"TFPegasusForConditionalGeneration"),LGt.forEach(t),Ykr=r(YOe," (Pegasus model)"),YOe.forEach(t),Kkr=i(Ie),k4=n(Ie,"LI",{});var KOe=s(k4);u4e=n(KOe,"STRONG",{});var yGt=s(u4e);Zkr=r(yGt,"t5"),yGt.forEach(t),eSr=r(KOe," \u2014 "),hZ=n(KOe,"A",{href:!0});var xGt=s(hZ);oSr=r(xGt,"TFT5ForConditionalGeneration"),xGt.forEach(t),rSr=r(KOe," (T5 model)"),KOe.forEach(t),Ie.forEach(t),tSr=i(Ul),T(S4.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),rHe=i(f),Bc=n(f,"H2",{class:!0});var mJe=s(Bc);R4=n(mJe,"A",{id:!0,class:!0,href:!0});var $Gt=s(R4);b4e=n($Gt,"SPAN",{});var kGt=s(b4e);T(g$.$$.fragment,kGt),kGt.forEach(t),$Gt.forEach(t),aSr=i(mJe),v4e=n(mJe,"SPAN",{});var SGt=s(v4e);nSr=r(SGt,"TFAutoModelForSequenceClassification"),SGt.forEach(t),mJe.forEach(t),tHe=i(f),cr=n(f,"DIV",{class:!0});var Jl=s(cr);T(h$.$$.fragment,Jl),sSr=i(Jl),Ic=n(Jl,"P",{});var mne=s(Ic);lSr=r(mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pZ=n(mne,"A",{href:!0});var RGt=s(pZ);iSr=r(RGt,"from_pretrained()"),RGt.forEach(t),dSr=r(mne," class method or the "),_Z=n(mne,"A",{href:!0});var PGt=s(_Z);cSr=r(PGt,"from_config()"),PGt.forEach(t),fSr=r(mne,` class
method.`),mne.forEach(t),mSr=i(Jl),p$=n(Jl,"P",{});var gJe=s(p$);gSr=r(gJe,"This class cannot be instantiated directly using "),F4e=n(gJe,"CODE",{});var BGt=s(F4e);hSr=r(BGt,"__init__()"),BGt.forEach(t),pSr=r(gJe," (throws an error)."),gJe.forEach(t),_Sr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var r7=s(Ot);T(_$.$$.fragment,r7),uSr=i(r7),T4e=n(r7,"P",{});var IGt=s(T4e);bSr=r(IGt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IGt.forEach(t),vSr=i(r7),Nc=n(r7,"P",{});var gne=s(Nc);FSr=r(gne,`Note:
Loading a model from its configuration file does `),M4e=n(gne,"STRONG",{});var NGt=s(M4e);TSr=r(NGt,"not"),NGt.forEach(t),MSr=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(gne,"A",{href:!0});var qGt=s(uZ);ESr=r(qGt,"from_pretrained()"),qGt.forEach(t),CSr=r(gne," to load the model weights."),gne.forEach(t),wSr=i(r7),T(P4.$$.fragment,r7),r7.forEach(t),ASr=i(Jl),qr=n(Jl,"DIV",{class:!0});var Yl=s(qr);T(u$.$$.fragment,Yl),LSr=i(Yl),E4e=n(Yl,"P",{});var jGt=s(E4e);ySr=r(jGt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jGt.forEach(t),xSr=i(Yl),vn=n(Yl,"P",{});var t7=s(vn);$Sr=r(t7,"The model class to instantiate is selected based on the "),C4e=n(t7,"CODE",{});var DGt=s(C4e);kSr=r(DGt,"model_type"),DGt.forEach(t),SSr=r(t7,` property of the config object (either
passed as an argument or loaded from `),w4e=n(t7,"CODE",{});var GGt=s(w4e);RSr=r(GGt,"pretrained_model_name_or_path"),GGt.forEach(t),PSr=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=n(t7,"CODE",{});var OGt=s(A4e);BSr=r(OGt,"pretrained_model_name_or_path"),OGt.forEach(t),ISr=r(t7,":"),t7.forEach(t),NSr=i(Yl),te=n(Yl,"UL",{});var ne=s(te);B4=n(ne,"LI",{});var ZOe=s(B4);L4e=n(ZOe,"STRONG",{});var VGt=s(L4e);qSr=r(VGt,"albert"),VGt.forEach(t),jSr=r(ZOe," \u2014 "),bZ=n(ZOe,"A",{href:!0});var XGt=s(bZ);DSr=r(XGt,"TFAlbertForSequenceClassification"),XGt.forEach(t),GSr=r(ZOe," (ALBERT model)"),ZOe.forEach(t),OSr=i(ne),I4=n(ne,"LI",{});var eVe=s(I4);y4e=n(eVe,"STRONG",{});var zGt=s(y4e);VSr=r(zGt,"bert"),zGt.forEach(t),XSr=r(eVe," \u2014 "),vZ=n(eVe,"A",{href:!0});var WGt=s(vZ);zSr=r(WGt,"TFBertForSequenceClassification"),WGt.forEach(t),WSr=r(eVe," (BERT model)"),eVe.forEach(t),QSr=i(ne),N4=n(ne,"LI",{});var oVe=s(N4);x4e=n(oVe,"STRONG",{});var QGt=s(x4e);HSr=r(QGt,"camembert"),QGt.forEach(t),USr=r(oVe," \u2014 "),FZ=n(oVe,"A",{href:!0});var HGt=s(FZ);JSr=r(HGt,"TFCamembertForSequenceClassification"),HGt.forEach(t),YSr=r(oVe," (CamemBERT model)"),oVe.forEach(t),KSr=i(ne),q4=n(ne,"LI",{});var rVe=s(q4);$4e=n(rVe,"STRONG",{});var UGt=s($4e);ZSr=r(UGt,"convbert"),UGt.forEach(t),eRr=r(rVe," \u2014 "),TZ=n(rVe,"A",{href:!0});var JGt=s(TZ);oRr=r(JGt,"TFConvBertForSequenceClassification"),JGt.forEach(t),rRr=r(rVe," (ConvBERT model)"),rVe.forEach(t),tRr=i(ne),j4=n(ne,"LI",{});var tVe=s(j4);k4e=n(tVe,"STRONG",{});var YGt=s(k4e);aRr=r(YGt,"ctrl"),YGt.forEach(t),nRr=r(tVe," \u2014 "),MZ=n(tVe,"A",{href:!0});var KGt=s(MZ);sRr=r(KGt,"TFCTRLForSequenceClassification"),KGt.forEach(t),lRr=r(tVe," (CTRL model)"),tVe.forEach(t),iRr=i(ne),D4=n(ne,"LI",{});var aVe=s(D4);S4e=n(aVe,"STRONG",{});var ZGt=s(S4e);dRr=r(ZGt,"deberta"),ZGt.forEach(t),cRr=r(aVe," \u2014 "),EZ=n(aVe,"A",{href:!0});var eOt=s(EZ);fRr=r(eOt,"TFDebertaForSequenceClassification"),eOt.forEach(t),mRr=r(aVe," (DeBERTa model)"),aVe.forEach(t),gRr=i(ne),G4=n(ne,"LI",{});var nVe=s(G4);R4e=n(nVe,"STRONG",{});var oOt=s(R4e);hRr=r(oOt,"deberta-v2"),oOt.forEach(t),pRr=r(nVe," \u2014 "),CZ=n(nVe,"A",{href:!0});var rOt=s(CZ);_Rr=r(rOt,"TFDebertaV2ForSequenceClassification"),rOt.forEach(t),uRr=r(nVe," (DeBERTa-v2 model)"),nVe.forEach(t),bRr=i(ne),O4=n(ne,"LI",{});var sVe=s(O4);P4e=n(sVe,"STRONG",{});var tOt=s(P4e);vRr=r(tOt,"distilbert"),tOt.forEach(t),FRr=r(sVe," \u2014 "),wZ=n(sVe,"A",{href:!0});var aOt=s(wZ);TRr=r(aOt,"TFDistilBertForSequenceClassification"),aOt.forEach(t),MRr=r(sVe," (DistilBERT model)"),sVe.forEach(t),ERr=i(ne),V4=n(ne,"LI",{});var lVe=s(V4);B4e=n(lVe,"STRONG",{});var nOt=s(B4e);CRr=r(nOt,"electra"),nOt.forEach(t),wRr=r(lVe," \u2014 "),AZ=n(lVe,"A",{href:!0});var sOt=s(AZ);ARr=r(sOt,"TFElectraForSequenceClassification"),sOt.forEach(t),LRr=r(lVe," (ELECTRA model)"),lVe.forEach(t),yRr=i(ne),X4=n(ne,"LI",{});var iVe=s(X4);I4e=n(iVe,"STRONG",{});var lOt=s(I4e);xRr=r(lOt,"flaubert"),lOt.forEach(t),$Rr=r(iVe," \u2014 "),LZ=n(iVe,"A",{href:!0});var iOt=s(LZ);kRr=r(iOt,"TFFlaubertForSequenceClassification"),iOt.forEach(t),SRr=r(iVe," (FlauBERT model)"),iVe.forEach(t),RRr=i(ne),z4=n(ne,"LI",{});var dVe=s(z4);N4e=n(dVe,"STRONG",{});var dOt=s(N4e);PRr=r(dOt,"funnel"),dOt.forEach(t),BRr=r(dVe," \u2014 "),yZ=n(dVe,"A",{href:!0});var cOt=s(yZ);IRr=r(cOt,"TFFunnelForSequenceClassification"),cOt.forEach(t),NRr=r(dVe," (Funnel Transformer model)"),dVe.forEach(t),qRr=i(ne),W4=n(ne,"LI",{});var cVe=s(W4);q4e=n(cVe,"STRONG",{});var fOt=s(q4e);jRr=r(fOt,"gpt2"),fOt.forEach(t),DRr=r(cVe," \u2014 "),xZ=n(cVe,"A",{href:!0});var mOt=s(xZ);GRr=r(mOt,"TFGPT2ForSequenceClassification"),mOt.forEach(t),ORr=r(cVe," (OpenAI GPT-2 model)"),cVe.forEach(t),VRr=i(ne),Q4=n(ne,"LI",{});var fVe=s(Q4);j4e=n(fVe,"STRONG",{});var gOt=s(j4e);XRr=r(gOt,"gptj"),gOt.forEach(t),zRr=r(fVe," \u2014 "),$Z=n(fVe,"A",{href:!0});var hOt=s($Z);WRr=r(hOt,"TFGPTJForSequenceClassification"),hOt.forEach(t),QRr=r(fVe," (GPT-J model)"),fVe.forEach(t),HRr=i(ne),H4=n(ne,"LI",{});var mVe=s(H4);D4e=n(mVe,"STRONG",{});var pOt=s(D4e);URr=r(pOt,"layoutlm"),pOt.forEach(t),JRr=r(mVe," \u2014 "),kZ=n(mVe,"A",{href:!0});var _Ot=s(kZ);YRr=r(_Ot,"TFLayoutLMForSequenceClassification"),_Ot.forEach(t),KRr=r(mVe," (LayoutLM model)"),mVe.forEach(t),ZRr=i(ne),U4=n(ne,"LI",{});var gVe=s(U4);G4e=n(gVe,"STRONG",{});var uOt=s(G4e);ePr=r(uOt,"longformer"),uOt.forEach(t),oPr=r(gVe," \u2014 "),SZ=n(gVe,"A",{href:!0});var bOt=s(SZ);rPr=r(bOt,"TFLongformerForSequenceClassification"),bOt.forEach(t),tPr=r(gVe," (Longformer model)"),gVe.forEach(t),aPr=i(ne),J4=n(ne,"LI",{});var hVe=s(J4);O4e=n(hVe,"STRONG",{});var vOt=s(O4e);nPr=r(vOt,"mobilebert"),vOt.forEach(t),sPr=r(hVe," \u2014 "),RZ=n(hVe,"A",{href:!0});var FOt=s(RZ);lPr=r(FOt,"TFMobileBertForSequenceClassification"),FOt.forEach(t),iPr=r(hVe," (MobileBERT model)"),hVe.forEach(t),dPr=i(ne),Y4=n(ne,"LI",{});var pVe=s(Y4);V4e=n(pVe,"STRONG",{});var TOt=s(V4e);cPr=r(TOt,"mpnet"),TOt.forEach(t),fPr=r(pVe," \u2014 "),PZ=n(pVe,"A",{href:!0});var MOt=s(PZ);mPr=r(MOt,"TFMPNetForSequenceClassification"),MOt.forEach(t),gPr=r(pVe," (MPNet model)"),pVe.forEach(t),hPr=i(ne),K4=n(ne,"LI",{});var _Ve=s(K4);X4e=n(_Ve,"STRONG",{});var EOt=s(X4e);pPr=r(EOt,"openai-gpt"),EOt.forEach(t),_Pr=r(_Ve," \u2014 "),BZ=n(_Ve,"A",{href:!0});var COt=s(BZ);uPr=r(COt,"TFOpenAIGPTForSequenceClassification"),COt.forEach(t),bPr=r(_Ve," (OpenAI GPT model)"),_Ve.forEach(t),vPr=i(ne),Z4=n(ne,"LI",{});var uVe=s(Z4);z4e=n(uVe,"STRONG",{});var wOt=s(z4e);FPr=r(wOt,"rembert"),wOt.forEach(t),TPr=r(uVe," \u2014 "),IZ=n(uVe,"A",{href:!0});var AOt=s(IZ);MPr=r(AOt,"TFRemBertForSequenceClassification"),AOt.forEach(t),EPr=r(uVe," (RemBERT model)"),uVe.forEach(t),CPr=i(ne),eC=n(ne,"LI",{});var bVe=s(eC);W4e=n(bVe,"STRONG",{});var LOt=s(W4e);wPr=r(LOt,"roberta"),LOt.forEach(t),APr=r(bVe," \u2014 "),NZ=n(bVe,"A",{href:!0});var yOt=s(NZ);LPr=r(yOt,"TFRobertaForSequenceClassification"),yOt.forEach(t),yPr=r(bVe," (RoBERTa model)"),bVe.forEach(t),xPr=i(ne),oC=n(ne,"LI",{});var vVe=s(oC);Q4e=n(vVe,"STRONG",{});var xOt=s(Q4e);$Pr=r(xOt,"roformer"),xOt.forEach(t),kPr=r(vVe," \u2014 "),qZ=n(vVe,"A",{href:!0});var $Ot=s(qZ);SPr=r($Ot,"TFRoFormerForSequenceClassification"),$Ot.forEach(t),RPr=r(vVe," (RoFormer model)"),vVe.forEach(t),PPr=i(ne),rC=n(ne,"LI",{});var FVe=s(rC);H4e=n(FVe,"STRONG",{});var kOt=s(H4e);BPr=r(kOt,"tapas"),kOt.forEach(t),IPr=r(FVe," \u2014 "),jZ=n(FVe,"A",{href:!0});var SOt=s(jZ);NPr=r(SOt,"TFTapasForSequenceClassification"),SOt.forEach(t),qPr=r(FVe," (TAPAS model)"),FVe.forEach(t),jPr=i(ne),tC=n(ne,"LI",{});var TVe=s(tC);U4e=n(TVe,"STRONG",{});var ROt=s(U4e);DPr=r(ROt,"transfo-xl"),ROt.forEach(t),GPr=r(TVe," \u2014 "),DZ=n(TVe,"A",{href:!0});var POt=s(DZ);OPr=r(POt,"TFTransfoXLForSequenceClassification"),POt.forEach(t),VPr=r(TVe," (Transformer-XL model)"),TVe.forEach(t),XPr=i(ne),aC=n(ne,"LI",{});var MVe=s(aC);J4e=n(MVe,"STRONG",{});var BOt=s(J4e);zPr=r(BOt,"xlm"),BOt.forEach(t),WPr=r(MVe," \u2014 "),GZ=n(MVe,"A",{href:!0});var IOt=s(GZ);QPr=r(IOt,"TFXLMForSequenceClassification"),IOt.forEach(t),HPr=r(MVe," (XLM model)"),MVe.forEach(t),UPr=i(ne),nC=n(ne,"LI",{});var EVe=s(nC);Y4e=n(EVe,"STRONG",{});var NOt=s(Y4e);JPr=r(NOt,"xlm-roberta"),NOt.forEach(t),YPr=r(EVe," \u2014 "),OZ=n(EVe,"A",{href:!0});var qOt=s(OZ);KPr=r(qOt,"TFXLMRobertaForSequenceClassification"),qOt.forEach(t),ZPr=r(EVe," (XLM-RoBERTa model)"),EVe.forEach(t),eBr=i(ne),sC=n(ne,"LI",{});var CVe=s(sC);K4e=n(CVe,"STRONG",{});var jOt=s(K4e);oBr=r(jOt,"xlnet"),jOt.forEach(t),rBr=r(CVe," \u2014 "),VZ=n(CVe,"A",{href:!0});var DOt=s(VZ);tBr=r(DOt,"TFXLNetForSequenceClassification"),DOt.forEach(t),aBr=r(CVe," (XLNet model)"),CVe.forEach(t),ne.forEach(t),nBr=i(Yl),T(lC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),aHe=i(f),qc=n(f,"H2",{class:!0});var hJe=s(qc);iC=n(hJe,"A",{id:!0,class:!0,href:!0});var GOt=s(iC);Z4e=n(GOt,"SPAN",{});var OOt=s(Z4e);T(b$.$$.fragment,OOt),OOt.forEach(t),GOt.forEach(t),sBr=i(hJe),eCe=n(hJe,"SPAN",{});var VOt=s(eCe);lBr=r(VOt,"TFAutoModelForMultipleChoice"),VOt.forEach(t),hJe.forEach(t),nHe=i(f),fr=n(f,"DIV",{class:!0});var Kl=s(fr);T(v$.$$.fragment,Kl),iBr=i(Kl),jc=n(Kl,"P",{});var hne=s(jc);dBr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XZ=n(hne,"A",{href:!0});var XOt=s(XZ);cBr=r(XOt,"from_pretrained()"),XOt.forEach(t),fBr=r(hne," class method or the "),zZ=n(hne,"A",{href:!0});var zOt=s(zZ);mBr=r(zOt,"from_config()"),zOt.forEach(t),gBr=r(hne,` class
method.`),hne.forEach(t),hBr=i(Kl),F$=n(Kl,"P",{});var pJe=s(F$);pBr=r(pJe,"This class cannot be instantiated directly using "),oCe=n(pJe,"CODE",{});var WOt=s(oCe);_Br=r(WOt,"__init__()"),WOt.forEach(t),uBr=r(pJe," (throws an error)."),pJe.forEach(t),bBr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var a7=s(Vt);T(T$.$$.fragment,a7),vBr=i(a7),rCe=n(a7,"P",{});var QOt=s(rCe);FBr=r(QOt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QOt.forEach(t),TBr=i(a7),Dc=n(a7,"P",{});var pne=s(Dc);MBr=r(pne,`Note:
Loading a model from its configuration file does `),tCe=n(pne,"STRONG",{});var HOt=s(tCe);EBr=r(HOt,"not"),HOt.forEach(t),CBr=r(pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(pne,"A",{href:!0});var UOt=s(WZ);wBr=r(UOt,"from_pretrained()"),UOt.forEach(t),ABr=r(pne," to load the model weights."),pne.forEach(t),LBr=i(a7),T(dC.$$.fragment,a7),a7.forEach(t),yBr=i(Kl),jr=n(Kl,"DIV",{class:!0});var Zl=s(jr);T(M$.$$.fragment,Zl),xBr=i(Zl),aCe=n(Zl,"P",{});var JOt=s(aCe);$Br=r(JOt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JOt.forEach(t),kBr=i(Zl),Fn=n(Zl,"P",{});var n7=s(Fn);SBr=r(n7,"The model class to instantiate is selected based on the "),nCe=n(n7,"CODE",{});var YOt=s(nCe);RBr=r(YOt,"model_type"),YOt.forEach(t),PBr=r(n7,` property of the config object (either
passed as an argument or loaded from `),sCe=n(n7,"CODE",{});var KOt=s(sCe);BBr=r(KOt,"pretrained_model_name_or_path"),KOt.forEach(t),IBr=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(n7,"CODE",{});var ZOt=s(lCe);NBr=r(ZOt,"pretrained_model_name_or_path"),ZOt.forEach(t),qBr=r(n7,":"),n7.forEach(t),jBr=i(Zl),ve=n(Zl,"UL",{});var Te=s(ve);cC=n(Te,"LI",{});var wVe=s(cC);iCe=n(wVe,"STRONG",{});var eVt=s(iCe);DBr=r(eVt,"albert"),eVt.forEach(t),GBr=r(wVe," \u2014 "),QZ=n(wVe,"A",{href:!0});var oVt=s(QZ);OBr=r(oVt,"TFAlbertForMultipleChoice"),oVt.forEach(t),VBr=r(wVe," (ALBERT model)"),wVe.forEach(t),XBr=i(Te),fC=n(Te,"LI",{});var AVe=s(fC);dCe=n(AVe,"STRONG",{});var rVt=s(dCe);zBr=r(rVt,"bert"),rVt.forEach(t),WBr=r(AVe," \u2014 "),HZ=n(AVe,"A",{href:!0});var tVt=s(HZ);QBr=r(tVt,"TFBertForMultipleChoice"),tVt.forEach(t),HBr=r(AVe," (BERT model)"),AVe.forEach(t),UBr=i(Te),mC=n(Te,"LI",{});var LVe=s(mC);cCe=n(LVe,"STRONG",{});var aVt=s(cCe);JBr=r(aVt,"camembert"),aVt.forEach(t),YBr=r(LVe," \u2014 "),UZ=n(LVe,"A",{href:!0});var nVt=s(UZ);KBr=r(nVt,"TFCamembertForMultipleChoice"),nVt.forEach(t),ZBr=r(LVe," (CamemBERT model)"),LVe.forEach(t),eIr=i(Te),gC=n(Te,"LI",{});var yVe=s(gC);fCe=n(yVe,"STRONG",{});var sVt=s(fCe);oIr=r(sVt,"convbert"),sVt.forEach(t),rIr=r(yVe," \u2014 "),JZ=n(yVe,"A",{href:!0});var lVt=s(JZ);tIr=r(lVt,"TFConvBertForMultipleChoice"),lVt.forEach(t),aIr=r(yVe," (ConvBERT model)"),yVe.forEach(t),nIr=i(Te),hC=n(Te,"LI",{});var xVe=s(hC);mCe=n(xVe,"STRONG",{});var iVt=s(mCe);sIr=r(iVt,"distilbert"),iVt.forEach(t),lIr=r(xVe," \u2014 "),YZ=n(xVe,"A",{href:!0});var dVt=s(YZ);iIr=r(dVt,"TFDistilBertForMultipleChoice"),dVt.forEach(t),dIr=r(xVe," (DistilBERT model)"),xVe.forEach(t),cIr=i(Te),pC=n(Te,"LI",{});var $Ve=s(pC);gCe=n($Ve,"STRONG",{});var cVt=s(gCe);fIr=r(cVt,"electra"),cVt.forEach(t),mIr=r($Ve," \u2014 "),KZ=n($Ve,"A",{href:!0});var fVt=s(KZ);gIr=r(fVt,"TFElectraForMultipleChoice"),fVt.forEach(t),hIr=r($Ve," (ELECTRA model)"),$Ve.forEach(t),pIr=i(Te),_C=n(Te,"LI",{});var kVe=s(_C);hCe=n(kVe,"STRONG",{});var mVt=s(hCe);_Ir=r(mVt,"flaubert"),mVt.forEach(t),uIr=r(kVe," \u2014 "),ZZ=n(kVe,"A",{href:!0});var gVt=s(ZZ);bIr=r(gVt,"TFFlaubertForMultipleChoice"),gVt.forEach(t),vIr=r(kVe," (FlauBERT model)"),kVe.forEach(t),FIr=i(Te),uC=n(Te,"LI",{});var SVe=s(uC);pCe=n(SVe,"STRONG",{});var hVt=s(pCe);TIr=r(hVt,"funnel"),hVt.forEach(t),MIr=r(SVe," \u2014 "),eee=n(SVe,"A",{href:!0});var pVt=s(eee);EIr=r(pVt,"TFFunnelForMultipleChoice"),pVt.forEach(t),CIr=r(SVe," (Funnel Transformer model)"),SVe.forEach(t),wIr=i(Te),bC=n(Te,"LI",{});var RVe=s(bC);_Ce=n(RVe,"STRONG",{});var _Vt=s(_Ce);AIr=r(_Vt,"longformer"),_Vt.forEach(t),LIr=r(RVe," \u2014 "),oee=n(RVe,"A",{href:!0});var uVt=s(oee);yIr=r(uVt,"TFLongformerForMultipleChoice"),uVt.forEach(t),xIr=r(RVe," (Longformer model)"),RVe.forEach(t),$Ir=i(Te),vC=n(Te,"LI",{});var PVe=s(vC);uCe=n(PVe,"STRONG",{});var bVt=s(uCe);kIr=r(bVt,"mobilebert"),bVt.forEach(t),SIr=r(PVe," \u2014 "),ree=n(PVe,"A",{href:!0});var vVt=s(ree);RIr=r(vVt,"TFMobileBertForMultipleChoice"),vVt.forEach(t),PIr=r(PVe," (MobileBERT model)"),PVe.forEach(t),BIr=i(Te),FC=n(Te,"LI",{});var BVe=s(FC);bCe=n(BVe,"STRONG",{});var FVt=s(bCe);IIr=r(FVt,"mpnet"),FVt.forEach(t),NIr=r(BVe," \u2014 "),tee=n(BVe,"A",{href:!0});var TVt=s(tee);qIr=r(TVt,"TFMPNetForMultipleChoice"),TVt.forEach(t),jIr=r(BVe," (MPNet model)"),BVe.forEach(t),DIr=i(Te),TC=n(Te,"LI",{});var IVe=s(TC);vCe=n(IVe,"STRONG",{});var MVt=s(vCe);GIr=r(MVt,"rembert"),MVt.forEach(t),OIr=r(IVe," \u2014 "),aee=n(IVe,"A",{href:!0});var EVt=s(aee);VIr=r(EVt,"TFRemBertForMultipleChoice"),EVt.forEach(t),XIr=r(IVe," (RemBERT model)"),IVe.forEach(t),zIr=i(Te),MC=n(Te,"LI",{});var NVe=s(MC);FCe=n(NVe,"STRONG",{});var CVt=s(FCe);WIr=r(CVt,"roberta"),CVt.forEach(t),QIr=r(NVe," \u2014 "),nee=n(NVe,"A",{href:!0});var wVt=s(nee);HIr=r(wVt,"TFRobertaForMultipleChoice"),wVt.forEach(t),UIr=r(NVe," (RoBERTa model)"),NVe.forEach(t),JIr=i(Te),EC=n(Te,"LI",{});var qVe=s(EC);TCe=n(qVe,"STRONG",{});var AVt=s(TCe);YIr=r(AVt,"roformer"),AVt.forEach(t),KIr=r(qVe," \u2014 "),see=n(qVe,"A",{href:!0});var LVt=s(see);ZIr=r(LVt,"TFRoFormerForMultipleChoice"),LVt.forEach(t),eNr=r(qVe," (RoFormer model)"),qVe.forEach(t),oNr=i(Te),CC=n(Te,"LI",{});var jVe=s(CC);MCe=n(jVe,"STRONG",{});var yVt=s(MCe);rNr=r(yVt,"xlm"),yVt.forEach(t),tNr=r(jVe," \u2014 "),lee=n(jVe,"A",{href:!0});var xVt=s(lee);aNr=r(xVt,"TFXLMForMultipleChoice"),xVt.forEach(t),nNr=r(jVe," (XLM model)"),jVe.forEach(t),sNr=i(Te),wC=n(Te,"LI",{});var DVe=s(wC);ECe=n(DVe,"STRONG",{});var $Vt=s(ECe);lNr=r($Vt,"xlm-roberta"),$Vt.forEach(t),iNr=r(DVe," \u2014 "),iee=n(DVe,"A",{href:!0});var kVt=s(iee);dNr=r(kVt,"TFXLMRobertaForMultipleChoice"),kVt.forEach(t),cNr=r(DVe," (XLM-RoBERTa model)"),DVe.forEach(t),fNr=i(Te),AC=n(Te,"LI",{});var GVe=s(AC);CCe=n(GVe,"STRONG",{});var SVt=s(CCe);mNr=r(SVt,"xlnet"),SVt.forEach(t),gNr=r(GVe," \u2014 "),dee=n(GVe,"A",{href:!0});var RVt=s(dee);hNr=r(RVt,"TFXLNetForMultipleChoice"),RVt.forEach(t),pNr=r(GVe," (XLNet model)"),GVe.forEach(t),Te.forEach(t),_Nr=i(Zl),T(LC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),sHe=i(f),Gc=n(f,"H2",{class:!0});var _Je=s(Gc);yC=n(_Je,"A",{id:!0,class:!0,href:!0});var PVt=s(yC);wCe=n(PVt,"SPAN",{});var BVt=s(wCe);T(E$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),uNr=i(_Je),ACe=n(_Je,"SPAN",{});var IVt=s(ACe);bNr=r(IVt,"TFAutoModelForNextSentencePrediction"),IVt.forEach(t),_Je.forEach(t),lHe=i(f),mr=n(f,"DIV",{class:!0});var ei=s(mr);T(C$.$$.fragment,ei),vNr=i(ei),Oc=n(ei,"P",{});var _ne=s(Oc);FNr=r(_ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cee=n(_ne,"A",{href:!0});var NVt=s(cee);TNr=r(NVt,"from_pretrained()"),NVt.forEach(t),MNr=r(_ne," class method or the "),fee=n(_ne,"A",{href:!0});var qVt=s(fee);ENr=r(qVt,"from_config()"),qVt.forEach(t),CNr=r(_ne,` class
method.`),_ne.forEach(t),wNr=i(ei),w$=n(ei,"P",{});var uJe=s(w$);ANr=r(uJe,"This class cannot be instantiated directly using "),LCe=n(uJe,"CODE",{});var jVt=s(LCe);LNr=r(jVt,"__init__()"),jVt.forEach(t),yNr=r(uJe," (throws an error)."),uJe.forEach(t),xNr=i(ei),Xt=n(ei,"DIV",{class:!0});var s7=s(Xt);T(A$.$$.fragment,s7),$Nr=i(s7),yCe=n(s7,"P",{});var DVt=s(yCe);kNr=r(DVt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DVt.forEach(t),SNr=i(s7),Vc=n(s7,"P",{});var une=s(Vc);RNr=r(une,`Note:
Loading a model from its configuration file does `),xCe=n(une,"STRONG",{});var GVt=s(xCe);PNr=r(GVt,"not"),GVt.forEach(t),BNr=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(une,"A",{href:!0});var OVt=s(mee);INr=r(OVt,"from_pretrained()"),OVt.forEach(t),NNr=r(une," to load the model weights."),une.forEach(t),qNr=i(s7),T(xC.$$.fragment,s7),s7.forEach(t),jNr=i(ei),Dr=n(ei,"DIV",{class:!0});var oi=s(Dr);T(L$.$$.fragment,oi),DNr=i(oi),$Ce=n(oi,"P",{});var VVt=s($Ce);GNr=r(VVt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VVt.forEach(t),ONr=i(oi),Tn=n(oi,"P",{});var l7=s(Tn);VNr=r(l7,"The model class to instantiate is selected based on the "),kCe=n(l7,"CODE",{});var XVt=s(kCe);XNr=r(XVt,"model_type"),XVt.forEach(t),zNr=r(l7,` property of the config object (either
passed as an argument or loaded from `),SCe=n(l7,"CODE",{});var zVt=s(SCe);WNr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),QNr=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(l7,"CODE",{});var WVt=s(RCe);HNr=r(WVt,"pretrained_model_name_or_path"),WVt.forEach(t),UNr=r(l7,":"),l7.forEach(t),JNr=i(oi),y$=n(oi,"UL",{});var bJe=s(y$);$C=n(bJe,"LI",{});var OVe=s($C);PCe=n(OVe,"STRONG",{});var QVt=s(PCe);YNr=r(QVt,"bert"),QVt.forEach(t),KNr=r(OVe," \u2014 "),gee=n(OVe,"A",{href:!0});var HVt=s(gee);ZNr=r(HVt,"TFBertForNextSentencePrediction"),HVt.forEach(t),eqr=r(OVe," (BERT model)"),OVe.forEach(t),oqr=i(bJe),kC=n(bJe,"LI",{});var VVe=s(kC);BCe=n(VVe,"STRONG",{});var UVt=s(BCe);rqr=r(UVt,"mobilebert"),UVt.forEach(t),tqr=r(VVe," \u2014 "),hee=n(VVe,"A",{href:!0});var JVt=s(hee);aqr=r(JVt,"TFMobileBertForNextSentencePrediction"),JVt.forEach(t),nqr=r(VVe," (MobileBERT model)"),VVe.forEach(t),bJe.forEach(t),sqr=i(oi),T(SC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),iHe=i(f),Xc=n(f,"H2",{class:!0});var vJe=s(Xc);RC=n(vJe,"A",{id:!0,class:!0,href:!0});var YVt=s(RC);ICe=n(YVt,"SPAN",{});var KVt=s(ICe);T(x$.$$.fragment,KVt),KVt.forEach(t),YVt.forEach(t),lqr=i(vJe),NCe=n(vJe,"SPAN",{});var ZVt=s(NCe);iqr=r(ZVt,"TFAutoModelForTableQuestionAnswering"),ZVt.forEach(t),vJe.forEach(t),dHe=i(f),gr=n(f,"DIV",{class:!0});var ri=s(gr);T($$.$$.fragment,ri),dqr=i(ri),zc=n(ri,"P",{});var bne=s(zc);cqr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pee=n(bne,"A",{href:!0});var eXt=s(pee);fqr=r(eXt,"from_pretrained()"),eXt.forEach(t),mqr=r(bne," class method or the "),_ee=n(bne,"A",{href:!0});var oXt=s(_ee);gqr=r(oXt,"from_config()"),oXt.forEach(t),hqr=r(bne,` class
method.`),bne.forEach(t),pqr=i(ri),k$=n(ri,"P",{});var FJe=s(k$);_qr=r(FJe,"This class cannot be instantiated directly using "),qCe=n(FJe,"CODE",{});var rXt=s(qCe);uqr=r(rXt,"__init__()"),rXt.forEach(t),bqr=r(FJe," (throws an error)."),FJe.forEach(t),vqr=i(ri),zt=n(ri,"DIV",{class:!0});var i7=s(zt);T(S$.$$.fragment,i7),Fqr=i(i7),jCe=n(i7,"P",{});var tXt=s(jCe);Tqr=r(tXt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tXt.forEach(t),Mqr=i(i7),Wc=n(i7,"P",{});var vne=s(Wc);Eqr=r(vne,`Note:
Loading a model from its configuration file does `),DCe=n(vne,"STRONG",{});var aXt=s(DCe);Cqr=r(aXt,"not"),aXt.forEach(t),wqr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uee=n(vne,"A",{href:!0});var nXt=s(uee);Aqr=r(nXt,"from_pretrained()"),nXt.forEach(t),Lqr=r(vne," to load the model weights."),vne.forEach(t),yqr=i(i7),T(PC.$$.fragment,i7),i7.forEach(t),xqr=i(ri),Gr=n(ri,"DIV",{class:!0});var ti=s(Gr);T(R$.$$.fragment,ti),$qr=i(ti),GCe=n(ti,"P",{});var sXt=s(GCe);kqr=r(sXt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sXt.forEach(t),Sqr=i(ti),Mn=n(ti,"P",{});var d7=s(Mn);Rqr=r(d7,"The model class to instantiate is selected based on the "),OCe=n(d7,"CODE",{});var lXt=s(OCe);Pqr=r(lXt,"model_type"),lXt.forEach(t),Bqr=r(d7,` property of the config object (either
passed as an argument or loaded from `),VCe=n(d7,"CODE",{});var iXt=s(VCe);Iqr=r(iXt,"pretrained_model_name_or_path"),iXt.forEach(t),Nqr=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(d7,"CODE",{});var dXt=s(XCe);qqr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),jqr=r(d7,":"),d7.forEach(t),Dqr=i(ti),zCe=n(ti,"UL",{});var cXt=s(zCe);BC=n(cXt,"LI",{});var XVe=s(BC);WCe=n(XVe,"STRONG",{});var fXt=s(WCe);Gqr=r(fXt,"tapas"),fXt.forEach(t),Oqr=r(XVe," \u2014 "),bee=n(XVe,"A",{href:!0});var mXt=s(bee);Vqr=r(mXt,"TFTapasForQuestionAnswering"),mXt.forEach(t),Xqr=r(XVe," (TAPAS model)"),XVe.forEach(t),cXt.forEach(t),zqr=i(ti),T(IC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),cHe=i(f),Qc=n(f,"H2",{class:!0});var TJe=s(Qc);NC=n(TJe,"A",{id:!0,class:!0,href:!0});var gXt=s(NC);QCe=n(gXt,"SPAN",{});var hXt=s(QCe);T(P$.$$.fragment,hXt),hXt.forEach(t),gXt.forEach(t),Wqr=i(TJe),HCe=n(TJe,"SPAN",{});var pXt=s(HCe);Qqr=r(pXt,"TFAutoModelForTokenClassification"),pXt.forEach(t),TJe.forEach(t),fHe=i(f),hr=n(f,"DIV",{class:!0});var ai=s(hr);T(B$.$$.fragment,ai),Hqr=i(ai),Hc=n(ai,"P",{});var Fne=s(Hc);Uqr=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vee=n(Fne,"A",{href:!0});var _Xt=s(vee);Jqr=r(_Xt,"from_pretrained()"),_Xt.forEach(t),Yqr=r(Fne," class method or the "),Fee=n(Fne,"A",{href:!0});var uXt=s(Fee);Kqr=r(uXt,"from_config()"),uXt.forEach(t),Zqr=r(Fne,` class
method.`),Fne.forEach(t),ejr=i(ai),I$=n(ai,"P",{});var MJe=s(I$);ojr=r(MJe,"This class cannot be instantiated directly using "),UCe=n(MJe,"CODE",{});var bXt=s(UCe);rjr=r(bXt,"__init__()"),bXt.forEach(t),tjr=r(MJe," (throws an error)."),MJe.forEach(t),ajr=i(ai),Wt=n(ai,"DIV",{class:!0});var c7=s(Wt);T(N$.$$.fragment,c7),njr=i(c7),JCe=n(c7,"P",{});var vXt=s(JCe);sjr=r(vXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),vXt.forEach(t),ljr=i(c7),Uc=n(c7,"P",{});var Tne=s(Uc);ijr=r(Tne,`Note:
Loading a model from its configuration file does `),YCe=n(Tne,"STRONG",{});var FXt=s(YCe);djr=r(FXt,"not"),FXt.forEach(t),cjr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(Tne,"A",{href:!0});var TXt=s(Tee);fjr=r(TXt,"from_pretrained()"),TXt.forEach(t),mjr=r(Tne," to load the model weights."),Tne.forEach(t),gjr=i(c7),T(qC.$$.fragment,c7),c7.forEach(t),hjr=i(ai),Or=n(ai,"DIV",{class:!0});var ni=s(Or);T(q$.$$.fragment,ni),pjr=i(ni),KCe=n(ni,"P",{});var MXt=s(KCe);_jr=r(MXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MXt.forEach(t),ujr=i(ni),En=n(ni,"P",{});var f7=s(En);bjr=r(f7,"The model class to instantiate is selected based on the "),ZCe=n(f7,"CODE",{});var EXt=s(ZCe);vjr=r(EXt,"model_type"),EXt.forEach(t),Fjr=r(f7,` property of the config object (either
passed as an argument or loaded from `),e3e=n(f7,"CODE",{});var CXt=s(e3e);Tjr=r(CXt,"pretrained_model_name_or_path"),CXt.forEach(t),Mjr=r(f7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o3e=n(f7,"CODE",{});var wXt=s(o3e);Ejr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),Cjr=r(f7,":"),f7.forEach(t),wjr=i(ni),de=n(ni,"UL",{});var he=s(de);jC=n(he,"LI",{});var zVe=s(jC);r3e=n(zVe,"STRONG",{});var AXt=s(r3e);Ajr=r(AXt,"albert"),AXt.forEach(t),Ljr=r(zVe," \u2014 "),Mee=n(zVe,"A",{href:!0});var LXt=s(Mee);yjr=r(LXt,"TFAlbertForTokenClassification"),LXt.forEach(t),xjr=r(zVe," (ALBERT model)"),zVe.forEach(t),$jr=i(he),DC=n(he,"LI",{});var WVe=s(DC);t3e=n(WVe,"STRONG",{});var yXt=s(t3e);kjr=r(yXt,"bert"),yXt.forEach(t),Sjr=r(WVe," \u2014 "),Eee=n(WVe,"A",{href:!0});var xXt=s(Eee);Rjr=r(xXt,"TFBertForTokenClassification"),xXt.forEach(t),Pjr=r(WVe," (BERT model)"),WVe.forEach(t),Bjr=i(he),GC=n(he,"LI",{});var QVe=s(GC);a3e=n(QVe,"STRONG",{});var $Xt=s(a3e);Ijr=r($Xt,"camembert"),$Xt.forEach(t),Njr=r(QVe," \u2014 "),Cee=n(QVe,"A",{href:!0});var kXt=s(Cee);qjr=r(kXt,"TFCamembertForTokenClassification"),kXt.forEach(t),jjr=r(QVe," (CamemBERT model)"),QVe.forEach(t),Djr=i(he),OC=n(he,"LI",{});var HVe=s(OC);n3e=n(HVe,"STRONG",{});var SXt=s(n3e);Gjr=r(SXt,"convbert"),SXt.forEach(t),Ojr=r(HVe," \u2014 "),wee=n(HVe,"A",{href:!0});var RXt=s(wee);Vjr=r(RXt,"TFConvBertForTokenClassification"),RXt.forEach(t),Xjr=r(HVe," (ConvBERT model)"),HVe.forEach(t),zjr=i(he),VC=n(he,"LI",{});var UVe=s(VC);s3e=n(UVe,"STRONG",{});var PXt=s(s3e);Wjr=r(PXt,"deberta"),PXt.forEach(t),Qjr=r(UVe," \u2014 "),Aee=n(UVe,"A",{href:!0});var BXt=s(Aee);Hjr=r(BXt,"TFDebertaForTokenClassification"),BXt.forEach(t),Ujr=r(UVe," (DeBERTa model)"),UVe.forEach(t),Jjr=i(he),XC=n(he,"LI",{});var JVe=s(XC);l3e=n(JVe,"STRONG",{});var IXt=s(l3e);Yjr=r(IXt,"deberta-v2"),IXt.forEach(t),Kjr=r(JVe," \u2014 "),Lee=n(JVe,"A",{href:!0});var NXt=s(Lee);Zjr=r(NXt,"TFDebertaV2ForTokenClassification"),NXt.forEach(t),eDr=r(JVe," (DeBERTa-v2 model)"),JVe.forEach(t),oDr=i(he),zC=n(he,"LI",{});var YVe=s(zC);i3e=n(YVe,"STRONG",{});var qXt=s(i3e);rDr=r(qXt,"distilbert"),qXt.forEach(t),tDr=r(YVe," \u2014 "),yee=n(YVe,"A",{href:!0});var jXt=s(yee);aDr=r(jXt,"TFDistilBertForTokenClassification"),jXt.forEach(t),nDr=r(YVe," (DistilBERT model)"),YVe.forEach(t),sDr=i(he),WC=n(he,"LI",{});var KVe=s(WC);d3e=n(KVe,"STRONG",{});var DXt=s(d3e);lDr=r(DXt,"electra"),DXt.forEach(t),iDr=r(KVe," \u2014 "),xee=n(KVe,"A",{href:!0});var GXt=s(xee);dDr=r(GXt,"TFElectraForTokenClassification"),GXt.forEach(t),cDr=r(KVe," (ELECTRA model)"),KVe.forEach(t),fDr=i(he),QC=n(he,"LI",{});var ZVe=s(QC);c3e=n(ZVe,"STRONG",{});var OXt=s(c3e);mDr=r(OXt,"flaubert"),OXt.forEach(t),gDr=r(ZVe," \u2014 "),$ee=n(ZVe,"A",{href:!0});var VXt=s($ee);hDr=r(VXt,"TFFlaubertForTokenClassification"),VXt.forEach(t),pDr=r(ZVe," (FlauBERT model)"),ZVe.forEach(t),_Dr=i(he),HC=n(he,"LI",{});var eXe=s(HC);f3e=n(eXe,"STRONG",{});var XXt=s(f3e);uDr=r(XXt,"funnel"),XXt.forEach(t),bDr=r(eXe," \u2014 "),kee=n(eXe,"A",{href:!0});var zXt=s(kee);vDr=r(zXt,"TFFunnelForTokenClassification"),zXt.forEach(t),FDr=r(eXe," (Funnel Transformer model)"),eXe.forEach(t),TDr=i(he),UC=n(he,"LI",{});var oXe=s(UC);m3e=n(oXe,"STRONG",{});var WXt=s(m3e);MDr=r(WXt,"layoutlm"),WXt.forEach(t),EDr=r(oXe," \u2014 "),See=n(oXe,"A",{href:!0});var QXt=s(See);CDr=r(QXt,"TFLayoutLMForTokenClassification"),QXt.forEach(t),wDr=r(oXe," (LayoutLM model)"),oXe.forEach(t),ADr=i(he),JC=n(he,"LI",{});var rXe=s(JC);g3e=n(rXe,"STRONG",{});var HXt=s(g3e);LDr=r(HXt,"longformer"),HXt.forEach(t),yDr=r(rXe," \u2014 "),Ree=n(rXe,"A",{href:!0});var UXt=s(Ree);xDr=r(UXt,"TFLongformerForTokenClassification"),UXt.forEach(t),$Dr=r(rXe," (Longformer model)"),rXe.forEach(t),kDr=i(he),YC=n(he,"LI",{});var tXe=s(YC);h3e=n(tXe,"STRONG",{});var JXt=s(h3e);SDr=r(JXt,"mobilebert"),JXt.forEach(t),RDr=r(tXe," \u2014 "),Pee=n(tXe,"A",{href:!0});var YXt=s(Pee);PDr=r(YXt,"TFMobileBertForTokenClassification"),YXt.forEach(t),BDr=r(tXe," (MobileBERT model)"),tXe.forEach(t),IDr=i(he),KC=n(he,"LI",{});var aXe=s(KC);p3e=n(aXe,"STRONG",{});var KXt=s(p3e);NDr=r(KXt,"mpnet"),KXt.forEach(t),qDr=r(aXe," \u2014 "),Bee=n(aXe,"A",{href:!0});var ZXt=s(Bee);jDr=r(ZXt,"TFMPNetForTokenClassification"),ZXt.forEach(t),DDr=r(aXe," (MPNet model)"),aXe.forEach(t),GDr=i(he),ZC=n(he,"LI",{});var nXe=s(ZC);_3e=n(nXe,"STRONG",{});var ezt=s(_3e);ODr=r(ezt,"rembert"),ezt.forEach(t),VDr=r(nXe," \u2014 "),Iee=n(nXe,"A",{href:!0});var ozt=s(Iee);XDr=r(ozt,"TFRemBertForTokenClassification"),ozt.forEach(t),zDr=r(nXe," (RemBERT model)"),nXe.forEach(t),WDr=i(he),e3=n(he,"LI",{});var sXe=s(e3);u3e=n(sXe,"STRONG",{});var rzt=s(u3e);QDr=r(rzt,"roberta"),rzt.forEach(t),HDr=r(sXe," \u2014 "),Nee=n(sXe,"A",{href:!0});var tzt=s(Nee);UDr=r(tzt,"TFRobertaForTokenClassification"),tzt.forEach(t),JDr=r(sXe," (RoBERTa model)"),sXe.forEach(t),YDr=i(he),o3=n(he,"LI",{});var lXe=s(o3);b3e=n(lXe,"STRONG",{});var azt=s(b3e);KDr=r(azt,"roformer"),azt.forEach(t),ZDr=r(lXe," \u2014 "),qee=n(lXe,"A",{href:!0});var nzt=s(qee);eGr=r(nzt,"TFRoFormerForTokenClassification"),nzt.forEach(t),oGr=r(lXe," (RoFormer model)"),lXe.forEach(t),rGr=i(he),r3=n(he,"LI",{});var iXe=s(r3);v3e=n(iXe,"STRONG",{});var szt=s(v3e);tGr=r(szt,"xlm"),szt.forEach(t),aGr=r(iXe," \u2014 "),jee=n(iXe,"A",{href:!0});var lzt=s(jee);nGr=r(lzt,"TFXLMForTokenClassification"),lzt.forEach(t),sGr=r(iXe," (XLM model)"),iXe.forEach(t),lGr=i(he),t3=n(he,"LI",{});var dXe=s(t3);F3e=n(dXe,"STRONG",{});var izt=s(F3e);iGr=r(izt,"xlm-roberta"),izt.forEach(t),dGr=r(dXe," \u2014 "),Dee=n(dXe,"A",{href:!0});var dzt=s(Dee);cGr=r(dzt,"TFXLMRobertaForTokenClassification"),dzt.forEach(t),fGr=r(dXe," (XLM-RoBERTa model)"),dXe.forEach(t),mGr=i(he),a3=n(he,"LI",{});var cXe=s(a3);T3e=n(cXe,"STRONG",{});var czt=s(T3e);gGr=r(czt,"xlnet"),czt.forEach(t),hGr=r(cXe," \u2014 "),Gee=n(cXe,"A",{href:!0});var fzt=s(Gee);pGr=r(fzt,"TFXLNetForTokenClassification"),fzt.forEach(t),_Gr=r(cXe," (XLNet model)"),cXe.forEach(t),he.forEach(t),uGr=i(ni),T(n3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),mHe=i(f),Jc=n(f,"H2",{class:!0});var EJe=s(Jc);s3=n(EJe,"A",{id:!0,class:!0,href:!0});var mzt=s(s3);M3e=n(mzt,"SPAN",{});var gzt=s(M3e);T(j$.$$.fragment,gzt),gzt.forEach(t),mzt.forEach(t),bGr=i(EJe),E3e=n(EJe,"SPAN",{});var hzt=s(E3e);vGr=r(hzt,"TFAutoModelForQuestionAnswering"),hzt.forEach(t),EJe.forEach(t),gHe=i(f),pr=n(f,"DIV",{class:!0});var si=s(pr);T(D$.$$.fragment,si),FGr=i(si),Yc=n(si,"P",{});var Mne=s(Yc);TGr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oee=n(Mne,"A",{href:!0});var pzt=s(Oee);MGr=r(pzt,"from_pretrained()"),pzt.forEach(t),EGr=r(Mne," class method or the "),Vee=n(Mne,"A",{href:!0});var _zt=s(Vee);CGr=r(_zt,"from_config()"),_zt.forEach(t),wGr=r(Mne,` class
method.`),Mne.forEach(t),AGr=i(si),G$=n(si,"P",{});var CJe=s(G$);LGr=r(CJe,"This class cannot be instantiated directly using "),C3e=n(CJe,"CODE",{});var uzt=s(C3e);yGr=r(uzt,"__init__()"),uzt.forEach(t),xGr=r(CJe," (throws an error)."),CJe.forEach(t),$Gr=i(si),Qt=n(si,"DIV",{class:!0});var m7=s(Qt);T(O$.$$.fragment,m7),kGr=i(m7),w3e=n(m7,"P",{});var bzt=s(w3e);SGr=r(bzt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bzt.forEach(t),RGr=i(m7),Kc=n(m7,"P",{});var Ene=s(Kc);PGr=r(Ene,`Note:
Loading a model from its configuration file does `),A3e=n(Ene,"STRONG",{});var vzt=s(A3e);BGr=r(vzt,"not"),vzt.forEach(t),IGr=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(Ene,"A",{href:!0});var Fzt=s(Xee);NGr=r(Fzt,"from_pretrained()"),Fzt.forEach(t),qGr=r(Ene," to load the model weights."),Ene.forEach(t),jGr=i(m7),T(l3.$$.fragment,m7),m7.forEach(t),DGr=i(si),Vr=n(si,"DIV",{class:!0});var li=s(Vr);T(V$.$$.fragment,li),GGr=i(li),L3e=n(li,"P",{});var Tzt=s(L3e);OGr=r(Tzt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tzt.forEach(t),VGr=i(li),Cn=n(li,"P",{});var g7=s(Cn);XGr=r(g7,"The model class to instantiate is selected based on the "),y3e=n(g7,"CODE",{});var Mzt=s(y3e);zGr=r(Mzt,"model_type"),Mzt.forEach(t),WGr=r(g7,` property of the config object (either
passed as an argument or loaded from `),x3e=n(g7,"CODE",{});var Ezt=s(x3e);QGr=r(Ezt,"pretrained_model_name_or_path"),Ezt.forEach(t),HGr=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(g7,"CODE",{});var Czt=s($3e);UGr=r(Czt,"pretrained_model_name_or_path"),Czt.forEach(t),JGr=r(g7,":"),g7.forEach(t),YGr=i(li),ce=n(li,"UL",{});var pe=s(ce);i3=n(pe,"LI",{});var fXe=s(i3);k3e=n(fXe,"STRONG",{});var wzt=s(k3e);KGr=r(wzt,"albert"),wzt.forEach(t),ZGr=r(fXe," \u2014 "),zee=n(fXe,"A",{href:!0});var Azt=s(zee);eOr=r(Azt,"TFAlbertForQuestionAnswering"),Azt.forEach(t),oOr=r(fXe," (ALBERT model)"),fXe.forEach(t),rOr=i(pe),d3=n(pe,"LI",{});var mXe=s(d3);S3e=n(mXe,"STRONG",{});var Lzt=s(S3e);tOr=r(Lzt,"bert"),Lzt.forEach(t),aOr=r(mXe," \u2014 "),Wee=n(mXe,"A",{href:!0});var yzt=s(Wee);nOr=r(yzt,"TFBertForQuestionAnswering"),yzt.forEach(t),sOr=r(mXe," (BERT model)"),mXe.forEach(t),lOr=i(pe),c3=n(pe,"LI",{});var gXe=s(c3);R3e=n(gXe,"STRONG",{});var xzt=s(R3e);iOr=r(xzt,"camembert"),xzt.forEach(t),dOr=r(gXe," \u2014 "),Qee=n(gXe,"A",{href:!0});var $zt=s(Qee);cOr=r($zt,"TFCamembertForQuestionAnswering"),$zt.forEach(t),fOr=r(gXe," (CamemBERT model)"),gXe.forEach(t),mOr=i(pe),f3=n(pe,"LI",{});var hXe=s(f3);P3e=n(hXe,"STRONG",{});var kzt=s(P3e);gOr=r(kzt,"convbert"),kzt.forEach(t),hOr=r(hXe," \u2014 "),Hee=n(hXe,"A",{href:!0});var Szt=s(Hee);pOr=r(Szt,"TFConvBertForQuestionAnswering"),Szt.forEach(t),_Or=r(hXe," (ConvBERT model)"),hXe.forEach(t),uOr=i(pe),m3=n(pe,"LI",{});var pXe=s(m3);B3e=n(pXe,"STRONG",{});var Rzt=s(B3e);bOr=r(Rzt,"deberta"),Rzt.forEach(t),vOr=r(pXe," \u2014 "),Uee=n(pXe,"A",{href:!0});var Pzt=s(Uee);FOr=r(Pzt,"TFDebertaForQuestionAnswering"),Pzt.forEach(t),TOr=r(pXe," (DeBERTa model)"),pXe.forEach(t),MOr=i(pe),g3=n(pe,"LI",{});var _Xe=s(g3);I3e=n(_Xe,"STRONG",{});var Bzt=s(I3e);EOr=r(Bzt,"deberta-v2"),Bzt.forEach(t),COr=r(_Xe," \u2014 "),Jee=n(_Xe,"A",{href:!0});var Izt=s(Jee);wOr=r(Izt,"TFDebertaV2ForQuestionAnswering"),Izt.forEach(t),AOr=r(_Xe," (DeBERTa-v2 model)"),_Xe.forEach(t),LOr=i(pe),h3=n(pe,"LI",{});var uXe=s(h3);N3e=n(uXe,"STRONG",{});var Nzt=s(N3e);yOr=r(Nzt,"distilbert"),Nzt.forEach(t),xOr=r(uXe," \u2014 "),Yee=n(uXe,"A",{href:!0});var qzt=s(Yee);$Or=r(qzt,"TFDistilBertForQuestionAnswering"),qzt.forEach(t),kOr=r(uXe," (DistilBERT model)"),uXe.forEach(t),SOr=i(pe),p3=n(pe,"LI",{});var bXe=s(p3);q3e=n(bXe,"STRONG",{});var jzt=s(q3e);ROr=r(jzt,"electra"),jzt.forEach(t),POr=r(bXe," \u2014 "),Kee=n(bXe,"A",{href:!0});var Dzt=s(Kee);BOr=r(Dzt,"TFElectraForQuestionAnswering"),Dzt.forEach(t),IOr=r(bXe," (ELECTRA model)"),bXe.forEach(t),NOr=i(pe),_3=n(pe,"LI",{});var vXe=s(_3);j3e=n(vXe,"STRONG",{});var Gzt=s(j3e);qOr=r(Gzt,"flaubert"),Gzt.forEach(t),jOr=r(vXe," \u2014 "),Zee=n(vXe,"A",{href:!0});var Ozt=s(Zee);DOr=r(Ozt,"TFFlaubertForQuestionAnsweringSimple"),Ozt.forEach(t),GOr=r(vXe," (FlauBERT model)"),vXe.forEach(t),OOr=i(pe),u3=n(pe,"LI",{});var FXe=s(u3);D3e=n(FXe,"STRONG",{});var Vzt=s(D3e);VOr=r(Vzt,"funnel"),Vzt.forEach(t),XOr=r(FXe," \u2014 "),eoe=n(FXe,"A",{href:!0});var Xzt=s(eoe);zOr=r(Xzt,"TFFunnelForQuestionAnswering"),Xzt.forEach(t),WOr=r(FXe," (Funnel Transformer model)"),FXe.forEach(t),QOr=i(pe),b3=n(pe,"LI",{});var TXe=s(b3);G3e=n(TXe,"STRONG",{});var zzt=s(G3e);HOr=r(zzt,"gptj"),zzt.forEach(t),UOr=r(TXe," \u2014 "),ooe=n(TXe,"A",{href:!0});var Wzt=s(ooe);JOr=r(Wzt,"TFGPTJForQuestionAnswering"),Wzt.forEach(t),YOr=r(TXe," (GPT-J model)"),TXe.forEach(t),KOr=i(pe),v3=n(pe,"LI",{});var MXe=s(v3);O3e=n(MXe,"STRONG",{});var Qzt=s(O3e);ZOr=r(Qzt,"longformer"),Qzt.forEach(t),eVr=r(MXe," \u2014 "),roe=n(MXe,"A",{href:!0});var Hzt=s(roe);oVr=r(Hzt,"TFLongformerForQuestionAnswering"),Hzt.forEach(t),rVr=r(MXe," (Longformer model)"),MXe.forEach(t),tVr=i(pe),F3=n(pe,"LI",{});var EXe=s(F3);V3e=n(EXe,"STRONG",{});var Uzt=s(V3e);aVr=r(Uzt,"mobilebert"),Uzt.forEach(t),nVr=r(EXe," \u2014 "),toe=n(EXe,"A",{href:!0});var Jzt=s(toe);sVr=r(Jzt,"TFMobileBertForQuestionAnswering"),Jzt.forEach(t),lVr=r(EXe," (MobileBERT model)"),EXe.forEach(t),iVr=i(pe),T3=n(pe,"LI",{});var CXe=s(T3);X3e=n(CXe,"STRONG",{});var Yzt=s(X3e);dVr=r(Yzt,"mpnet"),Yzt.forEach(t),cVr=r(CXe," \u2014 "),aoe=n(CXe,"A",{href:!0});var Kzt=s(aoe);fVr=r(Kzt,"TFMPNetForQuestionAnswering"),Kzt.forEach(t),mVr=r(CXe," (MPNet model)"),CXe.forEach(t),gVr=i(pe),M3=n(pe,"LI",{});var wXe=s(M3);z3e=n(wXe,"STRONG",{});var Zzt=s(z3e);hVr=r(Zzt,"rembert"),Zzt.forEach(t),pVr=r(wXe," \u2014 "),noe=n(wXe,"A",{href:!0});var eWt=s(noe);_Vr=r(eWt,"TFRemBertForQuestionAnswering"),eWt.forEach(t),uVr=r(wXe," (RemBERT model)"),wXe.forEach(t),bVr=i(pe),E3=n(pe,"LI",{});var AXe=s(E3);W3e=n(AXe,"STRONG",{});var oWt=s(W3e);vVr=r(oWt,"roberta"),oWt.forEach(t),FVr=r(AXe," \u2014 "),soe=n(AXe,"A",{href:!0});var rWt=s(soe);TVr=r(rWt,"TFRobertaForQuestionAnswering"),rWt.forEach(t),MVr=r(AXe," (RoBERTa model)"),AXe.forEach(t),EVr=i(pe),C3=n(pe,"LI",{});var LXe=s(C3);Q3e=n(LXe,"STRONG",{});var tWt=s(Q3e);CVr=r(tWt,"roformer"),tWt.forEach(t),wVr=r(LXe," \u2014 "),loe=n(LXe,"A",{href:!0});var aWt=s(loe);AVr=r(aWt,"TFRoFormerForQuestionAnswering"),aWt.forEach(t),LVr=r(LXe," (RoFormer model)"),LXe.forEach(t),yVr=i(pe),w3=n(pe,"LI",{});var yXe=s(w3);H3e=n(yXe,"STRONG",{});var nWt=s(H3e);xVr=r(nWt,"xlm"),nWt.forEach(t),$Vr=r(yXe," \u2014 "),ioe=n(yXe,"A",{href:!0});var sWt=s(ioe);kVr=r(sWt,"TFXLMForQuestionAnsweringSimple"),sWt.forEach(t),SVr=r(yXe," (XLM model)"),yXe.forEach(t),RVr=i(pe),A3=n(pe,"LI",{});var xXe=s(A3);U3e=n(xXe,"STRONG",{});var lWt=s(U3e);PVr=r(lWt,"xlm-roberta"),lWt.forEach(t),BVr=r(xXe," \u2014 "),doe=n(xXe,"A",{href:!0});var iWt=s(doe);IVr=r(iWt,"TFXLMRobertaForQuestionAnswering"),iWt.forEach(t),NVr=r(xXe," (XLM-RoBERTa model)"),xXe.forEach(t),qVr=i(pe),L3=n(pe,"LI",{});var $Xe=s(L3);J3e=n($Xe,"STRONG",{});var dWt=s(J3e);jVr=r(dWt,"xlnet"),dWt.forEach(t),DVr=r($Xe," \u2014 "),coe=n($Xe,"A",{href:!0});var cWt=s(coe);GVr=r(cWt,"TFXLNetForQuestionAnsweringSimple"),cWt.forEach(t),OVr=r($Xe," (XLNet model)"),$Xe.forEach(t),pe.forEach(t),VVr=i(li),T(y3.$$.fragment,li),li.forEach(t),si.forEach(t),hHe=i(f),Zc=n(f,"H2",{class:!0});var wJe=s(Zc);x3=n(wJe,"A",{id:!0,class:!0,href:!0});var fWt=s(x3);Y3e=n(fWt,"SPAN",{});var mWt=s(Y3e);T(X$.$$.fragment,mWt),mWt.forEach(t),fWt.forEach(t),XVr=i(wJe),K3e=n(wJe,"SPAN",{});var gWt=s(K3e);zVr=r(gWt,"TFAutoModelForVision2Seq"),gWt.forEach(t),wJe.forEach(t),pHe=i(f),_r=n(f,"DIV",{class:!0});var ii=s(_r);T(z$.$$.fragment,ii),WVr=i(ii),ef=n(ii,"P",{});var Cne=s(ef);QVr=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),foe=n(Cne,"A",{href:!0});var hWt=s(foe);HVr=r(hWt,"from_pretrained()"),hWt.forEach(t),UVr=r(Cne," class method or the "),moe=n(Cne,"A",{href:!0});var pWt=s(moe);JVr=r(pWt,"from_config()"),pWt.forEach(t),YVr=r(Cne,` class
method.`),Cne.forEach(t),KVr=i(ii),W$=n(ii,"P",{});var AJe=s(W$);ZVr=r(AJe,"This class cannot be instantiated directly using "),Z3e=n(AJe,"CODE",{});var _Wt=s(Z3e);eXr=r(_Wt,"__init__()"),_Wt.forEach(t),oXr=r(AJe," (throws an error)."),AJe.forEach(t),rXr=i(ii),Ht=n(ii,"DIV",{class:!0});var h7=s(Ht);T(Q$.$$.fragment,h7),tXr=i(h7),e0e=n(h7,"P",{});var uWt=s(e0e);aXr=r(uWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uWt.forEach(t),nXr=i(h7),of=n(h7,"P",{});var wne=s(of);sXr=r(wne,`Note:
Loading a model from its configuration file does `),o0e=n(wne,"STRONG",{});var bWt=s(o0e);lXr=r(bWt,"not"),bWt.forEach(t),iXr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=n(wne,"A",{href:!0});var vWt=s(goe);dXr=r(vWt,"from_pretrained()"),vWt.forEach(t),cXr=r(wne," to load the model weights."),wne.forEach(t),fXr=i(h7),T($3.$$.fragment,h7),h7.forEach(t),mXr=i(ii),Xr=n(ii,"DIV",{class:!0});var di=s(Xr);T(H$.$$.fragment,di),gXr=i(di),r0e=n(di,"P",{});var FWt=s(r0e);hXr=r(FWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FWt.forEach(t),pXr=i(di),wn=n(di,"P",{});var p7=s(wn);_Xr=r(p7,"The model class to instantiate is selected based on the "),t0e=n(p7,"CODE",{});var TWt=s(t0e);uXr=r(TWt,"model_type"),TWt.forEach(t),bXr=r(p7,` property of the config object (either
passed as an argument or loaded from `),a0e=n(p7,"CODE",{});var MWt=s(a0e);vXr=r(MWt,"pretrained_model_name_or_path"),MWt.forEach(t),FXr=r(p7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n(p7,"CODE",{});var EWt=s(n0e);TXr=r(EWt,"pretrained_model_name_or_path"),EWt.forEach(t),MXr=r(p7,":"),p7.forEach(t),EXr=i(di),s0e=n(di,"UL",{});var CWt=s(s0e);k3=n(CWt,"LI",{});var kXe=s(k3);l0e=n(kXe,"STRONG",{});var wWt=s(l0e);CXr=r(wWt,"vision-encoder-decoder"),wWt.forEach(t),wXr=r(kXe," \u2014 "),hoe=n(kXe,"A",{href:!0});var AWt=s(hoe);AXr=r(AWt,"TFVisionEncoderDecoderModel"),AWt.forEach(t),LXr=r(kXe," (Vision Encoder decoder model)"),kXe.forEach(t),CWt.forEach(t),yXr=i(di),T(S3.$$.fragment,di),di.forEach(t),ii.forEach(t),_He=i(f),rf=n(f,"H2",{class:!0});var LJe=s(rf);R3=n(LJe,"A",{id:!0,class:!0,href:!0});var LWt=s(R3);i0e=n(LWt,"SPAN",{});var yWt=s(i0e);T(U$.$$.fragment,yWt),yWt.forEach(t),LWt.forEach(t),xXr=i(LJe),d0e=n(LJe,"SPAN",{});var xWt=s(d0e);$Xr=r(xWt,"TFAutoModelForSpeechSeq2Seq"),xWt.forEach(t),LJe.forEach(t),uHe=i(f),ur=n(f,"DIV",{class:!0});var ci=s(ur);T(J$.$$.fragment,ci),kXr=i(ci),tf=n(ci,"P",{});var Ane=s(tf);SXr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),poe=n(Ane,"A",{href:!0});var $Wt=s(poe);RXr=r($Wt,"from_pretrained()"),$Wt.forEach(t),PXr=r(Ane," class method or the "),_oe=n(Ane,"A",{href:!0});var kWt=s(_oe);BXr=r(kWt,"from_config()"),kWt.forEach(t),IXr=r(Ane,` class
method.`),Ane.forEach(t),NXr=i(ci),Y$=n(ci,"P",{});var yJe=s(Y$);qXr=r(yJe,"This class cannot be instantiated directly using "),c0e=n(yJe,"CODE",{});var SWt=s(c0e);jXr=r(SWt,"__init__()"),SWt.forEach(t),DXr=r(yJe," (throws an error)."),yJe.forEach(t),GXr=i(ci),Ut=n(ci,"DIV",{class:!0});var _7=s(Ut);T(K$.$$.fragment,_7),OXr=i(_7),f0e=n(_7,"P",{});var RWt=s(f0e);VXr=r(RWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RWt.forEach(t),XXr=i(_7),af=n(_7,"P",{});var Lne=s(af);zXr=r(Lne,`Note:
Loading a model from its configuration file does `),m0e=n(Lne,"STRONG",{});var PWt=s(m0e);WXr=r(PWt,"not"),PWt.forEach(t),QXr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(Lne,"A",{href:!0});var BWt=s(uoe);HXr=r(BWt,"from_pretrained()"),BWt.forEach(t),UXr=r(Lne," to load the model weights."),Lne.forEach(t),JXr=i(_7),T(P3.$$.fragment,_7),_7.forEach(t),YXr=i(ci),zr=n(ci,"DIV",{class:!0});var fi=s(zr);T(Z$.$$.fragment,fi),KXr=i(fi),g0e=n(fi,"P",{});var IWt=s(g0e);ZXr=r(IWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IWt.forEach(t),ezr=i(fi),An=n(fi,"P",{});var u7=s(An);ozr=r(u7,"The model class to instantiate is selected based on the "),h0e=n(u7,"CODE",{});var NWt=s(h0e);rzr=r(NWt,"model_type"),NWt.forEach(t),tzr=r(u7,` property of the config object (either
passed as an argument or loaded from `),p0e=n(u7,"CODE",{});var qWt=s(p0e);azr=r(qWt,"pretrained_model_name_or_path"),qWt.forEach(t),nzr=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(u7,"CODE",{});var jWt=s(_0e);szr=r(jWt,"pretrained_model_name_or_path"),jWt.forEach(t),lzr=r(u7,":"),u7.forEach(t),izr=i(fi),u0e=n(fi,"UL",{});var DWt=s(u0e);B3=n(DWt,"LI",{});var SXe=s(B3);b0e=n(SXe,"STRONG",{});var GWt=s(b0e);dzr=r(GWt,"speech_to_text"),GWt.forEach(t),czr=r(SXe," \u2014 "),boe=n(SXe,"A",{href:!0});var OWt=s(boe);fzr=r(OWt,"TFSpeech2TextForConditionalGeneration"),OWt.forEach(t),mzr=r(SXe," (Speech2Text model)"),SXe.forEach(t),DWt.forEach(t),gzr=i(fi),T(I3.$$.fragment,fi),fi.forEach(t),ci.forEach(t),bHe=i(f),nf=n(f,"H2",{class:!0});var xJe=s(nf);N3=n(xJe,"A",{id:!0,class:!0,href:!0});var VWt=s(N3);v0e=n(VWt,"SPAN",{});var XWt=s(v0e);T(ek.$$.fragment,XWt),XWt.forEach(t),VWt.forEach(t),hzr=i(xJe),F0e=n(xJe,"SPAN",{});var zWt=s(F0e);pzr=r(zWt,"FlaxAutoModel"),zWt.forEach(t),xJe.forEach(t),vHe=i(f),br=n(f,"DIV",{class:!0});var mi=s(br);T(ok.$$.fragment,mi),_zr=i(mi),sf=n(mi,"P",{});var yne=s(sf);uzr=r(yne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),voe=n(yne,"A",{href:!0});var WWt=s(voe);bzr=r(WWt,"from_pretrained()"),WWt.forEach(t),vzr=r(yne," class method or the "),Foe=n(yne,"A",{href:!0});var QWt=s(Foe);Fzr=r(QWt,"from_config()"),QWt.forEach(t),Tzr=r(yne,` class
method.`),yne.forEach(t),Mzr=i(mi),rk=n(mi,"P",{});var $Je=s(rk);Ezr=r($Je,"This class cannot be instantiated directly using "),T0e=n($Je,"CODE",{});var HWt=s(T0e);Czr=r(HWt,"__init__()"),HWt.forEach(t),wzr=r($Je," (throws an error)."),$Je.forEach(t),Azr=i(mi),Jt=n(mi,"DIV",{class:!0});var b7=s(Jt);T(tk.$$.fragment,b7),Lzr=i(b7),M0e=n(b7,"P",{});var UWt=s(M0e);yzr=r(UWt,"Instantiates one of the base model classes of the library from a configuration."),UWt.forEach(t),xzr=i(b7),lf=n(b7,"P",{});var xne=s(lf);$zr=r(xne,`Note:
Loading a model from its configuration file does `),E0e=n(xne,"STRONG",{});var JWt=s(E0e);kzr=r(JWt,"not"),JWt.forEach(t),Szr=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(xne,"A",{href:!0});var YWt=s(Toe);Rzr=r(YWt,"from_pretrained()"),YWt.forEach(t),Pzr=r(xne," to load the model weights."),xne.forEach(t),Bzr=i(b7),T(q3.$$.fragment,b7),b7.forEach(t),Izr=i(mi),Wr=n(mi,"DIV",{class:!0});var gi=s(Wr);T(ak.$$.fragment,gi),Nzr=i(gi),C0e=n(gi,"P",{});var KWt=s(C0e);qzr=r(KWt,"Instantiate one of the base model classes of the library from a pretrained model."),KWt.forEach(t),jzr=i(gi),Ln=n(gi,"P",{});var v7=s(Ln);Dzr=r(v7,"The model class to instantiate is selected based on the "),w0e=n(v7,"CODE",{});var ZWt=s(w0e);Gzr=r(ZWt,"model_type"),ZWt.forEach(t),Ozr=r(v7,` property of the config object (either
passed as an argument or loaded from `),A0e=n(v7,"CODE",{});var eQt=s(A0e);Vzr=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),Xzr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L0e=n(v7,"CODE",{});var oQt=s(L0e);zzr=r(oQt,"pretrained_model_name_or_path"),oQt.forEach(t),Wzr=r(v7,":"),v7.forEach(t),Qzr=i(gi),oe=n(gi,"UL",{});var ae=s(oe);j3=n(ae,"LI",{});var RXe=s(j3);y0e=n(RXe,"STRONG",{});var rQt=s(y0e);Hzr=r(rQt,"albert"),rQt.forEach(t),Uzr=r(RXe," \u2014 "),Moe=n(RXe,"A",{href:!0});var tQt=s(Moe);Jzr=r(tQt,"FlaxAlbertModel"),tQt.forEach(t),Yzr=r(RXe," (ALBERT model)"),RXe.forEach(t),Kzr=i(ae),D3=n(ae,"LI",{});var PXe=s(D3);x0e=n(PXe,"STRONG",{});var aQt=s(x0e);Zzr=r(aQt,"bart"),aQt.forEach(t),eWr=r(PXe," \u2014 "),Eoe=n(PXe,"A",{href:!0});var nQt=s(Eoe);oWr=r(nQt,"FlaxBartModel"),nQt.forEach(t),rWr=r(PXe," (BART model)"),PXe.forEach(t),tWr=i(ae),G3=n(ae,"LI",{});var BXe=s(G3);$0e=n(BXe,"STRONG",{});var sQt=s($0e);aWr=r(sQt,"beit"),sQt.forEach(t),nWr=r(BXe," \u2014 "),Coe=n(BXe,"A",{href:!0});var lQt=s(Coe);sWr=r(lQt,"FlaxBeitModel"),lQt.forEach(t),lWr=r(BXe," (BEiT model)"),BXe.forEach(t),iWr=i(ae),O3=n(ae,"LI",{});var IXe=s(O3);k0e=n(IXe,"STRONG",{});var iQt=s(k0e);dWr=r(iQt,"bert"),iQt.forEach(t),cWr=r(IXe," \u2014 "),woe=n(IXe,"A",{href:!0});var dQt=s(woe);fWr=r(dQt,"FlaxBertModel"),dQt.forEach(t),mWr=r(IXe," (BERT model)"),IXe.forEach(t),gWr=i(ae),V3=n(ae,"LI",{});var NXe=s(V3);S0e=n(NXe,"STRONG",{});var cQt=s(S0e);hWr=r(cQt,"big_bird"),cQt.forEach(t),pWr=r(NXe," \u2014 "),Aoe=n(NXe,"A",{href:!0});var fQt=s(Aoe);_Wr=r(fQt,"FlaxBigBirdModel"),fQt.forEach(t),uWr=r(NXe," (BigBird model)"),NXe.forEach(t),bWr=i(ae),X3=n(ae,"LI",{});var qXe=s(X3);R0e=n(qXe,"STRONG",{});var mQt=s(R0e);vWr=r(mQt,"blenderbot"),mQt.forEach(t),FWr=r(qXe," \u2014 "),Loe=n(qXe,"A",{href:!0});var gQt=s(Loe);TWr=r(gQt,"FlaxBlenderbotModel"),gQt.forEach(t),MWr=r(qXe," (Blenderbot model)"),qXe.forEach(t),EWr=i(ae),z3=n(ae,"LI",{});var jXe=s(z3);P0e=n(jXe,"STRONG",{});var hQt=s(P0e);CWr=r(hQt,"blenderbot-small"),hQt.forEach(t),wWr=r(jXe," \u2014 "),yoe=n(jXe,"A",{href:!0});var pQt=s(yoe);AWr=r(pQt,"FlaxBlenderbotSmallModel"),pQt.forEach(t),LWr=r(jXe," (BlenderbotSmall model)"),jXe.forEach(t),yWr=i(ae),W3=n(ae,"LI",{});var DXe=s(W3);B0e=n(DXe,"STRONG",{});var _Qt=s(B0e);xWr=r(_Qt,"clip"),_Qt.forEach(t),$Wr=r(DXe," \u2014 "),xoe=n(DXe,"A",{href:!0});var uQt=s(xoe);kWr=r(uQt,"FlaxCLIPModel"),uQt.forEach(t),SWr=r(DXe," (CLIP model)"),DXe.forEach(t),RWr=i(ae),Q3=n(ae,"LI",{});var GXe=s(Q3);I0e=n(GXe,"STRONG",{});var bQt=s(I0e);PWr=r(bQt,"distilbert"),bQt.forEach(t),BWr=r(GXe," \u2014 "),$oe=n(GXe,"A",{href:!0});var vQt=s($oe);IWr=r(vQt,"FlaxDistilBertModel"),vQt.forEach(t),NWr=r(GXe," (DistilBERT model)"),GXe.forEach(t),qWr=i(ae),H3=n(ae,"LI",{});var OXe=s(H3);N0e=n(OXe,"STRONG",{});var FQt=s(N0e);jWr=r(FQt,"electra"),FQt.forEach(t),DWr=r(OXe," \u2014 "),koe=n(OXe,"A",{href:!0});var TQt=s(koe);GWr=r(TQt,"FlaxElectraModel"),TQt.forEach(t),OWr=r(OXe," (ELECTRA model)"),OXe.forEach(t),VWr=i(ae),U3=n(ae,"LI",{});var VXe=s(U3);q0e=n(VXe,"STRONG",{});var MQt=s(q0e);XWr=r(MQt,"gpt2"),MQt.forEach(t),zWr=r(VXe," \u2014 "),Soe=n(VXe,"A",{href:!0});var EQt=s(Soe);WWr=r(EQt,"FlaxGPT2Model"),EQt.forEach(t),QWr=r(VXe," (OpenAI GPT-2 model)"),VXe.forEach(t),HWr=i(ae),J3=n(ae,"LI",{});var XXe=s(J3);j0e=n(XXe,"STRONG",{});var CQt=s(j0e);UWr=r(CQt,"gpt_neo"),CQt.forEach(t),JWr=r(XXe," \u2014 "),Roe=n(XXe,"A",{href:!0});var wQt=s(Roe);YWr=r(wQt,"FlaxGPTNeoModel"),wQt.forEach(t),KWr=r(XXe," (GPT Neo model)"),XXe.forEach(t),ZWr=i(ae),Y3=n(ae,"LI",{});var zXe=s(Y3);D0e=n(zXe,"STRONG",{});var AQt=s(D0e);eQr=r(AQt,"gptj"),AQt.forEach(t),oQr=r(zXe," \u2014 "),Poe=n(zXe,"A",{href:!0});var LQt=s(Poe);rQr=r(LQt,"FlaxGPTJModel"),LQt.forEach(t),tQr=r(zXe," (GPT-J model)"),zXe.forEach(t),aQr=i(ae),K3=n(ae,"LI",{});var WXe=s(K3);G0e=n(WXe,"STRONG",{});var yQt=s(G0e);nQr=r(yQt,"longt5"),yQt.forEach(t),sQr=r(WXe," \u2014 "),Boe=n(WXe,"A",{href:!0});var xQt=s(Boe);lQr=r(xQt,"FlaxLongT5Model"),xQt.forEach(t),iQr=r(WXe," (LongT5 model)"),WXe.forEach(t),dQr=i(ae),Z3=n(ae,"LI",{});var QXe=s(Z3);O0e=n(QXe,"STRONG",{});var $Qt=s(O0e);cQr=r($Qt,"marian"),$Qt.forEach(t),fQr=r(QXe," \u2014 "),Ioe=n(QXe,"A",{href:!0});var kQt=s(Ioe);mQr=r(kQt,"FlaxMarianModel"),kQt.forEach(t),gQr=r(QXe," (Marian model)"),QXe.forEach(t),hQr=i(ae),e0=n(ae,"LI",{});var HXe=s(e0);V0e=n(HXe,"STRONG",{});var SQt=s(V0e);pQr=r(SQt,"mbart"),SQt.forEach(t),_Qr=r(HXe," \u2014 "),Noe=n(HXe,"A",{href:!0});var RQt=s(Noe);uQr=r(RQt,"FlaxMBartModel"),RQt.forEach(t),bQr=r(HXe," (mBART model)"),HXe.forEach(t),vQr=i(ae),o0=n(ae,"LI",{});var UXe=s(o0);X0e=n(UXe,"STRONG",{});var PQt=s(X0e);FQr=r(PQt,"mt5"),PQt.forEach(t),TQr=r(UXe," \u2014 "),qoe=n(UXe,"A",{href:!0});var BQt=s(qoe);MQr=r(BQt,"FlaxMT5Model"),BQt.forEach(t),EQr=r(UXe," (MT5 model)"),UXe.forEach(t),CQr=i(ae),r0=n(ae,"LI",{});var JXe=s(r0);z0e=n(JXe,"STRONG",{});var IQt=s(z0e);wQr=r(IQt,"opt"),IQt.forEach(t),AQr=r(JXe," \u2014 "),joe=n(JXe,"A",{href:!0});var NQt=s(joe);LQr=r(NQt,"FlaxOPTModel"),NQt.forEach(t),yQr=r(JXe," (OPT model)"),JXe.forEach(t),xQr=i(ae),t0=n(ae,"LI",{});var YXe=s(t0);W0e=n(YXe,"STRONG",{});var qQt=s(W0e);$Qr=r(qQt,"pegasus"),qQt.forEach(t),kQr=r(YXe," \u2014 "),Doe=n(YXe,"A",{href:!0});var jQt=s(Doe);SQr=r(jQt,"FlaxPegasusModel"),jQt.forEach(t),RQr=r(YXe," (Pegasus model)"),YXe.forEach(t),PQr=i(ae),a0=n(ae,"LI",{});var KXe=s(a0);Q0e=n(KXe,"STRONG",{});var DQt=s(Q0e);BQr=r(DQt,"roberta"),DQt.forEach(t),IQr=r(KXe," \u2014 "),Goe=n(KXe,"A",{href:!0});var GQt=s(Goe);NQr=r(GQt,"FlaxRobertaModel"),GQt.forEach(t),qQr=r(KXe," (RoBERTa model)"),KXe.forEach(t),jQr=i(ae),n0=n(ae,"LI",{});var ZXe=s(n0);H0e=n(ZXe,"STRONG",{});var OQt=s(H0e);DQr=r(OQt,"roformer"),OQt.forEach(t),GQr=r(ZXe," \u2014 "),Ooe=n(ZXe,"A",{href:!0});var VQt=s(Ooe);OQr=r(VQt,"FlaxRoFormerModel"),VQt.forEach(t),VQr=r(ZXe," (RoFormer model)"),ZXe.forEach(t),XQr=i(ae),s0=n(ae,"LI",{});var eze=s(s0);U0e=n(eze,"STRONG",{});var XQt=s(U0e);zQr=r(XQt,"t5"),XQt.forEach(t),WQr=r(eze," \u2014 "),Voe=n(eze,"A",{href:!0});var zQt=s(Voe);QQr=r(zQt,"FlaxT5Model"),zQt.forEach(t),HQr=r(eze," (T5 model)"),eze.forEach(t),UQr=i(ae),l0=n(ae,"LI",{});var oze=s(l0);J0e=n(oze,"STRONG",{});var WQt=s(J0e);JQr=r(WQt,"vision-text-dual-encoder"),WQt.forEach(t),YQr=r(oze," \u2014 "),Xoe=n(oze,"A",{href:!0});var QQt=s(Xoe);KQr=r(QQt,"FlaxVisionTextDualEncoderModel"),QQt.forEach(t),ZQr=r(oze," (VisionTextDualEncoder model)"),oze.forEach(t),eHr=i(ae),i0=n(ae,"LI",{});var rze=s(i0);Y0e=n(rze,"STRONG",{});var HQt=s(Y0e);oHr=r(HQt,"vit"),HQt.forEach(t),rHr=r(rze," \u2014 "),zoe=n(rze,"A",{href:!0});var UQt=s(zoe);tHr=r(UQt,"FlaxViTModel"),UQt.forEach(t),aHr=r(rze," (ViT model)"),rze.forEach(t),nHr=i(ae),d0=n(ae,"LI",{});var tze=s(d0);K0e=n(tze,"STRONG",{});var JQt=s(K0e);sHr=r(JQt,"wav2vec2"),JQt.forEach(t),lHr=r(tze," \u2014 "),Woe=n(tze,"A",{href:!0});var YQt=s(Woe);iHr=r(YQt,"FlaxWav2Vec2Model"),YQt.forEach(t),dHr=r(tze," (Wav2Vec2 model)"),tze.forEach(t),cHr=i(ae),c0=n(ae,"LI",{});var aze=s(c0);Z0e=n(aze,"STRONG",{});var KQt=s(Z0e);fHr=r(KQt,"xglm"),KQt.forEach(t),mHr=r(aze," \u2014 "),Qoe=n(aze,"A",{href:!0});var ZQt=s(Qoe);gHr=r(ZQt,"FlaxXGLMModel"),ZQt.forEach(t),hHr=r(aze," (XGLM model)"),aze.forEach(t),pHr=i(ae),f0=n(ae,"LI",{});var nze=s(f0);ewe=n(nze,"STRONG",{});var eHt=s(ewe);_Hr=r(eHt,"xlm-roberta"),eHt.forEach(t),uHr=r(nze," \u2014 "),Hoe=n(nze,"A",{href:!0});var oHt=s(Hoe);bHr=r(oHt,"FlaxXLMRobertaModel"),oHt.forEach(t),vHr=r(nze," (XLM-RoBERTa model)"),nze.forEach(t),ae.forEach(t),FHr=i(gi),T(m0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),FHe=i(f),df=n(f,"H2",{class:!0});var kJe=s(df);g0=n(kJe,"A",{id:!0,class:!0,href:!0});var rHt=s(g0);owe=n(rHt,"SPAN",{});var tHt=s(owe);T(nk.$$.fragment,tHt),tHt.forEach(t),rHt.forEach(t),THr=i(kJe),rwe=n(kJe,"SPAN",{});var aHt=s(rwe);MHr=r(aHt,"FlaxAutoModelForCausalLM"),aHt.forEach(t),kJe.forEach(t),THe=i(f),vr=n(f,"DIV",{class:!0});var hi=s(vr);T(sk.$$.fragment,hi),EHr=i(hi),cf=n(hi,"P",{});var $ne=s(cf);CHr=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uoe=n($ne,"A",{href:!0});var nHt=s(Uoe);wHr=r(nHt,"from_pretrained()"),nHt.forEach(t),AHr=r($ne," class method or the "),Joe=n($ne,"A",{href:!0});var sHt=s(Joe);LHr=r(sHt,"from_config()"),sHt.forEach(t),yHr=r($ne,` class
method.`),$ne.forEach(t),xHr=i(hi),lk=n(hi,"P",{});var SJe=s(lk);$Hr=r(SJe,"This class cannot be instantiated directly using "),twe=n(SJe,"CODE",{});var lHt=s(twe);kHr=r(lHt,"__init__()"),lHt.forEach(t),SHr=r(SJe," (throws an error)."),SJe.forEach(t),RHr=i(hi),Yt=n(hi,"DIV",{class:!0});var F7=s(Yt);T(ik.$$.fragment,F7),PHr=i(F7),awe=n(F7,"P",{});var iHt=s(awe);BHr=r(iHt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iHt.forEach(t),IHr=i(F7),ff=n(F7,"P",{});var kne=s(ff);NHr=r(kne,`Note:
Loading a model from its configuration file does `),nwe=n(kne,"STRONG",{});var dHt=s(nwe);qHr=r(dHt,"not"),dHt.forEach(t),jHr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yoe=n(kne,"A",{href:!0});var cHt=s(Yoe);DHr=r(cHt,"from_pretrained()"),cHt.forEach(t),GHr=r(kne," to load the model weights."),kne.forEach(t),OHr=i(F7),T(h0.$$.fragment,F7),F7.forEach(t),VHr=i(hi),Qr=n(hi,"DIV",{class:!0});var pi=s(Qr);T(dk.$$.fragment,pi),XHr=i(pi),swe=n(pi,"P",{});var fHt=s(swe);zHr=r(fHt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fHt.forEach(t),WHr=i(pi),yn=n(pi,"P",{});var T7=s(yn);QHr=r(T7,"The model class to instantiate is selected based on the "),lwe=n(T7,"CODE",{});var mHt=s(lwe);HHr=r(mHt,"model_type"),mHt.forEach(t),UHr=r(T7,` property of the config object (either
passed as an argument or loaded from `),iwe=n(T7,"CODE",{});var gHt=s(iwe);JHr=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),YHr=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dwe=n(T7,"CODE",{});var hHt=s(dwe);KHr=r(hHt,"pretrained_model_name_or_path"),hHt.forEach(t),ZHr=r(T7,":"),T7.forEach(t),eUr=i(pi),xe=n(pi,"UL",{});var Ne=s(xe);p0=n(Ne,"LI",{});var sze=s(p0);cwe=n(sze,"STRONG",{});var pHt=s(cwe);oUr=r(pHt,"bart"),pHt.forEach(t),rUr=r(sze," \u2014 "),Koe=n(sze,"A",{href:!0});var _Ht=s(Koe);tUr=r(_Ht,"FlaxBartForCausalLM"),_Ht.forEach(t),aUr=r(sze," (BART model)"),sze.forEach(t),nUr=i(Ne),_0=n(Ne,"LI",{});var lze=s(_0);fwe=n(lze,"STRONG",{});var uHt=s(fwe);sUr=r(uHt,"bert"),uHt.forEach(t),lUr=r(lze," \u2014 "),Zoe=n(lze,"A",{href:!0});var bHt=s(Zoe);iUr=r(bHt,"FlaxBertForCausalLM"),bHt.forEach(t),dUr=r(lze," (BERT model)"),lze.forEach(t),cUr=i(Ne),u0=n(Ne,"LI",{});var ize=s(u0);mwe=n(ize,"STRONG",{});var vHt=s(mwe);fUr=r(vHt,"big_bird"),vHt.forEach(t),mUr=r(ize," \u2014 "),ere=n(ize,"A",{href:!0});var FHt=s(ere);gUr=r(FHt,"FlaxBigBirdForCausalLM"),FHt.forEach(t),hUr=r(ize," (BigBird model)"),ize.forEach(t),pUr=i(Ne),b0=n(Ne,"LI",{});var dze=s(b0);gwe=n(dze,"STRONG",{});var THt=s(gwe);_Ur=r(THt,"electra"),THt.forEach(t),uUr=r(dze," \u2014 "),ore=n(dze,"A",{href:!0});var MHt=s(ore);bUr=r(MHt,"FlaxElectraForCausalLM"),MHt.forEach(t),vUr=r(dze," (ELECTRA model)"),dze.forEach(t),FUr=i(Ne),v0=n(Ne,"LI",{});var cze=s(v0);hwe=n(cze,"STRONG",{});var EHt=s(hwe);TUr=r(EHt,"gpt2"),EHt.forEach(t),MUr=r(cze," \u2014 "),rre=n(cze,"A",{href:!0});var CHt=s(rre);EUr=r(CHt,"FlaxGPT2LMHeadModel"),CHt.forEach(t),CUr=r(cze," (OpenAI GPT-2 model)"),cze.forEach(t),wUr=i(Ne),F0=n(Ne,"LI",{});var fze=s(F0);pwe=n(fze,"STRONG",{});var wHt=s(pwe);AUr=r(wHt,"gpt_neo"),wHt.forEach(t),LUr=r(fze," \u2014 "),tre=n(fze,"A",{href:!0});var AHt=s(tre);yUr=r(AHt,"FlaxGPTNeoForCausalLM"),AHt.forEach(t),xUr=r(fze," (GPT Neo model)"),fze.forEach(t),$Ur=i(Ne),T0=n(Ne,"LI",{});var mze=s(T0);_we=n(mze,"STRONG",{});var LHt=s(_we);kUr=r(LHt,"gptj"),LHt.forEach(t),SUr=r(mze," \u2014 "),are=n(mze,"A",{href:!0});var yHt=s(are);RUr=r(yHt,"FlaxGPTJForCausalLM"),yHt.forEach(t),PUr=r(mze," (GPT-J model)"),mze.forEach(t),BUr=i(Ne),M0=n(Ne,"LI",{});var gze=s(M0);uwe=n(gze,"STRONG",{});var xHt=s(uwe);IUr=r(xHt,"opt"),xHt.forEach(t),NUr=r(gze," \u2014 "),nre=n(gze,"A",{href:!0});var $Ht=s(nre);qUr=r($Ht,"FlaxOPTForCausalLM"),$Ht.forEach(t),jUr=r(gze," (OPT model)"),gze.forEach(t),DUr=i(Ne),E0=n(Ne,"LI",{});var hze=s(E0);bwe=n(hze,"STRONG",{});var kHt=s(bwe);GUr=r(kHt,"roberta"),kHt.forEach(t),OUr=r(hze," \u2014 "),sre=n(hze,"A",{href:!0});var SHt=s(sre);VUr=r(SHt,"FlaxRobertaForCausalLM"),SHt.forEach(t),XUr=r(hze," (RoBERTa model)"),hze.forEach(t),zUr=i(Ne),C0=n(Ne,"LI",{});var pze=s(C0);vwe=n(pze,"STRONG",{});var RHt=s(vwe);WUr=r(RHt,"xglm"),RHt.forEach(t),QUr=r(pze," \u2014 "),lre=n(pze,"A",{href:!0});var PHt=s(lre);HUr=r(PHt,"FlaxXGLMForCausalLM"),PHt.forEach(t),UUr=r(pze," (XGLM model)"),pze.forEach(t),Ne.forEach(t),JUr=i(pi),T(w0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),MHe=i(f),mf=n(f,"H2",{class:!0});var RJe=s(mf);A0=n(RJe,"A",{id:!0,class:!0,href:!0});var BHt=s(A0);Fwe=n(BHt,"SPAN",{});var IHt=s(Fwe);T(ck.$$.fragment,IHt),IHt.forEach(t),BHt.forEach(t),YUr=i(RJe),Twe=n(RJe,"SPAN",{});var NHt=s(Twe);KUr=r(NHt,"FlaxAutoModelForPreTraining"),NHt.forEach(t),RJe.forEach(t),EHe=i(f),Fr=n(f,"DIV",{class:!0});var _i=s(Fr);T(fk.$$.fragment,_i),ZUr=i(_i),gf=n(_i,"P",{});var Sne=s(gf);eJr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ire=n(Sne,"A",{href:!0});var qHt=s(ire);oJr=r(qHt,"from_pretrained()"),qHt.forEach(t),rJr=r(Sne," class method or the "),dre=n(Sne,"A",{href:!0});var jHt=s(dre);tJr=r(jHt,"from_config()"),jHt.forEach(t),aJr=r(Sne,` class
method.`),Sne.forEach(t),nJr=i(_i),mk=n(_i,"P",{});var PJe=s(mk);sJr=r(PJe,"This class cannot be instantiated directly using "),Mwe=n(PJe,"CODE",{});var DHt=s(Mwe);lJr=r(DHt,"__init__()"),DHt.forEach(t),iJr=r(PJe," (throws an error)."),PJe.forEach(t),dJr=i(_i),Kt=n(_i,"DIV",{class:!0});var M7=s(Kt);T(gk.$$.fragment,M7),cJr=i(M7),Ewe=n(M7,"P",{});var GHt=s(Ewe);fJr=r(GHt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GHt.forEach(t),mJr=i(M7),hf=n(M7,"P",{});var Rne=s(hf);gJr=r(Rne,`Note:
Loading a model from its configuration file does `),Cwe=n(Rne,"STRONG",{});var OHt=s(Cwe);hJr=r(OHt,"not"),OHt.forEach(t),pJr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cre=n(Rne,"A",{href:!0});var VHt=s(cre);_Jr=r(VHt,"from_pretrained()"),VHt.forEach(t),uJr=r(Rne," to load the model weights."),Rne.forEach(t),bJr=i(M7),T(L0.$$.fragment,M7),M7.forEach(t),vJr=i(_i),Hr=n(_i,"DIV",{class:!0});var ui=s(Hr);T(hk.$$.fragment,ui),FJr=i(ui),wwe=n(ui,"P",{});var XHt=s(wwe);TJr=r(XHt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XHt.forEach(t),MJr=i(ui),xn=n(ui,"P",{});var E7=s(xn);EJr=r(E7,"The model class to instantiate is selected based on the "),Awe=n(E7,"CODE",{});var zHt=s(Awe);CJr=r(zHt,"model_type"),zHt.forEach(t),wJr=r(E7,` property of the config object (either
passed as an argument or loaded from `),Lwe=n(E7,"CODE",{});var WHt=s(Lwe);AJr=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),LJr=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ywe=n(E7,"CODE",{});var QHt=s(ywe);yJr=r(QHt,"pretrained_model_name_or_path"),QHt.forEach(t),xJr=r(E7,":"),E7.forEach(t),$Jr=i(ui),Ee=n(ui,"UL",{});var we=s(Ee);y0=n(we,"LI",{});var _ze=s(y0);xwe=n(_ze,"STRONG",{});var HHt=s(xwe);kJr=r(HHt,"albert"),HHt.forEach(t),SJr=r(_ze," \u2014 "),fre=n(_ze,"A",{href:!0});var UHt=s(fre);RJr=r(UHt,"FlaxAlbertForPreTraining"),UHt.forEach(t),PJr=r(_ze," (ALBERT model)"),_ze.forEach(t),BJr=i(we),x0=n(we,"LI",{});var uze=s(x0);$we=n(uze,"STRONG",{});var JHt=s($we);IJr=r(JHt,"bart"),JHt.forEach(t),NJr=r(uze," \u2014 "),mre=n(uze,"A",{href:!0});var YHt=s(mre);qJr=r(YHt,"FlaxBartForConditionalGeneration"),YHt.forEach(t),jJr=r(uze," (BART model)"),uze.forEach(t),DJr=i(we),$0=n(we,"LI",{});var bze=s($0);kwe=n(bze,"STRONG",{});var KHt=s(kwe);GJr=r(KHt,"bert"),KHt.forEach(t),OJr=r(bze," \u2014 "),gre=n(bze,"A",{href:!0});var ZHt=s(gre);VJr=r(ZHt,"FlaxBertForPreTraining"),ZHt.forEach(t),XJr=r(bze," (BERT model)"),bze.forEach(t),zJr=i(we),k0=n(we,"LI",{});var vze=s(k0);Swe=n(vze,"STRONG",{});var eUt=s(Swe);WJr=r(eUt,"big_bird"),eUt.forEach(t),QJr=r(vze," \u2014 "),hre=n(vze,"A",{href:!0});var oUt=s(hre);HJr=r(oUt,"FlaxBigBirdForPreTraining"),oUt.forEach(t),UJr=r(vze," (BigBird model)"),vze.forEach(t),JJr=i(we),S0=n(we,"LI",{});var Fze=s(S0);Rwe=n(Fze,"STRONG",{});var rUt=s(Rwe);YJr=r(rUt,"electra"),rUt.forEach(t),KJr=r(Fze," \u2014 "),pre=n(Fze,"A",{href:!0});var tUt=s(pre);ZJr=r(tUt,"FlaxElectraForPreTraining"),tUt.forEach(t),eYr=r(Fze," (ELECTRA model)"),Fze.forEach(t),oYr=i(we),R0=n(we,"LI",{});var Tze=s(R0);Pwe=n(Tze,"STRONG",{});var aUt=s(Pwe);rYr=r(aUt,"longt5"),aUt.forEach(t),tYr=r(Tze," \u2014 "),_re=n(Tze,"A",{href:!0});var nUt=s(_re);aYr=r(nUt,"FlaxLongT5ForConditionalGeneration"),nUt.forEach(t),nYr=r(Tze," (LongT5 model)"),Tze.forEach(t),sYr=i(we),P0=n(we,"LI",{});var Mze=s(P0);Bwe=n(Mze,"STRONG",{});var sUt=s(Bwe);lYr=r(sUt,"mbart"),sUt.forEach(t),iYr=r(Mze," \u2014 "),ure=n(Mze,"A",{href:!0});var lUt=s(ure);dYr=r(lUt,"FlaxMBartForConditionalGeneration"),lUt.forEach(t),cYr=r(Mze," (mBART model)"),Mze.forEach(t),fYr=i(we),B0=n(we,"LI",{});var Eze=s(B0);Iwe=n(Eze,"STRONG",{});var iUt=s(Iwe);mYr=r(iUt,"mt5"),iUt.forEach(t),gYr=r(Eze," \u2014 "),bre=n(Eze,"A",{href:!0});var dUt=s(bre);hYr=r(dUt,"FlaxMT5ForConditionalGeneration"),dUt.forEach(t),pYr=r(Eze," (MT5 model)"),Eze.forEach(t),_Yr=i(we),I0=n(we,"LI",{});var Cze=s(I0);Nwe=n(Cze,"STRONG",{});var cUt=s(Nwe);uYr=r(cUt,"roberta"),cUt.forEach(t),bYr=r(Cze," \u2014 "),vre=n(Cze,"A",{href:!0});var fUt=s(vre);vYr=r(fUt,"FlaxRobertaForMaskedLM"),fUt.forEach(t),FYr=r(Cze," (RoBERTa model)"),Cze.forEach(t),TYr=i(we),N0=n(we,"LI",{});var wze=s(N0);qwe=n(wze,"STRONG",{});var mUt=s(qwe);MYr=r(mUt,"roformer"),mUt.forEach(t),EYr=r(wze," \u2014 "),Fre=n(wze,"A",{href:!0});var gUt=s(Fre);CYr=r(gUt,"FlaxRoFormerForMaskedLM"),gUt.forEach(t),wYr=r(wze," (RoFormer model)"),wze.forEach(t),AYr=i(we),q0=n(we,"LI",{});var Aze=s(q0);jwe=n(Aze,"STRONG",{});var hUt=s(jwe);LYr=r(hUt,"t5"),hUt.forEach(t),yYr=r(Aze," \u2014 "),Tre=n(Aze,"A",{href:!0});var pUt=s(Tre);xYr=r(pUt,"FlaxT5ForConditionalGeneration"),pUt.forEach(t),$Yr=r(Aze," (T5 model)"),Aze.forEach(t),kYr=i(we),j0=n(we,"LI",{});var Lze=s(j0);Dwe=n(Lze,"STRONG",{});var _Ut=s(Dwe);SYr=r(_Ut,"wav2vec2"),_Ut.forEach(t),RYr=r(Lze," \u2014 "),Mre=n(Lze,"A",{href:!0});var uUt=s(Mre);PYr=r(uUt,"FlaxWav2Vec2ForPreTraining"),uUt.forEach(t),BYr=r(Lze," (Wav2Vec2 model)"),Lze.forEach(t),IYr=i(we),D0=n(we,"LI",{});var yze=s(D0);Gwe=n(yze,"STRONG",{});var bUt=s(Gwe);NYr=r(bUt,"xlm-roberta"),bUt.forEach(t),qYr=r(yze," \u2014 "),Ere=n(yze,"A",{href:!0});var vUt=s(Ere);jYr=r(vUt,"FlaxXLMRobertaForMaskedLM"),vUt.forEach(t),DYr=r(yze," (XLM-RoBERTa model)"),yze.forEach(t),we.forEach(t),GYr=i(ui),T(G0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),CHe=i(f),pf=n(f,"H2",{class:!0});var BJe=s(pf);O0=n(BJe,"A",{id:!0,class:!0,href:!0});var FUt=s(O0);Owe=n(FUt,"SPAN",{});var TUt=s(Owe);T(pk.$$.fragment,TUt),TUt.forEach(t),FUt.forEach(t),OYr=i(BJe),Vwe=n(BJe,"SPAN",{});var MUt=s(Vwe);VYr=r(MUt,"FlaxAutoModelForMaskedLM"),MUt.forEach(t),BJe.forEach(t),wHe=i(f),Tr=n(f,"DIV",{class:!0});var bi=s(Tr);T(_k.$$.fragment,bi),XYr=i(bi),_f=n(bi,"P",{});var Pne=s(_f);zYr=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Cre=n(Pne,"A",{href:!0});var EUt=s(Cre);WYr=r(EUt,"from_pretrained()"),EUt.forEach(t),QYr=r(Pne," class method or the "),wre=n(Pne,"A",{href:!0});var CUt=s(wre);HYr=r(CUt,"from_config()"),CUt.forEach(t),UYr=r(Pne,` class
method.`),Pne.forEach(t),JYr=i(bi),uk=n(bi,"P",{});var IJe=s(uk);YYr=r(IJe,"This class cannot be instantiated directly using "),Xwe=n(IJe,"CODE",{});var wUt=s(Xwe);KYr=r(wUt,"__init__()"),wUt.forEach(t),ZYr=r(IJe," (throws an error)."),IJe.forEach(t),eKr=i(bi),Zt=n(bi,"DIV",{class:!0});var C7=s(Zt);T(bk.$$.fragment,C7),oKr=i(C7),zwe=n(C7,"P",{});var AUt=s(zwe);rKr=r(AUt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AUt.forEach(t),tKr=i(C7),uf=n(C7,"P",{});var Bne=s(uf);aKr=r(Bne,`Note:
Loading a model from its configuration file does `),Wwe=n(Bne,"STRONG",{});var LUt=s(Wwe);nKr=r(LUt,"not"),LUt.forEach(t),sKr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Bne,"A",{href:!0});var yUt=s(Are);lKr=r(yUt,"from_pretrained()"),yUt.forEach(t),iKr=r(Bne," to load the model weights."),Bne.forEach(t),dKr=i(C7),T(V0.$$.fragment,C7),C7.forEach(t),cKr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(vk.$$.fragment,vi),fKr=i(vi),Qwe=n(vi,"P",{});var xUt=s(Qwe);mKr=r(xUt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xUt.forEach(t),gKr=i(vi),$n=n(vi,"P",{});var w7=s($n);hKr=r(w7,"The model class to instantiate is selected based on the "),Hwe=n(w7,"CODE",{});var $Ut=s(Hwe);pKr=r($Ut,"model_type"),$Ut.forEach(t),_Kr=r(w7,` property of the config object (either
passed as an argument or loaded from `),Uwe=n(w7,"CODE",{});var kUt=s(Uwe);uKr=r(kUt,"pretrained_model_name_or_path"),kUt.forEach(t),bKr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jwe=n(w7,"CODE",{});var SUt=s(Jwe);vKr=r(SUt,"pretrained_model_name_or_path"),SUt.forEach(t),FKr=r(w7,":"),w7.forEach(t),TKr=i(vi),$e=n(vi,"UL",{});var qe=s($e);X0=n(qe,"LI",{});var xze=s(X0);Ywe=n(xze,"STRONG",{});var RUt=s(Ywe);MKr=r(RUt,"albert"),RUt.forEach(t),EKr=r(xze," \u2014 "),Lre=n(xze,"A",{href:!0});var PUt=s(Lre);CKr=r(PUt,"FlaxAlbertForMaskedLM"),PUt.forEach(t),wKr=r(xze," (ALBERT model)"),xze.forEach(t),AKr=i(qe),z0=n(qe,"LI",{});var $ze=s(z0);Kwe=n($ze,"STRONG",{});var BUt=s(Kwe);LKr=r(BUt,"bart"),BUt.forEach(t),yKr=r($ze," \u2014 "),yre=n($ze,"A",{href:!0});var IUt=s(yre);xKr=r(IUt,"FlaxBartForConditionalGeneration"),IUt.forEach(t),$Kr=r($ze," (BART model)"),$ze.forEach(t),kKr=i(qe),W0=n(qe,"LI",{});var kze=s(W0);Zwe=n(kze,"STRONG",{});var NUt=s(Zwe);SKr=r(NUt,"bert"),NUt.forEach(t),RKr=r(kze," \u2014 "),xre=n(kze,"A",{href:!0});var qUt=s(xre);PKr=r(qUt,"FlaxBertForMaskedLM"),qUt.forEach(t),BKr=r(kze," (BERT model)"),kze.forEach(t),IKr=i(qe),Q0=n(qe,"LI",{});var Sze=s(Q0);e6e=n(Sze,"STRONG",{});var jUt=s(e6e);NKr=r(jUt,"big_bird"),jUt.forEach(t),qKr=r(Sze," \u2014 "),$re=n(Sze,"A",{href:!0});var DUt=s($re);jKr=r(DUt,"FlaxBigBirdForMaskedLM"),DUt.forEach(t),DKr=r(Sze," (BigBird model)"),Sze.forEach(t),GKr=i(qe),H0=n(qe,"LI",{});var Rze=s(H0);o6e=n(Rze,"STRONG",{});var GUt=s(o6e);OKr=r(GUt,"distilbert"),GUt.forEach(t),VKr=r(Rze," \u2014 "),kre=n(Rze,"A",{href:!0});var OUt=s(kre);XKr=r(OUt,"FlaxDistilBertForMaskedLM"),OUt.forEach(t),zKr=r(Rze," (DistilBERT model)"),Rze.forEach(t),WKr=i(qe),U0=n(qe,"LI",{});var Pze=s(U0);r6e=n(Pze,"STRONG",{});var VUt=s(r6e);QKr=r(VUt,"electra"),VUt.forEach(t),HKr=r(Pze," \u2014 "),Sre=n(Pze,"A",{href:!0});var XUt=s(Sre);UKr=r(XUt,"FlaxElectraForMaskedLM"),XUt.forEach(t),JKr=r(Pze," (ELECTRA model)"),Pze.forEach(t),YKr=i(qe),J0=n(qe,"LI",{});var Bze=s(J0);t6e=n(Bze,"STRONG",{});var zUt=s(t6e);KKr=r(zUt,"mbart"),zUt.forEach(t),ZKr=r(Bze," \u2014 "),Rre=n(Bze,"A",{href:!0});var WUt=s(Rre);eZr=r(WUt,"FlaxMBartForConditionalGeneration"),WUt.forEach(t),oZr=r(Bze," (mBART model)"),Bze.forEach(t),rZr=i(qe),Y0=n(qe,"LI",{});var Ize=s(Y0);a6e=n(Ize,"STRONG",{});var QUt=s(a6e);tZr=r(QUt,"roberta"),QUt.forEach(t),aZr=r(Ize," \u2014 "),Pre=n(Ize,"A",{href:!0});var HUt=s(Pre);nZr=r(HUt,"FlaxRobertaForMaskedLM"),HUt.forEach(t),sZr=r(Ize," (RoBERTa model)"),Ize.forEach(t),lZr=i(qe),K0=n(qe,"LI",{});var Nze=s(K0);n6e=n(Nze,"STRONG",{});var UUt=s(n6e);iZr=r(UUt,"roformer"),UUt.forEach(t),dZr=r(Nze," \u2014 "),Bre=n(Nze,"A",{href:!0});var JUt=s(Bre);cZr=r(JUt,"FlaxRoFormerForMaskedLM"),JUt.forEach(t),fZr=r(Nze," (RoFormer model)"),Nze.forEach(t),mZr=i(qe),Z0=n(qe,"LI",{});var qze=s(Z0);s6e=n(qze,"STRONG",{});var YUt=s(s6e);gZr=r(YUt,"xlm-roberta"),YUt.forEach(t),hZr=r(qze," \u2014 "),Ire=n(qze,"A",{href:!0});var KUt=s(Ire);pZr=r(KUt,"FlaxXLMRobertaForMaskedLM"),KUt.forEach(t),_Zr=r(qze," (XLM-RoBERTa model)"),qze.forEach(t),qe.forEach(t),uZr=i(vi),T(ew.$$.fragment,vi),vi.forEach(t),bi.forEach(t),AHe=i(f),bf=n(f,"H2",{class:!0});var NJe=s(bf);ow=n(NJe,"A",{id:!0,class:!0,href:!0});var ZUt=s(ow);l6e=n(ZUt,"SPAN",{});var eJt=s(l6e);T(Fk.$$.fragment,eJt),eJt.forEach(t),ZUt.forEach(t),bZr=i(NJe),i6e=n(NJe,"SPAN",{});var oJt=s(i6e);vZr=r(oJt,"FlaxAutoModelForSeq2SeqLM"),oJt.forEach(t),NJe.forEach(t),LHe=i(f),Mr=n(f,"DIV",{class:!0});var Fi=s(Mr);T(Tk.$$.fragment,Fi),FZr=i(Fi),vf=n(Fi,"P",{});var Ine=s(vf);TZr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Nre=n(Ine,"A",{href:!0});var rJt=s(Nre);MZr=r(rJt,"from_pretrained()"),rJt.forEach(t),EZr=r(Ine," class method or the "),qre=n(Ine,"A",{href:!0});var tJt=s(qre);CZr=r(tJt,"from_config()"),tJt.forEach(t),wZr=r(Ine,` class
method.`),Ine.forEach(t),AZr=i(Fi),Mk=n(Fi,"P",{});var qJe=s(Mk);LZr=r(qJe,"This class cannot be instantiated directly using "),d6e=n(qJe,"CODE",{});var aJt=s(d6e);yZr=r(aJt,"__init__()"),aJt.forEach(t),xZr=r(qJe," (throws an error)."),qJe.forEach(t),$Zr=i(Fi),ea=n(Fi,"DIV",{class:!0});var A7=s(ea);T(Ek.$$.fragment,A7),kZr=i(A7),c6e=n(A7,"P",{});var nJt=s(c6e);SZr=r(nJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nJt.forEach(t),RZr=i(A7),Ff=n(A7,"P",{});var Nne=s(Ff);PZr=r(Nne,`Note:
Loading a model from its configuration file does `),f6e=n(Nne,"STRONG",{});var sJt=s(f6e);BZr=r(sJt,"not"),sJt.forEach(t),IZr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),jre=n(Nne,"A",{href:!0});var lJt=s(jre);NZr=r(lJt,"from_pretrained()"),lJt.forEach(t),qZr=r(Nne," to load the model weights."),Nne.forEach(t),jZr=i(A7),T(rw.$$.fragment,A7),A7.forEach(t),DZr=i(Fi),Jr=n(Fi,"DIV",{class:!0});var Ti=s(Jr);T(Ck.$$.fragment,Ti),GZr=i(Ti),m6e=n(Ti,"P",{});var iJt=s(m6e);OZr=r(iJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iJt.forEach(t),VZr=i(Ti),kn=n(Ti,"P",{});var L7=s(kn);XZr=r(L7,"The model class to instantiate is selected based on the "),g6e=n(L7,"CODE",{});var dJt=s(g6e);zZr=r(dJt,"model_type"),dJt.forEach(t),WZr=r(L7,` property of the config object (either
passed as an argument or loaded from `),h6e=n(L7,"CODE",{});var cJt=s(h6e);QZr=r(cJt,"pretrained_model_name_or_path"),cJt.forEach(t),HZr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(L7,"CODE",{});var fJt=s(p6e);UZr=r(fJt,"pretrained_model_name_or_path"),fJt.forEach(t),JZr=r(L7,":"),L7.forEach(t),YZr=i(Ti),ke=n(Ti,"UL",{});var je=s(ke);tw=n(je,"LI",{});var jze=s(tw);_6e=n(jze,"STRONG",{});var mJt=s(_6e);KZr=r(mJt,"bart"),mJt.forEach(t),ZZr=r(jze," \u2014 "),Dre=n(jze,"A",{href:!0});var gJt=s(Dre);eet=r(gJt,"FlaxBartForConditionalGeneration"),gJt.forEach(t),oet=r(jze," (BART model)"),jze.forEach(t),ret=i(je),aw=n(je,"LI",{});var Dze=s(aw);u6e=n(Dze,"STRONG",{});var hJt=s(u6e);tet=r(hJt,"blenderbot"),hJt.forEach(t),aet=r(Dze," \u2014 "),Gre=n(Dze,"A",{href:!0});var pJt=s(Gre);net=r(pJt,"FlaxBlenderbotForConditionalGeneration"),pJt.forEach(t),set=r(Dze," (Blenderbot model)"),Dze.forEach(t),iet=i(je),nw=n(je,"LI",{});var Gze=s(nw);b6e=n(Gze,"STRONG",{});var _Jt=s(b6e);det=r(_Jt,"blenderbot-small"),_Jt.forEach(t),cet=r(Gze," \u2014 "),Ore=n(Gze,"A",{href:!0});var uJt=s(Ore);fet=r(uJt,"FlaxBlenderbotSmallForConditionalGeneration"),uJt.forEach(t),met=r(Gze," (BlenderbotSmall model)"),Gze.forEach(t),get=i(je),sw=n(je,"LI",{});var Oze=s(sw);v6e=n(Oze,"STRONG",{});var bJt=s(v6e);het=r(bJt,"encoder-decoder"),bJt.forEach(t),pet=r(Oze," \u2014 "),Vre=n(Oze,"A",{href:!0});var vJt=s(Vre);_et=r(vJt,"FlaxEncoderDecoderModel"),vJt.forEach(t),uet=r(Oze," (Encoder decoder model)"),Oze.forEach(t),bet=i(je),lw=n(je,"LI",{});var Vze=s(lw);F6e=n(Vze,"STRONG",{});var FJt=s(F6e);vet=r(FJt,"longt5"),FJt.forEach(t),Fet=r(Vze," \u2014 "),Xre=n(Vze,"A",{href:!0});var TJt=s(Xre);Tet=r(TJt,"FlaxLongT5ForConditionalGeneration"),TJt.forEach(t),Met=r(Vze," (LongT5 model)"),Vze.forEach(t),Eet=i(je),iw=n(je,"LI",{});var Xze=s(iw);T6e=n(Xze,"STRONG",{});var MJt=s(T6e);Cet=r(MJt,"marian"),MJt.forEach(t),wet=r(Xze," \u2014 "),zre=n(Xze,"A",{href:!0});var EJt=s(zre);Aet=r(EJt,"FlaxMarianMTModel"),EJt.forEach(t),Let=r(Xze," (Marian model)"),Xze.forEach(t),yet=i(je),dw=n(je,"LI",{});var zze=s(dw);M6e=n(zze,"STRONG",{});var CJt=s(M6e);xet=r(CJt,"mbart"),CJt.forEach(t),$et=r(zze," \u2014 "),Wre=n(zze,"A",{href:!0});var wJt=s(Wre);ket=r(wJt,"FlaxMBartForConditionalGeneration"),wJt.forEach(t),Set=r(zze," (mBART model)"),zze.forEach(t),Ret=i(je),cw=n(je,"LI",{});var Wze=s(cw);E6e=n(Wze,"STRONG",{});var AJt=s(E6e);Pet=r(AJt,"mt5"),AJt.forEach(t),Bet=r(Wze," \u2014 "),Qre=n(Wze,"A",{href:!0});var LJt=s(Qre);Iet=r(LJt,"FlaxMT5ForConditionalGeneration"),LJt.forEach(t),Net=r(Wze," (MT5 model)"),Wze.forEach(t),qet=i(je),fw=n(je,"LI",{});var Qze=s(fw);C6e=n(Qze,"STRONG",{});var yJt=s(C6e);jet=r(yJt,"pegasus"),yJt.forEach(t),Det=r(Qze," \u2014 "),Hre=n(Qze,"A",{href:!0});var xJt=s(Hre);Get=r(xJt,"FlaxPegasusForConditionalGeneration"),xJt.forEach(t),Oet=r(Qze," (Pegasus model)"),Qze.forEach(t),Vet=i(je),mw=n(je,"LI",{});var Hze=s(mw);w6e=n(Hze,"STRONG",{});var $Jt=s(w6e);Xet=r($Jt,"t5"),$Jt.forEach(t),zet=r(Hze," \u2014 "),Ure=n(Hze,"A",{href:!0});var kJt=s(Ure);Wet=r(kJt,"FlaxT5ForConditionalGeneration"),kJt.forEach(t),Qet=r(Hze," (T5 model)"),Hze.forEach(t),je.forEach(t),Het=i(Ti),T(gw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),yHe=i(f),Tf=n(f,"H2",{class:!0});var jJe=s(Tf);hw=n(jJe,"A",{id:!0,class:!0,href:!0});var SJt=s(hw);A6e=n(SJt,"SPAN",{});var RJt=s(A6e);T(wk.$$.fragment,RJt),RJt.forEach(t),SJt.forEach(t),Uet=i(jJe),L6e=n(jJe,"SPAN",{});var PJt=s(L6e);Jet=r(PJt,"FlaxAutoModelForSequenceClassification"),PJt.forEach(t),jJe.forEach(t),xHe=i(f),Er=n(f,"DIV",{class:!0});var Mi=s(Er);T(Ak.$$.fragment,Mi),Yet=i(Mi),Mf=n(Mi,"P",{});var qne=s(Mf);Ket=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Jre=n(qne,"A",{href:!0});var BJt=s(Jre);Zet=r(BJt,"from_pretrained()"),BJt.forEach(t),eot=r(qne," class method or the "),Yre=n(qne,"A",{href:!0});var IJt=s(Yre);oot=r(IJt,"from_config()"),IJt.forEach(t),rot=r(qne,` class
method.`),qne.forEach(t),tot=i(Mi),Lk=n(Mi,"P",{});var DJe=s(Lk);aot=r(DJe,"This class cannot be instantiated directly using "),y6e=n(DJe,"CODE",{});var NJt=s(y6e);not=r(NJt,"__init__()"),NJt.forEach(t),sot=r(DJe," (throws an error)."),DJe.forEach(t),lot=i(Mi),oa=n(Mi,"DIV",{class:!0});var y7=s(oa);T(yk.$$.fragment,y7),iot=i(y7),x6e=n(y7,"P",{});var qJt=s(x6e);dot=r(qJt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qJt.forEach(t),cot=i(y7),Ef=n(y7,"P",{});var jne=s(Ef);fot=r(jne,`Note:
Loading a model from its configuration file does `),$6e=n(jne,"STRONG",{});var jJt=s($6e);mot=r(jJt,"not"),jJt.forEach(t),got=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kre=n(jne,"A",{href:!0});var DJt=s(Kre);hot=r(DJt,"from_pretrained()"),DJt.forEach(t),pot=r(jne," to load the model weights."),jne.forEach(t),_ot=i(y7),T(pw.$$.fragment,y7),y7.forEach(t),uot=i(Mi),Yr=n(Mi,"DIV",{class:!0});var Ei=s(Yr);T(xk.$$.fragment,Ei),bot=i(Ei),k6e=n(Ei,"P",{});var GJt=s(k6e);vot=r(GJt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GJt.forEach(t),Fot=i(Ei),Sn=n(Ei,"P",{});var x7=s(Sn);Tot=r(x7,"The model class to instantiate is selected based on the "),S6e=n(x7,"CODE",{});var OJt=s(S6e);Mot=r(OJt,"model_type"),OJt.forEach(t),Eot=r(x7,` property of the config object (either
passed as an argument or loaded from `),R6e=n(x7,"CODE",{});var VJt=s(R6e);Cot=r(VJt,"pretrained_model_name_or_path"),VJt.forEach(t),wot=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(x7,"CODE",{});var XJt=s(P6e);Aot=r(XJt,"pretrained_model_name_or_path"),XJt.forEach(t),Lot=r(x7,":"),x7.forEach(t),yot=i(Ei),Se=n(Ei,"UL",{});var De=s(Se);_w=n(De,"LI",{});var Uze=s(_w);B6e=n(Uze,"STRONG",{});var zJt=s(B6e);xot=r(zJt,"albert"),zJt.forEach(t),$ot=r(Uze," \u2014 "),Zre=n(Uze,"A",{href:!0});var WJt=s(Zre);kot=r(WJt,"FlaxAlbertForSequenceClassification"),WJt.forEach(t),Sot=r(Uze," (ALBERT model)"),Uze.forEach(t),Rot=i(De),uw=n(De,"LI",{});var Jze=s(uw);I6e=n(Jze,"STRONG",{});var QJt=s(I6e);Pot=r(QJt,"bart"),QJt.forEach(t),Bot=r(Jze," \u2014 "),ete=n(Jze,"A",{href:!0});var HJt=s(ete);Iot=r(HJt,"FlaxBartForSequenceClassification"),HJt.forEach(t),Not=r(Jze," (BART model)"),Jze.forEach(t),qot=i(De),bw=n(De,"LI",{});var Yze=s(bw);N6e=n(Yze,"STRONG",{});var UJt=s(N6e);jot=r(UJt,"bert"),UJt.forEach(t),Dot=r(Yze," \u2014 "),ote=n(Yze,"A",{href:!0});var JJt=s(ote);Got=r(JJt,"FlaxBertForSequenceClassification"),JJt.forEach(t),Oot=r(Yze," (BERT model)"),Yze.forEach(t),Vot=i(De),vw=n(De,"LI",{});var Kze=s(vw);q6e=n(Kze,"STRONG",{});var YJt=s(q6e);Xot=r(YJt,"big_bird"),YJt.forEach(t),zot=r(Kze," \u2014 "),rte=n(Kze,"A",{href:!0});var KJt=s(rte);Wot=r(KJt,"FlaxBigBirdForSequenceClassification"),KJt.forEach(t),Qot=r(Kze," (BigBird model)"),Kze.forEach(t),Hot=i(De),Fw=n(De,"LI",{});var Zze=s(Fw);j6e=n(Zze,"STRONG",{});var ZJt=s(j6e);Uot=r(ZJt,"distilbert"),ZJt.forEach(t),Jot=r(Zze," \u2014 "),tte=n(Zze,"A",{href:!0});var eYt=s(tte);Yot=r(eYt,"FlaxDistilBertForSequenceClassification"),eYt.forEach(t),Kot=r(Zze," (DistilBERT model)"),Zze.forEach(t),Zot=i(De),Tw=n(De,"LI",{});var eWe=s(Tw);D6e=n(eWe,"STRONG",{});var oYt=s(D6e);ert=r(oYt,"electra"),oYt.forEach(t),ort=r(eWe," \u2014 "),ate=n(eWe,"A",{href:!0});var rYt=s(ate);rrt=r(rYt,"FlaxElectraForSequenceClassification"),rYt.forEach(t),trt=r(eWe," (ELECTRA model)"),eWe.forEach(t),art=i(De),Mw=n(De,"LI",{});var oWe=s(Mw);G6e=n(oWe,"STRONG",{});var tYt=s(G6e);nrt=r(tYt,"mbart"),tYt.forEach(t),srt=r(oWe," \u2014 "),nte=n(oWe,"A",{href:!0});var aYt=s(nte);lrt=r(aYt,"FlaxMBartForSequenceClassification"),aYt.forEach(t),irt=r(oWe," (mBART model)"),oWe.forEach(t),drt=i(De),Ew=n(De,"LI",{});var rWe=s(Ew);O6e=n(rWe,"STRONG",{});var nYt=s(O6e);crt=r(nYt,"roberta"),nYt.forEach(t),frt=r(rWe," \u2014 "),ste=n(rWe,"A",{href:!0});var sYt=s(ste);mrt=r(sYt,"FlaxRobertaForSequenceClassification"),sYt.forEach(t),grt=r(rWe," (RoBERTa model)"),rWe.forEach(t),hrt=i(De),Cw=n(De,"LI",{});var tWe=s(Cw);V6e=n(tWe,"STRONG",{});var lYt=s(V6e);prt=r(lYt,"roformer"),lYt.forEach(t),_rt=r(tWe," \u2014 "),lte=n(tWe,"A",{href:!0});var iYt=s(lte);urt=r(iYt,"FlaxRoFormerForSequenceClassification"),iYt.forEach(t),brt=r(tWe," (RoFormer model)"),tWe.forEach(t),vrt=i(De),ww=n(De,"LI",{});var aWe=s(ww);X6e=n(aWe,"STRONG",{});var dYt=s(X6e);Frt=r(dYt,"xlm-roberta"),dYt.forEach(t),Trt=r(aWe," \u2014 "),ite=n(aWe,"A",{href:!0});var cYt=s(ite);Mrt=r(cYt,"FlaxXLMRobertaForSequenceClassification"),cYt.forEach(t),Ert=r(aWe," (XLM-RoBERTa model)"),aWe.forEach(t),De.forEach(t),Crt=i(Ei),T(Aw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),$He=i(f),Cf=n(f,"H2",{class:!0});var GJe=s(Cf);Lw=n(GJe,"A",{id:!0,class:!0,href:!0});var fYt=s(Lw);z6e=n(fYt,"SPAN",{});var mYt=s(z6e);T($k.$$.fragment,mYt),mYt.forEach(t),fYt.forEach(t),wrt=i(GJe),W6e=n(GJe,"SPAN",{});var gYt=s(W6e);Art=r(gYt,"FlaxAutoModelForQuestionAnswering"),gYt.forEach(t),GJe.forEach(t),kHe=i(f),Cr=n(f,"DIV",{class:!0});var Ci=s(Cr);T(kk.$$.fragment,Ci),Lrt=i(Ci),wf=n(Ci,"P",{});var Dne=s(wf);yrt=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dte=n(Dne,"A",{href:!0});var hYt=s(dte);xrt=r(hYt,"from_pretrained()"),hYt.forEach(t),$rt=r(Dne," class method or the "),cte=n(Dne,"A",{href:!0});var pYt=s(cte);krt=r(pYt,"from_config()"),pYt.forEach(t),Srt=r(Dne,` class
method.`),Dne.forEach(t),Rrt=i(Ci),Sk=n(Ci,"P",{});var OJe=s(Sk);Prt=r(OJe,"This class cannot be instantiated directly using "),Q6e=n(OJe,"CODE",{});var _Yt=s(Q6e);Brt=r(_Yt,"__init__()"),_Yt.forEach(t),Irt=r(OJe," (throws an error)."),OJe.forEach(t),Nrt=i(Ci),ra=n(Ci,"DIV",{class:!0});var $7=s(ra);T(Rk.$$.fragment,$7),qrt=i($7),H6e=n($7,"P",{});var uYt=s(H6e);jrt=r(uYt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uYt.forEach(t),Drt=i($7),Af=n($7,"P",{});var Gne=s(Af);Grt=r(Gne,`Note:
Loading a model from its configuration file does `),U6e=n(Gne,"STRONG",{});var bYt=s(U6e);Ort=r(bYt,"not"),bYt.forEach(t),Vrt=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fte=n(Gne,"A",{href:!0});var vYt=s(fte);Xrt=r(vYt,"from_pretrained()"),vYt.forEach(t),zrt=r(Gne," to load the model weights."),Gne.forEach(t),Wrt=i($7),T(yw.$$.fragment,$7),$7.forEach(t),Qrt=i(Ci),Kr=n(Ci,"DIV",{class:!0});var wi=s(Kr);T(Pk.$$.fragment,wi),Hrt=i(wi),J6e=n(wi,"P",{});var FYt=s(J6e);Urt=r(FYt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FYt.forEach(t),Jrt=i(wi),Rn=n(wi,"P",{});var k7=s(Rn);Yrt=r(k7,"The model class to instantiate is selected based on the "),Y6e=n(k7,"CODE",{});var TYt=s(Y6e);Krt=r(TYt,"model_type"),TYt.forEach(t),Zrt=r(k7,` property of the config object (either
passed as an argument or loaded from `),K6e=n(k7,"CODE",{});var MYt=s(K6e);ett=r(MYt,"pretrained_model_name_or_path"),MYt.forEach(t),ott=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(k7,"CODE",{});var EYt=s(Z6e);rtt=r(EYt,"pretrained_model_name_or_path"),EYt.forEach(t),ttt=r(k7,":"),k7.forEach(t),att=i(wi),Re=n(wi,"UL",{});var Ge=s(Re);xw=n(Ge,"LI",{});var nWe=s(xw);eAe=n(nWe,"STRONG",{});var CYt=s(eAe);ntt=r(CYt,"albert"),CYt.forEach(t),stt=r(nWe," \u2014 "),mte=n(nWe,"A",{href:!0});var wYt=s(mte);ltt=r(wYt,"FlaxAlbertForQuestionAnswering"),wYt.forEach(t),itt=r(nWe," (ALBERT model)"),nWe.forEach(t),dtt=i(Ge),$w=n(Ge,"LI",{});var sWe=s($w);oAe=n(sWe,"STRONG",{});var AYt=s(oAe);ctt=r(AYt,"bart"),AYt.forEach(t),ftt=r(sWe," \u2014 "),gte=n(sWe,"A",{href:!0});var LYt=s(gte);mtt=r(LYt,"FlaxBartForQuestionAnswering"),LYt.forEach(t),gtt=r(sWe," (BART model)"),sWe.forEach(t),htt=i(Ge),kw=n(Ge,"LI",{});var lWe=s(kw);rAe=n(lWe,"STRONG",{});var yYt=s(rAe);ptt=r(yYt,"bert"),yYt.forEach(t),_tt=r(lWe," \u2014 "),hte=n(lWe,"A",{href:!0});var xYt=s(hte);utt=r(xYt,"FlaxBertForQuestionAnswering"),xYt.forEach(t),btt=r(lWe," (BERT model)"),lWe.forEach(t),vtt=i(Ge),Sw=n(Ge,"LI",{});var iWe=s(Sw);tAe=n(iWe,"STRONG",{});var $Yt=s(tAe);Ftt=r($Yt,"big_bird"),$Yt.forEach(t),Ttt=r(iWe," \u2014 "),pte=n(iWe,"A",{href:!0});var kYt=s(pte);Mtt=r(kYt,"FlaxBigBirdForQuestionAnswering"),kYt.forEach(t),Ett=r(iWe," (BigBird model)"),iWe.forEach(t),Ctt=i(Ge),Rw=n(Ge,"LI",{});var dWe=s(Rw);aAe=n(dWe,"STRONG",{});var SYt=s(aAe);wtt=r(SYt,"distilbert"),SYt.forEach(t),Att=r(dWe," \u2014 "),_te=n(dWe,"A",{href:!0});var RYt=s(_te);Ltt=r(RYt,"FlaxDistilBertForQuestionAnswering"),RYt.forEach(t),ytt=r(dWe," (DistilBERT model)"),dWe.forEach(t),xtt=i(Ge),Pw=n(Ge,"LI",{});var cWe=s(Pw);nAe=n(cWe,"STRONG",{});var PYt=s(nAe);$tt=r(PYt,"electra"),PYt.forEach(t),ktt=r(cWe," \u2014 "),ute=n(cWe,"A",{href:!0});var BYt=s(ute);Stt=r(BYt,"FlaxElectraForQuestionAnswering"),BYt.forEach(t),Rtt=r(cWe," (ELECTRA model)"),cWe.forEach(t),Ptt=i(Ge),Bw=n(Ge,"LI",{});var fWe=s(Bw);sAe=n(fWe,"STRONG",{});var IYt=s(sAe);Btt=r(IYt,"mbart"),IYt.forEach(t),Itt=r(fWe," \u2014 "),bte=n(fWe,"A",{href:!0});var NYt=s(bte);Ntt=r(NYt,"FlaxMBartForQuestionAnswering"),NYt.forEach(t),qtt=r(fWe," (mBART model)"),fWe.forEach(t),jtt=i(Ge),Iw=n(Ge,"LI",{});var mWe=s(Iw);lAe=n(mWe,"STRONG",{});var qYt=s(lAe);Dtt=r(qYt,"roberta"),qYt.forEach(t),Gtt=r(mWe," \u2014 "),vte=n(mWe,"A",{href:!0});var jYt=s(vte);Ott=r(jYt,"FlaxRobertaForQuestionAnswering"),jYt.forEach(t),Vtt=r(mWe," (RoBERTa model)"),mWe.forEach(t),Xtt=i(Ge),Nw=n(Ge,"LI",{});var gWe=s(Nw);iAe=n(gWe,"STRONG",{});var DYt=s(iAe);ztt=r(DYt,"roformer"),DYt.forEach(t),Wtt=r(gWe," \u2014 "),Fte=n(gWe,"A",{href:!0});var GYt=s(Fte);Qtt=r(GYt,"FlaxRoFormerForQuestionAnswering"),GYt.forEach(t),Htt=r(gWe," (RoFormer model)"),gWe.forEach(t),Utt=i(Ge),qw=n(Ge,"LI",{});var hWe=s(qw);dAe=n(hWe,"STRONG",{});var OYt=s(dAe);Jtt=r(OYt,"xlm-roberta"),OYt.forEach(t),Ytt=r(hWe," \u2014 "),Tte=n(hWe,"A",{href:!0});var VYt=s(Tte);Ktt=r(VYt,"FlaxXLMRobertaForQuestionAnswering"),VYt.forEach(t),Ztt=r(hWe," (XLM-RoBERTa model)"),hWe.forEach(t),Ge.forEach(t),eat=i(wi),T(jw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),SHe=i(f),Lf=n(f,"H2",{class:!0});var VJe=s(Lf);Dw=n(VJe,"A",{id:!0,class:!0,href:!0});var XYt=s(Dw);cAe=n(XYt,"SPAN",{});var zYt=s(cAe);T(Bk.$$.fragment,zYt),zYt.forEach(t),XYt.forEach(t),oat=i(VJe),fAe=n(VJe,"SPAN",{});var WYt=s(fAe);rat=r(WYt,"FlaxAutoModelForTokenClassification"),WYt.forEach(t),VJe.forEach(t),RHe=i(f),wr=n(f,"DIV",{class:!0});var Ai=s(wr);T(Ik.$$.fragment,Ai),tat=i(Ai),yf=n(Ai,"P",{});var One=s(yf);aat=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mte=n(One,"A",{href:!0});var QYt=s(Mte);nat=r(QYt,"from_pretrained()"),QYt.forEach(t),sat=r(One," class method or the "),Ete=n(One,"A",{href:!0});var HYt=s(Ete);lat=r(HYt,"from_config()"),HYt.forEach(t),iat=r(One,` class
method.`),One.forEach(t),dat=i(Ai),Nk=n(Ai,"P",{});var XJe=s(Nk);cat=r(XJe,"This class cannot be instantiated directly using "),mAe=n(XJe,"CODE",{});var UYt=s(mAe);fat=r(UYt,"__init__()"),UYt.forEach(t),mat=r(XJe," (throws an error)."),XJe.forEach(t),gat=i(Ai),ta=n(Ai,"DIV",{class:!0});var S7=s(ta);T(qk.$$.fragment,S7),hat=i(S7),gAe=n(S7,"P",{});var JYt=s(gAe);pat=r(JYt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JYt.forEach(t),_at=i(S7),xf=n(S7,"P",{});var Vne=s(xf);uat=r(Vne,`Note:
Loading a model from its configuration file does `),hAe=n(Vne,"STRONG",{});var YYt=s(hAe);bat=r(YYt,"not"),YYt.forEach(t),vat=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=n(Vne,"A",{href:!0});var KYt=s(Cte);Fat=r(KYt,"from_pretrained()"),KYt.forEach(t),Tat=r(Vne," to load the model weights."),Vne.forEach(t),Mat=i(S7),T(Gw.$$.fragment,S7),S7.forEach(t),Eat=i(Ai),Zr=n(Ai,"DIV",{class:!0});var Li=s(Zr);T(jk.$$.fragment,Li),Cat=i(Li),pAe=n(Li,"P",{});var ZYt=s(pAe);wat=r(ZYt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZYt.forEach(t),Aat=i(Li),Pn=n(Li,"P",{});var R7=s(Pn);Lat=r(R7,"The model class to instantiate is selected based on the "),_Ae=n(R7,"CODE",{});var eKt=s(_Ae);yat=r(eKt,"model_type"),eKt.forEach(t),xat=r(R7,` property of the config object (either
passed as an argument or loaded from `),uAe=n(R7,"CODE",{});var oKt=s(uAe);$at=r(oKt,"pretrained_model_name_or_path"),oKt.forEach(t),kat=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bAe=n(R7,"CODE",{});var rKt=s(bAe);Sat=r(rKt,"pretrained_model_name_or_path"),rKt.forEach(t),Rat=r(R7,":"),R7.forEach(t),Pat=i(Li),Xe=n(Li,"UL",{});var Co=s(Xe);Ow=n(Co,"LI",{});var pWe=s(Ow);vAe=n(pWe,"STRONG",{});var tKt=s(vAe);Bat=r(tKt,"albert"),tKt.forEach(t),Iat=r(pWe," \u2014 "),wte=n(pWe,"A",{href:!0});var aKt=s(wte);Nat=r(aKt,"FlaxAlbertForTokenClassification"),aKt.forEach(t),qat=r(pWe," (ALBERT model)"),pWe.forEach(t),jat=i(Co),Vw=n(Co,"LI",{});var _We=s(Vw);FAe=n(_We,"STRONG",{});var nKt=s(FAe);Dat=r(nKt,"bert"),nKt.forEach(t),Gat=r(_We," \u2014 "),Ate=n(_We,"A",{href:!0});var sKt=s(Ate);Oat=r(sKt,"FlaxBertForTokenClassification"),sKt.forEach(t),Vat=r(_We," (BERT model)"),_We.forEach(t),Xat=i(Co),Xw=n(Co,"LI",{});var uWe=s(Xw);TAe=n(uWe,"STRONG",{});var lKt=s(TAe);zat=r(lKt,"big_bird"),lKt.forEach(t),Wat=r(uWe," \u2014 "),Lte=n(uWe,"A",{href:!0});var iKt=s(Lte);Qat=r(iKt,"FlaxBigBirdForTokenClassification"),iKt.forEach(t),Hat=r(uWe," (BigBird model)"),uWe.forEach(t),Uat=i(Co),zw=n(Co,"LI",{});var bWe=s(zw);MAe=n(bWe,"STRONG",{});var dKt=s(MAe);Jat=r(dKt,"distilbert"),dKt.forEach(t),Yat=r(bWe," \u2014 "),yte=n(bWe,"A",{href:!0});var cKt=s(yte);Kat=r(cKt,"FlaxDistilBertForTokenClassification"),cKt.forEach(t),Zat=r(bWe," (DistilBERT model)"),bWe.forEach(t),ent=i(Co),Ww=n(Co,"LI",{});var vWe=s(Ww);EAe=n(vWe,"STRONG",{});var fKt=s(EAe);ont=r(fKt,"electra"),fKt.forEach(t),rnt=r(vWe," \u2014 "),xte=n(vWe,"A",{href:!0});var mKt=s(xte);tnt=r(mKt,"FlaxElectraForTokenClassification"),mKt.forEach(t),ant=r(vWe," (ELECTRA model)"),vWe.forEach(t),nnt=i(Co),Qw=n(Co,"LI",{});var FWe=s(Qw);CAe=n(FWe,"STRONG",{});var gKt=s(CAe);snt=r(gKt,"roberta"),gKt.forEach(t),lnt=r(FWe," \u2014 "),$te=n(FWe,"A",{href:!0});var hKt=s($te);int=r(hKt,"FlaxRobertaForTokenClassification"),hKt.forEach(t),dnt=r(FWe," (RoBERTa model)"),FWe.forEach(t),cnt=i(Co),Hw=n(Co,"LI",{});var TWe=s(Hw);wAe=n(TWe,"STRONG",{});var pKt=s(wAe);fnt=r(pKt,"roformer"),pKt.forEach(t),mnt=r(TWe," \u2014 "),kte=n(TWe,"A",{href:!0});var _Kt=s(kte);gnt=r(_Kt,"FlaxRoFormerForTokenClassification"),_Kt.forEach(t),hnt=r(TWe," (RoFormer model)"),TWe.forEach(t),pnt=i(Co),Uw=n(Co,"LI",{});var MWe=s(Uw);AAe=n(MWe,"STRONG",{});var uKt=s(AAe);_nt=r(uKt,"xlm-roberta"),uKt.forEach(t),unt=r(MWe," \u2014 "),Ste=n(MWe,"A",{href:!0});var bKt=s(Ste);bnt=r(bKt,"FlaxXLMRobertaForTokenClassification"),bKt.forEach(t),vnt=r(MWe," (XLM-RoBERTa model)"),MWe.forEach(t),Co.forEach(t),Fnt=i(Li),T(Jw.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),PHe=i(f),$f=n(f,"H2",{class:!0});var zJe=s($f);Yw=n(zJe,"A",{id:!0,class:!0,href:!0});var vKt=s(Yw);LAe=n(vKt,"SPAN",{});var FKt=s(LAe);T(Dk.$$.fragment,FKt),FKt.forEach(t),vKt.forEach(t),Tnt=i(zJe),yAe=n(zJe,"SPAN",{});var TKt=s(yAe);Mnt=r(TKt,"FlaxAutoModelForMultipleChoice"),TKt.forEach(t),zJe.forEach(t),BHe=i(f),Ar=n(f,"DIV",{class:!0});var yi=s(Ar);T(Gk.$$.fragment,yi),Ent=i(yi),kf=n(yi,"P",{});var Xne=s(kf);Cnt=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rte=n(Xne,"A",{href:!0});var MKt=s(Rte);wnt=r(MKt,"from_pretrained()"),MKt.forEach(t),Ant=r(Xne," class method or the "),Pte=n(Xne,"A",{href:!0});var EKt=s(Pte);Lnt=r(EKt,"from_config()"),EKt.forEach(t),ynt=r(Xne,` class
method.`),Xne.forEach(t),xnt=i(yi),Ok=n(yi,"P",{});var WJe=s(Ok);$nt=r(WJe,"This class cannot be instantiated directly using "),xAe=n(WJe,"CODE",{});var CKt=s(xAe);knt=r(CKt,"__init__()"),CKt.forEach(t),Snt=r(WJe," (throws an error)."),WJe.forEach(t),Rnt=i(yi),aa=n(yi,"DIV",{class:!0});var P7=s(aa);T(Vk.$$.fragment,P7),Pnt=i(P7),$Ae=n(P7,"P",{});var wKt=s($Ae);Bnt=r(wKt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wKt.forEach(t),Int=i(P7),Sf=n(P7,"P",{});var zne=s(Sf);Nnt=r(zne,`Note:
Loading a model from its configuration file does `),kAe=n(zne,"STRONG",{});var AKt=s(kAe);qnt=r(AKt,"not"),AKt.forEach(t),jnt=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bte=n(zne,"A",{href:!0});var LKt=s(Bte);Dnt=r(LKt,"from_pretrained()"),LKt.forEach(t),Gnt=r(zne," to load the model weights."),zne.forEach(t),Ont=i(P7),T(Kw.$$.fragment,P7),P7.forEach(t),Vnt=i(yi),et=n(yi,"DIV",{class:!0});var xi=s(et);T(Xk.$$.fragment,xi),Xnt=i(xi),SAe=n(xi,"P",{});var yKt=s(SAe);znt=r(yKt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yKt.forEach(t),Wnt=i(xi),Bn=n(xi,"P",{});var B7=s(Bn);Qnt=r(B7,"The model class to instantiate is selected based on the "),RAe=n(B7,"CODE",{});var xKt=s(RAe);Hnt=r(xKt,"model_type"),xKt.forEach(t),Unt=r(B7,` property of the config object (either
passed as an argument or loaded from `),PAe=n(B7,"CODE",{});var $Kt=s(PAe);Jnt=r($Kt,"pretrained_model_name_or_path"),$Kt.forEach(t),Ynt=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BAe=n(B7,"CODE",{});var kKt=s(BAe);Knt=r(kKt,"pretrained_model_name_or_path"),kKt.forEach(t),Znt=r(B7,":"),B7.forEach(t),est=i(xi),ze=n(xi,"UL",{});var wo=s(ze);Zw=n(wo,"LI",{});var EWe=s(Zw);IAe=n(EWe,"STRONG",{});var SKt=s(IAe);ost=r(SKt,"albert"),SKt.forEach(t),rst=r(EWe," \u2014 "),Ite=n(EWe,"A",{href:!0});var RKt=s(Ite);tst=r(RKt,"FlaxAlbertForMultipleChoice"),RKt.forEach(t),ast=r(EWe," (ALBERT model)"),EWe.forEach(t),nst=i(wo),e6=n(wo,"LI",{});var CWe=s(e6);NAe=n(CWe,"STRONG",{});var PKt=s(NAe);sst=r(PKt,"bert"),PKt.forEach(t),lst=r(CWe," \u2014 "),Nte=n(CWe,"A",{href:!0});var BKt=s(Nte);ist=r(BKt,"FlaxBertForMultipleChoice"),BKt.forEach(t),dst=r(CWe," (BERT model)"),CWe.forEach(t),cst=i(wo),o6=n(wo,"LI",{});var wWe=s(o6);qAe=n(wWe,"STRONG",{});var IKt=s(qAe);fst=r(IKt,"big_bird"),IKt.forEach(t),mst=r(wWe," \u2014 "),qte=n(wWe,"A",{href:!0});var NKt=s(qte);gst=r(NKt,"FlaxBigBirdForMultipleChoice"),NKt.forEach(t),hst=r(wWe," (BigBird model)"),wWe.forEach(t),pst=i(wo),r6=n(wo,"LI",{});var AWe=s(r6);jAe=n(AWe,"STRONG",{});var qKt=s(jAe);_st=r(qKt,"distilbert"),qKt.forEach(t),ust=r(AWe," \u2014 "),jte=n(AWe,"A",{href:!0});var jKt=s(jte);bst=r(jKt,"FlaxDistilBertForMultipleChoice"),jKt.forEach(t),vst=r(AWe," (DistilBERT model)"),AWe.forEach(t),Fst=i(wo),t6=n(wo,"LI",{});var LWe=s(t6);DAe=n(LWe,"STRONG",{});var DKt=s(DAe);Tst=r(DKt,"electra"),DKt.forEach(t),Mst=r(LWe," \u2014 "),Dte=n(LWe,"A",{href:!0});var GKt=s(Dte);Est=r(GKt,"FlaxElectraForMultipleChoice"),GKt.forEach(t),Cst=r(LWe," (ELECTRA model)"),LWe.forEach(t),wst=i(wo),a6=n(wo,"LI",{});var yWe=s(a6);GAe=n(yWe,"STRONG",{});var OKt=s(GAe);Ast=r(OKt,"roberta"),OKt.forEach(t),Lst=r(yWe," \u2014 "),Gte=n(yWe,"A",{href:!0});var VKt=s(Gte);yst=r(VKt,"FlaxRobertaForMultipleChoice"),VKt.forEach(t),xst=r(yWe," (RoBERTa model)"),yWe.forEach(t),$st=i(wo),n6=n(wo,"LI",{});var xWe=s(n6);OAe=n(xWe,"STRONG",{});var XKt=s(OAe);kst=r(XKt,"roformer"),XKt.forEach(t),Sst=r(xWe," \u2014 "),Ote=n(xWe,"A",{href:!0});var zKt=s(Ote);Rst=r(zKt,"FlaxRoFormerForMultipleChoice"),zKt.forEach(t),Pst=r(xWe," (RoFormer model)"),xWe.forEach(t),Bst=i(wo),s6=n(wo,"LI",{});var $We=s(s6);VAe=n($We,"STRONG",{});var WKt=s(VAe);Ist=r(WKt,"xlm-roberta"),WKt.forEach(t),Nst=r($We," \u2014 "),Vte=n($We,"A",{href:!0});var QKt=s(Vte);qst=r(QKt,"FlaxXLMRobertaForMultipleChoice"),QKt.forEach(t),jst=r($We," (XLM-RoBERTa model)"),$We.forEach(t),wo.forEach(t),Dst=i(xi),T(l6.$$.fragment,xi),xi.forEach(t),yi.forEach(t),IHe=i(f),Rf=n(f,"H2",{class:!0});var QJe=s(Rf);i6=n(QJe,"A",{id:!0,class:!0,href:!0});var HKt=s(i6);XAe=n(HKt,"SPAN",{});var UKt=s(XAe);T(zk.$$.fragment,UKt),UKt.forEach(t),HKt.forEach(t),Gst=i(QJe),zAe=n(QJe,"SPAN",{});var JKt=s(zAe);Ost=r(JKt,"FlaxAutoModelForNextSentencePrediction"),JKt.forEach(t),QJe.forEach(t),NHe=i(f),Lr=n(f,"DIV",{class:!0});var $i=s(Lr);T(Wk.$$.fragment,$i),Vst=i($i),Pf=n($i,"P",{});var Wne=s(Pf);Xst=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xte=n(Wne,"A",{href:!0});var YKt=s(Xte);zst=r(YKt,"from_pretrained()"),YKt.forEach(t),Wst=r(Wne," class method or the "),zte=n(Wne,"A",{href:!0});var KKt=s(zte);Qst=r(KKt,"from_config()"),KKt.forEach(t),Hst=r(Wne,` class
method.`),Wne.forEach(t),Ust=i($i),Qk=n($i,"P",{});var HJe=s(Qk);Jst=r(HJe,"This class cannot be instantiated directly using "),WAe=n(HJe,"CODE",{});var ZKt=s(WAe);Yst=r(ZKt,"__init__()"),ZKt.forEach(t),Kst=r(HJe," (throws an error)."),HJe.forEach(t),Zst=i($i),na=n($i,"DIV",{class:!0});var I7=s(na);T(Hk.$$.fragment,I7),elt=i(I7),QAe=n(I7,"P",{});var eZt=s(QAe);olt=r(eZt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eZt.forEach(t),rlt=i(I7),Bf=n(I7,"P",{});var Qne=s(Bf);tlt=r(Qne,`Note:
Loading a model from its configuration file does `),HAe=n(Qne,"STRONG",{});var oZt=s(HAe);alt=r(oZt,"not"),oZt.forEach(t),nlt=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wte=n(Qne,"A",{href:!0});var rZt=s(Wte);slt=r(rZt,"from_pretrained()"),rZt.forEach(t),llt=r(Qne," to load the model weights."),Qne.forEach(t),ilt=i(I7),T(d6.$$.fragment,I7),I7.forEach(t),dlt=i($i),ot=n($i,"DIV",{class:!0});var ki=s(ot);T(Uk.$$.fragment,ki),clt=i(ki),UAe=n(ki,"P",{});var tZt=s(UAe);flt=r(tZt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tZt.forEach(t),mlt=i(ki),In=n(ki,"P",{});var N7=s(In);glt=r(N7,"The model class to instantiate is selected based on the "),JAe=n(N7,"CODE",{});var aZt=s(JAe);hlt=r(aZt,"model_type"),aZt.forEach(t),plt=r(N7,` property of the config object (either
passed as an argument or loaded from `),YAe=n(N7,"CODE",{});var nZt=s(YAe);_lt=r(nZt,"pretrained_model_name_or_path"),nZt.forEach(t),ult=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KAe=n(N7,"CODE",{});var sZt=s(KAe);blt=r(sZt,"pretrained_model_name_or_path"),sZt.forEach(t),vlt=r(N7,":"),N7.forEach(t),Flt=i(ki),ZAe=n(ki,"UL",{});var lZt=s(ZAe);c6=n(lZt,"LI",{});var kWe=s(c6);e7e=n(kWe,"STRONG",{});var iZt=s(e7e);Tlt=r(iZt,"bert"),iZt.forEach(t),Mlt=r(kWe," \u2014 "),Qte=n(kWe,"A",{href:!0});var dZt=s(Qte);Elt=r(dZt,"FlaxBertForNextSentencePrediction"),dZt.forEach(t),Clt=r(kWe," (BERT model)"),kWe.forEach(t),lZt.forEach(t),wlt=i(ki),T(f6.$$.fragment,ki),ki.forEach(t),$i.forEach(t),qHe=i(f),If=n(f,"H2",{class:!0});var UJe=s(If);m6=n(UJe,"A",{id:!0,class:!0,href:!0});var cZt=s(m6);o7e=n(cZt,"SPAN",{});var fZt=s(o7e);T(Jk.$$.fragment,fZt),fZt.forEach(t),cZt.forEach(t),Alt=i(UJe),r7e=n(UJe,"SPAN",{});var mZt=s(r7e);Llt=r(mZt,"FlaxAutoModelForImageClassification"),mZt.forEach(t),UJe.forEach(t),jHe=i(f),yr=n(f,"DIV",{class:!0});var Si=s(yr);T(Yk.$$.fragment,Si),ylt=i(Si),Nf=n(Si,"P",{});var Hne=s(Nf);xlt=r(Hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hte=n(Hne,"A",{href:!0});var gZt=s(Hte);$lt=r(gZt,"from_pretrained()"),gZt.forEach(t),klt=r(Hne," class method or the "),Ute=n(Hne,"A",{href:!0});var hZt=s(Ute);Slt=r(hZt,"from_config()"),hZt.forEach(t),Rlt=r(Hne,` class
method.`),Hne.forEach(t),Plt=i(Si),Kk=n(Si,"P",{});var JJe=s(Kk);Blt=r(JJe,"This class cannot be instantiated directly using "),t7e=n(JJe,"CODE",{});var pZt=s(t7e);Ilt=r(pZt,"__init__()"),pZt.forEach(t),Nlt=r(JJe," (throws an error)."),JJe.forEach(t),qlt=i(Si),sa=n(Si,"DIV",{class:!0});var q7=s(sa);T(Zk.$$.fragment,q7),jlt=i(q7),a7e=n(q7,"P",{});var _Zt=s(a7e);Dlt=r(_Zt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Zt.forEach(t),Glt=i(q7),qf=n(q7,"P",{});var Une=s(qf);Olt=r(Une,`Note:
Loading a model from its configuration file does `),n7e=n(Une,"STRONG",{});var uZt=s(n7e);Vlt=r(uZt,"not"),uZt.forEach(t),Xlt=r(Une,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(Une,"A",{href:!0});var bZt=s(Jte);zlt=r(bZt,"from_pretrained()"),bZt.forEach(t),Wlt=r(Une," to load the model weights."),Une.forEach(t),Qlt=i(q7),T(g6.$$.fragment,q7),q7.forEach(t),Hlt=i(Si),rt=n(Si,"DIV",{class:!0});var Ri=s(rt);T(eS.$$.fragment,Ri),Ult=i(Ri),s7e=n(Ri,"P",{});var vZt=s(s7e);Jlt=r(vZt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vZt.forEach(t),Ylt=i(Ri),Nn=n(Ri,"P",{});var j7=s(Nn);Klt=r(j7,"The model class to instantiate is selected based on the "),l7e=n(j7,"CODE",{});var FZt=s(l7e);Zlt=r(FZt,"model_type"),FZt.forEach(t),eit=r(j7,` property of the config object (either
passed as an argument or loaded from `),i7e=n(j7,"CODE",{});var TZt=s(i7e);oit=r(TZt,"pretrained_model_name_or_path"),TZt.forEach(t),rit=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(j7,"CODE",{});var MZt=s(d7e);tit=r(MZt,"pretrained_model_name_or_path"),MZt.forEach(t),ait=r(j7,":"),j7.forEach(t),nit=i(Ri),oS=n(Ri,"UL",{});var YJe=s(oS);h6=n(YJe,"LI",{});var SWe=s(h6);c7e=n(SWe,"STRONG",{});var EZt=s(c7e);sit=r(EZt,"beit"),EZt.forEach(t),lit=r(SWe," \u2014 "),Yte=n(SWe,"A",{href:!0});var CZt=s(Yte);iit=r(CZt,"FlaxBeitForImageClassification"),CZt.forEach(t),dit=r(SWe," (BEiT model)"),SWe.forEach(t),cit=i(YJe),p6=n(YJe,"LI",{});var RWe=s(p6);f7e=n(RWe,"STRONG",{});var wZt=s(f7e);fit=r(wZt,"vit"),wZt.forEach(t),mit=r(RWe," \u2014 "),Kte=n(RWe,"A",{href:!0});var AZt=s(Kte);git=r(AZt,"FlaxViTForImageClassification"),AZt.forEach(t),hit=r(RWe," (ViT model)"),RWe.forEach(t),YJe.forEach(t),pit=i(Ri),T(_6.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),DHe=i(f),jf=n(f,"H2",{class:!0});var KJe=s(jf);u6=n(KJe,"A",{id:!0,class:!0,href:!0});var LZt=s(u6);m7e=n(LZt,"SPAN",{});var yZt=s(m7e);T(rS.$$.fragment,yZt),yZt.forEach(t),LZt.forEach(t),_it=i(KJe),g7e=n(KJe,"SPAN",{});var xZt=s(g7e);uit=r(xZt,"FlaxAutoModelForVision2Seq"),xZt.forEach(t),KJe.forEach(t),GHe=i(f),xr=n(f,"DIV",{class:!0});var Pi=s(xr);T(tS.$$.fragment,Pi),bit=i(Pi),Df=n(Pi,"P",{});var Jne=s(Df);vit=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zte=n(Jne,"A",{href:!0});var $Zt=s(Zte);Fit=r($Zt,"from_pretrained()"),$Zt.forEach(t),Tit=r(Jne," class method or the "),eae=n(Jne,"A",{href:!0});var kZt=s(eae);Mit=r(kZt,"from_config()"),kZt.forEach(t),Eit=r(Jne,` class
method.`),Jne.forEach(t),Cit=i(Pi),aS=n(Pi,"P",{});var ZJe=s(aS);wit=r(ZJe,"This class cannot be instantiated directly using "),h7e=n(ZJe,"CODE",{});var SZt=s(h7e);Ait=r(SZt,"__init__()"),SZt.forEach(t),Lit=r(ZJe," (throws an error)."),ZJe.forEach(t),yit=i(Pi),la=n(Pi,"DIV",{class:!0});var D7=s(la);T(nS.$$.fragment,D7),xit=i(D7),p7e=n(D7,"P",{});var RZt=s(p7e);$it=r(RZt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RZt.forEach(t),kit=i(D7),Gf=n(D7,"P",{});var Yne=s(Gf);Sit=r(Yne,`Note:
Loading a model from its configuration file does `),_7e=n(Yne,"STRONG",{});var PZt=s(_7e);Rit=r(PZt,"not"),PZt.forEach(t),Pit=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=n(Yne,"A",{href:!0});var BZt=s(oae);Bit=r(BZt,"from_pretrained()"),BZt.forEach(t),Iit=r(Yne," to load the model weights."),Yne.forEach(t),Nit=i(D7),T(b6.$$.fragment,D7),D7.forEach(t),qit=i(Pi),tt=n(Pi,"DIV",{class:!0});var Bi=s(tt);T(sS.$$.fragment,Bi),jit=i(Bi),u7e=n(Bi,"P",{});var IZt=s(u7e);Dit=r(IZt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IZt.forEach(t),Git=i(Bi),qn=n(Bi,"P",{});var G7=s(qn);Oit=r(G7,"The model class to instantiate is selected based on the "),b7e=n(G7,"CODE",{});var NZt=s(b7e);Vit=r(NZt,"model_type"),NZt.forEach(t),Xit=r(G7,` property of the config object (either
passed as an argument or loaded from `),v7e=n(G7,"CODE",{});var qZt=s(v7e);zit=r(qZt,"pretrained_model_name_or_path"),qZt.forEach(t),Wit=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F7e=n(G7,"CODE",{});var jZt=s(F7e);Qit=r(jZt,"pretrained_model_name_or_path"),jZt.forEach(t),Hit=r(G7,":"),G7.forEach(t),Uit=i(Bi),T7e=n(Bi,"UL",{});var DZt=s(T7e);v6=n(DZt,"LI",{});var PWe=s(v6);M7e=n(PWe,"STRONG",{});var GZt=s(M7e);Jit=r(GZt,"vision-encoder-decoder"),GZt.forEach(t),Yit=r(PWe," \u2014 "),rae=n(PWe,"A",{href:!0});var OZt=s(rae);Kit=r(OZt,"FlaxVisionEncoderDecoderModel"),OZt.forEach(t),Zit=r(PWe," (Vision Encoder decoder model)"),PWe.forEach(t),DZt.forEach(t),edt=i(Bi),T(F6.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Joa)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Dn,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoConfig"),c(On,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoModel"),c(Vn,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoTokenizer"),c(Oi,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertModel"),c(Uf,"id","extending-the-auto-classes"),c(Uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uf,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Yf,"id","transformers.AutoConfig"),c(Yf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yf,"href","#transformers.AutoConfig"),c(Xi,"class","relative group"),c(IR,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(NR,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertConfig"),c(qR,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartConfig"),c(jR,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitConfig"),c(DR,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertConfig"),c(GR,"href","/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(OR,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdConfig"),c(VR,"href","/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(XR,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(zR,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(WR,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomConfig"),c(QR,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertConfig"),c(HR,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineConfig"),c(UR,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPConfig"),c(JR,"href","/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenConfig"),c(YR,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertConfig"),c(KR,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextConfig"),c(ZR,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLConfig"),c(eP,"href","/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtConfig"),c(oP,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(rP,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(tP,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(aP,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaConfig"),c(nP,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(sP,"href","/docs/transformers/pr_18529/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(lP,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTConfig"),c(iP,"href","/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrConfig"),c(dP,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertConfig"),c(cP,"href","/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRConfig"),c(fP,"href","/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTConfig"),c(mP,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraConfig"),c(gP,"href","/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(hP,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertConfig"),c(pP,"href","/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaConfig"),c(_P,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetConfig"),c(uP,"href","/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTConfig"),c(bP,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelConfig"),c(vP,"href","/docs/transformers/pr_18529/en/model_doc/glpn#transformers.GLPNConfig"),c(FP,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Config"),c(TP,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(MP,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(EP,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJConfig"),c(CP,"href","/docs/transformers/pr_18529/en/model_doc/groupvit#transformers.GroupViTConfig"),c(wP,"href","/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertConfig"),c(AP,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertConfig"),c(LP,"href","/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(yP,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(xP,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c($P,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(kP,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDConfig"),c(SP,"href","/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitConfig"),c(RP,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerConfig"),c(PP,"href","/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Config"),c(BP,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeConfig"),c(IP,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertConfig"),c(NP,"href","/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Config"),c(qP,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianConfig"),c(jP,"href","/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(DP,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartConfig"),c(GP,"href","/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTConfig"),c(OP,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(VP,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(XP,"href","/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(zP,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetConfig"),c(WP,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Config"),c(QP,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpConfig"),c(HP,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaConfig"),c(UP,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(JP,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(YP,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTConfig"),c(KP,"href","/docs/transformers/pr_18529/en/model_doc/owlvit#transformers.OwlViTConfig"),c(ZP,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusConfig"),c(eB,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverConfig"),c(oB,"href","/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartConfig"),c(rB,"href","/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tB,"href","/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(aB,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nB,"href","/docs/transformers/pr_18529/en/model_doc/rag#transformers.RagConfig"),c(sB,"href","/docs/transformers/pr_18529/en/model_doc/realm#transformers.RealmConfig"),c(lB,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerConfig"),c(iB,"href","/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetConfig"),c(dB,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertConfig"),c(cB,"href","/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetConfig"),c(fB,"href","/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertConfig"),c(mB,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaConfig"),c(gB,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerConfig"),c(hB,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerConfig"),c(pB,"href","/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWConfig"),c(_B,"href","/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDConfig"),c(uB,"href","/docs/transformers/pr_18529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bB,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vB,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(FB,"href","/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterConfig"),c(TB,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(MB,"href","/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinConfig"),c(EB,"href","/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2Config"),c(CB,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Config"),c(wB,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasConfig"),c(AB,"href","/docs/transformers/pr_18529/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(LB,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yB,"href","/docs/transformers/pr_18529/en/model_doc/trocr#transformers.TrOCRConfig"),c(xB,"href","/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechConfig"),c($B,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(kB,"href","/docs/transformers/pr_18529/en/model_doc/van#transformers.VanConfig"),c(SB,"href","/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEConfig"),c(RB,"href","/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltConfig"),c(PB,"href","/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(BB,"href","/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(IB,"href","/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(NB,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTConfig"),c(qB,"href","/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(jB,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(DB,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(GB,"href","/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMConfig"),c(OB,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMConfig"),c(VB,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMConfig"),c(XB,"href","/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(zB,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(WB,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QB,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetConfig"),c(HB,"href","/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosConfig"),c(UB,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoConfig"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoTokenizer"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoTokenizer"),c(Wi,"class","relative group"),c(JB,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(YB,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertTokenizer"),c(KB,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZB,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartTokenizer"),c(eI,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartTokenizerFast"),c(oI,"href","/docs/transformers/pr_18529/en/model_doc/barthez#transformers.BarthezTokenizer"),c(rI,"href","/docs/transformers/pr_18529/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(tI,"href","/docs/transformers/pr_18529/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(aI,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizer"),c(nI,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizerFast"),c(sI,"href","/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(lI,"href","/docs/transformers/pr_18529/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(iI,"href","/docs/transformers/pr_18529/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(dI,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(cI,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(fI,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mI,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gI,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(hI,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(pI,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(_I,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(uI,"href","/docs/transformers/pr_18529/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(bI,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertTokenizer"),c(vI,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(FI,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineTokenizer"),c(TI,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPTokenizer"),c(MI,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(EI,"href","/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(CI,"href","/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(wI,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AI,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(LI,"href","/docs/transformers/pr_18529/en/model_doc/cpm#transformers.CpmTokenizer"),c(yI,"href","/docs/transformers/pr_18529/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xI,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($I,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kI,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SI,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RI,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PI,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BI,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(II,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(NI,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(qI,"href","/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jI,"href","/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DI,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraTokenizer"),c(GI,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OI,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VI,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetTokenizer"),c(XI,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zI,"href","/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WI,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QI,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HI,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UI,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JI,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YI,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KI,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZI,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eN,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oN,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPTokenizer"),c(rN,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tN,"href","/docs/transformers/pr_18529/en/model_doc/herbert#transformers.HerbertTokenizer"),c(aN,"href","/docs/transformers/pr_18529/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(nN,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sN,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lN,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iN,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(dN,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(cN,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(fN,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(mN,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(gN,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(hN,"href","/docs/transformers/pr_18529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pN,"href","/docs/transformers/pr_18529/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(_N,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDTokenizer"),c(uN,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDTokenizerFast"),c(bN,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vN,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FN,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.T5Tokenizer"),c(TN,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.T5TokenizerFast"),c(MN,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeTokenizer"),c(EN,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CN,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wN,"href","/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AN,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianTokenizer"),c(LN,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartTokenizer"),c(yN,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xN,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($N,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kN,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizer"),c(SN,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizerFast"),c(RN,"href","/docs/transformers/pr_18529/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PN,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(BN,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IN,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NN,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(qN,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.T5Tokenizer"),c(jN,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DN,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpTokenizer"),c(GN,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(ON,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizer"),c(VN,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizerFast"),c(XN,"href","/docs/transformers/pr_18529/en/model_doc/nllb#transformers.NllbTokenizer"),c(zN,"href","/docs/transformers/pr_18529/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(WN,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertTokenizer"),c(QN,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HN,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UN,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JN,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YN,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPTokenizer"),c(KN,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(ZN,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(eq,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(oq,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(rq,"href","/docs/transformers/pr_18529/en/model_doc/phobert#transformers.PhobertTokenizer"),c(tq,"href","/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartTokenizer"),c(aq,"href","/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(nq,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizer"),c(sq,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizerFast"),c(lq,"href","/docs/transformers/pr_18529/en/model_doc/rag#transformers.RagTokenizer"),c(iq,"href","/docs/transformers/pr_18529/en/model_doc/realm#transformers.RealmTokenizer"),c(dq,"href","/docs/transformers/pr_18529/en/model_doc/realm#transformers.RealmTokenizerFast"),c(cq,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerTokenizer"),c(fq,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(mq,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertTokenizer"),c(gq,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(hq,"href","/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(pq,"href","/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(_q,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uq,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bq,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(vq,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Fq,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Tq,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Mq,"href","/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Eq,"href","/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(wq,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Aq,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.T5Tokenizer"),c(Lq,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.T5TokenizerFast"),c(yq,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasTokenizer"),c(xq,"href","/docs/transformers/pr_18529/en/model_doc/tapex#transformers.TapexTokenizer"),c($q,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(kq,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizer"),c(Sq,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizerFast"),c(Rq,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizer"),c(Pq,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertTokenizerFast"),c(Bq,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Iq,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Nq,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qq,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jq,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Dq,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMTokenizer"),c(Gq,"href","/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Oq,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Vq,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Xq,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zq,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Qq,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Hq,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertTokenizer"),c(Uq,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"id","transformers.AutoFeatureExtractor"),c(Uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uh,"href","#transformers.AutoFeatureExtractor"),c(Qi,"class","relative group"),c(Jq,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Yq,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Kq,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Zq,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ej,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rj,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tj,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(aj,"href","/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(nj,"href","/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sj,"href","/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lj,"href","/docs/transformers/pr_18529/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(ij,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cj,"href","/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(fj,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(mj,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(gj,"href","/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(hj,"href","/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pj,"href","/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(_j,"href","/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(uj,"href","/docs/transformers/pr_18529/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(bj,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vj,"href","/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(Fj,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Tj,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Mj,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(Ej,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(Cj,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wj,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Aj,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Lj,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yj,"href","/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(xj,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($j,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Sj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Rj,"href","/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ip,"id","transformers.AutoProcessor"),c(Ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ip,"href","#transformers.AutoProcessor"),c(Hi,"class","relative group"),c(Pj,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Bj,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPProcessor"),c(Ij,"href","/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaProcessor"),c(Nj,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPProcessor"),c(qj,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jj,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(Dj,"href","/docs/transformers/pr_18529/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Gj,"href","/docs/transformers/pr_18529/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(Oj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xj,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zj,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Wj,"href","/docs/transformers/pr_18529/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Qj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Hj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Uj,"href","/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltProcessor"),c(Jj,"href","/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Yj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Kj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Zj,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n_,"id","transformers.AutoModel"),c(n_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n_,"href","#transformers.AutoModel"),c(Ji,"class","relative group"),c(eD,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertModel"),c(aD,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartModel"),c(nD,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitModel"),c(sD,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertModel"),c(lD,"href","/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iD,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdModel"),c(dD,"href","/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cD,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(fD,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(mD,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomModel"),c(gD,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertModel"),c(hD,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineModel"),c(pD,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.CLIPModel"),c(_D,"href","/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenModel"),c(uD,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertModel"),c(bD,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextModel"),c(vD,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLModel"),c(FD,"href","/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtModel"),c(TD,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(MD,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ED,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(CD,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaModel"),c(wD,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(AD,"href","/docs/transformers/pr_18529/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LD,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTModel"),c(yD,"href","/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrModel"),c(xD,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertModel"),c($D,"href","/docs/transformers/pr_18529/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(kD,"href","/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTModel"),c(SD,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraModel"),c(RD,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertModel"),c(PD,"href","/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaModel"),c(BD,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetModel"),c(ID,"href","/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTModel"),c(ND,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelModel"),c(qD,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jD,"href","/docs/transformers/pr_18529/en/model_doc/glpn#transformers.GLPNModel"),c(DD,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2Model"),c(GD,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(OD,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(VD,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJModel"),c(XD,"href","/docs/transformers/pr_18529/en/model_doc/groupvit#transformers.GroupViTModel"),c(zD,"href","/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertModel"),c(WD,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertModel"),c(QD,"href","/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HD,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(UD,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(JD,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(YD,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDModel"),c(KD,"href","/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitModel"),c(ZD,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerModel"),c(eG,"href","/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5Model"),c(oG,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeModel"),c(rG,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertModel"),c(tG,"href","/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Model"),c(aG,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianModel"),c(nG,"href","/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sG,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartModel"),c(lG,"href","/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTModel"),c(iG,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(dG,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertModel"),c(cG,"href","/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTModel"),c(fG,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetModel"),c(mG,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5Model"),c(gG,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpModel"),c(hG,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaModel"),c(pG,"href","/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100Model"),c(_G,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerModel"),c(uG,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bG,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTModel"),c(vG,"href","/docs/transformers/pr_18529/en/model_doc/owlvit#transformers.OwlViTModel"),c(FG,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusModel"),c(TG,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverModel"),c(MG,"href","/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartModel"),c(EG,"href","/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerModel"),c(CG,"href","/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(wG,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertModel"),c(AG,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerModel"),c(LG,"href","/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetModel"),c(yG,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertModel"),c(xG,"href","/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetModel"),c($G,"href","/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertModel"),c(kG,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaModel"),c(SG,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerModel"),c(RG,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerModel"),c(PG,"href","/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWModel"),c(BG,"href","/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDModel"),c(IG,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(NG,"href","/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterModel"),c(qG,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(jG,"href","/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinModel"),c(DG,"href","/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2Model"),c(GG,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5Model"),c(OG,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasModel"),c(VG,"href","/docs/transformers/pr_18529/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(XG,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(zG,"href","/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechModel"),c(WG,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(QG,"href","/docs/transformers/pr_18529/en/model_doc/van#transformers.VanModel"),c(HG,"href","/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEModel"),c(UG,"href","/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltModel"),c(JG,"href","/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(YG,"href","/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertModel"),c(KG,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTModel"),c(ZG,"href","/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eO,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oO,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rO,"href","/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMModel"),c(tO,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMModel"),c(aO,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMModel"),c(nO,"href","/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sO,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lO,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iO,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetModel"),c(dO,"href","/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosModel"),c(cO,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForPreTraining"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForPreTraining"),c(Zi,"class","relative group"),c(fO,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pO,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForPreTraining"),c(uO,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bO,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vO,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FO,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TO,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MO,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EO,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CO,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForPreTraining"),c(AO,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(LO,"href","/docs/transformers/pr_18529/en/model_doc/flava#transformers.FlavaForPreTraining"),c(yO,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xO,"href","/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($O,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kO,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(SO,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(RO,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(PO,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(BO,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForMaskedLM"),c(IO,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(NO,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qO,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(jO,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(DO,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(OO,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VO,"href","/docs/transformers/pr_18529/en/model_doc/retribert#transformers.RetriBertModel"),c(XO,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zO,"href","/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(WO,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(QO,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UO,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JO,"href","/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YO,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KO,"href","/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(ZO,"href","/docs/transformers/pr_18529/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(eV,"href","/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(oV,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(rV,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(tV,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aV,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(nV,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(sV,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m1,"id","transformers.AutoModelForCausalLM"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForCausalLM"),c(rd,"class","relative group"),c(lV,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForCausalLM"),c(fV,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertLMHeadModel"),c(mV,"href","/docs/transformers/pr_18529/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(gV,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(hV,"href","/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(pV,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(_V,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(uV,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForCausalLM"),c(bV,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(vV,"href","/docs/transformers/pr_18529/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(FV,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TV,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(MV,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForCausalLM"),c(EV,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(CV,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(wV,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(AV,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(LV,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianForCausalLM"),c(yV,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForCausalLM"),c(xV,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c($V,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForCausalLM"),c(kV,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(SV,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTForCausalLM"),c(RV,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(PV,"href","/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(BV,"href","/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(IV,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(NV,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(qV,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jV,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(DV,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(GV,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(OV,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VV,"href","/docs/transformers/pr_18529/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(XV,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zV,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(WV,"href","/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(QV,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HV,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(UV,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rb,"id","transformers.AutoModelForMaskedLM"),c(rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rb,"href","#transformers.AutoModelForMaskedLM"),c(nd,"class","relative group"),c(JV,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(eX,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oX,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForMaskedLM"),c(rX,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tX,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aX,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nX,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sX,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lX,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(iX,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dX,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cX,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fX,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(mX,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gX,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hX,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pX,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_X,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uX,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bX,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(vX,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(FX,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(TX,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(MX,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(EX,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(CX,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(wX,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(AX,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(LX,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(yX,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xX,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c($X,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(kX,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SX,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(RX,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(PX,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(BX,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForSeq2SeqLM"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForSeq2SeqLM"),c(id,"class","relative group"),c(IX,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(DX,"href","/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(GX,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(OX,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(VX,"href","/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(XX,"href","/docs/transformers/pr_18529/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zX,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(WX,"href","/docs/transformers/pr_18529/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(QX,"href","/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(HX,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.MarianMTModel"),c(UX,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(JX,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(YX,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(KX,"href","/docs/transformers/pr_18529/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZX,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ez,"href","/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(oz,"href","/docs/transformers/pr_18529/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(rz,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(tz,"href","/docs/transformers/pr_18529/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForSequenceClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForSequenceClassification"),c(fd,"class","relative group"),c(az,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(iz,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForSequenceClassification"),c(dz,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForSequenceClassification"),c(cz,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(fz,"href","/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(mz,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(gz,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(hz,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(pz,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_z,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(uz,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(bz,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(vz,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Fz,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Tz,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Mz,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Ez,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Cz,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(wz,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Az,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Lz,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(yz,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(xz,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c($z,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(kz,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(Sz,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Rz,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Pz,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(Bz,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Iz,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Nz,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qz,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jz,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(Dz,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(Gz,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Oz,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Vz,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(Xz,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(zz,"href","/docs/transformers/pr_18529/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Wz,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Qz,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Hz,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Uz,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Jz,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Yz,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Kz,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Zz,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.AutoModelForMultipleChoice"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.AutoModelForMultipleChoice"),c(hd,"class","relative group"),c(nW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cW,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(fW,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mW,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gW,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hW,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(pW,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(_W,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uW,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(bW,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(vW,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(FW,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(TW,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(MW,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(EW,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(CW,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(wW,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(LW,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(yW,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(xW,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c($W,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(kW,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(SW,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(RW,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(PW,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(BW,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(IW,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(NW,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(qW,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.AutoModelForNextSentencePrediction"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForNextSentencePrediction"),c(ud,"class","relative group"),c(jW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(VW,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(XW,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(zW,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WW,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(QW,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForTokenClassification"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(HW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(KW,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(eQ,"href","/docs/transformers/pr_18529/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(oQ,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rQ,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tQ,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nQ,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sQ,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lQ,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iQ,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dQ,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cQ,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fQ,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mQ,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gQ,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hQ,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pQ,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_Q,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(uQ,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bQ,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForTokenClassification"),c(vQ,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(FQ,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(TQ,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(MQ,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(EQ,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(CQ,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(wQ,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(AQ,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(LQ,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(yQ,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(xQ,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForTokenClassification"),c($Q,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(kQ,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(SQ,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(RQ,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForQuestionAnswering"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(PQ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_18529/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_18529/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(YQ,"href","/docs/transformers/pr_18529/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18529/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18529/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_18529/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_18529/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_18529/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_18529/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_18529/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_18529/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_18529/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_18529/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_18529/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MH,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wH,"href","/docs/transformers/pr_18529/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForTableQuestionAnswering"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(AH,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForImageClassification"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c($H,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitForImageClassification"),c(PH,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(BH,"href","/docs/transformers/pr_18529/en/model_doc/cvt#transformers.CvtForImageClassification"),c(IH,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NH,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qH,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jH,"href","/docs/transformers/pr_18529/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DH,"href","/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitForImageClassification"),c(GH,"href","/docs/transformers/pr_18529/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(OH,"href","/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(VH,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(XH,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(zH,"href","/docs/transformers/pr_18529/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WH,"href","/docs/transformers/pr_18529/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QH,"href","/docs/transformers/pr_18529/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(HH,"href","/docs/transformers/pr_18529/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(UH,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(JH,"href","/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinForImageClassification"),c(YH,"href","/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(KH,"href","/docs/transformers/pr_18529/en/model_doc/van#transformers.VanForImageClassification"),c(ZH,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d8,"id","transformers.AutoModelForVideoClassification"),c(d8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d8,"href","#transformers.AutoModelForVideoClassification"),c(Sd,"class","relative group"),c(eU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_18529/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h8,"id","transformers.AutoModelForVision2Seq"),c(h8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h8,"href","#transformers.AutoModelForVision2Seq"),c(Bd,"class","relative group"),c(aU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.AutoModelForVisualQuestionAnswering"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(qd,"class","relative group"),c(iU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_18529/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C8,"id","transformers.AutoModelForAudioClassification"),c(C8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C8,"href","#transformers.AutoModelForAudioClassification"),c(Gd,"class","relative group"),c(mU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(_U,"href","/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(uU,"href","/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(bU,"href","/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(vU,"href","/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(FU,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(TU,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(MU,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(EU,"href","/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N8,"id","transformers.AutoModelForAudioFrameClassification"),c(N8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N8,"href","#transformers.AutoModelForAudioFrameClassification"),c(Xd,"class","relative group"),c(CU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(yU,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(xU,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c($U,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(kU,"href","/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W8,"id","transformers.AutoModelForCTC"),c(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W8,"href","#transformers.AutoModelForCTC"),c(Qd,"class","relative group"),c(SU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(IU,"href","/docs/transformers/pr_18529/en/model_doc/hubert#transformers.HubertForCTC"),c(NU,"href","/docs/transformers/pr_18529/en/model_doc/mctct#transformers.MCTCTForCTC"),c(qU,"href","/docs/transformers/pr_18529/en/model_doc/sew#transformers.SEWForCTC"),c(jU,"href","/docs/transformers/pr_18529/en/model_doc/sew-d#transformers.SEWDForCTC"),c(DU,"href","/docs/transformers/pr_18529/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(GU,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(OU,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(VU,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(XU,"href","/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForCTC"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s9,"id","transformers.AutoModelForSpeechSeq2Seq"),c(s9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s9,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Jd,"class","relative group"),c(zU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_18529/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(UU,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.AutoModelForAudioXVector"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.AutoModelForAudioXVector"),c(Zd,"class","relative group"),c(JU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(eJ,"href","/docs/transformers/pr_18529/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(oJ,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(rJ,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(tJ,"href","/docs/transformers/pr_18529/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T9,"id","transformers.AutoModelForMaskedImageModeling"),c(T9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T9,"href","#transformers.AutoModelForMaskedImageModeling"),c(rc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(iJ,"href","/docs/transformers/pr_18529/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(dJ,"href","/docs/transformers/pr_18529/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(cJ,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x9,"id","transformers.AutoModelForObjectDetection"),c(x9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x9,"href","#transformers.AutoModelForObjectDetection"),c(nc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrForObjectDetection"),c(pJ,"href","/docs/transformers/pr_18529/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B9,"id","transformers.AutoModelForImageSegmentation"),c(B9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B9,"href","#transformers.AutoModelForImageSegmentation"),c(ic,"class","relative group"),c(_J,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_18529/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D9,"id","transformers.AutoModelForSemanticSegmentation"),c(D9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D9,"href","#transformers.AutoModelForSemanticSegmentation"),c(fc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(CJ,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(wJ,"href","/docs/transformers/pr_18529/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(AJ,"href","/docs/transformers/pr_18529/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(LJ,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U9,"id","transformers.AutoModelForInstanceSegmentation"),c(U9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U9,"href","#transformers.AutoModelForInstanceSegmentation"),c(hc,"class","relative group"),c(yJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_18529/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.TFAutoModel"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.TFAutoModel"),c(uc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertModel"),c(IJ,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.TFBartModel"),c(NJ,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertModel"),c(qJ,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(jJ,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DJ,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertModel"),c(GJ,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.TFCLIPModel"),c(OJ,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertModel"),c(VJ,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.TFConvNextModel"),c(XJ,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zJ,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(WJ,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaModel"),c(QJ,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HJ,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.TFDeiTModel"),c(UJ,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(JJ,"href","/docs/transformers/pr_18529/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(YJ,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraModel"),c(KJ,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(ZJ,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelModel"),c(eY,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(oY,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2Model"),c(rY,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJModel"),c(tY,"href","/docs/transformers/pr_18529/en/model_doc/hubert#transformers.TFHubertModel"),c(aY,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(nY,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.TFLEDModel"),c(sY,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerModel"),c(lY,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.TFLxmertModel"),c(iY,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.TFMarianModel"),c(dY,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.TFMBartModel"),c(cY,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(fY,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetModel"),c(mY,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.TFMT5Model"),c(gY,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(hY,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.TFOPTModel"),c(pY,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_Y,"href","/docs/transformers/pr_18529/en/model_doc/regnet#transformers.TFRegNetModel"),c(uY,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertModel"),c(bY,"href","/docs/transformers/pr_18529/en/model_doc/resnet#transformers.TFResNetModel"),c(vY,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaModel"),c(FY,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerModel"),c(TY,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.TFSegformerModel"),c(MY,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(EY,"href","/docs/transformers/pr_18529/en/model_doc/swin#transformers.TFSwinModel"),c(CY,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.TFT5Model"),c(wY,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasModel"),c(AY,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(LY,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.TFViTModel"),c(yY,"href","/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(xY,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c($Y,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMModel"),c(kY,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(SY,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForPreTraining"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForPreTraining"),c(Fc,"class","relative group"),c(RY,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(NY,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForPreTraining"),c(jY,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(DY,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GY,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(OY,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(VY,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(XY,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(zY,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(WY,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QY,"href","/docs/transformers/pr_18529/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(HY,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(UY,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JY,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(YY,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KY,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eK,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(oK,"href","/docs/transformers/pr_18529/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(rK,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(tK,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(aK,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForCausalLM"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForCausalLM"),c(Ec,"class","relative group"),c(nK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(dK,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(cK,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fK,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mK,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(gK,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(hK,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(pK,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(_K,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(uK,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(bK,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vK,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FK,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForImageClassification"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForImageClassification"),c(Ac,"class","relative group"),c(TK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/pr_18529/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(wK,"href","/docs/transformers/pr_18529/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(AK,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(LK,"href","/docs/transformers/pr_18529/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(yK,"href","/docs/transformers/pr_18529/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(xK,"href","/docs/transformers/pr_18529/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c($K,"href","/docs/transformers/pr_18529/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(kK,"href","/docs/transformers/pr_18529/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(SK,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForMaskedLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForMaskedLM"),c(xc,"class","relative group"),c(RK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(NK,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(qK,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jK,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(DK,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(GK,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(OK,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(VK,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(XK,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zK,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(WK,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QK,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(HK,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(UK,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(JK,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(YK,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(KK,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(ZK,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eZ,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oZ,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Sc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(lZ,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(iZ,"href","/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(dZ,"href","/docs/transformers/pr_18529/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.TFMarianMTModel"),c(fZ,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(gZ,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(hZ,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.TFAutoModelForSequenceClassification"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.TFAutoModelForSequenceClassification"),c(Bc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(vZ,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(FZ,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(TZ,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(MZ,"href","/docs/transformers/pr_18529/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(EZ,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(CZ,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(wZ,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(AZ,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(LZ,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(yZ,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(xZ,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c($Z,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(kZ,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(SZ,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(RZ,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(PZ,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(BZ,"href","/docs/transformers/pr_18529/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(IZ,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(NZ,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(qZ,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(jZ,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DZ,"href","/docs/transformers/pr_18529/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(GZ,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(OZ,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(VZ,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForMultipleChoice"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForMultipleChoice"),c(qc,"class","relative group"),c(XZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QZ,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(HZ,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(UZ,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(JZ,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(YZ,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(KZ,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ZZ,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(eee,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(oee,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ree,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(tee,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(aee,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(nee,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(see,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(lee,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(iee,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(dee,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Gc,"class","relative group"),c(cee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(hee,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Xc,"class","relative group"),c(pee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_18529/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.TFAutoModelForTokenClassification"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.TFAutoModelForTokenClassification"),c(Qc,"class","relative group"),c(vee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mee,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Eee,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Cee,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(wee,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Aee,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Lee,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(yee,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(xee,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c($ee,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(kee,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(See,"href","/docs/transformers/pr_18529/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Ree,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Pee,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Bee,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Iee,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Nee,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qee,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(jee,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Dee,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Gee,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.TFAutoModelForQuestionAnswering"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Jc,"class","relative group"),c(Oee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Wee,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_18529/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Hee,"href","/docs/transformers/pr_18529/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Uee,"href","/docs/transformers/pr_18529/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Jee,"href","/docs/transformers/pr_18529/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Yee,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Kee,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Zee,"href","/docs/transformers/pr_18529/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(eoe,"href","/docs/transformers/pr_18529/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ooe,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(roe,"href","/docs/transformers/pr_18529/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(toe,"href","/docs/transformers/pr_18529/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(aoe,"href","/docs/transformers/pr_18529/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(noe,"href","/docs/transformers/pr_18529/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(soe,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(loe,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ioe,"href","/docs/transformers/pr_18529/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(doe,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(coe,"href","/docs/transformers/pr_18529/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.TFAutoModelForVision2Seq"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.TFAutoModelForVision2Seq"),c(Zc,"class","relative group"),c(foe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(moe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(goe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hoe,"href","/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(rf,"class","relative group"),c(poe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_oe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uoe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/pr_18529/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModel"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModel"),c(nf,"class","relative group"),c(voe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Eoe,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartModel"),c(Coe,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.FlaxBeitModel"),c(woe,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertModel"),c(Aoe,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Loe,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yoe,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(xoe,"href","/docs/transformers/pr_18529/en/model_doc/clip#transformers.FlaxCLIPModel"),c($oe,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(koe,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraModel"),c(Soe,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Roe,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Poe,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Boe,"href","/docs/transformers/pr_18529/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ioe,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.FlaxMarianModel"),c(Noe,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartModel"),c(qoe,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.FlaxMT5Model"),c(joe,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.FlaxOPTModel"),c(Doe,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Goe,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Ooe,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Voe,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.FlaxT5Model"),c(Xoe,"href","/docs/transformers/pr_18529/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(zoe,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.FlaxViTModel"),c(Woe,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Qoe,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Hoe,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.FlaxAutoModelForCausalLM"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.FlaxAutoModelForCausalLM"),c(df,"class","relative group"),c(Uoe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Joe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yoe,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Koe,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Zoe,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(ere,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(ore,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(rre,"href","/docs/transformers/pr_18529/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(tre,"href","/docs/transformers/pr_18529/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(are,"href","/docs/transformers/pr_18529/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(nre,"href","/docs/transformers/pr_18529/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(sre,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(lre,"href","/docs/transformers/pr_18529/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.FlaxAutoModelForPreTraining"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.FlaxAutoModelForPreTraining"),c(mf,"class","relative group"),c(ire,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fre,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(mre,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gre,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(hre,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(pre,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(_re,"href","/docs/transformers/pr_18529/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ure,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bre,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vre,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Fre,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Tre,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Mre,"href","/docs/transformers/pr_18529/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Ere,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.FlaxAutoModelForMaskedLM"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(pf,"class","relative group"),c(Cre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lre,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(yre,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xre,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($re,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kre,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Sre,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Rre,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Pre,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Bre,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ire,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(bf,"class","relative group"),c(Nre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dre,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Gre,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ore,"href","/docs/transformers/pr_18529/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Vre,"href","/docs/transformers/pr_18529/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Xre,"href","/docs/transformers/pr_18529/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(zre,"href","/docs/transformers/pr_18529/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Wre,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Qre,"href","/docs/transformers/pr_18529/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Hre,"href","/docs/transformers/pr_18529/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Ure,"href","/docs/transformers/pr_18529/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Tf,"class","relative group"),c(Jre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kre,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zre,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ete,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ote,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(rte,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(tte,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ate,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(nte,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ste,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(lte,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(ite,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Cf,"class","relative group"),c(dte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mte,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(gte,"href","/docs/transformers/pr_18529/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(hte,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(pte,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(_te,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(ute,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(bte,"href","/docs/transformers/pr_18529/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(vte,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Fte,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Tte,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Lf,"class","relative group"),c(Mte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ete,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wte,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Ate,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Lte,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(yte,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(xte,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c($te,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(kte,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Ste,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c($f,"class","relative group"),c(Rte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ite,"href","/docs/transformers/pr_18529/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Nte,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(qte,"href","/docs/transformers/pr_18529/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(jte,"href","/docs/transformers/pr_18529/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Dte,"href","/docs/transformers/pr_18529/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Gte,"href","/docs/transformers/pr_18529/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Ote,"href","/docs/transformers/pr_18529/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Vte,"href","/docs/transformers/pr_18529/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Rf,"class","relative group"),c(Xte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qte,"href","/docs/transformers/pr_18529/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.FlaxAutoModelForImageClassification"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.FlaxAutoModelForImageClassification"),c(If,"class","relative group"),c(Hte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ute,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yte,"href","/docs/transformers/pr_18529/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Kte,"href","/docs/transformers/pr_18529/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.FlaxAutoModelForVision2Seq"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(jf,"class","relative group"),c(Zte,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eae,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oae,"href","/docs/transformers/pr_18529/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rae,"href","/docs/transformers/pr_18529/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Ao),e(Ao,Ii),b(f,zf,u),b(f,dt,u),e(dt,Ni),e(dt,qi),e(qi,O7),e(dt,Wf),b(f,Oe,u),b(f,Qe,u),e(Qe,ji),e(Qe,Dn),e(Dn,V7),e(Qe,Gn),e(Qe,On),e(On,X7),e(Qe,Di),e(Qe,Vn),e(Vn,z7),e(Qe,Gi),b(f,Qf,u),M(Ia,f,u),b(f,He,u),b(f,Ae,u),e(Ae,$R),e(Ae,Oi),e(Oi,kR),e(Ae,SR),b(f,Lo,u),b(f,Na,u),e(Na,RR),e(Na,Hf),e(Hf,PR),e(Na,eYe),b(f,BWe,u),b(f,Vi,u),e(Vi,Uf),e(Uf,Kne),M(W7,Kne,null),e(Vi,oYe),e(Vi,Zne),e(Zne,rYe),b(f,IWe,u),b(f,Xn,u),e(Xn,tYe),e(Xn,ese),e(ese,aYe),e(Xn,nYe),e(Xn,ose),e(ose,sYe),e(Xn,lYe),b(f,NWe,u),M(Q7,f,u),b(f,qWe,u),b(f,BR,u),e(BR,iYe),b(f,jWe,u),M(Jf,f,u),b(f,DWe,u),b(f,Xi,u),e(Xi,Yf),e(Yf,rse),M(H7,rse,null),e(Xi,dYe),e(Xi,tse),e(tse,cYe),b(f,GWe,u),b(f,yo,u),M(U7,yo,null),e(yo,fYe),e(yo,J7),e(J7,mYe),e(J7,IR),e(IR,gYe),e(J7,hYe),e(yo,pYe),e(yo,Y7),e(Y7,_Ye),e(Y7,ase),e(ase,uYe),e(Y7,bYe),e(yo,vYe),e(yo,$r),M(K7,$r,null),e($r,FYe),e($r,nse),e(nse,TYe),e($r,MYe),e($r,zi),e(zi,EYe),e(zi,sse),e(sse,CYe),e(zi,wYe),e(zi,lse),e(lse,AYe),e(zi,LYe),e($r,yYe),e($r,A),e(A,Kf),e(Kf,ise),e(ise,xYe),e(Kf,$Ye),e(Kf,NR),e(NR,kYe),e(Kf,SYe),e(A,RYe),e(A,Zf),e(Zf,dse),e(dse,PYe),e(Zf,BYe),e(Zf,qR),e(qR,IYe),e(Zf,NYe),e(A,qYe),e(A,em),e(em,cse),e(cse,jYe),e(em,DYe),e(em,jR),e(jR,GYe),e(em,OYe),e(A,VYe),e(A,om),e(om,fse),e(fse,XYe),e(om,zYe),e(om,DR),e(DR,WYe),e(om,QYe),e(A,HYe),e(A,rm),e(rm,mse),e(mse,UYe),e(rm,JYe),e(rm,GR),e(GR,YYe),e(rm,KYe),e(A,ZYe),e(A,tm),e(tm,gse),e(gse,eKe),e(tm,oKe),e(tm,OR),e(OR,rKe),e(tm,tKe),e(A,aKe),e(A,am),e(am,hse),e(hse,nKe),e(am,sKe),e(am,VR),e(VR,lKe),e(am,iKe),e(A,dKe),e(A,nm),e(nm,pse),e(pse,cKe),e(nm,fKe),e(nm,XR),e(XR,mKe),e(nm,gKe),e(A,hKe),e(A,sm),e(sm,_se),e(_se,pKe),e(sm,_Ke),e(sm,zR),e(zR,uKe),e(sm,bKe),e(A,vKe),e(A,lm),e(lm,use),e(use,FKe),e(lm,TKe),e(lm,WR),e(WR,MKe),e(lm,EKe),e(A,CKe),e(A,im),e(im,bse),e(bse,wKe),e(im,AKe),e(im,QR),e(QR,LKe),e(im,yKe),e(A,xKe),e(A,dm),e(dm,vse),e(vse,$Ke),e(dm,kKe),e(dm,HR),e(HR,SKe),e(dm,RKe),e(A,PKe),e(A,cm),e(cm,Fse),e(Fse,BKe),e(cm,IKe),e(cm,UR),e(UR,NKe),e(cm,qKe),e(A,jKe),e(A,fm),e(fm,Tse),e(Tse,DKe),e(fm,GKe),e(fm,JR),e(JR,OKe),e(fm,VKe),e(A,XKe),e(A,mm),e(mm,Mse),e(Mse,zKe),e(mm,WKe),e(mm,YR),e(YR,QKe),e(mm,HKe),e(A,UKe),e(A,gm),e(gm,Ese),e(Ese,JKe),e(gm,YKe),e(gm,KR),e(KR,KKe),e(gm,ZKe),e(A,eZe),e(A,hm),e(hm,Cse),e(Cse,oZe),e(hm,rZe),e(hm,ZR),e(ZR,tZe),e(hm,aZe),e(A,nZe),e(A,pm),e(pm,wse),e(wse,sZe),e(pm,lZe),e(pm,eP),e(eP,iZe),e(pm,dZe),e(A,cZe),e(A,_m),e(_m,Ase),e(Ase,fZe),e(_m,mZe),e(_m,oP),e(oP,gZe),e(_m,hZe),e(A,pZe),e(A,um),e(um,Lse),e(Lse,_Ze),e(um,uZe),e(um,rP),e(rP,bZe),e(um,vZe),e(A,FZe),e(A,bm),e(bm,yse),e(yse,TZe),e(bm,MZe),e(bm,tP),e(tP,EZe),e(bm,CZe),e(A,wZe),e(A,vm),e(vm,xse),e(xse,AZe),e(vm,LZe),e(vm,aP),e(aP,yZe),e(vm,xZe),e(A,$Ze),e(A,Fm),e(Fm,$se),e($se,kZe),e(Fm,SZe),e(Fm,nP),e(nP,RZe),e(Fm,PZe),e(A,BZe),e(A,Tm),e(Tm,kse),e(kse,IZe),e(Tm,NZe),e(Tm,sP),e(sP,qZe),e(Tm,jZe),e(A,DZe),e(A,Mm),e(Mm,Sse),e(Sse,GZe),e(Mm,OZe),e(Mm,lP),e(lP,VZe),e(Mm,XZe),e(A,zZe),e(A,Em),e(Em,Rse),e(Rse,WZe),e(Em,QZe),e(Em,iP),e(iP,HZe),e(Em,UZe),e(A,JZe),e(A,Cm),e(Cm,Pse),e(Pse,YZe),e(Cm,KZe),e(Cm,dP),e(dP,ZZe),e(Cm,eeo),e(A,oeo),e(A,wm),e(wm,Bse),e(Bse,reo),e(wm,teo),e(wm,cP),e(cP,aeo),e(wm,neo),e(A,seo),e(A,Am),e(Am,Ise),e(Ise,leo),e(Am,ieo),e(Am,fP),e(fP,deo),e(Am,ceo),e(A,feo),e(A,Lm),e(Lm,Nse),e(Nse,meo),e(Lm,geo),e(Lm,mP),e(mP,heo),e(Lm,peo),e(A,_eo),e(A,ym),e(ym,qse),e(qse,ueo),e(ym,beo),e(ym,gP),e(gP,veo),e(ym,Feo),e(A,Teo),e(A,xm),e(xm,jse),e(jse,Meo),e(xm,Eeo),e(xm,hP),e(hP,Ceo),e(xm,weo),e(A,Aeo),e(A,$m),e($m,Dse),e(Dse,Leo),e($m,yeo),e($m,pP),e(pP,xeo),e($m,$eo),e(A,keo),e(A,km),e(km,Gse),e(Gse,Seo),e(km,Reo),e(km,_P),e(_P,Peo),e(km,Beo),e(A,Ieo),e(A,Sm),e(Sm,Ose),e(Ose,Neo),e(Sm,qeo),e(Sm,uP),e(uP,jeo),e(Sm,Deo),e(A,Geo),e(A,Rm),e(Rm,Vse),e(Vse,Oeo),e(Rm,Veo),e(Rm,bP),e(bP,Xeo),e(Rm,zeo),e(A,Weo),e(A,Pm),e(Pm,Xse),e(Xse,Qeo),e(Pm,Heo),e(Pm,vP),e(vP,Ueo),e(Pm,Jeo),e(A,Yeo),e(A,Bm),e(Bm,zse),e(zse,Keo),e(Bm,Zeo),e(Bm,FP),e(FP,eoo),e(Bm,ooo),e(A,roo),e(A,Im),e(Im,Wse),e(Wse,too),e(Im,aoo),e(Im,TP),e(TP,noo),e(Im,soo),e(A,loo),e(A,Nm),e(Nm,Qse),e(Qse,ioo),e(Nm,doo),e(Nm,MP),e(MP,coo),e(Nm,foo),e(A,moo),e(A,qm),e(qm,Hse),e(Hse,goo),e(qm,hoo),e(qm,EP),e(EP,poo),e(qm,_oo),e(A,uoo),e(A,jm),e(jm,Use),e(Use,boo),e(jm,voo),e(jm,CP),e(CP,Foo),e(jm,Too),e(A,Moo),e(A,Dm),e(Dm,Jse),e(Jse,Eoo),e(Dm,Coo),e(Dm,wP),e(wP,woo),e(Dm,Aoo),e(A,Loo),e(A,Gm),e(Gm,Yse),e(Yse,yoo),e(Gm,xoo),e(Gm,AP),e(AP,$oo),e(Gm,koo),e(A,Soo),e(A,Om),e(Om,Kse),e(Kse,Roo),e(Om,Poo),e(Om,LP),e(LP,Boo),e(Om,Ioo),e(A,Noo),e(A,Vm),e(Vm,Zse),e(Zse,qoo),e(Vm,joo),e(Vm,yP),e(yP,Doo),e(Vm,Goo),e(A,Ooo),e(A,Xm),e(Xm,ele),e(ele,Voo),e(Xm,Xoo),e(Xm,xP),e(xP,zoo),e(Xm,Woo),e(A,Qoo),e(A,zm),e(zm,ole),e(ole,Hoo),e(zm,Uoo),e(zm,$P),e($P,Joo),e(zm,Yoo),e(A,Koo),e(A,Wm),e(Wm,rle),e(rle,Zoo),e(Wm,ero),e(Wm,kP),e(kP,oro),e(Wm,rro),e(A,tro),e(A,Qm),e(Qm,tle),e(tle,aro),e(Qm,nro),e(Qm,SP),e(SP,sro),e(Qm,lro),e(A,iro),e(A,Hm),e(Hm,ale),e(ale,dro),e(Hm,cro),e(Hm,RP),e(RP,fro),e(Hm,mro),e(A,gro),e(A,Um),e(Um,nle),e(nle,hro),e(Um,pro),e(Um,PP),e(PP,_ro),e(Um,uro),e(A,bro),e(A,Jm),e(Jm,sle),e(sle,vro),e(Jm,Fro),e(Jm,BP),e(BP,Tro),e(Jm,Mro),e(A,Ero),e(A,Ym),e(Ym,lle),e(lle,Cro),e(Ym,wro),e(Ym,IP),e(IP,Aro),e(Ym,Lro),e(A,yro),e(A,Km),e(Km,ile),e(ile,xro),e(Km,$ro),e(Km,NP),e(NP,kro),e(Km,Sro),e(A,Rro),e(A,Zm),e(Zm,dle),e(dle,Pro),e(Zm,Bro),e(Zm,qP),e(qP,Iro),e(Zm,Nro),e(A,qro),e(A,eg),e(eg,cle),e(cle,jro),e(eg,Dro),e(eg,jP),e(jP,Gro),e(eg,Oro),e(A,Vro),e(A,og),e(og,fle),e(fle,Xro),e(og,zro),e(og,DP),e(DP,Wro),e(og,Qro),e(A,Hro),e(A,rg),e(rg,mle),e(mle,Uro),e(rg,Jro),e(rg,GP),e(GP,Yro),e(rg,Kro),e(A,Zro),e(A,tg),e(tg,gle),e(gle,eto),e(tg,oto),e(tg,OP),e(OP,rto),e(tg,tto),e(A,ato),e(A,ag),e(ag,hle),e(hle,nto),e(ag,sto),e(ag,VP),e(VP,lto),e(ag,ito),e(A,dto),e(A,ng),e(ng,ple),e(ple,cto),e(ng,fto),e(ng,XP),e(XP,mto),e(ng,gto),e(A,hto),e(A,sg),e(sg,_le),e(_le,pto),e(sg,_to),e(sg,zP),e(zP,uto),e(sg,bto),e(A,vto),e(A,lg),e(lg,ule),e(ule,Fto),e(lg,Tto),e(lg,WP),e(WP,Mto),e(lg,Eto),e(A,Cto),e(A,ig),e(ig,ble),e(ble,wto),e(ig,Ato),e(ig,QP),e(QP,Lto),e(ig,yto),e(A,xto),e(A,dg),e(dg,vle),e(vle,$to),e(dg,kto),e(dg,HP),e(HP,Sto),e(dg,Rto),e(A,Pto),e(A,cg),e(cg,Fle),e(Fle,Bto),e(cg,Ito),e(cg,UP),e(UP,Nto),e(cg,qto),e(A,jto),e(A,fg),e(fg,Tle),e(Tle,Dto),e(fg,Gto),e(fg,JP),e(JP,Oto),e(fg,Vto),e(A,Xto),e(A,mg),e(mg,Mle),e(Mle,zto),e(mg,Wto),e(mg,YP),e(YP,Qto),e(mg,Hto),e(A,Uto),e(A,gg),e(gg,Ele),e(Ele,Jto),e(gg,Yto),e(gg,KP),e(KP,Kto),e(gg,Zto),e(A,eao),e(A,hg),e(hg,Cle),e(Cle,oao),e(hg,rao),e(hg,ZP),e(ZP,tao),e(hg,aao),e(A,nao),e(A,pg),e(pg,wle),e(wle,sao),e(pg,lao),e(pg,eB),e(eB,iao),e(pg,dao),e(A,cao),e(A,_g),e(_g,Ale),e(Ale,fao),e(_g,mao),e(_g,oB),e(oB,gao),e(_g,hao),e(A,pao),e(A,ug),e(ug,Lle),e(Lle,_ao),e(ug,uao),e(ug,rB),e(rB,bao),e(ug,vao),e(A,Fao),e(A,bg),e(bg,yle),e(yle,Tao),e(bg,Mao),e(bg,tB),e(tB,Eao),e(bg,Cao),e(A,wao),e(A,vg),e(vg,xle),e(xle,Aao),e(vg,Lao),e(vg,aB),e(aB,yao),e(vg,xao),e(A,$ao),e(A,Fg),e(Fg,$le),e($le,kao),e(Fg,Sao),e(Fg,nB),e(nB,Rao),e(Fg,Pao),e(A,Bao),e(A,Tg),e(Tg,kle),e(kle,Iao),e(Tg,Nao),e(Tg,sB),e(sB,qao),e(Tg,jao),e(A,Dao),e(A,Mg),e(Mg,Sle),e(Sle,Gao),e(Mg,Oao),e(Mg,lB),e(lB,Vao),e(Mg,Xao),e(A,zao),e(A,Eg),e(Eg,Rle),e(Rle,Wao),e(Eg,Qao),e(Eg,iB),e(iB,Hao),e(Eg,Uao),e(A,Jao),e(A,Cg),e(Cg,Ple),e(Ple,Yao),e(Cg,Kao),e(Cg,dB),e(dB,Zao),e(Cg,eno),e(A,ono),e(A,wg),e(wg,Ble),e(Ble,rno),e(wg,tno),e(wg,cB),e(cB,ano),e(wg,nno),e(A,sno),e(A,Ag),e(Ag,Ile),e(Ile,lno),e(Ag,ino),e(Ag,fB),e(fB,dno),e(Ag,cno),e(A,fno),e(A,Lg),e(Lg,Nle),e(Nle,mno),e(Lg,gno),e(Lg,mB),e(mB,hno),e(Lg,pno),e(A,_no),e(A,yg),e(yg,qle),e(qle,uno),e(yg,bno),e(yg,gB),e(gB,vno),e(yg,Fno),e(A,Tno),e(A,xg),e(xg,jle),e(jle,Mno),e(xg,Eno),e(xg,hB),e(hB,Cno),e(xg,wno),e(A,Ano),e(A,$g),e($g,Dle),e(Dle,Lno),e($g,yno),e($g,pB),e(pB,xno),e($g,$no),e(A,kno),e(A,kg),e(kg,Gle),e(Gle,Sno),e(kg,Rno),e(kg,_B),e(_B,Pno),e(kg,Bno),e(A,Ino),e(A,Sg),e(Sg,Ole),e(Ole,Nno),e(Sg,qno),e(Sg,uB),e(uB,jno),e(Sg,Dno),e(A,Gno),e(A,Rg),e(Rg,Vle),e(Vle,Ono),e(Rg,Vno),e(Rg,bB),e(bB,Xno),e(Rg,zno),e(A,Wno),e(A,Pg),e(Pg,Xle),e(Xle,Qno),e(Pg,Hno),e(Pg,vB),e(vB,Uno),e(Pg,Jno),e(A,Yno),e(A,Bg),e(Bg,zle),e(zle,Kno),e(Bg,Zno),e(Bg,FB),e(FB,eso),e(Bg,oso),e(A,rso),e(A,Ig),e(Ig,Wle),e(Wle,tso),e(Ig,aso),e(Ig,TB),e(TB,nso),e(Ig,sso),e(A,lso),e(A,Ng),e(Ng,Qle),e(Qle,iso),e(Ng,dso),e(Ng,MB),e(MB,cso),e(Ng,fso),e(A,mso),e(A,qg),e(qg,Hle),e(Hle,gso),e(qg,hso),e(qg,EB),e(EB,pso),e(qg,_so),e(A,uso),e(A,jg),e(jg,Ule),e(Ule,bso),e(jg,vso),e(jg,CB),e(CB,Fso),e(jg,Tso),e(A,Mso),e(A,Dg),e(Dg,Jle),e(Jle,Eso),e(Dg,Cso),e(Dg,wB),e(wB,wso),e(Dg,Aso),e(A,Lso),e(A,Gg),e(Gg,Yle),e(Yle,yso),e(Gg,xso),e(Gg,AB),e(AB,$so),e(Gg,kso),e(A,Sso),e(A,Og),e(Og,Kle),e(Kle,Rso),e(Og,Pso),e(Og,LB),e(LB,Bso),e(Og,Iso),e(A,Nso),e(A,Vg),e(Vg,Zle),e(Zle,qso),e(Vg,jso),e(Vg,yB),e(yB,Dso),e(Vg,Gso),e(A,Oso),e(A,Xg),e(Xg,eie),e(eie,Vso),e(Xg,Xso),e(Xg,xB),e(xB,zso),e(Xg,Wso),e(A,Qso),e(A,zg),e(zg,oie),e(oie,Hso),e(zg,Uso),e(zg,$B),e($B,Jso),e(zg,Yso),e(A,Kso),e(A,Wg),e(Wg,rie),e(rie,Zso),e(Wg,elo),e(Wg,kB),e(kB,olo),e(Wg,rlo),e(A,tlo),e(A,Qg),e(Qg,tie),e(tie,alo),e(Qg,nlo),e(Qg,SB),e(SB,slo),e(Qg,llo),e(A,ilo),e(A,Hg),e(Hg,aie),e(aie,dlo),e(Hg,clo),e(Hg,RB),e(RB,flo),e(Hg,mlo),e(A,glo),e(A,Ug),e(Ug,nie),e(nie,hlo),e(Ug,plo),e(Ug,PB),e(PB,_lo),e(Ug,ulo),e(A,blo),e(A,Jg),e(Jg,sie),e(sie,vlo),e(Jg,Flo),e(Jg,BB),e(BB,Tlo),e(Jg,Mlo),e(A,Elo),e(A,Yg),e(Yg,lie),e(lie,Clo),e(Yg,wlo),e(Yg,IB),e(IB,Alo),e(Yg,Llo),e(A,ylo),e(A,Kg),e(Kg,iie),e(iie,xlo),e(Kg,$lo),e(Kg,NB),e(NB,klo),e(Kg,Slo),e(A,Rlo),e(A,Zg),e(Zg,die),e(die,Plo),e(Zg,Blo),e(Zg,qB),e(qB,Ilo),e(Zg,Nlo),e(A,qlo),e(A,eh),e(eh,cie),e(cie,jlo),e(eh,Dlo),e(eh,jB),e(jB,Glo),e(eh,Olo),e(A,Vlo),e(A,oh),e(oh,fie),e(fie,Xlo),e(oh,zlo),e(oh,DB),e(DB,Wlo),e(oh,Qlo),e(A,Hlo),e(A,rh),e(rh,mie),e(mie,Ulo),e(rh,Jlo),e(rh,GB),e(GB,Ylo),e(rh,Klo),e(A,Zlo),e(A,th),e(th,gie),e(gie,eio),e(th,oio),e(th,OB),e(OB,rio),e(th,tio),e(A,aio),e(A,ah),e(ah,hie),e(hie,nio),e(ah,sio),e(ah,VB),e(VB,lio),e(ah,iio),e(A,dio),e(A,nh),e(nh,pie),e(pie,cio),e(nh,fio),e(nh,XB),e(XB,mio),e(nh,gio),e(A,hio),e(A,sh),e(sh,_ie),e(_ie,pio),e(sh,_io),e(sh,zB),e(zB,uio),e(sh,bio),e(A,vio),e(A,lh),e(lh,uie),e(uie,Fio),e(lh,Tio),e(lh,WB),e(WB,Mio),e(lh,Eio),e(A,Cio),e(A,ih),e(ih,bie),e(bie,wio),e(ih,Aio),e(ih,QB),e(QB,Lio),e(ih,yio),e(A,xio),e(A,dh),e(dh,vie),e(vie,$io),e(dh,kio),e(dh,HB),e(HB,Sio),e(dh,Rio),e(A,Pio),e(A,ch),e(ch,Fie),e(Fie,Bio),e(ch,Iio),e(ch,UB),e(UB,Nio),e(ch,qio),e($r,jio),M(fh,$r,null),e(yo,Dio),e(yo,mh),M(Z7,mh,null),e(mh,Gio),e(mh,Tie),e(Tie,Oio),b(f,OWe,u),b(f,Wi,u),e(Wi,gh),e(gh,Mie),M(eL,Mie,null),e(Wi,Vio),e(Wi,Eie),e(Eie,Xio),b(f,VWe,u),b(f,xo,u),M(oL,xo,null),e(xo,zio),e(xo,rL),e(rL,Wio),e(rL,JB),e(JB,Qio),e(rL,Hio),e(xo,Uio),e(xo,tL),e(tL,Jio),e(tL,Cie),e(Cie,Yio),e(tL,Kio),e(xo,Zio),e(xo,kr),M(aL,kr,null),e(kr,edo),e(kr,wie),e(wie,odo),e(kr,rdo),e(kr,qa),e(qa,tdo),e(qa,Aie),e(Aie,ado),e(qa,ndo),e(qa,Lie),e(Lie,sdo),e(qa,ldo),e(qa,yie),e(yie,ido),e(qa,ddo),e(kr,cdo),e(kr,k),e(k,zn),e(zn,xie),e(xie,fdo),e(zn,mdo),e(zn,YB),e(YB,gdo),e(zn,hdo),e(zn,KB),e(KB,pdo),e(zn,_do),e(k,udo),e(k,Wn),e(Wn,$ie),e($ie,bdo),e(Wn,vdo),e(Wn,ZB),e(ZB,Fdo),e(Wn,Tdo),e(Wn,eI),e(eI,Mdo),e(Wn,Edo),e(k,Cdo),e(k,Qn),e(Qn,kie),e(kie,wdo),e(Qn,Ado),e(Qn,oI),e(oI,Ldo),e(Qn,ydo),e(Qn,rI),e(rI,xdo),e(Qn,$do),e(k,kdo),e(k,hh),e(hh,Sie),e(Sie,Sdo),e(hh,Rdo),e(hh,tI),e(tI,Pdo),e(hh,Bdo),e(k,Ido),e(k,Hn),e(Hn,Rie),e(Rie,Ndo),e(Hn,qdo),e(Hn,aI),e(aI,jdo),e(Hn,Ddo),e(Hn,nI),e(nI,Gdo),e(Hn,Odo),e(k,Vdo),e(k,ph),e(ph,Pie),e(Pie,Xdo),e(ph,zdo),e(ph,sI),e(sI,Wdo),e(ph,Qdo),e(k,Hdo),e(k,_h),e(_h,Bie),e(Bie,Udo),e(_h,Jdo),e(_h,lI),e(lI,Ydo),e(_h,Kdo),e(k,Zdo),e(k,uh),e(uh,Iie),e(Iie,eco),e(uh,oco),e(uh,iI),e(iI,rco),e(uh,tco),e(k,aco),e(k,Un),e(Un,Nie),e(Nie,nco),e(Un,sco),e(Un,dI),e(dI,lco),e(Un,ico),e(Un,cI),e(cI,dco),e(Un,cco),e(k,fco),e(k,Jn),e(Jn,qie),e(qie,mco),e(Jn,gco),e(Jn,fI),e(fI,hco),e(Jn,pco),e(Jn,mI),e(mI,_co),e(Jn,uco),e(k,bco),e(k,Yn),e(Yn,jie),e(jie,vco),e(Yn,Fco),e(Yn,gI),e(gI,Tco),e(Yn,Mco),e(Yn,hI),e(hI,Eco),e(Yn,Cco),e(k,wco),e(k,bh),e(bh,Die),e(Die,Aco),e(bh,Lco),e(bh,pI),e(pI,yco),e(bh,xco),e(k,$co),e(k,vh),e(vh,Gie),e(Gie,kco),e(vh,Sco),e(vh,_I),e(_I,Rco),e(vh,Pco),e(k,Bco),e(k,Fh),e(Fh,Oie),e(Oie,Ico),e(Fh,Nco),e(Fh,uI),e(uI,qco),e(Fh,jco),e(k,Dco),e(k,Kn),e(Kn,Vie),e(Vie,Gco),e(Kn,Oco),e(Kn,bI),e(bI,Vco),e(Kn,Xco),e(Kn,vI),e(vI,zco),e(Kn,Wco),e(k,Qco),e(k,Th),e(Th,Xie),e(Xie,Hco),e(Th,Uco),e(Th,FI),e(FI,Jco),e(Th,Yco),e(k,Kco),e(k,Zn),e(Zn,zie),e(zie,Zco),e(Zn,efo),e(Zn,TI),e(TI,ofo),e(Zn,rfo),e(Zn,MI),e(MI,tfo),e(Zn,afo),e(k,nfo),e(k,es),e(es,Wie),e(Wie,sfo),e(es,lfo),e(es,EI),e(EI,ifo),e(es,dfo),e(es,CI),e(CI,cfo),e(es,ffo),e(k,mfo),e(k,os),e(os,Qie),e(Qie,gfo),e(os,hfo),e(os,wI),e(wI,pfo),e(os,_fo),e(os,AI),e(AI,ufo),e(os,bfo),e(k,vfo),e(k,rs),e(rs,Hie),e(Hie,Ffo),e(rs,Tfo),e(rs,LI),e(LI,Mfo),e(rs,Efo),e(rs,yI),e(yI,Cfo),e(rs,wfo),e(k,Afo),e(k,Mh),e(Mh,Uie),e(Uie,Lfo),e(Mh,yfo),e(Mh,xI),e(xI,xfo),e(Mh,$fo),e(k,kfo),e(k,ts),e(ts,Jie),e(Jie,Sfo),e(ts,Rfo),e(ts,$I),e($I,Pfo),e(ts,Bfo),e(ts,kI),e(kI,Ifo),e(ts,Nfo),e(k,qfo),e(k,as),e(as,Yie),e(Yie,jfo),e(as,Dfo),e(as,SI),e(SI,Gfo),e(as,Ofo),e(as,RI),e(RI,Vfo),e(as,Xfo),e(k,zfo),e(k,ns),e(ns,Kie),e(Kie,Wfo),e(ns,Qfo),e(ns,PI),e(PI,Hfo),e(ns,Ufo),e(ns,BI),e(BI,Jfo),e(ns,Yfo),e(k,Kfo),e(k,ss),e(ss,Zie),e(Zie,Zfo),e(ss,emo),e(ss,II),e(II,omo),e(ss,rmo),e(ss,NI),e(NI,tmo),e(ss,amo),e(k,nmo),e(k,ls),e(ls,ede),e(ede,smo),e(ls,lmo),e(ls,qI),e(qI,imo),e(ls,dmo),e(ls,jI),e(jI,cmo),e(ls,fmo),e(k,mmo),e(k,is),e(is,ode),e(ode,gmo),e(is,hmo),e(is,DI),e(DI,pmo),e(is,_mo),e(is,GI),e(GI,umo),e(is,bmo),e(k,vmo),e(k,Eh),e(Eh,rde),e(rde,Fmo),e(Eh,Tmo),e(Eh,OI),e(OI,Mmo),e(Eh,Emo),e(k,Cmo),e(k,ds),e(ds,tde),e(tde,wmo),e(ds,Amo),e(ds,VI),e(VI,Lmo),e(ds,ymo),e(ds,XI),e(XI,xmo),e(ds,$mo),e(k,kmo),e(k,Ch),e(Ch,ade),e(ade,Smo),e(Ch,Rmo),e(Ch,zI),e(zI,Pmo),e(Ch,Bmo),e(k,Imo),e(k,cs),e(cs,nde),e(nde,Nmo),e(cs,qmo),e(cs,WI),e(WI,jmo),e(cs,Dmo),e(cs,QI),e(QI,Gmo),e(cs,Omo),e(k,Vmo),e(k,fs),e(fs,sde),e(sde,Xmo),e(fs,zmo),e(fs,HI),e(HI,Wmo),e(fs,Qmo),e(fs,UI),e(UI,Hmo),e(fs,Umo),e(k,Jmo),e(k,ms),e(ms,lde),e(lde,Ymo),e(ms,Kmo),e(ms,JI),e(JI,Zmo),e(ms,ego),e(ms,YI),e(YI,ogo),e(ms,rgo),e(k,tgo),e(k,wh),e(wh,ide),e(ide,ago),e(wh,ngo),e(wh,KI),e(KI,sgo),e(wh,lgo),e(k,igo),e(k,gs),e(gs,dde),e(dde,dgo),e(gs,cgo),e(gs,ZI),e(ZI,fgo),e(gs,mgo),e(gs,eN),e(eN,ggo),e(gs,hgo),e(k,pgo),e(k,hs),e(hs,cde),e(cde,_go),e(hs,ugo),e(hs,oN),e(oN,bgo),e(hs,vgo),e(hs,rN),e(rN,Fgo),e(hs,Tgo),e(k,Mgo),e(k,ps),e(ps,fde),e(fde,Ego),e(ps,Cgo),e(ps,tN),e(tN,wgo),e(ps,Ago),e(ps,aN),e(aN,Lgo),e(ps,ygo),e(k,xgo),e(k,Ah),e(Ah,mde),e(mde,$go),e(Ah,kgo),e(Ah,nN),e(nN,Sgo),e(Ah,Rgo),e(k,Pgo),e(k,_s),e(_s,gde),e(gde,Bgo),e(_s,Igo),e(_s,sN),e(sN,Ngo),e(_s,qgo),e(_s,lN),e(lN,jgo),e(_s,Dgo),e(k,Ggo),e(k,us),e(us,hde),e(hde,Ogo),e(us,Vgo),e(us,iN),e(iN,Xgo),e(us,zgo),e(us,dN),e(dN,Wgo),e(us,Qgo),e(k,Hgo),e(k,bs),e(bs,pde),e(pde,Ugo),e(bs,Jgo),e(bs,cN),e(cN,Ygo),e(bs,Kgo),e(bs,fN),e(fN,Zgo),e(bs,eho),e(k,oho),e(k,vs),e(vs,_de),e(_de,rho),e(vs,tho),e(vs,mN),e(mN,aho),e(vs,nho),e(vs,gN),e(gN,sho),e(vs,lho),e(k,iho),e(k,Fs),e(Fs,ude),e(ude,dho),e(Fs,cho),e(Fs,hN),e(hN,fho),e(Fs,mho),e(Fs,pN),e(pN,gho),e(Fs,hho),e(k,pho),e(k,Ts),e(Ts,bde),e(bde,_ho),e(Ts,uho),e(Ts,_N),e(_N,bho),e(Ts,vho),e(Ts,uN),e(uN,Fho),e(Ts,Tho),e(k,Mho),e(k,Ms),e(Ms,vde),e(vde,Eho),e(Ms,Cho),e(Ms,bN),e(bN,who),e(Ms,Aho),e(Ms,vN),e(vN,Lho),e(Ms,yho),e(k,xho),e(k,Es),e(Es,Fde),e(Fde,$ho),e(Es,kho),e(Es,FN),e(FN,Sho),e(Es,Rho),e(Es,TN),e(TN,Pho),e(Es,Bho),e(k,Iho),e(k,Lh),e(Lh,Tde),e(Tde,Nho),e(Lh,qho),e(Lh,MN),e(MN,jho),e(Lh,Dho),e(k,Gho),e(k,Cs),e(Cs,Mde),e(Mde,Oho),e(Cs,Vho),e(Cs,EN),e(EN,Xho),e(Cs,zho),e(Cs,CN),e(CN,Who),e(Cs,Qho),e(k,Hho),e(k,yh),e(yh,Ede),e(Ede,Uho),e(yh,Jho),e(yh,wN),e(wN,Yho),e(yh,Kho),e(k,Zho),e(k,xh),e(xh,Cde),e(Cde,epo),e(xh,opo),e(xh,AN),e(AN,rpo),e(xh,tpo),e(k,apo),e(k,ws),e(ws,wde),e(wde,npo),e(ws,spo),e(ws,LN),e(LN,lpo),e(ws,ipo),e(ws,yN),e(yN,dpo),e(ws,cpo),e(k,fpo),e(k,As),e(As,Ade),e(Ade,mpo),e(As,gpo),e(As,xN),e(xN,hpo),e(As,ppo),e(As,$N),e($N,_po),e(As,upo),e(k,bpo),e(k,Ls),e(Ls,Lde),e(Lde,vpo),e(Ls,Fpo),e(Ls,kN),e(kN,Tpo),e(Ls,Mpo),e(Ls,SN),e(SN,Epo),e(Ls,Cpo),e(k,wpo),e(k,$h),e($h,yde),e(yde,Apo),e($h,Lpo),e($h,RN),e(RN,ypo),e($h,xpo),e(k,$po),e(k,ys),e(ys,xde),e(xde,kpo),e(ys,Spo),e(ys,PN),e(PN,Rpo),e(ys,Ppo),e(ys,BN),e(BN,Bpo),e(ys,Ipo),e(k,Npo),e(k,xs),e(xs,$de),e($de,qpo),e(xs,jpo),e(xs,IN),e(IN,Dpo),e(xs,Gpo),e(xs,NN),e(NN,Opo),e(xs,Vpo),e(k,Xpo),e(k,$s),e($s,kde),e(kde,zpo),e($s,Wpo),e($s,qN),e(qN,Qpo),e($s,Hpo),e($s,jN),e(jN,Upo),e($s,Jpo),e(k,Ypo),e(k,ks),e(ks,Sde),e(Sde,Kpo),e(ks,Zpo),e(ks,DN),e(DN,e_o),e(ks,o_o),e(ks,GN),e(GN,r_o),e(ks,t_o),e(k,a_o),e(k,Ss),e(Ss,Rde),e(Rde,n_o),e(Ss,s_o),e(Ss,ON),e(ON,l_o),e(Ss,i_o),e(Ss,VN),e(VN,d_o),e(Ss,c_o),e(k,f_o),e(k,Rs),e(Rs,Pde),e(Pde,m_o),e(Rs,g_o),e(Rs,XN),e(XN,h_o),e(Rs,p_o),e(Rs,zN),e(zN,__o),e(Rs,u_o),e(k,b_o),e(k,Ps),e(Ps,Bde),e(Bde,v_o),e(Ps,F_o),e(Ps,WN),e(WN,T_o),e(Ps,M_o),e(Ps,QN),e(QN,E_o),e(Ps,C_o),e(k,w_o),e(k,Bs),e(Bs,Ide),e(Ide,A_o),e(Bs,L_o),e(Bs,HN),e(HN,y_o),e(Bs,x_o),e(Bs,UN),e(UN,$_o),e(Bs,k_o),e(k,S_o),e(k,kh),e(kh,Nde),e(Nde,R_o),e(kh,P_o),e(kh,JN),e(JN,B_o),e(kh,I_o),e(k,N_o),e(k,Is),e(Is,qde),e(qde,q_o),e(Is,j_o),e(Is,YN),e(YN,D_o),e(Is,G_o),e(Is,KN),e(KN,O_o),e(Is,V_o),e(k,X_o),e(k,Ns),e(Ns,jde),e(jde,z_o),e(Ns,W_o),e(Ns,ZN),e(ZN,Q_o),e(Ns,H_o),e(Ns,eq),e(eq,U_o),e(Ns,J_o),e(k,Y_o),e(k,Sh),e(Sh,Dde),e(Dde,K_o),e(Sh,Z_o),e(Sh,oq),e(oq,euo),e(Sh,ouo),e(k,ruo),e(k,Rh),e(Rh,Gde),e(Gde,tuo),e(Rh,auo),e(Rh,rq),e(rq,nuo),e(Rh,suo),e(k,luo),e(k,Ph),e(Ph,Ode),e(Ode,iuo),e(Ph,duo),e(Ph,tq),e(tq,cuo),e(Ph,fuo),e(k,muo),e(k,Bh),e(Bh,Vde),e(Vde,guo),e(Bh,huo),e(Bh,aq),e(aq,puo),e(Bh,_uo),e(k,uuo),e(k,qs),e(qs,Xde),e(Xde,buo),e(qs,vuo),e(qs,nq),e(nq,Fuo),e(qs,Tuo),e(qs,sq),e(sq,Muo),e(qs,Euo),e(k,Cuo),e(k,Ih),e(Ih,zde),e(zde,wuo),e(Ih,Auo),e(Ih,lq),e(lq,Luo),e(Ih,yuo),e(k,xuo),e(k,js),e(js,Wde),e(Wde,$uo),e(js,kuo),e(js,iq),e(iq,Suo),e(js,Ruo),e(js,dq),e(dq,Puo),e(js,Buo),e(k,Iuo),e(k,Ds),e(Ds,Qde),e(Qde,Nuo),e(Ds,quo),e(Ds,cq),e(cq,juo),e(Ds,Duo),e(Ds,fq),e(fq,Guo),e(Ds,Ouo),e(k,Vuo),e(k,Gs),e(Gs,Hde),e(Hde,Xuo),e(Gs,zuo),e(Gs,mq),e(mq,Wuo),e(Gs,Quo),e(Gs,gq),e(gq,Huo),e(Gs,Uuo),e(k,Juo),e(k,Os),e(Os,Ude),e(Ude,Yuo),e(Os,Kuo),e(Os,hq),e(hq,Zuo),e(Os,e2o),e(Os,pq),e(pq,o2o),e(Os,r2o),e(k,t2o),e(k,Vs),e(Vs,Jde),e(Jde,a2o),e(Vs,n2o),e(Vs,_q),e(_q,s2o),e(Vs,l2o),e(Vs,uq),e(uq,i2o),e(Vs,d2o),e(k,c2o),e(k,Xs),e(Xs,Yde),e(Yde,f2o),e(Xs,m2o),e(Xs,bq),e(bq,g2o),e(Xs,h2o),e(Xs,vq),e(vq,p2o),e(Xs,_2o),e(k,u2o),e(k,Nh),e(Nh,Kde),e(Kde,b2o),e(Nh,v2o),e(Nh,Fq),e(Fq,F2o),e(Nh,T2o),e(k,M2o),e(k,qh),e(qh,Zde),e(Zde,E2o),e(qh,C2o),e(qh,Tq),e(Tq,w2o),e(qh,A2o),e(k,L2o),e(k,zs),e(zs,ece),e(ece,y2o),e(zs,x2o),e(zs,Mq),e(Mq,$2o),e(zs,k2o),e(zs,Eq),e(Eq,S2o),e(zs,R2o),e(k,P2o),e(k,Ws),e(Ws,oce),e(oce,B2o),e(Ws,I2o),e(Ws,Cq),e(Cq,N2o),e(Ws,q2o),e(Ws,wq),e(wq,j2o),e(Ws,D2o),e(k,G2o),e(k,Qs),e(Qs,rce),e(rce,O2o),e(Qs,V2o),e(Qs,Aq),e(Aq,X2o),e(Qs,z2o),e(Qs,Lq),e(Lq,W2o),e(Qs,Q2o),e(k,H2o),e(k,jh),e(jh,tce),e(tce,U2o),e(jh,J2o),e(jh,yq),e(yq,Y2o),e(jh,K2o),e(k,Z2o),e(k,Dh),e(Dh,ace),e(ace,e1o),e(Dh,o1o),e(Dh,xq),e(xq,r1o),e(Dh,t1o),e(k,a1o),e(k,Gh),e(Gh,nce),e(nce,n1o),e(Gh,s1o),e(Gh,$q),e($q,l1o),e(Gh,i1o),e(k,d1o),e(k,Hs),e(Hs,sce),e(sce,c1o),e(Hs,f1o),e(Hs,kq),e(kq,m1o),e(Hs,g1o),e(Hs,Sq),e(Sq,h1o),e(Hs,p1o),e(k,_1o),e(k,Us),e(Us,lce),e(lce,u1o),e(Us,b1o),e(Us,Rq),e(Rq,v1o),e(Us,F1o),e(Us,Pq),e(Pq,T1o),e(Us,M1o),e(k,E1o),e(k,Oh),e(Oh,ice),e(ice,C1o),e(Oh,w1o),e(Oh,Bq),e(Bq,A1o),e(Oh,L1o),e(k,y1o),e(k,Vh),e(Vh,dce),e(dce,x1o),e(Vh,$1o),e(Vh,Iq),e(Iq,k1o),e(Vh,S1o),e(k,R1o),e(k,Xh),e(Xh,cce),e(cce,P1o),e(Xh,B1o),e(Xh,Nq),e(Nq,I1o),e(Xh,N1o),e(k,q1o),e(k,Js),e(Js,fce),e(fce,j1o),e(Js,D1o),e(Js,qq),e(qq,G1o),e(Js,O1o),e(Js,jq),e(jq,V1o),e(Js,X1o),e(k,z1o),e(k,zh),e(zh,mce),e(mce,W1o),e(zh,Q1o),e(zh,Dq),e(Dq,H1o),e(zh,U1o),e(k,J1o),e(k,Wh),e(Wh,gce),e(gce,Y1o),e(Wh,K1o),e(Wh,Gq),e(Gq,Z1o),e(Wh,ebo),e(k,obo),e(k,Ys),e(Ys,hce),e(hce,rbo),e(Ys,tbo),e(Ys,Oq),e(Oq,abo),e(Ys,nbo),e(Ys,Vq),e(Vq,sbo),e(Ys,lbo),e(k,ibo),e(k,Ks),e(Ks,pce),e(pce,dbo),e(Ks,cbo),e(Ks,Xq),e(Xq,fbo),e(Ks,mbo),e(Ks,zq),e(zq,gbo),e(Ks,hbo),e(k,pbo),e(k,Zs),e(Zs,_ce),e(_ce,_bo),e(Zs,ubo),e(Zs,Wq),e(Wq,bbo),e(Zs,vbo),e(Zs,Qq),e(Qq,Fbo),e(Zs,Tbo),e(k,Mbo),e(k,el),e(el,uce),e(uce,Ebo),e(el,Cbo),e(el,Hq),e(Hq,wbo),e(el,Abo),e(el,Uq),e(Uq,Lbo),e(el,ybo),e(kr,xbo),M(Qh,kr,null),e(xo,$bo),e(xo,Hh),M(nL,Hh,null),e(Hh,kbo),e(Hh,bce),e(bce,Sbo),b(f,XWe,u),b(f,Qi,u),e(Qi,Uh),e(Uh,vce),M(sL,vce,null),e(Qi,Rbo),e(Qi,Fce),e(Fce,Pbo),b(f,zWe,u),b(f,$o,u),M(lL,$o,null),e($o,Bbo),e($o,iL),e(iL,Ibo),e(iL,Jq),e(Jq,Nbo),e(iL,qbo),e($o,jbo),e($o,dL),e(dL,Dbo),e(dL,Tce),e(Tce,Gbo),e(dL,Obo),e($o,Vbo),e($o,Ue),M(cL,Ue,null),e(Ue,Xbo),e(Ue,Mce),e(Mce,zbo),e(Ue,Wbo),e(Ue,ja),e(ja,Qbo),e(ja,Ece),e(Ece,Hbo),e(ja,Ubo),e(ja,Cce),e(Cce,Jbo),e(ja,Ybo),e(ja,wce),e(wce,Kbo),e(ja,Zbo),e(Ue,evo),e(Ue,H),e(H,Jh),e(Jh,Ace),e(Ace,ovo),e(Jh,rvo),e(Jh,Yq),e(Yq,tvo),e(Jh,avo),e(H,nvo),e(H,Yh),e(Yh,Lce),e(Lce,svo),e(Yh,lvo),e(Yh,Kq),e(Kq,ivo),e(Yh,dvo),e(H,cvo),e(H,Kh),e(Kh,yce),e(yce,fvo),e(Kh,mvo),e(Kh,Zq),e(Zq,gvo),e(Kh,hvo),e(H,pvo),e(H,Zh),e(Zh,xce),e(xce,_vo),e(Zh,uvo),e(Zh,ej),e(ej,bvo),e(Zh,vvo),e(H,Fvo),e(H,ep),e(ep,$ce),e($ce,Tvo),e(ep,Mvo),e(ep,oj),e(oj,Evo),e(ep,Cvo),e(H,wvo),e(H,op),e(op,kce),e(kce,Avo),e(op,Lvo),e(op,rj),e(rj,yvo),e(op,xvo),e(H,$vo),e(H,rp),e(rp,Sce),e(Sce,kvo),e(rp,Svo),e(rp,tj),e(tj,Rvo),e(rp,Pvo),e(H,Bvo),e(H,tp),e(tp,Rce),e(Rce,Ivo),e(tp,Nvo),e(tp,aj),e(aj,qvo),e(tp,jvo),e(H,Dvo),e(H,ap),e(ap,Pce),e(Pce,Gvo),e(ap,Ovo),e(ap,nj),e(nj,Vvo),e(ap,Xvo),e(H,zvo),e(H,np),e(np,Bce),e(Bce,Wvo),e(np,Qvo),e(np,sj),e(sj,Hvo),e(np,Uvo),e(H,Jvo),e(H,sp),e(sp,Ice),e(Ice,Yvo),e(sp,Kvo),e(sp,lj),e(lj,Zvo),e(sp,e5o),e(H,o5o),e(H,lp),e(lp,Nce),e(Nce,r5o),e(lp,t5o),e(lp,ij),e(ij,a5o),e(lp,n5o),e(H,s5o),e(H,ip),e(ip,qce),e(qce,l5o),e(ip,i5o),e(ip,dj),e(dj,d5o),e(ip,c5o),e(H,f5o),e(H,dp),e(dp,jce),e(jce,m5o),e(dp,g5o),e(dp,cj),e(cj,h5o),e(dp,p5o),e(H,_5o),e(H,cp),e(cp,Dce),e(Dce,u5o),e(cp,b5o),e(cp,fj),e(fj,v5o),e(cp,F5o),e(H,T5o),e(H,fp),e(fp,Gce),e(Gce,M5o),e(fp,E5o),e(fp,mj),e(mj,C5o),e(fp,w5o),e(H,A5o),e(H,mp),e(mp,Oce),e(Oce,L5o),e(mp,y5o),e(mp,gj),e(gj,x5o),e(mp,$5o),e(H,k5o),e(H,gp),e(gp,Vce),e(Vce,S5o),e(gp,R5o),e(gp,hj),e(hj,P5o),e(gp,B5o),e(H,I5o),e(H,hp),e(hp,Xce),e(Xce,N5o),e(hp,q5o),e(hp,pj),e(pj,j5o),e(hp,D5o),e(H,G5o),e(H,pp),e(pp,zce),e(zce,O5o),e(pp,V5o),e(pp,_j),e(_j,X5o),e(pp,z5o),e(H,W5o),e(H,_p),e(_p,Wce),e(Wce,Q5o),e(_p,H5o),e(_p,uj),e(uj,U5o),e(_p,J5o),e(H,Y5o),e(H,up),e(up,Qce),e(Qce,K5o),e(up,Z5o),e(up,bj),e(bj,eFo),e(up,oFo),e(H,rFo),e(H,bp),e(bp,Hce),e(Hce,tFo),e(bp,aFo),e(bp,vj),e(vj,nFo),e(bp,sFo),e(H,lFo),e(H,vp),e(vp,Uce),e(Uce,iFo),e(vp,dFo),e(vp,Fj),e(Fj,cFo),e(vp,fFo),e(H,mFo),e(H,Fp),e(Fp,Jce),e(Jce,gFo),e(Fp,hFo),e(Fp,Tj),e(Tj,pFo),e(Fp,_Fo),e(H,uFo),e(H,Tp),e(Tp,Yce),e(Yce,bFo),e(Tp,vFo),e(Tp,Mj),e(Mj,FFo),e(Tp,TFo),e(H,MFo),e(H,Mp),e(Mp,Kce),e(Kce,EFo),e(Mp,CFo),e(Mp,Ej),e(Ej,wFo),e(Mp,AFo),e(H,LFo),e(H,Ep),e(Ep,Zce),e(Zce,yFo),e(Ep,xFo),e(Ep,Cj),e(Cj,$Fo),e(Ep,kFo),e(H,SFo),e(H,Cp),e(Cp,efe),e(efe,RFo),e(Cp,PFo),e(Cp,wj),e(wj,BFo),e(Cp,IFo),e(H,NFo),e(H,wp),e(wp,ofe),e(ofe,qFo),e(wp,jFo),e(wp,Aj),e(Aj,DFo),e(wp,GFo),e(H,OFo),e(H,Ap),e(Ap,rfe),e(rfe,VFo),e(Ap,XFo),e(Ap,Lj),e(Lj,zFo),e(Ap,WFo),e(H,QFo),e(H,Lp),e(Lp,tfe),e(tfe,HFo),e(Lp,UFo),e(Lp,yj),e(yj,JFo),e(Lp,YFo),e(H,KFo),e(H,yp),e(yp,afe),e(afe,ZFo),e(yp,eTo),e(yp,xj),e(xj,oTo),e(yp,rTo),e(H,tTo),e(H,xp),e(xp,nfe),e(nfe,aTo),e(xp,nTo),e(xp,$j),e($j,sTo),e(xp,lTo),e(H,iTo),e(H,$p),e($p,sfe),e(sfe,dTo),e($p,cTo),e($p,kj),e(kj,fTo),e($p,mTo),e(H,gTo),e(H,kp),e(kp,lfe),e(lfe,hTo),e(kp,pTo),e(kp,Sj),e(Sj,_To),e(kp,uTo),e(H,bTo),e(H,Sp),e(Sp,ife),e(ife,vTo),e(Sp,FTo),e(Sp,Rj),e(Rj,TTo),e(Sp,MTo),e(Ue,ETo),M(Rp,Ue,null),e(Ue,CTo),M(Pp,Ue,null),e($o,wTo),e($o,Bp),M(fL,Bp,null),e(Bp,ATo),e(Bp,dfe),e(dfe,LTo),b(f,WWe,u),b(f,Hi,u),e(Hi,Ip),e(Ip,cfe),M(mL,cfe,null),e(Hi,yTo),e(Hi,ffe),e(ffe,xTo),b(f,QWe,u),b(f,ko,u),M(gL,ko,null),e(ko,$To),e(ko,hL),e(hL,kTo),e(hL,Pj),e(Pj,STo),e(hL,RTo),e(ko,PTo),e(ko,pL),e(pL,BTo),e(pL,mfe),e(mfe,ITo),e(pL,NTo),e(ko,qTo),e(ko,Je),M(_L,Je,null),e(Je,jTo),e(Je,gfe),e(gfe,DTo),e(Je,GTo),e(Je,Ui),e(Ui,OTo),e(Ui,hfe),e(hfe,VTo),e(Ui,XTo),e(Ui,pfe),e(pfe,zTo),e(Ui,WTo),e(Je,QTo),e(Je,fe),e(fe,Np),e(Np,_fe),e(_fe,HTo),e(Np,UTo),e(Np,Bj),e(Bj,JTo),e(Np,YTo),e(fe,KTo),e(fe,qp),e(qp,ufe),e(ufe,ZTo),e(qp,e8o),e(qp,Ij),e(Ij,o8o),e(qp,r8o),e(fe,t8o),e(fe,jp),e(jp,bfe),e(bfe,a8o),e(jp,n8o),e(jp,Nj),e(Nj,s8o),e(jp,l8o),e(fe,i8o),e(fe,Dp),e(Dp,vfe),e(vfe,d8o),e(Dp,c8o),e(Dp,qj),e(qj,f8o),e(Dp,m8o),e(fe,g8o),e(fe,Gp),e(Gp,Ffe),e(Ffe,h8o),e(Gp,p8o),e(Gp,jj),e(jj,_8o),e(Gp,u8o),e(fe,b8o),e(fe,Op),e(Op,Tfe),e(Tfe,v8o),e(Op,F8o),e(Op,Dj),e(Dj,T8o),e(Op,M8o),e(fe,E8o),e(fe,Vp),e(Vp,Mfe),e(Mfe,C8o),e(Vp,w8o),e(Vp,Gj),e(Gj,A8o),e(Vp,L8o),e(fe,y8o),e(fe,Xp),e(Xp,Efe),e(Efe,x8o),e(Xp,$8o),e(Xp,Oj),e(Oj,k8o),e(Xp,S8o),e(fe,R8o),e(fe,zp),e(zp,Cfe),e(Cfe,P8o),e(zp,B8o),e(zp,Vj),e(Vj,I8o),e(zp,N8o),e(fe,q8o),e(fe,Wp),e(Wp,wfe),e(wfe,j8o),e(Wp,D8o),e(Wp,Xj),e(Xj,G8o),e(Wp,O8o),e(fe,V8o),e(fe,Qp),e(Qp,Afe),e(Afe,X8o),e(Qp,z8o),e(Qp,zj),e(zj,W8o),e(Qp,Q8o),e(fe,H8o),e(fe,Hp),e(Hp,Lfe),e(Lfe,U8o),e(Hp,J8o),e(Hp,Wj),e(Wj,Y8o),e(Hp,K8o),e(fe,Z8o),e(fe,Up),e(Up,yfe),e(yfe,e9o),e(Up,o9o),e(Up,Qj),e(Qj,r9o),e(Up,t9o),e(fe,a9o),e(fe,Jp),e(Jp,xfe),e(xfe,n9o),e(Jp,s9o),e(Jp,Hj),e(Hj,l9o),e(Jp,i9o),e(fe,d9o),e(fe,Yp),e(Yp,$fe),e($fe,c9o),e(Yp,f9o),e(Yp,Uj),e(Uj,m9o),e(Yp,g9o),e(fe,h9o),e(fe,Kp),e(Kp,kfe),e(kfe,p9o),e(Kp,_9o),e(Kp,Jj),e(Jj,u9o),e(Kp,b9o),e(fe,v9o),e(fe,Zp),e(Zp,Sfe),e(Sfe,F9o),e(Zp,T9o),e(Zp,Yj),e(Yj,M9o),e(Zp,E9o),e(fe,C9o),e(fe,e_),e(e_,Rfe),e(Rfe,w9o),e(e_,A9o),e(e_,Kj),e(Kj,L9o),e(e_,y9o),e(fe,x9o),e(fe,o_),e(o_,Pfe),e(Pfe,$9o),e(o_,k9o),e(o_,Zj),e(Zj,S9o),e(o_,R9o),e(Je,P9o),M(r_,Je,null),e(Je,B9o),M(t_,Je,null),e(ko,I9o),e(ko,a_),M(uL,a_,null),e(a_,N9o),e(a_,Bfe),e(Bfe,q9o),b(f,HWe,u),b(f,Ji,u),e(Ji,n_),e(n_,Ife),M(bL,Ife,null),e(Ji,j9o),e(Ji,Nfe),e(Nfe,D9o),b(f,UWe,u),b(f,So,u),M(vL,So,null),e(So,G9o),e(So,Yi),e(Yi,O9o),e(Yi,eD),e(eD,V9o),e(Yi,X9o),e(Yi,oD),e(oD,z9o),e(Yi,W9o),e(So,Q9o),e(So,FL),e(FL,H9o),e(FL,qfe),e(qfe,U9o),e(FL,J9o),e(So,Y9o),e(So,ct),M(TL,ct,null),e(ct,K9o),e(ct,jfe),e(jfe,Z9o),e(ct,eMo),e(ct,Ki),e(Ki,oMo),e(Ki,Dfe),e(Dfe,rMo),e(Ki,tMo),e(Ki,rD),e(rD,aMo),e(Ki,nMo),e(ct,sMo),M(s_,ct,null),e(So,lMo),e(So,Ye),M(ML,Ye,null),e(Ye,iMo),e(Ye,Gfe),e(Gfe,dMo),e(Ye,cMo),e(Ye,Da),e(Da,fMo),e(Da,Ofe),e(Ofe,mMo),e(Da,gMo),e(Da,Vfe),e(Vfe,hMo),e(Da,pMo),e(Da,Xfe),e(Xfe,_Mo),e(Da,uMo),e(Ye,bMo),e(Ye,y),e(y,l_),e(l_,zfe),e(zfe,vMo),e(l_,FMo),e(l_,tD),e(tD,TMo),e(l_,MMo),e(y,EMo),e(y,i_),e(i_,Wfe),e(Wfe,CMo),e(i_,wMo),e(i_,aD),e(aD,AMo),e(i_,LMo),e(y,yMo),e(y,d_),e(d_,Qfe),e(Qfe,xMo),e(d_,$Mo),e(d_,nD),e(nD,kMo),e(d_,SMo),e(y,RMo),e(y,c_),e(c_,Hfe),e(Hfe,PMo),e(c_,BMo),e(c_,sD),e(sD,IMo),e(c_,NMo),e(y,qMo),e(y,f_),e(f_,Ufe),e(Ufe,jMo),e(f_,DMo),e(f_,lD),e(lD,GMo),e(f_,OMo),e(y,VMo),e(y,m_),e(m_,Jfe),e(Jfe,XMo),e(m_,zMo),e(m_,iD),e(iD,WMo),e(m_,QMo),e(y,HMo),e(y,g_),e(g_,Yfe),e(Yfe,UMo),e(g_,JMo),e(g_,dD),e(dD,YMo),e(g_,KMo),e(y,ZMo),e(y,h_),e(h_,Kfe),e(Kfe,eEo),e(h_,oEo),e(h_,cD),e(cD,rEo),e(h_,tEo),e(y,aEo),e(y,p_),e(p_,Zfe),e(Zfe,nEo),e(p_,sEo),e(p_,fD),e(fD,lEo),e(p_,iEo),e(y,dEo),e(y,__),e(__,eme),e(eme,cEo),e(__,fEo),e(__,mD),e(mD,mEo),e(__,gEo),e(y,hEo),e(y,u_),e(u_,ome),e(ome,pEo),e(u_,_Eo),e(u_,gD),e(gD,uEo),e(u_,bEo),e(y,vEo),e(y,b_),e(b_,rme),e(rme,FEo),e(b_,TEo),e(b_,hD),e(hD,MEo),e(b_,EEo),e(y,CEo),e(y,v_),e(v_,tme),e(tme,wEo),e(v_,AEo),e(v_,pD),e(pD,LEo),e(v_,yEo),e(y,xEo),e(y,F_),e(F_,ame),e(ame,$Eo),e(F_,kEo),e(F_,_D),e(_D,SEo),e(F_,REo),e(y,PEo),e(y,T_),e(T_,nme),e(nme,BEo),e(T_,IEo),e(T_,uD),e(uD,NEo),e(T_,qEo),e(y,jEo),e(y,M_),e(M_,sme),e(sme,DEo),e(M_,GEo),e(M_,bD),e(bD,OEo),e(M_,VEo),e(y,XEo),e(y,E_),e(E_,lme),e(lme,zEo),e(E_,WEo),e(E_,vD),e(vD,QEo),e(E_,HEo),e(y,UEo),e(y,C_),e(C_,ime),e(ime,JEo),e(C_,YEo),e(C_,FD),e(FD,KEo),e(C_,ZEo),e(y,e4o),e(y,w_),e(w_,dme),e(dme,o4o),e(w_,r4o),e(w_,TD),e(TD,t4o),e(w_,a4o),e(y,n4o),e(y,A_),e(A_,cme),e(cme,s4o),e(A_,l4o),e(A_,MD),e(MD,i4o),e(A_,d4o),e(y,c4o),e(y,L_),e(L_,fme),e(fme,f4o),e(L_,m4o),e(L_,ED),e(ED,g4o),e(L_,h4o),e(y,p4o),e(y,y_),e(y_,mme),e(mme,_4o),e(y_,u4o),e(y_,CD),e(CD,b4o),e(y_,v4o),e(y,F4o),e(y,x_),e(x_,gme),e(gme,T4o),e(x_,M4o),e(x_,wD),e(wD,E4o),e(x_,C4o),e(y,w4o),e(y,$_),e($_,hme),e(hme,A4o),e($_,L4o),e($_,AD),e(AD,y4o),e($_,x4o),e(y,$4o),e(y,k_),e(k_,pme),e(pme,k4o),e(k_,S4o),e(k_,LD),e(LD,R4o),e(k_,P4o),e(y,B4o),e(y,S_),e(S_,_me),e(_me,I4o),e(S_,N4o),e(S_,yD),e(yD,q4o),e(S_,j4o),e(y,D4o),e(y,R_),e(R_,ume),e(ume,G4o),e(R_,O4o),e(R_,xD),e(xD,V4o),e(R_,X4o),e(y,z4o),e(y,P_),e(P_,bme),e(bme,W4o),e(P_,Q4o),e(P_,$D),e($D,H4o),e(P_,U4o),e(y,J4o),e(y,B_),e(B_,vme),e(vme,Y4o),e(B_,K4o),e(B_,kD),e(kD,Z4o),e(B_,eCo),e(y,oCo),e(y,I_),e(I_,Fme),e(Fme,rCo),e(I_,tCo),e(I_,SD),e(SD,aCo),e(I_,nCo),e(y,sCo),e(y,N_),e(N_,Tme),e(Tme,lCo),e(N_,iCo),e(N_,RD),e(RD,dCo),e(N_,cCo),e(y,fCo),e(y,q_),e(q_,Mme),e(Mme,mCo),e(q_,gCo),e(q_,PD),e(PD,hCo),e(q_,pCo),e(y,_Co),e(y,j_),e(j_,Eme),e(Eme,uCo),e(j_,bCo),e(j_,BD),e(BD,vCo),e(j_,FCo),e(y,TCo),e(y,D_),e(D_,Cme),e(Cme,MCo),e(D_,ECo),e(D_,ID),e(ID,CCo),e(D_,wCo),e(y,ACo),e(y,ol),e(ol,wme),e(wme,LCo),e(ol,yCo),e(ol,ND),e(ND,xCo),e(ol,$Co),e(ol,qD),e(qD,kCo),e(ol,SCo),e(y,RCo),e(y,G_),e(G_,Ame),e(Ame,PCo),e(G_,BCo),e(G_,jD),e(jD,ICo),e(G_,NCo),e(y,qCo),e(y,O_),e(O_,Lme),e(Lme,jCo),e(O_,DCo),e(O_,DD),e(DD,GCo),e(O_,OCo),e(y,VCo),e(y,V_),e(V_,yme),e(yme,XCo),e(V_,zCo),e(V_,GD),e(GD,WCo),e(V_,QCo),e(y,HCo),e(y,X_),e(X_,xme),e(xme,UCo),e(X_,JCo),e(X_,OD),e(OD,YCo),e(X_,KCo),e(y,ZCo),e(y,z_),e(z_,$me),e($me,e3o),e(z_,o3o),e(z_,VD),e(VD,r3o),e(z_,t3o),e(y,a3o),e(y,W_),e(W_,kme),e(kme,n3o),e(W_,s3o),e(W_,XD),e(XD,l3o),e(W_,i3o),e(y,d3o),e(y,Q_),e(Q_,Sme),e(Sme,c3o),e(Q_,f3o),e(Q_,zD),e(zD,m3o),e(Q_,g3o),e(y,h3o),e(y,H_),e(H_,Rme),e(Rme,p3o),e(H_,_3o),e(H_,WD),e(WD,u3o),e(H_,b3o),e(y,v3o),e(y,U_),e(U_,Pme),e(Pme,F3o),e(U_,T3o),e(U_,QD),e(QD,M3o),e(U_,E3o),e(y,C3o),e(y,J_),e(J_,Bme),e(Bme,w3o),e(J_,A3o),e(J_,HD),e(HD,L3o),e(J_,y3o),e(y,x3o),e(y,Y_),e(Y_,Ime),e(Ime,$3o),e(Y_,k3o),e(Y_,UD),e(UD,S3o),e(Y_,R3o),e(y,P3o),e(y,K_),e(K_,Nme),e(Nme,B3o),e(K_,I3o),e(K_,JD),e(JD,N3o),e(K_,q3o),e(y,j3o),e(y,Z_),e(Z_,qme),e(qme,D3o),e(Z_,G3o),e(Z_,YD),e(YD,O3o),e(Z_,V3o),e(y,X3o),e(y,eu),e(eu,jme),e(jme,z3o),e(eu,W3o),e(eu,KD),e(KD,Q3o),e(eu,H3o),e(y,U3o),e(y,ou),e(ou,Dme),e(Dme,J3o),e(ou,Y3o),e(ou,ZD),e(ZD,K3o),e(ou,Z3o),e(y,e0o),e(y,ru),e(ru,Gme),e(Gme,o0o),e(ru,r0o),e(ru,eG),e(eG,t0o),e(ru,a0o),e(y,n0o),e(y,tu),e(tu,Ome),e(Ome,s0o),e(tu,l0o),e(tu,oG),e(oG,i0o),e(tu,d0o),e(y,c0o),e(y,au),e(au,Vme),e(Vme,f0o),e(au,m0o),e(au,rG),e(rG,g0o),e(au,h0o),e(y,p0o),e(y,nu),e(nu,Xme),e(Xme,_0o),e(nu,u0o),e(nu,tG),e(tG,b0o),e(nu,v0o),e(y,F0o),e(y,su),e(su,zme),e(zme,T0o),e(su,M0o),e(su,aG),e(aG,E0o),e(su,C0o),e(y,w0o),e(y,lu),e(lu,Wme),e(Wme,A0o),e(lu,L0o),e(lu,nG),e(nG,y0o),e(lu,x0o),e(y,$0o),e(y,iu),e(iu,Qme),e(Qme,k0o),e(iu,S0o),e(iu,sG),e(sG,R0o),e(iu,P0o),e(y,B0o),e(y,du),e(du,Hme),e(Hme,I0o),e(du,N0o),e(du,lG),e(lG,q0o),e(du,j0o),e(y,D0o),e(y,cu),e(cu,Ume),e(Ume,G0o),e(cu,O0o),e(cu,iG),e(iG,V0o),e(cu,X0o),e(y,z0o),e(y,fu),e(fu,Jme),e(Jme,W0o),e(fu,Q0o),e(fu,dG),e(dG,H0o),e(fu,U0o),e(y,J0o),e(y,mu),e(mu,Yme),e(Yme,Y0o),e(mu,K0o),e(mu,cG),e(cG,Z0o),e(mu,ewo),e(y,owo),e(y,gu),e(gu,Kme),e(Kme,rwo),e(gu,two),e(gu,fG),e(fG,awo),e(gu,nwo),e(y,swo),e(y,hu),e(hu,Zme),e(Zme,lwo),e(hu,iwo),e(hu,mG),e(mG,dwo),e(hu,cwo),e(y,fwo),e(y,pu),e(pu,ege),e(ege,mwo),e(pu,gwo),e(pu,gG),e(gG,hwo),e(pu,pwo),e(y,_wo),e(y,_u),e(_u,oge),e(oge,uwo),e(_u,bwo),e(_u,hG),e(hG,vwo),e(_u,Fwo),e(y,Two),e(y,uu),e(uu,rge),e(rge,Mwo),e(uu,Ewo),e(uu,pG),e(pG,Cwo),e(uu,wwo),e(y,Awo),e(y,bu),e(bu,tge),e(tge,Lwo),e(bu,ywo),e(bu,_G),e(_G,xwo),e(bu,$wo),e(y,kwo),e(y,vu),e(vu,age),e(age,Swo),e(vu,Rwo),e(vu,uG),e(uG,Pwo),e(vu,Bwo),e(y,Iwo),e(y,Fu),e(Fu,nge),e(nge,Nwo),e(Fu,qwo),e(Fu,bG),e(bG,jwo),e(Fu,Dwo),e(y,Gwo),e(y,Tu),e(Tu,sge),e(sge,Owo),e(Tu,Vwo),e(Tu,vG),e(vG,Xwo),e(Tu,zwo),e(y,Wwo),e(y,Mu),e(Mu,lge),e(lge,Qwo),e(Mu,Hwo),e(Mu,FG),e(FG,Uwo),e(Mu,Jwo),e(y,Ywo),e(y,Eu),e(Eu,ige),e(ige,Kwo),e(Eu,Zwo),e(Eu,TG),e(TG,e6o),e(Eu,o6o),e(y,r6o),e(y,Cu),e(Cu,dge),e(dge,t6o),e(Cu,a6o),e(Cu,MG),e(MG,n6o),e(Cu,s6o),e(y,l6o),e(y,wu),e(wu,cge),e(cge,i6o),e(wu,d6o),e(wu,EG),e(EG,c6o),e(wu,f6o),e(y,m6o),e(y,Au),e(Au,fge),e(fge,g6o),e(Au,h6o),e(Au,CG),e(CG,p6o),e(Au,_6o),e(y,u6o),e(y,Lu),e(Lu,mge),e(mge,b6o),e(Lu,v6o),e(Lu,wG),e(wG,F6o),e(Lu,T6o),e(y,M6o),e(y,yu),e(yu,gge),e(gge,E6o),e(yu,C6o),e(yu,AG),e(AG,w6o),e(yu,A6o),e(y,L6o),e(y,xu),e(xu,hge),e(hge,y6o),e(xu,x6o),e(xu,LG),e(LG,$6o),e(xu,k6o),e(y,S6o),e(y,$u),e($u,pge),e(pge,R6o),e($u,P6o),e($u,yG),e(yG,B6o),e($u,I6o),e(y,N6o),e(y,ku),e(ku,_ge),e(_ge,q6o),e(ku,j6o),e(ku,xG),e(xG,D6o),e(ku,G6o),e(y,O6o),e(y,Su),e(Su,uge),e(uge,V6o),e(Su,X6o),e(Su,$G),e($G,z6o),e(Su,W6o),e(y,Q6o),e(y,Ru),e(Ru,bge),e(bge,H6o),e(Ru,U6o),e(Ru,kG),e(kG,J6o),e(Ru,Y6o),e(y,K6o),e(y,Pu),e(Pu,vge),e(vge,Z6o),e(Pu,eAo),e(Pu,SG),e(SG,oAo),e(Pu,rAo),e(y,tAo),e(y,Bu),e(Bu,Fge),e(Fge,aAo),e(Bu,nAo),e(Bu,RG),e(RG,sAo),e(Bu,lAo),e(y,iAo),e(y,Iu),e(Iu,Tge),e(Tge,dAo),e(Iu,cAo),e(Iu,PG),e(PG,fAo),e(Iu,mAo),e(y,gAo),e(y,Nu),e(Nu,Mge),e(Mge,hAo),e(Nu,pAo),e(Nu,BG),e(BG,_Ao),e(Nu,uAo),e(y,bAo),e(y,qu),e(qu,Ege),e(Ege,vAo),e(qu,FAo),e(qu,IG),e(IG,TAo),e(qu,MAo),e(y,EAo),e(y,ju),e(ju,Cge),e(Cge,CAo),e(ju,wAo),e(ju,NG),e(NG,AAo),e(ju,LAo),e(y,yAo),e(y,Du),e(Du,wge),e(wge,xAo),e(Du,$Ao),e(Du,qG),e(qG,kAo),e(Du,SAo),e(y,RAo),e(y,Gu),e(Gu,Age),e(Age,PAo),e(Gu,BAo),e(Gu,jG),e(jG,IAo),e(Gu,NAo),e(y,qAo),e(y,Ou),e(Ou,Lge),e(Lge,jAo),e(Ou,DAo),e(Ou,DG),e(DG,GAo),e(Ou,OAo),e(y,VAo),e(y,Vu),e(Vu,yge),e(yge,XAo),e(Vu,zAo),e(Vu,GG),e(GG,WAo),e(Vu,QAo),e(y,HAo),e(y,Xu),e(Xu,xge),e(xge,UAo),e(Xu,JAo),e(Xu,OG),e(OG,YAo),e(Xu,KAo),e(y,ZAo),e(y,zu),e(zu,$ge),e($ge,e7o),e(zu,o7o),e(zu,VG),e(VG,r7o),e(zu,t7o),e(y,a7o),e(y,Wu),e(Wu,kge),e(kge,n7o),e(Wu,s7o),e(Wu,XG),e(XG,l7o),e(Wu,i7o),e(y,d7o),e(y,Qu),e(Qu,Sge),e(Sge,c7o),e(Qu,f7o),e(Qu,zG),e(zG,m7o),e(Qu,g7o),e(y,h7o),e(y,Hu),e(Hu,Rge),e(Rge,p7o),e(Hu,_7o),e(Hu,WG),e(WG,u7o),e(Hu,b7o),e(y,v7o),e(y,Uu),e(Uu,Pge),e(Pge,F7o),e(Uu,T7o),e(Uu,QG),e(QG,M7o),e(Uu,E7o),e(y,C7o),e(y,Ju),e(Ju,Bge),e(Bge,w7o),e(Ju,A7o),e(Ju,HG),e(HG,L7o),e(Ju,y7o),e(y,x7o),e(y,Yu),e(Yu,Ige),e(Ige,$7o),e(Yu,k7o),e(Yu,UG),e(UG,S7o),e(Yu,R7o),e(y,P7o),e(y,Ku),e(Ku,Nge),e(Nge,B7o),e(Ku,I7o),e(Ku,JG),e(JG,N7o),e(Ku,q7o),e(y,j7o),e(y,Zu),e(Zu,qge),e(qge,D7o),e(Zu,G7o),e(Zu,YG),e(YG,O7o),e(Zu,V7o),e(y,X7o),e(y,e2),e(e2,jge),e(jge,z7o),e(e2,W7o),e(e2,KG),e(KG,Q7o),e(e2,H7o),e(y,U7o),e(y,o2),e(o2,Dge),e(Dge,J7o),e(o2,Y7o),e(o2,ZG),e(ZG,K7o),e(o2,Z7o),e(y,eLo),e(y,r2),e(r2,Gge),e(Gge,oLo),e(r2,rLo),e(r2,eO),e(eO,tLo),e(r2,aLo),e(y,nLo),e(y,t2),e(t2,Oge),e(Oge,sLo),e(t2,lLo),e(t2,oO),e(oO,iLo),e(t2,dLo),e(y,cLo),e(y,a2),e(a2,Vge),e(Vge,fLo),e(a2,mLo),e(a2,rO),e(rO,gLo),e(a2,hLo),e(y,pLo),e(y,n2),e(n2,Xge),e(Xge,_Lo),e(n2,uLo),e(n2,tO),e(tO,bLo),e(n2,vLo),e(y,FLo),e(y,s2),e(s2,zge),e(zge,TLo),e(s2,MLo),e(s2,aO),e(aO,ELo),e(s2,CLo),e(y,wLo),e(y,l2),e(l2,Wge),e(Wge,ALo),e(l2,LLo),e(l2,nO),e(nO,yLo),e(l2,xLo),e(y,$Lo),e(y,i2),e(i2,Qge),e(Qge,kLo),e(i2,SLo),e(i2,sO),e(sO,RLo),e(i2,PLo),e(y,BLo),e(y,d2),e(d2,Hge),e(Hge,ILo),e(d2,NLo),e(d2,lO),e(lO,qLo),e(d2,jLo),e(y,DLo),e(y,c2),e(c2,Uge),e(Uge,GLo),e(c2,OLo),e(c2,iO),e(iO,VLo),e(c2,XLo),e(y,zLo),e(y,f2),e(f2,Jge),e(Jge,WLo),e(f2,QLo),e(f2,dO),e(dO,HLo),e(f2,ULo),e(y,JLo),e(y,m2),e(m2,Yge),e(Yge,YLo),e(m2,KLo),e(m2,cO),e(cO,ZLo),e(m2,eyo),e(Ye,oyo),e(Ye,g2),e(g2,ryo),e(g2,Kge),e(Kge,tyo),e(g2,ayo),e(g2,Zge),e(Zge,nyo),e(Ye,syo),M(h2,Ye,null),b(f,JWe,u),b(f,Zi,u),e(Zi,p2),e(p2,ehe),M(EL,ehe,null),e(Zi,lyo),e(Zi,ohe),e(ohe,iyo),b(f,YWe,u),b(f,Ro,u),M(CL,Ro,null),e(Ro,dyo),e(Ro,ed),e(ed,cyo),e(ed,fO),e(fO,fyo),e(ed,myo),e(ed,mO),e(mO,gyo),e(ed,hyo),e(Ro,pyo),e(Ro,wL),e(wL,_yo),e(wL,rhe),e(rhe,uyo),e(wL,byo),e(Ro,vyo),e(Ro,ft),M(AL,ft,null),e(ft,Fyo),e(ft,the),e(the,Tyo),e(ft,Myo),e(ft,od),e(od,Eyo),e(od,ahe),e(ahe,Cyo),e(od,wyo),e(od,gO),e(gO,Ayo),e(od,Lyo),e(ft,yyo),M(_2,ft,null),e(Ro,xyo),e(Ro,Ke),M(LL,Ke,null),e(Ke,$yo),e(Ke,nhe),e(nhe,kyo),e(Ke,Syo),e(Ke,Ga),e(Ga,Ryo),e(Ga,she),e(she,Pyo),e(Ga,Byo),e(Ga,lhe),e(lhe,Iyo),e(Ga,Nyo),e(Ga,ihe),e(ihe,qyo),e(Ga,jyo),e(Ke,Dyo),e(Ke,G),e(G,u2),e(u2,dhe),e(dhe,Gyo),e(u2,Oyo),e(u2,hO),e(hO,Vyo),e(u2,Xyo),e(G,zyo),e(G,b2),e(b2,che),e(che,Wyo),e(b2,Qyo),e(b2,pO),e(pO,Hyo),e(b2,Uyo),e(G,Jyo),e(G,v2),e(v2,fhe),e(fhe,Yyo),e(v2,Kyo),e(v2,_O),e(_O,Zyo),e(v2,exo),e(G,oxo),e(G,F2),e(F2,mhe),e(mhe,rxo),e(F2,txo),e(F2,uO),e(uO,axo),e(F2,nxo),e(G,sxo),e(G,T2),e(T2,ghe),e(ghe,lxo),e(T2,ixo),e(T2,bO),e(bO,dxo),e(T2,cxo),e(G,fxo),e(G,M2),e(M2,hhe),e(hhe,mxo),e(M2,gxo),e(M2,vO),e(vO,hxo),e(M2,pxo),e(G,_xo),e(G,E2),e(E2,phe),e(phe,uxo),e(E2,bxo),e(E2,FO),e(FO,vxo),e(E2,Fxo),e(G,Txo),e(G,C2),e(C2,_he),e(_he,Mxo),e(C2,Exo),e(C2,TO),e(TO,Cxo),e(C2,wxo),e(G,Axo),e(G,w2),e(w2,uhe),e(uhe,Lxo),e(w2,yxo),e(w2,MO),e(MO,xxo),e(w2,$xo),e(G,kxo),e(G,A2),e(A2,bhe),e(bhe,Sxo),e(A2,Rxo),e(A2,EO),e(EO,Pxo),e(A2,Bxo),e(G,Ixo),e(G,L2),e(L2,vhe),e(vhe,Nxo),e(L2,qxo),e(L2,CO),e(CO,jxo),e(L2,Dxo),e(G,Gxo),e(G,y2),e(y2,Fhe),e(Fhe,Oxo),e(y2,Vxo),e(y2,wO),e(wO,Xxo),e(y2,zxo),e(G,Wxo),e(G,x2),e(x2,The),e(The,Qxo),e(x2,Hxo),e(x2,AO),e(AO,Uxo),e(x2,Jxo),e(G,Yxo),e(G,$2),e($2,Mhe),e(Mhe,Kxo),e($2,Zxo),e($2,LO),e(LO,e$o),e($2,o$o),e(G,r$o),e(G,k2),e(k2,Ehe),e(Ehe,t$o),e(k2,a$o),e(k2,yO),e(yO,n$o),e(k2,s$o),e(G,l$o),e(G,S2),e(S2,Che),e(Che,i$o),e(S2,d$o),e(S2,xO),e(xO,c$o),e(S2,f$o),e(G,m$o),e(G,R2),e(R2,whe),e(whe,g$o),e(R2,h$o),e(R2,$O),e($O,p$o),e(R2,_$o),e(G,u$o),e(G,P2),e(P2,Ahe),e(Ahe,b$o),e(P2,v$o),e(P2,kO),e(kO,F$o),e(P2,T$o),e(G,M$o),e(G,B2),e(B2,Lhe),e(Lhe,E$o),e(B2,C$o),e(B2,SO),e(SO,w$o),e(B2,A$o),e(G,L$o),e(G,I2),e(I2,yhe),e(yhe,y$o),e(I2,x$o),e(I2,RO),e(RO,$$o),e(I2,k$o),e(G,S$o),e(G,N2),e(N2,xhe),e(xhe,R$o),e(N2,P$o),e(N2,PO),e(PO,B$o),e(N2,I$o),e(G,N$o),e(G,q2),e(q2,$he),e($he,q$o),e(q2,j$o),e(q2,BO),e(BO,D$o),e(q2,G$o),e(G,O$o),e(G,j2),e(j2,khe),e(khe,V$o),e(j2,X$o),e(j2,IO),e(IO,z$o),e(j2,W$o),e(G,Q$o),e(G,D2),e(D2,She),e(She,H$o),e(D2,U$o),e(D2,NO),e(NO,J$o),e(D2,Y$o),e(G,K$o),e(G,G2),e(G2,Rhe),e(Rhe,Z$o),e(G2,eko),e(G2,qO),e(qO,oko),e(G2,rko),e(G,tko),e(G,O2),e(O2,Phe),e(Phe,ako),e(O2,nko),e(O2,jO),e(jO,sko),e(O2,lko),e(G,iko),e(G,V2),e(V2,Bhe),e(Bhe,dko),e(V2,cko),e(V2,DO),e(DO,fko),e(V2,mko),e(G,gko),e(G,X2),e(X2,Ihe),e(Ihe,hko),e(X2,pko),e(X2,GO),e(GO,_ko),e(X2,uko),e(G,bko),e(G,z2),e(z2,Nhe),e(Nhe,vko),e(z2,Fko),e(z2,OO),e(OO,Tko),e(z2,Mko),e(G,Eko),e(G,W2),e(W2,qhe),e(qhe,Cko),e(W2,wko),e(W2,VO),e(VO,Ako),e(W2,Lko),e(G,yko),e(G,Q2),e(Q2,jhe),e(jhe,xko),e(Q2,$ko),e(Q2,XO),e(XO,kko),e(Q2,Sko),e(G,Rko),e(G,H2),e(H2,Dhe),e(Dhe,Pko),e(H2,Bko),e(H2,zO),e(zO,Iko),e(H2,Nko),e(G,qko),e(G,U2),e(U2,Ghe),e(Ghe,jko),e(U2,Dko),e(U2,WO),e(WO,Gko),e(U2,Oko),e(G,Vko),e(G,J2),e(J2,Ohe),e(Ohe,Xko),e(J2,zko),e(J2,QO),e(QO,Wko),e(J2,Qko),e(G,Hko),e(G,Y2),e(Y2,Vhe),e(Vhe,Uko),e(Y2,Jko),e(Y2,HO),e(HO,Yko),e(Y2,Kko),e(G,Zko),e(G,K2),e(K2,Xhe),e(Xhe,eSo),e(K2,oSo),e(K2,UO),e(UO,rSo),e(K2,tSo),e(G,aSo),e(G,Z2),e(Z2,zhe),e(zhe,nSo),e(Z2,sSo),e(Z2,JO),e(JO,lSo),e(Z2,iSo),e(G,dSo),e(G,e1),e(e1,Whe),e(Whe,cSo),e(e1,fSo),e(e1,YO),e(YO,mSo),e(e1,gSo),e(G,hSo),e(G,o1),e(o1,Qhe),e(Qhe,pSo),e(o1,_So),e(o1,KO),e(KO,uSo),e(o1,bSo),e(G,vSo),e(G,r1),e(r1,Hhe),e(Hhe,FSo),e(r1,TSo),e(r1,ZO),e(ZO,MSo),e(r1,ESo),e(G,CSo),e(G,t1),e(t1,Uhe),e(Uhe,wSo),e(t1,ASo),e(t1,eV),e(eV,LSo),e(t1,ySo),e(G,xSo),e(G,a1),e(a1,Jhe),e(Jhe,$So),e(a1,kSo),e(a1,oV),e(oV,SSo),e(a1,RSo),e(G,PSo),e(G,n1),e(n1,Yhe),e(Yhe,BSo),e(n1,ISo),e(n1,rV),e(rV,NSo),e(n1,qSo),e(G,jSo),e(G,s1),e(s1,Khe),e(Khe,DSo),e(s1,GSo),e(s1,tV),e(tV,OSo),e(s1,VSo),e(G,XSo),e(G,l1),e(l1,Zhe),e(Zhe,zSo),e(l1,WSo),e(l1,aV),e(aV,QSo),e(l1,HSo),e(G,USo),e(G,i1),e(i1,epe),e(epe,JSo),e(i1,YSo),e(i1,nV),e(nV,KSo),e(i1,ZSo),e(G,eRo),e(G,d1),e(d1,ope),e(ope,oRo),e(d1,rRo),e(d1,sV),e(sV,tRo),e(d1,aRo),e(Ke,nRo),e(Ke,c1),e(c1,sRo),e(c1,rpe),e(rpe,lRo),e(c1,iRo),e(c1,tpe),e(tpe,dRo),e(Ke,cRo),M(f1,Ke,null),b(f,KWe,u),b(f,rd,u),e(rd,m1),e(m1,ape),M(yL,ape,null),e(rd,fRo),e(rd,npe),e(npe,mRo),b(f,ZWe,u),b(f,Po,u),M(xL,Po,null),e(Po,gRo),e(Po,td),e(td,hRo),e(td,lV),e(lV,pRo),e(td,_Ro),e(td,iV),e(iV,uRo),e(td,bRo),e(Po,vRo),e(Po,$L),e($L,FRo),e($L,spe),e(spe,TRo),e($L,MRo),e(Po,ERo),e(Po,mt),M(kL,mt,null),e(mt,CRo),e(mt,lpe),e(lpe,wRo),e(mt,ARo),e(mt,ad),e(ad,LRo),e(ad,ipe),e(ipe,yRo),e(ad,xRo),e(ad,dV),e(dV,$Ro),e(ad,kRo),e(mt,SRo),M(g1,mt,null),e(Po,RRo),e(Po,Ze),M(SL,Ze,null),e(Ze,PRo),e(Ze,dpe),e(dpe,BRo),e(Ze,IRo),e(Ze,Oa),e(Oa,NRo),e(Oa,cpe),e(cpe,qRo),e(Oa,jRo),e(Oa,fpe),e(fpe,DRo),e(Oa,GRo),e(Oa,mpe),e(mpe,ORo),e(Oa,VRo),e(Ze,XRo),e(Ze,z),e(z,h1),e(h1,gpe),e(gpe,zRo),e(h1,WRo),e(h1,cV),e(cV,QRo),e(h1,HRo),e(z,URo),e(z,p1),e(p1,hpe),e(hpe,JRo),e(p1,YRo),e(p1,fV),e(fV,KRo),e(p1,ZRo),e(z,ePo),e(z,_1),e(_1,ppe),e(ppe,oPo),e(_1,rPo),e(_1,mV),e(mV,tPo),e(_1,aPo),e(z,nPo),e(z,u1),e(u1,_pe),e(_pe,sPo),e(u1,lPo),e(u1,gV),e(gV,iPo),e(u1,dPo),e(z,cPo),e(z,b1),e(b1,upe),e(upe,fPo),e(b1,mPo),e(b1,hV),e(hV,gPo),e(b1,hPo),e(z,pPo),e(z,v1),e(v1,bpe),e(bpe,_Po),e(v1,uPo),e(v1,pV),e(pV,bPo),e(v1,vPo),e(z,FPo),e(z,F1),e(F1,vpe),e(vpe,TPo),e(F1,MPo),e(F1,_V),e(_V,EPo),e(F1,CPo),e(z,wPo),e(z,T1),e(T1,Fpe),e(Fpe,APo),e(T1,LPo),e(T1,uV),e(uV,yPo),e(T1,xPo),e(z,$Po),e(z,M1),e(M1,Tpe),e(Tpe,kPo),e(M1,SPo),e(M1,bV),e(bV,RPo),e(M1,PPo),e(z,BPo),e(z,E1),e(E1,Mpe),e(Mpe,IPo),e(E1,NPo),e(E1,vV),e(vV,qPo),e(E1,jPo),e(z,DPo),e(z,C1),e(C1,Epe),e(Epe,GPo),e(C1,OPo),e(C1,FV),e(FV,VPo),e(C1,XPo),e(z,zPo),e(z,w1),e(w1,Cpe),e(Cpe,WPo),e(w1,QPo),e(w1,TV),e(TV,HPo),e(w1,UPo),e(z,JPo),e(z,A1),e(A1,wpe),e(wpe,YPo),e(A1,KPo),e(A1,MV),e(MV,ZPo),e(A1,eBo),e(z,oBo),e(z,L1),e(L1,Ape),e(Ape,rBo),e(L1,tBo),e(L1,EV),e(EV,aBo),e(L1,nBo),e(z,sBo),e(z,y1),e(y1,Lpe),e(Lpe,lBo),e(y1,iBo),e(y1,CV),e(CV,dBo),e(y1,cBo),e(z,fBo),e(z,x1),e(x1,ype),e(ype,mBo),e(x1,gBo),e(x1,wV),e(wV,hBo),e(x1,pBo),e(z,_Bo),e(z,$1),e($1,xpe),e(xpe,uBo),e($1,bBo),e($1,AV),e(AV,vBo),e($1,FBo),e(z,TBo),e(z,k1),e(k1,$pe),e($pe,MBo),e(k1,EBo),e(k1,LV),e(LV,CBo),e(k1,wBo),e(z,ABo),e(z,S1),e(S1,kpe),e(kpe,LBo),e(S1,yBo),e(S1,yV),e(yV,xBo),e(S1,$Bo),e(z,kBo),e(z,R1),e(R1,Spe),e(Spe,SBo),e(R1,RBo),e(R1,xV),e(xV,PBo),e(R1,BBo),e(z,IBo),e(z,P1),e(P1,Rpe),e(Rpe,NBo),e(P1,qBo),e(P1,$V),e($V,jBo),e(P1,DBo),e(z,GBo),e(z,B1),e(B1,Ppe),e(Ppe,OBo),e(B1,VBo),e(B1,kV),e(kV,XBo),e(B1,zBo),e(z,WBo),e(z,I1),e(I1,Bpe),e(Bpe,QBo),e(I1,HBo),e(I1,SV),e(SV,UBo),e(I1,JBo),e(z,YBo),e(z,N1),e(N1,Ipe),e(Ipe,KBo),e(N1,ZBo),e(N1,RV),e(RV,eIo),e(N1,oIo),e(z,rIo),e(z,q1),e(q1,Npe),e(Npe,tIo),e(q1,aIo),e(q1,PV),e(PV,nIo),e(q1,sIo),e(z,lIo),e(z,j1),e(j1,qpe),e(qpe,iIo),e(j1,dIo),e(j1,BV),e(BV,cIo),e(j1,fIo),e(z,mIo),e(z,D1),e(D1,jpe),e(jpe,gIo),e(D1,hIo),e(D1,IV),e(IV,pIo),e(D1,_Io),e(z,uIo),e(z,G1),e(G1,Dpe),e(Dpe,bIo),e(G1,vIo),e(G1,NV),e(NV,FIo),e(G1,TIo),e(z,MIo),e(z,O1),e(O1,Gpe),e(Gpe,EIo),e(O1,CIo),e(O1,qV),e(qV,wIo),e(O1,AIo),e(z,LIo),e(z,V1),e(V1,Ope),e(Ope,yIo),e(V1,xIo),e(V1,jV),e(jV,$Io),e(V1,kIo),e(z,SIo),e(z,X1),e(X1,Vpe),e(Vpe,RIo),e(X1,PIo),e(X1,DV),e(DV,BIo),e(X1,IIo),e(z,NIo),e(z,z1),e(z1,Xpe),e(Xpe,qIo),e(z1,jIo),e(z1,GV),e(GV,DIo),e(z1,GIo),e(z,OIo),e(z,W1),e(W1,zpe),e(zpe,VIo),e(W1,XIo),e(W1,OV),e(OV,zIo),e(W1,WIo),e(z,QIo),e(z,Q1),e(Q1,Wpe),e(Wpe,HIo),e(Q1,UIo),e(Q1,VV),e(VV,JIo),e(Q1,YIo),e(z,KIo),e(z,H1),e(H1,Qpe),e(Qpe,ZIo),e(H1,eNo),e(H1,XV),e(XV,oNo),e(H1,rNo),e(z,tNo),e(z,U1),e(U1,Hpe),e(Hpe,aNo),e(U1,nNo),e(U1,zV),e(zV,sNo),e(U1,lNo),e(z,iNo),e(z,J1),e(J1,Upe),e(Upe,dNo),e(J1,cNo),e(J1,WV),e(WV,fNo),e(J1,mNo),e(z,gNo),e(z,Y1),e(Y1,Jpe),e(Jpe,hNo),e(Y1,pNo),e(Y1,QV),e(QV,_No),e(Y1,uNo),e(z,bNo),e(z,K1),e(K1,Ype),e(Ype,vNo),e(K1,FNo),e(K1,HV),e(HV,TNo),e(K1,MNo),e(z,ENo),e(z,Z1),e(Z1,Kpe),e(Kpe,CNo),e(Z1,wNo),e(Z1,UV),e(UV,ANo),e(Z1,LNo),e(Ze,yNo),e(Ze,eb),e(eb,xNo),e(eb,Zpe),e(Zpe,$No),e(eb,kNo),e(eb,e_e),e(e_e,SNo),e(Ze,RNo),M(ob,Ze,null),b(f,eQe,u),b(f,nd,u),e(nd,rb),e(rb,o_e),M(RL,o_e,null),e(nd,PNo),e(nd,r_e),e(r_e,BNo),b(f,oQe,u),b(f,Bo,u),M(PL,Bo,null),e(Bo,INo),e(Bo,sd),e(sd,NNo),e(sd,JV),e(JV,qNo),e(sd,jNo),e(sd,YV),e(YV,DNo),e(sd,GNo),e(Bo,ONo),e(Bo,BL),e(BL,VNo),e(BL,t_e),e(t_e,XNo),e(BL,zNo),e(Bo,WNo),e(Bo,gt),M(IL,gt,null),e(gt,QNo),e(gt,a_e),e(a_e,HNo),e(gt,UNo),e(gt,ld),e(ld,JNo),e(ld,n_e),e(n_e,YNo),e(ld,KNo),e(ld,KV),e(KV,ZNo),e(ld,eqo),e(gt,oqo),M(tb,gt,null),e(Bo,rqo),e(Bo,eo),M(NL,eo,null),e(eo,tqo),e(eo,s_e),e(s_e,aqo),e(eo,nqo),e(eo,Va),e(Va,sqo),e(Va,l_e),e(l_e,lqo),e(Va,iqo),e(Va,i_e),e(i_e,dqo),e(Va,cqo),e(Va,d_e),e(d_e,fqo),e(Va,mqo),e(eo,gqo),e(eo,Q),e(Q,ab),e(ab,c_e),e(c_e,hqo),e(ab,pqo),e(ab,ZV),e(ZV,_qo),e(ab,uqo),e(Q,bqo),e(Q,nb),e(nb,f_e),e(f_e,vqo),e(nb,Fqo),e(nb,eX),e(eX,Tqo),e(nb,Mqo),e(Q,Eqo),e(Q,sb),e(sb,m_e),e(m_e,Cqo),e(sb,wqo),e(sb,oX),e(oX,Aqo),e(sb,Lqo),e(Q,yqo),e(Q,lb),e(lb,g_e),e(g_e,xqo),e(lb,$qo),e(lb,rX),e(rX,kqo),e(lb,Sqo),e(Q,Rqo),e(Q,ib),e(ib,h_e),e(h_e,Pqo),e(ib,Bqo),e(ib,tX),e(tX,Iqo),e(ib,Nqo),e(Q,qqo),e(Q,db),e(db,p_e),e(p_e,jqo),e(db,Dqo),e(db,aX),e(aX,Gqo),e(db,Oqo),e(Q,Vqo),e(Q,cb),e(cb,__e),e(__e,Xqo),e(cb,zqo),e(cb,nX),e(nX,Wqo),e(cb,Qqo),e(Q,Hqo),e(Q,fb),e(fb,u_e),e(u_e,Uqo),e(fb,Jqo),e(fb,sX),e(sX,Yqo),e(fb,Kqo),e(Q,Zqo),e(Q,mb),e(mb,b_e),e(b_e,ejo),e(mb,ojo),e(mb,lX),e(lX,rjo),e(mb,tjo),e(Q,ajo),e(Q,gb),e(gb,v_e),e(v_e,njo),e(gb,sjo),e(gb,iX),e(iX,ljo),e(gb,ijo),e(Q,djo),e(Q,hb),e(hb,F_e),e(F_e,cjo),e(hb,fjo),e(hb,dX),e(dX,mjo),e(hb,gjo),e(Q,hjo),e(Q,pb),e(pb,T_e),e(T_e,pjo),e(pb,_jo),e(pb,cX),e(cX,ujo),e(pb,bjo),e(Q,vjo),e(Q,_b),e(_b,M_e),e(M_e,Fjo),e(_b,Tjo),e(_b,fX),e(fX,Mjo),e(_b,Ejo),e(Q,Cjo),e(Q,ub),e(ub,E_e),e(E_e,wjo),e(ub,Ajo),e(ub,mX),e(mX,Ljo),e(ub,yjo),e(Q,xjo),e(Q,bb),e(bb,C_e),e(C_e,$jo),e(bb,kjo),e(bb,gX),e(gX,Sjo),e(bb,Rjo),e(Q,Pjo),e(Q,vb),e(vb,w_e),e(w_e,Bjo),e(vb,Ijo),e(vb,hX),e(hX,Njo),e(vb,qjo),e(Q,jjo),e(Q,Fb),e(Fb,A_e),e(A_e,Djo),e(Fb,Gjo),e(Fb,pX),e(pX,Ojo),e(Fb,Vjo),e(Q,Xjo),e(Q,Tb),e(Tb,L_e),e(L_e,zjo),e(Tb,Wjo),e(Tb,_X),e(_X,Qjo),e(Tb,Hjo),e(Q,Ujo),e(Q,Mb),e(Mb,y_e),e(y_e,Jjo),e(Mb,Yjo),e(Mb,uX),e(uX,Kjo),e(Mb,Zjo),e(Q,eDo),e(Q,Eb),e(Eb,x_e),e(x_e,oDo),e(Eb,rDo),e(Eb,bX),e(bX,tDo),e(Eb,aDo),e(Q,nDo),e(Q,Cb),e(Cb,$_e),e($_e,sDo),e(Cb,lDo),e(Cb,vX),e(vX,iDo),e(Cb,dDo),e(Q,cDo),e(Q,wb),e(wb,k_e),e(k_e,fDo),e(wb,mDo),e(wb,FX),e(FX,gDo),e(wb,hDo),e(Q,pDo),e(Q,Ab),e(Ab,S_e),e(S_e,_Do),e(Ab,uDo),e(Ab,TX),e(TX,bDo),e(Ab,vDo),e(Q,FDo),e(Q,Lb),e(Lb,R_e),e(R_e,TDo),e(Lb,MDo),e(Lb,MX),e(MX,EDo),e(Lb,CDo),e(Q,wDo),e(Q,yb),e(yb,P_e),e(P_e,ADo),e(yb,LDo),e(yb,EX),e(EX,yDo),e(yb,xDo),e(Q,$Do),e(Q,xb),e(xb,B_e),e(B_e,kDo),e(xb,SDo),e(xb,CX),e(CX,RDo),e(xb,PDo),e(Q,BDo),e(Q,$b),e($b,I_e),e(I_e,IDo),e($b,NDo),e($b,wX),e(wX,qDo),e($b,jDo),e(Q,DDo),e(Q,kb),e(kb,N_e),e(N_e,GDo),e(kb,ODo),e(kb,AX),e(AX,VDo),e(kb,XDo),e(Q,zDo),e(Q,Sb),e(Sb,q_e),e(q_e,WDo),e(Sb,QDo),e(Sb,LX),e(LX,HDo),e(Sb,UDo),e(Q,JDo),e(Q,Rb),e(Rb,j_e),e(j_e,YDo),e(Rb,KDo),e(Rb,yX),e(yX,ZDo),e(Rb,eGo),e(Q,oGo),e(Q,Pb),e(Pb,D_e),e(D_e,rGo),e(Pb,tGo),e(Pb,xX),e(xX,aGo),e(Pb,nGo),e(Q,sGo),e(Q,Bb),e(Bb,G_e),e(G_e,lGo),e(Bb,iGo),e(Bb,$X),e($X,dGo),e(Bb,cGo),e(Q,fGo),e(Q,Ib),e(Ib,O_e),e(O_e,mGo),e(Ib,gGo),e(Ib,kX),e(kX,hGo),e(Ib,pGo),e(Q,_Go),e(Q,Nb),e(Nb,V_e),e(V_e,uGo),e(Nb,bGo),e(Nb,X_e),e(X_e,vGo),e(Nb,FGo),e(Q,TGo),e(Q,qb),e(qb,z_e),e(z_e,MGo),e(qb,EGo),e(qb,SX),e(SX,CGo),e(qb,wGo),e(Q,AGo),e(Q,jb),e(jb,W_e),e(W_e,LGo),e(jb,yGo),e(jb,RX),e(RX,xGo),e(jb,$Go),e(Q,kGo),e(Q,Db),e(Db,Q_e),e(Q_e,SGo),e(Db,RGo),e(Db,PX),e(PX,PGo),e(Db,BGo),e(Q,IGo),e(Q,Gb),e(Gb,H_e),e(H_e,NGo),e(Gb,qGo),e(Gb,BX),e(BX,jGo),e(Gb,DGo),e(eo,GGo),e(eo,Ob),e(Ob,OGo),e(Ob,U_e),e(U_e,VGo),e(Ob,XGo),e(Ob,J_e),e(J_e,zGo),e(eo,WGo),M(Vb,eo,null),b(f,rQe,u),b(f,id,u),e(id,Xb),e(Xb,Y_e),M(qL,Y_e,null),e(id,QGo),e(id,K_e),e(K_e,HGo),b(f,tQe,u),b(f,Io,u),M(jL,Io,null),e(Io,UGo),e(Io,dd),e(dd,JGo),e(dd,IX),e(IX,YGo),e(dd,KGo),e(dd,NX),e(NX,ZGo),e(dd,eOo),e(Io,oOo),e(Io,DL),e(DL,rOo),e(DL,Z_e),e(Z_e,tOo),e(DL,aOo),e(Io,nOo),e(Io,ht),M(GL,ht,null),e(ht,sOo),e(ht,eue),e(eue,lOo),e(ht,iOo),e(ht,cd),e(cd,dOo),e(cd,oue),e(oue,cOo),e(cd,fOo),e(cd,qX),e(qX,mOo),e(cd,gOo),e(ht,hOo),M(zb,ht,null),e(Io,pOo),e(Io,oo),M(OL,oo,null),e(oo,_Oo),e(oo,rue),e(rue,uOo),e(oo,bOo),e(oo,Xa),e(Xa,vOo),e(Xa,tue),e(tue,FOo),e(Xa,TOo),e(Xa,aue),e(aue,MOo),e(Xa,EOo),e(Xa,nue),e(nue,COo),e(Xa,wOo),e(oo,AOo),e(oo,me),e(me,Wb),e(Wb,sue),e(sue,LOo),e(Wb,yOo),e(Wb,jX),e(jX,xOo),e(Wb,$Oo),e(me,kOo),e(me,Qb),e(Qb,lue),e(lue,SOo),e(Qb,ROo),e(Qb,DX),e(DX,POo),e(Qb,BOo),e(me,IOo),e(me,Hb),e(Hb,iue),e(iue,NOo),e(Hb,qOo),e(Hb,GX),e(GX,jOo),e(Hb,DOo),e(me,GOo),e(me,Ub),e(Ub,due),e(due,OOo),e(Ub,VOo),e(Ub,OX),e(OX,XOo),e(Ub,zOo),e(me,WOo),e(me,Jb),e(Jb,cue),e(cue,QOo),e(Jb,HOo),e(Jb,VX),e(VX,UOo),e(Jb,JOo),e(me,YOo),e(me,Yb),e(Yb,fue),e(fue,KOo),e(Yb,ZOo),e(Yb,XX),e(XX,eVo),e(Yb,oVo),e(me,rVo),e(me,Kb),e(Kb,mue),e(mue,tVo),e(Kb,aVo),e(Kb,zX),e(zX,nVo),e(Kb,sVo),e(me,lVo),e(me,Zb),e(Zb,gue),e(gue,iVo),e(Zb,dVo),e(Zb,WX),e(WX,cVo),e(Zb,fVo),e(me,mVo),e(me,ev),e(ev,hue),e(hue,gVo),e(ev,hVo),e(ev,QX),e(QX,pVo),e(ev,_Vo),e(me,uVo),e(me,ov),e(ov,pue),e(pue,bVo),e(ov,vVo),e(ov,HX),e(HX,FVo),e(ov,TVo),e(me,MVo),e(me,rv),e(rv,_ue),e(_ue,EVo),e(rv,CVo),e(rv,UX),e(UX,wVo),e(rv,AVo),e(me,LVo),e(me,tv),e(tv,uue),e(uue,yVo),e(tv,xVo),e(tv,JX),e(JX,$Vo),e(tv,kVo),e(me,SVo),e(me,av),e(av,bue),e(bue,RVo),e(av,PVo),e(av,YX),e(YX,BVo),e(av,IVo),e(me,NVo),e(me,nv),e(nv,vue),e(vue,qVo),e(nv,jVo),e(nv,KX),e(KX,DVo),e(nv,GVo),e(me,OVo),e(me,sv),e(sv,Fue),e(Fue,VVo),e(sv,XVo),e(sv,ZX),e(ZX,zVo),e(sv,WVo),e(me,QVo),e(me,lv),e(lv,Tue),e(Tue,HVo),e(lv,UVo),e(lv,ez),e(ez,JVo),e(lv,YVo),e(me,KVo),e(me,iv),e(iv,Mue),e(Mue,ZVo),e(iv,eXo),e(iv,oz),e(oz,oXo),e(iv,rXo),e(me,tXo),e(me,dv),e(dv,Eue),e(Eue,aXo),e(dv,nXo),e(dv,rz),e(rz,sXo),e(dv,lXo),e(me,iXo),e(me,cv),e(cv,Cue),e(Cue,dXo),e(cv,cXo),e(cv,tz),e(tz,fXo),e(cv,mXo),e(oo,gXo),e(oo,fv),e(fv,hXo),e(fv,wue),e(wue,pXo),e(fv,_Xo),e(fv,Aue),e(Aue,uXo),e(oo,bXo),M(mv,oo,null),b(f,aQe,u),b(f,fd,u),e(fd,gv),e(gv,Lue),M(VL,Lue,null),e(fd,vXo),e(fd,yue),e(yue,FXo),b(f,nQe,u),b(f,No,u),M(XL,No,null),e(No,TXo),e(No,md),e(md,MXo),e(md,az),e(az,EXo),e(md,CXo),e(md,nz),e(nz,wXo),e(md,AXo),e(No,LXo),e(No,zL),e(zL,yXo),e(zL,xue),e(xue,xXo),e(zL,$Xo),e(No,kXo),e(No,pt),M(WL,pt,null),e(pt,SXo),e(pt,$ue),e($ue,RXo),e(pt,PXo),e(pt,gd),e(gd,BXo),e(gd,kue),e(kue,IXo),e(gd,NXo),e(gd,sz),e(sz,qXo),e(gd,jXo),e(pt,DXo),M(hv,pt,null),e(No,GXo),e(No,ro),M(QL,ro,null),e(ro,OXo),e(ro,Sue),e(Sue,VXo),e(ro,XXo),e(ro,za),e(za,zXo),e(za,Rue),e(Rue,WXo),e(za,QXo),e(za,Pue),e(Pue,HXo),e(za,UXo),e(za,Bue),e(Bue,JXo),e(za,YXo),e(ro,KXo),e(ro,B),e(B,pv),e(pv,Iue),e(Iue,ZXo),e(pv,ezo),e(pv,lz),e(lz,ozo),e(pv,rzo),e(B,tzo),e(B,_v),e(_v,Nue),e(Nue,azo),e(_v,nzo),e(_v,iz),e(iz,szo),e(_v,lzo),e(B,izo),e(B,uv),e(uv,que),e(que,dzo),e(uv,czo),e(uv,dz),e(dz,fzo),e(uv,mzo),e(B,gzo),e(B,bv),e(bv,jue),e(jue,hzo),e(bv,pzo),e(bv,cz),e(cz,_zo),e(bv,uzo),e(B,bzo),e(B,vv),e(vv,Due),e(Due,vzo),e(vv,Fzo),e(vv,fz),e(fz,Tzo),e(vv,Mzo),e(B,Ezo),e(B,Fv),e(Fv,Gue),e(Gue,Czo),e(Fv,wzo),e(Fv,mz),e(mz,Azo),e(Fv,Lzo),e(B,yzo),e(B,Tv),e(Tv,Oue),e(Oue,xzo),e(Tv,$zo),e(Tv,gz),e(gz,kzo),e(Tv,Szo),e(B,Rzo),e(B,Mv),e(Mv,Vue),e(Vue,Pzo),e(Mv,Bzo),e(Mv,hz),e(hz,Izo),e(Mv,Nzo),e(B,qzo),e(B,Ev),e(Ev,Xue),e(Xue,jzo),e(Ev,Dzo),e(Ev,pz),e(pz,Gzo),e(Ev,Ozo),e(B,Vzo),e(B,Cv),e(Cv,zue),e(zue,Xzo),e(Cv,zzo),e(Cv,_z),e(_z,Wzo),e(Cv,Qzo),e(B,Hzo),e(B,wv),e(wv,Wue),e(Wue,Uzo),e(wv,Jzo),e(wv,uz),e(uz,Yzo),e(wv,Kzo),e(B,Zzo),e(B,Av),e(Av,Que),e(Que,eWo),e(Av,oWo),e(Av,bz),e(bz,rWo),e(Av,tWo),e(B,aWo),e(B,Lv),e(Lv,Hue),e(Hue,nWo),e(Lv,sWo),e(Lv,vz),e(vz,lWo),e(Lv,iWo),e(B,dWo),e(B,yv),e(yv,Uue),e(Uue,cWo),e(yv,fWo),e(yv,Fz),e(Fz,mWo),e(yv,gWo),e(B,hWo),e(B,xv),e(xv,Jue),e(Jue,pWo),e(xv,_Wo),e(xv,Tz),e(Tz,uWo),e(xv,bWo),e(B,vWo),e(B,$v),e($v,Yue),e(Yue,FWo),e($v,TWo),e($v,Mz),e(Mz,MWo),e($v,EWo),e(B,CWo),e(B,kv),e(kv,Kue),e(Kue,wWo),e(kv,AWo),e(kv,Ez),e(Ez,LWo),e(kv,yWo),e(B,xWo),e(B,Sv),e(Sv,Zue),e(Zue,$Wo),e(Sv,kWo),e(Sv,Cz),e(Cz,SWo),e(Sv,RWo),e(B,PWo),e(B,Rv),e(Rv,e2e),e(e2e,BWo),e(Rv,IWo),e(Rv,wz),e(wz,NWo),e(Rv,qWo),e(B,jWo),e(B,Pv),e(Pv,o2e),e(o2e,DWo),e(Pv,GWo),e(Pv,Az),e(Az,OWo),e(Pv,VWo),e(B,XWo),e(B,Bv),e(Bv,r2e),e(r2e,zWo),e(Bv,WWo),e(Bv,Lz),e(Lz,QWo),e(Bv,HWo),e(B,UWo),e(B,Iv),e(Iv,t2e),e(t2e,JWo),e(Iv,YWo),e(Iv,yz),e(yz,KWo),e(Iv,ZWo),e(B,eQo),e(B,Nv),e(Nv,a2e),e(a2e,oQo),e(Nv,rQo),e(Nv,xz),e(xz,tQo),e(Nv,aQo),e(B,nQo),e(B,qv),e(qv,n2e),e(n2e,sQo),e(qv,lQo),e(qv,$z),e($z,iQo),e(qv,dQo),e(B,cQo),e(B,jv),e(jv,s2e),e(s2e,fQo),e(jv,mQo),e(jv,kz),e(kz,gQo),e(jv,hQo),e(B,pQo),e(B,Dv),e(Dv,l2e),e(l2e,_Qo),e(Dv,uQo),e(Dv,Sz),e(Sz,bQo),e(Dv,vQo),e(B,FQo),e(B,Gv),e(Gv,i2e),e(i2e,TQo),e(Gv,MQo),e(Gv,Rz),e(Rz,EQo),e(Gv,CQo),e(B,wQo),e(B,Ov),e(Ov,d2e),e(d2e,AQo),e(Ov,LQo),e(Ov,Pz),e(Pz,yQo),e(Ov,xQo),e(B,$Qo),e(B,Vv),e(Vv,c2e),e(c2e,kQo),e(Vv,SQo),e(Vv,Bz),e(Bz,RQo),e(Vv,PQo),e(B,BQo),e(B,Xv),e(Xv,f2e),e(f2e,IQo),e(Xv,NQo),e(Xv,Iz),e(Iz,qQo),e(Xv,jQo),e(B,DQo),e(B,zv),e(zv,m2e),e(m2e,GQo),e(zv,OQo),e(zv,Nz),e(Nz,VQo),e(zv,XQo),e(B,zQo),e(B,Wv),e(Wv,g2e),e(g2e,WQo),e(Wv,QQo),e(Wv,qz),e(qz,HQo),e(Wv,UQo),e(B,JQo),e(B,Qv),e(Qv,h2e),e(h2e,YQo),e(Qv,KQo),e(Qv,jz),e(jz,ZQo),e(Qv,eHo),e(B,oHo),e(B,Hv),e(Hv,p2e),e(p2e,rHo),e(Hv,tHo),e(Hv,Dz),e(Dz,aHo),e(Hv,nHo),e(B,sHo),e(B,Uv),e(Uv,_2e),e(_2e,lHo),e(Uv,iHo),e(Uv,Gz),e(Gz,dHo),e(Uv,cHo),e(B,fHo),e(B,Jv),e(Jv,u2e),e(u2e,mHo),e(Jv,gHo),e(Jv,Oz),e(Oz,hHo),e(Jv,pHo),e(B,_Ho),e(B,Yv),e(Yv,b2e),e(b2e,uHo),e(Yv,bHo),e(Yv,Vz),e(Vz,vHo),e(Yv,FHo),e(B,THo),e(B,Kv),e(Kv,v2e),e(v2e,MHo),e(Kv,EHo),e(Kv,Xz),e(Xz,CHo),e(Kv,wHo),e(B,AHo),e(B,Zv),e(Zv,F2e),e(F2e,LHo),e(Zv,yHo),e(Zv,zz),e(zz,xHo),e(Zv,$Ho),e(B,kHo),e(B,e5),e(e5,T2e),e(T2e,SHo),e(e5,RHo),e(e5,Wz),e(Wz,PHo),e(e5,BHo),e(B,IHo),e(B,o5),e(o5,M2e),e(M2e,NHo),e(o5,qHo),e(o5,Qz),e(Qz,jHo),e(o5,DHo),e(B,GHo),e(B,r5),e(r5,E2e),e(E2e,OHo),e(r5,VHo),e(r5,Hz),e(Hz,XHo),e(r5,zHo),e(B,WHo),e(B,t5),e(t5,C2e),e(C2e,QHo),e(t5,HHo),e(t5,Uz),e(Uz,UHo),e(t5,JHo),e(B,YHo),e(B,a5),e(a5,w2e),e(w2e,KHo),e(a5,ZHo),e(a5,Jz),e(Jz,eUo),e(a5,oUo),e(B,rUo),e(B,n5),e(n5,A2e),e(A2e,tUo),e(n5,aUo),e(n5,Yz),e(Yz,nUo),e(n5,sUo),e(B,lUo),e(B,s5),e(s5,L2e),e(L2e,iUo),e(s5,dUo),e(s5,Kz),e(Kz,cUo),e(s5,fUo),e(B,mUo),e(B,l5),e(l5,y2e),e(y2e,gUo),e(l5,hUo),e(l5,Zz),e(Zz,pUo),e(l5,_Uo),e(B,uUo),e(B,i5),e(i5,x2e),e(x2e,bUo),e(i5,vUo),e(i5,eW),e(eW,FUo),e(i5,TUo),e(B,MUo),e(B,d5),e(d5,$2e),e($2e,EUo),e(d5,CUo),e(d5,oW),e(oW,wUo),e(d5,AUo),e(B,LUo),e(B,c5),e(c5,k2e),e(k2e,yUo),e(c5,xUo),e(c5,rW),e(rW,$Uo),e(c5,kUo),e(B,SUo),e(B,f5),e(f5,S2e),e(S2e,RUo),e(f5,PUo),e(f5,tW),e(tW,BUo),e(f5,IUo),e(B,NUo),e(B,m5),e(m5,R2e),e(R2e,qUo),e(m5,jUo),e(m5,aW),e(aW,DUo),e(m5,GUo),e(ro,OUo),e(ro,g5),e(g5,VUo),e(g5,P2e),e(P2e,XUo),e(g5,zUo),e(g5,B2e),e(B2e,WUo),e(ro,QUo),M(h5,ro,null),b(f,sQe,u),b(f,hd,u),e(hd,p5),e(p5,I2e),M(HL,I2e,null),e(hd,HUo),e(hd,N2e),e(N2e,UUo),b(f,lQe,u),b(f,qo,u),M(UL,qo,null),e(qo,JUo),e(qo,pd),e(pd,YUo),e(pd,nW),e(nW,KUo),e(pd,ZUo),e(pd,sW),e(sW,eJo),e(pd,oJo),e(qo,rJo),e(qo,JL),e(JL,tJo),e(JL,q2e),e(q2e,aJo),e(JL,nJo),e(qo,sJo),e(qo,_t),M(YL,_t,null),e(_t,lJo),e(_t,j2e),e(j2e,iJo),e(_t,dJo),e(_t,_d),e(_d,cJo),e(_d,D2e),e(D2e,fJo),e(_d,mJo),e(_d,lW),e(lW,gJo),e(_d,hJo),e(_t,pJo),M(_5,_t,null),e(qo,_Jo),e(qo,to),M(KL,to,null),e(to,uJo),e(to,G2e),e(G2e,bJo),e(to,vJo),e(to,Wa),e(Wa,FJo),e(Wa,O2e),e(O2e,TJo),e(Wa,MJo),e(Wa,V2e),e(V2e,EJo),e(Wa,CJo),e(Wa,X2e),e(X2e,wJo),e(Wa,AJo),e(to,LJo),e(to,Z),e(Z,u5),e(u5,z2e),e(z2e,yJo),e(u5,xJo),e(u5,iW),e(iW,$Jo),e(u5,kJo),e(Z,SJo),e(Z,b5),e(b5,W2e),e(W2e,RJo),e(b5,PJo),e(b5,dW),e(dW,BJo),e(b5,IJo),e(Z,NJo),e(Z,v5),e(v5,Q2e),e(Q2e,qJo),e(v5,jJo),e(v5,cW),e(cW,DJo),e(v5,GJo),e(Z,OJo),e(Z,F5),e(F5,H2e),e(H2e,VJo),e(F5,XJo),e(F5,fW),e(fW,zJo),e(F5,WJo),e(Z,QJo),e(Z,T5),e(T5,U2e),e(U2e,HJo),e(T5,UJo),e(T5,mW),e(mW,JJo),e(T5,YJo),e(Z,KJo),e(Z,M5),e(M5,J2e),e(J2e,ZJo),e(M5,eYo),e(M5,gW),e(gW,oYo),e(M5,rYo),e(Z,tYo),e(Z,E5),e(E5,Y2e),e(Y2e,aYo),e(E5,nYo),e(E5,hW),e(hW,sYo),e(E5,lYo),e(Z,iYo),e(Z,C5),e(C5,K2e),e(K2e,dYo),e(C5,cYo),e(C5,pW),e(pW,fYo),e(C5,mYo),e(Z,gYo),e(Z,w5),e(w5,Z2e),e(Z2e,hYo),e(w5,pYo),e(w5,_W),e(_W,_Yo),e(w5,uYo),e(Z,bYo),e(Z,A5),e(A5,e1e),e(e1e,vYo),e(A5,FYo),e(A5,uW),e(uW,TYo),e(A5,MYo),e(Z,EYo),e(Z,L5),e(L5,o1e),e(o1e,CYo),e(L5,wYo),e(L5,bW),e(bW,AYo),e(L5,LYo),e(Z,yYo),e(Z,y5),e(y5,r1e),e(r1e,xYo),e(y5,$Yo),e(y5,vW),e(vW,kYo),e(y5,SYo),e(Z,RYo),e(Z,x5),e(x5,t1e),e(t1e,PYo),e(x5,BYo),e(x5,FW),e(FW,IYo),e(x5,NYo),e(Z,qYo),e(Z,$5),e($5,a1e),e(a1e,jYo),e($5,DYo),e($5,TW),e(TW,GYo),e($5,OYo),e(Z,VYo),e(Z,k5),e(k5,n1e),e(n1e,XYo),e(k5,zYo),e(k5,MW),e(MW,WYo),e(k5,QYo),e(Z,HYo),e(Z,S5),e(S5,s1e),e(s1e,UYo),e(S5,JYo),e(S5,EW),e(EW,YYo),e(S5,KYo),e(Z,ZYo),e(Z,R5),e(R5,l1e),e(l1e,eKo),e(R5,oKo),e(R5,CW),e(CW,rKo),e(R5,tKo),e(Z,aKo),e(Z,P5),e(P5,i1e),e(i1e,nKo),e(P5,sKo),e(P5,wW),e(wW,lKo),e(P5,iKo),e(Z,dKo),e(Z,B5),e(B5,d1e),e(d1e,cKo),e(B5,fKo),e(B5,AW),e(AW,mKo),e(B5,gKo),e(Z,hKo),e(Z,I5),e(I5,c1e),e(c1e,pKo),e(I5,_Ko),e(I5,LW),e(LW,uKo),e(I5,bKo),e(Z,vKo),e(Z,N5),e(N5,f1e),e(f1e,FKo),e(N5,TKo),e(N5,yW),e(yW,MKo),e(N5,EKo),e(Z,CKo),e(Z,q5),e(q5,m1e),e(m1e,wKo),e(q5,AKo),e(q5,xW),e(xW,LKo),e(q5,yKo),e(Z,xKo),e(Z,j5),e(j5,g1e),e(g1e,$Ko),e(j5,kKo),e(j5,$W),e($W,SKo),e(j5,RKo),e(Z,PKo),e(Z,D5),e(D5,h1e),e(h1e,BKo),e(D5,IKo),e(D5,kW),e(kW,NKo),e(D5,qKo),e(Z,jKo),e(Z,G5),e(G5,p1e),e(p1e,DKo),e(G5,GKo),e(G5,SW),e(SW,OKo),e(G5,VKo),e(Z,XKo),e(Z,O5),e(O5,_1e),e(_1e,zKo),e(O5,WKo),e(O5,RW),e(RW,QKo),e(O5,HKo),e(Z,UKo),e(Z,V5),e(V5,u1e),e(u1e,JKo),e(V5,YKo),e(V5,PW),e(PW,KKo),e(V5,ZKo),e(Z,eZo),e(Z,X5),e(X5,b1e),e(b1e,oZo),e(X5,rZo),e(X5,BW),e(BW,tZo),e(X5,aZo),e(Z,nZo),e(Z,z5),e(z5,v1e),e(v1e,sZo),e(z5,lZo),e(z5,IW),e(IW,iZo),e(z5,dZo),e(Z,cZo),e(Z,W5),e(W5,F1e),e(F1e,fZo),e(W5,mZo),e(W5,NW),e(NW,gZo),e(W5,hZo),e(Z,pZo),e(Z,Q5),e(Q5,T1e),e(T1e,_Zo),e(Q5,uZo),e(Q5,qW),e(qW,bZo),e(Q5,vZo),e(to,FZo),e(to,H5),e(H5,TZo),e(H5,M1e),e(M1e,MZo),e(H5,EZo),e(H5,E1e),e(E1e,CZo),e(to,wZo),M(U5,to,null),b(f,iQe,u),b(f,ud,u),e(ud,J5),e(J5,C1e),M(ZL,C1e,null),e(ud,AZo),e(ud,w1e),e(w1e,LZo),b(f,dQe,u),b(f,jo,u),M(ey,jo,null),e(jo,yZo),e(jo,bd),e(bd,xZo),e(bd,jW),e(jW,$Zo),e(bd,kZo),e(bd,DW),e(DW,SZo),e(bd,RZo),e(jo,PZo),e(jo,oy),e(oy,BZo),e(oy,A1e),e(A1e,IZo),e(oy,NZo),e(jo,qZo),e(jo,ut),M(ry,ut,null),e(ut,jZo),e(ut,L1e),e(L1e,DZo),e(ut,GZo),e(ut,vd),e(vd,OZo),e(vd,y1e),e(y1e,VZo),e(vd,XZo),e(vd,GW),e(GW,zZo),e(vd,WZo),e(ut,QZo),M(Y5,ut,null),e(jo,HZo),e(jo,ao),M(ty,ao,null),e(ao,UZo),e(ao,x1e),e(x1e,JZo),e(ao,YZo),e(ao,Qa),e(Qa,KZo),e(Qa,$1e),e($1e,ZZo),e(Qa,eer),e(Qa,k1e),e(k1e,oer),e(Qa,rer),e(Qa,S1e),e(S1e,ter),e(Qa,aer),e(ao,ner),e(ao,Do),e(Do,K5),e(K5,R1e),e(R1e,ser),e(K5,ler),e(K5,OW),e(OW,ier),e(K5,der),e(Do,cer),e(Do,Z5),e(Z5,P1e),e(P1e,fer),e(Z5,mer),e(Z5,VW),e(VW,ger),e(Z5,her),e(Do,per),e(Do,eF),e(eF,B1e),e(B1e,_er),e(eF,uer),e(eF,XW),e(XW,ber),e(eF,ver),e(Do,Fer),e(Do,oF),e(oF,I1e),e(I1e,Ter),e(oF,Mer),e(oF,zW),e(zW,Eer),e(oF,Cer),e(Do,wer),e(Do,rF),e(rF,N1e),e(N1e,Aer),e(rF,Ler),e(rF,WW),e(WW,yer),e(rF,xer),e(Do,$er),e(Do,tF),e(tF,q1e),e(q1e,ker),e(tF,Ser),e(tF,QW),e(QW,Rer),e(tF,Per),e(ao,Ber),e(ao,aF),e(aF,Ier),e(aF,j1e),e(j1e,Ner),e(aF,qer),e(aF,D1e),e(D1e,jer),e(ao,Der),M(nF,ao,null),b(f,cQe,u),b(f,Fd,u),e(Fd,sF),e(sF,G1e),M(ay,G1e,null),e(Fd,Ger),e(Fd,O1e),e(O1e,Oer),b(f,fQe,u),b(f,Go,u),M(ny,Go,null),e(Go,Ver),e(Go,Td),e(Td,Xer),e(Td,HW),e(HW,zer),e(Td,Wer),e(Td,UW),e(UW,Qer),e(Td,Her),e(Go,Uer),e(Go,sy),e(sy,Jer),e(sy,V1e),e(V1e,Yer),e(sy,Ker),e(Go,Zer),e(Go,bt),M(ly,bt,null),e(bt,eor),e(bt,X1e),e(X1e,oor),e(bt,ror),e(bt,Md),e(Md,tor),e(Md,z1e),e(z1e,aor),e(Md,nor),e(Md,JW),e(JW,sor),e(Md,lor),e(bt,ior),M(lF,bt,null),e(Go,dor),e(Go,no),M(iy,no,null),e(no,cor),e(no,W1e),e(W1e,mor),e(no,gor),e(no,Ha),e(Ha,hor),e(Ha,Q1e),e(Q1e,por),e(Ha,_or),e(Ha,H1e),e(H1e,uor),e(Ha,bor),e(Ha,U1e),e(U1e,vor),e(Ha,For),e(no,Tor),e(no,U),e(U,iF),e(iF,J1e),e(J1e,Mor),e(iF,Eor),e(iF,YW),e(YW,Cor),e(iF,wor),e(U,Aor),e(U,dF),e(dF,Y1e),e(Y1e,Lor),e(dF,yor),e(dF,KW),e(KW,xor),e(dF,$or),e(U,kor),e(U,cF),e(cF,K1e),e(K1e,Sor),e(cF,Ror),e(cF,ZW),e(ZW,Por),e(cF,Bor),e(U,Ior),e(U,fF),e(fF,Z1e),e(Z1e,Nor),e(fF,qor),e(fF,eQ),e(eQ,jor),e(fF,Dor),e(U,Gor),e(U,mF),e(mF,ebe),e(ebe,Oor),e(mF,Vor),e(mF,oQ),e(oQ,Xor),e(mF,zor),e(U,Wor),e(U,gF),e(gF,obe),e(obe,Qor),e(gF,Hor),e(gF,rQ),e(rQ,Uor),e(gF,Jor),e(U,Yor),e(U,hF),e(hF,rbe),e(rbe,Kor),e(hF,Zor),e(hF,tQ),e(tQ,err),e(hF,orr),e(U,rrr),e(U,pF),e(pF,tbe),e(tbe,trr),e(pF,arr),e(pF,aQ),e(aQ,nrr),e(pF,srr),e(U,lrr),e(U,_F),e(_F,abe),e(abe,irr),e(_F,drr),e(_F,nQ),e(nQ,crr),e(_F,frr),e(U,mrr),e(U,uF),e(uF,nbe),e(nbe,grr),e(uF,hrr),e(uF,sQ),e(sQ,prr),e(uF,_rr),e(U,urr),e(U,bF),e(bF,sbe),e(sbe,brr),e(bF,vrr),e(bF,lQ),e(lQ,Frr),e(bF,Trr),e(U,Mrr),e(U,vF),e(vF,lbe),e(lbe,Err),e(vF,Crr),e(vF,iQ),e(iQ,wrr),e(vF,Arr),e(U,Lrr),e(U,FF),e(FF,ibe),e(ibe,yrr),e(FF,xrr),e(FF,dQ),e(dQ,$rr),e(FF,krr),e(U,Srr),e(U,TF),e(TF,dbe),e(dbe,Rrr),e(TF,Prr),e(TF,cQ),e(cQ,Brr),e(TF,Irr),e(U,Nrr),e(U,MF),e(MF,cbe),e(cbe,qrr),e(MF,jrr),e(MF,fQ),e(fQ,Drr),e(MF,Grr),e(U,Orr),e(U,EF),e(EF,fbe),e(fbe,Vrr),e(EF,Xrr),e(EF,mQ),e(mQ,zrr),e(EF,Wrr),e(U,Qrr),e(U,CF),e(CF,mbe),e(mbe,Hrr),e(CF,Urr),e(CF,gQ),e(gQ,Jrr),e(CF,Yrr),e(U,Krr),e(U,wF),e(wF,gbe),e(gbe,Zrr),e(wF,etr),e(wF,hQ),e(hQ,otr),e(wF,rtr),e(U,ttr),e(U,AF),e(AF,hbe),e(hbe,atr),e(AF,ntr),e(AF,pQ),e(pQ,str),e(AF,ltr),e(U,itr),e(U,LF),e(LF,pbe),e(pbe,dtr),e(LF,ctr),e(LF,_Q),e(_Q,ftr),e(LF,mtr),e(U,gtr),e(U,yF),e(yF,_be),e(_be,htr),e(yF,ptr),e(yF,uQ),e(uQ,_tr),e(yF,utr),e(U,btr),e(U,xF),e(xF,ube),e(ube,vtr),e(xF,Ftr),e(xF,bQ),e(bQ,Ttr),e(xF,Mtr),e(U,Etr),e(U,$F),e($F,bbe),e(bbe,Ctr),e($F,wtr),e($F,vQ),e(vQ,Atr),e($F,Ltr),e(U,ytr),e(U,kF),e(kF,vbe),e(vbe,xtr),e(kF,$tr),e(kF,FQ),e(FQ,ktr),e(kF,Str),e(U,Rtr),e(U,SF),e(SF,Fbe),e(Fbe,Ptr),e(SF,Btr),e(SF,TQ),e(TQ,Itr),e(SF,Ntr),e(U,qtr),e(U,RF),e(RF,Tbe),e(Tbe,jtr),e(RF,Dtr),e(RF,MQ),e(MQ,Gtr),e(RF,Otr),e(U,Vtr),e(U,PF),e(PF,Mbe),e(Mbe,Xtr),e(PF,ztr),e(PF,EQ),e(EQ,Wtr),e(PF,Qtr),e(U,Htr),e(U,BF),e(BF,Ebe),e(Ebe,Utr),e(BF,Jtr),e(BF,CQ),e(CQ,Ytr),e(BF,Ktr),e(U,Ztr),e(U,IF),e(IF,Cbe),e(Cbe,ear),e(IF,oar),e(IF,wQ),e(wQ,rar),e(IF,tar),e(U,aar),e(U,NF),e(NF,wbe),e(wbe,nar),e(NF,sar),e(NF,AQ),e(AQ,lar),e(NF,iar),e(U,dar),e(U,qF),e(qF,Abe),e(Abe,car),e(qF,far),e(qF,LQ),e(LQ,mar),e(qF,gar),e(U,har),e(U,jF),e(jF,Lbe),e(Lbe,par),e(jF,_ar),e(jF,yQ),e(yQ,uar),e(jF,bar),e(U,Far),e(U,DF),e(DF,ybe),e(ybe,Tar),e(DF,Mar),e(DF,xQ),e(xQ,Ear),e(DF,Car),e(U,war),e(U,GF),e(GF,xbe),e(xbe,Aar),e(GF,Lar),e(GF,$Q),e($Q,yar),e(GF,xar),e(U,$ar),e(U,OF),e(OF,$be),e($be,kar),e(OF,Sar),e(OF,kQ),e(kQ,Rar),e(OF,Par),e(U,Bar),e(U,VF),e(VF,kbe),e(kbe,Iar),e(VF,Nar),e(VF,SQ),e(SQ,qar),e(VF,jar),e(U,Dar),e(U,XF),e(XF,Sbe),e(Sbe,Gar),e(XF,Oar),e(XF,RQ),e(RQ,Var),e(XF,Xar),e(no,zar),e(no,zF),e(zF,War),e(zF,Rbe),e(Rbe,Qar),e(zF,Har),e(zF,Pbe),e(Pbe,Uar),e(no,Jar),M(WF,no,null),b(f,mQe,u),b(f,Ed,u),e(Ed,QF),e(QF,Bbe),M(dy,Bbe,null),e(Ed,Yar),e(Ed,Ibe),e(Ibe,Kar),b(f,gQe,u),b(f,Oo,u),M(cy,Oo,null),e(Oo,Zar),e(Oo,Cd),e(Cd,enr),e(Cd,PQ),e(PQ,onr),e(Cd,rnr),e(Cd,BQ),e(BQ,tnr),e(Cd,anr),e(Oo,nnr),e(Oo,fy),e(fy,snr),e(fy,Nbe),e(Nbe,lnr),e(fy,inr),e(Oo,dnr),e(Oo,vt),M(my,vt,null),e(vt,cnr),e(vt,qbe),e(qbe,fnr),e(vt,mnr),e(vt,wd),e(wd,gnr),e(wd,jbe),e(jbe,hnr),e(wd,pnr),e(wd,IQ),e(IQ,_nr),e(wd,unr),e(vt,bnr),M(HF,vt,null),e(Oo,vnr),e(Oo,so),M(gy,so,null),e(so,Fnr),e(so,Dbe),e(Dbe,Tnr),e(so,Mnr),e(so,Ua),e(Ua,Enr),e(Ua,Gbe),e(Gbe,Cnr),e(Ua,wnr),e(Ua,Obe),e(Obe,Anr),e(Ua,Lnr),e(Ua,Vbe),e(Vbe,ynr),e(Ua,xnr),e(so,$nr),e(so,V),e(V,UF),e(UF,Xbe),e(Xbe,knr),e(UF,Snr),e(UF,NQ),e(NQ,Rnr),e(UF,Pnr),e(V,Bnr),e(V,JF),e(JF,zbe),e(zbe,Inr),e(JF,Nnr),e(JF,qQ),e(qQ,qnr),e(JF,jnr),e(V,Dnr),e(V,YF),e(YF,Wbe),e(Wbe,Gnr),e(YF,Onr),e(YF,jQ),e(jQ,Vnr),e(YF,Xnr),e(V,znr),e(V,KF),e(KF,Qbe),e(Qbe,Wnr),e(KF,Qnr),e(KF,DQ),e(DQ,Hnr),e(KF,Unr),e(V,Jnr),e(V,ZF),e(ZF,Hbe),e(Hbe,Ynr),e(ZF,Knr),e(ZF,GQ),e(GQ,Znr),e(ZF,esr),e(V,osr),e(V,eT),e(eT,Ube),e(Ube,rsr),e(eT,tsr),e(eT,OQ),e(OQ,asr),e(eT,nsr),e(V,ssr),e(V,oT),e(oT,Jbe),e(Jbe,lsr),e(oT,isr),e(oT,VQ),e(VQ,dsr),e(oT,csr),e(V,fsr),e(V,rT),e(rT,Ybe),e(Ybe,msr),e(rT,gsr),e(rT,XQ),e(XQ,hsr),e(rT,psr),e(V,_sr),e(V,tT),e(tT,Kbe),e(Kbe,usr),e(tT,bsr),e(tT,zQ),e(zQ,vsr),e(tT,Fsr),e(V,Tsr),e(V,aT),e(aT,Zbe),e(Zbe,Msr),e(aT,Esr),e(aT,WQ),e(WQ,Csr),e(aT,wsr),e(V,Asr),e(V,nT),e(nT,eve),e(eve,Lsr),e(nT,ysr),e(nT,QQ),e(QQ,xsr),e(nT,$sr),e(V,ksr),e(V,sT),e(sT,ove),e(ove,Ssr),e(sT,Rsr),e(sT,HQ),e(HQ,Psr),e(sT,Bsr),e(V,Isr),e(V,lT),e(lT,rve),e(rve,Nsr),e(lT,qsr),e(lT,UQ),e(UQ,jsr),e(lT,Dsr),e(V,Gsr),e(V,iT),e(iT,tve),e(tve,Osr),e(iT,Vsr),e(iT,JQ),e(JQ,Xsr),e(iT,zsr),e(V,Wsr),e(V,dT),e(dT,ave),e(ave,Qsr),e(dT,Hsr),e(dT,YQ),e(YQ,Usr),e(dT,Jsr),e(V,Ysr),e(V,cT),e(cT,nve),e(nve,Ksr),e(cT,Zsr),e(cT,KQ),e(KQ,elr),e(cT,olr),e(V,rlr),e(V,fT),e(fT,sve),e(sve,tlr),e(fT,alr),e(fT,ZQ),e(ZQ,nlr),e(fT,slr),e(V,llr),e(V,mT),e(mT,lve),e(lve,ilr),e(mT,dlr),e(mT,eH),e(eH,clr),e(mT,flr),e(V,mlr),e(V,gT),e(gT,ive),e(ive,glr),e(gT,hlr),e(gT,oH),e(oH,plr),e(gT,_lr),e(V,ulr),e(V,hT),e(hT,dve),e(dve,blr),e(hT,vlr),e(hT,rH),e(rH,Flr),e(hT,Tlr),e(V,Mlr),e(V,pT),e(pT,cve),e(cve,Elr),e(pT,Clr),e(pT,tH),e(tH,wlr),e(pT,Alr),e(V,Llr),e(V,_T),e(_T,fve),e(fve,ylr),e(_T,xlr),e(_T,aH),e(aH,$lr),e(_T,klr),e(V,Slr),e(V,uT),e(uT,mve),e(mve,Rlr),e(uT,Plr),e(uT,nH),e(nH,Blr),e(uT,Ilr),e(V,Nlr),e(V,bT),e(bT,gve),e(gve,qlr),e(bT,jlr),e(bT,sH),e(sH,Dlr),e(bT,Glr),e(V,Olr),e(V,vT),e(vT,hve),e(hve,Vlr),e(vT,Xlr),e(vT,lH),e(lH,zlr),e(vT,Wlr),e(V,Qlr),e(V,FT),e(FT,pve),e(pve,Hlr),e(FT,Ulr),e(FT,iH),e(iH,Jlr),e(FT,Ylr),e(V,Klr),e(V,TT),e(TT,_ve),e(_ve,Zlr),e(TT,eir),e(TT,dH),e(dH,oir),e(TT,rir),e(V,tir),e(V,MT),e(MT,uve),e(uve,air),e(MT,nir),e(MT,cH),e(cH,sir),e(MT,lir),e(V,iir),e(V,ET),e(ET,bve),e(bve,dir),e(ET,cir),e(ET,fH),e(fH,fir),e(ET,mir),e(V,gir),e(V,CT),e(CT,vve),e(vve,hir),e(CT,pir),e(CT,mH),e(mH,_ir),e(CT,uir),e(V,bir),e(V,wT),e(wT,Fve),e(Fve,vir),e(wT,Fir),e(wT,gH),e(gH,Tir),e(wT,Mir),e(V,Eir),e(V,AT),e(AT,Tve),e(Tve,Cir),e(AT,wir),e(AT,hH),e(hH,Air),e(AT,Lir),e(V,yir),e(V,LT),e(LT,Mve),e(Mve,xir),e(LT,$ir),e(LT,pH),e(pH,kir),e(LT,Sir),e(V,Rir),e(V,yT),e(yT,Eve),e(Eve,Pir),e(yT,Bir),e(yT,_H),e(_H,Iir),e(yT,Nir),e(V,qir),e(V,xT),e(xT,Cve),e(Cve,jir),e(xT,Dir),e(xT,uH),e(uH,Gir),e(xT,Oir),e(V,Vir),e(V,$T),e($T,wve),e(wve,Xir),e($T,zir),e($T,bH),e(bH,Wir),e($T,Qir),e(V,Hir),e(V,kT),e(kT,Ave),e(Ave,Uir),e(kT,Jir),e(kT,vH),e(vH,Yir),e(kT,Kir),e(V,Zir),e(V,ST),e(ST,Lve),e(Lve,edr),e(ST,odr),e(ST,FH),e(FH,rdr),e(ST,tdr),e(V,adr),e(V,RT),e(RT,yve),e(yve,ndr),e(RT,sdr),e(RT,TH),e(TH,ldr),e(RT,idr),e(V,ddr),e(V,PT),e(PT,xve),e(xve,cdr),e(PT,fdr),e(PT,MH),e(MH,mdr),e(PT,gdr),e(V,hdr),e(V,BT),e(BT,$ve),e($ve,pdr),e(BT,_dr),e(BT,EH),e(EH,udr),e(BT,bdr),e(V,vdr),e(V,IT),e(IT,kve),e(kve,Fdr),e(IT,Tdr),e(IT,CH),e(CH,Mdr),e(IT,Edr),e(V,Cdr),e(V,NT),e(NT,Sve),e(Sve,wdr),e(NT,Adr),e(NT,wH),e(wH,Ldr),e(NT,ydr),e(so,xdr),e(so,qT),e(qT,$dr),e(qT,Rve),e(Rve,kdr),e(qT,Sdr),e(qT,Pve),e(Pve,Rdr),e(so,Pdr),M(jT,so,null),b(f,hQe,u),b(f,Ad,u),e(Ad,DT),e(DT,Bve),M(hy,Bve,null),e(Ad,Bdr),e(Ad,Ive),e(Ive,Idr),b(f,pQe,u),b(f,Vo,u),M(py,Vo,null),e(Vo,Ndr),e(Vo,Ld),e(Ld,qdr),e(Ld,AH),e(AH,jdr),e(Ld,Ddr),e(Ld,LH),e(LH,Gdr),e(Ld,Odr),e(Vo,Vdr),e(Vo,_y),e(_y,Xdr),e(_y,Nve),e(Nve,zdr),e(_y,Wdr),e(Vo,Qdr),e(Vo,Ft),M(uy,Ft,null),e(Ft,Hdr),e(Ft,qve),e(qve,Udr),e(Ft,Jdr),e(Ft,yd),e(yd,Ydr),e(yd,jve),e(jve,Kdr),e(yd,Zdr),e(yd,yH),e(yH,ecr),e(yd,ocr),e(Ft,rcr),M(GT,Ft,null),e(Vo,tcr),e(Vo,lo),M(by,lo,null),e(lo,acr),e(lo,Dve),e(Dve,ncr),e(lo,scr),e(lo,Ja),e(Ja,lcr),e(Ja,Gve),e(Gve,icr),e(Ja,dcr),e(Ja,Ove),e(Ove,ccr),e(Ja,fcr),e(Ja,Vve),e(Vve,mcr),e(Ja,gcr),e(lo,hcr),e(lo,Xve),e(Xve,OT),e(OT,zve),e(zve,pcr),e(OT,_cr),e(OT,xH),e(xH,ucr),e(OT,bcr),e(lo,vcr),e(lo,VT),e(VT,Fcr),e(VT,Wve),e(Wve,Tcr),e(VT,Mcr),e(VT,Qve),e(Qve,Ecr),e(lo,Ccr),M(XT,lo,null),b(f,_Qe,u),b(f,xd,u),e(xd,zT),e(zT,Hve),M(vy,Hve,null),e(xd,wcr),e(xd,Uve),e(Uve,Acr),b(f,uQe,u),b(f,Xo,u),M(Fy,Xo,null),e(Xo,Lcr),e(Xo,$d),e($d,ycr),e($d,$H),e($H,xcr),e($d,$cr),e($d,kH),e(kH,kcr),e($d,Scr),e(Xo,Rcr),e(Xo,Ty),e(Ty,Pcr),e(Ty,Jve),e(Jve,Bcr),e(Ty,Icr),e(Xo,Ncr),e(Xo,Tt),M(My,Tt,null),e(Tt,qcr),e(Tt,Yve),e(Yve,jcr),e(Tt,Dcr),e(Tt,kd),e(kd,Gcr),e(kd,Kve),e(Kve,Ocr),e(kd,Vcr),e(kd,SH),e(SH,Xcr),e(kd,zcr),e(Tt,Wcr),M(WT,Tt,null),e(Xo,Qcr),e(Xo,io),M(Ey,io,null),e(io,Hcr),e(io,Zve),e(Zve,Ucr),e(io,Jcr),e(io,Ya),e(Ya,Ycr),e(Ya,e5e),e(e5e,Kcr),e(Ya,Zcr),e(Ya,o5e),e(o5e,efr),e(Ya,ofr),e(Ya,r5e),e(r5e,rfr),e(Ya,tfr),e(io,afr),e(io,be),e(be,QT),e(QT,t5e),e(t5e,nfr),e(QT,sfr),e(QT,RH),e(RH,lfr),e(QT,ifr),e(be,dfr),e(be,HT),e(HT,a5e),e(a5e,cfr),e(HT,ffr),e(HT,PH),e(PH,mfr),e(HT,gfr),e(be,hfr),e(be,UT),e(UT,n5e),e(n5e,pfr),e(UT,_fr),e(UT,BH),e(BH,ufr),e(UT,bfr),e(be,vfr),e(be,JT),e(JT,s5e),e(s5e,Ffr),e(JT,Tfr),e(JT,IH),e(IH,Mfr),e(JT,Efr),e(be,Cfr),e(be,rl),e(rl,l5e),e(l5e,wfr),e(rl,Afr),e(rl,NH),e(NH,Lfr),e(rl,yfr),e(rl,qH),e(qH,xfr),e(rl,$fr),e(be,kfr),e(be,YT),e(YT,i5e),e(i5e,Sfr),e(YT,Rfr),e(YT,jH),e(jH,Pfr),e(YT,Bfr),e(be,Ifr),e(be,tl),e(tl,d5e),e(d5e,Nfr),e(tl,qfr),e(tl,DH),e(DH,jfr),e(tl,Dfr),e(tl,GH),e(GH,Gfr),e(tl,Ofr),e(be,Vfr),e(be,KT),e(KT,c5e),e(c5e,Xfr),e(KT,zfr),e(KT,OH),e(OH,Wfr),e(KT,Qfr),e(be,Hfr),e(be,Mt),e(Mt,f5e),e(f5e,Ufr),e(Mt,Jfr),e(Mt,VH),e(VH,Yfr),e(Mt,Kfr),e(Mt,XH),e(XH,Zfr),e(Mt,emr),e(Mt,zH),e(zH,omr),e(Mt,rmr),e(be,tmr),e(be,ZT),e(ZT,m5e),e(m5e,amr),e(ZT,nmr),e(ZT,WH),e(WH,smr),e(ZT,lmr),e(be,imr),e(be,e8),e(e8,g5e),e(g5e,dmr),e(e8,cmr),e(e8,QH),e(QH,fmr),e(e8,mmr),e(be,gmr),e(be,o8),e(o8,h5e),e(h5e,hmr),e(o8,pmr),e(o8,HH),e(HH,_mr),e(o8,umr),e(be,bmr),e(be,r8),e(r8,p5e),e(p5e,vmr),e(r8,Fmr),e(r8,UH),e(UH,Tmr),e(r8,Mmr),e(be,Emr),e(be,t8),e(t8,_5e),e(_5e,Cmr),e(t8,wmr),e(t8,JH),e(JH,Amr),e(t8,Lmr),e(be,ymr),e(be,a8),e(a8,u5e),e(u5e,xmr),e(a8,$mr),e(a8,YH),e(YH,kmr),e(a8,Smr),e(be,Rmr),e(be,n8),e(n8,b5e),e(b5e,Pmr),e(n8,Bmr),e(n8,KH),e(KH,Imr),e(n8,Nmr),e(be,qmr),e(be,s8),e(s8,v5e),e(v5e,jmr),e(s8,Dmr),e(s8,ZH),e(ZH,Gmr),e(s8,Omr),e(io,Vmr),e(io,l8),e(l8,Xmr),e(l8,F5e),e(F5e,zmr),e(l8,Wmr),e(l8,T5e),e(T5e,Qmr),e(io,Hmr),M(i8,io,null),b(f,bQe,u),b(f,Sd,u),e(Sd,d8),e(d8,M5e),M(Cy,M5e,null),e(Sd,Umr),e(Sd,E5e),e(E5e,Jmr),b(f,vQe,u),b(f,zo,u),M(wy,zo,null),e(zo,Ymr),e(zo,Rd),e(Rd,Kmr),e(Rd,eU),e(eU,Zmr),e(Rd,egr),e(Rd,oU),e(oU,ogr),e(Rd,rgr),e(zo,tgr),e(zo,Ay),e(Ay,agr),e(Ay,C5e),e(C5e,ngr),e(Ay,sgr),e(zo,lgr),e(zo,Et),M(Ly,Et,null),e(Et,igr),e(Et,w5e),e(w5e,dgr),e(Et,cgr),e(Et,Pd),e(Pd,fgr),e(Pd,A5e),e(A5e,mgr),e(Pd,ggr),e(Pd,rU),e(rU,hgr),e(Pd,pgr),e(Et,_gr),M(c8,Et,null),e(zo,ugr),e(zo,co),M(yy,co,null),e(co,bgr),e(co,L5e),e(L5e,vgr),e(co,Fgr),e(co,Ka),e(Ka,Tgr),e(Ka,y5e),e(y5e,Mgr),e(Ka,Egr),e(Ka,x5e),e(x5e,Cgr),e(Ka,wgr),e(Ka,$5e),e($5e,Agr),e(Ka,Lgr),e(co,ygr),e(co,k5e),e(k5e,f8),e(f8,S5e),e(S5e,xgr),e(f8,$gr),e(f8,tU),e(tU,kgr),e(f8,Sgr),e(co,Rgr),e(co,m8),e(m8,Pgr),e(m8,R5e),e(R5e,Bgr),e(m8,Igr),e(m8,P5e),e(P5e,Ngr),e(co,qgr),M(g8,co,null),b(f,FQe,u),b(f,Bd,u),e(Bd,h8),e(h8,B5e),M(xy,B5e,null),e(Bd,jgr),e(Bd,I5e),e(I5e,Dgr),b(f,TQe,u),b(f,Wo,u),M($y,Wo,null),e(Wo,Ggr),e(Wo,Id),e(Id,Ogr),e(Id,aU),e(aU,Vgr),e(Id,Xgr),e(Id,nU),e(nU,zgr),e(Id,Wgr),e(Wo,Qgr),e(Wo,ky),e(ky,Hgr),e(ky,N5e),e(N5e,Ugr),e(ky,Jgr),e(Wo,Ygr),e(Wo,Ct),M(Sy,Ct,null),e(Ct,Kgr),e(Ct,q5e),e(q5e,Zgr),e(Ct,ehr),e(Ct,Nd),e(Nd,ohr),e(Nd,j5e),e(j5e,rhr),e(Nd,thr),e(Nd,sU),e(sU,ahr),e(Nd,nhr),e(Ct,shr),M(p8,Ct,null),e(Wo,lhr),e(Wo,fo),M(Ry,fo,null),e(fo,ihr),e(fo,D5e),e(D5e,dhr),e(fo,chr),e(fo,Za),e(Za,fhr),e(Za,G5e),e(G5e,mhr),e(Za,ghr),e(Za,O5e),e(O5e,hhr),e(Za,phr),e(Za,V5e),e(V5e,_hr),e(Za,uhr),e(fo,bhr),e(fo,X5e),e(X5e,_8),e(_8,z5e),e(z5e,vhr),e(_8,Fhr),e(_8,lU),e(lU,Thr),e(_8,Mhr),e(fo,Ehr),e(fo,u8),e(u8,Chr),e(u8,W5e),e(W5e,whr),e(u8,Ahr),e(u8,Q5e),e(Q5e,Lhr),e(fo,yhr),M(b8,fo,null),b(f,MQe,u),b(f,qd,u),e(qd,v8),e(v8,H5e),M(Py,H5e,null),e(qd,xhr),e(qd,U5e),e(U5e,$hr),b(f,EQe,u),b(f,Qo,u),M(By,Qo,null),e(Qo,khr),e(Qo,jd),e(jd,Shr),e(jd,iU),e(iU,Rhr),e(jd,Phr),e(jd,dU),e(dU,Bhr),e(jd,Ihr),e(Qo,Nhr),e(Qo,Iy),e(Iy,qhr),e(Iy,J5e),e(J5e,jhr),e(Iy,Dhr),e(Qo,Ghr),e(Qo,wt),M(Ny,wt,null),e(wt,Ohr),e(wt,Y5e),e(Y5e,Vhr),e(wt,Xhr),e(wt,Dd),e(Dd,zhr),e(Dd,K5e),e(K5e,Whr),e(Dd,Qhr),e(Dd,cU),e(cU,Hhr),e(Dd,Uhr),e(wt,Jhr),M(F8,wt,null),e(Qo,Yhr),e(Qo,mo),M(qy,mo,null),e(mo,Khr),e(mo,Z5e),e(Z5e,Zhr),e(mo,epr),e(mo,en),e(en,opr),e(en,eFe),e(eFe,rpr),e(en,tpr),e(en,oFe),e(oFe,apr),e(en,npr),e(en,rFe),e(rFe,spr),e(en,lpr),e(mo,ipr),e(mo,tFe),e(tFe,T8),e(T8,aFe),e(aFe,dpr),e(T8,cpr),e(T8,fU),e(fU,fpr),e(T8,mpr),e(mo,gpr),e(mo,M8),e(M8,hpr),e(M8,nFe),e(nFe,ppr),e(M8,_pr),e(M8,sFe),e(sFe,upr),e(mo,bpr),M(E8,mo,null),b(f,CQe,u),b(f,Gd,u),e(Gd,C8),e(C8,lFe),M(jy,lFe,null),e(Gd,vpr),e(Gd,iFe),e(iFe,Fpr),b(f,wQe,u),b(f,Ho,u),M(Dy,Ho,null),e(Ho,Tpr),e(Ho,Od),e(Od,Mpr),e(Od,mU),e(mU,Epr),e(Od,Cpr),e(Od,gU),e(gU,wpr),e(Od,Apr),e(Ho,Lpr),e(Ho,Gy),e(Gy,ypr),e(Gy,dFe),e(dFe,xpr),e(Gy,$pr),e(Ho,kpr),e(Ho,At),M(Oy,At,null),e(At,Spr),e(At,cFe),e(cFe,Rpr),e(At,Ppr),e(At,Vd),e(Vd,Bpr),e(Vd,fFe),e(fFe,Ipr),e(Vd,Npr),e(Vd,hU),e(hU,qpr),e(Vd,jpr),e(At,Dpr),M(w8,At,null),e(Ho,Gpr),e(Ho,go),M(Vy,go,null),e(go,Opr),e(go,mFe),e(mFe,Vpr),e(go,Xpr),e(go,on),e(on,zpr),e(on,gFe),e(gFe,Wpr),e(on,Qpr),e(on,hFe),e(hFe,Hpr),e(on,Upr),e(on,pFe),e(pFe,Jpr),e(on,Ypr),e(go,Kpr),e(go,Pe),e(Pe,A8),e(A8,_Fe),e(_Fe,Zpr),e(A8,e_r),e(A8,pU),e(pU,o_r),e(A8,r_r),e(Pe,t_r),e(Pe,L8),e(L8,uFe),e(uFe,a_r),e(L8,n_r),e(L8,_U),e(_U,s_r),e(L8,l_r),e(Pe,i_r),e(Pe,y8),e(y8,bFe),e(bFe,d_r),e(y8,c_r),e(y8,uU),e(uU,f_r),e(y8,m_r),e(Pe,g_r),e(Pe,x8),e(x8,vFe),e(vFe,h_r),e(x8,p_r),e(x8,bU),e(bU,__r),e(x8,u_r),e(Pe,b_r),e(Pe,$8),e($8,FFe),e(FFe,v_r),e($8,F_r),e($8,vU),e(vU,T_r),e($8,M_r),e(Pe,E_r),e(Pe,k8),e(k8,TFe),e(TFe,C_r),e(k8,w_r),e(k8,FU),e(FU,A_r),e(k8,L_r),e(Pe,y_r),e(Pe,S8),e(S8,MFe),e(MFe,x_r),e(S8,$_r),e(S8,TU),e(TU,k_r),e(S8,S_r),e(Pe,R_r),e(Pe,R8),e(R8,EFe),e(EFe,P_r),e(R8,B_r),e(R8,MU),e(MU,I_r),e(R8,N_r),e(Pe,q_r),e(Pe,P8),e(P8,CFe),e(CFe,j_r),e(P8,D_r),e(P8,EU),e(EU,G_r),e(P8,O_r),e(go,V_r),e(go,B8),e(B8,X_r),e(B8,wFe),e(wFe,z_r),e(B8,W_r),e(B8,AFe),e(AFe,Q_r),e(go,H_r),M(I8,go,null),b(f,AQe,u),b(f,Xd,u),e(Xd,N8),e(N8,LFe),M(Xy,LFe,null),e(Xd,U_r),e(Xd,yFe),e(yFe,J_r),b(f,LQe,u),b(f,Uo,u),M(zy,Uo,null),e(Uo,Y_r),e(Uo,zd),e(zd,K_r),e(zd,CU),e(CU,Z_r),e(zd,eur),e(zd,wU),e(wU,our),e(zd,rur),e(Uo,tur),e(Uo,Wy),e(Wy,aur),e(Wy,xFe),e(xFe,nur),e(Wy,sur),e(Uo,lur),e(Uo,Lt),M(Qy,Lt,null),e(Lt,iur),e(Lt,$Fe),e($Fe,dur),e(Lt,cur),e(Lt,Wd),e(Wd,fur),e(Wd,kFe),e(kFe,mur),e(Wd,gur),e(Wd,AU),e(AU,hur),e(Wd,pur),e(Lt,_ur),M(q8,Lt,null),e(Uo,uur),e(Uo,ho),M(Hy,ho,null),e(ho,bur),e(ho,SFe),e(SFe,vur),e(ho,Fur),e(ho,rn),e(rn,Tur),e(rn,RFe),e(RFe,Mur),e(rn,Eur),e(rn,PFe),e(PFe,Cur),e(rn,wur),e(rn,BFe),e(BFe,Aur),e(rn,Lur),e(ho,yur),e(ho,at),e(at,j8),e(j8,IFe),e(IFe,xur),e(j8,$ur),e(j8,LU),e(LU,kur),e(j8,Sur),e(at,Rur),e(at,D8),e(D8,NFe),e(NFe,Pur),e(D8,Bur),e(D8,yU),e(yU,Iur),e(D8,Nur),e(at,qur),e(at,G8),e(G8,qFe),e(qFe,jur),e(G8,Dur),e(G8,xU),e(xU,Gur),e(G8,Our),e(at,Vur),e(at,O8),e(O8,jFe),e(jFe,Xur),e(O8,zur),e(O8,$U),e($U,Wur),e(O8,Qur),e(at,Hur),e(at,V8),e(V8,DFe),e(DFe,Uur),e(V8,Jur),e(V8,kU),e(kU,Yur),e(V8,Kur),e(ho,Zur),e(ho,X8),e(X8,e2r),e(X8,GFe),e(GFe,o2r),e(X8,r2r),e(X8,OFe),e(OFe,t2r),e(ho,a2r),M(z8,ho,null),b(f,yQe,u),b(f,Qd,u),e(Qd,W8),e(W8,VFe),M(Uy,VFe,null),e(Qd,n2r),e(Qd,XFe),e(XFe,s2r),b(f,xQe,u),b(f,Jo,u),M(Jy,Jo,null),e(Jo,l2r),e(Jo,Hd),e(Hd,i2r),e(Hd,SU),e(SU,d2r),e(Hd,c2r),e(Hd,RU),e(RU,f2r),e(Hd,m2r),e(Jo,g2r),e(Jo,Yy),e(Yy,h2r),e(Yy,zFe),e(zFe,p2r),e(Yy,_2r),e(Jo,u2r),e(Jo,yt),M(Ky,yt,null),e(yt,b2r),e(yt,WFe),e(WFe,v2r),e(yt,F2r),e(yt,Ud),e(Ud,T2r),e(Ud,QFe),e(QFe,M2r),e(Ud,E2r),e(Ud,PU),e(PU,C2r),e(Ud,w2r),e(yt,A2r),M(Q8,yt,null),e(Jo,L2r),e(Jo,po),M(Zy,po,null),e(po,y2r),e(po,HFe),e(HFe,x2r),e(po,$2r),e(po,tn),e(tn,k2r),e(tn,UFe),e(UFe,S2r),e(tn,R2r),e(tn,JFe),e(JFe,P2r),e(tn,B2r),e(tn,YFe),e(YFe,I2r),e(tn,N2r),e(po,q2r),e(po,Le),e(Le,H8),e(H8,KFe),e(KFe,j2r),e(H8,D2r),e(H8,BU),e(BU,G2r),e(H8,O2r),e(Le,V2r),e(Le,U8),e(U8,ZFe),e(ZFe,X2r),e(U8,z2r),e(U8,IU),e(IU,W2r),e(U8,Q2r),e(Le,H2r),e(Le,J8),e(J8,eTe),e(eTe,U2r),e(J8,J2r),e(J8,NU),e(NU,Y2r),e(J8,K2r),e(Le,Z2r),e(Le,Y8),e(Y8,oTe),e(oTe,e1r),e(Y8,o1r),e(Y8,qU),e(qU,r1r),e(Y8,t1r),e(Le,a1r),e(Le,K8),e(K8,rTe),e(rTe,n1r),e(K8,s1r),e(K8,jU),e(jU,l1r),e(K8,i1r),e(Le,d1r),e(Le,Z8),e(Z8,tTe),e(tTe,c1r),e(Z8,f1r),e(Z8,DU),e(DU,m1r),e(Z8,g1r),e(Le,h1r),e(Le,e9),e(e9,aTe),e(aTe,p1r),e(e9,_1r),e(e9,GU),e(GU,u1r),e(e9,b1r),e(Le,v1r),e(Le,o9),e(o9,nTe),e(nTe,F1r),e(o9,T1r),e(o9,OU),e(OU,M1r),e(o9,E1r),e(Le,C1r),e(Le,r9),e(r9,sTe),e(sTe,w1r),e(r9,A1r),e(r9,VU),e(VU,L1r),e(r9,y1r),e(Le,x1r),e(Le,t9),e(t9,lTe),e(lTe,$1r),e(t9,k1r),e(t9,XU),e(XU,S1r),e(t9,R1r),e(po,P1r),e(po,a9),e(a9,B1r),e(a9,iTe),e(iTe,I1r),e(a9,N1r),e(a9,dTe),e(dTe,q1r),e(po,j1r),M(n9,po,null),b(f,$Qe,u),b(f,Jd,u),e(Jd,s9),e(s9,cTe),M(ex,cTe,null),e(Jd,D1r),e(Jd,fTe),e(fTe,G1r),b(f,kQe,u),b(f,Yo,u),M(ox,Yo,null),e(Yo,O1r),e(Yo,Yd),e(Yd,V1r),e(Yd,zU),e(zU,X1r),e(Yd,z1r),e(Yd,WU),e(WU,W1r),e(Yd,Q1r),e(Yo,H1r),e(Yo,rx),e(rx,U1r),e(rx,mTe),e(mTe,J1r),e(rx,Y1r),e(Yo,K1r),e(Yo,xt),M(tx,xt,null),e(xt,Z1r),e(xt,gTe),e(gTe,ebr),e(xt,obr),e(xt,Kd),e(Kd,rbr),e(Kd,hTe),e(hTe,tbr),e(Kd,abr),e(Kd,QU),e(QU,nbr),e(Kd,sbr),e(xt,lbr),M(l9,xt,null),e(Yo,ibr),e(Yo,_o),M(ax,_o,null),e(_o,dbr),e(_o,pTe),e(pTe,cbr),e(_o,fbr),e(_o,an),e(an,mbr),e(an,_Te),e(_Te,gbr),e(an,hbr),e(an,uTe),e(uTe,pbr),e(an,_br),e(an,bTe),e(bTe,ubr),e(an,bbr),e(_o,vbr),e(_o,nx),e(nx,i9),e(i9,vTe),e(vTe,Fbr),e(i9,Tbr),e(i9,HU),e(HU,Mbr),e(i9,Ebr),e(nx,Cbr),e(nx,d9),e(d9,FTe),e(FTe,wbr),e(d9,Abr),e(d9,UU),e(UU,Lbr),e(d9,ybr),e(_o,xbr),e(_o,c9),e(c9,$br),e(c9,TTe),e(TTe,kbr),e(c9,Sbr),e(c9,MTe),e(MTe,Rbr),e(_o,Pbr),M(f9,_o,null),b(f,SQe,u),b(f,Zd,u),e(Zd,m9),e(m9,ETe),M(sx,ETe,null),e(Zd,Bbr),e(Zd,CTe),e(CTe,Ibr),b(f,RQe,u),b(f,Ko,u),M(lx,Ko,null),e(Ko,Nbr),e(Ko,ec),e(ec,qbr),e(ec,JU),e(JU,jbr),e(ec,Dbr),e(ec,YU),e(YU,Gbr),e(ec,Obr),e(Ko,Vbr),e(Ko,ix),e(ix,Xbr),e(ix,wTe),e(wTe,zbr),e(ix,Wbr),e(Ko,Qbr),e(Ko,$t),M(dx,$t,null),e($t,Hbr),e($t,ATe),e(ATe,Ubr),e($t,Jbr),e($t,oc),e(oc,Ybr),e(oc,LTe),e(LTe,Kbr),e(oc,Zbr),e(oc,KU),e(KU,evr),e(oc,ovr),e($t,rvr),M(g9,$t,null),e(Ko,tvr),e(Ko,uo),M(cx,uo,null),e(uo,avr),e(uo,yTe),e(yTe,nvr),e(uo,svr),e(uo,nn),e(nn,lvr),e(nn,xTe),e(xTe,ivr),e(nn,dvr),e(nn,$Te),e($Te,cvr),e(nn,fvr),e(nn,kTe),e(kTe,mvr),e(nn,gvr),e(uo,hvr),e(uo,nt),e(nt,h9),e(h9,STe),e(STe,pvr),e(h9,_vr),e(h9,ZU),e(ZU,uvr),e(h9,bvr),e(nt,vvr),e(nt,p9),e(p9,RTe),e(RTe,Fvr),e(p9,Tvr),e(p9,eJ),e(eJ,Mvr),e(p9,Evr),e(nt,Cvr),e(nt,_9),e(_9,PTe),e(PTe,wvr),e(_9,Avr),e(_9,oJ),e(oJ,Lvr),e(_9,yvr),e(nt,xvr),e(nt,u9),e(u9,BTe),e(BTe,$vr),e(u9,kvr),e(u9,rJ),e(rJ,Svr),e(u9,Rvr),e(nt,Pvr),e(nt,b9),e(b9,ITe),e(ITe,Bvr),e(b9,Ivr),e(b9,tJ),e(tJ,Nvr),e(b9,qvr),e(uo,jvr),e(uo,v9),e(v9,Dvr),e(v9,NTe),e(NTe,Gvr),e(v9,Ovr),e(v9,qTe),e(qTe,Vvr),e(uo,Xvr),M(F9,uo,null),b(f,PQe,u),b(f,rc,u),e(rc,T9),e(T9,jTe),M(fx,jTe,null),e(rc,zvr),e(rc,DTe),e(DTe,Wvr),b(f,BQe,u),b(f,Zo,u),M(mx,Zo,null),e(Zo,Qvr),e(Zo,tc),e(tc,Hvr),e(tc,aJ),e(aJ,Uvr),e(tc,Jvr),e(tc,nJ),e(nJ,Yvr),e(tc,Kvr),e(Zo,Zvr),e(Zo,gx),e(gx,e5r),e(gx,GTe),e(GTe,o5r),e(gx,r5r),e(Zo,t5r),e(Zo,kt),M(hx,kt,null),e(kt,a5r),e(kt,OTe),e(OTe,n5r),e(kt,s5r),e(kt,ac),e(ac,l5r),e(ac,VTe),e(VTe,i5r),e(ac,d5r),e(ac,sJ),e(sJ,c5r),e(ac,f5r),e(kt,m5r),M(M9,kt,null),e(Zo,g5r),e(Zo,bo),M(px,bo,null),e(bo,h5r),e(bo,XTe),e(XTe,p5r),e(bo,_5r),e(bo,sn),e(sn,u5r),e(sn,zTe),e(zTe,b5r),e(sn,v5r),e(sn,WTe),e(WTe,F5r),e(sn,T5r),e(sn,QTe),e(QTe,M5r),e(sn,E5r),e(bo,C5r),e(bo,ln),e(ln,E9),e(E9,HTe),e(HTe,w5r),e(E9,A5r),e(E9,lJ),e(lJ,L5r),e(E9,y5r),e(ln,x5r),e(ln,C9),e(C9,UTe),e(UTe,$5r),e(C9,k5r),e(C9,iJ),e(iJ,S5r),e(C9,R5r),e(ln,P5r),e(ln,w9),e(w9,JTe),e(JTe,B5r),e(w9,I5r),e(w9,dJ),e(dJ,N5r),e(w9,q5r),e(ln,j5r),e(ln,A9),e(A9,YTe),e(YTe,D5r),e(A9,G5r),e(A9,cJ),e(cJ,O5r),e(A9,V5r),e(bo,X5r),e(bo,L9),e(L9,z5r),e(L9,KTe),e(KTe,W5r),e(L9,Q5r),e(L9,ZTe),e(ZTe,H5r),e(bo,U5r),M(y9,bo,null),b(f,IQe,u),b(f,nc,u),e(nc,x9),e(x9,e8e),M(_x,e8e,null),e(nc,J5r),e(nc,o8e),e(o8e,Y5r),b(f,NQe,u),b(f,er,u),M(ux,er,null),e(er,K5r),e(er,sc),e(sc,Z5r),e(sc,fJ),e(fJ,eFr),e(sc,oFr),e(sc,mJ),e(mJ,rFr),e(sc,tFr),e(er,aFr),e(er,bx),e(bx,nFr),e(bx,r8e),e(r8e,sFr),e(bx,lFr),e(er,iFr),e(er,St),M(vx,St,null),e(St,dFr),e(St,t8e),e(t8e,cFr),e(St,fFr),e(St,lc),e(lc,mFr),e(lc,a8e),e(a8e,gFr),e(lc,hFr),e(lc,gJ),e(gJ,pFr),e(lc,_Fr),e(St,uFr),M($9,St,null),e(er,bFr),e(er,vo),M(Fx,vo,null),e(vo,vFr),e(vo,n8e),e(n8e,FFr),e(vo,TFr),e(vo,dn),e(dn,MFr),e(dn,s8e),e(s8e,EFr),e(dn,CFr),e(dn,l8e),e(l8e,wFr),e(dn,AFr),e(dn,i8e),e(i8e,LFr),e(dn,yFr),e(vo,xFr),e(vo,Tx),e(Tx,k9),e(k9,d8e),e(d8e,$Fr),e(k9,kFr),e(k9,hJ),e(hJ,SFr),e(k9,RFr),e(Tx,PFr),e(Tx,S9),e(S9,c8e),e(c8e,BFr),e(S9,IFr),e(S9,pJ),e(pJ,NFr),e(S9,qFr),e(vo,jFr),e(vo,R9),e(R9,DFr),e(R9,f8e),e(f8e,GFr),e(R9,OFr),e(R9,m8e),e(m8e,VFr),e(vo,XFr),M(P9,vo,null),b(f,qQe,u),b(f,ic,u),e(ic,B9),e(B9,g8e),M(Mx,g8e,null),e(ic,zFr),e(ic,h8e),e(h8e,WFr),b(f,jQe,u),b(f,or,u),M(Ex,or,null),e(or,QFr),e(or,dc),e(dc,HFr),e(dc,_J),e(_J,UFr),e(dc,JFr),e(dc,uJ),e(uJ,YFr),e(dc,KFr),e(or,ZFr),e(or,Cx),e(Cx,eTr),e(Cx,p8e),e(p8e,oTr),e(Cx,rTr),e(or,tTr),e(or,Rt),M(wx,Rt,null),e(Rt,aTr),e(Rt,_8e),e(_8e,nTr),e(Rt,sTr),e(Rt,cc),e(cc,lTr),e(cc,u8e),e(u8e,iTr),e(cc,dTr),e(cc,bJ),e(bJ,cTr),e(cc,fTr),e(Rt,mTr),M(I9,Rt,null),e(or,gTr),e(or,Fo),M(Ax,Fo,null),e(Fo,hTr),e(Fo,b8e),e(b8e,pTr),e(Fo,_Tr),e(Fo,cn),e(cn,uTr),e(cn,v8e),e(v8e,bTr),e(cn,vTr),e(cn,F8e),e(F8e,FTr),e(cn,TTr),e(cn,T8e),e(T8e,MTr),e(cn,ETr),e(Fo,CTr),e(Fo,M8e),e(M8e,N9),e(N9,E8e),e(E8e,wTr),e(N9,ATr),e(N9,vJ),e(vJ,LTr),e(N9,yTr),e(Fo,xTr),e(Fo,q9),e(q9,$Tr),e(q9,C8e),e(C8e,kTr),e(q9,STr),e(q9,w8e),e(w8e,RTr),e(Fo,PTr),M(j9,Fo,null),b(f,DQe,u),b(f,fc,u),e(fc,D9),e(D9,A8e),M(Lx,A8e,null),e(fc,BTr),e(fc,L8e),e(L8e,ITr),b(f,GQe,u),b(f,rr,u),M(yx,rr,null),e(rr,NTr),e(rr,mc),e(mc,qTr),e(mc,FJ),e(FJ,jTr),e(mc,DTr),e(mc,TJ),e(TJ,GTr),e(mc,OTr),e(rr,VTr),e(rr,xx),e(xx,XTr),e(xx,y8e),e(y8e,zTr),e(xx,WTr),e(rr,QTr),e(rr,Pt),M($x,Pt,null),e(Pt,HTr),e(Pt,x8e),e(x8e,UTr),e(Pt,JTr),e(Pt,gc),e(gc,YTr),e(gc,$8e),e($8e,KTr),e(gc,ZTr),e(gc,MJ),e(MJ,e8r),e(gc,o8r),e(Pt,r8r),M(G9,Pt,null),e(rr,t8r),e(rr,To),M(kx,To,null),e(To,a8r),e(To,k8e),e(k8e,n8r),e(To,s8r),e(To,fn),e(fn,l8r),e(fn,S8e),e(S8e,i8r),e(fn,d8r),e(fn,R8e),e(R8e,c8r),e(fn,f8r),e(fn,P8e),e(P8e,m8r),e(fn,g8r),e(To,h8r),e(To,st),e(st,O9),e(O9,B8e),e(B8e,p8r),e(O9,_8r),e(O9,EJ),e(EJ,u8r),e(O9,b8r),e(st,v8r),e(st,V9),e(V9,I8e),e(I8e,F8r),e(V9,T8r),e(V9,CJ),e(CJ,M8r),e(V9,E8r),e(st,C8r),e(st,X9),e(X9,N8e),e(N8e,w8r),e(X9,A8r),e(X9,wJ),e(wJ,L8r),e(X9,y8r),e(st,x8r),e(st,z9),e(z9,q8e),e(q8e,$8r),e(z9,k8r),e(z9,AJ),e(AJ,S8r),e(z9,R8r),e(st,P8r),e(st,W9),e(W9,j8e),e(j8e,B8r),e(W9,I8r),e(W9,LJ),e(LJ,N8r),e(W9,q8r),e(To,j8r),e(To,Q9),e(Q9,D8r),e(Q9,D8e),e(D8e,G8r),e(Q9,O8r),e(Q9,G8e),e(G8e,V8r),e(To,X8r),M(H9,To,null),b(f,OQe,u),b(f,hc,u),e(hc,U9),e(U9,O8e),M(Sx,O8e,null),e(hc,z8r),e(hc,V8e),e(V8e,W8r),b(f,VQe,u),b(f,tr,u),M(Rx,tr,null),e(tr,Q8r),e(tr,pc),e(pc,H8r),e(pc,yJ),e(yJ,U8r),e(pc,J8r),e(pc,xJ),e(xJ,Y8r),e(pc,K8r),e(tr,Z8r),e(tr,Px),e(Px,e9r),e(Px,X8e),e(X8e,o9r),e(Px,r9r),e(tr,t9r),e(tr,Bt),M(Bx,Bt,null),e(Bt,a9r),e(Bt,z8e),e(z8e,n9r),e(Bt,s9r),e(Bt,_c),e(_c,l9r),e(_c,W8e),e(W8e,i9r),e(_c,d9r),e(_c,$J),e($J,c9r),e(_c,f9r),e(Bt,m9r),M(J9,Bt,null),e(tr,g9r),e(tr,Mo),M(Ix,Mo,null),e(Mo,h9r),e(Mo,Q8e),e(Q8e,p9r),e(Mo,_9r),e(Mo,mn),e(mn,u9r),e(mn,H8e),e(H8e,b9r),e(mn,v9r),e(mn,U8e),e(U8e,F9r),e(mn,T9r),e(mn,J8e),e(J8e,M9r),e(mn,E9r),e(Mo,C9r),e(Mo,Y8e),e(Y8e,Y9),e(Y9,K8e),e(K8e,w9r),e(Y9,A9r),e(Y9,kJ),e(kJ,L9r),e(Y9,y9r),e(Mo,x9r),e(Mo,K9),e(K9,$9r),e(K9,Z8e),e(Z8e,k9r),e(K9,S9r),e(K9,e9e),e(e9e,R9r),e(Mo,P9r),M(Z9,Mo,null),b(f,XQe,u),b(f,uc,u),e(uc,eM),e(eM,o9e),M(Nx,o9e,null),e(uc,B9r),e(uc,r9e),e(r9e,I9r),b(f,zQe,u),b(f,ar,u),M(qx,ar,null),e(ar,N9r),e(ar,bc),e(bc,q9r),e(bc,SJ),e(SJ,j9r),e(bc,D9r),e(bc,RJ),e(RJ,G9r),e(bc,O9r),e(ar,V9r),e(ar,jx),e(jx,X9r),e(jx,t9e),e(t9e,z9r),e(jx,W9r),e(ar,Q9r),e(ar,It),M(Dx,It,null),e(It,H9r),e(It,a9e),e(a9e,U9r),e(It,J9r),e(It,vc),e(vc,Y9r),e(vc,n9e),e(n9e,K9r),e(vc,Z9r),e(vc,PJ),e(PJ,eMr),e(vc,oMr),e(It,rMr),M(oM,It,null),e(ar,tMr),e(ar,Sr),M(Gx,Sr,null),e(Sr,aMr),e(Sr,s9e),e(s9e,nMr),e(Sr,sMr),e(Sr,gn),e(gn,lMr),e(gn,l9e),e(l9e,iMr),e(gn,dMr),e(gn,i9e),e(i9e,cMr),e(gn,fMr),e(gn,d9e),e(d9e,mMr),e(gn,gMr),e(Sr,hMr),e(Sr,q),e(q,rM),e(rM,c9e),e(c9e,pMr),e(rM,_Mr),e(rM,BJ),e(BJ,uMr),e(rM,bMr),e(q,vMr),e(q,tM),e(tM,f9e),e(f9e,FMr),e(tM,TMr),e(tM,IJ),e(IJ,MMr),e(tM,EMr),e(q,CMr),e(q,aM),e(aM,m9e),e(m9e,wMr),e(aM,AMr),e(aM,NJ),e(NJ,LMr),e(aM,yMr),e(q,xMr),e(q,nM),e(nM,g9e),e(g9e,$Mr),e(nM,kMr),e(nM,qJ),e(qJ,SMr),e(nM,RMr),e(q,PMr),e(q,sM),e(sM,h9e),e(h9e,BMr),e(sM,IMr),e(sM,jJ),e(jJ,NMr),e(sM,qMr),e(q,jMr),e(q,lM),e(lM,p9e),e(p9e,DMr),e(lM,GMr),e(lM,DJ),e(DJ,OMr),e(lM,VMr),e(q,XMr),e(q,iM),e(iM,_9e),e(_9e,zMr),e(iM,WMr),e(iM,GJ),e(GJ,QMr),e(iM,HMr),e(q,UMr),e(q,dM),e(dM,u9e),e(u9e,JMr),e(dM,YMr),e(dM,OJ),e(OJ,KMr),e(dM,ZMr),e(q,eEr),e(q,cM),e(cM,b9e),e(b9e,oEr),e(cM,rEr),e(cM,VJ),e(VJ,tEr),e(cM,aEr),e(q,nEr),e(q,fM),e(fM,v9e),e(v9e,sEr),e(fM,lEr),e(fM,XJ),e(XJ,iEr),e(fM,dEr),e(q,cEr),e(q,mM),e(mM,F9e),e(F9e,fEr),e(mM,mEr),e(mM,zJ),e(zJ,gEr),e(mM,hEr),e(q,pEr),e(q,gM),e(gM,T9e),e(T9e,_Er),e(gM,uEr),e(gM,WJ),e(WJ,bEr),e(gM,vEr),e(q,FEr),e(q,hM),e(hM,M9e),e(M9e,TEr),e(hM,MEr),e(hM,QJ),e(QJ,EEr),e(hM,CEr),e(q,wEr),e(q,pM),e(pM,E9e),e(E9e,AEr),e(pM,LEr),e(pM,HJ),e(HJ,yEr),e(pM,xEr),e(q,$Er),e(q,_M),e(_M,C9e),e(C9e,kEr),e(_M,SEr),e(_M,UJ),e(UJ,REr),e(_M,PEr),e(q,BEr),e(q,uM),e(uM,w9e),e(w9e,IEr),e(uM,NEr),e(uM,JJ),e(JJ,qEr),e(uM,jEr),e(q,DEr),e(q,bM),e(bM,A9e),e(A9e,GEr),e(bM,OEr),e(bM,YJ),e(YJ,VEr),e(bM,XEr),e(q,zEr),e(q,vM),e(vM,L9e),e(L9e,WEr),e(vM,QEr),e(vM,KJ),e(KJ,HEr),e(vM,UEr),e(q,JEr),e(q,al),e(al,y9e),e(y9e,YEr),e(al,KEr),e(al,ZJ),e(ZJ,ZEr),e(al,e4r),e(al,eY),e(eY,o4r),e(al,r4r),e(q,t4r),e(q,FM),e(FM,x9e),e(x9e,a4r),e(FM,n4r),e(FM,oY),e(oY,s4r),e(FM,l4r),e(q,i4r),e(q,TM),e(TM,$9e),e($9e,d4r),e(TM,c4r),e(TM,rY),e(rY,f4r),e(TM,m4r),e(q,g4r),e(q,MM),e(MM,k9e),e(k9e,h4r),e(MM,p4r),e(MM,tY),e(tY,_4r),e(MM,u4r),e(q,b4r),e(q,EM),e(EM,S9e),e(S9e,v4r),e(EM,F4r),e(EM,aY),e(aY,T4r),e(EM,M4r),e(q,E4r),e(q,CM),e(CM,R9e),e(R9e,C4r),e(CM,w4r),e(CM,nY),e(nY,A4r),e(CM,L4r),e(q,y4r),e(q,wM),e(wM,P9e),e(P9e,x4r),e(wM,$4r),e(wM,sY),e(sY,k4r),e(wM,S4r),e(q,R4r),e(q,AM),e(AM,B9e),e(B9e,P4r),e(AM,B4r),e(AM,lY),e(lY,I4r),e(AM,N4r),e(q,q4r),e(q,LM),e(LM,I9e),e(I9e,j4r),e(LM,D4r),e(LM,iY),e(iY,G4r),e(LM,O4r),e(q,V4r),e(q,yM),e(yM,N9e),e(N9e,X4r),e(yM,z4r),e(yM,dY),e(dY,W4r),e(yM,Q4r),e(q,H4r),e(q,xM),e(xM,q9e),e(q9e,U4r),e(xM,J4r),e(xM,cY),e(cY,Y4r),e(xM,K4r),e(q,Z4r),e(q,$M),e($M,j9e),e(j9e,eCr),e($M,oCr),e($M,fY),e(fY,rCr),e($M,tCr),e(q,aCr),e(q,kM),e(kM,D9e),e(D9e,nCr),e(kM,sCr),e(kM,mY),e(mY,lCr),e(kM,iCr),e(q,dCr),e(q,SM),e(SM,G9e),e(G9e,cCr),e(SM,fCr),e(SM,gY),e(gY,mCr),e(SM,gCr),e(q,hCr),e(q,RM),e(RM,O9e),e(O9e,pCr),e(RM,_Cr),e(RM,hY),e(hY,uCr),e(RM,bCr),e(q,vCr),e(q,PM),e(PM,V9e),e(V9e,FCr),e(PM,TCr),e(PM,pY),e(pY,MCr),e(PM,ECr),e(q,CCr),e(q,BM),e(BM,X9e),e(X9e,wCr),e(BM,ACr),e(BM,_Y),e(_Y,LCr),e(BM,yCr),e(q,xCr),e(q,IM),e(IM,z9e),e(z9e,$Cr),e(IM,kCr),e(IM,uY),e(uY,SCr),e(IM,RCr),e(q,PCr),e(q,NM),e(NM,W9e),e(W9e,BCr),e(NM,ICr),e(NM,bY),e(bY,NCr),e(NM,qCr),e(q,jCr),e(q,qM),e(qM,Q9e),e(Q9e,DCr),e(qM,GCr),e(qM,vY),e(vY,OCr),e(qM,VCr),e(q,XCr),e(q,jM),e(jM,H9e),e(H9e,zCr),e(jM,WCr),e(jM,FY),e(FY,QCr),e(jM,HCr),e(q,UCr),e(q,DM),e(DM,U9e),e(U9e,JCr),e(DM,YCr),e(DM,TY),e(TY,KCr),e(DM,ZCr),e(q,e3r),e(q,GM),e(GM,J9e),e(J9e,o3r),e(GM,r3r),e(GM,MY),e(MY,t3r),e(GM,a3r),e(q,n3r),e(q,OM),e(OM,Y9e),e(Y9e,s3r),e(OM,l3r),e(OM,EY),e(EY,i3r),e(OM,d3r),e(q,c3r),e(q,VM),e(VM,K9e),e(K9e,f3r),e(VM,m3r),e(VM,CY),e(CY,g3r),e(VM,h3r),e(q,p3r),e(q,XM),e(XM,Z9e),e(Z9e,_3r),e(XM,u3r),e(XM,wY),e(wY,b3r),e(XM,v3r),e(q,F3r),e(q,zM),e(zM,eMe),e(eMe,T3r),e(zM,M3r),e(zM,AY),e(AY,E3r),e(zM,C3r),e(q,w3r),e(q,WM),e(WM,oMe),e(oMe,A3r),e(WM,L3r),e(WM,LY),e(LY,y3r),e(WM,x3r),e(q,$3r),e(q,QM),e(QM,rMe),e(rMe,k3r),e(QM,S3r),e(QM,yY),e(yY,R3r),e(QM,P3r),e(q,B3r),e(q,HM),e(HM,tMe),e(tMe,I3r),e(HM,N3r),e(HM,xY),e(xY,q3r),e(HM,j3r),e(q,D3r),e(q,UM),e(UM,aMe),e(aMe,G3r),e(UM,O3r),e(UM,$Y),e($Y,V3r),e(UM,X3r),e(q,z3r),e(q,JM),e(JM,nMe),e(nMe,W3r),e(JM,Q3r),e(JM,kY),e(kY,H3r),e(JM,U3r),e(q,J3r),e(q,YM),e(YM,sMe),e(sMe,Y3r),e(YM,K3r),e(YM,SY),e(SY,Z3r),e(YM,e0r),e(Sr,o0r),M(KM,Sr,null),b(f,WQe,u),b(f,Fc,u),e(Fc,ZM),e(ZM,lMe),M(Ox,lMe,null),e(Fc,r0r),e(Fc,iMe),e(iMe,t0r),b(f,QQe,u),b(f,nr,u),M(Vx,nr,null),e(nr,a0r),e(nr,Tc),e(Tc,n0r),e(Tc,RY),e(RY,s0r),e(Tc,l0r),e(Tc,PY),e(PY,i0r),e(Tc,d0r),e(nr,c0r),e(nr,Xx),e(Xx,f0r),e(Xx,dMe),e(dMe,m0r),e(Xx,g0r),e(nr,h0r),e(nr,Nt),M(zx,Nt,null),e(Nt,p0r),e(Nt,cMe),e(cMe,_0r),e(Nt,u0r),e(Nt,Mc),e(Mc,b0r),e(Mc,fMe),e(fMe,v0r),e(Mc,F0r),e(Mc,BY),e(BY,T0r),e(Mc,M0r),e(Nt,E0r),M(eE,Nt,null),e(nr,C0r),e(nr,Rr),M(Wx,Rr,null),e(Rr,w0r),e(Rr,mMe),e(mMe,A0r),e(Rr,L0r),e(Rr,hn),e(hn,y0r),e(hn,gMe),e(gMe,x0r),e(hn,$0r),e(hn,hMe),e(hMe,k0r),e(hn,S0r),e(hn,pMe),e(pMe,R0r),e(hn,P0r),e(Rr,B0r),e(Rr,se),e(se,oE),e(oE,_Me),e(_Me,I0r),e(oE,N0r),e(oE,IY),e(IY,q0r),e(oE,j0r),e(se,D0r),e(se,rE),e(rE,uMe),e(uMe,G0r),e(rE,O0r),e(rE,NY),e(NY,V0r),e(rE,X0r),e(se,z0r),e(se,tE),e(tE,bMe),e(bMe,W0r),e(tE,Q0r),e(tE,qY),e(qY,H0r),e(tE,U0r),e(se,J0r),e(se,aE),e(aE,vMe),e(vMe,Y0r),e(aE,K0r),e(aE,jY),e(jY,Z0r),e(aE,ewr),e(se,owr),e(se,nE),e(nE,FMe),e(FMe,rwr),e(nE,twr),e(nE,DY),e(DY,awr),e(nE,nwr),e(se,swr),e(se,sE),e(sE,TMe),e(TMe,lwr),e(sE,iwr),e(sE,GY),e(GY,dwr),e(sE,cwr),e(se,fwr),e(se,lE),e(lE,MMe),e(MMe,mwr),e(lE,gwr),e(lE,OY),e(OY,hwr),e(lE,pwr),e(se,_wr),e(se,iE),e(iE,EMe),e(EMe,uwr),e(iE,bwr),e(iE,VY),e(VY,vwr),e(iE,Fwr),e(se,Twr),e(se,dE),e(dE,CMe),e(CMe,Mwr),e(dE,Ewr),e(dE,XY),e(XY,Cwr),e(dE,wwr),e(se,Awr),e(se,cE),e(cE,wMe),e(wMe,Lwr),e(cE,ywr),e(cE,zY),e(zY,xwr),e(cE,$wr),e(se,kwr),e(se,fE),e(fE,AMe),e(AMe,Swr),e(fE,Rwr),e(fE,WY),e(WY,Pwr),e(fE,Bwr),e(se,Iwr),e(se,mE),e(mE,LMe),e(LMe,Nwr),e(mE,qwr),e(mE,QY),e(QY,jwr),e(mE,Dwr),e(se,Gwr),e(se,gE),e(gE,yMe),e(yMe,Owr),e(gE,Vwr),e(gE,HY),e(HY,Xwr),e(gE,zwr),e(se,Wwr),e(se,hE),e(hE,xMe),e(xMe,Qwr),e(hE,Hwr),e(hE,UY),e(UY,Uwr),e(hE,Jwr),e(se,Ywr),e(se,pE),e(pE,$Me),e($Me,Kwr),e(pE,Zwr),e(pE,JY),e(JY,e6r),e(pE,o6r),e(se,r6r),e(se,_E),e(_E,kMe),e(kMe,t6r),e(_E,a6r),e(_E,YY),e(YY,n6r),e(_E,s6r),e(se,l6r),e(se,uE),e(uE,SMe),e(SMe,i6r),e(uE,d6r),e(uE,KY),e(KY,c6r),e(uE,f6r),e(se,m6r),e(se,bE),e(bE,RMe),e(RMe,g6r),e(bE,h6r),e(bE,ZY),e(ZY,p6r),e(bE,_6r),e(se,u6r),e(se,vE),e(vE,PMe),e(PMe,b6r),e(vE,v6r),e(vE,eK),e(eK,F6r),e(vE,T6r),e(se,M6r),e(se,FE),e(FE,BMe),e(BMe,E6r),e(FE,C6r),e(FE,oK),e(oK,w6r),e(FE,A6r),e(se,L6r),e(se,TE),e(TE,IMe),e(IMe,y6r),e(TE,x6r),e(TE,rK),e(rK,$6r),e(TE,k6r),e(se,S6r),e(se,ME),e(ME,NMe),e(NMe,R6r),e(ME,P6r),e(ME,tK),e(tK,B6r),e(ME,I6r),e(se,N6r),e(se,EE),e(EE,qMe),e(qMe,q6r),e(EE,j6r),e(EE,aK),e(aK,D6r),e(EE,G6r),e(Rr,O6r),M(CE,Rr,null),b(f,HQe,u),b(f,Ec,u),e(Ec,wE),e(wE,jMe),M(Qx,jMe,null),e(Ec,V6r),e(Ec,DMe),e(DMe,X6r),b(f,UQe,u),b(f,sr,u),M(Hx,sr,null),e(sr,z6r),e(sr,Cc),e(Cc,W6r),e(Cc,nK),e(nK,Q6r),e(Cc,H6r),e(Cc,sK),e(sK,U6r),e(Cc,J6r),e(sr,Y6r),e(sr,Ux),e(Ux,K6r),e(Ux,GMe),e(GMe,Z6r),e(Ux,eAr),e(sr,oAr),e(sr,qt),M(Jx,qt,null),e(qt,rAr),e(qt,OMe),e(OMe,tAr),e(qt,aAr),e(qt,wc),e(wc,nAr),e(wc,VMe),e(VMe,sAr),e(wc,lAr),e(wc,lK),e(lK,iAr),e(wc,dAr),e(qt,cAr),M(AE,qt,null),e(sr,fAr),e(sr,Pr),M(Yx,Pr,null),e(Pr,mAr),e(Pr,XMe),e(XMe,gAr),e(Pr,hAr),e(Pr,pn),e(pn,pAr),e(pn,zMe),e(zMe,_Ar),e(pn,uAr),e(pn,WMe),e(WMe,bAr),e(pn,vAr),e(pn,QMe),e(QMe,FAr),e(pn,TAr),e(Pr,MAr),e(Pr,Me),e(Me,LE),e(LE,HMe),e(HMe,EAr),e(LE,CAr),e(LE,iK),e(iK,wAr),e(LE,AAr),e(Me,LAr),e(Me,yE),e(yE,UMe),e(UMe,yAr),e(yE,xAr),e(yE,dK),e(dK,$Ar),e(yE,kAr),e(Me,SAr),e(Me,xE),e(xE,JMe),e(JMe,RAr),e(xE,PAr),e(xE,cK),e(cK,BAr),e(xE,IAr),e(Me,NAr),e(Me,$E),e($E,YMe),e(YMe,qAr),e($E,jAr),e($E,fK),e(fK,DAr),e($E,GAr),e(Me,OAr),e(Me,kE),e(kE,KMe),e(KMe,VAr),e(kE,XAr),e(kE,mK),e(mK,zAr),e(kE,WAr),e(Me,QAr),e(Me,SE),e(SE,ZMe),e(ZMe,HAr),e(SE,UAr),e(SE,gK),e(gK,JAr),e(SE,YAr),e(Me,KAr),e(Me,RE),e(RE,eEe),e(eEe,ZAr),e(RE,e7r),e(RE,hK),e(hK,o7r),e(RE,r7r),e(Me,t7r),e(Me,PE),e(PE,oEe),e(oEe,a7r),e(PE,n7r),e(PE,pK),e(pK,s7r),e(PE,l7r),e(Me,i7r),e(Me,BE),e(BE,rEe),e(rEe,d7r),e(BE,c7r),e(BE,_K),e(_K,f7r),e(BE,m7r),e(Me,g7r),e(Me,IE),e(IE,tEe),e(tEe,h7r),e(IE,p7r),e(IE,uK),e(uK,_7r),e(IE,u7r),e(Me,b7r),e(Me,NE),e(NE,aEe),e(aEe,v7r),e(NE,F7r),e(NE,bK),e(bK,T7r),e(NE,M7r),e(Me,E7r),e(Me,qE),e(qE,nEe),e(nEe,C7r),e(qE,w7r),e(qE,vK),e(vK,A7r),e(qE,L7r),e(Me,y7r),e(Me,jE),e(jE,sEe),e(sEe,x7r),e(jE,$7r),e(jE,FK),e(FK,k7r),e(jE,S7r),e(Pr,R7r),M(DE,Pr,null),b(f,JQe,u),b(f,Ac,u),e(Ac,GE),e(GE,lEe),M(Kx,lEe,null),e(Ac,P7r),e(Ac,iEe),e(iEe,B7r),b(f,YQe,u),b(f,lr,u),M(Zx,lr,null),e(lr,I7r),e(lr,Lc),e(Lc,N7r),e(Lc,TK),e(TK,q7r),e(Lc,j7r),e(Lc,MK),e(MK,D7r),e(Lc,G7r),e(lr,O7r),e(lr,e$),e(e$,V7r),e(e$,dEe),e(dEe,X7r),e(e$,z7r),e(lr,W7r),e(lr,jt),M(o$,jt,null),e(jt,Q7r),e(jt,cEe),e(cEe,H7r),e(jt,U7r),e(jt,yc),e(yc,J7r),e(yc,fEe),e(fEe,Y7r),e(yc,K7r),e(yc,EK),e(EK,Z7r),e(yc,eLr),e(jt,oLr),M(OE,jt,null),e(lr,rLr),e(lr,Br),M(r$,Br,null),e(Br,tLr),e(Br,mEe),e(mEe,aLr),e(Br,nLr),e(Br,_n),e(_n,sLr),e(_n,gEe),e(gEe,lLr),e(_n,iLr),e(_n,hEe),e(hEe,dLr),e(_n,cLr),e(_n,pEe),e(pEe,fLr),e(_n,mLr),e(Br,gLr),e(Br,Ve),e(Ve,VE),e(VE,_Ee),e(_Ee,hLr),e(VE,pLr),e(VE,CK),e(CK,_Lr),e(VE,uLr),e(Ve,bLr),e(Ve,XE),e(XE,uEe),e(uEe,vLr),e(XE,FLr),e(XE,wK),e(wK,TLr),e(XE,MLr),e(Ve,ELr),e(Ve,nl),e(nl,bEe),e(bEe,CLr),e(nl,wLr),e(nl,AK),e(AK,ALr),e(nl,LLr),e(nl,LK),e(LK,yLr),e(nl,xLr),e(Ve,$Lr),e(Ve,zE),e(zE,vEe),e(vEe,kLr),e(zE,SLr),e(zE,yK),e(yK,RLr),e(zE,PLr),e(Ve,BLr),e(Ve,WE),e(WE,FEe),e(FEe,ILr),e(WE,NLr),e(WE,xK),e(xK,qLr),e(WE,jLr),e(Ve,DLr),e(Ve,QE),e(QE,TEe),e(TEe,GLr),e(QE,OLr),e(QE,$K),e($K,VLr),e(QE,XLr),e(Ve,zLr),e(Ve,HE),e(HE,MEe),e(MEe,WLr),e(HE,QLr),e(HE,kK),e(kK,HLr),e(HE,ULr),e(Ve,JLr),e(Ve,UE),e(UE,EEe),e(EEe,YLr),e(UE,KLr),e(UE,SK),e(SK,ZLr),e(UE,eyr),e(Br,oyr),M(JE,Br,null),b(f,KQe,u),b(f,xc,u),e(xc,YE),e(YE,CEe),M(t$,CEe,null),e(xc,ryr),e(xc,wEe),e(wEe,tyr),b(f,ZQe,u),b(f,ir,u),M(a$,ir,null),e(ir,ayr),e(ir,$c),e($c,nyr),e($c,RK),e(RK,syr),e($c,lyr),e($c,PK),e(PK,iyr),e($c,dyr),e(ir,cyr),e(ir,n$),e(n$,fyr),e(n$,AEe),e(AEe,myr),e(n$,gyr),e(ir,hyr),e(ir,Dt),M(s$,Dt,null),e(Dt,pyr),e(Dt,LEe),e(LEe,_yr),e(Dt,uyr),e(Dt,kc),e(kc,byr),e(kc,yEe),e(yEe,vyr),e(kc,Fyr),e(kc,BK),e(BK,Tyr),e(kc,Myr),e(Dt,Eyr),M(KE,Dt,null),e(ir,Cyr),e(ir,Ir),M(l$,Ir,null),e(Ir,wyr),e(Ir,xEe),e(xEe,Ayr),e(Ir,Lyr),e(Ir,un),e(un,yyr),e(un,$Ee),e($Ee,xyr),e(un,$yr),e(un,kEe),e(kEe,kyr),e(un,Syr),e(un,SEe),e(SEe,Ryr),e(un,Pyr),e(Ir,Byr),e(Ir,ie),e(ie,ZE),e(ZE,REe),e(REe,Iyr),e(ZE,Nyr),e(ZE,IK),e(IK,qyr),e(ZE,jyr),e(ie,Dyr),e(ie,e4),e(e4,PEe),e(PEe,Gyr),e(e4,Oyr),e(e4,NK),e(NK,Vyr),e(e4,Xyr),e(ie,zyr),e(ie,o4),e(o4,BEe),e(BEe,Wyr),e(o4,Qyr),e(o4,qK),e(qK,Hyr),e(o4,Uyr),e(ie,Jyr),e(ie,r4),e(r4,IEe),e(IEe,Yyr),e(r4,Kyr),e(r4,jK),e(jK,Zyr),e(r4,exr),e(ie,oxr),e(ie,t4),e(t4,NEe),e(NEe,rxr),e(t4,txr),e(t4,DK),e(DK,axr),e(t4,nxr),e(ie,sxr),e(ie,a4),e(a4,qEe),e(qEe,lxr),e(a4,ixr),e(a4,GK),e(GK,dxr),e(a4,cxr),e(ie,fxr),e(ie,n4),e(n4,jEe),e(jEe,mxr),e(n4,gxr),e(n4,OK),e(OK,hxr),e(n4,pxr),e(ie,_xr),e(ie,s4),e(s4,DEe),e(DEe,uxr),e(s4,bxr),e(s4,VK),e(VK,vxr),e(s4,Fxr),e(ie,Txr),e(ie,l4),e(l4,GEe),e(GEe,Mxr),e(l4,Exr),e(l4,XK),e(XK,Cxr),e(l4,wxr),e(ie,Axr),e(ie,i4),e(i4,OEe),e(OEe,Lxr),e(i4,yxr),e(i4,zK),e(zK,xxr),e(i4,$xr),e(ie,kxr),e(ie,d4),e(d4,VEe),e(VEe,Sxr),e(d4,Rxr),e(d4,WK),e(WK,Pxr),e(d4,Bxr),e(ie,Ixr),e(ie,c4),e(c4,XEe),e(XEe,Nxr),e(c4,qxr),e(c4,QK),e(QK,jxr),e(c4,Dxr),e(ie,Gxr),e(ie,f4),e(f4,zEe),e(zEe,Oxr),e(f4,Vxr),e(f4,HK),e(HK,Xxr),e(f4,zxr),e(ie,Wxr),e(ie,m4),e(m4,WEe),e(WEe,Qxr),e(m4,Hxr),e(m4,UK),e(UK,Uxr),e(m4,Jxr),e(ie,Yxr),e(ie,g4),e(g4,QEe),e(QEe,Kxr),e(g4,Zxr),e(g4,JK),e(JK,e$r),e(g4,o$r),e(ie,r$r),e(ie,h4),e(h4,HEe),e(HEe,t$r),e(h4,a$r),e(h4,YK),e(YK,n$r),e(h4,s$r),e(ie,l$r),e(ie,p4),e(p4,UEe),e(UEe,i$r),e(p4,d$r),e(p4,KK),e(KK,c$r),e(p4,f$r),e(ie,m$r),e(ie,_4),e(_4,JEe),e(JEe,g$r),e(_4,h$r),e(_4,ZK),e(ZK,p$r),e(_4,_$r),e(ie,u$r),e(ie,u4),e(u4,YEe),e(YEe,b$r),e(u4,v$r),e(u4,eZ),e(eZ,F$r),e(u4,T$r),e(ie,M$r),e(ie,b4),e(b4,KEe),e(KEe,E$r),e(b4,C$r),e(b4,oZ),e(oZ,w$r),e(b4,A$r),e(Ir,L$r),M(v4,Ir,null),b(f,eHe,u),b(f,Sc,u),e(Sc,F4),e(F4,ZEe),M(i$,ZEe,null),e(Sc,y$r),e(Sc,e4e),e(e4e,x$r),b(f,oHe,u),b(f,dr,u),M(d$,dr,null),e(dr,$$r),e(dr,Rc),e(Rc,k$r),e(Rc,rZ),e(rZ,S$r),e(Rc,R$r),e(Rc,tZ),e(tZ,P$r),e(Rc,B$r),e(dr,I$r),e(dr,c$),e(c$,N$r),e(c$,o4e),e(o4e,q$r),e(c$,j$r),e(dr,D$r),e(dr,Gt),M(f$,Gt,null),e(Gt,G$r),e(Gt,r4e),e(r4e,O$r),e(Gt,V$r),e(Gt,Pc),e(Pc,X$r),e(Pc,t4e),e(t4e,z$r),e(Pc,W$r),e(Pc,aZ),e(aZ,Q$r),e(Pc,H$r),e(Gt,U$r),M(T4,Gt,null),e(dr,J$r),e(dr,Nr),M(m$,Nr,null),e(Nr,Y$r),e(Nr,a4e),e(a4e,K$r),e(Nr,Z$r),e(Nr,bn),e(bn,ekr),e(bn,n4e),e(n4e,okr),e(bn,rkr),e(bn,s4e),e(s4e,tkr),e(bn,akr),e(bn,l4e),e(l4e,nkr),e(bn,skr),e(Nr,lkr),e(Nr,ye),e(ye,M4),e(M4,i4e),e(i4e,ikr),e(M4,dkr),e(M4,nZ),e(nZ,ckr),e(M4,fkr),e(ye,mkr),e(ye,E4),e(E4,d4e),e(d4e,gkr),e(E4,hkr),e(E4,sZ),e(sZ,pkr),e(E4,_kr),e(ye,ukr),e(ye,C4),e(C4,c4e),e(c4e,bkr),e(C4,vkr),e(C4,lZ),e(lZ,Fkr),e(C4,Tkr),e(ye,Mkr),e(ye,w4),e(w4,f4e),e(f4e,Ekr),e(w4,Ckr),e(w4,iZ),e(iZ,wkr),e(w4,Akr),e(ye,Lkr),e(ye,A4),e(A4,m4e),e(m4e,ykr),e(A4,xkr),e(A4,dZ),e(dZ,$kr),e(A4,kkr),e(ye,Skr),e(ye,L4),e(L4,g4e),e(g4e,Rkr),e(L4,Pkr),e(L4,cZ),e(cZ,Bkr),e(L4,Ikr),e(ye,Nkr),e(ye,y4),e(y4,h4e),e(h4e,qkr),e(y4,jkr),e(y4,fZ),e(fZ,Dkr),e(y4,Gkr),e(ye,Okr),e(ye,x4),e(x4,p4e),e(p4e,Vkr),e(x4,Xkr),e(x4,mZ),e(mZ,zkr),e(x4,Wkr),e(ye,Qkr),e(ye,$4),e($4,_4e),e(_4e,Hkr),e($4,Ukr),e($4,gZ),e(gZ,Jkr),e($4,Ykr),e(ye,Kkr),e(ye,k4),e(k4,u4e),e(u4e,Zkr),e(k4,eSr),e(k4,hZ),e(hZ,oSr),e(k4,rSr),e(Nr,tSr),M(S4,Nr,null),b(f,rHe,u),b(f,Bc,u),e(Bc,R4),e(R4,b4e),M(g$,b4e,null),e(Bc,aSr),e(Bc,v4e),e(v4e,nSr),b(f,tHe,u),b(f,cr,u),M(h$,cr,null),e(cr,sSr),e(cr,Ic),e(Ic,lSr),e(Ic,pZ),e(pZ,iSr),e(Ic,dSr),e(Ic,_Z),e(_Z,cSr),e(Ic,fSr),e(cr,mSr),e(cr,p$),e(p$,gSr),e(p$,F4e),e(F4e,hSr),e(p$,pSr),e(cr,_Sr),e(cr,Ot),M(_$,Ot,null),e(Ot,uSr),e(Ot,T4e),e(T4e,bSr),e(Ot,vSr),e(Ot,Nc),e(Nc,FSr),e(Nc,M4e),e(M4e,TSr),e(Nc,MSr),e(Nc,uZ),e(uZ,ESr),e(Nc,CSr),e(Ot,wSr),M(P4,Ot,null),e(cr,ASr),e(cr,qr),M(u$,qr,null),e(qr,LSr),e(qr,E4e),e(E4e,ySr),e(qr,xSr),e(qr,vn),e(vn,$Sr),e(vn,C4e),e(C4e,kSr),e(vn,SSr),e(vn,w4e),e(w4e,RSr),e(vn,PSr),e(vn,A4e),e(A4e,BSr),e(vn,ISr),e(qr,NSr),e(qr,te),e(te,B4),e(B4,L4e),e(L4e,qSr),e(B4,jSr),e(B4,bZ),e(bZ,DSr),e(B4,GSr),e(te,OSr),e(te,I4),e(I4,y4e),e(y4e,VSr),e(I4,XSr),e(I4,vZ),e(vZ,zSr),e(I4,WSr),e(te,QSr),e(te,N4),e(N4,x4e),e(x4e,HSr),e(N4,USr),e(N4,FZ),e(FZ,JSr),e(N4,YSr),e(te,KSr),e(te,q4),e(q4,$4e),e($4e,ZSr),e(q4,eRr),e(q4,TZ),e(TZ,oRr),e(q4,rRr),e(te,tRr),e(te,j4),e(j4,k4e),e(k4e,aRr),e(j4,nRr),e(j4,MZ),e(MZ,sRr),e(j4,lRr),e(te,iRr),e(te,D4),e(D4,S4e),e(S4e,dRr),e(D4,cRr),e(D4,EZ),e(EZ,fRr),e(D4,mRr),e(te,gRr),e(te,G4),e(G4,R4e),e(R4e,hRr),e(G4,pRr),e(G4,CZ),e(CZ,_Rr),e(G4,uRr),e(te,bRr),e(te,O4),e(O4,P4e),e(P4e,vRr),e(O4,FRr),e(O4,wZ),e(wZ,TRr),e(O4,MRr),e(te,ERr),e(te,V4),e(V4,B4e),e(B4e,CRr),e(V4,wRr),e(V4,AZ),e(AZ,ARr),e(V4,LRr),e(te,yRr),e(te,X4),e(X4,I4e),e(I4e,xRr),e(X4,$Rr),e(X4,LZ),e(LZ,kRr),e(X4,SRr),e(te,RRr),e(te,z4),e(z4,N4e),e(N4e,PRr),e(z4,BRr),e(z4,yZ),e(yZ,IRr),e(z4,NRr),e(te,qRr),e(te,W4),e(W4,q4e),e(q4e,jRr),e(W4,DRr),e(W4,xZ),e(xZ,GRr),e(W4,ORr),e(te,VRr),e(te,Q4),e(Q4,j4e),e(j4e,XRr),e(Q4,zRr),e(Q4,$Z),e($Z,WRr),e(Q4,QRr),e(te,HRr),e(te,H4),e(H4,D4e),e(D4e,URr),e(H4,JRr),e(H4,kZ),e(kZ,YRr),e(H4,KRr),e(te,ZRr),e(te,U4),e(U4,G4e),e(G4e,ePr),e(U4,oPr),e(U4,SZ),e(SZ,rPr),e(U4,tPr),e(te,aPr),e(te,J4),e(J4,O4e),e(O4e,nPr),e(J4,sPr),e(J4,RZ),e(RZ,lPr),e(J4,iPr),e(te,dPr),e(te,Y4),e(Y4,V4e),e(V4e,cPr),e(Y4,fPr),e(Y4,PZ),e(PZ,mPr),e(Y4,gPr),e(te,hPr),e(te,K4),e(K4,X4e),e(X4e,pPr),e(K4,_Pr),e(K4,BZ),e(BZ,uPr),e(K4,bPr),e(te,vPr),e(te,Z4),e(Z4,z4e),e(z4e,FPr),e(Z4,TPr),e(Z4,IZ),e(IZ,MPr),e(Z4,EPr),e(te,CPr),e(te,eC),e(eC,W4e),e(W4e,wPr),e(eC,APr),e(eC,NZ),e(NZ,LPr),e(eC,yPr),e(te,xPr),e(te,oC),e(oC,Q4e),e(Q4e,$Pr),e(oC,kPr),e(oC,qZ),e(qZ,SPr),e(oC,RPr),e(te,PPr),e(te,rC),e(rC,H4e),e(H4e,BPr),e(rC,IPr),e(rC,jZ),e(jZ,NPr),e(rC,qPr),e(te,jPr),e(te,tC),e(tC,U4e),e(U4e,DPr),e(tC,GPr),e(tC,DZ),e(DZ,OPr),e(tC,VPr),e(te,XPr),e(te,aC),e(aC,J4e),e(J4e,zPr),e(aC,WPr),e(aC,GZ),e(GZ,QPr),e(aC,HPr),e(te,UPr),e(te,nC),e(nC,Y4e),e(Y4e,JPr),e(nC,YPr),e(nC,OZ),e(OZ,KPr),e(nC,ZPr),e(te,eBr),e(te,sC),e(sC,K4e),e(K4e,oBr),e(sC,rBr),e(sC,VZ),e(VZ,tBr),e(sC,aBr),e(qr,nBr),M(lC,qr,null),b(f,aHe,u),b(f,qc,u),e(qc,iC),e(iC,Z4e),M(b$,Z4e,null),e(qc,sBr),e(qc,eCe),e(eCe,lBr),b(f,nHe,u),b(f,fr,u),M(v$,fr,null),e(fr,iBr),e(fr,jc),e(jc,dBr),e(jc,XZ),e(XZ,cBr),e(jc,fBr),e(jc,zZ),e(zZ,mBr),e(jc,gBr),e(fr,hBr),e(fr,F$),e(F$,pBr),e(F$,oCe),e(oCe,_Br),e(F$,uBr),e(fr,bBr),e(fr,Vt),M(T$,Vt,null),e(Vt,vBr),e(Vt,rCe),e(rCe,FBr),e(Vt,TBr),e(Vt,Dc),e(Dc,MBr),e(Dc,tCe),e(tCe,EBr),e(Dc,CBr),e(Dc,WZ),e(WZ,wBr),e(Dc,ABr),e(Vt,LBr),M(dC,Vt,null),e(fr,yBr),e(fr,jr),M(M$,jr,null),e(jr,xBr),e(jr,aCe),e(aCe,$Br),e(jr,kBr),e(jr,Fn),e(Fn,SBr),e(Fn,nCe),e(nCe,RBr),e(Fn,PBr),e(Fn,sCe),e(sCe,BBr),e(Fn,IBr),e(Fn,lCe),e(lCe,NBr),e(Fn,qBr),e(jr,jBr),e(jr,ve),e(ve,cC),e(cC,iCe),e(iCe,DBr),e(cC,GBr),e(cC,QZ),e(QZ,OBr),e(cC,VBr),e(ve,XBr),e(ve,fC),e(fC,dCe),e(dCe,zBr),e(fC,WBr),e(fC,HZ),e(HZ,QBr),e(fC,HBr),e(ve,UBr),e(ve,mC),e(mC,cCe),e(cCe,JBr),e(mC,YBr),e(mC,UZ),e(UZ,KBr),e(mC,ZBr),e(ve,eIr),e(ve,gC),e(gC,fCe),e(fCe,oIr),e(gC,rIr),e(gC,JZ),e(JZ,tIr),e(gC,aIr),e(ve,nIr),e(ve,hC),e(hC,mCe),e(mCe,sIr),e(hC,lIr),e(hC,YZ),e(YZ,iIr),e(hC,dIr),e(ve,cIr),e(ve,pC),e(pC,gCe),e(gCe,fIr),e(pC,mIr),e(pC,KZ),e(KZ,gIr),e(pC,hIr),e(ve,pIr),e(ve,_C),e(_C,hCe),e(hCe,_Ir),e(_C,uIr),e(_C,ZZ),e(ZZ,bIr),e(_C,vIr),e(ve,FIr),e(ve,uC),e(uC,pCe),e(pCe,TIr),e(uC,MIr),e(uC,eee),e(eee,EIr),e(uC,CIr),e(ve,wIr),e(ve,bC),e(bC,_Ce),e(_Ce,AIr),e(bC,LIr),e(bC,oee),e(oee,yIr),e(bC,xIr),e(ve,$Ir),e(ve,vC),e(vC,uCe),e(uCe,kIr),e(vC,SIr),e(vC,ree),e(ree,RIr),e(vC,PIr),e(ve,BIr),e(ve,FC),e(FC,bCe),e(bCe,IIr),e(FC,NIr),e(FC,tee),e(tee,qIr),e(FC,jIr),e(ve,DIr),e(ve,TC),e(TC,vCe),e(vCe,GIr),e(TC,OIr),e(TC,aee),e(aee,VIr),e(TC,XIr),e(ve,zIr),e(ve,MC),e(MC,FCe),e(FCe,WIr),e(MC,QIr),e(MC,nee),e(nee,HIr),e(MC,UIr),e(ve,JIr),e(ve,EC),e(EC,TCe),e(TCe,YIr),e(EC,KIr),e(EC,see),e(see,ZIr),e(EC,eNr),e(ve,oNr),e(ve,CC),e(CC,MCe),e(MCe,rNr),e(CC,tNr),e(CC,lee),e(lee,aNr),e(CC,nNr),e(ve,sNr),e(ve,wC),e(wC,ECe),e(ECe,lNr),e(wC,iNr),e(wC,iee),e(iee,dNr),e(wC,cNr),e(ve,fNr),e(ve,AC),e(AC,CCe),e(CCe,mNr),e(AC,gNr),e(AC,dee),e(dee,hNr),e(AC,pNr),e(jr,_Nr),M(LC,jr,null),b(f,sHe,u),b(f,Gc,u),e(Gc,yC),e(yC,wCe),M(E$,wCe,null),e(Gc,uNr),e(Gc,ACe),e(ACe,bNr),b(f,lHe,u),b(f,mr,u),M(C$,mr,null),e(mr,vNr),e(mr,Oc),e(Oc,FNr),e(Oc,cee),e(cee,TNr),e(Oc,MNr),e(Oc,fee),e(fee,ENr),e(Oc,CNr),e(mr,wNr),e(mr,w$),e(w$,ANr),e(w$,LCe),e(LCe,LNr),e(w$,yNr),e(mr,xNr),e(mr,Xt),M(A$,Xt,null),e(Xt,$Nr),e(Xt,yCe),e(yCe,kNr),e(Xt,SNr),e(Xt,Vc),e(Vc,RNr),e(Vc,xCe),e(xCe,PNr),e(Vc,BNr),e(Vc,mee),e(mee,INr),e(Vc,NNr),e(Xt,qNr),M(xC,Xt,null),e(mr,jNr),e(mr,Dr),M(L$,Dr,null),e(Dr,DNr),e(Dr,$Ce),e($Ce,GNr),e(Dr,ONr),e(Dr,Tn),e(Tn,VNr),e(Tn,kCe),e(kCe,XNr),e(Tn,zNr),e(Tn,SCe),e(SCe,WNr),e(Tn,QNr),e(Tn,RCe),e(RCe,HNr),e(Tn,UNr),e(Dr,JNr),e(Dr,y$),e(y$,$C),e($C,PCe),e(PCe,YNr),e($C,KNr),e($C,gee),e(gee,ZNr),e($C,eqr),e(y$,oqr),e(y$,kC),e(kC,BCe),e(BCe,rqr),e(kC,tqr),e(kC,hee),e(hee,aqr),e(kC,nqr),e(Dr,sqr),M(SC,Dr,null),b(f,iHe,u),b(f,Xc,u),e(Xc,RC),e(RC,ICe),M(x$,ICe,null),e(Xc,lqr),e(Xc,NCe),e(NCe,iqr),b(f,dHe,u),b(f,gr,u),M($$,gr,null),e(gr,dqr),e(gr,zc),e(zc,cqr),e(zc,pee),e(pee,fqr),e(zc,mqr),e(zc,_ee),e(_ee,gqr),e(zc,hqr),e(gr,pqr),e(gr,k$),e(k$,_qr),e(k$,qCe),e(qCe,uqr),e(k$,bqr),e(gr,vqr),e(gr,zt),M(S$,zt,null),e(zt,Fqr),e(zt,jCe),e(jCe,Tqr),e(zt,Mqr),e(zt,Wc),e(Wc,Eqr),e(Wc,DCe),e(DCe,Cqr),e(Wc,wqr),e(Wc,uee),e(uee,Aqr),e(Wc,Lqr),e(zt,yqr),M(PC,zt,null),e(gr,xqr),e(gr,Gr),M(R$,Gr,null),e(Gr,$qr),e(Gr,GCe),e(GCe,kqr),e(Gr,Sqr),e(Gr,Mn),e(Mn,Rqr),e(Mn,OCe),e(OCe,Pqr),e(Mn,Bqr),e(Mn,VCe),e(VCe,Iqr),e(Mn,Nqr),e(Mn,XCe),e(XCe,qqr),e(Mn,jqr),e(Gr,Dqr),e(Gr,zCe),e(zCe,BC),e(BC,WCe),e(WCe,Gqr),e(BC,Oqr),e(BC,bee),e(bee,Vqr),e(BC,Xqr),e(Gr,zqr),M(IC,Gr,null),b(f,cHe,u),b(f,Qc,u),e(Qc,NC),e(NC,QCe),M(P$,QCe,null),e(Qc,Wqr),e(Qc,HCe),e(HCe,Qqr),b(f,fHe,u),b(f,hr,u),M(B$,hr,null),e(hr,Hqr),e(hr,Hc),e(Hc,Uqr),e(Hc,vee),e(vee,Jqr),e(Hc,Yqr),e(Hc,Fee),e(Fee,Kqr),e(Hc,Zqr),e(hr,ejr),e(hr,I$),e(I$,ojr),e(I$,UCe),e(UCe,rjr),e(I$,tjr),e(hr,ajr),e(hr,Wt),M(N$,Wt,null),e(Wt,njr),e(Wt,JCe),e(JCe,sjr),e(Wt,ljr),e(Wt,Uc),e(Uc,ijr),e(Uc,YCe),e(YCe,djr),e(Uc,cjr),e(Uc,Tee),e(Tee,fjr),e(Uc,mjr),e(Wt,gjr),M(qC,Wt,null),e(hr,hjr),e(hr,Or),M(q$,Or,null),e(Or,pjr),e(Or,KCe),e(KCe,_jr),e(Or,ujr),e(Or,En),e(En,bjr),e(En,ZCe),e(ZCe,vjr),e(En,Fjr),e(En,e3e),e(e3e,Tjr),e(En,Mjr),e(En,o3e),e(o3e,Ejr),e(En,Cjr),e(Or,wjr),e(Or,de),e(de,jC),e(jC,r3e),e(r3e,Ajr),e(jC,Ljr),e(jC,Mee),e(Mee,yjr),e(jC,xjr),e(de,$jr),e(de,DC),e(DC,t3e),e(t3e,kjr),e(DC,Sjr),e(DC,Eee),e(Eee,Rjr),e(DC,Pjr),e(de,Bjr),e(de,GC),e(GC,a3e),e(a3e,Ijr),e(GC,Njr),e(GC,Cee),e(Cee,qjr),e(GC,jjr),e(de,Djr),e(de,OC),e(OC,n3e),e(n3e,Gjr),e(OC,Ojr),e(OC,wee),e(wee,Vjr),e(OC,Xjr),e(de,zjr),e(de,VC),e(VC,s3e),e(s3e,Wjr),e(VC,Qjr),e(VC,Aee),e(Aee,Hjr),e(VC,Ujr),e(de,Jjr),e(de,XC),e(XC,l3e),e(l3e,Yjr),e(XC,Kjr),e(XC,Lee),e(Lee,Zjr),e(XC,eDr),e(de,oDr),e(de,zC),e(zC,i3e),e(i3e,rDr),e(zC,tDr),e(zC,yee),e(yee,aDr),e(zC,nDr),e(de,sDr),e(de,WC),e(WC,d3e),e(d3e,lDr),e(WC,iDr),e(WC,xee),e(xee,dDr),e(WC,cDr),e(de,fDr),e(de,QC),e(QC,c3e),e(c3e,mDr),e(QC,gDr),e(QC,$ee),e($ee,hDr),e(QC,pDr),e(de,_Dr),e(de,HC),e(HC,f3e),e(f3e,uDr),e(HC,bDr),e(HC,kee),e(kee,vDr),e(HC,FDr),e(de,TDr),e(de,UC),e(UC,m3e),e(m3e,MDr),e(UC,EDr),e(UC,See),e(See,CDr),e(UC,wDr),e(de,ADr),e(de,JC),e(JC,g3e),e(g3e,LDr),e(JC,yDr),e(JC,Ree),e(Ree,xDr),e(JC,$Dr),e(de,kDr),e(de,YC),e(YC,h3e),e(h3e,SDr),e(YC,RDr),e(YC,Pee),e(Pee,PDr),e(YC,BDr),e(de,IDr),e(de,KC),e(KC,p3e),e(p3e,NDr),e(KC,qDr),e(KC,Bee),e(Bee,jDr),e(KC,DDr),e(de,GDr),e(de,ZC),e(ZC,_3e),e(_3e,ODr),e(ZC,VDr),e(ZC,Iee),e(Iee,XDr),e(ZC,zDr),e(de,WDr),e(de,e3),e(e3,u3e),e(u3e,QDr),e(e3,HDr),e(e3,Nee),e(Nee,UDr),e(e3,JDr),e(de,YDr),e(de,o3),e(o3,b3e),e(b3e,KDr),e(o3,ZDr),e(o3,qee),e(qee,eGr),e(o3,oGr),e(de,rGr),e(de,r3),e(r3,v3e),e(v3e,tGr),e(r3,aGr),e(r3,jee),e(jee,nGr),e(r3,sGr),e(de,lGr),e(de,t3),e(t3,F3e),e(F3e,iGr),e(t3,dGr),e(t3,Dee),e(Dee,cGr),e(t3,fGr),e(de,mGr),e(de,a3),e(a3,T3e),e(T3e,gGr),e(a3,hGr),e(a3,Gee),e(Gee,pGr),e(a3,_Gr),e(Or,uGr),M(n3,Or,null),b(f,mHe,u),b(f,Jc,u),e(Jc,s3),e(s3,M3e),M(j$,M3e,null),e(Jc,bGr),e(Jc,E3e),e(E3e,vGr),b(f,gHe,u),b(f,pr,u),M(D$,pr,null),e(pr,FGr),e(pr,Yc),e(Yc,TGr),e(Yc,Oee),e(Oee,MGr),e(Yc,EGr),e(Yc,Vee),e(Vee,CGr),e(Yc,wGr),e(pr,AGr),e(pr,G$),e(G$,LGr),e(G$,C3e),e(C3e,yGr),e(G$,xGr),e(pr,$Gr),e(pr,Qt),M(O$,Qt,null),e(Qt,kGr),e(Qt,w3e),e(w3e,SGr),e(Qt,RGr),e(Qt,Kc),e(Kc,PGr),e(Kc,A3e),e(A3e,BGr),e(Kc,IGr),e(Kc,Xee),e(Xee,NGr),e(Kc,qGr),e(Qt,jGr),M(l3,Qt,null),e(pr,DGr),e(pr,Vr),M(V$,Vr,null),e(Vr,GGr),e(Vr,L3e),e(L3e,OGr),e(Vr,VGr),e(Vr,Cn),e(Cn,XGr),e(Cn,y3e),e(y3e,zGr),e(Cn,WGr),e(Cn,x3e),e(x3e,QGr),e(Cn,HGr),e(Cn,$3e),e($3e,UGr),e(Cn,JGr),e(Vr,YGr),e(Vr,ce),e(ce,i3),e(i3,k3e),e(k3e,KGr),e(i3,ZGr),e(i3,zee),e(zee,eOr),e(i3,oOr),e(ce,rOr),e(ce,d3),e(d3,S3e),e(S3e,tOr),e(d3,aOr),e(d3,Wee),e(Wee,nOr),e(d3,sOr),e(ce,lOr),e(ce,c3),e(c3,R3e),e(R3e,iOr),e(c3,dOr),e(c3,Qee),e(Qee,cOr),e(c3,fOr),e(ce,mOr),e(ce,f3),e(f3,P3e),e(P3e,gOr),e(f3,hOr),e(f3,Hee),e(Hee,pOr),e(f3,_Or),e(ce,uOr),e(ce,m3),e(m3,B3e),e(B3e,bOr),e(m3,vOr),e(m3,Uee),e(Uee,FOr),e(m3,TOr),e(ce,MOr),e(ce,g3),e(g3,I3e),e(I3e,EOr),e(g3,COr),e(g3,Jee),e(Jee,wOr),e(g3,AOr),e(ce,LOr),e(ce,h3),e(h3,N3e),e(N3e,yOr),e(h3,xOr),e(h3,Yee),e(Yee,$Or),e(h3,kOr),e(ce,SOr),e(ce,p3),e(p3,q3e),e(q3e,ROr),e(p3,POr),e(p3,Kee),e(Kee,BOr),e(p3,IOr),e(ce,NOr),e(ce,_3),e(_3,j3e),e(j3e,qOr),e(_3,jOr),e(_3,Zee),e(Zee,DOr),e(_3,GOr),e(ce,OOr),e(ce,u3),e(u3,D3e),e(D3e,VOr),e(u3,XOr),e(u3,eoe),e(eoe,zOr),e(u3,WOr),e(ce,QOr),e(ce,b3),e(b3,G3e),e(G3e,HOr),e(b3,UOr),e(b3,ooe),e(ooe,JOr),e(b3,YOr),e(ce,KOr),e(ce,v3),e(v3,O3e),e(O3e,ZOr),e(v3,eVr),e(v3,roe),e(roe,oVr),e(v3,rVr),e(ce,tVr),e(ce,F3),e(F3,V3e),e(V3e,aVr),e(F3,nVr),e(F3,toe),e(toe,sVr),e(F3,lVr),e(ce,iVr),e(ce,T3),e(T3,X3e),e(X3e,dVr),e(T3,cVr),e(T3,aoe),e(aoe,fVr),e(T3,mVr),e(ce,gVr),e(ce,M3),e(M3,z3e),e(z3e,hVr),e(M3,pVr),e(M3,noe),e(noe,_Vr),e(M3,uVr),e(ce,bVr),e(ce,E3),e(E3,W3e),e(W3e,vVr),e(E3,FVr),e(E3,soe),e(soe,TVr),e(E3,MVr),e(ce,EVr),e(ce,C3),e(C3,Q3e),e(Q3e,CVr),e(C3,wVr),e(C3,loe),e(loe,AVr),e(C3,LVr),e(ce,yVr),e(ce,w3),e(w3,H3e),e(H3e,xVr),e(w3,$Vr),e(w3,ioe),e(ioe,kVr),e(w3,SVr),e(ce,RVr),e(ce,A3),e(A3,U3e),e(U3e,PVr),e(A3,BVr),e(A3,doe),e(doe,IVr),e(A3,NVr),e(ce,qVr),e(ce,L3),e(L3,J3e),e(J3e,jVr),e(L3,DVr),e(L3,coe),e(coe,GVr),e(L3,OVr),e(Vr,VVr),M(y3,Vr,null),b(f,hHe,u),b(f,Zc,u),e(Zc,x3),e(x3,Y3e),M(X$,Y3e,null),e(Zc,XVr),e(Zc,K3e),e(K3e,zVr),b(f,pHe,u),b(f,_r,u),M(z$,_r,null),e(_r,WVr),e(_r,ef),e(ef,QVr),e(ef,foe),e(foe,HVr),e(ef,UVr),e(ef,moe),e(moe,JVr),e(ef,YVr),e(_r,KVr),e(_r,W$),e(W$,ZVr),e(W$,Z3e),e(Z3e,eXr),e(W$,oXr),e(_r,rXr),e(_r,Ht),M(Q$,Ht,null),e(Ht,tXr),e(Ht,e0e),e(e0e,aXr),e(Ht,nXr),e(Ht,of),e(of,sXr),e(of,o0e),e(o0e,lXr),e(of,iXr),e(of,goe),e(goe,dXr),e(of,cXr),e(Ht,fXr),M($3,Ht,null),e(_r,mXr),e(_r,Xr),M(H$,Xr,null),e(Xr,gXr),e(Xr,r0e),e(r0e,hXr),e(Xr,pXr),e(Xr,wn),e(wn,_Xr),e(wn,t0e),e(t0e,uXr),e(wn,bXr),e(wn,a0e),e(a0e,vXr),e(wn,FXr),e(wn,n0e),e(n0e,TXr),e(wn,MXr),e(Xr,EXr),e(Xr,s0e),e(s0e,k3),e(k3,l0e),e(l0e,CXr),e(k3,wXr),e(k3,hoe),e(hoe,AXr),e(k3,LXr),e(Xr,yXr),M(S3,Xr,null),b(f,_He,u),b(f,rf,u),e(rf,R3),e(R3,i0e),M(U$,i0e,null),e(rf,xXr),e(rf,d0e),e(d0e,$Xr),b(f,uHe,u),b(f,ur,u),M(J$,ur,null),e(ur,kXr),e(ur,tf),e(tf,SXr),e(tf,poe),e(poe,RXr),e(tf,PXr),e(tf,_oe),e(_oe,BXr),e(tf,IXr),e(ur,NXr),e(ur,Y$),e(Y$,qXr),e(Y$,c0e),e(c0e,jXr),e(Y$,DXr),e(ur,GXr),e(ur,Ut),M(K$,Ut,null),e(Ut,OXr),e(Ut,f0e),e(f0e,VXr),e(Ut,XXr),e(Ut,af),e(af,zXr),e(af,m0e),e(m0e,WXr),e(af,QXr),e(af,uoe),e(uoe,HXr),e(af,UXr),e(Ut,JXr),M(P3,Ut,null),e(ur,YXr),e(ur,zr),M(Z$,zr,null),e(zr,KXr),e(zr,g0e),e(g0e,ZXr),e(zr,ezr),e(zr,An),e(An,ozr),e(An,h0e),e(h0e,rzr),e(An,tzr),e(An,p0e),e(p0e,azr),e(An,nzr),e(An,_0e),e(_0e,szr),e(An,lzr),e(zr,izr),e(zr,u0e),e(u0e,B3),e(B3,b0e),e(b0e,dzr),e(B3,czr),e(B3,boe),e(boe,fzr),e(B3,mzr),e(zr,gzr),M(I3,zr,null),b(f,bHe,u),b(f,nf,u),e(nf,N3),e(N3,v0e),M(ek,v0e,null),e(nf,hzr),e(nf,F0e),e(F0e,pzr),b(f,vHe,u),b(f,br,u),M(ok,br,null),e(br,_zr),e(br,sf),e(sf,uzr),e(sf,voe),e(voe,bzr),e(sf,vzr),e(sf,Foe),e(Foe,Fzr),e(sf,Tzr),e(br,Mzr),e(br,rk),e(rk,Ezr),e(rk,T0e),e(T0e,Czr),e(rk,wzr),e(br,Azr),e(br,Jt),M(tk,Jt,null),e(Jt,Lzr),e(Jt,M0e),e(M0e,yzr),e(Jt,xzr),e(Jt,lf),e(lf,$zr),e(lf,E0e),e(E0e,kzr),e(lf,Szr),e(lf,Toe),e(Toe,Rzr),e(lf,Pzr),e(Jt,Bzr),M(q3,Jt,null),e(br,Izr),e(br,Wr),M(ak,Wr,null),e(Wr,Nzr),e(Wr,C0e),e(C0e,qzr),e(Wr,jzr),e(Wr,Ln),e(Ln,Dzr),e(Ln,w0e),e(w0e,Gzr),e(Ln,Ozr),e(Ln,A0e),e(A0e,Vzr),e(Ln,Xzr),e(Ln,L0e),e(L0e,zzr),e(Ln,Wzr),e(Wr,Qzr),e(Wr,oe),e(oe,j3),e(j3,y0e),e(y0e,Hzr),e(j3,Uzr),e(j3,Moe),e(Moe,Jzr),e(j3,Yzr),e(oe,Kzr),e(oe,D3),e(D3,x0e),e(x0e,Zzr),e(D3,eWr),e(D3,Eoe),e(Eoe,oWr),e(D3,rWr),e(oe,tWr),e(oe,G3),e(G3,$0e),e($0e,aWr),e(G3,nWr),e(G3,Coe),e(Coe,sWr),e(G3,lWr),e(oe,iWr),e(oe,O3),e(O3,k0e),e(k0e,dWr),e(O3,cWr),e(O3,woe),e(woe,fWr),e(O3,mWr),e(oe,gWr),e(oe,V3),e(V3,S0e),e(S0e,hWr),e(V3,pWr),e(V3,Aoe),e(Aoe,_Wr),e(V3,uWr),e(oe,bWr),e(oe,X3),e(X3,R0e),e(R0e,vWr),e(X3,FWr),e(X3,Loe),e(Loe,TWr),e(X3,MWr),e(oe,EWr),e(oe,z3),e(z3,P0e),e(P0e,CWr),e(z3,wWr),e(z3,yoe),e(yoe,AWr),e(z3,LWr),e(oe,yWr),e(oe,W3),e(W3,B0e),e(B0e,xWr),e(W3,$Wr),e(W3,xoe),e(xoe,kWr),e(W3,SWr),e(oe,RWr),e(oe,Q3),e(Q3,I0e),e(I0e,PWr),e(Q3,BWr),e(Q3,$oe),e($oe,IWr),e(Q3,NWr),e(oe,qWr),e(oe,H3),e(H3,N0e),e(N0e,jWr),e(H3,DWr),e(H3,koe),e(koe,GWr),e(H3,OWr),e(oe,VWr),e(oe,U3),e(U3,q0e),e(q0e,XWr),e(U3,zWr),e(U3,Soe),e(Soe,WWr),e(U3,QWr),e(oe,HWr),e(oe,J3),e(J3,j0e),e(j0e,UWr),e(J3,JWr),e(J3,Roe),e(Roe,YWr),e(J3,KWr),e(oe,ZWr),e(oe,Y3),e(Y3,D0e),e(D0e,eQr),e(Y3,oQr),e(Y3,Poe),e(Poe,rQr),e(Y3,tQr),e(oe,aQr),e(oe,K3),e(K3,G0e),e(G0e,nQr),e(K3,sQr),e(K3,Boe),e(Boe,lQr),e(K3,iQr),e(oe,dQr),e(oe,Z3),e(Z3,O0e),e(O0e,cQr),e(Z3,fQr),e(Z3,Ioe),e(Ioe,mQr),e(Z3,gQr),e(oe,hQr),e(oe,e0),e(e0,V0e),e(V0e,pQr),e(e0,_Qr),e(e0,Noe),e(Noe,uQr),e(e0,bQr),e(oe,vQr),e(oe,o0),e(o0,X0e),e(X0e,FQr),e(o0,TQr),e(o0,qoe),e(qoe,MQr),e(o0,EQr),e(oe,CQr),e(oe,r0),e(r0,z0e),e(z0e,wQr),e(r0,AQr),e(r0,joe),e(joe,LQr),e(r0,yQr),e(oe,xQr),e(oe,t0),e(t0,W0e),e(W0e,$Qr),e(t0,kQr),e(t0,Doe),e(Doe,SQr),e(t0,RQr),e(oe,PQr),e(oe,a0),e(a0,Q0e),e(Q0e,BQr),e(a0,IQr),e(a0,Goe),e(Goe,NQr),e(a0,qQr),e(oe,jQr),e(oe,n0),e(n0,H0e),e(H0e,DQr),e(n0,GQr),e(n0,Ooe),e(Ooe,OQr),e(n0,VQr),e(oe,XQr),e(oe,s0),e(s0,U0e),e(U0e,zQr),e(s0,WQr),e(s0,Voe),e(Voe,QQr),e(s0,HQr),e(oe,UQr),e(oe,l0),e(l0,J0e),e(J0e,JQr),e(l0,YQr),e(l0,Xoe),e(Xoe,KQr),e(l0,ZQr),e(oe,eHr),e(oe,i0),e(i0,Y0e),e(Y0e,oHr),e(i0,rHr),e(i0,zoe),e(zoe,tHr),e(i0,aHr),e(oe,nHr),e(oe,d0),e(d0,K0e),e(K0e,sHr),e(d0,lHr),e(d0,Woe),e(Woe,iHr),e(d0,dHr),e(oe,cHr),e(oe,c0),e(c0,Z0e),e(Z0e,fHr),e(c0,mHr),e(c0,Qoe),e(Qoe,gHr),e(c0,hHr),e(oe,pHr),e(oe,f0),e(f0,ewe),e(ewe,_Hr),e(f0,uHr),e(f0,Hoe),e(Hoe,bHr),e(f0,vHr),e(Wr,FHr),M(m0,Wr,null),b(f,FHe,u),b(f,df,u),e(df,g0),e(g0,owe),M(nk,owe,null),e(df,THr),e(df,rwe),e(rwe,MHr),b(f,THe,u),b(f,vr,u),M(sk,vr,null),e(vr,EHr),e(vr,cf),e(cf,CHr),e(cf,Uoe),e(Uoe,wHr),e(cf,AHr),e(cf,Joe),e(Joe,LHr),e(cf,yHr),e(vr,xHr),e(vr,lk),e(lk,$Hr),e(lk,twe),e(twe,kHr),e(lk,SHr),e(vr,RHr),e(vr,Yt),M(ik,Yt,null),e(Yt,PHr),e(Yt,awe),e(awe,BHr),e(Yt,IHr),e(Yt,ff),e(ff,NHr),e(ff,nwe),e(nwe,qHr),e(ff,jHr),e(ff,Yoe),e(Yoe,DHr),e(ff,GHr),e(Yt,OHr),M(h0,Yt,null),e(vr,VHr),e(vr,Qr),M(dk,Qr,null),e(Qr,XHr),e(Qr,swe),e(swe,zHr),e(Qr,WHr),e(Qr,yn),e(yn,QHr),e(yn,lwe),e(lwe,HHr),e(yn,UHr),e(yn,iwe),e(iwe,JHr),e(yn,YHr),e(yn,dwe),e(dwe,KHr),e(yn,ZHr),e(Qr,eUr),e(Qr,xe),e(xe,p0),e(p0,cwe),e(cwe,oUr),e(p0,rUr),e(p0,Koe),e(Koe,tUr),e(p0,aUr),e(xe,nUr),e(xe,_0),e(_0,fwe),e(fwe,sUr),e(_0,lUr),e(_0,Zoe),e(Zoe,iUr),e(_0,dUr),e(xe,cUr),e(xe,u0),e(u0,mwe),e(mwe,fUr),e(u0,mUr),e(u0,ere),e(ere,gUr),e(u0,hUr),e(xe,pUr),e(xe,b0),e(b0,gwe),e(gwe,_Ur),e(b0,uUr),e(b0,ore),e(ore,bUr),e(b0,vUr),e(xe,FUr),e(xe,v0),e(v0,hwe),e(hwe,TUr),e(v0,MUr),e(v0,rre),e(rre,EUr),e(v0,CUr),e(xe,wUr),e(xe,F0),e(F0,pwe),e(pwe,AUr),e(F0,LUr),e(F0,tre),e(tre,yUr),e(F0,xUr),e(xe,$Ur),e(xe,T0),e(T0,_we),e(_we,kUr),e(T0,SUr),e(T0,are),e(are,RUr),e(T0,PUr),e(xe,BUr),e(xe,M0),e(M0,uwe),e(uwe,IUr),e(M0,NUr),e(M0,nre),e(nre,qUr),e(M0,jUr),e(xe,DUr),e(xe,E0),e(E0,bwe),e(bwe,GUr),e(E0,OUr),e(E0,sre),e(sre,VUr),e(E0,XUr),e(xe,zUr),e(xe,C0),e(C0,vwe),e(vwe,WUr),e(C0,QUr),e(C0,lre),e(lre,HUr),e(C0,UUr),e(Qr,JUr),M(w0,Qr,null),b(f,MHe,u),b(f,mf,u),e(mf,A0),e(A0,Fwe),M(ck,Fwe,null),e(mf,YUr),e(mf,Twe),e(Twe,KUr),b(f,EHe,u),b(f,Fr,u),M(fk,Fr,null),e(Fr,ZUr),e(Fr,gf),e(gf,eJr),e(gf,ire),e(ire,oJr),e(gf,rJr),e(gf,dre),e(dre,tJr),e(gf,aJr),e(Fr,nJr),e(Fr,mk),e(mk,sJr),e(mk,Mwe),e(Mwe,lJr),e(mk,iJr),e(Fr,dJr),e(Fr,Kt),M(gk,Kt,null),e(Kt,cJr),e(Kt,Ewe),e(Ewe,fJr),e(Kt,mJr),e(Kt,hf),e(hf,gJr),e(hf,Cwe),e(Cwe,hJr),e(hf,pJr),e(hf,cre),e(cre,_Jr),e(hf,uJr),e(Kt,bJr),M(L0,Kt,null),e(Fr,vJr),e(Fr,Hr),M(hk,Hr,null),e(Hr,FJr),e(Hr,wwe),e(wwe,TJr),e(Hr,MJr),e(Hr,xn),e(xn,EJr),e(xn,Awe),e(Awe,CJr),e(xn,wJr),e(xn,Lwe),e(Lwe,AJr),e(xn,LJr),e(xn,ywe),e(ywe,yJr),e(xn,xJr),e(Hr,$Jr),e(Hr,Ee),e(Ee,y0),e(y0,xwe),e(xwe,kJr),e(y0,SJr),e(y0,fre),e(fre,RJr),e(y0,PJr),e(Ee,BJr),e(Ee,x0),e(x0,$we),e($we,IJr),e(x0,NJr),e(x0,mre),e(mre,qJr),e(x0,jJr),e(Ee,DJr),e(Ee,$0),e($0,kwe),e(kwe,GJr),e($0,OJr),e($0,gre),e(gre,VJr),e($0,XJr),e(Ee,zJr),e(Ee,k0),e(k0,Swe),e(Swe,WJr),e(k0,QJr),e(k0,hre),e(hre,HJr),e(k0,UJr),e(Ee,JJr),e(Ee,S0),e(S0,Rwe),e(Rwe,YJr),e(S0,KJr),e(S0,pre),e(pre,ZJr),e(S0,eYr),e(Ee,oYr),e(Ee,R0),e(R0,Pwe),e(Pwe,rYr),e(R0,tYr),e(R0,_re),e(_re,aYr),e(R0,nYr),e(Ee,sYr),e(Ee,P0),e(P0,Bwe),e(Bwe,lYr),e(P0,iYr),e(P0,ure),e(ure,dYr),e(P0,cYr),e(Ee,fYr),e(Ee,B0),e(B0,Iwe),e(Iwe,mYr),e(B0,gYr),e(B0,bre),e(bre,hYr),e(B0,pYr),e(Ee,_Yr),e(Ee,I0),e(I0,Nwe),e(Nwe,uYr),e(I0,bYr),e(I0,vre),e(vre,vYr),e(I0,FYr),e(Ee,TYr),e(Ee,N0),e(N0,qwe),e(qwe,MYr),e(N0,EYr),e(N0,Fre),e(Fre,CYr),e(N0,wYr),e(Ee,AYr),e(Ee,q0),e(q0,jwe),e(jwe,LYr),e(q0,yYr),e(q0,Tre),e(Tre,xYr),e(q0,$Yr),e(Ee,kYr),e(Ee,j0),e(j0,Dwe),e(Dwe,SYr),e(j0,RYr),e(j0,Mre),e(Mre,PYr),e(j0,BYr),e(Ee,IYr),e(Ee,D0),e(D0,Gwe),e(Gwe,NYr),e(D0,qYr),e(D0,Ere),e(Ere,jYr),e(D0,DYr),e(Hr,GYr),M(G0,Hr,null),b(f,CHe,u),b(f,pf,u),e(pf,O0),e(O0,Owe),M(pk,Owe,null),e(pf,OYr),e(pf,Vwe),e(Vwe,VYr),b(f,wHe,u),b(f,Tr,u),M(_k,Tr,null),e(Tr,XYr),e(Tr,_f),e(_f,zYr),e(_f,Cre),e(Cre,WYr),e(_f,QYr),e(_f,wre),e(wre,HYr),e(_f,UYr),e(Tr,JYr),e(Tr,uk),e(uk,YYr),e(uk,Xwe),e(Xwe,KYr),e(uk,ZYr),e(Tr,eKr),e(Tr,Zt),M(bk,Zt,null),e(Zt,oKr),e(Zt,zwe),e(zwe,rKr),e(Zt,tKr),e(Zt,uf),e(uf,aKr),e(uf,Wwe),e(Wwe,nKr),e(uf,sKr),e(uf,Are),e(Are,lKr),e(uf,iKr),e(Zt,dKr),M(V0,Zt,null),e(Tr,cKr),e(Tr,Ur),M(vk,Ur,null),e(Ur,fKr),e(Ur,Qwe),e(Qwe,mKr),e(Ur,gKr),e(Ur,$n),e($n,hKr),e($n,Hwe),e(Hwe,pKr),e($n,_Kr),e($n,Uwe),e(Uwe,uKr),e($n,bKr),e($n,Jwe),e(Jwe,vKr),e($n,FKr),e(Ur,TKr),e(Ur,$e),e($e,X0),e(X0,Ywe),e(Ywe,MKr),e(X0,EKr),e(X0,Lre),e(Lre,CKr),e(X0,wKr),e($e,AKr),e($e,z0),e(z0,Kwe),e(Kwe,LKr),e(z0,yKr),e(z0,yre),e(yre,xKr),e(z0,$Kr),e($e,kKr),e($e,W0),e(W0,Zwe),e(Zwe,SKr),e(W0,RKr),e(W0,xre),e(xre,PKr),e(W0,BKr),e($e,IKr),e($e,Q0),e(Q0,e6e),e(e6e,NKr),e(Q0,qKr),e(Q0,$re),e($re,jKr),e(Q0,DKr),e($e,GKr),e($e,H0),e(H0,o6e),e(o6e,OKr),e(H0,VKr),e(H0,kre),e(kre,XKr),e(H0,zKr),e($e,WKr),e($e,U0),e(U0,r6e),e(r6e,QKr),e(U0,HKr),e(U0,Sre),e(Sre,UKr),e(U0,JKr),e($e,YKr),e($e,J0),e(J0,t6e),e(t6e,KKr),e(J0,ZKr),e(J0,Rre),e(Rre,eZr),e(J0,oZr),e($e,rZr),e($e,Y0),e(Y0,a6e),e(a6e,tZr),e(Y0,aZr),e(Y0,Pre),e(Pre,nZr),e(Y0,sZr),e($e,lZr),e($e,K0),e(K0,n6e),e(n6e,iZr),e(K0,dZr),e(K0,Bre),e(Bre,cZr),e(K0,fZr),e($e,mZr),e($e,Z0),e(Z0,s6e),e(s6e,gZr),e(Z0,hZr),e(Z0,Ire),e(Ire,pZr),e(Z0,_Zr),e(Ur,uZr),M(ew,Ur,null),b(f,AHe,u),b(f,bf,u),e(bf,ow),e(ow,l6e),M(Fk,l6e,null),e(bf,bZr),e(bf,i6e),e(i6e,vZr),b(f,LHe,u),b(f,Mr,u),M(Tk,Mr,null),e(Mr,FZr),e(Mr,vf),e(vf,TZr),e(vf,Nre),e(Nre,MZr),e(vf,EZr),e(vf,qre),e(qre,CZr),e(vf,wZr),e(Mr,AZr),e(Mr,Mk),e(Mk,LZr),e(Mk,d6e),e(d6e,yZr),e(Mk,xZr),e(Mr,$Zr),e(Mr,ea),M(Ek,ea,null),e(ea,kZr),e(ea,c6e),e(c6e,SZr),e(ea,RZr),e(ea,Ff),e(Ff,PZr),e(Ff,f6e),e(f6e,BZr),e(Ff,IZr),e(Ff,jre),e(jre,NZr),e(Ff,qZr),e(ea,jZr),M(rw,ea,null),e(Mr,DZr),e(Mr,Jr),M(Ck,Jr,null),e(Jr,GZr),e(Jr,m6e),e(m6e,OZr),e(Jr,VZr),e(Jr,kn),e(kn,XZr),e(kn,g6e),e(g6e,zZr),e(kn,WZr),e(kn,h6e),e(h6e,QZr),e(kn,HZr),e(kn,p6e),e(p6e,UZr),e(kn,JZr),e(Jr,YZr),e(Jr,ke),e(ke,tw),e(tw,_6e),e(_6e,KZr),e(tw,ZZr),e(tw,Dre),e(Dre,eet),e(tw,oet),e(ke,ret),e(ke,aw),e(aw,u6e),e(u6e,tet),e(aw,aet),e(aw,Gre),e(Gre,net),e(aw,set),e(ke,iet),e(ke,nw),e(nw,b6e),e(b6e,det),e(nw,cet),e(nw,Ore),e(Ore,fet),e(nw,met),e(ke,get),e(ke,sw),e(sw,v6e),e(v6e,het),e(sw,pet),e(sw,Vre),e(Vre,_et),e(sw,uet),e(ke,bet),e(ke,lw),e(lw,F6e),e(F6e,vet),e(lw,Fet),e(lw,Xre),e(Xre,Tet),e(lw,Met),e(ke,Eet),e(ke,iw),e(iw,T6e),e(T6e,Cet),e(iw,wet),e(iw,zre),e(zre,Aet),e(iw,Let),e(ke,yet),e(ke,dw),e(dw,M6e),e(M6e,xet),e(dw,$et),e(dw,Wre),e(Wre,ket),e(dw,Set),e(ke,Ret),e(ke,cw),e(cw,E6e),e(E6e,Pet),e(cw,Bet),e(cw,Qre),e(Qre,Iet),e(cw,Net),e(ke,qet),e(ke,fw),e(fw,C6e),e(C6e,jet),e(fw,Det),e(fw,Hre),e(Hre,Get),e(fw,Oet),e(ke,Vet),e(ke,mw),e(mw,w6e),e(w6e,Xet),e(mw,zet),e(mw,Ure),e(Ure,Wet),e(mw,Qet),e(Jr,Het),M(gw,Jr,null),b(f,yHe,u),b(f,Tf,u),e(Tf,hw),e(hw,A6e),M(wk,A6e,null),e(Tf,Uet),e(Tf,L6e),e(L6e,Jet),b(f,xHe,u),b(f,Er,u),M(Ak,Er,null),e(Er,Yet),e(Er,Mf),e(Mf,Ket),e(Mf,Jre),e(Jre,Zet),e(Mf,eot),e(Mf,Yre),e(Yre,oot),e(Mf,rot),e(Er,tot),e(Er,Lk),e(Lk,aot),e(Lk,y6e),e(y6e,not),e(Lk,sot),e(Er,lot),e(Er,oa),M(yk,oa,null),e(oa,iot),e(oa,x6e),e(x6e,dot),e(oa,cot),e(oa,Ef),e(Ef,fot),e(Ef,$6e),e($6e,mot),e(Ef,got),e(Ef,Kre),e(Kre,hot),e(Ef,pot),e(oa,_ot),M(pw,oa,null),e(Er,uot),e(Er,Yr),M(xk,Yr,null),e(Yr,bot),e(Yr,k6e),e(k6e,vot),e(Yr,Fot),e(Yr,Sn),e(Sn,Tot),e(Sn,S6e),e(S6e,Mot),e(Sn,Eot),e(Sn,R6e),e(R6e,Cot),e(Sn,wot),e(Sn,P6e),e(P6e,Aot),e(Sn,Lot),e(Yr,yot),e(Yr,Se),e(Se,_w),e(_w,B6e),e(B6e,xot),e(_w,$ot),e(_w,Zre),e(Zre,kot),e(_w,Sot),e(Se,Rot),e(Se,uw),e(uw,I6e),e(I6e,Pot),e(uw,Bot),e(uw,ete),e(ete,Iot),e(uw,Not),e(Se,qot),e(Se,bw),e(bw,N6e),e(N6e,jot),e(bw,Dot),e(bw,ote),e(ote,Got),e(bw,Oot),e(Se,Vot),e(Se,vw),e(vw,q6e),e(q6e,Xot),e(vw,zot),e(vw,rte),e(rte,Wot),e(vw,Qot),e(Se,Hot),e(Se,Fw),e(Fw,j6e),e(j6e,Uot),e(Fw,Jot),e(Fw,tte),e(tte,Yot),e(Fw,Kot),e(Se,Zot),e(Se,Tw),e(Tw,D6e),e(D6e,ert),e(Tw,ort),e(Tw,ate),e(ate,rrt),e(Tw,trt),e(Se,art),e(Se,Mw),e(Mw,G6e),e(G6e,nrt),e(Mw,srt),e(Mw,nte),e(nte,lrt),e(Mw,irt),e(Se,drt),e(Se,Ew),e(Ew,O6e),e(O6e,crt),e(Ew,frt),e(Ew,ste),e(ste,mrt),e(Ew,grt),e(Se,hrt),e(Se,Cw),e(Cw,V6e),e(V6e,prt),e(Cw,_rt),e(Cw,lte),e(lte,urt),e(Cw,brt),e(Se,vrt),e(Se,ww),e(ww,X6e),e(X6e,Frt),e(ww,Trt),e(ww,ite),e(ite,Mrt),e(ww,Ert),e(Yr,Crt),M(Aw,Yr,null),b(f,$He,u),b(f,Cf,u),e(Cf,Lw),e(Lw,z6e),M($k,z6e,null),e(Cf,wrt),e(Cf,W6e),e(W6e,Art),b(f,kHe,u),b(f,Cr,u),M(kk,Cr,null),e(Cr,Lrt),e(Cr,wf),e(wf,yrt),e(wf,dte),e(dte,xrt),e(wf,$rt),e(wf,cte),e(cte,krt),e(wf,Srt),e(Cr,Rrt),e(Cr,Sk),e(Sk,Prt),e(Sk,Q6e),e(Q6e,Brt),e(Sk,Irt),e(Cr,Nrt),e(Cr,ra),M(Rk,ra,null),e(ra,qrt),e(ra,H6e),e(H6e,jrt),e(ra,Drt),e(ra,Af),e(Af,Grt),e(Af,U6e),e(U6e,Ort),e(Af,Vrt),e(Af,fte),e(fte,Xrt),e(Af,zrt),e(ra,Wrt),M(yw,ra,null),e(Cr,Qrt),e(Cr,Kr),M(Pk,Kr,null),e(Kr,Hrt),e(Kr,J6e),e(J6e,Urt),e(Kr,Jrt),e(Kr,Rn),e(Rn,Yrt),e(Rn,Y6e),e(Y6e,Krt),e(Rn,Zrt),e(Rn,K6e),e(K6e,ett),e(Rn,ott),e(Rn,Z6e),e(Z6e,rtt),e(Rn,ttt),e(Kr,att),e(Kr,Re),e(Re,xw),e(xw,eAe),e(eAe,ntt),e(xw,stt),e(xw,mte),e(mte,ltt),e(xw,itt),e(Re,dtt),e(Re,$w),e($w,oAe),e(oAe,ctt),e($w,ftt),e($w,gte),e(gte,mtt),e($w,gtt),e(Re,htt),e(Re,kw),e(kw,rAe),e(rAe,ptt),e(kw,_tt),e(kw,hte),e(hte,utt),e(kw,btt),e(Re,vtt),e(Re,Sw),e(Sw,tAe),e(tAe,Ftt),e(Sw,Ttt),e(Sw,pte),e(pte,Mtt),e(Sw,Ett),e(Re,Ctt),e(Re,Rw),e(Rw,aAe),e(aAe,wtt),e(Rw,Att),e(Rw,_te),e(_te,Ltt),e(Rw,ytt),e(Re,xtt),e(Re,Pw),e(Pw,nAe),e(nAe,$tt),e(Pw,ktt),e(Pw,ute),e(ute,Stt),e(Pw,Rtt),e(Re,Ptt),e(Re,Bw),e(Bw,sAe),e(sAe,Btt),e(Bw,Itt),e(Bw,bte),e(bte,Ntt),e(Bw,qtt),e(Re,jtt),e(Re,Iw),e(Iw,lAe),e(lAe,Dtt),e(Iw,Gtt),e(Iw,vte),e(vte,Ott),e(Iw,Vtt),e(Re,Xtt),e(Re,Nw),e(Nw,iAe),e(iAe,ztt),e(Nw,Wtt),e(Nw,Fte),e(Fte,Qtt),e(Nw,Htt),e(Re,Utt),e(Re,qw),e(qw,dAe),e(dAe,Jtt),e(qw,Ytt),e(qw,Tte),e(Tte,Ktt),e(qw,Ztt),e(Kr,eat),M(jw,Kr,null),b(f,SHe,u),b(f,Lf,u),e(Lf,Dw),e(Dw,cAe),M(Bk,cAe,null),e(Lf,oat),e(Lf,fAe),e(fAe,rat),b(f,RHe,u),b(f,wr,u),M(Ik,wr,null),e(wr,tat),e(wr,yf),e(yf,aat),e(yf,Mte),e(Mte,nat),e(yf,sat),e(yf,Ete),e(Ete,lat),e(yf,iat),e(wr,dat),e(wr,Nk),e(Nk,cat),e(Nk,mAe),e(mAe,fat),e(Nk,mat),e(wr,gat),e(wr,ta),M(qk,ta,null),e(ta,hat),e(ta,gAe),e(gAe,pat),e(ta,_at),e(ta,xf),e(xf,uat),e(xf,hAe),e(hAe,bat),e(xf,vat),e(xf,Cte),e(Cte,Fat),e(xf,Tat),e(ta,Mat),M(Gw,ta,null),e(wr,Eat),e(wr,Zr),M(jk,Zr,null),e(Zr,Cat),e(Zr,pAe),e(pAe,wat),e(Zr,Aat),e(Zr,Pn),e(Pn,Lat),e(Pn,_Ae),e(_Ae,yat),e(Pn,xat),e(Pn,uAe),e(uAe,$at),e(Pn,kat),e(Pn,bAe),e(bAe,Sat),e(Pn,Rat),e(Zr,Pat),e(Zr,Xe),e(Xe,Ow),e(Ow,vAe),e(vAe,Bat),e(Ow,Iat),e(Ow,wte),e(wte,Nat),e(Ow,qat),e(Xe,jat),e(Xe,Vw),e(Vw,FAe),e(FAe,Dat),e(Vw,Gat),e(Vw,Ate),e(Ate,Oat),e(Vw,Vat),e(Xe,Xat),e(Xe,Xw),e(Xw,TAe),e(TAe,zat),e(Xw,Wat),e(Xw,Lte),e(Lte,Qat),e(Xw,Hat),e(Xe,Uat),e(Xe,zw),e(zw,MAe),e(MAe,Jat),e(zw,Yat),e(zw,yte),e(yte,Kat),e(zw,Zat),e(Xe,ent),e(Xe,Ww),e(Ww,EAe),e(EAe,ont),e(Ww,rnt),e(Ww,xte),e(xte,tnt),e(Ww,ant),e(Xe,nnt),e(Xe,Qw),e(Qw,CAe),e(CAe,snt),e(Qw,lnt),e(Qw,$te),e($te,int),e(Qw,dnt),e(Xe,cnt),e(Xe,Hw),e(Hw,wAe),e(wAe,fnt),e(Hw,mnt),e(Hw,kte),e(kte,gnt),e(Hw,hnt),e(Xe,pnt),e(Xe,Uw),e(Uw,AAe),e(AAe,_nt),e(Uw,unt),e(Uw,Ste),e(Ste,bnt),e(Uw,vnt),e(Zr,Fnt),M(Jw,Zr,null),b(f,PHe,u),b(f,$f,u),e($f,Yw),e(Yw,LAe),M(Dk,LAe,null),e($f,Tnt),e($f,yAe),e(yAe,Mnt),b(f,BHe,u),b(f,Ar,u),M(Gk,Ar,null),e(Ar,Ent),e(Ar,kf),e(kf,Cnt),e(kf,Rte),e(Rte,wnt),e(kf,Ant),e(kf,Pte),e(Pte,Lnt),e(kf,ynt),e(Ar,xnt),e(Ar,Ok),e(Ok,$nt),e(Ok,xAe),e(xAe,knt),e(Ok,Snt),e(Ar,Rnt),e(Ar,aa),M(Vk,aa,null),e(aa,Pnt),e(aa,$Ae),e($Ae,Bnt),e(aa,Int),e(aa,Sf),e(Sf,Nnt),e(Sf,kAe),e(kAe,qnt),e(Sf,jnt),e(Sf,Bte),e(Bte,Dnt),e(Sf,Gnt),e(aa,Ont),M(Kw,aa,null),e(Ar,Vnt),e(Ar,et),M(Xk,et,null),e(et,Xnt),e(et,SAe),e(SAe,znt),e(et,Wnt),e(et,Bn),e(Bn,Qnt),e(Bn,RAe),e(RAe,Hnt),e(Bn,Unt),e(Bn,PAe),e(PAe,Jnt),e(Bn,Ynt),e(Bn,BAe),e(BAe,Knt),e(Bn,Znt),e(et,est),e(et,ze),e(ze,Zw),e(Zw,IAe),e(IAe,ost),e(Zw,rst),e(Zw,Ite),e(Ite,tst),e(Zw,ast),e(ze,nst),e(ze,e6),e(e6,NAe),e(NAe,sst),e(e6,lst),e(e6,Nte),e(Nte,ist),e(e6,dst),e(ze,cst),e(ze,o6),e(o6,qAe),e(qAe,fst),e(o6,mst),e(o6,qte),e(qte,gst),e(o6,hst),e(ze,pst),e(ze,r6),e(r6,jAe),e(jAe,_st),e(r6,ust),e(r6,jte),e(jte,bst),e(r6,vst),e(ze,Fst),e(ze,t6),e(t6,DAe),e(DAe,Tst),e(t6,Mst),e(t6,Dte),e(Dte,Est),e(t6,Cst),e(ze,wst),e(ze,a6),e(a6,GAe),e(GAe,Ast),e(a6,Lst),e(a6,Gte),e(Gte,yst),e(a6,xst),e(ze,$st),e(ze,n6),e(n6,OAe),e(OAe,kst),e(n6,Sst),e(n6,Ote),e(Ote,Rst),e(n6,Pst),e(ze,Bst),e(ze,s6),e(s6,VAe),e(VAe,Ist),e(s6,Nst),e(s6,Vte),e(Vte,qst),e(s6,jst),e(et,Dst),M(l6,et,null),b(f,IHe,u),b(f,Rf,u),e(Rf,i6),e(i6,XAe),M(zk,XAe,null),e(Rf,Gst),e(Rf,zAe),e(zAe,Ost),b(f,NHe,u),b(f,Lr,u),M(Wk,Lr,null),e(Lr,Vst),e(Lr,Pf),e(Pf,Xst),e(Pf,Xte),e(Xte,zst),e(Pf,Wst),e(Pf,zte),e(zte,Qst),e(Pf,Hst),e(Lr,Ust),e(Lr,Qk),e(Qk,Jst),e(Qk,WAe),e(WAe,Yst),e(Qk,Kst),e(Lr,Zst),e(Lr,na),M(Hk,na,null),e(na,elt),e(na,QAe),e(QAe,olt),e(na,rlt),e(na,Bf),e(Bf,tlt),e(Bf,HAe),e(HAe,alt),e(Bf,nlt),e(Bf,Wte),e(Wte,slt),e(Bf,llt),e(na,ilt),M(d6,na,null),e(Lr,dlt),e(Lr,ot),M(Uk,ot,null),e(ot,clt),e(ot,UAe),e(UAe,flt),e(ot,mlt),e(ot,In),e(In,glt),e(In,JAe),e(JAe,hlt),e(In,plt),e(In,YAe),e(YAe,_lt),e(In,ult),e(In,KAe),e(KAe,blt),e(In,vlt),e(ot,Flt),e(ot,ZAe),e(ZAe,c6),e(c6,e7e),e(e7e,Tlt),e(c6,Mlt),e(c6,Qte),e(Qte,Elt),e(c6,Clt),e(ot,wlt),M(f6,ot,null),b(f,qHe,u),b(f,If,u),e(If,m6),e(m6,o7e),M(Jk,o7e,null),e(If,Alt),e(If,r7e),e(r7e,Llt),b(f,jHe,u),b(f,yr,u),M(Yk,yr,null),e(yr,ylt),e(yr,Nf),e(Nf,xlt),e(Nf,Hte),e(Hte,$lt),e(Nf,klt),e(Nf,Ute),e(Ute,Slt),e(Nf,Rlt),e(yr,Plt),e(yr,Kk),e(Kk,Blt),e(Kk,t7e),e(t7e,Ilt),e(Kk,Nlt),e(yr,qlt),e(yr,sa),M(Zk,sa,null),e(sa,jlt),e(sa,a7e),e(a7e,Dlt),e(sa,Glt),e(sa,qf),e(qf,Olt),e(qf,n7e),e(n7e,Vlt),e(qf,Xlt),e(qf,Jte),e(Jte,zlt),e(qf,Wlt),e(sa,Qlt),M(g6,sa,null),e(yr,Hlt),e(yr,rt),M(eS,rt,null),e(rt,Ult),e(rt,s7e),e(s7e,Jlt),e(rt,Ylt),e(rt,Nn),e(Nn,Klt),e(Nn,l7e),e(l7e,Zlt),e(Nn,eit),e(Nn,i7e),e(i7e,oit),e(Nn,rit),e(Nn,d7e),e(d7e,tit),e(Nn,ait),e(rt,nit),e(rt,oS),e(oS,h6),e(h6,c7e),e(c7e,sit),e(h6,lit),e(h6,Yte),e(Yte,iit),e(h6,dit),e(oS,cit),e(oS,p6),e(p6,f7e),e(f7e,fit),e(p6,mit),e(p6,Kte),e(Kte,git),e(p6,hit),e(rt,pit),M(_6,rt,null),b(f,DHe,u),b(f,jf,u),e(jf,u6),e(u6,m7e),M(rS,m7e,null),e(jf,_it),e(jf,g7e),e(g7e,uit),b(f,GHe,u),b(f,xr,u),M(tS,xr,null),e(xr,bit),e(xr,Df),e(Df,vit),e(Df,Zte),e(Zte,Fit),e(Df,Tit),e(Df,eae),e(eae,Mit),e(Df,Eit),e(xr,Cit),e(xr,aS),e(aS,wit),e(aS,h7e),e(h7e,Ait),e(aS,Lit),e(xr,yit),e(xr,la),M(nS,la,null),e(la,xit),e(la,p7e),e(p7e,$it),e(la,kit),e(la,Gf),e(Gf,Sit),e(Gf,_7e),e(_7e,Rit),e(Gf,Pit),e(Gf,oae),e(oae,Bit),e(Gf,Iit),e(la,Nit),M(b6,la,null),e(xr,qit),e(xr,tt),M(sS,tt,null),e(tt,jit),e(tt,u7e),e(u7e,Dit),e(tt,Git),e(tt,qn),e(qn,Oit),e(qn,b7e),e(b7e,Vit),e(qn,Xit),e(qn,v7e),e(v7e,zit),e(qn,Wit),e(qn,F7e),e(F7e,Qit),e(qn,Hit),e(tt,Uit),e(tt,T7e),e(T7e,v6),e(v6,M7e),e(M7e,Jit),e(v6,Yit),e(v6,rae),e(rae,Kit),e(v6,Zit),e(tt,edt),M(F6,tt,null),OHe=!0},p(f,[u]){const lS={};u&2&&(lS.$$scope={dirty:u,ctx:f}),Jf.$set(lS);const E7e={};u&2&&(E7e.$$scope={dirty:u,ctx:f}),fh.$set(E7e);const C7e={};u&2&&(C7e.$$scope={dirty:u,ctx:f}),Qh.$set(C7e);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),Rp.$set(w7e);const iS={};u&2&&(iS.$$scope={dirty:u,ctx:f}),Pp.$set(iS);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),r_.$set(A7e);const jn={};u&2&&(jn.$$scope={dirty:u,ctx:f}),t_.$set(jn);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),s_.$set(L7e);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),h2.$set(y7e);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),_2.$set(x7e);const dS={};u&2&&(dS.$$scope={dirty:u,ctx:f}),f1.$set(dS);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),g1.$set($7e);const cS={};u&2&&(cS.$$scope={dirty:u,ctx:f}),ob.$set(cS);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),tb.$set(k7e);const fS={};u&2&&(fS.$$scope={dirty:u,ctx:f}),Vb.$set(fS);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),zb.$set(S7e);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),mv.$set(R7e);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),hv.$set(P7e);const Of={};u&2&&(Of.$$scope={dirty:u,ctx:f}),h5.$set(Of);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),_5.$set(B7e);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),U5.$set(I7e);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),Y5.$set(N7e);const mS={};u&2&&(mS.$$scope={dirty:u,ctx:f}),nF.$set(mS);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),lF.$set(q7e);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),WF.$set(j7e);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),HF.$set(D7e);const lt={};u&2&&(lt.$$scope={dirty:u,ctx:f}),jT.$set(lt);const gS={};u&2&&(gS.$$scope={dirty:u,ctx:f}),GT.$set(gS);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),XT.$set(G7e);const hS={};u&2&&(hS.$$scope={dirty:u,ctx:f}),WT.$set(hS);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),i8.$set(O7e);const it={};u&2&&(it.$$scope={dirty:u,ctx:f}),c8.$set(it);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),g8.$set(V7e);const Vf={};u&2&&(Vf.$$scope={dirty:u,ctx:f}),p8.$set(Vf);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:f}),b8.$set(X7e);const z7e={};u&2&&(z7e.$$scope={dirty:u,ctx:f}),F8.$set(z7e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),E8.$set(L);const T6={};u&2&&(T6.$$scope={dirty:u,ctx:f}),w8.$set(T6);const W7e={};u&2&&(W7e.$$scope={dirty:u,ctx:f}),I8.$set(W7e);const Q7e={};u&2&&(Q7e.$$scope={dirty:u,ctx:f}),q8.$set(Q7e);const M6={};u&2&&(M6.$$scope={dirty:u,ctx:f}),z8.$set(M6);const H7e={};u&2&&(H7e.$$scope={dirty:u,ctx:f}),Q8.$set(H7e);const U7e={};u&2&&(U7e.$$scope={dirty:u,ctx:f}),n9.$set(U7e);const E6={};u&2&&(E6.$$scope={dirty:u,ctx:f}),l9.$set(E6);const J7e={};u&2&&(J7e.$$scope={dirty:u,ctx:f}),f9.$set(J7e);const Y7e={};u&2&&(Y7e.$$scope={dirty:u,ctx:f}),g9.$set(Y7e);const C6={};u&2&&(C6.$$scope={dirty:u,ctx:f}),F9.$set(C6);const K7e={};u&2&&(K7e.$$scope={dirty:u,ctx:f}),M9.$set(K7e);const Z7e={};u&2&&(Z7e.$$scope={dirty:u,ctx:f}),y9.$set(Z7e);const w6={};u&2&&(w6.$$scope={dirty:u,ctx:f}),$9.$set(w6);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),P9.$set(eLe);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),I9.$set(oLe);const A6={};u&2&&(A6.$$scope={dirty:u,ctx:f}),j9.$set(A6);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),G9.$set(rLe);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),H9.$set(tLe);const L6={};u&2&&(L6.$$scope={dirty:u,ctx:f}),J9.$set(L6);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),Z9.$set(aLe);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),oM.$set(nLe);const y6={};u&2&&(y6.$$scope={dirty:u,ctx:f}),KM.$set(y6);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),eE.$set(sLe);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),CE.$set(lLe);const x6={};u&2&&(x6.$$scope={dirty:u,ctx:f}),AE.$set(x6);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),DE.$set(iLe);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),OE.$set(dLe);const $6={};u&2&&($6.$$scope={dirty:u,ctx:f}),JE.$set($6);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),KE.$set(cLe);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),v4.$set(fLe);const k6={};u&2&&(k6.$$scope={dirty:u,ctx:f}),T4.$set(k6);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),S4.$set(mLe);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),P4.$set(gLe);const S6={};u&2&&(S6.$$scope={dirty:u,ctx:f}),lC.$set(S6);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),dC.$set(hLe);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),LC.$set(pLe);const R6={};u&2&&(R6.$$scope={dirty:u,ctx:f}),xC.$set(R6);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),SC.$set(_Le);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),PC.$set(uLe);const P6={};u&2&&(P6.$$scope={dirty:u,ctx:f}),IC.$set(P6);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),qC.$set(bLe);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),n3.$set(vLe);const B6={};u&2&&(B6.$$scope={dirty:u,ctx:f}),l3.$set(B6);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),y3.$set(FLe);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),$3.$set(TLe);const I6={};u&2&&(I6.$$scope={dirty:u,ctx:f}),S3.$set(I6);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),P3.$set(MLe);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),I3.$set(ELe);const N6={};u&2&&(N6.$$scope={dirty:u,ctx:f}),q3.$set(N6);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),m0.$set(CLe);const wLe={};u&2&&(wLe.$$scope={dirty:u,ctx:f}),h0.$set(wLe);const q6={};u&2&&(q6.$$scope={dirty:u,ctx:f}),w0.$set(q6);const ALe={};u&2&&(ALe.$$scope={dirty:u,ctx:f}),L0.$set(ALe);const LLe={};u&2&&(LLe.$$scope={dirty:u,ctx:f}),G0.$set(LLe);const j6={};u&2&&(j6.$$scope={dirty:u,ctx:f}),V0.$set(j6);const yLe={};u&2&&(yLe.$$scope={dirty:u,ctx:f}),ew.$set(yLe);const xLe={};u&2&&(xLe.$$scope={dirty:u,ctx:f}),rw.$set(xLe);const D6={};u&2&&(D6.$$scope={dirty:u,ctx:f}),gw.$set(D6);const $Le={};u&2&&($Le.$$scope={dirty:u,ctx:f}),pw.$set($Le);const kLe={};u&2&&(kLe.$$scope={dirty:u,ctx:f}),Aw.$set(kLe);const G6={};u&2&&(G6.$$scope={dirty:u,ctx:f}),yw.$set(G6);const SLe={};u&2&&(SLe.$$scope={dirty:u,ctx:f}),jw.$set(SLe);const RLe={};u&2&&(RLe.$$scope={dirty:u,ctx:f}),Gw.$set(RLe);const O6={};u&2&&(O6.$$scope={dirty:u,ctx:f}),Jw.$set(O6);const PLe={};u&2&&(PLe.$$scope={dirty:u,ctx:f}),Kw.$set(PLe);const BLe={};u&2&&(BLe.$$scope={dirty:u,ctx:f}),l6.$set(BLe);const V6={};u&2&&(V6.$$scope={dirty:u,ctx:f}),d6.$set(V6);const ILe={};u&2&&(ILe.$$scope={dirty:u,ctx:f}),f6.$set(ILe);const NLe={};u&2&&(NLe.$$scope={dirty:u,ctx:f}),g6.$set(NLe);const X6={};u&2&&(X6.$$scope={dirty:u,ctx:f}),_6.$set(X6);const qLe={};u&2&&(qLe.$$scope={dirty:u,ctx:f}),b6.$set(qLe);const jLe={};u&2&&(jLe.$$scope={dirty:u,ctx:f}),F6.$set(jLe)},i(f){OHe||(E(d.$$.fragment,f),E(Ia.$$.fragment,f),E(W7.$$.fragment,f),E(Q7.$$.fragment,f),E(Jf.$$.fragment,f),E(H7.$$.fragment,f),E(U7.$$.fragment,f),E(K7.$$.fragment,f),E(fh.$$.fragment,f),E(Z7.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(aL.$$.fragment,f),E(Qh.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(cL.$$.fragment,f),E(Rp.$$.fragment,f),E(Pp.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(_L.$$.fragment,f),E(r_.$$.fragment,f),E(t_.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(s_.$$.fragment,f),E(ML.$$.fragment,f),E(h2.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(_2.$$.fragment,f),E(LL.$$.fragment,f),E(f1.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(g1.$$.fragment,f),E(SL.$$.fragment,f),E(ob.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(tb.$$.fragment,f),E(NL.$$.fragment,f),E(Vb.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(zb.$$.fragment,f),E(OL.$$.fragment,f),E(mv.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(hv.$$.fragment,f),E(QL.$$.fragment,f),E(h5.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(_5.$$.fragment,f),E(KL.$$.fragment,f),E(U5.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(Y5.$$.fragment,f),E(ty.$$.fragment,f),E(nF.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(lF.$$.fragment,f),E(iy.$$.fragment,f),E(WF.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(HF.$$.fragment,f),E(gy.$$.fragment,f),E(jT.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(GT.$$.fragment,f),E(by.$$.fragment,f),E(XT.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(WT.$$.fragment,f),E(Ey.$$.fragment,f),E(i8.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(c8.$$.fragment,f),E(yy.$$.fragment,f),E(g8.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(p8.$$.fragment,f),E(Ry.$$.fragment,f),E(b8.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(F8.$$.fragment,f),E(qy.$$.fragment,f),E(E8.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(w8.$$.fragment,f),E(Vy.$$.fragment,f),E(I8.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(q8.$$.fragment,f),E(Hy.$$.fragment,f),E(z8.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(Q8.$$.fragment,f),E(Zy.$$.fragment,f),E(n9.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(l9.$$.fragment,f),E(ax.$$.fragment,f),E(f9.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(g9.$$.fragment,f),E(cx.$$.fragment,f),E(F9.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(M9.$$.fragment,f),E(px.$$.fragment,f),E(y9.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E($9.$$.fragment,f),E(Fx.$$.fragment,f),E(P9.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(I9.$$.fragment,f),E(Ax.$$.fragment,f),E(j9.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(G9.$$.fragment,f),E(kx.$$.fragment,f),E(H9.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(J9.$$.fragment,f),E(Ix.$$.fragment,f),E(Z9.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(oM.$$.fragment,f),E(Gx.$$.fragment,f),E(KM.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(eE.$$.fragment,f),E(Wx.$$.fragment,f),E(CE.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(AE.$$.fragment,f),E(Yx.$$.fragment,f),E(DE.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(OE.$$.fragment,f),E(r$.$$.fragment,f),E(JE.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(KE.$$.fragment,f),E(l$.$$.fragment,f),E(v4.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(T4.$$.fragment,f),E(m$.$$.fragment,f),E(S4.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(_$.$$.fragment,f),E(P4.$$.fragment,f),E(u$.$$.fragment,f),E(lC.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(dC.$$.fragment,f),E(M$.$$.fragment,f),E(LC.$$.fragment,f),E(E$.$$.fragment,f),E(C$.$$.fragment,f),E(A$.$$.fragment,f),E(xC.$$.fragment,f),E(L$.$$.fragment,f),E(SC.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(PC.$$.fragment,f),E(R$.$$.fragment,f),E(IC.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(qC.$$.fragment,f),E(q$.$$.fragment,f),E(n3.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(l3.$$.fragment,f),E(V$.$$.fragment,f),E(y3.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E($3.$$.fragment,f),E(H$.$$.fragment,f),E(S3.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(P3.$$.fragment,f),E(Z$.$$.fragment,f),E(I3.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(q3.$$.fragment,f),E(ak.$$.fragment,f),E(m0.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(h0.$$.fragment,f),E(dk.$$.fragment,f),E(w0.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(L0.$$.fragment,f),E(hk.$$.fragment,f),E(G0.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(V0.$$.fragment,f),E(vk.$$.fragment,f),E(ew.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(rw.$$.fragment,f),E(Ck.$$.fragment,f),E(gw.$$.fragment,f),E(wk.$$.fragment,f),E(Ak.$$.fragment,f),E(yk.$$.fragment,f),E(pw.$$.fragment,f),E(xk.$$.fragment,f),E(Aw.$$.fragment,f),E($k.$$.fragment,f),E(kk.$$.fragment,f),E(Rk.$$.fragment,f),E(yw.$$.fragment,f),E(Pk.$$.fragment,f),E(jw.$$.fragment,f),E(Bk.$$.fragment,f),E(Ik.$$.fragment,f),E(qk.$$.fragment,f),E(Gw.$$.fragment,f),E(jk.$$.fragment,f),E(Jw.$$.fragment,f),E(Dk.$$.fragment,f),E(Gk.$$.fragment,f),E(Vk.$$.fragment,f),E(Kw.$$.fragment,f),E(Xk.$$.fragment,f),E(l6.$$.fragment,f),E(zk.$$.fragment,f),E(Wk.$$.fragment,f),E(Hk.$$.fragment,f),E(d6.$$.fragment,f),E(Uk.$$.fragment,f),E(f6.$$.fragment,f),E(Jk.$$.fragment,f),E(Yk.$$.fragment,f),E(Zk.$$.fragment,f),E(g6.$$.fragment,f),E(eS.$$.fragment,f),E(_6.$$.fragment,f),E(rS.$$.fragment,f),E(tS.$$.fragment,f),E(nS.$$.fragment,f),E(b6.$$.fragment,f),E(sS.$$.fragment,f),E(F6.$$.fragment,f),OHe=!0)},o(f){C(d.$$.fragment,f),C(Ia.$$.fragment,f),C(W7.$$.fragment,f),C(Q7.$$.fragment,f),C(Jf.$$.fragment,f),C(H7.$$.fragment,f),C(U7.$$.fragment,f),C(K7.$$.fragment,f),C(fh.$$.fragment,f),C(Z7.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(aL.$$.fragment,f),C(Qh.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(cL.$$.fragment,f),C(Rp.$$.fragment,f),C(Pp.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(_L.$$.fragment,f),C(r_.$$.fragment,f),C(t_.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(s_.$$.fragment,f),C(ML.$$.fragment,f),C(h2.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(_2.$$.fragment,f),C(LL.$$.fragment,f),C(f1.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(g1.$$.fragment,f),C(SL.$$.fragment,f),C(ob.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(tb.$$.fragment,f),C(NL.$$.fragment,f),C(Vb.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(zb.$$.fragment,f),C(OL.$$.fragment,f),C(mv.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(hv.$$.fragment,f),C(QL.$$.fragment,f),C(h5.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(_5.$$.fragment,f),C(KL.$$.fragment,f),C(U5.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(Y5.$$.fragment,f),C(ty.$$.fragment,f),C(nF.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(lF.$$.fragment,f),C(iy.$$.fragment,f),C(WF.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(HF.$$.fragment,f),C(gy.$$.fragment,f),C(jT.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(GT.$$.fragment,f),C(by.$$.fragment,f),C(XT.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(WT.$$.fragment,f),C(Ey.$$.fragment,f),C(i8.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(c8.$$.fragment,f),C(yy.$$.fragment,f),C(g8.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(p8.$$.fragment,f),C(Ry.$$.fragment,f),C(b8.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(F8.$$.fragment,f),C(qy.$$.fragment,f),C(E8.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(w8.$$.fragment,f),C(Vy.$$.fragment,f),C(I8.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(q8.$$.fragment,f),C(Hy.$$.fragment,f),C(z8.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(Q8.$$.fragment,f),C(Zy.$$.fragment,f),C(n9.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(l9.$$.fragment,f),C(ax.$$.fragment,f),C(f9.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(g9.$$.fragment,f),C(cx.$$.fragment,f),C(F9.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(M9.$$.fragment,f),C(px.$$.fragment,f),C(y9.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C($9.$$.fragment,f),C(Fx.$$.fragment,f),C(P9.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(I9.$$.fragment,f),C(Ax.$$.fragment,f),C(j9.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(G9.$$.fragment,f),C(kx.$$.fragment,f),C(H9.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(J9.$$.fragment,f),C(Ix.$$.fragment,f),C(Z9.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(oM.$$.fragment,f),C(Gx.$$.fragment,f),C(KM.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(eE.$$.fragment,f),C(Wx.$$.fragment,f),C(CE.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(AE.$$.fragment,f),C(Yx.$$.fragment,f),C(DE.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(OE.$$.fragment,f),C(r$.$$.fragment,f),C(JE.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(KE.$$.fragment,f),C(l$.$$.fragment,f),C(v4.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(T4.$$.fragment,f),C(m$.$$.fragment,f),C(S4.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(_$.$$.fragment,f),C(P4.$$.fragment,f),C(u$.$$.fragment,f),C(lC.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(dC.$$.fragment,f),C(M$.$$.fragment,f),C(LC.$$.fragment,f),C(E$.$$.fragment,f),C(C$.$$.fragment,f),C(A$.$$.fragment,f),C(xC.$$.fragment,f),C(L$.$$.fragment,f),C(SC.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(PC.$$.fragment,f),C(R$.$$.fragment,f),C(IC.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(qC.$$.fragment,f),C(q$.$$.fragment,f),C(n3.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(l3.$$.fragment,f),C(V$.$$.fragment,f),C(y3.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C($3.$$.fragment,f),C(H$.$$.fragment,f),C(S3.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(P3.$$.fragment,f),C(Z$.$$.fragment,f),C(I3.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(q3.$$.fragment,f),C(ak.$$.fragment,f),C(m0.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(h0.$$.fragment,f),C(dk.$$.fragment,f),C(w0.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(L0.$$.fragment,f),C(hk.$$.fragment,f),C(G0.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(V0.$$.fragment,f),C(vk.$$.fragment,f),C(ew.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(rw.$$.fragment,f),C(Ck.$$.fragment,f),C(gw.$$.fragment,f),C(wk.$$.fragment,f),C(Ak.$$.fragment,f),C(yk.$$.fragment,f),C(pw.$$.fragment,f),C(xk.$$.fragment,f),C(Aw.$$.fragment,f),C($k.$$.fragment,f),C(kk.$$.fragment,f),C(Rk.$$.fragment,f),C(yw.$$.fragment,f),C(Pk.$$.fragment,f),C(jw.$$.fragment,f),C(Bk.$$.fragment,f),C(Ik.$$.fragment,f),C(qk.$$.fragment,f),C(Gw.$$.fragment,f),C(jk.$$.fragment,f),C(Jw.$$.fragment,f),C(Dk.$$.fragment,f),C(Gk.$$.fragment,f),C(Vk.$$.fragment,f),C(Kw.$$.fragment,f),C(Xk.$$.fragment,f),C(l6.$$.fragment,f),C(zk.$$.fragment,f),C(Wk.$$.fragment,f),C(Hk.$$.fragment,f),C(d6.$$.fragment,f),C(Uk.$$.fragment,f),C(f6.$$.fragment,f),C(Jk.$$.fragment,f),C(Yk.$$.fragment,f),C(Zk.$$.fragment,f),C(g6.$$.fragment,f),C(eS.$$.fragment,f),C(_6.$$.fragment,f),C(rS.$$.fragment,f),C(tS.$$.fragment,f),C(nS.$$.fragment,f),C(b6.$$.fragment,f),C(sS.$$.fragment,f),C(F6.$$.fragment,f),OHe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(zf),f&&t(dt),f&&t(Oe),f&&t(Qe),f&&t(Qf),w(Ia,f),f&&t(He),f&&t(Ae),f&&t(Lo),f&&t(Na),f&&t(BWe),f&&t(Vi),w(W7),f&&t(IWe),f&&t(Xn),f&&t(NWe),w(Q7,f),f&&t(qWe),f&&t(BR),f&&t(jWe),w(Jf,f),f&&t(DWe),f&&t(Xi),w(H7),f&&t(GWe),f&&t(yo),w(U7),w(K7),w(fh),w(Z7),f&&t(OWe),f&&t(Wi),w(eL),f&&t(VWe),f&&t(xo),w(oL),w(aL),w(Qh),w(nL),f&&t(XWe),f&&t(Qi),w(sL),f&&t(zWe),f&&t($o),w(lL),w(cL),w(Rp),w(Pp),w(fL),f&&t(WWe),f&&t(Hi),w(mL),f&&t(QWe),f&&t(ko),w(gL),w(_L),w(r_),w(t_),w(uL),f&&t(HWe),f&&t(Ji),w(bL),f&&t(UWe),f&&t(So),w(vL),w(TL),w(s_),w(ML),w(h2),f&&t(JWe),f&&t(Zi),w(EL),f&&t(YWe),f&&t(Ro),w(CL),w(AL),w(_2),w(LL),w(f1),f&&t(KWe),f&&t(rd),w(yL),f&&t(ZWe),f&&t(Po),w(xL),w(kL),w(g1),w(SL),w(ob),f&&t(eQe),f&&t(nd),w(RL),f&&t(oQe),f&&t(Bo),w(PL),w(IL),w(tb),w(NL),w(Vb),f&&t(rQe),f&&t(id),w(qL),f&&t(tQe),f&&t(Io),w(jL),w(GL),w(zb),w(OL),w(mv),f&&t(aQe),f&&t(fd),w(VL),f&&t(nQe),f&&t(No),w(XL),w(WL),w(hv),w(QL),w(h5),f&&t(sQe),f&&t(hd),w(HL),f&&t(lQe),f&&t(qo),w(UL),w(YL),w(_5),w(KL),w(U5),f&&t(iQe),f&&t(ud),w(ZL),f&&t(dQe),f&&t(jo),w(ey),w(ry),w(Y5),w(ty),w(nF),f&&t(cQe),f&&t(Fd),w(ay),f&&t(fQe),f&&t(Go),w(ny),w(ly),w(lF),w(iy),w(WF),f&&t(mQe),f&&t(Ed),w(dy),f&&t(gQe),f&&t(Oo),w(cy),w(my),w(HF),w(gy),w(jT),f&&t(hQe),f&&t(Ad),w(hy),f&&t(pQe),f&&t(Vo),w(py),w(uy),w(GT),w(by),w(XT),f&&t(_Qe),f&&t(xd),w(vy),f&&t(uQe),f&&t(Xo),w(Fy),w(My),w(WT),w(Ey),w(i8),f&&t(bQe),f&&t(Sd),w(Cy),f&&t(vQe),f&&t(zo),w(wy),w(Ly),w(c8),w(yy),w(g8),f&&t(FQe),f&&t(Bd),w(xy),f&&t(TQe),f&&t(Wo),w($y),w(Sy),w(p8),w(Ry),w(b8),f&&t(MQe),f&&t(qd),w(Py),f&&t(EQe),f&&t(Qo),w(By),w(Ny),w(F8),w(qy),w(E8),f&&t(CQe),f&&t(Gd),w(jy),f&&t(wQe),f&&t(Ho),w(Dy),w(Oy),w(w8),w(Vy),w(I8),f&&t(AQe),f&&t(Xd),w(Xy),f&&t(LQe),f&&t(Uo),w(zy),w(Qy),w(q8),w(Hy),w(z8),f&&t(yQe),f&&t(Qd),w(Uy),f&&t(xQe),f&&t(Jo),w(Jy),w(Ky),w(Q8),w(Zy),w(n9),f&&t($Qe),f&&t(Jd),w(ex),f&&t(kQe),f&&t(Yo),w(ox),w(tx),w(l9),w(ax),w(f9),f&&t(SQe),f&&t(Zd),w(sx),f&&t(RQe),f&&t(Ko),w(lx),w(dx),w(g9),w(cx),w(F9),f&&t(PQe),f&&t(rc),w(fx),f&&t(BQe),f&&t(Zo),w(mx),w(hx),w(M9),w(px),w(y9),f&&t(IQe),f&&t(nc),w(_x),f&&t(NQe),f&&t(er),w(ux),w(vx),w($9),w(Fx),w(P9),f&&t(qQe),f&&t(ic),w(Mx),f&&t(jQe),f&&t(or),w(Ex),w(wx),w(I9),w(Ax),w(j9),f&&t(DQe),f&&t(fc),w(Lx),f&&t(GQe),f&&t(rr),w(yx),w($x),w(G9),w(kx),w(H9),f&&t(OQe),f&&t(hc),w(Sx),f&&t(VQe),f&&t(tr),w(Rx),w(Bx),w(J9),w(Ix),w(Z9),f&&t(XQe),f&&t(uc),w(Nx),f&&t(zQe),f&&t(ar),w(qx),w(Dx),w(oM),w(Gx),w(KM),f&&t(WQe),f&&t(Fc),w(Ox),f&&t(QQe),f&&t(nr),w(Vx),w(zx),w(eE),w(Wx),w(CE),f&&t(HQe),f&&t(Ec),w(Qx),f&&t(UQe),f&&t(sr),w(Hx),w(Jx),w(AE),w(Yx),w(DE),f&&t(JQe),f&&t(Ac),w(Kx),f&&t(YQe),f&&t(lr),w(Zx),w(o$),w(OE),w(r$),w(JE),f&&t(KQe),f&&t(xc),w(t$),f&&t(ZQe),f&&t(ir),w(a$),w(s$),w(KE),w(l$),w(v4),f&&t(eHe),f&&t(Sc),w(i$),f&&t(oHe),f&&t(dr),w(d$),w(f$),w(T4),w(m$),w(S4),f&&t(rHe),f&&t(Bc),w(g$),f&&t(tHe),f&&t(cr),w(h$),w(_$),w(P4),w(u$),w(lC),f&&t(aHe),f&&t(qc),w(b$),f&&t(nHe),f&&t(fr),w(v$),w(T$),w(dC),w(M$),w(LC),f&&t(sHe),f&&t(Gc),w(E$),f&&t(lHe),f&&t(mr),w(C$),w(A$),w(xC),w(L$),w(SC),f&&t(iHe),f&&t(Xc),w(x$),f&&t(dHe),f&&t(gr),w($$),w(S$),w(PC),w(R$),w(IC),f&&t(cHe),f&&t(Qc),w(P$),f&&t(fHe),f&&t(hr),w(B$),w(N$),w(qC),w(q$),w(n3),f&&t(mHe),f&&t(Jc),w(j$),f&&t(gHe),f&&t(pr),w(D$),w(O$),w(l3),w(V$),w(y3),f&&t(hHe),f&&t(Zc),w(X$),f&&t(pHe),f&&t(_r),w(z$),w(Q$),w($3),w(H$),w(S3),f&&t(_He),f&&t(rf),w(U$),f&&t(uHe),f&&t(ur),w(J$),w(K$),w(P3),w(Z$),w(I3),f&&t(bHe),f&&t(nf),w(ek),f&&t(vHe),f&&t(br),w(ok),w(tk),w(q3),w(ak),w(m0),f&&t(FHe),f&&t(df),w(nk),f&&t(THe),f&&t(vr),w(sk),w(ik),w(h0),w(dk),w(w0),f&&t(MHe),f&&t(mf),w(ck),f&&t(EHe),f&&t(Fr),w(fk),w(gk),w(L0),w(hk),w(G0),f&&t(CHe),f&&t(pf),w(pk),f&&t(wHe),f&&t(Tr),w(_k),w(bk),w(V0),w(vk),w(ew),f&&t(AHe),f&&t(bf),w(Fk),f&&t(LHe),f&&t(Mr),w(Tk),w(Ek),w(rw),w(Ck),w(gw),f&&t(yHe),f&&t(Tf),w(wk),f&&t(xHe),f&&t(Er),w(Ak),w(yk),w(pw),w(xk),w(Aw),f&&t($He),f&&t(Cf),w($k),f&&t(kHe),f&&t(Cr),w(kk),w(Rk),w(yw),w(Pk),w(jw),f&&t(SHe),f&&t(Lf),w(Bk),f&&t(RHe),f&&t(wr),w(Ik),w(qk),w(Gw),w(jk),w(Jw),f&&t(PHe),f&&t($f),w(Dk),f&&t(BHe),f&&t(Ar),w(Gk),w(Vk),w(Kw),w(Xk),w(l6),f&&t(IHe),f&&t(Rf),w(zk),f&&t(NHe),f&&t(Lr),w(Wk),w(Hk),w(d6),w(Uk),w(f6),f&&t(qHe),f&&t(If),w(Jk),f&&t(jHe),f&&t(yr),w(Yk),w(Zk),w(g6),w(eS),w(_6),f&&t(DHe),f&&t(jf),w(rS),f&&t(GHe),f&&t(xr),w(tS),w(nS),w(b6),w(sS),w(F6)}}}const Joa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Yoa($){return QZt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ara extends VZt{constructor(g){super();XZt(this,g,Yoa,Uoa,zZt,{})}}export{ara as default,Joa as metadata};
