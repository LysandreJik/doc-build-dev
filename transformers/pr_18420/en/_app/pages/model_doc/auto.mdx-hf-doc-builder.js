import{S as ZJt,i as eYt,s as oYt,e as a,k as l,w as F,t as o,M as rYt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as tYt,L as j}from"../../chunks/vendor-hf-doc-builder.js";import{T as Bst}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as q}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function aYt($){let g,v,p,m,_,c,h,wo,$i,If,lt,ki,Si,ML,Nf,Oe,Qe,Ri,Bn,EL,In,Nn,CL,Pi,qn,wL,Bi,qf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),$i=a("code"),If=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),ki=a("code"),Si=o('"new-model"'),ML=o(")."),Nf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ri=a("code"),Bn=o("NewModel"),EL=o(" is a subclass of "),In=a("a"),Nn=o("PreTrainedModel"),CL=o(`, make sure its
`),Pi=a("code"),qn=o("config_class"),wL=o(` attribute is set to the same class you use when registering the model (here
`),Bi=a("code"),qf=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var nR=s(p);m=r(nR,"NewModelConfig"),nR.forEach(t),_=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Ii=s(c);h=r(Ii,"PretrainedConfig"),Ii.forEach(t),wo=r(Ae,`, make sure its
`),$i=n(Ae,"CODE",{});var sR=s($i);If=r(sR,"model_type"),sR.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),ki=n(Ae,"CODE",{});var lR=s(ki);Si=r(lR,'"new-model"'),lR.forEach(t),ML=r(Ae,")."),Ae.forEach(t),Nf=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Ri=n(Ao,"CODE",{});var Ra=s(Ri);Bn=r(Ra,"NewModel"),Ra.forEach(t),EL=r(Ao," is a subclass of "),In=n(Ao,"A",{href:!0});var iR=s(In);Nn=r(iR,"PreTrainedModel"),iR.forEach(t),CL=r(Ao,`, make sure its
`),Pi=n(Ao,"CODE",{});var jf=s(Pi);qn=r(jf,"config_class"),jf.forEach(t),wL=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Bi=n(Ao,"CODE",{});var dR=s(Bi);qf=r(dR,"NewModelConfig"),dR.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(In,"href","/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,c),e(c,h),e(g,wo),e(g,$i),e($i,If),e(g,lt),e(g,ki),e(ki,Si),e(g,ML),b(He,Nf,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Ri),e(Ri,Bn),e(Oe,EL),e(Oe,In),e(In,Nn),e(Oe,CL),e(Oe,Pi),e(Pi,qn),e(Oe,wL),e(Oe,Bi),e(Bi,qf),e(Oe,Sa)},d(He){He&&t(g),He&&t(Nf),He&&t(Oe)}}}function nYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lYt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function iYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dYt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var wo=s(p);m=r(wo,"use_auth_token=True"),wo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(c){c&&t(g)}}}function cYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Yt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Yt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZYt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function aKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function nKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function sKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function lKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function iKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function dKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function cKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function fKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function mKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function gKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function hKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function pKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function _Kt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function uKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function bKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function vKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function FKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function TKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function MKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function EKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function CKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function wKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function AKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function LKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function yKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function xKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function $Kt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function kKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function SKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function RKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function PKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function BKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function IKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function NKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function qKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function jKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function DKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function GKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function OKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function VKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function XKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function zKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function WKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function QKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function HKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function UKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function JKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function YKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function KKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function ZKt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function eZt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function oZt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function rZt($){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(c),T(m.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,p,h),M(m,c,h),_=!0},p:j,i(c){_||(E(m.$$.fragment,c),_=!0)},o(c){C(m.$$.fragment,c),_=!1},d(c){c&&t(g),c&&t(p),w(m,c)}}}function tZt($){let g,v,p,m,_,c,h,wo,$i,If,lt,ki,Si,ML,Nf,Oe,Qe,Ri,Bn,EL,In,Nn,CL,Pi,qn,wL,Bi,qf,Sa,He,Ae,nR,Ii,sR,lR,Ao,Ra,iR,jf,dR,XUe,xze,Ni,Df,une,AL,zUe,bne,WUe,$ze,jn,QUe,vne,HUe,UUe,Fne,JUe,YUe,kze,LL,Sze,cR,KUe,Rze,Gf,Pze,qi,Of,Tne,yL,ZUe,Mne,eJe,Bze,Lo,xL,oJe,$L,rJe,fR,tJe,aJe,nJe,kL,sJe,Ene,lJe,iJe,dJe,yr,SL,cJe,Cne,fJe,mJe,ji,gJe,wne,hJe,pJe,Ane,_Je,uJe,bJe,A,Vf,Lne,vJe,FJe,mR,TJe,MJe,EJe,Xf,yne,CJe,wJe,gR,AJe,LJe,yJe,zf,xne,xJe,$Je,hR,kJe,SJe,RJe,Wf,$ne,PJe,BJe,pR,IJe,NJe,qJe,Qf,kne,jJe,DJe,_R,GJe,OJe,VJe,Hf,Sne,XJe,zJe,uR,WJe,QJe,HJe,Uf,Rne,UJe,JJe,bR,YJe,KJe,ZJe,Jf,Pne,eYe,oYe,vR,rYe,tYe,aYe,Yf,Bne,nYe,sYe,FR,lYe,iYe,dYe,Kf,Ine,cYe,fYe,TR,mYe,gYe,hYe,Zf,Nne,pYe,_Ye,MR,uYe,bYe,vYe,em,qne,FYe,TYe,ER,MYe,EYe,CYe,om,jne,wYe,AYe,CR,LYe,yYe,xYe,rm,Dne,$Ye,kYe,wR,SYe,RYe,PYe,tm,Gne,BYe,IYe,AR,NYe,qYe,jYe,am,One,DYe,GYe,LR,OYe,VYe,XYe,nm,Vne,zYe,WYe,yR,QYe,HYe,UYe,sm,Xne,JYe,YYe,xR,KYe,ZYe,eKe,lm,zne,oKe,rKe,$R,tKe,aKe,nKe,im,Wne,sKe,lKe,kR,iKe,dKe,cKe,dm,Qne,fKe,mKe,SR,gKe,hKe,pKe,cm,Hne,_Ke,uKe,RR,bKe,vKe,FKe,fm,Une,TKe,MKe,PR,EKe,CKe,wKe,mm,Jne,AKe,LKe,BR,yKe,xKe,$Ke,gm,Yne,kKe,SKe,IR,RKe,PKe,BKe,hm,Kne,IKe,NKe,NR,qKe,jKe,DKe,pm,Zne,GKe,OKe,qR,VKe,XKe,zKe,_m,ese,WKe,QKe,jR,HKe,UKe,JKe,um,ose,YKe,KKe,DR,ZKe,eZe,oZe,bm,rse,rZe,tZe,GR,aZe,nZe,sZe,vm,tse,lZe,iZe,OR,dZe,cZe,fZe,Fm,ase,mZe,gZe,VR,hZe,pZe,_Ze,Tm,nse,uZe,bZe,XR,vZe,FZe,TZe,Mm,sse,MZe,EZe,zR,CZe,wZe,AZe,Em,lse,LZe,yZe,WR,xZe,$Ze,kZe,Cm,ise,SZe,RZe,QR,PZe,BZe,IZe,wm,dse,NZe,qZe,HR,jZe,DZe,GZe,Am,cse,OZe,VZe,UR,XZe,zZe,WZe,Lm,fse,QZe,HZe,JR,UZe,JZe,YZe,ym,mse,KZe,ZZe,YR,eeo,oeo,reo,xm,gse,teo,aeo,KR,neo,seo,leo,$m,hse,ieo,deo,ZR,ceo,feo,meo,km,pse,geo,heo,eP,peo,_eo,ueo,Sm,_se,beo,veo,oP,Feo,Teo,Meo,Rm,use,Eeo,Ceo,rP,weo,Aeo,Leo,Pm,bse,yeo,xeo,tP,$eo,keo,Seo,Bm,vse,Reo,Peo,aP,Beo,Ieo,Neo,Im,Fse,qeo,jeo,nP,Deo,Geo,Oeo,Nm,Tse,Veo,Xeo,sP,zeo,Weo,Qeo,qm,Mse,Heo,Ueo,lP,Jeo,Yeo,Keo,jm,Ese,Zeo,eoo,iP,ooo,roo,too,Dm,Cse,aoo,noo,dP,soo,loo,ioo,Gm,wse,doo,coo,cP,foo,moo,goo,Om,Ase,hoo,poo,fP,_oo,uoo,boo,Vm,Lse,voo,Foo,mP,Too,Moo,Eoo,Xm,yse,Coo,woo,gP,Aoo,Loo,yoo,zm,xse,xoo,$oo,hP,koo,Soo,Roo,Wm,$se,Poo,Boo,pP,Ioo,Noo,qoo,Qm,kse,joo,Doo,_P,Goo,Ooo,Voo,Hm,Sse,Xoo,zoo,uP,Woo,Qoo,Hoo,Um,Rse,Uoo,Joo,bP,Yoo,Koo,Zoo,Jm,Pse,ero,oro,vP,rro,tro,aro,Ym,Bse,nro,sro,FP,lro,iro,dro,Km,Ise,cro,fro,TP,mro,gro,hro,Zm,Nse,pro,_ro,MP,uro,bro,vro,eg,qse,Fro,Tro,EP,Mro,Ero,Cro,og,jse,wro,Aro,CP,Lro,yro,xro,rg,Dse,$ro,kro,wP,Sro,Rro,Pro,tg,Gse,Bro,Iro,AP,Nro,qro,jro,ag,Ose,Dro,Gro,LP,Oro,Vro,Xro,ng,Vse,zro,Wro,yP,Qro,Hro,Uro,sg,Xse,Jro,Yro,xP,Kro,Zro,eto,lg,zse,oto,rto,$P,tto,ato,nto,ig,Wse,sto,lto,kP,ito,dto,cto,dg,Qse,fto,mto,SP,gto,hto,pto,cg,Hse,_to,uto,RP,bto,vto,Fto,fg,Use,Tto,Mto,PP,Eto,Cto,wto,mg,Jse,Ato,Lto,BP,yto,xto,$to,gg,Yse,kto,Sto,IP,Rto,Pto,Bto,hg,Kse,Ito,Nto,NP,qto,jto,Dto,pg,Zse,Gto,Oto,qP,Vto,Xto,zto,_g,ele,Wto,Qto,jP,Hto,Uto,Jto,ug,ole,Yto,Kto,DP,Zto,eao,oao,bg,rle,rao,tao,GP,aao,nao,sao,vg,tle,lao,iao,OP,dao,cao,fao,Fg,ale,mao,gao,VP,hao,pao,_ao,Tg,nle,uao,bao,XP,vao,Fao,Tao,Mg,sle,Mao,Eao,zP,Cao,wao,Aao,Eg,lle,Lao,yao,WP,xao,$ao,kao,Cg,ile,Sao,Rao,QP,Pao,Bao,Iao,wg,dle,Nao,qao,HP,jao,Dao,Gao,Ag,cle,Oao,Vao,UP,Xao,zao,Wao,Lg,fle,Qao,Hao,JP,Uao,Jao,Yao,yg,mle,Kao,Zao,YP,eno,ono,rno,xg,gle,tno,ano,KP,nno,sno,lno,$g,hle,ino,dno,ZP,cno,fno,mno,kg,ple,gno,hno,eB,pno,_no,uno,Sg,_le,bno,vno,oB,Fno,Tno,Mno,Rg,ule,Eno,Cno,rB,wno,Ano,Lno,Pg,ble,yno,xno,tB,$no,kno,Sno,Bg,vle,Rno,Pno,aB,Bno,Ino,Nno,Ig,Fle,qno,jno,nB,Dno,Gno,Ono,Ng,Tle,Vno,Xno,sB,zno,Wno,Qno,qg,Mle,Hno,Uno,lB,Jno,Yno,Kno,jg,Ele,Zno,eso,iB,oso,rso,tso,Dg,Cle,aso,nso,dB,sso,lso,iso,Gg,wle,dso,cso,cB,fso,mso,gso,Og,Ale,hso,pso,fB,_so,uso,bso,Vg,Lle,vso,Fso,mB,Tso,Mso,Eso,Xg,yle,Cso,wso,gB,Aso,Lso,yso,zg,xle,xso,$so,hB,kso,Sso,Rso,Wg,$le,Pso,Bso,pB,Iso,Nso,qso,Qg,kle,jso,Dso,_B,Gso,Oso,Vso,Hg,Sle,Xso,zso,uB,Wso,Qso,Hso,Ug,Rle,Uso,Jso,bB,Yso,Kso,Zso,Jg,Ple,elo,olo,vB,rlo,tlo,alo,Yg,Ble,nlo,slo,FB,llo,ilo,dlo,Kg,Ile,clo,flo,TB,mlo,glo,hlo,Zg,Nle,plo,_lo,MB,ulo,blo,vlo,eh,qle,Flo,Tlo,EB,Mlo,Elo,Clo,oh,wlo,rh,RL,Alo,jle,Llo,Ize,Di,th,Dle,PL,ylo,Gle,xlo,Nze,yo,BL,$lo,IL,klo,CB,Slo,Rlo,Plo,NL,Blo,Ole,Ilo,Nlo,qlo,xr,qL,jlo,Vle,Dlo,Glo,Pa,Olo,Xle,Vlo,Xlo,zle,zlo,Wlo,Wle,Qlo,Hlo,Ulo,k,Dn,Qle,Jlo,Ylo,wB,Klo,Zlo,AB,eio,oio,rio,Gn,Hle,tio,aio,LB,nio,sio,yB,lio,iio,dio,On,Ule,cio,fio,xB,mio,gio,$B,hio,pio,_io,ah,Jle,uio,bio,kB,vio,Fio,Tio,Vn,Yle,Mio,Eio,SB,Cio,wio,RB,Aio,Lio,yio,nh,Kle,xio,$io,PB,kio,Sio,Rio,sh,Zle,Pio,Bio,BB,Iio,Nio,qio,lh,eie,jio,Dio,IB,Gio,Oio,Vio,Xn,oie,Xio,zio,NB,Wio,Qio,qB,Hio,Uio,Jio,zn,rie,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,Wn,tie,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,ih,aie,fdo,mdo,VB,gdo,hdo,pdo,dh,nie,_do,udo,XB,bdo,vdo,Fdo,ch,sie,Tdo,Mdo,zB,Edo,Cdo,wdo,Qn,lie,Ado,Ldo,WB,ydo,xdo,QB,$do,kdo,Sdo,fh,iie,Rdo,Pdo,HB,Bdo,Ido,Ndo,Hn,die,qdo,jdo,UB,Ddo,Gdo,JB,Odo,Vdo,Xdo,Un,cie,zdo,Wdo,YB,Qdo,Hdo,KB,Udo,Jdo,Ydo,Jn,fie,Kdo,Zdo,ZB,eco,oco,eI,rco,tco,aco,Yn,mie,nco,sco,oI,lco,ico,rI,dco,cco,fco,mh,gie,mco,gco,tI,hco,pco,_co,Kn,hie,uco,bco,aI,vco,Fco,nI,Tco,Mco,Eco,Zn,pie,Cco,wco,sI,Aco,Lco,lI,yco,xco,$co,es,_ie,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,os,uie,qco,jco,cI,Dco,Gco,fI,Oco,Vco,Xco,rs,bie,zco,Wco,mI,Qco,Hco,gI,Uco,Jco,Yco,ts,vie,Kco,Zco,hI,efo,ofo,pI,rfo,tfo,afo,gh,Fie,nfo,sfo,_I,lfo,ifo,dfo,as,Tie,cfo,ffo,uI,mfo,gfo,bI,hfo,pfo,_fo,hh,Mie,ufo,bfo,vI,vfo,Ffo,Tfo,ns,Eie,Mfo,Efo,FI,Cfo,wfo,TI,Afo,Lfo,yfo,ss,Cie,xfo,$fo,MI,kfo,Sfo,EI,Rfo,Pfo,Bfo,ls,wie,Ifo,Nfo,CI,qfo,jfo,wI,Dfo,Gfo,Ofo,ph,Aie,Vfo,Xfo,AI,zfo,Wfo,Qfo,is,Lie,Hfo,Ufo,LI,Jfo,Yfo,yI,Kfo,Zfo,emo,ds,yie,omo,rmo,xI,tmo,amo,$I,nmo,smo,lmo,cs,xie,imo,dmo,kI,cmo,fmo,SI,mmo,gmo,hmo,_h,$ie,pmo,_mo,RI,umo,bmo,vmo,fs,kie,Fmo,Tmo,PI,Mmo,Emo,BI,Cmo,wmo,Amo,ms,Sie,Lmo,ymo,II,xmo,$mo,NI,kmo,Smo,Rmo,gs,Rie,Pmo,Bmo,qI,Imo,Nmo,jI,qmo,jmo,Dmo,hs,Pie,Gmo,Omo,DI,Vmo,Xmo,GI,zmo,Wmo,Qmo,ps,Bie,Hmo,Umo,OI,Jmo,Ymo,VI,Kmo,Zmo,ego,_s,Iie,ogo,rgo,XI,tgo,ago,zI,ngo,sgo,lgo,us,Nie,igo,dgo,WI,cgo,fgo,QI,mgo,ggo,hgo,bs,qie,pgo,_go,HI,ugo,bgo,UI,vgo,Fgo,Tgo,uh,jie,Mgo,Ego,JI,Cgo,wgo,Ago,vs,Die,Lgo,ygo,YI,xgo,$go,KI,kgo,Sgo,Rgo,bh,Gie,Pgo,Bgo,ZI,Igo,Ngo,qgo,vh,Oie,jgo,Dgo,eN,Ggo,Ogo,Vgo,Fs,Vie,Xgo,zgo,oN,Wgo,Qgo,rN,Hgo,Ugo,Jgo,Ts,Xie,Ygo,Kgo,tN,Zgo,eho,aN,oho,rho,tho,Ms,zie,aho,nho,nN,sho,lho,sN,iho,dho,cho,Fh,Wie,fho,mho,lN,gho,hho,pho,Es,Qie,_ho,uho,iN,bho,vho,dN,Fho,Tho,Mho,Cs,Hie,Eho,Cho,cN,who,Aho,fN,Lho,yho,xho,ws,Uie,$ho,kho,mN,Sho,Rho,gN,Pho,Bho,Iho,As,Jie,Nho,qho,hN,jho,Dho,pN,Gho,Oho,Vho,Ls,Yie,Xho,zho,_N,Who,Qho,uN,Hho,Uho,Jho,ys,Kie,Yho,Kho,bN,Zho,epo,vN,opo,rpo,tpo,xs,Zie,apo,npo,FN,spo,lpo,TN,ipo,dpo,cpo,$s,ede,fpo,mpo,MN,gpo,hpo,EN,ppo,_po,upo,Th,ode,bpo,vpo,CN,Fpo,Tpo,Mpo,ks,rde,Epo,Cpo,wN,wpo,Apo,AN,Lpo,ypo,xpo,Ss,tde,$po,kpo,LN,Spo,Rpo,yN,Ppo,Bpo,Ipo,Mh,ade,Npo,qpo,xN,jpo,Dpo,Gpo,Eh,nde,Opo,Vpo,$N,Xpo,zpo,Wpo,Ch,sde,Qpo,Hpo,kN,Upo,Jpo,Ypo,wh,lde,Kpo,Zpo,SN,e_o,o_o,r_o,Rs,ide,t_o,a_o,RN,n_o,s_o,PN,l_o,i_o,d_o,Ah,dde,c_o,f_o,BN,m_o,g_o,h_o,Ps,cde,p_o,__o,IN,u_o,b_o,NN,v_o,F_o,T_o,Bs,fde,M_o,E_o,qN,C_o,w_o,jN,A_o,L_o,y_o,Is,mde,x_o,$_o,DN,k_o,S_o,GN,R_o,P_o,B_o,Ns,gde,I_o,N_o,ON,q_o,j_o,VN,D_o,G_o,O_o,qs,hde,V_o,X_o,XN,z_o,W_o,zN,Q_o,H_o,U_o,js,pde,J_o,Y_o,WN,K_o,Z_o,QN,euo,ouo,ruo,Lh,_de,tuo,auo,HN,nuo,suo,luo,yh,ude,iuo,duo,UN,cuo,fuo,muo,Ds,bde,guo,huo,JN,puo,_uo,YN,uuo,buo,vuo,Gs,vde,Fuo,Tuo,KN,Muo,Euo,ZN,Cuo,wuo,Auo,Os,Fde,Luo,yuo,eq,xuo,$uo,oq,kuo,Suo,Ruo,xh,Tde,Puo,Buo,rq,Iuo,Nuo,quo,$h,Mde,juo,Duo,tq,Guo,Ouo,Vuo,kh,Ede,Xuo,zuo,aq,Wuo,Quo,Huo,Vs,Cde,Uuo,Juo,nq,Yuo,Kuo,sq,Zuo,e2o,o2o,Xs,wde,r2o,t2o,lq,a2o,n2o,iq,s2o,l2o,i2o,Sh,Ade,d2o,c2o,dq,f2o,m2o,g2o,Rh,Lde,h2o,p2o,cq,_2o,u2o,b2o,Ph,yde,v2o,F2o,fq,T2o,M2o,E2o,zs,xde,C2o,w2o,mq,A2o,L2o,gq,y2o,x2o,$2o,Bh,$de,k2o,S2o,hq,R2o,P2o,B2o,Ih,kde,I2o,N2o,pq,q2o,j2o,D2o,Ws,Sde,G2o,O2o,_q,V2o,X2o,uq,z2o,W2o,Q2o,Qs,Rde,H2o,U2o,bq,J2o,Y2o,vq,K2o,Z2o,e1o,Hs,Pde,o1o,r1o,Fq,t1o,a1o,Tq,n1o,s1o,l1o,Us,Bde,i1o,d1o,Mq,c1o,f1o,Eq,m1o,g1o,h1o,Nh,p1o,qh,jL,_1o,Ide,u1o,qze,Gi,jh,Nde,DL,b1o,qde,v1o,jze,xo,GL,F1o,OL,T1o,Cq,M1o,E1o,C1o,VL,w1o,jde,A1o,L1o,y1o,Ue,XL,x1o,Dde,$1o,k1o,Ba,S1o,Gde,R1o,P1o,Ode,B1o,I1o,Vde,N1o,q1o,j1o,J,Dh,Xde,D1o,G1o,wq,O1o,V1o,X1o,Gh,zde,z1o,W1o,Aq,Q1o,H1o,U1o,Oh,Wde,J1o,Y1o,Lq,K1o,Z1o,e4o,Vh,Qde,o4o,r4o,yq,t4o,a4o,n4o,Xh,Hde,s4o,l4o,xq,i4o,d4o,c4o,zh,Ude,f4o,m4o,$q,g4o,h4o,p4o,Wh,Jde,_4o,u4o,kq,b4o,v4o,F4o,Qh,Yde,T4o,M4o,Sq,E4o,C4o,w4o,Hh,Kde,A4o,L4o,Rq,y4o,x4o,$4o,Uh,Zde,k4o,S4o,Pq,R4o,P4o,B4o,Jh,ece,I4o,N4o,Bq,q4o,j4o,D4o,Yh,oce,G4o,O4o,Iq,V4o,X4o,z4o,Kh,rce,W4o,Q4o,Nq,H4o,U4o,J4o,Zh,tce,Y4o,K4o,qq,Z4o,ebo,obo,ep,ace,rbo,tbo,jq,abo,nbo,sbo,op,nce,lbo,ibo,Dq,dbo,cbo,fbo,rp,sce,mbo,gbo,Gq,hbo,pbo,_bo,tp,lce,ubo,bbo,Oq,vbo,Fbo,Tbo,ap,ice,Mbo,Ebo,Vq,Cbo,wbo,Abo,np,dce,Lbo,ybo,Xq,xbo,$bo,kbo,sp,cce,Sbo,Rbo,zq,Pbo,Bbo,Ibo,lp,fce,Nbo,qbo,Wq,jbo,Dbo,Gbo,ip,mce,Obo,Vbo,Qq,Xbo,zbo,Wbo,dp,gce,Qbo,Hbo,Hq,Ubo,Jbo,Ybo,cp,hce,Kbo,Zbo,Uq,evo,ovo,rvo,fp,pce,tvo,avo,Jq,nvo,svo,lvo,mp,_ce,ivo,dvo,Yq,cvo,fvo,mvo,gp,uce,gvo,hvo,Kq,pvo,_vo,uvo,hp,bce,bvo,vvo,Zq,Fvo,Tvo,Mvo,pp,vce,Evo,Cvo,ej,wvo,Avo,Lvo,_p,Fce,yvo,xvo,oj,$vo,kvo,Svo,up,Tce,Rvo,Pvo,rj,Bvo,Ivo,Nvo,bp,Mce,qvo,jvo,tj,Dvo,Gvo,Ovo,vp,Ece,Vvo,Xvo,aj,zvo,Wvo,Qvo,Fp,Cce,Hvo,Uvo,nj,Jvo,Yvo,Kvo,Tp,wce,Zvo,e0o,sj,o0o,r0o,t0o,Mp,a0o,Ep,n0o,Cp,zL,s0o,Ace,l0o,Dze,Oi,wp,Lce,WL,i0o,yce,d0o,Gze,$o,QL,c0o,HL,f0o,lj,m0o,g0o,h0o,UL,p0o,xce,_0o,u0o,b0o,Je,JL,v0o,$ce,F0o,T0o,Vi,M0o,kce,E0o,C0o,Sce,w0o,A0o,L0o,fe,Ap,Rce,y0o,x0o,ij,$0o,k0o,S0o,Lp,Pce,R0o,P0o,dj,B0o,I0o,N0o,yp,Bce,q0o,j0o,cj,D0o,G0o,O0o,xp,Ice,V0o,X0o,fj,z0o,W0o,Q0o,$p,Nce,H0o,U0o,mj,J0o,Y0o,K0o,kp,qce,Z0o,eFo,gj,oFo,rFo,tFo,Sp,jce,aFo,nFo,hj,sFo,lFo,iFo,Rp,Dce,dFo,cFo,pj,fFo,mFo,gFo,Pp,Gce,hFo,pFo,_j,_Fo,uFo,bFo,Bp,Oce,vFo,FFo,uj,TFo,MFo,EFo,Ip,Vce,CFo,wFo,bj,AFo,LFo,yFo,Np,Xce,xFo,$Fo,vj,kFo,SFo,RFo,qp,zce,PFo,BFo,Fj,IFo,NFo,qFo,jp,Wce,jFo,DFo,Tj,GFo,OFo,VFo,Dp,Qce,XFo,zFo,Mj,WFo,QFo,HFo,Gp,Hce,UFo,JFo,Ej,YFo,KFo,ZFo,Op,Uce,eTo,oTo,Cj,rTo,tTo,aTo,Vp,Jce,nTo,sTo,wj,lTo,iTo,dTo,Xp,Yce,cTo,fTo,Aj,mTo,gTo,hTo,zp,pTo,Wp,_To,Qp,YL,uTo,Kce,bTo,Oze,Xi,Hp,Zce,KL,vTo,efe,FTo,Vze,ko,ZL,TTo,zi,MTo,Lj,ETo,CTo,yj,wTo,ATo,LTo,ey,yTo,ofe,xTo,$To,kTo,it,oy,STo,rfe,RTo,PTo,Wi,BTo,tfe,ITo,NTo,xj,qTo,jTo,DTo,Up,GTo,Ye,ry,OTo,afe,VTo,XTo,Ia,zTo,nfe,WTo,QTo,sfe,HTo,UTo,lfe,JTo,YTo,KTo,y,Jp,ife,ZTo,e8o,$j,o8o,r8o,t8o,Yp,dfe,a8o,n8o,kj,s8o,l8o,i8o,Kp,cfe,d8o,c8o,Sj,f8o,m8o,g8o,Zp,ffe,h8o,p8o,Rj,_8o,u8o,b8o,e_,mfe,v8o,F8o,Pj,T8o,M8o,E8o,o_,gfe,C8o,w8o,Bj,A8o,L8o,y8o,r_,hfe,x8o,$8o,Ij,k8o,S8o,R8o,t_,pfe,P8o,B8o,Nj,I8o,N8o,q8o,a_,_fe,j8o,D8o,qj,G8o,O8o,V8o,n_,ufe,X8o,z8o,jj,W8o,Q8o,H8o,s_,bfe,U8o,J8o,Dj,Y8o,K8o,Z8o,l_,vfe,eMo,oMo,Gj,rMo,tMo,aMo,i_,Ffe,nMo,sMo,Oj,lMo,iMo,dMo,d_,Tfe,cMo,fMo,Vj,mMo,gMo,hMo,c_,Mfe,pMo,_Mo,Xj,uMo,bMo,vMo,f_,Efe,FMo,TMo,zj,MMo,EMo,CMo,m_,Cfe,wMo,AMo,Wj,LMo,yMo,xMo,g_,wfe,$Mo,kMo,Qj,SMo,RMo,PMo,h_,Afe,BMo,IMo,Hj,NMo,qMo,jMo,p_,Lfe,DMo,GMo,Uj,OMo,VMo,XMo,__,yfe,zMo,WMo,Jj,QMo,HMo,UMo,u_,xfe,JMo,YMo,Yj,KMo,ZMo,eEo,b_,$fe,oEo,rEo,Kj,tEo,aEo,nEo,v_,kfe,sEo,lEo,Zj,iEo,dEo,cEo,F_,Sfe,fEo,mEo,eD,gEo,hEo,pEo,T_,Rfe,_Eo,uEo,oD,bEo,vEo,FEo,M_,Pfe,TEo,MEo,rD,EEo,CEo,wEo,E_,Bfe,AEo,LEo,tD,yEo,xEo,$Eo,C_,Ife,kEo,SEo,aD,REo,PEo,BEo,w_,Nfe,IEo,NEo,nD,qEo,jEo,DEo,A_,qfe,GEo,OEo,sD,VEo,XEo,zEo,L_,jfe,WEo,QEo,lD,HEo,UEo,JEo,y_,Dfe,YEo,KEo,iD,ZEo,eCo,oCo,x_,Gfe,rCo,tCo,dD,aCo,nCo,sCo,Js,Ofe,lCo,iCo,cD,dCo,cCo,fD,fCo,mCo,gCo,$_,Vfe,hCo,pCo,mD,_Co,uCo,bCo,k_,Xfe,vCo,FCo,gD,TCo,MCo,ECo,S_,zfe,CCo,wCo,hD,ACo,LCo,yCo,R_,Wfe,xCo,$Co,pD,kCo,SCo,RCo,P_,Qfe,PCo,BCo,_D,ICo,NCo,qCo,B_,Hfe,jCo,DCo,uD,GCo,OCo,VCo,I_,Ufe,XCo,zCo,bD,WCo,QCo,HCo,N_,Jfe,UCo,JCo,vD,YCo,KCo,ZCo,q_,Yfe,e5o,o5o,FD,r5o,t5o,a5o,j_,Kfe,n5o,s5o,TD,l5o,i5o,d5o,D_,Zfe,c5o,f5o,MD,m5o,g5o,h5o,G_,eme,p5o,_5o,ED,u5o,b5o,v5o,O_,ome,F5o,T5o,CD,M5o,E5o,C5o,V_,rme,w5o,A5o,wD,L5o,y5o,x5o,X_,tme,$5o,k5o,AD,S5o,R5o,P5o,z_,ame,B5o,I5o,LD,N5o,q5o,j5o,W_,nme,D5o,G5o,yD,O5o,V5o,X5o,Q_,sme,z5o,W5o,xD,Q5o,H5o,U5o,H_,lme,J5o,Y5o,$D,K5o,Z5o,e3o,U_,ime,o3o,r3o,kD,t3o,a3o,n3o,J_,dme,s3o,l3o,SD,i3o,d3o,c3o,Y_,cme,f3o,m3o,RD,g3o,h3o,p3o,K_,fme,_3o,u3o,PD,b3o,v3o,F3o,Z_,mme,T3o,M3o,BD,E3o,C3o,w3o,eu,gme,A3o,L3o,ID,y3o,x3o,$3o,ou,hme,k3o,S3o,ND,R3o,P3o,B3o,ru,pme,I3o,N3o,qD,q3o,j3o,D3o,tu,_me,G3o,O3o,jD,V3o,X3o,z3o,au,ume,W3o,Q3o,DD,H3o,U3o,J3o,nu,bme,Y3o,K3o,GD,Z3o,ewo,owo,su,vme,rwo,two,OD,awo,nwo,swo,lu,Fme,lwo,iwo,VD,dwo,cwo,fwo,iu,Tme,mwo,gwo,XD,hwo,pwo,_wo,du,Mme,uwo,bwo,zD,vwo,Fwo,Two,cu,Eme,Mwo,Ewo,WD,Cwo,wwo,Awo,fu,Cme,Lwo,ywo,QD,xwo,$wo,kwo,mu,wme,Swo,Rwo,HD,Pwo,Bwo,Iwo,gu,Ame,Nwo,qwo,UD,jwo,Dwo,Gwo,hu,Lme,Owo,Vwo,JD,Xwo,zwo,Wwo,pu,yme,Qwo,Hwo,YD,Uwo,Jwo,Ywo,_u,xme,Kwo,Zwo,KD,e6o,o6o,r6o,uu,$me,t6o,a6o,ZD,n6o,s6o,l6o,bu,kme,i6o,d6o,eG,c6o,f6o,m6o,vu,Sme,g6o,h6o,oG,p6o,_6o,u6o,Fu,Rme,b6o,v6o,rG,F6o,T6o,M6o,Tu,Pme,E6o,C6o,tG,w6o,A6o,L6o,Mu,Bme,y6o,x6o,aG,$6o,k6o,S6o,Eu,Ime,R6o,P6o,nG,B6o,I6o,N6o,Cu,Nme,q6o,j6o,sG,D6o,G6o,O6o,wu,qme,V6o,X6o,lG,z6o,W6o,Q6o,Au,jme,H6o,U6o,iG,J6o,Y6o,K6o,Lu,Dme,Z6o,eAo,dG,oAo,rAo,tAo,yu,Gme,aAo,nAo,cG,sAo,lAo,iAo,xu,Ome,dAo,cAo,fG,fAo,mAo,gAo,$u,Vme,hAo,pAo,mG,_Ao,uAo,bAo,ku,Xme,vAo,FAo,gG,TAo,MAo,EAo,Su,zme,CAo,wAo,hG,AAo,LAo,yAo,Ru,Wme,xAo,$Ao,pG,kAo,SAo,RAo,Pu,Qme,PAo,BAo,_G,IAo,NAo,qAo,Bu,Hme,jAo,DAo,uG,GAo,OAo,VAo,Iu,Ume,XAo,zAo,bG,WAo,QAo,HAo,Nu,Jme,UAo,JAo,vG,YAo,KAo,ZAo,qu,Yme,e7o,o7o,FG,r7o,t7o,a7o,ju,Kme,n7o,s7o,TG,l7o,i7o,d7o,Du,Zme,c7o,f7o,MG,m7o,g7o,h7o,Gu,ege,p7o,_7o,EG,u7o,b7o,v7o,Ou,oge,F7o,T7o,CG,M7o,E7o,C7o,Vu,rge,w7o,A7o,wG,L7o,y7o,x7o,Xu,tge,$7o,k7o,AG,S7o,R7o,P7o,zu,age,B7o,I7o,LG,N7o,q7o,j7o,Wu,nge,D7o,G7o,yG,O7o,V7o,X7o,Qu,sge,z7o,W7o,xG,Q7o,H7o,U7o,Hu,lge,J7o,Y7o,$G,K7o,Z7o,eLo,Uu,ige,oLo,rLo,kG,tLo,aLo,nLo,Ju,dge,sLo,lLo,SG,iLo,dLo,cLo,Yu,cge,fLo,mLo,RG,gLo,hLo,pLo,Ku,fge,_Lo,uLo,PG,bLo,vLo,FLo,Zu,mge,TLo,MLo,BG,ELo,CLo,wLo,e2,gge,ALo,LLo,IG,yLo,xLo,$Lo,o2,kLo,hge,SLo,RLo,pge,PLo,BLo,r2,Xze,Qi,t2,_ge,ty,ILo,uge,NLo,zze,So,ay,qLo,Hi,jLo,NG,DLo,GLo,qG,OLo,VLo,XLo,ny,zLo,bge,WLo,QLo,HLo,dt,sy,ULo,vge,JLo,YLo,Ui,KLo,Fge,ZLo,eyo,jG,oyo,ryo,tyo,a2,ayo,Ke,ly,nyo,Tge,syo,lyo,Na,iyo,Mge,dyo,cyo,Ege,fyo,myo,Cge,gyo,hyo,pyo,G,n2,wge,_yo,uyo,DG,byo,vyo,Fyo,s2,Age,Tyo,Myo,GG,Eyo,Cyo,wyo,l2,Lge,Ayo,Lyo,OG,yyo,xyo,$yo,i2,yge,kyo,Syo,VG,Ryo,Pyo,Byo,d2,xge,Iyo,Nyo,XG,qyo,jyo,Dyo,c2,$ge,Gyo,Oyo,zG,Vyo,Xyo,zyo,f2,kge,Wyo,Qyo,WG,Hyo,Uyo,Jyo,m2,Sge,Yyo,Kyo,QG,Zyo,e9o,o9o,g2,Rge,r9o,t9o,HG,a9o,n9o,s9o,h2,Pge,l9o,i9o,UG,d9o,c9o,f9o,p2,Bge,m9o,g9o,JG,h9o,p9o,_9o,_2,Ige,u9o,b9o,YG,v9o,F9o,T9o,u2,Nge,M9o,E9o,KG,C9o,w9o,A9o,b2,qge,L9o,y9o,ZG,x9o,$9o,k9o,v2,jge,S9o,R9o,eO,P9o,B9o,I9o,F2,Dge,N9o,q9o,oO,j9o,D9o,G9o,T2,Gge,O9o,V9o,rO,X9o,z9o,W9o,M2,Oge,Q9o,H9o,tO,U9o,J9o,Y9o,E2,Vge,K9o,Z9o,aO,exo,oxo,rxo,C2,Xge,txo,axo,nO,nxo,sxo,lxo,w2,zge,ixo,dxo,sO,cxo,fxo,mxo,A2,Wge,gxo,hxo,lO,pxo,_xo,uxo,L2,Qge,bxo,vxo,iO,Fxo,Txo,Mxo,y2,Hge,Exo,Cxo,dO,wxo,Axo,Lxo,x2,Uge,yxo,xxo,cO,$xo,kxo,Sxo,$2,Jge,Rxo,Pxo,fO,Bxo,Ixo,Nxo,k2,Yge,qxo,jxo,mO,Dxo,Gxo,Oxo,S2,Kge,Vxo,Xxo,gO,zxo,Wxo,Qxo,R2,Zge,Hxo,Uxo,hO,Jxo,Yxo,Kxo,P2,ehe,Zxo,e$o,pO,o$o,r$o,t$o,B2,ohe,a$o,n$o,_O,s$o,l$o,i$o,I2,rhe,d$o,c$o,uO,f$o,m$o,g$o,N2,the,h$o,p$o,bO,_$o,u$o,b$o,q2,ahe,v$o,F$o,vO,T$o,M$o,E$o,j2,nhe,C$o,w$o,FO,A$o,L$o,y$o,D2,she,x$o,$$o,TO,k$o,S$o,R$o,G2,lhe,P$o,B$o,MO,I$o,N$o,q$o,O2,ihe,j$o,D$o,EO,G$o,O$o,V$o,V2,dhe,X$o,z$o,CO,W$o,Q$o,H$o,X2,che,U$o,J$o,wO,Y$o,K$o,Z$o,z2,fhe,eko,oko,AO,rko,tko,ako,W2,mhe,nko,sko,LO,lko,iko,dko,Q2,ghe,cko,fko,yO,mko,gko,hko,H2,hhe,pko,_ko,xO,uko,bko,vko,U2,phe,Fko,Tko,$O,Mko,Eko,Cko,J2,_he,wko,Ako,kO,Lko,yko,xko,Y2,$ko,uhe,kko,Sko,bhe,Rko,Pko,K2,Wze,Ji,Z2,vhe,iy,Bko,Fhe,Iko,Qze,Ro,dy,Nko,Yi,qko,SO,jko,Dko,RO,Gko,Oko,Vko,cy,Xko,The,zko,Wko,Qko,ct,fy,Hko,Mhe,Uko,Jko,Ki,Yko,Ehe,Kko,Zko,PO,eSo,oSo,rSo,e1,tSo,Ze,my,aSo,Che,nSo,sSo,qa,lSo,whe,iSo,dSo,Ahe,cSo,fSo,Lhe,mSo,gSo,hSo,z,o1,yhe,pSo,_So,BO,uSo,bSo,vSo,r1,xhe,FSo,TSo,IO,MSo,ESo,CSo,t1,$he,wSo,ASo,NO,LSo,ySo,xSo,a1,khe,$So,kSo,qO,SSo,RSo,PSo,n1,She,BSo,ISo,jO,NSo,qSo,jSo,s1,Rhe,DSo,GSo,DO,OSo,VSo,XSo,l1,Phe,zSo,WSo,GO,QSo,HSo,USo,i1,Bhe,JSo,YSo,OO,KSo,ZSo,eRo,d1,Ihe,oRo,rRo,VO,tRo,aRo,nRo,c1,Nhe,sRo,lRo,XO,iRo,dRo,cRo,f1,qhe,fRo,mRo,zO,gRo,hRo,pRo,m1,jhe,_Ro,uRo,WO,bRo,vRo,FRo,g1,Dhe,TRo,MRo,QO,ERo,CRo,wRo,h1,Ghe,ARo,LRo,HO,yRo,xRo,$Ro,p1,Ohe,kRo,SRo,UO,RRo,PRo,BRo,_1,Vhe,IRo,NRo,JO,qRo,jRo,DRo,u1,Xhe,GRo,ORo,YO,VRo,XRo,zRo,b1,zhe,WRo,QRo,KO,HRo,URo,JRo,v1,Whe,YRo,KRo,ZO,ZRo,ePo,oPo,F1,Qhe,rPo,tPo,eV,aPo,nPo,sPo,T1,Hhe,lPo,iPo,oV,dPo,cPo,fPo,M1,Uhe,mPo,gPo,rV,hPo,pPo,_Po,E1,Jhe,uPo,bPo,tV,vPo,FPo,TPo,C1,Yhe,MPo,EPo,aV,CPo,wPo,APo,w1,Khe,LPo,yPo,nV,xPo,$Po,kPo,A1,Zhe,SPo,RPo,sV,PPo,BPo,IPo,L1,epe,NPo,qPo,lV,jPo,DPo,GPo,y1,ope,OPo,VPo,iV,XPo,zPo,WPo,x1,rpe,QPo,HPo,dV,UPo,JPo,YPo,$1,tpe,KPo,ZPo,cV,eBo,oBo,rBo,k1,ape,tBo,aBo,fV,nBo,sBo,lBo,S1,npe,iBo,dBo,mV,cBo,fBo,mBo,R1,spe,gBo,hBo,gV,pBo,_Bo,uBo,P1,lpe,bBo,vBo,hV,FBo,TBo,MBo,B1,ipe,EBo,CBo,pV,wBo,ABo,LBo,I1,dpe,yBo,xBo,_V,$Bo,kBo,SBo,N1,cpe,RBo,PBo,uV,BBo,IBo,NBo,q1,fpe,qBo,jBo,bV,DBo,GBo,OBo,j1,mpe,VBo,XBo,vV,zBo,WBo,QBo,D1,gpe,HBo,UBo,FV,JBo,YBo,KBo,G1,ZBo,hpe,eIo,oIo,ppe,rIo,tIo,O1,Hze,Zi,V1,_pe,gy,aIo,upe,nIo,Uze,Po,hy,sIo,ed,lIo,TV,iIo,dIo,MV,cIo,fIo,mIo,py,gIo,bpe,hIo,pIo,_Io,ft,_y,uIo,vpe,bIo,vIo,od,FIo,Fpe,TIo,MIo,EV,EIo,CIo,wIo,X1,AIo,eo,uy,LIo,Tpe,yIo,xIo,ja,$Io,Mpe,kIo,SIo,Epe,RIo,PIo,Cpe,BIo,IIo,NIo,Q,z1,wpe,qIo,jIo,CV,DIo,GIo,OIo,W1,Ape,VIo,XIo,wV,zIo,WIo,QIo,Q1,Lpe,HIo,UIo,AV,JIo,YIo,KIo,H1,ype,ZIo,eNo,LV,oNo,rNo,tNo,U1,xpe,aNo,nNo,yV,sNo,lNo,iNo,J1,$pe,dNo,cNo,xV,fNo,mNo,gNo,Y1,kpe,hNo,pNo,$V,_No,uNo,bNo,K1,Spe,vNo,FNo,kV,TNo,MNo,ENo,Z1,Rpe,CNo,wNo,SV,ANo,LNo,yNo,e4,Ppe,xNo,$No,RV,kNo,SNo,RNo,o4,Bpe,PNo,BNo,PV,INo,NNo,qNo,r4,Ipe,jNo,DNo,BV,GNo,ONo,VNo,t4,Npe,XNo,zNo,IV,WNo,QNo,HNo,a4,qpe,UNo,JNo,NV,YNo,KNo,ZNo,n4,jpe,eqo,oqo,qV,rqo,tqo,aqo,s4,Dpe,nqo,sqo,jV,lqo,iqo,dqo,l4,Gpe,cqo,fqo,DV,mqo,gqo,hqo,i4,Ope,pqo,_qo,GV,uqo,bqo,vqo,d4,Vpe,Fqo,Tqo,OV,Mqo,Eqo,Cqo,c4,Xpe,wqo,Aqo,VV,Lqo,yqo,xqo,f4,zpe,$qo,kqo,XV,Sqo,Rqo,Pqo,m4,Wpe,Bqo,Iqo,zV,Nqo,qqo,jqo,g4,Qpe,Dqo,Gqo,WV,Oqo,Vqo,Xqo,h4,Hpe,zqo,Wqo,QV,Qqo,Hqo,Uqo,p4,Upe,Jqo,Yqo,HV,Kqo,Zqo,ejo,_4,Jpe,ojo,rjo,UV,tjo,ajo,njo,u4,Ype,sjo,ljo,JV,ijo,djo,cjo,b4,Kpe,fjo,mjo,YV,gjo,hjo,pjo,v4,Zpe,_jo,ujo,KV,bjo,vjo,Fjo,F4,e_e,Tjo,Mjo,ZV,Ejo,Cjo,wjo,T4,o_e,Ajo,Ljo,eX,yjo,xjo,$jo,M4,r_e,kjo,Sjo,oX,Rjo,Pjo,Bjo,E4,t_e,Ijo,Njo,rX,qjo,jjo,Djo,C4,a_e,Gjo,Ojo,n_e,Vjo,Xjo,zjo,w4,s_e,Wjo,Qjo,tX,Hjo,Ujo,Jjo,A4,l_e,Yjo,Kjo,aX,Zjo,eDo,oDo,L4,i_e,rDo,tDo,nX,aDo,nDo,sDo,y4,d_e,lDo,iDo,sX,dDo,cDo,fDo,x4,mDo,c_e,gDo,hDo,f_e,pDo,_Do,$4,Jze,rd,k4,m_e,by,uDo,g_e,bDo,Yze,Bo,vy,vDo,td,FDo,lX,TDo,MDo,iX,EDo,CDo,wDo,Fy,ADo,h_e,LDo,yDo,xDo,mt,Ty,$Do,p_e,kDo,SDo,ad,RDo,__e,PDo,BDo,dX,IDo,NDo,qDo,S4,jDo,oo,My,DDo,u_e,GDo,ODo,Da,VDo,b_e,XDo,zDo,v_e,WDo,QDo,F_e,HDo,UDo,JDo,me,R4,T_e,YDo,KDo,cX,ZDo,eGo,oGo,P4,M_e,rGo,tGo,fX,aGo,nGo,sGo,B4,E_e,lGo,iGo,mX,dGo,cGo,fGo,I4,C_e,mGo,gGo,gX,hGo,pGo,_Go,N4,w_e,uGo,bGo,hX,vGo,FGo,TGo,q4,A_e,MGo,EGo,pX,CGo,wGo,AGo,j4,L_e,LGo,yGo,_X,xGo,$Go,kGo,D4,y_e,SGo,RGo,uX,PGo,BGo,IGo,G4,x_e,NGo,qGo,bX,jGo,DGo,GGo,O4,$_e,OGo,VGo,vX,XGo,zGo,WGo,V4,k_e,QGo,HGo,FX,UGo,JGo,YGo,X4,S_e,KGo,ZGo,TX,eOo,oOo,rOo,z4,R_e,tOo,aOo,MX,nOo,sOo,lOo,W4,P_e,iOo,dOo,EX,cOo,fOo,mOo,Q4,B_e,gOo,hOo,CX,pOo,_Oo,uOo,H4,I_e,bOo,vOo,wX,FOo,TOo,MOo,U4,N_e,EOo,COo,AX,wOo,AOo,LOo,J4,q_e,yOo,xOo,LX,$Oo,kOo,SOo,Y4,j_e,ROo,POo,yX,BOo,IOo,NOo,K4,qOo,D_e,jOo,DOo,G_e,GOo,OOo,Z4,Kze,nd,eb,O_e,Ey,VOo,V_e,XOo,Zze,Io,Cy,zOo,sd,WOo,xX,QOo,HOo,$X,UOo,JOo,YOo,wy,KOo,X_e,ZOo,eVo,oVo,gt,Ay,rVo,z_e,tVo,aVo,ld,nVo,W_e,sVo,lVo,kX,iVo,dVo,cVo,ob,fVo,ro,Ly,mVo,Q_e,gVo,hVo,Ga,pVo,H_e,_Vo,uVo,U_e,bVo,vVo,J_e,FVo,TVo,MVo,P,rb,Y_e,EVo,CVo,SX,wVo,AVo,LVo,tb,K_e,yVo,xVo,RX,$Vo,kVo,SVo,ab,Z_e,RVo,PVo,PX,BVo,IVo,NVo,nb,eue,qVo,jVo,BX,DVo,GVo,OVo,sb,oue,VVo,XVo,IX,zVo,WVo,QVo,lb,rue,HVo,UVo,NX,JVo,YVo,KVo,ib,tue,ZVo,eXo,qX,oXo,rXo,tXo,db,aue,aXo,nXo,jX,sXo,lXo,iXo,cb,nue,dXo,cXo,DX,fXo,mXo,gXo,fb,sue,hXo,pXo,GX,_Xo,uXo,bXo,mb,lue,vXo,FXo,OX,TXo,MXo,EXo,gb,iue,CXo,wXo,VX,AXo,LXo,yXo,hb,due,xXo,$Xo,XX,kXo,SXo,RXo,pb,cue,PXo,BXo,zX,IXo,NXo,qXo,_b,fue,jXo,DXo,WX,GXo,OXo,VXo,ub,mue,XXo,zXo,QX,WXo,QXo,HXo,bb,gue,UXo,JXo,HX,YXo,KXo,ZXo,vb,hue,ezo,ozo,UX,rzo,tzo,azo,Fb,pue,nzo,szo,JX,lzo,izo,dzo,Tb,_ue,czo,fzo,YX,mzo,gzo,hzo,Mb,uue,pzo,_zo,KX,uzo,bzo,vzo,Eb,bue,Fzo,Tzo,ZX,Mzo,Ezo,Czo,Cb,vue,wzo,Azo,ez,Lzo,yzo,xzo,wb,Fue,$zo,kzo,oz,Szo,Rzo,Pzo,Ab,Tue,Bzo,Izo,rz,Nzo,qzo,jzo,Lb,Mue,Dzo,Gzo,tz,Ozo,Vzo,Xzo,yb,Eue,zzo,Wzo,az,Qzo,Hzo,Uzo,xb,Cue,Jzo,Yzo,nz,Kzo,Zzo,eWo,$b,wue,oWo,rWo,sz,tWo,aWo,nWo,kb,Aue,sWo,lWo,lz,iWo,dWo,cWo,Sb,Lue,fWo,mWo,iz,gWo,hWo,pWo,Rb,yue,_Wo,uWo,dz,bWo,vWo,FWo,Pb,xue,TWo,MWo,cz,EWo,CWo,wWo,Bb,$ue,AWo,LWo,fz,yWo,xWo,$Wo,Ib,kue,kWo,SWo,mz,RWo,PWo,BWo,Nb,Sue,IWo,NWo,gz,qWo,jWo,DWo,qb,Rue,GWo,OWo,hz,VWo,XWo,zWo,jb,Pue,WWo,QWo,pz,HWo,UWo,JWo,Db,Bue,YWo,KWo,_z,ZWo,eQo,oQo,Gb,Iue,rQo,tQo,uz,aQo,nQo,sQo,Ob,Nue,lQo,iQo,bz,dQo,cQo,fQo,Vb,que,mQo,gQo,vz,hQo,pQo,_Qo,Xb,jue,uQo,bQo,Fz,vQo,FQo,TQo,zb,Due,MQo,EQo,Tz,CQo,wQo,AQo,Wb,Gue,LQo,yQo,Mz,xQo,$Qo,kQo,Qb,Oue,SQo,RQo,Ez,PQo,BQo,IQo,Hb,Vue,NQo,qQo,Cz,jQo,DQo,GQo,Ub,Xue,OQo,VQo,wz,XQo,zQo,WQo,Jb,zue,QQo,HQo,Az,UQo,JQo,YQo,Yb,Wue,KQo,ZQo,Lz,eHo,oHo,rHo,Kb,Que,tHo,aHo,yz,nHo,sHo,lHo,Zb,Hue,iHo,dHo,xz,cHo,fHo,mHo,ev,gHo,Uue,hHo,pHo,Jue,_Ho,uHo,ov,eWe,id,rv,Yue,yy,bHo,Kue,vHo,oWe,No,xy,FHo,dd,THo,$z,MHo,EHo,kz,CHo,wHo,AHo,$y,LHo,Zue,yHo,xHo,$Ho,ht,ky,kHo,e2e,SHo,RHo,cd,PHo,o2e,BHo,IHo,Sz,NHo,qHo,jHo,tv,DHo,to,Sy,GHo,r2e,OHo,VHo,Oa,XHo,t2e,zHo,WHo,a2e,QHo,HHo,n2e,UHo,JHo,YHo,Z,av,s2e,KHo,ZHo,Rz,eUo,oUo,rUo,nv,l2e,tUo,aUo,Pz,nUo,sUo,lUo,sv,i2e,iUo,dUo,Bz,cUo,fUo,mUo,lv,d2e,gUo,hUo,Iz,pUo,_Uo,uUo,iv,c2e,bUo,vUo,Nz,FUo,TUo,MUo,dv,f2e,EUo,CUo,qz,wUo,AUo,LUo,cv,m2e,yUo,xUo,jz,$Uo,kUo,SUo,fv,g2e,RUo,PUo,Dz,BUo,IUo,NUo,mv,h2e,qUo,jUo,Gz,DUo,GUo,OUo,gv,p2e,VUo,XUo,Oz,zUo,WUo,QUo,hv,_2e,HUo,UUo,Vz,JUo,YUo,KUo,pv,u2e,ZUo,eJo,Xz,oJo,rJo,tJo,_v,b2e,aJo,nJo,zz,sJo,lJo,iJo,uv,v2e,dJo,cJo,Wz,fJo,mJo,gJo,bv,F2e,hJo,pJo,Qz,_Jo,uJo,bJo,vv,T2e,vJo,FJo,Hz,TJo,MJo,EJo,Fv,M2e,CJo,wJo,Uz,AJo,LJo,yJo,Tv,E2e,xJo,$Jo,Jz,kJo,SJo,RJo,Mv,C2e,PJo,BJo,Yz,IJo,NJo,qJo,Ev,w2e,jJo,DJo,Kz,GJo,OJo,VJo,Cv,A2e,XJo,zJo,Zz,WJo,QJo,HJo,wv,L2e,UJo,JJo,eW,YJo,KJo,ZJo,Av,y2e,eYo,oYo,oW,rYo,tYo,aYo,Lv,x2e,nYo,sYo,rW,lYo,iYo,dYo,yv,$2e,cYo,fYo,tW,mYo,gYo,hYo,xv,k2e,pYo,_Yo,aW,uYo,bYo,vYo,$v,S2e,FYo,TYo,nW,MYo,EYo,CYo,kv,R2e,wYo,AYo,sW,LYo,yYo,xYo,Sv,P2e,$Yo,kYo,lW,SYo,RYo,PYo,Rv,B2e,BYo,IYo,iW,NYo,qYo,jYo,Pv,I2e,DYo,GYo,dW,OYo,VYo,XYo,Bv,zYo,N2e,WYo,QYo,q2e,HYo,UYo,Iv,rWe,fd,Nv,j2e,Ry,JYo,D2e,YYo,tWe,qo,Py,KYo,md,ZYo,cW,eKo,oKo,fW,rKo,tKo,aKo,By,nKo,G2e,sKo,lKo,iKo,pt,Iy,dKo,O2e,cKo,fKo,gd,mKo,V2e,gKo,hKo,mW,pKo,_Ko,uKo,qv,bKo,ao,Ny,vKo,X2e,FKo,TKo,Va,MKo,z2e,EKo,CKo,W2e,wKo,AKo,Q2e,LKo,yKo,xKo,jo,jv,H2e,$Ko,kKo,gW,SKo,RKo,PKo,Dv,U2e,BKo,IKo,hW,NKo,qKo,jKo,Gv,J2e,DKo,GKo,pW,OKo,VKo,XKo,Ov,Y2e,zKo,WKo,_W,QKo,HKo,UKo,Vv,K2e,JKo,YKo,uW,KKo,ZKo,eZo,Xv,Z2e,oZo,rZo,bW,tZo,aZo,nZo,zv,sZo,e1e,lZo,iZo,o1e,dZo,cZo,Wv,aWe,hd,Qv,r1e,qy,fZo,t1e,mZo,nWe,Do,jy,gZo,pd,hZo,vW,pZo,_Zo,FW,uZo,bZo,vZo,Dy,FZo,a1e,TZo,MZo,EZo,_t,Gy,CZo,n1e,wZo,AZo,_d,LZo,s1e,yZo,xZo,TW,$Zo,kZo,SZo,Hv,RZo,no,Oy,PZo,l1e,BZo,IZo,Xa,NZo,i1e,qZo,jZo,d1e,DZo,GZo,c1e,OZo,VZo,XZo,H,Uv,f1e,zZo,WZo,MW,QZo,HZo,UZo,Jv,m1e,JZo,YZo,EW,KZo,ZZo,eer,Yv,g1e,oer,rer,CW,ter,aer,ner,Kv,h1e,ser,ler,wW,ier,der,cer,Zv,p1e,fer,mer,AW,ger,her,per,e0,_1e,_er,uer,LW,ber,ver,Fer,o0,u1e,Ter,Mer,yW,Eer,Cer,wer,r0,b1e,Aer,Ler,xW,yer,xer,$er,t0,v1e,ker,Ser,$W,Rer,Per,Ber,a0,F1e,Ier,Ner,kW,qer,jer,Der,n0,T1e,Ger,Oer,SW,Ver,Xer,zer,s0,M1e,Wer,Qer,RW,Her,Uer,Jer,l0,E1e,Yer,Ker,PW,Zer,eor,oor,i0,C1e,ror,tor,BW,aor,nor,sor,d0,w1e,lor,ior,IW,dor,cor,mor,c0,A1e,gor,hor,NW,por,_or,uor,f0,L1e,bor,vor,qW,For,Tor,Mor,m0,y1e,Eor,Cor,jW,wor,Aor,Lor,g0,x1e,yor,xor,DW,$or,kor,Sor,h0,$1e,Ror,Por,GW,Bor,Ior,Nor,p0,k1e,qor,jor,OW,Dor,Gor,Oor,_0,S1e,Vor,Xor,VW,zor,Wor,Qor,u0,R1e,Hor,Uor,XW,Jor,Yor,Kor,b0,P1e,Zor,err,zW,orr,rrr,trr,v0,B1e,arr,nrr,WW,srr,lrr,irr,F0,I1e,drr,crr,QW,frr,mrr,grr,T0,N1e,hrr,prr,HW,_rr,urr,brr,M0,q1e,vrr,Frr,UW,Trr,Mrr,Err,E0,j1e,Crr,wrr,JW,Arr,Lrr,yrr,C0,D1e,xrr,$rr,YW,krr,Srr,Rrr,w0,G1e,Prr,Brr,KW,Irr,Nrr,qrr,A0,O1e,jrr,Drr,ZW,Grr,Orr,Vrr,L0,V1e,Xrr,zrr,eQ,Wrr,Qrr,Hrr,y0,X1e,Urr,Jrr,oQ,Yrr,Krr,Zrr,x0,z1e,etr,otr,rQ,rtr,ttr,atr,$0,W1e,ntr,str,tQ,ltr,itr,dtr,k0,Q1e,ctr,ftr,aQ,mtr,gtr,htr,S0,ptr,H1e,_tr,utr,U1e,btr,vtr,R0,sWe,ud,P0,J1e,Vy,Ftr,Y1e,Ttr,lWe,Go,Xy,Mtr,bd,Etr,nQ,Ctr,wtr,sQ,Atr,Ltr,ytr,zy,xtr,K1e,$tr,ktr,Str,ut,Wy,Rtr,Z1e,Ptr,Btr,vd,Itr,e4e,Ntr,qtr,lQ,jtr,Dtr,Gtr,B0,Otr,so,Qy,Vtr,o4e,Xtr,ztr,za,Wtr,r4e,Qtr,Htr,t4e,Utr,Jtr,a4e,Ytr,Ktr,Ztr,V,I0,n4e,ear,oar,iQ,rar,tar,aar,N0,s4e,nar,sar,dQ,lar,iar,dar,q0,l4e,car,far,cQ,mar,gar,har,j0,i4e,par,_ar,fQ,uar,bar,Far,D0,d4e,Tar,Mar,mQ,Ear,Car,war,G0,c4e,Aar,Lar,gQ,yar,xar,$ar,O0,f4e,kar,Sar,hQ,Rar,Par,Bar,V0,m4e,Iar,Nar,pQ,qar,jar,Dar,X0,g4e,Gar,Oar,_Q,Var,Xar,zar,z0,h4e,War,Qar,uQ,Har,Uar,Jar,W0,p4e,Yar,Kar,bQ,Zar,enr,onr,Q0,_4e,rnr,tnr,vQ,anr,nnr,snr,H0,u4e,lnr,inr,FQ,dnr,cnr,fnr,U0,b4e,mnr,gnr,TQ,hnr,pnr,_nr,J0,v4e,unr,bnr,MQ,vnr,Fnr,Tnr,Y0,F4e,Mnr,Enr,EQ,Cnr,wnr,Anr,K0,T4e,Lnr,ynr,CQ,xnr,$nr,knr,Z0,M4e,Snr,Rnr,wQ,Pnr,Bnr,Inr,eF,E4e,Nnr,qnr,AQ,jnr,Dnr,Gnr,oF,C4e,Onr,Vnr,LQ,Xnr,znr,Wnr,rF,w4e,Qnr,Hnr,yQ,Unr,Jnr,Ynr,tF,A4e,Knr,Znr,xQ,esr,osr,rsr,aF,L4e,tsr,asr,$Q,nsr,ssr,lsr,nF,y4e,isr,dsr,kQ,csr,fsr,msr,sF,x4e,gsr,hsr,SQ,psr,_sr,usr,lF,$4e,bsr,vsr,RQ,Fsr,Tsr,Msr,iF,k4e,Esr,Csr,PQ,wsr,Asr,Lsr,dF,S4e,ysr,xsr,BQ,$sr,ksr,Ssr,cF,R4e,Rsr,Psr,IQ,Bsr,Isr,Nsr,fF,P4e,qsr,jsr,NQ,Dsr,Gsr,Osr,mF,B4e,Vsr,Xsr,qQ,zsr,Wsr,Qsr,gF,I4e,Hsr,Usr,jQ,Jsr,Ysr,Ksr,hF,N4e,Zsr,elr,DQ,olr,rlr,tlr,pF,q4e,alr,nlr,GQ,slr,llr,ilr,_F,j4e,dlr,clr,OQ,flr,mlr,glr,uF,D4e,hlr,plr,VQ,_lr,ulr,blr,bF,G4e,vlr,Flr,XQ,Tlr,Mlr,Elr,vF,O4e,Clr,wlr,zQ,Alr,Llr,ylr,FF,V4e,xlr,$lr,WQ,klr,Slr,Rlr,TF,X4e,Plr,Blr,QQ,Ilr,Nlr,qlr,MF,z4e,jlr,Dlr,HQ,Glr,Olr,Vlr,EF,W4e,Xlr,zlr,UQ,Wlr,Qlr,Hlr,CF,Q4e,Ulr,Jlr,JQ,Ylr,Klr,Zlr,wF,eir,H4e,oir,rir,U4e,tir,air,AF,iWe,Fd,LF,J4e,Hy,nir,Y4e,sir,dWe,Oo,Uy,lir,Td,iir,YQ,dir,cir,KQ,fir,mir,gir,Jy,hir,K4e,pir,_ir,uir,bt,Yy,bir,Z4e,vir,Fir,Md,Tir,ebe,Mir,Eir,ZQ,Cir,wir,Air,yF,Lir,lo,Ky,yir,obe,xir,$ir,Wa,kir,rbe,Sir,Rir,tbe,Pir,Bir,abe,Iir,Nir,qir,nbe,xF,sbe,jir,Dir,eH,Gir,Oir,Vir,$F,Xir,lbe,zir,Wir,ibe,Qir,Hir,kF,cWe,Ed,SF,dbe,Zy,Uir,cbe,Jir,fWe,Vo,e9,Yir,Cd,Kir,oH,Zir,edr,rH,odr,rdr,tdr,o9,adr,fbe,ndr,sdr,ldr,vt,r9,idr,mbe,ddr,cdr,wd,fdr,gbe,mdr,gdr,tH,hdr,pdr,_dr,RF,udr,io,t9,bdr,hbe,vdr,Fdr,Qa,Tdr,pbe,Mdr,Edr,_be,Cdr,wdr,ube,Adr,Ldr,ydr,be,PF,bbe,xdr,$dr,aH,kdr,Sdr,Rdr,BF,vbe,Pdr,Bdr,nH,Idr,Ndr,qdr,IF,Fbe,jdr,Ddr,sH,Gdr,Odr,Vdr,NF,Tbe,Xdr,zdr,lH,Wdr,Qdr,Hdr,Ys,Mbe,Udr,Jdr,iH,Ydr,Kdr,dH,Zdr,ecr,ocr,qF,Ebe,rcr,tcr,cH,acr,ncr,scr,Ks,Cbe,lcr,icr,fH,dcr,ccr,mH,fcr,mcr,gcr,jF,wbe,hcr,pcr,gH,_cr,ucr,bcr,Ft,Abe,vcr,Fcr,hH,Tcr,Mcr,pH,Ecr,Ccr,_H,wcr,Acr,Lcr,DF,Lbe,ycr,xcr,uH,$cr,kcr,Scr,GF,ybe,Rcr,Pcr,bH,Bcr,Icr,Ncr,OF,xbe,qcr,jcr,vH,Dcr,Gcr,Ocr,VF,$be,Vcr,Xcr,FH,zcr,Wcr,Qcr,XF,kbe,Hcr,Ucr,TH,Jcr,Ycr,Kcr,zF,Sbe,Zcr,efr,MH,ofr,rfr,tfr,WF,Rbe,afr,nfr,EH,sfr,lfr,ifr,QF,Pbe,dfr,cfr,CH,ffr,mfr,gfr,HF,hfr,Bbe,pfr,_fr,Ibe,ufr,bfr,UF,mWe,Ad,JF,Nbe,a9,vfr,qbe,Ffr,gWe,Xo,n9,Tfr,Ld,Mfr,wH,Efr,Cfr,AH,wfr,Afr,Lfr,s9,yfr,jbe,xfr,$fr,kfr,Tt,l9,Sfr,Dbe,Rfr,Pfr,yd,Bfr,Gbe,Ifr,Nfr,LH,qfr,jfr,Dfr,YF,Gfr,co,i9,Ofr,Obe,Vfr,Xfr,Ha,zfr,Vbe,Wfr,Qfr,Xbe,Hfr,Ufr,zbe,Jfr,Yfr,Kfr,Wbe,KF,Qbe,Zfr,emr,yH,omr,rmr,tmr,ZF,amr,Hbe,nmr,smr,Ube,lmr,imr,eT,hWe,xd,oT,Jbe,d9,dmr,Ybe,cmr,pWe,zo,c9,fmr,$d,mmr,xH,gmr,hmr,$H,pmr,_mr,umr,f9,bmr,Kbe,vmr,Fmr,Tmr,Mt,m9,Mmr,Zbe,Emr,Cmr,kd,wmr,eve,Amr,Lmr,kH,ymr,xmr,$mr,rT,kmr,fo,g9,Smr,ove,Rmr,Pmr,Ua,Bmr,rve,Imr,Nmr,tve,qmr,jmr,ave,Dmr,Gmr,Omr,nve,tT,sve,Vmr,Xmr,SH,zmr,Wmr,Qmr,aT,Hmr,lve,Umr,Jmr,ive,Ymr,Kmr,nT,_We,Sd,sT,dve,h9,Zmr,cve,egr,uWe,Wo,p9,ogr,Rd,rgr,RH,tgr,agr,PH,ngr,sgr,lgr,_9,igr,fve,dgr,cgr,fgr,Et,u9,mgr,mve,ggr,hgr,Pd,pgr,gve,_gr,ugr,BH,bgr,vgr,Fgr,lT,Tgr,mo,b9,Mgr,hve,Egr,Cgr,Ja,wgr,pve,Agr,Lgr,_ve,ygr,xgr,uve,$gr,kgr,Sgr,Pe,iT,bve,Rgr,Pgr,IH,Bgr,Igr,Ngr,dT,vve,qgr,jgr,NH,Dgr,Ggr,Ogr,cT,Fve,Vgr,Xgr,qH,zgr,Wgr,Qgr,fT,Tve,Hgr,Ugr,jH,Jgr,Ygr,Kgr,mT,Mve,Zgr,ehr,DH,ohr,rhr,thr,gT,Eve,ahr,nhr,GH,shr,lhr,ihr,hT,Cve,dhr,chr,OH,fhr,mhr,ghr,pT,wve,hhr,phr,VH,_hr,uhr,bhr,_T,Ave,vhr,Fhr,XH,Thr,Mhr,Ehr,uT,Chr,Lve,whr,Ahr,yve,Lhr,yhr,bT,bWe,Bd,vT,xve,v9,xhr,$ve,$hr,vWe,Qo,F9,khr,Id,Shr,zH,Rhr,Phr,WH,Bhr,Ihr,Nhr,T9,qhr,kve,jhr,Dhr,Ghr,Ct,M9,Ohr,Sve,Vhr,Xhr,Nd,zhr,Rve,Whr,Qhr,QH,Hhr,Uhr,Jhr,FT,Yhr,go,E9,Khr,Pve,Zhr,epr,Ya,opr,Bve,rpr,tpr,Ive,apr,npr,Nve,spr,lpr,ipr,rt,TT,qve,dpr,cpr,HH,fpr,mpr,gpr,MT,jve,hpr,ppr,UH,_pr,upr,bpr,ET,Dve,vpr,Fpr,JH,Tpr,Mpr,Epr,CT,Gve,Cpr,wpr,YH,Apr,Lpr,ypr,wT,Ove,xpr,$pr,KH,kpr,Spr,Rpr,AT,Ppr,Vve,Bpr,Ipr,Xve,Npr,qpr,LT,FWe,qd,yT,zve,C9,jpr,Wve,Dpr,TWe,Ho,w9,Gpr,jd,Opr,ZH,Vpr,Xpr,eU,zpr,Wpr,Qpr,A9,Hpr,Qve,Upr,Jpr,Ypr,wt,L9,Kpr,Hve,Zpr,e_r,Dd,o_r,Uve,r_r,t_r,oU,a_r,n_r,s_r,xT,l_r,ho,y9,i_r,Jve,d_r,c_r,Ka,f_r,Yve,m_r,g_r,Kve,h_r,p_r,Zve,__r,u_r,b_r,Le,$T,e0e,v_r,F_r,rU,T_r,M_r,E_r,kT,o0e,C_r,w_r,tU,A_r,L_r,y_r,ST,r0e,x_r,$_r,aU,k_r,S_r,R_r,RT,t0e,P_r,B_r,nU,I_r,N_r,q_r,PT,a0e,j_r,D_r,sU,G_r,O_r,V_r,BT,n0e,X_r,z_r,lU,W_r,Q_r,H_r,IT,s0e,U_r,J_r,iU,Y_r,K_r,Z_r,NT,l0e,eur,our,dU,rur,tur,aur,qT,i0e,nur,sur,cU,lur,iur,dur,jT,d0e,cur,fur,fU,mur,gur,hur,DT,pur,c0e,_ur,uur,f0e,bur,vur,GT,MWe,Gd,OT,m0e,x9,Fur,g0e,Tur,EWe,Uo,$9,Mur,Od,Eur,mU,Cur,wur,gU,Aur,Lur,yur,k9,xur,h0e,$ur,kur,Sur,At,S9,Rur,p0e,Pur,Bur,Vd,Iur,_0e,Nur,qur,hU,jur,Dur,Gur,VT,Our,po,R9,Vur,u0e,Xur,zur,Za,Wur,b0e,Qur,Hur,v0e,Uur,Jur,F0e,Yur,Kur,Zur,P9,XT,T0e,e2r,o2r,pU,r2r,t2r,a2r,zT,M0e,n2r,s2r,_U,l2r,i2r,d2r,WT,c2r,E0e,f2r,m2r,C0e,g2r,h2r,QT,CWe,Xd,HT,w0e,B9,p2r,A0e,_2r,wWe,Jo,I9,u2r,zd,b2r,uU,v2r,F2r,bU,T2r,M2r,E2r,N9,C2r,L0e,w2r,A2r,L2r,Lt,q9,y2r,y0e,x2r,$2r,Wd,k2r,x0e,S2r,R2r,vU,P2r,B2r,I2r,UT,N2r,_o,j9,q2r,$0e,j2r,D2r,en,G2r,k0e,O2r,V2r,S0e,X2r,z2r,R0e,W2r,Q2r,H2r,tt,JT,P0e,U2r,J2r,FU,Y2r,K2r,Z2r,YT,B0e,e1r,o1r,TU,r1r,t1r,a1r,KT,I0e,n1r,s1r,MU,l1r,i1r,d1r,ZT,N0e,c1r,f1r,EU,m1r,g1r,h1r,e8,q0e,p1r,_1r,CU,u1r,b1r,v1r,o8,F1r,j0e,T1r,M1r,D0e,E1r,C1r,r8,AWe,Qd,t8,G0e,D9,w1r,O0e,A1r,LWe,Yo,G9,L1r,Hd,y1r,wU,x1r,$1r,AU,k1r,S1r,R1r,O9,P1r,V0e,B1r,I1r,N1r,yt,V9,q1r,X0e,j1r,D1r,Ud,G1r,z0e,O1r,V1r,LU,X1r,z1r,W1r,a8,Q1r,uo,X9,H1r,W0e,U1r,J1r,on,Y1r,Q0e,K1r,Z1r,H0e,e4r,o4r,U0e,r4r,t4r,a4r,rn,n8,J0e,n4r,s4r,yU,l4r,i4r,d4r,s8,Y0e,c4r,f4r,xU,m4r,g4r,h4r,l8,K0e,p4r,_4r,$U,u4r,b4r,v4r,i8,Z0e,F4r,T4r,kU,M4r,E4r,C4r,d8,w4r,eFe,A4r,L4r,oFe,y4r,x4r,c8,yWe,Jd,f8,rFe,z9,$4r,tFe,k4r,xWe,Ko,W9,S4r,Yd,R4r,SU,P4r,B4r,RU,I4r,N4r,q4r,Q9,j4r,aFe,D4r,G4r,O4r,xt,H9,V4r,nFe,X4r,z4r,Kd,W4r,sFe,Q4r,H4r,PU,U4r,J4r,Y4r,m8,K4r,bo,U9,Z4r,lFe,ebr,obr,tn,rbr,iFe,tbr,abr,dFe,nbr,sbr,cFe,lbr,ibr,dbr,J9,g8,fFe,cbr,fbr,BU,mbr,gbr,hbr,h8,mFe,pbr,_br,IU,ubr,bbr,vbr,p8,Fbr,gFe,Tbr,Mbr,hFe,Ebr,Cbr,_8,$We,Zd,u8,pFe,Y9,wbr,_Fe,Abr,kWe,Zo,K9,Lbr,ec,ybr,NU,xbr,$br,qU,kbr,Sbr,Rbr,Z9,Pbr,uFe,Bbr,Ibr,Nbr,$t,ex,qbr,bFe,jbr,Dbr,oc,Gbr,vFe,Obr,Vbr,jU,Xbr,zbr,Wbr,b8,Qbr,vo,ox,Hbr,FFe,Ubr,Jbr,an,Ybr,TFe,Kbr,Zbr,MFe,evr,ovr,EFe,rvr,tvr,avr,CFe,v8,wFe,nvr,svr,DU,lvr,ivr,dvr,F8,cvr,AFe,fvr,mvr,LFe,gvr,hvr,T8,SWe,rc,M8,yFe,rx,pvr,xFe,_vr,RWe,er,tx,uvr,tc,bvr,GU,vvr,Fvr,OU,Tvr,Mvr,Evr,ax,Cvr,$Fe,wvr,Avr,Lvr,kt,nx,yvr,kFe,xvr,$vr,ac,kvr,SFe,Svr,Rvr,VU,Pvr,Bvr,Ivr,E8,Nvr,Fo,sx,qvr,RFe,jvr,Dvr,nn,Gvr,PFe,Ovr,Vvr,BFe,Xvr,zvr,IFe,Wvr,Qvr,Hvr,at,C8,NFe,Uvr,Jvr,XU,Yvr,Kvr,Zvr,w8,qFe,e0r,o0r,zU,r0r,t0r,a0r,A8,jFe,n0r,s0r,WU,l0r,i0r,d0r,L8,DFe,c0r,f0r,QU,m0r,g0r,h0r,y8,GFe,p0r,_0r,HU,u0r,b0r,v0r,x8,F0r,OFe,T0r,M0r,VFe,E0r,C0r,$8,PWe,nc,k8,XFe,lx,w0r,zFe,A0r,BWe,or,ix,L0r,sc,y0r,UU,x0r,$0r,JU,k0r,S0r,R0r,dx,P0r,WFe,B0r,I0r,N0r,St,cx,q0r,QFe,j0r,D0r,lc,G0r,HFe,O0r,V0r,YU,X0r,z0r,W0r,S8,Q0r,To,fx,H0r,UFe,U0r,J0r,sn,Y0r,JFe,K0r,Z0r,YFe,eFr,oFr,KFe,rFr,tFr,aFr,ZFe,R8,eTe,nFr,sFr,KU,lFr,iFr,dFr,P8,cFr,oTe,fFr,mFr,rTe,gFr,hFr,B8,IWe,ic,I8,tTe,mx,pFr,aTe,_Fr,NWe,rr,gx,uFr,dc,bFr,ZU,vFr,FFr,eJ,TFr,MFr,EFr,hx,CFr,nTe,wFr,AFr,LFr,Rt,px,yFr,sTe,xFr,$Fr,cc,kFr,lTe,SFr,RFr,oJ,PFr,BFr,IFr,N8,NFr,$r,_x,qFr,iTe,jFr,DFr,ln,GFr,dTe,OFr,VFr,cTe,XFr,zFr,fTe,WFr,QFr,HFr,I,q8,mTe,UFr,JFr,rJ,YFr,KFr,ZFr,j8,gTe,eTr,oTr,tJ,rTr,tTr,aTr,D8,hTe,nTr,sTr,aJ,lTr,iTr,dTr,G8,pTe,cTr,fTr,nJ,mTr,gTr,hTr,O8,_Te,pTr,_Tr,sJ,uTr,bTr,vTr,V8,uTe,FTr,TTr,lJ,MTr,ETr,CTr,X8,bTe,wTr,ATr,iJ,LTr,yTr,xTr,z8,vTe,$Tr,kTr,dJ,STr,RTr,PTr,W8,FTe,BTr,ITr,cJ,NTr,qTr,jTr,Q8,TTe,DTr,GTr,fJ,OTr,VTr,XTr,H8,MTe,zTr,WTr,mJ,QTr,HTr,UTr,U8,ETe,JTr,YTr,gJ,KTr,ZTr,e8r,J8,CTe,o8r,r8r,hJ,t8r,a8r,n8r,Y8,wTe,s8r,l8r,pJ,i8r,d8r,c8r,K8,ATe,f8r,m8r,_J,g8r,h8r,p8r,Z8,LTe,_8r,u8r,uJ,b8r,v8r,F8r,eM,yTe,T8r,M8r,bJ,E8r,C8r,w8r,oM,xTe,A8r,L8r,vJ,y8r,x8r,$8r,Zs,$Te,k8r,S8r,FJ,R8r,P8r,TJ,B8r,I8r,N8r,rM,kTe,q8r,j8r,MJ,D8r,G8r,O8r,tM,STe,V8r,X8r,EJ,z8r,W8r,Q8r,aM,RTe,H8r,U8r,CJ,J8r,Y8r,K8r,nM,PTe,Z8r,eMr,wJ,oMr,rMr,tMr,sM,BTe,aMr,nMr,AJ,sMr,lMr,iMr,lM,ITe,dMr,cMr,LJ,fMr,mMr,gMr,iM,NTe,hMr,pMr,yJ,_Mr,uMr,bMr,dM,qTe,vMr,FMr,xJ,TMr,MMr,EMr,cM,jTe,CMr,wMr,$J,AMr,LMr,yMr,fM,DTe,xMr,$Mr,kJ,kMr,SMr,RMr,mM,GTe,PMr,BMr,SJ,IMr,NMr,qMr,gM,OTe,jMr,DMr,RJ,GMr,OMr,VMr,hM,VTe,XMr,zMr,PJ,WMr,QMr,HMr,pM,XTe,UMr,JMr,BJ,YMr,KMr,ZMr,_M,zTe,eEr,oEr,IJ,rEr,tEr,aEr,uM,WTe,nEr,sEr,NJ,lEr,iEr,dEr,bM,QTe,cEr,fEr,qJ,mEr,gEr,hEr,vM,HTe,pEr,_Er,jJ,uEr,bEr,vEr,FM,UTe,FEr,TEr,DJ,MEr,EEr,CEr,TM,JTe,wEr,AEr,GJ,LEr,yEr,xEr,MM,YTe,$Er,kEr,OJ,SEr,REr,PEr,EM,KTe,BEr,IEr,VJ,NEr,qEr,jEr,CM,ZTe,DEr,GEr,XJ,OEr,VEr,XEr,wM,e8e,zEr,WEr,zJ,QEr,HEr,UEr,AM,o8e,JEr,YEr,WJ,KEr,ZEr,eCr,LM,r8e,oCr,rCr,QJ,tCr,aCr,nCr,yM,t8e,sCr,lCr,HJ,iCr,dCr,cCr,xM,a8e,fCr,mCr,UJ,gCr,hCr,pCr,$M,n8e,_Cr,uCr,JJ,bCr,vCr,FCr,kM,s8e,TCr,MCr,YJ,ECr,CCr,wCr,SM,l8e,ACr,LCr,KJ,yCr,xCr,$Cr,RM,i8e,kCr,SCr,ZJ,RCr,PCr,BCr,PM,qWe,fc,BM,d8e,ux,ICr,c8e,NCr,jWe,tr,bx,qCr,mc,jCr,eY,DCr,GCr,oY,OCr,VCr,XCr,vx,zCr,f8e,WCr,QCr,HCr,Pt,Fx,UCr,m8e,JCr,YCr,gc,KCr,g8e,ZCr,e5r,rY,o5r,r5r,t5r,IM,a5r,kr,Tx,n5r,h8e,s5r,l5r,dn,i5r,p8e,d5r,c5r,_8e,f5r,m5r,u8e,g5r,h5r,p5r,se,NM,b8e,_5r,u5r,tY,b5r,v5r,F5r,qM,v8e,T5r,M5r,aY,E5r,C5r,w5r,jM,F8e,A5r,L5r,nY,y5r,x5r,$5r,DM,T8e,k5r,S5r,sY,R5r,P5r,B5r,GM,M8e,I5r,N5r,lY,q5r,j5r,D5r,OM,E8e,G5r,O5r,iY,V5r,X5r,z5r,VM,C8e,W5r,Q5r,dY,H5r,U5r,J5r,XM,w8e,Y5r,K5r,cY,Z5r,e3r,o3r,zM,A8e,r3r,t3r,fY,a3r,n3r,s3r,WM,L8e,l3r,i3r,mY,d3r,c3r,f3r,QM,y8e,m3r,g3r,gY,h3r,p3r,_3r,HM,x8e,u3r,b3r,hY,v3r,F3r,T3r,UM,$8e,M3r,E3r,pY,C3r,w3r,A3r,JM,k8e,L3r,y3r,_Y,x3r,$3r,k3r,YM,S8e,S3r,R3r,uY,P3r,B3r,I3r,KM,R8e,N3r,q3r,bY,j3r,D3r,G3r,ZM,P8e,O3r,V3r,vY,X3r,z3r,W3r,eE,B8e,Q3r,H3r,FY,U3r,J3r,Y3r,oE,I8e,K3r,Z3r,TY,ewr,owr,rwr,rE,N8e,twr,awr,MY,nwr,swr,lwr,tE,q8e,iwr,dwr,EY,cwr,fwr,mwr,aE,j8e,gwr,hwr,CY,pwr,_wr,uwr,nE,D8e,bwr,vwr,wY,Fwr,Twr,Mwr,sE,DWe,hc,lE,G8e,Mx,Ewr,O8e,Cwr,GWe,ar,Ex,wwr,pc,Awr,AY,Lwr,ywr,LY,xwr,$wr,kwr,Cx,Swr,V8e,Rwr,Pwr,Bwr,Bt,wx,Iwr,X8e,Nwr,qwr,_c,jwr,z8e,Dwr,Gwr,yY,Owr,Vwr,Xwr,iE,zwr,Sr,Ax,Wwr,W8e,Qwr,Hwr,cn,Uwr,Q8e,Jwr,Ywr,H8e,Kwr,Zwr,U8e,e6r,o6r,r6r,Me,dE,J8e,t6r,a6r,xY,n6r,s6r,l6r,cE,Y8e,i6r,d6r,$Y,c6r,f6r,m6r,fE,K8e,g6r,h6r,kY,p6r,_6r,u6r,mE,Z8e,b6r,v6r,SY,F6r,T6r,M6r,gE,eMe,E6r,C6r,RY,w6r,A6r,L6r,hE,oMe,y6r,x6r,PY,$6r,k6r,S6r,pE,rMe,R6r,P6r,BY,B6r,I6r,N6r,_E,tMe,q6r,j6r,IY,D6r,G6r,O6r,uE,aMe,V6r,X6r,NY,z6r,W6r,Q6r,bE,nMe,H6r,U6r,qY,J6r,Y6r,K6r,vE,sMe,Z6r,eAr,jY,oAr,rAr,tAr,FE,lMe,aAr,nAr,DY,sAr,lAr,iAr,TE,iMe,dAr,cAr,GY,fAr,mAr,gAr,ME,OWe,uc,EE,dMe,Lx,hAr,cMe,pAr,VWe,nr,yx,_Ar,bc,uAr,OY,bAr,vAr,VY,FAr,TAr,MAr,xx,EAr,fMe,CAr,wAr,AAr,It,$x,LAr,mMe,yAr,xAr,vc,$Ar,gMe,kAr,SAr,XY,RAr,PAr,BAr,CE,IAr,Rr,kx,NAr,hMe,qAr,jAr,fn,DAr,pMe,GAr,OAr,_Me,VAr,XAr,uMe,zAr,WAr,QAr,Ve,wE,bMe,HAr,UAr,zY,JAr,YAr,KAr,AE,vMe,ZAr,e7r,WY,o7r,r7r,t7r,el,FMe,a7r,n7r,QY,s7r,l7r,HY,i7r,d7r,c7r,LE,TMe,f7r,m7r,UY,g7r,h7r,p7r,yE,MMe,_7r,u7r,JY,b7r,v7r,F7r,xE,EMe,T7r,M7r,YY,E7r,C7r,w7r,$E,CMe,A7r,L7r,KY,y7r,x7r,$7r,kE,wMe,k7r,S7r,ZY,R7r,P7r,B7r,SE,XWe,Fc,RE,AMe,Sx,I7r,LMe,N7r,zWe,sr,Rx,q7r,Tc,j7r,eK,D7r,G7r,oK,O7r,V7r,X7r,Px,z7r,yMe,W7r,Q7r,H7r,Nt,Bx,U7r,xMe,J7r,Y7r,Mc,K7r,$Me,Z7r,eLr,rK,oLr,rLr,tLr,PE,aLr,Pr,Ix,nLr,kMe,sLr,lLr,mn,iLr,SMe,dLr,cLr,RMe,fLr,mLr,PMe,gLr,hLr,pLr,ie,BE,BMe,_Lr,uLr,tK,bLr,vLr,FLr,IE,IMe,TLr,MLr,aK,ELr,CLr,wLr,NE,NMe,ALr,LLr,nK,yLr,xLr,$Lr,qE,qMe,kLr,SLr,sK,RLr,PLr,BLr,jE,jMe,ILr,NLr,lK,qLr,jLr,DLr,DE,DMe,GLr,OLr,iK,VLr,XLr,zLr,GE,GMe,WLr,QLr,dK,HLr,ULr,JLr,OE,OMe,YLr,KLr,cK,ZLr,eyr,oyr,VE,VMe,ryr,tyr,fK,ayr,nyr,syr,XE,XMe,lyr,iyr,mK,dyr,cyr,fyr,zE,zMe,myr,gyr,gK,hyr,pyr,_yr,WE,WMe,uyr,byr,hK,vyr,Fyr,Tyr,QE,QMe,Myr,Eyr,pK,Cyr,wyr,Ayr,HE,HMe,Lyr,yyr,_K,xyr,$yr,kyr,UE,UMe,Syr,Ryr,uK,Pyr,Byr,Iyr,JE,JMe,Nyr,qyr,bK,jyr,Dyr,Gyr,YE,YMe,Oyr,Vyr,vK,Xyr,zyr,Wyr,KE,KMe,Qyr,Hyr,FK,Uyr,Jyr,Yyr,ZE,ZMe,Kyr,Zyr,TK,e9r,o9r,r9r,eC,eEe,t9r,a9r,MK,n9r,s9r,l9r,oC,WWe,Ec,rC,oEe,Nx,i9r,rEe,d9r,QWe,lr,qx,c9r,Cc,f9r,EK,m9r,g9r,CK,h9r,p9r,_9r,jx,u9r,tEe,b9r,v9r,F9r,qt,Dx,T9r,aEe,M9r,E9r,wc,C9r,nEe,w9r,A9r,wK,L9r,y9r,x9r,tC,$9r,Br,Gx,k9r,sEe,S9r,R9r,gn,P9r,lEe,B9r,I9r,iEe,N9r,q9r,dEe,j9r,D9r,G9r,ye,aC,cEe,O9r,V9r,AK,X9r,z9r,W9r,nC,fEe,Q9r,H9r,LK,U9r,J9r,Y9r,sC,mEe,K9r,Z9r,yK,exr,oxr,rxr,lC,gEe,txr,axr,xK,nxr,sxr,lxr,iC,hEe,ixr,dxr,$K,cxr,fxr,mxr,dC,pEe,gxr,hxr,kK,pxr,_xr,uxr,cC,_Ee,bxr,vxr,SK,Fxr,Txr,Mxr,fC,uEe,Exr,Cxr,RK,wxr,Axr,Lxr,mC,bEe,yxr,xxr,PK,$xr,kxr,Sxr,gC,vEe,Rxr,Pxr,BK,Bxr,Ixr,Nxr,hC,HWe,Ac,pC,FEe,Ox,qxr,TEe,jxr,UWe,ir,Vx,Dxr,Lc,Gxr,IK,Oxr,Vxr,NK,Xxr,zxr,Wxr,Xx,Qxr,MEe,Hxr,Uxr,Jxr,jt,zx,Yxr,EEe,Kxr,Zxr,yc,e$r,CEe,o$r,r$r,qK,t$r,a$r,n$r,_C,s$r,Ir,Wx,l$r,wEe,i$r,d$r,hn,c$r,AEe,f$r,m$r,LEe,g$r,h$r,yEe,p$r,_$r,u$r,te,uC,xEe,b$r,v$r,jK,F$r,T$r,M$r,bC,$Ee,E$r,C$r,DK,w$r,A$r,L$r,vC,kEe,y$r,x$r,GK,$$r,k$r,S$r,FC,SEe,R$r,P$r,OK,B$r,I$r,N$r,TC,REe,q$r,j$r,VK,D$r,G$r,O$r,MC,PEe,V$r,X$r,XK,z$r,W$r,Q$r,EC,BEe,H$r,U$r,zK,J$r,Y$r,K$r,CC,IEe,Z$r,ekr,WK,okr,rkr,tkr,wC,NEe,akr,nkr,QK,skr,lkr,ikr,AC,qEe,dkr,ckr,HK,fkr,mkr,gkr,LC,jEe,hkr,pkr,UK,_kr,ukr,bkr,yC,DEe,vkr,Fkr,JK,Tkr,Mkr,Ekr,xC,GEe,Ckr,wkr,YK,Akr,Lkr,ykr,$C,OEe,xkr,$kr,KK,kkr,Skr,Rkr,kC,VEe,Pkr,Bkr,ZK,Ikr,Nkr,qkr,SC,XEe,jkr,Dkr,eZ,Gkr,Okr,Vkr,RC,zEe,Xkr,zkr,oZ,Wkr,Qkr,Hkr,PC,WEe,Ukr,Jkr,rZ,Ykr,Kkr,Zkr,BC,QEe,eSr,oSr,tZ,rSr,tSr,aSr,IC,HEe,nSr,sSr,aZ,lSr,iSr,dSr,NC,UEe,cSr,fSr,nZ,mSr,gSr,hSr,qC,JEe,pSr,_Sr,sZ,uSr,bSr,vSr,jC,YEe,FSr,TSr,lZ,MSr,ESr,CSr,DC,KEe,wSr,ASr,iZ,LSr,ySr,xSr,GC,ZEe,$Sr,kSr,dZ,SSr,RSr,PSr,OC,eCe,BSr,ISr,cZ,NSr,qSr,jSr,VC,JWe,xc,XC,oCe,Qx,DSr,rCe,GSr,YWe,dr,Hx,OSr,$c,VSr,fZ,XSr,zSr,mZ,WSr,QSr,HSr,Ux,USr,tCe,JSr,YSr,KSr,Dt,Jx,ZSr,aCe,eRr,oRr,kc,rRr,nCe,tRr,aRr,gZ,nRr,sRr,lRr,zC,iRr,Nr,Yx,dRr,sCe,cRr,fRr,pn,mRr,lCe,gRr,hRr,iCe,pRr,_Rr,dCe,uRr,bRr,vRr,ve,WC,cCe,FRr,TRr,hZ,MRr,ERr,CRr,QC,fCe,wRr,ARr,pZ,LRr,yRr,xRr,HC,mCe,$Rr,kRr,_Z,SRr,RRr,PRr,UC,gCe,BRr,IRr,uZ,NRr,qRr,jRr,JC,hCe,DRr,GRr,bZ,ORr,VRr,XRr,YC,pCe,zRr,WRr,vZ,QRr,HRr,URr,KC,_Ce,JRr,YRr,FZ,KRr,ZRr,ePr,ZC,uCe,oPr,rPr,TZ,tPr,aPr,nPr,e5,bCe,sPr,lPr,MZ,iPr,dPr,cPr,o5,vCe,fPr,mPr,EZ,gPr,hPr,pPr,r5,FCe,_Pr,uPr,CZ,bPr,vPr,FPr,t5,TCe,TPr,MPr,wZ,EPr,CPr,wPr,a5,MCe,APr,LPr,AZ,yPr,xPr,$Pr,n5,ECe,kPr,SPr,LZ,RPr,PPr,BPr,s5,CCe,IPr,NPr,yZ,qPr,jPr,DPr,l5,wCe,GPr,OPr,xZ,VPr,XPr,zPr,i5,ACe,WPr,QPr,$Z,HPr,UPr,JPr,d5,KWe,Sc,c5,LCe,Kx,YPr,yCe,KPr,ZWe,cr,Zx,ZPr,Rc,eBr,kZ,oBr,rBr,SZ,tBr,aBr,nBr,e$,sBr,xCe,lBr,iBr,dBr,Gt,o$,cBr,$Ce,fBr,mBr,Pc,gBr,kCe,hBr,pBr,RZ,_Br,uBr,bBr,f5,vBr,qr,r$,FBr,SCe,TBr,MBr,_n,EBr,RCe,CBr,wBr,PCe,ABr,LBr,BCe,yBr,xBr,$Br,t$,m5,ICe,kBr,SBr,PZ,RBr,PBr,BBr,g5,NCe,IBr,NBr,BZ,qBr,jBr,DBr,h5,eQe,Bc,p5,qCe,a$,GBr,jCe,OBr,oQe,fr,n$,VBr,Ic,XBr,IZ,zBr,WBr,NZ,QBr,HBr,UBr,s$,JBr,DCe,YBr,KBr,ZBr,Ot,l$,eIr,GCe,oIr,rIr,Nc,tIr,OCe,aIr,nIr,qZ,sIr,lIr,iIr,_5,dIr,jr,i$,cIr,VCe,fIr,mIr,un,gIr,XCe,hIr,pIr,zCe,_Ir,uIr,WCe,bIr,vIr,FIr,QCe,u5,HCe,TIr,MIr,jZ,EIr,CIr,wIr,b5,rQe,qc,v5,UCe,d$,AIr,JCe,LIr,tQe,mr,c$,yIr,jc,xIr,DZ,$Ir,kIr,GZ,SIr,RIr,PIr,f$,BIr,YCe,IIr,NIr,qIr,Vt,m$,jIr,KCe,DIr,GIr,Dc,OIr,ZCe,VIr,XIr,OZ,zIr,WIr,QIr,F5,HIr,Dr,g$,UIr,e5e,JIr,YIr,bn,KIr,o5e,ZIr,eNr,r5e,oNr,rNr,t5e,tNr,aNr,nNr,de,T5,a5e,sNr,lNr,VZ,iNr,dNr,cNr,M5,n5e,fNr,mNr,XZ,gNr,hNr,pNr,E5,s5e,_Nr,uNr,zZ,bNr,vNr,FNr,C5,l5e,TNr,MNr,WZ,ENr,CNr,wNr,w5,i5e,ANr,LNr,QZ,yNr,xNr,$Nr,A5,d5e,kNr,SNr,HZ,RNr,PNr,BNr,L5,c5e,INr,NNr,UZ,qNr,jNr,DNr,y5,f5e,GNr,ONr,JZ,VNr,XNr,zNr,x5,m5e,WNr,QNr,YZ,HNr,UNr,JNr,$5,g5e,YNr,KNr,KZ,ZNr,eqr,oqr,k5,h5e,rqr,tqr,ZZ,aqr,nqr,sqr,S5,p5e,lqr,iqr,eee,dqr,cqr,fqr,R5,_5e,mqr,gqr,oee,hqr,pqr,_qr,P5,u5e,uqr,bqr,ree,vqr,Fqr,Tqr,B5,b5e,Mqr,Eqr,tee,Cqr,wqr,Aqr,I5,v5e,Lqr,yqr,aee,xqr,$qr,kqr,N5,F5e,Sqr,Rqr,nee,Pqr,Bqr,Iqr,q5,T5e,Nqr,qqr,see,jqr,Dqr,Gqr,j5,M5e,Oqr,Vqr,lee,Xqr,zqr,Wqr,D5,E5e,Qqr,Hqr,iee,Uqr,Jqr,Yqr,G5,aQe,Gc,O5,C5e,h$,Kqr,w5e,Zqr,nQe,gr,p$,ejr,Oc,ojr,dee,rjr,tjr,cee,ajr,njr,sjr,_$,ljr,A5e,ijr,djr,cjr,Xt,u$,fjr,L5e,mjr,gjr,Vc,hjr,y5e,pjr,_jr,fee,ujr,bjr,vjr,V5,Fjr,Gr,b$,Tjr,x5e,Mjr,Ejr,vn,Cjr,$5e,wjr,Ajr,k5e,Ljr,yjr,S5e,xjr,$jr,kjr,ce,X5,R5e,Sjr,Rjr,mee,Pjr,Bjr,Ijr,z5,P5e,Njr,qjr,gee,jjr,Djr,Gjr,W5,B5e,Ojr,Vjr,hee,Xjr,zjr,Wjr,Q5,I5e,Qjr,Hjr,pee,Ujr,Jjr,Yjr,H5,N5e,Kjr,Zjr,_ee,eDr,oDr,rDr,U5,q5e,tDr,aDr,uee,nDr,sDr,lDr,J5,j5e,iDr,dDr,bee,cDr,fDr,mDr,Y5,D5e,gDr,hDr,vee,pDr,_Dr,uDr,K5,G5e,bDr,vDr,Fee,FDr,TDr,MDr,Z5,O5e,EDr,CDr,Tee,wDr,ADr,LDr,e3,V5e,yDr,xDr,Mee,$Dr,kDr,SDr,o3,X5e,RDr,PDr,Eee,BDr,IDr,NDr,r3,z5e,qDr,jDr,Cee,DDr,GDr,ODr,t3,W5e,VDr,XDr,wee,zDr,WDr,QDr,a3,Q5e,HDr,UDr,Aee,JDr,YDr,KDr,n3,H5e,ZDr,eGr,Lee,oGr,rGr,tGr,s3,U5e,aGr,nGr,yee,sGr,lGr,iGr,l3,J5e,dGr,cGr,xee,fGr,mGr,gGr,i3,Y5e,hGr,pGr,$ee,_Gr,uGr,bGr,d3,K5e,vGr,FGr,kee,TGr,MGr,EGr,c3,sQe,Xc,f3,Z5e,v$,CGr,e3e,wGr,lQe,hr,F$,AGr,zc,LGr,See,yGr,xGr,Ree,$Gr,kGr,SGr,T$,RGr,o3e,PGr,BGr,IGr,zt,M$,NGr,r3e,qGr,jGr,Wc,DGr,t3e,GGr,OGr,Pee,VGr,XGr,zGr,m3,WGr,Or,E$,QGr,a3e,HGr,UGr,Fn,JGr,n3e,YGr,KGr,s3e,ZGr,eOr,l3e,oOr,rOr,tOr,i3e,g3,d3e,aOr,nOr,Bee,sOr,lOr,iOr,h3,iQe,Qc,p3,c3e,C$,dOr,f3e,cOr,dQe,pr,w$,fOr,Hc,mOr,Iee,gOr,hOr,Nee,pOr,_Or,uOr,A$,bOr,m3e,vOr,FOr,TOr,Wt,L$,MOr,g3e,EOr,COr,Uc,wOr,h3e,AOr,LOr,qee,yOr,xOr,$Or,_3,kOr,Vr,y$,SOr,p3e,ROr,POr,Tn,BOr,_3e,IOr,NOr,u3e,qOr,jOr,b3e,DOr,GOr,OOr,v3e,u3,F3e,VOr,XOr,jee,zOr,WOr,QOr,b3,cQe,Jc,v3,T3e,x$,HOr,M3e,UOr,fQe,_r,$$,JOr,Yc,YOr,Dee,KOr,ZOr,Gee,eVr,oVr,rVr,k$,tVr,E3e,aVr,nVr,sVr,Qt,S$,lVr,C3e,iVr,dVr,Kc,cVr,w3e,fVr,mVr,Oee,gVr,hVr,pVr,F3,_Vr,Xr,R$,uVr,A3e,bVr,vVr,Mn,FVr,L3e,TVr,MVr,y3e,EVr,CVr,x3e,wVr,AVr,LVr,oe,T3,$3e,yVr,xVr,Vee,$Vr,kVr,SVr,M3,k3e,RVr,PVr,Xee,BVr,IVr,NVr,E3,S3e,qVr,jVr,zee,DVr,GVr,OVr,C3,R3e,VVr,XVr,Wee,zVr,WVr,QVr,w3,P3e,HVr,UVr,Qee,JVr,YVr,KVr,A3,B3e,ZVr,eXr,Hee,oXr,rXr,tXr,L3,I3e,aXr,nXr,Uee,sXr,lXr,iXr,y3,N3e,dXr,cXr,Jee,fXr,mXr,gXr,x3,q3e,hXr,pXr,Yee,_Xr,uXr,bXr,$3,j3e,vXr,FXr,Kee,TXr,MXr,EXr,k3,D3e,CXr,wXr,Zee,AXr,LXr,yXr,S3,G3e,xXr,$Xr,eoe,kXr,SXr,RXr,R3,O3e,PXr,BXr,ooe,IXr,NXr,qXr,P3,V3e,jXr,DXr,roe,GXr,OXr,VXr,B3,X3e,XXr,zXr,toe,WXr,QXr,HXr,I3,z3e,UXr,JXr,aoe,YXr,KXr,ZXr,N3,W3e,ezr,ozr,noe,rzr,tzr,azr,q3,Q3e,nzr,szr,soe,lzr,izr,dzr,j3,H3e,czr,fzr,loe,mzr,gzr,hzr,D3,U3e,pzr,_zr,ioe,uzr,bzr,vzr,G3,J3e,Fzr,Tzr,doe,Mzr,Ezr,Czr,O3,Y3e,wzr,Azr,coe,Lzr,yzr,xzr,V3,K3e,$zr,kzr,foe,Szr,Rzr,Pzr,X3,Z3e,Bzr,Izr,moe,Nzr,qzr,jzr,z3,ewe,Dzr,Gzr,goe,Ozr,Vzr,Xzr,W3,owe,zzr,Wzr,hoe,Qzr,Hzr,Uzr,Q3,rwe,Jzr,Yzr,poe,Kzr,Zzr,eWr,H3,mQe,Zc,U3,twe,P$,oWr,awe,rWr,gQe,ur,B$,tWr,ef,aWr,_oe,nWr,sWr,uoe,lWr,iWr,dWr,I$,cWr,nwe,fWr,mWr,gWr,Ht,N$,hWr,swe,pWr,_Wr,of,uWr,lwe,bWr,vWr,boe,FWr,TWr,MWr,J3,EWr,zr,q$,CWr,iwe,wWr,AWr,En,LWr,dwe,yWr,xWr,cwe,$Wr,kWr,fwe,SWr,RWr,PWr,xe,Y3,mwe,BWr,IWr,voe,NWr,qWr,jWr,K3,gwe,DWr,GWr,Foe,OWr,VWr,XWr,Z3,hwe,zWr,WWr,Toe,QWr,HWr,UWr,ew,pwe,JWr,YWr,Moe,KWr,ZWr,eQr,ow,_we,oQr,rQr,Eoe,tQr,aQr,nQr,rw,uwe,sQr,lQr,Coe,iQr,dQr,cQr,tw,bwe,fQr,mQr,woe,gQr,hQr,pQr,aw,vwe,_Qr,uQr,Aoe,bQr,vQr,FQr,nw,Fwe,TQr,MQr,Loe,EQr,CQr,wQr,sw,Twe,AQr,LQr,yoe,yQr,xQr,$Qr,lw,hQe,rf,iw,Mwe,j$,kQr,Ewe,SQr,pQe,br,D$,RQr,tf,PQr,xoe,BQr,IQr,$oe,NQr,qQr,jQr,G$,DQr,Cwe,GQr,OQr,VQr,Ut,O$,XQr,wwe,zQr,WQr,af,QQr,Awe,HQr,UQr,koe,JQr,YQr,KQr,dw,ZQr,Wr,V$,eHr,Lwe,oHr,rHr,Cn,tHr,ywe,aHr,nHr,xwe,sHr,lHr,$we,iHr,dHr,cHr,Ee,cw,kwe,fHr,mHr,Soe,gHr,hHr,pHr,fw,Swe,_Hr,uHr,Roe,bHr,vHr,FHr,mw,Rwe,THr,MHr,Poe,EHr,CHr,wHr,gw,Pwe,AHr,LHr,Boe,yHr,xHr,$Hr,hw,Bwe,kHr,SHr,Ioe,RHr,PHr,BHr,pw,Iwe,IHr,NHr,Noe,qHr,jHr,DHr,_w,Nwe,GHr,OHr,qoe,VHr,XHr,zHr,uw,qwe,WHr,QHr,joe,HHr,UHr,JHr,bw,jwe,YHr,KHr,Doe,ZHr,eUr,oUr,vw,Dwe,rUr,tUr,Goe,aUr,nUr,sUr,Fw,Gwe,lUr,iUr,Ooe,dUr,cUr,fUr,Tw,Owe,mUr,gUr,Voe,hUr,pUr,_Ur,Mw,Vwe,uUr,bUr,Xoe,vUr,FUr,TUr,Ew,_Qe,nf,Cw,Xwe,X$,MUr,zwe,EUr,uQe,vr,z$,CUr,sf,wUr,zoe,AUr,LUr,Woe,yUr,xUr,$Ur,W$,kUr,Wwe,SUr,RUr,PUr,Jt,Q$,BUr,Qwe,IUr,NUr,lf,qUr,Hwe,jUr,DUr,Qoe,GUr,OUr,VUr,ww,XUr,Qr,H$,zUr,Uwe,WUr,QUr,wn,HUr,Jwe,UUr,JUr,Ywe,YUr,KUr,Kwe,ZUr,eJr,oJr,$e,Aw,Zwe,rJr,tJr,Hoe,aJr,nJr,sJr,Lw,e6e,lJr,iJr,Uoe,dJr,cJr,fJr,yw,o6e,mJr,gJr,Joe,hJr,pJr,_Jr,xw,r6e,uJr,bJr,Yoe,vJr,FJr,TJr,$w,t6e,MJr,EJr,Koe,CJr,wJr,AJr,kw,a6e,LJr,yJr,Zoe,xJr,$Jr,kJr,Sw,n6e,SJr,RJr,ere,PJr,BJr,IJr,Rw,s6e,NJr,qJr,ore,jJr,DJr,GJr,Pw,l6e,OJr,VJr,rre,XJr,zJr,WJr,Bw,i6e,QJr,HJr,tre,UJr,JJr,YJr,Iw,bQe,df,Nw,d6e,U$,KJr,c6e,ZJr,vQe,Fr,J$,eYr,cf,oYr,are,rYr,tYr,nre,aYr,nYr,sYr,Y$,lYr,f6e,iYr,dYr,cYr,Yt,K$,fYr,m6e,mYr,gYr,ff,hYr,g6e,pYr,_Yr,sre,uYr,bYr,vYr,qw,FYr,Hr,Z$,TYr,h6e,MYr,EYr,An,CYr,p6e,wYr,AYr,_6e,LYr,yYr,u6e,xYr,$Yr,kYr,ke,jw,b6e,SYr,RYr,lre,PYr,BYr,IYr,Dw,v6e,NYr,qYr,ire,jYr,DYr,GYr,Gw,F6e,OYr,VYr,dre,XYr,zYr,WYr,Ow,T6e,QYr,HYr,cre,UYr,JYr,YYr,Vw,M6e,KYr,ZYr,fre,eKr,oKr,rKr,Xw,E6e,tKr,aKr,mre,nKr,sKr,lKr,zw,C6e,iKr,dKr,gre,cKr,fKr,mKr,Ww,w6e,gKr,hKr,hre,pKr,_Kr,uKr,Qw,A6e,bKr,vKr,pre,FKr,TKr,MKr,Hw,L6e,EKr,CKr,_re,wKr,AKr,LKr,Uw,FQe,mf,Jw,y6e,ek,yKr,x6e,xKr,TQe,Tr,ok,$Kr,gf,kKr,ure,SKr,RKr,bre,PKr,BKr,IKr,rk,NKr,$6e,qKr,jKr,DKr,Kt,tk,GKr,k6e,OKr,VKr,hf,XKr,S6e,zKr,WKr,vre,QKr,HKr,UKr,Yw,JKr,Ur,ak,YKr,R6e,KKr,ZKr,Ln,eZr,P6e,oZr,rZr,B6e,tZr,aZr,I6e,nZr,sZr,lZr,Se,Kw,N6e,iZr,dZr,Fre,cZr,fZr,mZr,Zw,q6e,gZr,hZr,Tre,pZr,_Zr,uZr,e6,j6e,bZr,vZr,Mre,FZr,TZr,MZr,o6,D6e,EZr,CZr,Ere,wZr,AZr,LZr,r6,G6e,yZr,xZr,Cre,$Zr,kZr,SZr,t6,O6e,RZr,PZr,wre,BZr,IZr,NZr,a6,V6e,qZr,jZr,Are,DZr,GZr,OZr,n6,X6e,VZr,XZr,Lre,zZr,WZr,QZr,s6,z6e,HZr,UZr,yre,JZr,YZr,KZr,l6,W6e,ZZr,eet,xre,oet,ret,tet,i6,MQe,pf,d6,Q6e,nk,aet,H6e,net,EQe,Mr,sk,set,_f,iet,$re,det,cet,kre,fet,met,get,lk,het,U6e,pet,_et,uet,Zt,ik,bet,J6e,vet,Fet,uf,Tet,Y6e,Met,Eet,Sre,Cet,wet,Aet,c6,Let,Jr,dk,yet,K6e,xet,$et,yn,ket,Z6e,Set,Ret,eAe,Pet,Bet,oAe,Iet,Net,qet,Re,f6,rAe,jet,Det,Rre,Get,Oet,Vet,m6,tAe,Xet,zet,Pre,Wet,Qet,Het,g6,aAe,Uet,Jet,Bre,Yet,Ket,Zet,h6,nAe,eot,oot,Ire,rot,tot,aot,p6,sAe,not,sot,Nre,lot,iot,dot,_6,lAe,cot,fot,qre,mot,got,hot,u6,iAe,pot,_ot,jre,uot,bot,vot,b6,dAe,Fot,Tot,Dre,Mot,Eot,Cot,v6,cAe,wot,Aot,Gre,Lot,yot,xot,F6,fAe,$ot,kot,Ore,Sot,Rot,Pot,T6,CQe,bf,M6,mAe,ck,Bot,gAe,Iot,wQe,Er,fk,Not,vf,qot,Vre,jot,Dot,Xre,Got,Oot,Vot,mk,Xot,hAe,zot,Wot,Qot,ea,gk,Hot,pAe,Uot,Jot,Ff,Yot,_Ae,Kot,Zot,zre,ert,ort,rrt,E6,trt,Yr,hk,art,uAe,nrt,srt,xn,lrt,bAe,irt,drt,vAe,crt,frt,FAe,mrt,grt,hrt,Xe,C6,TAe,prt,_rt,Wre,urt,brt,vrt,w6,MAe,Frt,Trt,Qre,Mrt,Ert,Crt,A6,EAe,wrt,Art,Hre,Lrt,yrt,xrt,L6,CAe,$rt,krt,Ure,Srt,Rrt,Prt,y6,wAe,Brt,Irt,Jre,Nrt,qrt,jrt,x6,AAe,Drt,Grt,Yre,Ort,Vrt,Xrt,$6,LAe,zrt,Wrt,Kre,Qrt,Hrt,Urt,k6,yAe,Jrt,Yrt,Zre,Krt,Zrt,ett,S6,AQe,Tf,R6,xAe,pk,ott,$Ae,rtt,LQe,Cr,_k,ttt,Mf,att,ete,ntt,stt,ote,ltt,itt,dtt,uk,ctt,kAe,ftt,mtt,gtt,oa,bk,htt,SAe,ptt,_tt,Ef,utt,RAe,btt,vtt,rte,Ftt,Ttt,Mtt,P6,Ett,Kr,vk,Ctt,PAe,wtt,Att,$n,Ltt,BAe,ytt,xtt,IAe,$tt,ktt,NAe,Stt,Rtt,Ptt,ze,B6,qAe,Btt,Itt,tte,Ntt,qtt,jtt,I6,jAe,Dtt,Gtt,ate,Ott,Vtt,Xtt,N6,DAe,ztt,Wtt,nte,Qtt,Htt,Utt,q6,GAe,Jtt,Ytt,ste,Ktt,Ztt,eat,j6,OAe,oat,rat,lte,tat,aat,nat,D6,VAe,sat,lat,ite,iat,dat,cat,G6,XAe,fat,mat,dte,gat,hat,pat,O6,zAe,_at,uat,cte,bat,vat,Fat,V6,yQe,Cf,X6,WAe,Fk,Tat,QAe,Mat,xQe,wr,Tk,Eat,wf,Cat,fte,wat,Aat,mte,Lat,yat,xat,Mk,$at,HAe,kat,Sat,Rat,ra,Ek,Pat,UAe,Bat,Iat,Af,Nat,JAe,qat,jat,gte,Dat,Gat,Oat,z6,Vat,Zr,Ck,Xat,YAe,zat,Wat,kn,Qat,KAe,Hat,Uat,ZAe,Jat,Yat,e7e,Kat,Zat,ent,o7e,W6,r7e,ont,rnt,hte,tnt,ant,nnt,Q6,$Qe,Lf,H6,t7e,wk,snt,a7e,lnt,kQe,Ar,Ak,int,yf,dnt,pte,cnt,fnt,_te,mnt,gnt,hnt,Lk,pnt,n7e,_nt,unt,bnt,ta,yk,vnt,s7e,Fnt,Tnt,xf,Mnt,l7e,Ent,Cnt,ute,wnt,Ant,Lnt,U6,ynt,et,xk,xnt,i7e,$nt,knt,Sn,Snt,d7e,Rnt,Pnt,c7e,Bnt,Int,f7e,Nnt,qnt,jnt,$k,J6,m7e,Dnt,Gnt,bte,Ont,Vnt,Xnt,Y6,g7e,znt,Wnt,vte,Qnt,Hnt,Unt,K6,SQe,$f,Z6,h7e,kk,Jnt,p7e,Ynt,RQe,Lr,Sk,Knt,kf,Znt,Fte,est,ost,Tte,rst,tst,ast,Rk,nst,_7e,sst,lst,ist,aa,Pk,dst,u7e,cst,fst,Sf,mst,b7e,gst,hst,Mte,pst,_st,ust,eA,bst,ot,Bk,vst,v7e,Fst,Tst,Rn,Mst,F7e,Est,Cst,T7e,wst,Ast,M7e,Lst,yst,xst,E7e,oA,C7e,$st,kst,Ete,Sst,Rst,Pst,rA,PQe;return c=new re({}),Sa=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),AL=new re({}),LL=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Bst({props:{warning:!0,$$slots:{default:[aYt]},$$scope:{ctx:$}}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/configuration_auto.py#L617"}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/configuration_auto.py#L640"}}),oh=new q({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[nYt]},$$scope:{ctx:$}}}),RL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/configuration_auto.py#L763"}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/tokenization_auto.py#L411"}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18420/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/tokenization_auto.py#L425"}}),Nh=new q({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[sYt]},$$scope:{ctx:$}}}),jL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/tokenization_auto.py#L624"}}),DL=new re({}),GL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/feature_extraction_auto.py#L197"}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18420/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/feature_extraction_auto.py#L211"}}),Mp=new Bst({props:{$$slots:{default:[lYt]},$$scope:{ctx:$}}}),Ep=new q({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[iYt]},$$scope:{ctx:$}}}),zL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/feature_extraction_auto.py#L338"}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/processing_auto.py#L90"}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/processing_auto.py#L104"}}),zp=new Bst({props:{$$slots:{default:[dYt]},$$scope:{ctx:$}}}),Wp=new q({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[cYt]},$$scope:{ctx:$}}}),YL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/processing_auto.py#L257"}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L796"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),Up=new q({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[fYt]},$$scope:{ctx:$}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new q({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[mYt]},$$scope:{ctx:$}}}),ty=new re({}),ay=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L803"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[gYt]},$$scope:{ctx:$}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),K2=new q({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hYt]},$$scope:{ctx:$}}}),iy=new re({}),dy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L818"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[pYt]},$$scope:{ctx:$}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new q({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_Yt]},$$scope:{ctx:$}}}),gy=new re({}),hy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L825"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[uYt]},$$scope:{ctx:$}}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new q({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bYt]},$$scope:{ctx:$}}}),by=new re({}),vy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L832"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vYt]},$$scope:{ctx:$}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new q({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FYt]},$$scope:{ctx:$}}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L841"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),ob=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[TYt]},$$scope:{ctx:$}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),ov=new q({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MYt]},$$scope:{ctx:$}}}),yy=new re({}),xy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L886"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),tv=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[EYt]},$$scope:{ctx:$}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new q({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CYt]},$$scope:{ctx:$}}}),Ry=new re({}),Py=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L893"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wYt]},$$scope:{ctx:$}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new q({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[AYt]},$$scope:{ctx:$}}}),qy=new re({}),jy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L879"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[LYt]},$$scope:{ctx:$}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new q({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[yYt]},$$scope:{ctx:$}}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L850"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[xYt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new q({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$Yt]},$$scope:{ctx:$}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L857"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[kYt]},$$scope:{ctx:$}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new q({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[SYt]},$$scope:{ctx:$}}}),Zy=new re({}),e9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L902"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[RYt]},$$scope:{ctx:$}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new q({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[PYt]},$$scope:{ctx:$}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L941"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[BYt]},$$scope:{ctx:$}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new q({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[IYt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L868"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[NYt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new q({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[qYt]},$$scope:{ctx:$}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L948"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[jYt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new q({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[DYt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L971"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[GYt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new q({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[OYt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L955"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new q({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[VYt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new q({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[XYt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L962"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zYt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new q({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[WYt]},$$scope:{ctx:$}}}),B9=new re({}),I9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L980"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[QYt]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),r8=new q({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[HYt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L987"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),a8=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[UYt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new q({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[JYt]},$$scope:{ctx:$}}}),z9=new re({}),W9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L934"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),m8=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[YYt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),_8=new q({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[KYt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L909"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),b8=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ZYt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new q({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[eKt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L916"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[oKt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),$8=new q({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[rKt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_auto.py#L925"}}),cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),S8=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[tKt]},$$scope:{ctx:$}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),B8=new q({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[aKt]},$$scope:{ctx:$}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),N8=new q({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[nKt]},$$scope:{ctx:$}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new q({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[sKt]},$$scope:{ctx:$}}}),ux=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[lKt]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new q({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iKt]},$$scope:{ctx:$}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[dKt]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new q({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cKt]},$$scope:{ctx:$}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),$x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18420/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[fKt]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new q({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[mKt]},$$scope:{ctx:$}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[gKt]},$$scope:{ctx:$}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new q({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hKt]},$$scope:{ctx:$}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pKt]},$$scope:{ctx:$}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new q({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_Kt]},$$scope:{ctx:$}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uKt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new q({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bKt]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[vKt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new q({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[FKt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[TKt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new q({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[MKt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),l$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[EKt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new q({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CKt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[wKt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new q({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[AKt]},$$scope:{ctx:$}}}),h$=new re({}),p$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),u$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LKt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),c3=new q({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yKt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),M$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[xKt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new q({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Kt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),L$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kKt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new q({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SKt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new q({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[RKt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new q({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[PKt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),J3=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[BKt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new q({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IKt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[NKt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new q({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qKt]},$$scope:{ctx:$}}}),X$=new re({}),z$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[jKt]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new q({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DKt]},$$scope:{ctx:$}}}),U$=new re({}),J$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),K$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GKt]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new q({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OKt]},$$scope:{ctx:$}}}),ek=new re({}),ok=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),tk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),Yw=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VKt]},$$scope:{ctx:$}}}),ak=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new q({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XKt]},$$scope:{ctx:$}}}),nk=new re({}),sk=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zKt]},$$scope:{ctx:$}}}),dk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new q({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WKt]},$$scope:{ctx:$}}}),ck=new re({}),fk=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[QKt]},$$scope:{ctx:$}}}),hk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new q({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HKt]},$$scope:{ctx:$}}}),pk=new re({}),_k=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),bk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[UKt]},$$scope:{ctx:$}}}),vk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),V6=new q({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JKt]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),z6=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YKt]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),Q6=new q({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KKt]},$$scope:{ctx:$}}}),wk=new re({}),Ak=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ZKt]},$$scope:{ctx:$}}}),xk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new q({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[eZt]},$$scope:{ctx:$}}}),kk=new re({}),Sk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Pk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[oZt]},$$scope:{ctx:$}}}),Bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18420/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18420/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18420/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new q({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rZt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),$i=o("Auto Classes"),If=l(),lt=a("p"),ki=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=a("code"),ML=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ri=o("Instantiating one of "),Bn=a("a"),EL=o("AutoConfig"),In=o(", "),Nn=a("a"),CL=o("AutoModel"),Pi=o(`, and
`),qn=a("a"),wL=o("AutoTokenizer"),Bi=o(" will directly create a class of the relevant architecture. For instance"),qf=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),nR=o("will create a model that is an instance of "),Ii=a("a"),sR=o("BertModel"),lR=o("."),Ao=l(),Ra=a("p"),iR=o("There is one class of "),jf=a("code"),dR=o("AutoModel"),XUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xze=l(),Ni=a("h2"),Df=a("a"),une=a("span"),F(AL.$$.fragment),zUe=l(),bne=a("span"),WUe=o("Extending the Auto Classes"),$ze=l(),jn=a("p"),QUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vne=a("code"),HUe=o("NewModel"),UUe=o(", make sure you have a "),Fne=a("code"),JUe=o("NewModelConfig"),YUe=o(` then you can add those to the auto
classes like this:`),kze=l(),F(LL.$$.fragment),Sze=l(),cR=a("p"),KUe=o("You will then be able to use the auto classes like you would usually do!"),Rze=l(),F(Gf.$$.fragment),Pze=l(),qi=a("h2"),Of=a("a"),Tne=a("span"),F(yL.$$.fragment),ZUe=l(),Mne=a("span"),eJe=o("AutoConfig"),Bze=l(),Lo=a("div"),F(xL.$$.fragment),oJe=l(),$L=a("p"),rJe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fR=a("a"),tJe=o("from_pretrained()"),aJe=o(" class method."),nJe=l(),kL=a("p"),sJe=o("This class cannot be instantiated directly using "),Ene=a("code"),lJe=o("__init__()"),iJe=o(" (throws an error)."),dJe=l(),yr=a("div"),F(SL.$$.fragment),cJe=l(),Cne=a("p"),fJe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mJe=l(),ji=a("p"),gJe=o("The configuration class to instantiate is selected based on the "),wne=a("code"),hJe=o("model_type"),pJe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ane=a("code"),_Je=o("pretrained_model_name_or_path"),uJe=o(":"),bJe=l(),A=a("ul"),Vf=a("li"),Lne=a("strong"),vJe=o("albert"),FJe=o(" \u2014 "),mR=a("a"),TJe=o("AlbertConfig"),MJe=o(" (ALBERT model)"),EJe=l(),Xf=a("li"),yne=a("strong"),CJe=o("bart"),wJe=o(" \u2014 "),gR=a("a"),AJe=o("BartConfig"),LJe=o(" (BART model)"),yJe=l(),zf=a("li"),xne=a("strong"),xJe=o("beit"),$Je=o(" \u2014 "),hR=a("a"),kJe=o("BeitConfig"),SJe=o(" (BEiT model)"),RJe=l(),Wf=a("li"),$ne=a("strong"),PJe=o("bert"),BJe=o(" \u2014 "),pR=a("a"),IJe=o("BertConfig"),NJe=o(" (BERT model)"),qJe=l(),Qf=a("li"),kne=a("strong"),jJe=o("bert-generation"),DJe=o(" \u2014 "),_R=a("a"),GJe=o("BertGenerationConfig"),OJe=o(" (Bert Generation model)"),VJe=l(),Hf=a("li"),Sne=a("strong"),XJe=o("big_bird"),zJe=o(" \u2014 "),uR=a("a"),WJe=o("BigBirdConfig"),QJe=o(" (BigBird model)"),HJe=l(),Uf=a("li"),Rne=a("strong"),UJe=o("bigbird_pegasus"),JJe=o(" \u2014 "),bR=a("a"),YJe=o("BigBirdPegasusConfig"),KJe=o(" (BigBird-Pegasus model)"),ZJe=l(),Jf=a("li"),Pne=a("strong"),eYe=o("blenderbot"),oYe=o(" \u2014 "),vR=a("a"),rYe=o("BlenderbotConfig"),tYe=o(" (Blenderbot model)"),aYe=l(),Yf=a("li"),Bne=a("strong"),nYe=o("blenderbot-small"),sYe=o(" \u2014 "),FR=a("a"),lYe=o("BlenderbotSmallConfig"),iYe=o(" (BlenderbotSmall model)"),dYe=l(),Kf=a("li"),Ine=a("strong"),cYe=o("bloom"),fYe=o(" \u2014 "),TR=a("a"),mYe=o("BloomConfig"),gYe=o(" (BLOOM model)"),hYe=l(),Zf=a("li"),Nne=a("strong"),pYe=o("camembert"),_Ye=o(" \u2014 "),MR=a("a"),uYe=o("CamembertConfig"),bYe=o(" (CamemBERT model)"),vYe=l(),em=a("li"),qne=a("strong"),FYe=o("canine"),TYe=o(" \u2014 "),ER=a("a"),MYe=o("CanineConfig"),EYe=o(" (CANINE model)"),CYe=l(),om=a("li"),jne=a("strong"),wYe=o("clip"),AYe=o(" \u2014 "),CR=a("a"),LYe=o("CLIPConfig"),yYe=o(" (CLIP model)"),xYe=l(),rm=a("li"),Dne=a("strong"),$Ye=o("codegen"),kYe=o(" \u2014 "),wR=a("a"),SYe=o("CodeGenConfig"),RYe=o(" (CodeGen model)"),PYe=l(),tm=a("li"),Gne=a("strong"),BYe=o("convbert"),IYe=o(" \u2014 "),AR=a("a"),NYe=o("ConvBertConfig"),qYe=o(" (ConvBERT model)"),jYe=l(),am=a("li"),One=a("strong"),DYe=o("convnext"),GYe=o(" \u2014 "),LR=a("a"),OYe=o("ConvNextConfig"),VYe=o(" (ConvNeXT model)"),XYe=l(),nm=a("li"),Vne=a("strong"),zYe=o("ctrl"),WYe=o(" \u2014 "),yR=a("a"),QYe=o("CTRLConfig"),HYe=o(" (CTRL model)"),UYe=l(),sm=a("li"),Xne=a("strong"),JYe=o("cvt"),YYe=o(" \u2014 "),xR=a("a"),KYe=o("CvtConfig"),ZYe=o(" (CvT model)"),eKe=l(),lm=a("li"),zne=a("strong"),oKe=o("data2vec-audio"),rKe=o(" \u2014 "),$R=a("a"),tKe=o("Data2VecAudioConfig"),aKe=o(" (Data2VecAudio model)"),nKe=l(),im=a("li"),Wne=a("strong"),sKe=o("data2vec-text"),lKe=o(" \u2014 "),kR=a("a"),iKe=o("Data2VecTextConfig"),dKe=o(" (Data2VecText model)"),cKe=l(),dm=a("li"),Qne=a("strong"),fKe=o("data2vec-vision"),mKe=o(" \u2014 "),SR=a("a"),gKe=o("Data2VecVisionConfig"),hKe=o(" (Data2VecVision model)"),pKe=l(),cm=a("li"),Hne=a("strong"),_Ke=o("deberta"),uKe=o(" \u2014 "),RR=a("a"),bKe=o("DebertaConfig"),vKe=o(" (DeBERTa model)"),FKe=l(),fm=a("li"),Une=a("strong"),TKe=o("deberta-v2"),MKe=o(" \u2014 "),PR=a("a"),EKe=o("DebertaV2Config"),CKe=o(" (DeBERTa-v2 model)"),wKe=l(),mm=a("li"),Jne=a("strong"),AKe=o("decision_transformer"),LKe=o(" \u2014 "),BR=a("a"),yKe=o("DecisionTransformerConfig"),xKe=o(" (Decision Transformer model)"),$Ke=l(),gm=a("li"),Yne=a("strong"),kKe=o("deit"),SKe=o(" \u2014 "),IR=a("a"),RKe=o("DeiTConfig"),PKe=o(" (DeiT model)"),BKe=l(),hm=a("li"),Kne=a("strong"),IKe=o("detr"),NKe=o(" \u2014 "),NR=a("a"),qKe=o("DetrConfig"),jKe=o(" (DETR model)"),DKe=l(),pm=a("li"),Zne=a("strong"),GKe=o("distilbert"),OKe=o(" \u2014 "),qR=a("a"),VKe=o("DistilBertConfig"),XKe=o(" (DistilBERT model)"),zKe=l(),_m=a("li"),ese=a("strong"),WKe=o("dpr"),QKe=o(" \u2014 "),jR=a("a"),HKe=o("DPRConfig"),UKe=o(" (DPR model)"),JKe=l(),um=a("li"),ose=a("strong"),YKe=o("dpt"),KKe=o(" \u2014 "),DR=a("a"),ZKe=o("DPTConfig"),eZe=o(" (DPT model)"),oZe=l(),bm=a("li"),rse=a("strong"),rZe=o("electra"),tZe=o(" \u2014 "),GR=a("a"),aZe=o("ElectraConfig"),nZe=o(" (ELECTRA model)"),sZe=l(),vm=a("li"),tse=a("strong"),lZe=o("encoder-decoder"),iZe=o(" \u2014 "),OR=a("a"),dZe=o("EncoderDecoderConfig"),cZe=o(" (Encoder decoder model)"),fZe=l(),Fm=a("li"),ase=a("strong"),mZe=o("flaubert"),gZe=o(" \u2014 "),VR=a("a"),hZe=o("FlaubertConfig"),pZe=o(" (FlauBERT model)"),_Ze=l(),Tm=a("li"),nse=a("strong"),uZe=o("flava"),bZe=o(" \u2014 "),XR=a("a"),vZe=o("FlavaConfig"),FZe=o(" (FLAVA model)"),TZe=l(),Mm=a("li"),sse=a("strong"),MZe=o("fnet"),EZe=o(" \u2014 "),zR=a("a"),CZe=o("FNetConfig"),wZe=o(" (FNet model)"),AZe=l(),Em=a("li"),lse=a("strong"),LZe=o("fsmt"),yZe=o(" \u2014 "),WR=a("a"),xZe=o("FSMTConfig"),$Ze=o(" (FairSeq Machine-Translation model)"),kZe=l(),Cm=a("li"),ise=a("strong"),SZe=o("funnel"),RZe=o(" \u2014 "),QR=a("a"),PZe=o("FunnelConfig"),BZe=o(" (Funnel Transformer model)"),IZe=l(),wm=a("li"),dse=a("strong"),NZe=o("glpn"),qZe=o(" \u2014 "),HR=a("a"),jZe=o("GLPNConfig"),DZe=o(" (GLPN model)"),GZe=l(),Am=a("li"),cse=a("strong"),OZe=o("gpt2"),VZe=o(" \u2014 "),UR=a("a"),XZe=o("GPT2Config"),zZe=o(" (OpenAI GPT-2 model)"),WZe=l(),Lm=a("li"),fse=a("strong"),QZe=o("gpt_neo"),HZe=o(" \u2014 "),JR=a("a"),UZe=o("GPTNeoConfig"),JZe=o(" (GPT Neo model)"),YZe=l(),ym=a("li"),mse=a("strong"),KZe=o("gpt_neox"),ZZe=o(" \u2014 "),YR=a("a"),eeo=o("GPTNeoXConfig"),oeo=o(" (GPT NeoX model)"),reo=l(),xm=a("li"),gse=a("strong"),teo=o("gptj"),aeo=o(" \u2014 "),KR=a("a"),neo=o("GPTJConfig"),seo=o(" (GPT-J model)"),leo=l(),$m=a("li"),hse=a("strong"),ieo=o("groupvit"),deo=o(" \u2014 "),ZR=a("a"),ceo=o("GroupViTConfig"),feo=o(" (GroupViT model)"),meo=l(),km=a("li"),pse=a("strong"),geo=o("hubert"),heo=o(" \u2014 "),eP=a("a"),peo=o("HubertConfig"),_eo=o(" (Hubert model)"),ueo=l(),Sm=a("li"),_se=a("strong"),beo=o("ibert"),veo=o(" \u2014 "),oP=a("a"),Feo=o("IBertConfig"),Teo=o(" (I-BERT model)"),Meo=l(),Rm=a("li"),use=a("strong"),Eeo=o("imagegpt"),Ceo=o(" \u2014 "),rP=a("a"),weo=o("ImageGPTConfig"),Aeo=o(" (ImageGPT model)"),Leo=l(),Pm=a("li"),bse=a("strong"),yeo=o("layoutlm"),xeo=o(" \u2014 "),tP=a("a"),$eo=o("LayoutLMConfig"),keo=o(" (LayoutLM model)"),Seo=l(),Bm=a("li"),vse=a("strong"),Reo=o("layoutlmv2"),Peo=o(" \u2014 "),aP=a("a"),Beo=o("LayoutLMv2Config"),Ieo=o(" (LayoutLMv2 model)"),Neo=l(),Im=a("li"),Fse=a("strong"),qeo=o("layoutlmv3"),jeo=o(" \u2014 "),nP=a("a"),Deo=o("LayoutLMv3Config"),Geo=o(" (LayoutLMv3 model)"),Oeo=l(),Nm=a("li"),Tse=a("strong"),Veo=o("led"),Xeo=o(" \u2014 "),sP=a("a"),zeo=o("LEDConfig"),Weo=o(" (LED model)"),Qeo=l(),qm=a("li"),Mse=a("strong"),Heo=o("levit"),Ueo=o(" \u2014 "),lP=a("a"),Jeo=o("LevitConfig"),Yeo=o(" (LeViT model)"),Keo=l(),jm=a("li"),Ese=a("strong"),Zeo=o("longformer"),eoo=o(" \u2014 "),iP=a("a"),ooo=o("LongformerConfig"),roo=o(" (Longformer model)"),too=l(),Dm=a("li"),Cse=a("strong"),aoo=o("longt5"),noo=o(" \u2014 "),dP=a("a"),soo=o("LongT5Config"),loo=o(" (LongT5 model)"),ioo=l(),Gm=a("li"),wse=a("strong"),doo=o("luke"),coo=o(" \u2014 "),cP=a("a"),foo=o("LukeConfig"),moo=o(" (LUKE model)"),goo=l(),Om=a("li"),Ase=a("strong"),hoo=o("lxmert"),poo=o(" \u2014 "),fP=a("a"),_oo=o("LxmertConfig"),uoo=o(" (LXMERT model)"),boo=l(),Vm=a("li"),Lse=a("strong"),voo=o("m2m_100"),Foo=o(" \u2014 "),mP=a("a"),Too=o("M2M100Config"),Moo=o(" (M2M100 model)"),Eoo=l(),Xm=a("li"),yse=a("strong"),Coo=o("marian"),woo=o(" \u2014 "),gP=a("a"),Aoo=o("MarianConfig"),Loo=o(" (Marian model)"),yoo=l(),zm=a("li"),xse=a("strong"),xoo=o("maskformer"),$oo=o(" \u2014 "),hP=a("a"),koo=o("MaskFormerConfig"),Soo=o(" (MaskFormer model)"),Roo=l(),Wm=a("li"),$se=a("strong"),Poo=o("mbart"),Boo=o(" \u2014 "),pP=a("a"),Ioo=o("MBartConfig"),Noo=o(" (mBART model)"),qoo=l(),Qm=a("li"),kse=a("strong"),joo=o("mctct"),Doo=o(" \u2014 "),_P=a("a"),Goo=o("MCTCTConfig"),Ooo=o(" (M-CTC-T model)"),Voo=l(),Hm=a("li"),Sse=a("strong"),Xoo=o("megatron-bert"),zoo=o(" \u2014 "),uP=a("a"),Woo=o("MegatronBertConfig"),Qoo=o(" (Megatron-BERT model)"),Hoo=l(),Um=a("li"),Rse=a("strong"),Uoo=o("mobilebert"),Joo=o(" \u2014 "),bP=a("a"),Yoo=o("MobileBertConfig"),Koo=o(" (MobileBERT model)"),Zoo=l(),Jm=a("li"),Pse=a("strong"),ero=o("mobilevit"),oro=o(" \u2014 "),vP=a("a"),rro=o("MobileViTConfig"),tro=o(" (MobileViT model)"),aro=l(),Ym=a("li"),Bse=a("strong"),nro=o("mpnet"),sro=o(" \u2014 "),FP=a("a"),lro=o("MPNetConfig"),iro=o(" (MPNet model)"),dro=l(),Km=a("li"),Ise=a("strong"),cro=o("mt5"),fro=o(" \u2014 "),TP=a("a"),mro=o("MT5Config"),gro=o(" (MT5 model)"),hro=l(),Zm=a("li"),Nse=a("strong"),pro=o("mvp"),_ro=o(" \u2014 "),MP=a("a"),uro=o("MvpConfig"),bro=o(" (MVP model)"),vro=l(),eg=a("li"),qse=a("strong"),Fro=o("nezha"),Tro=o(" \u2014 "),EP=a("a"),Mro=o("NezhaConfig"),Ero=o(" (Nezha model)"),Cro=l(),og=a("li"),jse=a("strong"),wro=o("nystromformer"),Aro=o(" \u2014 "),CP=a("a"),Lro=o("NystromformerConfig"),yro=o(" (Nystr\xF6mformer model)"),xro=l(),rg=a("li"),Dse=a("strong"),$ro=o("openai-gpt"),kro=o(" \u2014 "),wP=a("a"),Sro=o("OpenAIGPTConfig"),Rro=o(" (OpenAI GPT model)"),Pro=l(),tg=a("li"),Gse=a("strong"),Bro=o("opt"),Iro=o(" \u2014 "),AP=a("a"),Nro=o("OPTConfig"),qro=o(" (OPT model)"),jro=l(),ag=a("li"),Ose=a("strong"),Dro=o("owlvit"),Gro=o(" \u2014 "),LP=a("a"),Oro=o("OwlViTConfig"),Vro=o(" (OWL-ViT model)"),Xro=l(),ng=a("li"),Vse=a("strong"),zro=o("pegasus"),Wro=o(" \u2014 "),yP=a("a"),Qro=o("PegasusConfig"),Hro=o(" (Pegasus model)"),Uro=l(),sg=a("li"),Xse=a("strong"),Jro=o("perceiver"),Yro=o(" \u2014 "),xP=a("a"),Kro=o("PerceiverConfig"),Zro=o(" (Perceiver model)"),eto=l(),lg=a("li"),zse=a("strong"),oto=o("plbart"),rto=o(" \u2014 "),$P=a("a"),tto=o("PLBartConfig"),ato=o(" (PLBart model)"),nto=l(),ig=a("li"),Wse=a("strong"),sto=o("poolformer"),lto=o(" \u2014 "),kP=a("a"),ito=o("PoolFormerConfig"),dto=o(" (PoolFormer model)"),cto=l(),dg=a("li"),Qse=a("strong"),fto=o("prophetnet"),mto=o(" \u2014 "),SP=a("a"),gto=o("ProphetNetConfig"),hto=o(" (ProphetNet model)"),pto=l(),cg=a("li"),Hse=a("strong"),_to=o("qdqbert"),uto=o(" \u2014 "),RP=a("a"),bto=o("QDQBertConfig"),vto=o(" (QDQBert model)"),Fto=l(),fg=a("li"),Use=a("strong"),Tto=o("rag"),Mto=o(" \u2014 "),PP=a("a"),Eto=o("RagConfig"),Cto=o(" (RAG model)"),wto=l(),mg=a("li"),Jse=a("strong"),Ato=o("realm"),Lto=o(" \u2014 "),BP=a("a"),yto=o("RealmConfig"),xto=o(" (REALM model)"),$to=l(),gg=a("li"),Yse=a("strong"),kto=o("reformer"),Sto=o(" \u2014 "),IP=a("a"),Rto=o("ReformerConfig"),Pto=o(" (Reformer model)"),Bto=l(),hg=a("li"),Kse=a("strong"),Ito=o("regnet"),Nto=o(" \u2014 "),NP=a("a"),qto=o("RegNetConfig"),jto=o(" (RegNet model)"),Dto=l(),pg=a("li"),Zse=a("strong"),Gto=o("rembert"),Oto=o(" \u2014 "),qP=a("a"),Vto=o("RemBertConfig"),Xto=o(" (RemBERT model)"),zto=l(),_g=a("li"),ele=a("strong"),Wto=o("resnet"),Qto=o(" \u2014 "),jP=a("a"),Hto=o("ResNetConfig"),Uto=o(" (ResNet model)"),Jto=l(),ug=a("li"),ole=a("strong"),Yto=o("retribert"),Kto=o(" \u2014 "),DP=a("a"),Zto=o("RetriBertConfig"),eao=o(" (RetriBERT model)"),oao=l(),bg=a("li"),rle=a("strong"),rao=o("roberta"),tao=o(" \u2014 "),GP=a("a"),aao=o("RobertaConfig"),nao=o(" (RoBERTa model)"),sao=l(),vg=a("li"),tle=a("strong"),lao=o("roformer"),iao=o(" \u2014 "),OP=a("a"),dao=o("RoFormerConfig"),cao=o(" (RoFormer model)"),fao=l(),Fg=a("li"),ale=a("strong"),mao=o("segformer"),gao=o(" \u2014 "),VP=a("a"),hao=o("SegformerConfig"),pao=o(" (SegFormer model)"),_ao=l(),Tg=a("li"),nle=a("strong"),uao=o("sew"),bao=o(" \u2014 "),XP=a("a"),vao=o("SEWConfig"),Fao=o(" (SEW model)"),Tao=l(),Mg=a("li"),sle=a("strong"),Mao=o("sew-d"),Eao=o(" \u2014 "),zP=a("a"),Cao=o("SEWDConfig"),wao=o(" (SEW-D model)"),Aao=l(),Eg=a("li"),lle=a("strong"),Lao=o("speech-encoder-decoder"),yao=o(" \u2014 "),WP=a("a"),xao=o("SpeechEncoderDecoderConfig"),$ao=o(" (Speech Encoder decoder model)"),kao=l(),Cg=a("li"),ile=a("strong"),Sao=o("speech_to_text"),Rao=o(" \u2014 "),QP=a("a"),Pao=o("Speech2TextConfig"),Bao=o(" (Speech2Text model)"),Iao=l(),wg=a("li"),dle=a("strong"),Nao=o("speech_to_text_2"),qao=o(" \u2014 "),HP=a("a"),jao=o("Speech2Text2Config"),Dao=o(" (Speech2Text2 model)"),Gao=l(),Ag=a("li"),cle=a("strong"),Oao=o("splinter"),Vao=o(" \u2014 "),UP=a("a"),Xao=o("SplinterConfig"),zao=o(" (Splinter model)"),Wao=l(),Lg=a("li"),fle=a("strong"),Qao=o("squeezebert"),Hao=o(" \u2014 "),JP=a("a"),Uao=o("SqueezeBertConfig"),Jao=o(" (SqueezeBERT model)"),Yao=l(),yg=a("li"),mle=a("strong"),Kao=o("swin"),Zao=o(" \u2014 "),YP=a("a"),eno=o("SwinConfig"),ono=o(" (Swin Transformer model)"),rno=l(),xg=a("li"),gle=a("strong"),tno=o("swinv2"),ano=o(" \u2014 "),KP=a("a"),nno=o("Swinv2Config"),sno=o(" (Swin Transformer V2 model)"),lno=l(),$g=a("li"),hle=a("strong"),ino=o("t5"),dno=o(" \u2014 "),ZP=a("a"),cno=o("T5Config"),fno=o(" (T5 model)"),mno=l(),kg=a("li"),ple=a("strong"),gno=o("tapas"),hno=o(" \u2014 "),eB=a("a"),pno=o("TapasConfig"),_no=o(" (TAPAS model)"),uno=l(),Sg=a("li"),_le=a("strong"),bno=o("trajectory_transformer"),vno=o(" \u2014 "),oB=a("a"),Fno=o("TrajectoryTransformerConfig"),Tno=o(" (Trajectory Transformer model)"),Mno=l(),Rg=a("li"),ule=a("strong"),Eno=o("transfo-xl"),Cno=o(" \u2014 "),rB=a("a"),wno=o("TransfoXLConfig"),Ano=o(" (Transformer-XL model)"),Lno=l(),Pg=a("li"),ble=a("strong"),yno=o("trocr"),xno=o(" \u2014 "),tB=a("a"),$no=o("TrOCRConfig"),kno=o(" (TrOCR model)"),Sno=l(),Bg=a("li"),vle=a("strong"),Rno=o("unispeech"),Pno=o(" \u2014 "),aB=a("a"),Bno=o("UniSpeechConfig"),Ino=o(" (UniSpeech model)"),Nno=l(),Ig=a("li"),Fle=a("strong"),qno=o("unispeech-sat"),jno=o(" \u2014 "),nB=a("a"),Dno=o("UniSpeechSatConfig"),Gno=o(" (UniSpeechSat model)"),Ono=l(),Ng=a("li"),Tle=a("strong"),Vno=o("van"),Xno=o(" \u2014 "),sB=a("a"),zno=o("VanConfig"),Wno=o(" (VAN model)"),Qno=l(),qg=a("li"),Mle=a("strong"),Hno=o("vilt"),Uno=o(" \u2014 "),lB=a("a"),Jno=o("ViltConfig"),Yno=o(" (ViLT model)"),Kno=l(),jg=a("li"),Ele=a("strong"),Zno=o("vision-encoder-decoder"),eso=o(" \u2014 "),iB=a("a"),oso=o("VisionEncoderDecoderConfig"),rso=o(" (Vision Encoder decoder model)"),tso=l(),Dg=a("li"),Cle=a("strong"),aso=o("vision-text-dual-encoder"),nso=o(" \u2014 "),dB=a("a"),sso=o("VisionTextDualEncoderConfig"),lso=o(" (VisionTextDualEncoder model)"),iso=l(),Gg=a("li"),wle=a("strong"),dso=o("visual_bert"),cso=o(" \u2014 "),cB=a("a"),fso=o("VisualBertConfig"),mso=o(" (VisualBERT model)"),gso=l(),Og=a("li"),Ale=a("strong"),hso=o("vit"),pso=o(" \u2014 "),fB=a("a"),_so=o("ViTConfig"),uso=o(" (ViT model)"),bso=l(),Vg=a("li"),Lle=a("strong"),vso=o("vit_mae"),Fso=o(" \u2014 "),mB=a("a"),Tso=o("ViTMAEConfig"),Mso=o(" (ViTMAE model)"),Eso=l(),Xg=a("li"),yle=a("strong"),Cso=o("wav2vec2"),wso=o(" \u2014 "),gB=a("a"),Aso=o("Wav2Vec2Config"),Lso=o(" (Wav2Vec2 model)"),yso=l(),zg=a("li"),xle=a("strong"),xso=o("wav2vec2-conformer"),$so=o(" \u2014 "),hB=a("a"),kso=o("Wav2Vec2ConformerConfig"),Sso=o(" (Wav2Vec2-Conformer model)"),Rso=l(),Wg=a("li"),$le=a("strong"),Pso=o("wavlm"),Bso=o(" \u2014 "),pB=a("a"),Iso=o("WavLMConfig"),Nso=o(" (WavLM model)"),qso=l(),Qg=a("li"),kle=a("strong"),jso=o("xglm"),Dso=o(" \u2014 "),_B=a("a"),Gso=o("XGLMConfig"),Oso=o(" (XGLM model)"),Vso=l(),Hg=a("li"),Sle=a("strong"),Xso=o("xlm"),zso=o(" \u2014 "),uB=a("a"),Wso=o("XLMConfig"),Qso=o(" (XLM model)"),Hso=l(),Ug=a("li"),Rle=a("strong"),Uso=o("xlm-prophetnet"),Jso=o(" \u2014 "),bB=a("a"),Yso=o("XLMProphetNetConfig"),Kso=o(" (XLM-ProphetNet model)"),Zso=l(),Jg=a("li"),Ple=a("strong"),elo=o("xlm-roberta"),olo=o(" \u2014 "),vB=a("a"),rlo=o("XLMRobertaConfig"),tlo=o(" (XLM-RoBERTa model)"),alo=l(),Yg=a("li"),Ble=a("strong"),nlo=o("xlm-roberta-xl"),slo=o(" \u2014 "),FB=a("a"),llo=o("XLMRobertaXLConfig"),ilo=o(" (XLM-RoBERTa-XL model)"),dlo=l(),Kg=a("li"),Ile=a("strong"),clo=o("xlnet"),flo=o(" \u2014 "),TB=a("a"),mlo=o("XLNetConfig"),glo=o(" (XLNet model)"),hlo=l(),Zg=a("li"),Nle=a("strong"),plo=o("yolos"),_lo=o(" \u2014 "),MB=a("a"),ulo=o("YolosConfig"),blo=o(" (YOLOS model)"),vlo=l(),eh=a("li"),qle=a("strong"),Flo=o("yoso"),Tlo=o(" \u2014 "),EB=a("a"),Mlo=o("YosoConfig"),Elo=o(" (YOSO model)"),Clo=l(),F(oh.$$.fragment),wlo=l(),rh=a("div"),F(RL.$$.fragment),Alo=l(),jle=a("p"),Llo=o("Register a new configuration for this class."),Ize=l(),Di=a("h2"),th=a("a"),Dle=a("span"),F(PL.$$.fragment),ylo=l(),Gle=a("span"),xlo=o("AutoTokenizer"),Nze=l(),yo=a("div"),F(BL.$$.fragment),$lo=l(),IL=a("p"),klo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CB=a("a"),Slo=o("AutoTokenizer.from_pretrained()"),Rlo=o(" class method."),Plo=l(),NL=a("p"),Blo=o("This class cannot be instantiated directly using "),Ole=a("code"),Ilo=o("__init__()"),Nlo=o(" (throws an error)."),qlo=l(),xr=a("div"),F(qL.$$.fragment),jlo=l(),Vle=a("p"),Dlo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Glo=l(),Pa=a("p"),Olo=o("The tokenizer class to instantiate is selected based on the "),Xle=a("code"),Vlo=o("model_type"),Xlo=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),zlo=o("pretrained_model_name_or_path"),Wlo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=a("code"),Qlo=o("pretrained_model_name_or_path"),Hlo=o(":"),Ulo=l(),k=a("ul"),Dn=a("li"),Qle=a("strong"),Jlo=o("albert"),Ylo=o(" \u2014 "),wB=a("a"),Klo=o("AlbertTokenizer"),Zlo=o(" or "),AB=a("a"),eio=o("AlbertTokenizerFast"),oio=o(" (ALBERT model)"),rio=l(),Gn=a("li"),Hle=a("strong"),tio=o("bart"),aio=o(" \u2014 "),LB=a("a"),nio=o("BartTokenizer"),sio=o(" or "),yB=a("a"),lio=o("BartTokenizerFast"),iio=o(" (BART model)"),dio=l(),On=a("li"),Ule=a("strong"),cio=o("barthez"),fio=o(" \u2014 "),xB=a("a"),mio=o("BarthezTokenizer"),gio=o(" or "),$B=a("a"),hio=o("BarthezTokenizerFast"),pio=o(" (BARThez model)"),_io=l(),ah=a("li"),Jle=a("strong"),uio=o("bartpho"),bio=o(" \u2014 "),kB=a("a"),vio=o("BartphoTokenizer"),Fio=o(" (BARTpho model)"),Tio=l(),Vn=a("li"),Yle=a("strong"),Mio=o("bert"),Eio=o(" \u2014 "),SB=a("a"),Cio=o("BertTokenizer"),wio=o(" or "),RB=a("a"),Aio=o("BertTokenizerFast"),Lio=o(" (BERT model)"),yio=l(),nh=a("li"),Kle=a("strong"),xio=o("bert-generation"),$io=o(" \u2014 "),PB=a("a"),kio=o("BertGenerationTokenizer"),Sio=o(" (Bert Generation model)"),Rio=l(),sh=a("li"),Zle=a("strong"),Pio=o("bert-japanese"),Bio=o(" \u2014 "),BB=a("a"),Iio=o("BertJapaneseTokenizer"),Nio=o(" (BertJapanese model)"),qio=l(),lh=a("li"),eie=a("strong"),jio=o("bertweet"),Dio=o(" \u2014 "),IB=a("a"),Gio=o("BertweetTokenizer"),Oio=o(" (BERTweet model)"),Vio=l(),Xn=a("li"),oie=a("strong"),Xio=o("big_bird"),zio=o(" \u2014 "),NB=a("a"),Wio=o("BigBirdTokenizer"),Qio=o(" or "),qB=a("a"),Hio=o("BigBirdTokenizerFast"),Uio=o(" (BigBird model)"),Jio=l(),zn=a("li"),rie=a("strong"),Yio=o("bigbird_pegasus"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("PegasusTokenizer"),edo=o(" or "),DB=a("a"),odo=o("PegasusTokenizerFast"),rdo=o(" (BigBird-Pegasus model)"),tdo=l(),Wn=a("li"),tie=a("strong"),ado=o("blenderbot"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("BlenderbotTokenizer"),ldo=o(" or "),OB=a("a"),ido=o("BlenderbotTokenizerFast"),ddo=o(" (Blenderbot model)"),cdo=l(),ih=a("li"),aie=a("strong"),fdo=o("blenderbot-small"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("BlenderbotSmallTokenizer"),hdo=o(" (BlenderbotSmall model)"),pdo=l(),dh=a("li"),nie=a("strong"),_do=o("bloom"),udo=o(" \u2014 "),XB=a("a"),bdo=o("BloomTokenizerFast"),vdo=o(" (BLOOM model)"),Fdo=l(),ch=a("li"),sie=a("strong"),Tdo=o("byt5"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("ByT5Tokenizer"),Cdo=o(" (ByT5 model)"),wdo=l(),Qn=a("li"),lie=a("strong"),Ado=o("camembert"),Ldo=o(" \u2014 "),WB=a("a"),ydo=o("CamembertTokenizer"),xdo=o(" or "),QB=a("a"),$do=o("CamembertTokenizerFast"),kdo=o(" (CamemBERT model)"),Sdo=l(),fh=a("li"),iie=a("strong"),Rdo=o("canine"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("CanineTokenizer"),Ido=o(" (CANINE model)"),Ndo=l(),Hn=a("li"),die=a("strong"),qdo=o("clip"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("CLIPTokenizer"),Gdo=o(" or "),JB=a("a"),Odo=o("CLIPTokenizerFast"),Vdo=o(" (CLIP model)"),Xdo=l(),Un=a("li"),cie=a("strong"),zdo=o("codegen"),Wdo=o(" \u2014 "),YB=a("a"),Qdo=o("CodeGenTokenizer"),Hdo=o(" or "),KB=a("a"),Udo=o("CodeGenTokenizerFast"),Jdo=o(" (CodeGen model)"),Ydo=l(),Jn=a("li"),fie=a("strong"),Kdo=o("convbert"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("ConvBertTokenizer"),oco=o(" or "),eI=a("a"),rco=o("ConvBertTokenizerFast"),tco=o(" (ConvBERT model)"),aco=l(),Yn=a("li"),mie=a("strong"),nco=o("cpm"),sco=o(" \u2014 "),oI=a("a"),lco=o("CpmTokenizer"),ico=o(" or "),rI=a("a"),dco=o("CpmTokenizerFast"),cco=o(" (CPM model)"),fco=l(),mh=a("li"),gie=a("strong"),mco=o("ctrl"),gco=o(" \u2014 "),tI=a("a"),hco=o("CTRLTokenizer"),pco=o(" (CTRL model)"),_co=l(),Kn=a("li"),hie=a("strong"),uco=o("data2vec-text"),bco=o(" \u2014 "),aI=a("a"),vco=o("RobertaTokenizer"),Fco=o(" or "),nI=a("a"),Tco=o("RobertaTokenizerFast"),Mco=o(" (Data2VecText model)"),Eco=l(),Zn=a("li"),pie=a("strong"),Cco=o("deberta"),wco=o(" \u2014 "),sI=a("a"),Aco=o("DebertaTokenizer"),Lco=o(" or "),lI=a("a"),yco=o("DebertaTokenizerFast"),xco=o(" (DeBERTa model)"),$co=l(),es=a("li"),_ie=a("strong"),kco=o("deberta-v2"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("DebertaV2Tokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("DebertaV2TokenizerFast"),Ico=o(" (DeBERTa-v2 model)"),Nco=l(),os=a("li"),uie=a("strong"),qco=o("distilbert"),jco=o(" \u2014 "),cI=a("a"),Dco=o("DistilBertTokenizer"),Gco=o(" or "),fI=a("a"),Oco=o("DistilBertTokenizerFast"),Vco=o(" (DistilBERT model)"),Xco=l(),rs=a("li"),bie=a("strong"),zco=o("dpr"),Wco=o(" \u2014 "),mI=a("a"),Qco=o("DPRQuestionEncoderTokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("DPRQuestionEncoderTokenizerFast"),Jco=o(" (DPR model)"),Yco=l(),ts=a("li"),vie=a("strong"),Kco=o("electra"),Zco=o(" \u2014 "),hI=a("a"),efo=o("ElectraTokenizer"),ofo=o(" or "),pI=a("a"),rfo=o("ElectraTokenizerFast"),tfo=o(" (ELECTRA model)"),afo=l(),gh=a("li"),Fie=a("strong"),nfo=o("flaubert"),sfo=o(" \u2014 "),_I=a("a"),lfo=o("FlaubertTokenizer"),ifo=o(" (FlauBERT model)"),dfo=l(),as=a("li"),Tie=a("strong"),cfo=o("fnet"),ffo=o(" \u2014 "),uI=a("a"),mfo=o("FNetTokenizer"),gfo=o(" or "),bI=a("a"),hfo=o("FNetTokenizerFast"),pfo=o(" (FNet model)"),_fo=l(),hh=a("li"),Mie=a("strong"),ufo=o("fsmt"),bfo=o(" \u2014 "),vI=a("a"),vfo=o("FSMTTokenizer"),Ffo=o(" (FairSeq Machine-Translation model)"),Tfo=l(),ns=a("li"),Eie=a("strong"),Mfo=o("funnel"),Efo=o(" \u2014 "),FI=a("a"),Cfo=o("FunnelTokenizer"),wfo=o(" or "),TI=a("a"),Afo=o("FunnelTokenizerFast"),Lfo=o(" (Funnel Transformer model)"),yfo=l(),ss=a("li"),Cie=a("strong"),xfo=o("gpt2"),$fo=o(" \u2014 "),MI=a("a"),kfo=o("GPT2Tokenizer"),Sfo=o(" or "),EI=a("a"),Rfo=o("GPT2TokenizerFast"),Pfo=o(" (OpenAI GPT-2 model)"),Bfo=l(),ls=a("li"),wie=a("strong"),Ifo=o("gpt_neo"),Nfo=o(" \u2014 "),CI=a("a"),qfo=o("GPT2Tokenizer"),jfo=o(" or "),wI=a("a"),Dfo=o("GPT2TokenizerFast"),Gfo=o(" (GPT Neo model)"),Ofo=l(),ph=a("li"),Aie=a("strong"),Vfo=o("gpt_neox"),Xfo=o(" \u2014 "),AI=a("a"),zfo=o("GPTNeoXTokenizerFast"),Wfo=o(" (GPT NeoX model)"),Qfo=l(),is=a("li"),Lie=a("strong"),Hfo=o("gptj"),Ufo=o(" \u2014 "),LI=a("a"),Jfo=o("GPT2Tokenizer"),Yfo=o(" or "),yI=a("a"),Kfo=o("GPT2TokenizerFast"),Zfo=o(" (GPT-J model)"),emo=l(),ds=a("li"),yie=a("strong"),omo=o("groupvit"),rmo=o(" \u2014 "),xI=a("a"),tmo=o("CLIPTokenizer"),amo=o(" or "),$I=a("a"),nmo=o("CLIPTokenizerFast"),smo=o(" (GroupViT model)"),lmo=l(),cs=a("li"),xie=a("strong"),imo=o("herbert"),dmo=o(" \u2014 "),kI=a("a"),cmo=o("HerbertTokenizer"),fmo=o(" or "),SI=a("a"),mmo=o("HerbertTokenizerFast"),gmo=o(" (HerBERT model)"),hmo=l(),_h=a("li"),$ie=a("strong"),pmo=o("hubert"),_mo=o(" \u2014 "),RI=a("a"),umo=o("Wav2Vec2CTCTokenizer"),bmo=o(" (Hubert model)"),vmo=l(),fs=a("li"),kie=a("strong"),Fmo=o("ibert"),Tmo=o(" \u2014 "),PI=a("a"),Mmo=o("RobertaTokenizer"),Emo=o(" or "),BI=a("a"),Cmo=o("RobertaTokenizerFast"),wmo=o(" (I-BERT model)"),Amo=l(),ms=a("li"),Sie=a("strong"),Lmo=o("layoutlm"),ymo=o(" \u2014 "),II=a("a"),xmo=o("LayoutLMTokenizer"),$mo=o(" or "),NI=a("a"),kmo=o("LayoutLMTokenizerFast"),Smo=o(" (LayoutLM model)"),Rmo=l(),gs=a("li"),Rie=a("strong"),Pmo=o("layoutlmv2"),Bmo=o(" \u2014 "),qI=a("a"),Imo=o("LayoutLMv2Tokenizer"),Nmo=o(" or "),jI=a("a"),qmo=o("LayoutLMv2TokenizerFast"),jmo=o(" (LayoutLMv2 model)"),Dmo=l(),hs=a("li"),Pie=a("strong"),Gmo=o("layoutlmv3"),Omo=o(" \u2014 "),DI=a("a"),Vmo=o("LayoutLMv3Tokenizer"),Xmo=o(" or "),GI=a("a"),zmo=o("LayoutLMv3TokenizerFast"),Wmo=o(" (LayoutLMv3 model)"),Qmo=l(),ps=a("li"),Bie=a("strong"),Hmo=o("layoutxlm"),Umo=o(" \u2014 "),OI=a("a"),Jmo=o("LayoutXLMTokenizer"),Ymo=o(" or "),VI=a("a"),Kmo=o("LayoutXLMTokenizerFast"),Zmo=o(" (LayoutXLM model)"),ego=l(),_s=a("li"),Iie=a("strong"),ogo=o("led"),rgo=o(" \u2014 "),XI=a("a"),tgo=o("LEDTokenizer"),ago=o(" or "),zI=a("a"),ngo=o("LEDTokenizerFast"),sgo=o(" (LED model)"),lgo=l(),us=a("li"),Nie=a("strong"),igo=o("longformer"),dgo=o(" \u2014 "),WI=a("a"),cgo=o("LongformerTokenizer"),fgo=o(" or "),QI=a("a"),mgo=o("LongformerTokenizerFast"),ggo=o(" (Longformer model)"),hgo=l(),bs=a("li"),qie=a("strong"),pgo=o("longt5"),_go=o(" \u2014 "),HI=a("a"),ugo=o("T5Tokenizer"),bgo=o(" or "),UI=a("a"),vgo=o("T5TokenizerFast"),Fgo=o(" (LongT5 model)"),Tgo=l(),uh=a("li"),jie=a("strong"),Mgo=o("luke"),Ego=o(" \u2014 "),JI=a("a"),Cgo=o("LukeTokenizer"),wgo=o(" (LUKE model)"),Ago=l(),vs=a("li"),Die=a("strong"),Lgo=o("lxmert"),ygo=o(" \u2014 "),YI=a("a"),xgo=o("LxmertTokenizer"),$go=o(" or "),KI=a("a"),kgo=o("LxmertTokenizerFast"),Sgo=o(" (LXMERT model)"),Rgo=l(),bh=a("li"),Gie=a("strong"),Pgo=o("m2m_100"),Bgo=o(" \u2014 "),ZI=a("a"),Igo=o("M2M100Tokenizer"),Ngo=o(" (M2M100 model)"),qgo=l(),vh=a("li"),Oie=a("strong"),jgo=o("marian"),Dgo=o(" \u2014 "),eN=a("a"),Ggo=o("MarianTokenizer"),Ogo=o(" (Marian model)"),Vgo=l(),Fs=a("li"),Vie=a("strong"),Xgo=o("mbart"),zgo=o(" \u2014 "),oN=a("a"),Wgo=o("MBartTokenizer"),Qgo=o(" or "),rN=a("a"),Hgo=o("MBartTokenizerFast"),Ugo=o(" (mBART model)"),Jgo=l(),Ts=a("li"),Xie=a("strong"),Ygo=o("mbart50"),Kgo=o(" \u2014 "),tN=a("a"),Zgo=o("MBart50Tokenizer"),eho=o(" or "),aN=a("a"),oho=o("MBart50TokenizerFast"),rho=o(" (mBART-50 model)"),tho=l(),Ms=a("li"),zie=a("strong"),aho=o("megatron-bert"),nho=o(" \u2014 "),nN=a("a"),sho=o("BertTokenizer"),lho=o(" or "),sN=a("a"),iho=o("BertTokenizerFast"),dho=o(" (Megatron-BERT model)"),cho=l(),Fh=a("li"),Wie=a("strong"),fho=o("mluke"),mho=o(" \u2014 "),lN=a("a"),gho=o("MLukeTokenizer"),hho=o(" (mLUKE model)"),pho=l(),Es=a("li"),Qie=a("strong"),_ho=o("mobilebert"),uho=o(" \u2014 "),iN=a("a"),bho=o("MobileBertTokenizer"),vho=o(" or "),dN=a("a"),Fho=o("MobileBertTokenizerFast"),Tho=o(" (MobileBERT model)"),Mho=l(),Cs=a("li"),Hie=a("strong"),Eho=o("mpnet"),Cho=o(" \u2014 "),cN=a("a"),who=o("MPNetTokenizer"),Aho=o(" or "),fN=a("a"),Lho=o("MPNetTokenizerFast"),yho=o(" (MPNet model)"),xho=l(),ws=a("li"),Uie=a("strong"),$ho=o("mt5"),kho=o(" \u2014 "),mN=a("a"),Sho=o("MT5Tokenizer"),Rho=o(" or "),gN=a("a"),Pho=o("MT5TokenizerFast"),Bho=o(" (MT5 model)"),Iho=l(),As=a("li"),Jie=a("strong"),Nho=o("mvp"),qho=o(" \u2014 "),hN=a("a"),jho=o("MvpTokenizer"),Dho=o(" or "),pN=a("a"),Gho=o("MvpTokenizerFast"),Oho=o(" (MVP model)"),Vho=l(),Ls=a("li"),Yie=a("strong"),Xho=o("nezha"),zho=o(" \u2014 "),_N=a("a"),Who=o("BertTokenizer"),Qho=o(" or "),uN=a("a"),Hho=o("BertTokenizerFast"),Uho=o(" (Nezha model)"),Jho=l(),ys=a("li"),Kie=a("strong"),Yho=o("nllb"),Kho=o(" \u2014 "),bN=a("a"),Zho=o("NllbTokenizer"),epo=o(" or "),vN=a("a"),opo=o("NllbTokenizerFast"),rpo=o(" (NLLB model)"),tpo=l(),xs=a("li"),Zie=a("strong"),apo=o("nystromformer"),npo=o(" \u2014 "),FN=a("a"),spo=o("AlbertTokenizer"),lpo=o(" or "),TN=a("a"),ipo=o("AlbertTokenizerFast"),dpo=o(" (Nystr\xF6mformer model)"),cpo=l(),$s=a("li"),ede=a("strong"),fpo=o("openai-gpt"),mpo=o(" \u2014 "),MN=a("a"),gpo=o("OpenAIGPTTokenizer"),hpo=o(" or "),EN=a("a"),ppo=o("OpenAIGPTTokenizerFast"),_po=o(" (OpenAI GPT model)"),upo=l(),Th=a("li"),ode=a("strong"),bpo=o("opt"),vpo=o(" \u2014 "),CN=a("a"),Fpo=o("GPT2Tokenizer"),Tpo=o(" (OPT model)"),Mpo=l(),ks=a("li"),rde=a("strong"),Epo=o("owlvit"),Cpo=o(" \u2014 "),wN=a("a"),wpo=o("CLIPTokenizer"),Apo=o(" or "),AN=a("a"),Lpo=o("CLIPTokenizerFast"),ypo=o(" (OWL-ViT model)"),xpo=l(),Ss=a("li"),tde=a("strong"),$po=o("pegasus"),kpo=o(" \u2014 "),LN=a("a"),Spo=o("PegasusTokenizer"),Rpo=o(" or "),yN=a("a"),Ppo=o("PegasusTokenizerFast"),Bpo=o(" (Pegasus model)"),Ipo=l(),Mh=a("li"),ade=a("strong"),Npo=o("perceiver"),qpo=o(" \u2014 "),xN=a("a"),jpo=o("PerceiverTokenizer"),Dpo=o(" (Perceiver model)"),Gpo=l(),Eh=a("li"),nde=a("strong"),Opo=o("phobert"),Vpo=o(" \u2014 "),$N=a("a"),Xpo=o("PhobertTokenizer"),zpo=o(" (PhoBERT model)"),Wpo=l(),Ch=a("li"),sde=a("strong"),Qpo=o("plbart"),Hpo=o(" \u2014 "),kN=a("a"),Upo=o("PLBartTokenizer"),Jpo=o(" (PLBart model)"),Ypo=l(),wh=a("li"),lde=a("strong"),Kpo=o("prophetnet"),Zpo=o(" \u2014 "),SN=a("a"),e_o=o("ProphetNetTokenizer"),o_o=o(" (ProphetNet model)"),r_o=l(),Rs=a("li"),ide=a("strong"),t_o=o("qdqbert"),a_o=o(" \u2014 "),RN=a("a"),n_o=o("BertTokenizer"),s_o=o(" or "),PN=a("a"),l_o=o("BertTokenizerFast"),i_o=o(" (QDQBert model)"),d_o=l(),Ah=a("li"),dde=a("strong"),c_o=o("rag"),f_o=o(" \u2014 "),BN=a("a"),m_o=o("RagTokenizer"),g_o=o(" (RAG model)"),h_o=l(),Ps=a("li"),cde=a("strong"),p_o=o("realm"),__o=o(" \u2014 "),IN=a("a"),u_o=o("RealmTokenizer"),b_o=o(" or "),NN=a("a"),v_o=o("RealmTokenizerFast"),F_o=o(" (REALM model)"),T_o=l(),Bs=a("li"),fde=a("strong"),M_o=o("reformer"),E_o=o(" \u2014 "),qN=a("a"),C_o=o("ReformerTokenizer"),w_o=o(" or "),jN=a("a"),A_o=o("ReformerTokenizerFast"),L_o=o(" (Reformer model)"),y_o=l(),Is=a("li"),mde=a("strong"),x_o=o("rembert"),$_o=o(" \u2014 "),DN=a("a"),k_o=o("RemBertTokenizer"),S_o=o(" or "),GN=a("a"),R_o=o("RemBertTokenizerFast"),P_o=o(" (RemBERT model)"),B_o=l(),Ns=a("li"),gde=a("strong"),I_o=o("retribert"),N_o=o(" \u2014 "),ON=a("a"),q_o=o("RetriBertTokenizer"),j_o=o(" or "),VN=a("a"),D_o=o("RetriBertTokenizerFast"),G_o=o(" (RetriBERT model)"),O_o=l(),qs=a("li"),hde=a("strong"),V_o=o("roberta"),X_o=o(" \u2014 "),XN=a("a"),z_o=o("RobertaTokenizer"),W_o=o(" or "),zN=a("a"),Q_o=o("RobertaTokenizerFast"),H_o=o(" (RoBERTa model)"),U_o=l(),js=a("li"),pde=a("strong"),J_o=o("roformer"),Y_o=o(" \u2014 "),WN=a("a"),K_o=o("RoFormerTokenizer"),Z_o=o(" or "),QN=a("a"),euo=o("RoFormerTokenizerFast"),ouo=o(" (RoFormer model)"),ruo=l(),Lh=a("li"),_de=a("strong"),tuo=o("speech_to_text"),auo=o(" \u2014 "),HN=a("a"),nuo=o("Speech2TextTokenizer"),suo=o(" (Speech2Text model)"),luo=l(),yh=a("li"),ude=a("strong"),iuo=o("speech_to_text_2"),duo=o(" \u2014 "),UN=a("a"),cuo=o("Speech2Text2Tokenizer"),fuo=o(" (Speech2Text2 model)"),muo=l(),Ds=a("li"),bde=a("strong"),guo=o("splinter"),huo=o(" \u2014 "),JN=a("a"),puo=o("SplinterTokenizer"),_uo=o(" or "),YN=a("a"),uuo=o("SplinterTokenizerFast"),buo=o(" (Splinter model)"),vuo=l(),Gs=a("li"),vde=a("strong"),Fuo=o("squeezebert"),Tuo=o(" \u2014 "),KN=a("a"),Muo=o("SqueezeBertTokenizer"),Euo=o(" or "),ZN=a("a"),Cuo=o("SqueezeBertTokenizerFast"),wuo=o(" (SqueezeBERT model)"),Auo=l(),Os=a("li"),Fde=a("strong"),Luo=o("t5"),yuo=o(" \u2014 "),eq=a("a"),xuo=o("T5Tokenizer"),$uo=o(" or "),oq=a("a"),kuo=o("T5TokenizerFast"),Suo=o(" (T5 model)"),Ruo=l(),xh=a("li"),Tde=a("strong"),Puo=o("tapas"),Buo=o(" \u2014 "),rq=a("a"),Iuo=o("TapasTokenizer"),Nuo=o(" (TAPAS model)"),quo=l(),$h=a("li"),Mde=a("strong"),juo=o("tapex"),Duo=o(" \u2014 "),tq=a("a"),Guo=o("TapexTokenizer"),Ouo=o(" (TAPEX model)"),Vuo=l(),kh=a("li"),Ede=a("strong"),Xuo=o("transfo-xl"),zuo=o(" \u2014 "),aq=a("a"),Wuo=o("TransfoXLTokenizer"),Quo=o(" (Transformer-XL model)"),Huo=l(),Vs=a("li"),Cde=a("strong"),Uuo=o("vilt"),Juo=o(" \u2014 "),nq=a("a"),Yuo=o("BertTokenizer"),Kuo=o(" or "),sq=a("a"),Zuo=o("BertTokenizerFast"),e2o=o(" (ViLT model)"),o2o=l(),Xs=a("li"),wde=a("strong"),r2o=o("visual_bert"),t2o=o(" \u2014 "),lq=a("a"),a2o=o("BertTokenizer"),n2o=o(" or "),iq=a("a"),s2o=o("BertTokenizerFast"),l2o=o(" (VisualBERT model)"),i2o=l(),Sh=a("li"),Ade=a("strong"),d2o=o("wav2vec2"),c2o=o(" \u2014 "),dq=a("a"),f2o=o("Wav2Vec2CTCTokenizer"),m2o=o(" (Wav2Vec2 model)"),g2o=l(),Rh=a("li"),Lde=a("strong"),h2o=o("wav2vec2-conformer"),p2o=o(" \u2014 "),cq=a("a"),_2o=o("Wav2Vec2CTCTokenizer"),u2o=o(" (Wav2Vec2-Conformer model)"),b2o=l(),Ph=a("li"),yde=a("strong"),v2o=o("wav2vec2_phoneme"),F2o=o(" \u2014 "),fq=a("a"),T2o=o("Wav2Vec2PhonemeCTCTokenizer"),M2o=o(" (Wav2Vec2Phoneme model)"),E2o=l(),zs=a("li"),xde=a("strong"),C2o=o("xglm"),w2o=o(" \u2014 "),mq=a("a"),A2o=o("XGLMTokenizer"),L2o=o(" or "),gq=a("a"),y2o=o("XGLMTokenizerFast"),x2o=o(" (XGLM model)"),$2o=l(),Bh=a("li"),$de=a("strong"),k2o=o("xlm"),S2o=o(" \u2014 "),hq=a("a"),R2o=o("XLMTokenizer"),P2o=o(" (XLM model)"),B2o=l(),Ih=a("li"),kde=a("strong"),I2o=o("xlm-prophetnet"),N2o=o(" \u2014 "),pq=a("a"),q2o=o("XLMProphetNetTokenizer"),j2o=o(" (XLM-ProphetNet model)"),D2o=l(),Ws=a("li"),Sde=a("strong"),G2o=o("xlm-roberta"),O2o=o(" \u2014 "),_q=a("a"),V2o=o("XLMRobertaTokenizer"),X2o=o(" or "),uq=a("a"),z2o=o("XLMRobertaTokenizerFast"),W2o=o(" (XLM-RoBERTa model)"),Q2o=l(),Qs=a("li"),Rde=a("strong"),H2o=o("xlm-roberta-xl"),U2o=o(" \u2014 "),bq=a("a"),J2o=o("RobertaTokenizer"),Y2o=o(" or "),vq=a("a"),K2o=o("RobertaTokenizerFast"),Z2o=o(" (XLM-RoBERTa-XL model)"),e1o=l(),Hs=a("li"),Pde=a("strong"),o1o=o("xlnet"),r1o=o(" \u2014 "),Fq=a("a"),t1o=o("XLNetTokenizer"),a1o=o(" or "),Tq=a("a"),n1o=o("XLNetTokenizerFast"),s1o=o(" (XLNet model)"),l1o=l(),Us=a("li"),Bde=a("strong"),i1o=o("yoso"),d1o=o(" \u2014 "),Mq=a("a"),c1o=o("AlbertTokenizer"),f1o=o(" or "),Eq=a("a"),m1o=o("AlbertTokenizerFast"),g1o=o(" (YOSO model)"),h1o=l(),F(Nh.$$.fragment),p1o=l(),qh=a("div"),F(jL.$$.fragment),_1o=l(),Ide=a("p"),u1o=o("Register a new tokenizer in this mapping."),qze=l(),Gi=a("h2"),jh=a("a"),Nde=a("span"),F(DL.$$.fragment),b1o=l(),qde=a("span"),v1o=o("AutoFeatureExtractor"),jze=l(),xo=a("div"),F(GL.$$.fragment),F1o=l(),OL=a("p"),T1o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cq=a("a"),M1o=o("AutoFeatureExtractor.from_pretrained()"),E1o=o(" class method."),C1o=l(),VL=a("p"),w1o=o("This class cannot be instantiated directly using "),jde=a("code"),A1o=o("__init__()"),L1o=o(" (throws an error)."),y1o=l(),Ue=a("div"),F(XL.$$.fragment),x1o=l(),Dde=a("p"),$1o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),k1o=l(),Ba=a("p"),S1o=o("The feature extractor class to instantiate is selected based on the "),Gde=a("code"),R1o=o("model_type"),P1o=o(` property of the config object
(either passed as an argument or loaded from `),Ode=a("code"),B1o=o("pretrained_model_name_or_path"),I1o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vde=a("code"),N1o=o("pretrained_model_name_or_path"),q1o=o(":"),j1o=l(),J=a("ul"),Dh=a("li"),Xde=a("strong"),D1o=o("beit"),G1o=o(" \u2014 "),wq=a("a"),O1o=o("BeitFeatureExtractor"),V1o=o(" (BEiT model)"),X1o=l(),Gh=a("li"),zde=a("strong"),z1o=o("clip"),W1o=o(" \u2014 "),Aq=a("a"),Q1o=o("CLIPFeatureExtractor"),H1o=o(" (CLIP model)"),U1o=l(),Oh=a("li"),Wde=a("strong"),J1o=o("convnext"),Y1o=o(" \u2014 "),Lq=a("a"),K1o=o("ConvNextFeatureExtractor"),Z1o=o(" (ConvNeXT model)"),e4o=l(),Vh=a("li"),Qde=a("strong"),o4o=o("cvt"),r4o=o(" \u2014 "),yq=a("a"),t4o=o("ConvNextFeatureExtractor"),a4o=o(" (CvT model)"),n4o=l(),Xh=a("li"),Hde=a("strong"),s4o=o("data2vec-audio"),l4o=o(" \u2014 "),xq=a("a"),i4o=o("Wav2Vec2FeatureExtractor"),d4o=o(" (Data2VecAudio model)"),c4o=l(),zh=a("li"),Ude=a("strong"),f4o=o("data2vec-vision"),m4o=o(" \u2014 "),$q=a("a"),g4o=o("BeitFeatureExtractor"),h4o=o(" (Data2VecVision model)"),p4o=l(),Wh=a("li"),Jde=a("strong"),_4o=o("deit"),u4o=o(" \u2014 "),kq=a("a"),b4o=o("DeiTFeatureExtractor"),v4o=o(" (DeiT model)"),F4o=l(),Qh=a("li"),Yde=a("strong"),T4o=o("detr"),M4o=o(" \u2014 "),Sq=a("a"),E4o=o("DetrFeatureExtractor"),C4o=o(" (DETR model)"),w4o=l(),Hh=a("li"),Kde=a("strong"),A4o=o("dpt"),L4o=o(" \u2014 "),Rq=a("a"),y4o=o("DPTFeatureExtractor"),x4o=o(" (DPT model)"),$4o=l(),Uh=a("li"),Zde=a("strong"),k4o=o("flava"),S4o=o(" \u2014 "),Pq=a("a"),R4o=o("FlavaFeatureExtractor"),P4o=o(" (FLAVA model)"),B4o=l(),Jh=a("li"),ece=a("strong"),I4o=o("glpn"),N4o=o(" \u2014 "),Bq=a("a"),q4o=o("GLPNFeatureExtractor"),j4o=o(" (GLPN model)"),D4o=l(),Yh=a("li"),oce=a("strong"),G4o=o("groupvit"),O4o=o(" \u2014 "),Iq=a("a"),V4o=o("CLIPFeatureExtractor"),X4o=o(" (GroupViT model)"),z4o=l(),Kh=a("li"),rce=a("strong"),W4o=o("hubert"),Q4o=o(" \u2014 "),Nq=a("a"),H4o=o("Wav2Vec2FeatureExtractor"),U4o=o(" (Hubert model)"),J4o=l(),Zh=a("li"),tce=a("strong"),Y4o=o("imagegpt"),K4o=o(" \u2014 "),qq=a("a"),Z4o=o("ImageGPTFeatureExtractor"),ebo=o(" (ImageGPT model)"),obo=l(),ep=a("li"),ace=a("strong"),rbo=o("layoutlmv2"),tbo=o(" \u2014 "),jq=a("a"),abo=o("LayoutLMv2FeatureExtractor"),nbo=o(" (LayoutLMv2 model)"),sbo=l(),op=a("li"),nce=a("strong"),lbo=o("layoutlmv3"),ibo=o(" \u2014 "),Dq=a("a"),dbo=o("LayoutLMv3FeatureExtractor"),cbo=o(" (LayoutLMv3 model)"),fbo=l(),rp=a("li"),sce=a("strong"),mbo=o("levit"),gbo=o(" \u2014 "),Gq=a("a"),hbo=o("LevitFeatureExtractor"),pbo=o(" (LeViT model)"),_bo=l(),tp=a("li"),lce=a("strong"),ubo=o("maskformer"),bbo=o(" \u2014 "),Oq=a("a"),vbo=o("MaskFormerFeatureExtractor"),Fbo=o(" (MaskFormer model)"),Tbo=l(),ap=a("li"),ice=a("strong"),Mbo=o("mctct"),Ebo=o(" \u2014 "),Vq=a("a"),Cbo=o("MCTCTFeatureExtractor"),wbo=o(" (M-CTC-T model)"),Abo=l(),np=a("li"),dce=a("strong"),Lbo=o("mobilevit"),ybo=o(" \u2014 "),Xq=a("a"),xbo=o("MobileViTFeatureExtractor"),$bo=o(" (MobileViT model)"),kbo=l(),sp=a("li"),cce=a("strong"),Sbo=o("owlvit"),Rbo=o(" \u2014 "),zq=a("a"),Pbo=o("OwlViTFeatureExtractor"),Bbo=o(" (OWL-ViT model)"),Ibo=l(),lp=a("li"),fce=a("strong"),Nbo=o("perceiver"),qbo=o(" \u2014 "),Wq=a("a"),jbo=o("PerceiverFeatureExtractor"),Dbo=o(" (Perceiver model)"),Gbo=l(),ip=a("li"),mce=a("strong"),Obo=o("poolformer"),Vbo=o(" \u2014 "),Qq=a("a"),Xbo=o("PoolFormerFeatureExtractor"),zbo=o(" (PoolFormer model)"),Wbo=l(),dp=a("li"),gce=a("strong"),Qbo=o("regnet"),Hbo=o(" \u2014 "),Hq=a("a"),Ubo=o("ConvNextFeatureExtractor"),Jbo=o(" (RegNet model)"),Ybo=l(),cp=a("li"),hce=a("strong"),Kbo=o("resnet"),Zbo=o(" \u2014 "),Uq=a("a"),evo=o("ConvNextFeatureExtractor"),ovo=o(" (ResNet model)"),rvo=l(),fp=a("li"),pce=a("strong"),tvo=o("segformer"),avo=o(" \u2014 "),Jq=a("a"),nvo=o("SegformerFeatureExtractor"),svo=o(" (SegFormer model)"),lvo=l(),mp=a("li"),_ce=a("strong"),ivo=o("speech_to_text"),dvo=o(" \u2014 "),Yq=a("a"),cvo=o("Speech2TextFeatureExtractor"),fvo=o(" (Speech2Text model)"),mvo=l(),gp=a("li"),uce=a("strong"),gvo=o("swin"),hvo=o(" \u2014 "),Kq=a("a"),pvo=o("ViTFeatureExtractor"),_vo=o(" (Swin Transformer model)"),uvo=l(),hp=a("li"),bce=a("strong"),bvo=o("swinv2"),vvo=o(" \u2014 "),Zq=a("a"),Fvo=o("ViTFeatureExtractor"),Tvo=o(" (Swin Transformer V2 model)"),Mvo=l(),pp=a("li"),vce=a("strong"),Evo=o("van"),Cvo=o(" \u2014 "),ej=a("a"),wvo=o("ConvNextFeatureExtractor"),Avo=o(" (VAN model)"),Lvo=l(),_p=a("li"),Fce=a("strong"),yvo=o("vilt"),xvo=o(" \u2014 "),oj=a("a"),$vo=o("ViltFeatureExtractor"),kvo=o(" (ViLT model)"),Svo=l(),up=a("li"),Tce=a("strong"),Rvo=o("vit"),Pvo=o(" \u2014 "),rj=a("a"),Bvo=o("ViTFeatureExtractor"),Ivo=o(" (ViT model)"),Nvo=l(),bp=a("li"),Mce=a("strong"),qvo=o("vit_mae"),jvo=o(" \u2014 "),tj=a("a"),Dvo=o("ViTFeatureExtractor"),Gvo=o(" (ViTMAE model)"),Ovo=l(),vp=a("li"),Ece=a("strong"),Vvo=o("wav2vec2"),Xvo=o(" \u2014 "),aj=a("a"),zvo=o("Wav2Vec2FeatureExtractor"),Wvo=o(" (Wav2Vec2 model)"),Qvo=l(),Fp=a("li"),Cce=a("strong"),Hvo=o("wav2vec2-conformer"),Uvo=o(" \u2014 "),nj=a("a"),Jvo=o("Wav2Vec2FeatureExtractor"),Yvo=o(" (Wav2Vec2-Conformer model)"),Kvo=l(),Tp=a("li"),wce=a("strong"),Zvo=o("yolos"),e0o=o(" \u2014 "),sj=a("a"),o0o=o("YolosFeatureExtractor"),r0o=o(" (YOLOS model)"),t0o=l(),F(Mp.$$.fragment),a0o=l(),F(Ep.$$.fragment),n0o=l(),Cp=a("div"),F(zL.$$.fragment),s0o=l(),Ace=a("p"),l0o=o("Register a new feature extractor for this class."),Dze=l(),Oi=a("h2"),wp=a("a"),Lce=a("span"),F(WL.$$.fragment),i0o=l(),yce=a("span"),d0o=o("AutoProcessor"),Gze=l(),$o=a("div"),F(QL.$$.fragment),c0o=l(),HL=a("p"),f0o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lj=a("a"),m0o=o("AutoProcessor.from_pretrained()"),g0o=o(" class method."),h0o=l(),UL=a("p"),p0o=o("This class cannot be instantiated directly using "),xce=a("code"),_0o=o("__init__()"),u0o=o(" (throws an error)."),b0o=l(),Je=a("div"),F(JL.$$.fragment),v0o=l(),$ce=a("p"),F0o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),T0o=l(),Vi=a("p"),M0o=o("The processor class to instantiate is selected based on the "),kce=a("code"),E0o=o("model_type"),C0o=o(` property of the config object (either
passed as an argument or loaded from `),Sce=a("code"),w0o=o("pretrained_model_name_or_path"),A0o=o(" if possible):"),L0o=l(),fe=a("ul"),Ap=a("li"),Rce=a("strong"),y0o=o("clip"),x0o=o(" \u2014 "),ij=a("a"),$0o=o("CLIPProcessor"),k0o=o(" (CLIP model)"),S0o=l(),Lp=a("li"),Pce=a("strong"),R0o=o("flava"),P0o=o(" \u2014 "),dj=a("a"),B0o=o("FlavaProcessor"),I0o=o(" (FLAVA model)"),N0o=l(),yp=a("li"),Bce=a("strong"),q0o=o("groupvit"),j0o=o(" \u2014 "),cj=a("a"),D0o=o("CLIPProcessor"),G0o=o(" (GroupViT model)"),O0o=l(),xp=a("li"),Ice=a("strong"),V0o=o("layoutlmv2"),X0o=o(" \u2014 "),fj=a("a"),z0o=o("LayoutLMv2Processor"),W0o=o(" (LayoutLMv2 model)"),Q0o=l(),$p=a("li"),Nce=a("strong"),H0o=o("layoutlmv3"),U0o=o(" \u2014 "),mj=a("a"),J0o=o("LayoutLMv3Processor"),Y0o=o(" (LayoutLMv3 model)"),K0o=l(),kp=a("li"),qce=a("strong"),Z0o=o("layoutxlm"),eFo=o(" \u2014 "),gj=a("a"),oFo=o("LayoutXLMProcessor"),rFo=o(" (LayoutXLM model)"),tFo=l(),Sp=a("li"),jce=a("strong"),aFo=o("owlvit"),nFo=o(" \u2014 "),hj=a("a"),sFo=o("OwlViTProcessor"),lFo=o(" (OWL-ViT model)"),iFo=l(),Rp=a("li"),Dce=a("strong"),dFo=o("sew"),cFo=o(" \u2014 "),pj=a("a"),fFo=o("Wav2Vec2Processor"),mFo=o(" (SEW model)"),gFo=l(),Pp=a("li"),Gce=a("strong"),hFo=o("sew-d"),pFo=o(" \u2014 "),_j=a("a"),_Fo=o("Wav2Vec2Processor"),uFo=o(" (SEW-D model)"),bFo=l(),Bp=a("li"),Oce=a("strong"),vFo=o("speech_to_text"),FFo=o(" \u2014 "),uj=a("a"),TFo=o("Speech2TextProcessor"),MFo=o(" (Speech2Text model)"),EFo=l(),Ip=a("li"),Vce=a("strong"),CFo=o("speech_to_text_2"),wFo=o(" \u2014 "),bj=a("a"),AFo=o("Speech2Text2Processor"),LFo=o(" (Speech2Text2 model)"),yFo=l(),Np=a("li"),Xce=a("strong"),xFo=o("trocr"),$Fo=o(" \u2014 "),vj=a("a"),kFo=o("TrOCRProcessor"),SFo=o(" (TrOCR model)"),RFo=l(),qp=a("li"),zce=a("strong"),PFo=o("unispeech"),BFo=o(" \u2014 "),Fj=a("a"),IFo=o("Wav2Vec2Processor"),NFo=o(" (UniSpeech model)"),qFo=l(),jp=a("li"),Wce=a("strong"),jFo=o("unispeech-sat"),DFo=o(" \u2014 "),Tj=a("a"),GFo=o("Wav2Vec2Processor"),OFo=o(" (UniSpeechSat model)"),VFo=l(),Dp=a("li"),Qce=a("strong"),XFo=o("vilt"),zFo=o(" \u2014 "),Mj=a("a"),WFo=o("ViltProcessor"),QFo=o(" (ViLT model)"),HFo=l(),Gp=a("li"),Hce=a("strong"),UFo=o("vision-text-dual-encoder"),JFo=o(" \u2014 "),Ej=a("a"),YFo=o("VisionTextDualEncoderProcessor"),KFo=o(" (VisionTextDualEncoder model)"),ZFo=l(),Op=a("li"),Uce=a("strong"),eTo=o("wav2vec2"),oTo=o(" \u2014 "),Cj=a("a"),rTo=o("Wav2Vec2Processor"),tTo=o(" (Wav2Vec2 model)"),aTo=l(),Vp=a("li"),Jce=a("strong"),nTo=o("wav2vec2-conformer"),sTo=o(" \u2014 "),wj=a("a"),lTo=o("Wav2Vec2Processor"),iTo=o(" (Wav2Vec2-Conformer model)"),dTo=l(),Xp=a("li"),Yce=a("strong"),cTo=o("wavlm"),fTo=o(" \u2014 "),Aj=a("a"),mTo=o("Wav2Vec2Processor"),gTo=o(" (WavLM model)"),hTo=l(),F(zp.$$.fragment),pTo=l(),F(Wp.$$.fragment),_To=l(),Qp=a("div"),F(YL.$$.fragment),uTo=l(),Kce=a("p"),bTo=o("Register a new processor for this class."),Oze=l(),Xi=a("h2"),Hp=a("a"),Zce=a("span"),F(KL.$$.fragment),vTo=l(),efe=a("span"),FTo=o("AutoModel"),Vze=l(),ko=a("div"),F(ZL.$$.fragment),TTo=l(),zi=a("p"),MTo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Lj=a("a"),ETo=o("from_pretrained()"),CTo=o(" class method or the "),yj=a("a"),wTo=o("from_config()"),ATo=o(` class
method.`),LTo=l(),ey=a("p"),yTo=o("This class cannot be instantiated directly using "),ofe=a("code"),xTo=o("__init__()"),$To=o(" (throws an error)."),kTo=l(),it=a("div"),F(oy.$$.fragment),STo=l(),rfe=a("p"),RTo=o("Instantiates one of the base model classes of the library from a configuration."),PTo=l(),Wi=a("p"),BTo=o(`Note:
Loading a model from its configuration file does `),tfe=a("strong"),ITo=o("not"),NTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),qTo=o("from_pretrained()"),jTo=o(" to load the model weights."),DTo=l(),F(Up.$$.fragment),GTo=l(),Ye=a("div"),F(ry.$$.fragment),OTo=l(),afe=a("p"),VTo=o("Instantiate one of the base model classes of the library from a pretrained model."),XTo=l(),Ia=a("p"),zTo=o("The model class to instantiate is selected based on the "),nfe=a("code"),WTo=o("model_type"),QTo=o(` property of the config object (either
passed as an argument or loaded from `),sfe=a("code"),HTo=o("pretrained_model_name_or_path"),UTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lfe=a("code"),JTo=o("pretrained_model_name_or_path"),YTo=o(":"),KTo=l(),y=a("ul"),Jp=a("li"),ife=a("strong"),ZTo=o("albert"),e8o=o(" \u2014 "),$j=a("a"),o8o=o("AlbertModel"),r8o=o(" (ALBERT model)"),t8o=l(),Yp=a("li"),dfe=a("strong"),a8o=o("bart"),n8o=o(" \u2014 "),kj=a("a"),s8o=o("BartModel"),l8o=o(" (BART model)"),i8o=l(),Kp=a("li"),cfe=a("strong"),d8o=o("beit"),c8o=o(" \u2014 "),Sj=a("a"),f8o=o("BeitModel"),m8o=o(" (BEiT model)"),g8o=l(),Zp=a("li"),ffe=a("strong"),h8o=o("bert"),p8o=o(" \u2014 "),Rj=a("a"),_8o=o("BertModel"),u8o=o(" (BERT model)"),b8o=l(),e_=a("li"),mfe=a("strong"),v8o=o("bert-generation"),F8o=o(" \u2014 "),Pj=a("a"),T8o=o("BertGenerationEncoder"),M8o=o(" (Bert Generation model)"),E8o=l(),o_=a("li"),gfe=a("strong"),C8o=o("big_bird"),w8o=o(" \u2014 "),Bj=a("a"),A8o=o("BigBirdModel"),L8o=o(" (BigBird model)"),y8o=l(),r_=a("li"),hfe=a("strong"),x8o=o("bigbird_pegasus"),$8o=o(" \u2014 "),Ij=a("a"),k8o=o("BigBirdPegasusModel"),S8o=o(" (BigBird-Pegasus model)"),R8o=l(),t_=a("li"),pfe=a("strong"),P8o=o("blenderbot"),B8o=o(" \u2014 "),Nj=a("a"),I8o=o("BlenderbotModel"),N8o=o(" (Blenderbot model)"),q8o=l(),a_=a("li"),_fe=a("strong"),j8o=o("blenderbot-small"),D8o=o(" \u2014 "),qj=a("a"),G8o=o("BlenderbotSmallModel"),O8o=o(" (BlenderbotSmall model)"),V8o=l(),n_=a("li"),ufe=a("strong"),X8o=o("bloom"),z8o=o(" \u2014 "),jj=a("a"),W8o=o("BloomModel"),Q8o=o(" (BLOOM model)"),H8o=l(),s_=a("li"),bfe=a("strong"),U8o=o("camembert"),J8o=o(" \u2014 "),Dj=a("a"),Y8o=o("CamembertModel"),K8o=o(" (CamemBERT model)"),Z8o=l(),l_=a("li"),vfe=a("strong"),eMo=o("canine"),oMo=o(" \u2014 "),Gj=a("a"),rMo=o("CanineModel"),tMo=o(" (CANINE model)"),aMo=l(),i_=a("li"),Ffe=a("strong"),nMo=o("clip"),sMo=o(" \u2014 "),Oj=a("a"),lMo=o("CLIPModel"),iMo=o(" (CLIP model)"),dMo=l(),d_=a("li"),Tfe=a("strong"),cMo=o("codegen"),fMo=o(" \u2014 "),Vj=a("a"),mMo=o("CodeGenModel"),gMo=o(" (CodeGen model)"),hMo=l(),c_=a("li"),Mfe=a("strong"),pMo=o("convbert"),_Mo=o(" \u2014 "),Xj=a("a"),uMo=o("ConvBertModel"),bMo=o(" (ConvBERT model)"),vMo=l(),f_=a("li"),Efe=a("strong"),FMo=o("convnext"),TMo=o(" \u2014 "),zj=a("a"),MMo=o("ConvNextModel"),EMo=o(" (ConvNeXT model)"),CMo=l(),m_=a("li"),Cfe=a("strong"),wMo=o("ctrl"),AMo=o(" \u2014 "),Wj=a("a"),LMo=o("CTRLModel"),yMo=o(" (CTRL model)"),xMo=l(),g_=a("li"),wfe=a("strong"),$Mo=o("cvt"),kMo=o(" \u2014 "),Qj=a("a"),SMo=o("CvtModel"),RMo=o(" (CvT model)"),PMo=l(),h_=a("li"),Afe=a("strong"),BMo=o("data2vec-audio"),IMo=o(" \u2014 "),Hj=a("a"),NMo=o("Data2VecAudioModel"),qMo=o(" (Data2VecAudio model)"),jMo=l(),p_=a("li"),Lfe=a("strong"),DMo=o("data2vec-text"),GMo=o(" \u2014 "),Uj=a("a"),OMo=o("Data2VecTextModel"),VMo=o(" (Data2VecText model)"),XMo=l(),__=a("li"),yfe=a("strong"),zMo=o("data2vec-vision"),WMo=o(" \u2014 "),Jj=a("a"),QMo=o("Data2VecVisionModel"),HMo=o(" (Data2VecVision model)"),UMo=l(),u_=a("li"),xfe=a("strong"),JMo=o("deberta"),YMo=o(" \u2014 "),Yj=a("a"),KMo=o("DebertaModel"),ZMo=o(" (DeBERTa model)"),eEo=l(),b_=a("li"),$fe=a("strong"),oEo=o("deberta-v2"),rEo=o(" \u2014 "),Kj=a("a"),tEo=o("DebertaV2Model"),aEo=o(" (DeBERTa-v2 model)"),nEo=l(),v_=a("li"),kfe=a("strong"),sEo=o("decision_transformer"),lEo=o(" \u2014 "),Zj=a("a"),iEo=o("DecisionTransformerModel"),dEo=o(" (Decision Transformer model)"),cEo=l(),F_=a("li"),Sfe=a("strong"),fEo=o("deit"),mEo=o(" \u2014 "),eD=a("a"),gEo=o("DeiTModel"),hEo=o(" (DeiT model)"),pEo=l(),T_=a("li"),Rfe=a("strong"),_Eo=o("detr"),uEo=o(" \u2014 "),oD=a("a"),bEo=o("DetrModel"),vEo=o(" (DETR model)"),FEo=l(),M_=a("li"),Pfe=a("strong"),TEo=o("distilbert"),MEo=o(" \u2014 "),rD=a("a"),EEo=o("DistilBertModel"),CEo=o(" (DistilBERT model)"),wEo=l(),E_=a("li"),Bfe=a("strong"),AEo=o("dpr"),LEo=o(" \u2014 "),tD=a("a"),yEo=o("DPRQuestionEncoder"),xEo=o(" (DPR model)"),$Eo=l(),C_=a("li"),Ife=a("strong"),kEo=o("dpt"),SEo=o(" \u2014 "),aD=a("a"),REo=o("DPTModel"),PEo=o(" (DPT model)"),BEo=l(),w_=a("li"),Nfe=a("strong"),IEo=o("electra"),NEo=o(" \u2014 "),nD=a("a"),qEo=o("ElectraModel"),jEo=o(" (ELECTRA model)"),DEo=l(),A_=a("li"),qfe=a("strong"),GEo=o("flaubert"),OEo=o(" \u2014 "),sD=a("a"),VEo=o("FlaubertModel"),XEo=o(" (FlauBERT model)"),zEo=l(),L_=a("li"),jfe=a("strong"),WEo=o("flava"),QEo=o(" \u2014 "),lD=a("a"),HEo=o("FlavaModel"),UEo=o(" (FLAVA model)"),JEo=l(),y_=a("li"),Dfe=a("strong"),YEo=o("fnet"),KEo=o(" \u2014 "),iD=a("a"),ZEo=o("FNetModel"),eCo=o(" (FNet model)"),oCo=l(),x_=a("li"),Gfe=a("strong"),rCo=o("fsmt"),tCo=o(" \u2014 "),dD=a("a"),aCo=o("FSMTModel"),nCo=o(" (FairSeq Machine-Translation model)"),sCo=l(),Js=a("li"),Ofe=a("strong"),lCo=o("funnel"),iCo=o(" \u2014 "),cD=a("a"),dCo=o("FunnelModel"),cCo=o(" or "),fD=a("a"),fCo=o("FunnelBaseModel"),mCo=o(" (Funnel Transformer model)"),gCo=l(),$_=a("li"),Vfe=a("strong"),hCo=o("glpn"),pCo=o(" \u2014 "),mD=a("a"),_Co=o("GLPNModel"),uCo=o(" (GLPN model)"),bCo=l(),k_=a("li"),Xfe=a("strong"),vCo=o("gpt2"),FCo=o(" \u2014 "),gD=a("a"),TCo=o("GPT2Model"),MCo=o(" (OpenAI GPT-2 model)"),ECo=l(),S_=a("li"),zfe=a("strong"),CCo=o("gpt_neo"),wCo=o(" \u2014 "),hD=a("a"),ACo=o("GPTNeoModel"),LCo=o(" (GPT Neo model)"),yCo=l(),R_=a("li"),Wfe=a("strong"),xCo=o("gpt_neox"),$Co=o(" \u2014 "),pD=a("a"),kCo=o("GPTNeoXModel"),SCo=o(" (GPT NeoX model)"),RCo=l(),P_=a("li"),Qfe=a("strong"),PCo=o("gptj"),BCo=o(" \u2014 "),_D=a("a"),ICo=o("GPTJModel"),NCo=o(" (GPT-J model)"),qCo=l(),B_=a("li"),Hfe=a("strong"),jCo=o("groupvit"),DCo=o(" \u2014 "),uD=a("a"),GCo=o("GroupViTModel"),OCo=o(" (GroupViT model)"),VCo=l(),I_=a("li"),Ufe=a("strong"),XCo=o("hubert"),zCo=o(" \u2014 "),bD=a("a"),WCo=o("HubertModel"),QCo=o(" (Hubert model)"),HCo=l(),N_=a("li"),Jfe=a("strong"),UCo=o("ibert"),JCo=o(" \u2014 "),vD=a("a"),YCo=o("IBertModel"),KCo=o(" (I-BERT model)"),ZCo=l(),q_=a("li"),Yfe=a("strong"),e5o=o("imagegpt"),o5o=o(" \u2014 "),FD=a("a"),r5o=o("ImageGPTModel"),t5o=o(" (ImageGPT model)"),a5o=l(),j_=a("li"),Kfe=a("strong"),n5o=o("layoutlm"),s5o=o(" \u2014 "),TD=a("a"),l5o=o("LayoutLMModel"),i5o=o(" (LayoutLM model)"),d5o=l(),D_=a("li"),Zfe=a("strong"),c5o=o("layoutlmv2"),f5o=o(" \u2014 "),MD=a("a"),m5o=o("LayoutLMv2Model"),g5o=o(" (LayoutLMv2 model)"),h5o=l(),G_=a("li"),eme=a("strong"),p5o=o("layoutlmv3"),_5o=o(" \u2014 "),ED=a("a"),u5o=o("LayoutLMv3Model"),b5o=o(" (LayoutLMv3 model)"),v5o=l(),O_=a("li"),ome=a("strong"),F5o=o("led"),T5o=o(" \u2014 "),CD=a("a"),M5o=o("LEDModel"),E5o=o(" (LED model)"),C5o=l(),V_=a("li"),rme=a("strong"),w5o=o("levit"),A5o=o(" \u2014 "),wD=a("a"),L5o=o("LevitModel"),y5o=o(" (LeViT model)"),x5o=l(),X_=a("li"),tme=a("strong"),$5o=o("longformer"),k5o=o(" \u2014 "),AD=a("a"),S5o=o("LongformerModel"),R5o=o(" (Longformer model)"),P5o=l(),z_=a("li"),ame=a("strong"),B5o=o("longt5"),I5o=o(" \u2014 "),LD=a("a"),N5o=o("LongT5Model"),q5o=o(" (LongT5 model)"),j5o=l(),W_=a("li"),nme=a("strong"),D5o=o("luke"),G5o=o(" \u2014 "),yD=a("a"),O5o=o("LukeModel"),V5o=o(" (LUKE model)"),X5o=l(),Q_=a("li"),sme=a("strong"),z5o=o("lxmert"),W5o=o(" \u2014 "),xD=a("a"),Q5o=o("LxmertModel"),H5o=o(" (LXMERT model)"),U5o=l(),H_=a("li"),lme=a("strong"),J5o=o("m2m_100"),Y5o=o(" \u2014 "),$D=a("a"),K5o=o("M2M100Model"),Z5o=o(" (M2M100 model)"),e3o=l(),U_=a("li"),ime=a("strong"),o3o=o("marian"),r3o=o(" \u2014 "),kD=a("a"),t3o=o("MarianModel"),a3o=o(" (Marian model)"),n3o=l(),J_=a("li"),dme=a("strong"),s3o=o("maskformer"),l3o=o(" \u2014 "),SD=a("a"),i3o=o("MaskFormerModel"),d3o=o(" (MaskFormer model)"),c3o=l(),Y_=a("li"),cme=a("strong"),f3o=o("mbart"),m3o=o(" \u2014 "),RD=a("a"),g3o=o("MBartModel"),h3o=o(" (mBART model)"),p3o=l(),K_=a("li"),fme=a("strong"),_3o=o("mctct"),u3o=o(" \u2014 "),PD=a("a"),b3o=o("MCTCTModel"),v3o=o(" (M-CTC-T model)"),F3o=l(),Z_=a("li"),mme=a("strong"),T3o=o("megatron-bert"),M3o=o(" \u2014 "),BD=a("a"),E3o=o("MegatronBertModel"),C3o=o(" (Megatron-BERT model)"),w3o=l(),eu=a("li"),gme=a("strong"),A3o=o("mobilebert"),L3o=o(" \u2014 "),ID=a("a"),y3o=o("MobileBertModel"),x3o=o(" (MobileBERT model)"),$3o=l(),ou=a("li"),hme=a("strong"),k3o=o("mobilevit"),S3o=o(" \u2014 "),ND=a("a"),R3o=o("MobileViTModel"),P3o=o(" (MobileViT model)"),B3o=l(),ru=a("li"),pme=a("strong"),I3o=o("mpnet"),N3o=o(" \u2014 "),qD=a("a"),q3o=o("MPNetModel"),j3o=o(" (MPNet model)"),D3o=l(),tu=a("li"),_me=a("strong"),G3o=o("mt5"),O3o=o(" \u2014 "),jD=a("a"),V3o=o("MT5Model"),X3o=o(" (MT5 model)"),z3o=l(),au=a("li"),ume=a("strong"),W3o=o("mvp"),Q3o=o(" \u2014 "),DD=a("a"),H3o=o("MvpModel"),U3o=o(" (MVP model)"),J3o=l(),nu=a("li"),bme=a("strong"),Y3o=o("nezha"),K3o=o(" \u2014 "),GD=a("a"),Z3o=o("NezhaModel"),ewo=o(" (Nezha model)"),owo=l(),su=a("li"),vme=a("strong"),rwo=o("nllb"),two=o(" \u2014 "),OD=a("a"),awo=o("M2M100Model"),nwo=o(" (NLLB model)"),swo=l(),lu=a("li"),Fme=a("strong"),lwo=o("nystromformer"),iwo=o(" \u2014 "),VD=a("a"),dwo=o("NystromformerModel"),cwo=o(" (Nystr\xF6mformer model)"),fwo=l(),iu=a("li"),Tme=a("strong"),mwo=o("openai-gpt"),gwo=o(" \u2014 "),XD=a("a"),hwo=o("OpenAIGPTModel"),pwo=o(" (OpenAI GPT model)"),_wo=l(),du=a("li"),Mme=a("strong"),uwo=o("opt"),bwo=o(" \u2014 "),zD=a("a"),vwo=o("OPTModel"),Fwo=o(" (OPT model)"),Two=l(),cu=a("li"),Eme=a("strong"),Mwo=o("owlvit"),Ewo=o(" \u2014 "),WD=a("a"),Cwo=o("OwlViTModel"),wwo=o(" (OWL-ViT model)"),Awo=l(),fu=a("li"),Cme=a("strong"),Lwo=o("pegasus"),ywo=o(" \u2014 "),QD=a("a"),xwo=o("PegasusModel"),$wo=o(" (Pegasus model)"),kwo=l(),mu=a("li"),wme=a("strong"),Swo=o("perceiver"),Rwo=o(" \u2014 "),HD=a("a"),Pwo=o("PerceiverModel"),Bwo=o(" (Perceiver model)"),Iwo=l(),gu=a("li"),Ame=a("strong"),Nwo=o("plbart"),qwo=o(" \u2014 "),UD=a("a"),jwo=o("PLBartModel"),Dwo=o(" (PLBart model)"),Gwo=l(),hu=a("li"),Lme=a("strong"),Owo=o("poolformer"),Vwo=o(" \u2014 "),JD=a("a"),Xwo=o("PoolFormerModel"),zwo=o(" (PoolFormer model)"),Wwo=l(),pu=a("li"),yme=a("strong"),Qwo=o("prophetnet"),Hwo=o(" \u2014 "),YD=a("a"),Uwo=o("ProphetNetModel"),Jwo=o(" (ProphetNet model)"),Ywo=l(),_u=a("li"),xme=a("strong"),Kwo=o("qdqbert"),Zwo=o(" \u2014 "),KD=a("a"),e6o=o("QDQBertModel"),o6o=o(" (QDQBert model)"),r6o=l(),uu=a("li"),$me=a("strong"),t6o=o("reformer"),a6o=o(" \u2014 "),ZD=a("a"),n6o=o("ReformerModel"),s6o=o(" (Reformer model)"),l6o=l(),bu=a("li"),kme=a("strong"),i6o=o("regnet"),d6o=o(" \u2014 "),eG=a("a"),c6o=o("RegNetModel"),f6o=o(" (RegNet model)"),m6o=l(),vu=a("li"),Sme=a("strong"),g6o=o("rembert"),h6o=o(" \u2014 "),oG=a("a"),p6o=o("RemBertModel"),_6o=o(" (RemBERT model)"),u6o=l(),Fu=a("li"),Rme=a("strong"),b6o=o("resnet"),v6o=o(" \u2014 "),rG=a("a"),F6o=o("ResNetModel"),T6o=o(" (ResNet model)"),M6o=l(),Tu=a("li"),Pme=a("strong"),E6o=o("retribert"),C6o=o(" \u2014 "),tG=a("a"),w6o=o("RetriBertModel"),A6o=o(" (RetriBERT model)"),L6o=l(),Mu=a("li"),Bme=a("strong"),y6o=o("roberta"),x6o=o(" \u2014 "),aG=a("a"),$6o=o("RobertaModel"),k6o=o(" (RoBERTa model)"),S6o=l(),Eu=a("li"),Ime=a("strong"),R6o=o("roformer"),P6o=o(" \u2014 "),nG=a("a"),B6o=o("RoFormerModel"),I6o=o(" (RoFormer model)"),N6o=l(),Cu=a("li"),Nme=a("strong"),q6o=o("segformer"),j6o=o(" \u2014 "),sG=a("a"),D6o=o("SegformerModel"),G6o=o(" (SegFormer model)"),O6o=l(),wu=a("li"),qme=a("strong"),V6o=o("sew"),X6o=o(" \u2014 "),lG=a("a"),z6o=o("SEWModel"),W6o=o(" (SEW model)"),Q6o=l(),Au=a("li"),jme=a("strong"),H6o=o("sew-d"),U6o=o(" \u2014 "),iG=a("a"),J6o=o("SEWDModel"),Y6o=o(" (SEW-D model)"),K6o=l(),Lu=a("li"),Dme=a("strong"),Z6o=o("speech_to_text"),eAo=o(" \u2014 "),dG=a("a"),oAo=o("Speech2TextModel"),rAo=o(" (Speech2Text model)"),tAo=l(),yu=a("li"),Gme=a("strong"),aAo=o("splinter"),nAo=o(" \u2014 "),cG=a("a"),sAo=o("SplinterModel"),lAo=o(" (Splinter model)"),iAo=l(),xu=a("li"),Ome=a("strong"),dAo=o("squeezebert"),cAo=o(" \u2014 "),fG=a("a"),fAo=o("SqueezeBertModel"),mAo=o(" (SqueezeBERT model)"),gAo=l(),$u=a("li"),Vme=a("strong"),hAo=o("swin"),pAo=o(" \u2014 "),mG=a("a"),_Ao=o("SwinModel"),uAo=o(" (Swin Transformer model)"),bAo=l(),ku=a("li"),Xme=a("strong"),vAo=o("swinv2"),FAo=o(" \u2014 "),gG=a("a"),TAo=o("Swinv2Model"),MAo=o(" (Swin Transformer V2 model)"),EAo=l(),Su=a("li"),zme=a("strong"),CAo=o("t5"),wAo=o(" \u2014 "),hG=a("a"),AAo=o("T5Model"),LAo=o(" (T5 model)"),yAo=l(),Ru=a("li"),Wme=a("strong"),xAo=o("tapas"),$Ao=o(" \u2014 "),pG=a("a"),kAo=o("TapasModel"),SAo=o(" (TAPAS model)"),RAo=l(),Pu=a("li"),Qme=a("strong"),PAo=o("trajectory_transformer"),BAo=o(" \u2014 "),_G=a("a"),IAo=o("TrajectoryTransformerModel"),NAo=o(" (Trajectory Transformer model)"),qAo=l(),Bu=a("li"),Hme=a("strong"),jAo=o("transfo-xl"),DAo=o(" \u2014 "),uG=a("a"),GAo=o("TransfoXLModel"),OAo=o(" (Transformer-XL model)"),VAo=l(),Iu=a("li"),Ume=a("strong"),XAo=o("unispeech"),zAo=o(" \u2014 "),bG=a("a"),WAo=o("UniSpeechModel"),QAo=o(" (UniSpeech model)"),HAo=l(),Nu=a("li"),Jme=a("strong"),UAo=o("unispeech-sat"),JAo=o(" \u2014 "),vG=a("a"),YAo=o("UniSpeechSatModel"),KAo=o(" (UniSpeechSat model)"),ZAo=l(),qu=a("li"),Yme=a("strong"),e7o=o("van"),o7o=o(" \u2014 "),FG=a("a"),r7o=o("VanModel"),t7o=o(" (VAN model)"),a7o=l(),ju=a("li"),Kme=a("strong"),n7o=o("vilt"),s7o=o(" \u2014 "),TG=a("a"),l7o=o("ViltModel"),i7o=o(" (ViLT model)"),d7o=l(),Du=a("li"),Zme=a("strong"),c7o=o("vision-text-dual-encoder"),f7o=o(" \u2014 "),MG=a("a"),m7o=o("VisionTextDualEncoderModel"),g7o=o(" (VisionTextDualEncoder model)"),h7o=l(),Gu=a("li"),ege=a("strong"),p7o=o("visual_bert"),_7o=o(" \u2014 "),EG=a("a"),u7o=o("VisualBertModel"),b7o=o(" (VisualBERT model)"),v7o=l(),Ou=a("li"),oge=a("strong"),F7o=o("vit"),T7o=o(" \u2014 "),CG=a("a"),M7o=o("ViTModel"),E7o=o(" (ViT model)"),C7o=l(),Vu=a("li"),rge=a("strong"),w7o=o("vit_mae"),A7o=o(" \u2014 "),wG=a("a"),L7o=o("ViTMAEModel"),y7o=o(" (ViTMAE model)"),x7o=l(),Xu=a("li"),tge=a("strong"),$7o=o("wav2vec2"),k7o=o(" \u2014 "),AG=a("a"),S7o=o("Wav2Vec2Model"),R7o=o(" (Wav2Vec2 model)"),P7o=l(),zu=a("li"),age=a("strong"),B7o=o("wav2vec2-conformer"),I7o=o(" \u2014 "),LG=a("a"),N7o=o("Wav2Vec2ConformerModel"),q7o=o(" (Wav2Vec2-Conformer model)"),j7o=l(),Wu=a("li"),nge=a("strong"),D7o=o("wavlm"),G7o=o(" \u2014 "),yG=a("a"),O7o=o("WavLMModel"),V7o=o(" (WavLM model)"),X7o=l(),Qu=a("li"),sge=a("strong"),z7o=o("xglm"),W7o=o(" \u2014 "),xG=a("a"),Q7o=o("XGLMModel"),H7o=o(" (XGLM model)"),U7o=l(),Hu=a("li"),lge=a("strong"),J7o=o("xlm"),Y7o=o(" \u2014 "),$G=a("a"),K7o=o("XLMModel"),Z7o=o(" (XLM model)"),eLo=l(),Uu=a("li"),ige=a("strong"),oLo=o("xlm-prophetnet"),rLo=o(" \u2014 "),kG=a("a"),tLo=o("XLMProphetNetModel"),aLo=o(" (XLM-ProphetNet model)"),nLo=l(),Ju=a("li"),dge=a("strong"),sLo=o("xlm-roberta"),lLo=o(" \u2014 "),SG=a("a"),iLo=o("XLMRobertaModel"),dLo=o(" (XLM-RoBERTa model)"),cLo=l(),Yu=a("li"),cge=a("strong"),fLo=o("xlm-roberta-xl"),mLo=o(" \u2014 "),RG=a("a"),gLo=o("XLMRobertaXLModel"),hLo=o(" (XLM-RoBERTa-XL model)"),pLo=l(),Ku=a("li"),fge=a("strong"),_Lo=o("xlnet"),uLo=o(" \u2014 "),PG=a("a"),bLo=o("XLNetModel"),vLo=o(" (XLNet model)"),FLo=l(),Zu=a("li"),mge=a("strong"),TLo=o("yolos"),MLo=o(" \u2014 "),BG=a("a"),ELo=o("YolosModel"),CLo=o(" (YOLOS model)"),wLo=l(),e2=a("li"),gge=a("strong"),ALo=o("yoso"),LLo=o(" \u2014 "),IG=a("a"),yLo=o("YosoModel"),xLo=o(" (YOSO model)"),$Lo=l(),o2=a("p"),kLo=o("The model is set in evaluation mode by default using "),hge=a("code"),SLo=o("model.eval()"),RLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),PLo=o("model.train()"),BLo=l(),F(r2.$$.fragment),Xze=l(),Qi=a("h2"),t2=a("a"),_ge=a("span"),F(ty.$$.fragment),ILo=l(),uge=a("span"),NLo=o("AutoModelForPreTraining"),zze=l(),So=a("div"),F(ay.$$.fragment),qLo=l(),Hi=a("p"),jLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NG=a("a"),DLo=o("from_pretrained()"),GLo=o(" class method or the "),qG=a("a"),OLo=o("from_config()"),VLo=o(` class
method.`),XLo=l(),ny=a("p"),zLo=o("This class cannot be instantiated directly using "),bge=a("code"),WLo=o("__init__()"),QLo=o(" (throws an error)."),HLo=l(),dt=a("div"),F(sy.$$.fragment),ULo=l(),vge=a("p"),JLo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YLo=l(),Ui=a("p"),KLo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),ZLo=o("not"),eyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),oyo=o("from_pretrained()"),ryo=o(" to load the model weights."),tyo=l(),F(a2.$$.fragment),ayo=l(),Ke=a("div"),F(ly.$$.fragment),nyo=l(),Tge=a("p"),syo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lyo=l(),Na=a("p"),iyo=o("The model class to instantiate is selected based on the "),Mge=a("code"),dyo=o("model_type"),cyo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),fyo=o("pretrained_model_name_or_path"),myo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),gyo=o("pretrained_model_name_or_path"),hyo=o(":"),pyo=l(),G=a("ul"),n2=a("li"),wge=a("strong"),_yo=o("albert"),uyo=o(" \u2014 "),DG=a("a"),byo=o("AlbertForPreTraining"),vyo=o(" (ALBERT model)"),Fyo=l(),s2=a("li"),Age=a("strong"),Tyo=o("bart"),Myo=o(" \u2014 "),GG=a("a"),Eyo=o("BartForConditionalGeneration"),Cyo=o(" (BART model)"),wyo=l(),l2=a("li"),Lge=a("strong"),Ayo=o("bert"),Lyo=o(" \u2014 "),OG=a("a"),yyo=o("BertForPreTraining"),xyo=o(" (BERT model)"),$yo=l(),i2=a("li"),yge=a("strong"),kyo=o("big_bird"),Syo=o(" \u2014 "),VG=a("a"),Ryo=o("BigBirdForPreTraining"),Pyo=o(" (BigBird model)"),Byo=l(),d2=a("li"),xge=a("strong"),Iyo=o("bloom"),Nyo=o(" \u2014 "),XG=a("a"),qyo=o("BloomForCausalLM"),jyo=o(" (BLOOM model)"),Dyo=l(),c2=a("li"),$ge=a("strong"),Gyo=o("camembert"),Oyo=o(" \u2014 "),zG=a("a"),Vyo=o("CamembertForMaskedLM"),Xyo=o(" (CamemBERT model)"),zyo=l(),f2=a("li"),kge=a("strong"),Wyo=o("ctrl"),Qyo=o(" \u2014 "),WG=a("a"),Hyo=o("CTRLLMHeadModel"),Uyo=o(" (CTRL model)"),Jyo=l(),m2=a("li"),Sge=a("strong"),Yyo=o("data2vec-text"),Kyo=o(" \u2014 "),QG=a("a"),Zyo=o("Data2VecTextForMaskedLM"),e9o=o(" (Data2VecText model)"),o9o=l(),g2=a("li"),Rge=a("strong"),r9o=o("deberta"),t9o=o(" \u2014 "),HG=a("a"),a9o=o("DebertaForMaskedLM"),n9o=o(" (DeBERTa model)"),s9o=l(),h2=a("li"),Pge=a("strong"),l9o=o("deberta-v2"),i9o=o(" \u2014 "),UG=a("a"),d9o=o("DebertaV2ForMaskedLM"),c9o=o(" (DeBERTa-v2 model)"),f9o=l(),p2=a("li"),Bge=a("strong"),m9o=o("distilbert"),g9o=o(" \u2014 "),JG=a("a"),h9o=o("DistilBertForMaskedLM"),p9o=o(" (DistilBERT model)"),_9o=l(),_2=a("li"),Ige=a("strong"),u9o=o("electra"),b9o=o(" \u2014 "),YG=a("a"),v9o=o("ElectraForPreTraining"),F9o=o(" (ELECTRA model)"),T9o=l(),u2=a("li"),Nge=a("strong"),M9o=o("flaubert"),E9o=o(" \u2014 "),KG=a("a"),C9o=o("FlaubertWithLMHeadModel"),w9o=o(" (FlauBERT model)"),A9o=l(),b2=a("li"),qge=a("strong"),L9o=o("flava"),y9o=o(" \u2014 "),ZG=a("a"),x9o=o("FlavaForPreTraining"),$9o=o(" (FLAVA model)"),k9o=l(),v2=a("li"),jge=a("strong"),S9o=o("fnet"),R9o=o(" \u2014 "),eO=a("a"),P9o=o("FNetForPreTraining"),B9o=o(" (FNet model)"),I9o=l(),F2=a("li"),Dge=a("strong"),N9o=o("fsmt"),q9o=o(" \u2014 "),oO=a("a"),j9o=o("FSMTForConditionalGeneration"),D9o=o(" (FairSeq Machine-Translation model)"),G9o=l(),T2=a("li"),Gge=a("strong"),O9o=o("funnel"),V9o=o(" \u2014 "),rO=a("a"),X9o=o("FunnelForPreTraining"),z9o=o(" (Funnel Transformer model)"),W9o=l(),M2=a("li"),Oge=a("strong"),Q9o=o("gpt2"),H9o=o(" \u2014 "),tO=a("a"),U9o=o("GPT2LMHeadModel"),J9o=o(" (OpenAI GPT-2 model)"),Y9o=l(),E2=a("li"),Vge=a("strong"),K9o=o("ibert"),Z9o=o(" \u2014 "),aO=a("a"),exo=o("IBertForMaskedLM"),oxo=o(" (I-BERT model)"),rxo=l(),C2=a("li"),Xge=a("strong"),txo=o("layoutlm"),axo=o(" \u2014 "),nO=a("a"),nxo=o("LayoutLMForMaskedLM"),sxo=o(" (LayoutLM model)"),lxo=l(),w2=a("li"),zge=a("strong"),ixo=o("longformer"),dxo=o(" \u2014 "),sO=a("a"),cxo=o("LongformerForMaskedLM"),fxo=o(" (Longformer model)"),mxo=l(),A2=a("li"),Wge=a("strong"),gxo=o("luke"),hxo=o(" \u2014 "),lO=a("a"),pxo=o("LukeForMaskedLM"),_xo=o(" (LUKE model)"),uxo=l(),L2=a("li"),Qge=a("strong"),bxo=o("lxmert"),vxo=o(" \u2014 "),iO=a("a"),Fxo=o("LxmertForPreTraining"),Txo=o(" (LXMERT model)"),Mxo=l(),y2=a("li"),Hge=a("strong"),Exo=o("megatron-bert"),Cxo=o(" \u2014 "),dO=a("a"),wxo=o("MegatronBertForPreTraining"),Axo=o(" (Megatron-BERT model)"),Lxo=l(),x2=a("li"),Uge=a("strong"),yxo=o("mobilebert"),xxo=o(" \u2014 "),cO=a("a"),$xo=o("MobileBertForPreTraining"),kxo=o(" (MobileBERT model)"),Sxo=l(),$2=a("li"),Jge=a("strong"),Rxo=o("mpnet"),Pxo=o(" \u2014 "),fO=a("a"),Bxo=o("MPNetForMaskedLM"),Ixo=o(" (MPNet model)"),Nxo=l(),k2=a("li"),Yge=a("strong"),qxo=o("mvp"),jxo=o(" \u2014 "),mO=a("a"),Dxo=o("MvpForConditionalGeneration"),Gxo=o(" (MVP model)"),Oxo=l(),S2=a("li"),Kge=a("strong"),Vxo=o("nezha"),Xxo=o(" \u2014 "),gO=a("a"),zxo=o("NezhaForPreTraining"),Wxo=o(" (Nezha model)"),Qxo=l(),R2=a("li"),Zge=a("strong"),Hxo=o("openai-gpt"),Uxo=o(" \u2014 "),hO=a("a"),Jxo=o("OpenAIGPTLMHeadModel"),Yxo=o(" (OpenAI GPT model)"),Kxo=l(),P2=a("li"),ehe=a("strong"),Zxo=o("retribert"),e$o=o(" \u2014 "),pO=a("a"),o$o=o("RetriBertModel"),r$o=o(" (RetriBERT model)"),t$o=l(),B2=a("li"),ohe=a("strong"),a$o=o("roberta"),n$o=o(" \u2014 "),_O=a("a"),s$o=o("RobertaForMaskedLM"),l$o=o(" (RoBERTa model)"),i$o=l(),I2=a("li"),rhe=a("strong"),d$o=o("splinter"),c$o=o(" \u2014 "),uO=a("a"),f$o=o("SplinterForPreTraining"),m$o=o(" (Splinter model)"),g$o=l(),N2=a("li"),the=a("strong"),h$o=o("squeezebert"),p$o=o(" \u2014 "),bO=a("a"),_$o=o("SqueezeBertForMaskedLM"),u$o=o(" (SqueezeBERT model)"),b$o=l(),q2=a("li"),ahe=a("strong"),v$o=o("t5"),F$o=o(" \u2014 "),vO=a("a"),T$o=o("T5ForConditionalGeneration"),M$o=o(" (T5 model)"),E$o=l(),j2=a("li"),nhe=a("strong"),C$o=o("tapas"),w$o=o(" \u2014 "),FO=a("a"),A$o=o("TapasForMaskedLM"),L$o=o(" (TAPAS model)"),y$o=l(),D2=a("li"),she=a("strong"),x$o=o("transfo-xl"),$$o=o(" \u2014 "),TO=a("a"),k$o=o("TransfoXLLMHeadModel"),S$o=o(" (Transformer-XL model)"),R$o=l(),G2=a("li"),lhe=a("strong"),P$o=o("unispeech"),B$o=o(" \u2014 "),MO=a("a"),I$o=o("UniSpeechForPreTraining"),N$o=o(" (UniSpeech model)"),q$o=l(),O2=a("li"),ihe=a("strong"),j$o=o("unispeech-sat"),D$o=o(" \u2014 "),EO=a("a"),G$o=o("UniSpeechSatForPreTraining"),O$o=o(" (UniSpeechSat model)"),V$o=l(),V2=a("li"),dhe=a("strong"),X$o=o("visual_bert"),z$o=o(" \u2014 "),CO=a("a"),W$o=o("VisualBertForPreTraining"),Q$o=o(" (VisualBERT model)"),H$o=l(),X2=a("li"),che=a("strong"),U$o=o("vit_mae"),J$o=o(" \u2014 "),wO=a("a"),Y$o=o("ViTMAEForPreTraining"),K$o=o(" (ViTMAE model)"),Z$o=l(),z2=a("li"),fhe=a("strong"),eko=o("wav2vec2"),oko=o(" \u2014 "),AO=a("a"),rko=o("Wav2Vec2ForPreTraining"),tko=o(" (Wav2Vec2 model)"),ako=l(),W2=a("li"),mhe=a("strong"),nko=o("wav2vec2-conformer"),sko=o(" \u2014 "),LO=a("a"),lko=o("Wav2Vec2ConformerForPreTraining"),iko=o(" (Wav2Vec2-Conformer model)"),dko=l(),Q2=a("li"),ghe=a("strong"),cko=o("xlm"),fko=o(" \u2014 "),yO=a("a"),mko=o("XLMWithLMHeadModel"),gko=o(" (XLM model)"),hko=l(),H2=a("li"),hhe=a("strong"),pko=o("xlm-roberta"),_ko=o(" \u2014 "),xO=a("a"),uko=o("XLMRobertaForMaskedLM"),bko=o(" (XLM-RoBERTa model)"),vko=l(),U2=a("li"),phe=a("strong"),Fko=o("xlm-roberta-xl"),Tko=o(" \u2014 "),$O=a("a"),Mko=o("XLMRobertaXLForMaskedLM"),Eko=o(" (XLM-RoBERTa-XL model)"),Cko=l(),J2=a("li"),_he=a("strong"),wko=o("xlnet"),Ako=o(" \u2014 "),kO=a("a"),Lko=o("XLNetLMHeadModel"),yko=o(" (XLNet model)"),xko=l(),Y2=a("p"),$ko=o("The model is set in evaluation mode by default using "),uhe=a("code"),kko=o("model.eval()"),Sko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),Rko=o("model.train()"),Pko=l(),F(K2.$$.fragment),Wze=l(),Ji=a("h2"),Z2=a("a"),vhe=a("span"),F(iy.$$.fragment),Bko=l(),Fhe=a("span"),Iko=o("AutoModelForCausalLM"),Qze=l(),Ro=a("div"),F(dy.$$.fragment),Nko=l(),Yi=a("p"),qko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SO=a("a"),jko=o("from_pretrained()"),Dko=o(" class method or the "),RO=a("a"),Gko=o("from_config()"),Oko=o(` class
method.`),Vko=l(),cy=a("p"),Xko=o("This class cannot be instantiated directly using "),The=a("code"),zko=o("__init__()"),Wko=o(" (throws an error)."),Qko=l(),ct=a("div"),F(fy.$$.fragment),Hko=l(),Mhe=a("p"),Uko=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jko=l(),Ki=a("p"),Yko=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),Kko=o("not"),Zko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),eSo=o("from_pretrained()"),oSo=o(" to load the model weights."),rSo=l(),F(e1.$$.fragment),tSo=l(),Ze=a("div"),F(my.$$.fragment),aSo=l(),Che=a("p"),nSo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sSo=l(),qa=a("p"),lSo=o("The model class to instantiate is selected based on the "),whe=a("code"),iSo=o("model_type"),dSo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),cSo=o("pretrained_model_name_or_path"),fSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),mSo=o("pretrained_model_name_or_path"),gSo=o(":"),hSo=l(),z=a("ul"),o1=a("li"),yhe=a("strong"),pSo=o("bart"),_So=o(" \u2014 "),BO=a("a"),uSo=o("BartForCausalLM"),bSo=o(" (BART model)"),vSo=l(),r1=a("li"),xhe=a("strong"),FSo=o("bert"),TSo=o(" \u2014 "),IO=a("a"),MSo=o("BertLMHeadModel"),ESo=o(" (BERT model)"),CSo=l(),t1=a("li"),$he=a("strong"),wSo=o("bert-generation"),ASo=o(" \u2014 "),NO=a("a"),LSo=o("BertGenerationDecoder"),ySo=o(" (Bert Generation model)"),xSo=l(),a1=a("li"),khe=a("strong"),$So=o("big_bird"),kSo=o(" \u2014 "),qO=a("a"),SSo=o("BigBirdForCausalLM"),RSo=o(" (BigBird model)"),PSo=l(),n1=a("li"),She=a("strong"),BSo=o("bigbird_pegasus"),ISo=o(" \u2014 "),jO=a("a"),NSo=o("BigBirdPegasusForCausalLM"),qSo=o(" (BigBird-Pegasus model)"),jSo=l(),s1=a("li"),Rhe=a("strong"),DSo=o("blenderbot"),GSo=o(" \u2014 "),DO=a("a"),OSo=o("BlenderbotForCausalLM"),VSo=o(" (Blenderbot model)"),XSo=l(),l1=a("li"),Phe=a("strong"),zSo=o("blenderbot-small"),WSo=o(" \u2014 "),GO=a("a"),QSo=o("BlenderbotSmallForCausalLM"),HSo=o(" (BlenderbotSmall model)"),USo=l(),i1=a("li"),Bhe=a("strong"),JSo=o("bloom"),YSo=o(" \u2014 "),OO=a("a"),KSo=o("BloomForCausalLM"),ZSo=o(" (BLOOM model)"),eRo=l(),d1=a("li"),Ihe=a("strong"),oRo=o("camembert"),rRo=o(" \u2014 "),VO=a("a"),tRo=o("CamembertForCausalLM"),aRo=o(" (CamemBERT model)"),nRo=l(),c1=a("li"),Nhe=a("strong"),sRo=o("codegen"),lRo=o(" \u2014 "),XO=a("a"),iRo=o("CodeGenForCausalLM"),dRo=o(" (CodeGen model)"),cRo=l(),f1=a("li"),qhe=a("strong"),fRo=o("ctrl"),mRo=o(" \u2014 "),zO=a("a"),gRo=o("CTRLLMHeadModel"),hRo=o(" (CTRL model)"),pRo=l(),m1=a("li"),jhe=a("strong"),_Ro=o("data2vec-text"),uRo=o(" \u2014 "),WO=a("a"),bRo=o("Data2VecTextForCausalLM"),vRo=o(" (Data2VecText model)"),FRo=l(),g1=a("li"),Dhe=a("strong"),TRo=o("electra"),MRo=o(" \u2014 "),QO=a("a"),ERo=o("ElectraForCausalLM"),CRo=o(" (ELECTRA model)"),wRo=l(),h1=a("li"),Ghe=a("strong"),ARo=o("gpt2"),LRo=o(" \u2014 "),HO=a("a"),yRo=o("GPT2LMHeadModel"),xRo=o(" (OpenAI GPT-2 model)"),$Ro=l(),p1=a("li"),Ohe=a("strong"),kRo=o("gpt_neo"),SRo=o(" \u2014 "),UO=a("a"),RRo=o("GPTNeoForCausalLM"),PRo=o(" (GPT Neo model)"),BRo=l(),_1=a("li"),Vhe=a("strong"),IRo=o("gpt_neox"),NRo=o(" \u2014 "),JO=a("a"),qRo=o("GPTNeoXForCausalLM"),jRo=o(" (GPT NeoX model)"),DRo=l(),u1=a("li"),Xhe=a("strong"),GRo=o("gptj"),ORo=o(" \u2014 "),YO=a("a"),VRo=o("GPTJForCausalLM"),XRo=o(" (GPT-J model)"),zRo=l(),b1=a("li"),zhe=a("strong"),WRo=o("marian"),QRo=o(" \u2014 "),KO=a("a"),HRo=o("MarianForCausalLM"),URo=o(" (Marian model)"),JRo=l(),v1=a("li"),Whe=a("strong"),YRo=o("mbart"),KRo=o(" \u2014 "),ZO=a("a"),ZRo=o("MBartForCausalLM"),ePo=o(" (mBART model)"),oPo=l(),F1=a("li"),Qhe=a("strong"),rPo=o("megatron-bert"),tPo=o(" \u2014 "),eV=a("a"),aPo=o("MegatronBertForCausalLM"),nPo=o(" (Megatron-BERT model)"),sPo=l(),T1=a("li"),Hhe=a("strong"),lPo=o("mvp"),iPo=o(" \u2014 "),oV=a("a"),dPo=o("MvpForCausalLM"),cPo=o(" (MVP model)"),fPo=l(),M1=a("li"),Uhe=a("strong"),mPo=o("openai-gpt"),gPo=o(" \u2014 "),rV=a("a"),hPo=o("OpenAIGPTLMHeadModel"),pPo=o(" (OpenAI GPT model)"),_Po=l(),E1=a("li"),Jhe=a("strong"),uPo=o("opt"),bPo=o(" \u2014 "),tV=a("a"),vPo=o("OPTForCausalLM"),FPo=o(" (OPT model)"),TPo=l(),C1=a("li"),Yhe=a("strong"),MPo=o("pegasus"),EPo=o(" \u2014 "),aV=a("a"),CPo=o("PegasusForCausalLM"),wPo=o(" (Pegasus model)"),APo=l(),w1=a("li"),Khe=a("strong"),LPo=o("plbart"),yPo=o(" \u2014 "),nV=a("a"),xPo=o("PLBartForCausalLM"),$Po=o(" (PLBart model)"),kPo=l(),A1=a("li"),Zhe=a("strong"),SPo=o("prophetnet"),RPo=o(" \u2014 "),sV=a("a"),PPo=o("ProphetNetForCausalLM"),BPo=o(" (ProphetNet model)"),IPo=l(),L1=a("li"),epe=a("strong"),NPo=o("qdqbert"),qPo=o(" \u2014 "),lV=a("a"),jPo=o("QDQBertLMHeadModel"),DPo=o(" (QDQBert model)"),GPo=l(),y1=a("li"),ope=a("strong"),OPo=o("reformer"),VPo=o(" \u2014 "),iV=a("a"),XPo=o("ReformerModelWithLMHead"),zPo=o(" (Reformer model)"),WPo=l(),x1=a("li"),rpe=a("strong"),QPo=o("rembert"),HPo=o(" \u2014 "),dV=a("a"),UPo=o("RemBertForCausalLM"),JPo=o(" (RemBERT model)"),YPo=l(),$1=a("li"),tpe=a("strong"),KPo=o("roberta"),ZPo=o(" \u2014 "),cV=a("a"),eBo=o("RobertaForCausalLM"),oBo=o(" (RoBERTa model)"),rBo=l(),k1=a("li"),ape=a("strong"),tBo=o("roformer"),aBo=o(" \u2014 "),fV=a("a"),nBo=o("RoFormerForCausalLM"),sBo=o(" (RoFormer model)"),lBo=l(),S1=a("li"),npe=a("strong"),iBo=o("speech_to_text_2"),dBo=o(" \u2014 "),mV=a("a"),cBo=o("Speech2Text2ForCausalLM"),fBo=o(" (Speech2Text2 model)"),mBo=l(),R1=a("li"),spe=a("strong"),gBo=o("transfo-xl"),hBo=o(" \u2014 "),gV=a("a"),pBo=o("TransfoXLLMHeadModel"),_Bo=o(" (Transformer-XL model)"),uBo=l(),P1=a("li"),lpe=a("strong"),bBo=o("trocr"),vBo=o(" \u2014 "),hV=a("a"),FBo=o("TrOCRForCausalLM"),TBo=o(" (TrOCR model)"),MBo=l(),B1=a("li"),ipe=a("strong"),EBo=o("xglm"),CBo=o(" \u2014 "),pV=a("a"),wBo=o("XGLMForCausalLM"),ABo=o(" (XGLM model)"),LBo=l(),I1=a("li"),dpe=a("strong"),yBo=o("xlm"),xBo=o(" \u2014 "),_V=a("a"),$Bo=o("XLMWithLMHeadModel"),kBo=o(" (XLM model)"),SBo=l(),N1=a("li"),cpe=a("strong"),RBo=o("xlm-prophetnet"),PBo=o(" \u2014 "),uV=a("a"),BBo=o("XLMProphetNetForCausalLM"),IBo=o(" (XLM-ProphetNet model)"),NBo=l(),q1=a("li"),fpe=a("strong"),qBo=o("xlm-roberta"),jBo=o(" \u2014 "),bV=a("a"),DBo=o("XLMRobertaForCausalLM"),GBo=o(" (XLM-RoBERTa model)"),OBo=l(),j1=a("li"),mpe=a("strong"),VBo=o("xlm-roberta-xl"),XBo=o(" \u2014 "),vV=a("a"),zBo=o("XLMRobertaXLForCausalLM"),WBo=o(" (XLM-RoBERTa-XL model)"),QBo=l(),D1=a("li"),gpe=a("strong"),HBo=o("xlnet"),UBo=o(" \u2014 "),FV=a("a"),JBo=o("XLNetLMHeadModel"),YBo=o(" (XLNet model)"),KBo=l(),G1=a("p"),ZBo=o("The model is set in evaluation mode by default using "),hpe=a("code"),eIo=o("model.eval()"),oIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),rIo=o("model.train()"),tIo=l(),F(O1.$$.fragment),Hze=l(),Zi=a("h2"),V1=a("a"),_pe=a("span"),F(gy.$$.fragment),aIo=l(),upe=a("span"),nIo=o("AutoModelForMaskedLM"),Uze=l(),Po=a("div"),F(hy.$$.fragment),sIo=l(),ed=a("p"),lIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TV=a("a"),iIo=o("from_pretrained()"),dIo=o(" class method or the "),MV=a("a"),cIo=o("from_config()"),fIo=o(` class
method.`),mIo=l(),py=a("p"),gIo=o("This class cannot be instantiated directly using "),bpe=a("code"),hIo=o("__init__()"),pIo=o(" (throws an error)."),_Io=l(),ft=a("div"),F(_y.$$.fragment),uIo=l(),vpe=a("p"),bIo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vIo=l(),od=a("p"),FIo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),TIo=o("not"),MIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),EIo=o("from_pretrained()"),CIo=o(" to load the model weights."),wIo=l(),F(X1.$$.fragment),AIo=l(),eo=a("div"),F(uy.$$.fragment),LIo=l(),Tpe=a("p"),yIo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xIo=l(),ja=a("p"),$Io=o("The model class to instantiate is selected based on the "),Mpe=a("code"),kIo=o("model_type"),SIo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),RIo=o("pretrained_model_name_or_path"),PIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),BIo=o("pretrained_model_name_or_path"),IIo=o(":"),NIo=l(),Q=a("ul"),z1=a("li"),wpe=a("strong"),qIo=o("albert"),jIo=o(" \u2014 "),CV=a("a"),DIo=o("AlbertForMaskedLM"),GIo=o(" (ALBERT model)"),OIo=l(),W1=a("li"),Ape=a("strong"),VIo=o("bart"),XIo=o(" \u2014 "),wV=a("a"),zIo=o("BartForConditionalGeneration"),WIo=o(" (BART model)"),QIo=l(),Q1=a("li"),Lpe=a("strong"),HIo=o("bert"),UIo=o(" \u2014 "),AV=a("a"),JIo=o("BertForMaskedLM"),YIo=o(" (BERT model)"),KIo=l(),H1=a("li"),ype=a("strong"),ZIo=o("big_bird"),eNo=o(" \u2014 "),LV=a("a"),oNo=o("BigBirdForMaskedLM"),rNo=o(" (BigBird model)"),tNo=l(),U1=a("li"),xpe=a("strong"),aNo=o("camembert"),nNo=o(" \u2014 "),yV=a("a"),sNo=o("CamembertForMaskedLM"),lNo=o(" (CamemBERT model)"),iNo=l(),J1=a("li"),$pe=a("strong"),dNo=o("convbert"),cNo=o(" \u2014 "),xV=a("a"),fNo=o("ConvBertForMaskedLM"),mNo=o(" (ConvBERT model)"),gNo=l(),Y1=a("li"),kpe=a("strong"),hNo=o("data2vec-text"),pNo=o(" \u2014 "),$V=a("a"),_No=o("Data2VecTextForMaskedLM"),uNo=o(" (Data2VecText model)"),bNo=l(),K1=a("li"),Spe=a("strong"),vNo=o("deberta"),FNo=o(" \u2014 "),kV=a("a"),TNo=o("DebertaForMaskedLM"),MNo=o(" (DeBERTa model)"),ENo=l(),Z1=a("li"),Rpe=a("strong"),CNo=o("deberta-v2"),wNo=o(" \u2014 "),SV=a("a"),ANo=o("DebertaV2ForMaskedLM"),LNo=o(" (DeBERTa-v2 model)"),yNo=l(),e4=a("li"),Ppe=a("strong"),xNo=o("distilbert"),$No=o(" \u2014 "),RV=a("a"),kNo=o("DistilBertForMaskedLM"),SNo=o(" (DistilBERT model)"),RNo=l(),o4=a("li"),Bpe=a("strong"),PNo=o("electra"),BNo=o(" \u2014 "),PV=a("a"),INo=o("ElectraForMaskedLM"),NNo=o(" (ELECTRA model)"),qNo=l(),r4=a("li"),Ipe=a("strong"),jNo=o("flaubert"),DNo=o(" \u2014 "),BV=a("a"),GNo=o("FlaubertWithLMHeadModel"),ONo=o(" (FlauBERT model)"),VNo=l(),t4=a("li"),Npe=a("strong"),XNo=o("fnet"),zNo=o(" \u2014 "),IV=a("a"),WNo=o("FNetForMaskedLM"),QNo=o(" (FNet model)"),HNo=l(),a4=a("li"),qpe=a("strong"),UNo=o("funnel"),JNo=o(" \u2014 "),NV=a("a"),YNo=o("FunnelForMaskedLM"),KNo=o(" (Funnel Transformer model)"),ZNo=l(),n4=a("li"),jpe=a("strong"),eqo=o("ibert"),oqo=o(" \u2014 "),qV=a("a"),rqo=o("IBertForMaskedLM"),tqo=o(" (I-BERT model)"),aqo=l(),s4=a("li"),Dpe=a("strong"),nqo=o("layoutlm"),sqo=o(" \u2014 "),jV=a("a"),lqo=o("LayoutLMForMaskedLM"),iqo=o(" (LayoutLM model)"),dqo=l(),l4=a("li"),Gpe=a("strong"),cqo=o("longformer"),fqo=o(" \u2014 "),DV=a("a"),mqo=o("LongformerForMaskedLM"),gqo=o(" (Longformer model)"),hqo=l(),i4=a("li"),Ope=a("strong"),pqo=o("luke"),_qo=o(" \u2014 "),GV=a("a"),uqo=o("LukeForMaskedLM"),bqo=o(" (LUKE model)"),vqo=l(),d4=a("li"),Vpe=a("strong"),Fqo=o("mbart"),Tqo=o(" \u2014 "),OV=a("a"),Mqo=o("MBartForConditionalGeneration"),Eqo=o(" (mBART model)"),Cqo=l(),c4=a("li"),Xpe=a("strong"),wqo=o("megatron-bert"),Aqo=o(" \u2014 "),VV=a("a"),Lqo=o("MegatronBertForMaskedLM"),yqo=o(" (Megatron-BERT model)"),xqo=l(),f4=a("li"),zpe=a("strong"),$qo=o("mobilebert"),kqo=o(" \u2014 "),XV=a("a"),Sqo=o("MobileBertForMaskedLM"),Rqo=o(" (MobileBERT model)"),Pqo=l(),m4=a("li"),Wpe=a("strong"),Bqo=o("mpnet"),Iqo=o(" \u2014 "),zV=a("a"),Nqo=o("MPNetForMaskedLM"),qqo=o(" (MPNet model)"),jqo=l(),g4=a("li"),Qpe=a("strong"),Dqo=o("mvp"),Gqo=o(" \u2014 "),WV=a("a"),Oqo=o("MvpForConditionalGeneration"),Vqo=o(" (MVP model)"),Xqo=l(),h4=a("li"),Hpe=a("strong"),zqo=o("nezha"),Wqo=o(" \u2014 "),QV=a("a"),Qqo=o("NezhaForMaskedLM"),Hqo=o(" (Nezha model)"),Uqo=l(),p4=a("li"),Upe=a("strong"),Jqo=o("nystromformer"),Yqo=o(" \u2014 "),HV=a("a"),Kqo=o("NystromformerForMaskedLM"),Zqo=o(" (Nystr\xF6mformer model)"),ejo=l(),_4=a("li"),Jpe=a("strong"),ojo=o("perceiver"),rjo=o(" \u2014 "),UV=a("a"),tjo=o("PerceiverForMaskedLM"),ajo=o(" (Perceiver model)"),njo=l(),u4=a("li"),Ype=a("strong"),sjo=o("qdqbert"),ljo=o(" \u2014 "),JV=a("a"),ijo=o("QDQBertForMaskedLM"),djo=o(" (QDQBert model)"),cjo=l(),b4=a("li"),Kpe=a("strong"),fjo=o("reformer"),mjo=o(" \u2014 "),YV=a("a"),gjo=o("ReformerForMaskedLM"),hjo=o(" (Reformer model)"),pjo=l(),v4=a("li"),Zpe=a("strong"),_jo=o("rembert"),ujo=o(" \u2014 "),KV=a("a"),bjo=o("RemBertForMaskedLM"),vjo=o(" (RemBERT model)"),Fjo=l(),F4=a("li"),e_e=a("strong"),Tjo=o("roberta"),Mjo=o(" \u2014 "),ZV=a("a"),Ejo=o("RobertaForMaskedLM"),Cjo=o(" (RoBERTa model)"),wjo=l(),T4=a("li"),o_e=a("strong"),Ajo=o("roformer"),Ljo=o(" \u2014 "),eX=a("a"),yjo=o("RoFormerForMaskedLM"),xjo=o(" (RoFormer model)"),$jo=l(),M4=a("li"),r_e=a("strong"),kjo=o("squeezebert"),Sjo=o(" \u2014 "),oX=a("a"),Rjo=o("SqueezeBertForMaskedLM"),Pjo=o(" (SqueezeBERT model)"),Bjo=l(),E4=a("li"),t_e=a("strong"),Ijo=o("tapas"),Njo=o(" \u2014 "),rX=a("a"),qjo=o("TapasForMaskedLM"),jjo=o(" (TAPAS model)"),Djo=l(),C4=a("li"),a_e=a("strong"),Gjo=o("wav2vec2"),Ojo=o(" \u2014 "),n_e=a("code"),Vjo=o("Wav2Vec2ForMaskedLM"),Xjo=o(" (Wav2Vec2 model)"),zjo=l(),w4=a("li"),s_e=a("strong"),Wjo=o("xlm"),Qjo=o(" \u2014 "),tX=a("a"),Hjo=o("XLMWithLMHeadModel"),Ujo=o(" (XLM model)"),Jjo=l(),A4=a("li"),l_e=a("strong"),Yjo=o("xlm-roberta"),Kjo=o(" \u2014 "),aX=a("a"),Zjo=o("XLMRobertaForMaskedLM"),eDo=o(" (XLM-RoBERTa model)"),oDo=l(),L4=a("li"),i_e=a("strong"),rDo=o("xlm-roberta-xl"),tDo=o(" \u2014 "),nX=a("a"),aDo=o("XLMRobertaXLForMaskedLM"),nDo=o(" (XLM-RoBERTa-XL model)"),sDo=l(),y4=a("li"),d_e=a("strong"),lDo=o("yoso"),iDo=o(" \u2014 "),sX=a("a"),dDo=o("YosoForMaskedLM"),cDo=o(" (YOSO model)"),fDo=l(),x4=a("p"),mDo=o("The model is set in evaluation mode by default using "),c_e=a("code"),gDo=o("model.eval()"),hDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),pDo=o("model.train()"),_Do=l(),F($4.$$.fragment),Jze=l(),rd=a("h2"),k4=a("a"),m_e=a("span"),F(by.$$.fragment),uDo=l(),g_e=a("span"),bDo=o("AutoModelForSeq2SeqLM"),Yze=l(),Bo=a("div"),F(vy.$$.fragment),vDo=l(),td=a("p"),FDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=a("a"),TDo=o("from_pretrained()"),MDo=o(" class method or the "),iX=a("a"),EDo=o("from_config()"),CDo=o(` class
method.`),wDo=l(),Fy=a("p"),ADo=o("This class cannot be instantiated directly using "),h_e=a("code"),LDo=o("__init__()"),yDo=o(" (throws an error)."),xDo=l(),mt=a("div"),F(Ty.$$.fragment),$Do=l(),p_e=a("p"),kDo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SDo=l(),ad=a("p"),RDo=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),PDo=o("not"),BDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),IDo=o("from_pretrained()"),NDo=o(" to load the model weights."),qDo=l(),F(S4.$$.fragment),jDo=l(),oo=a("div"),F(My.$$.fragment),DDo=l(),u_e=a("p"),GDo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ODo=l(),Da=a("p"),VDo=o("The model class to instantiate is selected based on the "),b_e=a("code"),XDo=o("model_type"),zDo=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),WDo=o("pretrained_model_name_or_path"),QDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(":"),JDo=l(),me=a("ul"),R4=a("li"),T_e=a("strong"),YDo=o("bart"),KDo=o(" \u2014 "),cX=a("a"),ZDo=o("BartForConditionalGeneration"),eGo=o(" (BART model)"),oGo=l(),P4=a("li"),M_e=a("strong"),rGo=o("bigbird_pegasus"),tGo=o(" \u2014 "),fX=a("a"),aGo=o("BigBirdPegasusForConditionalGeneration"),nGo=o(" (BigBird-Pegasus model)"),sGo=l(),B4=a("li"),E_e=a("strong"),lGo=o("blenderbot"),iGo=o(" \u2014 "),mX=a("a"),dGo=o("BlenderbotForConditionalGeneration"),cGo=o(" (Blenderbot model)"),fGo=l(),I4=a("li"),C_e=a("strong"),mGo=o("blenderbot-small"),gGo=o(" \u2014 "),gX=a("a"),hGo=o("BlenderbotSmallForConditionalGeneration"),pGo=o(" (BlenderbotSmall model)"),_Go=l(),N4=a("li"),w_e=a("strong"),uGo=o("encoder-decoder"),bGo=o(" \u2014 "),hX=a("a"),vGo=o("EncoderDecoderModel"),FGo=o(" (Encoder decoder model)"),TGo=l(),q4=a("li"),A_e=a("strong"),MGo=o("fsmt"),EGo=o(" \u2014 "),pX=a("a"),CGo=o("FSMTForConditionalGeneration"),wGo=o(" (FairSeq Machine-Translation model)"),AGo=l(),j4=a("li"),L_e=a("strong"),LGo=o("led"),yGo=o(" \u2014 "),_X=a("a"),xGo=o("LEDForConditionalGeneration"),$Go=o(" (LED model)"),kGo=l(),D4=a("li"),y_e=a("strong"),SGo=o("longt5"),RGo=o(" \u2014 "),uX=a("a"),PGo=o("LongT5ForConditionalGeneration"),BGo=o(" (LongT5 model)"),IGo=l(),G4=a("li"),x_e=a("strong"),NGo=o("m2m_100"),qGo=o(" \u2014 "),bX=a("a"),jGo=o("M2M100ForConditionalGeneration"),DGo=o(" (M2M100 model)"),GGo=l(),O4=a("li"),$_e=a("strong"),OGo=o("marian"),VGo=o(" \u2014 "),vX=a("a"),XGo=o("MarianMTModel"),zGo=o(" (Marian model)"),WGo=l(),V4=a("li"),k_e=a("strong"),QGo=o("mbart"),HGo=o(" \u2014 "),FX=a("a"),UGo=o("MBartForConditionalGeneration"),JGo=o(" (mBART model)"),YGo=l(),X4=a("li"),S_e=a("strong"),KGo=o("mt5"),ZGo=o(" \u2014 "),TX=a("a"),eOo=o("MT5ForConditionalGeneration"),oOo=o(" (MT5 model)"),rOo=l(),z4=a("li"),R_e=a("strong"),tOo=o("mvp"),aOo=o(" \u2014 "),MX=a("a"),nOo=o("MvpForConditionalGeneration"),sOo=o(" (MVP model)"),lOo=l(),W4=a("li"),P_e=a("strong"),iOo=o("nllb"),dOo=o(" \u2014 "),EX=a("a"),cOo=o("M2M100ForConditionalGeneration"),fOo=o(" (NLLB model)"),mOo=l(),Q4=a("li"),B_e=a("strong"),gOo=o("pegasus"),hOo=o(" \u2014 "),CX=a("a"),pOo=o("PegasusForConditionalGeneration"),_Oo=o(" (Pegasus model)"),uOo=l(),H4=a("li"),I_e=a("strong"),bOo=o("plbart"),vOo=o(" \u2014 "),wX=a("a"),FOo=o("PLBartForConditionalGeneration"),TOo=o(" (PLBart model)"),MOo=l(),U4=a("li"),N_e=a("strong"),EOo=o("prophetnet"),COo=o(" \u2014 "),AX=a("a"),wOo=o("ProphetNetForConditionalGeneration"),AOo=o(" (ProphetNet model)"),LOo=l(),J4=a("li"),q_e=a("strong"),yOo=o("t5"),xOo=o(" \u2014 "),LX=a("a"),$Oo=o("T5ForConditionalGeneration"),kOo=o(" (T5 model)"),SOo=l(),Y4=a("li"),j_e=a("strong"),ROo=o("xlm-prophetnet"),POo=o(" \u2014 "),yX=a("a"),BOo=o("XLMProphetNetForConditionalGeneration"),IOo=o(" (XLM-ProphetNet model)"),NOo=l(),K4=a("p"),qOo=o("The model is set in evaluation mode by default using "),D_e=a("code"),jOo=o("model.eval()"),DOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),GOo=o("model.train()"),OOo=l(),F(Z4.$$.fragment),Kze=l(),nd=a("h2"),eb=a("a"),O_e=a("span"),F(Ey.$$.fragment),VOo=l(),V_e=a("span"),XOo=o("AutoModelForSequenceClassification"),Zze=l(),Io=a("div"),F(Cy.$$.fragment),zOo=l(),sd=a("p"),WOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xX=a("a"),QOo=o("from_pretrained()"),HOo=o(" class method or the "),$X=a("a"),UOo=o("from_config()"),JOo=o(` class
method.`),YOo=l(),wy=a("p"),KOo=o("This class cannot be instantiated directly using "),X_e=a("code"),ZOo=o("__init__()"),eVo=o(" (throws an error)."),oVo=l(),gt=a("div"),F(Ay.$$.fragment),rVo=l(),z_e=a("p"),tVo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aVo=l(),ld=a("p"),nVo=o(`Note:
Loading a model from its configuration file does `),W_e=a("strong"),sVo=o("not"),lVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),iVo=o("from_pretrained()"),dVo=o(" to load the model weights."),cVo=l(),F(ob.$$.fragment),fVo=l(),ro=a("div"),F(Ly.$$.fragment),mVo=l(),Q_e=a("p"),gVo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hVo=l(),Ga=a("p"),pVo=o("The model class to instantiate is selected based on the "),H_e=a("code"),_Vo=o("model_type"),uVo=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),FVo=o("pretrained_model_name_or_path"),TVo=o(":"),MVo=l(),P=a("ul"),rb=a("li"),Y_e=a("strong"),EVo=o("albert"),CVo=o(" \u2014 "),SX=a("a"),wVo=o("AlbertForSequenceClassification"),AVo=o(" (ALBERT model)"),LVo=l(),tb=a("li"),K_e=a("strong"),yVo=o("bart"),xVo=o(" \u2014 "),RX=a("a"),$Vo=o("BartForSequenceClassification"),kVo=o(" (BART model)"),SVo=l(),ab=a("li"),Z_e=a("strong"),RVo=o("bert"),PVo=o(" \u2014 "),PX=a("a"),BVo=o("BertForSequenceClassification"),IVo=o(" (BERT model)"),NVo=l(),nb=a("li"),eue=a("strong"),qVo=o("big_bird"),jVo=o(" \u2014 "),BX=a("a"),DVo=o("BigBirdForSequenceClassification"),GVo=o(" (BigBird model)"),OVo=l(),sb=a("li"),oue=a("strong"),VVo=o("bigbird_pegasus"),XVo=o(" \u2014 "),IX=a("a"),zVo=o("BigBirdPegasusForSequenceClassification"),WVo=o(" (BigBird-Pegasus model)"),QVo=l(),lb=a("li"),rue=a("strong"),HVo=o("bloom"),UVo=o(" \u2014 "),NX=a("a"),JVo=o("BloomForSequenceClassification"),YVo=o(" (BLOOM model)"),KVo=l(),ib=a("li"),tue=a("strong"),ZVo=o("camembert"),eXo=o(" \u2014 "),qX=a("a"),oXo=o("CamembertForSequenceClassification"),rXo=o(" (CamemBERT model)"),tXo=l(),db=a("li"),aue=a("strong"),aXo=o("canine"),nXo=o(" \u2014 "),jX=a("a"),sXo=o("CanineForSequenceClassification"),lXo=o(" (CANINE model)"),iXo=l(),cb=a("li"),nue=a("strong"),dXo=o("convbert"),cXo=o(" \u2014 "),DX=a("a"),fXo=o("ConvBertForSequenceClassification"),mXo=o(" (ConvBERT model)"),gXo=l(),fb=a("li"),sue=a("strong"),hXo=o("ctrl"),pXo=o(" \u2014 "),GX=a("a"),_Xo=o("CTRLForSequenceClassification"),uXo=o(" (CTRL model)"),bXo=l(),mb=a("li"),lue=a("strong"),vXo=o("data2vec-text"),FXo=o(" \u2014 "),OX=a("a"),TXo=o("Data2VecTextForSequenceClassification"),MXo=o(" (Data2VecText model)"),EXo=l(),gb=a("li"),iue=a("strong"),CXo=o("deberta"),wXo=o(" \u2014 "),VX=a("a"),AXo=o("DebertaForSequenceClassification"),LXo=o(" (DeBERTa model)"),yXo=l(),hb=a("li"),due=a("strong"),xXo=o("deberta-v2"),$Xo=o(" \u2014 "),XX=a("a"),kXo=o("DebertaV2ForSequenceClassification"),SXo=o(" (DeBERTa-v2 model)"),RXo=l(),pb=a("li"),cue=a("strong"),PXo=o("distilbert"),BXo=o(" \u2014 "),zX=a("a"),IXo=o("DistilBertForSequenceClassification"),NXo=o(" (DistilBERT model)"),qXo=l(),_b=a("li"),fue=a("strong"),jXo=o("electra"),DXo=o(" \u2014 "),WX=a("a"),GXo=o("ElectraForSequenceClassification"),OXo=o(" (ELECTRA model)"),VXo=l(),ub=a("li"),mue=a("strong"),XXo=o("flaubert"),zXo=o(" \u2014 "),QX=a("a"),WXo=o("FlaubertForSequenceClassification"),QXo=o(" (FlauBERT model)"),HXo=l(),bb=a("li"),gue=a("strong"),UXo=o("fnet"),JXo=o(" \u2014 "),HX=a("a"),YXo=o("FNetForSequenceClassification"),KXo=o(" (FNet model)"),ZXo=l(),vb=a("li"),hue=a("strong"),ezo=o("funnel"),ozo=o(" \u2014 "),UX=a("a"),rzo=o("FunnelForSequenceClassification"),tzo=o(" (Funnel Transformer model)"),azo=l(),Fb=a("li"),pue=a("strong"),nzo=o("gpt2"),szo=o(" \u2014 "),JX=a("a"),lzo=o("GPT2ForSequenceClassification"),izo=o(" (OpenAI GPT-2 model)"),dzo=l(),Tb=a("li"),_ue=a("strong"),czo=o("gpt_neo"),fzo=o(" \u2014 "),YX=a("a"),mzo=o("GPTNeoForSequenceClassification"),gzo=o(" (GPT Neo model)"),hzo=l(),Mb=a("li"),uue=a("strong"),pzo=o("gptj"),_zo=o(" \u2014 "),KX=a("a"),uzo=o("GPTJForSequenceClassification"),bzo=o(" (GPT-J model)"),vzo=l(),Eb=a("li"),bue=a("strong"),Fzo=o("ibert"),Tzo=o(" \u2014 "),ZX=a("a"),Mzo=o("IBertForSequenceClassification"),Ezo=o(" (I-BERT model)"),Czo=l(),Cb=a("li"),vue=a("strong"),wzo=o("layoutlm"),Azo=o(" \u2014 "),ez=a("a"),Lzo=o("LayoutLMForSequenceClassification"),yzo=o(" (LayoutLM model)"),xzo=l(),wb=a("li"),Fue=a("strong"),$zo=o("layoutlmv2"),kzo=o(" \u2014 "),oz=a("a"),Szo=o("LayoutLMv2ForSequenceClassification"),Rzo=o(" (LayoutLMv2 model)"),Pzo=l(),Ab=a("li"),Tue=a("strong"),Bzo=o("layoutlmv3"),Izo=o(" \u2014 "),rz=a("a"),Nzo=o("LayoutLMv3ForSequenceClassification"),qzo=o(" (LayoutLMv3 model)"),jzo=l(),Lb=a("li"),Mue=a("strong"),Dzo=o("led"),Gzo=o(" \u2014 "),tz=a("a"),Ozo=o("LEDForSequenceClassification"),Vzo=o(" (LED model)"),Xzo=l(),yb=a("li"),Eue=a("strong"),zzo=o("longformer"),Wzo=o(" \u2014 "),az=a("a"),Qzo=o("LongformerForSequenceClassification"),Hzo=o(" (Longformer model)"),Uzo=l(),xb=a("li"),Cue=a("strong"),Jzo=o("luke"),Yzo=o(" \u2014 "),nz=a("a"),Kzo=o("LukeForSequenceClassification"),Zzo=o(" (LUKE model)"),eWo=l(),$b=a("li"),wue=a("strong"),oWo=o("mbart"),rWo=o(" \u2014 "),sz=a("a"),tWo=o("MBartForSequenceClassification"),aWo=o(" (mBART model)"),nWo=l(),kb=a("li"),Aue=a("strong"),sWo=o("megatron-bert"),lWo=o(" \u2014 "),lz=a("a"),iWo=o("MegatronBertForSequenceClassification"),dWo=o(" (Megatron-BERT model)"),cWo=l(),Sb=a("li"),Lue=a("strong"),fWo=o("mobilebert"),mWo=o(" \u2014 "),iz=a("a"),gWo=o("MobileBertForSequenceClassification"),hWo=o(" (MobileBERT model)"),pWo=l(),Rb=a("li"),yue=a("strong"),_Wo=o("mpnet"),uWo=o(" \u2014 "),dz=a("a"),bWo=o("MPNetForSequenceClassification"),vWo=o(" (MPNet model)"),FWo=l(),Pb=a("li"),xue=a("strong"),TWo=o("mvp"),MWo=o(" \u2014 "),cz=a("a"),EWo=o("MvpForSequenceClassification"),CWo=o(" (MVP model)"),wWo=l(),Bb=a("li"),$ue=a("strong"),AWo=o("nezha"),LWo=o(" \u2014 "),fz=a("a"),yWo=o("NezhaForSequenceClassification"),xWo=o(" (Nezha model)"),$Wo=l(),Ib=a("li"),kue=a("strong"),kWo=o("nystromformer"),SWo=o(" \u2014 "),mz=a("a"),RWo=o("NystromformerForSequenceClassification"),PWo=o(" (Nystr\xF6mformer model)"),BWo=l(),Nb=a("li"),Sue=a("strong"),IWo=o("openai-gpt"),NWo=o(" \u2014 "),gz=a("a"),qWo=o("OpenAIGPTForSequenceClassification"),jWo=o(" (OpenAI GPT model)"),DWo=l(),qb=a("li"),Rue=a("strong"),GWo=o("opt"),OWo=o(" \u2014 "),hz=a("a"),VWo=o("OPTForSequenceClassification"),XWo=o(" (OPT model)"),zWo=l(),jb=a("li"),Pue=a("strong"),WWo=o("perceiver"),QWo=o(" \u2014 "),pz=a("a"),HWo=o("PerceiverForSequenceClassification"),UWo=o(" (Perceiver model)"),JWo=l(),Db=a("li"),Bue=a("strong"),YWo=o("plbart"),KWo=o(" \u2014 "),_z=a("a"),ZWo=o("PLBartForSequenceClassification"),eQo=o(" (PLBart model)"),oQo=l(),Gb=a("li"),Iue=a("strong"),rQo=o("qdqbert"),tQo=o(" \u2014 "),uz=a("a"),aQo=o("QDQBertForSequenceClassification"),nQo=o(" (QDQBert model)"),sQo=l(),Ob=a("li"),Nue=a("strong"),lQo=o("reformer"),iQo=o(" \u2014 "),bz=a("a"),dQo=o("ReformerForSequenceClassification"),cQo=o(" (Reformer model)"),fQo=l(),Vb=a("li"),que=a("strong"),mQo=o("rembert"),gQo=o(" \u2014 "),vz=a("a"),hQo=o("RemBertForSequenceClassification"),pQo=o(" (RemBERT model)"),_Qo=l(),Xb=a("li"),jue=a("strong"),uQo=o("roberta"),bQo=o(" \u2014 "),Fz=a("a"),vQo=o("RobertaForSequenceClassification"),FQo=o(" (RoBERTa model)"),TQo=l(),zb=a("li"),Due=a("strong"),MQo=o("roformer"),EQo=o(" \u2014 "),Tz=a("a"),CQo=o("RoFormerForSequenceClassification"),wQo=o(" (RoFormer model)"),AQo=l(),Wb=a("li"),Gue=a("strong"),LQo=o("squeezebert"),yQo=o(" \u2014 "),Mz=a("a"),xQo=o("SqueezeBertForSequenceClassification"),$Qo=o(" (SqueezeBERT model)"),kQo=l(),Qb=a("li"),Oue=a("strong"),SQo=o("tapas"),RQo=o(" \u2014 "),Ez=a("a"),PQo=o("TapasForSequenceClassification"),BQo=o(" (TAPAS model)"),IQo=l(),Hb=a("li"),Vue=a("strong"),NQo=o("transfo-xl"),qQo=o(" \u2014 "),Cz=a("a"),jQo=o("TransfoXLForSequenceClassification"),DQo=o(" (Transformer-XL model)"),GQo=l(),Ub=a("li"),Xue=a("strong"),OQo=o("xlm"),VQo=o(" \u2014 "),wz=a("a"),XQo=o("XLMForSequenceClassification"),zQo=o(" (XLM model)"),WQo=l(),Jb=a("li"),zue=a("strong"),QQo=o("xlm-roberta"),HQo=o(" \u2014 "),Az=a("a"),UQo=o("XLMRobertaForSequenceClassification"),JQo=o(" (XLM-RoBERTa model)"),YQo=l(),Yb=a("li"),Wue=a("strong"),KQo=o("xlm-roberta-xl"),ZQo=o(" \u2014 "),Lz=a("a"),eHo=o("XLMRobertaXLForSequenceClassification"),oHo=o(" (XLM-RoBERTa-XL model)"),rHo=l(),Kb=a("li"),Que=a("strong"),tHo=o("xlnet"),aHo=o(" \u2014 "),yz=a("a"),nHo=o("XLNetForSequenceClassification"),sHo=o(" (XLNet model)"),lHo=l(),Zb=a("li"),Hue=a("strong"),iHo=o("yoso"),dHo=o(" \u2014 "),xz=a("a"),cHo=o("YosoForSequenceClassification"),fHo=o(" (YOSO model)"),mHo=l(),ev=a("p"),gHo=o("The model is set in evaluation mode by default using "),Uue=a("code"),hHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=a("code"),_Ho=o("model.train()"),uHo=l(),F(ov.$$.fragment),eWe=l(),id=a("h2"),rv=a("a"),Yue=a("span"),F(yy.$$.fragment),bHo=l(),Kue=a("span"),vHo=o("AutoModelForMultipleChoice"),oWe=l(),No=a("div"),F(xy.$$.fragment),FHo=l(),dd=a("p"),THo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$z=a("a"),MHo=o("from_pretrained()"),EHo=o(" class method or the "),kz=a("a"),CHo=o("from_config()"),wHo=o(` class
method.`),AHo=l(),$y=a("p"),LHo=o("This class cannot be instantiated directly using "),Zue=a("code"),yHo=o("__init__()"),xHo=o(" (throws an error)."),$Ho=l(),ht=a("div"),F(ky.$$.fragment),kHo=l(),e2e=a("p"),SHo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RHo=l(),cd=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),BHo=o("not"),IHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),NHo=o("from_pretrained()"),qHo=o(" to load the model weights."),jHo=l(),F(tv.$$.fragment),DHo=l(),to=a("div"),F(Sy.$$.fragment),GHo=l(),r2e=a("p"),OHo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VHo=l(),Oa=a("p"),XHo=o("The model class to instantiate is selected based on the "),t2e=a("code"),zHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),QHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),Z=a("ul"),av=a("li"),s2e=a("strong"),KHo=o("albert"),ZHo=o(" \u2014 "),Rz=a("a"),eUo=o("AlbertForMultipleChoice"),oUo=o(" (ALBERT model)"),rUo=l(),nv=a("li"),l2e=a("strong"),tUo=o("bert"),aUo=o(" \u2014 "),Pz=a("a"),nUo=o("BertForMultipleChoice"),sUo=o(" (BERT model)"),lUo=l(),sv=a("li"),i2e=a("strong"),iUo=o("big_bird"),dUo=o(" \u2014 "),Bz=a("a"),cUo=o("BigBirdForMultipleChoice"),fUo=o(" (BigBird model)"),mUo=l(),lv=a("li"),d2e=a("strong"),gUo=o("camembert"),hUo=o(" \u2014 "),Iz=a("a"),pUo=o("CamembertForMultipleChoice"),_Uo=o(" (CamemBERT model)"),uUo=l(),iv=a("li"),c2e=a("strong"),bUo=o("canine"),vUo=o(" \u2014 "),Nz=a("a"),FUo=o("CanineForMultipleChoice"),TUo=o(" (CANINE model)"),MUo=l(),dv=a("li"),f2e=a("strong"),EUo=o("convbert"),CUo=o(" \u2014 "),qz=a("a"),wUo=o("ConvBertForMultipleChoice"),AUo=o(" (ConvBERT model)"),LUo=l(),cv=a("li"),m2e=a("strong"),yUo=o("data2vec-text"),xUo=o(" \u2014 "),jz=a("a"),$Uo=o("Data2VecTextForMultipleChoice"),kUo=o(" (Data2VecText model)"),SUo=l(),fv=a("li"),g2e=a("strong"),RUo=o("deberta-v2"),PUo=o(" \u2014 "),Dz=a("a"),BUo=o("DebertaV2ForMultipleChoice"),IUo=o(" (DeBERTa-v2 model)"),NUo=l(),mv=a("li"),h2e=a("strong"),qUo=o("distilbert"),jUo=o(" \u2014 "),Gz=a("a"),DUo=o("DistilBertForMultipleChoice"),GUo=o(" (DistilBERT model)"),OUo=l(),gv=a("li"),p2e=a("strong"),VUo=o("electra"),XUo=o(" \u2014 "),Oz=a("a"),zUo=o("ElectraForMultipleChoice"),WUo=o(" (ELECTRA model)"),QUo=l(),hv=a("li"),_2e=a("strong"),HUo=o("flaubert"),UUo=o(" \u2014 "),Vz=a("a"),JUo=o("FlaubertForMultipleChoice"),YUo=o(" (FlauBERT model)"),KUo=l(),pv=a("li"),u2e=a("strong"),ZUo=o("fnet"),eJo=o(" \u2014 "),Xz=a("a"),oJo=o("FNetForMultipleChoice"),rJo=o(" (FNet model)"),tJo=l(),_v=a("li"),b2e=a("strong"),aJo=o("funnel"),nJo=o(" \u2014 "),zz=a("a"),sJo=o("FunnelForMultipleChoice"),lJo=o(" (Funnel Transformer model)"),iJo=l(),uv=a("li"),v2e=a("strong"),dJo=o("ibert"),cJo=o(" \u2014 "),Wz=a("a"),fJo=o("IBertForMultipleChoice"),mJo=o(" (I-BERT model)"),gJo=l(),bv=a("li"),F2e=a("strong"),hJo=o("longformer"),pJo=o(" \u2014 "),Qz=a("a"),_Jo=o("LongformerForMultipleChoice"),uJo=o(" (Longformer model)"),bJo=l(),vv=a("li"),T2e=a("strong"),vJo=o("luke"),FJo=o(" \u2014 "),Hz=a("a"),TJo=o("LukeForMultipleChoice"),MJo=o(" (LUKE model)"),EJo=l(),Fv=a("li"),M2e=a("strong"),CJo=o("megatron-bert"),wJo=o(" \u2014 "),Uz=a("a"),AJo=o("MegatronBertForMultipleChoice"),LJo=o(" (Megatron-BERT model)"),yJo=l(),Tv=a("li"),E2e=a("strong"),xJo=o("mobilebert"),$Jo=o(" \u2014 "),Jz=a("a"),kJo=o("MobileBertForMultipleChoice"),SJo=o(" (MobileBERT model)"),RJo=l(),Mv=a("li"),C2e=a("strong"),PJo=o("mpnet"),BJo=o(" \u2014 "),Yz=a("a"),IJo=o("MPNetForMultipleChoice"),NJo=o(" (MPNet model)"),qJo=l(),Ev=a("li"),w2e=a("strong"),jJo=o("nezha"),DJo=o(" \u2014 "),Kz=a("a"),GJo=o("NezhaForMultipleChoice"),OJo=o(" (Nezha model)"),VJo=l(),Cv=a("li"),A2e=a("strong"),XJo=o("nystromformer"),zJo=o(" \u2014 "),Zz=a("a"),WJo=o("NystromformerForMultipleChoice"),QJo=o(" (Nystr\xF6mformer model)"),HJo=l(),wv=a("li"),L2e=a("strong"),UJo=o("qdqbert"),JJo=o(" \u2014 "),eW=a("a"),YJo=o("QDQBertForMultipleChoice"),KJo=o(" (QDQBert model)"),ZJo=l(),Av=a("li"),y2e=a("strong"),eYo=o("rembert"),oYo=o(" \u2014 "),oW=a("a"),rYo=o("RemBertForMultipleChoice"),tYo=o(" (RemBERT model)"),aYo=l(),Lv=a("li"),x2e=a("strong"),nYo=o("roberta"),sYo=o(" \u2014 "),rW=a("a"),lYo=o("RobertaForMultipleChoice"),iYo=o(" (RoBERTa model)"),dYo=l(),yv=a("li"),$2e=a("strong"),cYo=o("roformer"),fYo=o(" \u2014 "),tW=a("a"),mYo=o("RoFormerForMultipleChoice"),gYo=o(" (RoFormer model)"),hYo=l(),xv=a("li"),k2e=a("strong"),pYo=o("squeezebert"),_Yo=o(" \u2014 "),aW=a("a"),uYo=o("SqueezeBertForMultipleChoice"),bYo=o(" (SqueezeBERT model)"),vYo=l(),$v=a("li"),S2e=a("strong"),FYo=o("xlm"),TYo=o(" \u2014 "),nW=a("a"),MYo=o("XLMForMultipleChoice"),EYo=o(" (XLM model)"),CYo=l(),kv=a("li"),R2e=a("strong"),wYo=o("xlm-roberta"),AYo=o(" \u2014 "),sW=a("a"),LYo=o("XLMRobertaForMultipleChoice"),yYo=o(" (XLM-RoBERTa model)"),xYo=l(),Sv=a("li"),P2e=a("strong"),$Yo=o("xlm-roberta-xl"),kYo=o(" \u2014 "),lW=a("a"),SYo=o("XLMRobertaXLForMultipleChoice"),RYo=o(" (XLM-RoBERTa-XL model)"),PYo=l(),Rv=a("li"),B2e=a("strong"),BYo=o("xlnet"),IYo=o(" \u2014 "),iW=a("a"),NYo=o("XLNetForMultipleChoice"),qYo=o(" (XLNet model)"),jYo=l(),Pv=a("li"),I2e=a("strong"),DYo=o("yoso"),GYo=o(" \u2014 "),dW=a("a"),OYo=o("YosoForMultipleChoice"),VYo=o(" (YOSO model)"),XYo=l(),Bv=a("p"),zYo=o("The model is set in evaluation mode by default using "),N2e=a("code"),WYo=o("model.eval()"),QYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),HYo=o("model.train()"),UYo=l(),F(Iv.$$.fragment),rWe=l(),fd=a("h2"),Nv=a("a"),j2e=a("span"),F(Ry.$$.fragment),JYo=l(),D2e=a("span"),YYo=o("AutoModelForNextSentencePrediction"),tWe=l(),qo=a("div"),F(Py.$$.fragment),KYo=l(),md=a("p"),ZYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cW=a("a"),eKo=o("from_pretrained()"),oKo=o(" class method or the "),fW=a("a"),rKo=o("from_config()"),tKo=o(` class
method.`),aKo=l(),By=a("p"),nKo=o("This class cannot be instantiated directly using "),G2e=a("code"),sKo=o("__init__()"),lKo=o(" (throws an error)."),iKo=l(),pt=a("div"),F(Iy.$$.fragment),dKo=l(),O2e=a("p"),cKo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fKo=l(),gd=a("p"),mKo=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),gKo=o("not"),hKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),pKo=o("from_pretrained()"),_Ko=o(" to load the model weights."),uKo=l(),F(qv.$$.fragment),bKo=l(),ao=a("div"),F(Ny.$$.fragment),vKo=l(),X2e=a("p"),FKo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TKo=l(),Va=a("p"),MKo=o("The model class to instantiate is selected based on the "),z2e=a("code"),EKo=o("model_type"),CKo=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),LKo=o("pretrained_model_name_or_path"),yKo=o(":"),xKo=l(),jo=a("ul"),jv=a("li"),H2e=a("strong"),$Ko=o("bert"),kKo=o(" \u2014 "),gW=a("a"),SKo=o("BertForNextSentencePrediction"),RKo=o(" (BERT model)"),PKo=l(),Dv=a("li"),U2e=a("strong"),BKo=o("fnet"),IKo=o(" \u2014 "),hW=a("a"),NKo=o("FNetForNextSentencePrediction"),qKo=o(" (FNet model)"),jKo=l(),Gv=a("li"),J2e=a("strong"),DKo=o("megatron-bert"),GKo=o(" \u2014 "),pW=a("a"),OKo=o("MegatronBertForNextSentencePrediction"),VKo=o(" (Megatron-BERT model)"),XKo=l(),Ov=a("li"),Y2e=a("strong"),zKo=o("mobilebert"),WKo=o(" \u2014 "),_W=a("a"),QKo=o("MobileBertForNextSentencePrediction"),HKo=o(" (MobileBERT model)"),UKo=l(),Vv=a("li"),K2e=a("strong"),JKo=o("nezha"),YKo=o(" \u2014 "),uW=a("a"),KKo=o("NezhaForNextSentencePrediction"),ZKo=o(" (Nezha model)"),eZo=l(),Xv=a("li"),Z2e=a("strong"),oZo=o("qdqbert"),rZo=o(" \u2014 "),bW=a("a"),tZo=o("QDQBertForNextSentencePrediction"),aZo=o(" (QDQBert model)"),nZo=l(),zv=a("p"),sZo=o("The model is set in evaluation mode by default using "),e1e=a("code"),lZo=o("model.eval()"),iZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),dZo=o("model.train()"),cZo=l(),F(Wv.$$.fragment),aWe=l(),hd=a("h2"),Qv=a("a"),r1e=a("span"),F(qy.$$.fragment),fZo=l(),t1e=a("span"),mZo=o("AutoModelForTokenClassification"),nWe=l(),Do=a("div"),F(jy.$$.fragment),gZo=l(),pd=a("p"),hZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vW=a("a"),pZo=o("from_pretrained()"),_Zo=o(" class method or the "),FW=a("a"),uZo=o("from_config()"),bZo=o(` class
method.`),vZo=l(),Dy=a("p"),FZo=o("This class cannot be instantiated directly using "),a1e=a("code"),TZo=o("__init__()"),MZo=o(" (throws an error)."),EZo=l(),_t=a("div"),F(Gy.$$.fragment),CZo=l(),n1e=a("p"),wZo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),AZo=l(),_d=a("p"),LZo=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),yZo=o("not"),xZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),$Zo=o("from_pretrained()"),kZo=o(" to load the model weights."),SZo=l(),F(Hv.$$.fragment),RZo=l(),no=a("div"),F(Oy.$$.fragment),PZo=l(),l1e=a("p"),BZo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IZo=l(),Xa=a("p"),NZo=o("The model class to instantiate is selected based on the "),i1e=a("code"),qZo=o("model_type"),jZo=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),DZo=o("pretrained_model_name_or_path"),GZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),OZo=o("pretrained_model_name_or_path"),VZo=o(":"),XZo=l(),H=a("ul"),Uv=a("li"),f1e=a("strong"),zZo=o("albert"),WZo=o(" \u2014 "),MW=a("a"),QZo=o("AlbertForTokenClassification"),HZo=o(" (ALBERT model)"),UZo=l(),Jv=a("li"),m1e=a("strong"),JZo=o("bert"),YZo=o(" \u2014 "),EW=a("a"),KZo=o("BertForTokenClassification"),ZZo=o(" (BERT model)"),eer=l(),Yv=a("li"),g1e=a("strong"),oer=o("big_bird"),rer=o(" \u2014 "),CW=a("a"),ter=o("BigBirdForTokenClassification"),aer=o(" (BigBird model)"),ner=l(),Kv=a("li"),h1e=a("strong"),ser=o("bloom"),ler=o(" \u2014 "),wW=a("a"),ier=o("BloomForTokenClassification"),der=o(" (BLOOM model)"),cer=l(),Zv=a("li"),p1e=a("strong"),fer=o("camembert"),mer=o(" \u2014 "),AW=a("a"),ger=o("CamembertForTokenClassification"),her=o(" (CamemBERT model)"),per=l(),e0=a("li"),_1e=a("strong"),_er=o("canine"),uer=o(" \u2014 "),LW=a("a"),ber=o("CanineForTokenClassification"),ver=o(" (CANINE model)"),Fer=l(),o0=a("li"),u1e=a("strong"),Ter=o("convbert"),Mer=o(" \u2014 "),yW=a("a"),Eer=o("ConvBertForTokenClassification"),Cer=o(" (ConvBERT model)"),wer=l(),r0=a("li"),b1e=a("strong"),Aer=o("data2vec-text"),Ler=o(" \u2014 "),xW=a("a"),yer=o("Data2VecTextForTokenClassification"),xer=o(" (Data2VecText model)"),$er=l(),t0=a("li"),v1e=a("strong"),ker=o("deberta"),Ser=o(" \u2014 "),$W=a("a"),Rer=o("DebertaForTokenClassification"),Per=o(" (DeBERTa model)"),Ber=l(),a0=a("li"),F1e=a("strong"),Ier=o("deberta-v2"),Ner=o(" \u2014 "),kW=a("a"),qer=o("DebertaV2ForTokenClassification"),jer=o(" (DeBERTa-v2 model)"),Der=l(),n0=a("li"),T1e=a("strong"),Ger=o("distilbert"),Oer=o(" \u2014 "),SW=a("a"),Ver=o("DistilBertForTokenClassification"),Xer=o(" (DistilBERT model)"),zer=l(),s0=a("li"),M1e=a("strong"),Wer=o("electra"),Qer=o(" \u2014 "),RW=a("a"),Her=o("ElectraForTokenClassification"),Uer=o(" (ELECTRA model)"),Jer=l(),l0=a("li"),E1e=a("strong"),Yer=o("flaubert"),Ker=o(" \u2014 "),PW=a("a"),Zer=o("FlaubertForTokenClassification"),eor=o(" (FlauBERT model)"),oor=l(),i0=a("li"),C1e=a("strong"),ror=o("fnet"),tor=o(" \u2014 "),BW=a("a"),aor=o("FNetForTokenClassification"),nor=o(" (FNet model)"),sor=l(),d0=a("li"),w1e=a("strong"),lor=o("funnel"),ior=o(" \u2014 "),IW=a("a"),dor=o("FunnelForTokenClassification"),cor=o(" (Funnel Transformer model)"),mor=l(),c0=a("li"),A1e=a("strong"),gor=o("gpt2"),hor=o(" \u2014 "),NW=a("a"),por=o("GPT2ForTokenClassification"),_or=o(" (OpenAI GPT-2 model)"),uor=l(),f0=a("li"),L1e=a("strong"),bor=o("ibert"),vor=o(" \u2014 "),qW=a("a"),For=o("IBertForTokenClassification"),Tor=o(" (I-BERT model)"),Mor=l(),m0=a("li"),y1e=a("strong"),Eor=o("layoutlm"),Cor=o(" \u2014 "),jW=a("a"),wor=o("LayoutLMForTokenClassification"),Aor=o(" (LayoutLM model)"),Lor=l(),g0=a("li"),x1e=a("strong"),yor=o("layoutlmv2"),xor=o(" \u2014 "),DW=a("a"),$or=o("LayoutLMv2ForTokenClassification"),kor=o(" (LayoutLMv2 model)"),Sor=l(),h0=a("li"),$1e=a("strong"),Ror=o("layoutlmv3"),Por=o(" \u2014 "),GW=a("a"),Bor=o("LayoutLMv3ForTokenClassification"),Ior=o(" (LayoutLMv3 model)"),Nor=l(),p0=a("li"),k1e=a("strong"),qor=o("longformer"),jor=o(" \u2014 "),OW=a("a"),Dor=o("LongformerForTokenClassification"),Gor=o(" (Longformer model)"),Oor=l(),_0=a("li"),S1e=a("strong"),Vor=o("luke"),Xor=o(" \u2014 "),VW=a("a"),zor=o("LukeForTokenClassification"),Wor=o(" (LUKE model)"),Qor=l(),u0=a("li"),R1e=a("strong"),Hor=o("megatron-bert"),Uor=o(" \u2014 "),XW=a("a"),Jor=o("MegatronBertForTokenClassification"),Yor=o(" (Megatron-BERT model)"),Kor=l(),b0=a("li"),P1e=a("strong"),Zor=o("mobilebert"),err=o(" \u2014 "),zW=a("a"),orr=o("MobileBertForTokenClassification"),rrr=o(" (MobileBERT model)"),trr=l(),v0=a("li"),B1e=a("strong"),arr=o("mpnet"),nrr=o(" \u2014 "),WW=a("a"),srr=o("MPNetForTokenClassification"),lrr=o(" (MPNet model)"),irr=l(),F0=a("li"),I1e=a("strong"),drr=o("nezha"),crr=o(" \u2014 "),QW=a("a"),frr=o("NezhaForTokenClassification"),mrr=o(" (Nezha model)"),grr=l(),T0=a("li"),N1e=a("strong"),hrr=o("nystromformer"),prr=o(" \u2014 "),HW=a("a"),_rr=o("NystromformerForTokenClassification"),urr=o(" (Nystr\xF6mformer model)"),brr=l(),M0=a("li"),q1e=a("strong"),vrr=o("qdqbert"),Frr=o(" \u2014 "),UW=a("a"),Trr=o("QDQBertForTokenClassification"),Mrr=o(" (QDQBert model)"),Err=l(),E0=a("li"),j1e=a("strong"),Crr=o("rembert"),wrr=o(" \u2014 "),JW=a("a"),Arr=o("RemBertForTokenClassification"),Lrr=o(" (RemBERT model)"),yrr=l(),C0=a("li"),D1e=a("strong"),xrr=o("roberta"),$rr=o(" \u2014 "),YW=a("a"),krr=o("RobertaForTokenClassification"),Srr=o(" (RoBERTa model)"),Rrr=l(),w0=a("li"),G1e=a("strong"),Prr=o("roformer"),Brr=o(" \u2014 "),KW=a("a"),Irr=o("RoFormerForTokenClassification"),Nrr=o(" (RoFormer model)"),qrr=l(),A0=a("li"),O1e=a("strong"),jrr=o("squeezebert"),Drr=o(" \u2014 "),ZW=a("a"),Grr=o("SqueezeBertForTokenClassification"),Orr=o(" (SqueezeBERT model)"),Vrr=l(),L0=a("li"),V1e=a("strong"),Xrr=o("xlm"),zrr=o(" \u2014 "),eQ=a("a"),Wrr=o("XLMForTokenClassification"),Qrr=o(" (XLM model)"),Hrr=l(),y0=a("li"),X1e=a("strong"),Urr=o("xlm-roberta"),Jrr=o(" \u2014 "),oQ=a("a"),Yrr=o("XLMRobertaForTokenClassification"),Krr=o(" (XLM-RoBERTa model)"),Zrr=l(),x0=a("li"),z1e=a("strong"),etr=o("xlm-roberta-xl"),otr=o(" \u2014 "),rQ=a("a"),rtr=o("XLMRobertaXLForTokenClassification"),ttr=o(" (XLM-RoBERTa-XL model)"),atr=l(),$0=a("li"),W1e=a("strong"),ntr=o("xlnet"),str=o(" \u2014 "),tQ=a("a"),ltr=o("XLNetForTokenClassification"),itr=o(" (XLNet model)"),dtr=l(),k0=a("li"),Q1e=a("strong"),ctr=o("yoso"),ftr=o(" \u2014 "),aQ=a("a"),mtr=o("YosoForTokenClassification"),gtr=o(" (YOSO model)"),htr=l(),S0=a("p"),ptr=o("The model is set in evaluation mode by default using "),H1e=a("code"),_tr=o("model.eval()"),utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=a("code"),btr=o("model.train()"),vtr=l(),F(R0.$$.fragment),sWe=l(),ud=a("h2"),P0=a("a"),J1e=a("span"),F(Vy.$$.fragment),Ftr=l(),Y1e=a("span"),Ttr=o("AutoModelForQuestionAnswering"),lWe=l(),Go=a("div"),F(Xy.$$.fragment),Mtr=l(),bd=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nQ=a("a"),Ctr=o("from_pretrained()"),wtr=o(" class method or the "),sQ=a("a"),Atr=o("from_config()"),Ltr=o(` class
method.`),ytr=l(),zy=a("p"),xtr=o("This class cannot be instantiated directly using "),K1e=a("code"),$tr=o("__init__()"),ktr=o(" (throws an error)."),Str=l(),ut=a("div"),F(Wy.$$.fragment),Rtr=l(),Z1e=a("p"),Ptr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Btr=l(),vd=a("p"),Itr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),Ntr=o("not"),qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),jtr=o("from_pretrained()"),Dtr=o(" to load the model weights."),Gtr=l(),F(B0.$$.fragment),Otr=l(),so=a("div"),F(Qy.$$.fragment),Vtr=l(),o4e=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ztr=l(),za=a("p"),Wtr=o("The model class to instantiate is selected based on the "),r4e=a("code"),Qtr=o("model_type"),Htr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),Utr=o("pretrained_model_name_or_path"),Jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(":"),Ztr=l(),V=a("ul"),I0=a("li"),n4e=a("strong"),ear=o("albert"),oar=o(" \u2014 "),iQ=a("a"),rar=o("AlbertForQuestionAnswering"),tar=o(" (ALBERT model)"),aar=l(),N0=a("li"),s4e=a("strong"),nar=o("bart"),sar=o(" \u2014 "),dQ=a("a"),lar=o("BartForQuestionAnswering"),iar=o(" (BART model)"),dar=l(),q0=a("li"),l4e=a("strong"),car=o("bert"),far=o(" \u2014 "),cQ=a("a"),mar=o("BertForQuestionAnswering"),gar=o(" (BERT model)"),har=l(),j0=a("li"),i4e=a("strong"),par=o("big_bird"),_ar=o(" \u2014 "),fQ=a("a"),uar=o("BigBirdForQuestionAnswering"),bar=o(" (BigBird model)"),Far=l(),D0=a("li"),d4e=a("strong"),Tar=o("bigbird_pegasus"),Mar=o(" \u2014 "),mQ=a("a"),Ear=o("BigBirdPegasusForQuestionAnswering"),Car=o(" (BigBird-Pegasus model)"),war=l(),G0=a("li"),c4e=a("strong"),Aar=o("camembert"),Lar=o(" \u2014 "),gQ=a("a"),yar=o("CamembertForQuestionAnswering"),xar=o(" (CamemBERT model)"),$ar=l(),O0=a("li"),f4e=a("strong"),kar=o("canine"),Sar=o(" \u2014 "),hQ=a("a"),Rar=o("CanineForQuestionAnswering"),Par=o(" (CANINE model)"),Bar=l(),V0=a("li"),m4e=a("strong"),Iar=o("convbert"),Nar=o(" \u2014 "),pQ=a("a"),qar=o("ConvBertForQuestionAnswering"),jar=o(" (ConvBERT model)"),Dar=l(),X0=a("li"),g4e=a("strong"),Gar=o("data2vec-text"),Oar=o(" \u2014 "),_Q=a("a"),Var=o("Data2VecTextForQuestionAnswering"),Xar=o(" (Data2VecText model)"),zar=l(),z0=a("li"),h4e=a("strong"),War=o("deberta"),Qar=o(" \u2014 "),uQ=a("a"),Har=o("DebertaForQuestionAnswering"),Uar=o(" (DeBERTa model)"),Jar=l(),W0=a("li"),p4e=a("strong"),Yar=o("deberta-v2"),Kar=o(" \u2014 "),bQ=a("a"),Zar=o("DebertaV2ForQuestionAnswering"),enr=o(" (DeBERTa-v2 model)"),onr=l(),Q0=a("li"),_4e=a("strong"),rnr=o("distilbert"),tnr=o(" \u2014 "),vQ=a("a"),anr=o("DistilBertForQuestionAnswering"),nnr=o(" (DistilBERT model)"),snr=l(),H0=a("li"),u4e=a("strong"),lnr=o("electra"),inr=o(" \u2014 "),FQ=a("a"),dnr=o("ElectraForQuestionAnswering"),cnr=o(" (ELECTRA model)"),fnr=l(),U0=a("li"),b4e=a("strong"),mnr=o("flaubert"),gnr=o(" \u2014 "),TQ=a("a"),hnr=o("FlaubertForQuestionAnsweringSimple"),pnr=o(" (FlauBERT model)"),_nr=l(),J0=a("li"),v4e=a("strong"),unr=o("fnet"),bnr=o(" \u2014 "),MQ=a("a"),vnr=o("FNetForQuestionAnswering"),Fnr=o(" (FNet model)"),Tnr=l(),Y0=a("li"),F4e=a("strong"),Mnr=o("funnel"),Enr=o(" \u2014 "),EQ=a("a"),Cnr=o("FunnelForQuestionAnswering"),wnr=o(" (Funnel Transformer model)"),Anr=l(),K0=a("li"),T4e=a("strong"),Lnr=o("gptj"),ynr=o(" \u2014 "),CQ=a("a"),xnr=o("GPTJForQuestionAnswering"),$nr=o(" (GPT-J model)"),knr=l(),Z0=a("li"),M4e=a("strong"),Snr=o("ibert"),Rnr=o(" \u2014 "),wQ=a("a"),Pnr=o("IBertForQuestionAnswering"),Bnr=o(" (I-BERT model)"),Inr=l(),eF=a("li"),E4e=a("strong"),Nnr=o("layoutlmv2"),qnr=o(" \u2014 "),AQ=a("a"),jnr=o("LayoutLMv2ForQuestionAnswering"),Dnr=o(" (LayoutLMv2 model)"),Gnr=l(),oF=a("li"),C4e=a("strong"),Onr=o("layoutlmv3"),Vnr=o(" \u2014 "),LQ=a("a"),Xnr=o("LayoutLMv3ForQuestionAnswering"),znr=o(" (LayoutLMv3 model)"),Wnr=l(),rF=a("li"),w4e=a("strong"),Qnr=o("led"),Hnr=o(" \u2014 "),yQ=a("a"),Unr=o("LEDForQuestionAnswering"),Jnr=o(" (LED model)"),Ynr=l(),tF=a("li"),A4e=a("strong"),Knr=o("longformer"),Znr=o(" \u2014 "),xQ=a("a"),esr=o("LongformerForQuestionAnswering"),osr=o(" (Longformer model)"),rsr=l(),aF=a("li"),L4e=a("strong"),tsr=o("luke"),asr=o(" \u2014 "),$Q=a("a"),nsr=o("LukeForQuestionAnswering"),ssr=o(" (LUKE model)"),lsr=l(),nF=a("li"),y4e=a("strong"),isr=o("lxmert"),dsr=o(" \u2014 "),kQ=a("a"),csr=o("LxmertForQuestionAnswering"),fsr=o(" (LXMERT model)"),msr=l(),sF=a("li"),x4e=a("strong"),gsr=o("mbart"),hsr=o(" \u2014 "),SQ=a("a"),psr=o("MBartForQuestionAnswering"),_sr=o(" (mBART model)"),usr=l(),lF=a("li"),$4e=a("strong"),bsr=o("megatron-bert"),vsr=o(" \u2014 "),RQ=a("a"),Fsr=o("MegatronBertForQuestionAnswering"),Tsr=o(" (Megatron-BERT model)"),Msr=l(),iF=a("li"),k4e=a("strong"),Esr=o("mobilebert"),Csr=o(" \u2014 "),PQ=a("a"),wsr=o("MobileBertForQuestionAnswering"),Asr=o(" (MobileBERT model)"),Lsr=l(),dF=a("li"),S4e=a("strong"),ysr=o("mpnet"),xsr=o(" \u2014 "),BQ=a("a"),$sr=o("MPNetForQuestionAnswering"),ksr=o(" (MPNet model)"),Ssr=l(),cF=a("li"),R4e=a("strong"),Rsr=o("mvp"),Psr=o(" \u2014 "),IQ=a("a"),Bsr=o("MvpForQuestionAnswering"),Isr=o(" (MVP model)"),Nsr=l(),fF=a("li"),P4e=a("strong"),qsr=o("nezha"),jsr=o(" \u2014 "),NQ=a("a"),Dsr=o("NezhaForQuestionAnswering"),Gsr=o(" (Nezha model)"),Osr=l(),mF=a("li"),B4e=a("strong"),Vsr=o("nystromformer"),Xsr=o(" \u2014 "),qQ=a("a"),zsr=o("NystromformerForQuestionAnswering"),Wsr=o(" (Nystr\xF6mformer model)"),Qsr=l(),gF=a("li"),I4e=a("strong"),Hsr=o("qdqbert"),Usr=o(" \u2014 "),jQ=a("a"),Jsr=o("QDQBertForQuestionAnswering"),Ysr=o(" (QDQBert model)"),Ksr=l(),hF=a("li"),N4e=a("strong"),Zsr=o("reformer"),elr=o(" \u2014 "),DQ=a("a"),olr=o("ReformerForQuestionAnswering"),rlr=o(" (Reformer model)"),tlr=l(),pF=a("li"),q4e=a("strong"),alr=o("rembert"),nlr=o(" \u2014 "),GQ=a("a"),slr=o("RemBertForQuestionAnswering"),llr=o(" (RemBERT model)"),ilr=l(),_F=a("li"),j4e=a("strong"),dlr=o("roberta"),clr=o(" \u2014 "),OQ=a("a"),flr=o("RobertaForQuestionAnswering"),mlr=o(" (RoBERTa model)"),glr=l(),uF=a("li"),D4e=a("strong"),hlr=o("roformer"),plr=o(" \u2014 "),VQ=a("a"),_lr=o("RoFormerForQuestionAnswering"),ulr=o(" (RoFormer model)"),blr=l(),bF=a("li"),G4e=a("strong"),vlr=o("splinter"),Flr=o(" \u2014 "),XQ=a("a"),Tlr=o("SplinterForQuestionAnswering"),Mlr=o(" (Splinter model)"),Elr=l(),vF=a("li"),O4e=a("strong"),Clr=o("squeezebert"),wlr=o(" \u2014 "),zQ=a("a"),Alr=o("SqueezeBertForQuestionAnswering"),Llr=o(" (SqueezeBERT model)"),ylr=l(),FF=a("li"),V4e=a("strong"),xlr=o("xlm"),$lr=o(" \u2014 "),WQ=a("a"),klr=o("XLMForQuestionAnsweringSimple"),Slr=o(" (XLM model)"),Rlr=l(),TF=a("li"),X4e=a("strong"),Plr=o("xlm-roberta"),Blr=o(" \u2014 "),QQ=a("a"),Ilr=o("XLMRobertaForQuestionAnswering"),Nlr=o(" (XLM-RoBERTa model)"),qlr=l(),MF=a("li"),z4e=a("strong"),jlr=o("xlm-roberta-xl"),Dlr=o(" \u2014 "),HQ=a("a"),Glr=o("XLMRobertaXLForQuestionAnswering"),Olr=o(" (XLM-RoBERTa-XL model)"),Vlr=l(),EF=a("li"),W4e=a("strong"),Xlr=o("xlnet"),zlr=o(" \u2014 "),UQ=a("a"),Wlr=o("XLNetForQuestionAnsweringSimple"),Qlr=o(" (XLNet model)"),Hlr=l(),CF=a("li"),Q4e=a("strong"),Ulr=o("yoso"),Jlr=o(" \u2014 "),JQ=a("a"),Ylr=o("YosoForQuestionAnswering"),Klr=o(" (YOSO model)"),Zlr=l(),wF=a("p"),eir=o("The model is set in evaluation mode by default using "),H4e=a("code"),oir=o("model.eval()"),rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=a("code"),tir=o("model.train()"),air=l(),F(AF.$$.fragment),iWe=l(),Fd=a("h2"),LF=a("a"),J4e=a("span"),F(Hy.$$.fragment),nir=l(),Y4e=a("span"),sir=o("AutoModelForTableQuestionAnswering"),dWe=l(),Oo=a("div"),F(Uy.$$.fragment),lir=l(),Td=a("p"),iir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YQ=a("a"),dir=o("from_pretrained()"),cir=o(" class method or the "),KQ=a("a"),fir=o("from_config()"),mir=o(` class
method.`),gir=l(),Jy=a("p"),hir=o("This class cannot be instantiated directly using "),K4e=a("code"),pir=o("__init__()"),_ir=o(" (throws an error)."),uir=l(),bt=a("div"),F(Yy.$$.fragment),bir=l(),Z4e=a("p"),vir=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fir=l(),Md=a("p"),Tir=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Mir=o("not"),Eir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),Cir=o("from_pretrained()"),wir=o(" to load the model weights."),Air=l(),F(yF.$$.fragment),Lir=l(),lo=a("div"),F(Ky.$$.fragment),yir=l(),obe=a("p"),xir=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$ir=l(),Wa=a("p"),kir=o("The model class to instantiate is selected based on the "),rbe=a("code"),Sir=o("model_type"),Rir=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),Pir=o("pretrained_model_name_or_path"),Bir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),Iir=o("pretrained_model_name_or_path"),Nir=o(":"),qir=l(),nbe=a("ul"),xF=a("li"),sbe=a("strong"),jir=o("tapas"),Dir=o(" \u2014 "),eH=a("a"),Gir=o("TapasForQuestionAnswering"),Oir=o(" (TAPAS model)"),Vir=l(),$F=a("p"),Xir=o("The model is set in evaluation mode by default using "),lbe=a("code"),zir=o("model.eval()"),Wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=a("code"),Qir=o("model.train()"),Hir=l(),F(kF.$$.fragment),cWe=l(),Ed=a("h2"),SF=a("a"),dbe=a("span"),F(Zy.$$.fragment),Uir=l(),cbe=a("span"),Jir=o("AutoModelForImageClassification"),fWe=l(),Vo=a("div"),F(e9.$$.fragment),Yir=l(),Cd=a("p"),Kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oH=a("a"),Zir=o("from_pretrained()"),edr=o(" class method or the "),rH=a("a"),odr=o("from_config()"),rdr=o(` class
method.`),tdr=l(),o9=a("p"),adr=o("This class cannot be instantiated directly using "),fbe=a("code"),ndr=o("__init__()"),sdr=o(" (throws an error)."),ldr=l(),vt=a("div"),F(r9.$$.fragment),idr=l(),mbe=a("p"),ddr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cdr=l(),wd=a("p"),fdr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),mdr=o("not"),gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),hdr=o("from_pretrained()"),pdr=o(" to load the model weights."),_dr=l(),F(RF.$$.fragment),udr=l(),io=a("div"),F(t9.$$.fragment),bdr=l(),hbe=a("p"),vdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fdr=l(),Qa=a("p"),Tdr=o("The model class to instantiate is selected based on the "),pbe=a("code"),Mdr=o("model_type"),Edr=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),Adr=o("pretrained_model_name_or_path"),Ldr=o(":"),ydr=l(),be=a("ul"),PF=a("li"),bbe=a("strong"),xdr=o("beit"),$dr=o(" \u2014 "),aH=a("a"),kdr=o("BeitForImageClassification"),Sdr=o(" (BEiT model)"),Rdr=l(),BF=a("li"),vbe=a("strong"),Pdr=o("convnext"),Bdr=o(" \u2014 "),nH=a("a"),Idr=o("ConvNextForImageClassification"),Ndr=o(" (ConvNeXT model)"),qdr=l(),IF=a("li"),Fbe=a("strong"),jdr=o("cvt"),Ddr=o(" \u2014 "),sH=a("a"),Gdr=o("CvtForImageClassification"),Odr=o(" (CvT model)"),Vdr=l(),NF=a("li"),Tbe=a("strong"),Xdr=o("data2vec-vision"),zdr=o(" \u2014 "),lH=a("a"),Wdr=o("Data2VecVisionForImageClassification"),Qdr=o(" (Data2VecVision model)"),Hdr=l(),Ys=a("li"),Mbe=a("strong"),Udr=o("deit"),Jdr=o(" \u2014 "),iH=a("a"),Ydr=o("DeiTForImageClassification"),Kdr=o(" or "),dH=a("a"),Zdr=o("DeiTForImageClassificationWithTeacher"),ecr=o(" (DeiT model)"),ocr=l(),qF=a("li"),Ebe=a("strong"),rcr=o("imagegpt"),tcr=o(" \u2014 "),cH=a("a"),acr=o("ImageGPTForImageClassification"),ncr=o(" (ImageGPT model)"),scr=l(),Ks=a("li"),Cbe=a("strong"),lcr=o("levit"),icr=o(" \u2014 "),fH=a("a"),dcr=o("LevitForImageClassification"),ccr=o(" or "),mH=a("a"),fcr=o("LevitForImageClassificationWithTeacher"),mcr=o(" (LeViT model)"),gcr=l(),jF=a("li"),wbe=a("strong"),hcr=o("mobilevit"),pcr=o(" \u2014 "),gH=a("a"),_cr=o("MobileViTForImageClassification"),ucr=o(" (MobileViT model)"),bcr=l(),Ft=a("li"),Abe=a("strong"),vcr=o("perceiver"),Fcr=o(" \u2014 "),hH=a("a"),Tcr=o("PerceiverForImageClassificationLearned"),Mcr=o(" or "),pH=a("a"),Ecr=o("PerceiverForImageClassificationFourier"),Ccr=o(" or "),_H=a("a"),wcr=o("PerceiverForImageClassificationConvProcessing"),Acr=o(" (Perceiver model)"),Lcr=l(),DF=a("li"),Lbe=a("strong"),ycr=o("poolformer"),xcr=o(" \u2014 "),uH=a("a"),$cr=o("PoolFormerForImageClassification"),kcr=o(" (PoolFormer model)"),Scr=l(),GF=a("li"),ybe=a("strong"),Rcr=o("regnet"),Pcr=o(" \u2014 "),bH=a("a"),Bcr=o("RegNetForImageClassification"),Icr=o(" (RegNet model)"),Ncr=l(),OF=a("li"),xbe=a("strong"),qcr=o("resnet"),jcr=o(" \u2014 "),vH=a("a"),Dcr=o("ResNetForImageClassification"),Gcr=o(" (ResNet model)"),Ocr=l(),VF=a("li"),$be=a("strong"),Vcr=o("segformer"),Xcr=o(" \u2014 "),FH=a("a"),zcr=o("SegformerForImageClassification"),Wcr=o(" (SegFormer model)"),Qcr=l(),XF=a("li"),kbe=a("strong"),Hcr=o("swin"),Ucr=o(" \u2014 "),TH=a("a"),Jcr=o("SwinForImageClassification"),Ycr=o(" (Swin Transformer model)"),Kcr=l(),zF=a("li"),Sbe=a("strong"),Zcr=o("swinv2"),efr=o(" \u2014 "),MH=a("a"),ofr=o("Swinv2ForImageClassification"),rfr=o(" (Swin Transformer V2 model)"),tfr=l(),WF=a("li"),Rbe=a("strong"),afr=o("van"),nfr=o(" \u2014 "),EH=a("a"),sfr=o("VanForImageClassification"),lfr=o(" (VAN model)"),ifr=l(),QF=a("li"),Pbe=a("strong"),dfr=o("vit"),cfr=o(" \u2014 "),CH=a("a"),ffr=o("ViTForImageClassification"),mfr=o(" (ViT model)"),gfr=l(),HF=a("p"),hfr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),pfr=o("model.eval()"),_fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),ufr=o("model.train()"),bfr=l(),F(UF.$$.fragment),mWe=l(),Ad=a("h2"),JF=a("a"),Nbe=a("span"),F(a9.$$.fragment),vfr=l(),qbe=a("span"),Ffr=o("AutoModelForVision2Seq"),gWe=l(),Xo=a("div"),F(n9.$$.fragment),Tfr=l(),Ld=a("p"),Mfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wH=a("a"),Efr=o("from_pretrained()"),Cfr=o(" class method or the "),AH=a("a"),wfr=o("from_config()"),Afr=o(` class
method.`),Lfr=l(),s9=a("p"),yfr=o("This class cannot be instantiated directly using "),jbe=a("code"),xfr=o("__init__()"),$fr=o(" (throws an error)."),kfr=l(),Tt=a("div"),F(l9.$$.fragment),Sfr=l(),Dbe=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pfr=l(),yd=a("p"),Bfr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),Ifr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),qfr=o("from_pretrained()"),jfr=o(" to load the model weights."),Dfr=l(),F(YF.$$.fragment),Gfr=l(),co=a("div"),F(i9.$$.fragment),Ofr=l(),Obe=a("p"),Vfr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xfr=l(),Ha=a("p"),zfr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),Wfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),Hfr=o("pretrained_model_name_or_path"),Ufr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Jfr=o("pretrained_model_name_or_path"),Yfr=o(":"),Kfr=l(),Wbe=a("ul"),KF=a("li"),Qbe=a("strong"),Zfr=o("vision-encoder-decoder"),emr=o(" \u2014 "),yH=a("a"),omr=o("VisionEncoderDecoderModel"),rmr=o(" (Vision Encoder decoder model)"),tmr=l(),ZF=a("p"),amr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),nmr=o("model.eval()"),smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),lmr=o("model.train()"),imr=l(),F(eT.$$.fragment),hWe=l(),xd=a("h2"),oT=a("a"),Jbe=a("span"),F(d9.$$.fragment),dmr=l(),Ybe=a("span"),cmr=o("AutoModelForVisualQuestionAnswering"),pWe=l(),zo=a("div"),F(c9.$$.fragment),fmr=l(),$d=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),xH=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),$H=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),f9=a("p"),bmr=o("This class cannot be instantiated directly using "),Kbe=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),Mt=a("div"),F(m9.$$.fragment),Mmr=l(),Zbe=a("p"),Emr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Cmr=l(),kd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),Amr=o("not"),Lmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),ymr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(rT.$$.fragment),kmr=l(),fo=a("div"),F(g9.$$.fragment),Smr=l(),ove=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Pmr=l(),Ua=a("p"),Bmr=o("The model class to instantiate is selected based on the "),rve=a("code"),Imr=o("model_type"),Nmr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),qmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),nve=a("ul"),tT=a("li"),sve=a("strong"),Vmr=o("vilt"),Xmr=o(" \u2014 "),SH=a("a"),zmr=o("ViltForQuestionAnswering"),Wmr=o(" (ViLT model)"),Qmr=l(),aT=a("p"),Hmr=o("The model is set in evaluation mode by default using "),lve=a("code"),Umr=o("model.eval()"),Jmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),Ymr=o("model.train()"),Kmr=l(),F(nT.$$.fragment),_We=l(),Sd=a("h2"),sT=a("a"),dve=a("span"),F(h9.$$.fragment),Zmr=l(),cve=a("span"),egr=o("AutoModelForAudioClassification"),uWe=l(),Wo=a("div"),F(p9.$$.fragment),ogr=l(),Rd=a("p"),rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),RH=a("a"),tgr=o("from_pretrained()"),agr=o(" class method or the "),PH=a("a"),ngr=o("from_config()"),sgr=o(` class
method.`),lgr=l(),_9=a("p"),igr=o("This class cannot be instantiated directly using "),fve=a("code"),dgr=o("__init__()"),cgr=o(" (throws an error)."),fgr=l(),Et=a("div"),F(u9.$$.fragment),mgr=l(),mve=a("p"),ggr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),hgr=l(),Pd=a("p"),pgr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),_gr=o("not"),ugr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),bgr=o("from_pretrained()"),vgr=o(" to load the model weights."),Fgr=l(),F(lT.$$.fragment),Tgr=l(),mo=a("div"),F(b9.$$.fragment),Mgr=l(),hve=a("p"),Egr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cgr=l(),Ja=a("p"),wgr=o("The model class to instantiate is selected based on the "),pve=a("code"),Agr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),ygr=o("pretrained_model_name_or_path"),xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),$gr=o("pretrained_model_name_or_path"),kgr=o(":"),Sgr=l(),Pe=a("ul"),iT=a("li"),bve=a("strong"),Rgr=o("data2vec-audio"),Pgr=o(" \u2014 "),IH=a("a"),Bgr=o("Data2VecAudioForSequenceClassification"),Igr=o(" (Data2VecAudio model)"),Ngr=l(),dT=a("li"),vve=a("strong"),qgr=o("hubert"),jgr=o(" \u2014 "),NH=a("a"),Dgr=o("HubertForSequenceClassification"),Ggr=o(" (Hubert model)"),Ogr=l(),cT=a("li"),Fve=a("strong"),Vgr=o("sew"),Xgr=o(" \u2014 "),qH=a("a"),zgr=o("SEWForSequenceClassification"),Wgr=o(" (SEW model)"),Qgr=l(),fT=a("li"),Tve=a("strong"),Hgr=o("sew-d"),Ugr=o(" \u2014 "),jH=a("a"),Jgr=o("SEWDForSequenceClassification"),Ygr=o(" (SEW-D model)"),Kgr=l(),mT=a("li"),Mve=a("strong"),Zgr=o("unispeech"),ehr=o(" \u2014 "),DH=a("a"),ohr=o("UniSpeechForSequenceClassification"),rhr=o(" (UniSpeech model)"),thr=l(),gT=a("li"),Eve=a("strong"),ahr=o("unispeech-sat"),nhr=o(" \u2014 "),GH=a("a"),shr=o("UniSpeechSatForSequenceClassification"),lhr=o(" (UniSpeechSat model)"),ihr=l(),hT=a("li"),Cve=a("strong"),dhr=o("wav2vec2"),chr=o(" \u2014 "),OH=a("a"),fhr=o("Wav2Vec2ForSequenceClassification"),mhr=o(" (Wav2Vec2 model)"),ghr=l(),pT=a("li"),wve=a("strong"),hhr=o("wav2vec2-conformer"),phr=o(" \u2014 "),VH=a("a"),_hr=o("Wav2Vec2ConformerForSequenceClassification"),uhr=o(" (Wav2Vec2-Conformer model)"),bhr=l(),_T=a("li"),Ave=a("strong"),vhr=o("wavlm"),Fhr=o(" \u2014 "),XH=a("a"),Thr=o("WavLMForSequenceClassification"),Mhr=o(" (WavLM model)"),Ehr=l(),uT=a("p"),Chr=o("The model is set in evaluation mode by default using "),Lve=a("code"),whr=o("model.eval()"),Ahr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=a("code"),Lhr=o("model.train()"),yhr=l(),F(bT.$$.fragment),bWe=l(),Bd=a("h2"),vT=a("a"),xve=a("span"),F(v9.$$.fragment),xhr=l(),$ve=a("span"),$hr=o("AutoModelForAudioFrameClassification"),vWe=l(),Qo=a("div"),F(F9.$$.fragment),khr=l(),Id=a("p"),Shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zH=a("a"),Rhr=o("from_pretrained()"),Phr=o(" class method or the "),WH=a("a"),Bhr=o("from_config()"),Ihr=o(` class
method.`),Nhr=l(),T9=a("p"),qhr=o("This class cannot be instantiated directly using "),kve=a("code"),jhr=o("__init__()"),Dhr=o(" (throws an error)."),Ghr=l(),Ct=a("div"),F(M9.$$.fragment),Ohr=l(),Sve=a("p"),Vhr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Xhr=l(),Nd=a("p"),zhr=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),Whr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Hhr=o("from_pretrained()"),Uhr=o(" to load the model weights."),Jhr=l(),F(FT.$$.fragment),Yhr=l(),go=a("div"),F(E9.$$.fragment),Khr=l(),Pve=a("p"),Zhr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),epr=l(),Ya=a("p"),opr=o("The model class to instantiate is selected based on the "),Bve=a("code"),rpr=o("model_type"),tpr=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),spr=o("pretrained_model_name_or_path"),lpr=o(":"),ipr=l(),rt=a("ul"),TT=a("li"),qve=a("strong"),dpr=o("data2vec-audio"),cpr=o(" \u2014 "),HH=a("a"),fpr=o("Data2VecAudioForAudioFrameClassification"),mpr=o(" (Data2VecAudio model)"),gpr=l(),MT=a("li"),jve=a("strong"),hpr=o("unispeech-sat"),ppr=o(" \u2014 "),UH=a("a"),_pr=o("UniSpeechSatForAudioFrameClassification"),upr=o(" (UniSpeechSat model)"),bpr=l(),ET=a("li"),Dve=a("strong"),vpr=o("wav2vec2"),Fpr=o(" \u2014 "),JH=a("a"),Tpr=o("Wav2Vec2ForAudioFrameClassification"),Mpr=o(" (Wav2Vec2 model)"),Epr=l(),CT=a("li"),Gve=a("strong"),Cpr=o("wav2vec2-conformer"),wpr=o(" \u2014 "),YH=a("a"),Apr=o("Wav2Vec2ConformerForAudioFrameClassification"),Lpr=o(" (Wav2Vec2-Conformer model)"),ypr=l(),wT=a("li"),Ove=a("strong"),xpr=o("wavlm"),$pr=o(" \u2014 "),KH=a("a"),kpr=o("WavLMForAudioFrameClassification"),Spr=o(" (WavLM model)"),Rpr=l(),AT=a("p"),Ppr=o("The model is set in evaluation mode by default using "),Vve=a("code"),Bpr=o("model.eval()"),Ipr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=a("code"),Npr=o("model.train()"),qpr=l(),F(LT.$$.fragment),FWe=l(),qd=a("h2"),yT=a("a"),zve=a("span"),F(C9.$$.fragment),jpr=l(),Wve=a("span"),Dpr=o("AutoModelForCTC"),TWe=l(),Ho=a("div"),F(w9.$$.fragment),Gpr=l(),jd=a("p"),Opr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZH=a("a"),Vpr=o("from_pretrained()"),Xpr=o(" class method or the "),eU=a("a"),zpr=o("from_config()"),Wpr=o(` class
method.`),Qpr=l(),A9=a("p"),Hpr=o("This class cannot be instantiated directly using "),Qve=a("code"),Upr=o("__init__()"),Jpr=o(" (throws an error)."),Ypr=l(),wt=a("div"),F(L9.$$.fragment),Kpr=l(),Hve=a("p"),Zpr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),e_r=l(),Dd=a("p"),o_r=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),r_r=o("not"),t_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),a_r=o("from_pretrained()"),n_r=o(" to load the model weights."),s_r=l(),F(xT.$$.fragment),l_r=l(),ho=a("div"),F(y9.$$.fragment),i_r=l(),Jve=a("p"),d_r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),c_r=l(),Ka=a("p"),f_r=o("The model class to instantiate is selected based on the "),Yve=a("code"),m_r=o("model_type"),g_r=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),h_r=o("pretrained_model_name_or_path"),p_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),__r=o("pretrained_model_name_or_path"),u_r=o(":"),b_r=l(),Le=a("ul"),$T=a("li"),e0e=a("strong"),v_r=o("data2vec-audio"),F_r=o(" \u2014 "),rU=a("a"),T_r=o("Data2VecAudioForCTC"),M_r=o(" (Data2VecAudio model)"),E_r=l(),kT=a("li"),o0e=a("strong"),C_r=o("hubert"),w_r=o(" \u2014 "),tU=a("a"),A_r=o("HubertForCTC"),L_r=o(" (Hubert model)"),y_r=l(),ST=a("li"),r0e=a("strong"),x_r=o("mctct"),$_r=o(" \u2014 "),aU=a("a"),k_r=o("MCTCTForCTC"),S_r=o(" (M-CTC-T model)"),R_r=l(),RT=a("li"),t0e=a("strong"),P_r=o("sew"),B_r=o(" \u2014 "),nU=a("a"),I_r=o("SEWForCTC"),N_r=o(" (SEW model)"),q_r=l(),PT=a("li"),a0e=a("strong"),j_r=o("sew-d"),D_r=o(" \u2014 "),sU=a("a"),G_r=o("SEWDForCTC"),O_r=o(" (SEW-D model)"),V_r=l(),BT=a("li"),n0e=a("strong"),X_r=o("unispeech"),z_r=o(" \u2014 "),lU=a("a"),W_r=o("UniSpeechForCTC"),Q_r=o(" (UniSpeech model)"),H_r=l(),IT=a("li"),s0e=a("strong"),U_r=o("unispeech-sat"),J_r=o(" \u2014 "),iU=a("a"),Y_r=o("UniSpeechSatForCTC"),K_r=o(" (UniSpeechSat model)"),Z_r=l(),NT=a("li"),l0e=a("strong"),eur=o("wav2vec2"),our=o(" \u2014 "),dU=a("a"),rur=o("Wav2Vec2ForCTC"),tur=o(" (Wav2Vec2 model)"),aur=l(),qT=a("li"),i0e=a("strong"),nur=o("wav2vec2-conformer"),sur=o(" \u2014 "),cU=a("a"),lur=o("Wav2Vec2ConformerForCTC"),iur=o(" (Wav2Vec2-Conformer model)"),dur=l(),jT=a("li"),d0e=a("strong"),cur=o("wavlm"),fur=o(" \u2014 "),fU=a("a"),mur=o("WavLMForCTC"),gur=o(" (WavLM model)"),hur=l(),DT=a("p"),pur=o("The model is set in evaluation mode by default using "),c0e=a("code"),_ur=o("model.eval()"),uur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f0e=a("code"),bur=o("model.train()"),vur=l(),F(GT.$$.fragment),MWe=l(),Gd=a("h2"),OT=a("a"),m0e=a("span"),F(x9.$$.fragment),Fur=l(),g0e=a("span"),Tur=o("AutoModelForSpeechSeq2Seq"),EWe=l(),Uo=a("div"),F($9.$$.fragment),Mur=l(),Od=a("p"),Eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mU=a("a"),Cur=o("from_pretrained()"),wur=o(" class method or the "),gU=a("a"),Aur=o("from_config()"),Lur=o(` class
method.`),yur=l(),k9=a("p"),xur=o("This class cannot be instantiated directly using "),h0e=a("code"),$ur=o("__init__()"),kur=o(" (throws an error)."),Sur=l(),At=a("div"),F(S9.$$.fragment),Rur=l(),p0e=a("p"),Pur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bur=l(),Vd=a("p"),Iur=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),Nur=o("not"),qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),jur=o("from_pretrained()"),Dur=o(" to load the model weights."),Gur=l(),F(VT.$$.fragment),Our=l(),po=a("div"),F(R9.$$.fragment),Vur=l(),u0e=a("p"),Xur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zur=l(),Za=a("p"),Wur=o("The model class to instantiate is selected based on the "),b0e=a("code"),Qur=o("model_type"),Hur=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),Yur=o("pretrained_model_name_or_path"),Kur=o(":"),Zur=l(),P9=a("ul"),XT=a("li"),T0e=a("strong"),e2r=o("speech-encoder-decoder"),o2r=o(" \u2014 "),pU=a("a"),r2r=o("SpeechEncoderDecoderModel"),t2r=o(" (Speech Encoder decoder model)"),a2r=l(),zT=a("li"),M0e=a("strong"),n2r=o("speech_to_text"),s2r=o(" \u2014 "),_U=a("a"),l2r=o("Speech2TextForConditionalGeneration"),i2r=o(" (Speech2Text model)"),d2r=l(),WT=a("p"),c2r=o("The model is set in evaluation mode by default using "),E0e=a("code"),f2r=o("model.eval()"),m2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C0e=a("code"),g2r=o("model.train()"),h2r=l(),F(QT.$$.fragment),CWe=l(),Xd=a("h2"),HT=a("a"),w0e=a("span"),F(B9.$$.fragment),p2r=l(),A0e=a("span"),_2r=o("AutoModelForAudioXVector"),wWe=l(),Jo=a("div"),F(I9.$$.fragment),u2r=l(),zd=a("p"),b2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uU=a("a"),v2r=o("from_pretrained()"),F2r=o(" class method or the "),bU=a("a"),T2r=o("from_config()"),M2r=o(` class
method.`),E2r=l(),N9=a("p"),C2r=o("This class cannot be instantiated directly using "),L0e=a("code"),w2r=o("__init__()"),A2r=o(" (throws an error)."),L2r=l(),Lt=a("div"),F(q9.$$.fragment),y2r=l(),y0e=a("p"),x2r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$2r=l(),Wd=a("p"),k2r=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),S2r=o("not"),R2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),P2r=o("from_pretrained()"),B2r=o(" to load the model weights."),I2r=l(),F(UT.$$.fragment),N2r=l(),_o=a("div"),F(j9.$$.fragment),q2r=l(),$0e=a("p"),j2r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),D2r=l(),en=a("p"),G2r=o("The model class to instantiate is selected based on the "),k0e=a("code"),O2r=o("model_type"),V2r=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),X2r=o("pretrained_model_name_or_path"),z2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),W2r=o("pretrained_model_name_or_path"),Q2r=o(":"),H2r=l(),tt=a("ul"),JT=a("li"),P0e=a("strong"),U2r=o("data2vec-audio"),J2r=o(" \u2014 "),FU=a("a"),Y2r=o("Data2VecAudioForXVector"),K2r=o(" (Data2VecAudio model)"),Z2r=l(),YT=a("li"),B0e=a("strong"),e1r=o("unispeech-sat"),o1r=o(" \u2014 "),TU=a("a"),r1r=o("UniSpeechSatForXVector"),t1r=o(" (UniSpeechSat model)"),a1r=l(),KT=a("li"),I0e=a("strong"),n1r=o("wav2vec2"),s1r=o(" \u2014 "),MU=a("a"),l1r=o("Wav2Vec2ForXVector"),i1r=o(" (Wav2Vec2 model)"),d1r=l(),ZT=a("li"),N0e=a("strong"),c1r=o("wav2vec2-conformer"),f1r=o(" \u2014 "),EU=a("a"),m1r=o("Wav2Vec2ConformerForXVector"),g1r=o(" (Wav2Vec2-Conformer model)"),h1r=l(),e8=a("li"),q0e=a("strong"),p1r=o("wavlm"),_1r=o(" \u2014 "),CU=a("a"),u1r=o("WavLMForXVector"),b1r=o(" (WavLM model)"),v1r=l(),o8=a("p"),F1r=o("The model is set in evaluation mode by default using "),j0e=a("code"),T1r=o("model.eval()"),M1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D0e=a("code"),E1r=o("model.train()"),C1r=l(),F(r8.$$.fragment),AWe=l(),Qd=a("h2"),t8=a("a"),G0e=a("span"),F(D9.$$.fragment),w1r=l(),O0e=a("span"),A1r=o("AutoModelForMaskedImageModeling"),LWe=l(),Yo=a("div"),F(G9.$$.fragment),L1r=l(),Hd=a("p"),y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wU=a("a"),x1r=o("from_pretrained()"),$1r=o(" class method or the "),AU=a("a"),k1r=o("from_config()"),S1r=o(` class
method.`),R1r=l(),O9=a("p"),P1r=o("This class cannot be instantiated directly using "),V0e=a("code"),B1r=o("__init__()"),I1r=o(" (throws an error)."),N1r=l(),yt=a("div"),F(V9.$$.fragment),q1r=l(),X0e=a("p"),j1r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),D1r=l(),Ud=a("p"),G1r=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),O1r=o("not"),V1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),X1r=o("from_pretrained()"),z1r=o(" to load the model weights."),W1r=l(),F(a8.$$.fragment),Q1r=l(),uo=a("div"),F(X9.$$.fragment),H1r=l(),W0e=a("p"),U1r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),J1r=l(),on=a("p"),Y1r=o("The model class to instantiate is selected based on the "),Q0e=a("code"),K1r=o("model_type"),Z1r=o(` property of the config object (either
passed as an argument or loaded from `),H0e=a("code"),e4r=o("pretrained_model_name_or_path"),o4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),r4r=o("pretrained_model_name_or_path"),t4r=o(":"),a4r=l(),rn=a("ul"),n8=a("li"),J0e=a("strong"),n4r=o("deit"),s4r=o(" \u2014 "),yU=a("a"),l4r=o("DeiTForMaskedImageModeling"),i4r=o(" (DeiT model)"),d4r=l(),s8=a("li"),Y0e=a("strong"),c4r=o("swin"),f4r=o(" \u2014 "),xU=a("a"),m4r=o("SwinForMaskedImageModeling"),g4r=o(" (Swin Transformer model)"),h4r=l(),l8=a("li"),K0e=a("strong"),p4r=o("swinv2"),_4r=o(" \u2014 "),$U=a("a"),u4r=o("Swinv2ForMaskedImageModeling"),b4r=o(" (Swin Transformer V2 model)"),v4r=l(),i8=a("li"),Z0e=a("strong"),F4r=o("vit"),T4r=o(" \u2014 "),kU=a("a"),M4r=o("ViTForMaskedImageModeling"),E4r=o(" (ViT model)"),C4r=l(),d8=a("p"),w4r=o("The model is set in evaluation mode by default using "),eFe=a("code"),A4r=o("model.eval()"),L4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=a("code"),y4r=o("model.train()"),x4r=l(),F(c8.$$.fragment),yWe=l(),Jd=a("h2"),f8=a("a"),rFe=a("span"),F(z9.$$.fragment),$4r=l(),tFe=a("span"),k4r=o("AutoModelForObjectDetection"),xWe=l(),Ko=a("div"),F(W9.$$.fragment),S4r=l(),Yd=a("p"),R4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SU=a("a"),P4r=o("from_pretrained()"),B4r=o(" class method or the "),RU=a("a"),I4r=o("from_config()"),N4r=o(` class
method.`),q4r=l(),Q9=a("p"),j4r=o("This class cannot be instantiated directly using "),aFe=a("code"),D4r=o("__init__()"),G4r=o(" (throws an error)."),O4r=l(),xt=a("div"),F(H9.$$.fragment),V4r=l(),nFe=a("p"),X4r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),z4r=l(),Kd=a("p"),W4r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),Q4r=o("not"),H4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),U4r=o("from_pretrained()"),J4r=o(" to load the model weights."),Y4r=l(),F(m8.$$.fragment),K4r=l(),bo=a("div"),F(U9.$$.fragment),Z4r=l(),lFe=a("p"),ebr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),obr=l(),tn=a("p"),rbr=o("The model class to instantiate is selected based on the "),iFe=a("code"),tbr=o("model_type"),abr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),lbr=o("pretrained_model_name_or_path"),ibr=o(":"),dbr=l(),J9=a("ul"),g8=a("li"),fFe=a("strong"),cbr=o("detr"),fbr=o(" \u2014 "),BU=a("a"),mbr=o("DetrForObjectDetection"),gbr=o(" (DETR model)"),hbr=l(),h8=a("li"),mFe=a("strong"),pbr=o("yolos"),_br=o(" \u2014 "),IU=a("a"),ubr=o("YolosForObjectDetection"),bbr=o(" (YOLOS model)"),vbr=l(),p8=a("p"),Fbr=o("The model is set in evaluation mode by default using "),gFe=a("code"),Tbr=o("model.eval()"),Mbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=a("code"),Ebr=o("model.train()"),Cbr=l(),F(_8.$$.fragment),$We=l(),Zd=a("h2"),u8=a("a"),pFe=a("span"),F(Y9.$$.fragment),wbr=l(),_Fe=a("span"),Abr=o("AutoModelForImageSegmentation"),kWe=l(),Zo=a("div"),F(K9.$$.fragment),Lbr=l(),ec=a("p"),ybr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NU=a("a"),xbr=o("from_pretrained()"),$br=o(" class method or the "),qU=a("a"),kbr=o("from_config()"),Sbr=o(` class
method.`),Rbr=l(),Z9=a("p"),Pbr=o("This class cannot be instantiated directly using "),uFe=a("code"),Bbr=o("__init__()"),Ibr=o(" (throws an error)."),Nbr=l(),$t=a("div"),F(ex.$$.fragment),qbr=l(),bFe=a("p"),jbr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Dbr=l(),oc=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),Obr=o("not"),Vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),Xbr=o("from_pretrained()"),zbr=o(" to load the model weights."),Wbr=l(),F(b8.$$.fragment),Qbr=l(),vo=a("div"),F(ox.$$.fragment),Hbr=l(),FFe=a("p"),Ubr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jbr=l(),an=a("p"),Ybr=o("The model class to instantiate is selected based on the "),TFe=a("code"),Kbr=o("model_type"),Zbr=o(` property of the config object (either
passed as an argument or loaded from `),MFe=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(":"),avr=l(),CFe=a("ul"),v8=a("li"),wFe=a("strong"),nvr=o("detr"),svr=o(" \u2014 "),DU=a("a"),lvr=o("DetrForSegmentation"),ivr=o(" (DETR model)"),dvr=l(),F8=a("p"),cvr=o("The model is set in evaluation mode by default using "),AFe=a("code"),fvr=o("model.eval()"),mvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LFe=a("code"),gvr=o("model.train()"),hvr=l(),F(T8.$$.fragment),SWe=l(),rc=a("h2"),M8=a("a"),yFe=a("span"),F(rx.$$.fragment),pvr=l(),xFe=a("span"),_vr=o("AutoModelForSemanticSegmentation"),RWe=l(),er=a("div"),F(tx.$$.fragment),uvr=l(),tc=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GU=a("a"),vvr=o("from_pretrained()"),Fvr=o(" class method or the "),OU=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),ax=a("p"),Cvr=o("This class cannot be instantiated directly using "),$Fe=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),Lvr=l(),kt=a("div"),F(nx.$$.fragment),yvr=l(),kFe=a("p"),xvr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$vr=l(),ac=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),Pvr=o("from_pretrained()"),Bvr=o(" to load the model weights."),Ivr=l(),F(E8.$$.fragment),Nvr=l(),Fo=a("div"),F(sx.$$.fragment),qvr=l(),RFe=a("p"),jvr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dvr=l(),nn=a("p"),Gvr=o("The model class to instantiate is selected based on the "),PFe=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),Wvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Hvr=l(),at=a("ul"),C8=a("li"),NFe=a("strong"),Uvr=o("beit"),Jvr=o(" \u2014 "),XU=a("a"),Yvr=o("BeitForSemanticSegmentation"),Kvr=o(" (BEiT model)"),Zvr=l(),w8=a("li"),qFe=a("strong"),e0r=o("data2vec-vision"),o0r=o(" \u2014 "),zU=a("a"),r0r=o("Data2VecVisionForSemanticSegmentation"),t0r=o(" (Data2VecVision model)"),a0r=l(),A8=a("li"),jFe=a("strong"),n0r=o("dpt"),s0r=o(" \u2014 "),WU=a("a"),l0r=o("DPTForSemanticSegmentation"),i0r=o(" (DPT model)"),d0r=l(),L8=a("li"),DFe=a("strong"),c0r=o("mobilevit"),f0r=o(" \u2014 "),QU=a("a"),m0r=o("MobileViTForSemanticSegmentation"),g0r=o(" (MobileViT model)"),h0r=l(),y8=a("li"),GFe=a("strong"),p0r=o("segformer"),_0r=o(" \u2014 "),HU=a("a"),u0r=o("SegformerForSemanticSegmentation"),b0r=o(" (SegFormer model)"),v0r=l(),x8=a("p"),F0r=o("The model is set in evaluation mode by default using "),OFe=a("code"),T0r=o("model.eval()"),M0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=a("code"),E0r=o("model.train()"),C0r=l(),F($8.$$.fragment),PWe=l(),nc=a("h2"),k8=a("a"),XFe=a("span"),F(lx.$$.fragment),w0r=l(),zFe=a("span"),A0r=o("AutoModelForInstanceSegmentation"),BWe=l(),or=a("div"),F(ix.$$.fragment),L0r=l(),sc=a("p"),y0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UU=a("a"),x0r=o("from_pretrained()"),$0r=o(" class method or the "),JU=a("a"),k0r=o("from_config()"),S0r=o(` class
method.`),R0r=l(),dx=a("p"),P0r=o("This class cannot be instantiated directly using "),WFe=a("code"),B0r=o("__init__()"),I0r=o(" (throws an error)."),N0r=l(),St=a("div"),F(cx.$$.fragment),q0r=l(),QFe=a("p"),j0r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),D0r=l(),lc=a("p"),G0r=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),O0r=o("not"),V0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),X0r=o("from_pretrained()"),z0r=o(" to load the model weights."),W0r=l(),F(S8.$$.fragment),Q0r=l(),To=a("div"),F(fx.$$.fragment),H0r=l(),UFe=a("p"),U0r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),J0r=l(),sn=a("p"),Y0r=o("The model class to instantiate is selected based on the "),JFe=a("code"),K0r=o("model_type"),Z0r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),ZFe=a("ul"),R8=a("li"),eTe=a("strong"),nFr=o("maskformer"),sFr=o(" \u2014 "),KU=a("a"),lFr=o("MaskFormerForInstanceSegmentation"),iFr=o(" (MaskFormer model)"),dFr=l(),P8=a("p"),cFr=o("The model is set in evaluation mode by default using "),oTe=a("code"),fFr=o("model.eval()"),mFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=a("code"),gFr=o("model.train()"),hFr=l(),F(B8.$$.fragment),IWe=l(),ic=a("h2"),I8=a("a"),tTe=a("span"),F(mx.$$.fragment),pFr=l(),aTe=a("span"),_Fr=o("TFAutoModel"),NWe=l(),rr=a("div"),F(gx.$$.fragment),uFr=l(),dc=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),eJ=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),hx=a("p"),CFr=o("This class cannot be instantiated directly using "),nTe=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),LFr=l(),Rt=a("div"),F(px.$$.fragment),yFr=l(),sTe=a("p"),xFr=o("Instantiates one of the base model classes of the library from a configuration."),$Fr=l(),cc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),PFr=o("from_pretrained()"),BFr=o(" to load the model weights."),IFr=l(),F(N8.$$.fragment),NFr=l(),$r=a("div"),F(_x.$$.fragment),qFr=l(),iTe=a("p"),jFr=o("Instantiate one of the base model classes of the library from a pretrained model."),DFr=l(),ln=a("p"),GFr=o("The model class to instantiate is selected based on the "),dTe=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),WFr=o("pretrained_model_name_or_path"),QFr=o(":"),HFr=l(),I=a("ul"),q8=a("li"),mTe=a("strong"),UFr=o("albert"),JFr=o(" \u2014 "),rJ=a("a"),YFr=o("TFAlbertModel"),KFr=o(" (ALBERT model)"),ZFr=l(),j8=a("li"),gTe=a("strong"),eTr=o("bart"),oTr=o(" \u2014 "),tJ=a("a"),rTr=o("TFBartModel"),tTr=o(" (BART model)"),aTr=l(),D8=a("li"),hTe=a("strong"),nTr=o("bert"),sTr=o(" \u2014 "),aJ=a("a"),lTr=o("TFBertModel"),iTr=o(" (BERT model)"),dTr=l(),G8=a("li"),pTe=a("strong"),cTr=o("blenderbot"),fTr=o(" \u2014 "),nJ=a("a"),mTr=o("TFBlenderbotModel"),gTr=o(" (Blenderbot model)"),hTr=l(),O8=a("li"),_Te=a("strong"),pTr=o("blenderbot-small"),_Tr=o(" \u2014 "),sJ=a("a"),uTr=o("TFBlenderbotSmallModel"),bTr=o(" (BlenderbotSmall model)"),vTr=l(),V8=a("li"),uTe=a("strong"),FTr=o("camembert"),TTr=o(" \u2014 "),lJ=a("a"),MTr=o("TFCamembertModel"),ETr=o(" (CamemBERT model)"),CTr=l(),X8=a("li"),bTe=a("strong"),wTr=o("clip"),ATr=o(" \u2014 "),iJ=a("a"),LTr=o("TFCLIPModel"),yTr=o(" (CLIP model)"),xTr=l(),z8=a("li"),vTe=a("strong"),$Tr=o("convbert"),kTr=o(" \u2014 "),dJ=a("a"),STr=o("TFConvBertModel"),RTr=o(" (ConvBERT model)"),PTr=l(),W8=a("li"),FTe=a("strong"),BTr=o("convnext"),ITr=o(" \u2014 "),cJ=a("a"),NTr=o("TFConvNextModel"),qTr=o(" (ConvNeXT model)"),jTr=l(),Q8=a("li"),TTe=a("strong"),DTr=o("ctrl"),GTr=o(" \u2014 "),fJ=a("a"),OTr=o("TFCTRLModel"),VTr=o(" (CTRL model)"),XTr=l(),H8=a("li"),MTe=a("strong"),zTr=o("data2vec-vision"),WTr=o(" \u2014 "),mJ=a("a"),QTr=o("TFData2VecVisionModel"),HTr=o(" (Data2VecVision model)"),UTr=l(),U8=a("li"),ETe=a("strong"),JTr=o("deberta"),YTr=o(" \u2014 "),gJ=a("a"),KTr=o("TFDebertaModel"),ZTr=o(" (DeBERTa model)"),e8r=l(),J8=a("li"),CTe=a("strong"),o8r=o("deberta-v2"),r8r=o(" \u2014 "),hJ=a("a"),t8r=o("TFDebertaV2Model"),a8r=o(" (DeBERTa-v2 model)"),n8r=l(),Y8=a("li"),wTe=a("strong"),s8r=o("deit"),l8r=o(" \u2014 "),pJ=a("a"),i8r=o("TFDeiTModel"),d8r=o(" (DeiT model)"),c8r=l(),K8=a("li"),ATe=a("strong"),f8r=o("distilbert"),m8r=o(" \u2014 "),_J=a("a"),g8r=o("TFDistilBertModel"),h8r=o(" (DistilBERT model)"),p8r=l(),Z8=a("li"),LTe=a("strong"),_8r=o("dpr"),u8r=o(" \u2014 "),uJ=a("a"),b8r=o("TFDPRQuestionEncoder"),v8r=o(" (DPR model)"),F8r=l(),eM=a("li"),yTe=a("strong"),T8r=o("electra"),M8r=o(" \u2014 "),bJ=a("a"),E8r=o("TFElectraModel"),C8r=o(" (ELECTRA model)"),w8r=l(),oM=a("li"),xTe=a("strong"),A8r=o("flaubert"),L8r=o(" \u2014 "),vJ=a("a"),y8r=o("TFFlaubertModel"),x8r=o(" (FlauBERT model)"),$8r=l(),Zs=a("li"),$Te=a("strong"),k8r=o("funnel"),S8r=o(" \u2014 "),FJ=a("a"),R8r=o("TFFunnelModel"),P8r=o(" or "),TJ=a("a"),B8r=o("TFFunnelBaseModel"),I8r=o(" (Funnel Transformer model)"),N8r=l(),rM=a("li"),kTe=a("strong"),q8r=o("gpt2"),j8r=o(" \u2014 "),MJ=a("a"),D8r=o("TFGPT2Model"),G8r=o(" (OpenAI GPT-2 model)"),O8r=l(),tM=a("li"),STe=a("strong"),V8r=o("gptj"),X8r=o(" \u2014 "),EJ=a("a"),z8r=o("TFGPTJModel"),W8r=o(" (GPT-J model)"),Q8r=l(),aM=a("li"),RTe=a("strong"),H8r=o("hubert"),U8r=o(" \u2014 "),CJ=a("a"),J8r=o("TFHubertModel"),Y8r=o(" (Hubert model)"),K8r=l(),nM=a("li"),PTe=a("strong"),Z8r=o("layoutlm"),eMr=o(" \u2014 "),wJ=a("a"),oMr=o("TFLayoutLMModel"),rMr=o(" (LayoutLM model)"),tMr=l(),sM=a("li"),BTe=a("strong"),aMr=o("led"),nMr=o(" \u2014 "),AJ=a("a"),sMr=o("TFLEDModel"),lMr=o(" (LED model)"),iMr=l(),lM=a("li"),ITe=a("strong"),dMr=o("longformer"),cMr=o(" \u2014 "),LJ=a("a"),fMr=o("TFLongformerModel"),mMr=o(" (Longformer model)"),gMr=l(),iM=a("li"),NTe=a("strong"),hMr=o("lxmert"),pMr=o(" \u2014 "),yJ=a("a"),_Mr=o("TFLxmertModel"),uMr=o(" (LXMERT model)"),bMr=l(),dM=a("li"),qTe=a("strong"),vMr=o("marian"),FMr=o(" \u2014 "),xJ=a("a"),TMr=o("TFMarianModel"),MMr=o(" (Marian model)"),EMr=l(),cM=a("li"),jTe=a("strong"),CMr=o("mbart"),wMr=o(" \u2014 "),$J=a("a"),AMr=o("TFMBartModel"),LMr=o(" (mBART model)"),yMr=l(),fM=a("li"),DTe=a("strong"),xMr=o("mobilebert"),$Mr=o(" \u2014 "),kJ=a("a"),kMr=o("TFMobileBertModel"),SMr=o(" (MobileBERT model)"),RMr=l(),mM=a("li"),GTe=a("strong"),PMr=o("mpnet"),BMr=o(" \u2014 "),SJ=a("a"),IMr=o("TFMPNetModel"),NMr=o(" (MPNet model)"),qMr=l(),gM=a("li"),OTe=a("strong"),jMr=o("mt5"),DMr=o(" \u2014 "),RJ=a("a"),GMr=o("TFMT5Model"),OMr=o(" (MT5 model)"),VMr=l(),hM=a("li"),VTe=a("strong"),XMr=o("openai-gpt"),zMr=o(" \u2014 "),PJ=a("a"),WMr=o("TFOpenAIGPTModel"),QMr=o(" (OpenAI GPT model)"),HMr=l(),pM=a("li"),XTe=a("strong"),UMr=o("opt"),JMr=o(" \u2014 "),BJ=a("a"),YMr=o("TFOPTModel"),KMr=o(" (OPT model)"),ZMr=l(),_M=a("li"),zTe=a("strong"),eEr=o("pegasus"),oEr=o(" \u2014 "),IJ=a("a"),rEr=o("TFPegasusModel"),tEr=o(" (Pegasus model)"),aEr=l(),uM=a("li"),WTe=a("strong"),nEr=o("regnet"),sEr=o(" \u2014 "),NJ=a("a"),lEr=o("TFRegNetModel"),iEr=o(" (RegNet model)"),dEr=l(),bM=a("li"),QTe=a("strong"),cEr=o("rembert"),fEr=o(" \u2014 "),qJ=a("a"),mEr=o("TFRemBertModel"),gEr=o(" (RemBERT model)"),hEr=l(),vM=a("li"),HTe=a("strong"),pEr=o("resnet"),_Er=o(" \u2014 "),jJ=a("a"),uEr=o("TFResNetModel"),bEr=o(" (ResNet model)"),vEr=l(),FM=a("li"),UTe=a("strong"),FEr=o("roberta"),TEr=o(" \u2014 "),DJ=a("a"),MEr=o("TFRobertaModel"),EEr=o(" (RoBERTa model)"),CEr=l(),TM=a("li"),JTe=a("strong"),wEr=o("roformer"),AEr=o(" \u2014 "),GJ=a("a"),LEr=o("TFRoFormerModel"),yEr=o(" (RoFormer model)"),xEr=l(),MM=a("li"),YTe=a("strong"),$Er=o("segformer"),kEr=o(" \u2014 "),OJ=a("a"),SEr=o("TFSegformerModel"),REr=o(" (SegFormer model)"),PEr=l(),EM=a("li"),KTe=a("strong"),BEr=o("speech_to_text"),IEr=o(" \u2014 "),VJ=a("a"),NEr=o("TFSpeech2TextModel"),qEr=o(" (Speech2Text model)"),jEr=l(),CM=a("li"),ZTe=a("strong"),DEr=o("swin"),GEr=o(" \u2014 "),XJ=a("a"),OEr=o("TFSwinModel"),VEr=o(" (Swin Transformer model)"),XEr=l(),wM=a("li"),e8e=a("strong"),zEr=o("t5"),WEr=o(" \u2014 "),zJ=a("a"),QEr=o("TFT5Model"),HEr=o(" (T5 model)"),UEr=l(),AM=a("li"),o8e=a("strong"),JEr=o("tapas"),YEr=o(" \u2014 "),WJ=a("a"),KEr=o("TFTapasModel"),ZEr=o(" (TAPAS model)"),eCr=l(),LM=a("li"),r8e=a("strong"),oCr=o("transfo-xl"),rCr=o(" \u2014 "),QJ=a("a"),tCr=o("TFTransfoXLModel"),aCr=o(" (Transformer-XL model)"),nCr=l(),yM=a("li"),t8e=a("strong"),sCr=o("vit"),lCr=o(" \u2014 "),HJ=a("a"),iCr=o("TFViTModel"),dCr=o(" (ViT model)"),cCr=l(),xM=a("li"),a8e=a("strong"),fCr=o("vit_mae"),mCr=o(" \u2014 "),UJ=a("a"),gCr=o("TFViTMAEModel"),hCr=o(" (ViTMAE model)"),pCr=l(),$M=a("li"),n8e=a("strong"),_Cr=o("wav2vec2"),uCr=o(" \u2014 "),JJ=a("a"),bCr=o("TFWav2Vec2Model"),vCr=o(" (Wav2Vec2 model)"),FCr=l(),kM=a("li"),s8e=a("strong"),TCr=o("xlm"),MCr=o(" \u2014 "),YJ=a("a"),ECr=o("TFXLMModel"),CCr=o(" (XLM model)"),wCr=l(),SM=a("li"),l8e=a("strong"),ACr=o("xlm-roberta"),LCr=o(" \u2014 "),KJ=a("a"),yCr=o("TFXLMRobertaModel"),xCr=o(" (XLM-RoBERTa model)"),$Cr=l(),RM=a("li"),i8e=a("strong"),kCr=o("xlnet"),SCr=o(" \u2014 "),ZJ=a("a"),RCr=o("TFXLNetModel"),PCr=o(" (XLNet model)"),BCr=l(),F(PM.$$.fragment),qWe=l(),fc=a("h2"),BM=a("a"),d8e=a("span"),F(ux.$$.fragment),ICr=l(),c8e=a("span"),NCr=o("TFAutoModelForPreTraining"),jWe=l(),tr=a("div"),F(bx.$$.fragment),qCr=l(),mc=a("p"),jCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eY=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),oY=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),vx=a("p"),zCr=o("This class cannot be instantiated directly using "),f8e=a("code"),WCr=o("__init__()"),QCr=o(" (throws an error)."),HCr=l(),Pt=a("div"),F(Fx.$$.fragment),UCr=l(),m8e=a("p"),JCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YCr=l(),gc=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),g8e=a("strong"),ZCr=o("not"),e5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),o5r=o("from_pretrained()"),r5r=o(" to load the model weights."),t5r=l(),F(IM.$$.fragment),a5r=l(),kr=a("div"),F(Tx.$$.fragment),n5r=l(),h8e=a("p"),s5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l5r=l(),dn=a("p"),i5r=o("The model class to instantiate is selected based on the "),p8e=a("code"),d5r=o("model_type"),c5r=o(` property of the config object (either
passed as an argument or loaded from `),_8e=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u8e=a("code"),g5r=o("pretrained_model_name_or_path"),h5r=o(":"),p5r=l(),se=a("ul"),NM=a("li"),b8e=a("strong"),_5r=o("albert"),u5r=o(" \u2014 "),tY=a("a"),b5r=o("TFAlbertForPreTraining"),v5r=o(" (ALBERT model)"),F5r=l(),qM=a("li"),v8e=a("strong"),T5r=o("bart"),M5r=o(" \u2014 "),aY=a("a"),E5r=o("TFBartForConditionalGeneration"),C5r=o(" (BART model)"),w5r=l(),jM=a("li"),F8e=a("strong"),A5r=o("bert"),L5r=o(" \u2014 "),nY=a("a"),y5r=o("TFBertForPreTraining"),x5r=o(" (BERT model)"),$5r=l(),DM=a("li"),T8e=a("strong"),k5r=o("camembert"),S5r=o(" \u2014 "),sY=a("a"),R5r=o("TFCamembertForMaskedLM"),P5r=o(" (CamemBERT model)"),B5r=l(),GM=a("li"),M8e=a("strong"),I5r=o("ctrl"),N5r=o(" \u2014 "),lY=a("a"),q5r=o("TFCTRLLMHeadModel"),j5r=o(" (CTRL model)"),D5r=l(),OM=a("li"),E8e=a("strong"),G5r=o("distilbert"),O5r=o(" \u2014 "),iY=a("a"),V5r=o("TFDistilBertForMaskedLM"),X5r=o(" (DistilBERT model)"),z5r=l(),VM=a("li"),C8e=a("strong"),W5r=o("electra"),Q5r=o(" \u2014 "),dY=a("a"),H5r=o("TFElectraForPreTraining"),U5r=o(" (ELECTRA model)"),J5r=l(),XM=a("li"),w8e=a("strong"),Y5r=o("flaubert"),K5r=o(" \u2014 "),cY=a("a"),Z5r=o("TFFlaubertWithLMHeadModel"),e3r=o(" (FlauBERT model)"),o3r=l(),zM=a("li"),A8e=a("strong"),r3r=o("funnel"),t3r=o(" \u2014 "),fY=a("a"),a3r=o("TFFunnelForPreTraining"),n3r=o(" (Funnel Transformer model)"),s3r=l(),WM=a("li"),L8e=a("strong"),l3r=o("gpt2"),i3r=o(" \u2014 "),mY=a("a"),d3r=o("TFGPT2LMHeadModel"),c3r=o(" (OpenAI GPT-2 model)"),f3r=l(),QM=a("li"),y8e=a("strong"),m3r=o("layoutlm"),g3r=o(" \u2014 "),gY=a("a"),h3r=o("TFLayoutLMForMaskedLM"),p3r=o(" (LayoutLM model)"),_3r=l(),HM=a("li"),x8e=a("strong"),u3r=o("lxmert"),b3r=o(" \u2014 "),hY=a("a"),v3r=o("TFLxmertForPreTraining"),F3r=o(" (LXMERT model)"),T3r=l(),UM=a("li"),$8e=a("strong"),M3r=o("mobilebert"),E3r=o(" \u2014 "),pY=a("a"),C3r=o("TFMobileBertForPreTraining"),w3r=o(" (MobileBERT model)"),A3r=l(),JM=a("li"),k8e=a("strong"),L3r=o("mpnet"),y3r=o(" \u2014 "),_Y=a("a"),x3r=o("TFMPNetForMaskedLM"),$3r=o(" (MPNet model)"),k3r=l(),YM=a("li"),S8e=a("strong"),S3r=o("openai-gpt"),R3r=o(" \u2014 "),uY=a("a"),P3r=o("TFOpenAIGPTLMHeadModel"),B3r=o(" (OpenAI GPT model)"),I3r=l(),KM=a("li"),R8e=a("strong"),N3r=o("roberta"),q3r=o(" \u2014 "),bY=a("a"),j3r=o("TFRobertaForMaskedLM"),D3r=o(" (RoBERTa model)"),G3r=l(),ZM=a("li"),P8e=a("strong"),O3r=o("t5"),V3r=o(" \u2014 "),vY=a("a"),X3r=o("TFT5ForConditionalGeneration"),z3r=o(" (T5 model)"),W3r=l(),eE=a("li"),B8e=a("strong"),Q3r=o("tapas"),H3r=o(" \u2014 "),FY=a("a"),U3r=o("TFTapasForMaskedLM"),J3r=o(" (TAPAS model)"),Y3r=l(),oE=a("li"),I8e=a("strong"),K3r=o("transfo-xl"),Z3r=o(" \u2014 "),TY=a("a"),ewr=o("TFTransfoXLLMHeadModel"),owr=o(" (Transformer-XL model)"),rwr=l(),rE=a("li"),N8e=a("strong"),twr=o("vit_mae"),awr=o(" \u2014 "),MY=a("a"),nwr=o("TFViTMAEForPreTraining"),swr=o(" (ViTMAE model)"),lwr=l(),tE=a("li"),q8e=a("strong"),iwr=o("xlm"),dwr=o(" \u2014 "),EY=a("a"),cwr=o("TFXLMWithLMHeadModel"),fwr=o(" (XLM model)"),mwr=l(),aE=a("li"),j8e=a("strong"),gwr=o("xlm-roberta"),hwr=o(" \u2014 "),CY=a("a"),pwr=o("TFXLMRobertaForMaskedLM"),_wr=o(" (XLM-RoBERTa model)"),uwr=l(),nE=a("li"),D8e=a("strong"),bwr=o("xlnet"),vwr=o(" \u2014 "),wY=a("a"),Fwr=o("TFXLNetLMHeadModel"),Twr=o(" (XLNet model)"),Mwr=l(),F(sE.$$.fragment),DWe=l(),hc=a("h2"),lE=a("a"),G8e=a("span"),F(Mx.$$.fragment),Ewr=l(),O8e=a("span"),Cwr=o("TFAutoModelForCausalLM"),GWe=l(),ar=a("div"),F(Ex.$$.fragment),wwr=l(),pc=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=a("a"),Lwr=o("from_pretrained()"),ywr=o(" class method or the "),LY=a("a"),xwr=o("from_config()"),$wr=o(` class
method.`),kwr=l(),Cx=a("p"),Swr=o("This class cannot be instantiated directly using "),V8e=a("code"),Rwr=o("__init__()"),Pwr=o(" (throws an error)."),Bwr=l(),Bt=a("div"),F(wx.$$.fragment),Iwr=l(),X8e=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qwr=l(),_c=a("p"),jwr=o(`Note:
Loading a model from its configuration file does `),z8e=a("strong"),Dwr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),Owr=o("from_pretrained()"),Vwr=o(" to load the model weights."),Xwr=l(),F(iE.$$.fragment),zwr=l(),Sr=a("div"),F(Ax.$$.fragment),Wwr=l(),W8e=a("p"),Qwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hwr=l(),cn=a("p"),Uwr=o("The model class to instantiate is selected based on the "),Q8e=a("code"),Jwr=o("model_type"),Ywr=o(` property of the config object (either
passed as an argument or loaded from `),H8e=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U8e=a("code"),e6r=o("pretrained_model_name_or_path"),o6r=o(":"),r6r=l(),Me=a("ul"),dE=a("li"),J8e=a("strong"),t6r=o("bert"),a6r=o(" \u2014 "),xY=a("a"),n6r=o("TFBertLMHeadModel"),s6r=o(" (BERT model)"),l6r=l(),cE=a("li"),Y8e=a("strong"),i6r=o("camembert"),d6r=o(" \u2014 "),$Y=a("a"),c6r=o("TFCamembertForCausalLM"),f6r=o(" (CamemBERT model)"),m6r=l(),fE=a("li"),K8e=a("strong"),g6r=o("ctrl"),h6r=o(" \u2014 "),kY=a("a"),p6r=o("TFCTRLLMHeadModel"),_6r=o(" (CTRL model)"),u6r=l(),mE=a("li"),Z8e=a("strong"),b6r=o("gpt2"),v6r=o(" \u2014 "),SY=a("a"),F6r=o("TFGPT2LMHeadModel"),T6r=o(" (OpenAI GPT-2 model)"),M6r=l(),gE=a("li"),eMe=a("strong"),E6r=o("gptj"),C6r=o(" \u2014 "),RY=a("a"),w6r=o("TFGPTJForCausalLM"),A6r=o(" (GPT-J model)"),L6r=l(),hE=a("li"),oMe=a("strong"),y6r=o("openai-gpt"),x6r=o(" \u2014 "),PY=a("a"),$6r=o("TFOpenAIGPTLMHeadModel"),k6r=o(" (OpenAI GPT model)"),S6r=l(),pE=a("li"),rMe=a("strong"),R6r=o("opt"),P6r=o(" \u2014 "),BY=a("a"),B6r=o("TFOPTForCausalLM"),I6r=o(" (OPT model)"),N6r=l(),_E=a("li"),tMe=a("strong"),q6r=o("rembert"),j6r=o(" \u2014 "),IY=a("a"),D6r=o("TFRemBertForCausalLM"),G6r=o(" (RemBERT model)"),O6r=l(),uE=a("li"),aMe=a("strong"),V6r=o("roberta"),X6r=o(" \u2014 "),NY=a("a"),z6r=o("TFRobertaForCausalLM"),W6r=o(" (RoBERTa model)"),Q6r=l(),bE=a("li"),nMe=a("strong"),H6r=o("roformer"),U6r=o(" \u2014 "),qY=a("a"),J6r=o("TFRoFormerForCausalLM"),Y6r=o(" (RoFormer model)"),K6r=l(),vE=a("li"),sMe=a("strong"),Z6r=o("transfo-xl"),eAr=o(" \u2014 "),jY=a("a"),oAr=o("TFTransfoXLLMHeadModel"),rAr=o(" (Transformer-XL model)"),tAr=l(),FE=a("li"),lMe=a("strong"),aAr=o("xlm"),nAr=o(" \u2014 "),DY=a("a"),sAr=o("TFXLMWithLMHeadModel"),lAr=o(" (XLM model)"),iAr=l(),TE=a("li"),iMe=a("strong"),dAr=o("xlnet"),cAr=o(" \u2014 "),GY=a("a"),fAr=o("TFXLNetLMHeadModel"),mAr=o(" (XLNet model)"),gAr=l(),F(ME.$$.fragment),OWe=l(),uc=a("h2"),EE=a("a"),dMe=a("span"),F(Lx.$$.fragment),hAr=l(),cMe=a("span"),pAr=o("TFAutoModelForImageClassification"),VWe=l(),nr=a("div"),F(yx.$$.fragment),_Ar=l(),bc=a("p"),uAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OY=a("a"),bAr=o("from_pretrained()"),vAr=o(" class method or the "),VY=a("a"),FAr=o("from_config()"),TAr=o(` class
method.`),MAr=l(),xx=a("p"),EAr=o("This class cannot be instantiated directly using "),fMe=a("code"),CAr=o("__init__()"),wAr=o(" (throws an error)."),AAr=l(),It=a("div"),F($x.$$.fragment),LAr=l(),mMe=a("p"),yAr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xAr=l(),vc=a("p"),$Ar=o(`Note:
Loading a model from its configuration file does `),gMe=a("strong"),kAr=o("not"),SAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),RAr=o("from_pretrained()"),PAr=o(" to load the model weights."),BAr=l(),F(CE.$$.fragment),IAr=l(),Rr=a("div"),F(kx.$$.fragment),NAr=l(),hMe=a("p"),qAr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jAr=l(),fn=a("p"),DAr=o("The model class to instantiate is selected based on the "),pMe=a("code"),GAr=o("model_type"),OAr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),VAr=o("pretrained_model_name_or_path"),XAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),zAr=o("pretrained_model_name_or_path"),WAr=o(":"),QAr=l(),Ve=a("ul"),wE=a("li"),bMe=a("strong"),HAr=o("convnext"),UAr=o(" \u2014 "),zY=a("a"),JAr=o("TFConvNextForImageClassification"),YAr=o(" (ConvNeXT model)"),KAr=l(),AE=a("li"),vMe=a("strong"),ZAr=o("data2vec-vision"),e7r=o(" \u2014 "),WY=a("a"),o7r=o("TFData2VecVisionForImageClassification"),r7r=o(" (Data2VecVision model)"),t7r=l(),el=a("li"),FMe=a("strong"),a7r=o("deit"),n7r=o(" \u2014 "),QY=a("a"),s7r=o("TFDeiTForImageClassification"),l7r=o(" or "),HY=a("a"),i7r=o("TFDeiTForImageClassificationWithTeacher"),d7r=o(" (DeiT model)"),c7r=l(),LE=a("li"),TMe=a("strong"),f7r=o("regnet"),m7r=o(" \u2014 "),UY=a("a"),g7r=o("TFRegNetForImageClassification"),h7r=o(" (RegNet model)"),p7r=l(),yE=a("li"),MMe=a("strong"),_7r=o("resnet"),u7r=o(" \u2014 "),JY=a("a"),b7r=o("TFResNetForImageClassification"),v7r=o(" (ResNet model)"),F7r=l(),xE=a("li"),EMe=a("strong"),T7r=o("segformer"),M7r=o(" \u2014 "),YY=a("a"),E7r=o("TFSegformerForImageClassification"),C7r=o(" (SegFormer model)"),w7r=l(),$E=a("li"),CMe=a("strong"),A7r=o("swin"),L7r=o(" \u2014 "),KY=a("a"),y7r=o("TFSwinForImageClassification"),x7r=o(" (Swin Transformer model)"),$7r=l(),kE=a("li"),wMe=a("strong"),k7r=o("vit"),S7r=o(" \u2014 "),ZY=a("a"),R7r=o("TFViTForImageClassification"),P7r=o(" (ViT model)"),B7r=l(),F(SE.$$.fragment),XWe=l(),Fc=a("h2"),RE=a("a"),AMe=a("span"),F(Sx.$$.fragment),I7r=l(),LMe=a("span"),N7r=o("TFAutoModelForMaskedLM"),zWe=l(),sr=a("div"),F(Rx.$$.fragment),q7r=l(),Tc=a("p"),j7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=a("a"),D7r=o("from_pretrained()"),G7r=o(" class method or the "),oK=a("a"),O7r=o("from_config()"),V7r=o(` class
method.`),X7r=l(),Px=a("p"),z7r=o("This class cannot be instantiated directly using "),yMe=a("code"),W7r=o("__init__()"),Q7r=o(" (throws an error)."),H7r=l(),Nt=a("div"),F(Bx.$$.fragment),U7r=l(),xMe=a("p"),J7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y7r=l(),Mc=a("p"),K7r=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),Z7r=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),oLr=o("from_pretrained()"),rLr=o(" to load the model weights."),tLr=l(),F(PE.$$.fragment),aLr=l(),Pr=a("div"),F(Ix.$$.fragment),nLr=l(),kMe=a("p"),sLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lLr=l(),mn=a("p"),iLr=o("The model class to instantiate is selected based on the "),SMe=a("code"),dLr=o("model_type"),cLr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(":"),pLr=l(),ie=a("ul"),BE=a("li"),BMe=a("strong"),_Lr=o("albert"),uLr=o(" \u2014 "),tK=a("a"),bLr=o("TFAlbertForMaskedLM"),vLr=o(" (ALBERT model)"),FLr=l(),IE=a("li"),IMe=a("strong"),TLr=o("bert"),MLr=o(" \u2014 "),aK=a("a"),ELr=o("TFBertForMaskedLM"),CLr=o(" (BERT model)"),wLr=l(),NE=a("li"),NMe=a("strong"),ALr=o("camembert"),LLr=o(" \u2014 "),nK=a("a"),yLr=o("TFCamembertForMaskedLM"),xLr=o(" (CamemBERT model)"),$Lr=l(),qE=a("li"),qMe=a("strong"),kLr=o("convbert"),SLr=o(" \u2014 "),sK=a("a"),RLr=o("TFConvBertForMaskedLM"),PLr=o(" (ConvBERT model)"),BLr=l(),jE=a("li"),jMe=a("strong"),ILr=o("deberta"),NLr=o(" \u2014 "),lK=a("a"),qLr=o("TFDebertaForMaskedLM"),jLr=o(" (DeBERTa model)"),DLr=l(),DE=a("li"),DMe=a("strong"),GLr=o("deberta-v2"),OLr=o(" \u2014 "),iK=a("a"),VLr=o("TFDebertaV2ForMaskedLM"),XLr=o(" (DeBERTa-v2 model)"),zLr=l(),GE=a("li"),GMe=a("strong"),WLr=o("distilbert"),QLr=o(" \u2014 "),dK=a("a"),HLr=o("TFDistilBertForMaskedLM"),ULr=o(" (DistilBERT model)"),JLr=l(),OE=a("li"),OMe=a("strong"),YLr=o("electra"),KLr=o(" \u2014 "),cK=a("a"),ZLr=o("TFElectraForMaskedLM"),eyr=o(" (ELECTRA model)"),oyr=l(),VE=a("li"),VMe=a("strong"),ryr=o("flaubert"),tyr=o(" \u2014 "),fK=a("a"),ayr=o("TFFlaubertWithLMHeadModel"),nyr=o(" (FlauBERT model)"),syr=l(),XE=a("li"),XMe=a("strong"),lyr=o("funnel"),iyr=o(" \u2014 "),mK=a("a"),dyr=o("TFFunnelForMaskedLM"),cyr=o(" (Funnel Transformer model)"),fyr=l(),zE=a("li"),zMe=a("strong"),myr=o("layoutlm"),gyr=o(" \u2014 "),gK=a("a"),hyr=o("TFLayoutLMForMaskedLM"),pyr=o(" (LayoutLM model)"),_yr=l(),WE=a("li"),WMe=a("strong"),uyr=o("longformer"),byr=o(" \u2014 "),hK=a("a"),vyr=o("TFLongformerForMaskedLM"),Fyr=o(" (Longformer model)"),Tyr=l(),QE=a("li"),QMe=a("strong"),Myr=o("mobilebert"),Eyr=o(" \u2014 "),pK=a("a"),Cyr=o("TFMobileBertForMaskedLM"),wyr=o(" (MobileBERT model)"),Ayr=l(),HE=a("li"),HMe=a("strong"),Lyr=o("mpnet"),yyr=o(" \u2014 "),_K=a("a"),xyr=o("TFMPNetForMaskedLM"),$yr=o(" (MPNet model)"),kyr=l(),UE=a("li"),UMe=a("strong"),Syr=o("rembert"),Ryr=o(" \u2014 "),uK=a("a"),Pyr=o("TFRemBertForMaskedLM"),Byr=o(" (RemBERT model)"),Iyr=l(),JE=a("li"),JMe=a("strong"),Nyr=o("roberta"),qyr=o(" \u2014 "),bK=a("a"),jyr=o("TFRobertaForMaskedLM"),Dyr=o(" (RoBERTa model)"),Gyr=l(),YE=a("li"),YMe=a("strong"),Oyr=o("roformer"),Vyr=o(" \u2014 "),vK=a("a"),Xyr=o("TFRoFormerForMaskedLM"),zyr=o(" (RoFormer model)"),Wyr=l(),KE=a("li"),KMe=a("strong"),Qyr=o("tapas"),Hyr=o(" \u2014 "),FK=a("a"),Uyr=o("TFTapasForMaskedLM"),Jyr=o(" (TAPAS model)"),Yyr=l(),ZE=a("li"),ZMe=a("strong"),Kyr=o("xlm"),Zyr=o(" \u2014 "),TK=a("a"),e9r=o("TFXLMWithLMHeadModel"),o9r=o(" (XLM model)"),r9r=l(),eC=a("li"),eEe=a("strong"),t9r=o("xlm-roberta"),a9r=o(" \u2014 "),MK=a("a"),n9r=o("TFXLMRobertaForMaskedLM"),s9r=o(" (XLM-RoBERTa model)"),l9r=l(),F(oC.$$.fragment),WWe=l(),Ec=a("h2"),rC=a("a"),oEe=a("span"),F(Nx.$$.fragment),i9r=l(),rEe=a("span"),d9r=o("TFAutoModelForSeq2SeqLM"),QWe=l(),lr=a("div"),F(qx.$$.fragment),c9r=l(),Cc=a("p"),f9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EK=a("a"),m9r=o("from_pretrained()"),g9r=o(" class method or the "),CK=a("a"),h9r=o("from_config()"),p9r=o(` class
method.`),_9r=l(),jx=a("p"),u9r=o("This class cannot be instantiated directly using "),tEe=a("code"),b9r=o("__init__()"),v9r=o(" (throws an error)."),F9r=l(),qt=a("div"),F(Dx.$$.fragment),T9r=l(),aEe=a("p"),M9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E9r=l(),wc=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),L9r=o("from_pretrained()"),y9r=o(" to load the model weights."),x9r=l(),F(tC.$$.fragment),$9r=l(),Br=a("div"),F(Gx.$$.fragment),k9r=l(),sEe=a("p"),S9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),R9r=l(),gn=a("p"),P9r=o("The model class to instantiate is selected based on the "),lEe=a("code"),B9r=o("model_type"),I9r=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),N9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(":"),G9r=l(),ye=a("ul"),aC=a("li"),cEe=a("strong"),O9r=o("bart"),V9r=o(" \u2014 "),AK=a("a"),X9r=o("TFBartForConditionalGeneration"),z9r=o(" (BART model)"),W9r=l(),nC=a("li"),fEe=a("strong"),Q9r=o("blenderbot"),H9r=o(" \u2014 "),LK=a("a"),U9r=o("TFBlenderbotForConditionalGeneration"),J9r=o(" (Blenderbot model)"),Y9r=l(),sC=a("li"),mEe=a("strong"),K9r=o("blenderbot-small"),Z9r=o(" \u2014 "),yK=a("a"),exr=o("TFBlenderbotSmallForConditionalGeneration"),oxr=o(" (BlenderbotSmall model)"),rxr=l(),lC=a("li"),gEe=a("strong"),txr=o("encoder-decoder"),axr=o(" \u2014 "),xK=a("a"),nxr=o("TFEncoderDecoderModel"),sxr=o(" (Encoder decoder model)"),lxr=l(),iC=a("li"),hEe=a("strong"),ixr=o("led"),dxr=o(" \u2014 "),$K=a("a"),cxr=o("TFLEDForConditionalGeneration"),fxr=o(" (LED model)"),mxr=l(),dC=a("li"),pEe=a("strong"),gxr=o("marian"),hxr=o(" \u2014 "),kK=a("a"),pxr=o("TFMarianMTModel"),_xr=o(" (Marian model)"),uxr=l(),cC=a("li"),_Ee=a("strong"),bxr=o("mbart"),vxr=o(" \u2014 "),SK=a("a"),Fxr=o("TFMBartForConditionalGeneration"),Txr=o(" (mBART model)"),Mxr=l(),fC=a("li"),uEe=a("strong"),Exr=o("mt5"),Cxr=o(" \u2014 "),RK=a("a"),wxr=o("TFMT5ForConditionalGeneration"),Axr=o(" (MT5 model)"),Lxr=l(),mC=a("li"),bEe=a("strong"),yxr=o("pegasus"),xxr=o(" \u2014 "),PK=a("a"),$xr=o("TFPegasusForConditionalGeneration"),kxr=o(" (Pegasus model)"),Sxr=l(),gC=a("li"),vEe=a("strong"),Rxr=o("t5"),Pxr=o(" \u2014 "),BK=a("a"),Bxr=o("TFT5ForConditionalGeneration"),Ixr=o(" (T5 model)"),Nxr=l(),F(hC.$$.fragment),HWe=l(),Ac=a("h2"),pC=a("a"),FEe=a("span"),F(Ox.$$.fragment),qxr=l(),TEe=a("span"),jxr=o("TFAutoModelForSequenceClassification"),UWe=l(),ir=a("div"),F(Vx.$$.fragment),Dxr=l(),Lc=a("p"),Gxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IK=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" class method or the "),NK=a("a"),Xxr=o("from_config()"),zxr=o(` class
method.`),Wxr=l(),Xx=a("p"),Qxr=o("This class cannot be instantiated directly using "),MEe=a("code"),Hxr=o("__init__()"),Uxr=o(" (throws an error)."),Jxr=l(),jt=a("div"),F(zx.$$.fragment),Yxr=l(),EEe=a("p"),Kxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zxr=l(),yc=a("p"),e$r=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),o$r=o("not"),r$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),t$r=o("from_pretrained()"),a$r=o(" to load the model weights."),n$r=l(),F(_C.$$.fragment),s$r=l(),Ir=a("div"),F(Wx.$$.fragment),l$r=l(),wEe=a("p"),i$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d$r=l(),hn=a("p"),c$r=o("The model class to instantiate is selected based on the "),AEe=a("code"),f$r=o("model_type"),m$r=o(` property of the config object (either
passed as an argument or loaded from `),LEe=a("code"),g$r=o("pretrained_model_name_or_path"),h$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(":"),u$r=l(),te=a("ul"),uC=a("li"),xEe=a("strong"),b$r=o("albert"),v$r=o(" \u2014 "),jK=a("a"),F$r=o("TFAlbertForSequenceClassification"),T$r=o(" (ALBERT model)"),M$r=l(),bC=a("li"),$Ee=a("strong"),E$r=o("bert"),C$r=o(" \u2014 "),DK=a("a"),w$r=o("TFBertForSequenceClassification"),A$r=o(" (BERT model)"),L$r=l(),vC=a("li"),kEe=a("strong"),y$r=o("camembert"),x$r=o(" \u2014 "),GK=a("a"),$$r=o("TFCamembertForSequenceClassification"),k$r=o(" (CamemBERT model)"),S$r=l(),FC=a("li"),SEe=a("strong"),R$r=o("convbert"),P$r=o(" \u2014 "),OK=a("a"),B$r=o("TFConvBertForSequenceClassification"),I$r=o(" (ConvBERT model)"),N$r=l(),TC=a("li"),REe=a("strong"),q$r=o("ctrl"),j$r=o(" \u2014 "),VK=a("a"),D$r=o("TFCTRLForSequenceClassification"),G$r=o(" (CTRL model)"),O$r=l(),MC=a("li"),PEe=a("strong"),V$r=o("deberta"),X$r=o(" \u2014 "),XK=a("a"),z$r=o("TFDebertaForSequenceClassification"),W$r=o(" (DeBERTa model)"),Q$r=l(),EC=a("li"),BEe=a("strong"),H$r=o("deberta-v2"),U$r=o(" \u2014 "),zK=a("a"),J$r=o("TFDebertaV2ForSequenceClassification"),Y$r=o(" (DeBERTa-v2 model)"),K$r=l(),CC=a("li"),IEe=a("strong"),Z$r=o("distilbert"),ekr=o(" \u2014 "),WK=a("a"),okr=o("TFDistilBertForSequenceClassification"),rkr=o(" (DistilBERT model)"),tkr=l(),wC=a("li"),NEe=a("strong"),akr=o("electra"),nkr=o(" \u2014 "),QK=a("a"),skr=o("TFElectraForSequenceClassification"),lkr=o(" (ELECTRA model)"),ikr=l(),AC=a("li"),qEe=a("strong"),dkr=o("flaubert"),ckr=o(" \u2014 "),HK=a("a"),fkr=o("TFFlaubertForSequenceClassification"),mkr=o(" (FlauBERT model)"),gkr=l(),LC=a("li"),jEe=a("strong"),hkr=o("funnel"),pkr=o(" \u2014 "),UK=a("a"),_kr=o("TFFunnelForSequenceClassification"),ukr=o(" (Funnel Transformer model)"),bkr=l(),yC=a("li"),DEe=a("strong"),vkr=o("gpt2"),Fkr=o(" \u2014 "),JK=a("a"),Tkr=o("TFGPT2ForSequenceClassification"),Mkr=o(" (OpenAI GPT-2 model)"),Ekr=l(),xC=a("li"),GEe=a("strong"),Ckr=o("gptj"),wkr=o(" \u2014 "),YK=a("a"),Akr=o("TFGPTJForSequenceClassification"),Lkr=o(" (GPT-J model)"),ykr=l(),$C=a("li"),OEe=a("strong"),xkr=o("layoutlm"),$kr=o(" \u2014 "),KK=a("a"),kkr=o("TFLayoutLMForSequenceClassification"),Skr=o(" (LayoutLM model)"),Rkr=l(),kC=a("li"),VEe=a("strong"),Pkr=o("longformer"),Bkr=o(" \u2014 "),ZK=a("a"),Ikr=o("TFLongformerForSequenceClassification"),Nkr=o(" (Longformer model)"),qkr=l(),SC=a("li"),XEe=a("strong"),jkr=o("mobilebert"),Dkr=o(" \u2014 "),eZ=a("a"),Gkr=o("TFMobileBertForSequenceClassification"),Okr=o(" (MobileBERT model)"),Vkr=l(),RC=a("li"),zEe=a("strong"),Xkr=o("mpnet"),zkr=o(" \u2014 "),oZ=a("a"),Wkr=o("TFMPNetForSequenceClassification"),Qkr=o(" (MPNet model)"),Hkr=l(),PC=a("li"),WEe=a("strong"),Ukr=o("openai-gpt"),Jkr=o(" \u2014 "),rZ=a("a"),Ykr=o("TFOpenAIGPTForSequenceClassification"),Kkr=o(" (OpenAI GPT model)"),Zkr=l(),BC=a("li"),QEe=a("strong"),eSr=o("rembert"),oSr=o(" \u2014 "),tZ=a("a"),rSr=o("TFRemBertForSequenceClassification"),tSr=o(" (RemBERT model)"),aSr=l(),IC=a("li"),HEe=a("strong"),nSr=o("roberta"),sSr=o(" \u2014 "),aZ=a("a"),lSr=o("TFRobertaForSequenceClassification"),iSr=o(" (RoBERTa model)"),dSr=l(),NC=a("li"),UEe=a("strong"),cSr=o("roformer"),fSr=o(" \u2014 "),nZ=a("a"),mSr=o("TFRoFormerForSequenceClassification"),gSr=o(" (RoFormer model)"),hSr=l(),qC=a("li"),JEe=a("strong"),pSr=o("tapas"),_Sr=o(" \u2014 "),sZ=a("a"),uSr=o("TFTapasForSequenceClassification"),bSr=o(" (TAPAS model)"),vSr=l(),jC=a("li"),YEe=a("strong"),FSr=o("transfo-xl"),TSr=o(" \u2014 "),lZ=a("a"),MSr=o("TFTransfoXLForSequenceClassification"),ESr=o(" (Transformer-XL model)"),CSr=l(),DC=a("li"),KEe=a("strong"),wSr=o("xlm"),ASr=o(" \u2014 "),iZ=a("a"),LSr=o("TFXLMForSequenceClassification"),ySr=o(" (XLM model)"),xSr=l(),GC=a("li"),ZEe=a("strong"),$Sr=o("xlm-roberta"),kSr=o(" \u2014 "),dZ=a("a"),SSr=o("TFXLMRobertaForSequenceClassification"),RSr=o(" (XLM-RoBERTa model)"),PSr=l(),OC=a("li"),eCe=a("strong"),BSr=o("xlnet"),ISr=o(" \u2014 "),cZ=a("a"),NSr=o("TFXLNetForSequenceClassification"),qSr=o(" (XLNet model)"),jSr=l(),F(VC.$$.fragment),JWe=l(),xc=a("h2"),XC=a("a"),oCe=a("span"),F(Qx.$$.fragment),DSr=l(),rCe=a("span"),GSr=o("TFAutoModelForMultipleChoice"),YWe=l(),dr=a("div"),F(Hx.$$.fragment),OSr=l(),$c=a("p"),VSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fZ=a("a"),XSr=o("from_pretrained()"),zSr=o(" class method or the "),mZ=a("a"),WSr=o("from_config()"),QSr=o(` class
method.`),HSr=l(),Ux=a("p"),USr=o("This class cannot be instantiated directly using "),tCe=a("code"),JSr=o("__init__()"),YSr=o(" (throws an error)."),KSr=l(),Dt=a("div"),F(Jx.$$.fragment),ZSr=l(),aCe=a("p"),eRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oRr=l(),kc=a("p"),rRr=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),tRr=o("not"),aRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),nRr=o("from_pretrained()"),sRr=o(" to load the model weights."),lRr=l(),F(zC.$$.fragment),iRr=l(),Nr=a("div"),F(Yx.$$.fragment),dRr=l(),sCe=a("p"),cRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fRr=l(),pn=a("p"),mRr=o("The model class to instantiate is selected based on the "),lCe=a("code"),gRr=o("model_type"),hRr=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),pRr=o("pretrained_model_name_or_path"),_Rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),uRr=o("pretrained_model_name_or_path"),bRr=o(":"),vRr=l(),ve=a("ul"),WC=a("li"),cCe=a("strong"),FRr=o("albert"),TRr=o(" \u2014 "),hZ=a("a"),MRr=o("TFAlbertForMultipleChoice"),ERr=o(" (ALBERT model)"),CRr=l(),QC=a("li"),fCe=a("strong"),wRr=o("bert"),ARr=o(" \u2014 "),pZ=a("a"),LRr=o("TFBertForMultipleChoice"),yRr=o(" (BERT model)"),xRr=l(),HC=a("li"),mCe=a("strong"),$Rr=o("camembert"),kRr=o(" \u2014 "),_Z=a("a"),SRr=o("TFCamembertForMultipleChoice"),RRr=o(" (CamemBERT model)"),PRr=l(),UC=a("li"),gCe=a("strong"),BRr=o("convbert"),IRr=o(" \u2014 "),uZ=a("a"),NRr=o("TFConvBertForMultipleChoice"),qRr=o(" (ConvBERT model)"),jRr=l(),JC=a("li"),hCe=a("strong"),DRr=o("distilbert"),GRr=o(" \u2014 "),bZ=a("a"),ORr=o("TFDistilBertForMultipleChoice"),VRr=o(" (DistilBERT model)"),XRr=l(),YC=a("li"),pCe=a("strong"),zRr=o("electra"),WRr=o(" \u2014 "),vZ=a("a"),QRr=o("TFElectraForMultipleChoice"),HRr=o(" (ELECTRA model)"),URr=l(),KC=a("li"),_Ce=a("strong"),JRr=o("flaubert"),YRr=o(" \u2014 "),FZ=a("a"),KRr=o("TFFlaubertForMultipleChoice"),ZRr=o(" (FlauBERT model)"),ePr=l(),ZC=a("li"),uCe=a("strong"),oPr=o("funnel"),rPr=o(" \u2014 "),TZ=a("a"),tPr=o("TFFunnelForMultipleChoice"),aPr=o(" (Funnel Transformer model)"),nPr=l(),e5=a("li"),bCe=a("strong"),sPr=o("longformer"),lPr=o(" \u2014 "),MZ=a("a"),iPr=o("TFLongformerForMultipleChoice"),dPr=o(" (Longformer model)"),cPr=l(),o5=a("li"),vCe=a("strong"),fPr=o("mobilebert"),mPr=o(" \u2014 "),EZ=a("a"),gPr=o("TFMobileBertForMultipleChoice"),hPr=o(" (MobileBERT model)"),pPr=l(),r5=a("li"),FCe=a("strong"),_Pr=o("mpnet"),uPr=o(" \u2014 "),CZ=a("a"),bPr=o("TFMPNetForMultipleChoice"),vPr=o(" (MPNet model)"),FPr=l(),t5=a("li"),TCe=a("strong"),TPr=o("rembert"),MPr=o(" \u2014 "),wZ=a("a"),EPr=o("TFRemBertForMultipleChoice"),CPr=o(" (RemBERT model)"),wPr=l(),a5=a("li"),MCe=a("strong"),APr=o("roberta"),LPr=o(" \u2014 "),AZ=a("a"),yPr=o("TFRobertaForMultipleChoice"),xPr=o(" (RoBERTa model)"),$Pr=l(),n5=a("li"),ECe=a("strong"),kPr=o("roformer"),SPr=o(" \u2014 "),LZ=a("a"),RPr=o("TFRoFormerForMultipleChoice"),PPr=o(" (RoFormer model)"),BPr=l(),s5=a("li"),CCe=a("strong"),IPr=o("xlm"),NPr=o(" \u2014 "),yZ=a("a"),qPr=o("TFXLMForMultipleChoice"),jPr=o(" (XLM model)"),DPr=l(),l5=a("li"),wCe=a("strong"),GPr=o("xlm-roberta"),OPr=o(" \u2014 "),xZ=a("a"),VPr=o("TFXLMRobertaForMultipleChoice"),XPr=o(" (XLM-RoBERTa model)"),zPr=l(),i5=a("li"),ACe=a("strong"),WPr=o("xlnet"),QPr=o(" \u2014 "),$Z=a("a"),HPr=o("TFXLNetForMultipleChoice"),UPr=o(" (XLNet model)"),JPr=l(),F(d5.$$.fragment),KWe=l(),Sc=a("h2"),c5=a("a"),LCe=a("span"),F(Kx.$$.fragment),YPr=l(),yCe=a("span"),KPr=o("TFAutoModelForNextSentencePrediction"),ZWe=l(),cr=a("div"),F(Zx.$$.fragment),ZPr=l(),Rc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),SZ=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),e$=a("p"),sBr=o("This class cannot be instantiated directly using "),xCe=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),Gt=a("div"),F(o$.$$.fragment),cBr=l(),$Ce=a("p"),fBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mBr=l(),Pc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),kCe=a("strong"),hBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=a("a"),_Br=o("from_pretrained()"),uBr=o(" to load the model weights."),bBr=l(),F(f5.$$.fragment),vBr=l(),qr=a("div"),F(r$.$$.fragment),FBr=l(),SCe=a("p"),TBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MBr=l(),_n=a("p"),EBr=o("The model class to instantiate is selected based on the "),RCe=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),PCe=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=a("code"),yBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),t$=a("ul"),m5=a("li"),ICe=a("strong"),kBr=o("bert"),SBr=o(" \u2014 "),PZ=a("a"),RBr=o("TFBertForNextSentencePrediction"),PBr=o(" (BERT model)"),BBr=l(),g5=a("li"),NCe=a("strong"),IBr=o("mobilebert"),NBr=o(" \u2014 "),BZ=a("a"),qBr=o("TFMobileBertForNextSentencePrediction"),jBr=o(" (MobileBERT model)"),DBr=l(),F(h5.$$.fragment),eQe=l(),Bc=a("h2"),p5=a("a"),qCe=a("span"),F(a$.$$.fragment),GBr=l(),jCe=a("span"),OBr=o("TFAutoModelForTableQuestionAnswering"),oQe=l(),fr=a("div"),F(n$.$$.fragment),VBr=l(),Ic=a("p"),XBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IZ=a("a"),zBr=o("from_pretrained()"),WBr=o(" class method or the "),NZ=a("a"),QBr=o("from_config()"),HBr=o(` class
method.`),UBr=l(),s$=a("p"),JBr=o("This class cannot be instantiated directly using "),DCe=a("code"),YBr=o("__init__()"),KBr=o(" (throws an error)."),ZBr=l(),Ot=a("div"),F(l$.$$.fragment),eIr=l(),GCe=a("p"),oIr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rIr=l(),Nc=a("p"),tIr=o(`Note:
Loading a model from its configuration file does `),OCe=a("strong"),aIr=o("not"),nIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),sIr=o("from_pretrained()"),lIr=o(" to load the model weights."),iIr=l(),F(_5.$$.fragment),dIr=l(),jr=a("div"),F(i$.$$.fragment),cIr=l(),VCe=a("p"),fIr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mIr=l(),un=a("p"),gIr=o("The model class to instantiate is selected based on the "),XCe=a("code"),hIr=o("model_type"),pIr=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),_Ir=o("pretrained_model_name_or_path"),uIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(":"),FIr=l(),QCe=a("ul"),u5=a("li"),HCe=a("strong"),TIr=o("tapas"),MIr=o(" \u2014 "),jZ=a("a"),EIr=o("TFTapasForQuestionAnswering"),CIr=o(" (TAPAS model)"),wIr=l(),F(b5.$$.fragment),rQe=l(),qc=a("h2"),v5=a("a"),UCe=a("span"),F(d$.$$.fragment),AIr=l(),JCe=a("span"),LIr=o("TFAutoModelForTokenClassification"),tQe=l(),mr=a("div"),F(c$.$$.fragment),yIr=l(),jc=a("p"),xIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DZ=a("a"),$Ir=o("from_pretrained()"),kIr=o(" class method or the "),GZ=a("a"),SIr=o("from_config()"),RIr=o(` class
method.`),PIr=l(),f$=a("p"),BIr=o("This class cannot be instantiated directly using "),YCe=a("code"),IIr=o("__init__()"),NIr=o(" (throws an error)."),qIr=l(),Vt=a("div"),F(m$.$$.fragment),jIr=l(),KCe=a("p"),DIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GIr=l(),Dc=a("p"),OIr=o(`Note:
Loading a model from its configuration file does `),ZCe=a("strong"),VIr=o("not"),XIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),zIr=o("from_pretrained()"),WIr=o(" to load the model weights."),QIr=l(),F(F5.$$.fragment),HIr=l(),Dr=a("div"),F(g$.$$.fragment),UIr=l(),e5e=a("p"),JIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YIr=l(),bn=a("p"),KIr=o("The model class to instantiate is selected based on the "),o5e=a("code"),ZIr=o("model_type"),eNr=o(` property of the config object (either
passed as an argument or loaded from `),r5e=a("code"),oNr=o("pretrained_model_name_or_path"),rNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=a("code"),tNr=o("pretrained_model_name_or_path"),aNr=o(":"),nNr=l(),de=a("ul"),T5=a("li"),a5e=a("strong"),sNr=o("albert"),lNr=o(" \u2014 "),VZ=a("a"),iNr=o("TFAlbertForTokenClassification"),dNr=o(" (ALBERT model)"),cNr=l(),M5=a("li"),n5e=a("strong"),fNr=o("bert"),mNr=o(" \u2014 "),XZ=a("a"),gNr=o("TFBertForTokenClassification"),hNr=o(" (BERT model)"),pNr=l(),E5=a("li"),s5e=a("strong"),_Nr=o("camembert"),uNr=o(" \u2014 "),zZ=a("a"),bNr=o("TFCamembertForTokenClassification"),vNr=o(" (CamemBERT model)"),FNr=l(),C5=a("li"),l5e=a("strong"),TNr=o("convbert"),MNr=o(" \u2014 "),WZ=a("a"),ENr=o("TFConvBertForTokenClassification"),CNr=o(" (ConvBERT model)"),wNr=l(),w5=a("li"),i5e=a("strong"),ANr=o("deberta"),LNr=o(" \u2014 "),QZ=a("a"),yNr=o("TFDebertaForTokenClassification"),xNr=o(" (DeBERTa model)"),$Nr=l(),A5=a("li"),d5e=a("strong"),kNr=o("deberta-v2"),SNr=o(" \u2014 "),HZ=a("a"),RNr=o("TFDebertaV2ForTokenClassification"),PNr=o(" (DeBERTa-v2 model)"),BNr=l(),L5=a("li"),c5e=a("strong"),INr=o("distilbert"),NNr=o(" \u2014 "),UZ=a("a"),qNr=o("TFDistilBertForTokenClassification"),jNr=o(" (DistilBERT model)"),DNr=l(),y5=a("li"),f5e=a("strong"),GNr=o("electra"),ONr=o(" \u2014 "),JZ=a("a"),VNr=o("TFElectraForTokenClassification"),XNr=o(" (ELECTRA model)"),zNr=l(),x5=a("li"),m5e=a("strong"),WNr=o("flaubert"),QNr=o(" \u2014 "),YZ=a("a"),HNr=o("TFFlaubertForTokenClassification"),UNr=o(" (FlauBERT model)"),JNr=l(),$5=a("li"),g5e=a("strong"),YNr=o("funnel"),KNr=o(" \u2014 "),KZ=a("a"),ZNr=o("TFFunnelForTokenClassification"),eqr=o(" (Funnel Transformer model)"),oqr=l(),k5=a("li"),h5e=a("strong"),rqr=o("layoutlm"),tqr=o(" \u2014 "),ZZ=a("a"),aqr=o("TFLayoutLMForTokenClassification"),nqr=o(" (LayoutLM model)"),sqr=l(),S5=a("li"),p5e=a("strong"),lqr=o("longformer"),iqr=o(" \u2014 "),eee=a("a"),dqr=o("TFLongformerForTokenClassification"),cqr=o(" (Longformer model)"),fqr=l(),R5=a("li"),_5e=a("strong"),mqr=o("mobilebert"),gqr=o(" \u2014 "),oee=a("a"),hqr=o("TFMobileBertForTokenClassification"),pqr=o(" (MobileBERT model)"),_qr=l(),P5=a("li"),u5e=a("strong"),uqr=o("mpnet"),bqr=o(" \u2014 "),ree=a("a"),vqr=o("TFMPNetForTokenClassification"),Fqr=o(" (MPNet model)"),Tqr=l(),B5=a("li"),b5e=a("strong"),Mqr=o("rembert"),Eqr=o(" \u2014 "),tee=a("a"),Cqr=o("TFRemBertForTokenClassification"),wqr=o(" (RemBERT model)"),Aqr=l(),I5=a("li"),v5e=a("strong"),Lqr=o("roberta"),yqr=o(" \u2014 "),aee=a("a"),xqr=o("TFRobertaForTokenClassification"),$qr=o(" (RoBERTa model)"),kqr=l(),N5=a("li"),F5e=a("strong"),Sqr=o("roformer"),Rqr=o(" \u2014 "),nee=a("a"),Pqr=o("TFRoFormerForTokenClassification"),Bqr=o(" (RoFormer model)"),Iqr=l(),q5=a("li"),T5e=a("strong"),Nqr=o("xlm"),qqr=o(" \u2014 "),see=a("a"),jqr=o("TFXLMForTokenClassification"),Dqr=o(" (XLM model)"),Gqr=l(),j5=a("li"),M5e=a("strong"),Oqr=o("xlm-roberta"),Vqr=o(" \u2014 "),lee=a("a"),Xqr=o("TFXLMRobertaForTokenClassification"),zqr=o(" (XLM-RoBERTa model)"),Wqr=l(),D5=a("li"),E5e=a("strong"),Qqr=o("xlnet"),Hqr=o(" \u2014 "),iee=a("a"),Uqr=o("TFXLNetForTokenClassification"),Jqr=o(" (XLNet model)"),Yqr=l(),F(G5.$$.fragment),aQe=l(),Gc=a("h2"),O5=a("a"),C5e=a("span"),F(h$.$$.fragment),Kqr=l(),w5e=a("span"),Zqr=o("TFAutoModelForQuestionAnswering"),nQe=l(),gr=a("div"),F(p$.$$.fragment),ejr=l(),Oc=a("p"),ojr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dee=a("a"),rjr=o("from_pretrained()"),tjr=o(" class method or the "),cee=a("a"),ajr=o("from_config()"),njr=o(` class
method.`),sjr=l(),_$=a("p"),ljr=o("This class cannot be instantiated directly using "),A5e=a("code"),ijr=o("__init__()"),djr=o(" (throws an error)."),cjr=l(),Xt=a("div"),F(u$.$$.fragment),fjr=l(),L5e=a("p"),mjr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gjr=l(),Vc=a("p"),hjr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),pjr=o("not"),_jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=a("a"),ujr=o("from_pretrained()"),bjr=o(" to load the model weights."),vjr=l(),F(V5.$$.fragment),Fjr=l(),Gr=a("div"),F(b$.$$.fragment),Tjr=l(),x5e=a("p"),Mjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ejr=l(),vn=a("p"),Cjr=o("The model class to instantiate is selected based on the "),$5e=a("code"),wjr=o("model_type"),Ajr=o(` property of the config object (either
passed as an argument or loaded from `),k5e=a("code"),Ljr=o("pretrained_model_name_or_path"),yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=a("code"),xjr=o("pretrained_model_name_or_path"),$jr=o(":"),kjr=l(),ce=a("ul"),X5=a("li"),R5e=a("strong"),Sjr=o("albert"),Rjr=o(" \u2014 "),mee=a("a"),Pjr=o("TFAlbertForQuestionAnswering"),Bjr=o(" (ALBERT model)"),Ijr=l(),z5=a("li"),P5e=a("strong"),Njr=o("bert"),qjr=o(" \u2014 "),gee=a("a"),jjr=o("TFBertForQuestionAnswering"),Djr=o(" (BERT model)"),Gjr=l(),W5=a("li"),B5e=a("strong"),Ojr=o("camembert"),Vjr=o(" \u2014 "),hee=a("a"),Xjr=o("TFCamembertForQuestionAnswering"),zjr=o(" (CamemBERT model)"),Wjr=l(),Q5=a("li"),I5e=a("strong"),Qjr=o("convbert"),Hjr=o(" \u2014 "),pee=a("a"),Ujr=o("TFConvBertForQuestionAnswering"),Jjr=o(" (ConvBERT model)"),Yjr=l(),H5=a("li"),N5e=a("strong"),Kjr=o("deberta"),Zjr=o(" \u2014 "),_ee=a("a"),eDr=o("TFDebertaForQuestionAnswering"),oDr=o(" (DeBERTa model)"),rDr=l(),U5=a("li"),q5e=a("strong"),tDr=o("deberta-v2"),aDr=o(" \u2014 "),uee=a("a"),nDr=o("TFDebertaV2ForQuestionAnswering"),sDr=o(" (DeBERTa-v2 model)"),lDr=l(),J5=a("li"),j5e=a("strong"),iDr=o("distilbert"),dDr=o(" \u2014 "),bee=a("a"),cDr=o("TFDistilBertForQuestionAnswering"),fDr=o(" (DistilBERT model)"),mDr=l(),Y5=a("li"),D5e=a("strong"),gDr=o("electra"),hDr=o(" \u2014 "),vee=a("a"),pDr=o("TFElectraForQuestionAnswering"),_Dr=o(" (ELECTRA model)"),uDr=l(),K5=a("li"),G5e=a("strong"),bDr=o("flaubert"),vDr=o(" \u2014 "),Fee=a("a"),FDr=o("TFFlaubertForQuestionAnsweringSimple"),TDr=o(" (FlauBERT model)"),MDr=l(),Z5=a("li"),O5e=a("strong"),EDr=o("funnel"),CDr=o(" \u2014 "),Tee=a("a"),wDr=o("TFFunnelForQuestionAnswering"),ADr=o(" (Funnel Transformer model)"),LDr=l(),e3=a("li"),V5e=a("strong"),yDr=o("gptj"),xDr=o(" \u2014 "),Mee=a("a"),$Dr=o("TFGPTJForQuestionAnswering"),kDr=o(" (GPT-J model)"),SDr=l(),o3=a("li"),X5e=a("strong"),RDr=o("longformer"),PDr=o(" \u2014 "),Eee=a("a"),BDr=o("TFLongformerForQuestionAnswering"),IDr=o(" (Longformer model)"),NDr=l(),r3=a("li"),z5e=a("strong"),qDr=o("mobilebert"),jDr=o(" \u2014 "),Cee=a("a"),DDr=o("TFMobileBertForQuestionAnswering"),GDr=o(" (MobileBERT model)"),ODr=l(),t3=a("li"),W5e=a("strong"),VDr=o("mpnet"),XDr=o(" \u2014 "),wee=a("a"),zDr=o("TFMPNetForQuestionAnswering"),WDr=o(" (MPNet model)"),QDr=l(),a3=a("li"),Q5e=a("strong"),HDr=o("rembert"),UDr=o(" \u2014 "),Aee=a("a"),JDr=o("TFRemBertForQuestionAnswering"),YDr=o(" (RemBERT model)"),KDr=l(),n3=a("li"),H5e=a("strong"),ZDr=o("roberta"),eGr=o(" \u2014 "),Lee=a("a"),oGr=o("TFRobertaForQuestionAnswering"),rGr=o(" (RoBERTa model)"),tGr=l(),s3=a("li"),U5e=a("strong"),aGr=o("roformer"),nGr=o(" \u2014 "),yee=a("a"),sGr=o("TFRoFormerForQuestionAnswering"),lGr=o(" (RoFormer model)"),iGr=l(),l3=a("li"),J5e=a("strong"),dGr=o("xlm"),cGr=o(" \u2014 "),xee=a("a"),fGr=o("TFXLMForQuestionAnsweringSimple"),mGr=o(" (XLM model)"),gGr=l(),i3=a("li"),Y5e=a("strong"),hGr=o("xlm-roberta"),pGr=o(" \u2014 "),$ee=a("a"),_Gr=o("TFXLMRobertaForQuestionAnswering"),uGr=o(" (XLM-RoBERTa model)"),bGr=l(),d3=a("li"),K5e=a("strong"),vGr=o("xlnet"),FGr=o(" \u2014 "),kee=a("a"),TGr=o("TFXLNetForQuestionAnsweringSimple"),MGr=o(" (XLNet model)"),EGr=l(),F(c3.$$.fragment),sQe=l(),Xc=a("h2"),f3=a("a"),Z5e=a("span"),F(v$.$$.fragment),CGr=l(),e3e=a("span"),wGr=o("TFAutoModelForVision2Seq"),lQe=l(),hr=a("div"),F(F$.$$.fragment),AGr=l(),zc=a("p"),LGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),See=a("a"),yGr=o("from_pretrained()"),xGr=o(" class method or the "),Ree=a("a"),$Gr=o("from_config()"),kGr=o(` class
method.`),SGr=l(),T$=a("p"),RGr=o("This class cannot be instantiated directly using "),o3e=a("code"),PGr=o("__init__()"),BGr=o(" (throws an error)."),IGr=l(),zt=a("div"),F(M$.$$.fragment),NGr=l(),r3e=a("p"),qGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jGr=l(),Wc=a("p"),DGr=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),GGr=o("not"),OGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),VGr=o("from_pretrained()"),XGr=o(" to load the model weights."),zGr=l(),F(m3.$$.fragment),WGr=l(),Or=a("div"),F(E$.$$.fragment),QGr=l(),a3e=a("p"),HGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UGr=l(),Fn=a("p"),JGr=o("The model class to instantiate is selected based on the "),n3e=a("code"),YGr=o("model_type"),KGr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),ZGr=o("pretrained_model_name_or_path"),eOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),oOr=o("pretrained_model_name_or_path"),rOr=o(":"),tOr=l(),i3e=a("ul"),g3=a("li"),d3e=a("strong"),aOr=o("vision-encoder-decoder"),nOr=o(" \u2014 "),Bee=a("a"),sOr=o("TFVisionEncoderDecoderModel"),lOr=o(" (Vision Encoder decoder model)"),iOr=l(),F(h3.$$.fragment),iQe=l(),Qc=a("h2"),p3=a("a"),c3e=a("span"),F(C$.$$.fragment),dOr=l(),f3e=a("span"),cOr=o("TFAutoModelForSpeechSeq2Seq"),dQe=l(),pr=a("div"),F(w$.$$.fragment),fOr=l(),Hc=a("p"),mOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iee=a("a"),gOr=o("from_pretrained()"),hOr=o(" class method or the "),Nee=a("a"),pOr=o("from_config()"),_Or=o(` class
method.`),uOr=l(),A$=a("p"),bOr=o("This class cannot be instantiated directly using "),m3e=a("code"),vOr=o("__init__()"),FOr=o(" (throws an error)."),TOr=l(),Wt=a("div"),F(L$.$$.fragment),MOr=l(),g3e=a("p"),EOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),COr=l(),Uc=a("p"),wOr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),AOr=o("not"),LOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),yOr=o("from_pretrained()"),xOr=o(" to load the model weights."),$Or=l(),F(_3.$$.fragment),kOr=l(),Vr=a("div"),F(y$.$$.fragment),SOr=l(),p3e=a("p"),ROr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),POr=l(),Tn=a("p"),BOr=o("The model class to instantiate is selected based on the "),_3e=a("code"),IOr=o("model_type"),NOr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),DOr=o("pretrained_model_name_or_path"),GOr=o(":"),OOr=l(),v3e=a("ul"),u3=a("li"),F3e=a("strong"),VOr=o("speech_to_text"),XOr=o(" \u2014 "),jee=a("a"),zOr=o("TFSpeech2TextForConditionalGeneration"),WOr=o(" (Speech2Text model)"),QOr=l(),F(b3.$$.fragment),cQe=l(),Jc=a("h2"),v3=a("a"),T3e=a("span"),F(x$.$$.fragment),HOr=l(),M3e=a("span"),UOr=o("FlaxAutoModel"),fQe=l(),_r=a("div"),F($$.$$.fragment),JOr=l(),Yc=a("p"),YOr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Dee=a("a"),KOr=o("from_pretrained()"),ZOr=o(" class method or the "),Gee=a("a"),eVr=o("from_config()"),oVr=o(` class
method.`),rVr=l(),k$=a("p"),tVr=o("This class cannot be instantiated directly using "),E3e=a("code"),aVr=o("__init__()"),nVr=o(" (throws an error)."),sVr=l(),Qt=a("div"),F(S$.$$.fragment),lVr=l(),C3e=a("p"),iVr=o("Instantiates one of the base model classes of the library from a configuration."),dVr=l(),Kc=a("p"),cVr=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),fVr=o("not"),mVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=a("a"),gVr=o("from_pretrained()"),hVr=o(" to load the model weights."),pVr=l(),F(F3.$$.fragment),_Vr=l(),Xr=a("div"),F(R$.$$.fragment),uVr=l(),A3e=a("p"),bVr=o("Instantiate one of the base model classes of the library from a pretrained model."),vVr=l(),Mn=a("p"),FVr=o("The model class to instantiate is selected based on the "),L3e=a("code"),TVr=o("model_type"),MVr=o(` property of the config object (either
passed as an argument or loaded from `),y3e=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),wVr=o("pretrained_model_name_or_path"),AVr=o(":"),LVr=l(),oe=a("ul"),T3=a("li"),$3e=a("strong"),yVr=o("albert"),xVr=o(" \u2014 "),Vee=a("a"),$Vr=o("FlaxAlbertModel"),kVr=o(" (ALBERT model)"),SVr=l(),M3=a("li"),k3e=a("strong"),RVr=o("bart"),PVr=o(" \u2014 "),Xee=a("a"),BVr=o("FlaxBartModel"),IVr=o(" (BART model)"),NVr=l(),E3=a("li"),S3e=a("strong"),qVr=o("beit"),jVr=o(" \u2014 "),zee=a("a"),DVr=o("FlaxBeitModel"),GVr=o(" (BEiT model)"),OVr=l(),C3=a("li"),R3e=a("strong"),VVr=o("bert"),XVr=o(" \u2014 "),Wee=a("a"),zVr=o("FlaxBertModel"),WVr=o(" (BERT model)"),QVr=l(),w3=a("li"),P3e=a("strong"),HVr=o("big_bird"),UVr=o(" \u2014 "),Qee=a("a"),JVr=o("FlaxBigBirdModel"),YVr=o(" (BigBird model)"),KVr=l(),A3=a("li"),B3e=a("strong"),ZVr=o("blenderbot"),eXr=o(" \u2014 "),Hee=a("a"),oXr=o("FlaxBlenderbotModel"),rXr=o(" (Blenderbot model)"),tXr=l(),L3=a("li"),I3e=a("strong"),aXr=o("blenderbot-small"),nXr=o(" \u2014 "),Uee=a("a"),sXr=o("FlaxBlenderbotSmallModel"),lXr=o(" (BlenderbotSmall model)"),iXr=l(),y3=a("li"),N3e=a("strong"),dXr=o("clip"),cXr=o(" \u2014 "),Jee=a("a"),fXr=o("FlaxCLIPModel"),mXr=o(" (CLIP model)"),gXr=l(),x3=a("li"),q3e=a("strong"),hXr=o("distilbert"),pXr=o(" \u2014 "),Yee=a("a"),_Xr=o("FlaxDistilBertModel"),uXr=o(" (DistilBERT model)"),bXr=l(),$3=a("li"),j3e=a("strong"),vXr=o("electra"),FXr=o(" \u2014 "),Kee=a("a"),TXr=o("FlaxElectraModel"),MXr=o(" (ELECTRA model)"),EXr=l(),k3=a("li"),D3e=a("strong"),CXr=o("gpt2"),wXr=o(" \u2014 "),Zee=a("a"),AXr=o("FlaxGPT2Model"),LXr=o(" (OpenAI GPT-2 model)"),yXr=l(),S3=a("li"),G3e=a("strong"),xXr=o("gpt_neo"),$Xr=o(" \u2014 "),eoe=a("a"),kXr=o("FlaxGPTNeoModel"),SXr=o(" (GPT Neo model)"),RXr=l(),R3=a("li"),O3e=a("strong"),PXr=o("gptj"),BXr=o(" \u2014 "),ooe=a("a"),IXr=o("FlaxGPTJModel"),NXr=o(" (GPT-J model)"),qXr=l(),P3=a("li"),V3e=a("strong"),jXr=o("longt5"),DXr=o(" \u2014 "),roe=a("a"),GXr=o("FlaxLongT5Model"),OXr=o(" (LongT5 model)"),VXr=l(),B3=a("li"),X3e=a("strong"),XXr=o("marian"),zXr=o(" \u2014 "),toe=a("a"),WXr=o("FlaxMarianModel"),QXr=o(" (Marian model)"),HXr=l(),I3=a("li"),z3e=a("strong"),UXr=o("mbart"),JXr=o(" \u2014 "),aoe=a("a"),YXr=o("FlaxMBartModel"),KXr=o(" (mBART model)"),ZXr=l(),N3=a("li"),W3e=a("strong"),ezr=o("mt5"),ozr=o(" \u2014 "),noe=a("a"),rzr=o("FlaxMT5Model"),tzr=o(" (MT5 model)"),azr=l(),q3=a("li"),Q3e=a("strong"),nzr=o("opt"),szr=o(" \u2014 "),soe=a("a"),lzr=o("FlaxOPTModel"),izr=o(" (OPT model)"),dzr=l(),j3=a("li"),H3e=a("strong"),czr=o("pegasus"),fzr=o(" \u2014 "),loe=a("a"),mzr=o("FlaxPegasusModel"),gzr=o(" (Pegasus model)"),hzr=l(),D3=a("li"),U3e=a("strong"),pzr=o("roberta"),_zr=o(" \u2014 "),ioe=a("a"),uzr=o("FlaxRobertaModel"),bzr=o(" (RoBERTa model)"),vzr=l(),G3=a("li"),J3e=a("strong"),Fzr=o("roformer"),Tzr=o(" \u2014 "),doe=a("a"),Mzr=o("FlaxRoFormerModel"),Ezr=o(" (RoFormer model)"),Czr=l(),O3=a("li"),Y3e=a("strong"),wzr=o("t5"),Azr=o(" \u2014 "),coe=a("a"),Lzr=o("FlaxT5Model"),yzr=o(" (T5 model)"),xzr=l(),V3=a("li"),K3e=a("strong"),$zr=o("vision-text-dual-encoder"),kzr=o(" \u2014 "),foe=a("a"),Szr=o("FlaxVisionTextDualEncoderModel"),Rzr=o(" (VisionTextDualEncoder model)"),Pzr=l(),X3=a("li"),Z3e=a("strong"),Bzr=o("vit"),Izr=o(" \u2014 "),moe=a("a"),Nzr=o("FlaxViTModel"),qzr=o(" (ViT model)"),jzr=l(),z3=a("li"),ewe=a("strong"),Dzr=o("wav2vec2"),Gzr=o(" \u2014 "),goe=a("a"),Ozr=o("FlaxWav2Vec2Model"),Vzr=o(" (Wav2Vec2 model)"),Xzr=l(),W3=a("li"),owe=a("strong"),zzr=o("xglm"),Wzr=o(" \u2014 "),hoe=a("a"),Qzr=o("FlaxXGLMModel"),Hzr=o(" (XGLM model)"),Uzr=l(),Q3=a("li"),rwe=a("strong"),Jzr=o("xlm-roberta"),Yzr=o(" \u2014 "),poe=a("a"),Kzr=o("FlaxXLMRobertaModel"),Zzr=o(" (XLM-RoBERTa model)"),eWr=l(),F(H3.$$.fragment),mQe=l(),Zc=a("h2"),U3=a("a"),twe=a("span"),F(P$.$$.fragment),oWr=l(),awe=a("span"),rWr=o("FlaxAutoModelForCausalLM"),gQe=l(),ur=a("div"),F(B$.$$.fragment),tWr=l(),ef=a("p"),aWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_oe=a("a"),nWr=o("from_pretrained()"),sWr=o(" class method or the "),uoe=a("a"),lWr=o("from_config()"),iWr=o(` class
method.`),dWr=l(),I$=a("p"),cWr=o("This class cannot be instantiated directly using "),nwe=a("code"),fWr=o("__init__()"),mWr=o(" (throws an error)."),gWr=l(),Ht=a("div"),F(N$.$$.fragment),hWr=l(),swe=a("p"),pWr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Wr=l(),of=a("p"),uWr=o(`Note:
Loading a model from its configuration file does `),lwe=a("strong"),bWr=o("not"),vWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),FWr=o("from_pretrained()"),TWr=o(" to load the model weights."),MWr=l(),F(J3.$$.fragment),EWr=l(),zr=a("div"),F(q$.$$.fragment),CWr=l(),iwe=a("p"),wWr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AWr=l(),En=a("p"),LWr=o("The model class to instantiate is selected based on the "),dwe=a("code"),yWr=o("model_type"),xWr=o(` property of the config object (either
passed as an argument or loaded from `),cwe=a("code"),$Wr=o("pretrained_model_name_or_path"),kWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=a("code"),SWr=o("pretrained_model_name_or_path"),RWr=o(":"),PWr=l(),xe=a("ul"),Y3=a("li"),mwe=a("strong"),BWr=o("bart"),IWr=o(" \u2014 "),voe=a("a"),NWr=o("FlaxBartForCausalLM"),qWr=o(" (BART model)"),jWr=l(),K3=a("li"),gwe=a("strong"),DWr=o("bert"),GWr=o(" \u2014 "),Foe=a("a"),OWr=o("FlaxBertForCausalLM"),VWr=o(" (BERT model)"),XWr=l(),Z3=a("li"),hwe=a("strong"),zWr=o("big_bird"),WWr=o(" \u2014 "),Toe=a("a"),QWr=o("FlaxBigBirdForCausalLM"),HWr=o(" (BigBird model)"),UWr=l(),ew=a("li"),pwe=a("strong"),JWr=o("electra"),YWr=o(" \u2014 "),Moe=a("a"),KWr=o("FlaxElectraForCausalLM"),ZWr=o(" (ELECTRA model)"),eQr=l(),ow=a("li"),_we=a("strong"),oQr=o("gpt2"),rQr=o(" \u2014 "),Eoe=a("a"),tQr=o("FlaxGPT2LMHeadModel"),aQr=o(" (OpenAI GPT-2 model)"),nQr=l(),rw=a("li"),uwe=a("strong"),sQr=o("gpt_neo"),lQr=o(" \u2014 "),Coe=a("a"),iQr=o("FlaxGPTNeoForCausalLM"),dQr=o(" (GPT Neo model)"),cQr=l(),tw=a("li"),bwe=a("strong"),fQr=o("gptj"),mQr=o(" \u2014 "),woe=a("a"),gQr=o("FlaxGPTJForCausalLM"),hQr=o(" (GPT-J model)"),pQr=l(),aw=a("li"),vwe=a("strong"),_Qr=o("opt"),uQr=o(" \u2014 "),Aoe=a("a"),bQr=o("FlaxOPTForCausalLM"),vQr=o(" (OPT model)"),FQr=l(),nw=a("li"),Fwe=a("strong"),TQr=o("roberta"),MQr=o(" \u2014 "),Loe=a("a"),EQr=o("FlaxRobertaForCausalLM"),CQr=o(" (RoBERTa model)"),wQr=l(),sw=a("li"),Twe=a("strong"),AQr=o("xglm"),LQr=o(" \u2014 "),yoe=a("a"),yQr=o("FlaxXGLMForCausalLM"),xQr=o(" (XGLM model)"),$Qr=l(),F(lw.$$.fragment),hQe=l(),rf=a("h2"),iw=a("a"),Mwe=a("span"),F(j$.$$.fragment),kQr=l(),Ewe=a("span"),SQr=o("FlaxAutoModelForPreTraining"),pQe=l(),br=a("div"),F(D$.$$.fragment),RQr=l(),tf=a("p"),PQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xoe=a("a"),BQr=o("from_pretrained()"),IQr=o(" class method or the "),$oe=a("a"),NQr=o("from_config()"),qQr=o(` class
method.`),jQr=l(),G$=a("p"),DQr=o("This class cannot be instantiated directly using "),Cwe=a("code"),GQr=o("__init__()"),OQr=o(" (throws an error)."),VQr=l(),Ut=a("div"),F(O$.$$.fragment),XQr=l(),wwe=a("p"),zQr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WQr=l(),af=a("p"),QQr=o(`Note:
Loading a model from its configuration file does `),Awe=a("strong"),HQr=o("not"),UQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("a"),JQr=o("from_pretrained()"),YQr=o(" to load the model weights."),KQr=l(),F(dw.$$.fragment),ZQr=l(),Wr=a("div"),F(V$.$$.fragment),eHr=l(),Lwe=a("p"),oHr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rHr=l(),Cn=a("p"),tHr=o("The model class to instantiate is selected based on the "),ywe=a("code"),aHr=o("model_type"),nHr=o(` property of the config object (either
passed as an argument or loaded from `),xwe=a("code"),sHr=o("pretrained_model_name_or_path"),lHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=a("code"),iHr=o("pretrained_model_name_or_path"),dHr=o(":"),cHr=l(),Ee=a("ul"),cw=a("li"),kwe=a("strong"),fHr=o("albert"),mHr=o(" \u2014 "),Soe=a("a"),gHr=o("FlaxAlbertForPreTraining"),hHr=o(" (ALBERT model)"),pHr=l(),fw=a("li"),Swe=a("strong"),_Hr=o("bart"),uHr=o(" \u2014 "),Roe=a("a"),bHr=o("FlaxBartForConditionalGeneration"),vHr=o(" (BART model)"),FHr=l(),mw=a("li"),Rwe=a("strong"),THr=o("bert"),MHr=o(" \u2014 "),Poe=a("a"),EHr=o("FlaxBertForPreTraining"),CHr=o(" (BERT model)"),wHr=l(),gw=a("li"),Pwe=a("strong"),AHr=o("big_bird"),LHr=o(" \u2014 "),Boe=a("a"),yHr=o("FlaxBigBirdForPreTraining"),xHr=o(" (BigBird model)"),$Hr=l(),hw=a("li"),Bwe=a("strong"),kHr=o("electra"),SHr=o(" \u2014 "),Ioe=a("a"),RHr=o("FlaxElectraForPreTraining"),PHr=o(" (ELECTRA model)"),BHr=l(),pw=a("li"),Iwe=a("strong"),IHr=o("longt5"),NHr=o(" \u2014 "),Noe=a("a"),qHr=o("FlaxLongT5ForConditionalGeneration"),jHr=o(" (LongT5 model)"),DHr=l(),_w=a("li"),Nwe=a("strong"),GHr=o("mbart"),OHr=o(" \u2014 "),qoe=a("a"),VHr=o("FlaxMBartForConditionalGeneration"),XHr=o(" (mBART model)"),zHr=l(),uw=a("li"),qwe=a("strong"),WHr=o("mt5"),QHr=o(" \u2014 "),joe=a("a"),HHr=o("FlaxMT5ForConditionalGeneration"),UHr=o(" (MT5 model)"),JHr=l(),bw=a("li"),jwe=a("strong"),YHr=o("roberta"),KHr=o(" \u2014 "),Doe=a("a"),ZHr=o("FlaxRobertaForMaskedLM"),eUr=o(" (RoBERTa model)"),oUr=l(),vw=a("li"),Dwe=a("strong"),rUr=o("roformer"),tUr=o(" \u2014 "),Goe=a("a"),aUr=o("FlaxRoFormerForMaskedLM"),nUr=o(" (RoFormer model)"),sUr=l(),Fw=a("li"),Gwe=a("strong"),lUr=o("t5"),iUr=o(" \u2014 "),Ooe=a("a"),dUr=o("FlaxT5ForConditionalGeneration"),cUr=o(" (T5 model)"),fUr=l(),Tw=a("li"),Owe=a("strong"),mUr=o("wav2vec2"),gUr=o(" \u2014 "),Voe=a("a"),hUr=o("FlaxWav2Vec2ForPreTraining"),pUr=o(" (Wav2Vec2 model)"),_Ur=l(),Mw=a("li"),Vwe=a("strong"),uUr=o("xlm-roberta"),bUr=o(" \u2014 "),Xoe=a("a"),vUr=o("FlaxXLMRobertaForMaskedLM"),FUr=o(" (XLM-RoBERTa model)"),TUr=l(),F(Ew.$$.fragment),_Qe=l(),nf=a("h2"),Cw=a("a"),Xwe=a("span"),F(X$.$$.fragment),MUr=l(),zwe=a("span"),EUr=o("FlaxAutoModelForMaskedLM"),uQe=l(),vr=a("div"),F(z$.$$.fragment),CUr=l(),sf=a("p"),wUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zoe=a("a"),AUr=o("from_pretrained()"),LUr=o(" class method or the "),Woe=a("a"),yUr=o("from_config()"),xUr=o(` class
method.`),$Ur=l(),W$=a("p"),kUr=o("This class cannot be instantiated directly using "),Wwe=a("code"),SUr=o("__init__()"),RUr=o(" (throws an error)."),PUr=l(),Jt=a("div"),F(Q$.$$.fragment),BUr=l(),Qwe=a("p"),IUr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NUr=l(),lf=a("p"),qUr=o(`Note:
Loading a model from its configuration file does `),Hwe=a("strong"),jUr=o("not"),DUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=a("a"),GUr=o("from_pretrained()"),OUr=o(" to load the model weights."),VUr=l(),F(ww.$$.fragment),XUr=l(),Qr=a("div"),F(H$.$$.fragment),zUr=l(),Uwe=a("p"),WUr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QUr=l(),wn=a("p"),HUr=o("The model class to instantiate is selected based on the "),Jwe=a("code"),UUr=o("model_type"),JUr=o(` property of the config object (either
passed as an argument or loaded from `),Ywe=a("code"),YUr=o("pretrained_model_name_or_path"),KUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kwe=a("code"),ZUr=o("pretrained_model_name_or_path"),eJr=o(":"),oJr=l(),$e=a("ul"),Aw=a("li"),Zwe=a("strong"),rJr=o("albert"),tJr=o(" \u2014 "),Hoe=a("a"),aJr=o("FlaxAlbertForMaskedLM"),nJr=o(" (ALBERT model)"),sJr=l(),Lw=a("li"),e6e=a("strong"),lJr=o("bart"),iJr=o(" \u2014 "),Uoe=a("a"),dJr=o("FlaxBartForConditionalGeneration"),cJr=o(" (BART model)"),fJr=l(),yw=a("li"),o6e=a("strong"),mJr=o("bert"),gJr=o(" \u2014 "),Joe=a("a"),hJr=o("FlaxBertForMaskedLM"),pJr=o(" (BERT model)"),_Jr=l(),xw=a("li"),r6e=a("strong"),uJr=o("big_bird"),bJr=o(" \u2014 "),Yoe=a("a"),vJr=o("FlaxBigBirdForMaskedLM"),FJr=o(" (BigBird model)"),TJr=l(),$w=a("li"),t6e=a("strong"),MJr=o("distilbert"),EJr=o(" \u2014 "),Koe=a("a"),CJr=o("FlaxDistilBertForMaskedLM"),wJr=o(" (DistilBERT model)"),AJr=l(),kw=a("li"),a6e=a("strong"),LJr=o("electra"),yJr=o(" \u2014 "),Zoe=a("a"),xJr=o("FlaxElectraForMaskedLM"),$Jr=o(" (ELECTRA model)"),kJr=l(),Sw=a("li"),n6e=a("strong"),SJr=o("mbart"),RJr=o(" \u2014 "),ere=a("a"),PJr=o("FlaxMBartForConditionalGeneration"),BJr=o(" (mBART model)"),IJr=l(),Rw=a("li"),s6e=a("strong"),NJr=o("roberta"),qJr=o(" \u2014 "),ore=a("a"),jJr=o("FlaxRobertaForMaskedLM"),DJr=o(" (RoBERTa model)"),GJr=l(),Pw=a("li"),l6e=a("strong"),OJr=o("roformer"),VJr=o(" \u2014 "),rre=a("a"),XJr=o("FlaxRoFormerForMaskedLM"),zJr=o(" (RoFormer model)"),WJr=l(),Bw=a("li"),i6e=a("strong"),QJr=o("xlm-roberta"),HJr=o(" \u2014 "),tre=a("a"),UJr=o("FlaxXLMRobertaForMaskedLM"),JJr=o(" (XLM-RoBERTa model)"),YJr=l(),F(Iw.$$.fragment),bQe=l(),df=a("h2"),Nw=a("a"),d6e=a("span"),F(U$.$$.fragment),KJr=l(),c6e=a("span"),ZJr=o("FlaxAutoModelForSeq2SeqLM"),vQe=l(),Fr=a("div"),F(J$.$$.fragment),eYr=l(),cf=a("p"),oYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),are=a("a"),rYr=o("from_pretrained()"),tYr=o(" class method or the "),nre=a("a"),aYr=o("from_config()"),nYr=o(` class
method.`),sYr=l(),Y$=a("p"),lYr=o("This class cannot be instantiated directly using "),f6e=a("code"),iYr=o("__init__()"),dYr=o(" (throws an error)."),cYr=l(),Yt=a("div"),F(K$.$$.fragment),fYr=l(),m6e=a("p"),mYr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gYr=l(),ff=a("p"),hYr=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),pYr=o("not"),_Yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=a("a"),uYr=o("from_pretrained()"),bYr=o(" to load the model weights."),vYr=l(),F(qw.$$.fragment),FYr=l(),Hr=a("div"),F(Z$.$$.fragment),TYr=l(),h6e=a("p"),MYr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EYr=l(),An=a("p"),CYr=o("The model class to instantiate is selected based on the "),p6e=a("code"),wYr=o("model_type"),AYr=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),LYr=o("pretrained_model_name_or_path"),yYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),xYr=o("pretrained_model_name_or_path"),$Yr=o(":"),kYr=l(),ke=a("ul"),jw=a("li"),b6e=a("strong"),SYr=o("bart"),RYr=o(" \u2014 "),lre=a("a"),PYr=o("FlaxBartForConditionalGeneration"),BYr=o(" (BART model)"),IYr=l(),Dw=a("li"),v6e=a("strong"),NYr=o("blenderbot"),qYr=o(" \u2014 "),ire=a("a"),jYr=o("FlaxBlenderbotForConditionalGeneration"),DYr=o(" (Blenderbot model)"),GYr=l(),Gw=a("li"),F6e=a("strong"),OYr=o("blenderbot-small"),VYr=o(" \u2014 "),dre=a("a"),XYr=o("FlaxBlenderbotSmallForConditionalGeneration"),zYr=o(" (BlenderbotSmall model)"),WYr=l(),Ow=a("li"),T6e=a("strong"),QYr=o("encoder-decoder"),HYr=o(" \u2014 "),cre=a("a"),UYr=o("FlaxEncoderDecoderModel"),JYr=o(" (Encoder decoder model)"),YYr=l(),Vw=a("li"),M6e=a("strong"),KYr=o("longt5"),ZYr=o(" \u2014 "),fre=a("a"),eKr=o("FlaxLongT5ForConditionalGeneration"),oKr=o(" (LongT5 model)"),rKr=l(),Xw=a("li"),E6e=a("strong"),tKr=o("marian"),aKr=o(" \u2014 "),mre=a("a"),nKr=o("FlaxMarianMTModel"),sKr=o(" (Marian model)"),lKr=l(),zw=a("li"),C6e=a("strong"),iKr=o("mbart"),dKr=o(" \u2014 "),gre=a("a"),cKr=o("FlaxMBartForConditionalGeneration"),fKr=o(" (mBART model)"),mKr=l(),Ww=a("li"),w6e=a("strong"),gKr=o("mt5"),hKr=o(" \u2014 "),hre=a("a"),pKr=o("FlaxMT5ForConditionalGeneration"),_Kr=o(" (MT5 model)"),uKr=l(),Qw=a("li"),A6e=a("strong"),bKr=o("pegasus"),vKr=o(" \u2014 "),pre=a("a"),FKr=o("FlaxPegasusForConditionalGeneration"),TKr=o(" (Pegasus model)"),MKr=l(),Hw=a("li"),L6e=a("strong"),EKr=o("t5"),CKr=o(" \u2014 "),_re=a("a"),wKr=o("FlaxT5ForConditionalGeneration"),AKr=o(" (T5 model)"),LKr=l(),F(Uw.$$.fragment),FQe=l(),mf=a("h2"),Jw=a("a"),y6e=a("span"),F(ek.$$.fragment),yKr=l(),x6e=a("span"),xKr=o("FlaxAutoModelForSequenceClassification"),TQe=l(),Tr=a("div"),F(ok.$$.fragment),$Kr=l(),gf=a("p"),kKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ure=a("a"),SKr=o("from_pretrained()"),RKr=o(" class method or the "),bre=a("a"),PKr=o("from_config()"),BKr=o(` class
method.`),IKr=l(),rk=a("p"),NKr=o("This class cannot be instantiated directly using "),$6e=a("code"),qKr=o("__init__()"),jKr=o(" (throws an error)."),DKr=l(),Kt=a("div"),F(tk.$$.fragment),GKr=l(),k6e=a("p"),OKr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VKr=l(),hf=a("p"),XKr=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),zKr=o("not"),WKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=a("a"),QKr=o("from_pretrained()"),HKr=o(" to load the model weights."),UKr=l(),F(Yw.$$.fragment),JKr=l(),Ur=a("div"),F(ak.$$.fragment),YKr=l(),R6e=a("p"),KKr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZKr=l(),Ln=a("p"),eZr=o("The model class to instantiate is selected based on the "),P6e=a("code"),oZr=o("model_type"),rZr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),tZr=o("pretrained_model_name_or_path"),aZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),nZr=o("pretrained_model_name_or_path"),sZr=o(":"),lZr=l(),Se=a("ul"),Kw=a("li"),N6e=a("strong"),iZr=o("albert"),dZr=o(" \u2014 "),Fre=a("a"),cZr=o("FlaxAlbertForSequenceClassification"),fZr=o(" (ALBERT model)"),mZr=l(),Zw=a("li"),q6e=a("strong"),gZr=o("bart"),hZr=o(" \u2014 "),Tre=a("a"),pZr=o("FlaxBartForSequenceClassification"),_Zr=o(" (BART model)"),uZr=l(),e6=a("li"),j6e=a("strong"),bZr=o("bert"),vZr=o(" \u2014 "),Mre=a("a"),FZr=o("FlaxBertForSequenceClassification"),TZr=o(" (BERT model)"),MZr=l(),o6=a("li"),D6e=a("strong"),EZr=o("big_bird"),CZr=o(" \u2014 "),Ere=a("a"),wZr=o("FlaxBigBirdForSequenceClassification"),AZr=o(" (BigBird model)"),LZr=l(),r6=a("li"),G6e=a("strong"),yZr=o("distilbert"),xZr=o(" \u2014 "),Cre=a("a"),$Zr=o("FlaxDistilBertForSequenceClassification"),kZr=o(" (DistilBERT model)"),SZr=l(),t6=a("li"),O6e=a("strong"),RZr=o("electra"),PZr=o(" \u2014 "),wre=a("a"),BZr=o("FlaxElectraForSequenceClassification"),IZr=o(" (ELECTRA model)"),NZr=l(),a6=a("li"),V6e=a("strong"),qZr=o("mbart"),jZr=o(" \u2014 "),Are=a("a"),DZr=o("FlaxMBartForSequenceClassification"),GZr=o(" (mBART model)"),OZr=l(),n6=a("li"),X6e=a("strong"),VZr=o("roberta"),XZr=o(" \u2014 "),Lre=a("a"),zZr=o("FlaxRobertaForSequenceClassification"),WZr=o(" (RoBERTa model)"),QZr=l(),s6=a("li"),z6e=a("strong"),HZr=o("roformer"),UZr=o(" \u2014 "),yre=a("a"),JZr=o("FlaxRoFormerForSequenceClassification"),YZr=o(" (RoFormer model)"),KZr=l(),l6=a("li"),W6e=a("strong"),ZZr=o("xlm-roberta"),eet=o(" \u2014 "),xre=a("a"),oet=o("FlaxXLMRobertaForSequenceClassification"),ret=o(" (XLM-RoBERTa model)"),tet=l(),F(i6.$$.fragment),MQe=l(),pf=a("h2"),d6=a("a"),Q6e=a("span"),F(nk.$$.fragment),aet=l(),H6e=a("span"),net=o("FlaxAutoModelForQuestionAnswering"),EQe=l(),Mr=a("div"),F(sk.$$.fragment),set=l(),_f=a("p"),iet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$re=a("a"),det=o("from_pretrained()"),cet=o(" class method or the "),kre=a("a"),fet=o("from_config()"),met=o(` class
method.`),get=l(),lk=a("p"),het=o("This class cannot be instantiated directly using "),U6e=a("code"),pet=o("__init__()"),_et=o(" (throws an error)."),uet=l(),Zt=a("div"),F(ik.$$.fragment),bet=l(),J6e=a("p"),vet=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fet=l(),uf=a("p"),Tet=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),Met=o("not"),Eet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=a("a"),Cet=o("from_pretrained()"),wet=o(" to load the model weights."),Aet=l(),F(c6.$$.fragment),Let=l(),Jr=a("div"),F(dk.$$.fragment),yet=l(),K6e=a("p"),xet=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$et=l(),yn=a("p"),ket=o("The model class to instantiate is selected based on the "),Z6e=a("code"),Set=o("model_type"),Ret=o(` property of the config object (either
passed as an argument or loaded from `),eAe=a("code"),Pet=o("pretrained_model_name_or_path"),Bet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=a("code"),Iet=o("pretrained_model_name_or_path"),Net=o(":"),qet=l(),Re=a("ul"),f6=a("li"),rAe=a("strong"),jet=o("albert"),Det=o(" \u2014 "),Rre=a("a"),Get=o("FlaxAlbertForQuestionAnswering"),Oet=o(" (ALBERT model)"),Vet=l(),m6=a("li"),tAe=a("strong"),Xet=o("bart"),zet=o(" \u2014 "),Pre=a("a"),Wet=o("FlaxBartForQuestionAnswering"),Qet=o(" (BART model)"),Het=l(),g6=a("li"),aAe=a("strong"),Uet=o("bert"),Jet=o(" \u2014 "),Bre=a("a"),Yet=o("FlaxBertForQuestionAnswering"),Ket=o(" (BERT model)"),Zet=l(),h6=a("li"),nAe=a("strong"),eot=o("big_bird"),oot=o(" \u2014 "),Ire=a("a"),rot=o("FlaxBigBirdForQuestionAnswering"),tot=o(" (BigBird model)"),aot=l(),p6=a("li"),sAe=a("strong"),not=o("distilbert"),sot=o(" \u2014 "),Nre=a("a"),lot=o("FlaxDistilBertForQuestionAnswering"),iot=o(" (DistilBERT model)"),dot=l(),_6=a("li"),lAe=a("strong"),cot=o("electra"),fot=o(" \u2014 "),qre=a("a"),mot=o("FlaxElectraForQuestionAnswering"),got=o(" (ELECTRA model)"),hot=l(),u6=a("li"),iAe=a("strong"),pot=o("mbart"),_ot=o(" \u2014 "),jre=a("a"),uot=o("FlaxMBartForQuestionAnswering"),bot=o(" (mBART model)"),vot=l(),b6=a("li"),dAe=a("strong"),Fot=o("roberta"),Tot=o(" \u2014 "),Dre=a("a"),Mot=o("FlaxRobertaForQuestionAnswering"),Eot=o(" (RoBERTa model)"),Cot=l(),v6=a("li"),cAe=a("strong"),wot=o("roformer"),Aot=o(" \u2014 "),Gre=a("a"),Lot=o("FlaxRoFormerForQuestionAnswering"),yot=o(" (RoFormer model)"),xot=l(),F6=a("li"),fAe=a("strong"),$ot=o("xlm-roberta"),kot=o(" \u2014 "),Ore=a("a"),Sot=o("FlaxXLMRobertaForQuestionAnswering"),Rot=o(" (XLM-RoBERTa model)"),Pot=l(),F(T6.$$.fragment),CQe=l(),bf=a("h2"),M6=a("a"),mAe=a("span"),F(ck.$$.fragment),Bot=l(),gAe=a("span"),Iot=o("FlaxAutoModelForTokenClassification"),wQe=l(),Er=a("div"),F(fk.$$.fragment),Not=l(),vf=a("p"),qot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vre=a("a"),jot=o("from_pretrained()"),Dot=o(" class method or the "),Xre=a("a"),Got=o("from_config()"),Oot=o(` class
method.`),Vot=l(),mk=a("p"),Xot=o("This class cannot be instantiated directly using "),hAe=a("code"),zot=o("__init__()"),Wot=o(" (throws an error)."),Qot=l(),ea=a("div"),F(gk.$$.fragment),Hot=l(),pAe=a("p"),Uot=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jot=l(),Ff=a("p"),Yot=o(`Note:
Loading a model from its configuration file does `),_Ae=a("strong"),Kot=o("not"),Zot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=a("a"),ert=o("from_pretrained()"),ort=o(" to load the model weights."),rrt=l(),F(E6.$$.fragment),trt=l(),Yr=a("div"),F(hk.$$.fragment),art=l(),uAe=a("p"),nrt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),srt=l(),xn=a("p"),lrt=o("The model class to instantiate is selected based on the "),bAe=a("code"),irt=o("model_type"),drt=o(` property of the config object (either
passed as an argument or loaded from `),vAe=a("code"),crt=o("pretrained_model_name_or_path"),frt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FAe=a("code"),mrt=o("pretrained_model_name_or_path"),grt=o(":"),hrt=l(),Xe=a("ul"),C6=a("li"),TAe=a("strong"),prt=o("albert"),_rt=o(" \u2014 "),Wre=a("a"),urt=o("FlaxAlbertForTokenClassification"),brt=o(" (ALBERT model)"),vrt=l(),w6=a("li"),MAe=a("strong"),Frt=o("bert"),Trt=o(" \u2014 "),Qre=a("a"),Mrt=o("FlaxBertForTokenClassification"),Ert=o(" (BERT model)"),Crt=l(),A6=a("li"),EAe=a("strong"),wrt=o("big_bird"),Art=o(" \u2014 "),Hre=a("a"),Lrt=o("FlaxBigBirdForTokenClassification"),yrt=o(" (BigBird model)"),xrt=l(),L6=a("li"),CAe=a("strong"),$rt=o("distilbert"),krt=o(" \u2014 "),Ure=a("a"),Srt=o("FlaxDistilBertForTokenClassification"),Rrt=o(" (DistilBERT model)"),Prt=l(),y6=a("li"),wAe=a("strong"),Brt=o("electra"),Irt=o(" \u2014 "),Jre=a("a"),Nrt=o("FlaxElectraForTokenClassification"),qrt=o(" (ELECTRA model)"),jrt=l(),x6=a("li"),AAe=a("strong"),Drt=o("roberta"),Grt=o(" \u2014 "),Yre=a("a"),Ort=o("FlaxRobertaForTokenClassification"),Vrt=o(" (RoBERTa model)"),Xrt=l(),$6=a("li"),LAe=a("strong"),zrt=o("roformer"),Wrt=o(" \u2014 "),Kre=a("a"),Qrt=o("FlaxRoFormerForTokenClassification"),Hrt=o(" (RoFormer model)"),Urt=l(),k6=a("li"),yAe=a("strong"),Jrt=o("xlm-roberta"),Yrt=o(" \u2014 "),Zre=a("a"),Krt=o("FlaxXLMRobertaForTokenClassification"),Zrt=o(" (XLM-RoBERTa model)"),ett=l(),F(S6.$$.fragment),AQe=l(),Tf=a("h2"),R6=a("a"),xAe=a("span"),F(pk.$$.fragment),ott=l(),$Ae=a("span"),rtt=o("FlaxAutoModelForMultipleChoice"),LQe=l(),Cr=a("div"),F(_k.$$.fragment),ttt=l(),Mf=a("p"),att=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ete=a("a"),ntt=o("from_pretrained()"),stt=o(" class method or the "),ote=a("a"),ltt=o("from_config()"),itt=o(` class
method.`),dtt=l(),uk=a("p"),ctt=o("This class cannot be instantiated directly using "),kAe=a("code"),ftt=o("__init__()"),mtt=o(" (throws an error)."),gtt=l(),oa=a("div"),F(bk.$$.fragment),htt=l(),SAe=a("p"),ptt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_tt=l(),Ef=a("p"),utt=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),btt=o("not"),vtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=a("a"),Ftt=o("from_pretrained()"),Ttt=o(" to load the model weights."),Mtt=l(),F(P6.$$.fragment),Ett=l(),Kr=a("div"),F(vk.$$.fragment),Ctt=l(),PAe=a("p"),wtt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Att=l(),$n=a("p"),Ltt=o("The model class to instantiate is selected based on the "),BAe=a("code"),ytt=o("model_type"),xtt=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),$tt=o("pretrained_model_name_or_path"),ktt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),Stt=o("pretrained_model_name_or_path"),Rtt=o(":"),Ptt=l(),ze=a("ul"),B6=a("li"),qAe=a("strong"),Btt=o("albert"),Itt=o(" \u2014 "),tte=a("a"),Ntt=o("FlaxAlbertForMultipleChoice"),qtt=o(" (ALBERT model)"),jtt=l(),I6=a("li"),jAe=a("strong"),Dtt=o("bert"),Gtt=o(" \u2014 "),ate=a("a"),Ott=o("FlaxBertForMultipleChoice"),Vtt=o(" (BERT model)"),Xtt=l(),N6=a("li"),DAe=a("strong"),ztt=o("big_bird"),Wtt=o(" \u2014 "),nte=a("a"),Qtt=o("FlaxBigBirdForMultipleChoice"),Htt=o(" (BigBird model)"),Utt=l(),q6=a("li"),GAe=a("strong"),Jtt=o("distilbert"),Ytt=o(" \u2014 "),ste=a("a"),Ktt=o("FlaxDistilBertForMultipleChoice"),Ztt=o(" (DistilBERT model)"),eat=l(),j6=a("li"),OAe=a("strong"),oat=o("electra"),rat=o(" \u2014 "),lte=a("a"),tat=o("FlaxElectraForMultipleChoice"),aat=o(" (ELECTRA model)"),nat=l(),D6=a("li"),VAe=a("strong"),sat=o("roberta"),lat=o(" \u2014 "),ite=a("a"),iat=o("FlaxRobertaForMultipleChoice"),dat=o(" (RoBERTa model)"),cat=l(),G6=a("li"),XAe=a("strong"),fat=o("roformer"),mat=o(" \u2014 "),dte=a("a"),gat=o("FlaxRoFormerForMultipleChoice"),hat=o(" (RoFormer model)"),pat=l(),O6=a("li"),zAe=a("strong"),_at=o("xlm-roberta"),uat=o(" \u2014 "),cte=a("a"),bat=o("FlaxXLMRobertaForMultipleChoice"),vat=o(" (XLM-RoBERTa model)"),Fat=l(),F(V6.$$.fragment),yQe=l(),Cf=a("h2"),X6=a("a"),WAe=a("span"),F(Fk.$$.fragment),Tat=l(),QAe=a("span"),Mat=o("FlaxAutoModelForNextSentencePrediction"),xQe=l(),wr=a("div"),F(Tk.$$.fragment),Eat=l(),wf=a("p"),Cat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fte=a("a"),wat=o("from_pretrained()"),Aat=o(" class method or the "),mte=a("a"),Lat=o("from_config()"),yat=o(` class
method.`),xat=l(),Mk=a("p"),$at=o("This class cannot be instantiated directly using "),HAe=a("code"),kat=o("__init__()"),Sat=o(" (throws an error)."),Rat=l(),ra=a("div"),F(Ek.$$.fragment),Pat=l(),UAe=a("p"),Bat=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Iat=l(),Af=a("p"),Nat=o(`Note:
Loading a model from its configuration file does `),JAe=a("strong"),qat=o("not"),jat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=a("a"),Dat=o("from_pretrained()"),Gat=o(" to load the model weights."),Oat=l(),F(z6.$$.fragment),Vat=l(),Zr=a("div"),F(Ck.$$.fragment),Xat=l(),YAe=a("p"),zat=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wat=l(),kn=a("p"),Qat=o("The model class to instantiate is selected based on the "),KAe=a("code"),Hat=o("model_type"),Uat=o(` property of the config object (either
passed as an argument or loaded from `),ZAe=a("code"),Jat=o("pretrained_model_name_or_path"),Yat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=a("code"),Kat=o("pretrained_model_name_or_path"),Zat=o(":"),ent=l(),o7e=a("ul"),W6=a("li"),r7e=a("strong"),ont=o("bert"),rnt=o(" \u2014 "),hte=a("a"),tnt=o("FlaxBertForNextSentencePrediction"),ant=o(" (BERT model)"),nnt=l(),F(Q6.$$.fragment),$Qe=l(),Lf=a("h2"),H6=a("a"),t7e=a("span"),F(wk.$$.fragment),snt=l(),a7e=a("span"),lnt=o("FlaxAutoModelForImageClassification"),kQe=l(),Ar=a("div"),F(Ak.$$.fragment),int=l(),yf=a("p"),dnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pte=a("a"),cnt=o("from_pretrained()"),fnt=o(" class method or the "),_te=a("a"),mnt=o("from_config()"),gnt=o(` class
method.`),hnt=l(),Lk=a("p"),pnt=o("This class cannot be instantiated directly using "),n7e=a("code"),_nt=o("__init__()"),unt=o(" (throws an error)."),bnt=l(),ta=a("div"),F(yk.$$.fragment),vnt=l(),s7e=a("p"),Fnt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tnt=l(),xf=a("p"),Mnt=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),Ent=o("not"),Cnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ute=a("a"),wnt=o("from_pretrained()"),Ant=o(" to load the model weights."),Lnt=l(),F(U6.$$.fragment),ynt=l(),et=a("div"),F(xk.$$.fragment),xnt=l(),i7e=a("p"),$nt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),knt=l(),Sn=a("p"),Snt=o("The model class to instantiate is selected based on the "),d7e=a("code"),Rnt=o("model_type"),Pnt=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),Bnt=o("pretrained_model_name_or_path"),Int=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Nnt=o("pretrained_model_name_or_path"),qnt=o(":"),jnt=l(),$k=a("ul"),J6=a("li"),m7e=a("strong"),Dnt=o("beit"),Gnt=o(" \u2014 "),bte=a("a"),Ont=o("FlaxBeitForImageClassification"),Vnt=o(" (BEiT model)"),Xnt=l(),Y6=a("li"),g7e=a("strong"),znt=o("vit"),Wnt=o(" \u2014 "),vte=a("a"),Qnt=o("FlaxViTForImageClassification"),Hnt=o(" (ViT model)"),Unt=l(),F(K6.$$.fragment),SQe=l(),$f=a("h2"),Z6=a("a"),h7e=a("span"),F(kk.$$.fragment),Jnt=l(),p7e=a("span"),Ynt=o("FlaxAutoModelForVision2Seq"),RQe=l(),Lr=a("div"),F(Sk.$$.fragment),Knt=l(),kf=a("p"),Znt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fte=a("a"),est=o("from_pretrained()"),ost=o(" class method or the "),Tte=a("a"),rst=o("from_config()"),tst=o(` class
method.`),ast=l(),Rk=a("p"),nst=o("This class cannot be instantiated directly using "),_7e=a("code"),sst=o("__init__()"),lst=o(" (throws an error)."),ist=l(),aa=a("div"),F(Pk.$$.fragment),dst=l(),u7e=a("p"),cst=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fst=l(),Sf=a("p"),mst=o(`Note:
Loading a model from its configuration file does `),b7e=a("strong"),gst=o("not"),hst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mte=a("a"),pst=o("from_pretrained()"),_st=o(" to load the model weights."),ust=l(),F(eA.$$.fragment),bst=l(),ot=a("div"),F(Bk.$$.fragment),vst=l(),v7e=a("p"),Fst=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tst=l(),Rn=a("p"),Mst=o("The model class to instantiate is selected based on the "),F7e=a("code"),Est=o("model_type"),Cst=o(` property of the config object (either
passed as an argument or loaded from `),T7e=a("code"),wst=o("pretrained_model_name_or_path"),Ast=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=a("code"),Lst=o("pretrained_model_name_or_path"),yst=o(":"),xst=l(),E7e=a("ul"),oA=a("li"),C7e=a("strong"),$st=o("vision-encoder-decoder"),kst=o(" \u2014 "),Ete=a("a"),Sst=o("FlaxVisionEncoderDecoderModel"),Rst=o(" (Vision Encoder decoder model)"),Pst=l(),F(rA.$$.fragment),this.h()},l(f){const u=rYt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ik=s(p);m=n(Ik,"A",{id:!0,class:!0,href:!0});var w7e=s(m);_=n(w7e,"SPAN",{});var A7e=s(_);T(c.$$.fragment,A7e),A7e.forEach(t),w7e.forEach(t),h=i(Ik),wo=n(Ik,"SPAN",{});var L7e=s(wo);$i=r(L7e,"Auto Classes"),L7e.forEach(t),Ik.forEach(t),If=i(f),lt=n(f,"P",{});var Nk=s(lt);ki=r(Nk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Si=n(Nk,"CODE",{});var y7e=s(Si);ML=r(y7e,"from_pretrained()"),y7e.forEach(t),Nf=r(Nk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Nk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Pn=s(Qe);Ri=r(Pn,"Instantiating one of "),Bn=n(Pn,"A",{href:!0});var x7e=s(Bn);EL=r(x7e,"AutoConfig"),x7e.forEach(t),In=r(Pn,", "),Nn=n(Pn,"A",{href:!0});var $7e=s(Nn);CL=r($7e,"AutoModel"),$7e.forEach(t),Pi=r(Pn,`, and
`),qn=n(Pn,"A",{href:!0});var k7e=s(qn);wL=r(k7e,"AutoTokenizer"),k7e.forEach(t),Bi=r(Pn," will directly create a class of the relevant architecture. For instance"),Pn.forEach(t),qf=i(f),T(Sa.$$.fragment,f),He=i(f),Ae=n(f,"P",{});var qk=s(Ae);nR=r(qk,"will create a model that is an instance of "),Ii=n(qk,"A",{href:!0});var S7e=s(Ii);sR=r(S7e,"BertModel"),S7e.forEach(t),lR=r(qk,"."),qk.forEach(t),Ao=i(f),Ra=n(f,"P",{});var jk=s(Ra);iR=r(jk,"There is one class of "),jf=n(jk,"CODE",{});var R7e=s(jf);dR=r(R7e,"AutoModel"),R7e.forEach(t),XUe=r(jk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jk.forEach(t),xze=i(f),Ni=n(f,"H2",{class:!0});var Dk=s(Ni);Df=n(Dk,"A",{id:!0,class:!0,href:!0});var P7e=s(Df);une=n(P7e,"SPAN",{});var B7e=s(une);T(AL.$$.fragment,B7e),B7e.forEach(t),P7e.forEach(t),zUe=i(Dk),bne=n(Dk,"SPAN",{});var I7e=s(bne);WUe=r(I7e,"Extending the Auto Classes"),I7e.forEach(t),Dk.forEach(t),$ze=i(f),jn=n(f,"P",{});var Rf=s(jn);QUe=r(Rf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),vne=n(Rf,"CODE",{});var N7e=s(vne);HUe=r(N7e,"NewModel"),N7e.forEach(t),UUe=r(Rf,", make sure you have a "),Fne=n(Rf,"CODE",{});var q7e=s(Fne);JUe=r(q7e,"NewModelConfig"),q7e.forEach(t),YUe=r(Rf,` then you can add those to the auto
classes like this:`),Rf.forEach(t),kze=i(f),T(LL.$$.fragment,f),Sze=i(f),cR=n(f,"P",{});var j7e=s(cR);KUe=r(j7e,"You will then be able to use the auto classes like you would usually do!"),j7e.forEach(t),Rze=i(f),T(Gf.$$.fragment,f),Pze=i(f),qi=n(f,"H2",{class:!0});var Gk=s(qi);Of=n(Gk,"A",{id:!0,class:!0,href:!0});var D7e=s(Of);Tne=n(D7e,"SPAN",{});var G7e=s(Tne);T(yL.$$.fragment,G7e),G7e.forEach(t),D7e.forEach(t),ZUe=i(Gk),Mne=n(Gk,"SPAN",{});var O7e=s(Mne);eJe=r(O7e,"AutoConfig"),O7e.forEach(t),Gk.forEach(t),Bze=i(f),Lo=n(f,"DIV",{class:!0});var nt=s(Lo);T(xL.$$.fragment,nt),oJe=i(nt),$L=n(nt,"P",{});var Ok=s($L);rJe=r(Ok,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fR=n(Ok,"A",{href:!0});var V7e=s(fR);tJe=r(V7e,"from_pretrained()"),V7e.forEach(t),aJe=r(Ok," class method."),Ok.forEach(t),nJe=i(nt),kL=n(nt,"P",{});var Vk=s(kL);sJe=r(Vk,"This class cannot be instantiated directly using "),Ene=n(Vk,"CODE",{});var X7e=s(Ene);lJe=r(X7e,"__init__()"),X7e.forEach(t),iJe=r(Vk," (throws an error)."),Vk.forEach(t),dJe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(SL.$$.fragment,st),cJe=i(st),Cne=n(st,"P",{});var z7e=s(Cne);fJe=r(z7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),z7e.forEach(t),mJe=i(st),ji=n(st,"P",{});var Pf=s(ji);gJe=r(Pf,"The configuration class to instantiate is selected based on the "),wne=n(Pf,"CODE",{});var W7e=s(wne);hJe=r(W7e,"model_type"),W7e.forEach(t),pJe=r(Pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ane=n(Pf,"CODE",{});var Q7e=s(Ane);_Je=r(Q7e,"pretrained_model_name_or_path"),Q7e.forEach(t),uJe=r(Pf,":"),Pf.forEach(t),bJe=i(st),A=n(st,"UL",{});var L=s(A);Vf=n(L,"LI",{});var tA=s(Vf);Lne=n(tA,"STRONG",{});var H7e=s(Lne);vJe=r(H7e,"albert"),H7e.forEach(t),FJe=r(tA," \u2014 "),mR=n(tA,"A",{href:!0});var U7e=s(mR);TJe=r(U7e,"AlbertConfig"),U7e.forEach(t),MJe=r(tA," (ALBERT model)"),tA.forEach(t),EJe=i(L),Xf=n(L,"LI",{});var aA=s(Xf);yne=n(aA,"STRONG",{});var J7e=s(yne);CJe=r(J7e,"bart"),J7e.forEach(t),wJe=r(aA," \u2014 "),gR=n(aA,"A",{href:!0});var Y7e=s(gR);AJe=r(Y7e,"BartConfig"),Y7e.forEach(t),LJe=r(aA," (BART model)"),aA.forEach(t),yJe=i(L),zf=n(L,"LI",{});var nA=s(zf);xne=n(nA,"STRONG",{});var K7e=s(xne);xJe=r(K7e,"beit"),K7e.forEach(t),$Je=r(nA," \u2014 "),hR=n(nA,"A",{href:!0});var Z7e=s(hR);kJe=r(Z7e,"BeitConfig"),Z7e.forEach(t),SJe=r(nA," (BEiT model)"),nA.forEach(t),RJe=i(L),Wf=n(L,"LI",{});var sA=s(Wf);$ne=n(sA,"STRONG",{});var eLe=s($ne);PJe=r(eLe,"bert"),eLe.forEach(t),BJe=r(sA," \u2014 "),pR=n(sA,"A",{href:!0});var oLe=s(pR);IJe=r(oLe,"BertConfig"),oLe.forEach(t),NJe=r(sA," (BERT model)"),sA.forEach(t),qJe=i(L),Qf=n(L,"LI",{});var lA=s(Qf);kne=n(lA,"STRONG",{});var rLe=s(kne);jJe=r(rLe,"bert-generation"),rLe.forEach(t),DJe=r(lA," \u2014 "),_R=n(lA,"A",{href:!0});var tLe=s(_R);GJe=r(tLe,"BertGenerationConfig"),tLe.forEach(t),OJe=r(lA," (Bert Generation model)"),lA.forEach(t),VJe=i(L),Hf=n(L,"LI",{});var iA=s(Hf);Sne=n(iA,"STRONG",{});var aLe=s(Sne);XJe=r(aLe,"big_bird"),aLe.forEach(t),zJe=r(iA," \u2014 "),uR=n(iA,"A",{href:!0});var nLe=s(uR);WJe=r(nLe,"BigBirdConfig"),nLe.forEach(t),QJe=r(iA," (BigBird model)"),iA.forEach(t),HJe=i(L),Uf=n(L,"LI",{});var dA=s(Uf);Rne=n(dA,"STRONG",{});var sLe=s(Rne);UJe=r(sLe,"bigbird_pegasus"),sLe.forEach(t),JJe=r(dA," \u2014 "),bR=n(dA,"A",{href:!0});var lLe=s(bR);YJe=r(lLe,"BigBirdPegasusConfig"),lLe.forEach(t),KJe=r(dA," (BigBird-Pegasus model)"),dA.forEach(t),ZJe=i(L),Jf=n(L,"LI",{});var cA=s(Jf);Pne=n(cA,"STRONG",{});var iLe=s(Pne);eYe=r(iLe,"blenderbot"),iLe.forEach(t),oYe=r(cA," \u2014 "),vR=n(cA,"A",{href:!0});var dLe=s(vR);rYe=r(dLe,"BlenderbotConfig"),dLe.forEach(t),tYe=r(cA," (Blenderbot model)"),cA.forEach(t),aYe=i(L),Yf=n(L,"LI",{});var fA=s(Yf);Bne=n(fA,"STRONG",{});var cLe=s(Bne);nYe=r(cLe,"blenderbot-small"),cLe.forEach(t),sYe=r(fA," \u2014 "),FR=n(fA,"A",{href:!0});var fLe=s(FR);lYe=r(fLe,"BlenderbotSmallConfig"),fLe.forEach(t),iYe=r(fA," (BlenderbotSmall model)"),fA.forEach(t),dYe=i(L),Kf=n(L,"LI",{});var mA=s(Kf);Ine=n(mA,"STRONG",{});var mLe=s(Ine);cYe=r(mLe,"bloom"),mLe.forEach(t),fYe=r(mA," \u2014 "),TR=n(mA,"A",{href:!0});var gLe=s(TR);mYe=r(gLe,"BloomConfig"),gLe.forEach(t),gYe=r(mA," (BLOOM model)"),mA.forEach(t),hYe=i(L),Zf=n(L,"LI",{});var gA=s(Zf);Nne=n(gA,"STRONG",{});var hLe=s(Nne);pYe=r(hLe,"camembert"),hLe.forEach(t),_Ye=r(gA," \u2014 "),MR=n(gA,"A",{href:!0});var pLe=s(MR);uYe=r(pLe,"CamembertConfig"),pLe.forEach(t),bYe=r(gA," (CamemBERT model)"),gA.forEach(t),vYe=i(L),em=n(L,"LI",{});var hA=s(em);qne=n(hA,"STRONG",{});var _Le=s(qne);FYe=r(_Le,"canine"),_Le.forEach(t),TYe=r(hA," \u2014 "),ER=n(hA,"A",{href:!0});var uLe=s(ER);MYe=r(uLe,"CanineConfig"),uLe.forEach(t),EYe=r(hA," (CANINE model)"),hA.forEach(t),CYe=i(L),om=n(L,"LI",{});var pA=s(om);jne=n(pA,"STRONG",{});var bLe=s(jne);wYe=r(bLe,"clip"),bLe.forEach(t),AYe=r(pA," \u2014 "),CR=n(pA,"A",{href:!0});var vLe=s(CR);LYe=r(vLe,"CLIPConfig"),vLe.forEach(t),yYe=r(pA," (CLIP model)"),pA.forEach(t),xYe=i(L),rm=n(L,"LI",{});var _A=s(rm);Dne=n(_A,"STRONG",{});var FLe=s(Dne);$Ye=r(FLe,"codegen"),FLe.forEach(t),kYe=r(_A," \u2014 "),wR=n(_A,"A",{href:!0});var TLe=s(wR);SYe=r(TLe,"CodeGenConfig"),TLe.forEach(t),RYe=r(_A," (CodeGen model)"),_A.forEach(t),PYe=i(L),tm=n(L,"LI",{});var uA=s(tm);Gne=n(uA,"STRONG",{});var MLe=s(Gne);BYe=r(MLe,"convbert"),MLe.forEach(t),IYe=r(uA," \u2014 "),AR=n(uA,"A",{href:!0});var ELe=s(AR);NYe=r(ELe,"ConvBertConfig"),ELe.forEach(t),qYe=r(uA," (ConvBERT model)"),uA.forEach(t),jYe=i(L),am=n(L,"LI",{});var bA=s(am);One=n(bA,"STRONG",{});var CLe=s(One);DYe=r(CLe,"convnext"),CLe.forEach(t),GYe=r(bA," \u2014 "),LR=n(bA,"A",{href:!0});var wLe=s(LR);OYe=r(wLe,"ConvNextConfig"),wLe.forEach(t),VYe=r(bA," (ConvNeXT model)"),bA.forEach(t),XYe=i(L),nm=n(L,"LI",{});var vA=s(nm);Vne=n(vA,"STRONG",{});var ALe=s(Vne);zYe=r(ALe,"ctrl"),ALe.forEach(t),WYe=r(vA," \u2014 "),yR=n(vA,"A",{href:!0});var LLe=s(yR);QYe=r(LLe,"CTRLConfig"),LLe.forEach(t),HYe=r(vA," (CTRL model)"),vA.forEach(t),UYe=i(L),sm=n(L,"LI",{});var FA=s(sm);Xne=n(FA,"STRONG",{});var yLe=s(Xne);JYe=r(yLe,"cvt"),yLe.forEach(t),YYe=r(FA," \u2014 "),xR=n(FA,"A",{href:!0});var xLe=s(xR);KYe=r(xLe,"CvtConfig"),xLe.forEach(t),ZYe=r(FA," (CvT model)"),FA.forEach(t),eKe=i(L),lm=n(L,"LI",{});var TA=s(lm);zne=n(TA,"STRONG",{});var $Le=s(zne);oKe=r($Le,"data2vec-audio"),$Le.forEach(t),rKe=r(TA," \u2014 "),$R=n(TA,"A",{href:!0});var kLe=s($R);tKe=r(kLe,"Data2VecAudioConfig"),kLe.forEach(t),aKe=r(TA," (Data2VecAudio model)"),TA.forEach(t),nKe=i(L),im=n(L,"LI",{});var MA=s(im);Wne=n(MA,"STRONG",{});var SLe=s(Wne);sKe=r(SLe,"data2vec-text"),SLe.forEach(t),lKe=r(MA," \u2014 "),kR=n(MA,"A",{href:!0});var RLe=s(kR);iKe=r(RLe,"Data2VecTextConfig"),RLe.forEach(t),dKe=r(MA," (Data2VecText model)"),MA.forEach(t),cKe=i(L),dm=n(L,"LI",{});var EA=s(dm);Qne=n(EA,"STRONG",{});var PLe=s(Qne);fKe=r(PLe,"data2vec-vision"),PLe.forEach(t),mKe=r(EA," \u2014 "),SR=n(EA,"A",{href:!0});var BLe=s(SR);gKe=r(BLe,"Data2VecVisionConfig"),BLe.forEach(t),hKe=r(EA," (Data2VecVision model)"),EA.forEach(t),pKe=i(L),cm=n(L,"LI",{});var CA=s(cm);Hne=n(CA,"STRONG",{});var ILe=s(Hne);_Ke=r(ILe,"deberta"),ILe.forEach(t),uKe=r(CA," \u2014 "),RR=n(CA,"A",{href:!0});var NLe=s(RR);bKe=r(NLe,"DebertaConfig"),NLe.forEach(t),vKe=r(CA," (DeBERTa model)"),CA.forEach(t),FKe=i(L),fm=n(L,"LI",{});var wA=s(fm);Une=n(wA,"STRONG",{});var qLe=s(Une);TKe=r(qLe,"deberta-v2"),qLe.forEach(t),MKe=r(wA," \u2014 "),PR=n(wA,"A",{href:!0});var jLe=s(PR);EKe=r(jLe,"DebertaV2Config"),jLe.forEach(t),CKe=r(wA," (DeBERTa-v2 model)"),wA.forEach(t),wKe=i(L),mm=n(L,"LI",{});var AA=s(mm);Jne=n(AA,"STRONG",{});var Ist=s(Jne);AKe=r(Ist,"decision_transformer"),Ist.forEach(t),LKe=r(AA," \u2014 "),BR=n(AA,"A",{href:!0});var Nst=s(BR);yKe=r(Nst,"DecisionTransformerConfig"),Nst.forEach(t),xKe=r(AA," (Decision Transformer model)"),AA.forEach(t),$Ke=i(L),gm=n(L,"LI",{});var DLe=s(gm);Yne=n(DLe,"STRONG",{});var qst=s(Yne);kKe=r(qst,"deit"),qst.forEach(t),SKe=r(DLe," \u2014 "),IR=n(DLe,"A",{href:!0});var jst=s(IR);RKe=r(jst,"DeiTConfig"),jst.forEach(t),PKe=r(DLe," (DeiT model)"),DLe.forEach(t),BKe=i(L),hm=n(L,"LI",{});var GLe=s(hm);Kne=n(GLe,"STRONG",{});var Dst=s(Kne);IKe=r(Dst,"detr"),Dst.forEach(t),NKe=r(GLe," \u2014 "),NR=n(GLe,"A",{href:!0});var Gst=s(NR);qKe=r(Gst,"DetrConfig"),Gst.forEach(t),jKe=r(GLe," (DETR model)"),GLe.forEach(t),DKe=i(L),pm=n(L,"LI",{});var OLe=s(pm);Zne=n(OLe,"STRONG",{});var Ost=s(Zne);GKe=r(Ost,"distilbert"),Ost.forEach(t),OKe=r(OLe," \u2014 "),qR=n(OLe,"A",{href:!0});var Vst=s(qR);VKe=r(Vst,"DistilBertConfig"),Vst.forEach(t),XKe=r(OLe," (DistilBERT model)"),OLe.forEach(t),zKe=i(L),_m=n(L,"LI",{});var VLe=s(_m);ese=n(VLe,"STRONG",{});var Xst=s(ese);WKe=r(Xst,"dpr"),Xst.forEach(t),QKe=r(VLe," \u2014 "),jR=n(VLe,"A",{href:!0});var zst=s(jR);HKe=r(zst,"DPRConfig"),zst.forEach(t),UKe=r(VLe," (DPR model)"),VLe.forEach(t),JKe=i(L),um=n(L,"LI",{});var XLe=s(um);ose=n(XLe,"STRONG",{});var Wst=s(ose);YKe=r(Wst,"dpt"),Wst.forEach(t),KKe=r(XLe," \u2014 "),DR=n(XLe,"A",{href:!0});var Qst=s(DR);ZKe=r(Qst,"DPTConfig"),Qst.forEach(t),eZe=r(XLe," (DPT model)"),XLe.forEach(t),oZe=i(L),bm=n(L,"LI",{});var zLe=s(bm);rse=n(zLe,"STRONG",{});var Hst=s(rse);rZe=r(Hst,"electra"),Hst.forEach(t),tZe=r(zLe," \u2014 "),GR=n(zLe,"A",{href:!0});var Ust=s(GR);aZe=r(Ust,"ElectraConfig"),Ust.forEach(t),nZe=r(zLe," (ELECTRA model)"),zLe.forEach(t),sZe=i(L),vm=n(L,"LI",{});var WLe=s(vm);tse=n(WLe,"STRONG",{});var Jst=s(tse);lZe=r(Jst,"encoder-decoder"),Jst.forEach(t),iZe=r(WLe," \u2014 "),OR=n(WLe,"A",{href:!0});var Yst=s(OR);dZe=r(Yst,"EncoderDecoderConfig"),Yst.forEach(t),cZe=r(WLe," (Encoder decoder model)"),WLe.forEach(t),fZe=i(L),Fm=n(L,"LI",{});var QLe=s(Fm);ase=n(QLe,"STRONG",{});var Kst=s(ase);mZe=r(Kst,"flaubert"),Kst.forEach(t),gZe=r(QLe," \u2014 "),VR=n(QLe,"A",{href:!0});var Zst=s(VR);hZe=r(Zst,"FlaubertConfig"),Zst.forEach(t),pZe=r(QLe," (FlauBERT model)"),QLe.forEach(t),_Ze=i(L),Tm=n(L,"LI",{});var HLe=s(Tm);nse=n(HLe,"STRONG",{});var elt=s(nse);uZe=r(elt,"flava"),elt.forEach(t),bZe=r(HLe," \u2014 "),XR=n(HLe,"A",{href:!0});var olt=s(XR);vZe=r(olt,"FlavaConfig"),olt.forEach(t),FZe=r(HLe," (FLAVA model)"),HLe.forEach(t),TZe=i(L),Mm=n(L,"LI",{});var ULe=s(Mm);sse=n(ULe,"STRONG",{});var rlt=s(sse);MZe=r(rlt,"fnet"),rlt.forEach(t),EZe=r(ULe," \u2014 "),zR=n(ULe,"A",{href:!0});var tlt=s(zR);CZe=r(tlt,"FNetConfig"),tlt.forEach(t),wZe=r(ULe," (FNet model)"),ULe.forEach(t),AZe=i(L),Em=n(L,"LI",{});var JLe=s(Em);lse=n(JLe,"STRONG",{});var alt=s(lse);LZe=r(alt,"fsmt"),alt.forEach(t),yZe=r(JLe," \u2014 "),WR=n(JLe,"A",{href:!0});var nlt=s(WR);xZe=r(nlt,"FSMTConfig"),nlt.forEach(t),$Ze=r(JLe," (FairSeq Machine-Translation model)"),JLe.forEach(t),kZe=i(L),Cm=n(L,"LI",{});var YLe=s(Cm);ise=n(YLe,"STRONG",{});var slt=s(ise);SZe=r(slt,"funnel"),slt.forEach(t),RZe=r(YLe," \u2014 "),QR=n(YLe,"A",{href:!0});var llt=s(QR);PZe=r(llt,"FunnelConfig"),llt.forEach(t),BZe=r(YLe," (Funnel Transformer model)"),YLe.forEach(t),IZe=i(L),wm=n(L,"LI",{});var KLe=s(wm);dse=n(KLe,"STRONG",{});var ilt=s(dse);NZe=r(ilt,"glpn"),ilt.forEach(t),qZe=r(KLe," \u2014 "),HR=n(KLe,"A",{href:!0});var dlt=s(HR);jZe=r(dlt,"GLPNConfig"),dlt.forEach(t),DZe=r(KLe," (GLPN model)"),KLe.forEach(t),GZe=i(L),Am=n(L,"LI",{});var ZLe=s(Am);cse=n(ZLe,"STRONG",{});var clt=s(cse);OZe=r(clt,"gpt2"),clt.forEach(t),VZe=r(ZLe," \u2014 "),UR=n(ZLe,"A",{href:!0});var flt=s(UR);XZe=r(flt,"GPT2Config"),flt.forEach(t),zZe=r(ZLe," (OpenAI GPT-2 model)"),ZLe.forEach(t),WZe=i(L),Lm=n(L,"LI",{});var eye=s(Lm);fse=n(eye,"STRONG",{});var mlt=s(fse);QZe=r(mlt,"gpt_neo"),mlt.forEach(t),HZe=r(eye," \u2014 "),JR=n(eye,"A",{href:!0});var glt=s(JR);UZe=r(glt,"GPTNeoConfig"),glt.forEach(t),JZe=r(eye," (GPT Neo model)"),eye.forEach(t),YZe=i(L),ym=n(L,"LI",{});var oye=s(ym);mse=n(oye,"STRONG",{});var hlt=s(mse);KZe=r(hlt,"gpt_neox"),hlt.forEach(t),ZZe=r(oye," \u2014 "),YR=n(oye,"A",{href:!0});var plt=s(YR);eeo=r(plt,"GPTNeoXConfig"),plt.forEach(t),oeo=r(oye," (GPT NeoX model)"),oye.forEach(t),reo=i(L),xm=n(L,"LI",{});var rye=s(xm);gse=n(rye,"STRONG",{});var _lt=s(gse);teo=r(_lt,"gptj"),_lt.forEach(t),aeo=r(rye," \u2014 "),KR=n(rye,"A",{href:!0});var ult=s(KR);neo=r(ult,"GPTJConfig"),ult.forEach(t),seo=r(rye," (GPT-J model)"),rye.forEach(t),leo=i(L),$m=n(L,"LI",{});var tye=s($m);hse=n(tye,"STRONG",{});var blt=s(hse);ieo=r(blt,"groupvit"),blt.forEach(t),deo=r(tye," \u2014 "),ZR=n(tye,"A",{href:!0});var vlt=s(ZR);ceo=r(vlt,"GroupViTConfig"),vlt.forEach(t),feo=r(tye," (GroupViT model)"),tye.forEach(t),meo=i(L),km=n(L,"LI",{});var aye=s(km);pse=n(aye,"STRONG",{});var Flt=s(pse);geo=r(Flt,"hubert"),Flt.forEach(t),heo=r(aye," \u2014 "),eP=n(aye,"A",{href:!0});var Tlt=s(eP);peo=r(Tlt,"HubertConfig"),Tlt.forEach(t),_eo=r(aye," (Hubert model)"),aye.forEach(t),ueo=i(L),Sm=n(L,"LI",{});var nye=s(Sm);_se=n(nye,"STRONG",{});var Mlt=s(_se);beo=r(Mlt,"ibert"),Mlt.forEach(t),veo=r(nye," \u2014 "),oP=n(nye,"A",{href:!0});var Elt=s(oP);Feo=r(Elt,"IBertConfig"),Elt.forEach(t),Teo=r(nye," (I-BERT model)"),nye.forEach(t),Meo=i(L),Rm=n(L,"LI",{});var sye=s(Rm);use=n(sye,"STRONG",{});var Clt=s(use);Eeo=r(Clt,"imagegpt"),Clt.forEach(t),Ceo=r(sye," \u2014 "),rP=n(sye,"A",{href:!0});var wlt=s(rP);weo=r(wlt,"ImageGPTConfig"),wlt.forEach(t),Aeo=r(sye," (ImageGPT model)"),sye.forEach(t),Leo=i(L),Pm=n(L,"LI",{});var lye=s(Pm);bse=n(lye,"STRONG",{});var Alt=s(bse);yeo=r(Alt,"layoutlm"),Alt.forEach(t),xeo=r(lye," \u2014 "),tP=n(lye,"A",{href:!0});var Llt=s(tP);$eo=r(Llt,"LayoutLMConfig"),Llt.forEach(t),keo=r(lye," (LayoutLM model)"),lye.forEach(t),Seo=i(L),Bm=n(L,"LI",{});var iye=s(Bm);vse=n(iye,"STRONG",{});var ylt=s(vse);Reo=r(ylt,"layoutlmv2"),ylt.forEach(t),Peo=r(iye," \u2014 "),aP=n(iye,"A",{href:!0});var xlt=s(aP);Beo=r(xlt,"LayoutLMv2Config"),xlt.forEach(t),Ieo=r(iye," (LayoutLMv2 model)"),iye.forEach(t),Neo=i(L),Im=n(L,"LI",{});var dye=s(Im);Fse=n(dye,"STRONG",{});var $lt=s(Fse);qeo=r($lt,"layoutlmv3"),$lt.forEach(t),jeo=r(dye," \u2014 "),nP=n(dye,"A",{href:!0});var klt=s(nP);Deo=r(klt,"LayoutLMv3Config"),klt.forEach(t),Geo=r(dye," (LayoutLMv3 model)"),dye.forEach(t),Oeo=i(L),Nm=n(L,"LI",{});var cye=s(Nm);Tse=n(cye,"STRONG",{});var Slt=s(Tse);Veo=r(Slt,"led"),Slt.forEach(t),Xeo=r(cye," \u2014 "),sP=n(cye,"A",{href:!0});var Rlt=s(sP);zeo=r(Rlt,"LEDConfig"),Rlt.forEach(t),Weo=r(cye," (LED model)"),cye.forEach(t),Qeo=i(L),qm=n(L,"LI",{});var fye=s(qm);Mse=n(fye,"STRONG",{});var Plt=s(Mse);Heo=r(Plt,"levit"),Plt.forEach(t),Ueo=r(fye," \u2014 "),lP=n(fye,"A",{href:!0});var Blt=s(lP);Jeo=r(Blt,"LevitConfig"),Blt.forEach(t),Yeo=r(fye," (LeViT model)"),fye.forEach(t),Keo=i(L),jm=n(L,"LI",{});var mye=s(jm);Ese=n(mye,"STRONG",{});var Ilt=s(Ese);Zeo=r(Ilt,"longformer"),Ilt.forEach(t),eoo=r(mye," \u2014 "),iP=n(mye,"A",{href:!0});var Nlt=s(iP);ooo=r(Nlt,"LongformerConfig"),Nlt.forEach(t),roo=r(mye," (Longformer model)"),mye.forEach(t),too=i(L),Dm=n(L,"LI",{});var gye=s(Dm);Cse=n(gye,"STRONG",{});var qlt=s(Cse);aoo=r(qlt,"longt5"),qlt.forEach(t),noo=r(gye," \u2014 "),dP=n(gye,"A",{href:!0});var jlt=s(dP);soo=r(jlt,"LongT5Config"),jlt.forEach(t),loo=r(gye," (LongT5 model)"),gye.forEach(t),ioo=i(L),Gm=n(L,"LI",{});var hye=s(Gm);wse=n(hye,"STRONG",{});var Dlt=s(wse);doo=r(Dlt,"luke"),Dlt.forEach(t),coo=r(hye," \u2014 "),cP=n(hye,"A",{href:!0});var Glt=s(cP);foo=r(Glt,"LukeConfig"),Glt.forEach(t),moo=r(hye," (LUKE model)"),hye.forEach(t),goo=i(L),Om=n(L,"LI",{});var pye=s(Om);Ase=n(pye,"STRONG",{});var Olt=s(Ase);hoo=r(Olt,"lxmert"),Olt.forEach(t),poo=r(pye," \u2014 "),fP=n(pye,"A",{href:!0});var Vlt=s(fP);_oo=r(Vlt,"LxmertConfig"),Vlt.forEach(t),uoo=r(pye," (LXMERT model)"),pye.forEach(t),boo=i(L),Vm=n(L,"LI",{});var _ye=s(Vm);Lse=n(_ye,"STRONG",{});var Xlt=s(Lse);voo=r(Xlt,"m2m_100"),Xlt.forEach(t),Foo=r(_ye," \u2014 "),mP=n(_ye,"A",{href:!0});var zlt=s(mP);Too=r(zlt,"M2M100Config"),zlt.forEach(t),Moo=r(_ye," (M2M100 model)"),_ye.forEach(t),Eoo=i(L),Xm=n(L,"LI",{});var uye=s(Xm);yse=n(uye,"STRONG",{});var Wlt=s(yse);Coo=r(Wlt,"marian"),Wlt.forEach(t),woo=r(uye," \u2014 "),gP=n(uye,"A",{href:!0});var Qlt=s(gP);Aoo=r(Qlt,"MarianConfig"),Qlt.forEach(t),Loo=r(uye," (Marian model)"),uye.forEach(t),yoo=i(L),zm=n(L,"LI",{});var bye=s(zm);xse=n(bye,"STRONG",{});var Hlt=s(xse);xoo=r(Hlt,"maskformer"),Hlt.forEach(t),$oo=r(bye," \u2014 "),hP=n(bye,"A",{href:!0});var Ult=s(hP);koo=r(Ult,"MaskFormerConfig"),Ult.forEach(t),Soo=r(bye," (MaskFormer model)"),bye.forEach(t),Roo=i(L),Wm=n(L,"LI",{});var vye=s(Wm);$se=n(vye,"STRONG",{});var Jlt=s($se);Poo=r(Jlt,"mbart"),Jlt.forEach(t),Boo=r(vye," \u2014 "),pP=n(vye,"A",{href:!0});var Ylt=s(pP);Ioo=r(Ylt,"MBartConfig"),Ylt.forEach(t),Noo=r(vye," (mBART model)"),vye.forEach(t),qoo=i(L),Qm=n(L,"LI",{});var Fye=s(Qm);kse=n(Fye,"STRONG",{});var Klt=s(kse);joo=r(Klt,"mctct"),Klt.forEach(t),Doo=r(Fye," \u2014 "),_P=n(Fye,"A",{href:!0});var Zlt=s(_P);Goo=r(Zlt,"MCTCTConfig"),Zlt.forEach(t),Ooo=r(Fye," (M-CTC-T model)"),Fye.forEach(t),Voo=i(L),Hm=n(L,"LI",{});var Tye=s(Hm);Sse=n(Tye,"STRONG",{});var eit=s(Sse);Xoo=r(eit,"megatron-bert"),eit.forEach(t),zoo=r(Tye," \u2014 "),uP=n(Tye,"A",{href:!0});var oit=s(uP);Woo=r(oit,"MegatronBertConfig"),oit.forEach(t),Qoo=r(Tye," (Megatron-BERT model)"),Tye.forEach(t),Hoo=i(L),Um=n(L,"LI",{});var Mye=s(Um);Rse=n(Mye,"STRONG",{});var rit=s(Rse);Uoo=r(rit,"mobilebert"),rit.forEach(t),Joo=r(Mye," \u2014 "),bP=n(Mye,"A",{href:!0});var tit=s(bP);Yoo=r(tit,"MobileBertConfig"),tit.forEach(t),Koo=r(Mye," (MobileBERT model)"),Mye.forEach(t),Zoo=i(L),Jm=n(L,"LI",{});var Eye=s(Jm);Pse=n(Eye,"STRONG",{});var ait=s(Pse);ero=r(ait,"mobilevit"),ait.forEach(t),oro=r(Eye," \u2014 "),vP=n(Eye,"A",{href:!0});var nit=s(vP);rro=r(nit,"MobileViTConfig"),nit.forEach(t),tro=r(Eye," (MobileViT model)"),Eye.forEach(t),aro=i(L),Ym=n(L,"LI",{});var Cye=s(Ym);Bse=n(Cye,"STRONG",{});var sit=s(Bse);nro=r(sit,"mpnet"),sit.forEach(t),sro=r(Cye," \u2014 "),FP=n(Cye,"A",{href:!0});var lit=s(FP);lro=r(lit,"MPNetConfig"),lit.forEach(t),iro=r(Cye," (MPNet model)"),Cye.forEach(t),dro=i(L),Km=n(L,"LI",{});var wye=s(Km);Ise=n(wye,"STRONG",{});var iit=s(Ise);cro=r(iit,"mt5"),iit.forEach(t),fro=r(wye," \u2014 "),TP=n(wye,"A",{href:!0});var dit=s(TP);mro=r(dit,"MT5Config"),dit.forEach(t),gro=r(wye," (MT5 model)"),wye.forEach(t),hro=i(L),Zm=n(L,"LI",{});var Aye=s(Zm);Nse=n(Aye,"STRONG",{});var cit=s(Nse);pro=r(cit,"mvp"),cit.forEach(t),_ro=r(Aye," \u2014 "),MP=n(Aye,"A",{href:!0});var fit=s(MP);uro=r(fit,"MvpConfig"),fit.forEach(t),bro=r(Aye," (MVP model)"),Aye.forEach(t),vro=i(L),eg=n(L,"LI",{});var Lye=s(eg);qse=n(Lye,"STRONG",{});var mit=s(qse);Fro=r(mit,"nezha"),mit.forEach(t),Tro=r(Lye," \u2014 "),EP=n(Lye,"A",{href:!0});var git=s(EP);Mro=r(git,"NezhaConfig"),git.forEach(t),Ero=r(Lye," (Nezha model)"),Lye.forEach(t),Cro=i(L),og=n(L,"LI",{});var yye=s(og);jse=n(yye,"STRONG",{});var hit=s(jse);wro=r(hit,"nystromformer"),hit.forEach(t),Aro=r(yye," \u2014 "),CP=n(yye,"A",{href:!0});var pit=s(CP);Lro=r(pit,"NystromformerConfig"),pit.forEach(t),yro=r(yye," (Nystr\xF6mformer model)"),yye.forEach(t),xro=i(L),rg=n(L,"LI",{});var xye=s(rg);Dse=n(xye,"STRONG",{});var _it=s(Dse);$ro=r(_it,"openai-gpt"),_it.forEach(t),kro=r(xye," \u2014 "),wP=n(xye,"A",{href:!0});var uit=s(wP);Sro=r(uit,"OpenAIGPTConfig"),uit.forEach(t),Rro=r(xye," (OpenAI GPT model)"),xye.forEach(t),Pro=i(L),tg=n(L,"LI",{});var $ye=s(tg);Gse=n($ye,"STRONG",{});var bit=s(Gse);Bro=r(bit,"opt"),bit.forEach(t),Iro=r($ye," \u2014 "),AP=n($ye,"A",{href:!0});var vit=s(AP);Nro=r(vit,"OPTConfig"),vit.forEach(t),qro=r($ye," (OPT model)"),$ye.forEach(t),jro=i(L),ag=n(L,"LI",{});var kye=s(ag);Ose=n(kye,"STRONG",{});var Fit=s(Ose);Dro=r(Fit,"owlvit"),Fit.forEach(t),Gro=r(kye," \u2014 "),LP=n(kye,"A",{href:!0});var Tit=s(LP);Oro=r(Tit,"OwlViTConfig"),Tit.forEach(t),Vro=r(kye," (OWL-ViT model)"),kye.forEach(t),Xro=i(L),ng=n(L,"LI",{});var Sye=s(ng);Vse=n(Sye,"STRONG",{});var Mit=s(Vse);zro=r(Mit,"pegasus"),Mit.forEach(t),Wro=r(Sye," \u2014 "),yP=n(Sye,"A",{href:!0});var Eit=s(yP);Qro=r(Eit,"PegasusConfig"),Eit.forEach(t),Hro=r(Sye," (Pegasus model)"),Sye.forEach(t),Uro=i(L),sg=n(L,"LI",{});var Rye=s(sg);Xse=n(Rye,"STRONG",{});var Cit=s(Xse);Jro=r(Cit,"perceiver"),Cit.forEach(t),Yro=r(Rye," \u2014 "),xP=n(Rye,"A",{href:!0});var wit=s(xP);Kro=r(wit,"PerceiverConfig"),wit.forEach(t),Zro=r(Rye," (Perceiver model)"),Rye.forEach(t),eto=i(L),lg=n(L,"LI",{});var Pye=s(lg);zse=n(Pye,"STRONG",{});var Ait=s(zse);oto=r(Ait,"plbart"),Ait.forEach(t),rto=r(Pye," \u2014 "),$P=n(Pye,"A",{href:!0});var Lit=s($P);tto=r(Lit,"PLBartConfig"),Lit.forEach(t),ato=r(Pye," (PLBart model)"),Pye.forEach(t),nto=i(L),ig=n(L,"LI",{});var Bye=s(ig);Wse=n(Bye,"STRONG",{});var yit=s(Wse);sto=r(yit,"poolformer"),yit.forEach(t),lto=r(Bye," \u2014 "),kP=n(Bye,"A",{href:!0});var xit=s(kP);ito=r(xit,"PoolFormerConfig"),xit.forEach(t),dto=r(Bye," (PoolFormer model)"),Bye.forEach(t),cto=i(L),dg=n(L,"LI",{});var Iye=s(dg);Qse=n(Iye,"STRONG",{});var $it=s(Qse);fto=r($it,"prophetnet"),$it.forEach(t),mto=r(Iye," \u2014 "),SP=n(Iye,"A",{href:!0});var kit=s(SP);gto=r(kit,"ProphetNetConfig"),kit.forEach(t),hto=r(Iye," (ProphetNet model)"),Iye.forEach(t),pto=i(L),cg=n(L,"LI",{});var Nye=s(cg);Hse=n(Nye,"STRONG",{});var Sit=s(Hse);_to=r(Sit,"qdqbert"),Sit.forEach(t),uto=r(Nye," \u2014 "),RP=n(Nye,"A",{href:!0});var Rit=s(RP);bto=r(Rit,"QDQBertConfig"),Rit.forEach(t),vto=r(Nye," (QDQBert model)"),Nye.forEach(t),Fto=i(L),fg=n(L,"LI",{});var qye=s(fg);Use=n(qye,"STRONG",{});var Pit=s(Use);Tto=r(Pit,"rag"),Pit.forEach(t),Mto=r(qye," \u2014 "),PP=n(qye,"A",{href:!0});var Bit=s(PP);Eto=r(Bit,"RagConfig"),Bit.forEach(t),Cto=r(qye," (RAG model)"),qye.forEach(t),wto=i(L),mg=n(L,"LI",{});var jye=s(mg);Jse=n(jye,"STRONG",{});var Iit=s(Jse);Ato=r(Iit,"realm"),Iit.forEach(t),Lto=r(jye," \u2014 "),BP=n(jye,"A",{href:!0});var Nit=s(BP);yto=r(Nit,"RealmConfig"),Nit.forEach(t),xto=r(jye," (REALM model)"),jye.forEach(t),$to=i(L),gg=n(L,"LI",{});var Dye=s(gg);Yse=n(Dye,"STRONG",{});var qit=s(Yse);kto=r(qit,"reformer"),qit.forEach(t),Sto=r(Dye," \u2014 "),IP=n(Dye,"A",{href:!0});var jit=s(IP);Rto=r(jit,"ReformerConfig"),jit.forEach(t),Pto=r(Dye," (Reformer model)"),Dye.forEach(t),Bto=i(L),hg=n(L,"LI",{});var Gye=s(hg);Kse=n(Gye,"STRONG",{});var Dit=s(Kse);Ito=r(Dit,"regnet"),Dit.forEach(t),Nto=r(Gye," \u2014 "),NP=n(Gye,"A",{href:!0});var Git=s(NP);qto=r(Git,"RegNetConfig"),Git.forEach(t),jto=r(Gye," (RegNet model)"),Gye.forEach(t),Dto=i(L),pg=n(L,"LI",{});var Oye=s(pg);Zse=n(Oye,"STRONG",{});var Oit=s(Zse);Gto=r(Oit,"rembert"),Oit.forEach(t),Oto=r(Oye," \u2014 "),qP=n(Oye,"A",{href:!0});var Vit=s(qP);Vto=r(Vit,"RemBertConfig"),Vit.forEach(t),Xto=r(Oye," (RemBERT model)"),Oye.forEach(t),zto=i(L),_g=n(L,"LI",{});var Vye=s(_g);ele=n(Vye,"STRONG",{});var Xit=s(ele);Wto=r(Xit,"resnet"),Xit.forEach(t),Qto=r(Vye," \u2014 "),jP=n(Vye,"A",{href:!0});var zit=s(jP);Hto=r(zit,"ResNetConfig"),zit.forEach(t),Uto=r(Vye," (ResNet model)"),Vye.forEach(t),Jto=i(L),ug=n(L,"LI",{});var Xye=s(ug);ole=n(Xye,"STRONG",{});var Wit=s(ole);Yto=r(Wit,"retribert"),Wit.forEach(t),Kto=r(Xye," \u2014 "),DP=n(Xye,"A",{href:!0});var Qit=s(DP);Zto=r(Qit,"RetriBertConfig"),Qit.forEach(t),eao=r(Xye," (RetriBERT model)"),Xye.forEach(t),oao=i(L),bg=n(L,"LI",{});var zye=s(bg);rle=n(zye,"STRONG",{});var Hit=s(rle);rao=r(Hit,"roberta"),Hit.forEach(t),tao=r(zye," \u2014 "),GP=n(zye,"A",{href:!0});var Uit=s(GP);aao=r(Uit,"RobertaConfig"),Uit.forEach(t),nao=r(zye," (RoBERTa model)"),zye.forEach(t),sao=i(L),vg=n(L,"LI",{});var Wye=s(vg);tle=n(Wye,"STRONG",{});var Jit=s(tle);lao=r(Jit,"roformer"),Jit.forEach(t),iao=r(Wye," \u2014 "),OP=n(Wye,"A",{href:!0});var Yit=s(OP);dao=r(Yit,"RoFormerConfig"),Yit.forEach(t),cao=r(Wye," (RoFormer model)"),Wye.forEach(t),fao=i(L),Fg=n(L,"LI",{});var Qye=s(Fg);ale=n(Qye,"STRONG",{});var Kit=s(ale);mao=r(Kit,"segformer"),Kit.forEach(t),gao=r(Qye," \u2014 "),VP=n(Qye,"A",{href:!0});var Zit=s(VP);hao=r(Zit,"SegformerConfig"),Zit.forEach(t),pao=r(Qye," (SegFormer model)"),Qye.forEach(t),_ao=i(L),Tg=n(L,"LI",{});var Hye=s(Tg);nle=n(Hye,"STRONG",{});var edt=s(nle);uao=r(edt,"sew"),edt.forEach(t),bao=r(Hye," \u2014 "),XP=n(Hye,"A",{href:!0});var odt=s(XP);vao=r(odt,"SEWConfig"),odt.forEach(t),Fao=r(Hye," (SEW model)"),Hye.forEach(t),Tao=i(L),Mg=n(L,"LI",{});var Uye=s(Mg);sle=n(Uye,"STRONG",{});var rdt=s(sle);Mao=r(rdt,"sew-d"),rdt.forEach(t),Eao=r(Uye," \u2014 "),zP=n(Uye,"A",{href:!0});var tdt=s(zP);Cao=r(tdt,"SEWDConfig"),tdt.forEach(t),wao=r(Uye," (SEW-D model)"),Uye.forEach(t),Aao=i(L),Eg=n(L,"LI",{});var Jye=s(Eg);lle=n(Jye,"STRONG",{});var adt=s(lle);Lao=r(adt,"speech-encoder-decoder"),adt.forEach(t),yao=r(Jye," \u2014 "),WP=n(Jye,"A",{href:!0});var ndt=s(WP);xao=r(ndt,"SpeechEncoderDecoderConfig"),ndt.forEach(t),$ao=r(Jye," (Speech Encoder decoder model)"),Jye.forEach(t),kao=i(L),Cg=n(L,"LI",{});var Yye=s(Cg);ile=n(Yye,"STRONG",{});var sdt=s(ile);Sao=r(sdt,"speech_to_text"),sdt.forEach(t),Rao=r(Yye," \u2014 "),QP=n(Yye,"A",{href:!0});var ldt=s(QP);Pao=r(ldt,"Speech2TextConfig"),ldt.forEach(t),Bao=r(Yye," (Speech2Text model)"),Yye.forEach(t),Iao=i(L),wg=n(L,"LI",{});var Kye=s(wg);dle=n(Kye,"STRONG",{});var idt=s(dle);Nao=r(idt,"speech_to_text_2"),idt.forEach(t),qao=r(Kye," \u2014 "),HP=n(Kye,"A",{href:!0});var ddt=s(HP);jao=r(ddt,"Speech2Text2Config"),ddt.forEach(t),Dao=r(Kye," (Speech2Text2 model)"),Kye.forEach(t),Gao=i(L),Ag=n(L,"LI",{});var Zye=s(Ag);cle=n(Zye,"STRONG",{});var cdt=s(cle);Oao=r(cdt,"splinter"),cdt.forEach(t),Vao=r(Zye," \u2014 "),UP=n(Zye,"A",{href:!0});var fdt=s(UP);Xao=r(fdt,"SplinterConfig"),fdt.forEach(t),zao=r(Zye," (Splinter model)"),Zye.forEach(t),Wao=i(L),Lg=n(L,"LI",{});var e9e=s(Lg);fle=n(e9e,"STRONG",{});var mdt=s(fle);Qao=r(mdt,"squeezebert"),mdt.forEach(t),Hao=r(e9e," \u2014 "),JP=n(e9e,"A",{href:!0});var gdt=s(JP);Uao=r(gdt,"SqueezeBertConfig"),gdt.forEach(t),Jao=r(e9e," (SqueezeBERT model)"),e9e.forEach(t),Yao=i(L),yg=n(L,"LI",{});var o9e=s(yg);mle=n(o9e,"STRONG",{});var hdt=s(mle);Kao=r(hdt,"swin"),hdt.forEach(t),Zao=r(o9e," \u2014 "),YP=n(o9e,"A",{href:!0});var pdt=s(YP);eno=r(pdt,"SwinConfig"),pdt.forEach(t),ono=r(o9e," (Swin Transformer model)"),o9e.forEach(t),rno=i(L),xg=n(L,"LI",{});var r9e=s(xg);gle=n(r9e,"STRONG",{});var _dt=s(gle);tno=r(_dt,"swinv2"),_dt.forEach(t),ano=r(r9e," \u2014 "),KP=n(r9e,"A",{href:!0});var udt=s(KP);nno=r(udt,"Swinv2Config"),udt.forEach(t),sno=r(r9e," (Swin Transformer V2 model)"),r9e.forEach(t),lno=i(L),$g=n(L,"LI",{});var t9e=s($g);hle=n(t9e,"STRONG",{});var bdt=s(hle);ino=r(bdt,"t5"),bdt.forEach(t),dno=r(t9e," \u2014 "),ZP=n(t9e,"A",{href:!0});var vdt=s(ZP);cno=r(vdt,"T5Config"),vdt.forEach(t),fno=r(t9e," (T5 model)"),t9e.forEach(t),mno=i(L),kg=n(L,"LI",{});var a9e=s(kg);ple=n(a9e,"STRONG",{});var Fdt=s(ple);gno=r(Fdt,"tapas"),Fdt.forEach(t),hno=r(a9e," \u2014 "),eB=n(a9e,"A",{href:!0});var Tdt=s(eB);pno=r(Tdt,"TapasConfig"),Tdt.forEach(t),_no=r(a9e," (TAPAS model)"),a9e.forEach(t),uno=i(L),Sg=n(L,"LI",{});var n9e=s(Sg);_le=n(n9e,"STRONG",{});var Mdt=s(_le);bno=r(Mdt,"trajectory_transformer"),Mdt.forEach(t),vno=r(n9e," \u2014 "),oB=n(n9e,"A",{href:!0});var Edt=s(oB);Fno=r(Edt,"TrajectoryTransformerConfig"),Edt.forEach(t),Tno=r(n9e," (Trajectory Transformer model)"),n9e.forEach(t),Mno=i(L),Rg=n(L,"LI",{});var s9e=s(Rg);ule=n(s9e,"STRONG",{});var Cdt=s(ule);Eno=r(Cdt,"transfo-xl"),Cdt.forEach(t),Cno=r(s9e," \u2014 "),rB=n(s9e,"A",{href:!0});var wdt=s(rB);wno=r(wdt,"TransfoXLConfig"),wdt.forEach(t),Ano=r(s9e," (Transformer-XL model)"),s9e.forEach(t),Lno=i(L),Pg=n(L,"LI",{});var l9e=s(Pg);ble=n(l9e,"STRONG",{});var Adt=s(ble);yno=r(Adt,"trocr"),Adt.forEach(t),xno=r(l9e," \u2014 "),tB=n(l9e,"A",{href:!0});var Ldt=s(tB);$no=r(Ldt,"TrOCRConfig"),Ldt.forEach(t),kno=r(l9e," (TrOCR model)"),l9e.forEach(t),Sno=i(L),Bg=n(L,"LI",{});var i9e=s(Bg);vle=n(i9e,"STRONG",{});var ydt=s(vle);Rno=r(ydt,"unispeech"),ydt.forEach(t),Pno=r(i9e," \u2014 "),aB=n(i9e,"A",{href:!0});var xdt=s(aB);Bno=r(xdt,"UniSpeechConfig"),xdt.forEach(t),Ino=r(i9e," (UniSpeech model)"),i9e.forEach(t),Nno=i(L),Ig=n(L,"LI",{});var d9e=s(Ig);Fle=n(d9e,"STRONG",{});var $dt=s(Fle);qno=r($dt,"unispeech-sat"),$dt.forEach(t),jno=r(d9e," \u2014 "),nB=n(d9e,"A",{href:!0});var kdt=s(nB);Dno=r(kdt,"UniSpeechSatConfig"),kdt.forEach(t),Gno=r(d9e," (UniSpeechSat model)"),d9e.forEach(t),Ono=i(L),Ng=n(L,"LI",{});var c9e=s(Ng);Tle=n(c9e,"STRONG",{});var Sdt=s(Tle);Vno=r(Sdt,"van"),Sdt.forEach(t),Xno=r(c9e," \u2014 "),sB=n(c9e,"A",{href:!0});var Rdt=s(sB);zno=r(Rdt,"VanConfig"),Rdt.forEach(t),Wno=r(c9e," (VAN model)"),c9e.forEach(t),Qno=i(L),qg=n(L,"LI",{});var f9e=s(qg);Mle=n(f9e,"STRONG",{});var Pdt=s(Mle);Hno=r(Pdt,"vilt"),Pdt.forEach(t),Uno=r(f9e," \u2014 "),lB=n(f9e,"A",{href:!0});var Bdt=s(lB);Jno=r(Bdt,"ViltConfig"),Bdt.forEach(t),Yno=r(f9e," (ViLT model)"),f9e.forEach(t),Kno=i(L),jg=n(L,"LI",{});var m9e=s(jg);Ele=n(m9e,"STRONG",{});var Idt=s(Ele);Zno=r(Idt,"vision-encoder-decoder"),Idt.forEach(t),eso=r(m9e," \u2014 "),iB=n(m9e,"A",{href:!0});var Ndt=s(iB);oso=r(Ndt,"VisionEncoderDecoderConfig"),Ndt.forEach(t),rso=r(m9e," (Vision Encoder decoder model)"),m9e.forEach(t),tso=i(L),Dg=n(L,"LI",{});var g9e=s(Dg);Cle=n(g9e,"STRONG",{});var qdt=s(Cle);aso=r(qdt,"vision-text-dual-encoder"),qdt.forEach(t),nso=r(g9e," \u2014 "),dB=n(g9e,"A",{href:!0});var jdt=s(dB);sso=r(jdt,"VisionTextDualEncoderConfig"),jdt.forEach(t),lso=r(g9e," (VisionTextDualEncoder model)"),g9e.forEach(t),iso=i(L),Gg=n(L,"LI",{});var h9e=s(Gg);wle=n(h9e,"STRONG",{});var Ddt=s(wle);dso=r(Ddt,"visual_bert"),Ddt.forEach(t),cso=r(h9e," \u2014 "),cB=n(h9e,"A",{href:!0});var Gdt=s(cB);fso=r(Gdt,"VisualBertConfig"),Gdt.forEach(t),mso=r(h9e," (VisualBERT model)"),h9e.forEach(t),gso=i(L),Og=n(L,"LI",{});var p9e=s(Og);Ale=n(p9e,"STRONG",{});var Odt=s(Ale);hso=r(Odt,"vit"),Odt.forEach(t),pso=r(p9e," \u2014 "),fB=n(p9e,"A",{href:!0});var Vdt=s(fB);_so=r(Vdt,"ViTConfig"),Vdt.forEach(t),uso=r(p9e," (ViT model)"),p9e.forEach(t),bso=i(L),Vg=n(L,"LI",{});var _9e=s(Vg);Lle=n(_9e,"STRONG",{});var Xdt=s(Lle);vso=r(Xdt,"vit_mae"),Xdt.forEach(t),Fso=r(_9e," \u2014 "),mB=n(_9e,"A",{href:!0});var zdt=s(mB);Tso=r(zdt,"ViTMAEConfig"),zdt.forEach(t),Mso=r(_9e," (ViTMAE model)"),_9e.forEach(t),Eso=i(L),Xg=n(L,"LI",{});var u9e=s(Xg);yle=n(u9e,"STRONG",{});var Wdt=s(yle);Cso=r(Wdt,"wav2vec2"),Wdt.forEach(t),wso=r(u9e," \u2014 "),gB=n(u9e,"A",{href:!0});var Qdt=s(gB);Aso=r(Qdt,"Wav2Vec2Config"),Qdt.forEach(t),Lso=r(u9e," (Wav2Vec2 model)"),u9e.forEach(t),yso=i(L),zg=n(L,"LI",{});var b9e=s(zg);xle=n(b9e,"STRONG",{});var Hdt=s(xle);xso=r(Hdt,"wav2vec2-conformer"),Hdt.forEach(t),$so=r(b9e," \u2014 "),hB=n(b9e,"A",{href:!0});var Udt=s(hB);kso=r(Udt,"Wav2Vec2ConformerConfig"),Udt.forEach(t),Sso=r(b9e," (Wav2Vec2-Conformer model)"),b9e.forEach(t),Rso=i(L),Wg=n(L,"LI",{});var v9e=s(Wg);$le=n(v9e,"STRONG",{});var Jdt=s($le);Pso=r(Jdt,"wavlm"),Jdt.forEach(t),Bso=r(v9e," \u2014 "),pB=n(v9e,"A",{href:!0});var Ydt=s(pB);Iso=r(Ydt,"WavLMConfig"),Ydt.forEach(t),Nso=r(v9e," (WavLM model)"),v9e.forEach(t),qso=i(L),Qg=n(L,"LI",{});var F9e=s(Qg);kle=n(F9e,"STRONG",{});var Kdt=s(kle);jso=r(Kdt,"xglm"),Kdt.forEach(t),Dso=r(F9e," \u2014 "),_B=n(F9e,"A",{href:!0});var Zdt=s(_B);Gso=r(Zdt,"XGLMConfig"),Zdt.forEach(t),Oso=r(F9e," (XGLM model)"),F9e.forEach(t),Vso=i(L),Hg=n(L,"LI",{});var T9e=s(Hg);Sle=n(T9e,"STRONG",{});var ect=s(Sle);Xso=r(ect,"xlm"),ect.forEach(t),zso=r(T9e," \u2014 "),uB=n(T9e,"A",{href:!0});var oct=s(uB);Wso=r(oct,"XLMConfig"),oct.forEach(t),Qso=r(T9e," (XLM model)"),T9e.forEach(t),Hso=i(L),Ug=n(L,"LI",{});var M9e=s(Ug);Rle=n(M9e,"STRONG",{});var rct=s(Rle);Uso=r(rct,"xlm-prophetnet"),rct.forEach(t),Jso=r(M9e," \u2014 "),bB=n(M9e,"A",{href:!0});var tct=s(bB);Yso=r(tct,"XLMProphetNetConfig"),tct.forEach(t),Kso=r(M9e," (XLM-ProphetNet model)"),M9e.forEach(t),Zso=i(L),Jg=n(L,"LI",{});var E9e=s(Jg);Ple=n(E9e,"STRONG",{});var act=s(Ple);elo=r(act,"xlm-roberta"),act.forEach(t),olo=r(E9e," \u2014 "),vB=n(E9e,"A",{href:!0});var nct=s(vB);rlo=r(nct,"XLMRobertaConfig"),nct.forEach(t),tlo=r(E9e," (XLM-RoBERTa model)"),E9e.forEach(t),alo=i(L),Yg=n(L,"LI",{});var C9e=s(Yg);Ble=n(C9e,"STRONG",{});var sct=s(Ble);nlo=r(sct,"xlm-roberta-xl"),sct.forEach(t),slo=r(C9e," \u2014 "),FB=n(C9e,"A",{href:!0});var lct=s(FB);llo=r(lct,"XLMRobertaXLConfig"),lct.forEach(t),ilo=r(C9e," (XLM-RoBERTa-XL model)"),C9e.forEach(t),dlo=i(L),Kg=n(L,"LI",{});var w9e=s(Kg);Ile=n(w9e,"STRONG",{});var ict=s(Ile);clo=r(ict,"xlnet"),ict.forEach(t),flo=r(w9e," \u2014 "),TB=n(w9e,"A",{href:!0});var dct=s(TB);mlo=r(dct,"XLNetConfig"),dct.forEach(t),glo=r(w9e," (XLNet model)"),w9e.forEach(t),hlo=i(L),Zg=n(L,"LI",{});var A9e=s(Zg);Nle=n(A9e,"STRONG",{});var cct=s(Nle);plo=r(cct,"yolos"),cct.forEach(t),_lo=r(A9e," \u2014 "),MB=n(A9e,"A",{href:!0});var fct=s(MB);ulo=r(fct,"YolosConfig"),fct.forEach(t),blo=r(A9e," (YOLOS model)"),A9e.forEach(t),vlo=i(L),eh=n(L,"LI",{});var L9e=s(eh);qle=n(L9e,"STRONG",{});var mct=s(qle);Flo=r(mct,"yoso"),mct.forEach(t),Tlo=r(L9e," \u2014 "),EB=n(L9e,"A",{href:!0});var gct=s(EB);Mlo=r(gct,"YosoConfig"),gct.forEach(t),Elo=r(L9e," (YOSO model)"),L9e.forEach(t),L.forEach(t),Clo=i(st),T(oh.$$.fragment,st),st.forEach(t),wlo=i(nt),rh=n(nt,"DIV",{class:!0});var BQe=s(rh);T(RL.$$.fragment,BQe),Alo=i(BQe),jle=n(BQe,"P",{});var hct=s(jle);Llo=r(hct,"Register a new configuration for this class."),hct.forEach(t),BQe.forEach(t),nt.forEach(t),Ize=i(f),Di=n(f,"H2",{class:!0});var IQe=s(Di);th=n(IQe,"A",{id:!0,class:!0,href:!0});var pct=s(th);Dle=n(pct,"SPAN",{});var _ct=s(Dle);T(PL.$$.fragment,_ct),_ct.forEach(t),pct.forEach(t),ylo=i(IQe),Gle=n(IQe,"SPAN",{});var uct=s(Gle);xlo=r(uct,"AutoTokenizer"),uct.forEach(t),IQe.forEach(t),Nze=i(f),yo=n(f,"DIV",{class:!0});var ol=s(yo);T(BL.$$.fragment,ol),$lo=i(ol),IL=n(ol,"P",{});var NQe=s(IL);klo=r(NQe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CB=n(NQe,"A",{href:!0});var bct=s(CB);Slo=r(bct,"AutoTokenizer.from_pretrained()"),bct.forEach(t),Rlo=r(NQe," class method."),NQe.forEach(t),Plo=i(ol),NL=n(ol,"P",{});var qQe=s(NL);Blo=r(qQe,"This class cannot be instantiated directly using "),Ole=n(qQe,"CODE",{});var vct=s(Ole);Ilo=r(vct,"__init__()"),vct.forEach(t),Nlo=r(qQe," (throws an error)."),qQe.forEach(t),qlo=i(ol),xr=n(ol,"DIV",{class:!0});var rl=s(xr);T(qL.$$.fragment,rl),jlo=i(rl),Vle=n(rl,"P",{});var Fct=s(Vle);Dlo=r(Fct,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Fct.forEach(t),Glo=i(rl),Pa=n(rl,"P",{});var LA=s(Pa);Olo=r(LA,"The tokenizer class to instantiate is selected based on the "),Xle=n(LA,"CODE",{});var Tct=s(Xle);Vlo=r(Tct,"model_type"),Tct.forEach(t),Xlo=r(LA,` property of the config object (either
passed as an argument or loaded from `),zle=n(LA,"CODE",{});var Mct=s(zle);zlo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),Wlo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wle=n(LA,"CODE",{});var Ect=s(Wle);Qlo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),Hlo=r(LA,":"),LA.forEach(t),Ulo=i(rl),k=n(rl,"UL",{});var S=s(k);Dn=n(S,"LI",{});var Xk=s(Dn);Qle=n(Xk,"STRONG",{});var Cct=s(Qle);Jlo=r(Cct,"albert"),Cct.forEach(t),Ylo=r(Xk," \u2014 "),wB=n(Xk,"A",{href:!0});var wct=s(wB);Klo=r(wct,"AlbertTokenizer"),wct.forEach(t),Zlo=r(Xk," or "),AB=n(Xk,"A",{href:!0});var Act=s(AB);eio=r(Act,"AlbertTokenizerFast"),Act.forEach(t),oio=r(Xk," (ALBERT model)"),Xk.forEach(t),rio=i(S),Gn=n(S,"LI",{});var zk=s(Gn);Hle=n(zk,"STRONG",{});var Lct=s(Hle);tio=r(Lct,"bart"),Lct.forEach(t),aio=r(zk," \u2014 "),LB=n(zk,"A",{href:!0});var yct=s(LB);nio=r(yct,"BartTokenizer"),yct.forEach(t),sio=r(zk," or "),yB=n(zk,"A",{href:!0});var xct=s(yB);lio=r(xct,"BartTokenizerFast"),xct.forEach(t),iio=r(zk," (BART model)"),zk.forEach(t),dio=i(S),On=n(S,"LI",{});var Wk=s(On);Ule=n(Wk,"STRONG",{});var $ct=s(Ule);cio=r($ct,"barthez"),$ct.forEach(t),fio=r(Wk," \u2014 "),xB=n(Wk,"A",{href:!0});var kct=s(xB);mio=r(kct,"BarthezTokenizer"),kct.forEach(t),gio=r(Wk," or "),$B=n(Wk,"A",{href:!0});var Sct=s($B);hio=r(Sct,"BarthezTokenizerFast"),Sct.forEach(t),pio=r(Wk," (BARThez model)"),Wk.forEach(t),_io=i(S),ah=n(S,"LI",{});var y9e=s(ah);Jle=n(y9e,"STRONG",{});var Rct=s(Jle);uio=r(Rct,"bartpho"),Rct.forEach(t),bio=r(y9e," \u2014 "),kB=n(y9e,"A",{href:!0});var Pct=s(kB);vio=r(Pct,"BartphoTokenizer"),Pct.forEach(t),Fio=r(y9e," (BARTpho model)"),y9e.forEach(t),Tio=i(S),Vn=n(S,"LI",{});var Qk=s(Vn);Yle=n(Qk,"STRONG",{});var Bct=s(Yle);Mio=r(Bct,"bert"),Bct.forEach(t),Eio=r(Qk," \u2014 "),SB=n(Qk,"A",{href:!0});var Ict=s(SB);Cio=r(Ict,"BertTokenizer"),Ict.forEach(t),wio=r(Qk," or "),RB=n(Qk,"A",{href:!0});var Nct=s(RB);Aio=r(Nct,"BertTokenizerFast"),Nct.forEach(t),Lio=r(Qk," (BERT model)"),Qk.forEach(t),yio=i(S),nh=n(S,"LI",{});var x9e=s(nh);Kle=n(x9e,"STRONG",{});var qct=s(Kle);xio=r(qct,"bert-generation"),qct.forEach(t),$io=r(x9e," \u2014 "),PB=n(x9e,"A",{href:!0});var jct=s(PB);kio=r(jct,"BertGenerationTokenizer"),jct.forEach(t),Sio=r(x9e," (Bert Generation model)"),x9e.forEach(t),Rio=i(S),sh=n(S,"LI",{});var $9e=s(sh);Zle=n($9e,"STRONG",{});var Dct=s(Zle);Pio=r(Dct,"bert-japanese"),Dct.forEach(t),Bio=r($9e," \u2014 "),BB=n($9e,"A",{href:!0});var Gct=s(BB);Iio=r(Gct,"BertJapaneseTokenizer"),Gct.forEach(t),Nio=r($9e," (BertJapanese model)"),$9e.forEach(t),qio=i(S),lh=n(S,"LI",{});var k9e=s(lh);eie=n(k9e,"STRONG",{});var Oct=s(eie);jio=r(Oct,"bertweet"),Oct.forEach(t),Dio=r(k9e," \u2014 "),IB=n(k9e,"A",{href:!0});var Vct=s(IB);Gio=r(Vct,"BertweetTokenizer"),Vct.forEach(t),Oio=r(k9e," (BERTweet model)"),k9e.forEach(t),Vio=i(S),Xn=n(S,"LI",{});var Hk=s(Xn);oie=n(Hk,"STRONG",{});var Xct=s(oie);Xio=r(Xct,"big_bird"),Xct.forEach(t),zio=r(Hk," \u2014 "),NB=n(Hk,"A",{href:!0});var zct=s(NB);Wio=r(zct,"BigBirdTokenizer"),zct.forEach(t),Qio=r(Hk," or "),qB=n(Hk,"A",{href:!0});var Wct=s(qB);Hio=r(Wct,"BigBirdTokenizerFast"),Wct.forEach(t),Uio=r(Hk," (BigBird model)"),Hk.forEach(t),Jio=i(S),zn=n(S,"LI",{});var Uk=s(zn);rie=n(Uk,"STRONG",{});var Qct=s(rie);Yio=r(Qct,"bigbird_pegasus"),Qct.forEach(t),Kio=r(Uk," \u2014 "),jB=n(Uk,"A",{href:!0});var Hct=s(jB);Zio=r(Hct,"PegasusTokenizer"),Hct.forEach(t),edo=r(Uk," or "),DB=n(Uk,"A",{href:!0});var Uct=s(DB);odo=r(Uct,"PegasusTokenizerFast"),Uct.forEach(t),rdo=r(Uk," (BigBird-Pegasus model)"),Uk.forEach(t),tdo=i(S),Wn=n(S,"LI",{});var Jk=s(Wn);tie=n(Jk,"STRONG",{});var Jct=s(tie);ado=r(Jct,"blenderbot"),Jct.forEach(t),ndo=r(Jk," \u2014 "),GB=n(Jk,"A",{href:!0});var Yct=s(GB);sdo=r(Yct,"BlenderbotTokenizer"),Yct.forEach(t),ldo=r(Jk," or "),OB=n(Jk,"A",{href:!0});var Kct=s(OB);ido=r(Kct,"BlenderbotTokenizerFast"),Kct.forEach(t),ddo=r(Jk," (Blenderbot model)"),Jk.forEach(t),cdo=i(S),ih=n(S,"LI",{});var S9e=s(ih);aie=n(S9e,"STRONG",{});var Zct=s(aie);fdo=r(Zct,"blenderbot-small"),Zct.forEach(t),mdo=r(S9e," \u2014 "),VB=n(S9e,"A",{href:!0});var eft=s(VB);gdo=r(eft,"BlenderbotSmallTokenizer"),eft.forEach(t),hdo=r(S9e," (BlenderbotSmall model)"),S9e.forEach(t),pdo=i(S),dh=n(S,"LI",{});var R9e=s(dh);nie=n(R9e,"STRONG",{});var oft=s(nie);_do=r(oft,"bloom"),oft.forEach(t),udo=r(R9e," \u2014 "),XB=n(R9e,"A",{href:!0});var rft=s(XB);bdo=r(rft,"BloomTokenizerFast"),rft.forEach(t),vdo=r(R9e," (BLOOM model)"),R9e.forEach(t),Fdo=i(S),ch=n(S,"LI",{});var P9e=s(ch);sie=n(P9e,"STRONG",{});var tft=s(sie);Tdo=r(tft,"byt5"),tft.forEach(t),Mdo=r(P9e," \u2014 "),zB=n(P9e,"A",{href:!0});var aft=s(zB);Edo=r(aft,"ByT5Tokenizer"),aft.forEach(t),Cdo=r(P9e," (ByT5 model)"),P9e.forEach(t),wdo=i(S),Qn=n(S,"LI",{});var Yk=s(Qn);lie=n(Yk,"STRONG",{});var nft=s(lie);Ado=r(nft,"camembert"),nft.forEach(t),Ldo=r(Yk," \u2014 "),WB=n(Yk,"A",{href:!0});var sft=s(WB);ydo=r(sft,"CamembertTokenizer"),sft.forEach(t),xdo=r(Yk," or "),QB=n(Yk,"A",{href:!0});var lft=s(QB);$do=r(lft,"CamembertTokenizerFast"),lft.forEach(t),kdo=r(Yk," (CamemBERT model)"),Yk.forEach(t),Sdo=i(S),fh=n(S,"LI",{});var B9e=s(fh);iie=n(B9e,"STRONG",{});var ift=s(iie);Rdo=r(ift,"canine"),ift.forEach(t),Pdo=r(B9e," \u2014 "),HB=n(B9e,"A",{href:!0});var dft=s(HB);Bdo=r(dft,"CanineTokenizer"),dft.forEach(t),Ido=r(B9e," (CANINE model)"),B9e.forEach(t),Ndo=i(S),Hn=n(S,"LI",{});var Kk=s(Hn);die=n(Kk,"STRONG",{});var cft=s(die);qdo=r(cft,"clip"),cft.forEach(t),jdo=r(Kk," \u2014 "),UB=n(Kk,"A",{href:!0});var fft=s(UB);Ddo=r(fft,"CLIPTokenizer"),fft.forEach(t),Gdo=r(Kk," or "),JB=n(Kk,"A",{href:!0});var mft=s(JB);Odo=r(mft,"CLIPTokenizerFast"),mft.forEach(t),Vdo=r(Kk," (CLIP model)"),Kk.forEach(t),Xdo=i(S),Un=n(S,"LI",{});var Zk=s(Un);cie=n(Zk,"STRONG",{});var gft=s(cie);zdo=r(gft,"codegen"),gft.forEach(t),Wdo=r(Zk," \u2014 "),YB=n(Zk,"A",{href:!0});var hft=s(YB);Qdo=r(hft,"CodeGenTokenizer"),hft.forEach(t),Hdo=r(Zk," or "),KB=n(Zk,"A",{href:!0});var pft=s(KB);Udo=r(pft,"CodeGenTokenizerFast"),pft.forEach(t),Jdo=r(Zk," (CodeGen model)"),Zk.forEach(t),Ydo=i(S),Jn=n(S,"LI",{});var eS=s(Jn);fie=n(eS,"STRONG",{});var _ft=s(fie);Kdo=r(_ft,"convbert"),_ft.forEach(t),Zdo=r(eS," \u2014 "),ZB=n(eS,"A",{href:!0});var uft=s(ZB);eco=r(uft,"ConvBertTokenizer"),uft.forEach(t),oco=r(eS," or "),eI=n(eS,"A",{href:!0});var bft=s(eI);rco=r(bft,"ConvBertTokenizerFast"),bft.forEach(t),tco=r(eS," (ConvBERT model)"),eS.forEach(t),aco=i(S),Yn=n(S,"LI",{});var oS=s(Yn);mie=n(oS,"STRONG",{});var vft=s(mie);nco=r(vft,"cpm"),vft.forEach(t),sco=r(oS," \u2014 "),oI=n(oS,"A",{href:!0});var Fft=s(oI);lco=r(Fft,"CpmTokenizer"),Fft.forEach(t),ico=r(oS," or "),rI=n(oS,"A",{href:!0});var Tft=s(rI);dco=r(Tft,"CpmTokenizerFast"),Tft.forEach(t),cco=r(oS," (CPM model)"),oS.forEach(t),fco=i(S),mh=n(S,"LI",{});var I9e=s(mh);gie=n(I9e,"STRONG",{});var Mft=s(gie);mco=r(Mft,"ctrl"),Mft.forEach(t),gco=r(I9e," \u2014 "),tI=n(I9e,"A",{href:!0});var Eft=s(tI);hco=r(Eft,"CTRLTokenizer"),Eft.forEach(t),pco=r(I9e," (CTRL model)"),I9e.forEach(t),_co=i(S),Kn=n(S,"LI",{});var rS=s(Kn);hie=n(rS,"STRONG",{});var Cft=s(hie);uco=r(Cft,"data2vec-text"),Cft.forEach(t),bco=r(rS," \u2014 "),aI=n(rS,"A",{href:!0});var wft=s(aI);vco=r(wft,"RobertaTokenizer"),wft.forEach(t),Fco=r(rS," or "),nI=n(rS,"A",{href:!0});var Aft=s(nI);Tco=r(Aft,"RobertaTokenizerFast"),Aft.forEach(t),Mco=r(rS," (Data2VecText model)"),rS.forEach(t),Eco=i(S),Zn=n(S,"LI",{});var tS=s(Zn);pie=n(tS,"STRONG",{});var Lft=s(pie);Cco=r(Lft,"deberta"),Lft.forEach(t),wco=r(tS," \u2014 "),sI=n(tS,"A",{href:!0});var yft=s(sI);Aco=r(yft,"DebertaTokenizer"),yft.forEach(t),Lco=r(tS," or "),lI=n(tS,"A",{href:!0});var xft=s(lI);yco=r(xft,"DebertaTokenizerFast"),xft.forEach(t),xco=r(tS," (DeBERTa model)"),tS.forEach(t),$co=i(S),es=n(S,"LI",{});var aS=s(es);_ie=n(aS,"STRONG",{});var $ft=s(_ie);kco=r($ft,"deberta-v2"),$ft.forEach(t),Sco=r(aS," \u2014 "),iI=n(aS,"A",{href:!0});var kft=s(iI);Rco=r(kft,"DebertaV2Tokenizer"),kft.forEach(t),Pco=r(aS," or "),dI=n(aS,"A",{href:!0});var Sft=s(dI);Bco=r(Sft,"DebertaV2TokenizerFast"),Sft.forEach(t),Ico=r(aS," (DeBERTa-v2 model)"),aS.forEach(t),Nco=i(S),os=n(S,"LI",{});var nS=s(os);uie=n(nS,"STRONG",{});var Rft=s(uie);qco=r(Rft,"distilbert"),Rft.forEach(t),jco=r(nS," \u2014 "),cI=n(nS,"A",{href:!0});var Pft=s(cI);Dco=r(Pft,"DistilBertTokenizer"),Pft.forEach(t),Gco=r(nS," or "),fI=n(nS,"A",{href:!0});var Bft=s(fI);Oco=r(Bft,"DistilBertTokenizerFast"),Bft.forEach(t),Vco=r(nS," (DistilBERT model)"),nS.forEach(t),Xco=i(S),rs=n(S,"LI",{});var sS=s(rs);bie=n(sS,"STRONG",{});var Ift=s(bie);zco=r(Ift,"dpr"),Ift.forEach(t),Wco=r(sS," \u2014 "),mI=n(sS,"A",{href:!0});var Nft=s(mI);Qco=r(Nft,"DPRQuestionEncoderTokenizer"),Nft.forEach(t),Hco=r(sS," or "),gI=n(sS,"A",{href:!0});var qft=s(gI);Uco=r(qft,"DPRQuestionEncoderTokenizerFast"),qft.forEach(t),Jco=r(sS," (DPR model)"),sS.forEach(t),Yco=i(S),ts=n(S,"LI",{});var lS=s(ts);vie=n(lS,"STRONG",{});var jft=s(vie);Kco=r(jft,"electra"),jft.forEach(t),Zco=r(lS," \u2014 "),hI=n(lS,"A",{href:!0});var Dft=s(hI);efo=r(Dft,"ElectraTokenizer"),Dft.forEach(t),ofo=r(lS," or "),pI=n(lS,"A",{href:!0});var Gft=s(pI);rfo=r(Gft,"ElectraTokenizerFast"),Gft.forEach(t),tfo=r(lS," (ELECTRA model)"),lS.forEach(t),afo=i(S),gh=n(S,"LI",{});var N9e=s(gh);Fie=n(N9e,"STRONG",{});var Oft=s(Fie);nfo=r(Oft,"flaubert"),Oft.forEach(t),sfo=r(N9e," \u2014 "),_I=n(N9e,"A",{href:!0});var Vft=s(_I);lfo=r(Vft,"FlaubertTokenizer"),Vft.forEach(t),ifo=r(N9e," (FlauBERT model)"),N9e.forEach(t),dfo=i(S),as=n(S,"LI",{});var iS=s(as);Tie=n(iS,"STRONG",{});var Xft=s(Tie);cfo=r(Xft,"fnet"),Xft.forEach(t),ffo=r(iS," \u2014 "),uI=n(iS,"A",{href:!0});var zft=s(uI);mfo=r(zft,"FNetTokenizer"),zft.forEach(t),gfo=r(iS," or "),bI=n(iS,"A",{href:!0});var Wft=s(bI);hfo=r(Wft,"FNetTokenizerFast"),Wft.forEach(t),pfo=r(iS," (FNet model)"),iS.forEach(t),_fo=i(S),hh=n(S,"LI",{});var q9e=s(hh);Mie=n(q9e,"STRONG",{});var Qft=s(Mie);ufo=r(Qft,"fsmt"),Qft.forEach(t),bfo=r(q9e," \u2014 "),vI=n(q9e,"A",{href:!0});var Hft=s(vI);vfo=r(Hft,"FSMTTokenizer"),Hft.forEach(t),Ffo=r(q9e," (FairSeq Machine-Translation model)"),q9e.forEach(t),Tfo=i(S),ns=n(S,"LI",{});var dS=s(ns);Eie=n(dS,"STRONG",{});var Uft=s(Eie);Mfo=r(Uft,"funnel"),Uft.forEach(t),Efo=r(dS," \u2014 "),FI=n(dS,"A",{href:!0});var Jft=s(FI);Cfo=r(Jft,"FunnelTokenizer"),Jft.forEach(t),wfo=r(dS," or "),TI=n(dS,"A",{href:!0});var Yft=s(TI);Afo=r(Yft,"FunnelTokenizerFast"),Yft.forEach(t),Lfo=r(dS," (Funnel Transformer model)"),dS.forEach(t),yfo=i(S),ss=n(S,"LI",{});var cS=s(ss);Cie=n(cS,"STRONG",{});var Kft=s(Cie);xfo=r(Kft,"gpt2"),Kft.forEach(t),$fo=r(cS," \u2014 "),MI=n(cS,"A",{href:!0});var Zft=s(MI);kfo=r(Zft,"GPT2Tokenizer"),Zft.forEach(t),Sfo=r(cS," or "),EI=n(cS,"A",{href:!0});var emt=s(EI);Rfo=r(emt,"GPT2TokenizerFast"),emt.forEach(t),Pfo=r(cS," (OpenAI GPT-2 model)"),cS.forEach(t),Bfo=i(S),ls=n(S,"LI",{});var fS=s(ls);wie=n(fS,"STRONG",{});var omt=s(wie);Ifo=r(omt,"gpt_neo"),omt.forEach(t),Nfo=r(fS," \u2014 "),CI=n(fS,"A",{href:!0});var rmt=s(CI);qfo=r(rmt,"GPT2Tokenizer"),rmt.forEach(t),jfo=r(fS," or "),wI=n(fS,"A",{href:!0});var tmt=s(wI);Dfo=r(tmt,"GPT2TokenizerFast"),tmt.forEach(t),Gfo=r(fS," (GPT Neo model)"),fS.forEach(t),Ofo=i(S),ph=n(S,"LI",{});var j9e=s(ph);Aie=n(j9e,"STRONG",{});var amt=s(Aie);Vfo=r(amt,"gpt_neox"),amt.forEach(t),Xfo=r(j9e," \u2014 "),AI=n(j9e,"A",{href:!0});var nmt=s(AI);zfo=r(nmt,"GPTNeoXTokenizerFast"),nmt.forEach(t),Wfo=r(j9e," (GPT NeoX model)"),j9e.forEach(t),Qfo=i(S),is=n(S,"LI",{});var mS=s(is);Lie=n(mS,"STRONG",{});var smt=s(Lie);Hfo=r(smt,"gptj"),smt.forEach(t),Ufo=r(mS," \u2014 "),LI=n(mS,"A",{href:!0});var lmt=s(LI);Jfo=r(lmt,"GPT2Tokenizer"),lmt.forEach(t),Yfo=r(mS," or "),yI=n(mS,"A",{href:!0});var imt=s(yI);Kfo=r(imt,"GPT2TokenizerFast"),imt.forEach(t),Zfo=r(mS," (GPT-J model)"),mS.forEach(t),emo=i(S),ds=n(S,"LI",{});var gS=s(ds);yie=n(gS,"STRONG",{});var dmt=s(yie);omo=r(dmt,"groupvit"),dmt.forEach(t),rmo=r(gS," \u2014 "),xI=n(gS,"A",{href:!0});var cmt=s(xI);tmo=r(cmt,"CLIPTokenizer"),cmt.forEach(t),amo=r(gS," or "),$I=n(gS,"A",{href:!0});var fmt=s($I);nmo=r(fmt,"CLIPTokenizerFast"),fmt.forEach(t),smo=r(gS," (GroupViT model)"),gS.forEach(t),lmo=i(S),cs=n(S,"LI",{});var hS=s(cs);xie=n(hS,"STRONG",{});var mmt=s(xie);imo=r(mmt,"herbert"),mmt.forEach(t),dmo=r(hS," \u2014 "),kI=n(hS,"A",{href:!0});var gmt=s(kI);cmo=r(gmt,"HerbertTokenizer"),gmt.forEach(t),fmo=r(hS," or "),SI=n(hS,"A",{href:!0});var hmt=s(SI);mmo=r(hmt,"HerbertTokenizerFast"),hmt.forEach(t),gmo=r(hS," (HerBERT model)"),hS.forEach(t),hmo=i(S),_h=n(S,"LI",{});var D9e=s(_h);$ie=n(D9e,"STRONG",{});var pmt=s($ie);pmo=r(pmt,"hubert"),pmt.forEach(t),_mo=r(D9e," \u2014 "),RI=n(D9e,"A",{href:!0});var _mt=s(RI);umo=r(_mt,"Wav2Vec2CTCTokenizer"),_mt.forEach(t),bmo=r(D9e," (Hubert model)"),D9e.forEach(t),vmo=i(S),fs=n(S,"LI",{});var pS=s(fs);kie=n(pS,"STRONG",{});var umt=s(kie);Fmo=r(umt,"ibert"),umt.forEach(t),Tmo=r(pS," \u2014 "),PI=n(pS,"A",{href:!0});var bmt=s(PI);Mmo=r(bmt,"RobertaTokenizer"),bmt.forEach(t),Emo=r(pS," or "),BI=n(pS,"A",{href:!0});var vmt=s(BI);Cmo=r(vmt,"RobertaTokenizerFast"),vmt.forEach(t),wmo=r(pS," (I-BERT model)"),pS.forEach(t),Amo=i(S),ms=n(S,"LI",{});var _S=s(ms);Sie=n(_S,"STRONG",{});var Fmt=s(Sie);Lmo=r(Fmt,"layoutlm"),Fmt.forEach(t),ymo=r(_S," \u2014 "),II=n(_S,"A",{href:!0});var Tmt=s(II);xmo=r(Tmt,"LayoutLMTokenizer"),Tmt.forEach(t),$mo=r(_S," or "),NI=n(_S,"A",{href:!0});var Mmt=s(NI);kmo=r(Mmt,"LayoutLMTokenizerFast"),Mmt.forEach(t),Smo=r(_S," (LayoutLM model)"),_S.forEach(t),Rmo=i(S),gs=n(S,"LI",{});var uS=s(gs);Rie=n(uS,"STRONG",{});var Emt=s(Rie);Pmo=r(Emt,"layoutlmv2"),Emt.forEach(t),Bmo=r(uS," \u2014 "),qI=n(uS,"A",{href:!0});var Cmt=s(qI);Imo=r(Cmt,"LayoutLMv2Tokenizer"),Cmt.forEach(t),Nmo=r(uS," or "),jI=n(uS,"A",{href:!0});var wmt=s(jI);qmo=r(wmt,"LayoutLMv2TokenizerFast"),wmt.forEach(t),jmo=r(uS," (LayoutLMv2 model)"),uS.forEach(t),Dmo=i(S),hs=n(S,"LI",{});var bS=s(hs);Pie=n(bS,"STRONG",{});var Amt=s(Pie);Gmo=r(Amt,"layoutlmv3"),Amt.forEach(t),Omo=r(bS," \u2014 "),DI=n(bS,"A",{href:!0});var Lmt=s(DI);Vmo=r(Lmt,"LayoutLMv3Tokenizer"),Lmt.forEach(t),Xmo=r(bS," or "),GI=n(bS,"A",{href:!0});var ymt=s(GI);zmo=r(ymt,"LayoutLMv3TokenizerFast"),ymt.forEach(t),Wmo=r(bS," (LayoutLMv3 model)"),bS.forEach(t),Qmo=i(S),ps=n(S,"LI",{});var vS=s(ps);Bie=n(vS,"STRONG",{});var xmt=s(Bie);Hmo=r(xmt,"layoutxlm"),xmt.forEach(t),Umo=r(vS," \u2014 "),OI=n(vS,"A",{href:!0});var $mt=s(OI);Jmo=r($mt,"LayoutXLMTokenizer"),$mt.forEach(t),Ymo=r(vS," or "),VI=n(vS,"A",{href:!0});var kmt=s(VI);Kmo=r(kmt,"LayoutXLMTokenizerFast"),kmt.forEach(t),Zmo=r(vS," (LayoutXLM model)"),vS.forEach(t),ego=i(S),_s=n(S,"LI",{});var FS=s(_s);Iie=n(FS,"STRONG",{});var Smt=s(Iie);ogo=r(Smt,"led"),Smt.forEach(t),rgo=r(FS," \u2014 "),XI=n(FS,"A",{href:!0});var Rmt=s(XI);tgo=r(Rmt,"LEDTokenizer"),Rmt.forEach(t),ago=r(FS," or "),zI=n(FS,"A",{href:!0});var Pmt=s(zI);ngo=r(Pmt,"LEDTokenizerFast"),Pmt.forEach(t),sgo=r(FS," (LED model)"),FS.forEach(t),lgo=i(S),us=n(S,"LI",{});var TS=s(us);Nie=n(TS,"STRONG",{});var Bmt=s(Nie);igo=r(Bmt,"longformer"),Bmt.forEach(t),dgo=r(TS," \u2014 "),WI=n(TS,"A",{href:!0});var Imt=s(WI);cgo=r(Imt,"LongformerTokenizer"),Imt.forEach(t),fgo=r(TS," or "),QI=n(TS,"A",{href:!0});var Nmt=s(QI);mgo=r(Nmt,"LongformerTokenizerFast"),Nmt.forEach(t),ggo=r(TS," (Longformer model)"),TS.forEach(t),hgo=i(S),bs=n(S,"LI",{});var MS=s(bs);qie=n(MS,"STRONG",{});var qmt=s(qie);pgo=r(qmt,"longt5"),qmt.forEach(t),_go=r(MS," \u2014 "),HI=n(MS,"A",{href:!0});var jmt=s(HI);ugo=r(jmt,"T5Tokenizer"),jmt.forEach(t),bgo=r(MS," or "),UI=n(MS,"A",{href:!0});var Dmt=s(UI);vgo=r(Dmt,"T5TokenizerFast"),Dmt.forEach(t),Fgo=r(MS," (LongT5 model)"),MS.forEach(t),Tgo=i(S),uh=n(S,"LI",{});var G9e=s(uh);jie=n(G9e,"STRONG",{});var Gmt=s(jie);Mgo=r(Gmt,"luke"),Gmt.forEach(t),Ego=r(G9e," \u2014 "),JI=n(G9e,"A",{href:!0});var Omt=s(JI);Cgo=r(Omt,"LukeTokenizer"),Omt.forEach(t),wgo=r(G9e," (LUKE model)"),G9e.forEach(t),Ago=i(S),vs=n(S,"LI",{});var ES=s(vs);Die=n(ES,"STRONG",{});var Vmt=s(Die);Lgo=r(Vmt,"lxmert"),Vmt.forEach(t),ygo=r(ES," \u2014 "),YI=n(ES,"A",{href:!0});var Xmt=s(YI);xgo=r(Xmt,"LxmertTokenizer"),Xmt.forEach(t),$go=r(ES," or "),KI=n(ES,"A",{href:!0});var zmt=s(KI);kgo=r(zmt,"LxmertTokenizerFast"),zmt.forEach(t),Sgo=r(ES," (LXMERT model)"),ES.forEach(t),Rgo=i(S),bh=n(S,"LI",{});var O9e=s(bh);Gie=n(O9e,"STRONG",{});var Wmt=s(Gie);Pgo=r(Wmt,"m2m_100"),Wmt.forEach(t),Bgo=r(O9e," \u2014 "),ZI=n(O9e,"A",{href:!0});var Qmt=s(ZI);Igo=r(Qmt,"M2M100Tokenizer"),Qmt.forEach(t),Ngo=r(O9e," (M2M100 model)"),O9e.forEach(t),qgo=i(S),vh=n(S,"LI",{});var V9e=s(vh);Oie=n(V9e,"STRONG",{});var Hmt=s(Oie);jgo=r(Hmt,"marian"),Hmt.forEach(t),Dgo=r(V9e," \u2014 "),eN=n(V9e,"A",{href:!0});var Umt=s(eN);Ggo=r(Umt,"MarianTokenizer"),Umt.forEach(t),Ogo=r(V9e," (Marian model)"),V9e.forEach(t),Vgo=i(S),Fs=n(S,"LI",{});var CS=s(Fs);Vie=n(CS,"STRONG",{});var Jmt=s(Vie);Xgo=r(Jmt,"mbart"),Jmt.forEach(t),zgo=r(CS," \u2014 "),oN=n(CS,"A",{href:!0});var Ymt=s(oN);Wgo=r(Ymt,"MBartTokenizer"),Ymt.forEach(t),Qgo=r(CS," or "),rN=n(CS,"A",{href:!0});var Kmt=s(rN);Hgo=r(Kmt,"MBartTokenizerFast"),Kmt.forEach(t),Ugo=r(CS," (mBART model)"),CS.forEach(t),Jgo=i(S),Ts=n(S,"LI",{});var wS=s(Ts);Xie=n(wS,"STRONG",{});var Zmt=s(Xie);Ygo=r(Zmt,"mbart50"),Zmt.forEach(t),Kgo=r(wS," \u2014 "),tN=n(wS,"A",{href:!0});var egt=s(tN);Zgo=r(egt,"MBart50Tokenizer"),egt.forEach(t),eho=r(wS," or "),aN=n(wS,"A",{href:!0});var ogt=s(aN);oho=r(ogt,"MBart50TokenizerFast"),ogt.forEach(t),rho=r(wS," (mBART-50 model)"),wS.forEach(t),tho=i(S),Ms=n(S,"LI",{});var AS=s(Ms);zie=n(AS,"STRONG",{});var rgt=s(zie);aho=r(rgt,"megatron-bert"),rgt.forEach(t),nho=r(AS," \u2014 "),nN=n(AS,"A",{href:!0});var tgt=s(nN);sho=r(tgt,"BertTokenizer"),tgt.forEach(t),lho=r(AS," or "),sN=n(AS,"A",{href:!0});var agt=s(sN);iho=r(agt,"BertTokenizerFast"),agt.forEach(t),dho=r(AS," (Megatron-BERT model)"),AS.forEach(t),cho=i(S),Fh=n(S,"LI",{});var X9e=s(Fh);Wie=n(X9e,"STRONG",{});var ngt=s(Wie);fho=r(ngt,"mluke"),ngt.forEach(t),mho=r(X9e," \u2014 "),lN=n(X9e,"A",{href:!0});var sgt=s(lN);gho=r(sgt,"MLukeTokenizer"),sgt.forEach(t),hho=r(X9e," (mLUKE model)"),X9e.forEach(t),pho=i(S),Es=n(S,"LI",{});var LS=s(Es);Qie=n(LS,"STRONG",{});var lgt=s(Qie);_ho=r(lgt,"mobilebert"),lgt.forEach(t),uho=r(LS," \u2014 "),iN=n(LS,"A",{href:!0});var igt=s(iN);bho=r(igt,"MobileBertTokenizer"),igt.forEach(t),vho=r(LS," or "),dN=n(LS,"A",{href:!0});var dgt=s(dN);Fho=r(dgt,"MobileBertTokenizerFast"),dgt.forEach(t),Tho=r(LS," (MobileBERT model)"),LS.forEach(t),Mho=i(S),Cs=n(S,"LI",{});var yS=s(Cs);Hie=n(yS,"STRONG",{});var cgt=s(Hie);Eho=r(cgt,"mpnet"),cgt.forEach(t),Cho=r(yS," \u2014 "),cN=n(yS,"A",{href:!0});var fgt=s(cN);who=r(fgt,"MPNetTokenizer"),fgt.forEach(t),Aho=r(yS," or "),fN=n(yS,"A",{href:!0});var mgt=s(fN);Lho=r(mgt,"MPNetTokenizerFast"),mgt.forEach(t),yho=r(yS," (MPNet model)"),yS.forEach(t),xho=i(S),ws=n(S,"LI",{});var xS=s(ws);Uie=n(xS,"STRONG",{});var ggt=s(Uie);$ho=r(ggt,"mt5"),ggt.forEach(t),kho=r(xS," \u2014 "),mN=n(xS,"A",{href:!0});var hgt=s(mN);Sho=r(hgt,"MT5Tokenizer"),hgt.forEach(t),Rho=r(xS," or "),gN=n(xS,"A",{href:!0});var pgt=s(gN);Pho=r(pgt,"MT5TokenizerFast"),pgt.forEach(t),Bho=r(xS," (MT5 model)"),xS.forEach(t),Iho=i(S),As=n(S,"LI",{});var $S=s(As);Jie=n($S,"STRONG",{});var _gt=s(Jie);Nho=r(_gt,"mvp"),_gt.forEach(t),qho=r($S," \u2014 "),hN=n($S,"A",{href:!0});var ugt=s(hN);jho=r(ugt,"MvpTokenizer"),ugt.forEach(t),Dho=r($S," or "),pN=n($S,"A",{href:!0});var bgt=s(pN);Gho=r(bgt,"MvpTokenizerFast"),bgt.forEach(t),Oho=r($S," (MVP model)"),$S.forEach(t),Vho=i(S),Ls=n(S,"LI",{});var kS=s(Ls);Yie=n(kS,"STRONG",{});var vgt=s(Yie);Xho=r(vgt,"nezha"),vgt.forEach(t),zho=r(kS," \u2014 "),_N=n(kS,"A",{href:!0});var Fgt=s(_N);Who=r(Fgt,"BertTokenizer"),Fgt.forEach(t),Qho=r(kS," or "),uN=n(kS,"A",{href:!0});var Tgt=s(uN);Hho=r(Tgt,"BertTokenizerFast"),Tgt.forEach(t),Uho=r(kS," (Nezha model)"),kS.forEach(t),Jho=i(S),ys=n(S,"LI",{});var SS=s(ys);Kie=n(SS,"STRONG",{});var Mgt=s(Kie);Yho=r(Mgt,"nllb"),Mgt.forEach(t),Kho=r(SS," \u2014 "),bN=n(SS,"A",{href:!0});var Egt=s(bN);Zho=r(Egt,"NllbTokenizer"),Egt.forEach(t),epo=r(SS," or "),vN=n(SS,"A",{href:!0});var Cgt=s(vN);opo=r(Cgt,"NllbTokenizerFast"),Cgt.forEach(t),rpo=r(SS," (NLLB model)"),SS.forEach(t),tpo=i(S),xs=n(S,"LI",{});var RS=s(xs);Zie=n(RS,"STRONG",{});var wgt=s(Zie);apo=r(wgt,"nystromformer"),wgt.forEach(t),npo=r(RS," \u2014 "),FN=n(RS,"A",{href:!0});var Agt=s(FN);spo=r(Agt,"AlbertTokenizer"),Agt.forEach(t),lpo=r(RS," or "),TN=n(RS,"A",{href:!0});var Lgt=s(TN);ipo=r(Lgt,"AlbertTokenizerFast"),Lgt.forEach(t),dpo=r(RS," (Nystr\xF6mformer model)"),RS.forEach(t),cpo=i(S),$s=n(S,"LI",{});var PS=s($s);ede=n(PS,"STRONG",{});var ygt=s(ede);fpo=r(ygt,"openai-gpt"),ygt.forEach(t),mpo=r(PS," \u2014 "),MN=n(PS,"A",{href:!0});var xgt=s(MN);gpo=r(xgt,"OpenAIGPTTokenizer"),xgt.forEach(t),hpo=r(PS," or "),EN=n(PS,"A",{href:!0});var $gt=s(EN);ppo=r($gt,"OpenAIGPTTokenizerFast"),$gt.forEach(t),_po=r(PS," (OpenAI GPT model)"),PS.forEach(t),upo=i(S),Th=n(S,"LI",{});var z9e=s(Th);ode=n(z9e,"STRONG",{});var kgt=s(ode);bpo=r(kgt,"opt"),kgt.forEach(t),vpo=r(z9e," \u2014 "),CN=n(z9e,"A",{href:!0});var Sgt=s(CN);Fpo=r(Sgt,"GPT2Tokenizer"),Sgt.forEach(t),Tpo=r(z9e," (OPT model)"),z9e.forEach(t),Mpo=i(S),ks=n(S,"LI",{});var BS=s(ks);rde=n(BS,"STRONG",{});var Rgt=s(rde);Epo=r(Rgt,"owlvit"),Rgt.forEach(t),Cpo=r(BS," \u2014 "),wN=n(BS,"A",{href:!0});var Pgt=s(wN);wpo=r(Pgt,"CLIPTokenizer"),Pgt.forEach(t),Apo=r(BS," or "),AN=n(BS,"A",{href:!0});var Bgt=s(AN);Lpo=r(Bgt,"CLIPTokenizerFast"),Bgt.forEach(t),ypo=r(BS," (OWL-ViT model)"),BS.forEach(t),xpo=i(S),Ss=n(S,"LI",{});var IS=s(Ss);tde=n(IS,"STRONG",{});var Igt=s(tde);$po=r(Igt,"pegasus"),Igt.forEach(t),kpo=r(IS," \u2014 "),LN=n(IS,"A",{href:!0});var Ngt=s(LN);Spo=r(Ngt,"PegasusTokenizer"),Ngt.forEach(t),Rpo=r(IS," or "),yN=n(IS,"A",{href:!0});var qgt=s(yN);Ppo=r(qgt,"PegasusTokenizerFast"),qgt.forEach(t),Bpo=r(IS," (Pegasus model)"),IS.forEach(t),Ipo=i(S),Mh=n(S,"LI",{});var W9e=s(Mh);ade=n(W9e,"STRONG",{});var jgt=s(ade);Npo=r(jgt,"perceiver"),jgt.forEach(t),qpo=r(W9e," \u2014 "),xN=n(W9e,"A",{href:!0});var Dgt=s(xN);jpo=r(Dgt,"PerceiverTokenizer"),Dgt.forEach(t),Dpo=r(W9e," (Perceiver model)"),W9e.forEach(t),Gpo=i(S),Eh=n(S,"LI",{});var Q9e=s(Eh);nde=n(Q9e,"STRONG",{});var Ggt=s(nde);Opo=r(Ggt,"phobert"),Ggt.forEach(t),Vpo=r(Q9e," \u2014 "),$N=n(Q9e,"A",{href:!0});var Ogt=s($N);Xpo=r(Ogt,"PhobertTokenizer"),Ogt.forEach(t),zpo=r(Q9e," (PhoBERT model)"),Q9e.forEach(t),Wpo=i(S),Ch=n(S,"LI",{});var H9e=s(Ch);sde=n(H9e,"STRONG",{});var Vgt=s(sde);Qpo=r(Vgt,"plbart"),Vgt.forEach(t),Hpo=r(H9e," \u2014 "),kN=n(H9e,"A",{href:!0});var Xgt=s(kN);Upo=r(Xgt,"PLBartTokenizer"),Xgt.forEach(t),Jpo=r(H9e," (PLBart model)"),H9e.forEach(t),Ypo=i(S),wh=n(S,"LI",{});var U9e=s(wh);lde=n(U9e,"STRONG",{});var zgt=s(lde);Kpo=r(zgt,"prophetnet"),zgt.forEach(t),Zpo=r(U9e," \u2014 "),SN=n(U9e,"A",{href:!0});var Wgt=s(SN);e_o=r(Wgt,"ProphetNetTokenizer"),Wgt.forEach(t),o_o=r(U9e," (ProphetNet model)"),U9e.forEach(t),r_o=i(S),Rs=n(S,"LI",{});var NS=s(Rs);ide=n(NS,"STRONG",{});var Qgt=s(ide);t_o=r(Qgt,"qdqbert"),Qgt.forEach(t),a_o=r(NS," \u2014 "),RN=n(NS,"A",{href:!0});var Hgt=s(RN);n_o=r(Hgt,"BertTokenizer"),Hgt.forEach(t),s_o=r(NS," or "),PN=n(NS,"A",{href:!0});var Ugt=s(PN);l_o=r(Ugt,"BertTokenizerFast"),Ugt.forEach(t),i_o=r(NS," (QDQBert model)"),NS.forEach(t),d_o=i(S),Ah=n(S,"LI",{});var J9e=s(Ah);dde=n(J9e,"STRONG",{});var Jgt=s(dde);c_o=r(Jgt,"rag"),Jgt.forEach(t),f_o=r(J9e," \u2014 "),BN=n(J9e,"A",{href:!0});var Ygt=s(BN);m_o=r(Ygt,"RagTokenizer"),Ygt.forEach(t),g_o=r(J9e," (RAG model)"),J9e.forEach(t),h_o=i(S),Ps=n(S,"LI",{});var qS=s(Ps);cde=n(qS,"STRONG",{});var Kgt=s(cde);p_o=r(Kgt,"realm"),Kgt.forEach(t),__o=r(qS," \u2014 "),IN=n(qS,"A",{href:!0});var Zgt=s(IN);u_o=r(Zgt,"RealmTokenizer"),Zgt.forEach(t),b_o=r(qS," or "),NN=n(qS,"A",{href:!0});var eht=s(NN);v_o=r(eht,"RealmTokenizerFast"),eht.forEach(t),F_o=r(qS," (REALM model)"),qS.forEach(t),T_o=i(S),Bs=n(S,"LI",{});var jS=s(Bs);fde=n(jS,"STRONG",{});var oht=s(fde);M_o=r(oht,"reformer"),oht.forEach(t),E_o=r(jS," \u2014 "),qN=n(jS,"A",{href:!0});var rht=s(qN);C_o=r(rht,"ReformerTokenizer"),rht.forEach(t),w_o=r(jS," or "),jN=n(jS,"A",{href:!0});var tht=s(jN);A_o=r(tht,"ReformerTokenizerFast"),tht.forEach(t),L_o=r(jS," (Reformer model)"),jS.forEach(t),y_o=i(S),Is=n(S,"LI",{});var DS=s(Is);mde=n(DS,"STRONG",{});var aht=s(mde);x_o=r(aht,"rembert"),aht.forEach(t),$_o=r(DS," \u2014 "),DN=n(DS,"A",{href:!0});var nht=s(DN);k_o=r(nht,"RemBertTokenizer"),nht.forEach(t),S_o=r(DS," or "),GN=n(DS,"A",{href:!0});var sht=s(GN);R_o=r(sht,"RemBertTokenizerFast"),sht.forEach(t),P_o=r(DS," (RemBERT model)"),DS.forEach(t),B_o=i(S),Ns=n(S,"LI",{});var GS=s(Ns);gde=n(GS,"STRONG",{});var lht=s(gde);I_o=r(lht,"retribert"),lht.forEach(t),N_o=r(GS," \u2014 "),ON=n(GS,"A",{href:!0});var iht=s(ON);q_o=r(iht,"RetriBertTokenizer"),iht.forEach(t),j_o=r(GS," or "),VN=n(GS,"A",{href:!0});var dht=s(VN);D_o=r(dht,"RetriBertTokenizerFast"),dht.forEach(t),G_o=r(GS," (RetriBERT model)"),GS.forEach(t),O_o=i(S),qs=n(S,"LI",{});var OS=s(qs);hde=n(OS,"STRONG",{});var cht=s(hde);V_o=r(cht,"roberta"),cht.forEach(t),X_o=r(OS," \u2014 "),XN=n(OS,"A",{href:!0});var fht=s(XN);z_o=r(fht,"RobertaTokenizer"),fht.forEach(t),W_o=r(OS," or "),zN=n(OS,"A",{href:!0});var mht=s(zN);Q_o=r(mht,"RobertaTokenizerFast"),mht.forEach(t),H_o=r(OS," (RoBERTa model)"),OS.forEach(t),U_o=i(S),js=n(S,"LI",{});var VS=s(js);pde=n(VS,"STRONG",{});var ght=s(pde);J_o=r(ght,"roformer"),ght.forEach(t),Y_o=r(VS," \u2014 "),WN=n(VS,"A",{href:!0});var hht=s(WN);K_o=r(hht,"RoFormerTokenizer"),hht.forEach(t),Z_o=r(VS," or "),QN=n(VS,"A",{href:!0});var pht=s(QN);euo=r(pht,"RoFormerTokenizerFast"),pht.forEach(t),ouo=r(VS," (RoFormer model)"),VS.forEach(t),ruo=i(S),Lh=n(S,"LI",{});var Y9e=s(Lh);_de=n(Y9e,"STRONG",{});var _ht=s(_de);tuo=r(_ht,"speech_to_text"),_ht.forEach(t),auo=r(Y9e," \u2014 "),HN=n(Y9e,"A",{href:!0});var uht=s(HN);nuo=r(uht,"Speech2TextTokenizer"),uht.forEach(t),suo=r(Y9e," (Speech2Text model)"),Y9e.forEach(t),luo=i(S),yh=n(S,"LI",{});var K9e=s(yh);ude=n(K9e,"STRONG",{});var bht=s(ude);iuo=r(bht,"speech_to_text_2"),bht.forEach(t),duo=r(K9e," \u2014 "),UN=n(K9e,"A",{href:!0});var vht=s(UN);cuo=r(vht,"Speech2Text2Tokenizer"),vht.forEach(t),fuo=r(K9e," (Speech2Text2 model)"),K9e.forEach(t),muo=i(S),Ds=n(S,"LI",{});var XS=s(Ds);bde=n(XS,"STRONG",{});var Fht=s(bde);guo=r(Fht,"splinter"),Fht.forEach(t),huo=r(XS," \u2014 "),JN=n(XS,"A",{href:!0});var Tht=s(JN);puo=r(Tht,"SplinterTokenizer"),Tht.forEach(t),_uo=r(XS," or "),YN=n(XS,"A",{href:!0});var Mht=s(YN);uuo=r(Mht,"SplinterTokenizerFast"),Mht.forEach(t),buo=r(XS," (Splinter model)"),XS.forEach(t),vuo=i(S),Gs=n(S,"LI",{});var zS=s(Gs);vde=n(zS,"STRONG",{});var Eht=s(vde);Fuo=r(Eht,"squeezebert"),Eht.forEach(t),Tuo=r(zS," \u2014 "),KN=n(zS,"A",{href:!0});var Cht=s(KN);Muo=r(Cht,"SqueezeBertTokenizer"),Cht.forEach(t),Euo=r(zS," or "),ZN=n(zS,"A",{href:!0});var wht=s(ZN);Cuo=r(wht,"SqueezeBertTokenizerFast"),wht.forEach(t),wuo=r(zS," (SqueezeBERT model)"),zS.forEach(t),Auo=i(S),Os=n(S,"LI",{});var WS=s(Os);Fde=n(WS,"STRONG",{});var Aht=s(Fde);Luo=r(Aht,"t5"),Aht.forEach(t),yuo=r(WS," \u2014 "),eq=n(WS,"A",{href:!0});var Lht=s(eq);xuo=r(Lht,"T5Tokenizer"),Lht.forEach(t),$uo=r(WS," or "),oq=n(WS,"A",{href:!0});var yht=s(oq);kuo=r(yht,"T5TokenizerFast"),yht.forEach(t),Suo=r(WS," (T5 model)"),WS.forEach(t),Ruo=i(S),xh=n(S,"LI",{});var Z9e=s(xh);Tde=n(Z9e,"STRONG",{});var xht=s(Tde);Puo=r(xht,"tapas"),xht.forEach(t),Buo=r(Z9e," \u2014 "),rq=n(Z9e,"A",{href:!0});var $ht=s(rq);Iuo=r($ht,"TapasTokenizer"),$ht.forEach(t),Nuo=r(Z9e," (TAPAS model)"),Z9e.forEach(t),quo=i(S),$h=n(S,"LI",{});var exe=s($h);Mde=n(exe,"STRONG",{});var kht=s(Mde);juo=r(kht,"tapex"),kht.forEach(t),Duo=r(exe," \u2014 "),tq=n(exe,"A",{href:!0});var Sht=s(tq);Guo=r(Sht,"TapexTokenizer"),Sht.forEach(t),Ouo=r(exe," (TAPEX model)"),exe.forEach(t),Vuo=i(S),kh=n(S,"LI",{});var oxe=s(kh);Ede=n(oxe,"STRONG",{});var Rht=s(Ede);Xuo=r(Rht,"transfo-xl"),Rht.forEach(t),zuo=r(oxe," \u2014 "),aq=n(oxe,"A",{href:!0});var Pht=s(aq);Wuo=r(Pht,"TransfoXLTokenizer"),Pht.forEach(t),Quo=r(oxe," (Transformer-XL model)"),oxe.forEach(t),Huo=i(S),Vs=n(S,"LI",{});var QS=s(Vs);Cde=n(QS,"STRONG",{});var Bht=s(Cde);Uuo=r(Bht,"vilt"),Bht.forEach(t),Juo=r(QS," \u2014 "),nq=n(QS,"A",{href:!0});var Iht=s(nq);Yuo=r(Iht,"BertTokenizer"),Iht.forEach(t),Kuo=r(QS," or "),sq=n(QS,"A",{href:!0});var Nht=s(sq);Zuo=r(Nht,"BertTokenizerFast"),Nht.forEach(t),e2o=r(QS," (ViLT model)"),QS.forEach(t),o2o=i(S),Xs=n(S,"LI",{});var HS=s(Xs);wde=n(HS,"STRONG",{});var qht=s(wde);r2o=r(qht,"visual_bert"),qht.forEach(t),t2o=r(HS," \u2014 "),lq=n(HS,"A",{href:!0});var jht=s(lq);a2o=r(jht,"BertTokenizer"),jht.forEach(t),n2o=r(HS," or "),iq=n(HS,"A",{href:!0});var Dht=s(iq);s2o=r(Dht,"BertTokenizerFast"),Dht.forEach(t),l2o=r(HS," (VisualBERT model)"),HS.forEach(t),i2o=i(S),Sh=n(S,"LI",{});var rxe=s(Sh);Ade=n(rxe,"STRONG",{});var Ght=s(Ade);d2o=r(Ght,"wav2vec2"),Ght.forEach(t),c2o=r(rxe," \u2014 "),dq=n(rxe,"A",{href:!0});var Oht=s(dq);f2o=r(Oht,"Wav2Vec2CTCTokenizer"),Oht.forEach(t),m2o=r(rxe," (Wav2Vec2 model)"),rxe.forEach(t),g2o=i(S),Rh=n(S,"LI",{});var txe=s(Rh);Lde=n(txe,"STRONG",{});var Vht=s(Lde);h2o=r(Vht,"wav2vec2-conformer"),Vht.forEach(t),p2o=r(txe," \u2014 "),cq=n(txe,"A",{href:!0});var Xht=s(cq);_2o=r(Xht,"Wav2Vec2CTCTokenizer"),Xht.forEach(t),u2o=r(txe," (Wav2Vec2-Conformer model)"),txe.forEach(t),b2o=i(S),Ph=n(S,"LI",{});var axe=s(Ph);yde=n(axe,"STRONG",{});var zht=s(yde);v2o=r(zht,"wav2vec2_phoneme"),zht.forEach(t),F2o=r(axe," \u2014 "),fq=n(axe,"A",{href:!0});var Wht=s(fq);T2o=r(Wht,"Wav2Vec2PhonemeCTCTokenizer"),Wht.forEach(t),M2o=r(axe," (Wav2Vec2Phoneme model)"),axe.forEach(t),E2o=i(S),zs=n(S,"LI",{});var US=s(zs);xde=n(US,"STRONG",{});var Qht=s(xde);C2o=r(Qht,"xglm"),Qht.forEach(t),w2o=r(US," \u2014 "),mq=n(US,"A",{href:!0});var Hht=s(mq);A2o=r(Hht,"XGLMTokenizer"),Hht.forEach(t),L2o=r(US," or "),gq=n(US,"A",{href:!0});var Uht=s(gq);y2o=r(Uht,"XGLMTokenizerFast"),Uht.forEach(t),x2o=r(US," (XGLM model)"),US.forEach(t),$2o=i(S),Bh=n(S,"LI",{});var nxe=s(Bh);$de=n(nxe,"STRONG",{});var Jht=s($de);k2o=r(Jht,"xlm"),Jht.forEach(t),S2o=r(nxe," \u2014 "),hq=n(nxe,"A",{href:!0});var Yht=s(hq);R2o=r(Yht,"XLMTokenizer"),Yht.forEach(t),P2o=r(nxe," (XLM model)"),nxe.forEach(t),B2o=i(S),Ih=n(S,"LI",{});var sxe=s(Ih);kde=n(sxe,"STRONG",{});var Kht=s(kde);I2o=r(Kht,"xlm-prophetnet"),Kht.forEach(t),N2o=r(sxe," \u2014 "),pq=n(sxe,"A",{href:!0});var Zht=s(pq);q2o=r(Zht,"XLMProphetNetTokenizer"),Zht.forEach(t),j2o=r(sxe," (XLM-ProphetNet model)"),sxe.forEach(t),D2o=i(S),Ws=n(S,"LI",{});var JS=s(Ws);Sde=n(JS,"STRONG",{});var ept=s(Sde);G2o=r(ept,"xlm-roberta"),ept.forEach(t),O2o=r(JS," \u2014 "),_q=n(JS,"A",{href:!0});var opt=s(_q);V2o=r(opt,"XLMRobertaTokenizer"),opt.forEach(t),X2o=r(JS," or "),uq=n(JS,"A",{href:!0});var rpt=s(uq);z2o=r(rpt,"XLMRobertaTokenizerFast"),rpt.forEach(t),W2o=r(JS," (XLM-RoBERTa model)"),JS.forEach(t),Q2o=i(S),Qs=n(S,"LI",{});var YS=s(Qs);Rde=n(YS,"STRONG",{});var tpt=s(Rde);H2o=r(tpt,"xlm-roberta-xl"),tpt.forEach(t),U2o=r(YS," \u2014 "),bq=n(YS,"A",{href:!0});var apt=s(bq);J2o=r(apt,"RobertaTokenizer"),apt.forEach(t),Y2o=r(YS," or "),vq=n(YS,"A",{href:!0});var npt=s(vq);K2o=r(npt,"RobertaTokenizerFast"),npt.forEach(t),Z2o=r(YS," (XLM-RoBERTa-XL model)"),YS.forEach(t),e1o=i(S),Hs=n(S,"LI",{});var KS=s(Hs);Pde=n(KS,"STRONG",{});var spt=s(Pde);o1o=r(spt,"xlnet"),spt.forEach(t),r1o=r(KS," \u2014 "),Fq=n(KS,"A",{href:!0});var lpt=s(Fq);t1o=r(lpt,"XLNetTokenizer"),lpt.forEach(t),a1o=r(KS," or "),Tq=n(KS,"A",{href:!0});var ipt=s(Tq);n1o=r(ipt,"XLNetTokenizerFast"),ipt.forEach(t),s1o=r(KS," (XLNet model)"),KS.forEach(t),l1o=i(S),Us=n(S,"LI",{});var ZS=s(Us);Bde=n(ZS,"STRONG",{});var dpt=s(Bde);i1o=r(dpt,"yoso"),dpt.forEach(t),d1o=r(ZS," \u2014 "),Mq=n(ZS,"A",{href:!0});var cpt=s(Mq);c1o=r(cpt,"AlbertTokenizer"),cpt.forEach(t),f1o=r(ZS," or "),Eq=n(ZS,"A",{href:!0});var fpt=s(Eq);m1o=r(fpt,"AlbertTokenizerFast"),fpt.forEach(t),g1o=r(ZS," (YOSO model)"),ZS.forEach(t),S.forEach(t),h1o=i(rl),T(Nh.$$.fragment,rl),rl.forEach(t),p1o=i(ol),qh=n(ol,"DIV",{class:!0});var jQe=s(qh);T(jL.$$.fragment,jQe),_1o=i(jQe),Ide=n(jQe,"P",{});var mpt=s(Ide);u1o=r(mpt,"Register a new tokenizer in this mapping."),mpt.forEach(t),jQe.forEach(t),ol.forEach(t),qze=i(f),Gi=n(f,"H2",{class:!0});var DQe=s(Gi);jh=n(DQe,"A",{id:!0,class:!0,href:!0});var gpt=s(jh);Nde=n(gpt,"SPAN",{});var hpt=s(Nde);T(DL.$$.fragment,hpt),hpt.forEach(t),gpt.forEach(t),b1o=i(DQe),qde=n(DQe,"SPAN",{});var ppt=s(qde);v1o=r(ppt,"AutoFeatureExtractor"),ppt.forEach(t),DQe.forEach(t),jze=i(f),xo=n(f,"DIV",{class:!0});var tl=s(xo);T(GL.$$.fragment,tl),F1o=i(tl),OL=n(tl,"P",{});var GQe=s(OL);T1o=r(GQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Cq=n(GQe,"A",{href:!0});var _pt=s(Cq);M1o=r(_pt,"AutoFeatureExtractor.from_pretrained()"),_pt.forEach(t),E1o=r(GQe," class method."),GQe.forEach(t),C1o=i(tl),VL=n(tl,"P",{});var OQe=s(VL);w1o=r(OQe,"This class cannot be instantiated directly using "),jde=n(OQe,"CODE",{});var upt=s(jde);A1o=r(upt,"__init__()"),upt.forEach(t),L1o=r(OQe," (throws an error)."),OQe.forEach(t),y1o=i(tl),Ue=n(tl,"DIV",{class:!0});var na=s(Ue);T(XL.$$.fragment,na),x1o=i(na),Dde=n(na,"P",{});var bpt=s(Dde);$1o=r(bpt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bpt.forEach(t),k1o=i(na),Ba=n(na,"P",{});var yA=s(Ba);S1o=r(yA,"The feature extractor class to instantiate is selected based on the "),Gde=n(yA,"CODE",{});var vpt=s(Gde);R1o=r(vpt,"model_type"),vpt.forEach(t),P1o=r(yA,` property of the config object
(either passed as an argument or loaded from `),Ode=n(yA,"CODE",{});var Fpt=s(Ode);B1o=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),I1o=r(yA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Vde=n(yA,"CODE",{});var Tpt=s(Vde);N1o=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),q1o=r(yA,":"),yA.forEach(t),j1o=i(na),J=n(na,"UL",{});var K=s(J);Dh=n(K,"LI",{});var lxe=s(Dh);Xde=n(lxe,"STRONG",{});var Mpt=s(Xde);D1o=r(Mpt,"beit"),Mpt.forEach(t),G1o=r(lxe," \u2014 "),wq=n(lxe,"A",{href:!0});var Ept=s(wq);O1o=r(Ept,"BeitFeatureExtractor"),Ept.forEach(t),V1o=r(lxe," (BEiT model)"),lxe.forEach(t),X1o=i(K),Gh=n(K,"LI",{});var ixe=s(Gh);zde=n(ixe,"STRONG",{});var Cpt=s(zde);z1o=r(Cpt,"clip"),Cpt.forEach(t),W1o=r(ixe," \u2014 "),Aq=n(ixe,"A",{href:!0});var wpt=s(Aq);Q1o=r(wpt,"CLIPFeatureExtractor"),wpt.forEach(t),H1o=r(ixe," (CLIP model)"),ixe.forEach(t),U1o=i(K),Oh=n(K,"LI",{});var dxe=s(Oh);Wde=n(dxe,"STRONG",{});var Apt=s(Wde);J1o=r(Apt,"convnext"),Apt.forEach(t),Y1o=r(dxe," \u2014 "),Lq=n(dxe,"A",{href:!0});var Lpt=s(Lq);K1o=r(Lpt,"ConvNextFeatureExtractor"),Lpt.forEach(t),Z1o=r(dxe," (ConvNeXT model)"),dxe.forEach(t),e4o=i(K),Vh=n(K,"LI",{});var cxe=s(Vh);Qde=n(cxe,"STRONG",{});var ypt=s(Qde);o4o=r(ypt,"cvt"),ypt.forEach(t),r4o=r(cxe," \u2014 "),yq=n(cxe,"A",{href:!0});var xpt=s(yq);t4o=r(xpt,"ConvNextFeatureExtractor"),xpt.forEach(t),a4o=r(cxe," (CvT model)"),cxe.forEach(t),n4o=i(K),Xh=n(K,"LI",{});var fxe=s(Xh);Hde=n(fxe,"STRONG",{});var $pt=s(Hde);s4o=r($pt,"data2vec-audio"),$pt.forEach(t),l4o=r(fxe," \u2014 "),xq=n(fxe,"A",{href:!0});var kpt=s(xq);i4o=r(kpt,"Wav2Vec2FeatureExtractor"),kpt.forEach(t),d4o=r(fxe," (Data2VecAudio model)"),fxe.forEach(t),c4o=i(K),zh=n(K,"LI",{});var mxe=s(zh);Ude=n(mxe,"STRONG",{});var Spt=s(Ude);f4o=r(Spt,"data2vec-vision"),Spt.forEach(t),m4o=r(mxe," \u2014 "),$q=n(mxe,"A",{href:!0});var Rpt=s($q);g4o=r(Rpt,"BeitFeatureExtractor"),Rpt.forEach(t),h4o=r(mxe," (Data2VecVision model)"),mxe.forEach(t),p4o=i(K),Wh=n(K,"LI",{});var gxe=s(Wh);Jde=n(gxe,"STRONG",{});var Ppt=s(Jde);_4o=r(Ppt,"deit"),Ppt.forEach(t),u4o=r(gxe," \u2014 "),kq=n(gxe,"A",{href:!0});var Bpt=s(kq);b4o=r(Bpt,"DeiTFeatureExtractor"),Bpt.forEach(t),v4o=r(gxe," (DeiT model)"),gxe.forEach(t),F4o=i(K),Qh=n(K,"LI",{});var hxe=s(Qh);Yde=n(hxe,"STRONG",{});var Ipt=s(Yde);T4o=r(Ipt,"detr"),Ipt.forEach(t),M4o=r(hxe," \u2014 "),Sq=n(hxe,"A",{href:!0});var Npt=s(Sq);E4o=r(Npt,"DetrFeatureExtractor"),Npt.forEach(t),C4o=r(hxe," (DETR model)"),hxe.forEach(t),w4o=i(K),Hh=n(K,"LI",{});var pxe=s(Hh);Kde=n(pxe,"STRONG",{});var qpt=s(Kde);A4o=r(qpt,"dpt"),qpt.forEach(t),L4o=r(pxe," \u2014 "),Rq=n(pxe,"A",{href:!0});var jpt=s(Rq);y4o=r(jpt,"DPTFeatureExtractor"),jpt.forEach(t),x4o=r(pxe," (DPT model)"),pxe.forEach(t),$4o=i(K),Uh=n(K,"LI",{});var _xe=s(Uh);Zde=n(_xe,"STRONG",{});var Dpt=s(Zde);k4o=r(Dpt,"flava"),Dpt.forEach(t),S4o=r(_xe," \u2014 "),Pq=n(_xe,"A",{href:!0});var Gpt=s(Pq);R4o=r(Gpt,"FlavaFeatureExtractor"),Gpt.forEach(t),P4o=r(_xe," (FLAVA model)"),_xe.forEach(t),B4o=i(K),Jh=n(K,"LI",{});var uxe=s(Jh);ece=n(uxe,"STRONG",{});var Opt=s(ece);I4o=r(Opt,"glpn"),Opt.forEach(t),N4o=r(uxe," \u2014 "),Bq=n(uxe,"A",{href:!0});var Vpt=s(Bq);q4o=r(Vpt,"GLPNFeatureExtractor"),Vpt.forEach(t),j4o=r(uxe," (GLPN model)"),uxe.forEach(t),D4o=i(K),Yh=n(K,"LI",{});var bxe=s(Yh);oce=n(bxe,"STRONG",{});var Xpt=s(oce);G4o=r(Xpt,"groupvit"),Xpt.forEach(t),O4o=r(bxe," \u2014 "),Iq=n(bxe,"A",{href:!0});var zpt=s(Iq);V4o=r(zpt,"CLIPFeatureExtractor"),zpt.forEach(t),X4o=r(bxe," (GroupViT model)"),bxe.forEach(t),z4o=i(K),Kh=n(K,"LI",{});var vxe=s(Kh);rce=n(vxe,"STRONG",{});var Wpt=s(rce);W4o=r(Wpt,"hubert"),Wpt.forEach(t),Q4o=r(vxe," \u2014 "),Nq=n(vxe,"A",{href:!0});var Qpt=s(Nq);H4o=r(Qpt,"Wav2Vec2FeatureExtractor"),Qpt.forEach(t),U4o=r(vxe," (Hubert model)"),vxe.forEach(t),J4o=i(K),Zh=n(K,"LI",{});var Fxe=s(Zh);tce=n(Fxe,"STRONG",{});var Hpt=s(tce);Y4o=r(Hpt,"imagegpt"),Hpt.forEach(t),K4o=r(Fxe," \u2014 "),qq=n(Fxe,"A",{href:!0});var Upt=s(qq);Z4o=r(Upt,"ImageGPTFeatureExtractor"),Upt.forEach(t),ebo=r(Fxe," (ImageGPT model)"),Fxe.forEach(t),obo=i(K),ep=n(K,"LI",{});var Txe=s(ep);ace=n(Txe,"STRONG",{});var Jpt=s(ace);rbo=r(Jpt,"layoutlmv2"),Jpt.forEach(t),tbo=r(Txe," \u2014 "),jq=n(Txe,"A",{href:!0});var Ypt=s(jq);abo=r(Ypt,"LayoutLMv2FeatureExtractor"),Ypt.forEach(t),nbo=r(Txe," (LayoutLMv2 model)"),Txe.forEach(t),sbo=i(K),op=n(K,"LI",{});var Mxe=s(op);nce=n(Mxe,"STRONG",{});var Kpt=s(nce);lbo=r(Kpt,"layoutlmv3"),Kpt.forEach(t),ibo=r(Mxe," \u2014 "),Dq=n(Mxe,"A",{href:!0});var Zpt=s(Dq);dbo=r(Zpt,"LayoutLMv3FeatureExtractor"),Zpt.forEach(t),cbo=r(Mxe," (LayoutLMv3 model)"),Mxe.forEach(t),fbo=i(K),rp=n(K,"LI",{});var Exe=s(rp);sce=n(Exe,"STRONG",{});var e_t=s(sce);mbo=r(e_t,"levit"),e_t.forEach(t),gbo=r(Exe," \u2014 "),Gq=n(Exe,"A",{href:!0});var o_t=s(Gq);hbo=r(o_t,"LevitFeatureExtractor"),o_t.forEach(t),pbo=r(Exe," (LeViT model)"),Exe.forEach(t),_bo=i(K),tp=n(K,"LI",{});var Cxe=s(tp);lce=n(Cxe,"STRONG",{});var r_t=s(lce);ubo=r(r_t,"maskformer"),r_t.forEach(t),bbo=r(Cxe," \u2014 "),Oq=n(Cxe,"A",{href:!0});var t_t=s(Oq);vbo=r(t_t,"MaskFormerFeatureExtractor"),t_t.forEach(t),Fbo=r(Cxe," (MaskFormer model)"),Cxe.forEach(t),Tbo=i(K),ap=n(K,"LI",{});var wxe=s(ap);ice=n(wxe,"STRONG",{});var a_t=s(ice);Mbo=r(a_t,"mctct"),a_t.forEach(t),Ebo=r(wxe," \u2014 "),Vq=n(wxe,"A",{href:!0});var n_t=s(Vq);Cbo=r(n_t,"MCTCTFeatureExtractor"),n_t.forEach(t),wbo=r(wxe," (M-CTC-T model)"),wxe.forEach(t),Abo=i(K),np=n(K,"LI",{});var Axe=s(np);dce=n(Axe,"STRONG",{});var s_t=s(dce);Lbo=r(s_t,"mobilevit"),s_t.forEach(t),ybo=r(Axe," \u2014 "),Xq=n(Axe,"A",{href:!0});var l_t=s(Xq);xbo=r(l_t,"MobileViTFeatureExtractor"),l_t.forEach(t),$bo=r(Axe," (MobileViT model)"),Axe.forEach(t),kbo=i(K),sp=n(K,"LI",{});var Lxe=s(sp);cce=n(Lxe,"STRONG",{});var i_t=s(cce);Sbo=r(i_t,"owlvit"),i_t.forEach(t),Rbo=r(Lxe," \u2014 "),zq=n(Lxe,"A",{href:!0});var d_t=s(zq);Pbo=r(d_t,"OwlViTFeatureExtractor"),d_t.forEach(t),Bbo=r(Lxe," (OWL-ViT model)"),Lxe.forEach(t),Ibo=i(K),lp=n(K,"LI",{});var yxe=s(lp);fce=n(yxe,"STRONG",{});var c_t=s(fce);Nbo=r(c_t,"perceiver"),c_t.forEach(t),qbo=r(yxe," \u2014 "),Wq=n(yxe,"A",{href:!0});var f_t=s(Wq);jbo=r(f_t,"PerceiverFeatureExtractor"),f_t.forEach(t),Dbo=r(yxe," (Perceiver model)"),yxe.forEach(t),Gbo=i(K),ip=n(K,"LI",{});var xxe=s(ip);mce=n(xxe,"STRONG",{});var m_t=s(mce);Obo=r(m_t,"poolformer"),m_t.forEach(t),Vbo=r(xxe," \u2014 "),Qq=n(xxe,"A",{href:!0});var g_t=s(Qq);Xbo=r(g_t,"PoolFormerFeatureExtractor"),g_t.forEach(t),zbo=r(xxe," (PoolFormer model)"),xxe.forEach(t),Wbo=i(K),dp=n(K,"LI",{});var $xe=s(dp);gce=n($xe,"STRONG",{});var h_t=s(gce);Qbo=r(h_t,"regnet"),h_t.forEach(t),Hbo=r($xe," \u2014 "),Hq=n($xe,"A",{href:!0});var p_t=s(Hq);Ubo=r(p_t,"ConvNextFeatureExtractor"),p_t.forEach(t),Jbo=r($xe," (RegNet model)"),$xe.forEach(t),Ybo=i(K),cp=n(K,"LI",{});var kxe=s(cp);hce=n(kxe,"STRONG",{});var __t=s(hce);Kbo=r(__t,"resnet"),__t.forEach(t),Zbo=r(kxe," \u2014 "),Uq=n(kxe,"A",{href:!0});var u_t=s(Uq);evo=r(u_t,"ConvNextFeatureExtractor"),u_t.forEach(t),ovo=r(kxe," (ResNet model)"),kxe.forEach(t),rvo=i(K),fp=n(K,"LI",{});var Sxe=s(fp);pce=n(Sxe,"STRONG",{});var b_t=s(pce);tvo=r(b_t,"segformer"),b_t.forEach(t),avo=r(Sxe," \u2014 "),Jq=n(Sxe,"A",{href:!0});var v_t=s(Jq);nvo=r(v_t,"SegformerFeatureExtractor"),v_t.forEach(t),svo=r(Sxe," (SegFormer model)"),Sxe.forEach(t),lvo=i(K),mp=n(K,"LI",{});var Rxe=s(mp);_ce=n(Rxe,"STRONG",{});var F_t=s(_ce);ivo=r(F_t,"speech_to_text"),F_t.forEach(t),dvo=r(Rxe," \u2014 "),Yq=n(Rxe,"A",{href:!0});var T_t=s(Yq);cvo=r(T_t,"Speech2TextFeatureExtractor"),T_t.forEach(t),fvo=r(Rxe," (Speech2Text model)"),Rxe.forEach(t),mvo=i(K),gp=n(K,"LI",{});var Pxe=s(gp);uce=n(Pxe,"STRONG",{});var M_t=s(uce);gvo=r(M_t,"swin"),M_t.forEach(t),hvo=r(Pxe," \u2014 "),Kq=n(Pxe,"A",{href:!0});var E_t=s(Kq);pvo=r(E_t,"ViTFeatureExtractor"),E_t.forEach(t),_vo=r(Pxe," (Swin Transformer model)"),Pxe.forEach(t),uvo=i(K),hp=n(K,"LI",{});var Bxe=s(hp);bce=n(Bxe,"STRONG",{});var C_t=s(bce);bvo=r(C_t,"swinv2"),C_t.forEach(t),vvo=r(Bxe," \u2014 "),Zq=n(Bxe,"A",{href:!0});var w_t=s(Zq);Fvo=r(w_t,"ViTFeatureExtractor"),w_t.forEach(t),Tvo=r(Bxe," (Swin Transformer V2 model)"),Bxe.forEach(t),Mvo=i(K),pp=n(K,"LI",{});var Ixe=s(pp);vce=n(Ixe,"STRONG",{});var A_t=s(vce);Evo=r(A_t,"van"),A_t.forEach(t),Cvo=r(Ixe," \u2014 "),ej=n(Ixe,"A",{href:!0});var L_t=s(ej);wvo=r(L_t,"ConvNextFeatureExtractor"),L_t.forEach(t),Avo=r(Ixe," (VAN model)"),Ixe.forEach(t),Lvo=i(K),_p=n(K,"LI",{});var Nxe=s(_p);Fce=n(Nxe,"STRONG",{});var y_t=s(Fce);yvo=r(y_t,"vilt"),y_t.forEach(t),xvo=r(Nxe," \u2014 "),oj=n(Nxe,"A",{href:!0});var x_t=s(oj);$vo=r(x_t,"ViltFeatureExtractor"),x_t.forEach(t),kvo=r(Nxe," (ViLT model)"),Nxe.forEach(t),Svo=i(K),up=n(K,"LI",{});var qxe=s(up);Tce=n(qxe,"STRONG",{});var $_t=s(Tce);Rvo=r($_t,"vit"),$_t.forEach(t),Pvo=r(qxe," \u2014 "),rj=n(qxe,"A",{href:!0});var k_t=s(rj);Bvo=r(k_t,"ViTFeatureExtractor"),k_t.forEach(t),Ivo=r(qxe," (ViT model)"),qxe.forEach(t),Nvo=i(K),bp=n(K,"LI",{});var jxe=s(bp);Mce=n(jxe,"STRONG",{});var S_t=s(Mce);qvo=r(S_t,"vit_mae"),S_t.forEach(t),jvo=r(jxe," \u2014 "),tj=n(jxe,"A",{href:!0});var R_t=s(tj);Dvo=r(R_t,"ViTFeatureExtractor"),R_t.forEach(t),Gvo=r(jxe," (ViTMAE model)"),jxe.forEach(t),Ovo=i(K),vp=n(K,"LI",{});var Dxe=s(vp);Ece=n(Dxe,"STRONG",{});var P_t=s(Ece);Vvo=r(P_t,"wav2vec2"),P_t.forEach(t),Xvo=r(Dxe," \u2014 "),aj=n(Dxe,"A",{href:!0});var B_t=s(aj);zvo=r(B_t,"Wav2Vec2FeatureExtractor"),B_t.forEach(t),Wvo=r(Dxe," (Wav2Vec2 model)"),Dxe.forEach(t),Qvo=i(K),Fp=n(K,"LI",{});var Gxe=s(Fp);Cce=n(Gxe,"STRONG",{});var I_t=s(Cce);Hvo=r(I_t,"wav2vec2-conformer"),I_t.forEach(t),Uvo=r(Gxe," \u2014 "),nj=n(Gxe,"A",{href:!0});var N_t=s(nj);Jvo=r(N_t,"Wav2Vec2FeatureExtractor"),N_t.forEach(t),Yvo=r(Gxe," (Wav2Vec2-Conformer model)"),Gxe.forEach(t),Kvo=i(K),Tp=n(K,"LI",{});var Oxe=s(Tp);wce=n(Oxe,"STRONG",{});var q_t=s(wce);Zvo=r(q_t,"yolos"),q_t.forEach(t),e0o=r(Oxe," \u2014 "),sj=n(Oxe,"A",{href:!0});var j_t=s(sj);o0o=r(j_t,"YolosFeatureExtractor"),j_t.forEach(t),r0o=r(Oxe," (YOLOS model)"),Oxe.forEach(t),K.forEach(t),t0o=i(na),T(Mp.$$.fragment,na),a0o=i(na),T(Ep.$$.fragment,na),na.forEach(t),n0o=i(tl),Cp=n(tl,"DIV",{class:!0});var VQe=s(Cp);T(zL.$$.fragment,VQe),s0o=i(VQe),Ace=n(VQe,"P",{});var D_t=s(Ace);l0o=r(D_t,"Register a new feature extractor for this class."),D_t.forEach(t),VQe.forEach(t),tl.forEach(t),Dze=i(f),Oi=n(f,"H2",{class:!0});var XQe=s(Oi);wp=n(XQe,"A",{id:!0,class:!0,href:!0});var G_t=s(wp);Lce=n(G_t,"SPAN",{});var O_t=s(Lce);T(WL.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),i0o=i(XQe),yce=n(XQe,"SPAN",{});var V_t=s(yce);d0o=r(V_t,"AutoProcessor"),V_t.forEach(t),XQe.forEach(t),Gze=i(f),$o=n(f,"DIV",{class:!0});var al=s($o);T(QL.$$.fragment,al),c0o=i(al),HL=n(al,"P",{});var zQe=s(HL);f0o=r(zQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lj=n(zQe,"A",{href:!0});var X_t=s(lj);m0o=r(X_t,"AutoProcessor.from_pretrained()"),X_t.forEach(t),g0o=r(zQe," class method."),zQe.forEach(t),h0o=i(al),UL=n(al,"P",{});var WQe=s(UL);p0o=r(WQe,"This class cannot be instantiated directly using "),xce=n(WQe,"CODE",{});var z_t=s(xce);_0o=r(z_t,"__init__()"),z_t.forEach(t),u0o=r(WQe," (throws an error)."),WQe.forEach(t),b0o=i(al),Je=n(al,"DIV",{class:!0});var sa=s(Je);T(JL.$$.fragment,sa),v0o=i(sa),$ce=n(sa,"P",{});var W_t=s($ce);F0o=r(W_t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),W_t.forEach(t),T0o=i(sa),Vi=n(sa,"P",{});var Cte=s(Vi);M0o=r(Cte,"The processor class to instantiate is selected based on the "),kce=n(Cte,"CODE",{});var Q_t=s(kce);E0o=r(Q_t,"model_type"),Q_t.forEach(t),C0o=r(Cte,` property of the config object (either
passed as an argument or loaded from `),Sce=n(Cte,"CODE",{});var H_t=s(Sce);w0o=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),A0o=r(Cte," if possible):"),Cte.forEach(t),L0o=i(sa),fe=n(sa,"UL",{});var _e=s(fe);Ap=n(_e,"LI",{});var Vxe=s(Ap);Rce=n(Vxe,"STRONG",{});var U_t=s(Rce);y0o=r(U_t,"clip"),U_t.forEach(t),x0o=r(Vxe," \u2014 "),ij=n(Vxe,"A",{href:!0});var J_t=s(ij);$0o=r(J_t,"CLIPProcessor"),J_t.forEach(t),k0o=r(Vxe," (CLIP model)"),Vxe.forEach(t),S0o=i(_e),Lp=n(_e,"LI",{});var Xxe=s(Lp);Pce=n(Xxe,"STRONG",{});var Y_t=s(Pce);R0o=r(Y_t,"flava"),Y_t.forEach(t),P0o=r(Xxe," \u2014 "),dj=n(Xxe,"A",{href:!0});var K_t=s(dj);B0o=r(K_t,"FlavaProcessor"),K_t.forEach(t),I0o=r(Xxe," (FLAVA model)"),Xxe.forEach(t),N0o=i(_e),yp=n(_e,"LI",{});var zxe=s(yp);Bce=n(zxe,"STRONG",{});var Z_t=s(Bce);q0o=r(Z_t,"groupvit"),Z_t.forEach(t),j0o=r(zxe," \u2014 "),cj=n(zxe,"A",{href:!0});var eut=s(cj);D0o=r(eut,"CLIPProcessor"),eut.forEach(t),G0o=r(zxe," (GroupViT model)"),zxe.forEach(t),O0o=i(_e),xp=n(_e,"LI",{});var Wxe=s(xp);Ice=n(Wxe,"STRONG",{});var out=s(Ice);V0o=r(out,"layoutlmv2"),out.forEach(t),X0o=r(Wxe," \u2014 "),fj=n(Wxe,"A",{href:!0});var rut=s(fj);z0o=r(rut,"LayoutLMv2Processor"),rut.forEach(t),W0o=r(Wxe," (LayoutLMv2 model)"),Wxe.forEach(t),Q0o=i(_e),$p=n(_e,"LI",{});var Qxe=s($p);Nce=n(Qxe,"STRONG",{});var tut=s(Nce);H0o=r(tut,"layoutlmv3"),tut.forEach(t),U0o=r(Qxe," \u2014 "),mj=n(Qxe,"A",{href:!0});var aut=s(mj);J0o=r(aut,"LayoutLMv3Processor"),aut.forEach(t),Y0o=r(Qxe," (LayoutLMv3 model)"),Qxe.forEach(t),K0o=i(_e),kp=n(_e,"LI",{});var Hxe=s(kp);qce=n(Hxe,"STRONG",{});var nut=s(qce);Z0o=r(nut,"layoutxlm"),nut.forEach(t),eFo=r(Hxe," \u2014 "),gj=n(Hxe,"A",{href:!0});var sut=s(gj);oFo=r(sut,"LayoutXLMProcessor"),sut.forEach(t),rFo=r(Hxe," (LayoutXLM model)"),Hxe.forEach(t),tFo=i(_e),Sp=n(_e,"LI",{});var Uxe=s(Sp);jce=n(Uxe,"STRONG",{});var lut=s(jce);aFo=r(lut,"owlvit"),lut.forEach(t),nFo=r(Uxe," \u2014 "),hj=n(Uxe,"A",{href:!0});var iut=s(hj);sFo=r(iut,"OwlViTProcessor"),iut.forEach(t),lFo=r(Uxe," (OWL-ViT model)"),Uxe.forEach(t),iFo=i(_e),Rp=n(_e,"LI",{});var Jxe=s(Rp);Dce=n(Jxe,"STRONG",{});var dut=s(Dce);dFo=r(dut,"sew"),dut.forEach(t),cFo=r(Jxe," \u2014 "),pj=n(Jxe,"A",{href:!0});var cut=s(pj);fFo=r(cut,"Wav2Vec2Processor"),cut.forEach(t),mFo=r(Jxe," (SEW model)"),Jxe.forEach(t),gFo=i(_e),Pp=n(_e,"LI",{});var Yxe=s(Pp);Gce=n(Yxe,"STRONG",{});var fut=s(Gce);hFo=r(fut,"sew-d"),fut.forEach(t),pFo=r(Yxe," \u2014 "),_j=n(Yxe,"A",{href:!0});var mut=s(_j);_Fo=r(mut,"Wav2Vec2Processor"),mut.forEach(t),uFo=r(Yxe," (SEW-D model)"),Yxe.forEach(t),bFo=i(_e),Bp=n(_e,"LI",{});var Kxe=s(Bp);Oce=n(Kxe,"STRONG",{});var gut=s(Oce);vFo=r(gut,"speech_to_text"),gut.forEach(t),FFo=r(Kxe," \u2014 "),uj=n(Kxe,"A",{href:!0});var hut=s(uj);TFo=r(hut,"Speech2TextProcessor"),hut.forEach(t),MFo=r(Kxe," (Speech2Text model)"),Kxe.forEach(t),EFo=i(_e),Ip=n(_e,"LI",{});var Zxe=s(Ip);Vce=n(Zxe,"STRONG",{});var put=s(Vce);CFo=r(put,"speech_to_text_2"),put.forEach(t),wFo=r(Zxe," \u2014 "),bj=n(Zxe,"A",{href:!0});var _ut=s(bj);AFo=r(_ut,"Speech2Text2Processor"),_ut.forEach(t),LFo=r(Zxe," (Speech2Text2 model)"),Zxe.forEach(t),yFo=i(_e),Np=n(_e,"LI",{});var e$e=s(Np);Xce=n(e$e,"STRONG",{});var uut=s(Xce);xFo=r(uut,"trocr"),uut.forEach(t),$Fo=r(e$e," \u2014 "),vj=n(e$e,"A",{href:!0});var but=s(vj);kFo=r(but,"TrOCRProcessor"),but.forEach(t),SFo=r(e$e," (TrOCR model)"),e$e.forEach(t),RFo=i(_e),qp=n(_e,"LI",{});var o$e=s(qp);zce=n(o$e,"STRONG",{});var vut=s(zce);PFo=r(vut,"unispeech"),vut.forEach(t),BFo=r(o$e," \u2014 "),Fj=n(o$e,"A",{href:!0});var Fut=s(Fj);IFo=r(Fut,"Wav2Vec2Processor"),Fut.forEach(t),NFo=r(o$e," (UniSpeech model)"),o$e.forEach(t),qFo=i(_e),jp=n(_e,"LI",{});var r$e=s(jp);Wce=n(r$e,"STRONG",{});var Tut=s(Wce);jFo=r(Tut,"unispeech-sat"),Tut.forEach(t),DFo=r(r$e," \u2014 "),Tj=n(r$e,"A",{href:!0});var Mut=s(Tj);GFo=r(Mut,"Wav2Vec2Processor"),Mut.forEach(t),OFo=r(r$e," (UniSpeechSat model)"),r$e.forEach(t),VFo=i(_e),Dp=n(_e,"LI",{});var t$e=s(Dp);Qce=n(t$e,"STRONG",{});var Eut=s(Qce);XFo=r(Eut,"vilt"),Eut.forEach(t),zFo=r(t$e," \u2014 "),Mj=n(t$e,"A",{href:!0});var Cut=s(Mj);WFo=r(Cut,"ViltProcessor"),Cut.forEach(t),QFo=r(t$e," (ViLT model)"),t$e.forEach(t),HFo=i(_e),Gp=n(_e,"LI",{});var a$e=s(Gp);Hce=n(a$e,"STRONG",{});var wut=s(Hce);UFo=r(wut,"vision-text-dual-encoder"),wut.forEach(t),JFo=r(a$e," \u2014 "),Ej=n(a$e,"A",{href:!0});var Aut=s(Ej);YFo=r(Aut,"VisionTextDualEncoderProcessor"),Aut.forEach(t),KFo=r(a$e," (VisionTextDualEncoder model)"),a$e.forEach(t),ZFo=i(_e),Op=n(_e,"LI",{});var n$e=s(Op);Uce=n(n$e,"STRONG",{});var Lut=s(Uce);eTo=r(Lut,"wav2vec2"),Lut.forEach(t),oTo=r(n$e," \u2014 "),Cj=n(n$e,"A",{href:!0});var yut=s(Cj);rTo=r(yut,"Wav2Vec2Processor"),yut.forEach(t),tTo=r(n$e," (Wav2Vec2 model)"),n$e.forEach(t),aTo=i(_e),Vp=n(_e,"LI",{});var s$e=s(Vp);Jce=n(s$e,"STRONG",{});var xut=s(Jce);nTo=r(xut,"wav2vec2-conformer"),xut.forEach(t),sTo=r(s$e," \u2014 "),wj=n(s$e,"A",{href:!0});var $ut=s(wj);lTo=r($ut,"Wav2Vec2Processor"),$ut.forEach(t),iTo=r(s$e," (Wav2Vec2-Conformer model)"),s$e.forEach(t),dTo=i(_e),Xp=n(_e,"LI",{});var l$e=s(Xp);Yce=n(l$e,"STRONG",{});var kut=s(Yce);cTo=r(kut,"wavlm"),kut.forEach(t),fTo=r(l$e," \u2014 "),Aj=n(l$e,"A",{href:!0});var Sut=s(Aj);mTo=r(Sut,"Wav2Vec2Processor"),Sut.forEach(t),gTo=r(l$e," (WavLM model)"),l$e.forEach(t),_e.forEach(t),hTo=i(sa),T(zp.$$.fragment,sa),pTo=i(sa),T(Wp.$$.fragment,sa),sa.forEach(t),_To=i(al),Qp=n(al,"DIV",{class:!0});var QQe=s(Qp);T(YL.$$.fragment,QQe),uTo=i(QQe),Kce=n(QQe,"P",{});var Rut=s(Kce);bTo=r(Rut,"Register a new processor for this class."),Rut.forEach(t),QQe.forEach(t),al.forEach(t),Oze=i(f),Xi=n(f,"H2",{class:!0});var HQe=s(Xi);Hp=n(HQe,"A",{id:!0,class:!0,href:!0});var Put=s(Hp);Zce=n(Put,"SPAN",{});var But=s(Zce);T(KL.$$.fragment,But),But.forEach(t),Put.forEach(t),vTo=i(HQe),efe=n(HQe,"SPAN",{});var Iut=s(efe);FTo=r(Iut,"AutoModel"),Iut.forEach(t),HQe.forEach(t),Vze=i(f),ko=n(f,"DIV",{class:!0});var nl=s(ko);T(ZL.$$.fragment,nl),TTo=i(nl),zi=n(nl,"P",{});var wte=s(zi);MTo=r(wte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Lj=n(wte,"A",{href:!0});var Nut=s(Lj);ETo=r(Nut,"from_pretrained()"),Nut.forEach(t),CTo=r(wte," class method or the "),yj=n(wte,"A",{href:!0});var qut=s(yj);wTo=r(qut,"from_config()"),qut.forEach(t),ATo=r(wte,` class
method.`),wte.forEach(t),LTo=i(nl),ey=n(nl,"P",{});var UQe=s(ey);yTo=r(UQe,"This class cannot be instantiated directly using "),ofe=n(UQe,"CODE",{});var jut=s(ofe);xTo=r(jut,"__init__()"),jut.forEach(t),$To=r(UQe," (throws an error)."),UQe.forEach(t),kTo=i(nl),it=n(nl,"DIV",{class:!0});var xA=s(it);T(oy.$$.fragment,xA),STo=i(xA),rfe=n(xA,"P",{});var Dut=s(rfe);RTo=r(Dut,"Instantiates one of the base model classes of the library from a configuration."),Dut.forEach(t),PTo=i(xA),Wi=n(xA,"P",{});var Ate=s(Wi);BTo=r(Ate,`Note:
Loading a model from its configuration file does `),tfe=n(Ate,"STRONG",{});var Gut=s(tfe);ITo=r(Gut,"not"),Gut.forEach(t),NTo=r(Ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(Ate,"A",{href:!0});var Out=s(xj);qTo=r(Out,"from_pretrained()"),Out.forEach(t),jTo=r(Ate," to load the model weights."),Ate.forEach(t),DTo=i(xA),T(Up.$$.fragment,xA),xA.forEach(t),GTo=i(nl),Ye=n(nl,"DIV",{class:!0});var la=s(Ye);T(ry.$$.fragment,la),OTo=i(la),afe=n(la,"P",{});var Vut=s(afe);VTo=r(Vut,"Instantiate one of the base model classes of the library from a pretrained model."),Vut.forEach(t),XTo=i(la),Ia=n(la,"P",{});var $A=s(Ia);zTo=r($A,"The model class to instantiate is selected based on the "),nfe=n($A,"CODE",{});var Xut=s(nfe);WTo=r(Xut,"model_type"),Xut.forEach(t),QTo=r($A,` property of the config object (either
passed as an argument or loaded from `),sfe=n($A,"CODE",{});var zut=s(sfe);HTo=r(zut,"pretrained_model_name_or_path"),zut.forEach(t),UTo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lfe=n($A,"CODE",{});var Wut=s(lfe);JTo=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),YTo=r($A,":"),$A.forEach(t),KTo=i(la),y=n(la,"UL",{});var x=s(y);Jp=n(x,"LI",{});var i$e=s(Jp);ife=n(i$e,"STRONG",{});var Qut=s(ife);ZTo=r(Qut,"albert"),Qut.forEach(t),e8o=r(i$e," \u2014 "),$j=n(i$e,"A",{href:!0});var Hut=s($j);o8o=r(Hut,"AlbertModel"),Hut.forEach(t),r8o=r(i$e," (ALBERT model)"),i$e.forEach(t),t8o=i(x),Yp=n(x,"LI",{});var d$e=s(Yp);dfe=n(d$e,"STRONG",{});var Uut=s(dfe);a8o=r(Uut,"bart"),Uut.forEach(t),n8o=r(d$e," \u2014 "),kj=n(d$e,"A",{href:!0});var Jut=s(kj);s8o=r(Jut,"BartModel"),Jut.forEach(t),l8o=r(d$e," (BART model)"),d$e.forEach(t),i8o=i(x),Kp=n(x,"LI",{});var c$e=s(Kp);cfe=n(c$e,"STRONG",{});var Yut=s(cfe);d8o=r(Yut,"beit"),Yut.forEach(t),c8o=r(c$e," \u2014 "),Sj=n(c$e,"A",{href:!0});var Kut=s(Sj);f8o=r(Kut,"BeitModel"),Kut.forEach(t),m8o=r(c$e," (BEiT model)"),c$e.forEach(t),g8o=i(x),Zp=n(x,"LI",{});var f$e=s(Zp);ffe=n(f$e,"STRONG",{});var Zut=s(ffe);h8o=r(Zut,"bert"),Zut.forEach(t),p8o=r(f$e," \u2014 "),Rj=n(f$e,"A",{href:!0});var e2t=s(Rj);_8o=r(e2t,"BertModel"),e2t.forEach(t),u8o=r(f$e," (BERT model)"),f$e.forEach(t),b8o=i(x),e_=n(x,"LI",{});var m$e=s(e_);mfe=n(m$e,"STRONG",{});var o2t=s(mfe);v8o=r(o2t,"bert-generation"),o2t.forEach(t),F8o=r(m$e," \u2014 "),Pj=n(m$e,"A",{href:!0});var r2t=s(Pj);T8o=r(r2t,"BertGenerationEncoder"),r2t.forEach(t),M8o=r(m$e," (Bert Generation model)"),m$e.forEach(t),E8o=i(x),o_=n(x,"LI",{});var g$e=s(o_);gfe=n(g$e,"STRONG",{});var t2t=s(gfe);C8o=r(t2t,"big_bird"),t2t.forEach(t),w8o=r(g$e," \u2014 "),Bj=n(g$e,"A",{href:!0});var a2t=s(Bj);A8o=r(a2t,"BigBirdModel"),a2t.forEach(t),L8o=r(g$e," (BigBird model)"),g$e.forEach(t),y8o=i(x),r_=n(x,"LI",{});var h$e=s(r_);hfe=n(h$e,"STRONG",{});var n2t=s(hfe);x8o=r(n2t,"bigbird_pegasus"),n2t.forEach(t),$8o=r(h$e," \u2014 "),Ij=n(h$e,"A",{href:!0});var s2t=s(Ij);k8o=r(s2t,"BigBirdPegasusModel"),s2t.forEach(t),S8o=r(h$e," (BigBird-Pegasus model)"),h$e.forEach(t),R8o=i(x),t_=n(x,"LI",{});var p$e=s(t_);pfe=n(p$e,"STRONG",{});var l2t=s(pfe);P8o=r(l2t,"blenderbot"),l2t.forEach(t),B8o=r(p$e," \u2014 "),Nj=n(p$e,"A",{href:!0});var i2t=s(Nj);I8o=r(i2t,"BlenderbotModel"),i2t.forEach(t),N8o=r(p$e," (Blenderbot model)"),p$e.forEach(t),q8o=i(x),a_=n(x,"LI",{});var _$e=s(a_);_fe=n(_$e,"STRONG",{});var d2t=s(_fe);j8o=r(d2t,"blenderbot-small"),d2t.forEach(t),D8o=r(_$e," \u2014 "),qj=n(_$e,"A",{href:!0});var c2t=s(qj);G8o=r(c2t,"BlenderbotSmallModel"),c2t.forEach(t),O8o=r(_$e," (BlenderbotSmall model)"),_$e.forEach(t),V8o=i(x),n_=n(x,"LI",{});var u$e=s(n_);ufe=n(u$e,"STRONG",{});var f2t=s(ufe);X8o=r(f2t,"bloom"),f2t.forEach(t),z8o=r(u$e," \u2014 "),jj=n(u$e,"A",{href:!0});var m2t=s(jj);W8o=r(m2t,"BloomModel"),m2t.forEach(t),Q8o=r(u$e," (BLOOM model)"),u$e.forEach(t),H8o=i(x),s_=n(x,"LI",{});var b$e=s(s_);bfe=n(b$e,"STRONG",{});var g2t=s(bfe);U8o=r(g2t,"camembert"),g2t.forEach(t),J8o=r(b$e," \u2014 "),Dj=n(b$e,"A",{href:!0});var h2t=s(Dj);Y8o=r(h2t,"CamembertModel"),h2t.forEach(t),K8o=r(b$e," (CamemBERT model)"),b$e.forEach(t),Z8o=i(x),l_=n(x,"LI",{});var v$e=s(l_);vfe=n(v$e,"STRONG",{});var p2t=s(vfe);eMo=r(p2t,"canine"),p2t.forEach(t),oMo=r(v$e," \u2014 "),Gj=n(v$e,"A",{href:!0});var _2t=s(Gj);rMo=r(_2t,"CanineModel"),_2t.forEach(t),tMo=r(v$e," (CANINE model)"),v$e.forEach(t),aMo=i(x),i_=n(x,"LI",{});var F$e=s(i_);Ffe=n(F$e,"STRONG",{});var u2t=s(Ffe);nMo=r(u2t,"clip"),u2t.forEach(t),sMo=r(F$e," \u2014 "),Oj=n(F$e,"A",{href:!0});var b2t=s(Oj);lMo=r(b2t,"CLIPModel"),b2t.forEach(t),iMo=r(F$e," (CLIP model)"),F$e.forEach(t),dMo=i(x),d_=n(x,"LI",{});var T$e=s(d_);Tfe=n(T$e,"STRONG",{});var v2t=s(Tfe);cMo=r(v2t,"codegen"),v2t.forEach(t),fMo=r(T$e," \u2014 "),Vj=n(T$e,"A",{href:!0});var F2t=s(Vj);mMo=r(F2t,"CodeGenModel"),F2t.forEach(t),gMo=r(T$e," (CodeGen model)"),T$e.forEach(t),hMo=i(x),c_=n(x,"LI",{});var M$e=s(c_);Mfe=n(M$e,"STRONG",{});var T2t=s(Mfe);pMo=r(T2t,"convbert"),T2t.forEach(t),_Mo=r(M$e," \u2014 "),Xj=n(M$e,"A",{href:!0});var M2t=s(Xj);uMo=r(M2t,"ConvBertModel"),M2t.forEach(t),bMo=r(M$e," (ConvBERT model)"),M$e.forEach(t),vMo=i(x),f_=n(x,"LI",{});var E$e=s(f_);Efe=n(E$e,"STRONG",{});var E2t=s(Efe);FMo=r(E2t,"convnext"),E2t.forEach(t),TMo=r(E$e," \u2014 "),zj=n(E$e,"A",{href:!0});var C2t=s(zj);MMo=r(C2t,"ConvNextModel"),C2t.forEach(t),EMo=r(E$e," (ConvNeXT model)"),E$e.forEach(t),CMo=i(x),m_=n(x,"LI",{});var C$e=s(m_);Cfe=n(C$e,"STRONG",{});var w2t=s(Cfe);wMo=r(w2t,"ctrl"),w2t.forEach(t),AMo=r(C$e," \u2014 "),Wj=n(C$e,"A",{href:!0});var A2t=s(Wj);LMo=r(A2t,"CTRLModel"),A2t.forEach(t),yMo=r(C$e," (CTRL model)"),C$e.forEach(t),xMo=i(x),g_=n(x,"LI",{});var w$e=s(g_);wfe=n(w$e,"STRONG",{});var L2t=s(wfe);$Mo=r(L2t,"cvt"),L2t.forEach(t),kMo=r(w$e," \u2014 "),Qj=n(w$e,"A",{href:!0});var y2t=s(Qj);SMo=r(y2t,"CvtModel"),y2t.forEach(t),RMo=r(w$e," (CvT model)"),w$e.forEach(t),PMo=i(x),h_=n(x,"LI",{});var A$e=s(h_);Afe=n(A$e,"STRONG",{});var x2t=s(Afe);BMo=r(x2t,"data2vec-audio"),x2t.forEach(t),IMo=r(A$e," \u2014 "),Hj=n(A$e,"A",{href:!0});var $2t=s(Hj);NMo=r($2t,"Data2VecAudioModel"),$2t.forEach(t),qMo=r(A$e," (Data2VecAudio model)"),A$e.forEach(t),jMo=i(x),p_=n(x,"LI",{});var L$e=s(p_);Lfe=n(L$e,"STRONG",{});var k2t=s(Lfe);DMo=r(k2t,"data2vec-text"),k2t.forEach(t),GMo=r(L$e," \u2014 "),Uj=n(L$e,"A",{href:!0});var S2t=s(Uj);OMo=r(S2t,"Data2VecTextModel"),S2t.forEach(t),VMo=r(L$e," (Data2VecText model)"),L$e.forEach(t),XMo=i(x),__=n(x,"LI",{});var y$e=s(__);yfe=n(y$e,"STRONG",{});var R2t=s(yfe);zMo=r(R2t,"data2vec-vision"),R2t.forEach(t),WMo=r(y$e," \u2014 "),Jj=n(y$e,"A",{href:!0});var P2t=s(Jj);QMo=r(P2t,"Data2VecVisionModel"),P2t.forEach(t),HMo=r(y$e," (Data2VecVision model)"),y$e.forEach(t),UMo=i(x),u_=n(x,"LI",{});var x$e=s(u_);xfe=n(x$e,"STRONG",{});var B2t=s(xfe);JMo=r(B2t,"deberta"),B2t.forEach(t),YMo=r(x$e," \u2014 "),Yj=n(x$e,"A",{href:!0});var I2t=s(Yj);KMo=r(I2t,"DebertaModel"),I2t.forEach(t),ZMo=r(x$e," (DeBERTa model)"),x$e.forEach(t),eEo=i(x),b_=n(x,"LI",{});var $$e=s(b_);$fe=n($$e,"STRONG",{});var N2t=s($fe);oEo=r(N2t,"deberta-v2"),N2t.forEach(t),rEo=r($$e," \u2014 "),Kj=n($$e,"A",{href:!0});var q2t=s(Kj);tEo=r(q2t,"DebertaV2Model"),q2t.forEach(t),aEo=r($$e," (DeBERTa-v2 model)"),$$e.forEach(t),nEo=i(x),v_=n(x,"LI",{});var k$e=s(v_);kfe=n(k$e,"STRONG",{});var j2t=s(kfe);sEo=r(j2t,"decision_transformer"),j2t.forEach(t),lEo=r(k$e," \u2014 "),Zj=n(k$e,"A",{href:!0});var D2t=s(Zj);iEo=r(D2t,"DecisionTransformerModel"),D2t.forEach(t),dEo=r(k$e," (Decision Transformer model)"),k$e.forEach(t),cEo=i(x),F_=n(x,"LI",{});var S$e=s(F_);Sfe=n(S$e,"STRONG",{});var G2t=s(Sfe);fEo=r(G2t,"deit"),G2t.forEach(t),mEo=r(S$e," \u2014 "),eD=n(S$e,"A",{href:!0});var O2t=s(eD);gEo=r(O2t,"DeiTModel"),O2t.forEach(t),hEo=r(S$e," (DeiT model)"),S$e.forEach(t),pEo=i(x),T_=n(x,"LI",{});var R$e=s(T_);Rfe=n(R$e,"STRONG",{});var V2t=s(Rfe);_Eo=r(V2t,"detr"),V2t.forEach(t),uEo=r(R$e," \u2014 "),oD=n(R$e,"A",{href:!0});var X2t=s(oD);bEo=r(X2t,"DetrModel"),X2t.forEach(t),vEo=r(R$e," (DETR model)"),R$e.forEach(t),FEo=i(x),M_=n(x,"LI",{});var P$e=s(M_);Pfe=n(P$e,"STRONG",{});var z2t=s(Pfe);TEo=r(z2t,"distilbert"),z2t.forEach(t),MEo=r(P$e," \u2014 "),rD=n(P$e,"A",{href:!0});var W2t=s(rD);EEo=r(W2t,"DistilBertModel"),W2t.forEach(t),CEo=r(P$e," (DistilBERT model)"),P$e.forEach(t),wEo=i(x),E_=n(x,"LI",{});var B$e=s(E_);Bfe=n(B$e,"STRONG",{});var Q2t=s(Bfe);AEo=r(Q2t,"dpr"),Q2t.forEach(t),LEo=r(B$e," \u2014 "),tD=n(B$e,"A",{href:!0});var H2t=s(tD);yEo=r(H2t,"DPRQuestionEncoder"),H2t.forEach(t),xEo=r(B$e," (DPR model)"),B$e.forEach(t),$Eo=i(x),C_=n(x,"LI",{});var I$e=s(C_);Ife=n(I$e,"STRONG",{});var U2t=s(Ife);kEo=r(U2t,"dpt"),U2t.forEach(t),SEo=r(I$e," \u2014 "),aD=n(I$e,"A",{href:!0});var J2t=s(aD);REo=r(J2t,"DPTModel"),J2t.forEach(t),PEo=r(I$e," (DPT model)"),I$e.forEach(t),BEo=i(x),w_=n(x,"LI",{});var N$e=s(w_);Nfe=n(N$e,"STRONG",{});var Y2t=s(Nfe);IEo=r(Y2t,"electra"),Y2t.forEach(t),NEo=r(N$e," \u2014 "),nD=n(N$e,"A",{href:!0});var K2t=s(nD);qEo=r(K2t,"ElectraModel"),K2t.forEach(t),jEo=r(N$e," (ELECTRA model)"),N$e.forEach(t),DEo=i(x),A_=n(x,"LI",{});var q$e=s(A_);qfe=n(q$e,"STRONG",{});var Z2t=s(qfe);GEo=r(Z2t,"flaubert"),Z2t.forEach(t),OEo=r(q$e," \u2014 "),sD=n(q$e,"A",{href:!0});var e1t=s(sD);VEo=r(e1t,"FlaubertModel"),e1t.forEach(t),XEo=r(q$e," (FlauBERT model)"),q$e.forEach(t),zEo=i(x),L_=n(x,"LI",{});var j$e=s(L_);jfe=n(j$e,"STRONG",{});var o1t=s(jfe);WEo=r(o1t,"flava"),o1t.forEach(t),QEo=r(j$e," \u2014 "),lD=n(j$e,"A",{href:!0});var r1t=s(lD);HEo=r(r1t,"FlavaModel"),r1t.forEach(t),UEo=r(j$e," (FLAVA model)"),j$e.forEach(t),JEo=i(x),y_=n(x,"LI",{});var D$e=s(y_);Dfe=n(D$e,"STRONG",{});var t1t=s(Dfe);YEo=r(t1t,"fnet"),t1t.forEach(t),KEo=r(D$e," \u2014 "),iD=n(D$e,"A",{href:!0});var a1t=s(iD);ZEo=r(a1t,"FNetModel"),a1t.forEach(t),eCo=r(D$e," (FNet model)"),D$e.forEach(t),oCo=i(x),x_=n(x,"LI",{});var G$e=s(x_);Gfe=n(G$e,"STRONG",{});var n1t=s(Gfe);rCo=r(n1t,"fsmt"),n1t.forEach(t),tCo=r(G$e," \u2014 "),dD=n(G$e,"A",{href:!0});var s1t=s(dD);aCo=r(s1t,"FSMTModel"),s1t.forEach(t),nCo=r(G$e," (FairSeq Machine-Translation model)"),G$e.forEach(t),sCo=i(x),Js=n(x,"LI",{});var eR=s(Js);Ofe=n(eR,"STRONG",{});var l1t=s(Ofe);lCo=r(l1t,"funnel"),l1t.forEach(t),iCo=r(eR," \u2014 "),cD=n(eR,"A",{href:!0});var i1t=s(cD);dCo=r(i1t,"FunnelModel"),i1t.forEach(t),cCo=r(eR," or "),fD=n(eR,"A",{href:!0});var d1t=s(fD);fCo=r(d1t,"FunnelBaseModel"),d1t.forEach(t),mCo=r(eR," (Funnel Transformer model)"),eR.forEach(t),gCo=i(x),$_=n(x,"LI",{});var O$e=s($_);Vfe=n(O$e,"STRONG",{});var c1t=s(Vfe);hCo=r(c1t,"glpn"),c1t.forEach(t),pCo=r(O$e," \u2014 "),mD=n(O$e,"A",{href:!0});var f1t=s(mD);_Co=r(f1t,"GLPNModel"),f1t.forEach(t),uCo=r(O$e," (GLPN model)"),O$e.forEach(t),bCo=i(x),k_=n(x,"LI",{});var V$e=s(k_);Xfe=n(V$e,"STRONG",{});var m1t=s(Xfe);vCo=r(m1t,"gpt2"),m1t.forEach(t),FCo=r(V$e," \u2014 "),gD=n(V$e,"A",{href:!0});var g1t=s(gD);TCo=r(g1t,"GPT2Model"),g1t.forEach(t),MCo=r(V$e," (OpenAI GPT-2 model)"),V$e.forEach(t),ECo=i(x),S_=n(x,"LI",{});var X$e=s(S_);zfe=n(X$e,"STRONG",{});var h1t=s(zfe);CCo=r(h1t,"gpt_neo"),h1t.forEach(t),wCo=r(X$e," \u2014 "),hD=n(X$e,"A",{href:!0});var p1t=s(hD);ACo=r(p1t,"GPTNeoModel"),p1t.forEach(t),LCo=r(X$e," (GPT Neo model)"),X$e.forEach(t),yCo=i(x),R_=n(x,"LI",{});var z$e=s(R_);Wfe=n(z$e,"STRONG",{});var _1t=s(Wfe);xCo=r(_1t,"gpt_neox"),_1t.forEach(t),$Co=r(z$e," \u2014 "),pD=n(z$e,"A",{href:!0});var u1t=s(pD);kCo=r(u1t,"GPTNeoXModel"),u1t.forEach(t),SCo=r(z$e," (GPT NeoX model)"),z$e.forEach(t),RCo=i(x),P_=n(x,"LI",{});var W$e=s(P_);Qfe=n(W$e,"STRONG",{});var b1t=s(Qfe);PCo=r(b1t,"gptj"),b1t.forEach(t),BCo=r(W$e," \u2014 "),_D=n(W$e,"A",{href:!0});var v1t=s(_D);ICo=r(v1t,"GPTJModel"),v1t.forEach(t),NCo=r(W$e," (GPT-J model)"),W$e.forEach(t),qCo=i(x),B_=n(x,"LI",{});var Q$e=s(B_);Hfe=n(Q$e,"STRONG",{});var F1t=s(Hfe);jCo=r(F1t,"groupvit"),F1t.forEach(t),DCo=r(Q$e," \u2014 "),uD=n(Q$e,"A",{href:!0});var T1t=s(uD);GCo=r(T1t,"GroupViTModel"),T1t.forEach(t),OCo=r(Q$e," (GroupViT model)"),Q$e.forEach(t),VCo=i(x),I_=n(x,"LI",{});var H$e=s(I_);Ufe=n(H$e,"STRONG",{});var M1t=s(Ufe);XCo=r(M1t,"hubert"),M1t.forEach(t),zCo=r(H$e," \u2014 "),bD=n(H$e,"A",{href:!0});var E1t=s(bD);WCo=r(E1t,"HubertModel"),E1t.forEach(t),QCo=r(H$e," (Hubert model)"),H$e.forEach(t),HCo=i(x),N_=n(x,"LI",{});var U$e=s(N_);Jfe=n(U$e,"STRONG",{});var C1t=s(Jfe);UCo=r(C1t,"ibert"),C1t.forEach(t),JCo=r(U$e," \u2014 "),vD=n(U$e,"A",{href:!0});var w1t=s(vD);YCo=r(w1t,"IBertModel"),w1t.forEach(t),KCo=r(U$e," (I-BERT model)"),U$e.forEach(t),ZCo=i(x),q_=n(x,"LI",{});var J$e=s(q_);Yfe=n(J$e,"STRONG",{});var A1t=s(Yfe);e5o=r(A1t,"imagegpt"),A1t.forEach(t),o5o=r(J$e," \u2014 "),FD=n(J$e,"A",{href:!0});var L1t=s(FD);r5o=r(L1t,"ImageGPTModel"),L1t.forEach(t),t5o=r(J$e," (ImageGPT model)"),J$e.forEach(t),a5o=i(x),j_=n(x,"LI",{});var Y$e=s(j_);Kfe=n(Y$e,"STRONG",{});var y1t=s(Kfe);n5o=r(y1t,"layoutlm"),y1t.forEach(t),s5o=r(Y$e," \u2014 "),TD=n(Y$e,"A",{href:!0});var x1t=s(TD);l5o=r(x1t,"LayoutLMModel"),x1t.forEach(t),i5o=r(Y$e," (LayoutLM model)"),Y$e.forEach(t),d5o=i(x),D_=n(x,"LI",{});var K$e=s(D_);Zfe=n(K$e,"STRONG",{});var $1t=s(Zfe);c5o=r($1t,"layoutlmv2"),$1t.forEach(t),f5o=r(K$e," \u2014 "),MD=n(K$e,"A",{href:!0});var k1t=s(MD);m5o=r(k1t,"LayoutLMv2Model"),k1t.forEach(t),g5o=r(K$e," (LayoutLMv2 model)"),K$e.forEach(t),h5o=i(x),G_=n(x,"LI",{});var Z$e=s(G_);eme=n(Z$e,"STRONG",{});var S1t=s(eme);p5o=r(S1t,"layoutlmv3"),S1t.forEach(t),_5o=r(Z$e," \u2014 "),ED=n(Z$e,"A",{href:!0});var R1t=s(ED);u5o=r(R1t,"LayoutLMv3Model"),R1t.forEach(t),b5o=r(Z$e," (LayoutLMv3 model)"),Z$e.forEach(t),v5o=i(x),O_=n(x,"LI",{});var eke=s(O_);ome=n(eke,"STRONG",{});var P1t=s(ome);F5o=r(P1t,"led"),P1t.forEach(t),T5o=r(eke," \u2014 "),CD=n(eke,"A",{href:!0});var B1t=s(CD);M5o=r(B1t,"LEDModel"),B1t.forEach(t),E5o=r(eke," (LED model)"),eke.forEach(t),C5o=i(x),V_=n(x,"LI",{});var oke=s(V_);rme=n(oke,"STRONG",{});var I1t=s(rme);w5o=r(I1t,"levit"),I1t.forEach(t),A5o=r(oke," \u2014 "),wD=n(oke,"A",{href:!0});var N1t=s(wD);L5o=r(N1t,"LevitModel"),N1t.forEach(t),y5o=r(oke," (LeViT model)"),oke.forEach(t),x5o=i(x),X_=n(x,"LI",{});var rke=s(X_);tme=n(rke,"STRONG",{});var q1t=s(tme);$5o=r(q1t,"longformer"),q1t.forEach(t),k5o=r(rke," \u2014 "),AD=n(rke,"A",{href:!0});var j1t=s(AD);S5o=r(j1t,"LongformerModel"),j1t.forEach(t),R5o=r(rke," (Longformer model)"),rke.forEach(t),P5o=i(x),z_=n(x,"LI",{});var tke=s(z_);ame=n(tke,"STRONG",{});var D1t=s(ame);B5o=r(D1t,"longt5"),D1t.forEach(t),I5o=r(tke," \u2014 "),LD=n(tke,"A",{href:!0});var G1t=s(LD);N5o=r(G1t,"LongT5Model"),G1t.forEach(t),q5o=r(tke," (LongT5 model)"),tke.forEach(t),j5o=i(x),W_=n(x,"LI",{});var ake=s(W_);nme=n(ake,"STRONG",{});var O1t=s(nme);D5o=r(O1t,"luke"),O1t.forEach(t),G5o=r(ake," \u2014 "),yD=n(ake,"A",{href:!0});var V1t=s(yD);O5o=r(V1t,"LukeModel"),V1t.forEach(t),V5o=r(ake," (LUKE model)"),ake.forEach(t),X5o=i(x),Q_=n(x,"LI",{});var nke=s(Q_);sme=n(nke,"STRONG",{});var X1t=s(sme);z5o=r(X1t,"lxmert"),X1t.forEach(t),W5o=r(nke," \u2014 "),xD=n(nke,"A",{href:!0});var z1t=s(xD);Q5o=r(z1t,"LxmertModel"),z1t.forEach(t),H5o=r(nke," (LXMERT model)"),nke.forEach(t),U5o=i(x),H_=n(x,"LI",{});var ske=s(H_);lme=n(ske,"STRONG",{});var W1t=s(lme);J5o=r(W1t,"m2m_100"),W1t.forEach(t),Y5o=r(ske," \u2014 "),$D=n(ske,"A",{href:!0});var Q1t=s($D);K5o=r(Q1t,"M2M100Model"),Q1t.forEach(t),Z5o=r(ske," (M2M100 model)"),ske.forEach(t),e3o=i(x),U_=n(x,"LI",{});var lke=s(U_);ime=n(lke,"STRONG",{});var H1t=s(ime);o3o=r(H1t,"marian"),H1t.forEach(t),r3o=r(lke," \u2014 "),kD=n(lke,"A",{href:!0});var U1t=s(kD);t3o=r(U1t,"MarianModel"),U1t.forEach(t),a3o=r(lke," (Marian model)"),lke.forEach(t),n3o=i(x),J_=n(x,"LI",{});var ike=s(J_);dme=n(ike,"STRONG",{});var J1t=s(dme);s3o=r(J1t,"maskformer"),J1t.forEach(t),l3o=r(ike," \u2014 "),SD=n(ike,"A",{href:!0});var Y1t=s(SD);i3o=r(Y1t,"MaskFormerModel"),Y1t.forEach(t),d3o=r(ike," (MaskFormer model)"),ike.forEach(t),c3o=i(x),Y_=n(x,"LI",{});var dke=s(Y_);cme=n(dke,"STRONG",{});var K1t=s(cme);f3o=r(K1t,"mbart"),K1t.forEach(t),m3o=r(dke," \u2014 "),RD=n(dke,"A",{href:!0});var Z1t=s(RD);g3o=r(Z1t,"MBartModel"),Z1t.forEach(t),h3o=r(dke," (mBART model)"),dke.forEach(t),p3o=i(x),K_=n(x,"LI",{});var cke=s(K_);fme=n(cke,"STRONG",{});var e4t=s(fme);_3o=r(e4t,"mctct"),e4t.forEach(t),u3o=r(cke," \u2014 "),PD=n(cke,"A",{href:!0});var o4t=s(PD);b3o=r(o4t,"MCTCTModel"),o4t.forEach(t),v3o=r(cke," (M-CTC-T model)"),cke.forEach(t),F3o=i(x),Z_=n(x,"LI",{});var fke=s(Z_);mme=n(fke,"STRONG",{});var r4t=s(mme);T3o=r(r4t,"megatron-bert"),r4t.forEach(t),M3o=r(fke," \u2014 "),BD=n(fke,"A",{href:!0});var t4t=s(BD);E3o=r(t4t,"MegatronBertModel"),t4t.forEach(t),C3o=r(fke," (Megatron-BERT model)"),fke.forEach(t),w3o=i(x),eu=n(x,"LI",{});var mke=s(eu);gme=n(mke,"STRONG",{});var a4t=s(gme);A3o=r(a4t,"mobilebert"),a4t.forEach(t),L3o=r(mke," \u2014 "),ID=n(mke,"A",{href:!0});var n4t=s(ID);y3o=r(n4t,"MobileBertModel"),n4t.forEach(t),x3o=r(mke," (MobileBERT model)"),mke.forEach(t),$3o=i(x),ou=n(x,"LI",{});var gke=s(ou);hme=n(gke,"STRONG",{});var s4t=s(hme);k3o=r(s4t,"mobilevit"),s4t.forEach(t),S3o=r(gke," \u2014 "),ND=n(gke,"A",{href:!0});var l4t=s(ND);R3o=r(l4t,"MobileViTModel"),l4t.forEach(t),P3o=r(gke," (MobileViT model)"),gke.forEach(t),B3o=i(x),ru=n(x,"LI",{});var hke=s(ru);pme=n(hke,"STRONG",{});var i4t=s(pme);I3o=r(i4t,"mpnet"),i4t.forEach(t),N3o=r(hke," \u2014 "),qD=n(hke,"A",{href:!0});var d4t=s(qD);q3o=r(d4t,"MPNetModel"),d4t.forEach(t),j3o=r(hke," (MPNet model)"),hke.forEach(t),D3o=i(x),tu=n(x,"LI",{});var pke=s(tu);_me=n(pke,"STRONG",{});var c4t=s(_me);G3o=r(c4t,"mt5"),c4t.forEach(t),O3o=r(pke," \u2014 "),jD=n(pke,"A",{href:!0});var f4t=s(jD);V3o=r(f4t,"MT5Model"),f4t.forEach(t),X3o=r(pke," (MT5 model)"),pke.forEach(t),z3o=i(x),au=n(x,"LI",{});var _ke=s(au);ume=n(_ke,"STRONG",{});var m4t=s(ume);W3o=r(m4t,"mvp"),m4t.forEach(t),Q3o=r(_ke," \u2014 "),DD=n(_ke,"A",{href:!0});var g4t=s(DD);H3o=r(g4t,"MvpModel"),g4t.forEach(t),U3o=r(_ke," (MVP model)"),_ke.forEach(t),J3o=i(x),nu=n(x,"LI",{});var uke=s(nu);bme=n(uke,"STRONG",{});var h4t=s(bme);Y3o=r(h4t,"nezha"),h4t.forEach(t),K3o=r(uke," \u2014 "),GD=n(uke,"A",{href:!0});var p4t=s(GD);Z3o=r(p4t,"NezhaModel"),p4t.forEach(t),ewo=r(uke," (Nezha model)"),uke.forEach(t),owo=i(x),su=n(x,"LI",{});var bke=s(su);vme=n(bke,"STRONG",{});var _4t=s(vme);rwo=r(_4t,"nllb"),_4t.forEach(t),two=r(bke," \u2014 "),OD=n(bke,"A",{href:!0});var u4t=s(OD);awo=r(u4t,"M2M100Model"),u4t.forEach(t),nwo=r(bke," (NLLB model)"),bke.forEach(t),swo=i(x),lu=n(x,"LI",{});var vke=s(lu);Fme=n(vke,"STRONG",{});var b4t=s(Fme);lwo=r(b4t,"nystromformer"),b4t.forEach(t),iwo=r(vke," \u2014 "),VD=n(vke,"A",{href:!0});var v4t=s(VD);dwo=r(v4t,"NystromformerModel"),v4t.forEach(t),cwo=r(vke," (Nystr\xF6mformer model)"),vke.forEach(t),fwo=i(x),iu=n(x,"LI",{});var Fke=s(iu);Tme=n(Fke,"STRONG",{});var F4t=s(Tme);mwo=r(F4t,"openai-gpt"),F4t.forEach(t),gwo=r(Fke," \u2014 "),XD=n(Fke,"A",{href:!0});var T4t=s(XD);hwo=r(T4t,"OpenAIGPTModel"),T4t.forEach(t),pwo=r(Fke," (OpenAI GPT model)"),Fke.forEach(t),_wo=i(x),du=n(x,"LI",{});var Tke=s(du);Mme=n(Tke,"STRONG",{});var M4t=s(Mme);uwo=r(M4t,"opt"),M4t.forEach(t),bwo=r(Tke," \u2014 "),zD=n(Tke,"A",{href:!0});var E4t=s(zD);vwo=r(E4t,"OPTModel"),E4t.forEach(t),Fwo=r(Tke," (OPT model)"),Tke.forEach(t),Two=i(x),cu=n(x,"LI",{});var Mke=s(cu);Eme=n(Mke,"STRONG",{});var C4t=s(Eme);Mwo=r(C4t,"owlvit"),C4t.forEach(t),Ewo=r(Mke," \u2014 "),WD=n(Mke,"A",{href:!0});var w4t=s(WD);Cwo=r(w4t,"OwlViTModel"),w4t.forEach(t),wwo=r(Mke," (OWL-ViT model)"),Mke.forEach(t),Awo=i(x),fu=n(x,"LI",{});var Eke=s(fu);Cme=n(Eke,"STRONG",{});var A4t=s(Cme);Lwo=r(A4t,"pegasus"),A4t.forEach(t),ywo=r(Eke," \u2014 "),QD=n(Eke,"A",{href:!0});var L4t=s(QD);xwo=r(L4t,"PegasusModel"),L4t.forEach(t),$wo=r(Eke," (Pegasus model)"),Eke.forEach(t),kwo=i(x),mu=n(x,"LI",{});var Cke=s(mu);wme=n(Cke,"STRONG",{});var y4t=s(wme);Swo=r(y4t,"perceiver"),y4t.forEach(t),Rwo=r(Cke," \u2014 "),HD=n(Cke,"A",{href:!0});var x4t=s(HD);Pwo=r(x4t,"PerceiverModel"),x4t.forEach(t),Bwo=r(Cke," (Perceiver model)"),Cke.forEach(t),Iwo=i(x),gu=n(x,"LI",{});var wke=s(gu);Ame=n(wke,"STRONG",{});var $4t=s(Ame);Nwo=r($4t,"plbart"),$4t.forEach(t),qwo=r(wke," \u2014 "),UD=n(wke,"A",{href:!0});var k4t=s(UD);jwo=r(k4t,"PLBartModel"),k4t.forEach(t),Dwo=r(wke," (PLBart model)"),wke.forEach(t),Gwo=i(x),hu=n(x,"LI",{});var Ake=s(hu);Lme=n(Ake,"STRONG",{});var S4t=s(Lme);Owo=r(S4t,"poolformer"),S4t.forEach(t),Vwo=r(Ake," \u2014 "),JD=n(Ake,"A",{href:!0});var R4t=s(JD);Xwo=r(R4t,"PoolFormerModel"),R4t.forEach(t),zwo=r(Ake," (PoolFormer model)"),Ake.forEach(t),Wwo=i(x),pu=n(x,"LI",{});var Lke=s(pu);yme=n(Lke,"STRONG",{});var P4t=s(yme);Qwo=r(P4t,"prophetnet"),P4t.forEach(t),Hwo=r(Lke," \u2014 "),YD=n(Lke,"A",{href:!0});var B4t=s(YD);Uwo=r(B4t,"ProphetNetModel"),B4t.forEach(t),Jwo=r(Lke," (ProphetNet model)"),Lke.forEach(t),Ywo=i(x),_u=n(x,"LI",{});var yke=s(_u);xme=n(yke,"STRONG",{});var I4t=s(xme);Kwo=r(I4t,"qdqbert"),I4t.forEach(t),Zwo=r(yke," \u2014 "),KD=n(yke,"A",{href:!0});var N4t=s(KD);e6o=r(N4t,"QDQBertModel"),N4t.forEach(t),o6o=r(yke," (QDQBert model)"),yke.forEach(t),r6o=i(x),uu=n(x,"LI",{});var xke=s(uu);$me=n(xke,"STRONG",{});var q4t=s($me);t6o=r(q4t,"reformer"),q4t.forEach(t),a6o=r(xke," \u2014 "),ZD=n(xke,"A",{href:!0});var j4t=s(ZD);n6o=r(j4t,"ReformerModel"),j4t.forEach(t),s6o=r(xke," (Reformer model)"),xke.forEach(t),l6o=i(x),bu=n(x,"LI",{});var $ke=s(bu);kme=n($ke,"STRONG",{});var D4t=s(kme);i6o=r(D4t,"regnet"),D4t.forEach(t),d6o=r($ke," \u2014 "),eG=n($ke,"A",{href:!0});var G4t=s(eG);c6o=r(G4t,"RegNetModel"),G4t.forEach(t),f6o=r($ke," (RegNet model)"),$ke.forEach(t),m6o=i(x),vu=n(x,"LI",{});var kke=s(vu);Sme=n(kke,"STRONG",{});var O4t=s(Sme);g6o=r(O4t,"rembert"),O4t.forEach(t),h6o=r(kke," \u2014 "),oG=n(kke,"A",{href:!0});var V4t=s(oG);p6o=r(V4t,"RemBertModel"),V4t.forEach(t),_6o=r(kke," (RemBERT model)"),kke.forEach(t),u6o=i(x),Fu=n(x,"LI",{});var Ske=s(Fu);Rme=n(Ske,"STRONG",{});var X4t=s(Rme);b6o=r(X4t,"resnet"),X4t.forEach(t),v6o=r(Ske," \u2014 "),rG=n(Ske,"A",{href:!0});var z4t=s(rG);F6o=r(z4t,"ResNetModel"),z4t.forEach(t),T6o=r(Ske," (ResNet model)"),Ske.forEach(t),M6o=i(x),Tu=n(x,"LI",{});var Rke=s(Tu);Pme=n(Rke,"STRONG",{});var W4t=s(Pme);E6o=r(W4t,"retribert"),W4t.forEach(t),C6o=r(Rke," \u2014 "),tG=n(Rke,"A",{href:!0});var Q4t=s(tG);w6o=r(Q4t,"RetriBertModel"),Q4t.forEach(t),A6o=r(Rke," (RetriBERT model)"),Rke.forEach(t),L6o=i(x),Mu=n(x,"LI",{});var Pke=s(Mu);Bme=n(Pke,"STRONG",{});var H4t=s(Bme);y6o=r(H4t,"roberta"),H4t.forEach(t),x6o=r(Pke," \u2014 "),aG=n(Pke,"A",{href:!0});var U4t=s(aG);$6o=r(U4t,"RobertaModel"),U4t.forEach(t),k6o=r(Pke," (RoBERTa model)"),Pke.forEach(t),S6o=i(x),Eu=n(x,"LI",{});var Bke=s(Eu);Ime=n(Bke,"STRONG",{});var J4t=s(Ime);R6o=r(J4t,"roformer"),J4t.forEach(t),P6o=r(Bke," \u2014 "),nG=n(Bke,"A",{href:!0});var Y4t=s(nG);B6o=r(Y4t,"RoFormerModel"),Y4t.forEach(t),I6o=r(Bke," (RoFormer model)"),Bke.forEach(t),N6o=i(x),Cu=n(x,"LI",{});var Ike=s(Cu);Nme=n(Ike,"STRONG",{});var K4t=s(Nme);q6o=r(K4t,"segformer"),K4t.forEach(t),j6o=r(Ike," \u2014 "),sG=n(Ike,"A",{href:!0});var Z4t=s(sG);D6o=r(Z4t,"SegformerModel"),Z4t.forEach(t),G6o=r(Ike," (SegFormer model)"),Ike.forEach(t),O6o=i(x),wu=n(x,"LI",{});var Nke=s(wu);qme=n(Nke,"STRONG",{});var ebt=s(qme);V6o=r(ebt,"sew"),ebt.forEach(t),X6o=r(Nke," \u2014 "),lG=n(Nke,"A",{href:!0});var obt=s(lG);z6o=r(obt,"SEWModel"),obt.forEach(t),W6o=r(Nke," (SEW model)"),Nke.forEach(t),Q6o=i(x),Au=n(x,"LI",{});var qke=s(Au);jme=n(qke,"STRONG",{});var rbt=s(jme);H6o=r(rbt,"sew-d"),rbt.forEach(t),U6o=r(qke," \u2014 "),iG=n(qke,"A",{href:!0});var tbt=s(iG);J6o=r(tbt,"SEWDModel"),tbt.forEach(t),Y6o=r(qke," (SEW-D model)"),qke.forEach(t),K6o=i(x),Lu=n(x,"LI",{});var jke=s(Lu);Dme=n(jke,"STRONG",{});var abt=s(Dme);Z6o=r(abt,"speech_to_text"),abt.forEach(t),eAo=r(jke," \u2014 "),dG=n(jke,"A",{href:!0});var nbt=s(dG);oAo=r(nbt,"Speech2TextModel"),nbt.forEach(t),rAo=r(jke," (Speech2Text model)"),jke.forEach(t),tAo=i(x),yu=n(x,"LI",{});var Dke=s(yu);Gme=n(Dke,"STRONG",{});var sbt=s(Gme);aAo=r(sbt,"splinter"),sbt.forEach(t),nAo=r(Dke," \u2014 "),cG=n(Dke,"A",{href:!0});var lbt=s(cG);sAo=r(lbt,"SplinterModel"),lbt.forEach(t),lAo=r(Dke," (Splinter model)"),Dke.forEach(t),iAo=i(x),xu=n(x,"LI",{});var Gke=s(xu);Ome=n(Gke,"STRONG",{});var ibt=s(Ome);dAo=r(ibt,"squeezebert"),ibt.forEach(t),cAo=r(Gke," \u2014 "),fG=n(Gke,"A",{href:!0});var dbt=s(fG);fAo=r(dbt,"SqueezeBertModel"),dbt.forEach(t),mAo=r(Gke," (SqueezeBERT model)"),Gke.forEach(t),gAo=i(x),$u=n(x,"LI",{});var Oke=s($u);Vme=n(Oke,"STRONG",{});var cbt=s(Vme);hAo=r(cbt,"swin"),cbt.forEach(t),pAo=r(Oke," \u2014 "),mG=n(Oke,"A",{href:!0});var fbt=s(mG);_Ao=r(fbt,"SwinModel"),fbt.forEach(t),uAo=r(Oke," (Swin Transformer model)"),Oke.forEach(t),bAo=i(x),ku=n(x,"LI",{});var Vke=s(ku);Xme=n(Vke,"STRONG",{});var mbt=s(Xme);vAo=r(mbt,"swinv2"),mbt.forEach(t),FAo=r(Vke," \u2014 "),gG=n(Vke,"A",{href:!0});var gbt=s(gG);TAo=r(gbt,"Swinv2Model"),gbt.forEach(t),MAo=r(Vke," (Swin Transformer V2 model)"),Vke.forEach(t),EAo=i(x),Su=n(x,"LI",{});var Xke=s(Su);zme=n(Xke,"STRONG",{});var hbt=s(zme);CAo=r(hbt,"t5"),hbt.forEach(t),wAo=r(Xke," \u2014 "),hG=n(Xke,"A",{href:!0});var pbt=s(hG);AAo=r(pbt,"T5Model"),pbt.forEach(t),LAo=r(Xke," (T5 model)"),Xke.forEach(t),yAo=i(x),Ru=n(x,"LI",{});var zke=s(Ru);Wme=n(zke,"STRONG",{});var _bt=s(Wme);xAo=r(_bt,"tapas"),_bt.forEach(t),$Ao=r(zke," \u2014 "),pG=n(zke,"A",{href:!0});var ubt=s(pG);kAo=r(ubt,"TapasModel"),ubt.forEach(t),SAo=r(zke," (TAPAS model)"),zke.forEach(t),RAo=i(x),Pu=n(x,"LI",{});var Wke=s(Pu);Qme=n(Wke,"STRONG",{});var bbt=s(Qme);PAo=r(bbt,"trajectory_transformer"),bbt.forEach(t),BAo=r(Wke," \u2014 "),_G=n(Wke,"A",{href:!0});var vbt=s(_G);IAo=r(vbt,"TrajectoryTransformerModel"),vbt.forEach(t),NAo=r(Wke," (Trajectory Transformer model)"),Wke.forEach(t),qAo=i(x),Bu=n(x,"LI",{});var Qke=s(Bu);Hme=n(Qke,"STRONG",{});var Fbt=s(Hme);jAo=r(Fbt,"transfo-xl"),Fbt.forEach(t),DAo=r(Qke," \u2014 "),uG=n(Qke,"A",{href:!0});var Tbt=s(uG);GAo=r(Tbt,"TransfoXLModel"),Tbt.forEach(t),OAo=r(Qke," (Transformer-XL model)"),Qke.forEach(t),VAo=i(x),Iu=n(x,"LI",{});var Hke=s(Iu);Ume=n(Hke,"STRONG",{});var Mbt=s(Ume);XAo=r(Mbt,"unispeech"),Mbt.forEach(t),zAo=r(Hke," \u2014 "),bG=n(Hke,"A",{href:!0});var Ebt=s(bG);WAo=r(Ebt,"UniSpeechModel"),Ebt.forEach(t),QAo=r(Hke," (UniSpeech model)"),Hke.forEach(t),HAo=i(x),Nu=n(x,"LI",{});var Uke=s(Nu);Jme=n(Uke,"STRONG",{});var Cbt=s(Jme);UAo=r(Cbt,"unispeech-sat"),Cbt.forEach(t),JAo=r(Uke," \u2014 "),vG=n(Uke,"A",{href:!0});var wbt=s(vG);YAo=r(wbt,"UniSpeechSatModel"),wbt.forEach(t),KAo=r(Uke," (UniSpeechSat model)"),Uke.forEach(t),ZAo=i(x),qu=n(x,"LI",{});var Jke=s(qu);Yme=n(Jke,"STRONG",{});var Abt=s(Yme);e7o=r(Abt,"van"),Abt.forEach(t),o7o=r(Jke," \u2014 "),FG=n(Jke,"A",{href:!0});var Lbt=s(FG);r7o=r(Lbt,"VanModel"),Lbt.forEach(t),t7o=r(Jke," (VAN model)"),Jke.forEach(t),a7o=i(x),ju=n(x,"LI",{});var Yke=s(ju);Kme=n(Yke,"STRONG",{});var ybt=s(Kme);n7o=r(ybt,"vilt"),ybt.forEach(t),s7o=r(Yke," \u2014 "),TG=n(Yke,"A",{href:!0});var xbt=s(TG);l7o=r(xbt,"ViltModel"),xbt.forEach(t),i7o=r(Yke," (ViLT model)"),Yke.forEach(t),d7o=i(x),Du=n(x,"LI",{});var Kke=s(Du);Zme=n(Kke,"STRONG",{});var $bt=s(Zme);c7o=r($bt,"vision-text-dual-encoder"),$bt.forEach(t),f7o=r(Kke," \u2014 "),MG=n(Kke,"A",{href:!0});var kbt=s(MG);m7o=r(kbt,"VisionTextDualEncoderModel"),kbt.forEach(t),g7o=r(Kke," (VisionTextDualEncoder model)"),Kke.forEach(t),h7o=i(x),Gu=n(x,"LI",{});var Zke=s(Gu);ege=n(Zke,"STRONG",{});var Sbt=s(ege);p7o=r(Sbt,"visual_bert"),Sbt.forEach(t),_7o=r(Zke," \u2014 "),EG=n(Zke,"A",{href:!0});var Rbt=s(EG);u7o=r(Rbt,"VisualBertModel"),Rbt.forEach(t),b7o=r(Zke," (VisualBERT model)"),Zke.forEach(t),v7o=i(x),Ou=n(x,"LI",{});var eSe=s(Ou);oge=n(eSe,"STRONG",{});var Pbt=s(oge);F7o=r(Pbt,"vit"),Pbt.forEach(t),T7o=r(eSe," \u2014 "),CG=n(eSe,"A",{href:!0});var Bbt=s(CG);M7o=r(Bbt,"ViTModel"),Bbt.forEach(t),E7o=r(eSe," (ViT model)"),eSe.forEach(t),C7o=i(x),Vu=n(x,"LI",{});var oSe=s(Vu);rge=n(oSe,"STRONG",{});var Ibt=s(rge);w7o=r(Ibt,"vit_mae"),Ibt.forEach(t),A7o=r(oSe," \u2014 "),wG=n(oSe,"A",{href:!0});var Nbt=s(wG);L7o=r(Nbt,"ViTMAEModel"),Nbt.forEach(t),y7o=r(oSe," (ViTMAE model)"),oSe.forEach(t),x7o=i(x),Xu=n(x,"LI",{});var rSe=s(Xu);tge=n(rSe,"STRONG",{});var qbt=s(tge);$7o=r(qbt,"wav2vec2"),qbt.forEach(t),k7o=r(rSe," \u2014 "),AG=n(rSe,"A",{href:!0});var jbt=s(AG);S7o=r(jbt,"Wav2Vec2Model"),jbt.forEach(t),R7o=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),P7o=i(x),zu=n(x,"LI",{});var tSe=s(zu);age=n(tSe,"STRONG",{});var Dbt=s(age);B7o=r(Dbt,"wav2vec2-conformer"),Dbt.forEach(t),I7o=r(tSe," \u2014 "),LG=n(tSe,"A",{href:!0});var Gbt=s(LG);N7o=r(Gbt,"Wav2Vec2ConformerModel"),Gbt.forEach(t),q7o=r(tSe," (Wav2Vec2-Conformer model)"),tSe.forEach(t),j7o=i(x),Wu=n(x,"LI",{});var aSe=s(Wu);nge=n(aSe,"STRONG",{});var Obt=s(nge);D7o=r(Obt,"wavlm"),Obt.forEach(t),G7o=r(aSe," \u2014 "),yG=n(aSe,"A",{href:!0});var Vbt=s(yG);O7o=r(Vbt,"WavLMModel"),Vbt.forEach(t),V7o=r(aSe," (WavLM model)"),aSe.forEach(t),X7o=i(x),Qu=n(x,"LI",{});var nSe=s(Qu);sge=n(nSe,"STRONG",{});var Xbt=s(sge);z7o=r(Xbt,"xglm"),Xbt.forEach(t),W7o=r(nSe," \u2014 "),xG=n(nSe,"A",{href:!0});var zbt=s(xG);Q7o=r(zbt,"XGLMModel"),zbt.forEach(t),H7o=r(nSe," (XGLM model)"),nSe.forEach(t),U7o=i(x),Hu=n(x,"LI",{});var sSe=s(Hu);lge=n(sSe,"STRONG",{});var Wbt=s(lge);J7o=r(Wbt,"xlm"),Wbt.forEach(t),Y7o=r(sSe," \u2014 "),$G=n(sSe,"A",{href:!0});var Qbt=s($G);K7o=r(Qbt,"XLMModel"),Qbt.forEach(t),Z7o=r(sSe," (XLM model)"),sSe.forEach(t),eLo=i(x),Uu=n(x,"LI",{});var lSe=s(Uu);ige=n(lSe,"STRONG",{});var Hbt=s(ige);oLo=r(Hbt,"xlm-prophetnet"),Hbt.forEach(t),rLo=r(lSe," \u2014 "),kG=n(lSe,"A",{href:!0});var Ubt=s(kG);tLo=r(Ubt,"XLMProphetNetModel"),Ubt.forEach(t),aLo=r(lSe," (XLM-ProphetNet model)"),lSe.forEach(t),nLo=i(x),Ju=n(x,"LI",{});var iSe=s(Ju);dge=n(iSe,"STRONG",{});var Jbt=s(dge);sLo=r(Jbt,"xlm-roberta"),Jbt.forEach(t),lLo=r(iSe," \u2014 "),SG=n(iSe,"A",{href:!0});var Ybt=s(SG);iLo=r(Ybt,"XLMRobertaModel"),Ybt.forEach(t),dLo=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),cLo=i(x),Yu=n(x,"LI",{});var dSe=s(Yu);cge=n(dSe,"STRONG",{});var Kbt=s(cge);fLo=r(Kbt,"xlm-roberta-xl"),Kbt.forEach(t),mLo=r(dSe," \u2014 "),RG=n(dSe,"A",{href:!0});var Zbt=s(RG);gLo=r(Zbt,"XLMRobertaXLModel"),Zbt.forEach(t),hLo=r(dSe," (XLM-RoBERTa-XL model)"),dSe.forEach(t),pLo=i(x),Ku=n(x,"LI",{});var cSe=s(Ku);fge=n(cSe,"STRONG",{});var evt=s(fge);_Lo=r(evt,"xlnet"),evt.forEach(t),uLo=r(cSe," \u2014 "),PG=n(cSe,"A",{href:!0});var ovt=s(PG);bLo=r(ovt,"XLNetModel"),ovt.forEach(t),vLo=r(cSe," (XLNet model)"),cSe.forEach(t),FLo=i(x),Zu=n(x,"LI",{});var fSe=s(Zu);mge=n(fSe,"STRONG",{});var rvt=s(mge);TLo=r(rvt,"yolos"),rvt.forEach(t),MLo=r(fSe," \u2014 "),BG=n(fSe,"A",{href:!0});var tvt=s(BG);ELo=r(tvt,"YolosModel"),tvt.forEach(t),CLo=r(fSe," (YOLOS model)"),fSe.forEach(t),wLo=i(x),e2=n(x,"LI",{});var mSe=s(e2);gge=n(mSe,"STRONG",{});var avt=s(gge);ALo=r(avt,"yoso"),avt.forEach(t),LLo=r(mSe," \u2014 "),IG=n(mSe,"A",{href:!0});var nvt=s(IG);yLo=r(nvt,"YosoModel"),nvt.forEach(t),xLo=r(mSe," (YOSO model)"),mSe.forEach(t),x.forEach(t),$Lo=i(la),o2=n(la,"P",{});var gSe=s(o2);kLo=r(gSe,"The model is set in evaluation mode by default using "),hge=n(gSe,"CODE",{});var svt=s(hge);SLo=r(svt,"model.eval()"),svt.forEach(t),RLo=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(gSe,"CODE",{});var lvt=s(pge);PLo=r(lvt,"model.train()"),lvt.forEach(t),gSe.forEach(t),BLo=i(la),T(r2.$$.fragment,la),la.forEach(t),nl.forEach(t),Xze=i(f),Qi=n(f,"H2",{class:!0});var JQe=s(Qi);t2=n(JQe,"A",{id:!0,class:!0,href:!0});var ivt=s(t2);_ge=n(ivt,"SPAN",{});var dvt=s(_ge);T(ty.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),ILo=i(JQe),uge=n(JQe,"SPAN",{});var cvt=s(uge);NLo=r(cvt,"AutoModelForPreTraining"),cvt.forEach(t),JQe.forEach(t),zze=i(f),So=n(f,"DIV",{class:!0});var sl=s(So);T(ay.$$.fragment,sl),qLo=i(sl),Hi=n(sl,"P",{});var Lte=s(Hi);jLo=r(Lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NG=n(Lte,"A",{href:!0});var fvt=s(NG);DLo=r(fvt,"from_pretrained()"),fvt.forEach(t),GLo=r(Lte," class method or the "),qG=n(Lte,"A",{href:!0});var mvt=s(qG);OLo=r(mvt,"from_config()"),mvt.forEach(t),VLo=r(Lte,` class
method.`),Lte.forEach(t),XLo=i(sl),ny=n(sl,"P",{});var YQe=s(ny);zLo=r(YQe,"This class cannot be instantiated directly using "),bge=n(YQe,"CODE",{});var gvt=s(bge);WLo=r(gvt,"__init__()"),gvt.forEach(t),QLo=r(YQe," (throws an error)."),YQe.forEach(t),HLo=i(sl),dt=n(sl,"DIV",{class:!0});var kA=s(dt);T(sy.$$.fragment,kA),ULo=i(kA),vge=n(kA,"P",{});var hvt=s(vge);JLo=r(hvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hvt.forEach(t),YLo=i(kA),Ui=n(kA,"P",{});var yte=s(Ui);KLo=r(yte,`Note:
Loading a model from its configuration file does `),Fge=n(yte,"STRONG",{});var pvt=s(Fge);ZLo=r(pvt,"not"),pvt.forEach(t),eyo=r(yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(yte,"A",{href:!0});var _vt=s(jG);oyo=r(_vt,"from_pretrained()"),_vt.forEach(t),ryo=r(yte," to load the model weights."),yte.forEach(t),tyo=i(kA),T(a2.$$.fragment,kA),kA.forEach(t),ayo=i(sl),Ke=n(sl,"DIV",{class:!0});var ia=s(Ke);T(ly.$$.fragment,ia),nyo=i(ia),Tge=n(ia,"P",{});var uvt=s(Tge);syo=r(uvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uvt.forEach(t),lyo=i(ia),Na=n(ia,"P",{});var SA=s(Na);iyo=r(SA,"The model class to instantiate is selected based on the "),Mge=n(SA,"CODE",{});var bvt=s(Mge);dyo=r(bvt,"model_type"),bvt.forEach(t),cyo=r(SA,` property of the config object (either
passed as an argument or loaded from `),Ege=n(SA,"CODE",{});var vvt=s(Ege);fyo=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),myo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(SA,"CODE",{});var Fvt=s(Cge);gyo=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),hyo=r(SA,":"),SA.forEach(t),pyo=i(ia),G=n(ia,"UL",{});var O=s(G);n2=n(O,"LI",{});var hSe=s(n2);wge=n(hSe,"STRONG",{});var Tvt=s(wge);_yo=r(Tvt,"albert"),Tvt.forEach(t),uyo=r(hSe," \u2014 "),DG=n(hSe,"A",{href:!0});var Mvt=s(DG);byo=r(Mvt,"AlbertForPreTraining"),Mvt.forEach(t),vyo=r(hSe," (ALBERT model)"),hSe.forEach(t),Fyo=i(O),s2=n(O,"LI",{});var pSe=s(s2);Age=n(pSe,"STRONG",{});var Evt=s(Age);Tyo=r(Evt,"bart"),Evt.forEach(t),Myo=r(pSe," \u2014 "),GG=n(pSe,"A",{href:!0});var Cvt=s(GG);Eyo=r(Cvt,"BartForConditionalGeneration"),Cvt.forEach(t),Cyo=r(pSe," (BART model)"),pSe.forEach(t),wyo=i(O),l2=n(O,"LI",{});var _Se=s(l2);Lge=n(_Se,"STRONG",{});var wvt=s(Lge);Ayo=r(wvt,"bert"),wvt.forEach(t),Lyo=r(_Se," \u2014 "),OG=n(_Se,"A",{href:!0});var Avt=s(OG);yyo=r(Avt,"BertForPreTraining"),Avt.forEach(t),xyo=r(_Se," (BERT model)"),_Se.forEach(t),$yo=i(O),i2=n(O,"LI",{});var uSe=s(i2);yge=n(uSe,"STRONG",{});var Lvt=s(yge);kyo=r(Lvt,"big_bird"),Lvt.forEach(t),Syo=r(uSe," \u2014 "),VG=n(uSe,"A",{href:!0});var yvt=s(VG);Ryo=r(yvt,"BigBirdForPreTraining"),yvt.forEach(t),Pyo=r(uSe," (BigBird model)"),uSe.forEach(t),Byo=i(O),d2=n(O,"LI",{});var bSe=s(d2);xge=n(bSe,"STRONG",{});var xvt=s(xge);Iyo=r(xvt,"bloom"),xvt.forEach(t),Nyo=r(bSe," \u2014 "),XG=n(bSe,"A",{href:!0});var $vt=s(XG);qyo=r($vt,"BloomForCausalLM"),$vt.forEach(t),jyo=r(bSe," (BLOOM model)"),bSe.forEach(t),Dyo=i(O),c2=n(O,"LI",{});var vSe=s(c2);$ge=n(vSe,"STRONG",{});var kvt=s($ge);Gyo=r(kvt,"camembert"),kvt.forEach(t),Oyo=r(vSe," \u2014 "),zG=n(vSe,"A",{href:!0});var Svt=s(zG);Vyo=r(Svt,"CamembertForMaskedLM"),Svt.forEach(t),Xyo=r(vSe," (CamemBERT model)"),vSe.forEach(t),zyo=i(O),f2=n(O,"LI",{});var FSe=s(f2);kge=n(FSe,"STRONG",{});var Rvt=s(kge);Wyo=r(Rvt,"ctrl"),Rvt.forEach(t),Qyo=r(FSe," \u2014 "),WG=n(FSe,"A",{href:!0});var Pvt=s(WG);Hyo=r(Pvt,"CTRLLMHeadModel"),Pvt.forEach(t),Uyo=r(FSe," (CTRL model)"),FSe.forEach(t),Jyo=i(O),m2=n(O,"LI",{});var TSe=s(m2);Sge=n(TSe,"STRONG",{});var Bvt=s(Sge);Yyo=r(Bvt,"data2vec-text"),Bvt.forEach(t),Kyo=r(TSe," \u2014 "),QG=n(TSe,"A",{href:!0});var Ivt=s(QG);Zyo=r(Ivt,"Data2VecTextForMaskedLM"),Ivt.forEach(t),e9o=r(TSe," (Data2VecText model)"),TSe.forEach(t),o9o=i(O),g2=n(O,"LI",{});var MSe=s(g2);Rge=n(MSe,"STRONG",{});var Nvt=s(Rge);r9o=r(Nvt,"deberta"),Nvt.forEach(t),t9o=r(MSe," \u2014 "),HG=n(MSe,"A",{href:!0});var qvt=s(HG);a9o=r(qvt,"DebertaForMaskedLM"),qvt.forEach(t),n9o=r(MSe," (DeBERTa model)"),MSe.forEach(t),s9o=i(O),h2=n(O,"LI",{});var ESe=s(h2);Pge=n(ESe,"STRONG",{});var jvt=s(Pge);l9o=r(jvt,"deberta-v2"),jvt.forEach(t),i9o=r(ESe," \u2014 "),UG=n(ESe,"A",{href:!0});var Dvt=s(UG);d9o=r(Dvt,"DebertaV2ForMaskedLM"),Dvt.forEach(t),c9o=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),f9o=i(O),p2=n(O,"LI",{});var CSe=s(p2);Bge=n(CSe,"STRONG",{});var Gvt=s(Bge);m9o=r(Gvt,"distilbert"),Gvt.forEach(t),g9o=r(CSe," \u2014 "),JG=n(CSe,"A",{href:!0});var Ovt=s(JG);h9o=r(Ovt,"DistilBertForMaskedLM"),Ovt.forEach(t),p9o=r(CSe," (DistilBERT model)"),CSe.forEach(t),_9o=i(O),_2=n(O,"LI",{});var wSe=s(_2);Ige=n(wSe,"STRONG",{});var Vvt=s(Ige);u9o=r(Vvt,"electra"),Vvt.forEach(t),b9o=r(wSe," \u2014 "),YG=n(wSe,"A",{href:!0});var Xvt=s(YG);v9o=r(Xvt,"ElectraForPreTraining"),Xvt.forEach(t),F9o=r(wSe," (ELECTRA model)"),wSe.forEach(t),T9o=i(O),u2=n(O,"LI",{});var ASe=s(u2);Nge=n(ASe,"STRONG",{});var zvt=s(Nge);M9o=r(zvt,"flaubert"),zvt.forEach(t),E9o=r(ASe," \u2014 "),KG=n(ASe,"A",{href:!0});var Wvt=s(KG);C9o=r(Wvt,"FlaubertWithLMHeadModel"),Wvt.forEach(t),w9o=r(ASe," (FlauBERT model)"),ASe.forEach(t),A9o=i(O),b2=n(O,"LI",{});var LSe=s(b2);qge=n(LSe,"STRONG",{});var Qvt=s(qge);L9o=r(Qvt,"flava"),Qvt.forEach(t),y9o=r(LSe," \u2014 "),ZG=n(LSe,"A",{href:!0});var Hvt=s(ZG);x9o=r(Hvt,"FlavaForPreTraining"),Hvt.forEach(t),$9o=r(LSe," (FLAVA model)"),LSe.forEach(t),k9o=i(O),v2=n(O,"LI",{});var ySe=s(v2);jge=n(ySe,"STRONG",{});var Uvt=s(jge);S9o=r(Uvt,"fnet"),Uvt.forEach(t),R9o=r(ySe," \u2014 "),eO=n(ySe,"A",{href:!0});var Jvt=s(eO);P9o=r(Jvt,"FNetForPreTraining"),Jvt.forEach(t),B9o=r(ySe," (FNet model)"),ySe.forEach(t),I9o=i(O),F2=n(O,"LI",{});var xSe=s(F2);Dge=n(xSe,"STRONG",{});var Yvt=s(Dge);N9o=r(Yvt,"fsmt"),Yvt.forEach(t),q9o=r(xSe," \u2014 "),oO=n(xSe,"A",{href:!0});var Kvt=s(oO);j9o=r(Kvt,"FSMTForConditionalGeneration"),Kvt.forEach(t),D9o=r(xSe," (FairSeq Machine-Translation model)"),xSe.forEach(t),G9o=i(O),T2=n(O,"LI",{});var $Se=s(T2);Gge=n($Se,"STRONG",{});var Zvt=s(Gge);O9o=r(Zvt,"funnel"),Zvt.forEach(t),V9o=r($Se," \u2014 "),rO=n($Se,"A",{href:!0});var e0t=s(rO);X9o=r(e0t,"FunnelForPreTraining"),e0t.forEach(t),z9o=r($Se," (Funnel Transformer model)"),$Se.forEach(t),W9o=i(O),M2=n(O,"LI",{});var kSe=s(M2);Oge=n(kSe,"STRONG",{});var o0t=s(Oge);Q9o=r(o0t,"gpt2"),o0t.forEach(t),H9o=r(kSe," \u2014 "),tO=n(kSe,"A",{href:!0});var r0t=s(tO);U9o=r(r0t,"GPT2LMHeadModel"),r0t.forEach(t),J9o=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),Y9o=i(O),E2=n(O,"LI",{});var SSe=s(E2);Vge=n(SSe,"STRONG",{});var t0t=s(Vge);K9o=r(t0t,"ibert"),t0t.forEach(t),Z9o=r(SSe," \u2014 "),aO=n(SSe,"A",{href:!0});var a0t=s(aO);exo=r(a0t,"IBertForMaskedLM"),a0t.forEach(t),oxo=r(SSe," (I-BERT model)"),SSe.forEach(t),rxo=i(O),C2=n(O,"LI",{});var RSe=s(C2);Xge=n(RSe,"STRONG",{});var n0t=s(Xge);txo=r(n0t,"layoutlm"),n0t.forEach(t),axo=r(RSe," \u2014 "),nO=n(RSe,"A",{href:!0});var s0t=s(nO);nxo=r(s0t,"LayoutLMForMaskedLM"),s0t.forEach(t),sxo=r(RSe," (LayoutLM model)"),RSe.forEach(t),lxo=i(O),w2=n(O,"LI",{});var PSe=s(w2);zge=n(PSe,"STRONG",{});var l0t=s(zge);ixo=r(l0t,"longformer"),l0t.forEach(t),dxo=r(PSe," \u2014 "),sO=n(PSe,"A",{href:!0});var i0t=s(sO);cxo=r(i0t,"LongformerForMaskedLM"),i0t.forEach(t),fxo=r(PSe," (Longformer model)"),PSe.forEach(t),mxo=i(O),A2=n(O,"LI",{});var BSe=s(A2);Wge=n(BSe,"STRONG",{});var d0t=s(Wge);gxo=r(d0t,"luke"),d0t.forEach(t),hxo=r(BSe," \u2014 "),lO=n(BSe,"A",{href:!0});var c0t=s(lO);pxo=r(c0t,"LukeForMaskedLM"),c0t.forEach(t),_xo=r(BSe," (LUKE model)"),BSe.forEach(t),uxo=i(O),L2=n(O,"LI",{});var ISe=s(L2);Qge=n(ISe,"STRONG",{});var f0t=s(Qge);bxo=r(f0t,"lxmert"),f0t.forEach(t),vxo=r(ISe," \u2014 "),iO=n(ISe,"A",{href:!0});var m0t=s(iO);Fxo=r(m0t,"LxmertForPreTraining"),m0t.forEach(t),Txo=r(ISe," (LXMERT model)"),ISe.forEach(t),Mxo=i(O),y2=n(O,"LI",{});var NSe=s(y2);Hge=n(NSe,"STRONG",{});var g0t=s(Hge);Exo=r(g0t,"megatron-bert"),g0t.forEach(t),Cxo=r(NSe," \u2014 "),dO=n(NSe,"A",{href:!0});var h0t=s(dO);wxo=r(h0t,"MegatronBertForPreTraining"),h0t.forEach(t),Axo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),Lxo=i(O),x2=n(O,"LI",{});var qSe=s(x2);Uge=n(qSe,"STRONG",{});var p0t=s(Uge);yxo=r(p0t,"mobilebert"),p0t.forEach(t),xxo=r(qSe," \u2014 "),cO=n(qSe,"A",{href:!0});var _0t=s(cO);$xo=r(_0t,"MobileBertForPreTraining"),_0t.forEach(t),kxo=r(qSe," (MobileBERT model)"),qSe.forEach(t),Sxo=i(O),$2=n(O,"LI",{});var jSe=s($2);Jge=n(jSe,"STRONG",{});var u0t=s(Jge);Rxo=r(u0t,"mpnet"),u0t.forEach(t),Pxo=r(jSe," \u2014 "),fO=n(jSe,"A",{href:!0});var b0t=s(fO);Bxo=r(b0t,"MPNetForMaskedLM"),b0t.forEach(t),Ixo=r(jSe," (MPNet model)"),jSe.forEach(t),Nxo=i(O),k2=n(O,"LI",{});var DSe=s(k2);Yge=n(DSe,"STRONG",{});var v0t=s(Yge);qxo=r(v0t,"mvp"),v0t.forEach(t),jxo=r(DSe," \u2014 "),mO=n(DSe,"A",{href:!0});var F0t=s(mO);Dxo=r(F0t,"MvpForConditionalGeneration"),F0t.forEach(t),Gxo=r(DSe," (MVP model)"),DSe.forEach(t),Oxo=i(O),S2=n(O,"LI",{});var GSe=s(S2);Kge=n(GSe,"STRONG",{});var T0t=s(Kge);Vxo=r(T0t,"nezha"),T0t.forEach(t),Xxo=r(GSe," \u2014 "),gO=n(GSe,"A",{href:!0});var M0t=s(gO);zxo=r(M0t,"NezhaForPreTraining"),M0t.forEach(t),Wxo=r(GSe," (Nezha model)"),GSe.forEach(t),Qxo=i(O),R2=n(O,"LI",{});var OSe=s(R2);Zge=n(OSe,"STRONG",{});var E0t=s(Zge);Hxo=r(E0t,"openai-gpt"),E0t.forEach(t),Uxo=r(OSe," \u2014 "),hO=n(OSe,"A",{href:!0});var C0t=s(hO);Jxo=r(C0t,"OpenAIGPTLMHeadModel"),C0t.forEach(t),Yxo=r(OSe," (OpenAI GPT model)"),OSe.forEach(t),Kxo=i(O),P2=n(O,"LI",{});var VSe=s(P2);ehe=n(VSe,"STRONG",{});var w0t=s(ehe);Zxo=r(w0t,"retribert"),w0t.forEach(t),e$o=r(VSe," \u2014 "),pO=n(VSe,"A",{href:!0});var A0t=s(pO);o$o=r(A0t,"RetriBertModel"),A0t.forEach(t),r$o=r(VSe," (RetriBERT model)"),VSe.forEach(t),t$o=i(O),B2=n(O,"LI",{});var XSe=s(B2);ohe=n(XSe,"STRONG",{});var L0t=s(ohe);a$o=r(L0t,"roberta"),L0t.forEach(t),n$o=r(XSe," \u2014 "),_O=n(XSe,"A",{href:!0});var y0t=s(_O);s$o=r(y0t,"RobertaForMaskedLM"),y0t.forEach(t),l$o=r(XSe," (RoBERTa model)"),XSe.forEach(t),i$o=i(O),I2=n(O,"LI",{});var zSe=s(I2);rhe=n(zSe,"STRONG",{});var x0t=s(rhe);d$o=r(x0t,"splinter"),x0t.forEach(t),c$o=r(zSe," \u2014 "),uO=n(zSe,"A",{href:!0});var $0t=s(uO);f$o=r($0t,"SplinterForPreTraining"),$0t.forEach(t),m$o=r(zSe," (Splinter model)"),zSe.forEach(t),g$o=i(O),N2=n(O,"LI",{});var WSe=s(N2);the=n(WSe,"STRONG",{});var k0t=s(the);h$o=r(k0t,"squeezebert"),k0t.forEach(t),p$o=r(WSe," \u2014 "),bO=n(WSe,"A",{href:!0});var S0t=s(bO);_$o=r(S0t,"SqueezeBertForMaskedLM"),S0t.forEach(t),u$o=r(WSe," (SqueezeBERT model)"),WSe.forEach(t),b$o=i(O),q2=n(O,"LI",{});var QSe=s(q2);ahe=n(QSe,"STRONG",{});var R0t=s(ahe);v$o=r(R0t,"t5"),R0t.forEach(t),F$o=r(QSe," \u2014 "),vO=n(QSe,"A",{href:!0});var P0t=s(vO);T$o=r(P0t,"T5ForConditionalGeneration"),P0t.forEach(t),M$o=r(QSe," (T5 model)"),QSe.forEach(t),E$o=i(O),j2=n(O,"LI",{});var HSe=s(j2);nhe=n(HSe,"STRONG",{});var B0t=s(nhe);C$o=r(B0t,"tapas"),B0t.forEach(t),w$o=r(HSe," \u2014 "),FO=n(HSe,"A",{href:!0});var I0t=s(FO);A$o=r(I0t,"TapasForMaskedLM"),I0t.forEach(t),L$o=r(HSe," (TAPAS model)"),HSe.forEach(t),y$o=i(O),D2=n(O,"LI",{});var USe=s(D2);she=n(USe,"STRONG",{});var N0t=s(she);x$o=r(N0t,"transfo-xl"),N0t.forEach(t),$$o=r(USe," \u2014 "),TO=n(USe,"A",{href:!0});var q0t=s(TO);k$o=r(q0t,"TransfoXLLMHeadModel"),q0t.forEach(t),S$o=r(USe," (Transformer-XL model)"),USe.forEach(t),R$o=i(O),G2=n(O,"LI",{});var JSe=s(G2);lhe=n(JSe,"STRONG",{});var j0t=s(lhe);P$o=r(j0t,"unispeech"),j0t.forEach(t),B$o=r(JSe," \u2014 "),MO=n(JSe,"A",{href:!0});var D0t=s(MO);I$o=r(D0t,"UniSpeechForPreTraining"),D0t.forEach(t),N$o=r(JSe," (UniSpeech model)"),JSe.forEach(t),q$o=i(O),O2=n(O,"LI",{});var YSe=s(O2);ihe=n(YSe,"STRONG",{});var G0t=s(ihe);j$o=r(G0t,"unispeech-sat"),G0t.forEach(t),D$o=r(YSe," \u2014 "),EO=n(YSe,"A",{href:!0});var O0t=s(EO);G$o=r(O0t,"UniSpeechSatForPreTraining"),O0t.forEach(t),O$o=r(YSe," (UniSpeechSat model)"),YSe.forEach(t),V$o=i(O),V2=n(O,"LI",{});var KSe=s(V2);dhe=n(KSe,"STRONG",{});var V0t=s(dhe);X$o=r(V0t,"visual_bert"),V0t.forEach(t),z$o=r(KSe," \u2014 "),CO=n(KSe,"A",{href:!0});var X0t=s(CO);W$o=r(X0t,"VisualBertForPreTraining"),X0t.forEach(t),Q$o=r(KSe," (VisualBERT model)"),KSe.forEach(t),H$o=i(O),X2=n(O,"LI",{});var ZSe=s(X2);che=n(ZSe,"STRONG",{});var z0t=s(che);U$o=r(z0t,"vit_mae"),z0t.forEach(t),J$o=r(ZSe," \u2014 "),wO=n(ZSe,"A",{href:!0});var W0t=s(wO);Y$o=r(W0t,"ViTMAEForPreTraining"),W0t.forEach(t),K$o=r(ZSe," (ViTMAE model)"),ZSe.forEach(t),Z$o=i(O),z2=n(O,"LI",{});var eRe=s(z2);fhe=n(eRe,"STRONG",{});var Q0t=s(fhe);eko=r(Q0t,"wav2vec2"),Q0t.forEach(t),oko=r(eRe," \u2014 "),AO=n(eRe,"A",{href:!0});var H0t=s(AO);rko=r(H0t,"Wav2Vec2ForPreTraining"),H0t.forEach(t),tko=r(eRe," (Wav2Vec2 model)"),eRe.forEach(t),ako=i(O),W2=n(O,"LI",{});var oRe=s(W2);mhe=n(oRe,"STRONG",{});var U0t=s(mhe);nko=r(U0t,"wav2vec2-conformer"),U0t.forEach(t),sko=r(oRe," \u2014 "),LO=n(oRe,"A",{href:!0});var J0t=s(LO);lko=r(J0t,"Wav2Vec2ConformerForPreTraining"),J0t.forEach(t),iko=r(oRe," (Wav2Vec2-Conformer model)"),oRe.forEach(t),dko=i(O),Q2=n(O,"LI",{});var rRe=s(Q2);ghe=n(rRe,"STRONG",{});var Y0t=s(ghe);cko=r(Y0t,"xlm"),Y0t.forEach(t),fko=r(rRe," \u2014 "),yO=n(rRe,"A",{href:!0});var K0t=s(yO);mko=r(K0t,"XLMWithLMHeadModel"),K0t.forEach(t),gko=r(rRe," (XLM model)"),rRe.forEach(t),hko=i(O),H2=n(O,"LI",{});var tRe=s(H2);hhe=n(tRe,"STRONG",{});var Z0t=s(hhe);pko=r(Z0t,"xlm-roberta"),Z0t.forEach(t),_ko=r(tRe," \u2014 "),xO=n(tRe,"A",{href:!0});var eFt=s(xO);uko=r(eFt,"XLMRobertaForMaskedLM"),eFt.forEach(t),bko=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),vko=i(O),U2=n(O,"LI",{});var aRe=s(U2);phe=n(aRe,"STRONG",{});var oFt=s(phe);Fko=r(oFt,"xlm-roberta-xl"),oFt.forEach(t),Tko=r(aRe," \u2014 "),$O=n(aRe,"A",{href:!0});var rFt=s($O);Mko=r(rFt,"XLMRobertaXLForMaskedLM"),rFt.forEach(t),Eko=r(aRe," (XLM-RoBERTa-XL model)"),aRe.forEach(t),Cko=i(O),J2=n(O,"LI",{});var nRe=s(J2);_he=n(nRe,"STRONG",{});var tFt=s(_he);wko=r(tFt,"xlnet"),tFt.forEach(t),Ako=r(nRe," \u2014 "),kO=n(nRe,"A",{href:!0});var aFt=s(kO);Lko=r(aFt,"XLNetLMHeadModel"),aFt.forEach(t),yko=r(nRe," (XLNet model)"),nRe.forEach(t),O.forEach(t),xko=i(ia),Y2=n(ia,"P",{});var sRe=s(Y2);$ko=r(sRe,"The model is set in evaluation mode by default using "),uhe=n(sRe,"CODE",{});var nFt=s(uhe);kko=r(nFt,"model.eval()"),nFt.forEach(t),Sko=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(sRe,"CODE",{});var sFt=s(bhe);Rko=r(sFt,"model.train()"),sFt.forEach(t),sRe.forEach(t),Pko=i(ia),T(K2.$$.fragment,ia),ia.forEach(t),sl.forEach(t),Wze=i(f),Ji=n(f,"H2",{class:!0});var KQe=s(Ji);Z2=n(KQe,"A",{id:!0,class:!0,href:!0});var lFt=s(Z2);vhe=n(lFt,"SPAN",{});var iFt=s(vhe);T(iy.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),Bko=i(KQe),Fhe=n(KQe,"SPAN",{});var dFt=s(Fhe);Iko=r(dFt,"AutoModelForCausalLM"),dFt.forEach(t),KQe.forEach(t),Qze=i(f),Ro=n(f,"DIV",{class:!0});var ll=s(Ro);T(dy.$$.fragment,ll),Nko=i(ll),Yi=n(ll,"P",{});var xte=s(Yi);qko=r(xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SO=n(xte,"A",{href:!0});var cFt=s(SO);jko=r(cFt,"from_pretrained()"),cFt.forEach(t),Dko=r(xte," class method or the "),RO=n(xte,"A",{href:!0});var fFt=s(RO);Gko=r(fFt,"from_config()"),fFt.forEach(t),Oko=r(xte,` class
method.`),xte.forEach(t),Vko=i(ll),cy=n(ll,"P",{});var ZQe=s(cy);Xko=r(ZQe,"This class cannot be instantiated directly using "),The=n(ZQe,"CODE",{});var mFt=s(The);zko=r(mFt,"__init__()"),mFt.forEach(t),Wko=r(ZQe," (throws an error)."),ZQe.forEach(t),Qko=i(ll),ct=n(ll,"DIV",{class:!0});var RA=s(ct);T(fy.$$.fragment,RA),Hko=i(RA),Mhe=n(RA,"P",{});var gFt=s(Mhe);Uko=r(gFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gFt.forEach(t),Jko=i(RA),Ki=n(RA,"P",{});var $te=s(Ki);Yko=r($te,`Note:
Loading a model from its configuration file does `),Ehe=n($te,"STRONG",{});var hFt=s(Ehe);Kko=r(hFt,"not"),hFt.forEach(t),Zko=r($te,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n($te,"A",{href:!0});var pFt=s(PO);eSo=r(pFt,"from_pretrained()"),pFt.forEach(t),oSo=r($te," to load the model weights."),$te.forEach(t),rSo=i(RA),T(e1.$$.fragment,RA),RA.forEach(t),tSo=i(ll),Ze=n(ll,"DIV",{class:!0});var da=s(Ze);T(my.$$.fragment,da),aSo=i(da),Che=n(da,"P",{});var _Ft=s(Che);nSo=r(_Ft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Ft.forEach(t),sSo=i(da),qa=n(da,"P",{});var PA=s(qa);lSo=r(PA,"The model class to instantiate is selected based on the "),whe=n(PA,"CODE",{});var uFt=s(whe);iSo=r(uFt,"model_type"),uFt.forEach(t),dSo=r(PA,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(PA,"CODE",{});var bFt=s(Ahe);cSo=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),fSo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(PA,"CODE",{});var vFt=s(Lhe);mSo=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),gSo=r(PA,":"),PA.forEach(t),hSo=i(da),z=n(da,"UL",{});var W=s(z);o1=n(W,"LI",{});var lRe=s(o1);yhe=n(lRe,"STRONG",{});var FFt=s(yhe);pSo=r(FFt,"bart"),FFt.forEach(t),_So=r(lRe," \u2014 "),BO=n(lRe,"A",{href:!0});var TFt=s(BO);uSo=r(TFt,"BartForCausalLM"),TFt.forEach(t),bSo=r(lRe," (BART model)"),lRe.forEach(t),vSo=i(W),r1=n(W,"LI",{});var iRe=s(r1);xhe=n(iRe,"STRONG",{});var MFt=s(xhe);FSo=r(MFt,"bert"),MFt.forEach(t),TSo=r(iRe," \u2014 "),IO=n(iRe,"A",{href:!0});var EFt=s(IO);MSo=r(EFt,"BertLMHeadModel"),EFt.forEach(t),ESo=r(iRe," (BERT model)"),iRe.forEach(t),CSo=i(W),t1=n(W,"LI",{});var dRe=s(t1);$he=n(dRe,"STRONG",{});var CFt=s($he);wSo=r(CFt,"bert-generation"),CFt.forEach(t),ASo=r(dRe," \u2014 "),NO=n(dRe,"A",{href:!0});var wFt=s(NO);LSo=r(wFt,"BertGenerationDecoder"),wFt.forEach(t),ySo=r(dRe," (Bert Generation model)"),dRe.forEach(t),xSo=i(W),a1=n(W,"LI",{});var cRe=s(a1);khe=n(cRe,"STRONG",{});var AFt=s(khe);$So=r(AFt,"big_bird"),AFt.forEach(t),kSo=r(cRe," \u2014 "),qO=n(cRe,"A",{href:!0});var LFt=s(qO);SSo=r(LFt,"BigBirdForCausalLM"),LFt.forEach(t),RSo=r(cRe," (BigBird model)"),cRe.forEach(t),PSo=i(W),n1=n(W,"LI",{});var fRe=s(n1);She=n(fRe,"STRONG",{});var yFt=s(She);BSo=r(yFt,"bigbird_pegasus"),yFt.forEach(t),ISo=r(fRe," \u2014 "),jO=n(fRe,"A",{href:!0});var xFt=s(jO);NSo=r(xFt,"BigBirdPegasusForCausalLM"),xFt.forEach(t),qSo=r(fRe," (BigBird-Pegasus model)"),fRe.forEach(t),jSo=i(W),s1=n(W,"LI",{});var mRe=s(s1);Rhe=n(mRe,"STRONG",{});var $Ft=s(Rhe);DSo=r($Ft,"blenderbot"),$Ft.forEach(t),GSo=r(mRe," \u2014 "),DO=n(mRe,"A",{href:!0});var kFt=s(DO);OSo=r(kFt,"BlenderbotForCausalLM"),kFt.forEach(t),VSo=r(mRe," (Blenderbot model)"),mRe.forEach(t),XSo=i(W),l1=n(W,"LI",{});var gRe=s(l1);Phe=n(gRe,"STRONG",{});var SFt=s(Phe);zSo=r(SFt,"blenderbot-small"),SFt.forEach(t),WSo=r(gRe," \u2014 "),GO=n(gRe,"A",{href:!0});var RFt=s(GO);QSo=r(RFt,"BlenderbotSmallForCausalLM"),RFt.forEach(t),HSo=r(gRe," (BlenderbotSmall model)"),gRe.forEach(t),USo=i(W),i1=n(W,"LI",{});var hRe=s(i1);Bhe=n(hRe,"STRONG",{});var PFt=s(Bhe);JSo=r(PFt,"bloom"),PFt.forEach(t),YSo=r(hRe," \u2014 "),OO=n(hRe,"A",{href:!0});var BFt=s(OO);KSo=r(BFt,"BloomForCausalLM"),BFt.forEach(t),ZSo=r(hRe," (BLOOM model)"),hRe.forEach(t),eRo=i(W),d1=n(W,"LI",{});var pRe=s(d1);Ihe=n(pRe,"STRONG",{});var IFt=s(Ihe);oRo=r(IFt,"camembert"),IFt.forEach(t),rRo=r(pRe," \u2014 "),VO=n(pRe,"A",{href:!0});var NFt=s(VO);tRo=r(NFt,"CamembertForCausalLM"),NFt.forEach(t),aRo=r(pRe," (CamemBERT model)"),pRe.forEach(t),nRo=i(W),c1=n(W,"LI",{});var _Re=s(c1);Nhe=n(_Re,"STRONG",{});var qFt=s(Nhe);sRo=r(qFt,"codegen"),qFt.forEach(t),lRo=r(_Re," \u2014 "),XO=n(_Re,"A",{href:!0});var jFt=s(XO);iRo=r(jFt,"CodeGenForCausalLM"),jFt.forEach(t),dRo=r(_Re," (CodeGen model)"),_Re.forEach(t),cRo=i(W),f1=n(W,"LI",{});var uRe=s(f1);qhe=n(uRe,"STRONG",{});var DFt=s(qhe);fRo=r(DFt,"ctrl"),DFt.forEach(t),mRo=r(uRe," \u2014 "),zO=n(uRe,"A",{href:!0});var GFt=s(zO);gRo=r(GFt,"CTRLLMHeadModel"),GFt.forEach(t),hRo=r(uRe," (CTRL model)"),uRe.forEach(t),pRo=i(W),m1=n(W,"LI",{});var bRe=s(m1);jhe=n(bRe,"STRONG",{});var OFt=s(jhe);_Ro=r(OFt,"data2vec-text"),OFt.forEach(t),uRo=r(bRe," \u2014 "),WO=n(bRe,"A",{href:!0});var VFt=s(WO);bRo=r(VFt,"Data2VecTextForCausalLM"),VFt.forEach(t),vRo=r(bRe," (Data2VecText model)"),bRe.forEach(t),FRo=i(W),g1=n(W,"LI",{});var vRe=s(g1);Dhe=n(vRe,"STRONG",{});var XFt=s(Dhe);TRo=r(XFt,"electra"),XFt.forEach(t),MRo=r(vRe," \u2014 "),QO=n(vRe,"A",{href:!0});var zFt=s(QO);ERo=r(zFt,"ElectraForCausalLM"),zFt.forEach(t),CRo=r(vRe," (ELECTRA model)"),vRe.forEach(t),wRo=i(W),h1=n(W,"LI",{});var FRe=s(h1);Ghe=n(FRe,"STRONG",{});var WFt=s(Ghe);ARo=r(WFt,"gpt2"),WFt.forEach(t),LRo=r(FRe," \u2014 "),HO=n(FRe,"A",{href:!0});var QFt=s(HO);yRo=r(QFt,"GPT2LMHeadModel"),QFt.forEach(t),xRo=r(FRe," (OpenAI GPT-2 model)"),FRe.forEach(t),$Ro=i(W),p1=n(W,"LI",{});var TRe=s(p1);Ohe=n(TRe,"STRONG",{});var HFt=s(Ohe);kRo=r(HFt,"gpt_neo"),HFt.forEach(t),SRo=r(TRe," \u2014 "),UO=n(TRe,"A",{href:!0});var UFt=s(UO);RRo=r(UFt,"GPTNeoForCausalLM"),UFt.forEach(t),PRo=r(TRe," (GPT Neo model)"),TRe.forEach(t),BRo=i(W),_1=n(W,"LI",{});var MRe=s(_1);Vhe=n(MRe,"STRONG",{});var JFt=s(Vhe);IRo=r(JFt,"gpt_neox"),JFt.forEach(t),NRo=r(MRe," \u2014 "),JO=n(MRe,"A",{href:!0});var YFt=s(JO);qRo=r(YFt,"GPTNeoXForCausalLM"),YFt.forEach(t),jRo=r(MRe," (GPT NeoX model)"),MRe.forEach(t),DRo=i(W),u1=n(W,"LI",{});var ERe=s(u1);Xhe=n(ERe,"STRONG",{});var KFt=s(Xhe);GRo=r(KFt,"gptj"),KFt.forEach(t),ORo=r(ERe," \u2014 "),YO=n(ERe,"A",{href:!0});var ZFt=s(YO);VRo=r(ZFt,"GPTJForCausalLM"),ZFt.forEach(t),XRo=r(ERe," (GPT-J model)"),ERe.forEach(t),zRo=i(W),b1=n(W,"LI",{});var CRe=s(b1);zhe=n(CRe,"STRONG",{});var eTt=s(zhe);WRo=r(eTt,"marian"),eTt.forEach(t),QRo=r(CRe," \u2014 "),KO=n(CRe,"A",{href:!0});var oTt=s(KO);HRo=r(oTt,"MarianForCausalLM"),oTt.forEach(t),URo=r(CRe," (Marian model)"),CRe.forEach(t),JRo=i(W),v1=n(W,"LI",{});var wRe=s(v1);Whe=n(wRe,"STRONG",{});var rTt=s(Whe);YRo=r(rTt,"mbart"),rTt.forEach(t),KRo=r(wRe," \u2014 "),ZO=n(wRe,"A",{href:!0});var tTt=s(ZO);ZRo=r(tTt,"MBartForCausalLM"),tTt.forEach(t),ePo=r(wRe," (mBART model)"),wRe.forEach(t),oPo=i(W),F1=n(W,"LI",{});var ARe=s(F1);Qhe=n(ARe,"STRONG",{});var aTt=s(Qhe);rPo=r(aTt,"megatron-bert"),aTt.forEach(t),tPo=r(ARe," \u2014 "),eV=n(ARe,"A",{href:!0});var nTt=s(eV);aPo=r(nTt,"MegatronBertForCausalLM"),nTt.forEach(t),nPo=r(ARe," (Megatron-BERT model)"),ARe.forEach(t),sPo=i(W),T1=n(W,"LI",{});var LRe=s(T1);Hhe=n(LRe,"STRONG",{});var sTt=s(Hhe);lPo=r(sTt,"mvp"),sTt.forEach(t),iPo=r(LRe," \u2014 "),oV=n(LRe,"A",{href:!0});var lTt=s(oV);dPo=r(lTt,"MvpForCausalLM"),lTt.forEach(t),cPo=r(LRe," (MVP model)"),LRe.forEach(t),fPo=i(W),M1=n(W,"LI",{});var yRe=s(M1);Uhe=n(yRe,"STRONG",{});var iTt=s(Uhe);mPo=r(iTt,"openai-gpt"),iTt.forEach(t),gPo=r(yRe," \u2014 "),rV=n(yRe,"A",{href:!0});var dTt=s(rV);hPo=r(dTt,"OpenAIGPTLMHeadModel"),dTt.forEach(t),pPo=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),_Po=i(W),E1=n(W,"LI",{});var xRe=s(E1);Jhe=n(xRe,"STRONG",{});var cTt=s(Jhe);uPo=r(cTt,"opt"),cTt.forEach(t),bPo=r(xRe," \u2014 "),tV=n(xRe,"A",{href:!0});var fTt=s(tV);vPo=r(fTt,"OPTForCausalLM"),fTt.forEach(t),FPo=r(xRe," (OPT model)"),xRe.forEach(t),TPo=i(W),C1=n(W,"LI",{});var $Re=s(C1);Yhe=n($Re,"STRONG",{});var mTt=s(Yhe);MPo=r(mTt,"pegasus"),mTt.forEach(t),EPo=r($Re," \u2014 "),aV=n($Re,"A",{href:!0});var gTt=s(aV);CPo=r(gTt,"PegasusForCausalLM"),gTt.forEach(t),wPo=r($Re," (Pegasus model)"),$Re.forEach(t),APo=i(W),w1=n(W,"LI",{});var kRe=s(w1);Khe=n(kRe,"STRONG",{});var hTt=s(Khe);LPo=r(hTt,"plbart"),hTt.forEach(t),yPo=r(kRe," \u2014 "),nV=n(kRe,"A",{href:!0});var pTt=s(nV);xPo=r(pTt,"PLBartForCausalLM"),pTt.forEach(t),$Po=r(kRe," (PLBart model)"),kRe.forEach(t),kPo=i(W),A1=n(W,"LI",{});var SRe=s(A1);Zhe=n(SRe,"STRONG",{});var _Tt=s(Zhe);SPo=r(_Tt,"prophetnet"),_Tt.forEach(t),RPo=r(SRe," \u2014 "),sV=n(SRe,"A",{href:!0});var uTt=s(sV);PPo=r(uTt,"ProphetNetForCausalLM"),uTt.forEach(t),BPo=r(SRe," (ProphetNet model)"),SRe.forEach(t),IPo=i(W),L1=n(W,"LI",{});var RRe=s(L1);epe=n(RRe,"STRONG",{});var bTt=s(epe);NPo=r(bTt,"qdqbert"),bTt.forEach(t),qPo=r(RRe," \u2014 "),lV=n(RRe,"A",{href:!0});var vTt=s(lV);jPo=r(vTt,"QDQBertLMHeadModel"),vTt.forEach(t),DPo=r(RRe," (QDQBert model)"),RRe.forEach(t),GPo=i(W),y1=n(W,"LI",{});var PRe=s(y1);ope=n(PRe,"STRONG",{});var FTt=s(ope);OPo=r(FTt,"reformer"),FTt.forEach(t),VPo=r(PRe," \u2014 "),iV=n(PRe,"A",{href:!0});var TTt=s(iV);XPo=r(TTt,"ReformerModelWithLMHead"),TTt.forEach(t),zPo=r(PRe," (Reformer model)"),PRe.forEach(t),WPo=i(W),x1=n(W,"LI",{});var BRe=s(x1);rpe=n(BRe,"STRONG",{});var MTt=s(rpe);QPo=r(MTt,"rembert"),MTt.forEach(t),HPo=r(BRe," \u2014 "),dV=n(BRe,"A",{href:!0});var ETt=s(dV);UPo=r(ETt,"RemBertForCausalLM"),ETt.forEach(t),JPo=r(BRe," (RemBERT model)"),BRe.forEach(t),YPo=i(W),$1=n(W,"LI",{});var IRe=s($1);tpe=n(IRe,"STRONG",{});var CTt=s(tpe);KPo=r(CTt,"roberta"),CTt.forEach(t),ZPo=r(IRe," \u2014 "),cV=n(IRe,"A",{href:!0});var wTt=s(cV);eBo=r(wTt,"RobertaForCausalLM"),wTt.forEach(t),oBo=r(IRe," (RoBERTa model)"),IRe.forEach(t),rBo=i(W),k1=n(W,"LI",{});var NRe=s(k1);ape=n(NRe,"STRONG",{});var ATt=s(ape);tBo=r(ATt,"roformer"),ATt.forEach(t),aBo=r(NRe," \u2014 "),fV=n(NRe,"A",{href:!0});var LTt=s(fV);nBo=r(LTt,"RoFormerForCausalLM"),LTt.forEach(t),sBo=r(NRe," (RoFormer model)"),NRe.forEach(t),lBo=i(W),S1=n(W,"LI",{});var qRe=s(S1);npe=n(qRe,"STRONG",{});var yTt=s(npe);iBo=r(yTt,"speech_to_text_2"),yTt.forEach(t),dBo=r(qRe," \u2014 "),mV=n(qRe,"A",{href:!0});var xTt=s(mV);cBo=r(xTt,"Speech2Text2ForCausalLM"),xTt.forEach(t),fBo=r(qRe," (Speech2Text2 model)"),qRe.forEach(t),mBo=i(W),R1=n(W,"LI",{});var jRe=s(R1);spe=n(jRe,"STRONG",{});var $Tt=s(spe);gBo=r($Tt,"transfo-xl"),$Tt.forEach(t),hBo=r(jRe," \u2014 "),gV=n(jRe,"A",{href:!0});var kTt=s(gV);pBo=r(kTt,"TransfoXLLMHeadModel"),kTt.forEach(t),_Bo=r(jRe," (Transformer-XL model)"),jRe.forEach(t),uBo=i(W),P1=n(W,"LI",{});var DRe=s(P1);lpe=n(DRe,"STRONG",{});var STt=s(lpe);bBo=r(STt,"trocr"),STt.forEach(t),vBo=r(DRe," \u2014 "),hV=n(DRe,"A",{href:!0});var RTt=s(hV);FBo=r(RTt,"TrOCRForCausalLM"),RTt.forEach(t),TBo=r(DRe," (TrOCR model)"),DRe.forEach(t),MBo=i(W),B1=n(W,"LI",{});var GRe=s(B1);ipe=n(GRe,"STRONG",{});var PTt=s(ipe);EBo=r(PTt,"xglm"),PTt.forEach(t),CBo=r(GRe," \u2014 "),pV=n(GRe,"A",{href:!0});var BTt=s(pV);wBo=r(BTt,"XGLMForCausalLM"),BTt.forEach(t),ABo=r(GRe," (XGLM model)"),GRe.forEach(t),LBo=i(W),I1=n(W,"LI",{});var ORe=s(I1);dpe=n(ORe,"STRONG",{});var ITt=s(dpe);yBo=r(ITt,"xlm"),ITt.forEach(t),xBo=r(ORe," \u2014 "),_V=n(ORe,"A",{href:!0});var NTt=s(_V);$Bo=r(NTt,"XLMWithLMHeadModel"),NTt.forEach(t),kBo=r(ORe," (XLM model)"),ORe.forEach(t),SBo=i(W),N1=n(W,"LI",{});var VRe=s(N1);cpe=n(VRe,"STRONG",{});var qTt=s(cpe);RBo=r(qTt,"xlm-prophetnet"),qTt.forEach(t),PBo=r(VRe," \u2014 "),uV=n(VRe,"A",{href:!0});var jTt=s(uV);BBo=r(jTt,"XLMProphetNetForCausalLM"),jTt.forEach(t),IBo=r(VRe," (XLM-ProphetNet model)"),VRe.forEach(t),NBo=i(W),q1=n(W,"LI",{});var XRe=s(q1);fpe=n(XRe,"STRONG",{});var DTt=s(fpe);qBo=r(DTt,"xlm-roberta"),DTt.forEach(t),jBo=r(XRe," \u2014 "),bV=n(XRe,"A",{href:!0});var GTt=s(bV);DBo=r(GTt,"XLMRobertaForCausalLM"),GTt.forEach(t),GBo=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),OBo=i(W),j1=n(W,"LI",{});var zRe=s(j1);mpe=n(zRe,"STRONG",{});var OTt=s(mpe);VBo=r(OTt,"xlm-roberta-xl"),OTt.forEach(t),XBo=r(zRe," \u2014 "),vV=n(zRe,"A",{href:!0});var VTt=s(vV);zBo=r(VTt,"XLMRobertaXLForCausalLM"),VTt.forEach(t),WBo=r(zRe," (XLM-RoBERTa-XL model)"),zRe.forEach(t),QBo=i(W),D1=n(W,"LI",{});var WRe=s(D1);gpe=n(WRe,"STRONG",{});var XTt=s(gpe);HBo=r(XTt,"xlnet"),XTt.forEach(t),UBo=r(WRe," \u2014 "),FV=n(WRe,"A",{href:!0});var zTt=s(FV);JBo=r(zTt,"XLNetLMHeadModel"),zTt.forEach(t),YBo=r(WRe," (XLNet model)"),WRe.forEach(t),W.forEach(t),KBo=i(da),G1=n(da,"P",{});var QRe=s(G1);ZBo=r(QRe,"The model is set in evaluation mode by default using "),hpe=n(QRe,"CODE",{});var WTt=s(hpe);eIo=r(WTt,"model.eval()"),WTt.forEach(t),oIo=r(QRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(QRe,"CODE",{});var QTt=s(ppe);rIo=r(QTt,"model.train()"),QTt.forEach(t),QRe.forEach(t),tIo=i(da),T(O1.$$.fragment,da),da.forEach(t),ll.forEach(t),Hze=i(f),Zi=n(f,"H2",{class:!0});var eHe=s(Zi);V1=n(eHe,"A",{id:!0,class:!0,href:!0});var HTt=s(V1);_pe=n(HTt,"SPAN",{});var UTt=s(_pe);T(gy.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),aIo=i(eHe),upe=n(eHe,"SPAN",{});var JTt=s(upe);nIo=r(JTt,"AutoModelForMaskedLM"),JTt.forEach(t),eHe.forEach(t),Uze=i(f),Po=n(f,"DIV",{class:!0});var il=s(Po);T(hy.$$.fragment,il),sIo=i(il),ed=n(il,"P",{});var kte=s(ed);lIo=r(kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TV=n(kte,"A",{href:!0});var YTt=s(TV);iIo=r(YTt,"from_pretrained()"),YTt.forEach(t),dIo=r(kte," class method or the "),MV=n(kte,"A",{href:!0});var KTt=s(MV);cIo=r(KTt,"from_config()"),KTt.forEach(t),fIo=r(kte,` class
method.`),kte.forEach(t),mIo=i(il),py=n(il,"P",{});var oHe=s(py);gIo=r(oHe,"This class cannot be instantiated directly using "),bpe=n(oHe,"CODE",{});var ZTt=s(bpe);hIo=r(ZTt,"__init__()"),ZTt.forEach(t),pIo=r(oHe," (throws an error)."),oHe.forEach(t),_Io=i(il),ft=n(il,"DIV",{class:!0});var BA=s(ft);T(_y.$$.fragment,BA),uIo=i(BA),vpe=n(BA,"P",{});var e8t=s(vpe);bIo=r(e8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e8t.forEach(t),vIo=i(BA),od=n(BA,"P",{});var Ste=s(od);FIo=r(Ste,`Note:
Loading a model from its configuration file does `),Fpe=n(Ste,"STRONG",{});var o8t=s(Fpe);TIo=r(o8t,"not"),o8t.forEach(t),MIo=r(Ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(Ste,"A",{href:!0});var r8t=s(EV);EIo=r(r8t,"from_pretrained()"),r8t.forEach(t),CIo=r(Ste," to load the model weights."),Ste.forEach(t),wIo=i(BA),T(X1.$$.fragment,BA),BA.forEach(t),AIo=i(il),eo=n(il,"DIV",{class:!0});var ca=s(eo);T(uy.$$.fragment,ca),LIo=i(ca),Tpe=n(ca,"P",{});var t8t=s(Tpe);yIo=r(t8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),t8t.forEach(t),xIo=i(ca),ja=n(ca,"P",{});var IA=s(ja);$Io=r(IA,"The model class to instantiate is selected based on the "),Mpe=n(IA,"CODE",{});var a8t=s(Mpe);kIo=r(a8t,"model_type"),a8t.forEach(t),SIo=r(IA,` property of the config object (either
passed as an argument or loaded from `),Epe=n(IA,"CODE",{});var n8t=s(Epe);RIo=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),PIo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(IA,"CODE",{});var s8t=s(Cpe);BIo=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),IIo=r(IA,":"),IA.forEach(t),NIo=i(ca),Q=n(ca,"UL",{});var U=s(Q);z1=n(U,"LI",{});var HRe=s(z1);wpe=n(HRe,"STRONG",{});var l8t=s(wpe);qIo=r(l8t,"albert"),l8t.forEach(t),jIo=r(HRe," \u2014 "),CV=n(HRe,"A",{href:!0});var i8t=s(CV);DIo=r(i8t,"AlbertForMaskedLM"),i8t.forEach(t),GIo=r(HRe," (ALBERT model)"),HRe.forEach(t),OIo=i(U),W1=n(U,"LI",{});var URe=s(W1);Ape=n(URe,"STRONG",{});var d8t=s(Ape);VIo=r(d8t,"bart"),d8t.forEach(t),XIo=r(URe," \u2014 "),wV=n(URe,"A",{href:!0});var c8t=s(wV);zIo=r(c8t,"BartForConditionalGeneration"),c8t.forEach(t),WIo=r(URe," (BART model)"),URe.forEach(t),QIo=i(U),Q1=n(U,"LI",{});var JRe=s(Q1);Lpe=n(JRe,"STRONG",{});var f8t=s(Lpe);HIo=r(f8t,"bert"),f8t.forEach(t),UIo=r(JRe," \u2014 "),AV=n(JRe,"A",{href:!0});var m8t=s(AV);JIo=r(m8t,"BertForMaskedLM"),m8t.forEach(t),YIo=r(JRe," (BERT model)"),JRe.forEach(t),KIo=i(U),H1=n(U,"LI",{});var YRe=s(H1);ype=n(YRe,"STRONG",{});var g8t=s(ype);ZIo=r(g8t,"big_bird"),g8t.forEach(t),eNo=r(YRe," \u2014 "),LV=n(YRe,"A",{href:!0});var h8t=s(LV);oNo=r(h8t,"BigBirdForMaskedLM"),h8t.forEach(t),rNo=r(YRe," (BigBird model)"),YRe.forEach(t),tNo=i(U),U1=n(U,"LI",{});var KRe=s(U1);xpe=n(KRe,"STRONG",{});var p8t=s(xpe);aNo=r(p8t,"camembert"),p8t.forEach(t),nNo=r(KRe," \u2014 "),yV=n(KRe,"A",{href:!0});var _8t=s(yV);sNo=r(_8t,"CamembertForMaskedLM"),_8t.forEach(t),lNo=r(KRe," (CamemBERT model)"),KRe.forEach(t),iNo=i(U),J1=n(U,"LI",{});var ZRe=s(J1);$pe=n(ZRe,"STRONG",{});var u8t=s($pe);dNo=r(u8t,"convbert"),u8t.forEach(t),cNo=r(ZRe," \u2014 "),xV=n(ZRe,"A",{href:!0});var b8t=s(xV);fNo=r(b8t,"ConvBertForMaskedLM"),b8t.forEach(t),mNo=r(ZRe," (ConvBERT model)"),ZRe.forEach(t),gNo=i(U),Y1=n(U,"LI",{});var ePe=s(Y1);kpe=n(ePe,"STRONG",{});var v8t=s(kpe);hNo=r(v8t,"data2vec-text"),v8t.forEach(t),pNo=r(ePe," \u2014 "),$V=n(ePe,"A",{href:!0});var F8t=s($V);_No=r(F8t,"Data2VecTextForMaskedLM"),F8t.forEach(t),uNo=r(ePe," (Data2VecText model)"),ePe.forEach(t),bNo=i(U),K1=n(U,"LI",{});var oPe=s(K1);Spe=n(oPe,"STRONG",{});var T8t=s(Spe);vNo=r(T8t,"deberta"),T8t.forEach(t),FNo=r(oPe," \u2014 "),kV=n(oPe,"A",{href:!0});var M8t=s(kV);TNo=r(M8t,"DebertaForMaskedLM"),M8t.forEach(t),MNo=r(oPe," (DeBERTa model)"),oPe.forEach(t),ENo=i(U),Z1=n(U,"LI",{});var rPe=s(Z1);Rpe=n(rPe,"STRONG",{});var E8t=s(Rpe);CNo=r(E8t,"deberta-v2"),E8t.forEach(t),wNo=r(rPe," \u2014 "),SV=n(rPe,"A",{href:!0});var C8t=s(SV);ANo=r(C8t,"DebertaV2ForMaskedLM"),C8t.forEach(t),LNo=r(rPe," (DeBERTa-v2 model)"),rPe.forEach(t),yNo=i(U),e4=n(U,"LI",{});var tPe=s(e4);Ppe=n(tPe,"STRONG",{});var w8t=s(Ppe);xNo=r(w8t,"distilbert"),w8t.forEach(t),$No=r(tPe," \u2014 "),RV=n(tPe,"A",{href:!0});var A8t=s(RV);kNo=r(A8t,"DistilBertForMaskedLM"),A8t.forEach(t),SNo=r(tPe," (DistilBERT model)"),tPe.forEach(t),RNo=i(U),o4=n(U,"LI",{});var aPe=s(o4);Bpe=n(aPe,"STRONG",{});var L8t=s(Bpe);PNo=r(L8t,"electra"),L8t.forEach(t),BNo=r(aPe," \u2014 "),PV=n(aPe,"A",{href:!0});var y8t=s(PV);INo=r(y8t,"ElectraForMaskedLM"),y8t.forEach(t),NNo=r(aPe," (ELECTRA model)"),aPe.forEach(t),qNo=i(U),r4=n(U,"LI",{});var nPe=s(r4);Ipe=n(nPe,"STRONG",{});var x8t=s(Ipe);jNo=r(x8t,"flaubert"),x8t.forEach(t),DNo=r(nPe," \u2014 "),BV=n(nPe,"A",{href:!0});var $8t=s(BV);GNo=r($8t,"FlaubertWithLMHeadModel"),$8t.forEach(t),ONo=r(nPe," (FlauBERT model)"),nPe.forEach(t),VNo=i(U),t4=n(U,"LI",{});var sPe=s(t4);Npe=n(sPe,"STRONG",{});var k8t=s(Npe);XNo=r(k8t,"fnet"),k8t.forEach(t),zNo=r(sPe," \u2014 "),IV=n(sPe,"A",{href:!0});var S8t=s(IV);WNo=r(S8t,"FNetForMaskedLM"),S8t.forEach(t),QNo=r(sPe," (FNet model)"),sPe.forEach(t),HNo=i(U),a4=n(U,"LI",{});var lPe=s(a4);qpe=n(lPe,"STRONG",{});var R8t=s(qpe);UNo=r(R8t,"funnel"),R8t.forEach(t),JNo=r(lPe," \u2014 "),NV=n(lPe,"A",{href:!0});var P8t=s(NV);YNo=r(P8t,"FunnelForMaskedLM"),P8t.forEach(t),KNo=r(lPe," (Funnel Transformer model)"),lPe.forEach(t),ZNo=i(U),n4=n(U,"LI",{});var iPe=s(n4);jpe=n(iPe,"STRONG",{});var B8t=s(jpe);eqo=r(B8t,"ibert"),B8t.forEach(t),oqo=r(iPe," \u2014 "),qV=n(iPe,"A",{href:!0});var I8t=s(qV);rqo=r(I8t,"IBertForMaskedLM"),I8t.forEach(t),tqo=r(iPe," (I-BERT model)"),iPe.forEach(t),aqo=i(U),s4=n(U,"LI",{});var dPe=s(s4);Dpe=n(dPe,"STRONG",{});var N8t=s(Dpe);nqo=r(N8t,"layoutlm"),N8t.forEach(t),sqo=r(dPe," \u2014 "),jV=n(dPe,"A",{href:!0});var q8t=s(jV);lqo=r(q8t,"LayoutLMForMaskedLM"),q8t.forEach(t),iqo=r(dPe," (LayoutLM model)"),dPe.forEach(t),dqo=i(U),l4=n(U,"LI",{});var cPe=s(l4);Gpe=n(cPe,"STRONG",{});var j8t=s(Gpe);cqo=r(j8t,"longformer"),j8t.forEach(t),fqo=r(cPe," \u2014 "),DV=n(cPe,"A",{href:!0});var D8t=s(DV);mqo=r(D8t,"LongformerForMaskedLM"),D8t.forEach(t),gqo=r(cPe," (Longformer model)"),cPe.forEach(t),hqo=i(U),i4=n(U,"LI",{});var fPe=s(i4);Ope=n(fPe,"STRONG",{});var G8t=s(Ope);pqo=r(G8t,"luke"),G8t.forEach(t),_qo=r(fPe," \u2014 "),GV=n(fPe,"A",{href:!0});var O8t=s(GV);uqo=r(O8t,"LukeForMaskedLM"),O8t.forEach(t),bqo=r(fPe," (LUKE model)"),fPe.forEach(t),vqo=i(U),d4=n(U,"LI",{});var mPe=s(d4);Vpe=n(mPe,"STRONG",{});var V8t=s(Vpe);Fqo=r(V8t,"mbart"),V8t.forEach(t),Tqo=r(mPe," \u2014 "),OV=n(mPe,"A",{href:!0});var X8t=s(OV);Mqo=r(X8t,"MBartForConditionalGeneration"),X8t.forEach(t),Eqo=r(mPe," (mBART model)"),mPe.forEach(t),Cqo=i(U),c4=n(U,"LI",{});var gPe=s(c4);Xpe=n(gPe,"STRONG",{});var z8t=s(Xpe);wqo=r(z8t,"megatron-bert"),z8t.forEach(t),Aqo=r(gPe," \u2014 "),VV=n(gPe,"A",{href:!0});var W8t=s(VV);Lqo=r(W8t,"MegatronBertForMaskedLM"),W8t.forEach(t),yqo=r(gPe," (Megatron-BERT model)"),gPe.forEach(t),xqo=i(U),f4=n(U,"LI",{});var hPe=s(f4);zpe=n(hPe,"STRONG",{});var Q8t=s(zpe);$qo=r(Q8t,"mobilebert"),Q8t.forEach(t),kqo=r(hPe," \u2014 "),XV=n(hPe,"A",{href:!0});var H8t=s(XV);Sqo=r(H8t,"MobileBertForMaskedLM"),H8t.forEach(t),Rqo=r(hPe," (MobileBERT model)"),hPe.forEach(t),Pqo=i(U),m4=n(U,"LI",{});var pPe=s(m4);Wpe=n(pPe,"STRONG",{});var U8t=s(Wpe);Bqo=r(U8t,"mpnet"),U8t.forEach(t),Iqo=r(pPe," \u2014 "),zV=n(pPe,"A",{href:!0});var J8t=s(zV);Nqo=r(J8t,"MPNetForMaskedLM"),J8t.forEach(t),qqo=r(pPe," (MPNet model)"),pPe.forEach(t),jqo=i(U),g4=n(U,"LI",{});var _Pe=s(g4);Qpe=n(_Pe,"STRONG",{});var Y8t=s(Qpe);Dqo=r(Y8t,"mvp"),Y8t.forEach(t),Gqo=r(_Pe," \u2014 "),WV=n(_Pe,"A",{href:!0});var K8t=s(WV);Oqo=r(K8t,"MvpForConditionalGeneration"),K8t.forEach(t),Vqo=r(_Pe," (MVP model)"),_Pe.forEach(t),Xqo=i(U),h4=n(U,"LI",{});var uPe=s(h4);Hpe=n(uPe,"STRONG",{});var Z8t=s(Hpe);zqo=r(Z8t,"nezha"),Z8t.forEach(t),Wqo=r(uPe," \u2014 "),QV=n(uPe,"A",{href:!0});var eMt=s(QV);Qqo=r(eMt,"NezhaForMaskedLM"),eMt.forEach(t),Hqo=r(uPe," (Nezha model)"),uPe.forEach(t),Uqo=i(U),p4=n(U,"LI",{});var bPe=s(p4);Upe=n(bPe,"STRONG",{});var oMt=s(Upe);Jqo=r(oMt,"nystromformer"),oMt.forEach(t),Yqo=r(bPe," \u2014 "),HV=n(bPe,"A",{href:!0});var rMt=s(HV);Kqo=r(rMt,"NystromformerForMaskedLM"),rMt.forEach(t),Zqo=r(bPe," (Nystr\xF6mformer model)"),bPe.forEach(t),ejo=i(U),_4=n(U,"LI",{});var vPe=s(_4);Jpe=n(vPe,"STRONG",{});var tMt=s(Jpe);ojo=r(tMt,"perceiver"),tMt.forEach(t),rjo=r(vPe," \u2014 "),UV=n(vPe,"A",{href:!0});var aMt=s(UV);tjo=r(aMt,"PerceiverForMaskedLM"),aMt.forEach(t),ajo=r(vPe," (Perceiver model)"),vPe.forEach(t),njo=i(U),u4=n(U,"LI",{});var FPe=s(u4);Ype=n(FPe,"STRONG",{});var nMt=s(Ype);sjo=r(nMt,"qdqbert"),nMt.forEach(t),ljo=r(FPe," \u2014 "),JV=n(FPe,"A",{href:!0});var sMt=s(JV);ijo=r(sMt,"QDQBertForMaskedLM"),sMt.forEach(t),djo=r(FPe," (QDQBert model)"),FPe.forEach(t),cjo=i(U),b4=n(U,"LI",{});var TPe=s(b4);Kpe=n(TPe,"STRONG",{});var lMt=s(Kpe);fjo=r(lMt,"reformer"),lMt.forEach(t),mjo=r(TPe," \u2014 "),YV=n(TPe,"A",{href:!0});var iMt=s(YV);gjo=r(iMt,"ReformerForMaskedLM"),iMt.forEach(t),hjo=r(TPe," (Reformer model)"),TPe.forEach(t),pjo=i(U),v4=n(U,"LI",{});var MPe=s(v4);Zpe=n(MPe,"STRONG",{});var dMt=s(Zpe);_jo=r(dMt,"rembert"),dMt.forEach(t),ujo=r(MPe," \u2014 "),KV=n(MPe,"A",{href:!0});var cMt=s(KV);bjo=r(cMt,"RemBertForMaskedLM"),cMt.forEach(t),vjo=r(MPe," (RemBERT model)"),MPe.forEach(t),Fjo=i(U),F4=n(U,"LI",{});var EPe=s(F4);e_e=n(EPe,"STRONG",{});var fMt=s(e_e);Tjo=r(fMt,"roberta"),fMt.forEach(t),Mjo=r(EPe," \u2014 "),ZV=n(EPe,"A",{href:!0});var mMt=s(ZV);Ejo=r(mMt,"RobertaForMaskedLM"),mMt.forEach(t),Cjo=r(EPe," (RoBERTa model)"),EPe.forEach(t),wjo=i(U),T4=n(U,"LI",{});var CPe=s(T4);o_e=n(CPe,"STRONG",{});var gMt=s(o_e);Ajo=r(gMt,"roformer"),gMt.forEach(t),Ljo=r(CPe," \u2014 "),eX=n(CPe,"A",{href:!0});var hMt=s(eX);yjo=r(hMt,"RoFormerForMaskedLM"),hMt.forEach(t),xjo=r(CPe," (RoFormer model)"),CPe.forEach(t),$jo=i(U),M4=n(U,"LI",{});var wPe=s(M4);r_e=n(wPe,"STRONG",{});var pMt=s(r_e);kjo=r(pMt,"squeezebert"),pMt.forEach(t),Sjo=r(wPe," \u2014 "),oX=n(wPe,"A",{href:!0});var _Mt=s(oX);Rjo=r(_Mt,"SqueezeBertForMaskedLM"),_Mt.forEach(t),Pjo=r(wPe," (SqueezeBERT model)"),wPe.forEach(t),Bjo=i(U),E4=n(U,"LI",{});var APe=s(E4);t_e=n(APe,"STRONG",{});var uMt=s(t_e);Ijo=r(uMt,"tapas"),uMt.forEach(t),Njo=r(APe," \u2014 "),rX=n(APe,"A",{href:!0});var bMt=s(rX);qjo=r(bMt,"TapasForMaskedLM"),bMt.forEach(t),jjo=r(APe," (TAPAS model)"),APe.forEach(t),Djo=i(U),C4=n(U,"LI",{});var LPe=s(C4);a_e=n(LPe,"STRONG",{});var vMt=s(a_e);Gjo=r(vMt,"wav2vec2"),vMt.forEach(t),Ojo=r(LPe," \u2014 "),n_e=n(LPe,"CODE",{});var FMt=s(n_e);Vjo=r(FMt,"Wav2Vec2ForMaskedLM"),FMt.forEach(t),Xjo=r(LPe," (Wav2Vec2 model)"),LPe.forEach(t),zjo=i(U),w4=n(U,"LI",{});var yPe=s(w4);s_e=n(yPe,"STRONG",{});var TMt=s(s_e);Wjo=r(TMt,"xlm"),TMt.forEach(t),Qjo=r(yPe," \u2014 "),tX=n(yPe,"A",{href:!0});var MMt=s(tX);Hjo=r(MMt,"XLMWithLMHeadModel"),MMt.forEach(t),Ujo=r(yPe," (XLM model)"),yPe.forEach(t),Jjo=i(U),A4=n(U,"LI",{});var xPe=s(A4);l_e=n(xPe,"STRONG",{});var EMt=s(l_e);Yjo=r(EMt,"xlm-roberta"),EMt.forEach(t),Kjo=r(xPe," \u2014 "),aX=n(xPe,"A",{href:!0});var CMt=s(aX);Zjo=r(CMt,"XLMRobertaForMaskedLM"),CMt.forEach(t),eDo=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),oDo=i(U),L4=n(U,"LI",{});var $Pe=s(L4);i_e=n($Pe,"STRONG",{});var wMt=s(i_e);rDo=r(wMt,"xlm-roberta-xl"),wMt.forEach(t),tDo=r($Pe," \u2014 "),nX=n($Pe,"A",{href:!0});var AMt=s(nX);aDo=r(AMt,"XLMRobertaXLForMaskedLM"),AMt.forEach(t),nDo=r($Pe," (XLM-RoBERTa-XL model)"),$Pe.forEach(t),sDo=i(U),y4=n(U,"LI",{});var kPe=s(y4);d_e=n(kPe,"STRONG",{});var LMt=s(d_e);lDo=r(LMt,"yoso"),LMt.forEach(t),iDo=r(kPe," \u2014 "),sX=n(kPe,"A",{href:!0});var yMt=s(sX);dDo=r(yMt,"YosoForMaskedLM"),yMt.forEach(t),cDo=r(kPe," (YOSO model)"),kPe.forEach(t),U.forEach(t),fDo=i(ca),x4=n(ca,"P",{});var SPe=s(x4);mDo=r(SPe,"The model is set in evaluation mode by default using "),c_e=n(SPe,"CODE",{});var xMt=s(c_e);gDo=r(xMt,"model.eval()"),xMt.forEach(t),hDo=r(SPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(SPe,"CODE",{});var $Mt=s(f_e);pDo=r($Mt,"model.train()"),$Mt.forEach(t),SPe.forEach(t),_Do=i(ca),T($4.$$.fragment,ca),ca.forEach(t),il.forEach(t),Jze=i(f),rd=n(f,"H2",{class:!0});var rHe=s(rd);k4=n(rHe,"A",{id:!0,class:!0,href:!0});var kMt=s(k4);m_e=n(kMt,"SPAN",{});var SMt=s(m_e);T(by.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),uDo=i(rHe),g_e=n(rHe,"SPAN",{});var RMt=s(g_e);bDo=r(RMt,"AutoModelForSeq2SeqLM"),RMt.forEach(t),rHe.forEach(t),Yze=i(f),Bo=n(f,"DIV",{class:!0});var dl=s(Bo);T(vy.$$.fragment,dl),vDo=i(dl),td=n(dl,"P",{});var Rte=s(td);FDo=r(Rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=n(Rte,"A",{href:!0});var PMt=s(lX);TDo=r(PMt,"from_pretrained()"),PMt.forEach(t),MDo=r(Rte," class method or the "),iX=n(Rte,"A",{href:!0});var BMt=s(iX);EDo=r(BMt,"from_config()"),BMt.forEach(t),CDo=r(Rte,` class
method.`),Rte.forEach(t),wDo=i(dl),Fy=n(dl,"P",{});var tHe=s(Fy);ADo=r(tHe,"This class cannot be instantiated directly using "),h_e=n(tHe,"CODE",{});var IMt=s(h_e);LDo=r(IMt,"__init__()"),IMt.forEach(t),yDo=r(tHe," (throws an error)."),tHe.forEach(t),xDo=i(dl),mt=n(dl,"DIV",{class:!0});var NA=s(mt);T(Ty.$$.fragment,NA),$Do=i(NA),p_e=n(NA,"P",{});var NMt=s(p_e);kDo=r(NMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NMt.forEach(t),SDo=i(NA),ad=n(NA,"P",{});var Pte=s(ad);RDo=r(Pte,`Note:
Loading a model from its configuration file does `),__e=n(Pte,"STRONG",{});var qMt=s(__e);PDo=r(qMt,"not"),qMt.forEach(t),BDo=r(Pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(Pte,"A",{href:!0});var jMt=s(dX);IDo=r(jMt,"from_pretrained()"),jMt.forEach(t),NDo=r(Pte," to load the model weights."),Pte.forEach(t),qDo=i(NA),T(S4.$$.fragment,NA),NA.forEach(t),jDo=i(dl),oo=n(dl,"DIV",{class:!0});var fa=s(oo);T(My.$$.fragment,fa),DDo=i(fa),u_e=n(fa,"P",{});var DMt=s(u_e);GDo=r(DMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DMt.forEach(t),ODo=i(fa),Da=n(fa,"P",{});var qA=s(Da);VDo=r(qA,"The model class to instantiate is selected based on the "),b_e=n(qA,"CODE",{});var GMt=s(b_e);XDo=r(GMt,"model_type"),GMt.forEach(t),zDo=r(qA,` property of the config object (either
passed as an argument or loaded from `),v_e=n(qA,"CODE",{});var OMt=s(v_e);WDo=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),QDo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(qA,"CODE",{});var VMt=s(F_e);HDo=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),UDo=r(qA,":"),qA.forEach(t),JDo=i(fa),me=n(fa,"UL",{});var ue=s(me);R4=n(ue,"LI",{});var RPe=s(R4);T_e=n(RPe,"STRONG",{});var XMt=s(T_e);YDo=r(XMt,"bart"),XMt.forEach(t),KDo=r(RPe," \u2014 "),cX=n(RPe,"A",{href:!0});var zMt=s(cX);ZDo=r(zMt,"BartForConditionalGeneration"),zMt.forEach(t),eGo=r(RPe," (BART model)"),RPe.forEach(t),oGo=i(ue),P4=n(ue,"LI",{});var PPe=s(P4);M_e=n(PPe,"STRONG",{});var WMt=s(M_e);rGo=r(WMt,"bigbird_pegasus"),WMt.forEach(t),tGo=r(PPe," \u2014 "),fX=n(PPe,"A",{href:!0});var QMt=s(fX);aGo=r(QMt,"BigBirdPegasusForConditionalGeneration"),QMt.forEach(t),nGo=r(PPe," (BigBird-Pegasus model)"),PPe.forEach(t),sGo=i(ue),B4=n(ue,"LI",{});var BPe=s(B4);E_e=n(BPe,"STRONG",{});var HMt=s(E_e);lGo=r(HMt,"blenderbot"),HMt.forEach(t),iGo=r(BPe," \u2014 "),mX=n(BPe,"A",{href:!0});var UMt=s(mX);dGo=r(UMt,"BlenderbotForConditionalGeneration"),UMt.forEach(t),cGo=r(BPe," (Blenderbot model)"),BPe.forEach(t),fGo=i(ue),I4=n(ue,"LI",{});var IPe=s(I4);C_e=n(IPe,"STRONG",{});var JMt=s(C_e);mGo=r(JMt,"blenderbot-small"),JMt.forEach(t),gGo=r(IPe," \u2014 "),gX=n(IPe,"A",{href:!0});var YMt=s(gX);hGo=r(YMt,"BlenderbotSmallForConditionalGeneration"),YMt.forEach(t),pGo=r(IPe," (BlenderbotSmall model)"),IPe.forEach(t),_Go=i(ue),N4=n(ue,"LI",{});var NPe=s(N4);w_e=n(NPe,"STRONG",{});var KMt=s(w_e);uGo=r(KMt,"encoder-decoder"),KMt.forEach(t),bGo=r(NPe," \u2014 "),hX=n(NPe,"A",{href:!0});var ZMt=s(hX);vGo=r(ZMt,"EncoderDecoderModel"),ZMt.forEach(t),FGo=r(NPe," (Encoder decoder model)"),NPe.forEach(t),TGo=i(ue),q4=n(ue,"LI",{});var qPe=s(q4);A_e=n(qPe,"STRONG",{});var eEt=s(A_e);MGo=r(eEt,"fsmt"),eEt.forEach(t),EGo=r(qPe," \u2014 "),pX=n(qPe,"A",{href:!0});var oEt=s(pX);CGo=r(oEt,"FSMTForConditionalGeneration"),oEt.forEach(t),wGo=r(qPe," (FairSeq Machine-Translation model)"),qPe.forEach(t),AGo=i(ue),j4=n(ue,"LI",{});var jPe=s(j4);L_e=n(jPe,"STRONG",{});var rEt=s(L_e);LGo=r(rEt,"led"),rEt.forEach(t),yGo=r(jPe," \u2014 "),_X=n(jPe,"A",{href:!0});var tEt=s(_X);xGo=r(tEt,"LEDForConditionalGeneration"),tEt.forEach(t),$Go=r(jPe," (LED model)"),jPe.forEach(t),kGo=i(ue),D4=n(ue,"LI",{});var DPe=s(D4);y_e=n(DPe,"STRONG",{});var aEt=s(y_e);SGo=r(aEt,"longt5"),aEt.forEach(t),RGo=r(DPe," \u2014 "),uX=n(DPe,"A",{href:!0});var nEt=s(uX);PGo=r(nEt,"LongT5ForConditionalGeneration"),nEt.forEach(t),BGo=r(DPe," (LongT5 model)"),DPe.forEach(t),IGo=i(ue),G4=n(ue,"LI",{});var GPe=s(G4);x_e=n(GPe,"STRONG",{});var sEt=s(x_e);NGo=r(sEt,"m2m_100"),sEt.forEach(t),qGo=r(GPe," \u2014 "),bX=n(GPe,"A",{href:!0});var lEt=s(bX);jGo=r(lEt,"M2M100ForConditionalGeneration"),lEt.forEach(t),DGo=r(GPe," (M2M100 model)"),GPe.forEach(t),GGo=i(ue),O4=n(ue,"LI",{});var OPe=s(O4);$_e=n(OPe,"STRONG",{});var iEt=s($_e);OGo=r(iEt,"marian"),iEt.forEach(t),VGo=r(OPe," \u2014 "),vX=n(OPe,"A",{href:!0});var dEt=s(vX);XGo=r(dEt,"MarianMTModel"),dEt.forEach(t),zGo=r(OPe," (Marian model)"),OPe.forEach(t),WGo=i(ue),V4=n(ue,"LI",{});var VPe=s(V4);k_e=n(VPe,"STRONG",{});var cEt=s(k_e);QGo=r(cEt,"mbart"),cEt.forEach(t),HGo=r(VPe," \u2014 "),FX=n(VPe,"A",{href:!0});var fEt=s(FX);UGo=r(fEt,"MBartForConditionalGeneration"),fEt.forEach(t),JGo=r(VPe," (mBART model)"),VPe.forEach(t),YGo=i(ue),X4=n(ue,"LI",{});var XPe=s(X4);S_e=n(XPe,"STRONG",{});var mEt=s(S_e);KGo=r(mEt,"mt5"),mEt.forEach(t),ZGo=r(XPe," \u2014 "),TX=n(XPe,"A",{href:!0});var gEt=s(TX);eOo=r(gEt,"MT5ForConditionalGeneration"),gEt.forEach(t),oOo=r(XPe," (MT5 model)"),XPe.forEach(t),rOo=i(ue),z4=n(ue,"LI",{});var zPe=s(z4);R_e=n(zPe,"STRONG",{});var hEt=s(R_e);tOo=r(hEt,"mvp"),hEt.forEach(t),aOo=r(zPe," \u2014 "),MX=n(zPe,"A",{href:!0});var pEt=s(MX);nOo=r(pEt,"MvpForConditionalGeneration"),pEt.forEach(t),sOo=r(zPe," (MVP model)"),zPe.forEach(t),lOo=i(ue),W4=n(ue,"LI",{});var WPe=s(W4);P_e=n(WPe,"STRONG",{});var _Et=s(P_e);iOo=r(_Et,"nllb"),_Et.forEach(t),dOo=r(WPe," \u2014 "),EX=n(WPe,"A",{href:!0});var uEt=s(EX);cOo=r(uEt,"M2M100ForConditionalGeneration"),uEt.forEach(t),fOo=r(WPe," (NLLB model)"),WPe.forEach(t),mOo=i(ue),Q4=n(ue,"LI",{});var QPe=s(Q4);B_e=n(QPe,"STRONG",{});var bEt=s(B_e);gOo=r(bEt,"pegasus"),bEt.forEach(t),hOo=r(QPe," \u2014 "),CX=n(QPe,"A",{href:!0});var vEt=s(CX);pOo=r(vEt,"PegasusForConditionalGeneration"),vEt.forEach(t),_Oo=r(QPe," (Pegasus model)"),QPe.forEach(t),uOo=i(ue),H4=n(ue,"LI",{});var HPe=s(H4);I_e=n(HPe,"STRONG",{});var FEt=s(I_e);bOo=r(FEt,"plbart"),FEt.forEach(t),vOo=r(HPe," \u2014 "),wX=n(HPe,"A",{href:!0});var TEt=s(wX);FOo=r(TEt,"PLBartForConditionalGeneration"),TEt.forEach(t),TOo=r(HPe," (PLBart model)"),HPe.forEach(t),MOo=i(ue),U4=n(ue,"LI",{});var UPe=s(U4);N_e=n(UPe,"STRONG",{});var MEt=s(N_e);EOo=r(MEt,"prophetnet"),MEt.forEach(t),COo=r(UPe," \u2014 "),AX=n(UPe,"A",{href:!0});var EEt=s(AX);wOo=r(EEt,"ProphetNetForConditionalGeneration"),EEt.forEach(t),AOo=r(UPe," (ProphetNet model)"),UPe.forEach(t),LOo=i(ue),J4=n(ue,"LI",{});var JPe=s(J4);q_e=n(JPe,"STRONG",{});var CEt=s(q_e);yOo=r(CEt,"t5"),CEt.forEach(t),xOo=r(JPe," \u2014 "),LX=n(JPe,"A",{href:!0});var wEt=s(LX);$Oo=r(wEt,"T5ForConditionalGeneration"),wEt.forEach(t),kOo=r(JPe," (T5 model)"),JPe.forEach(t),SOo=i(ue),Y4=n(ue,"LI",{});var YPe=s(Y4);j_e=n(YPe,"STRONG",{});var AEt=s(j_e);ROo=r(AEt,"xlm-prophetnet"),AEt.forEach(t),POo=r(YPe," \u2014 "),yX=n(YPe,"A",{href:!0});var LEt=s(yX);BOo=r(LEt,"XLMProphetNetForConditionalGeneration"),LEt.forEach(t),IOo=r(YPe," (XLM-ProphetNet model)"),YPe.forEach(t),ue.forEach(t),NOo=i(fa),K4=n(fa,"P",{});var KPe=s(K4);qOo=r(KPe,"The model is set in evaluation mode by default using "),D_e=n(KPe,"CODE",{});var yEt=s(D_e);jOo=r(yEt,"model.eval()"),yEt.forEach(t),DOo=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(KPe,"CODE",{});var xEt=s(G_e);GOo=r(xEt,"model.train()"),xEt.forEach(t),KPe.forEach(t),OOo=i(fa),T(Z4.$$.fragment,fa),fa.forEach(t),dl.forEach(t),Kze=i(f),nd=n(f,"H2",{class:!0});var aHe=s(nd);eb=n(aHe,"A",{id:!0,class:!0,href:!0});var $Et=s(eb);O_e=n($Et,"SPAN",{});var kEt=s(O_e);T(Ey.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),VOo=i(aHe),V_e=n(aHe,"SPAN",{});var SEt=s(V_e);XOo=r(SEt,"AutoModelForSequenceClassification"),SEt.forEach(t),aHe.forEach(t),Zze=i(f),Io=n(f,"DIV",{class:!0});var cl=s(Io);T(Cy.$$.fragment,cl),zOo=i(cl),sd=n(cl,"P",{});var Bte=s(sd);WOo=r(Bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xX=n(Bte,"A",{href:!0});var REt=s(xX);QOo=r(REt,"from_pretrained()"),REt.forEach(t),HOo=r(Bte," class method or the "),$X=n(Bte,"A",{href:!0});var PEt=s($X);UOo=r(PEt,"from_config()"),PEt.forEach(t),JOo=r(Bte,` class
method.`),Bte.forEach(t),YOo=i(cl),wy=n(cl,"P",{});var nHe=s(wy);KOo=r(nHe,"This class cannot be instantiated directly using "),X_e=n(nHe,"CODE",{});var BEt=s(X_e);ZOo=r(BEt,"__init__()"),BEt.forEach(t),eVo=r(nHe," (throws an error)."),nHe.forEach(t),oVo=i(cl),gt=n(cl,"DIV",{class:!0});var jA=s(gt);T(Ay.$$.fragment,jA),rVo=i(jA),z_e=n(jA,"P",{});var IEt=s(z_e);tVo=r(IEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),IEt.forEach(t),aVo=i(jA),ld=n(jA,"P",{});var Ite=s(ld);nVo=r(Ite,`Note:
Loading a model from its configuration file does `),W_e=n(Ite,"STRONG",{});var NEt=s(W_e);sVo=r(NEt,"not"),NEt.forEach(t),lVo=r(Ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(Ite,"A",{href:!0});var qEt=s(kX);iVo=r(qEt,"from_pretrained()"),qEt.forEach(t),dVo=r(Ite," to load the model weights."),Ite.forEach(t),cVo=i(jA),T(ob.$$.fragment,jA),jA.forEach(t),fVo=i(cl),ro=n(cl,"DIV",{class:!0});var ma=s(ro);T(Ly.$$.fragment,ma),mVo=i(ma),Q_e=n(ma,"P",{});var jEt=s(Q_e);gVo=r(jEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jEt.forEach(t),hVo=i(ma),Ga=n(ma,"P",{});var DA=s(Ga);pVo=r(DA,"The model class to instantiate is selected based on the "),H_e=n(DA,"CODE",{});var DEt=s(H_e);_Vo=r(DEt,"model_type"),DEt.forEach(t),uVo=r(DA,` property of the config object (either
passed as an argument or loaded from `),U_e=n(DA,"CODE",{});var GEt=s(U_e);bVo=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),vVo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(DA,"CODE",{});var OEt=s(J_e);FVo=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),TVo=r(DA,":"),DA.forEach(t),MVo=i(ma),P=n(ma,"UL",{});var N=s(P);rb=n(N,"LI",{});var ZPe=s(rb);Y_e=n(ZPe,"STRONG",{});var VEt=s(Y_e);EVo=r(VEt,"albert"),VEt.forEach(t),CVo=r(ZPe," \u2014 "),SX=n(ZPe,"A",{href:!0});var XEt=s(SX);wVo=r(XEt,"AlbertForSequenceClassification"),XEt.forEach(t),AVo=r(ZPe," (ALBERT model)"),ZPe.forEach(t),LVo=i(N),tb=n(N,"LI",{});var eBe=s(tb);K_e=n(eBe,"STRONG",{});var zEt=s(K_e);yVo=r(zEt,"bart"),zEt.forEach(t),xVo=r(eBe," \u2014 "),RX=n(eBe,"A",{href:!0});var WEt=s(RX);$Vo=r(WEt,"BartForSequenceClassification"),WEt.forEach(t),kVo=r(eBe," (BART model)"),eBe.forEach(t),SVo=i(N),ab=n(N,"LI",{});var oBe=s(ab);Z_e=n(oBe,"STRONG",{});var QEt=s(Z_e);RVo=r(QEt,"bert"),QEt.forEach(t),PVo=r(oBe," \u2014 "),PX=n(oBe,"A",{href:!0});var HEt=s(PX);BVo=r(HEt,"BertForSequenceClassification"),HEt.forEach(t),IVo=r(oBe," (BERT model)"),oBe.forEach(t),NVo=i(N),nb=n(N,"LI",{});var rBe=s(nb);eue=n(rBe,"STRONG",{});var UEt=s(eue);qVo=r(UEt,"big_bird"),UEt.forEach(t),jVo=r(rBe," \u2014 "),BX=n(rBe,"A",{href:!0});var JEt=s(BX);DVo=r(JEt,"BigBirdForSequenceClassification"),JEt.forEach(t),GVo=r(rBe," (BigBird model)"),rBe.forEach(t),OVo=i(N),sb=n(N,"LI",{});var tBe=s(sb);oue=n(tBe,"STRONG",{});var YEt=s(oue);VVo=r(YEt,"bigbird_pegasus"),YEt.forEach(t),XVo=r(tBe," \u2014 "),IX=n(tBe,"A",{href:!0});var KEt=s(IX);zVo=r(KEt,"BigBirdPegasusForSequenceClassification"),KEt.forEach(t),WVo=r(tBe," (BigBird-Pegasus model)"),tBe.forEach(t),QVo=i(N),lb=n(N,"LI",{});var aBe=s(lb);rue=n(aBe,"STRONG",{});var ZEt=s(rue);HVo=r(ZEt,"bloom"),ZEt.forEach(t),UVo=r(aBe," \u2014 "),NX=n(aBe,"A",{href:!0});var eCt=s(NX);JVo=r(eCt,"BloomForSequenceClassification"),eCt.forEach(t),YVo=r(aBe," (BLOOM model)"),aBe.forEach(t),KVo=i(N),ib=n(N,"LI",{});var nBe=s(ib);tue=n(nBe,"STRONG",{});var oCt=s(tue);ZVo=r(oCt,"camembert"),oCt.forEach(t),eXo=r(nBe," \u2014 "),qX=n(nBe,"A",{href:!0});var rCt=s(qX);oXo=r(rCt,"CamembertForSequenceClassification"),rCt.forEach(t),rXo=r(nBe," (CamemBERT model)"),nBe.forEach(t),tXo=i(N),db=n(N,"LI",{});var sBe=s(db);aue=n(sBe,"STRONG",{});var tCt=s(aue);aXo=r(tCt,"canine"),tCt.forEach(t),nXo=r(sBe," \u2014 "),jX=n(sBe,"A",{href:!0});var aCt=s(jX);sXo=r(aCt,"CanineForSequenceClassification"),aCt.forEach(t),lXo=r(sBe," (CANINE model)"),sBe.forEach(t),iXo=i(N),cb=n(N,"LI",{});var lBe=s(cb);nue=n(lBe,"STRONG",{});var nCt=s(nue);dXo=r(nCt,"convbert"),nCt.forEach(t),cXo=r(lBe," \u2014 "),DX=n(lBe,"A",{href:!0});var sCt=s(DX);fXo=r(sCt,"ConvBertForSequenceClassification"),sCt.forEach(t),mXo=r(lBe," (ConvBERT model)"),lBe.forEach(t),gXo=i(N),fb=n(N,"LI",{});var iBe=s(fb);sue=n(iBe,"STRONG",{});var lCt=s(sue);hXo=r(lCt,"ctrl"),lCt.forEach(t),pXo=r(iBe," \u2014 "),GX=n(iBe,"A",{href:!0});var iCt=s(GX);_Xo=r(iCt,"CTRLForSequenceClassification"),iCt.forEach(t),uXo=r(iBe," (CTRL model)"),iBe.forEach(t),bXo=i(N),mb=n(N,"LI",{});var dBe=s(mb);lue=n(dBe,"STRONG",{});var dCt=s(lue);vXo=r(dCt,"data2vec-text"),dCt.forEach(t),FXo=r(dBe," \u2014 "),OX=n(dBe,"A",{href:!0});var cCt=s(OX);TXo=r(cCt,"Data2VecTextForSequenceClassification"),cCt.forEach(t),MXo=r(dBe," (Data2VecText model)"),dBe.forEach(t),EXo=i(N),gb=n(N,"LI",{});var cBe=s(gb);iue=n(cBe,"STRONG",{});var fCt=s(iue);CXo=r(fCt,"deberta"),fCt.forEach(t),wXo=r(cBe," \u2014 "),VX=n(cBe,"A",{href:!0});var mCt=s(VX);AXo=r(mCt,"DebertaForSequenceClassification"),mCt.forEach(t),LXo=r(cBe," (DeBERTa model)"),cBe.forEach(t),yXo=i(N),hb=n(N,"LI",{});var fBe=s(hb);due=n(fBe,"STRONG",{});var gCt=s(due);xXo=r(gCt,"deberta-v2"),gCt.forEach(t),$Xo=r(fBe," \u2014 "),XX=n(fBe,"A",{href:!0});var hCt=s(XX);kXo=r(hCt,"DebertaV2ForSequenceClassification"),hCt.forEach(t),SXo=r(fBe," (DeBERTa-v2 model)"),fBe.forEach(t),RXo=i(N),pb=n(N,"LI",{});var mBe=s(pb);cue=n(mBe,"STRONG",{});var pCt=s(cue);PXo=r(pCt,"distilbert"),pCt.forEach(t),BXo=r(mBe," \u2014 "),zX=n(mBe,"A",{href:!0});var _Ct=s(zX);IXo=r(_Ct,"DistilBertForSequenceClassification"),_Ct.forEach(t),NXo=r(mBe," (DistilBERT model)"),mBe.forEach(t),qXo=i(N),_b=n(N,"LI",{});var gBe=s(_b);fue=n(gBe,"STRONG",{});var uCt=s(fue);jXo=r(uCt,"electra"),uCt.forEach(t),DXo=r(gBe," \u2014 "),WX=n(gBe,"A",{href:!0});var bCt=s(WX);GXo=r(bCt,"ElectraForSequenceClassification"),bCt.forEach(t),OXo=r(gBe," (ELECTRA model)"),gBe.forEach(t),VXo=i(N),ub=n(N,"LI",{});var hBe=s(ub);mue=n(hBe,"STRONG",{});var vCt=s(mue);XXo=r(vCt,"flaubert"),vCt.forEach(t),zXo=r(hBe," \u2014 "),QX=n(hBe,"A",{href:!0});var FCt=s(QX);WXo=r(FCt,"FlaubertForSequenceClassification"),FCt.forEach(t),QXo=r(hBe," (FlauBERT model)"),hBe.forEach(t),HXo=i(N),bb=n(N,"LI",{});var pBe=s(bb);gue=n(pBe,"STRONG",{});var TCt=s(gue);UXo=r(TCt,"fnet"),TCt.forEach(t),JXo=r(pBe," \u2014 "),HX=n(pBe,"A",{href:!0});var MCt=s(HX);YXo=r(MCt,"FNetForSequenceClassification"),MCt.forEach(t),KXo=r(pBe," (FNet model)"),pBe.forEach(t),ZXo=i(N),vb=n(N,"LI",{});var _Be=s(vb);hue=n(_Be,"STRONG",{});var ECt=s(hue);ezo=r(ECt,"funnel"),ECt.forEach(t),ozo=r(_Be," \u2014 "),UX=n(_Be,"A",{href:!0});var CCt=s(UX);rzo=r(CCt,"FunnelForSequenceClassification"),CCt.forEach(t),tzo=r(_Be," (Funnel Transformer model)"),_Be.forEach(t),azo=i(N),Fb=n(N,"LI",{});var uBe=s(Fb);pue=n(uBe,"STRONG",{});var wCt=s(pue);nzo=r(wCt,"gpt2"),wCt.forEach(t),szo=r(uBe," \u2014 "),JX=n(uBe,"A",{href:!0});var ACt=s(JX);lzo=r(ACt,"GPT2ForSequenceClassification"),ACt.forEach(t),izo=r(uBe," (OpenAI GPT-2 model)"),uBe.forEach(t),dzo=i(N),Tb=n(N,"LI",{});var bBe=s(Tb);_ue=n(bBe,"STRONG",{});var LCt=s(_ue);czo=r(LCt,"gpt_neo"),LCt.forEach(t),fzo=r(bBe," \u2014 "),YX=n(bBe,"A",{href:!0});var yCt=s(YX);mzo=r(yCt,"GPTNeoForSequenceClassification"),yCt.forEach(t),gzo=r(bBe," (GPT Neo model)"),bBe.forEach(t),hzo=i(N),Mb=n(N,"LI",{});var vBe=s(Mb);uue=n(vBe,"STRONG",{});var xCt=s(uue);pzo=r(xCt,"gptj"),xCt.forEach(t),_zo=r(vBe," \u2014 "),KX=n(vBe,"A",{href:!0});var $Ct=s(KX);uzo=r($Ct,"GPTJForSequenceClassification"),$Ct.forEach(t),bzo=r(vBe," (GPT-J model)"),vBe.forEach(t),vzo=i(N),Eb=n(N,"LI",{});var FBe=s(Eb);bue=n(FBe,"STRONG",{});var kCt=s(bue);Fzo=r(kCt,"ibert"),kCt.forEach(t),Tzo=r(FBe," \u2014 "),ZX=n(FBe,"A",{href:!0});var SCt=s(ZX);Mzo=r(SCt,"IBertForSequenceClassification"),SCt.forEach(t),Ezo=r(FBe," (I-BERT model)"),FBe.forEach(t),Czo=i(N),Cb=n(N,"LI",{});var TBe=s(Cb);vue=n(TBe,"STRONG",{});var RCt=s(vue);wzo=r(RCt,"layoutlm"),RCt.forEach(t),Azo=r(TBe," \u2014 "),ez=n(TBe,"A",{href:!0});var PCt=s(ez);Lzo=r(PCt,"LayoutLMForSequenceClassification"),PCt.forEach(t),yzo=r(TBe," (LayoutLM model)"),TBe.forEach(t),xzo=i(N),wb=n(N,"LI",{});var MBe=s(wb);Fue=n(MBe,"STRONG",{});var BCt=s(Fue);$zo=r(BCt,"layoutlmv2"),BCt.forEach(t),kzo=r(MBe," \u2014 "),oz=n(MBe,"A",{href:!0});var ICt=s(oz);Szo=r(ICt,"LayoutLMv2ForSequenceClassification"),ICt.forEach(t),Rzo=r(MBe," (LayoutLMv2 model)"),MBe.forEach(t),Pzo=i(N),Ab=n(N,"LI",{});var EBe=s(Ab);Tue=n(EBe,"STRONG",{});var NCt=s(Tue);Bzo=r(NCt,"layoutlmv3"),NCt.forEach(t),Izo=r(EBe," \u2014 "),rz=n(EBe,"A",{href:!0});var qCt=s(rz);Nzo=r(qCt,"LayoutLMv3ForSequenceClassification"),qCt.forEach(t),qzo=r(EBe," (LayoutLMv3 model)"),EBe.forEach(t),jzo=i(N),Lb=n(N,"LI",{});var CBe=s(Lb);Mue=n(CBe,"STRONG",{});var jCt=s(Mue);Dzo=r(jCt,"led"),jCt.forEach(t),Gzo=r(CBe," \u2014 "),tz=n(CBe,"A",{href:!0});var DCt=s(tz);Ozo=r(DCt,"LEDForSequenceClassification"),DCt.forEach(t),Vzo=r(CBe," (LED model)"),CBe.forEach(t),Xzo=i(N),yb=n(N,"LI",{});var wBe=s(yb);Eue=n(wBe,"STRONG",{});var GCt=s(Eue);zzo=r(GCt,"longformer"),GCt.forEach(t),Wzo=r(wBe," \u2014 "),az=n(wBe,"A",{href:!0});var OCt=s(az);Qzo=r(OCt,"LongformerForSequenceClassification"),OCt.forEach(t),Hzo=r(wBe," (Longformer model)"),wBe.forEach(t),Uzo=i(N),xb=n(N,"LI",{});var ABe=s(xb);Cue=n(ABe,"STRONG",{});var VCt=s(Cue);Jzo=r(VCt,"luke"),VCt.forEach(t),Yzo=r(ABe," \u2014 "),nz=n(ABe,"A",{href:!0});var XCt=s(nz);Kzo=r(XCt,"LukeForSequenceClassification"),XCt.forEach(t),Zzo=r(ABe," (LUKE model)"),ABe.forEach(t),eWo=i(N),$b=n(N,"LI",{});var LBe=s($b);wue=n(LBe,"STRONG",{});var zCt=s(wue);oWo=r(zCt,"mbart"),zCt.forEach(t),rWo=r(LBe," \u2014 "),sz=n(LBe,"A",{href:!0});var WCt=s(sz);tWo=r(WCt,"MBartForSequenceClassification"),WCt.forEach(t),aWo=r(LBe," (mBART model)"),LBe.forEach(t),nWo=i(N),kb=n(N,"LI",{});var yBe=s(kb);Aue=n(yBe,"STRONG",{});var QCt=s(Aue);sWo=r(QCt,"megatron-bert"),QCt.forEach(t),lWo=r(yBe," \u2014 "),lz=n(yBe,"A",{href:!0});var HCt=s(lz);iWo=r(HCt,"MegatronBertForSequenceClassification"),HCt.forEach(t),dWo=r(yBe," (Megatron-BERT model)"),yBe.forEach(t),cWo=i(N),Sb=n(N,"LI",{});var xBe=s(Sb);Lue=n(xBe,"STRONG",{});var UCt=s(Lue);fWo=r(UCt,"mobilebert"),UCt.forEach(t),mWo=r(xBe," \u2014 "),iz=n(xBe,"A",{href:!0});var JCt=s(iz);gWo=r(JCt,"MobileBertForSequenceClassification"),JCt.forEach(t),hWo=r(xBe," (MobileBERT model)"),xBe.forEach(t),pWo=i(N),Rb=n(N,"LI",{});var $Be=s(Rb);yue=n($Be,"STRONG",{});var YCt=s(yue);_Wo=r(YCt,"mpnet"),YCt.forEach(t),uWo=r($Be," \u2014 "),dz=n($Be,"A",{href:!0});var KCt=s(dz);bWo=r(KCt,"MPNetForSequenceClassification"),KCt.forEach(t),vWo=r($Be," (MPNet model)"),$Be.forEach(t),FWo=i(N),Pb=n(N,"LI",{});var kBe=s(Pb);xue=n(kBe,"STRONG",{});var ZCt=s(xue);TWo=r(ZCt,"mvp"),ZCt.forEach(t),MWo=r(kBe," \u2014 "),cz=n(kBe,"A",{href:!0});var e5t=s(cz);EWo=r(e5t,"MvpForSequenceClassification"),e5t.forEach(t),CWo=r(kBe," (MVP model)"),kBe.forEach(t),wWo=i(N),Bb=n(N,"LI",{});var SBe=s(Bb);$ue=n(SBe,"STRONG",{});var o5t=s($ue);AWo=r(o5t,"nezha"),o5t.forEach(t),LWo=r(SBe," \u2014 "),fz=n(SBe,"A",{href:!0});var r5t=s(fz);yWo=r(r5t,"NezhaForSequenceClassification"),r5t.forEach(t),xWo=r(SBe," (Nezha model)"),SBe.forEach(t),$Wo=i(N),Ib=n(N,"LI",{});var RBe=s(Ib);kue=n(RBe,"STRONG",{});var t5t=s(kue);kWo=r(t5t,"nystromformer"),t5t.forEach(t),SWo=r(RBe," \u2014 "),mz=n(RBe,"A",{href:!0});var a5t=s(mz);RWo=r(a5t,"NystromformerForSequenceClassification"),a5t.forEach(t),PWo=r(RBe," (Nystr\xF6mformer model)"),RBe.forEach(t),BWo=i(N),Nb=n(N,"LI",{});var PBe=s(Nb);Sue=n(PBe,"STRONG",{});var n5t=s(Sue);IWo=r(n5t,"openai-gpt"),n5t.forEach(t),NWo=r(PBe," \u2014 "),gz=n(PBe,"A",{href:!0});var s5t=s(gz);qWo=r(s5t,"OpenAIGPTForSequenceClassification"),s5t.forEach(t),jWo=r(PBe," (OpenAI GPT model)"),PBe.forEach(t),DWo=i(N),qb=n(N,"LI",{});var BBe=s(qb);Rue=n(BBe,"STRONG",{});var l5t=s(Rue);GWo=r(l5t,"opt"),l5t.forEach(t),OWo=r(BBe," \u2014 "),hz=n(BBe,"A",{href:!0});var i5t=s(hz);VWo=r(i5t,"OPTForSequenceClassification"),i5t.forEach(t),XWo=r(BBe," (OPT model)"),BBe.forEach(t),zWo=i(N),jb=n(N,"LI",{});var IBe=s(jb);Pue=n(IBe,"STRONG",{});var d5t=s(Pue);WWo=r(d5t,"perceiver"),d5t.forEach(t),QWo=r(IBe," \u2014 "),pz=n(IBe,"A",{href:!0});var c5t=s(pz);HWo=r(c5t,"PerceiverForSequenceClassification"),c5t.forEach(t),UWo=r(IBe," (Perceiver model)"),IBe.forEach(t),JWo=i(N),Db=n(N,"LI",{});var NBe=s(Db);Bue=n(NBe,"STRONG",{});var f5t=s(Bue);YWo=r(f5t,"plbart"),f5t.forEach(t),KWo=r(NBe," \u2014 "),_z=n(NBe,"A",{href:!0});var m5t=s(_z);ZWo=r(m5t,"PLBartForSequenceClassification"),m5t.forEach(t),eQo=r(NBe," (PLBart model)"),NBe.forEach(t),oQo=i(N),Gb=n(N,"LI",{});var qBe=s(Gb);Iue=n(qBe,"STRONG",{});var g5t=s(Iue);rQo=r(g5t,"qdqbert"),g5t.forEach(t),tQo=r(qBe," \u2014 "),uz=n(qBe,"A",{href:!0});var h5t=s(uz);aQo=r(h5t,"QDQBertForSequenceClassification"),h5t.forEach(t),nQo=r(qBe," (QDQBert model)"),qBe.forEach(t),sQo=i(N),Ob=n(N,"LI",{});var jBe=s(Ob);Nue=n(jBe,"STRONG",{});var p5t=s(Nue);lQo=r(p5t,"reformer"),p5t.forEach(t),iQo=r(jBe," \u2014 "),bz=n(jBe,"A",{href:!0});var _5t=s(bz);dQo=r(_5t,"ReformerForSequenceClassification"),_5t.forEach(t),cQo=r(jBe," (Reformer model)"),jBe.forEach(t),fQo=i(N),Vb=n(N,"LI",{});var DBe=s(Vb);que=n(DBe,"STRONG",{});var u5t=s(que);mQo=r(u5t,"rembert"),u5t.forEach(t),gQo=r(DBe," \u2014 "),vz=n(DBe,"A",{href:!0});var b5t=s(vz);hQo=r(b5t,"RemBertForSequenceClassification"),b5t.forEach(t),pQo=r(DBe," (RemBERT model)"),DBe.forEach(t),_Qo=i(N),Xb=n(N,"LI",{});var GBe=s(Xb);jue=n(GBe,"STRONG",{});var v5t=s(jue);uQo=r(v5t,"roberta"),v5t.forEach(t),bQo=r(GBe," \u2014 "),Fz=n(GBe,"A",{href:!0});var F5t=s(Fz);vQo=r(F5t,"RobertaForSequenceClassification"),F5t.forEach(t),FQo=r(GBe," (RoBERTa model)"),GBe.forEach(t),TQo=i(N),zb=n(N,"LI",{});var OBe=s(zb);Due=n(OBe,"STRONG",{});var T5t=s(Due);MQo=r(T5t,"roformer"),T5t.forEach(t),EQo=r(OBe," \u2014 "),Tz=n(OBe,"A",{href:!0});var M5t=s(Tz);CQo=r(M5t,"RoFormerForSequenceClassification"),M5t.forEach(t),wQo=r(OBe," (RoFormer model)"),OBe.forEach(t),AQo=i(N),Wb=n(N,"LI",{});var VBe=s(Wb);Gue=n(VBe,"STRONG",{});var E5t=s(Gue);LQo=r(E5t,"squeezebert"),E5t.forEach(t),yQo=r(VBe," \u2014 "),Mz=n(VBe,"A",{href:!0});var C5t=s(Mz);xQo=r(C5t,"SqueezeBertForSequenceClassification"),C5t.forEach(t),$Qo=r(VBe," (SqueezeBERT model)"),VBe.forEach(t),kQo=i(N),Qb=n(N,"LI",{});var XBe=s(Qb);Oue=n(XBe,"STRONG",{});var w5t=s(Oue);SQo=r(w5t,"tapas"),w5t.forEach(t),RQo=r(XBe," \u2014 "),Ez=n(XBe,"A",{href:!0});var A5t=s(Ez);PQo=r(A5t,"TapasForSequenceClassification"),A5t.forEach(t),BQo=r(XBe," (TAPAS model)"),XBe.forEach(t),IQo=i(N),Hb=n(N,"LI",{});var zBe=s(Hb);Vue=n(zBe,"STRONG",{});var L5t=s(Vue);NQo=r(L5t,"transfo-xl"),L5t.forEach(t),qQo=r(zBe," \u2014 "),Cz=n(zBe,"A",{href:!0});var y5t=s(Cz);jQo=r(y5t,"TransfoXLForSequenceClassification"),y5t.forEach(t),DQo=r(zBe," (Transformer-XL model)"),zBe.forEach(t),GQo=i(N),Ub=n(N,"LI",{});var WBe=s(Ub);Xue=n(WBe,"STRONG",{});var x5t=s(Xue);OQo=r(x5t,"xlm"),x5t.forEach(t),VQo=r(WBe," \u2014 "),wz=n(WBe,"A",{href:!0});var $5t=s(wz);XQo=r($5t,"XLMForSequenceClassification"),$5t.forEach(t),zQo=r(WBe," (XLM model)"),WBe.forEach(t),WQo=i(N),Jb=n(N,"LI",{});var QBe=s(Jb);zue=n(QBe,"STRONG",{});var k5t=s(zue);QQo=r(k5t,"xlm-roberta"),k5t.forEach(t),HQo=r(QBe," \u2014 "),Az=n(QBe,"A",{href:!0});var S5t=s(Az);UQo=r(S5t,"XLMRobertaForSequenceClassification"),S5t.forEach(t),JQo=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),YQo=i(N),Yb=n(N,"LI",{});var HBe=s(Yb);Wue=n(HBe,"STRONG",{});var R5t=s(Wue);KQo=r(R5t,"xlm-roberta-xl"),R5t.forEach(t),ZQo=r(HBe," \u2014 "),Lz=n(HBe,"A",{href:!0});var P5t=s(Lz);eHo=r(P5t,"XLMRobertaXLForSequenceClassification"),P5t.forEach(t),oHo=r(HBe," (XLM-RoBERTa-XL model)"),HBe.forEach(t),rHo=i(N),Kb=n(N,"LI",{});var UBe=s(Kb);Que=n(UBe,"STRONG",{});var B5t=s(Que);tHo=r(B5t,"xlnet"),B5t.forEach(t),aHo=r(UBe," \u2014 "),yz=n(UBe,"A",{href:!0});var I5t=s(yz);nHo=r(I5t,"XLNetForSequenceClassification"),I5t.forEach(t),sHo=r(UBe," (XLNet model)"),UBe.forEach(t),lHo=i(N),Zb=n(N,"LI",{});var JBe=s(Zb);Hue=n(JBe,"STRONG",{});var N5t=s(Hue);iHo=r(N5t,"yoso"),N5t.forEach(t),dHo=r(JBe," \u2014 "),xz=n(JBe,"A",{href:!0});var q5t=s(xz);cHo=r(q5t,"YosoForSequenceClassification"),q5t.forEach(t),fHo=r(JBe," (YOSO model)"),JBe.forEach(t),N.forEach(t),mHo=i(ma),ev=n(ma,"P",{});var YBe=s(ev);gHo=r(YBe,"The model is set in evaluation mode by default using "),Uue=n(YBe,"CODE",{});var j5t=s(Uue);hHo=r(j5t,"model.eval()"),j5t.forEach(t),pHo=r(YBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jue=n(YBe,"CODE",{});var D5t=s(Jue);_Ho=r(D5t,"model.train()"),D5t.forEach(t),YBe.forEach(t),uHo=i(ma),T(ov.$$.fragment,ma),ma.forEach(t),cl.forEach(t),eWe=i(f),id=n(f,"H2",{class:!0});var sHe=s(id);rv=n(sHe,"A",{id:!0,class:!0,href:!0});var G5t=s(rv);Yue=n(G5t,"SPAN",{});var O5t=s(Yue);T(yy.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),bHo=i(sHe),Kue=n(sHe,"SPAN",{});var V5t=s(Kue);vHo=r(V5t,"AutoModelForMultipleChoice"),V5t.forEach(t),sHe.forEach(t),oWe=i(f),No=n(f,"DIV",{class:!0});var fl=s(No);T(xy.$$.fragment,fl),FHo=i(fl),dd=n(fl,"P",{});var Nte=s(dd);THo=r(Nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$z=n(Nte,"A",{href:!0});var X5t=s($z);MHo=r(X5t,"from_pretrained()"),X5t.forEach(t),EHo=r(Nte," class method or the "),kz=n(Nte,"A",{href:!0});var z5t=s(kz);CHo=r(z5t,"from_config()"),z5t.forEach(t),wHo=r(Nte,` class
method.`),Nte.forEach(t),AHo=i(fl),$y=n(fl,"P",{});var lHe=s($y);LHo=r(lHe,"This class cannot be instantiated directly using "),Zue=n(lHe,"CODE",{});var W5t=s(Zue);yHo=r(W5t,"__init__()"),W5t.forEach(t),xHo=r(lHe," (throws an error)."),lHe.forEach(t),$Ho=i(fl),ht=n(fl,"DIV",{class:!0});var GA=s(ht);T(ky.$$.fragment,GA),kHo=i(GA),e2e=n(GA,"P",{});var Q5t=s(e2e);SHo=r(Q5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q5t.forEach(t),RHo=i(GA),cd=n(GA,"P",{});var qte=s(cd);PHo=r(qte,`Note:
Loading a model from its configuration file does `),o2e=n(qte,"STRONG",{});var H5t=s(o2e);BHo=r(H5t,"not"),H5t.forEach(t),IHo=r(qte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(qte,"A",{href:!0});var U5t=s(Sz);NHo=r(U5t,"from_pretrained()"),U5t.forEach(t),qHo=r(qte," to load the model weights."),qte.forEach(t),jHo=i(GA),T(tv.$$.fragment,GA),GA.forEach(t),DHo=i(fl),to=n(fl,"DIV",{class:!0});var ga=s(to);T(Sy.$$.fragment,ga),GHo=i(ga),r2e=n(ga,"P",{});var J5t=s(r2e);OHo=r(J5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J5t.forEach(t),VHo=i(ga),Oa=n(ga,"P",{});var OA=s(Oa);XHo=r(OA,"The model class to instantiate is selected based on the "),t2e=n(OA,"CODE",{});var Y5t=s(t2e);zHo=r(Y5t,"model_type"),Y5t.forEach(t),WHo=r(OA,` property of the config object (either
passed as an argument or loaded from `),a2e=n(OA,"CODE",{});var K5t=s(a2e);QHo=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),HHo=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(OA,"CODE",{});var Z5t=s(n2e);UHo=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),JHo=r(OA,":"),OA.forEach(t),YHo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);av=n(ee,"LI",{});var KBe=s(av);s2e=n(KBe,"STRONG",{});var e3t=s(s2e);KHo=r(e3t,"albert"),e3t.forEach(t),ZHo=r(KBe," \u2014 "),Rz=n(KBe,"A",{href:!0});var o3t=s(Rz);eUo=r(o3t,"AlbertForMultipleChoice"),o3t.forEach(t),oUo=r(KBe," (ALBERT model)"),KBe.forEach(t),rUo=i(ee),nv=n(ee,"LI",{});var ZBe=s(nv);l2e=n(ZBe,"STRONG",{});var r3t=s(l2e);tUo=r(r3t,"bert"),r3t.forEach(t),aUo=r(ZBe," \u2014 "),Pz=n(ZBe,"A",{href:!0});var t3t=s(Pz);nUo=r(t3t,"BertForMultipleChoice"),t3t.forEach(t),sUo=r(ZBe," (BERT model)"),ZBe.forEach(t),lUo=i(ee),sv=n(ee,"LI",{});var eIe=s(sv);i2e=n(eIe,"STRONG",{});var a3t=s(i2e);iUo=r(a3t,"big_bird"),a3t.forEach(t),dUo=r(eIe," \u2014 "),Bz=n(eIe,"A",{href:!0});var n3t=s(Bz);cUo=r(n3t,"BigBirdForMultipleChoice"),n3t.forEach(t),fUo=r(eIe," (BigBird model)"),eIe.forEach(t),mUo=i(ee),lv=n(ee,"LI",{});var oIe=s(lv);d2e=n(oIe,"STRONG",{});var s3t=s(d2e);gUo=r(s3t,"camembert"),s3t.forEach(t),hUo=r(oIe," \u2014 "),Iz=n(oIe,"A",{href:!0});var l3t=s(Iz);pUo=r(l3t,"CamembertForMultipleChoice"),l3t.forEach(t),_Uo=r(oIe," (CamemBERT model)"),oIe.forEach(t),uUo=i(ee),iv=n(ee,"LI",{});var rIe=s(iv);c2e=n(rIe,"STRONG",{});var i3t=s(c2e);bUo=r(i3t,"canine"),i3t.forEach(t),vUo=r(rIe," \u2014 "),Nz=n(rIe,"A",{href:!0});var d3t=s(Nz);FUo=r(d3t,"CanineForMultipleChoice"),d3t.forEach(t),TUo=r(rIe," (CANINE model)"),rIe.forEach(t),MUo=i(ee),dv=n(ee,"LI",{});var tIe=s(dv);f2e=n(tIe,"STRONG",{});var c3t=s(f2e);EUo=r(c3t,"convbert"),c3t.forEach(t),CUo=r(tIe," \u2014 "),qz=n(tIe,"A",{href:!0});var f3t=s(qz);wUo=r(f3t,"ConvBertForMultipleChoice"),f3t.forEach(t),AUo=r(tIe," (ConvBERT model)"),tIe.forEach(t),LUo=i(ee),cv=n(ee,"LI",{});var aIe=s(cv);m2e=n(aIe,"STRONG",{});var m3t=s(m2e);yUo=r(m3t,"data2vec-text"),m3t.forEach(t),xUo=r(aIe," \u2014 "),jz=n(aIe,"A",{href:!0});var g3t=s(jz);$Uo=r(g3t,"Data2VecTextForMultipleChoice"),g3t.forEach(t),kUo=r(aIe," (Data2VecText model)"),aIe.forEach(t),SUo=i(ee),fv=n(ee,"LI",{});var nIe=s(fv);g2e=n(nIe,"STRONG",{});var h3t=s(g2e);RUo=r(h3t,"deberta-v2"),h3t.forEach(t),PUo=r(nIe," \u2014 "),Dz=n(nIe,"A",{href:!0});var p3t=s(Dz);BUo=r(p3t,"DebertaV2ForMultipleChoice"),p3t.forEach(t),IUo=r(nIe," (DeBERTa-v2 model)"),nIe.forEach(t),NUo=i(ee),mv=n(ee,"LI",{});var sIe=s(mv);h2e=n(sIe,"STRONG",{});var _3t=s(h2e);qUo=r(_3t,"distilbert"),_3t.forEach(t),jUo=r(sIe," \u2014 "),Gz=n(sIe,"A",{href:!0});var u3t=s(Gz);DUo=r(u3t,"DistilBertForMultipleChoice"),u3t.forEach(t),GUo=r(sIe," (DistilBERT model)"),sIe.forEach(t),OUo=i(ee),gv=n(ee,"LI",{});var lIe=s(gv);p2e=n(lIe,"STRONG",{});var b3t=s(p2e);VUo=r(b3t,"electra"),b3t.forEach(t),XUo=r(lIe," \u2014 "),Oz=n(lIe,"A",{href:!0});var v3t=s(Oz);zUo=r(v3t,"ElectraForMultipleChoice"),v3t.forEach(t),WUo=r(lIe," (ELECTRA model)"),lIe.forEach(t),QUo=i(ee),hv=n(ee,"LI",{});var iIe=s(hv);_2e=n(iIe,"STRONG",{});var F3t=s(_2e);HUo=r(F3t,"flaubert"),F3t.forEach(t),UUo=r(iIe," \u2014 "),Vz=n(iIe,"A",{href:!0});var T3t=s(Vz);JUo=r(T3t,"FlaubertForMultipleChoice"),T3t.forEach(t),YUo=r(iIe," (FlauBERT model)"),iIe.forEach(t),KUo=i(ee),pv=n(ee,"LI",{});var dIe=s(pv);u2e=n(dIe,"STRONG",{});var M3t=s(u2e);ZUo=r(M3t,"fnet"),M3t.forEach(t),eJo=r(dIe," \u2014 "),Xz=n(dIe,"A",{href:!0});var E3t=s(Xz);oJo=r(E3t,"FNetForMultipleChoice"),E3t.forEach(t),rJo=r(dIe," (FNet model)"),dIe.forEach(t),tJo=i(ee),_v=n(ee,"LI",{});var cIe=s(_v);b2e=n(cIe,"STRONG",{});var C3t=s(b2e);aJo=r(C3t,"funnel"),C3t.forEach(t),nJo=r(cIe," \u2014 "),zz=n(cIe,"A",{href:!0});var w3t=s(zz);sJo=r(w3t,"FunnelForMultipleChoice"),w3t.forEach(t),lJo=r(cIe," (Funnel Transformer model)"),cIe.forEach(t),iJo=i(ee),uv=n(ee,"LI",{});var fIe=s(uv);v2e=n(fIe,"STRONG",{});var A3t=s(v2e);dJo=r(A3t,"ibert"),A3t.forEach(t),cJo=r(fIe," \u2014 "),Wz=n(fIe,"A",{href:!0});var L3t=s(Wz);fJo=r(L3t,"IBertForMultipleChoice"),L3t.forEach(t),mJo=r(fIe," (I-BERT model)"),fIe.forEach(t),gJo=i(ee),bv=n(ee,"LI",{});var mIe=s(bv);F2e=n(mIe,"STRONG",{});var y3t=s(F2e);hJo=r(y3t,"longformer"),y3t.forEach(t),pJo=r(mIe," \u2014 "),Qz=n(mIe,"A",{href:!0});var x3t=s(Qz);_Jo=r(x3t,"LongformerForMultipleChoice"),x3t.forEach(t),uJo=r(mIe," (Longformer model)"),mIe.forEach(t),bJo=i(ee),vv=n(ee,"LI",{});var gIe=s(vv);T2e=n(gIe,"STRONG",{});var $3t=s(T2e);vJo=r($3t,"luke"),$3t.forEach(t),FJo=r(gIe," \u2014 "),Hz=n(gIe,"A",{href:!0});var k3t=s(Hz);TJo=r(k3t,"LukeForMultipleChoice"),k3t.forEach(t),MJo=r(gIe," (LUKE model)"),gIe.forEach(t),EJo=i(ee),Fv=n(ee,"LI",{});var hIe=s(Fv);M2e=n(hIe,"STRONG",{});var S3t=s(M2e);CJo=r(S3t,"megatron-bert"),S3t.forEach(t),wJo=r(hIe," \u2014 "),Uz=n(hIe,"A",{href:!0});var R3t=s(Uz);AJo=r(R3t,"MegatronBertForMultipleChoice"),R3t.forEach(t),LJo=r(hIe," (Megatron-BERT model)"),hIe.forEach(t),yJo=i(ee),Tv=n(ee,"LI",{});var pIe=s(Tv);E2e=n(pIe,"STRONG",{});var P3t=s(E2e);xJo=r(P3t,"mobilebert"),P3t.forEach(t),$Jo=r(pIe," \u2014 "),Jz=n(pIe,"A",{href:!0});var B3t=s(Jz);kJo=r(B3t,"MobileBertForMultipleChoice"),B3t.forEach(t),SJo=r(pIe," (MobileBERT model)"),pIe.forEach(t),RJo=i(ee),Mv=n(ee,"LI",{});var _Ie=s(Mv);C2e=n(_Ie,"STRONG",{});var I3t=s(C2e);PJo=r(I3t,"mpnet"),I3t.forEach(t),BJo=r(_Ie," \u2014 "),Yz=n(_Ie,"A",{href:!0});var N3t=s(Yz);IJo=r(N3t,"MPNetForMultipleChoice"),N3t.forEach(t),NJo=r(_Ie," (MPNet model)"),_Ie.forEach(t),qJo=i(ee),Ev=n(ee,"LI",{});var uIe=s(Ev);w2e=n(uIe,"STRONG",{});var q3t=s(w2e);jJo=r(q3t,"nezha"),q3t.forEach(t),DJo=r(uIe," \u2014 "),Kz=n(uIe,"A",{href:!0});var j3t=s(Kz);GJo=r(j3t,"NezhaForMultipleChoice"),j3t.forEach(t),OJo=r(uIe," (Nezha model)"),uIe.forEach(t),VJo=i(ee),Cv=n(ee,"LI",{});var bIe=s(Cv);A2e=n(bIe,"STRONG",{});var D3t=s(A2e);XJo=r(D3t,"nystromformer"),D3t.forEach(t),zJo=r(bIe," \u2014 "),Zz=n(bIe,"A",{href:!0});var G3t=s(Zz);WJo=r(G3t,"NystromformerForMultipleChoice"),G3t.forEach(t),QJo=r(bIe," (Nystr\xF6mformer model)"),bIe.forEach(t),HJo=i(ee),wv=n(ee,"LI",{});var vIe=s(wv);L2e=n(vIe,"STRONG",{});var O3t=s(L2e);UJo=r(O3t,"qdqbert"),O3t.forEach(t),JJo=r(vIe," \u2014 "),eW=n(vIe,"A",{href:!0});var V3t=s(eW);YJo=r(V3t,"QDQBertForMultipleChoice"),V3t.forEach(t),KJo=r(vIe," (QDQBert model)"),vIe.forEach(t),ZJo=i(ee),Av=n(ee,"LI",{});var FIe=s(Av);y2e=n(FIe,"STRONG",{});var X3t=s(y2e);eYo=r(X3t,"rembert"),X3t.forEach(t),oYo=r(FIe," \u2014 "),oW=n(FIe,"A",{href:!0});var z3t=s(oW);rYo=r(z3t,"RemBertForMultipleChoice"),z3t.forEach(t),tYo=r(FIe," (RemBERT model)"),FIe.forEach(t),aYo=i(ee),Lv=n(ee,"LI",{});var TIe=s(Lv);x2e=n(TIe,"STRONG",{});var W3t=s(x2e);nYo=r(W3t,"roberta"),W3t.forEach(t),sYo=r(TIe," \u2014 "),rW=n(TIe,"A",{href:!0});var Q3t=s(rW);lYo=r(Q3t,"RobertaForMultipleChoice"),Q3t.forEach(t),iYo=r(TIe," (RoBERTa model)"),TIe.forEach(t),dYo=i(ee),yv=n(ee,"LI",{});var MIe=s(yv);$2e=n(MIe,"STRONG",{});var H3t=s($2e);cYo=r(H3t,"roformer"),H3t.forEach(t),fYo=r(MIe," \u2014 "),tW=n(MIe,"A",{href:!0});var U3t=s(tW);mYo=r(U3t,"RoFormerForMultipleChoice"),U3t.forEach(t),gYo=r(MIe," (RoFormer model)"),MIe.forEach(t),hYo=i(ee),xv=n(ee,"LI",{});var EIe=s(xv);k2e=n(EIe,"STRONG",{});var J3t=s(k2e);pYo=r(J3t,"squeezebert"),J3t.forEach(t),_Yo=r(EIe," \u2014 "),aW=n(EIe,"A",{href:!0});var Y3t=s(aW);uYo=r(Y3t,"SqueezeBertForMultipleChoice"),Y3t.forEach(t),bYo=r(EIe," (SqueezeBERT model)"),EIe.forEach(t),vYo=i(ee),$v=n(ee,"LI",{});var CIe=s($v);S2e=n(CIe,"STRONG",{});var K3t=s(S2e);FYo=r(K3t,"xlm"),K3t.forEach(t),TYo=r(CIe," \u2014 "),nW=n(CIe,"A",{href:!0});var Z3t=s(nW);MYo=r(Z3t,"XLMForMultipleChoice"),Z3t.forEach(t),EYo=r(CIe," (XLM model)"),CIe.forEach(t),CYo=i(ee),kv=n(ee,"LI",{});var wIe=s(kv);R2e=n(wIe,"STRONG",{});var ewt=s(R2e);wYo=r(ewt,"xlm-roberta"),ewt.forEach(t),AYo=r(wIe," \u2014 "),sW=n(wIe,"A",{href:!0});var owt=s(sW);LYo=r(owt,"XLMRobertaForMultipleChoice"),owt.forEach(t),yYo=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),xYo=i(ee),Sv=n(ee,"LI",{});var AIe=s(Sv);P2e=n(AIe,"STRONG",{});var rwt=s(P2e);$Yo=r(rwt,"xlm-roberta-xl"),rwt.forEach(t),kYo=r(AIe," \u2014 "),lW=n(AIe,"A",{href:!0});var twt=s(lW);SYo=r(twt,"XLMRobertaXLForMultipleChoice"),twt.forEach(t),RYo=r(AIe," (XLM-RoBERTa-XL model)"),AIe.forEach(t),PYo=i(ee),Rv=n(ee,"LI",{});var LIe=s(Rv);B2e=n(LIe,"STRONG",{});var awt=s(B2e);BYo=r(awt,"xlnet"),awt.forEach(t),IYo=r(LIe," \u2014 "),iW=n(LIe,"A",{href:!0});var nwt=s(iW);NYo=r(nwt,"XLNetForMultipleChoice"),nwt.forEach(t),qYo=r(LIe," (XLNet model)"),LIe.forEach(t),jYo=i(ee),Pv=n(ee,"LI",{});var yIe=s(Pv);I2e=n(yIe,"STRONG",{});var swt=s(I2e);DYo=r(swt,"yoso"),swt.forEach(t),GYo=r(yIe," \u2014 "),dW=n(yIe,"A",{href:!0});var lwt=s(dW);OYo=r(lwt,"YosoForMultipleChoice"),lwt.forEach(t),VYo=r(yIe," (YOSO model)"),yIe.forEach(t),ee.forEach(t),XYo=i(ga),Bv=n(ga,"P",{});var xIe=s(Bv);zYo=r(xIe,"The model is set in evaluation mode by default using "),N2e=n(xIe,"CODE",{});var iwt=s(N2e);WYo=r(iwt,"model.eval()"),iwt.forEach(t),QYo=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(xIe,"CODE",{});var dwt=s(q2e);HYo=r(dwt,"model.train()"),dwt.forEach(t),xIe.forEach(t),UYo=i(ga),T(Iv.$$.fragment,ga),ga.forEach(t),fl.forEach(t),rWe=i(f),fd=n(f,"H2",{class:!0});var iHe=s(fd);Nv=n(iHe,"A",{id:!0,class:!0,href:!0});var cwt=s(Nv);j2e=n(cwt,"SPAN",{});var fwt=s(j2e);T(Ry.$$.fragment,fwt),fwt.forEach(t),cwt.forEach(t),JYo=i(iHe),D2e=n(iHe,"SPAN",{});var mwt=s(D2e);YYo=r(mwt,"AutoModelForNextSentencePrediction"),mwt.forEach(t),iHe.forEach(t),tWe=i(f),qo=n(f,"DIV",{class:!0});var ml=s(qo);T(Py.$$.fragment,ml),KYo=i(ml),md=n(ml,"P",{});var jte=s(md);ZYo=r(jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cW=n(jte,"A",{href:!0});var gwt=s(cW);eKo=r(gwt,"from_pretrained()"),gwt.forEach(t),oKo=r(jte," class method or the "),fW=n(jte,"A",{href:!0});var hwt=s(fW);rKo=r(hwt,"from_config()"),hwt.forEach(t),tKo=r(jte,` class
method.`),jte.forEach(t),aKo=i(ml),By=n(ml,"P",{});var dHe=s(By);nKo=r(dHe,"This class cannot be instantiated directly using "),G2e=n(dHe,"CODE",{});var pwt=s(G2e);sKo=r(pwt,"__init__()"),pwt.forEach(t),lKo=r(dHe," (throws an error)."),dHe.forEach(t),iKo=i(ml),pt=n(ml,"DIV",{class:!0});var VA=s(pt);T(Iy.$$.fragment,VA),dKo=i(VA),O2e=n(VA,"P",{});var _wt=s(O2e);cKo=r(_wt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_wt.forEach(t),fKo=i(VA),gd=n(VA,"P",{});var Dte=s(gd);mKo=r(Dte,`Note:
Loading a model from its configuration file does `),V2e=n(Dte,"STRONG",{});var uwt=s(V2e);gKo=r(uwt,"not"),uwt.forEach(t),hKo=r(Dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Dte,"A",{href:!0});var bwt=s(mW);pKo=r(bwt,"from_pretrained()"),bwt.forEach(t),_Ko=r(Dte," to load the model weights."),Dte.forEach(t),uKo=i(VA),T(qv.$$.fragment,VA),VA.forEach(t),bKo=i(ml),ao=n(ml,"DIV",{class:!0});var ha=s(ao);T(Ny.$$.fragment,ha),vKo=i(ha),X2e=n(ha,"P",{});var vwt=s(X2e);FKo=r(vwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vwt.forEach(t),TKo=i(ha),Va=n(ha,"P",{});var XA=s(Va);MKo=r(XA,"The model class to instantiate is selected based on the "),z2e=n(XA,"CODE",{});var Fwt=s(z2e);EKo=r(Fwt,"model_type"),Fwt.forEach(t),CKo=r(XA,` property of the config object (either
passed as an argument or loaded from `),W2e=n(XA,"CODE",{});var Twt=s(W2e);wKo=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),AKo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(XA,"CODE",{});var Mwt=s(Q2e);LKo=r(Mwt,"pretrained_model_name_or_path"),Mwt.forEach(t),yKo=r(XA,":"),XA.forEach(t),xKo=i(ha),jo=n(ha,"UL",{});var pa=s(jo);jv=n(pa,"LI",{});var $Ie=s(jv);H2e=n($Ie,"STRONG",{});var Ewt=s(H2e);$Ko=r(Ewt,"bert"),Ewt.forEach(t),kKo=r($Ie," \u2014 "),gW=n($Ie,"A",{href:!0});var Cwt=s(gW);SKo=r(Cwt,"BertForNextSentencePrediction"),Cwt.forEach(t),RKo=r($Ie," (BERT model)"),$Ie.forEach(t),PKo=i(pa),Dv=n(pa,"LI",{});var kIe=s(Dv);U2e=n(kIe,"STRONG",{});var wwt=s(U2e);BKo=r(wwt,"fnet"),wwt.forEach(t),IKo=r(kIe," \u2014 "),hW=n(kIe,"A",{href:!0});var Awt=s(hW);NKo=r(Awt,"FNetForNextSentencePrediction"),Awt.forEach(t),qKo=r(kIe," (FNet model)"),kIe.forEach(t),jKo=i(pa),Gv=n(pa,"LI",{});var SIe=s(Gv);J2e=n(SIe,"STRONG",{});var Lwt=s(J2e);DKo=r(Lwt,"megatron-bert"),Lwt.forEach(t),GKo=r(SIe," \u2014 "),pW=n(SIe,"A",{href:!0});var ywt=s(pW);OKo=r(ywt,"MegatronBertForNextSentencePrediction"),ywt.forEach(t),VKo=r(SIe," (Megatron-BERT model)"),SIe.forEach(t),XKo=i(pa),Ov=n(pa,"LI",{});var RIe=s(Ov);Y2e=n(RIe,"STRONG",{});var xwt=s(Y2e);zKo=r(xwt,"mobilebert"),xwt.forEach(t),WKo=r(RIe," \u2014 "),_W=n(RIe,"A",{href:!0});var $wt=s(_W);QKo=r($wt,"MobileBertForNextSentencePrediction"),$wt.forEach(t),HKo=r(RIe," (MobileBERT model)"),RIe.forEach(t),UKo=i(pa),Vv=n(pa,"LI",{});var PIe=s(Vv);K2e=n(PIe,"STRONG",{});var kwt=s(K2e);JKo=r(kwt,"nezha"),kwt.forEach(t),YKo=r(PIe," \u2014 "),uW=n(PIe,"A",{href:!0});var Swt=s(uW);KKo=r(Swt,"NezhaForNextSentencePrediction"),Swt.forEach(t),ZKo=r(PIe," (Nezha model)"),PIe.forEach(t),eZo=i(pa),Xv=n(pa,"LI",{});var BIe=s(Xv);Z2e=n(BIe,"STRONG",{});var Rwt=s(Z2e);oZo=r(Rwt,"qdqbert"),Rwt.forEach(t),rZo=r(BIe," \u2014 "),bW=n(BIe,"A",{href:!0});var Pwt=s(bW);tZo=r(Pwt,"QDQBertForNextSentencePrediction"),Pwt.forEach(t),aZo=r(BIe," (QDQBert model)"),BIe.forEach(t),pa.forEach(t),nZo=i(ha),zv=n(ha,"P",{});var IIe=s(zv);sZo=r(IIe,"The model is set in evaluation mode by default using "),e1e=n(IIe,"CODE",{});var Bwt=s(e1e);lZo=r(Bwt,"model.eval()"),Bwt.forEach(t),iZo=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(IIe,"CODE",{});var Iwt=s(o1e);dZo=r(Iwt,"model.train()"),Iwt.forEach(t),IIe.forEach(t),cZo=i(ha),T(Wv.$$.fragment,ha),ha.forEach(t),ml.forEach(t),aWe=i(f),hd=n(f,"H2",{class:!0});var cHe=s(hd);Qv=n(cHe,"A",{id:!0,class:!0,href:!0});var Nwt=s(Qv);r1e=n(Nwt,"SPAN",{});var qwt=s(r1e);T(qy.$$.fragment,qwt),qwt.forEach(t),Nwt.forEach(t),fZo=i(cHe),t1e=n(cHe,"SPAN",{});var jwt=s(t1e);mZo=r(jwt,"AutoModelForTokenClassification"),jwt.forEach(t),cHe.forEach(t),nWe=i(f),Do=n(f,"DIV",{class:!0});var gl=s(Do);T(jy.$$.fragment,gl),gZo=i(gl),pd=n(gl,"P",{});var Gte=s(pd);hZo=r(Gte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vW=n(Gte,"A",{href:!0});var Dwt=s(vW);pZo=r(Dwt,"from_pretrained()"),Dwt.forEach(t),_Zo=r(Gte," class method or the "),FW=n(Gte,"A",{href:!0});var Gwt=s(FW);uZo=r(Gwt,"from_config()"),Gwt.forEach(t),bZo=r(Gte,` class
method.`),Gte.forEach(t),vZo=i(gl),Dy=n(gl,"P",{});var fHe=s(Dy);FZo=r(fHe,"This class cannot be instantiated directly using "),a1e=n(fHe,"CODE",{});var Owt=s(a1e);TZo=r(Owt,"__init__()"),Owt.forEach(t),MZo=r(fHe," (throws an error)."),fHe.forEach(t),EZo=i(gl),_t=n(gl,"DIV",{class:!0});var zA=s(_t);T(Gy.$$.fragment,zA),CZo=i(zA),n1e=n(zA,"P",{});var Vwt=s(n1e);wZo=r(Vwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vwt.forEach(t),AZo=i(zA),_d=n(zA,"P",{});var Ote=s(_d);LZo=r(Ote,`Note:
Loading a model from its configuration file does `),s1e=n(Ote,"STRONG",{});var Xwt=s(s1e);yZo=r(Xwt,"not"),Xwt.forEach(t),xZo=r(Ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(Ote,"A",{href:!0});var zwt=s(TW);$Zo=r(zwt,"from_pretrained()"),zwt.forEach(t),kZo=r(Ote," to load the model weights."),Ote.forEach(t),SZo=i(zA),T(Hv.$$.fragment,zA),zA.forEach(t),RZo=i(gl),no=n(gl,"DIV",{class:!0});var _a=s(no);T(Oy.$$.fragment,_a),PZo=i(_a),l1e=n(_a,"P",{});var Wwt=s(l1e);BZo=r(Wwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wwt.forEach(t),IZo=i(_a),Xa=n(_a,"P",{});var WA=s(Xa);NZo=r(WA,"The model class to instantiate is selected based on the "),i1e=n(WA,"CODE",{});var Qwt=s(i1e);qZo=r(Qwt,"model_type"),Qwt.forEach(t),jZo=r(WA,` property of the config object (either
passed as an argument or loaded from `),d1e=n(WA,"CODE",{});var Hwt=s(d1e);DZo=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),GZo=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(WA,"CODE",{});var Uwt=s(c1e);OZo=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),VZo=r(WA,":"),WA.forEach(t),XZo=i(_a),H=n(_a,"UL",{});var Y=s(H);Uv=n(Y,"LI",{});var NIe=s(Uv);f1e=n(NIe,"STRONG",{});var Jwt=s(f1e);zZo=r(Jwt,"albert"),Jwt.forEach(t),WZo=r(NIe," \u2014 "),MW=n(NIe,"A",{href:!0});var Ywt=s(MW);QZo=r(Ywt,"AlbertForTokenClassification"),Ywt.forEach(t),HZo=r(NIe," (ALBERT model)"),NIe.forEach(t),UZo=i(Y),Jv=n(Y,"LI",{});var qIe=s(Jv);m1e=n(qIe,"STRONG",{});var Kwt=s(m1e);JZo=r(Kwt,"bert"),Kwt.forEach(t),YZo=r(qIe," \u2014 "),EW=n(qIe,"A",{href:!0});var Zwt=s(EW);KZo=r(Zwt,"BertForTokenClassification"),Zwt.forEach(t),ZZo=r(qIe," (BERT model)"),qIe.forEach(t),eer=i(Y),Yv=n(Y,"LI",{});var jIe=s(Yv);g1e=n(jIe,"STRONG",{});var e6t=s(g1e);oer=r(e6t,"big_bird"),e6t.forEach(t),rer=r(jIe," \u2014 "),CW=n(jIe,"A",{href:!0});var o6t=s(CW);ter=r(o6t,"BigBirdForTokenClassification"),o6t.forEach(t),aer=r(jIe," (BigBird model)"),jIe.forEach(t),ner=i(Y),Kv=n(Y,"LI",{});var DIe=s(Kv);h1e=n(DIe,"STRONG",{});var r6t=s(h1e);ser=r(r6t,"bloom"),r6t.forEach(t),ler=r(DIe," \u2014 "),wW=n(DIe,"A",{href:!0});var t6t=s(wW);ier=r(t6t,"BloomForTokenClassification"),t6t.forEach(t),der=r(DIe," (BLOOM model)"),DIe.forEach(t),cer=i(Y),Zv=n(Y,"LI",{});var GIe=s(Zv);p1e=n(GIe,"STRONG",{});var a6t=s(p1e);fer=r(a6t,"camembert"),a6t.forEach(t),mer=r(GIe," \u2014 "),AW=n(GIe,"A",{href:!0});var n6t=s(AW);ger=r(n6t,"CamembertForTokenClassification"),n6t.forEach(t),her=r(GIe," (CamemBERT model)"),GIe.forEach(t),per=i(Y),e0=n(Y,"LI",{});var OIe=s(e0);_1e=n(OIe,"STRONG",{});var s6t=s(_1e);_er=r(s6t,"canine"),s6t.forEach(t),uer=r(OIe," \u2014 "),LW=n(OIe,"A",{href:!0});var l6t=s(LW);ber=r(l6t,"CanineForTokenClassification"),l6t.forEach(t),ver=r(OIe," (CANINE model)"),OIe.forEach(t),Fer=i(Y),o0=n(Y,"LI",{});var VIe=s(o0);u1e=n(VIe,"STRONG",{});var i6t=s(u1e);Ter=r(i6t,"convbert"),i6t.forEach(t),Mer=r(VIe," \u2014 "),yW=n(VIe,"A",{href:!0});var d6t=s(yW);Eer=r(d6t,"ConvBertForTokenClassification"),d6t.forEach(t),Cer=r(VIe," (ConvBERT model)"),VIe.forEach(t),wer=i(Y),r0=n(Y,"LI",{});var XIe=s(r0);b1e=n(XIe,"STRONG",{});var c6t=s(b1e);Aer=r(c6t,"data2vec-text"),c6t.forEach(t),Ler=r(XIe," \u2014 "),xW=n(XIe,"A",{href:!0});var f6t=s(xW);yer=r(f6t,"Data2VecTextForTokenClassification"),f6t.forEach(t),xer=r(XIe," (Data2VecText model)"),XIe.forEach(t),$er=i(Y),t0=n(Y,"LI",{});var zIe=s(t0);v1e=n(zIe,"STRONG",{});var m6t=s(v1e);ker=r(m6t,"deberta"),m6t.forEach(t),Ser=r(zIe," \u2014 "),$W=n(zIe,"A",{href:!0});var g6t=s($W);Rer=r(g6t,"DebertaForTokenClassification"),g6t.forEach(t),Per=r(zIe," (DeBERTa model)"),zIe.forEach(t),Ber=i(Y),a0=n(Y,"LI",{});var WIe=s(a0);F1e=n(WIe,"STRONG",{});var h6t=s(F1e);Ier=r(h6t,"deberta-v2"),h6t.forEach(t),Ner=r(WIe," \u2014 "),kW=n(WIe,"A",{href:!0});var p6t=s(kW);qer=r(p6t,"DebertaV2ForTokenClassification"),p6t.forEach(t),jer=r(WIe," (DeBERTa-v2 model)"),WIe.forEach(t),Der=i(Y),n0=n(Y,"LI",{});var QIe=s(n0);T1e=n(QIe,"STRONG",{});var _6t=s(T1e);Ger=r(_6t,"distilbert"),_6t.forEach(t),Oer=r(QIe," \u2014 "),SW=n(QIe,"A",{href:!0});var u6t=s(SW);Ver=r(u6t,"DistilBertForTokenClassification"),u6t.forEach(t),Xer=r(QIe," (DistilBERT model)"),QIe.forEach(t),zer=i(Y),s0=n(Y,"LI",{});var HIe=s(s0);M1e=n(HIe,"STRONG",{});var b6t=s(M1e);Wer=r(b6t,"electra"),b6t.forEach(t),Qer=r(HIe," \u2014 "),RW=n(HIe,"A",{href:!0});var v6t=s(RW);Her=r(v6t,"ElectraForTokenClassification"),v6t.forEach(t),Uer=r(HIe," (ELECTRA model)"),HIe.forEach(t),Jer=i(Y),l0=n(Y,"LI",{});var UIe=s(l0);E1e=n(UIe,"STRONG",{});var F6t=s(E1e);Yer=r(F6t,"flaubert"),F6t.forEach(t),Ker=r(UIe," \u2014 "),PW=n(UIe,"A",{href:!0});var T6t=s(PW);Zer=r(T6t,"FlaubertForTokenClassification"),T6t.forEach(t),eor=r(UIe," (FlauBERT model)"),UIe.forEach(t),oor=i(Y),i0=n(Y,"LI",{});var JIe=s(i0);C1e=n(JIe,"STRONG",{});var M6t=s(C1e);ror=r(M6t,"fnet"),M6t.forEach(t),tor=r(JIe," \u2014 "),BW=n(JIe,"A",{href:!0});var E6t=s(BW);aor=r(E6t,"FNetForTokenClassification"),E6t.forEach(t),nor=r(JIe," (FNet model)"),JIe.forEach(t),sor=i(Y),d0=n(Y,"LI",{});var YIe=s(d0);w1e=n(YIe,"STRONG",{});var C6t=s(w1e);lor=r(C6t,"funnel"),C6t.forEach(t),ior=r(YIe," \u2014 "),IW=n(YIe,"A",{href:!0});var w6t=s(IW);dor=r(w6t,"FunnelForTokenClassification"),w6t.forEach(t),cor=r(YIe," (Funnel Transformer model)"),YIe.forEach(t),mor=i(Y),c0=n(Y,"LI",{});var KIe=s(c0);A1e=n(KIe,"STRONG",{});var A6t=s(A1e);gor=r(A6t,"gpt2"),A6t.forEach(t),hor=r(KIe," \u2014 "),NW=n(KIe,"A",{href:!0});var L6t=s(NW);por=r(L6t,"GPT2ForTokenClassification"),L6t.forEach(t),_or=r(KIe," (OpenAI GPT-2 model)"),KIe.forEach(t),uor=i(Y),f0=n(Y,"LI",{});var ZIe=s(f0);L1e=n(ZIe,"STRONG",{});var y6t=s(L1e);bor=r(y6t,"ibert"),y6t.forEach(t),vor=r(ZIe," \u2014 "),qW=n(ZIe,"A",{href:!0});var x6t=s(qW);For=r(x6t,"IBertForTokenClassification"),x6t.forEach(t),Tor=r(ZIe," (I-BERT model)"),ZIe.forEach(t),Mor=i(Y),m0=n(Y,"LI",{});var eNe=s(m0);y1e=n(eNe,"STRONG",{});var $6t=s(y1e);Eor=r($6t,"layoutlm"),$6t.forEach(t),Cor=r(eNe," \u2014 "),jW=n(eNe,"A",{href:!0});var k6t=s(jW);wor=r(k6t,"LayoutLMForTokenClassification"),k6t.forEach(t),Aor=r(eNe," (LayoutLM model)"),eNe.forEach(t),Lor=i(Y),g0=n(Y,"LI",{});var oNe=s(g0);x1e=n(oNe,"STRONG",{});var S6t=s(x1e);yor=r(S6t,"layoutlmv2"),S6t.forEach(t),xor=r(oNe," \u2014 "),DW=n(oNe,"A",{href:!0});var R6t=s(DW);$or=r(R6t,"LayoutLMv2ForTokenClassification"),R6t.forEach(t),kor=r(oNe," (LayoutLMv2 model)"),oNe.forEach(t),Sor=i(Y),h0=n(Y,"LI",{});var rNe=s(h0);$1e=n(rNe,"STRONG",{});var P6t=s($1e);Ror=r(P6t,"layoutlmv3"),P6t.forEach(t),Por=r(rNe," \u2014 "),GW=n(rNe,"A",{href:!0});var B6t=s(GW);Bor=r(B6t,"LayoutLMv3ForTokenClassification"),B6t.forEach(t),Ior=r(rNe," (LayoutLMv3 model)"),rNe.forEach(t),Nor=i(Y),p0=n(Y,"LI",{});var tNe=s(p0);k1e=n(tNe,"STRONG",{});var I6t=s(k1e);qor=r(I6t,"longformer"),I6t.forEach(t),jor=r(tNe," \u2014 "),OW=n(tNe,"A",{href:!0});var N6t=s(OW);Dor=r(N6t,"LongformerForTokenClassification"),N6t.forEach(t),Gor=r(tNe," (Longformer model)"),tNe.forEach(t),Oor=i(Y),_0=n(Y,"LI",{});var aNe=s(_0);S1e=n(aNe,"STRONG",{});var q6t=s(S1e);Vor=r(q6t,"luke"),q6t.forEach(t),Xor=r(aNe," \u2014 "),VW=n(aNe,"A",{href:!0});var j6t=s(VW);zor=r(j6t,"LukeForTokenClassification"),j6t.forEach(t),Wor=r(aNe," (LUKE model)"),aNe.forEach(t),Qor=i(Y),u0=n(Y,"LI",{});var nNe=s(u0);R1e=n(nNe,"STRONG",{});var D6t=s(R1e);Hor=r(D6t,"megatron-bert"),D6t.forEach(t),Uor=r(nNe," \u2014 "),XW=n(nNe,"A",{href:!0});var G6t=s(XW);Jor=r(G6t,"MegatronBertForTokenClassification"),G6t.forEach(t),Yor=r(nNe," (Megatron-BERT model)"),nNe.forEach(t),Kor=i(Y),b0=n(Y,"LI",{});var sNe=s(b0);P1e=n(sNe,"STRONG",{});var O6t=s(P1e);Zor=r(O6t,"mobilebert"),O6t.forEach(t),err=r(sNe," \u2014 "),zW=n(sNe,"A",{href:!0});var V6t=s(zW);orr=r(V6t,"MobileBertForTokenClassification"),V6t.forEach(t),rrr=r(sNe," (MobileBERT model)"),sNe.forEach(t),trr=i(Y),v0=n(Y,"LI",{});var lNe=s(v0);B1e=n(lNe,"STRONG",{});var X6t=s(B1e);arr=r(X6t,"mpnet"),X6t.forEach(t),nrr=r(lNe," \u2014 "),WW=n(lNe,"A",{href:!0});var z6t=s(WW);srr=r(z6t,"MPNetForTokenClassification"),z6t.forEach(t),lrr=r(lNe," (MPNet model)"),lNe.forEach(t),irr=i(Y),F0=n(Y,"LI",{});var iNe=s(F0);I1e=n(iNe,"STRONG",{});var W6t=s(I1e);drr=r(W6t,"nezha"),W6t.forEach(t),crr=r(iNe," \u2014 "),QW=n(iNe,"A",{href:!0});var Q6t=s(QW);frr=r(Q6t,"NezhaForTokenClassification"),Q6t.forEach(t),mrr=r(iNe," (Nezha model)"),iNe.forEach(t),grr=i(Y),T0=n(Y,"LI",{});var dNe=s(T0);N1e=n(dNe,"STRONG",{});var H6t=s(N1e);hrr=r(H6t,"nystromformer"),H6t.forEach(t),prr=r(dNe," \u2014 "),HW=n(dNe,"A",{href:!0});var U6t=s(HW);_rr=r(U6t,"NystromformerForTokenClassification"),U6t.forEach(t),urr=r(dNe," (Nystr\xF6mformer model)"),dNe.forEach(t),brr=i(Y),M0=n(Y,"LI",{});var cNe=s(M0);q1e=n(cNe,"STRONG",{});var J6t=s(q1e);vrr=r(J6t,"qdqbert"),J6t.forEach(t),Frr=r(cNe," \u2014 "),UW=n(cNe,"A",{href:!0});var Y6t=s(UW);Trr=r(Y6t,"QDQBertForTokenClassification"),Y6t.forEach(t),Mrr=r(cNe," (QDQBert model)"),cNe.forEach(t),Err=i(Y),E0=n(Y,"LI",{});var fNe=s(E0);j1e=n(fNe,"STRONG",{});var K6t=s(j1e);Crr=r(K6t,"rembert"),K6t.forEach(t),wrr=r(fNe," \u2014 "),JW=n(fNe,"A",{href:!0});var Z6t=s(JW);Arr=r(Z6t,"RemBertForTokenClassification"),Z6t.forEach(t),Lrr=r(fNe," (RemBERT model)"),fNe.forEach(t),yrr=i(Y),C0=n(Y,"LI",{});var mNe=s(C0);D1e=n(mNe,"STRONG",{});var eAt=s(D1e);xrr=r(eAt,"roberta"),eAt.forEach(t),$rr=r(mNe," \u2014 "),YW=n(mNe,"A",{href:!0});var oAt=s(YW);krr=r(oAt,"RobertaForTokenClassification"),oAt.forEach(t),Srr=r(mNe," (RoBERTa model)"),mNe.forEach(t),Rrr=i(Y),w0=n(Y,"LI",{});var gNe=s(w0);G1e=n(gNe,"STRONG",{});var rAt=s(G1e);Prr=r(rAt,"roformer"),rAt.forEach(t),Brr=r(gNe," \u2014 "),KW=n(gNe,"A",{href:!0});var tAt=s(KW);Irr=r(tAt,"RoFormerForTokenClassification"),tAt.forEach(t),Nrr=r(gNe," (RoFormer model)"),gNe.forEach(t),qrr=i(Y),A0=n(Y,"LI",{});var hNe=s(A0);O1e=n(hNe,"STRONG",{});var aAt=s(O1e);jrr=r(aAt,"squeezebert"),aAt.forEach(t),Drr=r(hNe," \u2014 "),ZW=n(hNe,"A",{href:!0});var nAt=s(ZW);Grr=r(nAt,"SqueezeBertForTokenClassification"),nAt.forEach(t),Orr=r(hNe," (SqueezeBERT model)"),hNe.forEach(t),Vrr=i(Y),L0=n(Y,"LI",{});var pNe=s(L0);V1e=n(pNe,"STRONG",{});var sAt=s(V1e);Xrr=r(sAt,"xlm"),sAt.forEach(t),zrr=r(pNe," \u2014 "),eQ=n(pNe,"A",{href:!0});var lAt=s(eQ);Wrr=r(lAt,"XLMForTokenClassification"),lAt.forEach(t),Qrr=r(pNe," (XLM model)"),pNe.forEach(t),Hrr=i(Y),y0=n(Y,"LI",{});var _Ne=s(y0);X1e=n(_Ne,"STRONG",{});var iAt=s(X1e);Urr=r(iAt,"xlm-roberta"),iAt.forEach(t),Jrr=r(_Ne," \u2014 "),oQ=n(_Ne,"A",{href:!0});var dAt=s(oQ);Yrr=r(dAt,"XLMRobertaForTokenClassification"),dAt.forEach(t),Krr=r(_Ne," (XLM-RoBERTa model)"),_Ne.forEach(t),Zrr=i(Y),x0=n(Y,"LI",{});var uNe=s(x0);z1e=n(uNe,"STRONG",{});var cAt=s(z1e);etr=r(cAt,"xlm-roberta-xl"),cAt.forEach(t),otr=r(uNe," \u2014 "),rQ=n(uNe,"A",{href:!0});var fAt=s(rQ);rtr=r(fAt,"XLMRobertaXLForTokenClassification"),fAt.forEach(t),ttr=r(uNe," (XLM-RoBERTa-XL model)"),uNe.forEach(t),atr=i(Y),$0=n(Y,"LI",{});var bNe=s($0);W1e=n(bNe,"STRONG",{});var mAt=s(W1e);ntr=r(mAt,"xlnet"),mAt.forEach(t),str=r(bNe," \u2014 "),tQ=n(bNe,"A",{href:!0});var gAt=s(tQ);ltr=r(gAt,"XLNetForTokenClassification"),gAt.forEach(t),itr=r(bNe," (XLNet model)"),bNe.forEach(t),dtr=i(Y),k0=n(Y,"LI",{});var vNe=s(k0);Q1e=n(vNe,"STRONG",{});var hAt=s(Q1e);ctr=r(hAt,"yoso"),hAt.forEach(t),ftr=r(vNe," \u2014 "),aQ=n(vNe,"A",{href:!0});var pAt=s(aQ);mtr=r(pAt,"YosoForTokenClassification"),pAt.forEach(t),gtr=r(vNe," (YOSO model)"),vNe.forEach(t),Y.forEach(t),htr=i(_a),S0=n(_a,"P",{});var FNe=s(S0);ptr=r(FNe,"The model is set in evaluation mode by default using "),H1e=n(FNe,"CODE",{});var _At=s(H1e);_tr=r(_At,"model.eval()"),_At.forEach(t),utr=r(FNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=n(FNe,"CODE",{});var uAt=s(U1e);btr=r(uAt,"model.train()"),uAt.forEach(t),FNe.forEach(t),vtr=i(_a),T(R0.$$.fragment,_a),_a.forEach(t),gl.forEach(t),sWe=i(f),ud=n(f,"H2",{class:!0});var mHe=s(ud);P0=n(mHe,"A",{id:!0,class:!0,href:!0});var bAt=s(P0);J1e=n(bAt,"SPAN",{});var vAt=s(J1e);T(Vy.$$.fragment,vAt),vAt.forEach(t),bAt.forEach(t),Ftr=i(mHe),Y1e=n(mHe,"SPAN",{});var FAt=s(Y1e);Ttr=r(FAt,"AutoModelForQuestionAnswering"),FAt.forEach(t),mHe.forEach(t),lWe=i(f),Go=n(f,"DIV",{class:!0});var hl=s(Go);T(Xy.$$.fragment,hl),Mtr=i(hl),bd=n(hl,"P",{});var Vte=s(bd);Etr=r(Vte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),nQ=n(Vte,"A",{href:!0});var TAt=s(nQ);Ctr=r(TAt,"from_pretrained()"),TAt.forEach(t),wtr=r(Vte," class method or the "),sQ=n(Vte,"A",{href:!0});var MAt=s(sQ);Atr=r(MAt,"from_config()"),MAt.forEach(t),Ltr=r(Vte,` class
method.`),Vte.forEach(t),ytr=i(hl),zy=n(hl,"P",{});var gHe=s(zy);xtr=r(gHe,"This class cannot be instantiated directly using "),K1e=n(gHe,"CODE",{});var EAt=s(K1e);$tr=r(EAt,"__init__()"),EAt.forEach(t),ktr=r(gHe," (throws an error)."),gHe.forEach(t),Str=i(hl),ut=n(hl,"DIV",{class:!0});var QA=s(ut);T(Wy.$$.fragment,QA),Rtr=i(QA),Z1e=n(QA,"P",{});var CAt=s(Z1e);Ptr=r(CAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CAt.forEach(t),Btr=i(QA),vd=n(QA,"P",{});var Xte=s(vd);Itr=r(Xte,`Note:
Loading a model from its configuration file does `),e4e=n(Xte,"STRONG",{});var wAt=s(e4e);Ntr=r(wAt,"not"),wAt.forEach(t),qtr=r(Xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(Xte,"A",{href:!0});var AAt=s(lQ);jtr=r(AAt,"from_pretrained()"),AAt.forEach(t),Dtr=r(Xte," to load the model weights."),Xte.forEach(t),Gtr=i(QA),T(B0.$$.fragment,QA),QA.forEach(t),Otr=i(hl),so=n(hl,"DIV",{class:!0});var ua=s(so);T(Qy.$$.fragment,ua),Vtr=i(ua),o4e=n(ua,"P",{});var LAt=s(o4e);Xtr=r(LAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LAt.forEach(t),ztr=i(ua),za=n(ua,"P",{});var HA=s(za);Wtr=r(HA,"The model class to instantiate is selected based on the "),r4e=n(HA,"CODE",{});var yAt=s(r4e);Qtr=r(yAt,"model_type"),yAt.forEach(t),Htr=r(HA,` property of the config object (either
passed as an argument or loaded from `),t4e=n(HA,"CODE",{});var xAt=s(t4e);Utr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),Jtr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(HA,"CODE",{});var $At=s(a4e);Ytr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),Ktr=r(HA,":"),HA.forEach(t),Ztr=i(ua),V=n(ua,"UL",{});var X=s(V);I0=n(X,"LI",{});var TNe=s(I0);n4e=n(TNe,"STRONG",{});var kAt=s(n4e);ear=r(kAt,"albert"),kAt.forEach(t),oar=r(TNe," \u2014 "),iQ=n(TNe,"A",{href:!0});var SAt=s(iQ);rar=r(SAt,"AlbertForQuestionAnswering"),SAt.forEach(t),tar=r(TNe," (ALBERT model)"),TNe.forEach(t),aar=i(X),N0=n(X,"LI",{});var MNe=s(N0);s4e=n(MNe,"STRONG",{});var RAt=s(s4e);nar=r(RAt,"bart"),RAt.forEach(t),sar=r(MNe," \u2014 "),dQ=n(MNe,"A",{href:!0});var PAt=s(dQ);lar=r(PAt,"BartForQuestionAnswering"),PAt.forEach(t),iar=r(MNe," (BART model)"),MNe.forEach(t),dar=i(X),q0=n(X,"LI",{});var ENe=s(q0);l4e=n(ENe,"STRONG",{});var BAt=s(l4e);car=r(BAt,"bert"),BAt.forEach(t),far=r(ENe," \u2014 "),cQ=n(ENe,"A",{href:!0});var IAt=s(cQ);mar=r(IAt,"BertForQuestionAnswering"),IAt.forEach(t),gar=r(ENe," (BERT model)"),ENe.forEach(t),har=i(X),j0=n(X,"LI",{});var CNe=s(j0);i4e=n(CNe,"STRONG",{});var NAt=s(i4e);par=r(NAt,"big_bird"),NAt.forEach(t),_ar=r(CNe," \u2014 "),fQ=n(CNe,"A",{href:!0});var qAt=s(fQ);uar=r(qAt,"BigBirdForQuestionAnswering"),qAt.forEach(t),bar=r(CNe," (BigBird model)"),CNe.forEach(t),Far=i(X),D0=n(X,"LI",{});var wNe=s(D0);d4e=n(wNe,"STRONG",{});var jAt=s(d4e);Tar=r(jAt,"bigbird_pegasus"),jAt.forEach(t),Mar=r(wNe," \u2014 "),mQ=n(wNe,"A",{href:!0});var DAt=s(mQ);Ear=r(DAt,"BigBirdPegasusForQuestionAnswering"),DAt.forEach(t),Car=r(wNe," (BigBird-Pegasus model)"),wNe.forEach(t),war=i(X),G0=n(X,"LI",{});var ANe=s(G0);c4e=n(ANe,"STRONG",{});var GAt=s(c4e);Aar=r(GAt,"camembert"),GAt.forEach(t),Lar=r(ANe," \u2014 "),gQ=n(ANe,"A",{href:!0});var OAt=s(gQ);yar=r(OAt,"CamembertForQuestionAnswering"),OAt.forEach(t),xar=r(ANe," (CamemBERT model)"),ANe.forEach(t),$ar=i(X),O0=n(X,"LI",{});var LNe=s(O0);f4e=n(LNe,"STRONG",{});var VAt=s(f4e);kar=r(VAt,"canine"),VAt.forEach(t),Sar=r(LNe," \u2014 "),hQ=n(LNe,"A",{href:!0});var XAt=s(hQ);Rar=r(XAt,"CanineForQuestionAnswering"),XAt.forEach(t),Par=r(LNe," (CANINE model)"),LNe.forEach(t),Bar=i(X),V0=n(X,"LI",{});var yNe=s(V0);m4e=n(yNe,"STRONG",{});var zAt=s(m4e);Iar=r(zAt,"convbert"),zAt.forEach(t),Nar=r(yNe," \u2014 "),pQ=n(yNe,"A",{href:!0});var WAt=s(pQ);qar=r(WAt,"ConvBertForQuestionAnswering"),WAt.forEach(t),jar=r(yNe," (ConvBERT model)"),yNe.forEach(t),Dar=i(X),X0=n(X,"LI",{});var xNe=s(X0);g4e=n(xNe,"STRONG",{});var QAt=s(g4e);Gar=r(QAt,"data2vec-text"),QAt.forEach(t),Oar=r(xNe," \u2014 "),_Q=n(xNe,"A",{href:!0});var HAt=s(_Q);Var=r(HAt,"Data2VecTextForQuestionAnswering"),HAt.forEach(t),Xar=r(xNe," (Data2VecText model)"),xNe.forEach(t),zar=i(X),z0=n(X,"LI",{});var $Ne=s(z0);h4e=n($Ne,"STRONG",{});var UAt=s(h4e);War=r(UAt,"deberta"),UAt.forEach(t),Qar=r($Ne," \u2014 "),uQ=n($Ne,"A",{href:!0});var JAt=s(uQ);Har=r(JAt,"DebertaForQuestionAnswering"),JAt.forEach(t),Uar=r($Ne," (DeBERTa model)"),$Ne.forEach(t),Jar=i(X),W0=n(X,"LI",{});var kNe=s(W0);p4e=n(kNe,"STRONG",{});var YAt=s(p4e);Yar=r(YAt,"deberta-v2"),YAt.forEach(t),Kar=r(kNe," \u2014 "),bQ=n(kNe,"A",{href:!0});var KAt=s(bQ);Zar=r(KAt,"DebertaV2ForQuestionAnswering"),KAt.forEach(t),enr=r(kNe," (DeBERTa-v2 model)"),kNe.forEach(t),onr=i(X),Q0=n(X,"LI",{});var SNe=s(Q0);_4e=n(SNe,"STRONG",{});var ZAt=s(_4e);rnr=r(ZAt,"distilbert"),ZAt.forEach(t),tnr=r(SNe," \u2014 "),vQ=n(SNe,"A",{href:!0});var e7t=s(vQ);anr=r(e7t,"DistilBertForQuestionAnswering"),e7t.forEach(t),nnr=r(SNe," (DistilBERT model)"),SNe.forEach(t),snr=i(X),H0=n(X,"LI",{});var RNe=s(H0);u4e=n(RNe,"STRONG",{});var o7t=s(u4e);lnr=r(o7t,"electra"),o7t.forEach(t),inr=r(RNe," \u2014 "),FQ=n(RNe,"A",{href:!0});var r7t=s(FQ);dnr=r(r7t,"ElectraForQuestionAnswering"),r7t.forEach(t),cnr=r(RNe," (ELECTRA model)"),RNe.forEach(t),fnr=i(X),U0=n(X,"LI",{});var PNe=s(U0);b4e=n(PNe,"STRONG",{});var t7t=s(b4e);mnr=r(t7t,"flaubert"),t7t.forEach(t),gnr=r(PNe," \u2014 "),TQ=n(PNe,"A",{href:!0});var a7t=s(TQ);hnr=r(a7t,"FlaubertForQuestionAnsweringSimple"),a7t.forEach(t),pnr=r(PNe," (FlauBERT model)"),PNe.forEach(t),_nr=i(X),J0=n(X,"LI",{});var BNe=s(J0);v4e=n(BNe,"STRONG",{});var n7t=s(v4e);unr=r(n7t,"fnet"),n7t.forEach(t),bnr=r(BNe," \u2014 "),MQ=n(BNe,"A",{href:!0});var s7t=s(MQ);vnr=r(s7t,"FNetForQuestionAnswering"),s7t.forEach(t),Fnr=r(BNe," (FNet model)"),BNe.forEach(t),Tnr=i(X),Y0=n(X,"LI",{});var INe=s(Y0);F4e=n(INe,"STRONG",{});var l7t=s(F4e);Mnr=r(l7t,"funnel"),l7t.forEach(t),Enr=r(INe," \u2014 "),EQ=n(INe,"A",{href:!0});var i7t=s(EQ);Cnr=r(i7t,"FunnelForQuestionAnswering"),i7t.forEach(t),wnr=r(INe," (Funnel Transformer model)"),INe.forEach(t),Anr=i(X),K0=n(X,"LI",{});var NNe=s(K0);T4e=n(NNe,"STRONG",{});var d7t=s(T4e);Lnr=r(d7t,"gptj"),d7t.forEach(t),ynr=r(NNe," \u2014 "),CQ=n(NNe,"A",{href:!0});var c7t=s(CQ);xnr=r(c7t,"GPTJForQuestionAnswering"),c7t.forEach(t),$nr=r(NNe," (GPT-J model)"),NNe.forEach(t),knr=i(X),Z0=n(X,"LI",{});var qNe=s(Z0);M4e=n(qNe,"STRONG",{});var f7t=s(M4e);Snr=r(f7t,"ibert"),f7t.forEach(t),Rnr=r(qNe," \u2014 "),wQ=n(qNe,"A",{href:!0});var m7t=s(wQ);Pnr=r(m7t,"IBertForQuestionAnswering"),m7t.forEach(t),Bnr=r(qNe," (I-BERT model)"),qNe.forEach(t),Inr=i(X),eF=n(X,"LI",{});var jNe=s(eF);E4e=n(jNe,"STRONG",{});var g7t=s(E4e);Nnr=r(g7t,"layoutlmv2"),g7t.forEach(t),qnr=r(jNe," \u2014 "),AQ=n(jNe,"A",{href:!0});var h7t=s(AQ);jnr=r(h7t,"LayoutLMv2ForQuestionAnswering"),h7t.forEach(t),Dnr=r(jNe," (LayoutLMv2 model)"),jNe.forEach(t),Gnr=i(X),oF=n(X,"LI",{});var DNe=s(oF);C4e=n(DNe,"STRONG",{});var p7t=s(C4e);Onr=r(p7t,"layoutlmv3"),p7t.forEach(t),Vnr=r(DNe," \u2014 "),LQ=n(DNe,"A",{href:!0});var _7t=s(LQ);Xnr=r(_7t,"LayoutLMv3ForQuestionAnswering"),_7t.forEach(t),znr=r(DNe," (LayoutLMv3 model)"),DNe.forEach(t),Wnr=i(X),rF=n(X,"LI",{});var GNe=s(rF);w4e=n(GNe,"STRONG",{});var u7t=s(w4e);Qnr=r(u7t,"led"),u7t.forEach(t),Hnr=r(GNe," \u2014 "),yQ=n(GNe,"A",{href:!0});var b7t=s(yQ);Unr=r(b7t,"LEDForQuestionAnswering"),b7t.forEach(t),Jnr=r(GNe," (LED model)"),GNe.forEach(t),Ynr=i(X),tF=n(X,"LI",{});var ONe=s(tF);A4e=n(ONe,"STRONG",{});var v7t=s(A4e);Knr=r(v7t,"longformer"),v7t.forEach(t),Znr=r(ONe," \u2014 "),xQ=n(ONe,"A",{href:!0});var F7t=s(xQ);esr=r(F7t,"LongformerForQuestionAnswering"),F7t.forEach(t),osr=r(ONe," (Longformer model)"),ONe.forEach(t),rsr=i(X),aF=n(X,"LI",{});var VNe=s(aF);L4e=n(VNe,"STRONG",{});var T7t=s(L4e);tsr=r(T7t,"luke"),T7t.forEach(t),asr=r(VNe," \u2014 "),$Q=n(VNe,"A",{href:!0});var M7t=s($Q);nsr=r(M7t,"LukeForQuestionAnswering"),M7t.forEach(t),ssr=r(VNe," (LUKE model)"),VNe.forEach(t),lsr=i(X),nF=n(X,"LI",{});var XNe=s(nF);y4e=n(XNe,"STRONG",{});var E7t=s(y4e);isr=r(E7t,"lxmert"),E7t.forEach(t),dsr=r(XNe," \u2014 "),kQ=n(XNe,"A",{href:!0});var C7t=s(kQ);csr=r(C7t,"LxmertForQuestionAnswering"),C7t.forEach(t),fsr=r(XNe," (LXMERT model)"),XNe.forEach(t),msr=i(X),sF=n(X,"LI",{});var zNe=s(sF);x4e=n(zNe,"STRONG",{});var w7t=s(x4e);gsr=r(w7t,"mbart"),w7t.forEach(t),hsr=r(zNe," \u2014 "),SQ=n(zNe,"A",{href:!0});var A7t=s(SQ);psr=r(A7t,"MBartForQuestionAnswering"),A7t.forEach(t),_sr=r(zNe," (mBART model)"),zNe.forEach(t),usr=i(X),lF=n(X,"LI",{});var WNe=s(lF);$4e=n(WNe,"STRONG",{});var L7t=s($4e);bsr=r(L7t,"megatron-bert"),L7t.forEach(t),vsr=r(WNe," \u2014 "),RQ=n(WNe,"A",{href:!0});var y7t=s(RQ);Fsr=r(y7t,"MegatronBertForQuestionAnswering"),y7t.forEach(t),Tsr=r(WNe," (Megatron-BERT model)"),WNe.forEach(t),Msr=i(X),iF=n(X,"LI",{});var QNe=s(iF);k4e=n(QNe,"STRONG",{});var x7t=s(k4e);Esr=r(x7t,"mobilebert"),x7t.forEach(t),Csr=r(QNe," \u2014 "),PQ=n(QNe,"A",{href:!0});var $7t=s(PQ);wsr=r($7t,"MobileBertForQuestionAnswering"),$7t.forEach(t),Asr=r(QNe," (MobileBERT model)"),QNe.forEach(t),Lsr=i(X),dF=n(X,"LI",{});var HNe=s(dF);S4e=n(HNe,"STRONG",{});var k7t=s(S4e);ysr=r(k7t,"mpnet"),k7t.forEach(t),xsr=r(HNe," \u2014 "),BQ=n(HNe,"A",{href:!0});var S7t=s(BQ);$sr=r(S7t,"MPNetForQuestionAnswering"),S7t.forEach(t),ksr=r(HNe," (MPNet model)"),HNe.forEach(t),Ssr=i(X),cF=n(X,"LI",{});var UNe=s(cF);R4e=n(UNe,"STRONG",{});var R7t=s(R4e);Rsr=r(R7t,"mvp"),R7t.forEach(t),Psr=r(UNe," \u2014 "),IQ=n(UNe,"A",{href:!0});var P7t=s(IQ);Bsr=r(P7t,"MvpForQuestionAnswering"),P7t.forEach(t),Isr=r(UNe," (MVP model)"),UNe.forEach(t),Nsr=i(X),fF=n(X,"LI",{});var JNe=s(fF);P4e=n(JNe,"STRONG",{});var B7t=s(P4e);qsr=r(B7t,"nezha"),B7t.forEach(t),jsr=r(JNe," \u2014 "),NQ=n(JNe,"A",{href:!0});var I7t=s(NQ);Dsr=r(I7t,"NezhaForQuestionAnswering"),I7t.forEach(t),Gsr=r(JNe," (Nezha model)"),JNe.forEach(t),Osr=i(X),mF=n(X,"LI",{});var YNe=s(mF);B4e=n(YNe,"STRONG",{});var N7t=s(B4e);Vsr=r(N7t,"nystromformer"),N7t.forEach(t),Xsr=r(YNe," \u2014 "),qQ=n(YNe,"A",{href:!0});var q7t=s(qQ);zsr=r(q7t,"NystromformerForQuestionAnswering"),q7t.forEach(t),Wsr=r(YNe," (Nystr\xF6mformer model)"),YNe.forEach(t),Qsr=i(X),gF=n(X,"LI",{});var KNe=s(gF);I4e=n(KNe,"STRONG",{});var j7t=s(I4e);Hsr=r(j7t,"qdqbert"),j7t.forEach(t),Usr=r(KNe," \u2014 "),jQ=n(KNe,"A",{href:!0});var D7t=s(jQ);Jsr=r(D7t,"QDQBertForQuestionAnswering"),D7t.forEach(t),Ysr=r(KNe," (QDQBert model)"),KNe.forEach(t),Ksr=i(X),hF=n(X,"LI",{});var ZNe=s(hF);N4e=n(ZNe,"STRONG",{});var G7t=s(N4e);Zsr=r(G7t,"reformer"),G7t.forEach(t),elr=r(ZNe," \u2014 "),DQ=n(ZNe,"A",{href:!0});var O7t=s(DQ);olr=r(O7t,"ReformerForQuestionAnswering"),O7t.forEach(t),rlr=r(ZNe," (Reformer model)"),ZNe.forEach(t),tlr=i(X),pF=n(X,"LI",{});var eqe=s(pF);q4e=n(eqe,"STRONG",{});var V7t=s(q4e);alr=r(V7t,"rembert"),V7t.forEach(t),nlr=r(eqe," \u2014 "),GQ=n(eqe,"A",{href:!0});var X7t=s(GQ);slr=r(X7t,"RemBertForQuestionAnswering"),X7t.forEach(t),llr=r(eqe," (RemBERT model)"),eqe.forEach(t),ilr=i(X),_F=n(X,"LI",{});var oqe=s(_F);j4e=n(oqe,"STRONG",{});var z7t=s(j4e);dlr=r(z7t,"roberta"),z7t.forEach(t),clr=r(oqe," \u2014 "),OQ=n(oqe,"A",{href:!0});var W7t=s(OQ);flr=r(W7t,"RobertaForQuestionAnswering"),W7t.forEach(t),mlr=r(oqe," (RoBERTa model)"),oqe.forEach(t),glr=i(X),uF=n(X,"LI",{});var rqe=s(uF);D4e=n(rqe,"STRONG",{});var Q7t=s(D4e);hlr=r(Q7t,"roformer"),Q7t.forEach(t),plr=r(rqe," \u2014 "),VQ=n(rqe,"A",{href:!0});var H7t=s(VQ);_lr=r(H7t,"RoFormerForQuestionAnswering"),H7t.forEach(t),ulr=r(rqe," (RoFormer model)"),rqe.forEach(t),blr=i(X),bF=n(X,"LI",{});var tqe=s(bF);G4e=n(tqe,"STRONG",{});var U7t=s(G4e);vlr=r(U7t,"splinter"),U7t.forEach(t),Flr=r(tqe," \u2014 "),XQ=n(tqe,"A",{href:!0});var J7t=s(XQ);Tlr=r(J7t,"SplinterForQuestionAnswering"),J7t.forEach(t),Mlr=r(tqe," (Splinter model)"),tqe.forEach(t),Elr=i(X),vF=n(X,"LI",{});var aqe=s(vF);O4e=n(aqe,"STRONG",{});var Y7t=s(O4e);Clr=r(Y7t,"squeezebert"),Y7t.forEach(t),wlr=r(aqe," \u2014 "),zQ=n(aqe,"A",{href:!0});var K7t=s(zQ);Alr=r(K7t,"SqueezeBertForQuestionAnswering"),K7t.forEach(t),Llr=r(aqe," (SqueezeBERT model)"),aqe.forEach(t),ylr=i(X),FF=n(X,"LI",{});var nqe=s(FF);V4e=n(nqe,"STRONG",{});var Z7t=s(V4e);xlr=r(Z7t,"xlm"),Z7t.forEach(t),$lr=r(nqe," \u2014 "),WQ=n(nqe,"A",{href:!0});var eLt=s(WQ);klr=r(eLt,"XLMForQuestionAnsweringSimple"),eLt.forEach(t),Slr=r(nqe," (XLM model)"),nqe.forEach(t),Rlr=i(X),TF=n(X,"LI",{});var sqe=s(TF);X4e=n(sqe,"STRONG",{});var oLt=s(X4e);Plr=r(oLt,"xlm-roberta"),oLt.forEach(t),Blr=r(sqe," \u2014 "),QQ=n(sqe,"A",{href:!0});var rLt=s(QQ);Ilr=r(rLt,"XLMRobertaForQuestionAnswering"),rLt.forEach(t),Nlr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),qlr=i(X),MF=n(X,"LI",{});var lqe=s(MF);z4e=n(lqe,"STRONG",{});var tLt=s(z4e);jlr=r(tLt,"xlm-roberta-xl"),tLt.forEach(t),Dlr=r(lqe," \u2014 "),HQ=n(lqe,"A",{href:!0});var aLt=s(HQ);Glr=r(aLt,"XLMRobertaXLForQuestionAnswering"),aLt.forEach(t),Olr=r(lqe," (XLM-RoBERTa-XL model)"),lqe.forEach(t),Vlr=i(X),EF=n(X,"LI",{});var iqe=s(EF);W4e=n(iqe,"STRONG",{});var nLt=s(W4e);Xlr=r(nLt,"xlnet"),nLt.forEach(t),zlr=r(iqe," \u2014 "),UQ=n(iqe,"A",{href:!0});var sLt=s(UQ);Wlr=r(sLt,"XLNetForQuestionAnsweringSimple"),sLt.forEach(t),Qlr=r(iqe," (XLNet model)"),iqe.forEach(t),Hlr=i(X),CF=n(X,"LI",{});var dqe=s(CF);Q4e=n(dqe,"STRONG",{});var lLt=s(Q4e);Ulr=r(lLt,"yoso"),lLt.forEach(t),Jlr=r(dqe," \u2014 "),JQ=n(dqe,"A",{href:!0});var iLt=s(JQ);Ylr=r(iLt,"YosoForQuestionAnswering"),iLt.forEach(t),Klr=r(dqe," (YOSO model)"),dqe.forEach(t),X.forEach(t),Zlr=i(ua),wF=n(ua,"P",{});var cqe=s(wF);eir=r(cqe,"The model is set in evaluation mode by default using "),H4e=n(cqe,"CODE",{});var dLt=s(H4e);oir=r(dLt,"model.eval()"),dLt.forEach(t),rir=r(cqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U4e=n(cqe,"CODE",{});var cLt=s(U4e);tir=r(cLt,"model.train()"),cLt.forEach(t),cqe.forEach(t),air=i(ua),T(AF.$$.fragment,ua),ua.forEach(t),hl.forEach(t),iWe=i(f),Fd=n(f,"H2",{class:!0});var hHe=s(Fd);LF=n(hHe,"A",{id:!0,class:!0,href:!0});var fLt=s(LF);J4e=n(fLt,"SPAN",{});var mLt=s(J4e);T(Hy.$$.fragment,mLt),mLt.forEach(t),fLt.forEach(t),nir=i(hHe),Y4e=n(hHe,"SPAN",{});var gLt=s(Y4e);sir=r(gLt,"AutoModelForTableQuestionAnswering"),gLt.forEach(t),hHe.forEach(t),dWe=i(f),Oo=n(f,"DIV",{class:!0});var pl=s(Oo);T(Uy.$$.fragment,pl),lir=i(pl),Td=n(pl,"P",{});var zte=s(Td);iir=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YQ=n(zte,"A",{href:!0});var hLt=s(YQ);dir=r(hLt,"from_pretrained()"),hLt.forEach(t),cir=r(zte," class method or the "),KQ=n(zte,"A",{href:!0});var pLt=s(KQ);fir=r(pLt,"from_config()"),pLt.forEach(t),mir=r(zte,` class
method.`),zte.forEach(t),gir=i(pl),Jy=n(pl,"P",{});var pHe=s(Jy);hir=r(pHe,"This class cannot be instantiated directly using "),K4e=n(pHe,"CODE",{});var _Lt=s(K4e);pir=r(_Lt,"__init__()"),_Lt.forEach(t),_ir=r(pHe," (throws an error)."),pHe.forEach(t),uir=i(pl),bt=n(pl,"DIV",{class:!0});var UA=s(bt);T(Yy.$$.fragment,UA),bir=i(UA),Z4e=n(UA,"P",{});var uLt=s(Z4e);vir=r(uLt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),uLt.forEach(t),Fir=i(UA),Md=n(UA,"P",{});var Wte=s(Md);Tir=r(Wte,`Note:
Loading a model from its configuration file does `),ebe=n(Wte,"STRONG",{});var bLt=s(ebe);Mir=r(bLt,"not"),bLt.forEach(t),Eir=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(Wte,"A",{href:!0});var vLt=s(ZQ);Cir=r(vLt,"from_pretrained()"),vLt.forEach(t),wir=r(Wte," to load the model weights."),Wte.forEach(t),Air=i(UA),T(yF.$$.fragment,UA),UA.forEach(t),Lir=i(pl),lo=n(pl,"DIV",{class:!0});var ba=s(lo);T(Ky.$$.fragment,ba),yir=i(ba),obe=n(ba,"P",{});var FLt=s(obe);xir=r(FLt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FLt.forEach(t),$ir=i(ba),Wa=n(ba,"P",{});var JA=s(Wa);kir=r(JA,"The model class to instantiate is selected based on the "),rbe=n(JA,"CODE",{});var TLt=s(rbe);Sir=r(TLt,"model_type"),TLt.forEach(t),Rir=r(JA,` property of the config object (either
passed as an argument or loaded from `),tbe=n(JA,"CODE",{});var MLt=s(tbe);Pir=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),Bir=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(JA,"CODE",{});var ELt=s(abe);Iir=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),Nir=r(JA,":"),JA.forEach(t),qir=i(ba),nbe=n(ba,"UL",{});var CLt=s(nbe);xF=n(CLt,"LI",{});var fqe=s(xF);sbe=n(fqe,"STRONG",{});var wLt=s(sbe);jir=r(wLt,"tapas"),wLt.forEach(t),Dir=r(fqe," \u2014 "),eH=n(fqe,"A",{href:!0});var ALt=s(eH);Gir=r(ALt,"TapasForQuestionAnswering"),ALt.forEach(t),Oir=r(fqe," (TAPAS model)"),fqe.forEach(t),CLt.forEach(t),Vir=i(ba),$F=n(ba,"P",{});var mqe=s($F);Xir=r(mqe,"The model is set in evaluation mode by default using "),lbe=n(mqe,"CODE",{});var LLt=s(lbe);zir=r(LLt,"model.eval()"),LLt.forEach(t),Wir=r(mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=n(mqe,"CODE",{});var yLt=s(ibe);Qir=r(yLt,"model.train()"),yLt.forEach(t),mqe.forEach(t),Hir=i(ba),T(kF.$$.fragment,ba),ba.forEach(t),pl.forEach(t),cWe=i(f),Ed=n(f,"H2",{class:!0});var _He=s(Ed);SF=n(_He,"A",{id:!0,class:!0,href:!0});var xLt=s(SF);dbe=n(xLt,"SPAN",{});var $Lt=s(dbe);T(Zy.$$.fragment,$Lt),$Lt.forEach(t),xLt.forEach(t),Uir=i(_He),cbe=n(_He,"SPAN",{});var kLt=s(cbe);Jir=r(kLt,"AutoModelForImageClassification"),kLt.forEach(t),_He.forEach(t),fWe=i(f),Vo=n(f,"DIV",{class:!0});var _l=s(Vo);T(e9.$$.fragment,_l),Yir=i(_l),Cd=n(_l,"P",{});var Qte=s(Cd);Kir=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oH=n(Qte,"A",{href:!0});var SLt=s(oH);Zir=r(SLt,"from_pretrained()"),SLt.forEach(t),edr=r(Qte," class method or the "),rH=n(Qte,"A",{href:!0});var RLt=s(rH);odr=r(RLt,"from_config()"),RLt.forEach(t),rdr=r(Qte,` class
method.`),Qte.forEach(t),tdr=i(_l),o9=n(_l,"P",{});var uHe=s(o9);adr=r(uHe,"This class cannot be instantiated directly using "),fbe=n(uHe,"CODE",{});var PLt=s(fbe);ndr=r(PLt,"__init__()"),PLt.forEach(t),sdr=r(uHe," (throws an error)."),uHe.forEach(t),ldr=i(_l),vt=n(_l,"DIV",{class:!0});var YA=s(vt);T(r9.$$.fragment,YA),idr=i(YA),mbe=n(YA,"P",{});var BLt=s(mbe);ddr=r(BLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BLt.forEach(t),cdr=i(YA),wd=n(YA,"P",{});var Hte=s(wd);fdr=r(Hte,`Note:
Loading a model from its configuration file does `),gbe=n(Hte,"STRONG",{});var ILt=s(gbe);mdr=r(ILt,"not"),ILt.forEach(t),gdr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Hte,"A",{href:!0});var NLt=s(tH);hdr=r(NLt,"from_pretrained()"),NLt.forEach(t),pdr=r(Hte," to load the model weights."),Hte.forEach(t),_dr=i(YA),T(RF.$$.fragment,YA),YA.forEach(t),udr=i(_l),io=n(_l,"DIV",{class:!0});var va=s(io);T(t9.$$.fragment,va),bdr=i(va),hbe=n(va,"P",{});var qLt=s(hbe);vdr=r(qLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qLt.forEach(t),Fdr=i(va),Qa=n(va,"P",{});var KA=s(Qa);Tdr=r(KA,"The model class to instantiate is selected based on the "),pbe=n(KA,"CODE",{});var jLt=s(pbe);Mdr=r(jLt,"model_type"),jLt.forEach(t),Edr=r(KA,` property of the config object (either
passed as an argument or loaded from `),_be=n(KA,"CODE",{});var DLt=s(_be);Cdr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),wdr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(KA,"CODE",{});var GLt=s(ube);Adr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),Ldr=r(KA,":"),KA.forEach(t),ydr=i(va),be=n(va,"UL",{});var Fe=s(be);PF=n(Fe,"LI",{});var gqe=s(PF);bbe=n(gqe,"STRONG",{});var OLt=s(bbe);xdr=r(OLt,"beit"),OLt.forEach(t),$dr=r(gqe," \u2014 "),aH=n(gqe,"A",{href:!0});var VLt=s(aH);kdr=r(VLt,"BeitForImageClassification"),VLt.forEach(t),Sdr=r(gqe," (BEiT model)"),gqe.forEach(t),Rdr=i(Fe),BF=n(Fe,"LI",{});var hqe=s(BF);vbe=n(hqe,"STRONG",{});var XLt=s(vbe);Pdr=r(XLt,"convnext"),XLt.forEach(t),Bdr=r(hqe," \u2014 "),nH=n(hqe,"A",{href:!0});var zLt=s(nH);Idr=r(zLt,"ConvNextForImageClassification"),zLt.forEach(t),Ndr=r(hqe," (ConvNeXT model)"),hqe.forEach(t),qdr=i(Fe),IF=n(Fe,"LI",{});var pqe=s(IF);Fbe=n(pqe,"STRONG",{});var WLt=s(Fbe);jdr=r(WLt,"cvt"),WLt.forEach(t),Ddr=r(pqe," \u2014 "),sH=n(pqe,"A",{href:!0});var QLt=s(sH);Gdr=r(QLt,"CvtForImageClassification"),QLt.forEach(t),Odr=r(pqe," (CvT model)"),pqe.forEach(t),Vdr=i(Fe),NF=n(Fe,"LI",{});var _qe=s(NF);Tbe=n(_qe,"STRONG",{});var HLt=s(Tbe);Xdr=r(HLt,"data2vec-vision"),HLt.forEach(t),zdr=r(_qe," \u2014 "),lH=n(_qe,"A",{href:!0});var ULt=s(lH);Wdr=r(ULt,"Data2VecVisionForImageClassification"),ULt.forEach(t),Qdr=r(_qe," (Data2VecVision model)"),_qe.forEach(t),Hdr=i(Fe),Ys=n(Fe,"LI",{});var oR=s(Ys);Mbe=n(oR,"STRONG",{});var JLt=s(Mbe);Udr=r(JLt,"deit"),JLt.forEach(t),Jdr=r(oR," \u2014 "),iH=n(oR,"A",{href:!0});var YLt=s(iH);Ydr=r(YLt,"DeiTForImageClassification"),YLt.forEach(t),Kdr=r(oR," or "),dH=n(oR,"A",{href:!0});var KLt=s(dH);Zdr=r(KLt,"DeiTForImageClassificationWithTeacher"),KLt.forEach(t),ecr=r(oR," (DeiT model)"),oR.forEach(t),ocr=i(Fe),qF=n(Fe,"LI",{});var uqe=s(qF);Ebe=n(uqe,"STRONG",{});var ZLt=s(Ebe);rcr=r(ZLt,"imagegpt"),ZLt.forEach(t),tcr=r(uqe," \u2014 "),cH=n(uqe,"A",{href:!0});var eyt=s(cH);acr=r(eyt,"ImageGPTForImageClassification"),eyt.forEach(t),ncr=r(uqe," (ImageGPT model)"),uqe.forEach(t),scr=i(Fe),Ks=n(Fe,"LI",{});var rR=s(Ks);Cbe=n(rR,"STRONG",{});var oyt=s(Cbe);lcr=r(oyt,"levit"),oyt.forEach(t),icr=r(rR," \u2014 "),fH=n(rR,"A",{href:!0});var ryt=s(fH);dcr=r(ryt,"LevitForImageClassification"),ryt.forEach(t),ccr=r(rR," or "),mH=n(rR,"A",{href:!0});var tyt=s(mH);fcr=r(tyt,"LevitForImageClassificationWithTeacher"),tyt.forEach(t),mcr=r(rR," (LeViT model)"),rR.forEach(t),gcr=i(Fe),jF=n(Fe,"LI",{});var bqe=s(jF);wbe=n(bqe,"STRONG",{});var ayt=s(wbe);hcr=r(ayt,"mobilevit"),ayt.forEach(t),pcr=r(bqe," \u2014 "),gH=n(bqe,"A",{href:!0});var nyt=s(gH);_cr=r(nyt,"MobileViTForImageClassification"),nyt.forEach(t),ucr=r(bqe," (MobileViT model)"),bqe.forEach(t),bcr=i(Fe),Ft=n(Fe,"LI",{});var Bf=s(Ft);Abe=n(Bf,"STRONG",{});var syt=s(Abe);vcr=r(syt,"perceiver"),syt.forEach(t),Fcr=r(Bf," \u2014 "),hH=n(Bf,"A",{href:!0});var lyt=s(hH);Tcr=r(lyt,"PerceiverForImageClassificationLearned"),lyt.forEach(t),Mcr=r(Bf," or "),pH=n(Bf,"A",{href:!0});var iyt=s(pH);Ecr=r(iyt,"PerceiverForImageClassificationFourier"),iyt.forEach(t),Ccr=r(Bf," or "),_H=n(Bf,"A",{href:!0});var dyt=s(_H);wcr=r(dyt,"PerceiverForImageClassificationConvProcessing"),dyt.forEach(t),Acr=r(Bf," (Perceiver model)"),Bf.forEach(t),Lcr=i(Fe),DF=n(Fe,"LI",{});var vqe=s(DF);Lbe=n(vqe,"STRONG",{});var cyt=s(Lbe);ycr=r(cyt,"poolformer"),cyt.forEach(t),xcr=r(vqe," \u2014 "),uH=n(vqe,"A",{href:!0});var fyt=s(uH);$cr=r(fyt,"PoolFormerForImageClassification"),fyt.forEach(t),kcr=r(vqe," (PoolFormer model)"),vqe.forEach(t),Scr=i(Fe),GF=n(Fe,"LI",{});var Fqe=s(GF);ybe=n(Fqe,"STRONG",{});var myt=s(ybe);Rcr=r(myt,"regnet"),myt.forEach(t),Pcr=r(Fqe," \u2014 "),bH=n(Fqe,"A",{href:!0});var gyt=s(bH);Bcr=r(gyt,"RegNetForImageClassification"),gyt.forEach(t),Icr=r(Fqe," (RegNet model)"),Fqe.forEach(t),Ncr=i(Fe),OF=n(Fe,"LI",{});var Tqe=s(OF);xbe=n(Tqe,"STRONG",{});var hyt=s(xbe);qcr=r(hyt,"resnet"),hyt.forEach(t),jcr=r(Tqe," \u2014 "),vH=n(Tqe,"A",{href:!0});var pyt=s(vH);Dcr=r(pyt,"ResNetForImageClassification"),pyt.forEach(t),Gcr=r(Tqe," (ResNet model)"),Tqe.forEach(t),Ocr=i(Fe),VF=n(Fe,"LI",{});var Mqe=s(VF);$be=n(Mqe,"STRONG",{});var _yt=s($be);Vcr=r(_yt,"segformer"),_yt.forEach(t),Xcr=r(Mqe," \u2014 "),FH=n(Mqe,"A",{href:!0});var uyt=s(FH);zcr=r(uyt,"SegformerForImageClassification"),uyt.forEach(t),Wcr=r(Mqe," (SegFormer model)"),Mqe.forEach(t),Qcr=i(Fe),XF=n(Fe,"LI",{});var Eqe=s(XF);kbe=n(Eqe,"STRONG",{});var byt=s(kbe);Hcr=r(byt,"swin"),byt.forEach(t),Ucr=r(Eqe," \u2014 "),TH=n(Eqe,"A",{href:!0});var vyt=s(TH);Jcr=r(vyt,"SwinForImageClassification"),vyt.forEach(t),Ycr=r(Eqe," (Swin Transformer model)"),Eqe.forEach(t),Kcr=i(Fe),zF=n(Fe,"LI",{});var Cqe=s(zF);Sbe=n(Cqe,"STRONG",{});var Fyt=s(Sbe);Zcr=r(Fyt,"swinv2"),Fyt.forEach(t),efr=r(Cqe," \u2014 "),MH=n(Cqe,"A",{href:!0});var Tyt=s(MH);ofr=r(Tyt,"Swinv2ForImageClassification"),Tyt.forEach(t),rfr=r(Cqe," (Swin Transformer V2 model)"),Cqe.forEach(t),tfr=i(Fe),WF=n(Fe,"LI",{});var wqe=s(WF);Rbe=n(wqe,"STRONG",{});var Myt=s(Rbe);afr=r(Myt,"van"),Myt.forEach(t),nfr=r(wqe," \u2014 "),EH=n(wqe,"A",{href:!0});var Eyt=s(EH);sfr=r(Eyt,"VanForImageClassification"),Eyt.forEach(t),lfr=r(wqe," (VAN model)"),wqe.forEach(t),ifr=i(Fe),QF=n(Fe,"LI",{});var Aqe=s(QF);Pbe=n(Aqe,"STRONG",{});var Cyt=s(Pbe);dfr=r(Cyt,"vit"),Cyt.forEach(t),cfr=r(Aqe," \u2014 "),CH=n(Aqe,"A",{href:!0});var wyt=s(CH);ffr=r(wyt,"ViTForImageClassification"),wyt.forEach(t),mfr=r(Aqe," (ViT model)"),Aqe.forEach(t),Fe.forEach(t),gfr=i(va),HF=n(va,"P",{});var Lqe=s(HF);hfr=r(Lqe,"The model is set in evaluation mode by default using "),Bbe=n(Lqe,"CODE",{});var Ayt=s(Bbe);pfr=r(Ayt,"model.eval()"),Ayt.forEach(t),_fr=r(Lqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(Lqe,"CODE",{});var Lyt=s(Ibe);ufr=r(Lyt,"model.train()"),Lyt.forEach(t),Lqe.forEach(t),bfr=i(va),T(UF.$$.fragment,va),va.forEach(t),_l.forEach(t),mWe=i(f),Ad=n(f,"H2",{class:!0});var bHe=s(Ad);JF=n(bHe,"A",{id:!0,class:!0,href:!0});var yyt=s(JF);Nbe=n(yyt,"SPAN",{});var xyt=s(Nbe);T(a9.$$.fragment,xyt),xyt.forEach(t),yyt.forEach(t),vfr=i(bHe),qbe=n(bHe,"SPAN",{});var $yt=s(qbe);Ffr=r($yt,"AutoModelForVision2Seq"),$yt.forEach(t),bHe.forEach(t),gWe=i(f),Xo=n(f,"DIV",{class:!0});var ul=s(Xo);T(n9.$$.fragment,ul),Tfr=i(ul),Ld=n(ul,"P",{});var Ute=s(Ld);Mfr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wH=n(Ute,"A",{href:!0});var kyt=s(wH);Efr=r(kyt,"from_pretrained()"),kyt.forEach(t),Cfr=r(Ute," class method or the "),AH=n(Ute,"A",{href:!0});var Syt=s(AH);wfr=r(Syt,"from_config()"),Syt.forEach(t),Afr=r(Ute,` class
method.`),Ute.forEach(t),Lfr=i(ul),s9=n(ul,"P",{});var vHe=s(s9);yfr=r(vHe,"This class cannot be instantiated directly using "),jbe=n(vHe,"CODE",{});var Ryt=s(jbe);xfr=r(Ryt,"__init__()"),Ryt.forEach(t),$fr=r(vHe," (throws an error)."),vHe.forEach(t),kfr=i(ul),Tt=n(ul,"DIV",{class:!0});var ZA=s(Tt);T(l9.$$.fragment,ZA),Sfr=i(ZA),Dbe=n(ZA,"P",{});var Pyt=s(Dbe);Rfr=r(Pyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pyt.forEach(t),Pfr=i(ZA),yd=n(ZA,"P",{});var Jte=s(yd);Bfr=r(Jte,`Note:
Loading a model from its configuration file does `),Gbe=n(Jte,"STRONG",{});var Byt=s(Gbe);Ifr=r(Byt,"not"),Byt.forEach(t),Nfr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(Jte,"A",{href:!0});var Iyt=s(LH);qfr=r(Iyt,"from_pretrained()"),Iyt.forEach(t),jfr=r(Jte," to load the model weights."),Jte.forEach(t),Dfr=i(ZA),T(YF.$$.fragment,ZA),ZA.forEach(t),Gfr=i(ul),co=n(ul,"DIV",{class:!0});var Fa=s(co);T(i9.$$.fragment,Fa),Ofr=i(Fa),Obe=n(Fa,"P",{});var Nyt=s(Obe);Vfr=r(Nyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nyt.forEach(t),Xfr=i(Fa),Ha=n(Fa,"P",{});var e7=s(Ha);zfr=r(e7,"The model class to instantiate is selected based on the "),Vbe=n(e7,"CODE",{});var qyt=s(Vbe);Wfr=r(qyt,"model_type"),qyt.forEach(t),Qfr=r(e7,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(e7,"CODE",{});var jyt=s(Xbe);Hfr=r(jyt,"pretrained_model_name_or_path"),jyt.forEach(t),Ufr=r(e7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(e7,"CODE",{});var Dyt=s(zbe);Jfr=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),Yfr=r(e7,":"),e7.forEach(t),Kfr=i(Fa),Wbe=n(Fa,"UL",{});var Gyt=s(Wbe);KF=n(Gyt,"LI",{});var yqe=s(KF);Qbe=n(yqe,"STRONG",{});var Oyt=s(Qbe);Zfr=r(Oyt,"vision-encoder-decoder"),Oyt.forEach(t),emr=r(yqe," \u2014 "),yH=n(yqe,"A",{href:!0});var Vyt=s(yH);omr=r(Vyt,"VisionEncoderDecoderModel"),Vyt.forEach(t),rmr=r(yqe," (Vision Encoder decoder model)"),yqe.forEach(t),Gyt.forEach(t),tmr=i(Fa),ZF=n(Fa,"P",{});var xqe=s(ZF);amr=r(xqe,"The model is set in evaluation mode by default using "),Hbe=n(xqe,"CODE",{});var Xyt=s(Hbe);nmr=r(Xyt,"model.eval()"),Xyt.forEach(t),smr=r(xqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(xqe,"CODE",{});var zyt=s(Ube);lmr=r(zyt,"model.train()"),zyt.forEach(t),xqe.forEach(t),imr=i(Fa),T(eT.$$.fragment,Fa),Fa.forEach(t),ul.forEach(t),hWe=i(f),xd=n(f,"H2",{class:!0});var FHe=s(xd);oT=n(FHe,"A",{id:!0,class:!0,href:!0});var Wyt=s(oT);Jbe=n(Wyt,"SPAN",{});var Qyt=s(Jbe);T(d9.$$.fragment,Qyt),Qyt.forEach(t),Wyt.forEach(t),dmr=i(FHe),Ybe=n(FHe,"SPAN",{});var Hyt=s(Ybe);cmr=r(Hyt,"AutoModelForVisualQuestionAnswering"),Hyt.forEach(t),FHe.forEach(t),pWe=i(f),zo=n(f,"DIV",{class:!0});var bl=s(zo);T(c9.$$.fragment,bl),fmr=i(bl),$d=n(bl,"P",{});var Yte=s($d);mmr=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),xH=n(Yte,"A",{href:!0});var Uyt=s(xH);gmr=r(Uyt,"from_pretrained()"),Uyt.forEach(t),hmr=r(Yte," class method or the "),$H=n(Yte,"A",{href:!0});var Jyt=s($H);pmr=r(Jyt,"from_config()"),Jyt.forEach(t),_mr=r(Yte,` class
method.`),Yte.forEach(t),umr=i(bl),f9=n(bl,"P",{});var THe=s(f9);bmr=r(THe,"This class cannot be instantiated directly using "),Kbe=n(THe,"CODE",{});var Yyt=s(Kbe);vmr=r(Yyt,"__init__()"),Yyt.forEach(t),Fmr=r(THe," (throws an error)."),THe.forEach(t),Tmr=i(bl),Mt=n(bl,"DIV",{class:!0});var o7=s(Mt);T(m9.$$.fragment,o7),Mmr=i(o7),Zbe=n(o7,"P",{});var Kyt=s(Zbe);Emr=r(Kyt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Kyt.forEach(t),Cmr=i(o7),kd=n(o7,"P",{});var Kte=s(kd);wmr=r(Kte,`Note:
Loading a model from its configuration file does `),eve=n(Kte,"STRONG",{});var Zyt=s(eve);Amr=r(Zyt,"not"),Zyt.forEach(t),Lmr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(Kte,"A",{href:!0});var e9t=s(kH);ymr=r(e9t,"from_pretrained()"),e9t.forEach(t),xmr=r(Kte," to load the model weights."),Kte.forEach(t),$mr=i(o7),T(rT.$$.fragment,o7),o7.forEach(t),kmr=i(bl),fo=n(bl,"DIV",{class:!0});var Ta=s(fo);T(g9.$$.fragment,Ta),Smr=i(Ta),ove=n(Ta,"P",{});var o9t=s(ove);Rmr=r(o9t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),o9t.forEach(t),Pmr=i(Ta),Ua=n(Ta,"P",{});var r7=s(Ua);Bmr=r(r7,"The model class to instantiate is selected based on the "),rve=n(r7,"CODE",{});var r9t=s(rve);Imr=r(r9t,"model_type"),r9t.forEach(t),Nmr=r(r7,` property of the config object (either
passed as an argument or loaded from `),tve=n(r7,"CODE",{});var t9t=s(tve);qmr=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),jmr=r(r7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(r7,"CODE",{});var a9t=s(ave);Dmr=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),Gmr=r(r7,":"),r7.forEach(t),Omr=i(Ta),nve=n(Ta,"UL",{});var n9t=s(nve);tT=n(n9t,"LI",{});var $qe=s(tT);sve=n($qe,"STRONG",{});var s9t=s(sve);Vmr=r(s9t,"vilt"),s9t.forEach(t),Xmr=r($qe," \u2014 "),SH=n($qe,"A",{href:!0});var l9t=s(SH);zmr=r(l9t,"ViltForQuestionAnswering"),l9t.forEach(t),Wmr=r($qe," (ViLT model)"),$qe.forEach(t),n9t.forEach(t),Qmr=i(Ta),aT=n(Ta,"P",{});var kqe=s(aT);Hmr=r(kqe,"The model is set in evaluation mode by default using "),lve=n(kqe,"CODE",{});var i9t=s(lve);Umr=r(i9t,"model.eval()"),i9t.forEach(t),Jmr=r(kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(kqe,"CODE",{});var d9t=s(ive);Ymr=r(d9t,"model.train()"),d9t.forEach(t),kqe.forEach(t),Kmr=i(Ta),T(nT.$$.fragment,Ta),Ta.forEach(t),bl.forEach(t),_We=i(f),Sd=n(f,"H2",{class:!0});var MHe=s(Sd);sT=n(MHe,"A",{id:!0,class:!0,href:!0});var c9t=s(sT);dve=n(c9t,"SPAN",{});var f9t=s(dve);T(h9.$$.fragment,f9t),f9t.forEach(t),c9t.forEach(t),Zmr=i(MHe),cve=n(MHe,"SPAN",{});var m9t=s(cve);egr=r(m9t,"AutoModelForAudioClassification"),m9t.forEach(t),MHe.forEach(t),uWe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(p9.$$.fragment,vl),ogr=i(vl),Rd=n(vl,"P",{});var Zte=s(Rd);rgr=r(Zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),RH=n(Zte,"A",{href:!0});var g9t=s(RH);tgr=r(g9t,"from_pretrained()"),g9t.forEach(t),agr=r(Zte," class method or the "),PH=n(Zte,"A",{href:!0});var h9t=s(PH);ngr=r(h9t,"from_config()"),h9t.forEach(t),sgr=r(Zte,` class
method.`),Zte.forEach(t),lgr=i(vl),_9=n(vl,"P",{});var EHe=s(_9);igr=r(EHe,"This class cannot be instantiated directly using "),fve=n(EHe,"CODE",{});var p9t=s(fve);dgr=r(p9t,"__init__()"),p9t.forEach(t),cgr=r(EHe," (throws an error)."),EHe.forEach(t),fgr=i(vl),Et=n(vl,"DIV",{class:!0});var t7=s(Et);T(u9.$$.fragment,t7),mgr=i(t7),mve=n(t7,"P",{});var _9t=s(mve);ggr=r(_9t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_9t.forEach(t),hgr=i(t7),Pd=n(t7,"P",{});var eae=s(Pd);pgr=r(eae,`Note:
Loading a model from its configuration file does `),gve=n(eae,"STRONG",{});var u9t=s(gve);_gr=r(u9t,"not"),u9t.forEach(t),ugr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(eae,"A",{href:!0});var b9t=s(BH);bgr=r(b9t,"from_pretrained()"),b9t.forEach(t),vgr=r(eae," to load the model weights."),eae.forEach(t),Fgr=i(t7),T(lT.$$.fragment,t7),t7.forEach(t),Tgr=i(vl),mo=n(vl,"DIV",{class:!0});var Ma=s(mo);T(b9.$$.fragment,Ma),Mgr=i(Ma),hve=n(Ma,"P",{});var v9t=s(hve);Egr=r(v9t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),v9t.forEach(t),Cgr=i(Ma),Ja=n(Ma,"P",{});var a7=s(Ja);wgr=r(a7,"The model class to instantiate is selected based on the "),pve=n(a7,"CODE",{});var F9t=s(pve);Agr=r(F9t,"model_type"),F9t.forEach(t),Lgr=r(a7,` property of the config object (either
passed as an argument or loaded from `),_ve=n(a7,"CODE",{});var T9t=s(_ve);ygr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),xgr=r(a7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(a7,"CODE",{});var M9t=s(uve);$gr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),kgr=r(a7,":"),a7.forEach(t),Sgr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);iT=n(We,"LI",{});var Sqe=s(iT);bve=n(Sqe,"STRONG",{});var E9t=s(bve);Rgr=r(E9t,"data2vec-audio"),E9t.forEach(t),Pgr=r(Sqe," \u2014 "),IH=n(Sqe,"A",{href:!0});var C9t=s(IH);Bgr=r(C9t,"Data2VecAudioForSequenceClassification"),C9t.forEach(t),Igr=r(Sqe," (Data2VecAudio model)"),Sqe.forEach(t),Ngr=i(We),dT=n(We,"LI",{});var Rqe=s(dT);vve=n(Rqe,"STRONG",{});var w9t=s(vve);qgr=r(w9t,"hubert"),w9t.forEach(t),jgr=r(Rqe," \u2014 "),NH=n(Rqe,"A",{href:!0});var A9t=s(NH);Dgr=r(A9t,"HubertForSequenceClassification"),A9t.forEach(t),Ggr=r(Rqe," (Hubert model)"),Rqe.forEach(t),Ogr=i(We),cT=n(We,"LI",{});var Pqe=s(cT);Fve=n(Pqe,"STRONG",{});var L9t=s(Fve);Vgr=r(L9t,"sew"),L9t.forEach(t),Xgr=r(Pqe," \u2014 "),qH=n(Pqe,"A",{href:!0});var y9t=s(qH);zgr=r(y9t,"SEWForSequenceClassification"),y9t.forEach(t),Wgr=r(Pqe," (SEW model)"),Pqe.forEach(t),Qgr=i(We),fT=n(We,"LI",{});var Bqe=s(fT);Tve=n(Bqe,"STRONG",{});var x9t=s(Tve);Hgr=r(x9t,"sew-d"),x9t.forEach(t),Ugr=r(Bqe," \u2014 "),jH=n(Bqe,"A",{href:!0});var $9t=s(jH);Jgr=r($9t,"SEWDForSequenceClassification"),$9t.forEach(t),Ygr=r(Bqe," (SEW-D model)"),Bqe.forEach(t),Kgr=i(We),mT=n(We,"LI",{});var Iqe=s(mT);Mve=n(Iqe,"STRONG",{});var k9t=s(Mve);Zgr=r(k9t,"unispeech"),k9t.forEach(t),ehr=r(Iqe," \u2014 "),DH=n(Iqe,"A",{href:!0});var S9t=s(DH);ohr=r(S9t,"UniSpeechForSequenceClassification"),S9t.forEach(t),rhr=r(Iqe," (UniSpeech model)"),Iqe.forEach(t),thr=i(We),gT=n(We,"LI",{});var Nqe=s(gT);Eve=n(Nqe,"STRONG",{});var R9t=s(Eve);ahr=r(R9t,"unispeech-sat"),R9t.forEach(t),nhr=r(Nqe," \u2014 "),GH=n(Nqe,"A",{href:!0});var P9t=s(GH);shr=r(P9t,"UniSpeechSatForSequenceClassification"),P9t.forEach(t),lhr=r(Nqe," (UniSpeechSat model)"),Nqe.forEach(t),ihr=i(We),hT=n(We,"LI",{});var qqe=s(hT);Cve=n(qqe,"STRONG",{});var B9t=s(Cve);dhr=r(B9t,"wav2vec2"),B9t.forEach(t),chr=r(qqe," \u2014 "),OH=n(qqe,"A",{href:!0});var I9t=s(OH);fhr=r(I9t,"Wav2Vec2ForSequenceClassification"),I9t.forEach(t),mhr=r(qqe," (Wav2Vec2 model)"),qqe.forEach(t),ghr=i(We),pT=n(We,"LI",{});var jqe=s(pT);wve=n(jqe,"STRONG",{});var N9t=s(wve);hhr=r(N9t,"wav2vec2-conformer"),N9t.forEach(t),phr=r(jqe," \u2014 "),VH=n(jqe,"A",{href:!0});var q9t=s(VH);_hr=r(q9t,"Wav2Vec2ConformerForSequenceClassification"),q9t.forEach(t),uhr=r(jqe," (Wav2Vec2-Conformer model)"),jqe.forEach(t),bhr=i(We),_T=n(We,"LI",{});var Dqe=s(_T);Ave=n(Dqe,"STRONG",{});var j9t=s(Ave);vhr=r(j9t,"wavlm"),j9t.forEach(t),Fhr=r(Dqe," \u2014 "),XH=n(Dqe,"A",{href:!0});var D9t=s(XH);Thr=r(D9t,"WavLMForSequenceClassification"),D9t.forEach(t),Mhr=r(Dqe," (WavLM model)"),Dqe.forEach(t),We.forEach(t),Ehr=i(Ma),uT=n(Ma,"P",{});var Gqe=s(uT);Chr=r(Gqe,"The model is set in evaluation mode by default using "),Lve=n(Gqe,"CODE",{});var G9t=s(Lve);whr=r(G9t,"model.eval()"),G9t.forEach(t),Ahr=r(Gqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yve=n(Gqe,"CODE",{});var O9t=s(yve);Lhr=r(O9t,"model.train()"),O9t.forEach(t),Gqe.forEach(t),yhr=i(Ma),T(bT.$$.fragment,Ma),Ma.forEach(t),vl.forEach(t),bWe=i(f),Bd=n(f,"H2",{class:!0});var CHe=s(Bd);vT=n(CHe,"A",{id:!0,class:!0,href:!0});var V9t=s(vT);xve=n(V9t,"SPAN",{});var X9t=s(xve);T(v9.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),xhr=i(CHe),$ve=n(CHe,"SPAN",{});var z9t=s($ve);$hr=r(z9t,"AutoModelForAudioFrameClassification"),z9t.forEach(t),CHe.forEach(t),vWe=i(f),Qo=n(f,"DIV",{class:!0});var Fl=s(Qo);T(F9.$$.fragment,Fl),khr=i(Fl),Id=n(Fl,"P",{});var oae=s(Id);Shr=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),zH=n(oae,"A",{href:!0});var W9t=s(zH);Rhr=r(W9t,"from_pretrained()"),W9t.forEach(t),Phr=r(oae," class method or the "),WH=n(oae,"A",{href:!0});var Q9t=s(WH);Bhr=r(Q9t,"from_config()"),Q9t.forEach(t),Ihr=r(oae,` class
method.`),oae.forEach(t),Nhr=i(Fl),T9=n(Fl,"P",{});var wHe=s(T9);qhr=r(wHe,"This class cannot be instantiated directly using "),kve=n(wHe,"CODE",{});var H9t=s(kve);jhr=r(H9t,"__init__()"),H9t.forEach(t),Dhr=r(wHe," (throws an error)."),wHe.forEach(t),Ghr=i(Fl),Ct=n(Fl,"DIV",{class:!0});var n7=s(Ct);T(M9.$$.fragment,n7),Ohr=i(n7),Sve=n(n7,"P",{});var U9t=s(Sve);Vhr=r(U9t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),U9t.forEach(t),Xhr=i(n7),Nd=n(n7,"P",{});var rae=s(Nd);zhr=r(rae,`Note:
Loading a model from its configuration file does `),Rve=n(rae,"STRONG",{});var J9t=s(Rve);Whr=r(J9t,"not"),J9t.forEach(t),Qhr=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(rae,"A",{href:!0});var Y9t=s(QH);Hhr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),Uhr=r(rae," to load the model weights."),rae.forEach(t),Jhr=i(n7),T(FT.$$.fragment,n7),n7.forEach(t),Yhr=i(Fl),go=n(Fl,"DIV",{class:!0});var Ea=s(go);T(E9.$$.fragment,Ea),Khr=i(Ea),Pve=n(Ea,"P",{});var K9t=s(Pve);Zhr=r(K9t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),K9t.forEach(t),epr=i(Ea),Ya=n(Ea,"P",{});var s7=s(Ya);opr=r(s7,"The model class to instantiate is selected based on the "),Bve=n(s7,"CODE",{});var Z9t=s(Bve);rpr=r(Z9t,"model_type"),Z9t.forEach(t),tpr=r(s7,` property of the config object (either
passed as an argument or loaded from `),Ive=n(s7,"CODE",{});var ext=s(Ive);apr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),npr=r(s7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(s7,"CODE",{});var oxt=s(Nve);spr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),lpr=r(s7,":"),s7.forEach(t),ipr=i(Ea),rt=n(Ea,"UL",{});var Tl=s(rt);TT=n(Tl,"LI",{});var Oqe=s(TT);qve=n(Oqe,"STRONG",{});var rxt=s(qve);dpr=r(rxt,"data2vec-audio"),rxt.forEach(t),cpr=r(Oqe," \u2014 "),HH=n(Oqe,"A",{href:!0});var txt=s(HH);fpr=r(txt,"Data2VecAudioForAudioFrameClassification"),txt.forEach(t),mpr=r(Oqe," (Data2VecAudio model)"),Oqe.forEach(t),gpr=i(Tl),MT=n(Tl,"LI",{});var Vqe=s(MT);jve=n(Vqe,"STRONG",{});var axt=s(jve);hpr=r(axt,"unispeech-sat"),axt.forEach(t),ppr=r(Vqe," \u2014 "),UH=n(Vqe,"A",{href:!0});var nxt=s(UH);_pr=r(nxt,"UniSpeechSatForAudioFrameClassification"),nxt.forEach(t),upr=r(Vqe," (UniSpeechSat model)"),Vqe.forEach(t),bpr=i(Tl),ET=n(Tl,"LI",{});var Xqe=s(ET);Dve=n(Xqe,"STRONG",{});var sxt=s(Dve);vpr=r(sxt,"wav2vec2"),sxt.forEach(t),Fpr=r(Xqe," \u2014 "),JH=n(Xqe,"A",{href:!0});var lxt=s(JH);Tpr=r(lxt,"Wav2Vec2ForAudioFrameClassification"),lxt.forEach(t),Mpr=r(Xqe," (Wav2Vec2 model)"),Xqe.forEach(t),Epr=i(Tl),CT=n(Tl,"LI",{});var zqe=s(CT);Gve=n(zqe,"STRONG",{});var ixt=s(Gve);Cpr=r(ixt,"wav2vec2-conformer"),ixt.forEach(t),wpr=r(zqe," \u2014 "),YH=n(zqe,"A",{href:!0});var dxt=s(YH);Apr=r(dxt,"Wav2Vec2ConformerForAudioFrameClassification"),dxt.forEach(t),Lpr=r(zqe," (Wav2Vec2-Conformer model)"),zqe.forEach(t),ypr=i(Tl),wT=n(Tl,"LI",{});var Wqe=s(wT);Ove=n(Wqe,"STRONG",{});var cxt=s(Ove);xpr=r(cxt,"wavlm"),cxt.forEach(t),$pr=r(Wqe," \u2014 "),KH=n(Wqe,"A",{href:!0});var fxt=s(KH);kpr=r(fxt,"WavLMForAudioFrameClassification"),fxt.forEach(t),Spr=r(Wqe," (WavLM model)"),Wqe.forEach(t),Tl.forEach(t),Rpr=i(Ea),AT=n(Ea,"P",{});var Qqe=s(AT);Ppr=r(Qqe,"The model is set in evaluation mode by default using "),Vve=n(Qqe,"CODE",{});var mxt=s(Vve);Bpr=r(mxt,"model.eval()"),mxt.forEach(t),Ipr=r(Qqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xve=n(Qqe,"CODE",{});var gxt=s(Xve);Npr=r(gxt,"model.train()"),gxt.forEach(t),Qqe.forEach(t),qpr=i(Ea),T(LT.$$.fragment,Ea),Ea.forEach(t),Fl.forEach(t),FWe=i(f),qd=n(f,"H2",{class:!0});var AHe=s(qd);yT=n(AHe,"A",{id:!0,class:!0,href:!0});var hxt=s(yT);zve=n(hxt,"SPAN",{});var pxt=s(zve);T(C9.$$.fragment,pxt),pxt.forEach(t),hxt.forEach(t),jpr=i(AHe),Wve=n(AHe,"SPAN",{});var _xt=s(Wve);Dpr=r(_xt,"AutoModelForCTC"),_xt.forEach(t),AHe.forEach(t),TWe=i(f),Ho=n(f,"DIV",{class:!0});var Ml=s(Ho);T(w9.$$.fragment,Ml),Gpr=i(Ml),jd=n(Ml,"P",{});var tae=s(jd);Opr=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),ZH=n(tae,"A",{href:!0});var uxt=s(ZH);Vpr=r(uxt,"from_pretrained()"),uxt.forEach(t),Xpr=r(tae," class method or the "),eU=n(tae,"A",{href:!0});var bxt=s(eU);zpr=r(bxt,"from_config()"),bxt.forEach(t),Wpr=r(tae,` class
method.`),tae.forEach(t),Qpr=i(Ml),A9=n(Ml,"P",{});var LHe=s(A9);Hpr=r(LHe,"This class cannot be instantiated directly using "),Qve=n(LHe,"CODE",{});var vxt=s(Qve);Upr=r(vxt,"__init__()"),vxt.forEach(t),Jpr=r(LHe," (throws an error)."),LHe.forEach(t),Ypr=i(Ml),wt=n(Ml,"DIV",{class:!0});var l7=s(wt);T(L9.$$.fragment,l7),Kpr=i(l7),Hve=n(l7,"P",{});var Fxt=s(Hve);Zpr=r(Fxt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fxt.forEach(t),e_r=i(l7),Dd=n(l7,"P",{});var aae=s(Dd);o_r=r(aae,`Note:
Loading a model from its configuration file does `),Uve=n(aae,"STRONG",{});var Txt=s(Uve);r_r=r(Txt,"not"),Txt.forEach(t),t_r=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(aae,"A",{href:!0});var Mxt=s(oU);a_r=r(Mxt,"from_pretrained()"),Mxt.forEach(t),n_r=r(aae," to load the model weights."),aae.forEach(t),s_r=i(l7),T(xT.$$.fragment,l7),l7.forEach(t),l_r=i(Ml),ho=n(Ml,"DIV",{class:!0});var Ca=s(ho);T(y9.$$.fragment,Ca),i_r=i(Ca),Jve=n(Ca,"P",{});var Ext=s(Jve);d_r=r(Ext,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ext.forEach(t),c_r=i(Ca),Ka=n(Ca,"P",{});var i7=s(Ka);f_r=r(i7,"The model class to instantiate is selected based on the "),Yve=n(i7,"CODE",{});var Cxt=s(Yve);m_r=r(Cxt,"model_type"),Cxt.forEach(t),g_r=r(i7,` property of the config object (either
passed as an argument or loaded from `),Kve=n(i7,"CODE",{});var wxt=s(Kve);h_r=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),p_r=r(i7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(i7,"CODE",{});var Axt=s(Zve);__r=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),u_r=r(i7,":"),i7.forEach(t),b_r=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);$T=n(Be,"LI",{});var Hqe=s($T);e0e=n(Hqe,"STRONG",{});var Lxt=s(e0e);v_r=r(Lxt,"data2vec-audio"),Lxt.forEach(t),F_r=r(Hqe," \u2014 "),rU=n(Hqe,"A",{href:!0});var yxt=s(rU);T_r=r(yxt,"Data2VecAudioForCTC"),yxt.forEach(t),M_r=r(Hqe," (Data2VecAudio model)"),Hqe.forEach(t),E_r=i(Be),kT=n(Be,"LI",{});var Uqe=s(kT);o0e=n(Uqe,"STRONG",{});var xxt=s(o0e);C_r=r(xxt,"hubert"),xxt.forEach(t),w_r=r(Uqe," \u2014 "),tU=n(Uqe,"A",{href:!0});var $xt=s(tU);A_r=r($xt,"HubertForCTC"),$xt.forEach(t),L_r=r(Uqe," (Hubert model)"),Uqe.forEach(t),y_r=i(Be),ST=n(Be,"LI",{});var Jqe=s(ST);r0e=n(Jqe,"STRONG",{});var kxt=s(r0e);x_r=r(kxt,"mctct"),kxt.forEach(t),$_r=r(Jqe," \u2014 "),aU=n(Jqe,"A",{href:!0});var Sxt=s(aU);k_r=r(Sxt,"MCTCTForCTC"),Sxt.forEach(t),S_r=r(Jqe," (M-CTC-T model)"),Jqe.forEach(t),R_r=i(Be),RT=n(Be,"LI",{});var Yqe=s(RT);t0e=n(Yqe,"STRONG",{});var Rxt=s(t0e);P_r=r(Rxt,"sew"),Rxt.forEach(t),B_r=r(Yqe," \u2014 "),nU=n(Yqe,"A",{href:!0});var Pxt=s(nU);I_r=r(Pxt,"SEWForCTC"),Pxt.forEach(t),N_r=r(Yqe," (SEW model)"),Yqe.forEach(t),q_r=i(Be),PT=n(Be,"LI",{});var Kqe=s(PT);a0e=n(Kqe,"STRONG",{});var Bxt=s(a0e);j_r=r(Bxt,"sew-d"),Bxt.forEach(t),D_r=r(Kqe," \u2014 "),sU=n(Kqe,"A",{href:!0});var Ixt=s(sU);G_r=r(Ixt,"SEWDForCTC"),Ixt.forEach(t),O_r=r(Kqe," (SEW-D model)"),Kqe.forEach(t),V_r=i(Be),BT=n(Be,"LI",{});var Zqe=s(BT);n0e=n(Zqe,"STRONG",{});var Nxt=s(n0e);X_r=r(Nxt,"unispeech"),Nxt.forEach(t),z_r=r(Zqe," \u2014 "),lU=n(Zqe,"A",{href:!0});var qxt=s(lU);W_r=r(qxt,"UniSpeechForCTC"),qxt.forEach(t),Q_r=r(Zqe," (UniSpeech model)"),Zqe.forEach(t),H_r=i(Be),IT=n(Be,"LI",{});var eje=s(IT);s0e=n(eje,"STRONG",{});var jxt=s(s0e);U_r=r(jxt,"unispeech-sat"),jxt.forEach(t),J_r=r(eje," \u2014 "),iU=n(eje,"A",{href:!0});var Dxt=s(iU);Y_r=r(Dxt,"UniSpeechSatForCTC"),Dxt.forEach(t),K_r=r(eje," (UniSpeechSat model)"),eje.forEach(t),Z_r=i(Be),NT=n(Be,"LI",{});var oje=s(NT);l0e=n(oje,"STRONG",{});var Gxt=s(l0e);eur=r(Gxt,"wav2vec2"),Gxt.forEach(t),our=r(oje," \u2014 "),dU=n(oje,"A",{href:!0});var Oxt=s(dU);rur=r(Oxt,"Wav2Vec2ForCTC"),Oxt.forEach(t),tur=r(oje," (Wav2Vec2 model)"),oje.forEach(t),aur=i(Be),qT=n(Be,"LI",{});var rje=s(qT);i0e=n(rje,"STRONG",{});var Vxt=s(i0e);nur=r(Vxt,"wav2vec2-conformer"),Vxt.forEach(t),sur=r(rje," \u2014 "),cU=n(rje,"A",{href:!0});var Xxt=s(cU);lur=r(Xxt,"Wav2Vec2ConformerForCTC"),Xxt.forEach(t),iur=r(rje," (Wav2Vec2-Conformer model)"),rje.forEach(t),dur=i(Be),jT=n(Be,"LI",{});var tje=s(jT);d0e=n(tje,"STRONG",{});var zxt=s(d0e);cur=r(zxt,"wavlm"),zxt.forEach(t),fur=r(tje," \u2014 "),fU=n(tje,"A",{href:!0});var Wxt=s(fU);mur=r(Wxt,"WavLMForCTC"),Wxt.forEach(t),gur=r(tje," (WavLM model)"),tje.forEach(t),Be.forEach(t),hur=i(Ca),DT=n(Ca,"P",{});var aje=s(DT);pur=r(aje,"The model is set in evaluation mode by default using "),c0e=n(aje,"CODE",{});var Qxt=s(c0e);_ur=r(Qxt,"model.eval()"),Qxt.forEach(t),uur=r(aje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f0e=n(aje,"CODE",{});var Hxt=s(f0e);bur=r(Hxt,"model.train()"),Hxt.forEach(t),aje.forEach(t),vur=i(Ca),T(GT.$$.fragment,Ca),Ca.forEach(t),Ml.forEach(t),MWe=i(f),Gd=n(f,"H2",{class:!0});var yHe=s(Gd);OT=n(yHe,"A",{id:!0,class:!0,href:!0});var Uxt=s(OT);m0e=n(Uxt,"SPAN",{});var Jxt=s(m0e);T(x9.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),Fur=i(yHe),g0e=n(yHe,"SPAN",{});var Yxt=s(g0e);Tur=r(Yxt,"AutoModelForSpeechSeq2Seq"),Yxt.forEach(t),yHe.forEach(t),EWe=i(f),Uo=n(f,"DIV",{class:!0});var El=s(Uo);T($9.$$.fragment,El),Mur=i(El),Od=n(El,"P",{});var nae=s(Od);Eur=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),mU=n(nae,"A",{href:!0});var Kxt=s(mU);Cur=r(Kxt,"from_pretrained()"),Kxt.forEach(t),wur=r(nae," class method or the "),gU=n(nae,"A",{href:!0});var Zxt=s(gU);Aur=r(Zxt,"from_config()"),Zxt.forEach(t),Lur=r(nae,` class
method.`),nae.forEach(t),yur=i(El),k9=n(El,"P",{});var xHe=s(k9);xur=r(xHe,"This class cannot be instantiated directly using "),h0e=n(xHe,"CODE",{});var e$t=s(h0e);$ur=r(e$t,"__init__()"),e$t.forEach(t),kur=r(xHe," (throws an error)."),xHe.forEach(t),Sur=i(El),At=n(El,"DIV",{class:!0});var d7=s(At);T(S9.$$.fragment,d7),Rur=i(d7),p0e=n(d7,"P",{});var o$t=s(p0e);Pur=r(o$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o$t.forEach(t),Bur=i(d7),Vd=n(d7,"P",{});var sae=s(Vd);Iur=r(sae,`Note:
Loading a model from its configuration file does `),_0e=n(sae,"STRONG",{});var r$t=s(_0e);Nur=r(r$t,"not"),r$t.forEach(t),qur=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(sae,"A",{href:!0});var t$t=s(hU);jur=r(t$t,"from_pretrained()"),t$t.forEach(t),Dur=r(sae," to load the model weights."),sae.forEach(t),Gur=i(d7),T(VT.$$.fragment,d7),d7.forEach(t),Our=i(El),po=n(El,"DIV",{class:!0});var wa=s(po);T(R9.$$.fragment,wa),Vur=i(wa),u0e=n(wa,"P",{});var a$t=s(u0e);Xur=r(a$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a$t.forEach(t),zur=i(wa),Za=n(wa,"P",{});var c7=s(Za);Wur=r(c7,"The model class to instantiate is selected based on the "),b0e=n(c7,"CODE",{});var n$t=s(b0e);Qur=r(n$t,"model_type"),n$t.forEach(t),Hur=r(c7,` property of the config object (either
passed as an argument or loaded from `),v0e=n(c7,"CODE",{});var s$t=s(v0e);Uur=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),Jur=r(c7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(c7,"CODE",{});var l$t=s(F0e);Yur=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),Kur=r(c7,":"),c7.forEach(t),Zur=i(wa),P9=n(wa,"UL",{});var $He=s(P9);XT=n($He,"LI",{});var nje=s(XT);T0e=n(nje,"STRONG",{});var i$t=s(T0e);e2r=r(i$t,"speech-encoder-decoder"),i$t.forEach(t),o2r=r(nje," \u2014 "),pU=n(nje,"A",{href:!0});var d$t=s(pU);r2r=r(d$t,"SpeechEncoderDecoderModel"),d$t.forEach(t),t2r=r(nje," (Speech Encoder decoder model)"),nje.forEach(t),a2r=i($He),zT=n($He,"LI",{});var sje=s(zT);M0e=n(sje,"STRONG",{});var c$t=s(M0e);n2r=r(c$t,"speech_to_text"),c$t.forEach(t),s2r=r(sje," \u2014 "),_U=n(sje,"A",{href:!0});var f$t=s(_U);l2r=r(f$t,"Speech2TextForConditionalGeneration"),f$t.forEach(t),i2r=r(sje," (Speech2Text model)"),sje.forEach(t),$He.forEach(t),d2r=i(wa),WT=n(wa,"P",{});var lje=s(WT);c2r=r(lje,"The model is set in evaluation mode by default using "),E0e=n(lje,"CODE",{});var m$t=s(E0e);f2r=r(m$t,"model.eval()"),m$t.forEach(t),m2r=r(lje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C0e=n(lje,"CODE",{});var g$t=s(C0e);g2r=r(g$t,"model.train()"),g$t.forEach(t),lje.forEach(t),h2r=i(wa),T(QT.$$.fragment,wa),wa.forEach(t),El.forEach(t),CWe=i(f),Xd=n(f,"H2",{class:!0});var kHe=s(Xd);HT=n(kHe,"A",{id:!0,class:!0,href:!0});var h$t=s(HT);w0e=n(h$t,"SPAN",{});var p$t=s(w0e);T(B9.$$.fragment,p$t),p$t.forEach(t),h$t.forEach(t),p2r=i(kHe),A0e=n(kHe,"SPAN",{});var _$t=s(A0e);_2r=r(_$t,"AutoModelForAudioXVector"),_$t.forEach(t),kHe.forEach(t),wWe=i(f),Jo=n(f,"DIV",{class:!0});var Cl=s(Jo);T(I9.$$.fragment,Cl),u2r=i(Cl),zd=n(Cl,"P",{});var lae=s(zd);b2r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uU=n(lae,"A",{href:!0});var u$t=s(uU);v2r=r(u$t,"from_pretrained()"),u$t.forEach(t),F2r=r(lae," class method or the "),bU=n(lae,"A",{href:!0});var b$t=s(bU);T2r=r(b$t,"from_config()"),b$t.forEach(t),M2r=r(lae,` class
method.`),lae.forEach(t),E2r=i(Cl),N9=n(Cl,"P",{});var SHe=s(N9);C2r=r(SHe,"This class cannot be instantiated directly using "),L0e=n(SHe,"CODE",{});var v$t=s(L0e);w2r=r(v$t,"__init__()"),v$t.forEach(t),A2r=r(SHe," (throws an error)."),SHe.forEach(t),L2r=i(Cl),Lt=n(Cl,"DIV",{class:!0});var f7=s(Lt);T(q9.$$.fragment,f7),y2r=i(f7),y0e=n(f7,"P",{});var F$t=s(y0e);x2r=r(F$t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),F$t.forEach(t),$2r=i(f7),Wd=n(f7,"P",{});var iae=s(Wd);k2r=r(iae,`Note:
Loading a model from its configuration file does `),x0e=n(iae,"STRONG",{});var T$t=s(x0e);S2r=r(T$t,"not"),T$t.forEach(t),R2r=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(iae,"A",{href:!0});var M$t=s(vU);P2r=r(M$t,"from_pretrained()"),M$t.forEach(t),B2r=r(iae," to load the model weights."),iae.forEach(t),I2r=i(f7),T(UT.$$.fragment,f7),f7.forEach(t),N2r=i(Cl),_o=n(Cl,"DIV",{class:!0});var Aa=s(_o);T(j9.$$.fragment,Aa),q2r=i(Aa),$0e=n(Aa,"P",{});var E$t=s($0e);j2r=r(E$t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),E$t.forEach(t),D2r=i(Aa),en=n(Aa,"P",{});var m7=s(en);G2r=r(m7,"The model class to instantiate is selected based on the "),k0e=n(m7,"CODE",{});var C$t=s(k0e);O2r=r(C$t,"model_type"),C$t.forEach(t),V2r=r(m7,` property of the config object (either
passed as an argument or loaded from `),S0e=n(m7,"CODE",{});var w$t=s(S0e);X2r=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),z2r=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(m7,"CODE",{});var A$t=s(R0e);W2r=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),Q2r=r(m7,":"),m7.forEach(t),H2r=i(Aa),tt=n(Aa,"UL",{});var wl=s(tt);JT=n(wl,"LI",{});var ije=s(JT);P0e=n(ije,"STRONG",{});var L$t=s(P0e);U2r=r(L$t,"data2vec-audio"),L$t.forEach(t),J2r=r(ije," \u2014 "),FU=n(ije,"A",{href:!0});var y$t=s(FU);Y2r=r(y$t,"Data2VecAudioForXVector"),y$t.forEach(t),K2r=r(ije," (Data2VecAudio model)"),ije.forEach(t),Z2r=i(wl),YT=n(wl,"LI",{});var dje=s(YT);B0e=n(dje,"STRONG",{});var x$t=s(B0e);e1r=r(x$t,"unispeech-sat"),x$t.forEach(t),o1r=r(dje," \u2014 "),TU=n(dje,"A",{href:!0});var $$t=s(TU);r1r=r($$t,"UniSpeechSatForXVector"),$$t.forEach(t),t1r=r(dje," (UniSpeechSat model)"),dje.forEach(t),a1r=i(wl),KT=n(wl,"LI",{});var cje=s(KT);I0e=n(cje,"STRONG",{});var k$t=s(I0e);n1r=r(k$t,"wav2vec2"),k$t.forEach(t),s1r=r(cje," \u2014 "),MU=n(cje,"A",{href:!0});var S$t=s(MU);l1r=r(S$t,"Wav2Vec2ForXVector"),S$t.forEach(t),i1r=r(cje," (Wav2Vec2 model)"),cje.forEach(t),d1r=i(wl),ZT=n(wl,"LI",{});var fje=s(ZT);N0e=n(fje,"STRONG",{});var R$t=s(N0e);c1r=r(R$t,"wav2vec2-conformer"),R$t.forEach(t),f1r=r(fje," \u2014 "),EU=n(fje,"A",{href:!0});var P$t=s(EU);m1r=r(P$t,"Wav2Vec2ConformerForXVector"),P$t.forEach(t),g1r=r(fje," (Wav2Vec2-Conformer model)"),fje.forEach(t),h1r=i(wl),e8=n(wl,"LI",{});var mje=s(e8);q0e=n(mje,"STRONG",{});var B$t=s(q0e);p1r=r(B$t,"wavlm"),B$t.forEach(t),_1r=r(mje," \u2014 "),CU=n(mje,"A",{href:!0});var I$t=s(CU);u1r=r(I$t,"WavLMForXVector"),I$t.forEach(t),b1r=r(mje," (WavLM model)"),mje.forEach(t),wl.forEach(t),v1r=i(Aa),o8=n(Aa,"P",{});var gje=s(o8);F1r=r(gje,"The model is set in evaluation mode by default using "),j0e=n(gje,"CODE",{});var N$t=s(j0e);T1r=r(N$t,"model.eval()"),N$t.forEach(t),M1r=r(gje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D0e=n(gje,"CODE",{});var q$t=s(D0e);E1r=r(q$t,"model.train()"),q$t.forEach(t),gje.forEach(t),C1r=i(Aa),T(r8.$$.fragment,Aa),Aa.forEach(t),Cl.forEach(t),AWe=i(f),Qd=n(f,"H2",{class:!0});var RHe=s(Qd);t8=n(RHe,"A",{id:!0,class:!0,href:!0});var j$t=s(t8);G0e=n(j$t,"SPAN",{});var D$t=s(G0e);T(D9.$$.fragment,D$t),D$t.forEach(t),j$t.forEach(t),w1r=i(RHe),O0e=n(RHe,"SPAN",{});var G$t=s(O0e);A1r=r(G$t,"AutoModelForMaskedImageModeling"),G$t.forEach(t),RHe.forEach(t),LWe=i(f),Yo=n(f,"DIV",{class:!0});var Al=s(Yo);T(G9.$$.fragment,Al),L1r=i(Al),Hd=n(Al,"P",{});var dae=s(Hd);y1r=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wU=n(dae,"A",{href:!0});var O$t=s(wU);x1r=r(O$t,"from_pretrained()"),O$t.forEach(t),$1r=r(dae," class method or the "),AU=n(dae,"A",{href:!0});var V$t=s(AU);k1r=r(V$t,"from_config()"),V$t.forEach(t),S1r=r(dae,` class
method.`),dae.forEach(t),R1r=i(Al),O9=n(Al,"P",{});var PHe=s(O9);P1r=r(PHe,"This class cannot be instantiated directly using "),V0e=n(PHe,"CODE",{});var X$t=s(V0e);B1r=r(X$t,"__init__()"),X$t.forEach(t),I1r=r(PHe," (throws an error)."),PHe.forEach(t),N1r=i(Al),yt=n(Al,"DIV",{class:!0});var g7=s(yt);T(V9.$$.fragment,g7),q1r=i(g7),X0e=n(g7,"P",{});var z$t=s(X0e);j1r=r(z$t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),z$t.forEach(t),D1r=i(g7),Ud=n(g7,"P",{});var cae=s(Ud);G1r=r(cae,`Note:
Loading a model from its configuration file does `),z0e=n(cae,"STRONG",{});var W$t=s(z0e);O1r=r(W$t,"not"),W$t.forEach(t),V1r=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(cae,"A",{href:!0});var Q$t=s(LU);X1r=r(Q$t,"from_pretrained()"),Q$t.forEach(t),z1r=r(cae," to load the model weights."),cae.forEach(t),W1r=i(g7),T(a8.$$.fragment,g7),g7.forEach(t),Q1r=i(Al),uo=n(Al,"DIV",{class:!0});var La=s(uo);T(X9.$$.fragment,La),H1r=i(La),W0e=n(La,"P",{});var H$t=s(W0e);U1r=r(H$t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),H$t.forEach(t),J1r=i(La),on=n(La,"P",{});var h7=s(on);Y1r=r(h7,"The model class to instantiate is selected based on the "),Q0e=n(h7,"CODE",{});var U$t=s(Q0e);K1r=r(U$t,"model_type"),U$t.forEach(t),Z1r=r(h7,` property of the config object (either
passed as an argument or loaded from `),H0e=n(h7,"CODE",{});var J$t=s(H0e);e4r=r(J$t,"pretrained_model_name_or_path"),J$t.forEach(t),o4r=r(h7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(h7,"CODE",{});var Y$t=s(U0e);r4r=r(Y$t,"pretrained_model_name_or_path"),Y$t.forEach(t),t4r=r(h7,":"),h7.forEach(t),a4r=i(La),rn=n(La,"UL",{});var p7=s(rn);n8=n(p7,"LI",{});var hje=s(n8);J0e=n(hje,"STRONG",{});var K$t=s(J0e);n4r=r(K$t,"deit"),K$t.forEach(t),s4r=r(hje," \u2014 "),yU=n(hje,"A",{href:!0});var Z$t=s(yU);l4r=r(Z$t,"DeiTForMaskedImageModeling"),Z$t.forEach(t),i4r=r(hje," (DeiT model)"),hje.forEach(t),d4r=i(p7),s8=n(p7,"LI",{});var pje=s(s8);Y0e=n(pje,"STRONG",{});var ekt=s(Y0e);c4r=r(ekt,"swin"),ekt.forEach(t),f4r=r(pje," \u2014 "),xU=n(pje,"A",{href:!0});var okt=s(xU);m4r=r(okt,"SwinForMaskedImageModeling"),okt.forEach(t),g4r=r(pje," (Swin Transformer model)"),pje.forEach(t),h4r=i(p7),l8=n(p7,"LI",{});var _je=s(l8);K0e=n(_je,"STRONG",{});var rkt=s(K0e);p4r=r(rkt,"swinv2"),rkt.forEach(t),_4r=r(_je," \u2014 "),$U=n(_je,"A",{href:!0});var tkt=s($U);u4r=r(tkt,"Swinv2ForMaskedImageModeling"),tkt.forEach(t),b4r=r(_je," (Swin Transformer V2 model)"),_je.forEach(t),v4r=i(p7),i8=n(p7,"LI",{});var uje=s(i8);Z0e=n(uje,"STRONG",{});var akt=s(Z0e);F4r=r(akt,"vit"),akt.forEach(t),T4r=r(uje," \u2014 "),kU=n(uje,"A",{href:!0});var nkt=s(kU);M4r=r(nkt,"ViTForMaskedImageModeling"),nkt.forEach(t),E4r=r(uje," (ViT model)"),uje.forEach(t),p7.forEach(t),C4r=i(La),d8=n(La,"P",{});var bje=s(d8);w4r=r(bje,"The model is set in evaluation mode by default using "),eFe=n(bje,"CODE",{});var skt=s(eFe);A4r=r(skt,"model.eval()"),skt.forEach(t),L4r=r(bje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oFe=n(bje,"CODE",{});var lkt=s(oFe);y4r=r(lkt,"model.train()"),lkt.forEach(t),bje.forEach(t),x4r=i(La),T(c8.$$.fragment,La),La.forEach(t),Al.forEach(t),yWe=i(f),Jd=n(f,"H2",{class:!0});var BHe=s(Jd);f8=n(BHe,"A",{id:!0,class:!0,href:!0});var ikt=s(f8);rFe=n(ikt,"SPAN",{});var dkt=s(rFe);T(z9.$$.fragment,dkt),dkt.forEach(t),ikt.forEach(t),$4r=i(BHe),tFe=n(BHe,"SPAN",{});var ckt=s(tFe);k4r=r(ckt,"AutoModelForObjectDetection"),ckt.forEach(t),BHe.forEach(t),xWe=i(f),Ko=n(f,"DIV",{class:!0});var Ll=s(Ko);T(W9.$$.fragment,Ll),S4r=i(Ll),Yd=n(Ll,"P",{});var fae=s(Yd);R4r=r(fae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SU=n(fae,"A",{href:!0});var fkt=s(SU);P4r=r(fkt,"from_pretrained()"),fkt.forEach(t),B4r=r(fae," class method or the "),RU=n(fae,"A",{href:!0});var mkt=s(RU);I4r=r(mkt,"from_config()"),mkt.forEach(t),N4r=r(fae,` class
method.`),fae.forEach(t),q4r=i(Ll),Q9=n(Ll,"P",{});var IHe=s(Q9);j4r=r(IHe,"This class cannot be instantiated directly using "),aFe=n(IHe,"CODE",{});var gkt=s(aFe);D4r=r(gkt,"__init__()"),gkt.forEach(t),G4r=r(IHe," (throws an error)."),IHe.forEach(t),O4r=i(Ll),xt=n(Ll,"DIV",{class:!0});var _7=s(xt);T(H9.$$.fragment,_7),V4r=i(_7),nFe=n(_7,"P",{});var hkt=s(nFe);X4r=r(hkt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hkt.forEach(t),z4r=i(_7),Kd=n(_7,"P",{});var mae=s(Kd);W4r=r(mae,`Note:
Loading a model from its configuration file does `),sFe=n(mae,"STRONG",{});var pkt=s(sFe);Q4r=r(pkt,"not"),pkt.forEach(t),H4r=r(mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(mae,"A",{href:!0});var _kt=s(PU);U4r=r(_kt,"from_pretrained()"),_kt.forEach(t),J4r=r(mae," to load the model weights."),mae.forEach(t),Y4r=i(_7),T(m8.$$.fragment,_7),_7.forEach(t),K4r=i(Ll),bo=n(Ll,"DIV",{class:!0});var ya=s(bo);T(U9.$$.fragment,ya),Z4r=i(ya),lFe=n(ya,"P",{});var ukt=s(lFe);ebr=r(ukt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ukt.forEach(t),obr=i(ya),tn=n(ya,"P",{});var u7=s(tn);rbr=r(u7,"The model class to instantiate is selected based on the "),iFe=n(u7,"CODE",{});var bkt=s(iFe);tbr=r(bkt,"model_type"),bkt.forEach(t),abr=r(u7,` property of the config object (either
passed as an argument or loaded from `),dFe=n(u7,"CODE",{});var vkt=s(dFe);nbr=r(vkt,"pretrained_model_name_or_path"),vkt.forEach(t),sbr=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(u7,"CODE",{});var Fkt=s(cFe);lbr=r(Fkt,"pretrained_model_name_or_path"),Fkt.forEach(t),ibr=r(u7,":"),u7.forEach(t),dbr=i(ya),J9=n(ya,"UL",{});var NHe=s(J9);g8=n(NHe,"LI",{});var vje=s(g8);fFe=n(vje,"STRONG",{});var Tkt=s(fFe);cbr=r(Tkt,"detr"),Tkt.forEach(t),fbr=r(vje," \u2014 "),BU=n(vje,"A",{href:!0});var Mkt=s(BU);mbr=r(Mkt,"DetrForObjectDetection"),Mkt.forEach(t),gbr=r(vje," (DETR model)"),vje.forEach(t),hbr=i(NHe),h8=n(NHe,"LI",{});var Fje=s(h8);mFe=n(Fje,"STRONG",{});var Ekt=s(mFe);pbr=r(Ekt,"yolos"),Ekt.forEach(t),_br=r(Fje," \u2014 "),IU=n(Fje,"A",{href:!0});var Ckt=s(IU);ubr=r(Ckt,"YolosForObjectDetection"),Ckt.forEach(t),bbr=r(Fje," (YOLOS model)"),Fje.forEach(t),NHe.forEach(t),vbr=i(ya),p8=n(ya,"P",{});var Tje=s(p8);Fbr=r(Tje,"The model is set in evaluation mode by default using "),gFe=n(Tje,"CODE",{});var wkt=s(gFe);Tbr=r(wkt,"model.eval()"),wkt.forEach(t),Mbr=r(Tje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hFe=n(Tje,"CODE",{});var Akt=s(hFe);Ebr=r(Akt,"model.train()"),Akt.forEach(t),Tje.forEach(t),Cbr=i(ya),T(_8.$$.fragment,ya),ya.forEach(t),Ll.forEach(t),$We=i(f),Zd=n(f,"H2",{class:!0});var qHe=s(Zd);u8=n(qHe,"A",{id:!0,class:!0,href:!0});var Lkt=s(u8);pFe=n(Lkt,"SPAN",{});var ykt=s(pFe);T(Y9.$$.fragment,ykt),ykt.forEach(t),Lkt.forEach(t),wbr=i(qHe),_Fe=n(qHe,"SPAN",{});var xkt=s(_Fe);Abr=r(xkt,"AutoModelForImageSegmentation"),xkt.forEach(t),qHe.forEach(t),kWe=i(f),Zo=n(f,"DIV",{class:!0});var yl=s(Zo);T(K9.$$.fragment,yl),Lbr=i(yl),ec=n(yl,"P",{});var gae=s(ec);ybr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NU=n(gae,"A",{href:!0});var $kt=s(NU);xbr=r($kt,"from_pretrained()"),$kt.forEach(t),$br=r(gae," class method or the "),qU=n(gae,"A",{href:!0});var kkt=s(qU);kbr=r(kkt,"from_config()"),kkt.forEach(t),Sbr=r(gae,` class
method.`),gae.forEach(t),Rbr=i(yl),Z9=n(yl,"P",{});var jHe=s(Z9);Pbr=r(jHe,"This class cannot be instantiated directly using "),uFe=n(jHe,"CODE",{});var Skt=s(uFe);Bbr=r(Skt,"__init__()"),Skt.forEach(t),Ibr=r(jHe," (throws an error)."),jHe.forEach(t),Nbr=i(yl),$t=n(yl,"DIV",{class:!0});var b7=s($t);T(ex.$$.fragment,b7),qbr=i(b7),bFe=n(b7,"P",{});var Rkt=s(bFe);jbr=r(Rkt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rkt.forEach(t),Dbr=i(b7),oc=n(b7,"P",{});var hae=s(oc);Gbr=r(hae,`Note:
Loading a model from its configuration file does `),vFe=n(hae,"STRONG",{});var Pkt=s(vFe);Obr=r(Pkt,"not"),Pkt.forEach(t),Vbr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(hae,"A",{href:!0});var Bkt=s(jU);Xbr=r(Bkt,"from_pretrained()"),Bkt.forEach(t),zbr=r(hae," to load the model weights."),hae.forEach(t),Wbr=i(b7),T(b8.$$.fragment,b7),b7.forEach(t),Qbr=i(yl),vo=n(yl,"DIV",{class:!0});var xa=s(vo);T(ox.$$.fragment,xa),Hbr=i(xa),FFe=n(xa,"P",{});var Ikt=s(FFe);Ubr=r(Ikt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ikt.forEach(t),Jbr=i(xa),an=n(xa,"P",{});var v7=s(an);Ybr=r(v7,"The model class to instantiate is selected based on the "),TFe=n(v7,"CODE",{});var Nkt=s(TFe);Kbr=r(Nkt,"model_type"),Nkt.forEach(t),Zbr=r(v7,` property of the config object (either
passed as an argument or loaded from `),MFe=n(v7,"CODE",{});var qkt=s(MFe);evr=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),ovr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EFe=n(v7,"CODE",{});var jkt=s(EFe);rvr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),tvr=r(v7,":"),v7.forEach(t),avr=i(xa),CFe=n(xa,"UL",{});var Dkt=s(CFe);v8=n(Dkt,"LI",{});var Mje=s(v8);wFe=n(Mje,"STRONG",{});var Gkt=s(wFe);nvr=r(Gkt,"detr"),Gkt.forEach(t),svr=r(Mje," \u2014 "),DU=n(Mje,"A",{href:!0});var Okt=s(DU);lvr=r(Okt,"DetrForSegmentation"),Okt.forEach(t),ivr=r(Mje," (DETR model)"),Mje.forEach(t),Dkt.forEach(t),dvr=i(xa),F8=n(xa,"P",{});var Eje=s(F8);cvr=r(Eje,"The model is set in evaluation mode by default using "),AFe=n(Eje,"CODE",{});var Vkt=s(AFe);fvr=r(Vkt,"model.eval()"),Vkt.forEach(t),mvr=r(Eje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LFe=n(Eje,"CODE",{});var Xkt=s(LFe);gvr=r(Xkt,"model.train()"),Xkt.forEach(t),Eje.forEach(t),hvr=i(xa),T(T8.$$.fragment,xa),xa.forEach(t),yl.forEach(t),SWe=i(f),rc=n(f,"H2",{class:!0});var DHe=s(rc);M8=n(DHe,"A",{id:!0,class:!0,href:!0});var zkt=s(M8);yFe=n(zkt,"SPAN",{});var Wkt=s(yFe);T(rx.$$.fragment,Wkt),Wkt.forEach(t),zkt.forEach(t),pvr=i(DHe),xFe=n(DHe,"SPAN",{});var Qkt=s(xFe);_vr=r(Qkt,"AutoModelForSemanticSegmentation"),Qkt.forEach(t),DHe.forEach(t),RWe=i(f),er=n(f,"DIV",{class:!0});var xl=s(er);T(tx.$$.fragment,xl),uvr=i(xl),tc=n(xl,"P",{});var pae=s(tc);bvr=r(pae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GU=n(pae,"A",{href:!0});var Hkt=s(GU);vvr=r(Hkt,"from_pretrained()"),Hkt.forEach(t),Fvr=r(pae," class method or the "),OU=n(pae,"A",{href:!0});var Ukt=s(OU);Tvr=r(Ukt,"from_config()"),Ukt.forEach(t),Mvr=r(pae,` class
method.`),pae.forEach(t),Evr=i(xl),ax=n(xl,"P",{});var GHe=s(ax);Cvr=r(GHe,"This class cannot be instantiated directly using "),$Fe=n(GHe,"CODE",{});var Jkt=s($Fe);wvr=r(Jkt,"__init__()"),Jkt.forEach(t),Avr=r(GHe," (throws an error)."),GHe.forEach(t),Lvr=i(xl),kt=n(xl,"DIV",{class:!0});var F7=s(kt);T(nx.$$.fragment,F7),yvr=i(F7),kFe=n(F7,"P",{});var Ykt=s(kFe);xvr=r(Ykt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ykt.forEach(t),$vr=i(F7),ac=n(F7,"P",{});var _ae=s(ac);kvr=r(_ae,`Note:
Loading a model from its configuration file does `),SFe=n(_ae,"STRONG",{});var Kkt=s(SFe);Svr=r(Kkt,"not"),Kkt.forEach(t),Rvr=r(_ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(_ae,"A",{href:!0});var Zkt=s(VU);Pvr=r(Zkt,"from_pretrained()"),Zkt.forEach(t),Bvr=r(_ae," to load the model weights."),_ae.forEach(t),Ivr=i(F7),T(E8.$$.fragment,F7),F7.forEach(t),Nvr=i(xl),Fo=n(xl,"DIV",{class:!0});var $a=s(Fo);T(sx.$$.fragment,$a),qvr=i($a),RFe=n($a,"P",{});var eSt=s(RFe);jvr=r(eSt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eSt.forEach(t),Dvr=i($a),nn=n($a,"P",{});var T7=s(nn);Gvr=r(T7,"The model class to instantiate is selected based on the "),PFe=n(T7,"CODE",{});var oSt=s(PFe);Ovr=r(oSt,"model_type"),oSt.forEach(t),Vvr=r(T7,` property of the config object (either
passed as an argument or loaded from `),BFe=n(T7,"CODE",{});var rSt=s(BFe);Xvr=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),zvr=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(T7,"CODE",{});var tSt=s(IFe);Wvr=r(tSt,"pretrained_model_name_or_path"),tSt.forEach(t),Qvr=r(T7,":"),T7.forEach(t),Hvr=i($a),at=n($a,"UL",{});var $l=s(at);C8=n($l,"LI",{});var Cje=s(C8);NFe=n(Cje,"STRONG",{});var aSt=s(NFe);Uvr=r(aSt,"beit"),aSt.forEach(t),Jvr=r(Cje," \u2014 "),XU=n(Cje,"A",{href:!0});var nSt=s(XU);Yvr=r(nSt,"BeitForSemanticSegmentation"),nSt.forEach(t),Kvr=r(Cje," (BEiT model)"),Cje.forEach(t),Zvr=i($l),w8=n($l,"LI",{});var wje=s(w8);qFe=n(wje,"STRONG",{});var sSt=s(qFe);e0r=r(sSt,"data2vec-vision"),sSt.forEach(t),o0r=r(wje," \u2014 "),zU=n(wje,"A",{href:!0});var lSt=s(zU);r0r=r(lSt,"Data2VecVisionForSemanticSegmentation"),lSt.forEach(t),t0r=r(wje," (Data2VecVision model)"),wje.forEach(t),a0r=i($l),A8=n($l,"LI",{});var Aje=s(A8);jFe=n(Aje,"STRONG",{});var iSt=s(jFe);n0r=r(iSt,"dpt"),iSt.forEach(t),s0r=r(Aje," \u2014 "),WU=n(Aje,"A",{href:!0});var dSt=s(WU);l0r=r(dSt,"DPTForSemanticSegmentation"),dSt.forEach(t),i0r=r(Aje," (DPT model)"),Aje.forEach(t),d0r=i($l),L8=n($l,"LI",{});var Lje=s(L8);DFe=n(Lje,"STRONG",{});var cSt=s(DFe);c0r=r(cSt,"mobilevit"),cSt.forEach(t),f0r=r(Lje," \u2014 "),QU=n(Lje,"A",{href:!0});var fSt=s(QU);m0r=r(fSt,"MobileViTForSemanticSegmentation"),fSt.forEach(t),g0r=r(Lje," (MobileViT model)"),Lje.forEach(t),h0r=i($l),y8=n($l,"LI",{});var yje=s(y8);GFe=n(yje,"STRONG",{});var mSt=s(GFe);p0r=r(mSt,"segformer"),mSt.forEach(t),_0r=r(yje," \u2014 "),HU=n(yje,"A",{href:!0});var gSt=s(HU);u0r=r(gSt,"SegformerForSemanticSegmentation"),gSt.forEach(t),b0r=r(yje," (SegFormer model)"),yje.forEach(t),$l.forEach(t),v0r=i($a),x8=n($a,"P",{});var xje=s(x8);F0r=r(xje,"The model is set in evaluation mode by default using "),OFe=n(xje,"CODE",{});var hSt=s(OFe);T0r=r(hSt,"model.eval()"),hSt.forEach(t),M0r=r(xje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),VFe=n(xje,"CODE",{});var pSt=s(VFe);E0r=r(pSt,"model.train()"),pSt.forEach(t),xje.forEach(t),C0r=i($a),T($8.$$.fragment,$a),$a.forEach(t),xl.forEach(t),PWe=i(f),nc=n(f,"H2",{class:!0});var OHe=s(nc);k8=n(OHe,"A",{id:!0,class:!0,href:!0});var _St=s(k8);XFe=n(_St,"SPAN",{});var uSt=s(XFe);T(lx.$$.fragment,uSt),uSt.forEach(t),_St.forEach(t),w0r=i(OHe),zFe=n(OHe,"SPAN",{});var bSt=s(zFe);A0r=r(bSt,"AutoModelForInstanceSegmentation"),bSt.forEach(t),OHe.forEach(t),BWe=i(f),or=n(f,"DIV",{class:!0});var kl=s(or);T(ix.$$.fragment,kl),L0r=i(kl),sc=n(kl,"P",{});var uae=s(sc);y0r=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UU=n(uae,"A",{href:!0});var vSt=s(UU);x0r=r(vSt,"from_pretrained()"),vSt.forEach(t),$0r=r(uae," class method or the "),JU=n(uae,"A",{href:!0});var FSt=s(JU);k0r=r(FSt,"from_config()"),FSt.forEach(t),S0r=r(uae,` class
method.`),uae.forEach(t),R0r=i(kl),dx=n(kl,"P",{});var VHe=s(dx);P0r=r(VHe,"This class cannot be instantiated directly using "),WFe=n(VHe,"CODE",{});var TSt=s(WFe);B0r=r(TSt,"__init__()"),TSt.forEach(t),I0r=r(VHe," (throws an error)."),VHe.forEach(t),N0r=i(kl),St=n(kl,"DIV",{class:!0});var M7=s(St);T(cx.$$.fragment,M7),q0r=i(M7),QFe=n(M7,"P",{});var MSt=s(QFe);j0r=r(MSt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),MSt.forEach(t),D0r=i(M7),lc=n(M7,"P",{});var bae=s(lc);G0r=r(bae,`Note:
Loading a model from its configuration file does `),HFe=n(bae,"STRONG",{});var ESt=s(HFe);O0r=r(ESt,"not"),ESt.forEach(t),V0r=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(bae,"A",{href:!0});var CSt=s(YU);X0r=r(CSt,"from_pretrained()"),CSt.forEach(t),z0r=r(bae," to load the model weights."),bae.forEach(t),W0r=i(M7),T(S8.$$.fragment,M7),M7.forEach(t),Q0r=i(kl),To=n(kl,"DIV",{class:!0});var ka=s(To);T(fx.$$.fragment,ka),H0r=i(ka),UFe=n(ka,"P",{});var wSt=s(UFe);U0r=r(wSt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wSt.forEach(t),J0r=i(ka),sn=n(ka,"P",{});var E7=s(sn);Y0r=r(E7,"The model class to instantiate is selected based on the "),JFe=n(E7,"CODE",{});var ASt=s(JFe);K0r=r(ASt,"model_type"),ASt.forEach(t),Z0r=r(E7,` property of the config object (either
passed as an argument or loaded from `),YFe=n(E7,"CODE",{});var LSt=s(YFe);eFr=r(LSt,"pretrained_model_name_or_path"),LSt.forEach(t),oFr=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(E7,"CODE",{});var ySt=s(KFe);rFr=r(ySt,"pretrained_model_name_or_path"),ySt.forEach(t),tFr=r(E7,":"),E7.forEach(t),aFr=i(ka),ZFe=n(ka,"UL",{});var xSt=s(ZFe);R8=n(xSt,"LI",{});var $je=s(R8);eTe=n($je,"STRONG",{});var $St=s(eTe);nFr=r($St,"maskformer"),$St.forEach(t),sFr=r($je," \u2014 "),KU=n($je,"A",{href:!0});var kSt=s(KU);lFr=r(kSt,"MaskFormerForInstanceSegmentation"),kSt.forEach(t),iFr=r($je," (MaskFormer model)"),$je.forEach(t),xSt.forEach(t),dFr=i(ka),P8=n(ka,"P",{});var kje=s(P8);cFr=r(kje,"The model is set in evaluation mode by default using "),oTe=n(kje,"CODE",{});var SSt=s(oTe);fFr=r(SSt,"model.eval()"),SSt.forEach(t),mFr=r(kje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=n(kje,"CODE",{});var RSt=s(rTe);gFr=r(RSt,"model.train()"),RSt.forEach(t),kje.forEach(t),hFr=i(ka),T(B8.$$.fragment,ka),ka.forEach(t),kl.forEach(t),IWe=i(f),ic=n(f,"H2",{class:!0});var XHe=s(ic);I8=n(XHe,"A",{id:!0,class:!0,href:!0});var PSt=s(I8);tTe=n(PSt,"SPAN",{});var BSt=s(tTe);T(mx.$$.fragment,BSt),BSt.forEach(t),PSt.forEach(t),pFr=i(XHe),aTe=n(XHe,"SPAN",{});var ISt=s(aTe);_Fr=r(ISt,"TFAutoModel"),ISt.forEach(t),XHe.forEach(t),NWe=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(gx.$$.fragment,Sl),uFr=i(Sl),dc=n(Sl,"P",{});var vae=s(dc);bFr=r(vae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZU=n(vae,"A",{href:!0});var NSt=s(ZU);vFr=r(NSt,"from_pretrained()"),NSt.forEach(t),FFr=r(vae," class method or the "),eJ=n(vae,"A",{href:!0});var qSt=s(eJ);TFr=r(qSt,"from_config()"),qSt.forEach(t),MFr=r(vae,` class
method.`),vae.forEach(t),EFr=i(Sl),hx=n(Sl,"P",{});var zHe=s(hx);CFr=r(zHe,"This class cannot be instantiated directly using "),nTe=n(zHe,"CODE",{});var jSt=s(nTe);wFr=r(jSt,"__init__()"),jSt.forEach(t),AFr=r(zHe," (throws an error)."),zHe.forEach(t),LFr=i(Sl),Rt=n(Sl,"DIV",{class:!0});var C7=s(Rt);T(px.$$.fragment,C7),yFr=i(C7),sTe=n(C7,"P",{});var DSt=s(sTe);xFr=r(DSt,"Instantiates one of the base model classes of the library from a configuration."),DSt.forEach(t),$Fr=i(C7),cc=n(C7,"P",{});var Fae=s(cc);kFr=r(Fae,`Note:
Loading a model from its configuration file does `),lTe=n(Fae,"STRONG",{});var GSt=s(lTe);SFr=r(GSt,"not"),GSt.forEach(t),RFr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Fae,"A",{href:!0});var OSt=s(oJ);PFr=r(OSt,"from_pretrained()"),OSt.forEach(t),BFr=r(Fae," to load the model weights."),Fae.forEach(t),IFr=i(C7),T(N8.$$.fragment,C7),C7.forEach(t),NFr=i(Sl),$r=n(Sl,"DIV",{class:!0});var Rl=s($r);T(_x.$$.fragment,Rl),qFr=i(Rl),iTe=n(Rl,"P",{});var VSt=s(iTe);jFr=r(VSt,"Instantiate one of the base model classes of the library from a pretrained model."),VSt.forEach(t),DFr=i(Rl),ln=n(Rl,"P",{});var w7=s(ln);GFr=r(w7,"The model class to instantiate is selected based on the "),dTe=n(w7,"CODE",{});var XSt=s(dTe);OFr=r(XSt,"model_type"),XSt.forEach(t),VFr=r(w7,` property of the config object (either
passed as an argument or loaded from `),cTe=n(w7,"CODE",{});var zSt=s(cTe);XFr=r(zSt,"pretrained_model_name_or_path"),zSt.forEach(t),zFr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(w7,"CODE",{});var WSt=s(fTe);WFr=r(WSt,"pretrained_model_name_or_path"),WSt.forEach(t),QFr=r(w7,":"),w7.forEach(t),HFr=i(Rl),I=n(Rl,"UL",{});var D=s(I);q8=n(D,"LI",{});var Sje=s(q8);mTe=n(Sje,"STRONG",{});var QSt=s(mTe);UFr=r(QSt,"albert"),QSt.forEach(t),JFr=r(Sje," \u2014 "),rJ=n(Sje,"A",{href:!0});var HSt=s(rJ);YFr=r(HSt,"TFAlbertModel"),HSt.forEach(t),KFr=r(Sje," (ALBERT model)"),Sje.forEach(t),ZFr=i(D),j8=n(D,"LI",{});var Rje=s(j8);gTe=n(Rje,"STRONG",{});var USt=s(gTe);eTr=r(USt,"bart"),USt.forEach(t),oTr=r(Rje," \u2014 "),tJ=n(Rje,"A",{href:!0});var JSt=s(tJ);rTr=r(JSt,"TFBartModel"),JSt.forEach(t),tTr=r(Rje," (BART model)"),Rje.forEach(t),aTr=i(D),D8=n(D,"LI",{});var Pje=s(D8);hTe=n(Pje,"STRONG",{});var YSt=s(hTe);nTr=r(YSt,"bert"),YSt.forEach(t),sTr=r(Pje," \u2014 "),aJ=n(Pje,"A",{href:!0});var KSt=s(aJ);lTr=r(KSt,"TFBertModel"),KSt.forEach(t),iTr=r(Pje," (BERT model)"),Pje.forEach(t),dTr=i(D),G8=n(D,"LI",{});var Bje=s(G8);pTe=n(Bje,"STRONG",{});var ZSt=s(pTe);cTr=r(ZSt,"blenderbot"),ZSt.forEach(t),fTr=r(Bje," \u2014 "),nJ=n(Bje,"A",{href:!0});var eRt=s(nJ);mTr=r(eRt,"TFBlenderbotModel"),eRt.forEach(t),gTr=r(Bje," (Blenderbot model)"),Bje.forEach(t),hTr=i(D),O8=n(D,"LI",{});var Ije=s(O8);_Te=n(Ije,"STRONG",{});var oRt=s(_Te);pTr=r(oRt,"blenderbot-small"),oRt.forEach(t),_Tr=r(Ije," \u2014 "),sJ=n(Ije,"A",{href:!0});var rRt=s(sJ);uTr=r(rRt,"TFBlenderbotSmallModel"),rRt.forEach(t),bTr=r(Ije," (BlenderbotSmall model)"),Ije.forEach(t),vTr=i(D),V8=n(D,"LI",{});var Nje=s(V8);uTe=n(Nje,"STRONG",{});var tRt=s(uTe);FTr=r(tRt,"camembert"),tRt.forEach(t),TTr=r(Nje," \u2014 "),lJ=n(Nje,"A",{href:!0});var aRt=s(lJ);MTr=r(aRt,"TFCamembertModel"),aRt.forEach(t),ETr=r(Nje," (CamemBERT model)"),Nje.forEach(t),CTr=i(D),X8=n(D,"LI",{});var qje=s(X8);bTe=n(qje,"STRONG",{});var nRt=s(bTe);wTr=r(nRt,"clip"),nRt.forEach(t),ATr=r(qje," \u2014 "),iJ=n(qje,"A",{href:!0});var sRt=s(iJ);LTr=r(sRt,"TFCLIPModel"),sRt.forEach(t),yTr=r(qje," (CLIP model)"),qje.forEach(t),xTr=i(D),z8=n(D,"LI",{});var jje=s(z8);vTe=n(jje,"STRONG",{});var lRt=s(vTe);$Tr=r(lRt,"convbert"),lRt.forEach(t),kTr=r(jje," \u2014 "),dJ=n(jje,"A",{href:!0});var iRt=s(dJ);STr=r(iRt,"TFConvBertModel"),iRt.forEach(t),RTr=r(jje," (ConvBERT model)"),jje.forEach(t),PTr=i(D),W8=n(D,"LI",{});var Dje=s(W8);FTe=n(Dje,"STRONG",{});var dRt=s(FTe);BTr=r(dRt,"convnext"),dRt.forEach(t),ITr=r(Dje," \u2014 "),cJ=n(Dje,"A",{href:!0});var cRt=s(cJ);NTr=r(cRt,"TFConvNextModel"),cRt.forEach(t),qTr=r(Dje," (ConvNeXT model)"),Dje.forEach(t),jTr=i(D),Q8=n(D,"LI",{});var Gje=s(Q8);TTe=n(Gje,"STRONG",{});var fRt=s(TTe);DTr=r(fRt,"ctrl"),fRt.forEach(t),GTr=r(Gje," \u2014 "),fJ=n(Gje,"A",{href:!0});var mRt=s(fJ);OTr=r(mRt,"TFCTRLModel"),mRt.forEach(t),VTr=r(Gje," (CTRL model)"),Gje.forEach(t),XTr=i(D),H8=n(D,"LI",{});var Oje=s(H8);MTe=n(Oje,"STRONG",{});var gRt=s(MTe);zTr=r(gRt,"data2vec-vision"),gRt.forEach(t),WTr=r(Oje," \u2014 "),mJ=n(Oje,"A",{href:!0});var hRt=s(mJ);QTr=r(hRt,"TFData2VecVisionModel"),hRt.forEach(t),HTr=r(Oje," (Data2VecVision model)"),Oje.forEach(t),UTr=i(D),U8=n(D,"LI",{});var Vje=s(U8);ETe=n(Vje,"STRONG",{});var pRt=s(ETe);JTr=r(pRt,"deberta"),pRt.forEach(t),YTr=r(Vje," \u2014 "),gJ=n(Vje,"A",{href:!0});var _Rt=s(gJ);KTr=r(_Rt,"TFDebertaModel"),_Rt.forEach(t),ZTr=r(Vje," (DeBERTa model)"),Vje.forEach(t),e8r=i(D),J8=n(D,"LI",{});var Xje=s(J8);CTe=n(Xje,"STRONG",{});var uRt=s(CTe);o8r=r(uRt,"deberta-v2"),uRt.forEach(t),r8r=r(Xje," \u2014 "),hJ=n(Xje,"A",{href:!0});var bRt=s(hJ);t8r=r(bRt,"TFDebertaV2Model"),bRt.forEach(t),a8r=r(Xje," (DeBERTa-v2 model)"),Xje.forEach(t),n8r=i(D),Y8=n(D,"LI",{});var zje=s(Y8);wTe=n(zje,"STRONG",{});var vRt=s(wTe);s8r=r(vRt,"deit"),vRt.forEach(t),l8r=r(zje," \u2014 "),pJ=n(zje,"A",{href:!0});var FRt=s(pJ);i8r=r(FRt,"TFDeiTModel"),FRt.forEach(t),d8r=r(zje," (DeiT model)"),zje.forEach(t),c8r=i(D),K8=n(D,"LI",{});var Wje=s(K8);ATe=n(Wje,"STRONG",{});var TRt=s(ATe);f8r=r(TRt,"distilbert"),TRt.forEach(t),m8r=r(Wje," \u2014 "),_J=n(Wje,"A",{href:!0});var MRt=s(_J);g8r=r(MRt,"TFDistilBertModel"),MRt.forEach(t),h8r=r(Wje," (DistilBERT model)"),Wje.forEach(t),p8r=i(D),Z8=n(D,"LI",{});var Qje=s(Z8);LTe=n(Qje,"STRONG",{});var ERt=s(LTe);_8r=r(ERt,"dpr"),ERt.forEach(t),u8r=r(Qje," \u2014 "),uJ=n(Qje,"A",{href:!0});var CRt=s(uJ);b8r=r(CRt,"TFDPRQuestionEncoder"),CRt.forEach(t),v8r=r(Qje," (DPR model)"),Qje.forEach(t),F8r=i(D),eM=n(D,"LI",{});var Hje=s(eM);yTe=n(Hje,"STRONG",{});var wRt=s(yTe);T8r=r(wRt,"electra"),wRt.forEach(t),M8r=r(Hje," \u2014 "),bJ=n(Hje,"A",{href:!0});var ARt=s(bJ);E8r=r(ARt,"TFElectraModel"),ARt.forEach(t),C8r=r(Hje," (ELECTRA model)"),Hje.forEach(t),w8r=i(D),oM=n(D,"LI",{});var Uje=s(oM);xTe=n(Uje,"STRONG",{});var LRt=s(xTe);A8r=r(LRt,"flaubert"),LRt.forEach(t),L8r=r(Uje," \u2014 "),vJ=n(Uje,"A",{href:!0});var yRt=s(vJ);y8r=r(yRt,"TFFlaubertModel"),yRt.forEach(t),x8r=r(Uje," (FlauBERT model)"),Uje.forEach(t),$8r=i(D),Zs=n(D,"LI",{});var tR=s(Zs);$Te=n(tR,"STRONG",{});var xRt=s($Te);k8r=r(xRt,"funnel"),xRt.forEach(t),S8r=r(tR," \u2014 "),FJ=n(tR,"A",{href:!0});var $Rt=s(FJ);R8r=r($Rt,"TFFunnelModel"),$Rt.forEach(t),P8r=r(tR," or "),TJ=n(tR,"A",{href:!0});var kRt=s(TJ);B8r=r(kRt,"TFFunnelBaseModel"),kRt.forEach(t),I8r=r(tR," (Funnel Transformer model)"),tR.forEach(t),N8r=i(D),rM=n(D,"LI",{});var Jje=s(rM);kTe=n(Jje,"STRONG",{});var SRt=s(kTe);q8r=r(SRt,"gpt2"),SRt.forEach(t),j8r=r(Jje," \u2014 "),MJ=n(Jje,"A",{href:!0});var RRt=s(MJ);D8r=r(RRt,"TFGPT2Model"),RRt.forEach(t),G8r=r(Jje," (OpenAI GPT-2 model)"),Jje.forEach(t),O8r=i(D),tM=n(D,"LI",{});var Yje=s(tM);STe=n(Yje,"STRONG",{});var PRt=s(STe);V8r=r(PRt,"gptj"),PRt.forEach(t),X8r=r(Yje," \u2014 "),EJ=n(Yje,"A",{href:!0});var BRt=s(EJ);z8r=r(BRt,"TFGPTJModel"),BRt.forEach(t),W8r=r(Yje," (GPT-J model)"),Yje.forEach(t),Q8r=i(D),aM=n(D,"LI",{});var Kje=s(aM);RTe=n(Kje,"STRONG",{});var IRt=s(RTe);H8r=r(IRt,"hubert"),IRt.forEach(t),U8r=r(Kje," \u2014 "),CJ=n(Kje,"A",{href:!0});var NRt=s(CJ);J8r=r(NRt,"TFHubertModel"),NRt.forEach(t),Y8r=r(Kje," (Hubert model)"),Kje.forEach(t),K8r=i(D),nM=n(D,"LI",{});var Zje=s(nM);PTe=n(Zje,"STRONG",{});var qRt=s(PTe);Z8r=r(qRt,"layoutlm"),qRt.forEach(t),eMr=r(Zje," \u2014 "),wJ=n(Zje,"A",{href:!0});var jRt=s(wJ);oMr=r(jRt,"TFLayoutLMModel"),jRt.forEach(t),rMr=r(Zje," (LayoutLM model)"),Zje.forEach(t),tMr=i(D),sM=n(D,"LI",{});var eDe=s(sM);BTe=n(eDe,"STRONG",{});var DRt=s(BTe);aMr=r(DRt,"led"),DRt.forEach(t),nMr=r(eDe," \u2014 "),AJ=n(eDe,"A",{href:!0});var GRt=s(AJ);sMr=r(GRt,"TFLEDModel"),GRt.forEach(t),lMr=r(eDe," (LED model)"),eDe.forEach(t),iMr=i(D),lM=n(D,"LI",{});var oDe=s(lM);ITe=n(oDe,"STRONG",{});var ORt=s(ITe);dMr=r(ORt,"longformer"),ORt.forEach(t),cMr=r(oDe," \u2014 "),LJ=n(oDe,"A",{href:!0});var VRt=s(LJ);fMr=r(VRt,"TFLongformerModel"),VRt.forEach(t),mMr=r(oDe," (Longformer model)"),oDe.forEach(t),gMr=i(D),iM=n(D,"LI",{});var rDe=s(iM);NTe=n(rDe,"STRONG",{});var XRt=s(NTe);hMr=r(XRt,"lxmert"),XRt.forEach(t),pMr=r(rDe," \u2014 "),yJ=n(rDe,"A",{href:!0});var zRt=s(yJ);_Mr=r(zRt,"TFLxmertModel"),zRt.forEach(t),uMr=r(rDe," (LXMERT model)"),rDe.forEach(t),bMr=i(D),dM=n(D,"LI",{});var tDe=s(dM);qTe=n(tDe,"STRONG",{});var WRt=s(qTe);vMr=r(WRt,"marian"),WRt.forEach(t),FMr=r(tDe," \u2014 "),xJ=n(tDe,"A",{href:!0});var QRt=s(xJ);TMr=r(QRt,"TFMarianModel"),QRt.forEach(t),MMr=r(tDe," (Marian model)"),tDe.forEach(t),EMr=i(D),cM=n(D,"LI",{});var aDe=s(cM);jTe=n(aDe,"STRONG",{});var HRt=s(jTe);CMr=r(HRt,"mbart"),HRt.forEach(t),wMr=r(aDe," \u2014 "),$J=n(aDe,"A",{href:!0});var URt=s($J);AMr=r(URt,"TFMBartModel"),URt.forEach(t),LMr=r(aDe," (mBART model)"),aDe.forEach(t),yMr=i(D),fM=n(D,"LI",{});var nDe=s(fM);DTe=n(nDe,"STRONG",{});var JRt=s(DTe);xMr=r(JRt,"mobilebert"),JRt.forEach(t),$Mr=r(nDe," \u2014 "),kJ=n(nDe,"A",{href:!0});var YRt=s(kJ);kMr=r(YRt,"TFMobileBertModel"),YRt.forEach(t),SMr=r(nDe," (MobileBERT model)"),nDe.forEach(t),RMr=i(D),mM=n(D,"LI",{});var sDe=s(mM);GTe=n(sDe,"STRONG",{});var KRt=s(GTe);PMr=r(KRt,"mpnet"),KRt.forEach(t),BMr=r(sDe," \u2014 "),SJ=n(sDe,"A",{href:!0});var ZRt=s(SJ);IMr=r(ZRt,"TFMPNetModel"),ZRt.forEach(t),NMr=r(sDe," (MPNet model)"),sDe.forEach(t),qMr=i(D),gM=n(D,"LI",{});var lDe=s(gM);OTe=n(lDe,"STRONG",{});var ePt=s(OTe);jMr=r(ePt,"mt5"),ePt.forEach(t),DMr=r(lDe," \u2014 "),RJ=n(lDe,"A",{href:!0});var oPt=s(RJ);GMr=r(oPt,"TFMT5Model"),oPt.forEach(t),OMr=r(lDe," (MT5 model)"),lDe.forEach(t),VMr=i(D),hM=n(D,"LI",{});var iDe=s(hM);VTe=n(iDe,"STRONG",{});var rPt=s(VTe);XMr=r(rPt,"openai-gpt"),rPt.forEach(t),zMr=r(iDe," \u2014 "),PJ=n(iDe,"A",{href:!0});var tPt=s(PJ);WMr=r(tPt,"TFOpenAIGPTModel"),tPt.forEach(t),QMr=r(iDe," (OpenAI GPT model)"),iDe.forEach(t),HMr=i(D),pM=n(D,"LI",{});var dDe=s(pM);XTe=n(dDe,"STRONG",{});var aPt=s(XTe);UMr=r(aPt,"opt"),aPt.forEach(t),JMr=r(dDe," \u2014 "),BJ=n(dDe,"A",{href:!0});var nPt=s(BJ);YMr=r(nPt,"TFOPTModel"),nPt.forEach(t),KMr=r(dDe," (OPT model)"),dDe.forEach(t),ZMr=i(D),_M=n(D,"LI",{});var cDe=s(_M);zTe=n(cDe,"STRONG",{});var sPt=s(zTe);eEr=r(sPt,"pegasus"),sPt.forEach(t),oEr=r(cDe," \u2014 "),IJ=n(cDe,"A",{href:!0});var lPt=s(IJ);rEr=r(lPt,"TFPegasusModel"),lPt.forEach(t),tEr=r(cDe," (Pegasus model)"),cDe.forEach(t),aEr=i(D),uM=n(D,"LI",{});var fDe=s(uM);WTe=n(fDe,"STRONG",{});var iPt=s(WTe);nEr=r(iPt,"regnet"),iPt.forEach(t),sEr=r(fDe," \u2014 "),NJ=n(fDe,"A",{href:!0});var dPt=s(NJ);lEr=r(dPt,"TFRegNetModel"),dPt.forEach(t),iEr=r(fDe," (RegNet model)"),fDe.forEach(t),dEr=i(D),bM=n(D,"LI",{});var mDe=s(bM);QTe=n(mDe,"STRONG",{});var cPt=s(QTe);cEr=r(cPt,"rembert"),cPt.forEach(t),fEr=r(mDe," \u2014 "),qJ=n(mDe,"A",{href:!0});var fPt=s(qJ);mEr=r(fPt,"TFRemBertModel"),fPt.forEach(t),gEr=r(mDe," (RemBERT model)"),mDe.forEach(t),hEr=i(D),vM=n(D,"LI",{});var gDe=s(vM);HTe=n(gDe,"STRONG",{});var mPt=s(HTe);pEr=r(mPt,"resnet"),mPt.forEach(t),_Er=r(gDe," \u2014 "),jJ=n(gDe,"A",{href:!0});var gPt=s(jJ);uEr=r(gPt,"TFResNetModel"),gPt.forEach(t),bEr=r(gDe," (ResNet model)"),gDe.forEach(t),vEr=i(D),FM=n(D,"LI",{});var hDe=s(FM);UTe=n(hDe,"STRONG",{});var hPt=s(UTe);FEr=r(hPt,"roberta"),hPt.forEach(t),TEr=r(hDe," \u2014 "),DJ=n(hDe,"A",{href:!0});var pPt=s(DJ);MEr=r(pPt,"TFRobertaModel"),pPt.forEach(t),EEr=r(hDe," (RoBERTa model)"),hDe.forEach(t),CEr=i(D),TM=n(D,"LI",{});var pDe=s(TM);JTe=n(pDe,"STRONG",{});var _Pt=s(JTe);wEr=r(_Pt,"roformer"),_Pt.forEach(t),AEr=r(pDe," \u2014 "),GJ=n(pDe,"A",{href:!0});var uPt=s(GJ);LEr=r(uPt,"TFRoFormerModel"),uPt.forEach(t),yEr=r(pDe," (RoFormer model)"),pDe.forEach(t),xEr=i(D),MM=n(D,"LI",{});var _De=s(MM);YTe=n(_De,"STRONG",{});var bPt=s(YTe);$Er=r(bPt,"segformer"),bPt.forEach(t),kEr=r(_De," \u2014 "),OJ=n(_De,"A",{href:!0});var vPt=s(OJ);SEr=r(vPt,"TFSegformerModel"),vPt.forEach(t),REr=r(_De," (SegFormer model)"),_De.forEach(t),PEr=i(D),EM=n(D,"LI",{});var uDe=s(EM);KTe=n(uDe,"STRONG",{});var FPt=s(KTe);BEr=r(FPt,"speech_to_text"),FPt.forEach(t),IEr=r(uDe," \u2014 "),VJ=n(uDe,"A",{href:!0});var TPt=s(VJ);NEr=r(TPt,"TFSpeech2TextModel"),TPt.forEach(t),qEr=r(uDe," (Speech2Text model)"),uDe.forEach(t),jEr=i(D),CM=n(D,"LI",{});var bDe=s(CM);ZTe=n(bDe,"STRONG",{});var MPt=s(ZTe);DEr=r(MPt,"swin"),MPt.forEach(t),GEr=r(bDe," \u2014 "),XJ=n(bDe,"A",{href:!0});var EPt=s(XJ);OEr=r(EPt,"TFSwinModel"),EPt.forEach(t),VEr=r(bDe," (Swin Transformer model)"),bDe.forEach(t),XEr=i(D),wM=n(D,"LI",{});var vDe=s(wM);e8e=n(vDe,"STRONG",{});var CPt=s(e8e);zEr=r(CPt,"t5"),CPt.forEach(t),WEr=r(vDe," \u2014 "),zJ=n(vDe,"A",{href:!0});var wPt=s(zJ);QEr=r(wPt,"TFT5Model"),wPt.forEach(t),HEr=r(vDe," (T5 model)"),vDe.forEach(t),UEr=i(D),AM=n(D,"LI",{});var FDe=s(AM);o8e=n(FDe,"STRONG",{});var APt=s(o8e);JEr=r(APt,"tapas"),APt.forEach(t),YEr=r(FDe," \u2014 "),WJ=n(FDe,"A",{href:!0});var LPt=s(WJ);KEr=r(LPt,"TFTapasModel"),LPt.forEach(t),ZEr=r(FDe," (TAPAS model)"),FDe.forEach(t),eCr=i(D),LM=n(D,"LI",{});var TDe=s(LM);r8e=n(TDe,"STRONG",{});var yPt=s(r8e);oCr=r(yPt,"transfo-xl"),yPt.forEach(t),rCr=r(TDe," \u2014 "),QJ=n(TDe,"A",{href:!0});var xPt=s(QJ);tCr=r(xPt,"TFTransfoXLModel"),xPt.forEach(t),aCr=r(TDe," (Transformer-XL model)"),TDe.forEach(t),nCr=i(D),yM=n(D,"LI",{});var MDe=s(yM);t8e=n(MDe,"STRONG",{});var $Pt=s(t8e);sCr=r($Pt,"vit"),$Pt.forEach(t),lCr=r(MDe," \u2014 "),HJ=n(MDe,"A",{href:!0});var kPt=s(HJ);iCr=r(kPt,"TFViTModel"),kPt.forEach(t),dCr=r(MDe," (ViT model)"),MDe.forEach(t),cCr=i(D),xM=n(D,"LI",{});var EDe=s(xM);a8e=n(EDe,"STRONG",{});var SPt=s(a8e);fCr=r(SPt,"vit_mae"),SPt.forEach(t),mCr=r(EDe," \u2014 "),UJ=n(EDe,"A",{href:!0});var RPt=s(UJ);gCr=r(RPt,"TFViTMAEModel"),RPt.forEach(t),hCr=r(EDe," (ViTMAE model)"),EDe.forEach(t),pCr=i(D),$M=n(D,"LI",{});var CDe=s($M);n8e=n(CDe,"STRONG",{});var PPt=s(n8e);_Cr=r(PPt,"wav2vec2"),PPt.forEach(t),uCr=r(CDe," \u2014 "),JJ=n(CDe,"A",{href:!0});var BPt=s(JJ);bCr=r(BPt,"TFWav2Vec2Model"),BPt.forEach(t),vCr=r(CDe," (Wav2Vec2 model)"),CDe.forEach(t),FCr=i(D),kM=n(D,"LI",{});var wDe=s(kM);s8e=n(wDe,"STRONG",{});var IPt=s(s8e);TCr=r(IPt,"xlm"),IPt.forEach(t),MCr=r(wDe," \u2014 "),YJ=n(wDe,"A",{href:!0});var NPt=s(YJ);ECr=r(NPt,"TFXLMModel"),NPt.forEach(t),CCr=r(wDe," (XLM model)"),wDe.forEach(t),wCr=i(D),SM=n(D,"LI",{});var ADe=s(SM);l8e=n(ADe,"STRONG",{});var qPt=s(l8e);ACr=r(qPt,"xlm-roberta"),qPt.forEach(t),LCr=r(ADe," \u2014 "),KJ=n(ADe,"A",{href:!0});var jPt=s(KJ);yCr=r(jPt,"TFXLMRobertaModel"),jPt.forEach(t),xCr=r(ADe," (XLM-RoBERTa model)"),ADe.forEach(t),$Cr=i(D),RM=n(D,"LI",{});var LDe=s(RM);i8e=n(LDe,"STRONG",{});var DPt=s(i8e);kCr=r(DPt,"xlnet"),DPt.forEach(t),SCr=r(LDe," \u2014 "),ZJ=n(LDe,"A",{href:!0});var GPt=s(ZJ);RCr=r(GPt,"TFXLNetModel"),GPt.forEach(t),PCr=r(LDe," (XLNet model)"),LDe.forEach(t),D.forEach(t),BCr=i(Rl),T(PM.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),qWe=i(f),fc=n(f,"H2",{class:!0});var WHe=s(fc);BM=n(WHe,"A",{id:!0,class:!0,href:!0});var OPt=s(BM);d8e=n(OPt,"SPAN",{});var VPt=s(d8e);T(ux.$$.fragment,VPt),VPt.forEach(t),OPt.forEach(t),ICr=i(WHe),c8e=n(WHe,"SPAN",{});var XPt=s(c8e);NCr=r(XPt,"TFAutoModelForPreTraining"),XPt.forEach(t),WHe.forEach(t),jWe=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(bx.$$.fragment,Pl),qCr=i(Pl),mc=n(Pl,"P",{});var Tae=s(mc);jCr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eY=n(Tae,"A",{href:!0});var zPt=s(eY);DCr=r(zPt,"from_pretrained()"),zPt.forEach(t),GCr=r(Tae," class method or the "),oY=n(Tae,"A",{href:!0});var WPt=s(oY);OCr=r(WPt,"from_config()"),WPt.forEach(t),VCr=r(Tae,` class
method.`),Tae.forEach(t),XCr=i(Pl),vx=n(Pl,"P",{});var QHe=s(vx);zCr=r(QHe,"This class cannot be instantiated directly using "),f8e=n(QHe,"CODE",{});var QPt=s(f8e);WCr=r(QPt,"__init__()"),QPt.forEach(t),QCr=r(QHe," (throws an error)."),QHe.forEach(t),HCr=i(Pl),Pt=n(Pl,"DIV",{class:!0});var A7=s(Pt);T(Fx.$$.fragment,A7),UCr=i(A7),m8e=n(A7,"P",{});var HPt=s(m8e);JCr=r(HPt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HPt.forEach(t),YCr=i(A7),gc=n(A7,"P",{});var Mae=s(gc);KCr=r(Mae,`Note:
Loading a model from its configuration file does `),g8e=n(Mae,"STRONG",{});var UPt=s(g8e);ZCr=r(UPt,"not"),UPt.forEach(t),e5r=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(Mae,"A",{href:!0});var JPt=s(rY);o5r=r(JPt,"from_pretrained()"),JPt.forEach(t),r5r=r(Mae," to load the model weights."),Mae.forEach(t),t5r=i(A7),T(IM.$$.fragment,A7),A7.forEach(t),a5r=i(Pl),kr=n(Pl,"DIV",{class:!0});var Bl=s(kr);T(Tx.$$.fragment,Bl),n5r=i(Bl),h8e=n(Bl,"P",{});var YPt=s(h8e);s5r=r(YPt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YPt.forEach(t),l5r=i(Bl),dn=n(Bl,"P",{});var L7=s(dn);i5r=r(L7,"The model class to instantiate is selected based on the "),p8e=n(L7,"CODE",{});var KPt=s(p8e);d5r=r(KPt,"model_type"),KPt.forEach(t),c5r=r(L7,` property of the config object (either
passed as an argument or loaded from `),_8e=n(L7,"CODE",{});var ZPt=s(_8e);f5r=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),m5r=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u8e=n(L7,"CODE",{});var eBt=s(u8e);g5r=r(eBt,"pretrained_model_name_or_path"),eBt.forEach(t),h5r=r(L7,":"),L7.forEach(t),p5r=i(Bl),se=n(Bl,"UL",{});var le=s(se);NM=n(le,"LI",{});var yDe=s(NM);b8e=n(yDe,"STRONG",{});var oBt=s(b8e);_5r=r(oBt,"albert"),oBt.forEach(t),u5r=r(yDe," \u2014 "),tY=n(yDe,"A",{href:!0});var rBt=s(tY);b5r=r(rBt,"TFAlbertForPreTraining"),rBt.forEach(t),v5r=r(yDe," (ALBERT model)"),yDe.forEach(t),F5r=i(le),qM=n(le,"LI",{});var xDe=s(qM);v8e=n(xDe,"STRONG",{});var tBt=s(v8e);T5r=r(tBt,"bart"),tBt.forEach(t),M5r=r(xDe," \u2014 "),aY=n(xDe,"A",{href:!0});var aBt=s(aY);E5r=r(aBt,"TFBartForConditionalGeneration"),aBt.forEach(t),C5r=r(xDe," (BART model)"),xDe.forEach(t),w5r=i(le),jM=n(le,"LI",{});var $De=s(jM);F8e=n($De,"STRONG",{});var nBt=s(F8e);A5r=r(nBt,"bert"),nBt.forEach(t),L5r=r($De," \u2014 "),nY=n($De,"A",{href:!0});var sBt=s(nY);y5r=r(sBt,"TFBertForPreTraining"),sBt.forEach(t),x5r=r($De," (BERT model)"),$De.forEach(t),$5r=i(le),DM=n(le,"LI",{});var kDe=s(DM);T8e=n(kDe,"STRONG",{});var lBt=s(T8e);k5r=r(lBt,"camembert"),lBt.forEach(t),S5r=r(kDe," \u2014 "),sY=n(kDe,"A",{href:!0});var iBt=s(sY);R5r=r(iBt,"TFCamembertForMaskedLM"),iBt.forEach(t),P5r=r(kDe," (CamemBERT model)"),kDe.forEach(t),B5r=i(le),GM=n(le,"LI",{});var SDe=s(GM);M8e=n(SDe,"STRONG",{});var dBt=s(M8e);I5r=r(dBt,"ctrl"),dBt.forEach(t),N5r=r(SDe," \u2014 "),lY=n(SDe,"A",{href:!0});var cBt=s(lY);q5r=r(cBt,"TFCTRLLMHeadModel"),cBt.forEach(t),j5r=r(SDe," (CTRL model)"),SDe.forEach(t),D5r=i(le),OM=n(le,"LI",{});var RDe=s(OM);E8e=n(RDe,"STRONG",{});var fBt=s(E8e);G5r=r(fBt,"distilbert"),fBt.forEach(t),O5r=r(RDe," \u2014 "),iY=n(RDe,"A",{href:!0});var mBt=s(iY);V5r=r(mBt,"TFDistilBertForMaskedLM"),mBt.forEach(t),X5r=r(RDe," (DistilBERT model)"),RDe.forEach(t),z5r=i(le),VM=n(le,"LI",{});var PDe=s(VM);C8e=n(PDe,"STRONG",{});var gBt=s(C8e);W5r=r(gBt,"electra"),gBt.forEach(t),Q5r=r(PDe," \u2014 "),dY=n(PDe,"A",{href:!0});var hBt=s(dY);H5r=r(hBt,"TFElectraForPreTraining"),hBt.forEach(t),U5r=r(PDe," (ELECTRA model)"),PDe.forEach(t),J5r=i(le),XM=n(le,"LI",{});var BDe=s(XM);w8e=n(BDe,"STRONG",{});var pBt=s(w8e);Y5r=r(pBt,"flaubert"),pBt.forEach(t),K5r=r(BDe," \u2014 "),cY=n(BDe,"A",{href:!0});var _Bt=s(cY);Z5r=r(_Bt,"TFFlaubertWithLMHeadModel"),_Bt.forEach(t),e3r=r(BDe," (FlauBERT model)"),BDe.forEach(t),o3r=i(le),zM=n(le,"LI",{});var IDe=s(zM);A8e=n(IDe,"STRONG",{});var uBt=s(A8e);r3r=r(uBt,"funnel"),uBt.forEach(t),t3r=r(IDe," \u2014 "),fY=n(IDe,"A",{href:!0});var bBt=s(fY);a3r=r(bBt,"TFFunnelForPreTraining"),bBt.forEach(t),n3r=r(IDe," (Funnel Transformer model)"),IDe.forEach(t),s3r=i(le),WM=n(le,"LI",{});var NDe=s(WM);L8e=n(NDe,"STRONG",{});var vBt=s(L8e);l3r=r(vBt,"gpt2"),vBt.forEach(t),i3r=r(NDe," \u2014 "),mY=n(NDe,"A",{href:!0});var FBt=s(mY);d3r=r(FBt,"TFGPT2LMHeadModel"),FBt.forEach(t),c3r=r(NDe," (OpenAI GPT-2 model)"),NDe.forEach(t),f3r=i(le),QM=n(le,"LI",{});var qDe=s(QM);y8e=n(qDe,"STRONG",{});var TBt=s(y8e);m3r=r(TBt,"layoutlm"),TBt.forEach(t),g3r=r(qDe," \u2014 "),gY=n(qDe,"A",{href:!0});var MBt=s(gY);h3r=r(MBt,"TFLayoutLMForMaskedLM"),MBt.forEach(t),p3r=r(qDe," (LayoutLM model)"),qDe.forEach(t),_3r=i(le),HM=n(le,"LI",{});var jDe=s(HM);x8e=n(jDe,"STRONG",{});var EBt=s(x8e);u3r=r(EBt,"lxmert"),EBt.forEach(t),b3r=r(jDe," \u2014 "),hY=n(jDe,"A",{href:!0});var CBt=s(hY);v3r=r(CBt,"TFLxmertForPreTraining"),CBt.forEach(t),F3r=r(jDe," (LXMERT model)"),jDe.forEach(t),T3r=i(le),UM=n(le,"LI",{});var DDe=s(UM);$8e=n(DDe,"STRONG",{});var wBt=s($8e);M3r=r(wBt,"mobilebert"),wBt.forEach(t),E3r=r(DDe," \u2014 "),pY=n(DDe,"A",{href:!0});var ABt=s(pY);C3r=r(ABt,"TFMobileBertForPreTraining"),ABt.forEach(t),w3r=r(DDe," (MobileBERT model)"),DDe.forEach(t),A3r=i(le),JM=n(le,"LI",{});var GDe=s(JM);k8e=n(GDe,"STRONG",{});var LBt=s(k8e);L3r=r(LBt,"mpnet"),LBt.forEach(t),y3r=r(GDe," \u2014 "),_Y=n(GDe,"A",{href:!0});var yBt=s(_Y);x3r=r(yBt,"TFMPNetForMaskedLM"),yBt.forEach(t),$3r=r(GDe," (MPNet model)"),GDe.forEach(t),k3r=i(le),YM=n(le,"LI",{});var ODe=s(YM);S8e=n(ODe,"STRONG",{});var xBt=s(S8e);S3r=r(xBt,"openai-gpt"),xBt.forEach(t),R3r=r(ODe," \u2014 "),uY=n(ODe,"A",{href:!0});var $Bt=s(uY);P3r=r($Bt,"TFOpenAIGPTLMHeadModel"),$Bt.forEach(t),B3r=r(ODe," (OpenAI GPT model)"),ODe.forEach(t),I3r=i(le),KM=n(le,"LI",{});var VDe=s(KM);R8e=n(VDe,"STRONG",{});var kBt=s(R8e);N3r=r(kBt,"roberta"),kBt.forEach(t),q3r=r(VDe," \u2014 "),bY=n(VDe,"A",{href:!0});var SBt=s(bY);j3r=r(SBt,"TFRobertaForMaskedLM"),SBt.forEach(t),D3r=r(VDe," (RoBERTa model)"),VDe.forEach(t),G3r=i(le),ZM=n(le,"LI",{});var XDe=s(ZM);P8e=n(XDe,"STRONG",{});var RBt=s(P8e);O3r=r(RBt,"t5"),RBt.forEach(t),V3r=r(XDe," \u2014 "),vY=n(XDe,"A",{href:!0});var PBt=s(vY);X3r=r(PBt,"TFT5ForConditionalGeneration"),PBt.forEach(t),z3r=r(XDe," (T5 model)"),XDe.forEach(t),W3r=i(le),eE=n(le,"LI",{});var zDe=s(eE);B8e=n(zDe,"STRONG",{});var BBt=s(B8e);Q3r=r(BBt,"tapas"),BBt.forEach(t),H3r=r(zDe," \u2014 "),FY=n(zDe,"A",{href:!0});var IBt=s(FY);U3r=r(IBt,"TFTapasForMaskedLM"),IBt.forEach(t),J3r=r(zDe," (TAPAS model)"),zDe.forEach(t),Y3r=i(le),oE=n(le,"LI",{});var WDe=s(oE);I8e=n(WDe,"STRONG",{});var NBt=s(I8e);K3r=r(NBt,"transfo-xl"),NBt.forEach(t),Z3r=r(WDe," \u2014 "),TY=n(WDe,"A",{href:!0});var qBt=s(TY);ewr=r(qBt,"TFTransfoXLLMHeadModel"),qBt.forEach(t),owr=r(WDe," (Transformer-XL model)"),WDe.forEach(t),rwr=i(le),rE=n(le,"LI",{});var QDe=s(rE);N8e=n(QDe,"STRONG",{});var jBt=s(N8e);twr=r(jBt,"vit_mae"),jBt.forEach(t),awr=r(QDe," \u2014 "),MY=n(QDe,"A",{href:!0});var DBt=s(MY);nwr=r(DBt,"TFViTMAEForPreTraining"),DBt.forEach(t),swr=r(QDe," (ViTMAE model)"),QDe.forEach(t),lwr=i(le),tE=n(le,"LI",{});var HDe=s(tE);q8e=n(HDe,"STRONG",{});var GBt=s(q8e);iwr=r(GBt,"xlm"),GBt.forEach(t),dwr=r(HDe," \u2014 "),EY=n(HDe,"A",{href:!0});var OBt=s(EY);cwr=r(OBt,"TFXLMWithLMHeadModel"),OBt.forEach(t),fwr=r(HDe," (XLM model)"),HDe.forEach(t),mwr=i(le),aE=n(le,"LI",{});var UDe=s(aE);j8e=n(UDe,"STRONG",{});var VBt=s(j8e);gwr=r(VBt,"xlm-roberta"),VBt.forEach(t),hwr=r(UDe," \u2014 "),CY=n(UDe,"A",{href:!0});var XBt=s(CY);pwr=r(XBt,"TFXLMRobertaForMaskedLM"),XBt.forEach(t),_wr=r(UDe," (XLM-RoBERTa model)"),UDe.forEach(t),uwr=i(le),nE=n(le,"LI",{});var JDe=s(nE);D8e=n(JDe,"STRONG",{});var zBt=s(D8e);bwr=r(zBt,"xlnet"),zBt.forEach(t),vwr=r(JDe," \u2014 "),wY=n(JDe,"A",{href:!0});var WBt=s(wY);Fwr=r(WBt,"TFXLNetLMHeadModel"),WBt.forEach(t),Twr=r(JDe," (XLNet model)"),JDe.forEach(t),le.forEach(t),Mwr=i(Bl),T(sE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),DWe=i(f),hc=n(f,"H2",{class:!0});var HHe=s(hc);lE=n(HHe,"A",{id:!0,class:!0,href:!0});var QBt=s(lE);G8e=n(QBt,"SPAN",{});var HBt=s(G8e);T(Mx.$$.fragment,HBt),HBt.forEach(t),QBt.forEach(t),Ewr=i(HHe),O8e=n(HHe,"SPAN",{});var UBt=s(O8e);Cwr=r(UBt,"TFAutoModelForCausalLM"),UBt.forEach(t),HHe.forEach(t),GWe=i(f),ar=n(f,"DIV",{class:!0});var Il=s(ar);T(Ex.$$.fragment,Il),wwr=i(Il),pc=n(Il,"P",{});var Eae=s(pc);Awr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AY=n(Eae,"A",{href:!0});var JBt=s(AY);Lwr=r(JBt,"from_pretrained()"),JBt.forEach(t),ywr=r(Eae," class method or the "),LY=n(Eae,"A",{href:!0});var YBt=s(LY);xwr=r(YBt,"from_config()"),YBt.forEach(t),$wr=r(Eae,` class
method.`),Eae.forEach(t),kwr=i(Il),Cx=n(Il,"P",{});var UHe=s(Cx);Swr=r(UHe,"This class cannot be instantiated directly using "),V8e=n(UHe,"CODE",{});var KBt=s(V8e);Rwr=r(KBt,"__init__()"),KBt.forEach(t),Pwr=r(UHe," (throws an error)."),UHe.forEach(t),Bwr=i(Il),Bt=n(Il,"DIV",{class:!0});var y7=s(Bt);T(wx.$$.fragment,y7),Iwr=i(y7),X8e=n(y7,"P",{});var ZBt=s(X8e);Nwr=r(ZBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZBt.forEach(t),qwr=i(y7),_c=n(y7,"P",{});var Cae=s(_c);jwr=r(Cae,`Note:
Loading a model from its configuration file does `),z8e=n(Cae,"STRONG",{});var eIt=s(z8e);Dwr=r(eIt,"not"),eIt.forEach(t),Gwr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(Cae,"A",{href:!0});var oIt=s(yY);Owr=r(oIt,"from_pretrained()"),oIt.forEach(t),Vwr=r(Cae," to load the model weights."),Cae.forEach(t),Xwr=i(y7),T(iE.$$.fragment,y7),y7.forEach(t),zwr=i(Il),Sr=n(Il,"DIV",{class:!0});var Nl=s(Sr);T(Ax.$$.fragment,Nl),Wwr=i(Nl),W8e=n(Nl,"P",{});var rIt=s(W8e);Qwr=r(rIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rIt.forEach(t),Hwr=i(Nl),cn=n(Nl,"P",{});var x7=s(cn);Uwr=r(x7,"The model class to instantiate is selected based on the "),Q8e=n(x7,"CODE",{});var tIt=s(Q8e);Jwr=r(tIt,"model_type"),tIt.forEach(t),Ywr=r(x7,` property of the config object (either
passed as an argument or loaded from `),H8e=n(x7,"CODE",{});var aIt=s(H8e);Kwr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),Zwr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U8e=n(x7,"CODE",{});var nIt=s(U8e);e6r=r(nIt,"pretrained_model_name_or_path"),nIt.forEach(t),o6r=r(x7,":"),x7.forEach(t),r6r=i(Nl),Me=n(Nl,"UL",{});var Ce=s(Me);dE=n(Ce,"LI",{});var YDe=s(dE);J8e=n(YDe,"STRONG",{});var sIt=s(J8e);t6r=r(sIt,"bert"),sIt.forEach(t),a6r=r(YDe," \u2014 "),xY=n(YDe,"A",{href:!0});var lIt=s(xY);n6r=r(lIt,"TFBertLMHeadModel"),lIt.forEach(t),s6r=r(YDe," (BERT model)"),YDe.forEach(t),l6r=i(Ce),cE=n(Ce,"LI",{});var KDe=s(cE);Y8e=n(KDe,"STRONG",{});var iIt=s(Y8e);i6r=r(iIt,"camembert"),iIt.forEach(t),d6r=r(KDe," \u2014 "),$Y=n(KDe,"A",{href:!0});var dIt=s($Y);c6r=r(dIt,"TFCamembertForCausalLM"),dIt.forEach(t),f6r=r(KDe," (CamemBERT model)"),KDe.forEach(t),m6r=i(Ce),fE=n(Ce,"LI",{});var ZDe=s(fE);K8e=n(ZDe,"STRONG",{});var cIt=s(K8e);g6r=r(cIt,"ctrl"),cIt.forEach(t),h6r=r(ZDe," \u2014 "),kY=n(ZDe,"A",{href:!0});var fIt=s(kY);p6r=r(fIt,"TFCTRLLMHeadModel"),fIt.forEach(t),_6r=r(ZDe," (CTRL model)"),ZDe.forEach(t),u6r=i(Ce),mE=n(Ce,"LI",{});var eGe=s(mE);Z8e=n(eGe,"STRONG",{});var mIt=s(Z8e);b6r=r(mIt,"gpt2"),mIt.forEach(t),v6r=r(eGe," \u2014 "),SY=n(eGe,"A",{href:!0});var gIt=s(SY);F6r=r(gIt,"TFGPT2LMHeadModel"),gIt.forEach(t),T6r=r(eGe," (OpenAI GPT-2 model)"),eGe.forEach(t),M6r=i(Ce),gE=n(Ce,"LI",{});var oGe=s(gE);eMe=n(oGe,"STRONG",{});var hIt=s(eMe);E6r=r(hIt,"gptj"),hIt.forEach(t),C6r=r(oGe," \u2014 "),RY=n(oGe,"A",{href:!0});var pIt=s(RY);w6r=r(pIt,"TFGPTJForCausalLM"),pIt.forEach(t),A6r=r(oGe," (GPT-J model)"),oGe.forEach(t),L6r=i(Ce),hE=n(Ce,"LI",{});var rGe=s(hE);oMe=n(rGe,"STRONG",{});var _It=s(oMe);y6r=r(_It,"openai-gpt"),_It.forEach(t),x6r=r(rGe," \u2014 "),PY=n(rGe,"A",{href:!0});var uIt=s(PY);$6r=r(uIt,"TFOpenAIGPTLMHeadModel"),uIt.forEach(t),k6r=r(rGe," (OpenAI GPT model)"),rGe.forEach(t),S6r=i(Ce),pE=n(Ce,"LI",{});var tGe=s(pE);rMe=n(tGe,"STRONG",{});var bIt=s(rMe);R6r=r(bIt,"opt"),bIt.forEach(t),P6r=r(tGe," \u2014 "),BY=n(tGe,"A",{href:!0});var vIt=s(BY);B6r=r(vIt,"TFOPTForCausalLM"),vIt.forEach(t),I6r=r(tGe," (OPT model)"),tGe.forEach(t),N6r=i(Ce),_E=n(Ce,"LI",{});var aGe=s(_E);tMe=n(aGe,"STRONG",{});var FIt=s(tMe);q6r=r(FIt,"rembert"),FIt.forEach(t),j6r=r(aGe," \u2014 "),IY=n(aGe,"A",{href:!0});var TIt=s(IY);D6r=r(TIt,"TFRemBertForCausalLM"),TIt.forEach(t),G6r=r(aGe," (RemBERT model)"),aGe.forEach(t),O6r=i(Ce),uE=n(Ce,"LI",{});var nGe=s(uE);aMe=n(nGe,"STRONG",{});var MIt=s(aMe);V6r=r(MIt,"roberta"),MIt.forEach(t),X6r=r(nGe," \u2014 "),NY=n(nGe,"A",{href:!0});var EIt=s(NY);z6r=r(EIt,"TFRobertaForCausalLM"),EIt.forEach(t),W6r=r(nGe," (RoBERTa model)"),nGe.forEach(t),Q6r=i(Ce),bE=n(Ce,"LI",{});var sGe=s(bE);nMe=n(sGe,"STRONG",{});var CIt=s(nMe);H6r=r(CIt,"roformer"),CIt.forEach(t),U6r=r(sGe," \u2014 "),qY=n(sGe,"A",{href:!0});var wIt=s(qY);J6r=r(wIt,"TFRoFormerForCausalLM"),wIt.forEach(t),Y6r=r(sGe," (RoFormer model)"),sGe.forEach(t),K6r=i(Ce),vE=n(Ce,"LI",{});var lGe=s(vE);sMe=n(lGe,"STRONG",{});var AIt=s(sMe);Z6r=r(AIt,"transfo-xl"),AIt.forEach(t),eAr=r(lGe," \u2014 "),jY=n(lGe,"A",{href:!0});var LIt=s(jY);oAr=r(LIt,"TFTransfoXLLMHeadModel"),LIt.forEach(t),rAr=r(lGe," (Transformer-XL model)"),lGe.forEach(t),tAr=i(Ce),FE=n(Ce,"LI",{});var iGe=s(FE);lMe=n(iGe,"STRONG",{});var yIt=s(lMe);aAr=r(yIt,"xlm"),yIt.forEach(t),nAr=r(iGe," \u2014 "),DY=n(iGe,"A",{href:!0});var xIt=s(DY);sAr=r(xIt,"TFXLMWithLMHeadModel"),xIt.forEach(t),lAr=r(iGe," (XLM model)"),iGe.forEach(t),iAr=i(Ce),TE=n(Ce,"LI",{});var dGe=s(TE);iMe=n(dGe,"STRONG",{});var $It=s(iMe);dAr=r($It,"xlnet"),$It.forEach(t),cAr=r(dGe," \u2014 "),GY=n(dGe,"A",{href:!0});var kIt=s(GY);fAr=r(kIt,"TFXLNetLMHeadModel"),kIt.forEach(t),mAr=r(dGe," (XLNet model)"),dGe.forEach(t),Ce.forEach(t),gAr=i(Nl),T(ME.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),OWe=i(f),uc=n(f,"H2",{class:!0});var JHe=s(uc);EE=n(JHe,"A",{id:!0,class:!0,href:!0});var SIt=s(EE);dMe=n(SIt,"SPAN",{});var RIt=s(dMe);T(Lx.$$.fragment,RIt),RIt.forEach(t),SIt.forEach(t),hAr=i(JHe),cMe=n(JHe,"SPAN",{});var PIt=s(cMe);pAr=r(PIt,"TFAutoModelForImageClassification"),PIt.forEach(t),JHe.forEach(t),VWe=i(f),nr=n(f,"DIV",{class:!0});var ql=s(nr);T(yx.$$.fragment,ql),_Ar=i(ql),bc=n(ql,"P",{});var wae=s(bc);uAr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OY=n(wae,"A",{href:!0});var BIt=s(OY);bAr=r(BIt,"from_pretrained()"),BIt.forEach(t),vAr=r(wae," class method or the "),VY=n(wae,"A",{href:!0});var IIt=s(VY);FAr=r(IIt,"from_config()"),IIt.forEach(t),TAr=r(wae,` class
method.`),wae.forEach(t),MAr=i(ql),xx=n(ql,"P",{});var YHe=s(xx);EAr=r(YHe,"This class cannot be instantiated directly using "),fMe=n(YHe,"CODE",{});var NIt=s(fMe);CAr=r(NIt,"__init__()"),NIt.forEach(t),wAr=r(YHe," (throws an error)."),YHe.forEach(t),AAr=i(ql),It=n(ql,"DIV",{class:!0});var $7=s(It);T($x.$$.fragment,$7),LAr=i($7),mMe=n($7,"P",{});var qIt=s(mMe);yAr=r(qIt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qIt.forEach(t),xAr=i($7),vc=n($7,"P",{});var Aae=s(vc);$Ar=r(Aae,`Note:
Loading a model from its configuration file does `),gMe=n(Aae,"STRONG",{});var jIt=s(gMe);kAr=r(jIt,"not"),jIt.forEach(t),SAr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(Aae,"A",{href:!0});var DIt=s(XY);RAr=r(DIt,"from_pretrained()"),DIt.forEach(t),PAr=r(Aae," to load the model weights."),Aae.forEach(t),BAr=i($7),T(CE.$$.fragment,$7),$7.forEach(t),IAr=i(ql),Rr=n(ql,"DIV",{class:!0});var jl=s(Rr);T(kx.$$.fragment,jl),NAr=i(jl),hMe=n(jl,"P",{});var GIt=s(hMe);qAr=r(GIt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GIt.forEach(t),jAr=i(jl),fn=n(jl,"P",{});var k7=s(fn);DAr=r(k7,"The model class to instantiate is selected based on the "),pMe=n(k7,"CODE",{});var OIt=s(pMe);GAr=r(OIt,"model_type"),OIt.forEach(t),OAr=r(k7,` property of the config object (either
passed as an argument or loaded from `),_Me=n(k7,"CODE",{});var VIt=s(_Me);VAr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),XAr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(k7,"CODE",{});var XIt=s(uMe);zAr=r(XIt,"pretrained_model_name_or_path"),XIt.forEach(t),WAr=r(k7,":"),k7.forEach(t),QAr=i(jl),Ve=n(jl,"UL",{});var Mo=s(Ve);wE=n(Mo,"LI",{});var cGe=s(wE);bMe=n(cGe,"STRONG",{});var zIt=s(bMe);HAr=r(zIt,"convnext"),zIt.forEach(t),UAr=r(cGe," \u2014 "),zY=n(cGe,"A",{href:!0});var WIt=s(zY);JAr=r(WIt,"TFConvNextForImageClassification"),WIt.forEach(t),YAr=r(cGe," (ConvNeXT model)"),cGe.forEach(t),KAr=i(Mo),AE=n(Mo,"LI",{});var fGe=s(AE);vMe=n(fGe,"STRONG",{});var QIt=s(vMe);ZAr=r(QIt,"data2vec-vision"),QIt.forEach(t),e7r=r(fGe," \u2014 "),WY=n(fGe,"A",{href:!0});var HIt=s(WY);o7r=r(HIt,"TFData2VecVisionForImageClassification"),HIt.forEach(t),r7r=r(fGe," (Data2VecVision model)"),fGe.forEach(t),t7r=i(Mo),el=n(Mo,"LI",{});var aR=s(el);FMe=n(aR,"STRONG",{});var UIt=s(FMe);a7r=r(UIt,"deit"),UIt.forEach(t),n7r=r(aR," \u2014 "),QY=n(aR,"A",{href:!0});var JIt=s(QY);s7r=r(JIt,"TFDeiTForImageClassification"),JIt.forEach(t),l7r=r(aR," or "),HY=n(aR,"A",{href:!0});var YIt=s(HY);i7r=r(YIt,"TFDeiTForImageClassificationWithTeacher"),YIt.forEach(t),d7r=r(aR," (DeiT model)"),aR.forEach(t),c7r=i(Mo),LE=n(Mo,"LI",{});var mGe=s(LE);TMe=n(mGe,"STRONG",{});var KIt=s(TMe);f7r=r(KIt,"regnet"),KIt.forEach(t),m7r=r(mGe," \u2014 "),UY=n(mGe,"A",{href:!0});var ZIt=s(UY);g7r=r(ZIt,"TFRegNetForImageClassification"),ZIt.forEach(t),h7r=r(mGe," (RegNet model)"),mGe.forEach(t),p7r=i(Mo),yE=n(Mo,"LI",{});var gGe=s(yE);MMe=n(gGe,"STRONG",{});var eNt=s(MMe);_7r=r(eNt,"resnet"),eNt.forEach(t),u7r=r(gGe," \u2014 "),JY=n(gGe,"A",{href:!0});var oNt=s(JY);b7r=r(oNt,"TFResNetForImageClassification"),oNt.forEach(t),v7r=r(gGe," (ResNet model)"),gGe.forEach(t),F7r=i(Mo),xE=n(Mo,"LI",{});var hGe=s(xE);EMe=n(hGe,"STRONG",{});var rNt=s(EMe);T7r=r(rNt,"segformer"),rNt.forEach(t),M7r=r(hGe," \u2014 "),YY=n(hGe,"A",{href:!0});var tNt=s(YY);E7r=r(tNt,"TFSegformerForImageClassification"),tNt.forEach(t),C7r=r(hGe," (SegFormer model)"),hGe.forEach(t),w7r=i(Mo),$E=n(Mo,"LI",{});var pGe=s($E);CMe=n(pGe,"STRONG",{});var aNt=s(CMe);A7r=r(aNt,"swin"),aNt.forEach(t),L7r=r(pGe," \u2014 "),KY=n(pGe,"A",{href:!0});var nNt=s(KY);y7r=r(nNt,"TFSwinForImageClassification"),nNt.forEach(t),x7r=r(pGe," (Swin Transformer model)"),pGe.forEach(t),$7r=i(Mo),kE=n(Mo,"LI",{});var _Ge=s(kE);wMe=n(_Ge,"STRONG",{});var sNt=s(wMe);k7r=r(sNt,"vit"),sNt.forEach(t),S7r=r(_Ge," \u2014 "),ZY=n(_Ge,"A",{href:!0});var lNt=s(ZY);R7r=r(lNt,"TFViTForImageClassification"),lNt.forEach(t),P7r=r(_Ge," (ViT model)"),_Ge.forEach(t),Mo.forEach(t),B7r=i(jl),T(SE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),XWe=i(f),Fc=n(f,"H2",{class:!0});var KHe=s(Fc);RE=n(KHe,"A",{id:!0,class:!0,href:!0});var iNt=s(RE);AMe=n(iNt,"SPAN",{});var dNt=s(AMe);T(Sx.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),I7r=i(KHe),LMe=n(KHe,"SPAN",{});var cNt=s(LMe);N7r=r(cNt,"TFAutoModelForMaskedLM"),cNt.forEach(t),KHe.forEach(t),zWe=i(f),sr=n(f,"DIV",{class:!0});var Dl=s(sr);T(Rx.$$.fragment,Dl),q7r=i(Dl),Tc=n(Dl,"P",{});var Lae=s(Tc);j7r=r(Lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eK=n(Lae,"A",{href:!0});var fNt=s(eK);D7r=r(fNt,"from_pretrained()"),fNt.forEach(t),G7r=r(Lae," class method or the "),oK=n(Lae,"A",{href:!0});var mNt=s(oK);O7r=r(mNt,"from_config()"),mNt.forEach(t),V7r=r(Lae,` class
method.`),Lae.forEach(t),X7r=i(Dl),Px=n(Dl,"P",{});var ZHe=s(Px);z7r=r(ZHe,"This class cannot be instantiated directly using "),yMe=n(ZHe,"CODE",{});var gNt=s(yMe);W7r=r(gNt,"__init__()"),gNt.forEach(t),Q7r=r(ZHe," (throws an error)."),ZHe.forEach(t),H7r=i(Dl),Nt=n(Dl,"DIV",{class:!0});var S7=s(Nt);T(Bx.$$.fragment,S7),U7r=i(S7),xMe=n(S7,"P",{});var hNt=s(xMe);J7r=r(hNt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hNt.forEach(t),Y7r=i(S7),Mc=n(S7,"P",{});var yae=s(Mc);K7r=r(yae,`Note:
Loading a model from its configuration file does `),$Me=n(yae,"STRONG",{});var pNt=s($Me);Z7r=r(pNt,"not"),pNt.forEach(t),eLr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(yae,"A",{href:!0});var _Nt=s(rK);oLr=r(_Nt,"from_pretrained()"),_Nt.forEach(t),rLr=r(yae," to load the model weights."),yae.forEach(t),tLr=i(S7),T(PE.$$.fragment,S7),S7.forEach(t),aLr=i(Dl),Pr=n(Dl,"DIV",{class:!0});var Gl=s(Pr);T(Ix.$$.fragment,Gl),nLr=i(Gl),kMe=n(Gl,"P",{});var uNt=s(kMe);sLr=r(uNt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uNt.forEach(t),lLr=i(Gl),mn=n(Gl,"P",{});var R7=s(mn);iLr=r(R7,"The model class to instantiate is selected based on the "),SMe=n(R7,"CODE",{});var bNt=s(SMe);dLr=r(bNt,"model_type"),bNt.forEach(t),cLr=r(R7,` property of the config object (either
passed as an argument or loaded from `),RMe=n(R7,"CODE",{});var vNt=s(RMe);fLr=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),mLr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(R7,"CODE",{});var FNt=s(PMe);gLr=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),hLr=r(R7,":"),R7.forEach(t),pLr=i(Gl),ie=n(Gl,"UL",{});var ge=s(ie);BE=n(ge,"LI",{});var uGe=s(BE);BMe=n(uGe,"STRONG",{});var TNt=s(BMe);_Lr=r(TNt,"albert"),TNt.forEach(t),uLr=r(uGe," \u2014 "),tK=n(uGe,"A",{href:!0});var MNt=s(tK);bLr=r(MNt,"TFAlbertForMaskedLM"),MNt.forEach(t),vLr=r(uGe," (ALBERT model)"),uGe.forEach(t),FLr=i(ge),IE=n(ge,"LI",{});var bGe=s(IE);IMe=n(bGe,"STRONG",{});var ENt=s(IMe);TLr=r(ENt,"bert"),ENt.forEach(t),MLr=r(bGe," \u2014 "),aK=n(bGe,"A",{href:!0});var CNt=s(aK);ELr=r(CNt,"TFBertForMaskedLM"),CNt.forEach(t),CLr=r(bGe," (BERT model)"),bGe.forEach(t),wLr=i(ge),NE=n(ge,"LI",{});var vGe=s(NE);NMe=n(vGe,"STRONG",{});var wNt=s(NMe);ALr=r(wNt,"camembert"),wNt.forEach(t),LLr=r(vGe," \u2014 "),nK=n(vGe,"A",{href:!0});var ANt=s(nK);yLr=r(ANt,"TFCamembertForMaskedLM"),ANt.forEach(t),xLr=r(vGe," (CamemBERT model)"),vGe.forEach(t),$Lr=i(ge),qE=n(ge,"LI",{});var FGe=s(qE);qMe=n(FGe,"STRONG",{});var LNt=s(qMe);kLr=r(LNt,"convbert"),LNt.forEach(t),SLr=r(FGe," \u2014 "),sK=n(FGe,"A",{href:!0});var yNt=s(sK);RLr=r(yNt,"TFConvBertForMaskedLM"),yNt.forEach(t),PLr=r(FGe," (ConvBERT model)"),FGe.forEach(t),BLr=i(ge),jE=n(ge,"LI",{});var TGe=s(jE);jMe=n(TGe,"STRONG",{});var xNt=s(jMe);ILr=r(xNt,"deberta"),xNt.forEach(t),NLr=r(TGe," \u2014 "),lK=n(TGe,"A",{href:!0});var $Nt=s(lK);qLr=r($Nt,"TFDebertaForMaskedLM"),$Nt.forEach(t),jLr=r(TGe," (DeBERTa model)"),TGe.forEach(t),DLr=i(ge),DE=n(ge,"LI",{});var MGe=s(DE);DMe=n(MGe,"STRONG",{});var kNt=s(DMe);GLr=r(kNt,"deberta-v2"),kNt.forEach(t),OLr=r(MGe," \u2014 "),iK=n(MGe,"A",{href:!0});var SNt=s(iK);VLr=r(SNt,"TFDebertaV2ForMaskedLM"),SNt.forEach(t),XLr=r(MGe," (DeBERTa-v2 model)"),MGe.forEach(t),zLr=i(ge),GE=n(ge,"LI",{});var EGe=s(GE);GMe=n(EGe,"STRONG",{});var RNt=s(GMe);WLr=r(RNt,"distilbert"),RNt.forEach(t),QLr=r(EGe," \u2014 "),dK=n(EGe,"A",{href:!0});var PNt=s(dK);HLr=r(PNt,"TFDistilBertForMaskedLM"),PNt.forEach(t),ULr=r(EGe," (DistilBERT model)"),EGe.forEach(t),JLr=i(ge),OE=n(ge,"LI",{});var CGe=s(OE);OMe=n(CGe,"STRONG",{});var BNt=s(OMe);YLr=r(BNt,"electra"),BNt.forEach(t),KLr=r(CGe," \u2014 "),cK=n(CGe,"A",{href:!0});var INt=s(cK);ZLr=r(INt,"TFElectraForMaskedLM"),INt.forEach(t),eyr=r(CGe," (ELECTRA model)"),CGe.forEach(t),oyr=i(ge),VE=n(ge,"LI",{});var wGe=s(VE);VMe=n(wGe,"STRONG",{});var NNt=s(VMe);ryr=r(NNt,"flaubert"),NNt.forEach(t),tyr=r(wGe," \u2014 "),fK=n(wGe,"A",{href:!0});var qNt=s(fK);ayr=r(qNt,"TFFlaubertWithLMHeadModel"),qNt.forEach(t),nyr=r(wGe," (FlauBERT model)"),wGe.forEach(t),syr=i(ge),XE=n(ge,"LI",{});var AGe=s(XE);XMe=n(AGe,"STRONG",{});var jNt=s(XMe);lyr=r(jNt,"funnel"),jNt.forEach(t),iyr=r(AGe," \u2014 "),mK=n(AGe,"A",{href:!0});var DNt=s(mK);dyr=r(DNt,"TFFunnelForMaskedLM"),DNt.forEach(t),cyr=r(AGe," (Funnel Transformer model)"),AGe.forEach(t),fyr=i(ge),zE=n(ge,"LI",{});var LGe=s(zE);zMe=n(LGe,"STRONG",{});var GNt=s(zMe);myr=r(GNt,"layoutlm"),GNt.forEach(t),gyr=r(LGe," \u2014 "),gK=n(LGe,"A",{href:!0});var ONt=s(gK);hyr=r(ONt,"TFLayoutLMForMaskedLM"),ONt.forEach(t),pyr=r(LGe," (LayoutLM model)"),LGe.forEach(t),_yr=i(ge),WE=n(ge,"LI",{});var yGe=s(WE);WMe=n(yGe,"STRONG",{});var VNt=s(WMe);uyr=r(VNt,"longformer"),VNt.forEach(t),byr=r(yGe," \u2014 "),hK=n(yGe,"A",{href:!0});var XNt=s(hK);vyr=r(XNt,"TFLongformerForMaskedLM"),XNt.forEach(t),Fyr=r(yGe," (Longformer model)"),yGe.forEach(t),Tyr=i(ge),QE=n(ge,"LI",{});var xGe=s(QE);QMe=n(xGe,"STRONG",{});var zNt=s(QMe);Myr=r(zNt,"mobilebert"),zNt.forEach(t),Eyr=r(xGe," \u2014 "),pK=n(xGe,"A",{href:!0});var WNt=s(pK);Cyr=r(WNt,"TFMobileBertForMaskedLM"),WNt.forEach(t),wyr=r(xGe," (MobileBERT model)"),xGe.forEach(t),Ayr=i(ge),HE=n(ge,"LI",{});var $Ge=s(HE);HMe=n($Ge,"STRONG",{});var QNt=s(HMe);Lyr=r(QNt,"mpnet"),QNt.forEach(t),yyr=r($Ge," \u2014 "),_K=n($Ge,"A",{href:!0});var HNt=s(_K);xyr=r(HNt,"TFMPNetForMaskedLM"),HNt.forEach(t),$yr=r($Ge," (MPNet model)"),$Ge.forEach(t),kyr=i(ge),UE=n(ge,"LI",{});var kGe=s(UE);UMe=n(kGe,"STRONG",{});var UNt=s(UMe);Syr=r(UNt,"rembert"),UNt.forEach(t),Ryr=r(kGe," \u2014 "),uK=n(kGe,"A",{href:!0});var JNt=s(uK);Pyr=r(JNt,"TFRemBertForMaskedLM"),JNt.forEach(t),Byr=r(kGe," (RemBERT model)"),kGe.forEach(t),Iyr=i(ge),JE=n(ge,"LI",{});var SGe=s(JE);JMe=n(SGe,"STRONG",{});var YNt=s(JMe);Nyr=r(YNt,"roberta"),YNt.forEach(t),qyr=r(SGe," \u2014 "),bK=n(SGe,"A",{href:!0});var KNt=s(bK);jyr=r(KNt,"TFRobertaForMaskedLM"),KNt.forEach(t),Dyr=r(SGe," (RoBERTa model)"),SGe.forEach(t),Gyr=i(ge),YE=n(ge,"LI",{});var RGe=s(YE);YMe=n(RGe,"STRONG",{});var ZNt=s(YMe);Oyr=r(ZNt,"roformer"),ZNt.forEach(t),Vyr=r(RGe," \u2014 "),vK=n(RGe,"A",{href:!0});var eqt=s(vK);Xyr=r(eqt,"TFRoFormerForMaskedLM"),eqt.forEach(t),zyr=r(RGe," (RoFormer model)"),RGe.forEach(t),Wyr=i(ge),KE=n(ge,"LI",{});var PGe=s(KE);KMe=n(PGe,"STRONG",{});var oqt=s(KMe);Qyr=r(oqt,"tapas"),oqt.forEach(t),Hyr=r(PGe," \u2014 "),FK=n(PGe,"A",{href:!0});var rqt=s(FK);Uyr=r(rqt,"TFTapasForMaskedLM"),rqt.forEach(t),Jyr=r(PGe," (TAPAS model)"),PGe.forEach(t),Yyr=i(ge),ZE=n(ge,"LI",{});var BGe=s(ZE);ZMe=n(BGe,"STRONG",{});var tqt=s(ZMe);Kyr=r(tqt,"xlm"),tqt.forEach(t),Zyr=r(BGe," \u2014 "),TK=n(BGe,"A",{href:!0});var aqt=s(TK);e9r=r(aqt,"TFXLMWithLMHeadModel"),aqt.forEach(t),o9r=r(BGe," (XLM model)"),BGe.forEach(t),r9r=i(ge),eC=n(ge,"LI",{});var IGe=s(eC);eEe=n(IGe,"STRONG",{});var nqt=s(eEe);t9r=r(nqt,"xlm-roberta"),nqt.forEach(t),a9r=r(IGe," \u2014 "),MK=n(IGe,"A",{href:!0});var sqt=s(MK);n9r=r(sqt,"TFXLMRobertaForMaskedLM"),sqt.forEach(t),s9r=r(IGe," (XLM-RoBERTa model)"),IGe.forEach(t),ge.forEach(t),l9r=i(Gl),T(oC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),WWe=i(f),Ec=n(f,"H2",{class:!0});var eUe=s(Ec);rC=n(eUe,"A",{id:!0,class:!0,href:!0});var lqt=s(rC);oEe=n(lqt,"SPAN",{});var iqt=s(oEe);T(Nx.$$.fragment,iqt),iqt.forEach(t),lqt.forEach(t),i9r=i(eUe),rEe=n(eUe,"SPAN",{});var dqt=s(rEe);d9r=r(dqt,"TFAutoModelForSeq2SeqLM"),dqt.forEach(t),eUe.forEach(t),QWe=i(f),lr=n(f,"DIV",{class:!0});var Ol=s(lr);T(qx.$$.fragment,Ol),c9r=i(Ol),Cc=n(Ol,"P",{});var xae=s(Cc);f9r=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EK=n(xae,"A",{href:!0});var cqt=s(EK);m9r=r(cqt,"from_pretrained()"),cqt.forEach(t),g9r=r(xae," class method or the "),CK=n(xae,"A",{href:!0});var fqt=s(CK);h9r=r(fqt,"from_config()"),fqt.forEach(t),p9r=r(xae,` class
method.`),xae.forEach(t),_9r=i(Ol),jx=n(Ol,"P",{});var oUe=s(jx);u9r=r(oUe,"This class cannot be instantiated directly using "),tEe=n(oUe,"CODE",{});var mqt=s(tEe);b9r=r(mqt,"__init__()"),mqt.forEach(t),v9r=r(oUe," (throws an error)."),oUe.forEach(t),F9r=i(Ol),qt=n(Ol,"DIV",{class:!0});var P7=s(qt);T(Dx.$$.fragment,P7),T9r=i(P7),aEe=n(P7,"P",{});var gqt=s(aEe);M9r=r(gqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gqt.forEach(t),E9r=i(P7),wc=n(P7,"P",{});var $ae=s(wc);C9r=r($ae,`Note:
Loading a model from its configuration file does `),nEe=n($ae,"STRONG",{});var hqt=s(nEe);w9r=r(hqt,"not"),hqt.forEach(t),A9r=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n($ae,"A",{href:!0});var pqt=s(wK);L9r=r(pqt,"from_pretrained()"),pqt.forEach(t),y9r=r($ae," to load the model weights."),$ae.forEach(t),x9r=i(P7),T(tC.$$.fragment,P7),P7.forEach(t),$9r=i(Ol),Br=n(Ol,"DIV",{class:!0});var Vl=s(Br);T(Gx.$$.fragment,Vl),k9r=i(Vl),sEe=n(Vl,"P",{});var _qt=s(sEe);S9r=r(_qt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_qt.forEach(t),R9r=i(Vl),gn=n(Vl,"P",{});var B7=s(gn);P9r=r(B7,"The model class to instantiate is selected based on the "),lEe=n(B7,"CODE",{});var uqt=s(lEe);B9r=r(uqt,"model_type"),uqt.forEach(t),I9r=r(B7,` property of the config object (either
passed as an argument or loaded from `),iEe=n(B7,"CODE",{});var bqt=s(iEe);N9r=r(bqt,"pretrained_model_name_or_path"),bqt.forEach(t),q9r=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(B7,"CODE",{});var vqt=s(dEe);j9r=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),D9r=r(B7,":"),B7.forEach(t),G9r=i(Vl),ye=n(Vl,"UL",{});var Ie=s(ye);aC=n(Ie,"LI",{});var NGe=s(aC);cEe=n(NGe,"STRONG",{});var Fqt=s(cEe);O9r=r(Fqt,"bart"),Fqt.forEach(t),V9r=r(NGe," \u2014 "),AK=n(NGe,"A",{href:!0});var Tqt=s(AK);X9r=r(Tqt,"TFBartForConditionalGeneration"),Tqt.forEach(t),z9r=r(NGe," (BART model)"),NGe.forEach(t),W9r=i(Ie),nC=n(Ie,"LI",{});var qGe=s(nC);fEe=n(qGe,"STRONG",{});var Mqt=s(fEe);Q9r=r(Mqt,"blenderbot"),Mqt.forEach(t),H9r=r(qGe," \u2014 "),LK=n(qGe,"A",{href:!0});var Eqt=s(LK);U9r=r(Eqt,"TFBlenderbotForConditionalGeneration"),Eqt.forEach(t),J9r=r(qGe," (Blenderbot model)"),qGe.forEach(t),Y9r=i(Ie),sC=n(Ie,"LI",{});var jGe=s(sC);mEe=n(jGe,"STRONG",{});var Cqt=s(mEe);K9r=r(Cqt,"blenderbot-small"),Cqt.forEach(t),Z9r=r(jGe," \u2014 "),yK=n(jGe,"A",{href:!0});var wqt=s(yK);exr=r(wqt,"TFBlenderbotSmallForConditionalGeneration"),wqt.forEach(t),oxr=r(jGe," (BlenderbotSmall model)"),jGe.forEach(t),rxr=i(Ie),lC=n(Ie,"LI",{});var DGe=s(lC);gEe=n(DGe,"STRONG",{});var Aqt=s(gEe);txr=r(Aqt,"encoder-decoder"),Aqt.forEach(t),axr=r(DGe," \u2014 "),xK=n(DGe,"A",{href:!0});var Lqt=s(xK);nxr=r(Lqt,"TFEncoderDecoderModel"),Lqt.forEach(t),sxr=r(DGe," (Encoder decoder model)"),DGe.forEach(t),lxr=i(Ie),iC=n(Ie,"LI",{});var GGe=s(iC);hEe=n(GGe,"STRONG",{});var yqt=s(hEe);ixr=r(yqt,"led"),yqt.forEach(t),dxr=r(GGe," \u2014 "),$K=n(GGe,"A",{href:!0});var xqt=s($K);cxr=r(xqt,"TFLEDForConditionalGeneration"),xqt.forEach(t),fxr=r(GGe," (LED model)"),GGe.forEach(t),mxr=i(Ie),dC=n(Ie,"LI",{});var OGe=s(dC);pEe=n(OGe,"STRONG",{});var $qt=s(pEe);gxr=r($qt,"marian"),$qt.forEach(t),hxr=r(OGe," \u2014 "),kK=n(OGe,"A",{href:!0});var kqt=s(kK);pxr=r(kqt,"TFMarianMTModel"),kqt.forEach(t),_xr=r(OGe," (Marian model)"),OGe.forEach(t),uxr=i(Ie),cC=n(Ie,"LI",{});var VGe=s(cC);_Ee=n(VGe,"STRONG",{});var Sqt=s(_Ee);bxr=r(Sqt,"mbart"),Sqt.forEach(t),vxr=r(VGe," \u2014 "),SK=n(VGe,"A",{href:!0});var Rqt=s(SK);Fxr=r(Rqt,"TFMBartForConditionalGeneration"),Rqt.forEach(t),Txr=r(VGe," (mBART model)"),VGe.forEach(t),Mxr=i(Ie),fC=n(Ie,"LI",{});var XGe=s(fC);uEe=n(XGe,"STRONG",{});var Pqt=s(uEe);Exr=r(Pqt,"mt5"),Pqt.forEach(t),Cxr=r(XGe," \u2014 "),RK=n(XGe,"A",{href:!0});var Bqt=s(RK);wxr=r(Bqt,"TFMT5ForConditionalGeneration"),Bqt.forEach(t),Axr=r(XGe," (MT5 model)"),XGe.forEach(t),Lxr=i(Ie),mC=n(Ie,"LI",{});var zGe=s(mC);bEe=n(zGe,"STRONG",{});var Iqt=s(bEe);yxr=r(Iqt,"pegasus"),Iqt.forEach(t),xxr=r(zGe," \u2014 "),PK=n(zGe,"A",{href:!0});var Nqt=s(PK);$xr=r(Nqt,"TFPegasusForConditionalGeneration"),Nqt.forEach(t),kxr=r(zGe," (Pegasus model)"),zGe.forEach(t),Sxr=i(Ie),gC=n(Ie,"LI",{});var WGe=s(gC);vEe=n(WGe,"STRONG",{});var qqt=s(vEe);Rxr=r(qqt,"t5"),qqt.forEach(t),Pxr=r(WGe," \u2014 "),BK=n(WGe,"A",{href:!0});var jqt=s(BK);Bxr=r(jqt,"TFT5ForConditionalGeneration"),jqt.forEach(t),Ixr=r(WGe," (T5 model)"),WGe.forEach(t),Ie.forEach(t),Nxr=i(Vl),T(hC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),HWe=i(f),Ac=n(f,"H2",{class:!0});var rUe=s(Ac);pC=n(rUe,"A",{id:!0,class:!0,href:!0});var Dqt=s(pC);FEe=n(Dqt,"SPAN",{});var Gqt=s(FEe);T(Ox.$$.fragment,Gqt),Gqt.forEach(t),Dqt.forEach(t),qxr=i(rUe),TEe=n(rUe,"SPAN",{});var Oqt=s(TEe);jxr=r(Oqt,"TFAutoModelForSequenceClassification"),Oqt.forEach(t),rUe.forEach(t),UWe=i(f),ir=n(f,"DIV",{class:!0});var Xl=s(ir);T(Vx.$$.fragment,Xl),Dxr=i(Xl),Lc=n(Xl,"P",{});var kae=s(Lc);Gxr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IK=n(kae,"A",{href:!0});var Vqt=s(IK);Oxr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),Vxr=r(kae," class method or the "),NK=n(kae,"A",{href:!0});var Xqt=s(NK);Xxr=r(Xqt,"from_config()"),Xqt.forEach(t),zxr=r(kae,` class
method.`),kae.forEach(t),Wxr=i(Xl),Xx=n(Xl,"P",{});var tUe=s(Xx);Qxr=r(tUe,"This class cannot be instantiated directly using "),MEe=n(tUe,"CODE",{});var zqt=s(MEe);Hxr=r(zqt,"__init__()"),zqt.forEach(t),Uxr=r(tUe," (throws an error)."),tUe.forEach(t),Jxr=i(Xl),jt=n(Xl,"DIV",{class:!0});var I7=s(jt);T(zx.$$.fragment,I7),Yxr=i(I7),EEe=n(I7,"P",{});var Wqt=s(EEe);Kxr=r(Wqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wqt.forEach(t),Zxr=i(I7),yc=n(I7,"P",{});var Sae=s(yc);e$r=r(Sae,`Note:
Loading a model from its configuration file does `),CEe=n(Sae,"STRONG",{});var Qqt=s(CEe);o$r=r(Qqt,"not"),Qqt.forEach(t),r$r=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Sae,"A",{href:!0});var Hqt=s(qK);t$r=r(Hqt,"from_pretrained()"),Hqt.forEach(t),a$r=r(Sae," to load the model weights."),Sae.forEach(t),n$r=i(I7),T(_C.$$.fragment,I7),I7.forEach(t),s$r=i(Xl),Ir=n(Xl,"DIV",{class:!0});var zl=s(Ir);T(Wx.$$.fragment,zl),l$r=i(zl),wEe=n(zl,"P",{});var Uqt=s(wEe);i$r=r(Uqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uqt.forEach(t),d$r=i(zl),hn=n(zl,"P",{});var N7=s(hn);c$r=r(N7,"The model class to instantiate is selected based on the "),AEe=n(N7,"CODE",{});var Jqt=s(AEe);f$r=r(Jqt,"model_type"),Jqt.forEach(t),m$r=r(N7,` property of the config object (either
passed as an argument or loaded from `),LEe=n(N7,"CODE",{});var Yqt=s(LEe);g$r=r(Yqt,"pretrained_model_name_or_path"),Yqt.forEach(t),h$r=r(N7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=n(N7,"CODE",{});var Kqt=s(yEe);p$r=r(Kqt,"pretrained_model_name_or_path"),Kqt.forEach(t),_$r=r(N7,":"),N7.forEach(t),u$r=i(zl),te=n(zl,"UL",{});var ne=s(te);uC=n(ne,"LI",{});var QGe=s(uC);xEe=n(QGe,"STRONG",{});var Zqt=s(xEe);b$r=r(Zqt,"albert"),Zqt.forEach(t),v$r=r(QGe," \u2014 "),jK=n(QGe,"A",{href:!0});var ejt=s(jK);F$r=r(ejt,"TFAlbertForSequenceClassification"),ejt.forEach(t),T$r=r(QGe," (ALBERT model)"),QGe.forEach(t),M$r=i(ne),bC=n(ne,"LI",{});var HGe=s(bC);$Ee=n(HGe,"STRONG",{});var ojt=s($Ee);E$r=r(ojt,"bert"),ojt.forEach(t),C$r=r(HGe," \u2014 "),DK=n(HGe,"A",{href:!0});var rjt=s(DK);w$r=r(rjt,"TFBertForSequenceClassification"),rjt.forEach(t),A$r=r(HGe," (BERT model)"),HGe.forEach(t),L$r=i(ne),vC=n(ne,"LI",{});var UGe=s(vC);kEe=n(UGe,"STRONG",{});var tjt=s(kEe);y$r=r(tjt,"camembert"),tjt.forEach(t),x$r=r(UGe," \u2014 "),GK=n(UGe,"A",{href:!0});var ajt=s(GK);$$r=r(ajt,"TFCamembertForSequenceClassification"),ajt.forEach(t),k$r=r(UGe," (CamemBERT model)"),UGe.forEach(t),S$r=i(ne),FC=n(ne,"LI",{});var JGe=s(FC);SEe=n(JGe,"STRONG",{});var njt=s(SEe);R$r=r(njt,"convbert"),njt.forEach(t),P$r=r(JGe," \u2014 "),OK=n(JGe,"A",{href:!0});var sjt=s(OK);B$r=r(sjt,"TFConvBertForSequenceClassification"),sjt.forEach(t),I$r=r(JGe," (ConvBERT model)"),JGe.forEach(t),N$r=i(ne),TC=n(ne,"LI",{});var YGe=s(TC);REe=n(YGe,"STRONG",{});var ljt=s(REe);q$r=r(ljt,"ctrl"),ljt.forEach(t),j$r=r(YGe," \u2014 "),VK=n(YGe,"A",{href:!0});var ijt=s(VK);D$r=r(ijt,"TFCTRLForSequenceClassification"),ijt.forEach(t),G$r=r(YGe," (CTRL model)"),YGe.forEach(t),O$r=i(ne),MC=n(ne,"LI",{});var KGe=s(MC);PEe=n(KGe,"STRONG",{});var djt=s(PEe);V$r=r(djt,"deberta"),djt.forEach(t),X$r=r(KGe," \u2014 "),XK=n(KGe,"A",{href:!0});var cjt=s(XK);z$r=r(cjt,"TFDebertaForSequenceClassification"),cjt.forEach(t),W$r=r(KGe," (DeBERTa model)"),KGe.forEach(t),Q$r=i(ne),EC=n(ne,"LI",{});var ZGe=s(EC);BEe=n(ZGe,"STRONG",{});var fjt=s(BEe);H$r=r(fjt,"deberta-v2"),fjt.forEach(t),U$r=r(ZGe," \u2014 "),zK=n(ZGe,"A",{href:!0});var mjt=s(zK);J$r=r(mjt,"TFDebertaV2ForSequenceClassification"),mjt.forEach(t),Y$r=r(ZGe," (DeBERTa-v2 model)"),ZGe.forEach(t),K$r=i(ne),CC=n(ne,"LI",{});var eOe=s(CC);IEe=n(eOe,"STRONG",{});var gjt=s(IEe);Z$r=r(gjt,"distilbert"),gjt.forEach(t),ekr=r(eOe," \u2014 "),WK=n(eOe,"A",{href:!0});var hjt=s(WK);okr=r(hjt,"TFDistilBertForSequenceClassification"),hjt.forEach(t),rkr=r(eOe," (DistilBERT model)"),eOe.forEach(t),tkr=i(ne),wC=n(ne,"LI",{});var oOe=s(wC);NEe=n(oOe,"STRONG",{});var pjt=s(NEe);akr=r(pjt,"electra"),pjt.forEach(t),nkr=r(oOe," \u2014 "),QK=n(oOe,"A",{href:!0});var _jt=s(QK);skr=r(_jt,"TFElectraForSequenceClassification"),_jt.forEach(t),lkr=r(oOe," (ELECTRA model)"),oOe.forEach(t),ikr=i(ne),AC=n(ne,"LI",{});var rOe=s(AC);qEe=n(rOe,"STRONG",{});var ujt=s(qEe);dkr=r(ujt,"flaubert"),ujt.forEach(t),ckr=r(rOe," \u2014 "),HK=n(rOe,"A",{href:!0});var bjt=s(HK);fkr=r(bjt,"TFFlaubertForSequenceClassification"),bjt.forEach(t),mkr=r(rOe," (FlauBERT model)"),rOe.forEach(t),gkr=i(ne),LC=n(ne,"LI",{});var tOe=s(LC);jEe=n(tOe,"STRONG",{});var vjt=s(jEe);hkr=r(vjt,"funnel"),vjt.forEach(t),pkr=r(tOe," \u2014 "),UK=n(tOe,"A",{href:!0});var Fjt=s(UK);_kr=r(Fjt,"TFFunnelForSequenceClassification"),Fjt.forEach(t),ukr=r(tOe," (Funnel Transformer model)"),tOe.forEach(t),bkr=i(ne),yC=n(ne,"LI",{});var aOe=s(yC);DEe=n(aOe,"STRONG",{});var Tjt=s(DEe);vkr=r(Tjt,"gpt2"),Tjt.forEach(t),Fkr=r(aOe," \u2014 "),JK=n(aOe,"A",{href:!0});var Mjt=s(JK);Tkr=r(Mjt,"TFGPT2ForSequenceClassification"),Mjt.forEach(t),Mkr=r(aOe," (OpenAI GPT-2 model)"),aOe.forEach(t),Ekr=i(ne),xC=n(ne,"LI",{});var nOe=s(xC);GEe=n(nOe,"STRONG",{});var Ejt=s(GEe);Ckr=r(Ejt,"gptj"),Ejt.forEach(t),wkr=r(nOe," \u2014 "),YK=n(nOe,"A",{href:!0});var Cjt=s(YK);Akr=r(Cjt,"TFGPTJForSequenceClassification"),Cjt.forEach(t),Lkr=r(nOe," (GPT-J model)"),nOe.forEach(t),ykr=i(ne),$C=n(ne,"LI",{});var sOe=s($C);OEe=n(sOe,"STRONG",{});var wjt=s(OEe);xkr=r(wjt,"layoutlm"),wjt.forEach(t),$kr=r(sOe," \u2014 "),KK=n(sOe,"A",{href:!0});var Ajt=s(KK);kkr=r(Ajt,"TFLayoutLMForSequenceClassification"),Ajt.forEach(t),Skr=r(sOe," (LayoutLM model)"),sOe.forEach(t),Rkr=i(ne),kC=n(ne,"LI",{});var lOe=s(kC);VEe=n(lOe,"STRONG",{});var Ljt=s(VEe);Pkr=r(Ljt,"longformer"),Ljt.forEach(t),Bkr=r(lOe," \u2014 "),ZK=n(lOe,"A",{href:!0});var yjt=s(ZK);Ikr=r(yjt,"TFLongformerForSequenceClassification"),yjt.forEach(t),Nkr=r(lOe," (Longformer model)"),lOe.forEach(t),qkr=i(ne),SC=n(ne,"LI",{});var iOe=s(SC);XEe=n(iOe,"STRONG",{});var xjt=s(XEe);jkr=r(xjt,"mobilebert"),xjt.forEach(t),Dkr=r(iOe," \u2014 "),eZ=n(iOe,"A",{href:!0});var $jt=s(eZ);Gkr=r($jt,"TFMobileBertForSequenceClassification"),$jt.forEach(t),Okr=r(iOe," (MobileBERT model)"),iOe.forEach(t),Vkr=i(ne),RC=n(ne,"LI",{});var dOe=s(RC);zEe=n(dOe,"STRONG",{});var kjt=s(zEe);Xkr=r(kjt,"mpnet"),kjt.forEach(t),zkr=r(dOe," \u2014 "),oZ=n(dOe,"A",{href:!0});var Sjt=s(oZ);Wkr=r(Sjt,"TFMPNetForSequenceClassification"),Sjt.forEach(t),Qkr=r(dOe," (MPNet model)"),dOe.forEach(t),Hkr=i(ne),PC=n(ne,"LI",{});var cOe=s(PC);WEe=n(cOe,"STRONG",{});var Rjt=s(WEe);Ukr=r(Rjt,"openai-gpt"),Rjt.forEach(t),Jkr=r(cOe," \u2014 "),rZ=n(cOe,"A",{href:!0});var Pjt=s(rZ);Ykr=r(Pjt,"TFOpenAIGPTForSequenceClassification"),Pjt.forEach(t),Kkr=r(cOe," (OpenAI GPT model)"),cOe.forEach(t),Zkr=i(ne),BC=n(ne,"LI",{});var fOe=s(BC);QEe=n(fOe,"STRONG",{});var Bjt=s(QEe);eSr=r(Bjt,"rembert"),Bjt.forEach(t),oSr=r(fOe," \u2014 "),tZ=n(fOe,"A",{href:!0});var Ijt=s(tZ);rSr=r(Ijt,"TFRemBertForSequenceClassification"),Ijt.forEach(t),tSr=r(fOe," (RemBERT model)"),fOe.forEach(t),aSr=i(ne),IC=n(ne,"LI",{});var mOe=s(IC);HEe=n(mOe,"STRONG",{});var Njt=s(HEe);nSr=r(Njt,"roberta"),Njt.forEach(t),sSr=r(mOe," \u2014 "),aZ=n(mOe,"A",{href:!0});var qjt=s(aZ);lSr=r(qjt,"TFRobertaForSequenceClassification"),qjt.forEach(t),iSr=r(mOe," (RoBERTa model)"),mOe.forEach(t),dSr=i(ne),NC=n(ne,"LI",{});var gOe=s(NC);UEe=n(gOe,"STRONG",{});var jjt=s(UEe);cSr=r(jjt,"roformer"),jjt.forEach(t),fSr=r(gOe," \u2014 "),nZ=n(gOe,"A",{href:!0});var Djt=s(nZ);mSr=r(Djt,"TFRoFormerForSequenceClassification"),Djt.forEach(t),gSr=r(gOe," (RoFormer model)"),gOe.forEach(t),hSr=i(ne),qC=n(ne,"LI",{});var hOe=s(qC);JEe=n(hOe,"STRONG",{});var Gjt=s(JEe);pSr=r(Gjt,"tapas"),Gjt.forEach(t),_Sr=r(hOe," \u2014 "),sZ=n(hOe,"A",{href:!0});var Ojt=s(sZ);uSr=r(Ojt,"TFTapasForSequenceClassification"),Ojt.forEach(t),bSr=r(hOe," (TAPAS model)"),hOe.forEach(t),vSr=i(ne),jC=n(ne,"LI",{});var pOe=s(jC);YEe=n(pOe,"STRONG",{});var Vjt=s(YEe);FSr=r(Vjt,"transfo-xl"),Vjt.forEach(t),TSr=r(pOe," \u2014 "),lZ=n(pOe,"A",{href:!0});var Xjt=s(lZ);MSr=r(Xjt,"TFTransfoXLForSequenceClassification"),Xjt.forEach(t),ESr=r(pOe," (Transformer-XL model)"),pOe.forEach(t),CSr=i(ne),DC=n(ne,"LI",{});var _Oe=s(DC);KEe=n(_Oe,"STRONG",{});var zjt=s(KEe);wSr=r(zjt,"xlm"),zjt.forEach(t),ASr=r(_Oe," \u2014 "),iZ=n(_Oe,"A",{href:!0});var Wjt=s(iZ);LSr=r(Wjt,"TFXLMForSequenceClassification"),Wjt.forEach(t),ySr=r(_Oe," (XLM model)"),_Oe.forEach(t),xSr=i(ne),GC=n(ne,"LI",{});var uOe=s(GC);ZEe=n(uOe,"STRONG",{});var Qjt=s(ZEe);$Sr=r(Qjt,"xlm-roberta"),Qjt.forEach(t),kSr=r(uOe," \u2014 "),dZ=n(uOe,"A",{href:!0});var Hjt=s(dZ);SSr=r(Hjt,"TFXLMRobertaForSequenceClassification"),Hjt.forEach(t),RSr=r(uOe," (XLM-RoBERTa model)"),uOe.forEach(t),PSr=i(ne),OC=n(ne,"LI",{});var bOe=s(OC);eCe=n(bOe,"STRONG",{});var Ujt=s(eCe);BSr=r(Ujt,"xlnet"),Ujt.forEach(t),ISr=r(bOe," \u2014 "),cZ=n(bOe,"A",{href:!0});var Jjt=s(cZ);NSr=r(Jjt,"TFXLNetForSequenceClassification"),Jjt.forEach(t),qSr=r(bOe," (XLNet model)"),bOe.forEach(t),ne.forEach(t),jSr=i(zl),T(VC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),JWe=i(f),xc=n(f,"H2",{class:!0});var aUe=s(xc);XC=n(aUe,"A",{id:!0,class:!0,href:!0});var Yjt=s(XC);oCe=n(Yjt,"SPAN",{});var Kjt=s(oCe);T(Qx.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),DSr=i(aUe),rCe=n(aUe,"SPAN",{});var Zjt=s(rCe);GSr=r(Zjt,"TFAutoModelForMultipleChoice"),Zjt.forEach(t),aUe.forEach(t),YWe=i(f),dr=n(f,"DIV",{class:!0});var Wl=s(dr);T(Hx.$$.fragment,Wl),OSr=i(Wl),$c=n(Wl,"P",{});var Rae=s($c);VSr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fZ=n(Rae,"A",{href:!0});var eDt=s(fZ);XSr=r(eDt,"from_pretrained()"),eDt.forEach(t),zSr=r(Rae," class method or the "),mZ=n(Rae,"A",{href:!0});var oDt=s(mZ);WSr=r(oDt,"from_config()"),oDt.forEach(t),QSr=r(Rae,` class
method.`),Rae.forEach(t),HSr=i(Wl),Ux=n(Wl,"P",{});var nUe=s(Ux);USr=r(nUe,"This class cannot be instantiated directly using "),tCe=n(nUe,"CODE",{});var rDt=s(tCe);JSr=r(rDt,"__init__()"),rDt.forEach(t),YSr=r(nUe," (throws an error)."),nUe.forEach(t),KSr=i(Wl),Dt=n(Wl,"DIV",{class:!0});var q7=s(Dt);T(Jx.$$.fragment,q7),ZSr=i(q7),aCe=n(q7,"P",{});var tDt=s(aCe);eRr=r(tDt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tDt.forEach(t),oRr=i(q7),kc=n(q7,"P",{});var Pae=s(kc);rRr=r(Pae,`Note:
Loading a model from its configuration file does `),nCe=n(Pae,"STRONG",{});var aDt=s(nCe);tRr=r(aDt,"not"),aDt.forEach(t),aRr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(Pae,"A",{href:!0});var nDt=s(gZ);nRr=r(nDt,"from_pretrained()"),nDt.forEach(t),sRr=r(Pae," to load the model weights."),Pae.forEach(t),lRr=i(q7),T(zC.$$.fragment,q7),q7.forEach(t),iRr=i(Wl),Nr=n(Wl,"DIV",{class:!0});var Ql=s(Nr);T(Yx.$$.fragment,Ql),dRr=i(Ql),sCe=n(Ql,"P",{});var sDt=s(sCe);cRr=r(sDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sDt.forEach(t),fRr=i(Ql),pn=n(Ql,"P",{});var j7=s(pn);mRr=r(j7,"The model class to instantiate is selected based on the "),lCe=n(j7,"CODE",{});var lDt=s(lCe);gRr=r(lDt,"model_type"),lDt.forEach(t),hRr=r(j7,` property of the config object (either
passed as an argument or loaded from `),iCe=n(j7,"CODE",{});var iDt=s(iCe);pRr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),_Rr=r(j7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(j7,"CODE",{});var dDt=s(dCe);uRr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),bRr=r(j7,":"),j7.forEach(t),vRr=i(Ql),ve=n(Ql,"UL",{});var Te=s(ve);WC=n(Te,"LI",{});var vOe=s(WC);cCe=n(vOe,"STRONG",{});var cDt=s(cCe);FRr=r(cDt,"albert"),cDt.forEach(t),TRr=r(vOe," \u2014 "),hZ=n(vOe,"A",{href:!0});var fDt=s(hZ);MRr=r(fDt,"TFAlbertForMultipleChoice"),fDt.forEach(t),ERr=r(vOe," (ALBERT model)"),vOe.forEach(t),CRr=i(Te),QC=n(Te,"LI",{});var FOe=s(QC);fCe=n(FOe,"STRONG",{});var mDt=s(fCe);wRr=r(mDt,"bert"),mDt.forEach(t),ARr=r(FOe," \u2014 "),pZ=n(FOe,"A",{href:!0});var gDt=s(pZ);LRr=r(gDt,"TFBertForMultipleChoice"),gDt.forEach(t),yRr=r(FOe," (BERT model)"),FOe.forEach(t),xRr=i(Te),HC=n(Te,"LI",{});var TOe=s(HC);mCe=n(TOe,"STRONG",{});var hDt=s(mCe);$Rr=r(hDt,"camembert"),hDt.forEach(t),kRr=r(TOe," \u2014 "),_Z=n(TOe,"A",{href:!0});var pDt=s(_Z);SRr=r(pDt,"TFCamembertForMultipleChoice"),pDt.forEach(t),RRr=r(TOe," (CamemBERT model)"),TOe.forEach(t),PRr=i(Te),UC=n(Te,"LI",{});var MOe=s(UC);gCe=n(MOe,"STRONG",{});var _Dt=s(gCe);BRr=r(_Dt,"convbert"),_Dt.forEach(t),IRr=r(MOe," \u2014 "),uZ=n(MOe,"A",{href:!0});var uDt=s(uZ);NRr=r(uDt,"TFConvBertForMultipleChoice"),uDt.forEach(t),qRr=r(MOe," (ConvBERT model)"),MOe.forEach(t),jRr=i(Te),JC=n(Te,"LI",{});var EOe=s(JC);hCe=n(EOe,"STRONG",{});var bDt=s(hCe);DRr=r(bDt,"distilbert"),bDt.forEach(t),GRr=r(EOe," \u2014 "),bZ=n(EOe,"A",{href:!0});var vDt=s(bZ);ORr=r(vDt,"TFDistilBertForMultipleChoice"),vDt.forEach(t),VRr=r(EOe," (DistilBERT model)"),EOe.forEach(t),XRr=i(Te),YC=n(Te,"LI",{});var COe=s(YC);pCe=n(COe,"STRONG",{});var FDt=s(pCe);zRr=r(FDt,"electra"),FDt.forEach(t),WRr=r(COe," \u2014 "),vZ=n(COe,"A",{href:!0});var TDt=s(vZ);QRr=r(TDt,"TFElectraForMultipleChoice"),TDt.forEach(t),HRr=r(COe," (ELECTRA model)"),COe.forEach(t),URr=i(Te),KC=n(Te,"LI",{});var wOe=s(KC);_Ce=n(wOe,"STRONG",{});var MDt=s(_Ce);JRr=r(MDt,"flaubert"),MDt.forEach(t),YRr=r(wOe," \u2014 "),FZ=n(wOe,"A",{href:!0});var EDt=s(FZ);KRr=r(EDt,"TFFlaubertForMultipleChoice"),EDt.forEach(t),ZRr=r(wOe," (FlauBERT model)"),wOe.forEach(t),ePr=i(Te),ZC=n(Te,"LI",{});var AOe=s(ZC);uCe=n(AOe,"STRONG",{});var CDt=s(uCe);oPr=r(CDt,"funnel"),CDt.forEach(t),rPr=r(AOe," \u2014 "),TZ=n(AOe,"A",{href:!0});var wDt=s(TZ);tPr=r(wDt,"TFFunnelForMultipleChoice"),wDt.forEach(t),aPr=r(AOe," (Funnel Transformer model)"),AOe.forEach(t),nPr=i(Te),e5=n(Te,"LI",{});var LOe=s(e5);bCe=n(LOe,"STRONG",{});var ADt=s(bCe);sPr=r(ADt,"longformer"),ADt.forEach(t),lPr=r(LOe," \u2014 "),MZ=n(LOe,"A",{href:!0});var LDt=s(MZ);iPr=r(LDt,"TFLongformerForMultipleChoice"),LDt.forEach(t),dPr=r(LOe," (Longformer model)"),LOe.forEach(t),cPr=i(Te),o5=n(Te,"LI",{});var yOe=s(o5);vCe=n(yOe,"STRONG",{});var yDt=s(vCe);fPr=r(yDt,"mobilebert"),yDt.forEach(t),mPr=r(yOe," \u2014 "),EZ=n(yOe,"A",{href:!0});var xDt=s(EZ);gPr=r(xDt,"TFMobileBertForMultipleChoice"),xDt.forEach(t),hPr=r(yOe," (MobileBERT model)"),yOe.forEach(t),pPr=i(Te),r5=n(Te,"LI",{});var xOe=s(r5);FCe=n(xOe,"STRONG",{});var $Dt=s(FCe);_Pr=r($Dt,"mpnet"),$Dt.forEach(t),uPr=r(xOe," \u2014 "),CZ=n(xOe,"A",{href:!0});var kDt=s(CZ);bPr=r(kDt,"TFMPNetForMultipleChoice"),kDt.forEach(t),vPr=r(xOe," (MPNet model)"),xOe.forEach(t),FPr=i(Te),t5=n(Te,"LI",{});var $Oe=s(t5);TCe=n($Oe,"STRONG",{});var SDt=s(TCe);TPr=r(SDt,"rembert"),SDt.forEach(t),MPr=r($Oe," \u2014 "),wZ=n($Oe,"A",{href:!0});var RDt=s(wZ);EPr=r(RDt,"TFRemBertForMultipleChoice"),RDt.forEach(t),CPr=r($Oe," (RemBERT model)"),$Oe.forEach(t),wPr=i(Te),a5=n(Te,"LI",{});var kOe=s(a5);MCe=n(kOe,"STRONG",{});var PDt=s(MCe);APr=r(PDt,"roberta"),PDt.forEach(t),LPr=r(kOe," \u2014 "),AZ=n(kOe,"A",{href:!0});var BDt=s(AZ);yPr=r(BDt,"TFRobertaForMultipleChoice"),BDt.forEach(t),xPr=r(kOe," (RoBERTa model)"),kOe.forEach(t),$Pr=i(Te),n5=n(Te,"LI",{});var SOe=s(n5);ECe=n(SOe,"STRONG",{});var IDt=s(ECe);kPr=r(IDt,"roformer"),IDt.forEach(t),SPr=r(SOe," \u2014 "),LZ=n(SOe,"A",{href:!0});var NDt=s(LZ);RPr=r(NDt,"TFRoFormerForMultipleChoice"),NDt.forEach(t),PPr=r(SOe," (RoFormer model)"),SOe.forEach(t),BPr=i(Te),s5=n(Te,"LI",{});var ROe=s(s5);CCe=n(ROe,"STRONG",{});var qDt=s(CCe);IPr=r(qDt,"xlm"),qDt.forEach(t),NPr=r(ROe," \u2014 "),yZ=n(ROe,"A",{href:!0});var jDt=s(yZ);qPr=r(jDt,"TFXLMForMultipleChoice"),jDt.forEach(t),jPr=r(ROe," (XLM model)"),ROe.forEach(t),DPr=i(Te),l5=n(Te,"LI",{});var POe=s(l5);wCe=n(POe,"STRONG",{});var DDt=s(wCe);GPr=r(DDt,"xlm-roberta"),DDt.forEach(t),OPr=r(POe," \u2014 "),xZ=n(POe,"A",{href:!0});var GDt=s(xZ);VPr=r(GDt,"TFXLMRobertaForMultipleChoice"),GDt.forEach(t),XPr=r(POe," (XLM-RoBERTa model)"),POe.forEach(t),zPr=i(Te),i5=n(Te,"LI",{});var BOe=s(i5);ACe=n(BOe,"STRONG",{});var ODt=s(ACe);WPr=r(ODt,"xlnet"),ODt.forEach(t),QPr=r(BOe," \u2014 "),$Z=n(BOe,"A",{href:!0});var VDt=s($Z);HPr=r(VDt,"TFXLNetForMultipleChoice"),VDt.forEach(t),UPr=r(BOe," (XLNet model)"),BOe.forEach(t),Te.forEach(t),JPr=i(Ql),T(d5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),KWe=i(f),Sc=n(f,"H2",{class:!0});var sUe=s(Sc);c5=n(sUe,"A",{id:!0,class:!0,href:!0});var XDt=s(c5);LCe=n(XDt,"SPAN",{});var zDt=s(LCe);T(Kx.$$.fragment,zDt),zDt.forEach(t),XDt.forEach(t),YPr=i(sUe),yCe=n(sUe,"SPAN",{});var WDt=s(yCe);KPr=r(WDt,"TFAutoModelForNextSentencePrediction"),WDt.forEach(t),sUe.forEach(t),ZWe=i(f),cr=n(f,"DIV",{class:!0});var Hl=s(cr);T(Zx.$$.fragment,Hl),ZPr=i(Hl),Rc=n(Hl,"P",{});var Bae=s(Rc);eBr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kZ=n(Bae,"A",{href:!0});var QDt=s(kZ);oBr=r(QDt,"from_pretrained()"),QDt.forEach(t),rBr=r(Bae," class method or the "),SZ=n(Bae,"A",{href:!0});var HDt=s(SZ);tBr=r(HDt,"from_config()"),HDt.forEach(t),aBr=r(Bae,` class
method.`),Bae.forEach(t),nBr=i(Hl),e$=n(Hl,"P",{});var lUe=s(e$);sBr=r(lUe,"This class cannot be instantiated directly using "),xCe=n(lUe,"CODE",{});var UDt=s(xCe);lBr=r(UDt,"__init__()"),UDt.forEach(t),iBr=r(lUe," (throws an error)."),lUe.forEach(t),dBr=i(Hl),Gt=n(Hl,"DIV",{class:!0});var D7=s(Gt);T(o$.$$.fragment,D7),cBr=i(D7),$Ce=n(D7,"P",{});var JDt=s($Ce);fBr=r(JDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JDt.forEach(t),mBr=i(D7),Pc=n(D7,"P",{});var Iae=s(Pc);gBr=r(Iae,`Note:
Loading a model from its configuration file does `),kCe=n(Iae,"STRONG",{});var YDt=s(kCe);hBr=r(YDt,"not"),YDt.forEach(t),pBr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),RZ=n(Iae,"A",{href:!0});var KDt=s(RZ);_Br=r(KDt,"from_pretrained()"),KDt.forEach(t),uBr=r(Iae," to load the model weights."),Iae.forEach(t),bBr=i(D7),T(f5.$$.fragment,D7),D7.forEach(t),vBr=i(Hl),qr=n(Hl,"DIV",{class:!0});var Ul=s(qr);T(r$.$$.fragment,Ul),FBr=i(Ul),SCe=n(Ul,"P",{});var ZDt=s(SCe);TBr=r(ZDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZDt.forEach(t),MBr=i(Ul),_n=n(Ul,"P",{});var G7=s(_n);EBr=r(G7,"The model class to instantiate is selected based on the "),RCe=n(G7,"CODE",{});var eGt=s(RCe);CBr=r(eGt,"model_type"),eGt.forEach(t),wBr=r(G7,` property of the config object (either
passed as an argument or loaded from `),PCe=n(G7,"CODE",{});var oGt=s(PCe);ABr=r(oGt,"pretrained_model_name_or_path"),oGt.forEach(t),LBr=r(G7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=n(G7,"CODE",{});var rGt=s(BCe);yBr=r(rGt,"pretrained_model_name_or_path"),rGt.forEach(t),xBr=r(G7,":"),G7.forEach(t),$Br=i(Ul),t$=n(Ul,"UL",{});var iUe=s(t$);m5=n(iUe,"LI",{});var IOe=s(m5);ICe=n(IOe,"STRONG",{});var tGt=s(ICe);kBr=r(tGt,"bert"),tGt.forEach(t),SBr=r(IOe," \u2014 "),PZ=n(IOe,"A",{href:!0});var aGt=s(PZ);RBr=r(aGt,"TFBertForNextSentencePrediction"),aGt.forEach(t),PBr=r(IOe," (BERT model)"),IOe.forEach(t),BBr=i(iUe),g5=n(iUe,"LI",{});var NOe=s(g5);NCe=n(NOe,"STRONG",{});var nGt=s(NCe);IBr=r(nGt,"mobilebert"),nGt.forEach(t),NBr=r(NOe," \u2014 "),BZ=n(NOe,"A",{href:!0});var sGt=s(BZ);qBr=r(sGt,"TFMobileBertForNextSentencePrediction"),sGt.forEach(t),jBr=r(NOe," (MobileBERT model)"),NOe.forEach(t),iUe.forEach(t),DBr=i(Ul),T(h5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),eQe=i(f),Bc=n(f,"H2",{class:!0});var dUe=s(Bc);p5=n(dUe,"A",{id:!0,class:!0,href:!0});var lGt=s(p5);qCe=n(lGt,"SPAN",{});var iGt=s(qCe);T(a$.$$.fragment,iGt),iGt.forEach(t),lGt.forEach(t),GBr=i(dUe),jCe=n(dUe,"SPAN",{});var dGt=s(jCe);OBr=r(dGt,"TFAutoModelForTableQuestionAnswering"),dGt.forEach(t),dUe.forEach(t),oQe=i(f),fr=n(f,"DIV",{class:!0});var Jl=s(fr);T(n$.$$.fragment,Jl),VBr=i(Jl),Ic=n(Jl,"P",{});var Nae=s(Ic);XBr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IZ=n(Nae,"A",{href:!0});var cGt=s(IZ);zBr=r(cGt,"from_pretrained()"),cGt.forEach(t),WBr=r(Nae," class method or the "),NZ=n(Nae,"A",{href:!0});var fGt=s(NZ);QBr=r(fGt,"from_config()"),fGt.forEach(t),HBr=r(Nae,` class
method.`),Nae.forEach(t),UBr=i(Jl),s$=n(Jl,"P",{});var cUe=s(s$);JBr=r(cUe,"This class cannot be instantiated directly using "),DCe=n(cUe,"CODE",{});var mGt=s(DCe);YBr=r(mGt,"__init__()"),mGt.forEach(t),KBr=r(cUe," (throws an error)."),cUe.forEach(t),ZBr=i(Jl),Ot=n(Jl,"DIV",{class:!0});var O7=s(Ot);T(l$.$$.fragment,O7),eIr=i(O7),GCe=n(O7,"P",{});var gGt=s(GCe);oIr=r(gGt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gGt.forEach(t),rIr=i(O7),Nc=n(O7,"P",{});var qae=s(Nc);tIr=r(qae,`Note:
Loading a model from its configuration file does `),OCe=n(qae,"STRONG",{});var hGt=s(OCe);aIr=r(hGt,"not"),hGt.forEach(t),nIr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(qae,"A",{href:!0});var pGt=s(qZ);sIr=r(pGt,"from_pretrained()"),pGt.forEach(t),lIr=r(qae," to load the model weights."),qae.forEach(t),iIr=i(O7),T(_5.$$.fragment,O7),O7.forEach(t),dIr=i(Jl),jr=n(Jl,"DIV",{class:!0});var Yl=s(jr);T(i$.$$.fragment,Yl),cIr=i(Yl),VCe=n(Yl,"P",{});var _Gt=s(VCe);fIr=r(_Gt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Gt.forEach(t),mIr=i(Yl),un=n(Yl,"P",{});var V7=s(un);gIr=r(V7,"The model class to instantiate is selected based on the "),XCe=n(V7,"CODE",{});var uGt=s(XCe);hIr=r(uGt,"model_type"),uGt.forEach(t),pIr=r(V7,` property of the config object (either
passed as an argument or loaded from `),zCe=n(V7,"CODE",{});var bGt=s(zCe);_Ir=r(bGt,"pretrained_model_name_or_path"),bGt.forEach(t),uIr=r(V7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(V7,"CODE",{});var vGt=s(WCe);bIr=r(vGt,"pretrained_model_name_or_path"),vGt.forEach(t),vIr=r(V7,":"),V7.forEach(t),FIr=i(Yl),QCe=n(Yl,"UL",{});var FGt=s(QCe);u5=n(FGt,"LI",{});var qOe=s(u5);HCe=n(qOe,"STRONG",{});var TGt=s(HCe);TIr=r(TGt,"tapas"),TGt.forEach(t),MIr=r(qOe," \u2014 "),jZ=n(qOe,"A",{href:!0});var MGt=s(jZ);EIr=r(MGt,"TFTapasForQuestionAnswering"),MGt.forEach(t),CIr=r(qOe," (TAPAS model)"),qOe.forEach(t),FGt.forEach(t),wIr=i(Yl),T(b5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),rQe=i(f),qc=n(f,"H2",{class:!0});var fUe=s(qc);v5=n(fUe,"A",{id:!0,class:!0,href:!0});var EGt=s(v5);UCe=n(EGt,"SPAN",{});var CGt=s(UCe);T(d$.$$.fragment,CGt),CGt.forEach(t),EGt.forEach(t),AIr=i(fUe),JCe=n(fUe,"SPAN",{});var wGt=s(JCe);LIr=r(wGt,"TFAutoModelForTokenClassification"),wGt.forEach(t),fUe.forEach(t),tQe=i(f),mr=n(f,"DIV",{class:!0});var Kl=s(mr);T(c$.$$.fragment,Kl),yIr=i(Kl),jc=n(Kl,"P",{});var jae=s(jc);xIr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DZ=n(jae,"A",{href:!0});var AGt=s(DZ);$Ir=r(AGt,"from_pretrained()"),AGt.forEach(t),kIr=r(jae," class method or the "),GZ=n(jae,"A",{href:!0});var LGt=s(GZ);SIr=r(LGt,"from_config()"),LGt.forEach(t),RIr=r(jae,` class
method.`),jae.forEach(t),PIr=i(Kl),f$=n(Kl,"P",{});var mUe=s(f$);BIr=r(mUe,"This class cannot be instantiated directly using "),YCe=n(mUe,"CODE",{});var yGt=s(YCe);IIr=r(yGt,"__init__()"),yGt.forEach(t),NIr=r(mUe," (throws an error)."),mUe.forEach(t),qIr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var X7=s(Vt);T(m$.$$.fragment,X7),jIr=i(X7),KCe=n(X7,"P",{});var xGt=s(KCe);DIr=r(xGt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xGt.forEach(t),GIr=i(X7),Dc=n(X7,"P",{});var Dae=s(Dc);OIr=r(Dae,`Note:
Loading a model from its configuration file does `),ZCe=n(Dae,"STRONG",{});var $Gt=s(ZCe);VIr=r($Gt,"not"),$Gt.forEach(t),XIr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Dae,"A",{href:!0});var kGt=s(OZ);zIr=r(kGt,"from_pretrained()"),kGt.forEach(t),WIr=r(Dae," to load the model weights."),Dae.forEach(t),QIr=i(X7),T(F5.$$.fragment,X7),X7.forEach(t),HIr=i(Kl),Dr=n(Kl,"DIV",{class:!0});var Zl=s(Dr);T(g$.$$.fragment,Zl),UIr=i(Zl),e5e=n(Zl,"P",{});var SGt=s(e5e);JIr=r(SGt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SGt.forEach(t),YIr=i(Zl),bn=n(Zl,"P",{});var z7=s(bn);KIr=r(z7,"The model class to instantiate is selected based on the "),o5e=n(z7,"CODE",{});var RGt=s(o5e);ZIr=r(RGt,"model_type"),RGt.forEach(t),eNr=r(z7,` property of the config object (either
passed as an argument or loaded from `),r5e=n(z7,"CODE",{});var PGt=s(r5e);oNr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),rNr=r(z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t5e=n(z7,"CODE",{});var BGt=s(t5e);tNr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),aNr=r(z7,":"),z7.forEach(t),nNr=i(Zl),de=n(Zl,"UL",{});var he=s(de);T5=n(he,"LI",{});var jOe=s(T5);a5e=n(jOe,"STRONG",{});var IGt=s(a5e);sNr=r(IGt,"albert"),IGt.forEach(t),lNr=r(jOe," \u2014 "),VZ=n(jOe,"A",{href:!0});var NGt=s(VZ);iNr=r(NGt,"TFAlbertForTokenClassification"),NGt.forEach(t),dNr=r(jOe," (ALBERT model)"),jOe.forEach(t),cNr=i(he),M5=n(he,"LI",{});var DOe=s(M5);n5e=n(DOe,"STRONG",{});var qGt=s(n5e);fNr=r(qGt,"bert"),qGt.forEach(t),mNr=r(DOe," \u2014 "),XZ=n(DOe,"A",{href:!0});var jGt=s(XZ);gNr=r(jGt,"TFBertForTokenClassification"),jGt.forEach(t),hNr=r(DOe," (BERT model)"),DOe.forEach(t),pNr=i(he),E5=n(he,"LI",{});var GOe=s(E5);s5e=n(GOe,"STRONG",{});var DGt=s(s5e);_Nr=r(DGt,"camembert"),DGt.forEach(t),uNr=r(GOe," \u2014 "),zZ=n(GOe,"A",{href:!0});var GGt=s(zZ);bNr=r(GGt,"TFCamembertForTokenClassification"),GGt.forEach(t),vNr=r(GOe," (CamemBERT model)"),GOe.forEach(t),FNr=i(he),C5=n(he,"LI",{});var OOe=s(C5);l5e=n(OOe,"STRONG",{});var OGt=s(l5e);TNr=r(OGt,"convbert"),OGt.forEach(t),MNr=r(OOe," \u2014 "),WZ=n(OOe,"A",{href:!0});var VGt=s(WZ);ENr=r(VGt,"TFConvBertForTokenClassification"),VGt.forEach(t),CNr=r(OOe," (ConvBERT model)"),OOe.forEach(t),wNr=i(he),w5=n(he,"LI",{});var VOe=s(w5);i5e=n(VOe,"STRONG",{});var XGt=s(i5e);ANr=r(XGt,"deberta"),XGt.forEach(t),LNr=r(VOe," \u2014 "),QZ=n(VOe,"A",{href:!0});var zGt=s(QZ);yNr=r(zGt,"TFDebertaForTokenClassification"),zGt.forEach(t),xNr=r(VOe," (DeBERTa model)"),VOe.forEach(t),$Nr=i(he),A5=n(he,"LI",{});var XOe=s(A5);d5e=n(XOe,"STRONG",{});var WGt=s(d5e);kNr=r(WGt,"deberta-v2"),WGt.forEach(t),SNr=r(XOe," \u2014 "),HZ=n(XOe,"A",{href:!0});var QGt=s(HZ);RNr=r(QGt,"TFDebertaV2ForTokenClassification"),QGt.forEach(t),PNr=r(XOe," (DeBERTa-v2 model)"),XOe.forEach(t),BNr=i(he),L5=n(he,"LI",{});var zOe=s(L5);c5e=n(zOe,"STRONG",{});var HGt=s(c5e);INr=r(HGt,"distilbert"),HGt.forEach(t),NNr=r(zOe," \u2014 "),UZ=n(zOe,"A",{href:!0});var UGt=s(UZ);qNr=r(UGt,"TFDistilBertForTokenClassification"),UGt.forEach(t),jNr=r(zOe," (DistilBERT model)"),zOe.forEach(t),DNr=i(he),y5=n(he,"LI",{});var WOe=s(y5);f5e=n(WOe,"STRONG",{});var JGt=s(f5e);GNr=r(JGt,"electra"),JGt.forEach(t),ONr=r(WOe," \u2014 "),JZ=n(WOe,"A",{href:!0});var YGt=s(JZ);VNr=r(YGt,"TFElectraForTokenClassification"),YGt.forEach(t),XNr=r(WOe," (ELECTRA model)"),WOe.forEach(t),zNr=i(he),x5=n(he,"LI",{});var QOe=s(x5);m5e=n(QOe,"STRONG",{});var KGt=s(m5e);WNr=r(KGt,"flaubert"),KGt.forEach(t),QNr=r(QOe," \u2014 "),YZ=n(QOe,"A",{href:!0});var ZGt=s(YZ);HNr=r(ZGt,"TFFlaubertForTokenClassification"),ZGt.forEach(t),UNr=r(QOe," (FlauBERT model)"),QOe.forEach(t),JNr=i(he),$5=n(he,"LI",{});var HOe=s($5);g5e=n(HOe,"STRONG",{});var eOt=s(g5e);YNr=r(eOt,"funnel"),eOt.forEach(t),KNr=r(HOe," \u2014 "),KZ=n(HOe,"A",{href:!0});var oOt=s(KZ);ZNr=r(oOt,"TFFunnelForTokenClassification"),oOt.forEach(t),eqr=r(HOe," (Funnel Transformer model)"),HOe.forEach(t),oqr=i(he),k5=n(he,"LI",{});var UOe=s(k5);h5e=n(UOe,"STRONG",{});var rOt=s(h5e);rqr=r(rOt,"layoutlm"),rOt.forEach(t),tqr=r(UOe," \u2014 "),ZZ=n(UOe,"A",{href:!0});var tOt=s(ZZ);aqr=r(tOt,"TFLayoutLMForTokenClassification"),tOt.forEach(t),nqr=r(UOe," (LayoutLM model)"),UOe.forEach(t),sqr=i(he),S5=n(he,"LI",{});var JOe=s(S5);p5e=n(JOe,"STRONG",{});var aOt=s(p5e);lqr=r(aOt,"longformer"),aOt.forEach(t),iqr=r(JOe," \u2014 "),eee=n(JOe,"A",{href:!0});var nOt=s(eee);dqr=r(nOt,"TFLongformerForTokenClassification"),nOt.forEach(t),cqr=r(JOe," (Longformer model)"),JOe.forEach(t),fqr=i(he),R5=n(he,"LI",{});var YOe=s(R5);_5e=n(YOe,"STRONG",{});var sOt=s(_5e);mqr=r(sOt,"mobilebert"),sOt.forEach(t),gqr=r(YOe," \u2014 "),oee=n(YOe,"A",{href:!0});var lOt=s(oee);hqr=r(lOt,"TFMobileBertForTokenClassification"),lOt.forEach(t),pqr=r(YOe," (MobileBERT model)"),YOe.forEach(t),_qr=i(he),P5=n(he,"LI",{});var KOe=s(P5);u5e=n(KOe,"STRONG",{});var iOt=s(u5e);uqr=r(iOt,"mpnet"),iOt.forEach(t),bqr=r(KOe," \u2014 "),ree=n(KOe,"A",{href:!0});var dOt=s(ree);vqr=r(dOt,"TFMPNetForTokenClassification"),dOt.forEach(t),Fqr=r(KOe," (MPNet model)"),KOe.forEach(t),Tqr=i(he),B5=n(he,"LI",{});var ZOe=s(B5);b5e=n(ZOe,"STRONG",{});var cOt=s(b5e);Mqr=r(cOt,"rembert"),cOt.forEach(t),Eqr=r(ZOe," \u2014 "),tee=n(ZOe,"A",{href:!0});var fOt=s(tee);Cqr=r(fOt,"TFRemBertForTokenClassification"),fOt.forEach(t),wqr=r(ZOe," (RemBERT model)"),ZOe.forEach(t),Aqr=i(he),I5=n(he,"LI",{});var eVe=s(I5);v5e=n(eVe,"STRONG",{});var mOt=s(v5e);Lqr=r(mOt,"roberta"),mOt.forEach(t),yqr=r(eVe," \u2014 "),aee=n(eVe,"A",{href:!0});var gOt=s(aee);xqr=r(gOt,"TFRobertaForTokenClassification"),gOt.forEach(t),$qr=r(eVe," (RoBERTa model)"),eVe.forEach(t),kqr=i(he),N5=n(he,"LI",{});var oVe=s(N5);F5e=n(oVe,"STRONG",{});var hOt=s(F5e);Sqr=r(hOt,"roformer"),hOt.forEach(t),Rqr=r(oVe," \u2014 "),nee=n(oVe,"A",{href:!0});var pOt=s(nee);Pqr=r(pOt,"TFRoFormerForTokenClassification"),pOt.forEach(t),Bqr=r(oVe," (RoFormer model)"),oVe.forEach(t),Iqr=i(he),q5=n(he,"LI",{});var rVe=s(q5);T5e=n(rVe,"STRONG",{});var _Ot=s(T5e);Nqr=r(_Ot,"xlm"),_Ot.forEach(t),qqr=r(rVe," \u2014 "),see=n(rVe,"A",{href:!0});var uOt=s(see);jqr=r(uOt,"TFXLMForTokenClassification"),uOt.forEach(t),Dqr=r(rVe," (XLM model)"),rVe.forEach(t),Gqr=i(he),j5=n(he,"LI",{});var tVe=s(j5);M5e=n(tVe,"STRONG",{});var bOt=s(M5e);Oqr=r(bOt,"xlm-roberta"),bOt.forEach(t),Vqr=r(tVe," \u2014 "),lee=n(tVe,"A",{href:!0});var vOt=s(lee);Xqr=r(vOt,"TFXLMRobertaForTokenClassification"),vOt.forEach(t),zqr=r(tVe," (XLM-RoBERTa model)"),tVe.forEach(t),Wqr=i(he),D5=n(he,"LI",{});var aVe=s(D5);E5e=n(aVe,"STRONG",{});var FOt=s(E5e);Qqr=r(FOt,"xlnet"),FOt.forEach(t),Hqr=r(aVe," \u2014 "),iee=n(aVe,"A",{href:!0});var TOt=s(iee);Uqr=r(TOt,"TFXLNetForTokenClassification"),TOt.forEach(t),Jqr=r(aVe," (XLNet model)"),aVe.forEach(t),he.forEach(t),Yqr=i(Zl),T(G5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),aQe=i(f),Gc=n(f,"H2",{class:!0});var gUe=s(Gc);O5=n(gUe,"A",{id:!0,class:!0,href:!0});var MOt=s(O5);C5e=n(MOt,"SPAN",{});var EOt=s(C5e);T(h$.$$.fragment,EOt),EOt.forEach(t),MOt.forEach(t),Kqr=i(gUe),w5e=n(gUe,"SPAN",{});var COt=s(w5e);Zqr=r(COt,"TFAutoModelForQuestionAnswering"),COt.forEach(t),gUe.forEach(t),nQe=i(f),gr=n(f,"DIV",{class:!0});var ei=s(gr);T(p$.$$.fragment,ei),ejr=i(ei),Oc=n(ei,"P",{});var Gae=s(Oc);ojr=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dee=n(Gae,"A",{href:!0});var wOt=s(dee);rjr=r(wOt,"from_pretrained()"),wOt.forEach(t),tjr=r(Gae," class method or the "),cee=n(Gae,"A",{href:!0});var AOt=s(cee);ajr=r(AOt,"from_config()"),AOt.forEach(t),njr=r(Gae,` class
method.`),Gae.forEach(t),sjr=i(ei),_$=n(ei,"P",{});var hUe=s(_$);ljr=r(hUe,"This class cannot be instantiated directly using "),A5e=n(hUe,"CODE",{});var LOt=s(A5e);ijr=r(LOt,"__init__()"),LOt.forEach(t),djr=r(hUe," (throws an error)."),hUe.forEach(t),cjr=i(ei),Xt=n(ei,"DIV",{class:!0});var W7=s(Xt);T(u$.$$.fragment,W7),fjr=i(W7),L5e=n(W7,"P",{});var yOt=s(L5e);mjr=r(yOt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yOt.forEach(t),gjr=i(W7),Vc=n(W7,"P",{});var Oae=s(Vc);hjr=r(Oae,`Note:
Loading a model from its configuration file does `),y5e=n(Oae,"STRONG",{});var xOt=s(y5e);pjr=r(xOt,"not"),xOt.forEach(t),_jr=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fee=n(Oae,"A",{href:!0});var $Ot=s(fee);ujr=r($Ot,"from_pretrained()"),$Ot.forEach(t),bjr=r(Oae," to load the model weights."),Oae.forEach(t),vjr=i(W7),T(V5.$$.fragment,W7),W7.forEach(t),Fjr=i(ei),Gr=n(ei,"DIV",{class:!0});var oi=s(Gr);T(b$.$$.fragment,oi),Tjr=i(oi),x5e=n(oi,"P",{});var kOt=s(x5e);Mjr=r(kOt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kOt.forEach(t),Ejr=i(oi),vn=n(oi,"P",{});var Q7=s(vn);Cjr=r(Q7,"The model class to instantiate is selected based on the "),$5e=n(Q7,"CODE",{});var SOt=s($5e);wjr=r(SOt,"model_type"),SOt.forEach(t),Ajr=r(Q7,` property of the config object (either
passed as an argument or loaded from `),k5e=n(Q7,"CODE",{});var ROt=s(k5e);Ljr=r(ROt,"pretrained_model_name_or_path"),ROt.forEach(t),yjr=r(Q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S5e=n(Q7,"CODE",{});var POt=s(S5e);xjr=r(POt,"pretrained_model_name_or_path"),POt.forEach(t),$jr=r(Q7,":"),Q7.forEach(t),kjr=i(oi),ce=n(oi,"UL",{});var pe=s(ce);X5=n(pe,"LI",{});var nVe=s(X5);R5e=n(nVe,"STRONG",{});var BOt=s(R5e);Sjr=r(BOt,"albert"),BOt.forEach(t),Rjr=r(nVe," \u2014 "),mee=n(nVe,"A",{href:!0});var IOt=s(mee);Pjr=r(IOt,"TFAlbertForQuestionAnswering"),IOt.forEach(t),Bjr=r(nVe," (ALBERT model)"),nVe.forEach(t),Ijr=i(pe),z5=n(pe,"LI",{});var sVe=s(z5);P5e=n(sVe,"STRONG",{});var NOt=s(P5e);Njr=r(NOt,"bert"),NOt.forEach(t),qjr=r(sVe," \u2014 "),gee=n(sVe,"A",{href:!0});var qOt=s(gee);jjr=r(qOt,"TFBertForQuestionAnswering"),qOt.forEach(t),Djr=r(sVe," (BERT model)"),sVe.forEach(t),Gjr=i(pe),W5=n(pe,"LI",{});var lVe=s(W5);B5e=n(lVe,"STRONG",{});var jOt=s(B5e);Ojr=r(jOt,"camembert"),jOt.forEach(t),Vjr=r(lVe," \u2014 "),hee=n(lVe,"A",{href:!0});var DOt=s(hee);Xjr=r(DOt,"TFCamembertForQuestionAnswering"),DOt.forEach(t),zjr=r(lVe," (CamemBERT model)"),lVe.forEach(t),Wjr=i(pe),Q5=n(pe,"LI",{});var iVe=s(Q5);I5e=n(iVe,"STRONG",{});var GOt=s(I5e);Qjr=r(GOt,"convbert"),GOt.forEach(t),Hjr=r(iVe," \u2014 "),pee=n(iVe,"A",{href:!0});var OOt=s(pee);Ujr=r(OOt,"TFConvBertForQuestionAnswering"),OOt.forEach(t),Jjr=r(iVe," (ConvBERT model)"),iVe.forEach(t),Yjr=i(pe),H5=n(pe,"LI",{});var dVe=s(H5);N5e=n(dVe,"STRONG",{});var VOt=s(N5e);Kjr=r(VOt,"deberta"),VOt.forEach(t),Zjr=r(dVe," \u2014 "),_ee=n(dVe,"A",{href:!0});var XOt=s(_ee);eDr=r(XOt,"TFDebertaForQuestionAnswering"),XOt.forEach(t),oDr=r(dVe," (DeBERTa model)"),dVe.forEach(t),rDr=i(pe),U5=n(pe,"LI",{});var cVe=s(U5);q5e=n(cVe,"STRONG",{});var zOt=s(q5e);tDr=r(zOt,"deberta-v2"),zOt.forEach(t),aDr=r(cVe," \u2014 "),uee=n(cVe,"A",{href:!0});var WOt=s(uee);nDr=r(WOt,"TFDebertaV2ForQuestionAnswering"),WOt.forEach(t),sDr=r(cVe," (DeBERTa-v2 model)"),cVe.forEach(t),lDr=i(pe),J5=n(pe,"LI",{});var fVe=s(J5);j5e=n(fVe,"STRONG",{});var QOt=s(j5e);iDr=r(QOt,"distilbert"),QOt.forEach(t),dDr=r(fVe," \u2014 "),bee=n(fVe,"A",{href:!0});var HOt=s(bee);cDr=r(HOt,"TFDistilBertForQuestionAnswering"),HOt.forEach(t),fDr=r(fVe," (DistilBERT model)"),fVe.forEach(t),mDr=i(pe),Y5=n(pe,"LI",{});var mVe=s(Y5);D5e=n(mVe,"STRONG",{});var UOt=s(D5e);gDr=r(UOt,"electra"),UOt.forEach(t),hDr=r(mVe," \u2014 "),vee=n(mVe,"A",{href:!0});var JOt=s(vee);pDr=r(JOt,"TFElectraForQuestionAnswering"),JOt.forEach(t),_Dr=r(mVe," (ELECTRA model)"),mVe.forEach(t),uDr=i(pe),K5=n(pe,"LI",{});var gVe=s(K5);G5e=n(gVe,"STRONG",{});var YOt=s(G5e);bDr=r(YOt,"flaubert"),YOt.forEach(t),vDr=r(gVe," \u2014 "),Fee=n(gVe,"A",{href:!0});var KOt=s(Fee);FDr=r(KOt,"TFFlaubertForQuestionAnsweringSimple"),KOt.forEach(t),TDr=r(gVe," (FlauBERT model)"),gVe.forEach(t),MDr=i(pe),Z5=n(pe,"LI",{});var hVe=s(Z5);O5e=n(hVe,"STRONG",{});var ZOt=s(O5e);EDr=r(ZOt,"funnel"),ZOt.forEach(t),CDr=r(hVe," \u2014 "),Tee=n(hVe,"A",{href:!0});var eVt=s(Tee);wDr=r(eVt,"TFFunnelForQuestionAnswering"),eVt.forEach(t),ADr=r(hVe," (Funnel Transformer model)"),hVe.forEach(t),LDr=i(pe),e3=n(pe,"LI",{});var pVe=s(e3);V5e=n(pVe,"STRONG",{});var oVt=s(V5e);yDr=r(oVt,"gptj"),oVt.forEach(t),xDr=r(pVe," \u2014 "),Mee=n(pVe,"A",{href:!0});var rVt=s(Mee);$Dr=r(rVt,"TFGPTJForQuestionAnswering"),rVt.forEach(t),kDr=r(pVe," (GPT-J model)"),pVe.forEach(t),SDr=i(pe),o3=n(pe,"LI",{});var _Ve=s(o3);X5e=n(_Ve,"STRONG",{});var tVt=s(X5e);RDr=r(tVt,"longformer"),tVt.forEach(t),PDr=r(_Ve," \u2014 "),Eee=n(_Ve,"A",{href:!0});var aVt=s(Eee);BDr=r(aVt,"TFLongformerForQuestionAnswering"),aVt.forEach(t),IDr=r(_Ve," (Longformer model)"),_Ve.forEach(t),NDr=i(pe),r3=n(pe,"LI",{});var uVe=s(r3);z5e=n(uVe,"STRONG",{});var nVt=s(z5e);qDr=r(nVt,"mobilebert"),nVt.forEach(t),jDr=r(uVe," \u2014 "),Cee=n(uVe,"A",{href:!0});var sVt=s(Cee);DDr=r(sVt,"TFMobileBertForQuestionAnswering"),sVt.forEach(t),GDr=r(uVe," (MobileBERT model)"),uVe.forEach(t),ODr=i(pe),t3=n(pe,"LI",{});var bVe=s(t3);W5e=n(bVe,"STRONG",{});var lVt=s(W5e);VDr=r(lVt,"mpnet"),lVt.forEach(t),XDr=r(bVe," \u2014 "),wee=n(bVe,"A",{href:!0});var iVt=s(wee);zDr=r(iVt,"TFMPNetForQuestionAnswering"),iVt.forEach(t),WDr=r(bVe," (MPNet model)"),bVe.forEach(t),QDr=i(pe),a3=n(pe,"LI",{});var vVe=s(a3);Q5e=n(vVe,"STRONG",{});var dVt=s(Q5e);HDr=r(dVt,"rembert"),dVt.forEach(t),UDr=r(vVe," \u2014 "),Aee=n(vVe,"A",{href:!0});var cVt=s(Aee);JDr=r(cVt,"TFRemBertForQuestionAnswering"),cVt.forEach(t),YDr=r(vVe," (RemBERT model)"),vVe.forEach(t),KDr=i(pe),n3=n(pe,"LI",{});var FVe=s(n3);H5e=n(FVe,"STRONG",{});var fVt=s(H5e);ZDr=r(fVt,"roberta"),fVt.forEach(t),eGr=r(FVe," \u2014 "),Lee=n(FVe,"A",{href:!0});var mVt=s(Lee);oGr=r(mVt,"TFRobertaForQuestionAnswering"),mVt.forEach(t),rGr=r(FVe," (RoBERTa model)"),FVe.forEach(t),tGr=i(pe),s3=n(pe,"LI",{});var TVe=s(s3);U5e=n(TVe,"STRONG",{});var gVt=s(U5e);aGr=r(gVt,"roformer"),gVt.forEach(t),nGr=r(TVe," \u2014 "),yee=n(TVe,"A",{href:!0});var hVt=s(yee);sGr=r(hVt,"TFRoFormerForQuestionAnswering"),hVt.forEach(t),lGr=r(TVe," (RoFormer model)"),TVe.forEach(t),iGr=i(pe),l3=n(pe,"LI",{});var MVe=s(l3);J5e=n(MVe,"STRONG",{});var pVt=s(J5e);dGr=r(pVt,"xlm"),pVt.forEach(t),cGr=r(MVe," \u2014 "),xee=n(MVe,"A",{href:!0});var _Vt=s(xee);fGr=r(_Vt,"TFXLMForQuestionAnsweringSimple"),_Vt.forEach(t),mGr=r(MVe," (XLM model)"),MVe.forEach(t),gGr=i(pe),i3=n(pe,"LI",{});var EVe=s(i3);Y5e=n(EVe,"STRONG",{});var uVt=s(Y5e);hGr=r(uVt,"xlm-roberta"),uVt.forEach(t),pGr=r(EVe," \u2014 "),$ee=n(EVe,"A",{href:!0});var bVt=s($ee);_Gr=r(bVt,"TFXLMRobertaForQuestionAnswering"),bVt.forEach(t),uGr=r(EVe," (XLM-RoBERTa model)"),EVe.forEach(t),bGr=i(pe),d3=n(pe,"LI",{});var CVe=s(d3);K5e=n(CVe,"STRONG",{});var vVt=s(K5e);vGr=r(vVt,"xlnet"),vVt.forEach(t),FGr=r(CVe," \u2014 "),kee=n(CVe,"A",{href:!0});var FVt=s(kee);TGr=r(FVt,"TFXLNetForQuestionAnsweringSimple"),FVt.forEach(t),MGr=r(CVe," (XLNet model)"),CVe.forEach(t),pe.forEach(t),EGr=i(oi),T(c3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),sQe=i(f),Xc=n(f,"H2",{class:!0});var pUe=s(Xc);f3=n(pUe,"A",{id:!0,class:!0,href:!0});var TVt=s(f3);Z5e=n(TVt,"SPAN",{});var MVt=s(Z5e);T(v$.$$.fragment,MVt),MVt.forEach(t),TVt.forEach(t),CGr=i(pUe),e3e=n(pUe,"SPAN",{});var EVt=s(e3e);wGr=r(EVt,"TFAutoModelForVision2Seq"),EVt.forEach(t),pUe.forEach(t),lQe=i(f),hr=n(f,"DIV",{class:!0});var ri=s(hr);T(F$.$$.fragment,ri),AGr=i(ri),zc=n(ri,"P",{});var Vae=s(zc);LGr=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),See=n(Vae,"A",{href:!0});var CVt=s(See);yGr=r(CVt,"from_pretrained()"),CVt.forEach(t),xGr=r(Vae," class method or the "),Ree=n(Vae,"A",{href:!0});var wVt=s(Ree);$Gr=r(wVt,"from_config()"),wVt.forEach(t),kGr=r(Vae,` class
method.`),Vae.forEach(t),SGr=i(ri),T$=n(ri,"P",{});var _Ue=s(T$);RGr=r(_Ue,"This class cannot be instantiated directly using "),o3e=n(_Ue,"CODE",{});var AVt=s(o3e);PGr=r(AVt,"__init__()"),AVt.forEach(t),BGr=r(_Ue," (throws an error)."),_Ue.forEach(t),IGr=i(ri),zt=n(ri,"DIV",{class:!0});var H7=s(zt);T(M$.$$.fragment,H7),NGr=i(H7),r3e=n(H7,"P",{});var LVt=s(r3e);qGr=r(LVt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LVt.forEach(t),jGr=i(H7),Wc=n(H7,"P",{});var Xae=s(Wc);DGr=r(Xae,`Note:
Loading a model from its configuration file does `),t3e=n(Xae,"STRONG",{});var yVt=s(t3e);GGr=r(yVt,"not"),yVt.forEach(t),OGr=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Xae,"A",{href:!0});var xVt=s(Pee);VGr=r(xVt,"from_pretrained()"),xVt.forEach(t),XGr=r(Xae," to load the model weights."),Xae.forEach(t),zGr=i(H7),T(m3.$$.fragment,H7),H7.forEach(t),WGr=i(ri),Or=n(ri,"DIV",{class:!0});var ti=s(Or);T(E$.$$.fragment,ti),QGr=i(ti),a3e=n(ti,"P",{});var $Vt=s(a3e);HGr=r($Vt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Vt.forEach(t),UGr=i(ti),Fn=n(ti,"P",{});var U7=s(Fn);JGr=r(U7,"The model class to instantiate is selected based on the "),n3e=n(U7,"CODE",{});var kVt=s(n3e);YGr=r(kVt,"model_type"),kVt.forEach(t),KGr=r(U7,` property of the config object (either
passed as an argument or loaded from `),s3e=n(U7,"CODE",{});var SVt=s(s3e);ZGr=r(SVt,"pretrained_model_name_or_path"),SVt.forEach(t),eOr=r(U7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(U7,"CODE",{});var RVt=s(l3e);oOr=r(RVt,"pretrained_model_name_or_path"),RVt.forEach(t),rOr=r(U7,":"),U7.forEach(t),tOr=i(ti),i3e=n(ti,"UL",{});var PVt=s(i3e);g3=n(PVt,"LI",{});var wVe=s(g3);d3e=n(wVe,"STRONG",{});var BVt=s(d3e);aOr=r(BVt,"vision-encoder-decoder"),BVt.forEach(t),nOr=r(wVe," \u2014 "),Bee=n(wVe,"A",{href:!0});var IVt=s(Bee);sOr=r(IVt,"TFVisionEncoderDecoderModel"),IVt.forEach(t),lOr=r(wVe," (Vision Encoder decoder model)"),wVe.forEach(t),PVt.forEach(t),iOr=i(ti),T(h3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),iQe=i(f),Qc=n(f,"H2",{class:!0});var uUe=s(Qc);p3=n(uUe,"A",{id:!0,class:!0,href:!0});var NVt=s(p3);c3e=n(NVt,"SPAN",{});var qVt=s(c3e);T(C$.$$.fragment,qVt),qVt.forEach(t),NVt.forEach(t),dOr=i(uUe),f3e=n(uUe,"SPAN",{});var jVt=s(f3e);cOr=r(jVt,"TFAutoModelForSpeechSeq2Seq"),jVt.forEach(t),uUe.forEach(t),dQe=i(f),pr=n(f,"DIV",{class:!0});var ai=s(pr);T(w$.$$.fragment,ai),fOr=i(ai),Hc=n(ai,"P",{});var zae=s(Hc);mOr=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Iee=n(zae,"A",{href:!0});var DVt=s(Iee);gOr=r(DVt,"from_pretrained()"),DVt.forEach(t),hOr=r(zae," class method or the "),Nee=n(zae,"A",{href:!0});var GVt=s(Nee);pOr=r(GVt,"from_config()"),GVt.forEach(t),_Or=r(zae,` class
method.`),zae.forEach(t),uOr=i(ai),A$=n(ai,"P",{});var bUe=s(A$);bOr=r(bUe,"This class cannot be instantiated directly using "),m3e=n(bUe,"CODE",{});var OVt=s(m3e);vOr=r(OVt,"__init__()"),OVt.forEach(t),FOr=r(bUe," (throws an error)."),bUe.forEach(t),TOr=i(ai),Wt=n(ai,"DIV",{class:!0});var J7=s(Wt);T(L$.$$.fragment,J7),MOr=i(J7),g3e=n(J7,"P",{});var VVt=s(g3e);EOr=r(VVt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),VVt.forEach(t),COr=i(J7),Uc=n(J7,"P",{});var Wae=s(Uc);wOr=r(Wae,`Note:
Loading a model from its configuration file does `),h3e=n(Wae,"STRONG",{});var XVt=s(h3e);AOr=r(XVt,"not"),XVt.forEach(t),LOr=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(Wae,"A",{href:!0});var zVt=s(qee);yOr=r(zVt,"from_pretrained()"),zVt.forEach(t),xOr=r(Wae," to load the model weights."),Wae.forEach(t),$Or=i(J7),T(_3.$$.fragment,J7),J7.forEach(t),kOr=i(ai),Vr=n(ai,"DIV",{class:!0});var ni=s(Vr);T(y$.$$.fragment,ni),SOr=i(ni),p3e=n(ni,"P",{});var WVt=s(p3e);ROr=r(WVt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WVt.forEach(t),POr=i(ni),Tn=n(ni,"P",{});var Y7=s(Tn);BOr=r(Y7,"The model class to instantiate is selected based on the "),_3e=n(Y7,"CODE",{});var QVt=s(_3e);IOr=r(QVt,"model_type"),QVt.forEach(t),NOr=r(Y7,` property of the config object (either
passed as an argument or loaded from `),u3e=n(Y7,"CODE",{});var HVt=s(u3e);qOr=r(HVt,"pretrained_model_name_or_path"),HVt.forEach(t),jOr=r(Y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(Y7,"CODE",{});var UVt=s(b3e);DOr=r(UVt,"pretrained_model_name_or_path"),UVt.forEach(t),GOr=r(Y7,":"),Y7.forEach(t),OOr=i(ni),v3e=n(ni,"UL",{});var JVt=s(v3e);u3=n(JVt,"LI",{});var AVe=s(u3);F3e=n(AVe,"STRONG",{});var YVt=s(F3e);VOr=r(YVt,"speech_to_text"),YVt.forEach(t),XOr=r(AVe," \u2014 "),jee=n(AVe,"A",{href:!0});var KVt=s(jee);zOr=r(KVt,"TFSpeech2TextForConditionalGeneration"),KVt.forEach(t),WOr=r(AVe," (Speech2Text model)"),AVe.forEach(t),JVt.forEach(t),QOr=i(ni),T(b3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),cQe=i(f),Jc=n(f,"H2",{class:!0});var vUe=s(Jc);v3=n(vUe,"A",{id:!0,class:!0,href:!0});var ZVt=s(v3);T3e=n(ZVt,"SPAN",{});var eXt=s(T3e);T(x$.$$.fragment,eXt),eXt.forEach(t),ZVt.forEach(t),HOr=i(vUe),M3e=n(vUe,"SPAN",{});var oXt=s(M3e);UOr=r(oXt,"FlaxAutoModel"),oXt.forEach(t),vUe.forEach(t),fQe=i(f),_r=n(f,"DIV",{class:!0});var si=s(_r);T($$.$$.fragment,si),JOr=i(si),Yc=n(si,"P",{});var Qae=s(Yc);YOr=r(Qae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Dee=n(Qae,"A",{href:!0});var rXt=s(Dee);KOr=r(rXt,"from_pretrained()"),rXt.forEach(t),ZOr=r(Qae," class method or the "),Gee=n(Qae,"A",{href:!0});var tXt=s(Gee);eVr=r(tXt,"from_config()"),tXt.forEach(t),oVr=r(Qae,` class
method.`),Qae.forEach(t),rVr=i(si),k$=n(si,"P",{});var FUe=s(k$);tVr=r(FUe,"This class cannot be instantiated directly using "),E3e=n(FUe,"CODE",{});var aXt=s(E3e);aVr=r(aXt,"__init__()"),aXt.forEach(t),nVr=r(FUe," (throws an error)."),FUe.forEach(t),sVr=i(si),Qt=n(si,"DIV",{class:!0});var K7=s(Qt);T(S$.$$.fragment,K7),lVr=i(K7),C3e=n(K7,"P",{});var nXt=s(C3e);iVr=r(nXt,"Instantiates one of the base model classes of the library from a configuration."),nXt.forEach(t),dVr=i(K7),Kc=n(K7,"P",{});var Hae=s(Kc);cVr=r(Hae,`Note:
Loading a model from its configuration file does `),w3e=n(Hae,"STRONG",{});var sXt=s(w3e);fVr=r(sXt,"not"),sXt.forEach(t),mVr=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oee=n(Hae,"A",{href:!0});var lXt=s(Oee);gVr=r(lXt,"from_pretrained()"),lXt.forEach(t),hVr=r(Hae," to load the model weights."),Hae.forEach(t),pVr=i(K7),T(F3.$$.fragment,K7),K7.forEach(t),_Vr=i(si),Xr=n(si,"DIV",{class:!0});var li=s(Xr);T(R$.$$.fragment,li),uVr=i(li),A3e=n(li,"P",{});var iXt=s(A3e);bVr=r(iXt,"Instantiate one of the base model classes of the library from a pretrained model."),iXt.forEach(t),vVr=i(li),Mn=n(li,"P",{});var Z7=s(Mn);FVr=r(Z7,"The model class to instantiate is selected based on the "),L3e=n(Z7,"CODE",{});var dXt=s(L3e);TVr=r(dXt,"model_type"),dXt.forEach(t),MVr=r(Z7,` property of the config object (either
passed as an argument or loaded from `),y3e=n(Z7,"CODE",{});var cXt=s(y3e);EVr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),CVr=r(Z7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(Z7,"CODE",{});var fXt=s(x3e);wVr=r(fXt,"pretrained_model_name_or_path"),fXt.forEach(t),AVr=r(Z7,":"),Z7.forEach(t),LVr=i(li),oe=n(li,"UL",{});var ae=s(oe);T3=n(ae,"LI",{});var LVe=s(T3);$3e=n(LVe,"STRONG",{});var mXt=s($3e);yVr=r(mXt,"albert"),mXt.forEach(t),xVr=r(LVe," \u2014 "),Vee=n(LVe,"A",{href:!0});var gXt=s(Vee);$Vr=r(gXt,"FlaxAlbertModel"),gXt.forEach(t),kVr=r(LVe," (ALBERT model)"),LVe.forEach(t),SVr=i(ae),M3=n(ae,"LI",{});var yVe=s(M3);k3e=n(yVe,"STRONG",{});var hXt=s(k3e);RVr=r(hXt,"bart"),hXt.forEach(t),PVr=r(yVe," \u2014 "),Xee=n(yVe,"A",{href:!0});var pXt=s(Xee);BVr=r(pXt,"FlaxBartModel"),pXt.forEach(t),IVr=r(yVe," (BART model)"),yVe.forEach(t),NVr=i(ae),E3=n(ae,"LI",{});var xVe=s(E3);S3e=n(xVe,"STRONG",{});var _Xt=s(S3e);qVr=r(_Xt,"beit"),_Xt.forEach(t),jVr=r(xVe," \u2014 "),zee=n(xVe,"A",{href:!0});var uXt=s(zee);DVr=r(uXt,"FlaxBeitModel"),uXt.forEach(t),GVr=r(xVe," (BEiT model)"),xVe.forEach(t),OVr=i(ae),C3=n(ae,"LI",{});var $Ve=s(C3);R3e=n($Ve,"STRONG",{});var bXt=s(R3e);VVr=r(bXt,"bert"),bXt.forEach(t),XVr=r($Ve," \u2014 "),Wee=n($Ve,"A",{href:!0});var vXt=s(Wee);zVr=r(vXt,"FlaxBertModel"),vXt.forEach(t),WVr=r($Ve," (BERT model)"),$Ve.forEach(t),QVr=i(ae),w3=n(ae,"LI",{});var kVe=s(w3);P3e=n(kVe,"STRONG",{});var FXt=s(P3e);HVr=r(FXt,"big_bird"),FXt.forEach(t),UVr=r(kVe," \u2014 "),Qee=n(kVe,"A",{href:!0});var TXt=s(Qee);JVr=r(TXt,"FlaxBigBirdModel"),TXt.forEach(t),YVr=r(kVe," (BigBird model)"),kVe.forEach(t),KVr=i(ae),A3=n(ae,"LI",{});var SVe=s(A3);B3e=n(SVe,"STRONG",{});var MXt=s(B3e);ZVr=r(MXt,"blenderbot"),MXt.forEach(t),eXr=r(SVe," \u2014 "),Hee=n(SVe,"A",{href:!0});var EXt=s(Hee);oXr=r(EXt,"FlaxBlenderbotModel"),EXt.forEach(t),rXr=r(SVe," (Blenderbot model)"),SVe.forEach(t),tXr=i(ae),L3=n(ae,"LI",{});var RVe=s(L3);I3e=n(RVe,"STRONG",{});var CXt=s(I3e);aXr=r(CXt,"blenderbot-small"),CXt.forEach(t),nXr=r(RVe," \u2014 "),Uee=n(RVe,"A",{href:!0});var wXt=s(Uee);sXr=r(wXt,"FlaxBlenderbotSmallModel"),wXt.forEach(t),lXr=r(RVe," (BlenderbotSmall model)"),RVe.forEach(t),iXr=i(ae),y3=n(ae,"LI",{});var PVe=s(y3);N3e=n(PVe,"STRONG",{});var AXt=s(N3e);dXr=r(AXt,"clip"),AXt.forEach(t),cXr=r(PVe," \u2014 "),Jee=n(PVe,"A",{href:!0});var LXt=s(Jee);fXr=r(LXt,"FlaxCLIPModel"),LXt.forEach(t),mXr=r(PVe," (CLIP model)"),PVe.forEach(t),gXr=i(ae),x3=n(ae,"LI",{});var BVe=s(x3);q3e=n(BVe,"STRONG",{});var yXt=s(q3e);hXr=r(yXt,"distilbert"),yXt.forEach(t),pXr=r(BVe," \u2014 "),Yee=n(BVe,"A",{href:!0});var xXt=s(Yee);_Xr=r(xXt,"FlaxDistilBertModel"),xXt.forEach(t),uXr=r(BVe," (DistilBERT model)"),BVe.forEach(t),bXr=i(ae),$3=n(ae,"LI",{});var IVe=s($3);j3e=n(IVe,"STRONG",{});var $Xt=s(j3e);vXr=r($Xt,"electra"),$Xt.forEach(t),FXr=r(IVe," \u2014 "),Kee=n(IVe,"A",{href:!0});var kXt=s(Kee);TXr=r(kXt,"FlaxElectraModel"),kXt.forEach(t),MXr=r(IVe," (ELECTRA model)"),IVe.forEach(t),EXr=i(ae),k3=n(ae,"LI",{});var NVe=s(k3);D3e=n(NVe,"STRONG",{});var SXt=s(D3e);CXr=r(SXt,"gpt2"),SXt.forEach(t),wXr=r(NVe," \u2014 "),Zee=n(NVe,"A",{href:!0});var RXt=s(Zee);AXr=r(RXt,"FlaxGPT2Model"),RXt.forEach(t),LXr=r(NVe," (OpenAI GPT-2 model)"),NVe.forEach(t),yXr=i(ae),S3=n(ae,"LI",{});var qVe=s(S3);G3e=n(qVe,"STRONG",{});var PXt=s(G3e);xXr=r(PXt,"gpt_neo"),PXt.forEach(t),$Xr=r(qVe," \u2014 "),eoe=n(qVe,"A",{href:!0});var BXt=s(eoe);kXr=r(BXt,"FlaxGPTNeoModel"),BXt.forEach(t),SXr=r(qVe," (GPT Neo model)"),qVe.forEach(t),RXr=i(ae),R3=n(ae,"LI",{});var jVe=s(R3);O3e=n(jVe,"STRONG",{});var IXt=s(O3e);PXr=r(IXt,"gptj"),IXt.forEach(t),BXr=r(jVe," \u2014 "),ooe=n(jVe,"A",{href:!0});var NXt=s(ooe);IXr=r(NXt,"FlaxGPTJModel"),NXt.forEach(t),NXr=r(jVe," (GPT-J model)"),jVe.forEach(t),qXr=i(ae),P3=n(ae,"LI",{});var DVe=s(P3);V3e=n(DVe,"STRONG",{});var qXt=s(V3e);jXr=r(qXt,"longt5"),qXt.forEach(t),DXr=r(DVe," \u2014 "),roe=n(DVe,"A",{href:!0});var jXt=s(roe);GXr=r(jXt,"FlaxLongT5Model"),jXt.forEach(t),OXr=r(DVe," (LongT5 model)"),DVe.forEach(t),VXr=i(ae),B3=n(ae,"LI",{});var GVe=s(B3);X3e=n(GVe,"STRONG",{});var DXt=s(X3e);XXr=r(DXt,"marian"),DXt.forEach(t),zXr=r(GVe," \u2014 "),toe=n(GVe,"A",{href:!0});var GXt=s(toe);WXr=r(GXt,"FlaxMarianModel"),GXt.forEach(t),QXr=r(GVe," (Marian model)"),GVe.forEach(t),HXr=i(ae),I3=n(ae,"LI",{});var OVe=s(I3);z3e=n(OVe,"STRONG",{});var OXt=s(z3e);UXr=r(OXt,"mbart"),OXt.forEach(t),JXr=r(OVe," \u2014 "),aoe=n(OVe,"A",{href:!0});var VXt=s(aoe);YXr=r(VXt,"FlaxMBartModel"),VXt.forEach(t),KXr=r(OVe," (mBART model)"),OVe.forEach(t),ZXr=i(ae),N3=n(ae,"LI",{});var VVe=s(N3);W3e=n(VVe,"STRONG",{});var XXt=s(W3e);ezr=r(XXt,"mt5"),XXt.forEach(t),ozr=r(VVe," \u2014 "),noe=n(VVe,"A",{href:!0});var zXt=s(noe);rzr=r(zXt,"FlaxMT5Model"),zXt.forEach(t),tzr=r(VVe," (MT5 model)"),VVe.forEach(t),azr=i(ae),q3=n(ae,"LI",{});var XVe=s(q3);Q3e=n(XVe,"STRONG",{});var WXt=s(Q3e);nzr=r(WXt,"opt"),WXt.forEach(t),szr=r(XVe," \u2014 "),soe=n(XVe,"A",{href:!0});var QXt=s(soe);lzr=r(QXt,"FlaxOPTModel"),QXt.forEach(t),izr=r(XVe," (OPT model)"),XVe.forEach(t),dzr=i(ae),j3=n(ae,"LI",{});var zVe=s(j3);H3e=n(zVe,"STRONG",{});var HXt=s(H3e);czr=r(HXt,"pegasus"),HXt.forEach(t),fzr=r(zVe," \u2014 "),loe=n(zVe,"A",{href:!0});var UXt=s(loe);mzr=r(UXt,"FlaxPegasusModel"),UXt.forEach(t),gzr=r(zVe," (Pegasus model)"),zVe.forEach(t),hzr=i(ae),D3=n(ae,"LI",{});var WVe=s(D3);U3e=n(WVe,"STRONG",{});var JXt=s(U3e);pzr=r(JXt,"roberta"),JXt.forEach(t),_zr=r(WVe," \u2014 "),ioe=n(WVe,"A",{href:!0});var YXt=s(ioe);uzr=r(YXt,"FlaxRobertaModel"),YXt.forEach(t),bzr=r(WVe," (RoBERTa model)"),WVe.forEach(t),vzr=i(ae),G3=n(ae,"LI",{});var QVe=s(G3);J3e=n(QVe,"STRONG",{});var KXt=s(J3e);Fzr=r(KXt,"roformer"),KXt.forEach(t),Tzr=r(QVe," \u2014 "),doe=n(QVe,"A",{href:!0});var ZXt=s(doe);Mzr=r(ZXt,"FlaxRoFormerModel"),ZXt.forEach(t),Ezr=r(QVe," (RoFormer model)"),QVe.forEach(t),Czr=i(ae),O3=n(ae,"LI",{});var HVe=s(O3);Y3e=n(HVe,"STRONG",{});var ezt=s(Y3e);wzr=r(ezt,"t5"),ezt.forEach(t),Azr=r(HVe," \u2014 "),coe=n(HVe,"A",{href:!0});var ozt=s(coe);Lzr=r(ozt,"FlaxT5Model"),ozt.forEach(t),yzr=r(HVe," (T5 model)"),HVe.forEach(t),xzr=i(ae),V3=n(ae,"LI",{});var UVe=s(V3);K3e=n(UVe,"STRONG",{});var rzt=s(K3e);$zr=r(rzt,"vision-text-dual-encoder"),rzt.forEach(t),kzr=r(UVe," \u2014 "),foe=n(UVe,"A",{href:!0});var tzt=s(foe);Szr=r(tzt,"FlaxVisionTextDualEncoderModel"),tzt.forEach(t),Rzr=r(UVe," (VisionTextDualEncoder model)"),UVe.forEach(t),Pzr=i(ae),X3=n(ae,"LI",{});var JVe=s(X3);Z3e=n(JVe,"STRONG",{});var azt=s(Z3e);Bzr=r(azt,"vit"),azt.forEach(t),Izr=r(JVe," \u2014 "),moe=n(JVe,"A",{href:!0});var nzt=s(moe);Nzr=r(nzt,"FlaxViTModel"),nzt.forEach(t),qzr=r(JVe," (ViT model)"),JVe.forEach(t),jzr=i(ae),z3=n(ae,"LI",{});var YVe=s(z3);ewe=n(YVe,"STRONG",{});var szt=s(ewe);Dzr=r(szt,"wav2vec2"),szt.forEach(t),Gzr=r(YVe," \u2014 "),goe=n(YVe,"A",{href:!0});var lzt=s(goe);Ozr=r(lzt,"FlaxWav2Vec2Model"),lzt.forEach(t),Vzr=r(YVe," (Wav2Vec2 model)"),YVe.forEach(t),Xzr=i(ae),W3=n(ae,"LI",{});var KVe=s(W3);owe=n(KVe,"STRONG",{});var izt=s(owe);zzr=r(izt,"xglm"),izt.forEach(t),Wzr=r(KVe," \u2014 "),hoe=n(KVe,"A",{href:!0});var dzt=s(hoe);Qzr=r(dzt,"FlaxXGLMModel"),dzt.forEach(t),Hzr=r(KVe," (XGLM model)"),KVe.forEach(t),Uzr=i(ae),Q3=n(ae,"LI",{});var ZVe=s(Q3);rwe=n(ZVe,"STRONG",{});var czt=s(rwe);Jzr=r(czt,"xlm-roberta"),czt.forEach(t),Yzr=r(ZVe," \u2014 "),poe=n(ZVe,"A",{href:!0});var fzt=s(poe);Kzr=r(fzt,"FlaxXLMRobertaModel"),fzt.forEach(t),Zzr=r(ZVe," (XLM-RoBERTa model)"),ZVe.forEach(t),ae.forEach(t),eWr=i(li),T(H3.$$.fragment,li),li.forEach(t),si.forEach(t),mQe=i(f),Zc=n(f,"H2",{class:!0});var TUe=s(Zc);U3=n(TUe,"A",{id:!0,class:!0,href:!0});var mzt=s(U3);twe=n(mzt,"SPAN",{});var gzt=s(twe);T(P$.$$.fragment,gzt),gzt.forEach(t),mzt.forEach(t),oWr=i(TUe),awe=n(TUe,"SPAN",{});var hzt=s(awe);rWr=r(hzt,"FlaxAutoModelForCausalLM"),hzt.forEach(t),TUe.forEach(t),gQe=i(f),ur=n(f,"DIV",{class:!0});var ii=s(ur);T(B$.$$.fragment,ii),tWr=i(ii),ef=n(ii,"P",{});var Uae=s(ef);aWr=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_oe=n(Uae,"A",{href:!0});var pzt=s(_oe);nWr=r(pzt,"from_pretrained()"),pzt.forEach(t),sWr=r(Uae," class method or the "),uoe=n(Uae,"A",{href:!0});var _zt=s(uoe);lWr=r(_zt,"from_config()"),_zt.forEach(t),iWr=r(Uae,` class
method.`),Uae.forEach(t),dWr=i(ii),I$=n(ii,"P",{});var MUe=s(I$);cWr=r(MUe,"This class cannot be instantiated directly using "),nwe=n(MUe,"CODE",{});var uzt=s(nwe);fWr=r(uzt,"__init__()"),uzt.forEach(t),mWr=r(MUe," (throws an error)."),MUe.forEach(t),gWr=i(ii),Ht=n(ii,"DIV",{class:!0});var eL=s(Ht);T(N$.$$.fragment,eL),hWr=i(eL),swe=n(eL,"P",{});var bzt=s(swe);pWr=r(bzt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bzt.forEach(t),_Wr=i(eL),of=n(eL,"P",{});var Jae=s(of);uWr=r(Jae,`Note:
Loading a model from its configuration file does `),lwe=n(Jae,"STRONG",{});var vzt=s(lwe);bWr=r(vzt,"not"),vzt.forEach(t),vWr=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Jae,"A",{href:!0});var Fzt=s(boe);FWr=r(Fzt,"from_pretrained()"),Fzt.forEach(t),TWr=r(Jae," to load the model weights."),Jae.forEach(t),MWr=i(eL),T(J3.$$.fragment,eL),eL.forEach(t),EWr=i(ii),zr=n(ii,"DIV",{class:!0});var di=s(zr);T(q$.$$.fragment,di),CWr=i(di),iwe=n(di,"P",{});var Tzt=s(iwe);wWr=r(Tzt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tzt.forEach(t),AWr=i(di),En=n(di,"P",{});var oL=s(En);LWr=r(oL,"The model class to instantiate is selected based on the "),dwe=n(oL,"CODE",{});var Mzt=s(dwe);yWr=r(Mzt,"model_type"),Mzt.forEach(t),xWr=r(oL,` property of the config object (either
passed as an argument or loaded from `),cwe=n(oL,"CODE",{});var Ezt=s(cwe);$Wr=r(Ezt,"pretrained_model_name_or_path"),Ezt.forEach(t),kWr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fwe=n(oL,"CODE",{});var Czt=s(fwe);SWr=r(Czt,"pretrained_model_name_or_path"),Czt.forEach(t),RWr=r(oL,":"),oL.forEach(t),PWr=i(di),xe=n(di,"UL",{});var Ne=s(xe);Y3=n(Ne,"LI",{});var eXe=s(Y3);mwe=n(eXe,"STRONG",{});var wzt=s(mwe);BWr=r(wzt,"bart"),wzt.forEach(t),IWr=r(eXe," \u2014 "),voe=n(eXe,"A",{href:!0});var Azt=s(voe);NWr=r(Azt,"FlaxBartForCausalLM"),Azt.forEach(t),qWr=r(eXe," (BART model)"),eXe.forEach(t),jWr=i(Ne),K3=n(Ne,"LI",{});var oXe=s(K3);gwe=n(oXe,"STRONG",{});var Lzt=s(gwe);DWr=r(Lzt,"bert"),Lzt.forEach(t),GWr=r(oXe," \u2014 "),Foe=n(oXe,"A",{href:!0});var yzt=s(Foe);OWr=r(yzt,"FlaxBertForCausalLM"),yzt.forEach(t),VWr=r(oXe," (BERT model)"),oXe.forEach(t),XWr=i(Ne),Z3=n(Ne,"LI",{});var rXe=s(Z3);hwe=n(rXe,"STRONG",{});var xzt=s(hwe);zWr=r(xzt,"big_bird"),xzt.forEach(t),WWr=r(rXe," \u2014 "),Toe=n(rXe,"A",{href:!0});var $zt=s(Toe);QWr=r($zt,"FlaxBigBirdForCausalLM"),$zt.forEach(t),HWr=r(rXe," (BigBird model)"),rXe.forEach(t),UWr=i(Ne),ew=n(Ne,"LI",{});var tXe=s(ew);pwe=n(tXe,"STRONG",{});var kzt=s(pwe);JWr=r(kzt,"electra"),kzt.forEach(t),YWr=r(tXe," \u2014 "),Moe=n(tXe,"A",{href:!0});var Szt=s(Moe);KWr=r(Szt,"FlaxElectraForCausalLM"),Szt.forEach(t),ZWr=r(tXe," (ELECTRA model)"),tXe.forEach(t),eQr=i(Ne),ow=n(Ne,"LI",{});var aXe=s(ow);_we=n(aXe,"STRONG",{});var Rzt=s(_we);oQr=r(Rzt,"gpt2"),Rzt.forEach(t),rQr=r(aXe," \u2014 "),Eoe=n(aXe,"A",{href:!0});var Pzt=s(Eoe);tQr=r(Pzt,"FlaxGPT2LMHeadModel"),Pzt.forEach(t),aQr=r(aXe," (OpenAI GPT-2 model)"),aXe.forEach(t),nQr=i(Ne),rw=n(Ne,"LI",{});var nXe=s(rw);uwe=n(nXe,"STRONG",{});var Bzt=s(uwe);sQr=r(Bzt,"gpt_neo"),Bzt.forEach(t),lQr=r(nXe," \u2014 "),Coe=n(nXe,"A",{href:!0});var Izt=s(Coe);iQr=r(Izt,"FlaxGPTNeoForCausalLM"),Izt.forEach(t),dQr=r(nXe," (GPT Neo model)"),nXe.forEach(t),cQr=i(Ne),tw=n(Ne,"LI",{});var sXe=s(tw);bwe=n(sXe,"STRONG",{});var Nzt=s(bwe);fQr=r(Nzt,"gptj"),Nzt.forEach(t),mQr=r(sXe," \u2014 "),woe=n(sXe,"A",{href:!0});var qzt=s(woe);gQr=r(qzt,"FlaxGPTJForCausalLM"),qzt.forEach(t),hQr=r(sXe," (GPT-J model)"),sXe.forEach(t),pQr=i(Ne),aw=n(Ne,"LI",{});var lXe=s(aw);vwe=n(lXe,"STRONG",{});var jzt=s(vwe);_Qr=r(jzt,"opt"),jzt.forEach(t),uQr=r(lXe," \u2014 "),Aoe=n(lXe,"A",{href:!0});var Dzt=s(Aoe);bQr=r(Dzt,"FlaxOPTForCausalLM"),Dzt.forEach(t),vQr=r(lXe," (OPT model)"),lXe.forEach(t),FQr=i(Ne),nw=n(Ne,"LI",{});var iXe=s(nw);Fwe=n(iXe,"STRONG",{});var Gzt=s(Fwe);TQr=r(Gzt,"roberta"),Gzt.forEach(t),MQr=r(iXe," \u2014 "),Loe=n(iXe,"A",{href:!0});var Ozt=s(Loe);EQr=r(Ozt,"FlaxRobertaForCausalLM"),Ozt.forEach(t),CQr=r(iXe," (RoBERTa model)"),iXe.forEach(t),wQr=i(Ne),sw=n(Ne,"LI",{});var dXe=s(sw);Twe=n(dXe,"STRONG",{});var Vzt=s(Twe);AQr=r(Vzt,"xglm"),Vzt.forEach(t),LQr=r(dXe," \u2014 "),yoe=n(dXe,"A",{href:!0});var Xzt=s(yoe);yQr=r(Xzt,"FlaxXGLMForCausalLM"),Xzt.forEach(t),xQr=r(dXe," (XGLM model)"),dXe.forEach(t),Ne.forEach(t),$Qr=i(di),T(lw.$$.fragment,di),di.forEach(t),ii.forEach(t),hQe=i(f),rf=n(f,"H2",{class:!0});var EUe=s(rf);iw=n(EUe,"A",{id:!0,class:!0,href:!0});var zzt=s(iw);Mwe=n(zzt,"SPAN",{});var Wzt=s(Mwe);T(j$.$$.fragment,Wzt),Wzt.forEach(t),zzt.forEach(t),kQr=i(EUe),Ewe=n(EUe,"SPAN",{});var Qzt=s(Ewe);SQr=r(Qzt,"FlaxAutoModelForPreTraining"),Qzt.forEach(t),EUe.forEach(t),pQe=i(f),br=n(f,"DIV",{class:!0});var ci=s(br);T(D$.$$.fragment,ci),RQr=i(ci),tf=n(ci,"P",{});var Yae=s(tf);PQr=r(Yae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xoe=n(Yae,"A",{href:!0});var Hzt=s(xoe);BQr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),IQr=r(Yae," class method or the "),$oe=n(Yae,"A",{href:!0});var Uzt=s($oe);NQr=r(Uzt,"from_config()"),Uzt.forEach(t),qQr=r(Yae,` class
method.`),Yae.forEach(t),jQr=i(ci),G$=n(ci,"P",{});var CUe=s(G$);DQr=r(CUe,"This class cannot be instantiated directly using "),Cwe=n(CUe,"CODE",{});var Jzt=s(Cwe);GQr=r(Jzt,"__init__()"),Jzt.forEach(t),OQr=r(CUe," (throws an error)."),CUe.forEach(t),VQr=i(ci),Ut=n(ci,"DIV",{class:!0});var rL=s(Ut);T(O$.$$.fragment,rL),XQr=i(rL),wwe=n(rL,"P",{});var Yzt=s(wwe);zQr=r(Yzt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Yzt.forEach(t),WQr=i(rL),af=n(rL,"P",{});var Kae=s(af);QQr=r(Kae,`Note:
Loading a model from its configuration file does `),Awe=n(Kae,"STRONG",{});var Kzt=s(Awe);HQr=r(Kzt,"not"),Kzt.forEach(t),UQr=r(Kae,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=n(Kae,"A",{href:!0});var Zzt=s(koe);JQr=r(Zzt,"from_pretrained()"),Zzt.forEach(t),YQr=r(Kae," to load the model weights."),Kae.forEach(t),KQr=i(rL),T(dw.$$.fragment,rL),rL.forEach(t),ZQr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(V$.$$.fragment,fi),eHr=i(fi),Lwe=n(fi,"P",{});var eWt=s(Lwe);oHr=r(eWt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eWt.forEach(t),rHr=i(fi),Cn=n(fi,"P",{});var tL=s(Cn);tHr=r(tL,"The model class to instantiate is selected based on the "),ywe=n(tL,"CODE",{});var oWt=s(ywe);aHr=r(oWt,"model_type"),oWt.forEach(t),nHr=r(tL,` property of the config object (either
passed as an argument or loaded from `),xwe=n(tL,"CODE",{});var rWt=s(xwe);sHr=r(rWt,"pretrained_model_name_or_path"),rWt.forEach(t),lHr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=n(tL,"CODE",{});var tWt=s($we);iHr=r(tWt,"pretrained_model_name_or_path"),tWt.forEach(t),dHr=r(tL,":"),tL.forEach(t),cHr=i(fi),Ee=n(fi,"UL",{});var we=s(Ee);cw=n(we,"LI",{});var cXe=s(cw);kwe=n(cXe,"STRONG",{});var aWt=s(kwe);fHr=r(aWt,"albert"),aWt.forEach(t),mHr=r(cXe," \u2014 "),Soe=n(cXe,"A",{href:!0});var nWt=s(Soe);gHr=r(nWt,"FlaxAlbertForPreTraining"),nWt.forEach(t),hHr=r(cXe," (ALBERT model)"),cXe.forEach(t),pHr=i(we),fw=n(we,"LI",{});var fXe=s(fw);Swe=n(fXe,"STRONG",{});var sWt=s(Swe);_Hr=r(sWt,"bart"),sWt.forEach(t),uHr=r(fXe," \u2014 "),Roe=n(fXe,"A",{href:!0});var lWt=s(Roe);bHr=r(lWt,"FlaxBartForConditionalGeneration"),lWt.forEach(t),vHr=r(fXe," (BART model)"),fXe.forEach(t),FHr=i(we),mw=n(we,"LI",{});var mXe=s(mw);Rwe=n(mXe,"STRONG",{});var iWt=s(Rwe);THr=r(iWt,"bert"),iWt.forEach(t),MHr=r(mXe," \u2014 "),Poe=n(mXe,"A",{href:!0});var dWt=s(Poe);EHr=r(dWt,"FlaxBertForPreTraining"),dWt.forEach(t),CHr=r(mXe," (BERT model)"),mXe.forEach(t),wHr=i(we),gw=n(we,"LI",{});var gXe=s(gw);Pwe=n(gXe,"STRONG",{});var cWt=s(Pwe);AHr=r(cWt,"big_bird"),cWt.forEach(t),LHr=r(gXe," \u2014 "),Boe=n(gXe,"A",{href:!0});var fWt=s(Boe);yHr=r(fWt,"FlaxBigBirdForPreTraining"),fWt.forEach(t),xHr=r(gXe," (BigBird model)"),gXe.forEach(t),$Hr=i(we),hw=n(we,"LI",{});var hXe=s(hw);Bwe=n(hXe,"STRONG",{});var mWt=s(Bwe);kHr=r(mWt,"electra"),mWt.forEach(t),SHr=r(hXe," \u2014 "),Ioe=n(hXe,"A",{href:!0});var gWt=s(Ioe);RHr=r(gWt,"FlaxElectraForPreTraining"),gWt.forEach(t),PHr=r(hXe," (ELECTRA model)"),hXe.forEach(t),BHr=i(we),pw=n(we,"LI",{});var pXe=s(pw);Iwe=n(pXe,"STRONG",{});var hWt=s(Iwe);IHr=r(hWt,"longt5"),hWt.forEach(t),NHr=r(pXe," \u2014 "),Noe=n(pXe,"A",{href:!0});var pWt=s(Noe);qHr=r(pWt,"FlaxLongT5ForConditionalGeneration"),pWt.forEach(t),jHr=r(pXe," (LongT5 model)"),pXe.forEach(t),DHr=i(we),_w=n(we,"LI",{});var _Xe=s(_w);Nwe=n(_Xe,"STRONG",{});var _Wt=s(Nwe);GHr=r(_Wt,"mbart"),_Wt.forEach(t),OHr=r(_Xe," \u2014 "),qoe=n(_Xe,"A",{href:!0});var uWt=s(qoe);VHr=r(uWt,"FlaxMBartForConditionalGeneration"),uWt.forEach(t),XHr=r(_Xe," (mBART model)"),_Xe.forEach(t),zHr=i(we),uw=n(we,"LI",{});var uXe=s(uw);qwe=n(uXe,"STRONG",{});var bWt=s(qwe);WHr=r(bWt,"mt5"),bWt.forEach(t),QHr=r(uXe," \u2014 "),joe=n(uXe,"A",{href:!0});var vWt=s(joe);HHr=r(vWt,"FlaxMT5ForConditionalGeneration"),vWt.forEach(t),UHr=r(uXe," (MT5 model)"),uXe.forEach(t),JHr=i(we),bw=n(we,"LI",{});var bXe=s(bw);jwe=n(bXe,"STRONG",{});var FWt=s(jwe);YHr=r(FWt,"roberta"),FWt.forEach(t),KHr=r(bXe," \u2014 "),Doe=n(bXe,"A",{href:!0});var TWt=s(Doe);ZHr=r(TWt,"FlaxRobertaForMaskedLM"),TWt.forEach(t),eUr=r(bXe," (RoBERTa model)"),bXe.forEach(t),oUr=i(we),vw=n(we,"LI",{});var vXe=s(vw);Dwe=n(vXe,"STRONG",{});var MWt=s(Dwe);rUr=r(MWt,"roformer"),MWt.forEach(t),tUr=r(vXe," \u2014 "),Goe=n(vXe,"A",{href:!0});var EWt=s(Goe);aUr=r(EWt,"FlaxRoFormerForMaskedLM"),EWt.forEach(t),nUr=r(vXe," (RoFormer model)"),vXe.forEach(t),sUr=i(we),Fw=n(we,"LI",{});var FXe=s(Fw);Gwe=n(FXe,"STRONG",{});var CWt=s(Gwe);lUr=r(CWt,"t5"),CWt.forEach(t),iUr=r(FXe," \u2014 "),Ooe=n(FXe,"A",{href:!0});var wWt=s(Ooe);dUr=r(wWt,"FlaxT5ForConditionalGeneration"),wWt.forEach(t),cUr=r(FXe," (T5 model)"),FXe.forEach(t),fUr=i(we),Tw=n(we,"LI",{});var TXe=s(Tw);Owe=n(TXe,"STRONG",{});var AWt=s(Owe);mUr=r(AWt,"wav2vec2"),AWt.forEach(t),gUr=r(TXe," \u2014 "),Voe=n(TXe,"A",{href:!0});var LWt=s(Voe);hUr=r(LWt,"FlaxWav2Vec2ForPreTraining"),LWt.forEach(t),pUr=r(TXe," (Wav2Vec2 model)"),TXe.forEach(t),_Ur=i(we),Mw=n(we,"LI",{});var MXe=s(Mw);Vwe=n(MXe,"STRONG",{});var yWt=s(Vwe);uUr=r(yWt,"xlm-roberta"),yWt.forEach(t),bUr=r(MXe," \u2014 "),Xoe=n(MXe,"A",{href:!0});var xWt=s(Xoe);vUr=r(xWt,"FlaxXLMRobertaForMaskedLM"),xWt.forEach(t),FUr=r(MXe," (XLM-RoBERTa model)"),MXe.forEach(t),we.forEach(t),TUr=i(fi),T(Ew.$$.fragment,fi),fi.forEach(t),ci.forEach(t),_Qe=i(f),nf=n(f,"H2",{class:!0});var wUe=s(nf);Cw=n(wUe,"A",{id:!0,class:!0,href:!0});var $Wt=s(Cw);Xwe=n($Wt,"SPAN",{});var kWt=s(Xwe);T(X$.$$.fragment,kWt),kWt.forEach(t),$Wt.forEach(t),MUr=i(wUe),zwe=n(wUe,"SPAN",{});var SWt=s(zwe);EUr=r(SWt,"FlaxAutoModelForMaskedLM"),SWt.forEach(t),wUe.forEach(t),uQe=i(f),vr=n(f,"DIV",{class:!0});var mi=s(vr);T(z$.$$.fragment,mi),CUr=i(mi),sf=n(mi,"P",{});var Zae=s(sf);wUr=r(Zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zoe=n(Zae,"A",{href:!0});var RWt=s(zoe);AUr=r(RWt,"from_pretrained()"),RWt.forEach(t),LUr=r(Zae," class method or the "),Woe=n(Zae,"A",{href:!0});var PWt=s(Woe);yUr=r(PWt,"from_config()"),PWt.forEach(t),xUr=r(Zae,` class
method.`),Zae.forEach(t),$Ur=i(mi),W$=n(mi,"P",{});var AUe=s(W$);kUr=r(AUe,"This class cannot be instantiated directly using "),Wwe=n(AUe,"CODE",{});var BWt=s(Wwe);SUr=r(BWt,"__init__()"),BWt.forEach(t),RUr=r(AUe," (throws an error)."),AUe.forEach(t),PUr=i(mi),Jt=n(mi,"DIV",{class:!0});var aL=s(Jt);T(Q$.$$.fragment,aL),BUr=i(aL),Qwe=n(aL,"P",{});var IWt=s(Qwe);IUr=r(IWt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),IWt.forEach(t),NUr=i(aL),lf=n(aL,"P",{});var ene=s(lf);qUr=r(ene,`Note:
Loading a model from its configuration file does `),Hwe=n(ene,"STRONG",{});var NWt=s(Hwe);jUr=r(NWt,"not"),NWt.forEach(t),DUr=r(ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qoe=n(ene,"A",{href:!0});var qWt=s(Qoe);GUr=r(qWt,"from_pretrained()"),qWt.forEach(t),OUr=r(ene," to load the model weights."),ene.forEach(t),VUr=i(aL),T(ww.$$.fragment,aL),aL.forEach(t),XUr=i(mi),Qr=n(mi,"DIV",{class:!0});var gi=s(Qr);T(H$.$$.fragment,gi),zUr=i(gi),Uwe=n(gi,"P",{});var jWt=s(Uwe);WUr=r(jWt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jWt.forEach(t),QUr=i(gi),wn=n(gi,"P",{});var nL=s(wn);HUr=r(nL,"The model class to instantiate is selected based on the "),Jwe=n(nL,"CODE",{});var DWt=s(Jwe);UUr=r(DWt,"model_type"),DWt.forEach(t),JUr=r(nL,` property of the config object (either
passed as an argument or loaded from `),Ywe=n(nL,"CODE",{});var GWt=s(Ywe);YUr=r(GWt,"pretrained_model_name_or_path"),GWt.forEach(t),KUr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kwe=n(nL,"CODE",{});var OWt=s(Kwe);ZUr=r(OWt,"pretrained_model_name_or_path"),OWt.forEach(t),eJr=r(nL,":"),nL.forEach(t),oJr=i(gi),$e=n(gi,"UL",{});var qe=s($e);Aw=n(qe,"LI",{});var EXe=s(Aw);Zwe=n(EXe,"STRONG",{});var VWt=s(Zwe);rJr=r(VWt,"albert"),VWt.forEach(t),tJr=r(EXe," \u2014 "),Hoe=n(EXe,"A",{href:!0});var XWt=s(Hoe);aJr=r(XWt,"FlaxAlbertForMaskedLM"),XWt.forEach(t),nJr=r(EXe," (ALBERT model)"),EXe.forEach(t),sJr=i(qe),Lw=n(qe,"LI",{});var CXe=s(Lw);e6e=n(CXe,"STRONG",{});var zWt=s(e6e);lJr=r(zWt,"bart"),zWt.forEach(t),iJr=r(CXe," \u2014 "),Uoe=n(CXe,"A",{href:!0});var WWt=s(Uoe);dJr=r(WWt,"FlaxBartForConditionalGeneration"),WWt.forEach(t),cJr=r(CXe," (BART model)"),CXe.forEach(t),fJr=i(qe),yw=n(qe,"LI",{});var wXe=s(yw);o6e=n(wXe,"STRONG",{});var QWt=s(o6e);mJr=r(QWt,"bert"),QWt.forEach(t),gJr=r(wXe," \u2014 "),Joe=n(wXe,"A",{href:!0});var HWt=s(Joe);hJr=r(HWt,"FlaxBertForMaskedLM"),HWt.forEach(t),pJr=r(wXe," (BERT model)"),wXe.forEach(t),_Jr=i(qe),xw=n(qe,"LI",{});var AXe=s(xw);r6e=n(AXe,"STRONG",{});var UWt=s(r6e);uJr=r(UWt,"big_bird"),UWt.forEach(t),bJr=r(AXe," \u2014 "),Yoe=n(AXe,"A",{href:!0});var JWt=s(Yoe);vJr=r(JWt,"FlaxBigBirdForMaskedLM"),JWt.forEach(t),FJr=r(AXe," (BigBird model)"),AXe.forEach(t),TJr=i(qe),$w=n(qe,"LI",{});var LXe=s($w);t6e=n(LXe,"STRONG",{});var YWt=s(t6e);MJr=r(YWt,"distilbert"),YWt.forEach(t),EJr=r(LXe," \u2014 "),Koe=n(LXe,"A",{href:!0});var KWt=s(Koe);CJr=r(KWt,"FlaxDistilBertForMaskedLM"),KWt.forEach(t),wJr=r(LXe," (DistilBERT model)"),LXe.forEach(t),AJr=i(qe),kw=n(qe,"LI",{});var yXe=s(kw);a6e=n(yXe,"STRONG",{});var ZWt=s(a6e);LJr=r(ZWt,"electra"),ZWt.forEach(t),yJr=r(yXe," \u2014 "),Zoe=n(yXe,"A",{href:!0});var eQt=s(Zoe);xJr=r(eQt,"FlaxElectraForMaskedLM"),eQt.forEach(t),$Jr=r(yXe," (ELECTRA model)"),yXe.forEach(t),kJr=i(qe),Sw=n(qe,"LI",{});var xXe=s(Sw);n6e=n(xXe,"STRONG",{});var oQt=s(n6e);SJr=r(oQt,"mbart"),oQt.forEach(t),RJr=r(xXe," \u2014 "),ere=n(xXe,"A",{href:!0});var rQt=s(ere);PJr=r(rQt,"FlaxMBartForConditionalGeneration"),rQt.forEach(t),BJr=r(xXe," (mBART model)"),xXe.forEach(t),IJr=i(qe),Rw=n(qe,"LI",{});var $Xe=s(Rw);s6e=n($Xe,"STRONG",{});var tQt=s(s6e);NJr=r(tQt,"roberta"),tQt.forEach(t),qJr=r($Xe," \u2014 "),ore=n($Xe,"A",{href:!0});var aQt=s(ore);jJr=r(aQt,"FlaxRobertaForMaskedLM"),aQt.forEach(t),DJr=r($Xe," (RoBERTa model)"),$Xe.forEach(t),GJr=i(qe),Pw=n(qe,"LI",{});var kXe=s(Pw);l6e=n(kXe,"STRONG",{});var nQt=s(l6e);OJr=r(nQt,"roformer"),nQt.forEach(t),VJr=r(kXe," \u2014 "),rre=n(kXe,"A",{href:!0});var sQt=s(rre);XJr=r(sQt,"FlaxRoFormerForMaskedLM"),sQt.forEach(t),zJr=r(kXe," (RoFormer model)"),kXe.forEach(t),WJr=i(qe),Bw=n(qe,"LI",{});var SXe=s(Bw);i6e=n(SXe,"STRONG",{});var lQt=s(i6e);QJr=r(lQt,"xlm-roberta"),lQt.forEach(t),HJr=r(SXe," \u2014 "),tre=n(SXe,"A",{href:!0});var iQt=s(tre);UJr=r(iQt,"FlaxXLMRobertaForMaskedLM"),iQt.forEach(t),JJr=r(SXe," (XLM-RoBERTa model)"),SXe.forEach(t),qe.forEach(t),YJr=i(gi),T(Iw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),bQe=i(f),df=n(f,"H2",{class:!0});var LUe=s(df);Nw=n(LUe,"A",{id:!0,class:!0,href:!0});var dQt=s(Nw);d6e=n(dQt,"SPAN",{});var cQt=s(d6e);T(U$.$$.fragment,cQt),cQt.forEach(t),dQt.forEach(t),KJr=i(LUe),c6e=n(LUe,"SPAN",{});var fQt=s(c6e);ZJr=r(fQt,"FlaxAutoModelForSeq2SeqLM"),fQt.forEach(t),LUe.forEach(t),vQe=i(f),Fr=n(f,"DIV",{class:!0});var hi=s(Fr);T(J$.$$.fragment,hi),eYr=i(hi),cf=n(hi,"P",{});var one=s(cf);oYr=r(one,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),are=n(one,"A",{href:!0});var mQt=s(are);rYr=r(mQt,"from_pretrained()"),mQt.forEach(t),tYr=r(one," class method or the "),nre=n(one,"A",{href:!0});var gQt=s(nre);aYr=r(gQt,"from_config()"),gQt.forEach(t),nYr=r(one,` class
method.`),one.forEach(t),sYr=i(hi),Y$=n(hi,"P",{});var yUe=s(Y$);lYr=r(yUe,"This class cannot be instantiated directly using "),f6e=n(yUe,"CODE",{});var hQt=s(f6e);iYr=r(hQt,"__init__()"),hQt.forEach(t),dYr=r(yUe," (throws an error)."),yUe.forEach(t),cYr=i(hi),Yt=n(hi,"DIV",{class:!0});var sL=s(Yt);T(K$.$$.fragment,sL),fYr=i(sL),m6e=n(sL,"P",{});var pQt=s(m6e);mYr=r(pQt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pQt.forEach(t),gYr=i(sL),ff=n(sL,"P",{});var rne=s(ff);hYr=r(rne,`Note:
Loading a model from its configuration file does `),g6e=n(rne,"STRONG",{});var _Qt=s(g6e);pYr=r(_Qt,"not"),_Qt.forEach(t),_Yr=r(rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),sre=n(rne,"A",{href:!0});var uQt=s(sre);uYr=r(uQt,"from_pretrained()"),uQt.forEach(t),bYr=r(rne," to load the model weights."),rne.forEach(t),vYr=i(sL),T(qw.$$.fragment,sL),sL.forEach(t),FYr=i(hi),Hr=n(hi,"DIV",{class:!0});var pi=s(Hr);T(Z$.$$.fragment,pi),TYr=i(pi),h6e=n(pi,"P",{});var bQt=s(h6e);MYr=r(bQt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bQt.forEach(t),EYr=i(pi),An=n(pi,"P",{});var lL=s(An);CYr=r(lL,"The model class to instantiate is selected based on the "),p6e=n(lL,"CODE",{});var vQt=s(p6e);wYr=r(vQt,"model_type"),vQt.forEach(t),AYr=r(lL,` property of the config object (either
passed as an argument or loaded from `),_6e=n(lL,"CODE",{});var FQt=s(_6e);LYr=r(FQt,"pretrained_model_name_or_path"),FQt.forEach(t),yYr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(lL,"CODE",{});var TQt=s(u6e);xYr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),$Yr=r(lL,":"),lL.forEach(t),kYr=i(pi),ke=n(pi,"UL",{});var je=s(ke);jw=n(je,"LI",{});var RXe=s(jw);b6e=n(RXe,"STRONG",{});var MQt=s(b6e);SYr=r(MQt,"bart"),MQt.forEach(t),RYr=r(RXe," \u2014 "),lre=n(RXe,"A",{href:!0});var EQt=s(lre);PYr=r(EQt,"FlaxBartForConditionalGeneration"),EQt.forEach(t),BYr=r(RXe," (BART model)"),RXe.forEach(t),IYr=i(je),Dw=n(je,"LI",{});var PXe=s(Dw);v6e=n(PXe,"STRONG",{});var CQt=s(v6e);NYr=r(CQt,"blenderbot"),CQt.forEach(t),qYr=r(PXe," \u2014 "),ire=n(PXe,"A",{href:!0});var wQt=s(ire);jYr=r(wQt,"FlaxBlenderbotForConditionalGeneration"),wQt.forEach(t),DYr=r(PXe," (Blenderbot model)"),PXe.forEach(t),GYr=i(je),Gw=n(je,"LI",{});var BXe=s(Gw);F6e=n(BXe,"STRONG",{});var AQt=s(F6e);OYr=r(AQt,"blenderbot-small"),AQt.forEach(t),VYr=r(BXe," \u2014 "),dre=n(BXe,"A",{href:!0});var LQt=s(dre);XYr=r(LQt,"FlaxBlenderbotSmallForConditionalGeneration"),LQt.forEach(t),zYr=r(BXe," (BlenderbotSmall model)"),BXe.forEach(t),WYr=i(je),Ow=n(je,"LI",{});var IXe=s(Ow);T6e=n(IXe,"STRONG",{});var yQt=s(T6e);QYr=r(yQt,"encoder-decoder"),yQt.forEach(t),HYr=r(IXe," \u2014 "),cre=n(IXe,"A",{href:!0});var xQt=s(cre);UYr=r(xQt,"FlaxEncoderDecoderModel"),xQt.forEach(t),JYr=r(IXe," (Encoder decoder model)"),IXe.forEach(t),YYr=i(je),Vw=n(je,"LI",{});var NXe=s(Vw);M6e=n(NXe,"STRONG",{});var $Qt=s(M6e);KYr=r($Qt,"longt5"),$Qt.forEach(t),ZYr=r(NXe," \u2014 "),fre=n(NXe,"A",{href:!0});var kQt=s(fre);eKr=r(kQt,"FlaxLongT5ForConditionalGeneration"),kQt.forEach(t),oKr=r(NXe," (LongT5 model)"),NXe.forEach(t),rKr=i(je),Xw=n(je,"LI",{});var qXe=s(Xw);E6e=n(qXe,"STRONG",{});var SQt=s(E6e);tKr=r(SQt,"marian"),SQt.forEach(t),aKr=r(qXe," \u2014 "),mre=n(qXe,"A",{href:!0});var RQt=s(mre);nKr=r(RQt,"FlaxMarianMTModel"),RQt.forEach(t),sKr=r(qXe," (Marian model)"),qXe.forEach(t),lKr=i(je),zw=n(je,"LI",{});var jXe=s(zw);C6e=n(jXe,"STRONG",{});var PQt=s(C6e);iKr=r(PQt,"mbart"),PQt.forEach(t),dKr=r(jXe," \u2014 "),gre=n(jXe,"A",{href:!0});var BQt=s(gre);cKr=r(BQt,"FlaxMBartForConditionalGeneration"),BQt.forEach(t),fKr=r(jXe," (mBART model)"),jXe.forEach(t),mKr=i(je),Ww=n(je,"LI",{});var DXe=s(Ww);w6e=n(DXe,"STRONG",{});var IQt=s(w6e);gKr=r(IQt,"mt5"),IQt.forEach(t),hKr=r(DXe," \u2014 "),hre=n(DXe,"A",{href:!0});var NQt=s(hre);pKr=r(NQt,"FlaxMT5ForConditionalGeneration"),NQt.forEach(t),_Kr=r(DXe," (MT5 model)"),DXe.forEach(t),uKr=i(je),Qw=n(je,"LI",{});var GXe=s(Qw);A6e=n(GXe,"STRONG",{});var qQt=s(A6e);bKr=r(qQt,"pegasus"),qQt.forEach(t),vKr=r(GXe," \u2014 "),pre=n(GXe,"A",{href:!0});var jQt=s(pre);FKr=r(jQt,"FlaxPegasusForConditionalGeneration"),jQt.forEach(t),TKr=r(GXe," (Pegasus model)"),GXe.forEach(t),MKr=i(je),Hw=n(je,"LI",{});var OXe=s(Hw);L6e=n(OXe,"STRONG",{});var DQt=s(L6e);EKr=r(DQt,"t5"),DQt.forEach(t),CKr=r(OXe," \u2014 "),_re=n(OXe,"A",{href:!0});var GQt=s(_re);wKr=r(GQt,"FlaxT5ForConditionalGeneration"),GQt.forEach(t),AKr=r(OXe," (T5 model)"),OXe.forEach(t),je.forEach(t),LKr=i(pi),T(Uw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),FQe=i(f),mf=n(f,"H2",{class:!0});var xUe=s(mf);Jw=n(xUe,"A",{id:!0,class:!0,href:!0});var OQt=s(Jw);y6e=n(OQt,"SPAN",{});var VQt=s(y6e);T(ek.$$.fragment,VQt),VQt.forEach(t),OQt.forEach(t),yKr=i(xUe),x6e=n(xUe,"SPAN",{});var XQt=s(x6e);xKr=r(XQt,"FlaxAutoModelForSequenceClassification"),XQt.forEach(t),xUe.forEach(t),TQe=i(f),Tr=n(f,"DIV",{class:!0});var _i=s(Tr);T(ok.$$.fragment,_i),$Kr=i(_i),gf=n(_i,"P",{});var tne=s(gf);kKr=r(tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ure=n(tne,"A",{href:!0});var zQt=s(ure);SKr=r(zQt,"from_pretrained()"),zQt.forEach(t),RKr=r(tne," class method or the "),bre=n(tne,"A",{href:!0});var WQt=s(bre);PKr=r(WQt,"from_config()"),WQt.forEach(t),BKr=r(tne,` class
method.`),tne.forEach(t),IKr=i(_i),rk=n(_i,"P",{});var $Ue=s(rk);NKr=r($Ue,"This class cannot be instantiated directly using "),$6e=n($Ue,"CODE",{});var QQt=s($6e);qKr=r(QQt,"__init__()"),QQt.forEach(t),jKr=r($Ue," (throws an error)."),$Ue.forEach(t),DKr=i(_i),Kt=n(_i,"DIV",{class:!0});var iL=s(Kt);T(tk.$$.fragment,iL),GKr=i(iL),k6e=n(iL,"P",{});var HQt=s(k6e);OKr=r(HQt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HQt.forEach(t),VKr=i(iL),hf=n(iL,"P",{});var ane=s(hf);XKr=r(ane,`Note:
Loading a model from its configuration file does `),S6e=n(ane,"STRONG",{});var UQt=s(S6e);zKr=r(UQt,"not"),UQt.forEach(t),WKr=r(ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),vre=n(ane,"A",{href:!0});var JQt=s(vre);QKr=r(JQt,"from_pretrained()"),JQt.forEach(t),HKr=r(ane," to load the model weights."),ane.forEach(t),UKr=i(iL),T(Yw.$$.fragment,iL),iL.forEach(t),JKr=i(_i),Ur=n(_i,"DIV",{class:!0});var ui=s(Ur);T(ak.$$.fragment,ui),YKr=i(ui),R6e=n(ui,"P",{});var YQt=s(R6e);KKr=r(YQt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YQt.forEach(t),ZKr=i(ui),Ln=n(ui,"P",{});var dL=s(Ln);eZr=r(dL,"The model class to instantiate is selected based on the "),P6e=n(dL,"CODE",{});var KQt=s(P6e);oZr=r(KQt,"model_type"),KQt.forEach(t),rZr=r(dL,` property of the config object (either
passed as an argument or loaded from `),B6e=n(dL,"CODE",{});var ZQt=s(B6e);tZr=r(ZQt,"pretrained_model_name_or_path"),ZQt.forEach(t),aZr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(dL,"CODE",{});var eHt=s(I6e);nZr=r(eHt,"pretrained_model_name_or_path"),eHt.forEach(t),sZr=r(dL,":"),dL.forEach(t),lZr=i(ui),Se=n(ui,"UL",{});var De=s(Se);Kw=n(De,"LI",{});var VXe=s(Kw);N6e=n(VXe,"STRONG",{});var oHt=s(N6e);iZr=r(oHt,"albert"),oHt.forEach(t),dZr=r(VXe," \u2014 "),Fre=n(VXe,"A",{href:!0});var rHt=s(Fre);cZr=r(rHt,"FlaxAlbertForSequenceClassification"),rHt.forEach(t),fZr=r(VXe," (ALBERT model)"),VXe.forEach(t),mZr=i(De),Zw=n(De,"LI",{});var XXe=s(Zw);q6e=n(XXe,"STRONG",{});var tHt=s(q6e);gZr=r(tHt,"bart"),tHt.forEach(t),hZr=r(XXe," \u2014 "),Tre=n(XXe,"A",{href:!0});var aHt=s(Tre);pZr=r(aHt,"FlaxBartForSequenceClassification"),aHt.forEach(t),_Zr=r(XXe," (BART model)"),XXe.forEach(t),uZr=i(De),e6=n(De,"LI",{});var zXe=s(e6);j6e=n(zXe,"STRONG",{});var nHt=s(j6e);bZr=r(nHt,"bert"),nHt.forEach(t),vZr=r(zXe," \u2014 "),Mre=n(zXe,"A",{href:!0});var sHt=s(Mre);FZr=r(sHt,"FlaxBertForSequenceClassification"),sHt.forEach(t),TZr=r(zXe," (BERT model)"),zXe.forEach(t),MZr=i(De),o6=n(De,"LI",{});var WXe=s(o6);D6e=n(WXe,"STRONG",{});var lHt=s(D6e);EZr=r(lHt,"big_bird"),lHt.forEach(t),CZr=r(WXe," \u2014 "),Ere=n(WXe,"A",{href:!0});var iHt=s(Ere);wZr=r(iHt,"FlaxBigBirdForSequenceClassification"),iHt.forEach(t),AZr=r(WXe," (BigBird model)"),WXe.forEach(t),LZr=i(De),r6=n(De,"LI",{});var QXe=s(r6);G6e=n(QXe,"STRONG",{});var dHt=s(G6e);yZr=r(dHt,"distilbert"),dHt.forEach(t),xZr=r(QXe," \u2014 "),Cre=n(QXe,"A",{href:!0});var cHt=s(Cre);$Zr=r(cHt,"FlaxDistilBertForSequenceClassification"),cHt.forEach(t),kZr=r(QXe," (DistilBERT model)"),QXe.forEach(t),SZr=i(De),t6=n(De,"LI",{});var HXe=s(t6);O6e=n(HXe,"STRONG",{});var fHt=s(O6e);RZr=r(fHt,"electra"),fHt.forEach(t),PZr=r(HXe," \u2014 "),wre=n(HXe,"A",{href:!0});var mHt=s(wre);BZr=r(mHt,"FlaxElectraForSequenceClassification"),mHt.forEach(t),IZr=r(HXe," (ELECTRA model)"),HXe.forEach(t),NZr=i(De),a6=n(De,"LI",{});var UXe=s(a6);V6e=n(UXe,"STRONG",{});var gHt=s(V6e);qZr=r(gHt,"mbart"),gHt.forEach(t),jZr=r(UXe," \u2014 "),Are=n(UXe,"A",{href:!0});var hHt=s(Are);DZr=r(hHt,"FlaxMBartForSequenceClassification"),hHt.forEach(t),GZr=r(UXe," (mBART model)"),UXe.forEach(t),OZr=i(De),n6=n(De,"LI",{});var JXe=s(n6);X6e=n(JXe,"STRONG",{});var pHt=s(X6e);VZr=r(pHt,"roberta"),pHt.forEach(t),XZr=r(JXe," \u2014 "),Lre=n(JXe,"A",{href:!0});var _Ht=s(Lre);zZr=r(_Ht,"FlaxRobertaForSequenceClassification"),_Ht.forEach(t),WZr=r(JXe," (RoBERTa model)"),JXe.forEach(t),QZr=i(De),s6=n(De,"LI",{});var YXe=s(s6);z6e=n(YXe,"STRONG",{});var uHt=s(z6e);HZr=r(uHt,"roformer"),uHt.forEach(t),UZr=r(YXe," \u2014 "),yre=n(YXe,"A",{href:!0});var bHt=s(yre);JZr=r(bHt,"FlaxRoFormerForSequenceClassification"),bHt.forEach(t),YZr=r(YXe," (RoFormer model)"),YXe.forEach(t),KZr=i(De),l6=n(De,"LI",{});var KXe=s(l6);W6e=n(KXe,"STRONG",{});var vHt=s(W6e);ZZr=r(vHt,"xlm-roberta"),vHt.forEach(t),eet=r(KXe," \u2014 "),xre=n(KXe,"A",{href:!0});var FHt=s(xre);oet=r(FHt,"FlaxXLMRobertaForSequenceClassification"),FHt.forEach(t),ret=r(KXe," (XLM-RoBERTa model)"),KXe.forEach(t),De.forEach(t),tet=i(ui),T(i6.$$.fragment,ui),ui.forEach(t),_i.forEach(t),MQe=i(f),pf=n(f,"H2",{class:!0});var kUe=s(pf);d6=n(kUe,"A",{id:!0,class:!0,href:!0});var THt=s(d6);Q6e=n(THt,"SPAN",{});var MHt=s(Q6e);T(nk.$$.fragment,MHt),MHt.forEach(t),THt.forEach(t),aet=i(kUe),H6e=n(kUe,"SPAN",{});var EHt=s(H6e);net=r(EHt,"FlaxAutoModelForQuestionAnswering"),EHt.forEach(t),kUe.forEach(t),EQe=i(f),Mr=n(f,"DIV",{class:!0});var bi=s(Mr);T(sk.$$.fragment,bi),set=i(bi),_f=n(bi,"P",{});var nne=s(_f);iet=r(nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$re=n(nne,"A",{href:!0});var CHt=s($re);det=r(CHt,"from_pretrained()"),CHt.forEach(t),cet=r(nne," class method or the "),kre=n(nne,"A",{href:!0});var wHt=s(kre);fet=r(wHt,"from_config()"),wHt.forEach(t),met=r(nne,` class
method.`),nne.forEach(t),get=i(bi),lk=n(bi,"P",{});var SUe=s(lk);het=r(SUe,"This class cannot be instantiated directly using "),U6e=n(SUe,"CODE",{});var AHt=s(U6e);pet=r(AHt,"__init__()"),AHt.forEach(t),_et=r(SUe," (throws an error)."),SUe.forEach(t),uet=i(bi),Zt=n(bi,"DIV",{class:!0});var cL=s(Zt);T(ik.$$.fragment,cL),bet=i(cL),J6e=n(cL,"P",{});var LHt=s(J6e);vet=r(LHt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LHt.forEach(t),Fet=i(cL),uf=n(cL,"P",{});var sne=s(uf);Tet=r(sne,`Note:
Loading a model from its configuration file does `),Y6e=n(sne,"STRONG",{});var yHt=s(Y6e);Met=r(yHt,"not"),yHt.forEach(t),Eet=r(sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sre=n(sne,"A",{href:!0});var xHt=s(Sre);Cet=r(xHt,"from_pretrained()"),xHt.forEach(t),wet=r(sne," to load the model weights."),sne.forEach(t),Aet=i(cL),T(c6.$$.fragment,cL),cL.forEach(t),Let=i(bi),Jr=n(bi,"DIV",{class:!0});var vi=s(Jr);T(dk.$$.fragment,vi),yet=i(vi),K6e=n(vi,"P",{});var $Ht=s(K6e);xet=r($Ht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Ht.forEach(t),$et=i(vi),yn=n(vi,"P",{});var fL=s(yn);ket=r(fL,"The model class to instantiate is selected based on the "),Z6e=n(fL,"CODE",{});var kHt=s(Z6e);Set=r(kHt,"model_type"),kHt.forEach(t),Ret=r(fL,` property of the config object (either
passed as an argument or loaded from `),eAe=n(fL,"CODE",{});var SHt=s(eAe);Pet=r(SHt,"pretrained_model_name_or_path"),SHt.forEach(t),Bet=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=n(fL,"CODE",{});var RHt=s(oAe);Iet=r(RHt,"pretrained_model_name_or_path"),RHt.forEach(t),Net=r(fL,":"),fL.forEach(t),qet=i(vi),Re=n(vi,"UL",{});var Ge=s(Re);f6=n(Ge,"LI",{});var ZXe=s(f6);rAe=n(ZXe,"STRONG",{});var PHt=s(rAe);jet=r(PHt,"albert"),PHt.forEach(t),Det=r(ZXe," \u2014 "),Rre=n(ZXe,"A",{href:!0});var BHt=s(Rre);Get=r(BHt,"FlaxAlbertForQuestionAnswering"),BHt.forEach(t),Oet=r(ZXe," (ALBERT model)"),ZXe.forEach(t),Vet=i(Ge),m6=n(Ge,"LI",{});var eze=s(m6);tAe=n(eze,"STRONG",{});var IHt=s(tAe);Xet=r(IHt,"bart"),IHt.forEach(t),zet=r(eze," \u2014 "),Pre=n(eze,"A",{href:!0});var NHt=s(Pre);Wet=r(NHt,"FlaxBartForQuestionAnswering"),NHt.forEach(t),Qet=r(eze," (BART model)"),eze.forEach(t),Het=i(Ge),g6=n(Ge,"LI",{});var oze=s(g6);aAe=n(oze,"STRONG",{});var qHt=s(aAe);Uet=r(qHt,"bert"),qHt.forEach(t),Jet=r(oze," \u2014 "),Bre=n(oze,"A",{href:!0});var jHt=s(Bre);Yet=r(jHt,"FlaxBertForQuestionAnswering"),jHt.forEach(t),Ket=r(oze," (BERT model)"),oze.forEach(t),Zet=i(Ge),h6=n(Ge,"LI",{});var rze=s(h6);nAe=n(rze,"STRONG",{});var DHt=s(nAe);eot=r(DHt,"big_bird"),DHt.forEach(t),oot=r(rze," \u2014 "),Ire=n(rze,"A",{href:!0});var GHt=s(Ire);rot=r(GHt,"FlaxBigBirdForQuestionAnswering"),GHt.forEach(t),tot=r(rze," (BigBird model)"),rze.forEach(t),aot=i(Ge),p6=n(Ge,"LI",{});var tze=s(p6);sAe=n(tze,"STRONG",{});var OHt=s(sAe);not=r(OHt,"distilbert"),OHt.forEach(t),sot=r(tze," \u2014 "),Nre=n(tze,"A",{href:!0});var VHt=s(Nre);lot=r(VHt,"FlaxDistilBertForQuestionAnswering"),VHt.forEach(t),iot=r(tze," (DistilBERT model)"),tze.forEach(t),dot=i(Ge),_6=n(Ge,"LI",{});var aze=s(_6);lAe=n(aze,"STRONG",{});var XHt=s(lAe);cot=r(XHt,"electra"),XHt.forEach(t),fot=r(aze," \u2014 "),qre=n(aze,"A",{href:!0});var zHt=s(qre);mot=r(zHt,"FlaxElectraForQuestionAnswering"),zHt.forEach(t),got=r(aze," (ELECTRA model)"),aze.forEach(t),hot=i(Ge),u6=n(Ge,"LI",{});var nze=s(u6);iAe=n(nze,"STRONG",{});var WHt=s(iAe);pot=r(WHt,"mbart"),WHt.forEach(t),_ot=r(nze," \u2014 "),jre=n(nze,"A",{href:!0});var QHt=s(jre);uot=r(QHt,"FlaxMBartForQuestionAnswering"),QHt.forEach(t),bot=r(nze," (mBART model)"),nze.forEach(t),vot=i(Ge),b6=n(Ge,"LI",{});var sze=s(b6);dAe=n(sze,"STRONG",{});var HHt=s(dAe);Fot=r(HHt,"roberta"),HHt.forEach(t),Tot=r(sze," \u2014 "),Dre=n(sze,"A",{href:!0});var UHt=s(Dre);Mot=r(UHt,"FlaxRobertaForQuestionAnswering"),UHt.forEach(t),Eot=r(sze," (RoBERTa model)"),sze.forEach(t),Cot=i(Ge),v6=n(Ge,"LI",{});var lze=s(v6);cAe=n(lze,"STRONG",{});var JHt=s(cAe);wot=r(JHt,"roformer"),JHt.forEach(t),Aot=r(lze," \u2014 "),Gre=n(lze,"A",{href:!0});var YHt=s(Gre);Lot=r(YHt,"FlaxRoFormerForQuestionAnswering"),YHt.forEach(t),yot=r(lze," (RoFormer model)"),lze.forEach(t),xot=i(Ge),F6=n(Ge,"LI",{});var ize=s(F6);fAe=n(ize,"STRONG",{});var KHt=s(fAe);$ot=r(KHt,"xlm-roberta"),KHt.forEach(t),kot=r(ize," \u2014 "),Ore=n(ize,"A",{href:!0});var ZHt=s(Ore);Sot=r(ZHt,"FlaxXLMRobertaForQuestionAnswering"),ZHt.forEach(t),Rot=r(ize," (XLM-RoBERTa model)"),ize.forEach(t),Ge.forEach(t),Pot=i(vi),T(T6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),CQe=i(f),bf=n(f,"H2",{class:!0});var RUe=s(bf);M6=n(RUe,"A",{id:!0,class:!0,href:!0});var eUt=s(M6);mAe=n(eUt,"SPAN",{});var oUt=s(mAe);T(ck.$$.fragment,oUt),oUt.forEach(t),eUt.forEach(t),Bot=i(RUe),gAe=n(RUe,"SPAN",{});var rUt=s(gAe);Iot=r(rUt,"FlaxAutoModelForTokenClassification"),rUt.forEach(t),RUe.forEach(t),wQe=i(f),Er=n(f,"DIV",{class:!0});var Fi=s(Er);T(fk.$$.fragment,Fi),Not=i(Fi),vf=n(Fi,"P",{});var lne=s(vf);qot=r(lne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Vre=n(lne,"A",{href:!0});var tUt=s(Vre);jot=r(tUt,"from_pretrained()"),tUt.forEach(t),Dot=r(lne," class method or the "),Xre=n(lne,"A",{href:!0});var aUt=s(Xre);Got=r(aUt,"from_config()"),aUt.forEach(t),Oot=r(lne,` class
method.`),lne.forEach(t),Vot=i(Fi),mk=n(Fi,"P",{});var PUe=s(mk);Xot=r(PUe,"This class cannot be instantiated directly using "),hAe=n(PUe,"CODE",{});var nUt=s(hAe);zot=r(nUt,"__init__()"),nUt.forEach(t),Wot=r(PUe," (throws an error)."),PUe.forEach(t),Qot=i(Fi),ea=n(Fi,"DIV",{class:!0});var mL=s(ea);T(gk.$$.fragment,mL),Hot=i(mL),pAe=n(mL,"P",{});var sUt=s(pAe);Uot=r(sUt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sUt.forEach(t),Jot=i(mL),Ff=n(mL,"P",{});var ine=s(Ff);Yot=r(ine,`Note:
Loading a model from its configuration file does `),_Ae=n(ine,"STRONG",{});var lUt=s(_Ae);Kot=r(lUt,"not"),lUt.forEach(t),Zot=r(ine,` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=n(ine,"A",{href:!0});var iUt=s(zre);ert=r(iUt,"from_pretrained()"),iUt.forEach(t),ort=r(ine," to load the model weights."),ine.forEach(t),rrt=i(mL),T(E6.$$.fragment,mL),mL.forEach(t),trt=i(Fi),Yr=n(Fi,"DIV",{class:!0});var Ti=s(Yr);T(hk.$$.fragment,Ti),art=i(Ti),uAe=n(Ti,"P",{});var dUt=s(uAe);nrt=r(dUt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dUt.forEach(t),srt=i(Ti),xn=n(Ti,"P",{});var gL=s(xn);lrt=r(gL,"The model class to instantiate is selected based on the "),bAe=n(gL,"CODE",{});var cUt=s(bAe);irt=r(cUt,"model_type"),cUt.forEach(t),drt=r(gL,` property of the config object (either
passed as an argument or loaded from `),vAe=n(gL,"CODE",{});var fUt=s(vAe);crt=r(fUt,"pretrained_model_name_or_path"),fUt.forEach(t),frt=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FAe=n(gL,"CODE",{});var mUt=s(FAe);mrt=r(mUt,"pretrained_model_name_or_path"),mUt.forEach(t),grt=r(gL,":"),gL.forEach(t),hrt=i(Ti),Xe=n(Ti,"UL",{});var Eo=s(Xe);C6=n(Eo,"LI",{});var dze=s(C6);TAe=n(dze,"STRONG",{});var gUt=s(TAe);prt=r(gUt,"albert"),gUt.forEach(t),_rt=r(dze," \u2014 "),Wre=n(dze,"A",{href:!0});var hUt=s(Wre);urt=r(hUt,"FlaxAlbertForTokenClassification"),hUt.forEach(t),brt=r(dze," (ALBERT model)"),dze.forEach(t),vrt=i(Eo),w6=n(Eo,"LI",{});var cze=s(w6);MAe=n(cze,"STRONG",{});var pUt=s(MAe);Frt=r(pUt,"bert"),pUt.forEach(t),Trt=r(cze," \u2014 "),Qre=n(cze,"A",{href:!0});var _Ut=s(Qre);Mrt=r(_Ut,"FlaxBertForTokenClassification"),_Ut.forEach(t),Ert=r(cze," (BERT model)"),cze.forEach(t),Crt=i(Eo),A6=n(Eo,"LI",{});var fze=s(A6);EAe=n(fze,"STRONG",{});var uUt=s(EAe);wrt=r(uUt,"big_bird"),uUt.forEach(t),Art=r(fze," \u2014 "),Hre=n(fze,"A",{href:!0});var bUt=s(Hre);Lrt=r(bUt,"FlaxBigBirdForTokenClassification"),bUt.forEach(t),yrt=r(fze," (BigBird model)"),fze.forEach(t),xrt=i(Eo),L6=n(Eo,"LI",{});var mze=s(L6);CAe=n(mze,"STRONG",{});var vUt=s(CAe);$rt=r(vUt,"distilbert"),vUt.forEach(t),krt=r(mze," \u2014 "),Ure=n(mze,"A",{href:!0});var FUt=s(Ure);Srt=r(FUt,"FlaxDistilBertForTokenClassification"),FUt.forEach(t),Rrt=r(mze," (DistilBERT model)"),mze.forEach(t),Prt=i(Eo),y6=n(Eo,"LI",{});var gze=s(y6);wAe=n(gze,"STRONG",{});var TUt=s(wAe);Brt=r(TUt,"electra"),TUt.forEach(t),Irt=r(gze," \u2014 "),Jre=n(gze,"A",{href:!0});var MUt=s(Jre);Nrt=r(MUt,"FlaxElectraForTokenClassification"),MUt.forEach(t),qrt=r(gze," (ELECTRA model)"),gze.forEach(t),jrt=i(Eo),x6=n(Eo,"LI",{});var hze=s(x6);AAe=n(hze,"STRONG",{});var EUt=s(AAe);Drt=r(EUt,"roberta"),EUt.forEach(t),Grt=r(hze," \u2014 "),Yre=n(hze,"A",{href:!0});var CUt=s(Yre);Ort=r(CUt,"FlaxRobertaForTokenClassification"),CUt.forEach(t),Vrt=r(hze," (RoBERTa model)"),hze.forEach(t),Xrt=i(Eo),$6=n(Eo,"LI",{});var pze=s($6);LAe=n(pze,"STRONG",{});var wUt=s(LAe);zrt=r(wUt,"roformer"),wUt.forEach(t),Wrt=r(pze," \u2014 "),Kre=n(pze,"A",{href:!0});var AUt=s(Kre);Qrt=r(AUt,"FlaxRoFormerForTokenClassification"),AUt.forEach(t),Hrt=r(pze," (RoFormer model)"),pze.forEach(t),Urt=i(Eo),k6=n(Eo,"LI",{});var _ze=s(k6);yAe=n(_ze,"STRONG",{});var LUt=s(yAe);Jrt=r(LUt,"xlm-roberta"),LUt.forEach(t),Yrt=r(_ze," \u2014 "),Zre=n(_ze,"A",{href:!0});var yUt=s(Zre);Krt=r(yUt,"FlaxXLMRobertaForTokenClassification"),yUt.forEach(t),Zrt=r(_ze," (XLM-RoBERTa model)"),_ze.forEach(t),Eo.forEach(t),ett=i(Ti),T(S6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),AQe=i(f),Tf=n(f,"H2",{class:!0});var BUe=s(Tf);R6=n(BUe,"A",{id:!0,class:!0,href:!0});var xUt=s(R6);xAe=n(xUt,"SPAN",{});var $Ut=s(xAe);T(pk.$$.fragment,$Ut),$Ut.forEach(t),xUt.forEach(t),ott=i(BUe),$Ae=n(BUe,"SPAN",{});var kUt=s($Ae);rtt=r(kUt,"FlaxAutoModelForMultipleChoice"),kUt.forEach(t),BUe.forEach(t),LQe=i(f),Cr=n(f,"DIV",{class:!0});var Mi=s(Cr);T(_k.$$.fragment,Mi),ttt=i(Mi),Mf=n(Mi,"P",{});var dne=s(Mf);att=r(dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ete=n(dne,"A",{href:!0});var SUt=s(ete);ntt=r(SUt,"from_pretrained()"),SUt.forEach(t),stt=r(dne," class method or the "),ote=n(dne,"A",{href:!0});var RUt=s(ote);ltt=r(RUt,"from_config()"),RUt.forEach(t),itt=r(dne,` class
method.`),dne.forEach(t),dtt=i(Mi),uk=n(Mi,"P",{});var IUe=s(uk);ctt=r(IUe,"This class cannot be instantiated directly using "),kAe=n(IUe,"CODE",{});var PUt=s(kAe);ftt=r(PUt,"__init__()"),PUt.forEach(t),mtt=r(IUe," (throws an error)."),IUe.forEach(t),gtt=i(Mi),oa=n(Mi,"DIV",{class:!0});var hL=s(oa);T(bk.$$.fragment,hL),htt=i(hL),SAe=n(hL,"P",{});var BUt=s(SAe);ptt=r(BUt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),BUt.forEach(t),_tt=i(hL),Ef=n(hL,"P",{});var cne=s(Ef);utt=r(cne,`Note:
Loading a model from its configuration file does `),RAe=n(cne,"STRONG",{});var IUt=s(RAe);btt=r(IUt,"not"),IUt.forEach(t),vtt=r(cne,` load the model weights. It only affects the
model\u2019s configuration. Use `),rte=n(cne,"A",{href:!0});var NUt=s(rte);Ftt=r(NUt,"from_pretrained()"),NUt.forEach(t),Ttt=r(cne," to load the model weights."),cne.forEach(t),Mtt=i(hL),T(P6.$$.fragment,hL),hL.forEach(t),Ett=i(Mi),Kr=n(Mi,"DIV",{class:!0});var Ei=s(Kr);T(vk.$$.fragment,Ei),Ctt=i(Ei),PAe=n(Ei,"P",{});var qUt=s(PAe);wtt=r(qUt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),qUt.forEach(t),Att=i(Ei),$n=n(Ei,"P",{});var pL=s($n);Ltt=r(pL,"The model class to instantiate is selected based on the "),BAe=n(pL,"CODE",{});var jUt=s(BAe);ytt=r(jUt,"model_type"),jUt.forEach(t),xtt=r(pL,` property of the config object (either
passed as an argument or loaded from `),IAe=n(pL,"CODE",{});var DUt=s(IAe);$tt=r(DUt,"pretrained_model_name_or_path"),DUt.forEach(t),ktt=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(pL,"CODE",{});var GUt=s(NAe);Stt=r(GUt,"pretrained_model_name_or_path"),GUt.forEach(t),Rtt=r(pL,":"),pL.forEach(t),Ptt=i(Ei),ze=n(Ei,"UL",{});var Co=s(ze);B6=n(Co,"LI",{});var uze=s(B6);qAe=n(uze,"STRONG",{});var OUt=s(qAe);Btt=r(OUt,"albert"),OUt.forEach(t),Itt=r(uze," \u2014 "),tte=n(uze,"A",{href:!0});var VUt=s(tte);Ntt=r(VUt,"FlaxAlbertForMultipleChoice"),VUt.forEach(t),qtt=r(uze," (ALBERT model)"),uze.forEach(t),jtt=i(Co),I6=n(Co,"LI",{});var bze=s(I6);jAe=n(bze,"STRONG",{});var XUt=s(jAe);Dtt=r(XUt,"bert"),XUt.forEach(t),Gtt=r(bze," \u2014 "),ate=n(bze,"A",{href:!0});var zUt=s(ate);Ott=r(zUt,"FlaxBertForMultipleChoice"),zUt.forEach(t),Vtt=r(bze," (BERT model)"),bze.forEach(t),Xtt=i(Co),N6=n(Co,"LI",{});var vze=s(N6);DAe=n(vze,"STRONG",{});var WUt=s(DAe);ztt=r(WUt,"big_bird"),WUt.forEach(t),Wtt=r(vze," \u2014 "),nte=n(vze,"A",{href:!0});var QUt=s(nte);Qtt=r(QUt,"FlaxBigBirdForMultipleChoice"),QUt.forEach(t),Htt=r(vze," (BigBird model)"),vze.forEach(t),Utt=i(Co),q6=n(Co,"LI",{});var Fze=s(q6);GAe=n(Fze,"STRONG",{});var HUt=s(GAe);Jtt=r(HUt,"distilbert"),HUt.forEach(t),Ytt=r(Fze," \u2014 "),ste=n(Fze,"A",{href:!0});var UUt=s(ste);Ktt=r(UUt,"FlaxDistilBertForMultipleChoice"),UUt.forEach(t),Ztt=r(Fze," (DistilBERT model)"),Fze.forEach(t),eat=i(Co),j6=n(Co,"LI",{});var Tze=s(j6);OAe=n(Tze,"STRONG",{});var JUt=s(OAe);oat=r(JUt,"electra"),JUt.forEach(t),rat=r(Tze," \u2014 "),lte=n(Tze,"A",{href:!0});var YUt=s(lte);tat=r(YUt,"FlaxElectraForMultipleChoice"),YUt.forEach(t),aat=r(Tze," (ELECTRA model)"),Tze.forEach(t),nat=i(Co),D6=n(Co,"LI",{});var Mze=s(D6);VAe=n(Mze,"STRONG",{});var KUt=s(VAe);sat=r(KUt,"roberta"),KUt.forEach(t),lat=r(Mze," \u2014 "),ite=n(Mze,"A",{href:!0});var ZUt=s(ite);iat=r(ZUt,"FlaxRobertaForMultipleChoice"),ZUt.forEach(t),dat=r(Mze," (RoBERTa model)"),Mze.forEach(t),cat=i(Co),G6=n(Co,"LI",{});var Eze=s(G6);XAe=n(Eze,"STRONG",{});var eJt=s(XAe);fat=r(eJt,"roformer"),eJt.forEach(t),mat=r(Eze," \u2014 "),dte=n(Eze,"A",{href:!0});var oJt=s(dte);gat=r(oJt,"FlaxRoFormerForMultipleChoice"),oJt.forEach(t),hat=r(Eze," (RoFormer model)"),Eze.forEach(t),pat=i(Co),O6=n(Co,"LI",{});var Cze=s(O6);zAe=n(Cze,"STRONG",{});var rJt=s(zAe);_at=r(rJt,"xlm-roberta"),rJt.forEach(t),uat=r(Cze," \u2014 "),cte=n(Cze,"A",{href:!0});var tJt=s(cte);bat=r(tJt,"FlaxXLMRobertaForMultipleChoice"),tJt.forEach(t),vat=r(Cze," (XLM-RoBERTa model)"),Cze.forEach(t),Co.forEach(t),Fat=i(Ei),T(V6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),yQe=i(f),Cf=n(f,"H2",{class:!0});var NUe=s(Cf);X6=n(NUe,"A",{id:!0,class:!0,href:!0});var aJt=s(X6);WAe=n(aJt,"SPAN",{});var nJt=s(WAe);T(Fk.$$.fragment,nJt),nJt.forEach(t),aJt.forEach(t),Tat=i(NUe),QAe=n(NUe,"SPAN",{});var sJt=s(QAe);Mat=r(sJt,"FlaxAutoModelForNextSentencePrediction"),sJt.forEach(t),NUe.forEach(t),xQe=i(f),wr=n(f,"DIV",{class:!0});var Ci=s(wr);T(Tk.$$.fragment,Ci),Eat=i(Ci),wf=n(Ci,"P",{});var fne=s(wf);Cat=r(fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fte=n(fne,"A",{href:!0});var lJt=s(fte);wat=r(lJt,"from_pretrained()"),lJt.forEach(t),Aat=r(fne," class method or the "),mte=n(fne,"A",{href:!0});var iJt=s(mte);Lat=r(iJt,"from_config()"),iJt.forEach(t),yat=r(fne,` class
method.`),fne.forEach(t),xat=i(Ci),Mk=n(Ci,"P",{});var qUe=s(Mk);$at=r(qUe,"This class cannot be instantiated directly using "),HAe=n(qUe,"CODE",{});var dJt=s(HAe);kat=r(dJt,"__init__()"),dJt.forEach(t),Sat=r(qUe," (throws an error)."),qUe.forEach(t),Rat=i(Ci),ra=n(Ci,"DIV",{class:!0});var _L=s(ra);T(Ek.$$.fragment,_L),Pat=i(_L),UAe=n(_L,"P",{});var cJt=s(UAe);Bat=r(cJt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cJt.forEach(t),Iat=i(_L),Af=n(_L,"P",{});var mne=s(Af);Nat=r(mne,`Note:
Loading a model from its configuration file does `),JAe=n(mne,"STRONG",{});var fJt=s(JAe);qat=r(fJt,"not"),fJt.forEach(t),jat=r(mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gte=n(mne,"A",{href:!0});var mJt=s(gte);Dat=r(mJt,"from_pretrained()"),mJt.forEach(t),Gat=r(mne," to load the model weights."),mne.forEach(t),Oat=i(_L),T(z6.$$.fragment,_L),_L.forEach(t),Vat=i(Ci),Zr=n(Ci,"DIV",{class:!0});var wi=s(Zr);T(Ck.$$.fragment,wi),Xat=i(wi),YAe=n(wi,"P",{});var gJt=s(YAe);zat=r(gJt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gJt.forEach(t),Wat=i(wi),kn=n(wi,"P",{});var uL=s(kn);Qat=r(uL,"The model class to instantiate is selected based on the "),KAe=n(uL,"CODE",{});var hJt=s(KAe);Hat=r(hJt,"model_type"),hJt.forEach(t),Uat=r(uL,` property of the config object (either
passed as an argument or loaded from `),ZAe=n(uL,"CODE",{});var pJt=s(ZAe);Jat=r(pJt,"pretrained_model_name_or_path"),pJt.forEach(t),Yat=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e7e=n(uL,"CODE",{});var _Jt=s(e7e);Kat=r(_Jt,"pretrained_model_name_or_path"),_Jt.forEach(t),Zat=r(uL,":"),uL.forEach(t),ent=i(wi),o7e=n(wi,"UL",{});var uJt=s(o7e);W6=n(uJt,"LI",{});var wze=s(W6);r7e=n(wze,"STRONG",{});var bJt=s(r7e);ont=r(bJt,"bert"),bJt.forEach(t),rnt=r(wze," \u2014 "),hte=n(wze,"A",{href:!0});var vJt=s(hte);tnt=r(vJt,"FlaxBertForNextSentencePrediction"),vJt.forEach(t),ant=r(wze," (BERT model)"),wze.forEach(t),uJt.forEach(t),nnt=i(wi),T(Q6.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),$Qe=i(f),Lf=n(f,"H2",{class:!0});var jUe=s(Lf);H6=n(jUe,"A",{id:!0,class:!0,href:!0});var FJt=s(H6);t7e=n(FJt,"SPAN",{});var TJt=s(t7e);T(wk.$$.fragment,TJt),TJt.forEach(t),FJt.forEach(t),snt=i(jUe),a7e=n(jUe,"SPAN",{});var MJt=s(a7e);lnt=r(MJt,"FlaxAutoModelForImageClassification"),MJt.forEach(t),jUe.forEach(t),kQe=i(f),Ar=n(f,"DIV",{class:!0});var Ai=s(Ar);T(Ak.$$.fragment,Ai),int=i(Ai),yf=n(Ai,"P",{});var gne=s(yf);dnt=r(gne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pte=n(gne,"A",{href:!0});var EJt=s(pte);cnt=r(EJt,"from_pretrained()"),EJt.forEach(t),fnt=r(gne," class method or the "),_te=n(gne,"A",{href:!0});var CJt=s(_te);mnt=r(CJt,"from_config()"),CJt.forEach(t),gnt=r(gne,` class
method.`),gne.forEach(t),hnt=i(Ai),Lk=n(Ai,"P",{});var DUe=s(Lk);pnt=r(DUe,"This class cannot be instantiated directly using "),n7e=n(DUe,"CODE",{});var wJt=s(n7e);_nt=r(wJt,"__init__()"),wJt.forEach(t),unt=r(DUe," (throws an error)."),DUe.forEach(t),bnt=i(Ai),ta=n(Ai,"DIV",{class:!0});var bL=s(ta);T(yk.$$.fragment,bL),vnt=i(bL),s7e=n(bL,"P",{});var AJt=s(s7e);Fnt=r(AJt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AJt.forEach(t),Tnt=i(bL),xf=n(bL,"P",{});var hne=s(xf);Mnt=r(hne,`Note:
Loading a model from its configuration file does `),l7e=n(hne,"STRONG",{});var LJt=s(l7e);Ent=r(LJt,"not"),LJt.forEach(t),Cnt=r(hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ute=n(hne,"A",{href:!0});var yJt=s(ute);wnt=r(yJt,"from_pretrained()"),yJt.forEach(t),Ant=r(hne," to load the model weights."),hne.forEach(t),Lnt=i(bL),T(U6.$$.fragment,bL),bL.forEach(t),ynt=i(Ai),et=n(Ai,"DIV",{class:!0});var Li=s(et);T(xk.$$.fragment,Li),xnt=i(Li),i7e=n(Li,"P",{});var xJt=s(i7e);$nt=r(xJt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xJt.forEach(t),knt=i(Li),Sn=n(Li,"P",{});var vL=s(Sn);Snt=r(vL,"The model class to instantiate is selected based on the "),d7e=n(vL,"CODE",{});var $Jt=s(d7e);Rnt=r($Jt,"model_type"),$Jt.forEach(t),Pnt=r(vL,` property of the config object (either
passed as an argument or loaded from `),c7e=n(vL,"CODE",{});var kJt=s(c7e);Bnt=r(kJt,"pretrained_model_name_or_path"),kJt.forEach(t),Int=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(vL,"CODE",{});var SJt=s(f7e);Nnt=r(SJt,"pretrained_model_name_or_path"),SJt.forEach(t),qnt=r(vL,":"),vL.forEach(t),jnt=i(Li),$k=n(Li,"UL",{});var GUe=s($k);J6=n(GUe,"LI",{});var Aze=s(J6);m7e=n(Aze,"STRONG",{});var RJt=s(m7e);Dnt=r(RJt,"beit"),RJt.forEach(t),Gnt=r(Aze," \u2014 "),bte=n(Aze,"A",{href:!0});var PJt=s(bte);Ont=r(PJt,"FlaxBeitForImageClassification"),PJt.forEach(t),Vnt=r(Aze," (BEiT model)"),Aze.forEach(t),Xnt=i(GUe),Y6=n(GUe,"LI",{});var Lze=s(Y6);g7e=n(Lze,"STRONG",{});var BJt=s(g7e);znt=r(BJt,"vit"),BJt.forEach(t),Wnt=r(Lze," \u2014 "),vte=n(Lze,"A",{href:!0});var IJt=s(vte);Qnt=r(IJt,"FlaxViTForImageClassification"),IJt.forEach(t),Hnt=r(Lze," (ViT model)"),Lze.forEach(t),GUe.forEach(t),Unt=i(Li),T(K6.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),SQe=i(f),$f=n(f,"H2",{class:!0});var OUe=s($f);Z6=n(OUe,"A",{id:!0,class:!0,href:!0});var NJt=s(Z6);h7e=n(NJt,"SPAN",{});var qJt=s(h7e);T(kk.$$.fragment,qJt),qJt.forEach(t),NJt.forEach(t),Jnt=i(OUe),p7e=n(OUe,"SPAN",{});var jJt=s(p7e);Ynt=r(jJt,"FlaxAutoModelForVision2Seq"),jJt.forEach(t),OUe.forEach(t),RQe=i(f),Lr=n(f,"DIV",{class:!0});var yi=s(Lr);T(Sk.$$.fragment,yi),Knt=i(yi),kf=n(yi,"P",{});var pne=s(kf);Znt=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fte=n(pne,"A",{href:!0});var DJt=s(Fte);est=r(DJt,"from_pretrained()"),DJt.forEach(t),ost=r(pne," class method or the "),Tte=n(pne,"A",{href:!0});var GJt=s(Tte);rst=r(GJt,"from_config()"),GJt.forEach(t),tst=r(pne,` class
method.`),pne.forEach(t),ast=i(yi),Rk=n(yi,"P",{});var VUe=s(Rk);nst=r(VUe,"This class cannot be instantiated directly using "),_7e=n(VUe,"CODE",{});var OJt=s(_7e);sst=r(OJt,"__init__()"),OJt.forEach(t),lst=r(VUe," (throws an error)."),VUe.forEach(t),ist=i(yi),aa=n(yi,"DIV",{class:!0});var FL=s(aa);T(Pk.$$.fragment,FL),dst=i(FL),u7e=n(FL,"P",{});var VJt=s(u7e);cst=r(VJt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VJt.forEach(t),fst=i(FL),Sf=n(FL,"P",{});var _ne=s(Sf);mst=r(_ne,`Note:
Loading a model from its configuration file does `),b7e=n(_ne,"STRONG",{});var XJt=s(b7e);gst=r(XJt,"not"),XJt.forEach(t),hst=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mte=n(_ne,"A",{href:!0});var zJt=s(Mte);pst=r(zJt,"from_pretrained()"),zJt.forEach(t),_st=r(_ne," to load the model weights."),_ne.forEach(t),ust=i(FL),T(eA.$$.fragment,FL),FL.forEach(t),bst=i(yi),ot=n(yi,"DIV",{class:!0});var xi=s(ot);T(Bk.$$.fragment,xi),vst=i(xi),v7e=n(xi,"P",{});var WJt=s(v7e);Fst=r(WJt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WJt.forEach(t),Tst=i(xi),Rn=n(xi,"P",{});var TL=s(Rn);Mst=r(TL,"The model class to instantiate is selected based on the "),F7e=n(TL,"CODE",{});var QJt=s(F7e);Est=r(QJt,"model_type"),QJt.forEach(t),Cst=r(TL,` property of the config object (either
passed as an argument or loaded from `),T7e=n(TL,"CODE",{});var HJt=s(T7e);wst=r(HJt,"pretrained_model_name_or_path"),HJt.forEach(t),Ast=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M7e=n(TL,"CODE",{});var UJt=s(M7e);Lst=r(UJt,"pretrained_model_name_or_path"),UJt.forEach(t),yst=r(TL,":"),TL.forEach(t),xst=i(xi),E7e=n(xi,"UL",{});var JJt=s(E7e);oA=n(JJt,"LI",{});var yze=s(oA);C7e=n(yze,"STRONG",{});var YJt=s(C7e);$st=r(YJt,"vision-encoder-decoder"),YJt.forEach(t),kst=r(yze," \u2014 "),Ete=n(yze,"A",{href:!0});var KJt=s(Ete);Sst=r(KJt,"FlaxVisionEncoderDecoderModel"),KJt.forEach(t),Rst=r(yze," (Vision Encoder decoder model)"),yze.forEach(t),JJt.forEach(t),Pst=i(xi),T(rA.$$.fragment,xi),xi.forEach(t),yi.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(aZt)),d(m,"id","auto-classes"),d(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m,"href","#auto-classes"),d(p,"class","relative group"),d(Bn,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoConfig"),d(Nn,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoModel"),d(qn,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoTokenizer"),d(Ii,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertModel"),d(Df,"id","extending-the-auto-classes"),d(Df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Df,"href","#extending-the-auto-classes"),d(Ni,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(qi,"class","relative group"),d(fR,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(mR,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertConfig"),d(gR,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartConfig"),d(hR,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitConfig"),d(pR,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertConfig"),d(_R,"href","/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(uR,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdConfig"),d(bR,"href","/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(vR,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(FR,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(TR,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomConfig"),d(MR,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertConfig"),d(ER,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineConfig"),d(CR,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPConfig"),d(wR,"href","/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenConfig"),d(AR,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertConfig"),d(LR,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextConfig"),d(yR,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLConfig"),d(xR,"href","/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtConfig"),d($R,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(kR,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(SR,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(RR,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaConfig"),d(PR,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(BR,"href","/docs/transformers/pr_18420/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(IR,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTConfig"),d(NR,"href","/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrConfig"),d(qR,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertConfig"),d(jR,"href","/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRConfig"),d(DR,"href","/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTConfig"),d(GR,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraConfig"),d(OR,"href","/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(VR,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertConfig"),d(XR,"href","/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaConfig"),d(zR,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetConfig"),d(WR,"href","/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTConfig"),d(QR,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelConfig"),d(HR,"href","/docs/transformers/pr_18420/en/model_doc/glpn#transformers.GLPNConfig"),d(UR,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Config"),d(JR,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(YR,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(KR,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJConfig"),d(ZR,"href","/docs/transformers/pr_18420/en/model_doc/groupvit#transformers.GroupViTConfig"),d(eP,"href","/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertConfig"),d(oP,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertConfig"),d(rP,"href","/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(tP,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(aP,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(nP,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(sP,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDConfig"),d(lP,"href","/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitConfig"),d(iP,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerConfig"),d(dP,"href","/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Config"),d(cP,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeConfig"),d(fP,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertConfig"),d(mP,"href","/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Config"),d(gP,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianConfig"),d(hP,"href","/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(pP,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartConfig"),d(_P,"href","/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTConfig"),d(uP,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(bP,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(vP,"href","/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(FP,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetConfig"),d(TP,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Config"),d(MP,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpConfig"),d(EP,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaConfig"),d(CP,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(wP,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(AP,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTConfig"),d(LP,"href","/docs/transformers/pr_18420/en/model_doc/owlvit#transformers.OwlViTConfig"),d(yP,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusConfig"),d(xP,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverConfig"),d($P,"href","/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartConfig"),d(kP,"href","/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(SP,"href","/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(RP,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(PP,"href","/docs/transformers/pr_18420/en/model_doc/rag#transformers.RagConfig"),d(BP,"href","/docs/transformers/pr_18420/en/model_doc/realm#transformers.RealmConfig"),d(IP,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerConfig"),d(NP,"href","/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetConfig"),d(qP,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertConfig"),d(jP,"href","/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetConfig"),d(DP,"href","/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertConfig"),d(GP,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaConfig"),d(OP,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerConfig"),d(VP,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerConfig"),d(XP,"href","/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWConfig"),d(zP,"href","/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDConfig"),d(WP,"href","/docs/transformers/pr_18420/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(QP,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(HP,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(UP,"href","/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterConfig"),d(JP,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(YP,"href","/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinConfig"),d(KP,"href","/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2Config"),d(ZP,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Config"),d(eB,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasConfig"),d(oB,"href","/docs/transformers/pr_18420/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(rB,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(tB,"href","/docs/transformers/pr_18420/en/model_doc/trocr#transformers.TrOCRConfig"),d(aB,"href","/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(nB,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(sB,"href","/docs/transformers/pr_18420/en/model_doc/van#transformers.VanConfig"),d(lB,"href","/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltConfig"),d(iB,"href","/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(dB,"href","/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(cB,"href","/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(fB,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTConfig"),d(mB,"href","/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(gB,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(hB,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(pB,"href","/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMConfig"),d(_B,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMConfig"),d(uB,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMConfig"),d(bB,"href","/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(vB,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(FB,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(TB,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetConfig"),d(MB,"href","/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosConfig"),d(EB,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(th,"id","transformers.AutoTokenizer"),d(th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(th,"href","#transformers.AutoTokenizer"),d(Di,"class","relative group"),d(CB,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(wB,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertTokenizer"),d(AB,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(LB,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartTokenizer"),d(yB,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartTokenizerFast"),d(xB,"href","/docs/transformers/pr_18420/en/model_doc/barthez#transformers.BarthezTokenizer"),d($B,"href","/docs/transformers/pr_18420/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(kB,"href","/docs/transformers/pr_18420/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(SB,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizer"),d(RB,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizerFast"),d(PB,"href","/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(BB,"href","/docs/transformers/pr_18420/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(IB,"href","/docs/transformers/pr_18420/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(NB,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(qB,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(jB,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(DB,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(GB,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(OB,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(VB,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(XB,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(zB,"href","/docs/transformers/pr_18420/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(WB,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertTokenizer"),d(QB,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(HB,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineTokenizer"),d(UB,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPTokenizer"),d(JB,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(YB,"href","/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(KB,"href","/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(ZB,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(eI,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(oI,"href","/docs/transformers/pr_18420/en/model_doc/cpm#transformers.CpmTokenizer"),d(rI,"href","/docs/transformers/pr_18420/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(tI,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(aI,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizer"),d(nI,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(sI,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaTokenizer"),d(lI,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(iI,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(dI,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(cI,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(fI,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(mI,"href","/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(gI,"href","/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(hI,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraTokenizer"),d(pI,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(_I,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(uI,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetTokenizer"),d(bI,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(vI,"href","/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(FI,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelTokenizer"),d(TI,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(MI,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(EI,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(CI,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wI,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(AI,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(LI,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(yI,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(xI,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPTokenizer"),d($I,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(kI,"href","/docs/transformers/pr_18420/en/model_doc/herbert#transformers.HerbertTokenizer"),d(SI,"href","/docs/transformers/pr_18420/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(RI,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PI,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizer"),d(BI,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(II,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(NI,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(qI,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(jI,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(DI,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(GI,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d(OI,"href","/docs/transformers/pr_18420/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(VI,"href","/docs/transformers/pr_18420/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(XI,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDTokenizer"),d(zI,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDTokenizerFast"),d(WI,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerTokenizer"),d(QI,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(HI,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.T5Tokenizer"),d(UI,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.T5TokenizerFast"),d(JI,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeTokenizer"),d(YI,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(KI,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(ZI,"href","/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(eN,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianTokenizer"),d(oN,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartTokenizer"),d(rN,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(tN,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(aN,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(nN,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizer"),d(sN,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizerFast"),d(lN,"href","/docs/transformers/pr_18420/en/model_doc/mluke#transformers.MLukeTokenizer"),d(iN,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(dN,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(cN,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(fN,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(mN,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.T5Tokenizer"),d(gN,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.T5TokenizerFast"),d(hN,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpTokenizer"),d(pN,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(_N,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizer"),d(uN,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizerFast"),d(bN,"href","/docs/transformers/pr_18420/en/model_doc/nllb#transformers.NllbTokenizer"),d(vN,"href","/docs/transformers/pr_18420/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(FN,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertTokenizer"),d(TN,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(MN,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(EN,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(CN,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wN,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPTokenizer"),d(AN,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(LN,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(yN,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xN,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d($N,"href","/docs/transformers/pr_18420/en/model_doc/phobert#transformers.PhobertTokenizer"),d(kN,"href","/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartTokenizer"),d(SN,"href","/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(RN,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizer"),d(PN,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizerFast"),d(BN,"href","/docs/transformers/pr_18420/en/model_doc/rag#transformers.RagTokenizer"),d(IN,"href","/docs/transformers/pr_18420/en/model_doc/realm#transformers.RealmTokenizer"),d(NN,"href","/docs/transformers/pr_18420/en/model_doc/realm#transformers.RealmTokenizerFast"),d(qN,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerTokenizer"),d(jN,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(DN,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertTokenizer"),d(GN,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(ON,"href","/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(VN,"href","/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(XN,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zN,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(WN,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(QN,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(HN,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(UN,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(JN,"href","/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterTokenizer"),d(YN,"href","/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(KN,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(ZN,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(eq,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.T5Tokenizer"),d(oq,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rq,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasTokenizer"),d(tq,"href","/docs/transformers/pr_18420/en/model_doc/tapex#transformers.TapexTokenizer"),d(aq,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(nq,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizer"),d(sq,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizerFast"),d(lq,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizer"),d(iq,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertTokenizerFast"),d(dq,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(cq,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(fq,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mq,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gq,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hq,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMTokenizer"),d(pq,"href","/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(_q,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(uq,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(bq,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizer"),d(vq,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Fq,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(Tq,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(Mq,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertTokenizer"),d(Eq,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoFeatureExtractor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoFeatureExtractor"),d(Gi,"class","relative group"),d(Cq,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(wq,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(Aq,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Lq,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(yq,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(xq,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($q,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(kq,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Sq,"href","/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Rq,"href","/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Pq,"href","/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(Bq,"href","/docs/transformers/pr_18420/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Iq,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(Nq,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(qq,"href","/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(jq,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(Dq,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(Gq,"href","/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitFeatureExtractor"),d(Oq,"href","/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(Vq,"href","/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Xq,"href","/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(zq,"href","/docs/transformers/pr_18420/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Wq,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Qq,"href","/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Hq,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Uq,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Jq,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(Yq,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Kq,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Zq,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ej,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oj,"href","/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(rj,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(tj,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(aj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(nj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(sj,"href","/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wp,"id","transformers.AutoProcessor"),d(wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wp,"href","#transformers.AutoProcessor"),d(Oi,"class","relative group"),d(lj,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(ij,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPProcessor"),d(dj,"href","/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaProcessor"),d(cj,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPProcessor"),d(fj,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(mj,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(gj,"href","/docs/transformers/pr_18420/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(hj,"href","/docs/transformers/pr_18420/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(pj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(_j,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(uj,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(bj,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(vj,"href","/docs/transformers/pr_18420/en/model_doc/trocr#transformers.TrOCRProcessor"),d(Fj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Tj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Mj,"href","/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltProcessor"),d(Ej,"href","/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(Cj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(wj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Aj,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hp,"id","transformers.AutoModel"),d(Hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hp,"href","#transformers.AutoModel"),d(Xi,"class","relative group"),d(Lj,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yj,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xj,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($j,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertModel"),d(kj,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartModel"),d(Sj,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitModel"),d(Rj,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertModel"),d(Pj,"href","/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Bj,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdModel"),d(Ij,"href","/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Nj,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(qj,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(jj,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomModel"),d(Dj,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertModel"),d(Gj,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineModel"),d(Oj,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.CLIPModel"),d(Vj,"href","/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenModel"),d(Xj,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertModel"),d(zj,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextModel"),d(Wj,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLModel"),d(Qj,"href","/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtModel"),d(Hj,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Uj,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Jj,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(Yj,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaModel"),d(Kj,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Zj,"href","/docs/transformers/pr_18420/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(eD,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTModel"),d(oD,"href","/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrModel"),d(rD,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertModel"),d(tD,"href","/docs/transformers/pr_18420/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(aD,"href","/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTModel"),d(nD,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraModel"),d(sD,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertModel"),d(lD,"href","/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaModel"),d(iD,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetModel"),d(dD,"href","/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTModel"),d(cD,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelModel"),d(fD,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelBaseModel"),d(mD,"href","/docs/transformers/pr_18420/en/model_doc/glpn#transformers.GLPNModel"),d(gD,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2Model"),d(hD,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(pD,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(_D,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJModel"),d(uD,"href","/docs/transformers/pr_18420/en/model_doc/groupvit#transformers.GroupViTModel"),d(bD,"href","/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertModel"),d(vD,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertModel"),d(FD,"href","/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(TD,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(MD,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(ED,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(CD,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDModel"),d(wD,"href","/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitModel"),d(AD,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerModel"),d(LD,"href","/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5Model"),d(yD,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeModel"),d(xD,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertModel"),d($D,"href","/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Model"),d(kD,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianModel"),d(SD,"href","/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerModel"),d(RD,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartModel"),d(PD,"href","/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTModel"),d(BD,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(ID,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertModel"),d(ND,"href","/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTModel"),d(qD,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetModel"),d(jD,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5Model"),d(DD,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpModel"),d(GD,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaModel"),d(OD,"href","/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100Model"),d(VD,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerModel"),d(XD,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(zD,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTModel"),d(WD,"href","/docs/transformers/pr_18420/en/model_doc/owlvit#transformers.OwlViTModel"),d(QD,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusModel"),d(HD,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverModel"),d(UD,"href","/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartModel"),d(JD,"href","/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerModel"),d(YD,"href","/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(KD,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertModel"),d(ZD,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerModel"),d(eG,"href","/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetModel"),d(oG,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertModel"),d(rG,"href","/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetModel"),d(tG,"href","/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertModel"),d(aG,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaModel"),d(nG,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerModel"),d(sG,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerModel"),d(lG,"href","/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWModel"),d(iG,"href","/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDModel"),d(dG,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(cG,"href","/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterModel"),d(fG,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(mG,"href","/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinModel"),d(gG,"href","/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2Model"),d(hG,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5Model"),d(pG,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasModel"),d(_G,"href","/docs/transformers/pr_18420/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(uG,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(bG,"href","/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechModel"),d(vG,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(FG,"href","/docs/transformers/pr_18420/en/model_doc/van#transformers.VanModel"),d(TG,"href","/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltModel"),d(MG,"href","/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(EG,"href","/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertModel"),d(CG,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTModel"),d(wG,"href","/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(AG,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(LG,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(yG,"href","/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMModel"),d(xG,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMModel"),d($G,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMModel"),d(kG,"href","/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(SG,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(RG,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(PG,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetModel"),d(BG,"href","/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosModel"),d(IG,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t2,"id","transformers.AutoModelForPreTraining"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForPreTraining"),d(Qi,"class","relative group"),d(NG,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DG,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForPreTraining"),d(GG,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(OG,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForPreTraining"),d(VG,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(XG,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForCausalLM"),d(zG,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(WG,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(QG,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(HG,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(UG,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(JG,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(YG,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForPreTraining"),d(KG,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(ZG,"href","/docs/transformers/pr_18420/en/model_doc/flava#transformers.FlavaForPreTraining"),d(eO,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForPreTraining"),d(oO,"href","/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(rO,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(tO,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(aO,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(nO,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(sO,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(lO,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForMaskedLM"),d(iO,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(dO,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(cO,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(fO,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(mO,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(gO,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(hO,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(pO,"href","/docs/transformers/pr_18420/en/model_doc/retribert#transformers.RetriBertModel"),d(_O,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(uO,"href","/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(bO,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(vO,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(FO,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(TO,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(MO,"href","/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(EO,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(CO,"href","/docs/transformers/pr_18420/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(wO,"href","/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(AO,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(LO,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(yO,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(xO,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d($O,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(kO,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z2,"id","transformers.AutoModelForCausalLM"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForCausalLM"),d(Ji,"class","relative group"),d(SO,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RO,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PO,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BO,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForCausalLM"),d(IO,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertLMHeadModel"),d(NO,"href","/docs/transformers/pr_18420/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(qO,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(jO,"href","/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(DO,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(GO,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(OO,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForCausalLM"),d(VO,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(XO,"href","/docs/transformers/pr_18420/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d(zO,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(WO,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(QO,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForCausalLM"),d(HO,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(UO,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(JO,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(YO,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(KO,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianForCausalLM"),d(ZO,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForCausalLM"),d(eV,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(oV,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForCausalLM"),d(rV,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(tV,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTForCausalLM"),d(aV,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(nV,"href","/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(sV,"href","/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(lV,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(iV,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(dV,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(cV,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(fV,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(mV,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(gV,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(hV,"href","/docs/transformers/pr_18420/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(pV,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(_V,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(uV,"href","/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(bV,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(vV,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(FV,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V1,"id","transformers.AutoModelForMaskedLM"),d(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V1,"href","#transformers.AutoModelForMaskedLM"),d(Zi,"class","relative group"),d(TV,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MV,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EV,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CV,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(wV,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForMaskedLM"),d(LV,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(yV,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(xV,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d($V,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(kV,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(RV,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(PV,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(BV,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(IV,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(NV,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(qV,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(jV,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(DV,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(GV,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForMaskedLM"),d(OV,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(XV,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(zV,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WV,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(QV,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(HV,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(UV,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(JV,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(YV,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(KV,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(ZV,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eX,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oX,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rX,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tX,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aX,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nX,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sX,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k4,"id","transformers.AutoModelForSeq2SeqLM"),d(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k4,"href","#transformers.AutoModelForSeq2SeqLM"),d(rd,"class","relative group"),d(lX,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iX,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dX,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cX,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(pX,"href","/docs/transformers/pr_18420/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_18420/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(vX,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.MarianMTModel"),d(FX,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(TX,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(MX,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(EX,"href","/docs/transformers/pr_18420/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(CX,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(wX,"href","/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(AX,"href","/docs/transformers/pr_18420/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(LX,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(yX,"href","/docs/transformers/pr_18420/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eb,"id","transformers.AutoModelForSequenceClassification"),d(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eb,"href","#transformers.AutoModelForSequenceClassification"),d(nd,"class","relative group"),d(xX,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($X,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kX,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SX,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForSequenceClassification"),d(PX,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(IX,"href","/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(NX,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(qX,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(DX,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(OX,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(VX,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(XX,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(zX,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(QX,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(HX,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(UX,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(JX,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(YX,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(KX,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(oz,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(rz,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(tz,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDForSequenceClassification"),d(az,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nz,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForSequenceClassification"),d(sz,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(lz,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(cz,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(fz,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(mz,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(gz,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(hz,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(pz,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(_z,"href","/docs/transformers/pr_18420/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(uz,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(bz,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(vz,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(wz,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Az,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(yz,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(xz,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rv,"id","transformers.AutoModelForMultipleChoice"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.AutoModelForMultipleChoice"),d(id,"class","relative group"),d($z,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kz,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sz,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rz,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(qz,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(zz,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(eW,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(oW,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(rW,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(tW,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(aW,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(nW,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(sW,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(lW,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(iW,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(dW,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nv,"id","transformers.AutoModelForNextSentencePrediction"),d(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nv,"href","#transformers.AutoModelForNextSentencePrediction"),d(fd,"class","relative group"),d(cW,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fW,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mW,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gW,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hW,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(pW,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(_W,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(uW,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(bW,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qv,"id","transformers.AutoModelForTokenClassification"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.AutoModelForTokenClassification"),d(hd,"class","relative group"),d(vW,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FW,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TW,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MW,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(EW,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForTokenClassification"),d(CW,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(wW,"href","/docs/transformers/pr_18420/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(AW,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(LW,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForTokenClassification"),d(yW,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(xW,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d($W,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(kW,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(SW,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(RW,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(PW,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(BW,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(IW,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(NW,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(qW,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(jW,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(DW,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(GW,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(OW,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(VW,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForTokenClassification"),d(XW,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(zW,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(WW,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(QW,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d(HW,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(UW,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(JW,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(YW,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(KW,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ZW,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(oQ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(tQ,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(aQ,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P0,"id","transformers.AutoModelForQuestionAnswering"),d(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P0,"href","#transformers.AutoModelForQuestionAnswering"),d(ud,"class","relative group"),d(nQ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sQ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lQ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iQ,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_18420/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_18420/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(MQ,"href","/docs/transformers/pr_18420/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_18420/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_18420/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_18420/en/model_doc/luke#transformers.LukeForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_18420/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_18420/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(NQ,"href","/docs/transformers/pr_18420/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_18420/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_18420/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(DQ,"href","/docs/transformers/pr_18420/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(OQ,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(VQ,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(XQ,"href","/docs/transformers/pr_18420/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(zQ,"href","/docs/transformers/pr_18420/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(WQ,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(QQ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(HQ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(UQ,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(JQ,"href","/docs/transformers/pr_18420/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LF,"id","transformers.AutoModelForTableQuestionAnswering"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Fd,"class","relative group"),d(YQ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KQ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZQ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eH,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SF,"id","transformers.AutoModelForImageClassification"),d(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SF,"href","#transformers.AutoModelForImageClassification"),d(Ed,"class","relative group"),d(oH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aH,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitForImageClassification"),d(nH,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(sH,"href","/docs/transformers/pr_18420/en/model_doc/cvt#transformers.CvtForImageClassification"),d(lH,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(iH,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTForImageClassification"),d(dH,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(cH,"href","/docs/transformers/pr_18420/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(fH,"href","/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitForImageClassification"),d(mH,"href","/docs/transformers/pr_18420/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(gH,"href","/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(hH,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(pH,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(_H,"href","/docs/transformers/pr_18420/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(uH,"href","/docs/transformers/pr_18420/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(bH,"href","/docs/transformers/pr_18420/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(vH,"href","/docs/transformers/pr_18420/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(FH,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(TH,"href","/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinForImageClassification"),d(MH,"href","/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),d(EH,"href","/docs/transformers/pr_18420/en/model_doc/van#transformers.VanForImageClassification"),d(CH,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JF,"id","transformers.AutoModelForVision2Seq"),d(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JF,"href","#transformers.AutoModelForVision2Seq"),d(Ad,"class","relative group"),d(wH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yH,"href","/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oT,"id","transformers.AutoModelForVisualQuestionAnswering"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(xd,"class","relative group"),d(xH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($H,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SH,"href","/docs/transformers/pr_18420/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sT,"id","transformers.AutoModelForAudioClassification"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.AutoModelForAudioClassification"),d(Sd,"class","relative group"),d(RH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IH,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(NH,"href","/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(qH,"href","/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(jH,"href","/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(DH,"href","/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(GH,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(OH,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(VH,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(XH,"href","/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vT,"id","transformers.AutoModelForAudioFrameClassification"),d(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vT,"href","#transformers.AutoModelForAudioFrameClassification"),d(Bd,"class","relative group"),d(zH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HH,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(UH,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(JH,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(YH,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(KH,"href","/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yT,"id","transformers.AutoModelForCTC"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.AutoModelForCTC"),d(qd,"class","relative group"),d(ZH,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rU,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(tU,"href","/docs/transformers/pr_18420/en/model_doc/hubert#transformers.HubertForCTC"),d(aU,"href","/docs/transformers/pr_18420/en/model_doc/mctct#transformers.MCTCTForCTC"),d(nU,"href","/docs/transformers/pr_18420/en/model_doc/sew#transformers.SEWForCTC"),d(sU,"href","/docs/transformers/pr_18420/en/model_doc/sew-d#transformers.SEWDForCTC"),d(lU,"href","/docs/transformers/pr_18420/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(iU,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(dU,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(cU,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(fU,"href","/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Gd,"class","relative group"),d(mU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pU,"href","/docs/transformers/pr_18420/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(_U,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HT,"id","transformers.AutoModelForAudioXVector"),d(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HT,"href","#transformers.AutoModelForAudioXVector"),d(Xd,"class","relative group"),d(uU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FU,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(TU,"href","/docs/transformers/pr_18420/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(MU,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(EU,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(CU,"href","/docs/transformers/pr_18420/en/model_doc/wavlm#transformers.WavLMForXVector"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t8,"id","transformers.AutoModelForMaskedImageModeling"),d(t8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t8,"href","#transformers.AutoModelForMaskedImageModeling"),d(Qd,"class","relative group"),d(wU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yU,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(xU,"href","/docs/transformers/pr_18420/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d($U,"href","/docs/transformers/pr_18420/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),d(kU,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f8,"id","transformers.AutoModelForObjectDetection"),d(f8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f8,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(SU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BU,"href","/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrForObjectDetection"),d(IU,"href","/docs/transformers/pr_18420/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u8,"id","transformers.AutoModelForImageSegmentation"),d(u8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u8,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(NU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DU,"href","/docs/transformers/pr_18420/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M8,"id","transformers.AutoModelForSemanticSegmentation"),d(M8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M8,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(GU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XU,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(zU,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(WU,"href","/docs/transformers/pr_18420/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(QU,"href","/docs/transformers/pr_18420/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(HU,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k8,"id","transformers.AutoModelForInstanceSegmentation"),d(k8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k8,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(UU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KU,"href","/docs/transformers/pr_18420/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I8,"id","transformers.TFAutoModel"),d(I8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I8,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(ZU,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eJ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oJ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rJ,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertModel"),d(tJ,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.TFBartModel"),d(aJ,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertModel"),d(nJ,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(sJ,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(lJ,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertModel"),d(iJ,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.TFCLIPModel"),d(dJ,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertModel"),d(cJ,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.TFConvNextModel"),d(fJ,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLModel"),d(mJ,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(gJ,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaModel"),d(hJ,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(pJ,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.TFDeiTModel"),d(_J,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(uJ,"href","/docs/transformers/pr_18420/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(bJ,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraModel"),d(vJ,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(FJ,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelModel"),d(TJ,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(MJ,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2Model"),d(EJ,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJModel"),d(CJ,"href","/docs/transformers/pr_18420/en/model_doc/hubert#transformers.TFHubertModel"),d(wJ,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(AJ,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.TFLEDModel"),d(LJ,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerModel"),d(yJ,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.TFLxmertModel"),d(xJ,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.TFMarianModel"),d($J,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.TFMBartModel"),d(kJ,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(SJ,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetModel"),d(RJ,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.TFMT5Model"),d(PJ,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(BJ,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.TFOPTModel"),d(IJ,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.TFPegasusModel"),d(NJ,"href","/docs/transformers/pr_18420/en/model_doc/regnet#transformers.TFRegNetModel"),d(qJ,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertModel"),d(jJ,"href","/docs/transformers/pr_18420/en/model_doc/resnet#transformers.TFResNetModel"),d(DJ,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaModel"),d(GJ,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerModel"),d(OJ,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.TFSegformerModel"),d(VJ,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(XJ,"href","/docs/transformers/pr_18420/en/model_doc/swin#transformers.TFSwinModel"),d(zJ,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.TFT5Model"),d(WJ,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasModel"),d(QJ,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(HJ,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.TFViTModel"),d(UJ,"href","/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(JJ,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(YJ,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMModel"),d(KJ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(ZJ,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BM,"id","transformers.TFAutoModelForPreTraining"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.TFAutoModelForPreTraining"),d(fc,"class","relative group"),d(eY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tY,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(aY,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(nY,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForPreTraining"),d(sY,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(lY,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(iY,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(dY,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(cY,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(fY,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(mY,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(gY,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(hY,"href","/docs/transformers/pr_18420/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(pY,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(_Y,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(uY,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(bY,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(vY,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(FY,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(TY,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(MY,"href","/docs/transformers/pr_18420/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(EY,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(CY,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(wY,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lE,"id","transformers.TFAutoModelForCausalLM"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(AY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xY,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertLMHeadModel"),d($Y,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(kY,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(SY,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(RY,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(PY,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BY,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(IY,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(NY,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(qY,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(jY,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(DY,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(GY,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EE,"id","transformers.TFAutoModelForImageClassification"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.TFAutoModelForImageClassification"),d(uc,"class","relative group"),d(OY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XY,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zY,"href","/docs/transformers/pr_18420/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(WY,"href","/docs/transformers/pr_18420/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(QY,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(HY,"href","/docs/transformers/pr_18420/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(UY,"href","/docs/transformers/pr_18420/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(JY,"href","/docs/transformers/pr_18420/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d(YY,"href","/docs/transformers/pr_18420/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(KY,"href","/docs/transformers/pr_18420/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(ZY,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RE,"id","transformers.TFAutoModelForMaskedLM"),d(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RE,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(eK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tK,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(aK,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(nK,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(sK,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(lK,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(iK,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(dK,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(cK,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(fK,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(mK,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(gK,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(hK,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(pK,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(_K,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(uK,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(bK,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(vK,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(FK,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(TK,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(MK,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rC,"id","transformers.TFAutoModelForSeq2SeqLM"),d(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rC,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(EK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AK,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(LK,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(yK,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(xK,"href","/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d($K,"href","/docs/transformers/pr_18420/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(kK,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.TFMarianMTModel"),d(SK,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(RK,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(PK,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(BK,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pC,"id","transformers.TFAutoModelForSequenceClassification"),d(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pC,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(IK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qK,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jK,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(DK,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(GK,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(OK,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(VK,"href","/docs/transformers/pr_18420/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(XK,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(zK,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(WK,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(QK,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(HK,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(UK,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(JK,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(YK,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(KK,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(ZK,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(eZ,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(oZ,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(rZ,"href","/docs/transformers/pr_18420/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(tZ,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(aZ,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(nZ,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(sZ,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(lZ,"href","/docs/transformers/pr_18420/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(iZ,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(dZ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(cZ,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XC,"id","transformers.TFAutoModelForMultipleChoice"),d(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XC,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(fZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hZ,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(pZ,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(_Z,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(uZ,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(bZ,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(vZ,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(FZ,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(TZ,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(MZ,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(EZ,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(CZ,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(wZ,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(AZ,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(LZ,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(yZ,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(xZ,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d($Z,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c5,"id","transformers.TFAutoModelForNextSentencePrediction"),d(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c5,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(kZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PZ,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(BZ,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p5,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(IZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jZ,"href","/docs/transformers/pr_18420/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v5,"id","transformers.TFAutoModelForTokenClassification"),d(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v5,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(DZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OZ,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VZ,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(XZ,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(zZ,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(WZ,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(QZ,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(HZ,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(UZ,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(JZ,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(YZ,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(KZ,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(ZZ,"href","/docs/transformers/pr_18420/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(eee,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(oee,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(ree,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(tee,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(aee,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(nee,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(see,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(lee,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(iee,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O5,"id","transformers.TFAutoModelForQuestionAnswering"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(dee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mee,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(gee,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(hee,"href","/docs/transformers/pr_18420/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(pee,"href","/docs/transformers/pr_18420/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(_ee,"href","/docs/transformers/pr_18420/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(uee,"href","/docs/transformers/pr_18420/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(bee,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(vee,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Fee,"href","/docs/transformers/pr_18420/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Tee,"href","/docs/transformers/pr_18420/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Mee,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(Eee,"href","/docs/transformers/pr_18420/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(Cee,"href","/docs/transformers/pr_18420/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(wee,"href","/docs/transformers/pr_18420/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(Aee,"href","/docs/transformers/pr_18420/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(Lee,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(yee,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(xee,"href","/docs/transformers/pr_18420/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d($ee,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(kee,"href","/docs/transformers/pr_18420/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f3,"id","transformers.TFAutoModelForVision2Seq"),d(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f3,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(See,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ree,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Pee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bee,"href","/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(Iee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jee,"href","/docs/transformers/pr_18420/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v3,"id","transformers.FlaxAutoModel"),d(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v3,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(Dee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Oee,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vee,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Xee,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartModel"),d(zee,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.FlaxBeitModel"),d(Wee,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertModel"),d(Qee,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(Hee,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(Uee,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(Jee,"href","/docs/transformers/pr_18420/en/model_doc/clip#transformers.FlaxCLIPModel"),d(Yee,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(Kee,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraModel"),d(Zee,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(eoe,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(ooe,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(roe,"href","/docs/transformers/pr_18420/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(toe,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.FlaxMarianModel"),d(aoe,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartModel"),d(noe,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.FlaxMT5Model"),d(soe,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.FlaxOPTModel"),d(loe,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(ioe,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(doe,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(coe,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.FlaxT5Model"),d(foe,"href","/docs/transformers/pr_18420/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(moe,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.FlaxViTModel"),d(goe,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hoe,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(poe,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U3,"id","transformers.FlaxAutoModelForCausalLM"),d(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U3,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(_oe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uoe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(boe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(voe,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(Foe,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(Toe,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(Moe,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(Eoe,"href","/docs/transformers/pr_18420/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(Coe,"href","/docs/transformers/pr_18420/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(woe,"href","/docs/transformers/pr_18420/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(Aoe,"href","/docs/transformers/pr_18420/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(Loe,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(yoe,"href","/docs/transformers/pr_18420/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iw,"id","transformers.FlaxAutoModelForPreTraining"),d(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iw,"href","#transformers.FlaxAutoModelForPreTraining"),d(rf,"class","relative group"),d(xoe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($oe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(koe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Soe,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(Roe,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Poe,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(Boe,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(Ioe,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(Noe,"href","/docs/transformers/pr_18420/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(qoe,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(joe,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Doe,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Goe,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Ooe,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Voe,"href","/docs/transformers/pr_18420/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Xoe,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cw,"id","transformers.FlaxAutoModelForMaskedLM"),d(Cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cw,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nf,"class","relative group"),d(zoe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Woe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qoe,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hoe,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(Uoe,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Joe,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(Yoe,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(Koe,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Zoe,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(ere,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ore,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(rre,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(tre,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(df,"class","relative group"),d(are,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lre,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(ire,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(dre,"href","/docs/transformers/pr_18420/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(cre,"href","/docs/transformers/pr_18420/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(fre,"href","/docs/transformers/pr_18420/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(mre,"href","/docs/transformers/pr_18420/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(gre,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(hre,"href","/docs/transformers/pr_18420/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(pre,"href","/docs/transformers/pr_18420/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(_re,"href","/docs/transformers/pr_18420/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jw,"id","transformers.FlaxAutoModelForSequenceClassification"),d(Jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jw,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mf,"class","relative group"),d(ure,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fre,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(Tre,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(Mre,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(Ere,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(Cre,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(wre,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(Are,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(Lre,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(yre,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(xre,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d6,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d6,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pf,"class","relative group"),d($re,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rre,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(Pre,"href","/docs/transformers/pr_18420/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Bre,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Ire,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Nre,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(qre,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(jre,"href","/docs/transformers/pr_18420/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(Dre,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Gre,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Ore,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M6,"id","transformers.FlaxAutoModelForTokenClassification"),d(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M6,"href","#transformers.FlaxAutoModelForTokenClassification"),d(bf,"class","relative group"),d(Vre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zre,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wre,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Qre,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Hre,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(Ure,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Jre,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Yre,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Kre,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Zre,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R6,"id","transformers.FlaxAutoModelForMultipleChoice"),d(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R6,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Tf,"class","relative group"),d(ete,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ote,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tte,"href","/docs/transformers/pr_18420/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(ate,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(nte,"href","/docs/transformers/pr_18420/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(ste,"href","/docs/transformers/pr_18420/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(lte,"href","/docs/transformers/pr_18420/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(ite,"href","/docs/transformers/pr_18420/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(dte,"href","/docs/transformers/pr_18420/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(cte,"href","/docs/transformers/pr_18420/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(X6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Cf,"class","relative group"),d(fte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hte,"href","/docs/transformers/pr_18420/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H6,"id","transformers.FlaxAutoModelForImageClassification"),d(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H6,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lf,"class","relative group"),d(pte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_te,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ute,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bte,"href","/docs/transformers/pr_18420/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(vte,"href","/docs/transformers/pr_18420/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z6,"id","transformers.FlaxAutoModelForVision2Seq"),d(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z6,"href","#transformers.FlaxAutoModelForVision2Seq"),d($f,"class","relative group"),d(Fte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mte,"href","/docs/transformers/pr_18420/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ete,"href","/docs/transformers/pr_18420/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(c,_,null),e(p,h),e(p,wo),e(wo,$i),b(f,If,u),b(f,lt,u),e(lt,ki),e(lt,Si),e(Si,ML),e(lt,Nf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ri),e(Qe,Bn),e(Bn,EL),e(Qe,In),e(Qe,Nn),e(Nn,CL),e(Qe,Pi),e(Qe,qn),e(qn,wL),e(Qe,Bi),b(f,qf,u),M(Sa,f,u),b(f,He,u),b(f,Ae,u),e(Ae,nR),e(Ae,Ii),e(Ii,sR),e(Ae,lR),b(f,Ao,u),b(f,Ra,u),e(Ra,iR),e(Ra,jf),e(jf,dR),e(Ra,XUe),b(f,xze,u),b(f,Ni,u),e(Ni,Df),e(Df,une),M(AL,une,null),e(Ni,zUe),e(Ni,bne),e(bne,WUe),b(f,$ze,u),b(f,jn,u),e(jn,QUe),e(jn,vne),e(vne,HUe),e(jn,UUe),e(jn,Fne),e(Fne,JUe),e(jn,YUe),b(f,kze,u),M(LL,f,u),b(f,Sze,u),b(f,cR,u),e(cR,KUe),b(f,Rze,u),M(Gf,f,u),b(f,Pze,u),b(f,qi,u),e(qi,Of),e(Of,Tne),M(yL,Tne,null),e(qi,ZUe),e(qi,Mne),e(Mne,eJe),b(f,Bze,u),b(f,Lo,u),M(xL,Lo,null),e(Lo,oJe),e(Lo,$L),e($L,rJe),e($L,fR),e(fR,tJe),e($L,aJe),e(Lo,nJe),e(Lo,kL),e(kL,sJe),e(kL,Ene),e(Ene,lJe),e(kL,iJe),e(Lo,dJe),e(Lo,yr),M(SL,yr,null),e(yr,cJe),e(yr,Cne),e(Cne,fJe),e(yr,mJe),e(yr,ji),e(ji,gJe),e(ji,wne),e(wne,hJe),e(ji,pJe),e(ji,Ane),e(Ane,_Je),e(ji,uJe),e(yr,bJe),e(yr,A),e(A,Vf),e(Vf,Lne),e(Lne,vJe),e(Vf,FJe),e(Vf,mR),e(mR,TJe),e(Vf,MJe),e(A,EJe),e(A,Xf),e(Xf,yne),e(yne,CJe),e(Xf,wJe),e(Xf,gR),e(gR,AJe),e(Xf,LJe),e(A,yJe),e(A,zf),e(zf,xne),e(xne,xJe),e(zf,$Je),e(zf,hR),e(hR,kJe),e(zf,SJe),e(A,RJe),e(A,Wf),e(Wf,$ne),e($ne,PJe),e(Wf,BJe),e(Wf,pR),e(pR,IJe),e(Wf,NJe),e(A,qJe),e(A,Qf),e(Qf,kne),e(kne,jJe),e(Qf,DJe),e(Qf,_R),e(_R,GJe),e(Qf,OJe),e(A,VJe),e(A,Hf),e(Hf,Sne),e(Sne,XJe),e(Hf,zJe),e(Hf,uR),e(uR,WJe),e(Hf,QJe),e(A,HJe),e(A,Uf),e(Uf,Rne),e(Rne,UJe),e(Uf,JJe),e(Uf,bR),e(bR,YJe),e(Uf,KJe),e(A,ZJe),e(A,Jf),e(Jf,Pne),e(Pne,eYe),e(Jf,oYe),e(Jf,vR),e(vR,rYe),e(Jf,tYe),e(A,aYe),e(A,Yf),e(Yf,Bne),e(Bne,nYe),e(Yf,sYe),e(Yf,FR),e(FR,lYe),e(Yf,iYe),e(A,dYe),e(A,Kf),e(Kf,Ine),e(Ine,cYe),e(Kf,fYe),e(Kf,TR),e(TR,mYe),e(Kf,gYe),e(A,hYe),e(A,Zf),e(Zf,Nne),e(Nne,pYe),e(Zf,_Ye),e(Zf,MR),e(MR,uYe),e(Zf,bYe),e(A,vYe),e(A,em),e(em,qne),e(qne,FYe),e(em,TYe),e(em,ER),e(ER,MYe),e(em,EYe),e(A,CYe),e(A,om),e(om,jne),e(jne,wYe),e(om,AYe),e(om,CR),e(CR,LYe),e(om,yYe),e(A,xYe),e(A,rm),e(rm,Dne),e(Dne,$Ye),e(rm,kYe),e(rm,wR),e(wR,SYe),e(rm,RYe),e(A,PYe),e(A,tm),e(tm,Gne),e(Gne,BYe),e(tm,IYe),e(tm,AR),e(AR,NYe),e(tm,qYe),e(A,jYe),e(A,am),e(am,One),e(One,DYe),e(am,GYe),e(am,LR),e(LR,OYe),e(am,VYe),e(A,XYe),e(A,nm),e(nm,Vne),e(Vne,zYe),e(nm,WYe),e(nm,yR),e(yR,QYe),e(nm,HYe),e(A,UYe),e(A,sm),e(sm,Xne),e(Xne,JYe),e(sm,YYe),e(sm,xR),e(xR,KYe),e(sm,ZYe),e(A,eKe),e(A,lm),e(lm,zne),e(zne,oKe),e(lm,rKe),e(lm,$R),e($R,tKe),e(lm,aKe),e(A,nKe),e(A,im),e(im,Wne),e(Wne,sKe),e(im,lKe),e(im,kR),e(kR,iKe),e(im,dKe),e(A,cKe),e(A,dm),e(dm,Qne),e(Qne,fKe),e(dm,mKe),e(dm,SR),e(SR,gKe),e(dm,hKe),e(A,pKe),e(A,cm),e(cm,Hne),e(Hne,_Ke),e(cm,uKe),e(cm,RR),e(RR,bKe),e(cm,vKe),e(A,FKe),e(A,fm),e(fm,Une),e(Une,TKe),e(fm,MKe),e(fm,PR),e(PR,EKe),e(fm,CKe),e(A,wKe),e(A,mm),e(mm,Jne),e(Jne,AKe),e(mm,LKe),e(mm,BR),e(BR,yKe),e(mm,xKe),e(A,$Ke),e(A,gm),e(gm,Yne),e(Yne,kKe),e(gm,SKe),e(gm,IR),e(IR,RKe),e(gm,PKe),e(A,BKe),e(A,hm),e(hm,Kne),e(Kne,IKe),e(hm,NKe),e(hm,NR),e(NR,qKe),e(hm,jKe),e(A,DKe),e(A,pm),e(pm,Zne),e(Zne,GKe),e(pm,OKe),e(pm,qR),e(qR,VKe),e(pm,XKe),e(A,zKe),e(A,_m),e(_m,ese),e(ese,WKe),e(_m,QKe),e(_m,jR),e(jR,HKe),e(_m,UKe),e(A,JKe),e(A,um),e(um,ose),e(ose,YKe),e(um,KKe),e(um,DR),e(DR,ZKe),e(um,eZe),e(A,oZe),e(A,bm),e(bm,rse),e(rse,rZe),e(bm,tZe),e(bm,GR),e(GR,aZe),e(bm,nZe),e(A,sZe),e(A,vm),e(vm,tse),e(tse,lZe),e(vm,iZe),e(vm,OR),e(OR,dZe),e(vm,cZe),e(A,fZe),e(A,Fm),e(Fm,ase),e(ase,mZe),e(Fm,gZe),e(Fm,VR),e(VR,hZe),e(Fm,pZe),e(A,_Ze),e(A,Tm),e(Tm,nse),e(nse,uZe),e(Tm,bZe),e(Tm,XR),e(XR,vZe),e(Tm,FZe),e(A,TZe),e(A,Mm),e(Mm,sse),e(sse,MZe),e(Mm,EZe),e(Mm,zR),e(zR,CZe),e(Mm,wZe),e(A,AZe),e(A,Em),e(Em,lse),e(lse,LZe),e(Em,yZe),e(Em,WR),e(WR,xZe),e(Em,$Ze),e(A,kZe),e(A,Cm),e(Cm,ise),e(ise,SZe),e(Cm,RZe),e(Cm,QR),e(QR,PZe),e(Cm,BZe),e(A,IZe),e(A,wm),e(wm,dse),e(dse,NZe),e(wm,qZe),e(wm,HR),e(HR,jZe),e(wm,DZe),e(A,GZe),e(A,Am),e(Am,cse),e(cse,OZe),e(Am,VZe),e(Am,UR),e(UR,XZe),e(Am,zZe),e(A,WZe),e(A,Lm),e(Lm,fse),e(fse,QZe),e(Lm,HZe),e(Lm,JR),e(JR,UZe),e(Lm,JZe),e(A,YZe),e(A,ym),e(ym,mse),e(mse,KZe),e(ym,ZZe),e(ym,YR),e(YR,eeo),e(ym,oeo),e(A,reo),e(A,xm),e(xm,gse),e(gse,teo),e(xm,aeo),e(xm,KR),e(KR,neo),e(xm,seo),e(A,leo),e(A,$m),e($m,hse),e(hse,ieo),e($m,deo),e($m,ZR),e(ZR,ceo),e($m,feo),e(A,meo),e(A,km),e(km,pse),e(pse,geo),e(km,heo),e(km,eP),e(eP,peo),e(km,_eo),e(A,ueo),e(A,Sm),e(Sm,_se),e(_se,beo),e(Sm,veo),e(Sm,oP),e(oP,Feo),e(Sm,Teo),e(A,Meo),e(A,Rm),e(Rm,use),e(use,Eeo),e(Rm,Ceo),e(Rm,rP),e(rP,weo),e(Rm,Aeo),e(A,Leo),e(A,Pm),e(Pm,bse),e(bse,yeo),e(Pm,xeo),e(Pm,tP),e(tP,$eo),e(Pm,keo),e(A,Seo),e(A,Bm),e(Bm,vse),e(vse,Reo),e(Bm,Peo),e(Bm,aP),e(aP,Beo),e(Bm,Ieo),e(A,Neo),e(A,Im),e(Im,Fse),e(Fse,qeo),e(Im,jeo),e(Im,nP),e(nP,Deo),e(Im,Geo),e(A,Oeo),e(A,Nm),e(Nm,Tse),e(Tse,Veo),e(Nm,Xeo),e(Nm,sP),e(sP,zeo),e(Nm,Weo),e(A,Qeo),e(A,qm),e(qm,Mse),e(Mse,Heo),e(qm,Ueo),e(qm,lP),e(lP,Jeo),e(qm,Yeo),e(A,Keo),e(A,jm),e(jm,Ese),e(Ese,Zeo),e(jm,eoo),e(jm,iP),e(iP,ooo),e(jm,roo),e(A,too),e(A,Dm),e(Dm,Cse),e(Cse,aoo),e(Dm,noo),e(Dm,dP),e(dP,soo),e(Dm,loo),e(A,ioo),e(A,Gm),e(Gm,wse),e(wse,doo),e(Gm,coo),e(Gm,cP),e(cP,foo),e(Gm,moo),e(A,goo),e(A,Om),e(Om,Ase),e(Ase,hoo),e(Om,poo),e(Om,fP),e(fP,_oo),e(Om,uoo),e(A,boo),e(A,Vm),e(Vm,Lse),e(Lse,voo),e(Vm,Foo),e(Vm,mP),e(mP,Too),e(Vm,Moo),e(A,Eoo),e(A,Xm),e(Xm,yse),e(yse,Coo),e(Xm,woo),e(Xm,gP),e(gP,Aoo),e(Xm,Loo),e(A,yoo),e(A,zm),e(zm,xse),e(xse,xoo),e(zm,$oo),e(zm,hP),e(hP,koo),e(zm,Soo),e(A,Roo),e(A,Wm),e(Wm,$se),e($se,Poo),e(Wm,Boo),e(Wm,pP),e(pP,Ioo),e(Wm,Noo),e(A,qoo),e(A,Qm),e(Qm,kse),e(kse,joo),e(Qm,Doo),e(Qm,_P),e(_P,Goo),e(Qm,Ooo),e(A,Voo),e(A,Hm),e(Hm,Sse),e(Sse,Xoo),e(Hm,zoo),e(Hm,uP),e(uP,Woo),e(Hm,Qoo),e(A,Hoo),e(A,Um),e(Um,Rse),e(Rse,Uoo),e(Um,Joo),e(Um,bP),e(bP,Yoo),e(Um,Koo),e(A,Zoo),e(A,Jm),e(Jm,Pse),e(Pse,ero),e(Jm,oro),e(Jm,vP),e(vP,rro),e(Jm,tro),e(A,aro),e(A,Ym),e(Ym,Bse),e(Bse,nro),e(Ym,sro),e(Ym,FP),e(FP,lro),e(Ym,iro),e(A,dro),e(A,Km),e(Km,Ise),e(Ise,cro),e(Km,fro),e(Km,TP),e(TP,mro),e(Km,gro),e(A,hro),e(A,Zm),e(Zm,Nse),e(Nse,pro),e(Zm,_ro),e(Zm,MP),e(MP,uro),e(Zm,bro),e(A,vro),e(A,eg),e(eg,qse),e(qse,Fro),e(eg,Tro),e(eg,EP),e(EP,Mro),e(eg,Ero),e(A,Cro),e(A,og),e(og,jse),e(jse,wro),e(og,Aro),e(og,CP),e(CP,Lro),e(og,yro),e(A,xro),e(A,rg),e(rg,Dse),e(Dse,$ro),e(rg,kro),e(rg,wP),e(wP,Sro),e(rg,Rro),e(A,Pro),e(A,tg),e(tg,Gse),e(Gse,Bro),e(tg,Iro),e(tg,AP),e(AP,Nro),e(tg,qro),e(A,jro),e(A,ag),e(ag,Ose),e(Ose,Dro),e(ag,Gro),e(ag,LP),e(LP,Oro),e(ag,Vro),e(A,Xro),e(A,ng),e(ng,Vse),e(Vse,zro),e(ng,Wro),e(ng,yP),e(yP,Qro),e(ng,Hro),e(A,Uro),e(A,sg),e(sg,Xse),e(Xse,Jro),e(sg,Yro),e(sg,xP),e(xP,Kro),e(sg,Zro),e(A,eto),e(A,lg),e(lg,zse),e(zse,oto),e(lg,rto),e(lg,$P),e($P,tto),e(lg,ato),e(A,nto),e(A,ig),e(ig,Wse),e(Wse,sto),e(ig,lto),e(ig,kP),e(kP,ito),e(ig,dto),e(A,cto),e(A,dg),e(dg,Qse),e(Qse,fto),e(dg,mto),e(dg,SP),e(SP,gto),e(dg,hto),e(A,pto),e(A,cg),e(cg,Hse),e(Hse,_to),e(cg,uto),e(cg,RP),e(RP,bto),e(cg,vto),e(A,Fto),e(A,fg),e(fg,Use),e(Use,Tto),e(fg,Mto),e(fg,PP),e(PP,Eto),e(fg,Cto),e(A,wto),e(A,mg),e(mg,Jse),e(Jse,Ato),e(mg,Lto),e(mg,BP),e(BP,yto),e(mg,xto),e(A,$to),e(A,gg),e(gg,Yse),e(Yse,kto),e(gg,Sto),e(gg,IP),e(IP,Rto),e(gg,Pto),e(A,Bto),e(A,hg),e(hg,Kse),e(Kse,Ito),e(hg,Nto),e(hg,NP),e(NP,qto),e(hg,jto),e(A,Dto),e(A,pg),e(pg,Zse),e(Zse,Gto),e(pg,Oto),e(pg,qP),e(qP,Vto),e(pg,Xto),e(A,zto),e(A,_g),e(_g,ele),e(ele,Wto),e(_g,Qto),e(_g,jP),e(jP,Hto),e(_g,Uto),e(A,Jto),e(A,ug),e(ug,ole),e(ole,Yto),e(ug,Kto),e(ug,DP),e(DP,Zto),e(ug,eao),e(A,oao),e(A,bg),e(bg,rle),e(rle,rao),e(bg,tao),e(bg,GP),e(GP,aao),e(bg,nao),e(A,sao),e(A,vg),e(vg,tle),e(tle,lao),e(vg,iao),e(vg,OP),e(OP,dao),e(vg,cao),e(A,fao),e(A,Fg),e(Fg,ale),e(ale,mao),e(Fg,gao),e(Fg,VP),e(VP,hao),e(Fg,pao),e(A,_ao),e(A,Tg),e(Tg,nle),e(nle,uao),e(Tg,bao),e(Tg,XP),e(XP,vao),e(Tg,Fao),e(A,Tao),e(A,Mg),e(Mg,sle),e(sle,Mao),e(Mg,Eao),e(Mg,zP),e(zP,Cao),e(Mg,wao),e(A,Aao),e(A,Eg),e(Eg,lle),e(lle,Lao),e(Eg,yao),e(Eg,WP),e(WP,xao),e(Eg,$ao),e(A,kao),e(A,Cg),e(Cg,ile),e(ile,Sao),e(Cg,Rao),e(Cg,QP),e(QP,Pao),e(Cg,Bao),e(A,Iao),e(A,wg),e(wg,dle),e(dle,Nao),e(wg,qao),e(wg,HP),e(HP,jao),e(wg,Dao),e(A,Gao),e(A,Ag),e(Ag,cle),e(cle,Oao),e(Ag,Vao),e(Ag,UP),e(UP,Xao),e(Ag,zao),e(A,Wao),e(A,Lg),e(Lg,fle),e(fle,Qao),e(Lg,Hao),e(Lg,JP),e(JP,Uao),e(Lg,Jao),e(A,Yao),e(A,yg),e(yg,mle),e(mle,Kao),e(yg,Zao),e(yg,YP),e(YP,eno),e(yg,ono),e(A,rno),e(A,xg),e(xg,gle),e(gle,tno),e(xg,ano),e(xg,KP),e(KP,nno),e(xg,sno),e(A,lno),e(A,$g),e($g,hle),e(hle,ino),e($g,dno),e($g,ZP),e(ZP,cno),e($g,fno),e(A,mno),e(A,kg),e(kg,ple),e(ple,gno),e(kg,hno),e(kg,eB),e(eB,pno),e(kg,_no),e(A,uno),e(A,Sg),e(Sg,_le),e(_le,bno),e(Sg,vno),e(Sg,oB),e(oB,Fno),e(Sg,Tno),e(A,Mno),e(A,Rg),e(Rg,ule),e(ule,Eno),e(Rg,Cno),e(Rg,rB),e(rB,wno),e(Rg,Ano),e(A,Lno),e(A,Pg),e(Pg,ble),e(ble,yno),e(Pg,xno),e(Pg,tB),e(tB,$no),e(Pg,kno),e(A,Sno),e(A,Bg),e(Bg,vle),e(vle,Rno),e(Bg,Pno),e(Bg,aB),e(aB,Bno),e(Bg,Ino),e(A,Nno),e(A,Ig),e(Ig,Fle),e(Fle,qno),e(Ig,jno),e(Ig,nB),e(nB,Dno),e(Ig,Gno),e(A,Ono),e(A,Ng),e(Ng,Tle),e(Tle,Vno),e(Ng,Xno),e(Ng,sB),e(sB,zno),e(Ng,Wno),e(A,Qno),e(A,qg),e(qg,Mle),e(Mle,Hno),e(qg,Uno),e(qg,lB),e(lB,Jno),e(qg,Yno),e(A,Kno),e(A,jg),e(jg,Ele),e(Ele,Zno),e(jg,eso),e(jg,iB),e(iB,oso),e(jg,rso),e(A,tso),e(A,Dg),e(Dg,Cle),e(Cle,aso),e(Dg,nso),e(Dg,dB),e(dB,sso),e(Dg,lso),e(A,iso),e(A,Gg),e(Gg,wle),e(wle,dso),e(Gg,cso),e(Gg,cB),e(cB,fso),e(Gg,mso),e(A,gso),e(A,Og),e(Og,Ale),e(Ale,hso),e(Og,pso),e(Og,fB),e(fB,_so),e(Og,uso),e(A,bso),e(A,Vg),e(Vg,Lle),e(Lle,vso),e(Vg,Fso),e(Vg,mB),e(mB,Tso),e(Vg,Mso),e(A,Eso),e(A,Xg),e(Xg,yle),e(yle,Cso),e(Xg,wso),e(Xg,gB),e(gB,Aso),e(Xg,Lso),e(A,yso),e(A,zg),e(zg,xle),e(xle,xso),e(zg,$so),e(zg,hB),e(hB,kso),e(zg,Sso),e(A,Rso),e(A,Wg),e(Wg,$le),e($le,Pso),e(Wg,Bso),e(Wg,pB),e(pB,Iso),e(Wg,Nso),e(A,qso),e(A,Qg),e(Qg,kle),e(kle,jso),e(Qg,Dso),e(Qg,_B),e(_B,Gso),e(Qg,Oso),e(A,Vso),e(A,Hg),e(Hg,Sle),e(Sle,Xso),e(Hg,zso),e(Hg,uB),e(uB,Wso),e(Hg,Qso),e(A,Hso),e(A,Ug),e(Ug,Rle),e(Rle,Uso),e(Ug,Jso),e(Ug,bB),e(bB,Yso),e(Ug,Kso),e(A,Zso),e(A,Jg),e(Jg,Ple),e(Ple,elo),e(Jg,olo),e(Jg,vB),e(vB,rlo),e(Jg,tlo),e(A,alo),e(A,Yg),e(Yg,Ble),e(Ble,nlo),e(Yg,slo),e(Yg,FB),e(FB,llo),e(Yg,ilo),e(A,dlo),e(A,Kg),e(Kg,Ile),e(Ile,clo),e(Kg,flo),e(Kg,TB),e(TB,mlo),e(Kg,glo),e(A,hlo),e(A,Zg),e(Zg,Nle),e(Nle,plo),e(Zg,_lo),e(Zg,MB),e(MB,ulo),e(Zg,blo),e(A,vlo),e(A,eh),e(eh,qle),e(qle,Flo),e(eh,Tlo),e(eh,EB),e(EB,Mlo),e(eh,Elo),e(yr,Clo),M(oh,yr,null),e(Lo,wlo),e(Lo,rh),M(RL,rh,null),e(rh,Alo),e(rh,jle),e(jle,Llo),b(f,Ize,u),b(f,Di,u),e(Di,th),e(th,Dle),M(PL,Dle,null),e(Di,ylo),e(Di,Gle),e(Gle,xlo),b(f,Nze,u),b(f,yo,u),M(BL,yo,null),e(yo,$lo),e(yo,IL),e(IL,klo),e(IL,CB),e(CB,Slo),e(IL,Rlo),e(yo,Plo),e(yo,NL),e(NL,Blo),e(NL,Ole),e(Ole,Ilo),e(NL,Nlo),e(yo,qlo),e(yo,xr),M(qL,xr,null),e(xr,jlo),e(xr,Vle),e(Vle,Dlo),e(xr,Glo),e(xr,Pa),e(Pa,Olo),e(Pa,Xle),e(Xle,Vlo),e(Pa,Xlo),e(Pa,zle),e(zle,zlo),e(Pa,Wlo),e(Pa,Wle),e(Wle,Qlo),e(Pa,Hlo),e(xr,Ulo),e(xr,k),e(k,Dn),e(Dn,Qle),e(Qle,Jlo),e(Dn,Ylo),e(Dn,wB),e(wB,Klo),e(Dn,Zlo),e(Dn,AB),e(AB,eio),e(Dn,oio),e(k,rio),e(k,Gn),e(Gn,Hle),e(Hle,tio),e(Gn,aio),e(Gn,LB),e(LB,nio),e(Gn,sio),e(Gn,yB),e(yB,lio),e(Gn,iio),e(k,dio),e(k,On),e(On,Ule),e(Ule,cio),e(On,fio),e(On,xB),e(xB,mio),e(On,gio),e(On,$B),e($B,hio),e(On,pio),e(k,_io),e(k,ah),e(ah,Jle),e(Jle,uio),e(ah,bio),e(ah,kB),e(kB,vio),e(ah,Fio),e(k,Tio),e(k,Vn),e(Vn,Yle),e(Yle,Mio),e(Vn,Eio),e(Vn,SB),e(SB,Cio),e(Vn,wio),e(Vn,RB),e(RB,Aio),e(Vn,Lio),e(k,yio),e(k,nh),e(nh,Kle),e(Kle,xio),e(nh,$io),e(nh,PB),e(PB,kio),e(nh,Sio),e(k,Rio),e(k,sh),e(sh,Zle),e(Zle,Pio),e(sh,Bio),e(sh,BB),e(BB,Iio),e(sh,Nio),e(k,qio),e(k,lh),e(lh,eie),e(eie,jio),e(lh,Dio),e(lh,IB),e(IB,Gio),e(lh,Oio),e(k,Vio),e(k,Xn),e(Xn,oie),e(oie,Xio),e(Xn,zio),e(Xn,NB),e(NB,Wio),e(Xn,Qio),e(Xn,qB),e(qB,Hio),e(Xn,Uio),e(k,Jio),e(k,zn),e(zn,rie),e(rie,Yio),e(zn,Kio),e(zn,jB),e(jB,Zio),e(zn,edo),e(zn,DB),e(DB,odo),e(zn,rdo),e(k,tdo),e(k,Wn),e(Wn,tie),e(tie,ado),e(Wn,ndo),e(Wn,GB),e(GB,sdo),e(Wn,ldo),e(Wn,OB),e(OB,ido),e(Wn,ddo),e(k,cdo),e(k,ih),e(ih,aie),e(aie,fdo),e(ih,mdo),e(ih,VB),e(VB,gdo),e(ih,hdo),e(k,pdo),e(k,dh),e(dh,nie),e(nie,_do),e(dh,udo),e(dh,XB),e(XB,bdo),e(dh,vdo),e(k,Fdo),e(k,ch),e(ch,sie),e(sie,Tdo),e(ch,Mdo),e(ch,zB),e(zB,Edo),e(ch,Cdo),e(k,wdo),e(k,Qn),e(Qn,lie),e(lie,Ado),e(Qn,Ldo),e(Qn,WB),e(WB,ydo),e(Qn,xdo),e(Qn,QB),e(QB,$do),e(Qn,kdo),e(k,Sdo),e(k,fh),e(fh,iie),e(iie,Rdo),e(fh,Pdo),e(fh,HB),e(HB,Bdo),e(fh,Ido),e(k,Ndo),e(k,Hn),e(Hn,die),e(die,qdo),e(Hn,jdo),e(Hn,UB),e(UB,Ddo),e(Hn,Gdo),e(Hn,JB),e(JB,Odo),e(Hn,Vdo),e(k,Xdo),e(k,Un),e(Un,cie),e(cie,zdo),e(Un,Wdo),e(Un,YB),e(YB,Qdo),e(Un,Hdo),e(Un,KB),e(KB,Udo),e(Un,Jdo),e(k,Ydo),e(k,Jn),e(Jn,fie),e(fie,Kdo),e(Jn,Zdo),e(Jn,ZB),e(ZB,eco),e(Jn,oco),e(Jn,eI),e(eI,rco),e(Jn,tco),e(k,aco),e(k,Yn),e(Yn,mie),e(mie,nco),e(Yn,sco),e(Yn,oI),e(oI,lco),e(Yn,ico),e(Yn,rI),e(rI,dco),e(Yn,cco),e(k,fco),e(k,mh),e(mh,gie),e(gie,mco),e(mh,gco),e(mh,tI),e(tI,hco),e(mh,pco),e(k,_co),e(k,Kn),e(Kn,hie),e(hie,uco),e(Kn,bco),e(Kn,aI),e(aI,vco),e(Kn,Fco),e(Kn,nI),e(nI,Tco),e(Kn,Mco),e(k,Eco),e(k,Zn),e(Zn,pie),e(pie,Cco),e(Zn,wco),e(Zn,sI),e(sI,Aco),e(Zn,Lco),e(Zn,lI),e(lI,yco),e(Zn,xco),e(k,$co),e(k,es),e(es,_ie),e(_ie,kco),e(es,Sco),e(es,iI),e(iI,Rco),e(es,Pco),e(es,dI),e(dI,Bco),e(es,Ico),e(k,Nco),e(k,os),e(os,uie),e(uie,qco),e(os,jco),e(os,cI),e(cI,Dco),e(os,Gco),e(os,fI),e(fI,Oco),e(os,Vco),e(k,Xco),e(k,rs),e(rs,bie),e(bie,zco),e(rs,Wco),e(rs,mI),e(mI,Qco),e(rs,Hco),e(rs,gI),e(gI,Uco),e(rs,Jco),e(k,Yco),e(k,ts),e(ts,vie),e(vie,Kco),e(ts,Zco),e(ts,hI),e(hI,efo),e(ts,ofo),e(ts,pI),e(pI,rfo),e(ts,tfo),e(k,afo),e(k,gh),e(gh,Fie),e(Fie,nfo),e(gh,sfo),e(gh,_I),e(_I,lfo),e(gh,ifo),e(k,dfo),e(k,as),e(as,Tie),e(Tie,cfo),e(as,ffo),e(as,uI),e(uI,mfo),e(as,gfo),e(as,bI),e(bI,hfo),e(as,pfo),e(k,_fo),e(k,hh),e(hh,Mie),e(Mie,ufo),e(hh,bfo),e(hh,vI),e(vI,vfo),e(hh,Ffo),e(k,Tfo),e(k,ns),e(ns,Eie),e(Eie,Mfo),e(ns,Efo),e(ns,FI),e(FI,Cfo),e(ns,wfo),e(ns,TI),e(TI,Afo),e(ns,Lfo),e(k,yfo),e(k,ss),e(ss,Cie),e(Cie,xfo),e(ss,$fo),e(ss,MI),e(MI,kfo),e(ss,Sfo),e(ss,EI),e(EI,Rfo),e(ss,Pfo),e(k,Bfo),e(k,ls),e(ls,wie),e(wie,Ifo),e(ls,Nfo),e(ls,CI),e(CI,qfo),e(ls,jfo),e(ls,wI),e(wI,Dfo),e(ls,Gfo),e(k,Ofo),e(k,ph),e(ph,Aie),e(Aie,Vfo),e(ph,Xfo),e(ph,AI),e(AI,zfo),e(ph,Wfo),e(k,Qfo),e(k,is),e(is,Lie),e(Lie,Hfo),e(is,Ufo),e(is,LI),e(LI,Jfo),e(is,Yfo),e(is,yI),e(yI,Kfo),e(is,Zfo),e(k,emo),e(k,ds),e(ds,yie),e(yie,omo),e(ds,rmo),e(ds,xI),e(xI,tmo),e(ds,amo),e(ds,$I),e($I,nmo),e(ds,smo),e(k,lmo),e(k,cs),e(cs,xie),e(xie,imo),e(cs,dmo),e(cs,kI),e(kI,cmo),e(cs,fmo),e(cs,SI),e(SI,mmo),e(cs,gmo),e(k,hmo),e(k,_h),e(_h,$ie),e($ie,pmo),e(_h,_mo),e(_h,RI),e(RI,umo),e(_h,bmo),e(k,vmo),e(k,fs),e(fs,kie),e(kie,Fmo),e(fs,Tmo),e(fs,PI),e(PI,Mmo),e(fs,Emo),e(fs,BI),e(BI,Cmo),e(fs,wmo),e(k,Amo),e(k,ms),e(ms,Sie),e(Sie,Lmo),e(ms,ymo),e(ms,II),e(II,xmo),e(ms,$mo),e(ms,NI),e(NI,kmo),e(ms,Smo),e(k,Rmo),e(k,gs),e(gs,Rie),e(Rie,Pmo),e(gs,Bmo),e(gs,qI),e(qI,Imo),e(gs,Nmo),e(gs,jI),e(jI,qmo),e(gs,jmo),e(k,Dmo),e(k,hs),e(hs,Pie),e(Pie,Gmo),e(hs,Omo),e(hs,DI),e(DI,Vmo),e(hs,Xmo),e(hs,GI),e(GI,zmo),e(hs,Wmo),e(k,Qmo),e(k,ps),e(ps,Bie),e(Bie,Hmo),e(ps,Umo),e(ps,OI),e(OI,Jmo),e(ps,Ymo),e(ps,VI),e(VI,Kmo),e(ps,Zmo),e(k,ego),e(k,_s),e(_s,Iie),e(Iie,ogo),e(_s,rgo),e(_s,XI),e(XI,tgo),e(_s,ago),e(_s,zI),e(zI,ngo),e(_s,sgo),e(k,lgo),e(k,us),e(us,Nie),e(Nie,igo),e(us,dgo),e(us,WI),e(WI,cgo),e(us,fgo),e(us,QI),e(QI,mgo),e(us,ggo),e(k,hgo),e(k,bs),e(bs,qie),e(qie,pgo),e(bs,_go),e(bs,HI),e(HI,ugo),e(bs,bgo),e(bs,UI),e(UI,vgo),e(bs,Fgo),e(k,Tgo),e(k,uh),e(uh,jie),e(jie,Mgo),e(uh,Ego),e(uh,JI),e(JI,Cgo),e(uh,wgo),e(k,Ago),e(k,vs),e(vs,Die),e(Die,Lgo),e(vs,ygo),e(vs,YI),e(YI,xgo),e(vs,$go),e(vs,KI),e(KI,kgo),e(vs,Sgo),e(k,Rgo),e(k,bh),e(bh,Gie),e(Gie,Pgo),e(bh,Bgo),e(bh,ZI),e(ZI,Igo),e(bh,Ngo),e(k,qgo),e(k,vh),e(vh,Oie),e(Oie,jgo),e(vh,Dgo),e(vh,eN),e(eN,Ggo),e(vh,Ogo),e(k,Vgo),e(k,Fs),e(Fs,Vie),e(Vie,Xgo),e(Fs,zgo),e(Fs,oN),e(oN,Wgo),e(Fs,Qgo),e(Fs,rN),e(rN,Hgo),e(Fs,Ugo),e(k,Jgo),e(k,Ts),e(Ts,Xie),e(Xie,Ygo),e(Ts,Kgo),e(Ts,tN),e(tN,Zgo),e(Ts,eho),e(Ts,aN),e(aN,oho),e(Ts,rho),e(k,tho),e(k,Ms),e(Ms,zie),e(zie,aho),e(Ms,nho),e(Ms,nN),e(nN,sho),e(Ms,lho),e(Ms,sN),e(sN,iho),e(Ms,dho),e(k,cho),e(k,Fh),e(Fh,Wie),e(Wie,fho),e(Fh,mho),e(Fh,lN),e(lN,gho),e(Fh,hho),e(k,pho),e(k,Es),e(Es,Qie),e(Qie,_ho),e(Es,uho),e(Es,iN),e(iN,bho),e(Es,vho),e(Es,dN),e(dN,Fho),e(Es,Tho),e(k,Mho),e(k,Cs),e(Cs,Hie),e(Hie,Eho),e(Cs,Cho),e(Cs,cN),e(cN,who),e(Cs,Aho),e(Cs,fN),e(fN,Lho),e(Cs,yho),e(k,xho),e(k,ws),e(ws,Uie),e(Uie,$ho),e(ws,kho),e(ws,mN),e(mN,Sho),e(ws,Rho),e(ws,gN),e(gN,Pho),e(ws,Bho),e(k,Iho),e(k,As),e(As,Jie),e(Jie,Nho),e(As,qho),e(As,hN),e(hN,jho),e(As,Dho),e(As,pN),e(pN,Gho),e(As,Oho),e(k,Vho),e(k,Ls),e(Ls,Yie),e(Yie,Xho),e(Ls,zho),e(Ls,_N),e(_N,Who),e(Ls,Qho),e(Ls,uN),e(uN,Hho),e(Ls,Uho),e(k,Jho),e(k,ys),e(ys,Kie),e(Kie,Yho),e(ys,Kho),e(ys,bN),e(bN,Zho),e(ys,epo),e(ys,vN),e(vN,opo),e(ys,rpo),e(k,tpo),e(k,xs),e(xs,Zie),e(Zie,apo),e(xs,npo),e(xs,FN),e(FN,spo),e(xs,lpo),e(xs,TN),e(TN,ipo),e(xs,dpo),e(k,cpo),e(k,$s),e($s,ede),e(ede,fpo),e($s,mpo),e($s,MN),e(MN,gpo),e($s,hpo),e($s,EN),e(EN,ppo),e($s,_po),e(k,upo),e(k,Th),e(Th,ode),e(ode,bpo),e(Th,vpo),e(Th,CN),e(CN,Fpo),e(Th,Tpo),e(k,Mpo),e(k,ks),e(ks,rde),e(rde,Epo),e(ks,Cpo),e(ks,wN),e(wN,wpo),e(ks,Apo),e(ks,AN),e(AN,Lpo),e(ks,ypo),e(k,xpo),e(k,Ss),e(Ss,tde),e(tde,$po),e(Ss,kpo),e(Ss,LN),e(LN,Spo),e(Ss,Rpo),e(Ss,yN),e(yN,Ppo),e(Ss,Bpo),e(k,Ipo),e(k,Mh),e(Mh,ade),e(ade,Npo),e(Mh,qpo),e(Mh,xN),e(xN,jpo),e(Mh,Dpo),e(k,Gpo),e(k,Eh),e(Eh,nde),e(nde,Opo),e(Eh,Vpo),e(Eh,$N),e($N,Xpo),e(Eh,zpo),e(k,Wpo),e(k,Ch),e(Ch,sde),e(sde,Qpo),e(Ch,Hpo),e(Ch,kN),e(kN,Upo),e(Ch,Jpo),e(k,Ypo),e(k,wh),e(wh,lde),e(lde,Kpo),e(wh,Zpo),e(wh,SN),e(SN,e_o),e(wh,o_o),e(k,r_o),e(k,Rs),e(Rs,ide),e(ide,t_o),e(Rs,a_o),e(Rs,RN),e(RN,n_o),e(Rs,s_o),e(Rs,PN),e(PN,l_o),e(Rs,i_o),e(k,d_o),e(k,Ah),e(Ah,dde),e(dde,c_o),e(Ah,f_o),e(Ah,BN),e(BN,m_o),e(Ah,g_o),e(k,h_o),e(k,Ps),e(Ps,cde),e(cde,p_o),e(Ps,__o),e(Ps,IN),e(IN,u_o),e(Ps,b_o),e(Ps,NN),e(NN,v_o),e(Ps,F_o),e(k,T_o),e(k,Bs),e(Bs,fde),e(fde,M_o),e(Bs,E_o),e(Bs,qN),e(qN,C_o),e(Bs,w_o),e(Bs,jN),e(jN,A_o),e(Bs,L_o),e(k,y_o),e(k,Is),e(Is,mde),e(mde,x_o),e(Is,$_o),e(Is,DN),e(DN,k_o),e(Is,S_o),e(Is,GN),e(GN,R_o),e(Is,P_o),e(k,B_o),e(k,Ns),e(Ns,gde),e(gde,I_o),e(Ns,N_o),e(Ns,ON),e(ON,q_o),e(Ns,j_o),e(Ns,VN),e(VN,D_o),e(Ns,G_o),e(k,O_o),e(k,qs),e(qs,hde),e(hde,V_o),e(qs,X_o),e(qs,XN),e(XN,z_o),e(qs,W_o),e(qs,zN),e(zN,Q_o),e(qs,H_o),e(k,U_o),e(k,js),e(js,pde),e(pde,J_o),e(js,Y_o),e(js,WN),e(WN,K_o),e(js,Z_o),e(js,QN),e(QN,euo),e(js,ouo),e(k,ruo),e(k,Lh),e(Lh,_de),e(_de,tuo),e(Lh,auo),e(Lh,HN),e(HN,nuo),e(Lh,suo),e(k,luo),e(k,yh),e(yh,ude),e(ude,iuo),e(yh,duo),e(yh,UN),e(UN,cuo),e(yh,fuo),e(k,muo),e(k,Ds),e(Ds,bde),e(bde,guo),e(Ds,huo),e(Ds,JN),e(JN,puo),e(Ds,_uo),e(Ds,YN),e(YN,uuo),e(Ds,buo),e(k,vuo),e(k,Gs),e(Gs,vde),e(vde,Fuo),e(Gs,Tuo),e(Gs,KN),e(KN,Muo),e(Gs,Euo),e(Gs,ZN),e(ZN,Cuo),e(Gs,wuo),e(k,Auo),e(k,Os),e(Os,Fde),e(Fde,Luo),e(Os,yuo),e(Os,eq),e(eq,xuo),e(Os,$uo),e(Os,oq),e(oq,kuo),e(Os,Suo),e(k,Ruo),e(k,xh),e(xh,Tde),e(Tde,Puo),e(xh,Buo),e(xh,rq),e(rq,Iuo),e(xh,Nuo),e(k,quo),e(k,$h),e($h,Mde),e(Mde,juo),e($h,Duo),e($h,tq),e(tq,Guo),e($h,Ouo),e(k,Vuo),e(k,kh),e(kh,Ede),e(Ede,Xuo),e(kh,zuo),e(kh,aq),e(aq,Wuo),e(kh,Quo),e(k,Huo),e(k,Vs),e(Vs,Cde),e(Cde,Uuo),e(Vs,Juo),e(Vs,nq),e(nq,Yuo),e(Vs,Kuo),e(Vs,sq),e(sq,Zuo),e(Vs,e2o),e(k,o2o),e(k,Xs),e(Xs,wde),e(wde,r2o),e(Xs,t2o),e(Xs,lq),e(lq,a2o),e(Xs,n2o),e(Xs,iq),e(iq,s2o),e(Xs,l2o),e(k,i2o),e(k,Sh),e(Sh,Ade),e(Ade,d2o),e(Sh,c2o),e(Sh,dq),e(dq,f2o),e(Sh,m2o),e(k,g2o),e(k,Rh),e(Rh,Lde),e(Lde,h2o),e(Rh,p2o),e(Rh,cq),e(cq,_2o),e(Rh,u2o),e(k,b2o),e(k,Ph),e(Ph,yde),e(yde,v2o),e(Ph,F2o),e(Ph,fq),e(fq,T2o),e(Ph,M2o),e(k,E2o),e(k,zs),e(zs,xde),e(xde,C2o),e(zs,w2o),e(zs,mq),e(mq,A2o),e(zs,L2o),e(zs,gq),e(gq,y2o),e(zs,x2o),e(k,$2o),e(k,Bh),e(Bh,$de),e($de,k2o),e(Bh,S2o),e(Bh,hq),e(hq,R2o),e(Bh,P2o),e(k,B2o),e(k,Ih),e(Ih,kde),e(kde,I2o),e(Ih,N2o),e(Ih,pq),e(pq,q2o),e(Ih,j2o),e(k,D2o),e(k,Ws),e(Ws,Sde),e(Sde,G2o),e(Ws,O2o),e(Ws,_q),e(_q,V2o),e(Ws,X2o),e(Ws,uq),e(uq,z2o),e(Ws,W2o),e(k,Q2o),e(k,Qs),e(Qs,Rde),e(Rde,H2o),e(Qs,U2o),e(Qs,bq),e(bq,J2o),e(Qs,Y2o),e(Qs,vq),e(vq,K2o),e(Qs,Z2o),e(k,e1o),e(k,Hs),e(Hs,Pde),e(Pde,o1o),e(Hs,r1o),e(Hs,Fq),e(Fq,t1o),e(Hs,a1o),e(Hs,Tq),e(Tq,n1o),e(Hs,s1o),e(k,l1o),e(k,Us),e(Us,Bde),e(Bde,i1o),e(Us,d1o),e(Us,Mq),e(Mq,c1o),e(Us,f1o),e(Us,Eq),e(Eq,m1o),e(Us,g1o),e(xr,h1o),M(Nh,xr,null),e(yo,p1o),e(yo,qh),M(jL,qh,null),e(qh,_1o),e(qh,Ide),e(Ide,u1o),b(f,qze,u),b(f,Gi,u),e(Gi,jh),e(jh,Nde),M(DL,Nde,null),e(Gi,b1o),e(Gi,qde),e(qde,v1o),b(f,jze,u),b(f,xo,u),M(GL,xo,null),e(xo,F1o),e(xo,OL),e(OL,T1o),e(OL,Cq),e(Cq,M1o),e(OL,E1o),e(xo,C1o),e(xo,VL),e(VL,w1o),e(VL,jde),e(jde,A1o),e(VL,L1o),e(xo,y1o),e(xo,Ue),M(XL,Ue,null),e(Ue,x1o),e(Ue,Dde),e(Dde,$1o),e(Ue,k1o),e(Ue,Ba),e(Ba,S1o),e(Ba,Gde),e(Gde,R1o),e(Ba,P1o),e(Ba,Ode),e(Ode,B1o),e(Ba,I1o),e(Ba,Vde),e(Vde,N1o),e(Ba,q1o),e(Ue,j1o),e(Ue,J),e(J,Dh),e(Dh,Xde),e(Xde,D1o),e(Dh,G1o),e(Dh,wq),e(wq,O1o),e(Dh,V1o),e(J,X1o),e(J,Gh),e(Gh,zde),e(zde,z1o),e(Gh,W1o),e(Gh,Aq),e(Aq,Q1o),e(Gh,H1o),e(J,U1o),e(J,Oh),e(Oh,Wde),e(Wde,J1o),e(Oh,Y1o),e(Oh,Lq),e(Lq,K1o),e(Oh,Z1o),e(J,e4o),e(J,Vh),e(Vh,Qde),e(Qde,o4o),e(Vh,r4o),e(Vh,yq),e(yq,t4o),e(Vh,a4o),e(J,n4o),e(J,Xh),e(Xh,Hde),e(Hde,s4o),e(Xh,l4o),e(Xh,xq),e(xq,i4o),e(Xh,d4o),e(J,c4o),e(J,zh),e(zh,Ude),e(Ude,f4o),e(zh,m4o),e(zh,$q),e($q,g4o),e(zh,h4o),e(J,p4o),e(J,Wh),e(Wh,Jde),e(Jde,_4o),e(Wh,u4o),e(Wh,kq),e(kq,b4o),e(Wh,v4o),e(J,F4o),e(J,Qh),e(Qh,Yde),e(Yde,T4o),e(Qh,M4o),e(Qh,Sq),e(Sq,E4o),e(Qh,C4o),e(J,w4o),e(J,Hh),e(Hh,Kde),e(Kde,A4o),e(Hh,L4o),e(Hh,Rq),e(Rq,y4o),e(Hh,x4o),e(J,$4o),e(J,Uh),e(Uh,Zde),e(Zde,k4o),e(Uh,S4o),e(Uh,Pq),e(Pq,R4o),e(Uh,P4o),e(J,B4o),e(J,Jh),e(Jh,ece),e(ece,I4o),e(Jh,N4o),e(Jh,Bq),e(Bq,q4o),e(Jh,j4o),e(J,D4o),e(J,Yh),e(Yh,oce),e(oce,G4o),e(Yh,O4o),e(Yh,Iq),e(Iq,V4o),e(Yh,X4o),e(J,z4o),e(J,Kh),e(Kh,rce),e(rce,W4o),e(Kh,Q4o),e(Kh,Nq),e(Nq,H4o),e(Kh,U4o),e(J,J4o),e(J,Zh),e(Zh,tce),e(tce,Y4o),e(Zh,K4o),e(Zh,qq),e(qq,Z4o),e(Zh,ebo),e(J,obo),e(J,ep),e(ep,ace),e(ace,rbo),e(ep,tbo),e(ep,jq),e(jq,abo),e(ep,nbo),e(J,sbo),e(J,op),e(op,nce),e(nce,lbo),e(op,ibo),e(op,Dq),e(Dq,dbo),e(op,cbo),e(J,fbo),e(J,rp),e(rp,sce),e(sce,mbo),e(rp,gbo),e(rp,Gq),e(Gq,hbo),e(rp,pbo),e(J,_bo),e(J,tp),e(tp,lce),e(lce,ubo),e(tp,bbo),e(tp,Oq),e(Oq,vbo),e(tp,Fbo),e(J,Tbo),e(J,ap),e(ap,ice),e(ice,Mbo),e(ap,Ebo),e(ap,Vq),e(Vq,Cbo),e(ap,wbo),e(J,Abo),e(J,np),e(np,dce),e(dce,Lbo),e(np,ybo),e(np,Xq),e(Xq,xbo),e(np,$bo),e(J,kbo),e(J,sp),e(sp,cce),e(cce,Sbo),e(sp,Rbo),e(sp,zq),e(zq,Pbo),e(sp,Bbo),e(J,Ibo),e(J,lp),e(lp,fce),e(fce,Nbo),e(lp,qbo),e(lp,Wq),e(Wq,jbo),e(lp,Dbo),e(J,Gbo),e(J,ip),e(ip,mce),e(mce,Obo),e(ip,Vbo),e(ip,Qq),e(Qq,Xbo),e(ip,zbo),e(J,Wbo),e(J,dp),e(dp,gce),e(gce,Qbo),e(dp,Hbo),e(dp,Hq),e(Hq,Ubo),e(dp,Jbo),e(J,Ybo),e(J,cp),e(cp,hce),e(hce,Kbo),e(cp,Zbo),e(cp,Uq),e(Uq,evo),e(cp,ovo),e(J,rvo),e(J,fp),e(fp,pce),e(pce,tvo),e(fp,avo),e(fp,Jq),e(Jq,nvo),e(fp,svo),e(J,lvo),e(J,mp),e(mp,_ce),e(_ce,ivo),e(mp,dvo),e(mp,Yq),e(Yq,cvo),e(mp,fvo),e(J,mvo),e(J,gp),e(gp,uce),e(uce,gvo),e(gp,hvo),e(gp,Kq),e(Kq,pvo),e(gp,_vo),e(J,uvo),e(J,hp),e(hp,bce),e(bce,bvo),e(hp,vvo),e(hp,Zq),e(Zq,Fvo),e(hp,Tvo),e(J,Mvo),e(J,pp),e(pp,vce),e(vce,Evo),e(pp,Cvo),e(pp,ej),e(ej,wvo),e(pp,Avo),e(J,Lvo),e(J,_p),e(_p,Fce),e(Fce,yvo),e(_p,xvo),e(_p,oj),e(oj,$vo),e(_p,kvo),e(J,Svo),e(J,up),e(up,Tce),e(Tce,Rvo),e(up,Pvo),e(up,rj),e(rj,Bvo),e(up,Ivo),e(J,Nvo),e(J,bp),e(bp,Mce),e(Mce,qvo),e(bp,jvo),e(bp,tj),e(tj,Dvo),e(bp,Gvo),e(J,Ovo),e(J,vp),e(vp,Ece),e(Ece,Vvo),e(vp,Xvo),e(vp,aj),e(aj,zvo),e(vp,Wvo),e(J,Qvo),e(J,Fp),e(Fp,Cce),e(Cce,Hvo),e(Fp,Uvo),e(Fp,nj),e(nj,Jvo),e(Fp,Yvo),e(J,Kvo),e(J,Tp),e(Tp,wce),e(wce,Zvo),e(Tp,e0o),e(Tp,sj),e(sj,o0o),e(Tp,r0o),e(Ue,t0o),M(Mp,Ue,null),e(Ue,a0o),M(Ep,Ue,null),e(xo,n0o),e(xo,Cp),M(zL,Cp,null),e(Cp,s0o),e(Cp,Ace),e(Ace,l0o),b(f,Dze,u),b(f,Oi,u),e(Oi,wp),e(wp,Lce),M(WL,Lce,null),e(Oi,i0o),e(Oi,yce),e(yce,d0o),b(f,Gze,u),b(f,$o,u),M(QL,$o,null),e($o,c0o),e($o,HL),e(HL,f0o),e(HL,lj),e(lj,m0o),e(HL,g0o),e($o,h0o),e($o,UL),e(UL,p0o),e(UL,xce),e(xce,_0o),e(UL,u0o),e($o,b0o),e($o,Je),M(JL,Je,null),e(Je,v0o),e(Je,$ce),e($ce,F0o),e(Je,T0o),e(Je,Vi),e(Vi,M0o),e(Vi,kce),e(kce,E0o),e(Vi,C0o),e(Vi,Sce),e(Sce,w0o),e(Vi,A0o),e(Je,L0o),e(Je,fe),e(fe,Ap),e(Ap,Rce),e(Rce,y0o),e(Ap,x0o),e(Ap,ij),e(ij,$0o),e(Ap,k0o),e(fe,S0o),e(fe,Lp),e(Lp,Pce),e(Pce,R0o),e(Lp,P0o),e(Lp,dj),e(dj,B0o),e(Lp,I0o),e(fe,N0o),e(fe,yp),e(yp,Bce),e(Bce,q0o),e(yp,j0o),e(yp,cj),e(cj,D0o),e(yp,G0o),e(fe,O0o),e(fe,xp),e(xp,Ice),e(Ice,V0o),e(xp,X0o),e(xp,fj),e(fj,z0o),e(xp,W0o),e(fe,Q0o),e(fe,$p),e($p,Nce),e(Nce,H0o),e($p,U0o),e($p,mj),e(mj,J0o),e($p,Y0o),e(fe,K0o),e(fe,kp),e(kp,qce),e(qce,Z0o),e(kp,eFo),e(kp,gj),e(gj,oFo),e(kp,rFo),e(fe,tFo),e(fe,Sp),e(Sp,jce),e(jce,aFo),e(Sp,nFo),e(Sp,hj),e(hj,sFo),e(Sp,lFo),e(fe,iFo),e(fe,Rp),e(Rp,Dce),e(Dce,dFo),e(Rp,cFo),e(Rp,pj),e(pj,fFo),e(Rp,mFo),e(fe,gFo),e(fe,Pp),e(Pp,Gce),e(Gce,hFo),e(Pp,pFo),e(Pp,_j),e(_j,_Fo),e(Pp,uFo),e(fe,bFo),e(fe,Bp),e(Bp,Oce),e(Oce,vFo),e(Bp,FFo),e(Bp,uj),e(uj,TFo),e(Bp,MFo),e(fe,EFo),e(fe,Ip),e(Ip,Vce),e(Vce,CFo),e(Ip,wFo),e(Ip,bj),e(bj,AFo),e(Ip,LFo),e(fe,yFo),e(fe,Np),e(Np,Xce),e(Xce,xFo),e(Np,$Fo),e(Np,vj),e(vj,kFo),e(Np,SFo),e(fe,RFo),e(fe,qp),e(qp,zce),e(zce,PFo),e(qp,BFo),e(qp,Fj),e(Fj,IFo),e(qp,NFo),e(fe,qFo),e(fe,jp),e(jp,Wce),e(Wce,jFo),e(jp,DFo),e(jp,Tj),e(Tj,GFo),e(jp,OFo),e(fe,VFo),e(fe,Dp),e(Dp,Qce),e(Qce,XFo),e(Dp,zFo),e(Dp,Mj),e(Mj,WFo),e(Dp,QFo),e(fe,HFo),e(fe,Gp),e(Gp,Hce),e(Hce,UFo),e(Gp,JFo),e(Gp,Ej),e(Ej,YFo),e(Gp,KFo),e(fe,ZFo),e(fe,Op),e(Op,Uce),e(Uce,eTo),e(Op,oTo),e(Op,Cj),e(Cj,rTo),e(Op,tTo),e(fe,aTo),e(fe,Vp),e(Vp,Jce),e(Jce,nTo),e(Vp,sTo),e(Vp,wj),e(wj,lTo),e(Vp,iTo),e(fe,dTo),e(fe,Xp),e(Xp,Yce),e(Yce,cTo),e(Xp,fTo),e(Xp,Aj),e(Aj,mTo),e(Xp,gTo),e(Je,hTo),M(zp,Je,null),e(Je,pTo),M(Wp,Je,null),e($o,_To),e($o,Qp),M(YL,Qp,null),e(Qp,uTo),e(Qp,Kce),e(Kce,bTo),b(f,Oze,u),b(f,Xi,u),e(Xi,Hp),e(Hp,Zce),M(KL,Zce,null),e(Xi,vTo),e(Xi,efe),e(efe,FTo),b(f,Vze,u),b(f,ko,u),M(ZL,ko,null),e(ko,TTo),e(ko,zi),e(zi,MTo),e(zi,Lj),e(Lj,ETo),e(zi,CTo),e(zi,yj),e(yj,wTo),e(zi,ATo),e(ko,LTo),e(ko,ey),e(ey,yTo),e(ey,ofe),e(ofe,xTo),e(ey,$To),e(ko,kTo),e(ko,it),M(oy,it,null),e(it,STo),e(it,rfe),e(rfe,RTo),e(it,PTo),e(it,Wi),e(Wi,BTo),e(Wi,tfe),e(tfe,ITo),e(Wi,NTo),e(Wi,xj),e(xj,qTo),e(Wi,jTo),e(it,DTo),M(Up,it,null),e(ko,GTo),e(ko,Ye),M(ry,Ye,null),e(Ye,OTo),e(Ye,afe),e(afe,VTo),e(Ye,XTo),e(Ye,Ia),e(Ia,zTo),e(Ia,nfe),e(nfe,WTo),e(Ia,QTo),e(Ia,sfe),e(sfe,HTo),e(Ia,UTo),e(Ia,lfe),e(lfe,JTo),e(Ia,YTo),e(Ye,KTo),e(Ye,y),e(y,Jp),e(Jp,ife),e(ife,ZTo),e(Jp,e8o),e(Jp,$j),e($j,o8o),e(Jp,r8o),e(y,t8o),e(y,Yp),e(Yp,dfe),e(dfe,a8o),e(Yp,n8o),e(Yp,kj),e(kj,s8o),e(Yp,l8o),e(y,i8o),e(y,Kp),e(Kp,cfe),e(cfe,d8o),e(Kp,c8o),e(Kp,Sj),e(Sj,f8o),e(Kp,m8o),e(y,g8o),e(y,Zp),e(Zp,ffe),e(ffe,h8o),e(Zp,p8o),e(Zp,Rj),e(Rj,_8o),e(Zp,u8o),e(y,b8o),e(y,e_),e(e_,mfe),e(mfe,v8o),e(e_,F8o),e(e_,Pj),e(Pj,T8o),e(e_,M8o),e(y,E8o),e(y,o_),e(o_,gfe),e(gfe,C8o),e(o_,w8o),e(o_,Bj),e(Bj,A8o),e(o_,L8o),e(y,y8o),e(y,r_),e(r_,hfe),e(hfe,x8o),e(r_,$8o),e(r_,Ij),e(Ij,k8o),e(r_,S8o),e(y,R8o),e(y,t_),e(t_,pfe),e(pfe,P8o),e(t_,B8o),e(t_,Nj),e(Nj,I8o),e(t_,N8o),e(y,q8o),e(y,a_),e(a_,_fe),e(_fe,j8o),e(a_,D8o),e(a_,qj),e(qj,G8o),e(a_,O8o),e(y,V8o),e(y,n_),e(n_,ufe),e(ufe,X8o),e(n_,z8o),e(n_,jj),e(jj,W8o),e(n_,Q8o),e(y,H8o),e(y,s_),e(s_,bfe),e(bfe,U8o),e(s_,J8o),e(s_,Dj),e(Dj,Y8o),e(s_,K8o),e(y,Z8o),e(y,l_),e(l_,vfe),e(vfe,eMo),e(l_,oMo),e(l_,Gj),e(Gj,rMo),e(l_,tMo),e(y,aMo),e(y,i_),e(i_,Ffe),e(Ffe,nMo),e(i_,sMo),e(i_,Oj),e(Oj,lMo),e(i_,iMo),e(y,dMo),e(y,d_),e(d_,Tfe),e(Tfe,cMo),e(d_,fMo),e(d_,Vj),e(Vj,mMo),e(d_,gMo),e(y,hMo),e(y,c_),e(c_,Mfe),e(Mfe,pMo),e(c_,_Mo),e(c_,Xj),e(Xj,uMo),e(c_,bMo),e(y,vMo),e(y,f_),e(f_,Efe),e(Efe,FMo),e(f_,TMo),e(f_,zj),e(zj,MMo),e(f_,EMo),e(y,CMo),e(y,m_),e(m_,Cfe),e(Cfe,wMo),e(m_,AMo),e(m_,Wj),e(Wj,LMo),e(m_,yMo),e(y,xMo),e(y,g_),e(g_,wfe),e(wfe,$Mo),e(g_,kMo),e(g_,Qj),e(Qj,SMo),e(g_,RMo),e(y,PMo),e(y,h_),e(h_,Afe),e(Afe,BMo),e(h_,IMo),e(h_,Hj),e(Hj,NMo),e(h_,qMo),e(y,jMo),e(y,p_),e(p_,Lfe),e(Lfe,DMo),e(p_,GMo),e(p_,Uj),e(Uj,OMo),e(p_,VMo),e(y,XMo),e(y,__),e(__,yfe),e(yfe,zMo),e(__,WMo),e(__,Jj),e(Jj,QMo),e(__,HMo),e(y,UMo),e(y,u_),e(u_,xfe),e(xfe,JMo),e(u_,YMo),e(u_,Yj),e(Yj,KMo),e(u_,ZMo),e(y,eEo),e(y,b_),e(b_,$fe),e($fe,oEo),e(b_,rEo),e(b_,Kj),e(Kj,tEo),e(b_,aEo),e(y,nEo),e(y,v_),e(v_,kfe),e(kfe,sEo),e(v_,lEo),e(v_,Zj),e(Zj,iEo),e(v_,dEo),e(y,cEo),e(y,F_),e(F_,Sfe),e(Sfe,fEo),e(F_,mEo),e(F_,eD),e(eD,gEo),e(F_,hEo),e(y,pEo),e(y,T_),e(T_,Rfe),e(Rfe,_Eo),e(T_,uEo),e(T_,oD),e(oD,bEo),e(T_,vEo),e(y,FEo),e(y,M_),e(M_,Pfe),e(Pfe,TEo),e(M_,MEo),e(M_,rD),e(rD,EEo),e(M_,CEo),e(y,wEo),e(y,E_),e(E_,Bfe),e(Bfe,AEo),e(E_,LEo),e(E_,tD),e(tD,yEo),e(E_,xEo),e(y,$Eo),e(y,C_),e(C_,Ife),e(Ife,kEo),e(C_,SEo),e(C_,aD),e(aD,REo),e(C_,PEo),e(y,BEo),e(y,w_),e(w_,Nfe),e(Nfe,IEo),e(w_,NEo),e(w_,nD),e(nD,qEo),e(w_,jEo),e(y,DEo),e(y,A_),e(A_,qfe),e(qfe,GEo),e(A_,OEo),e(A_,sD),e(sD,VEo),e(A_,XEo),e(y,zEo),e(y,L_),e(L_,jfe),e(jfe,WEo),e(L_,QEo),e(L_,lD),e(lD,HEo),e(L_,UEo),e(y,JEo),e(y,y_),e(y_,Dfe),e(Dfe,YEo),e(y_,KEo),e(y_,iD),e(iD,ZEo),e(y_,eCo),e(y,oCo),e(y,x_),e(x_,Gfe),e(Gfe,rCo),e(x_,tCo),e(x_,dD),e(dD,aCo),e(x_,nCo),e(y,sCo),e(y,Js),e(Js,Ofe),e(Ofe,lCo),e(Js,iCo),e(Js,cD),e(cD,dCo),e(Js,cCo),e(Js,fD),e(fD,fCo),e(Js,mCo),e(y,gCo),e(y,$_),e($_,Vfe),e(Vfe,hCo),e($_,pCo),e($_,mD),e(mD,_Co),e($_,uCo),e(y,bCo),e(y,k_),e(k_,Xfe),e(Xfe,vCo),e(k_,FCo),e(k_,gD),e(gD,TCo),e(k_,MCo),e(y,ECo),e(y,S_),e(S_,zfe),e(zfe,CCo),e(S_,wCo),e(S_,hD),e(hD,ACo),e(S_,LCo),e(y,yCo),e(y,R_),e(R_,Wfe),e(Wfe,xCo),e(R_,$Co),e(R_,pD),e(pD,kCo),e(R_,SCo),e(y,RCo),e(y,P_),e(P_,Qfe),e(Qfe,PCo),e(P_,BCo),e(P_,_D),e(_D,ICo),e(P_,NCo),e(y,qCo),e(y,B_),e(B_,Hfe),e(Hfe,jCo),e(B_,DCo),e(B_,uD),e(uD,GCo),e(B_,OCo),e(y,VCo),e(y,I_),e(I_,Ufe),e(Ufe,XCo),e(I_,zCo),e(I_,bD),e(bD,WCo),e(I_,QCo),e(y,HCo),e(y,N_),e(N_,Jfe),e(Jfe,UCo),e(N_,JCo),e(N_,vD),e(vD,YCo),e(N_,KCo),e(y,ZCo),e(y,q_),e(q_,Yfe),e(Yfe,e5o),e(q_,o5o),e(q_,FD),e(FD,r5o),e(q_,t5o),e(y,a5o),e(y,j_),e(j_,Kfe),e(Kfe,n5o),e(j_,s5o),e(j_,TD),e(TD,l5o),e(j_,i5o),e(y,d5o),e(y,D_),e(D_,Zfe),e(Zfe,c5o),e(D_,f5o),e(D_,MD),e(MD,m5o),e(D_,g5o),e(y,h5o),e(y,G_),e(G_,eme),e(eme,p5o),e(G_,_5o),e(G_,ED),e(ED,u5o),e(G_,b5o),e(y,v5o),e(y,O_),e(O_,ome),e(ome,F5o),e(O_,T5o),e(O_,CD),e(CD,M5o),e(O_,E5o),e(y,C5o),e(y,V_),e(V_,rme),e(rme,w5o),e(V_,A5o),e(V_,wD),e(wD,L5o),e(V_,y5o),e(y,x5o),e(y,X_),e(X_,tme),e(tme,$5o),e(X_,k5o),e(X_,AD),e(AD,S5o),e(X_,R5o),e(y,P5o),e(y,z_),e(z_,ame),e(ame,B5o),e(z_,I5o),e(z_,LD),e(LD,N5o),e(z_,q5o),e(y,j5o),e(y,W_),e(W_,nme),e(nme,D5o),e(W_,G5o),e(W_,yD),e(yD,O5o),e(W_,V5o),e(y,X5o),e(y,Q_),e(Q_,sme),e(sme,z5o),e(Q_,W5o),e(Q_,xD),e(xD,Q5o),e(Q_,H5o),e(y,U5o),e(y,H_),e(H_,lme),e(lme,J5o),e(H_,Y5o),e(H_,$D),e($D,K5o),e(H_,Z5o),e(y,e3o),e(y,U_),e(U_,ime),e(ime,o3o),e(U_,r3o),e(U_,kD),e(kD,t3o),e(U_,a3o),e(y,n3o),e(y,J_),e(J_,dme),e(dme,s3o),e(J_,l3o),e(J_,SD),e(SD,i3o),e(J_,d3o),e(y,c3o),e(y,Y_),e(Y_,cme),e(cme,f3o),e(Y_,m3o),e(Y_,RD),e(RD,g3o),e(Y_,h3o),e(y,p3o),e(y,K_),e(K_,fme),e(fme,_3o),e(K_,u3o),e(K_,PD),e(PD,b3o),e(K_,v3o),e(y,F3o),e(y,Z_),e(Z_,mme),e(mme,T3o),e(Z_,M3o),e(Z_,BD),e(BD,E3o),e(Z_,C3o),e(y,w3o),e(y,eu),e(eu,gme),e(gme,A3o),e(eu,L3o),e(eu,ID),e(ID,y3o),e(eu,x3o),e(y,$3o),e(y,ou),e(ou,hme),e(hme,k3o),e(ou,S3o),e(ou,ND),e(ND,R3o),e(ou,P3o),e(y,B3o),e(y,ru),e(ru,pme),e(pme,I3o),e(ru,N3o),e(ru,qD),e(qD,q3o),e(ru,j3o),e(y,D3o),e(y,tu),e(tu,_me),e(_me,G3o),e(tu,O3o),e(tu,jD),e(jD,V3o),e(tu,X3o),e(y,z3o),e(y,au),e(au,ume),e(ume,W3o),e(au,Q3o),e(au,DD),e(DD,H3o),e(au,U3o),e(y,J3o),e(y,nu),e(nu,bme),e(bme,Y3o),e(nu,K3o),e(nu,GD),e(GD,Z3o),e(nu,ewo),e(y,owo),e(y,su),e(su,vme),e(vme,rwo),e(su,two),e(su,OD),e(OD,awo),e(su,nwo),e(y,swo),e(y,lu),e(lu,Fme),e(Fme,lwo),e(lu,iwo),e(lu,VD),e(VD,dwo),e(lu,cwo),e(y,fwo),e(y,iu),e(iu,Tme),e(Tme,mwo),e(iu,gwo),e(iu,XD),e(XD,hwo),e(iu,pwo),e(y,_wo),e(y,du),e(du,Mme),e(Mme,uwo),e(du,bwo),e(du,zD),e(zD,vwo),e(du,Fwo),e(y,Two),e(y,cu),e(cu,Eme),e(Eme,Mwo),e(cu,Ewo),e(cu,WD),e(WD,Cwo),e(cu,wwo),e(y,Awo),e(y,fu),e(fu,Cme),e(Cme,Lwo),e(fu,ywo),e(fu,QD),e(QD,xwo),e(fu,$wo),e(y,kwo),e(y,mu),e(mu,wme),e(wme,Swo),e(mu,Rwo),e(mu,HD),e(HD,Pwo),e(mu,Bwo),e(y,Iwo),e(y,gu),e(gu,Ame),e(Ame,Nwo),e(gu,qwo),e(gu,UD),e(UD,jwo),e(gu,Dwo),e(y,Gwo),e(y,hu),e(hu,Lme),e(Lme,Owo),e(hu,Vwo),e(hu,JD),e(JD,Xwo),e(hu,zwo),e(y,Wwo),e(y,pu),e(pu,yme),e(yme,Qwo),e(pu,Hwo),e(pu,YD),e(YD,Uwo),e(pu,Jwo),e(y,Ywo),e(y,_u),e(_u,xme),e(xme,Kwo),e(_u,Zwo),e(_u,KD),e(KD,e6o),e(_u,o6o),e(y,r6o),e(y,uu),e(uu,$me),e($me,t6o),e(uu,a6o),e(uu,ZD),e(ZD,n6o),e(uu,s6o),e(y,l6o),e(y,bu),e(bu,kme),e(kme,i6o),e(bu,d6o),e(bu,eG),e(eG,c6o),e(bu,f6o),e(y,m6o),e(y,vu),e(vu,Sme),e(Sme,g6o),e(vu,h6o),e(vu,oG),e(oG,p6o),e(vu,_6o),e(y,u6o),e(y,Fu),e(Fu,Rme),e(Rme,b6o),e(Fu,v6o),e(Fu,rG),e(rG,F6o),e(Fu,T6o),e(y,M6o),e(y,Tu),e(Tu,Pme),e(Pme,E6o),e(Tu,C6o),e(Tu,tG),e(tG,w6o),e(Tu,A6o),e(y,L6o),e(y,Mu),e(Mu,Bme),e(Bme,y6o),e(Mu,x6o),e(Mu,aG),e(aG,$6o),e(Mu,k6o),e(y,S6o),e(y,Eu),e(Eu,Ime),e(Ime,R6o),e(Eu,P6o),e(Eu,nG),e(nG,B6o),e(Eu,I6o),e(y,N6o),e(y,Cu),e(Cu,Nme),e(Nme,q6o),e(Cu,j6o),e(Cu,sG),e(sG,D6o),e(Cu,G6o),e(y,O6o),e(y,wu),e(wu,qme),e(qme,V6o),e(wu,X6o),e(wu,lG),e(lG,z6o),e(wu,W6o),e(y,Q6o),e(y,Au),e(Au,jme),e(jme,H6o),e(Au,U6o),e(Au,iG),e(iG,J6o),e(Au,Y6o),e(y,K6o),e(y,Lu),e(Lu,Dme),e(Dme,Z6o),e(Lu,eAo),e(Lu,dG),e(dG,oAo),e(Lu,rAo),e(y,tAo),e(y,yu),e(yu,Gme),e(Gme,aAo),e(yu,nAo),e(yu,cG),e(cG,sAo),e(yu,lAo),e(y,iAo),e(y,xu),e(xu,Ome),e(Ome,dAo),e(xu,cAo),e(xu,fG),e(fG,fAo),e(xu,mAo),e(y,gAo),e(y,$u),e($u,Vme),e(Vme,hAo),e($u,pAo),e($u,mG),e(mG,_Ao),e($u,uAo),e(y,bAo),e(y,ku),e(ku,Xme),e(Xme,vAo),e(ku,FAo),e(ku,gG),e(gG,TAo),e(ku,MAo),e(y,EAo),e(y,Su),e(Su,zme),e(zme,CAo),e(Su,wAo),e(Su,hG),e(hG,AAo),e(Su,LAo),e(y,yAo),e(y,Ru),e(Ru,Wme),e(Wme,xAo),e(Ru,$Ao),e(Ru,pG),e(pG,kAo),e(Ru,SAo),e(y,RAo),e(y,Pu),e(Pu,Qme),e(Qme,PAo),e(Pu,BAo),e(Pu,_G),e(_G,IAo),e(Pu,NAo),e(y,qAo),e(y,Bu),e(Bu,Hme),e(Hme,jAo),e(Bu,DAo),e(Bu,uG),e(uG,GAo),e(Bu,OAo),e(y,VAo),e(y,Iu),e(Iu,Ume),e(Ume,XAo),e(Iu,zAo),e(Iu,bG),e(bG,WAo),e(Iu,QAo),e(y,HAo),e(y,Nu),e(Nu,Jme),e(Jme,UAo),e(Nu,JAo),e(Nu,vG),e(vG,YAo),e(Nu,KAo),e(y,ZAo),e(y,qu),e(qu,Yme),e(Yme,e7o),e(qu,o7o),e(qu,FG),e(FG,r7o),e(qu,t7o),e(y,a7o),e(y,ju),e(ju,Kme),e(Kme,n7o),e(ju,s7o),e(ju,TG),e(TG,l7o),e(ju,i7o),e(y,d7o),e(y,Du),e(Du,Zme),e(Zme,c7o),e(Du,f7o),e(Du,MG),e(MG,m7o),e(Du,g7o),e(y,h7o),e(y,Gu),e(Gu,ege),e(ege,p7o),e(Gu,_7o),e(Gu,EG),e(EG,u7o),e(Gu,b7o),e(y,v7o),e(y,Ou),e(Ou,oge),e(oge,F7o),e(Ou,T7o),e(Ou,CG),e(CG,M7o),e(Ou,E7o),e(y,C7o),e(y,Vu),e(Vu,rge),e(rge,w7o),e(Vu,A7o),e(Vu,wG),e(wG,L7o),e(Vu,y7o),e(y,x7o),e(y,Xu),e(Xu,tge),e(tge,$7o),e(Xu,k7o),e(Xu,AG),e(AG,S7o),e(Xu,R7o),e(y,P7o),e(y,zu),e(zu,age),e(age,B7o),e(zu,I7o),e(zu,LG),e(LG,N7o),e(zu,q7o),e(y,j7o),e(y,Wu),e(Wu,nge),e(nge,D7o),e(Wu,G7o),e(Wu,yG),e(yG,O7o),e(Wu,V7o),e(y,X7o),e(y,Qu),e(Qu,sge),e(sge,z7o),e(Qu,W7o),e(Qu,xG),e(xG,Q7o),e(Qu,H7o),e(y,U7o),e(y,Hu),e(Hu,lge),e(lge,J7o),e(Hu,Y7o),e(Hu,$G),e($G,K7o),e(Hu,Z7o),e(y,eLo),e(y,Uu),e(Uu,ige),e(ige,oLo),e(Uu,rLo),e(Uu,kG),e(kG,tLo),e(Uu,aLo),e(y,nLo),e(y,Ju),e(Ju,dge),e(dge,sLo),e(Ju,lLo),e(Ju,SG),e(SG,iLo),e(Ju,dLo),e(y,cLo),e(y,Yu),e(Yu,cge),e(cge,fLo),e(Yu,mLo),e(Yu,RG),e(RG,gLo),e(Yu,hLo),e(y,pLo),e(y,Ku),e(Ku,fge),e(fge,_Lo),e(Ku,uLo),e(Ku,PG),e(PG,bLo),e(Ku,vLo),e(y,FLo),e(y,Zu),e(Zu,mge),e(mge,TLo),e(Zu,MLo),e(Zu,BG),e(BG,ELo),e(Zu,CLo),e(y,wLo),e(y,e2),e(e2,gge),e(gge,ALo),e(e2,LLo),e(e2,IG),e(IG,yLo),e(e2,xLo),e(Ye,$Lo),e(Ye,o2),e(o2,kLo),e(o2,hge),e(hge,SLo),e(o2,RLo),e(o2,pge),e(pge,PLo),e(Ye,BLo),M(r2,Ye,null),b(f,Xze,u),b(f,Qi,u),e(Qi,t2),e(t2,_ge),M(ty,_ge,null),e(Qi,ILo),e(Qi,uge),e(uge,NLo),b(f,zze,u),b(f,So,u),M(ay,So,null),e(So,qLo),e(So,Hi),e(Hi,jLo),e(Hi,NG),e(NG,DLo),e(Hi,GLo),e(Hi,qG),e(qG,OLo),e(Hi,VLo),e(So,XLo),e(So,ny),e(ny,zLo),e(ny,bge),e(bge,WLo),e(ny,QLo),e(So,HLo),e(So,dt),M(sy,dt,null),e(dt,ULo),e(dt,vge),e(vge,JLo),e(dt,YLo),e(dt,Ui),e(Ui,KLo),e(Ui,Fge),e(Fge,ZLo),e(Ui,eyo),e(Ui,jG),e(jG,oyo),e(Ui,ryo),e(dt,tyo),M(a2,dt,null),e(So,ayo),e(So,Ke),M(ly,Ke,null),e(Ke,nyo),e(Ke,Tge),e(Tge,syo),e(Ke,lyo),e(Ke,Na),e(Na,iyo),e(Na,Mge),e(Mge,dyo),e(Na,cyo),e(Na,Ege),e(Ege,fyo),e(Na,myo),e(Na,Cge),e(Cge,gyo),e(Na,hyo),e(Ke,pyo),e(Ke,G),e(G,n2),e(n2,wge),e(wge,_yo),e(n2,uyo),e(n2,DG),e(DG,byo),e(n2,vyo),e(G,Fyo),e(G,s2),e(s2,Age),e(Age,Tyo),e(s2,Myo),e(s2,GG),e(GG,Eyo),e(s2,Cyo),e(G,wyo),e(G,l2),e(l2,Lge),e(Lge,Ayo),e(l2,Lyo),e(l2,OG),e(OG,yyo),e(l2,xyo),e(G,$yo),e(G,i2),e(i2,yge),e(yge,kyo),e(i2,Syo),e(i2,VG),e(VG,Ryo),e(i2,Pyo),e(G,Byo),e(G,d2),e(d2,xge),e(xge,Iyo),e(d2,Nyo),e(d2,XG),e(XG,qyo),e(d2,jyo),e(G,Dyo),e(G,c2),e(c2,$ge),e($ge,Gyo),e(c2,Oyo),e(c2,zG),e(zG,Vyo),e(c2,Xyo),e(G,zyo),e(G,f2),e(f2,kge),e(kge,Wyo),e(f2,Qyo),e(f2,WG),e(WG,Hyo),e(f2,Uyo),e(G,Jyo),e(G,m2),e(m2,Sge),e(Sge,Yyo),e(m2,Kyo),e(m2,QG),e(QG,Zyo),e(m2,e9o),e(G,o9o),e(G,g2),e(g2,Rge),e(Rge,r9o),e(g2,t9o),e(g2,HG),e(HG,a9o),e(g2,n9o),e(G,s9o),e(G,h2),e(h2,Pge),e(Pge,l9o),e(h2,i9o),e(h2,UG),e(UG,d9o),e(h2,c9o),e(G,f9o),e(G,p2),e(p2,Bge),e(Bge,m9o),e(p2,g9o),e(p2,JG),e(JG,h9o),e(p2,p9o),e(G,_9o),e(G,_2),e(_2,Ige),e(Ige,u9o),e(_2,b9o),e(_2,YG),e(YG,v9o),e(_2,F9o),e(G,T9o),e(G,u2),e(u2,Nge),e(Nge,M9o),e(u2,E9o),e(u2,KG),e(KG,C9o),e(u2,w9o),e(G,A9o),e(G,b2),e(b2,qge),e(qge,L9o),e(b2,y9o),e(b2,ZG),e(ZG,x9o),e(b2,$9o),e(G,k9o),e(G,v2),e(v2,jge),e(jge,S9o),e(v2,R9o),e(v2,eO),e(eO,P9o),e(v2,B9o),e(G,I9o),e(G,F2),e(F2,Dge),e(Dge,N9o),e(F2,q9o),e(F2,oO),e(oO,j9o),e(F2,D9o),e(G,G9o),e(G,T2),e(T2,Gge),e(Gge,O9o),e(T2,V9o),e(T2,rO),e(rO,X9o),e(T2,z9o),e(G,W9o),e(G,M2),e(M2,Oge),e(Oge,Q9o),e(M2,H9o),e(M2,tO),e(tO,U9o),e(M2,J9o),e(G,Y9o),e(G,E2),e(E2,Vge),e(Vge,K9o),e(E2,Z9o),e(E2,aO),e(aO,exo),e(E2,oxo),e(G,rxo),e(G,C2),e(C2,Xge),e(Xge,txo),e(C2,axo),e(C2,nO),e(nO,nxo),e(C2,sxo),e(G,lxo),e(G,w2),e(w2,zge),e(zge,ixo),e(w2,dxo),e(w2,sO),e(sO,cxo),e(w2,fxo),e(G,mxo),e(G,A2),e(A2,Wge),e(Wge,gxo),e(A2,hxo),e(A2,lO),e(lO,pxo),e(A2,_xo),e(G,uxo),e(G,L2),e(L2,Qge),e(Qge,bxo),e(L2,vxo),e(L2,iO),e(iO,Fxo),e(L2,Txo),e(G,Mxo),e(G,y2),e(y2,Hge),e(Hge,Exo),e(y2,Cxo),e(y2,dO),e(dO,wxo),e(y2,Axo),e(G,Lxo),e(G,x2),e(x2,Uge),e(Uge,yxo),e(x2,xxo),e(x2,cO),e(cO,$xo),e(x2,kxo),e(G,Sxo),e(G,$2),e($2,Jge),e(Jge,Rxo),e($2,Pxo),e($2,fO),e(fO,Bxo),e($2,Ixo),e(G,Nxo),e(G,k2),e(k2,Yge),e(Yge,qxo),e(k2,jxo),e(k2,mO),e(mO,Dxo),e(k2,Gxo),e(G,Oxo),e(G,S2),e(S2,Kge),e(Kge,Vxo),e(S2,Xxo),e(S2,gO),e(gO,zxo),e(S2,Wxo),e(G,Qxo),e(G,R2),e(R2,Zge),e(Zge,Hxo),e(R2,Uxo),e(R2,hO),e(hO,Jxo),e(R2,Yxo),e(G,Kxo),e(G,P2),e(P2,ehe),e(ehe,Zxo),e(P2,e$o),e(P2,pO),e(pO,o$o),e(P2,r$o),e(G,t$o),e(G,B2),e(B2,ohe),e(ohe,a$o),e(B2,n$o),e(B2,_O),e(_O,s$o),e(B2,l$o),e(G,i$o),e(G,I2),e(I2,rhe),e(rhe,d$o),e(I2,c$o),e(I2,uO),e(uO,f$o),e(I2,m$o),e(G,g$o),e(G,N2),e(N2,the),e(the,h$o),e(N2,p$o),e(N2,bO),e(bO,_$o),e(N2,u$o),e(G,b$o),e(G,q2),e(q2,ahe),e(ahe,v$o),e(q2,F$o),e(q2,vO),e(vO,T$o),e(q2,M$o),e(G,E$o),e(G,j2),e(j2,nhe),e(nhe,C$o),e(j2,w$o),e(j2,FO),e(FO,A$o),e(j2,L$o),e(G,y$o),e(G,D2),e(D2,she),e(she,x$o),e(D2,$$o),e(D2,TO),e(TO,k$o),e(D2,S$o),e(G,R$o),e(G,G2),e(G2,lhe),e(lhe,P$o),e(G2,B$o),e(G2,MO),e(MO,I$o),e(G2,N$o),e(G,q$o),e(G,O2),e(O2,ihe),e(ihe,j$o),e(O2,D$o),e(O2,EO),e(EO,G$o),e(O2,O$o),e(G,V$o),e(G,V2),e(V2,dhe),e(dhe,X$o),e(V2,z$o),e(V2,CO),e(CO,W$o),e(V2,Q$o),e(G,H$o),e(G,X2),e(X2,che),e(che,U$o),e(X2,J$o),e(X2,wO),e(wO,Y$o),e(X2,K$o),e(G,Z$o),e(G,z2),e(z2,fhe),e(fhe,eko),e(z2,oko),e(z2,AO),e(AO,rko),e(z2,tko),e(G,ako),e(G,W2),e(W2,mhe),e(mhe,nko),e(W2,sko),e(W2,LO),e(LO,lko),e(W2,iko),e(G,dko),e(G,Q2),e(Q2,ghe),e(ghe,cko),e(Q2,fko),e(Q2,yO),e(yO,mko),e(Q2,gko),e(G,hko),e(G,H2),e(H2,hhe),e(hhe,pko),e(H2,_ko),e(H2,xO),e(xO,uko),e(H2,bko),e(G,vko),e(G,U2),e(U2,phe),e(phe,Fko),e(U2,Tko),e(U2,$O),e($O,Mko),e(U2,Eko),e(G,Cko),e(G,J2),e(J2,_he),e(_he,wko),e(J2,Ako),e(J2,kO),e(kO,Lko),e(J2,yko),e(Ke,xko),e(Ke,Y2),e(Y2,$ko),e(Y2,uhe),e(uhe,kko),e(Y2,Sko),e(Y2,bhe),e(bhe,Rko),e(Ke,Pko),M(K2,Ke,null),b(f,Wze,u),b(f,Ji,u),e(Ji,Z2),e(Z2,vhe),M(iy,vhe,null),e(Ji,Bko),e(Ji,Fhe),e(Fhe,Iko),b(f,Qze,u),b(f,Ro,u),M(dy,Ro,null),e(Ro,Nko),e(Ro,Yi),e(Yi,qko),e(Yi,SO),e(SO,jko),e(Yi,Dko),e(Yi,RO),e(RO,Gko),e(Yi,Oko),e(Ro,Vko),e(Ro,cy),e(cy,Xko),e(cy,The),e(The,zko),e(cy,Wko),e(Ro,Qko),e(Ro,ct),M(fy,ct,null),e(ct,Hko),e(ct,Mhe),e(Mhe,Uko),e(ct,Jko),e(ct,Ki),e(Ki,Yko),e(Ki,Ehe),e(Ehe,Kko),e(Ki,Zko),e(Ki,PO),e(PO,eSo),e(Ki,oSo),e(ct,rSo),M(e1,ct,null),e(Ro,tSo),e(Ro,Ze),M(my,Ze,null),e(Ze,aSo),e(Ze,Che),e(Che,nSo),e(Ze,sSo),e(Ze,qa),e(qa,lSo),e(qa,whe),e(whe,iSo),e(qa,dSo),e(qa,Ahe),e(Ahe,cSo),e(qa,fSo),e(qa,Lhe),e(Lhe,mSo),e(qa,gSo),e(Ze,hSo),e(Ze,z),e(z,o1),e(o1,yhe),e(yhe,pSo),e(o1,_So),e(o1,BO),e(BO,uSo),e(o1,bSo),e(z,vSo),e(z,r1),e(r1,xhe),e(xhe,FSo),e(r1,TSo),e(r1,IO),e(IO,MSo),e(r1,ESo),e(z,CSo),e(z,t1),e(t1,$he),e($he,wSo),e(t1,ASo),e(t1,NO),e(NO,LSo),e(t1,ySo),e(z,xSo),e(z,a1),e(a1,khe),e(khe,$So),e(a1,kSo),e(a1,qO),e(qO,SSo),e(a1,RSo),e(z,PSo),e(z,n1),e(n1,She),e(She,BSo),e(n1,ISo),e(n1,jO),e(jO,NSo),e(n1,qSo),e(z,jSo),e(z,s1),e(s1,Rhe),e(Rhe,DSo),e(s1,GSo),e(s1,DO),e(DO,OSo),e(s1,VSo),e(z,XSo),e(z,l1),e(l1,Phe),e(Phe,zSo),e(l1,WSo),e(l1,GO),e(GO,QSo),e(l1,HSo),e(z,USo),e(z,i1),e(i1,Bhe),e(Bhe,JSo),e(i1,YSo),e(i1,OO),e(OO,KSo),e(i1,ZSo),e(z,eRo),e(z,d1),e(d1,Ihe),e(Ihe,oRo),e(d1,rRo),e(d1,VO),e(VO,tRo),e(d1,aRo),e(z,nRo),e(z,c1),e(c1,Nhe),e(Nhe,sRo),e(c1,lRo),e(c1,XO),e(XO,iRo),e(c1,dRo),e(z,cRo),e(z,f1),e(f1,qhe),e(qhe,fRo),e(f1,mRo),e(f1,zO),e(zO,gRo),e(f1,hRo),e(z,pRo),e(z,m1),e(m1,jhe),e(jhe,_Ro),e(m1,uRo),e(m1,WO),e(WO,bRo),e(m1,vRo),e(z,FRo),e(z,g1),e(g1,Dhe),e(Dhe,TRo),e(g1,MRo),e(g1,QO),e(QO,ERo),e(g1,CRo),e(z,wRo),e(z,h1),e(h1,Ghe),e(Ghe,ARo),e(h1,LRo),e(h1,HO),e(HO,yRo),e(h1,xRo),e(z,$Ro),e(z,p1),e(p1,Ohe),e(Ohe,kRo),e(p1,SRo),e(p1,UO),e(UO,RRo),e(p1,PRo),e(z,BRo),e(z,_1),e(_1,Vhe),e(Vhe,IRo),e(_1,NRo),e(_1,JO),e(JO,qRo),e(_1,jRo),e(z,DRo),e(z,u1),e(u1,Xhe),e(Xhe,GRo),e(u1,ORo),e(u1,YO),e(YO,VRo),e(u1,XRo),e(z,zRo),e(z,b1),e(b1,zhe),e(zhe,WRo),e(b1,QRo),e(b1,KO),e(KO,HRo),e(b1,URo),e(z,JRo),e(z,v1),e(v1,Whe),e(Whe,YRo),e(v1,KRo),e(v1,ZO),e(ZO,ZRo),e(v1,ePo),e(z,oPo),e(z,F1),e(F1,Qhe),e(Qhe,rPo),e(F1,tPo),e(F1,eV),e(eV,aPo),e(F1,nPo),e(z,sPo),e(z,T1),e(T1,Hhe),e(Hhe,lPo),e(T1,iPo),e(T1,oV),e(oV,dPo),e(T1,cPo),e(z,fPo),e(z,M1),e(M1,Uhe),e(Uhe,mPo),e(M1,gPo),e(M1,rV),e(rV,hPo),e(M1,pPo),e(z,_Po),e(z,E1),e(E1,Jhe),e(Jhe,uPo),e(E1,bPo),e(E1,tV),e(tV,vPo),e(E1,FPo),e(z,TPo),e(z,C1),e(C1,Yhe),e(Yhe,MPo),e(C1,EPo),e(C1,aV),e(aV,CPo),e(C1,wPo),e(z,APo),e(z,w1),e(w1,Khe),e(Khe,LPo),e(w1,yPo),e(w1,nV),e(nV,xPo),e(w1,$Po),e(z,kPo),e(z,A1),e(A1,Zhe),e(Zhe,SPo),e(A1,RPo),e(A1,sV),e(sV,PPo),e(A1,BPo),e(z,IPo),e(z,L1),e(L1,epe),e(epe,NPo),e(L1,qPo),e(L1,lV),e(lV,jPo),e(L1,DPo),e(z,GPo),e(z,y1),e(y1,ope),e(ope,OPo),e(y1,VPo),e(y1,iV),e(iV,XPo),e(y1,zPo),e(z,WPo),e(z,x1),e(x1,rpe),e(rpe,QPo),e(x1,HPo),e(x1,dV),e(dV,UPo),e(x1,JPo),e(z,YPo),e(z,$1),e($1,tpe),e(tpe,KPo),e($1,ZPo),e($1,cV),e(cV,eBo),e($1,oBo),e(z,rBo),e(z,k1),e(k1,ape),e(ape,tBo),e(k1,aBo),e(k1,fV),e(fV,nBo),e(k1,sBo),e(z,lBo),e(z,S1),e(S1,npe),e(npe,iBo),e(S1,dBo),e(S1,mV),e(mV,cBo),e(S1,fBo),e(z,mBo),e(z,R1),e(R1,spe),e(spe,gBo),e(R1,hBo),e(R1,gV),e(gV,pBo),e(R1,_Bo),e(z,uBo),e(z,P1),e(P1,lpe),e(lpe,bBo),e(P1,vBo),e(P1,hV),e(hV,FBo),e(P1,TBo),e(z,MBo),e(z,B1),e(B1,ipe),e(ipe,EBo),e(B1,CBo),e(B1,pV),e(pV,wBo),e(B1,ABo),e(z,LBo),e(z,I1),e(I1,dpe),e(dpe,yBo),e(I1,xBo),e(I1,_V),e(_V,$Bo),e(I1,kBo),e(z,SBo),e(z,N1),e(N1,cpe),e(cpe,RBo),e(N1,PBo),e(N1,uV),e(uV,BBo),e(N1,IBo),e(z,NBo),e(z,q1),e(q1,fpe),e(fpe,qBo),e(q1,jBo),e(q1,bV),e(bV,DBo),e(q1,GBo),e(z,OBo),e(z,j1),e(j1,mpe),e(mpe,VBo),e(j1,XBo),e(j1,vV),e(vV,zBo),e(j1,WBo),e(z,QBo),e(z,D1),e(D1,gpe),e(gpe,HBo),e(D1,UBo),e(D1,FV),e(FV,JBo),e(D1,YBo),e(Ze,KBo),e(Ze,G1),e(G1,ZBo),e(G1,hpe),e(hpe,eIo),e(G1,oIo),e(G1,ppe),e(ppe,rIo),e(Ze,tIo),M(O1,Ze,null),b(f,Hze,u),b(f,Zi,u),e(Zi,V1),e(V1,_pe),M(gy,_pe,null),e(Zi,aIo),e(Zi,upe),e(upe,nIo),b(f,Uze,u),b(f,Po,u),M(hy,Po,null),e(Po,sIo),e(Po,ed),e(ed,lIo),e(ed,TV),e(TV,iIo),e(ed,dIo),e(ed,MV),e(MV,cIo),e(ed,fIo),e(Po,mIo),e(Po,py),e(py,gIo),e(py,bpe),e(bpe,hIo),e(py,pIo),e(Po,_Io),e(Po,ft),M(_y,ft,null),e(ft,uIo),e(ft,vpe),e(vpe,bIo),e(ft,vIo),e(ft,od),e(od,FIo),e(od,Fpe),e(Fpe,TIo),e(od,MIo),e(od,EV),e(EV,EIo),e(od,CIo),e(ft,wIo),M(X1,ft,null),e(Po,AIo),e(Po,eo),M(uy,eo,null),e(eo,LIo),e(eo,Tpe),e(Tpe,yIo),e(eo,xIo),e(eo,ja),e(ja,$Io),e(ja,Mpe),e(Mpe,kIo),e(ja,SIo),e(ja,Epe),e(Epe,RIo),e(ja,PIo),e(ja,Cpe),e(Cpe,BIo),e(ja,IIo),e(eo,NIo),e(eo,Q),e(Q,z1),e(z1,wpe),e(wpe,qIo),e(z1,jIo),e(z1,CV),e(CV,DIo),e(z1,GIo),e(Q,OIo),e(Q,W1),e(W1,Ape),e(Ape,VIo),e(W1,XIo),e(W1,wV),e(wV,zIo),e(W1,WIo),e(Q,QIo),e(Q,Q1),e(Q1,Lpe),e(Lpe,HIo),e(Q1,UIo),e(Q1,AV),e(AV,JIo),e(Q1,YIo),e(Q,KIo),e(Q,H1),e(H1,ype),e(ype,ZIo),e(H1,eNo),e(H1,LV),e(LV,oNo),e(H1,rNo),e(Q,tNo),e(Q,U1),e(U1,xpe),e(xpe,aNo),e(U1,nNo),e(U1,yV),e(yV,sNo),e(U1,lNo),e(Q,iNo),e(Q,J1),e(J1,$pe),e($pe,dNo),e(J1,cNo),e(J1,xV),e(xV,fNo),e(J1,mNo),e(Q,gNo),e(Q,Y1),e(Y1,kpe),e(kpe,hNo),e(Y1,pNo),e(Y1,$V),e($V,_No),e(Y1,uNo),e(Q,bNo),e(Q,K1),e(K1,Spe),e(Spe,vNo),e(K1,FNo),e(K1,kV),e(kV,TNo),e(K1,MNo),e(Q,ENo),e(Q,Z1),e(Z1,Rpe),e(Rpe,CNo),e(Z1,wNo),e(Z1,SV),e(SV,ANo),e(Z1,LNo),e(Q,yNo),e(Q,e4),e(e4,Ppe),e(Ppe,xNo),e(e4,$No),e(e4,RV),e(RV,kNo),e(e4,SNo),e(Q,RNo),e(Q,o4),e(o4,Bpe),e(Bpe,PNo),e(o4,BNo),e(o4,PV),e(PV,INo),e(o4,NNo),e(Q,qNo),e(Q,r4),e(r4,Ipe),e(Ipe,jNo),e(r4,DNo),e(r4,BV),e(BV,GNo),e(r4,ONo),e(Q,VNo),e(Q,t4),e(t4,Npe),e(Npe,XNo),e(t4,zNo),e(t4,IV),e(IV,WNo),e(t4,QNo),e(Q,HNo),e(Q,a4),e(a4,qpe),e(qpe,UNo),e(a4,JNo),e(a4,NV),e(NV,YNo),e(a4,KNo),e(Q,ZNo),e(Q,n4),e(n4,jpe),e(jpe,eqo),e(n4,oqo),e(n4,qV),e(qV,rqo),e(n4,tqo),e(Q,aqo),e(Q,s4),e(s4,Dpe),e(Dpe,nqo),e(s4,sqo),e(s4,jV),e(jV,lqo),e(s4,iqo),e(Q,dqo),e(Q,l4),e(l4,Gpe),e(Gpe,cqo),e(l4,fqo),e(l4,DV),e(DV,mqo),e(l4,gqo),e(Q,hqo),e(Q,i4),e(i4,Ope),e(Ope,pqo),e(i4,_qo),e(i4,GV),e(GV,uqo),e(i4,bqo),e(Q,vqo),e(Q,d4),e(d4,Vpe),e(Vpe,Fqo),e(d4,Tqo),e(d4,OV),e(OV,Mqo),e(d4,Eqo),e(Q,Cqo),e(Q,c4),e(c4,Xpe),e(Xpe,wqo),e(c4,Aqo),e(c4,VV),e(VV,Lqo),e(c4,yqo),e(Q,xqo),e(Q,f4),e(f4,zpe),e(zpe,$qo),e(f4,kqo),e(f4,XV),e(XV,Sqo),e(f4,Rqo),e(Q,Pqo),e(Q,m4),e(m4,Wpe),e(Wpe,Bqo),e(m4,Iqo),e(m4,zV),e(zV,Nqo),e(m4,qqo),e(Q,jqo),e(Q,g4),e(g4,Qpe),e(Qpe,Dqo),e(g4,Gqo),e(g4,WV),e(WV,Oqo),e(g4,Vqo),e(Q,Xqo),e(Q,h4),e(h4,Hpe),e(Hpe,zqo),e(h4,Wqo),e(h4,QV),e(QV,Qqo),e(h4,Hqo),e(Q,Uqo),e(Q,p4),e(p4,Upe),e(Upe,Jqo),e(p4,Yqo),e(p4,HV),e(HV,Kqo),e(p4,Zqo),e(Q,ejo),e(Q,_4),e(_4,Jpe),e(Jpe,ojo),e(_4,rjo),e(_4,UV),e(UV,tjo),e(_4,ajo),e(Q,njo),e(Q,u4),e(u4,Ype),e(Ype,sjo),e(u4,ljo),e(u4,JV),e(JV,ijo),e(u4,djo),e(Q,cjo),e(Q,b4),e(b4,Kpe),e(Kpe,fjo),e(b4,mjo),e(b4,YV),e(YV,gjo),e(b4,hjo),e(Q,pjo),e(Q,v4),e(v4,Zpe),e(Zpe,_jo),e(v4,ujo),e(v4,KV),e(KV,bjo),e(v4,vjo),e(Q,Fjo),e(Q,F4),e(F4,e_e),e(e_e,Tjo),e(F4,Mjo),e(F4,ZV),e(ZV,Ejo),e(F4,Cjo),e(Q,wjo),e(Q,T4),e(T4,o_e),e(o_e,Ajo),e(T4,Ljo),e(T4,eX),e(eX,yjo),e(T4,xjo),e(Q,$jo),e(Q,M4),e(M4,r_e),e(r_e,kjo),e(M4,Sjo),e(M4,oX),e(oX,Rjo),e(M4,Pjo),e(Q,Bjo),e(Q,E4),e(E4,t_e),e(t_e,Ijo),e(E4,Njo),e(E4,rX),e(rX,qjo),e(E4,jjo),e(Q,Djo),e(Q,C4),e(C4,a_e),e(a_e,Gjo),e(C4,Ojo),e(C4,n_e),e(n_e,Vjo),e(C4,Xjo),e(Q,zjo),e(Q,w4),e(w4,s_e),e(s_e,Wjo),e(w4,Qjo),e(w4,tX),e(tX,Hjo),e(w4,Ujo),e(Q,Jjo),e(Q,A4),e(A4,l_e),e(l_e,Yjo),e(A4,Kjo),e(A4,aX),e(aX,Zjo),e(A4,eDo),e(Q,oDo),e(Q,L4),e(L4,i_e),e(i_e,rDo),e(L4,tDo),e(L4,nX),e(nX,aDo),e(L4,nDo),e(Q,sDo),e(Q,y4),e(y4,d_e),e(d_e,lDo),e(y4,iDo),e(y4,sX),e(sX,dDo),e(y4,cDo),e(eo,fDo),e(eo,x4),e(x4,mDo),e(x4,c_e),e(c_e,gDo),e(x4,hDo),e(x4,f_e),e(f_e,pDo),e(eo,_Do),M($4,eo,null),b(f,Jze,u),b(f,rd,u),e(rd,k4),e(k4,m_e),M(by,m_e,null),e(rd,uDo),e(rd,g_e),e(g_e,bDo),b(f,Yze,u),b(f,Bo,u),M(vy,Bo,null),e(Bo,vDo),e(Bo,td),e(td,FDo),e(td,lX),e(lX,TDo),e(td,MDo),e(td,iX),e(iX,EDo),e(td,CDo),e(Bo,wDo),e(Bo,Fy),e(Fy,ADo),e(Fy,h_e),e(h_e,LDo),e(Fy,yDo),e(Bo,xDo),e(Bo,mt),M(Ty,mt,null),e(mt,$Do),e(mt,p_e),e(p_e,kDo),e(mt,SDo),e(mt,ad),e(ad,RDo),e(ad,__e),e(__e,PDo),e(ad,BDo),e(ad,dX),e(dX,IDo),e(ad,NDo),e(mt,qDo),M(S4,mt,null),e(Bo,jDo),e(Bo,oo),M(My,oo,null),e(oo,DDo),e(oo,u_e),e(u_e,GDo),e(oo,ODo),e(oo,Da),e(Da,VDo),e(Da,b_e),e(b_e,XDo),e(Da,zDo),e(Da,v_e),e(v_e,WDo),e(Da,QDo),e(Da,F_e),e(F_e,HDo),e(Da,UDo),e(oo,JDo),e(oo,me),e(me,R4),e(R4,T_e),e(T_e,YDo),e(R4,KDo),e(R4,cX),e(cX,ZDo),e(R4,eGo),e(me,oGo),e(me,P4),e(P4,M_e),e(M_e,rGo),e(P4,tGo),e(P4,fX),e(fX,aGo),e(P4,nGo),e(me,sGo),e(me,B4),e(B4,E_e),e(E_e,lGo),e(B4,iGo),e(B4,mX),e(mX,dGo),e(B4,cGo),e(me,fGo),e(me,I4),e(I4,C_e),e(C_e,mGo),e(I4,gGo),e(I4,gX),e(gX,hGo),e(I4,pGo),e(me,_Go),e(me,N4),e(N4,w_e),e(w_e,uGo),e(N4,bGo),e(N4,hX),e(hX,vGo),e(N4,FGo),e(me,TGo),e(me,q4),e(q4,A_e),e(A_e,MGo),e(q4,EGo),e(q4,pX),e(pX,CGo),e(q4,wGo),e(me,AGo),e(me,j4),e(j4,L_e),e(L_e,LGo),e(j4,yGo),e(j4,_X),e(_X,xGo),e(j4,$Go),e(me,kGo),e(me,D4),e(D4,y_e),e(y_e,SGo),e(D4,RGo),e(D4,uX),e(uX,PGo),e(D4,BGo),e(me,IGo),e(me,G4),e(G4,x_e),e(x_e,NGo),e(G4,qGo),e(G4,bX),e(bX,jGo),e(G4,DGo),e(me,GGo),e(me,O4),e(O4,$_e),e($_e,OGo),e(O4,VGo),e(O4,vX),e(vX,XGo),e(O4,zGo),e(me,WGo),e(me,V4),e(V4,k_e),e(k_e,QGo),e(V4,HGo),e(V4,FX),e(FX,UGo),e(V4,JGo),e(me,YGo),e(me,X4),e(X4,S_e),e(S_e,KGo),e(X4,ZGo),e(X4,TX),e(TX,eOo),e(X4,oOo),e(me,rOo),e(me,z4),e(z4,R_e),e(R_e,tOo),e(z4,aOo),e(z4,MX),e(MX,nOo),e(z4,sOo),e(me,lOo),e(me,W4),e(W4,P_e),e(P_e,iOo),e(W4,dOo),e(W4,EX),e(EX,cOo),e(W4,fOo),e(me,mOo),e(me,Q4),e(Q4,B_e),e(B_e,gOo),e(Q4,hOo),e(Q4,CX),e(CX,pOo),e(Q4,_Oo),e(me,uOo),e(me,H4),e(H4,I_e),e(I_e,bOo),e(H4,vOo),e(H4,wX),e(wX,FOo),e(H4,TOo),e(me,MOo),e(me,U4),e(U4,N_e),e(N_e,EOo),e(U4,COo),e(U4,AX),e(AX,wOo),e(U4,AOo),e(me,LOo),e(me,J4),e(J4,q_e),e(q_e,yOo),e(J4,xOo),e(J4,LX),e(LX,$Oo),e(J4,kOo),e(me,SOo),e(me,Y4),e(Y4,j_e),e(j_e,ROo),e(Y4,POo),e(Y4,yX),e(yX,BOo),e(Y4,IOo),e(oo,NOo),e(oo,K4),e(K4,qOo),e(K4,D_e),e(D_e,jOo),e(K4,DOo),e(K4,G_e),e(G_e,GOo),e(oo,OOo),M(Z4,oo,null),b(f,Kze,u),b(f,nd,u),e(nd,eb),e(eb,O_e),M(Ey,O_e,null),e(nd,VOo),e(nd,V_e),e(V_e,XOo),b(f,Zze,u),b(f,Io,u),M(Cy,Io,null),e(Io,zOo),e(Io,sd),e(sd,WOo),e(sd,xX),e(xX,QOo),e(sd,HOo),e(sd,$X),e($X,UOo),e(sd,JOo),e(Io,YOo),e(Io,wy),e(wy,KOo),e(wy,X_e),e(X_e,ZOo),e(wy,eVo),e(Io,oVo),e(Io,gt),M(Ay,gt,null),e(gt,rVo),e(gt,z_e),e(z_e,tVo),e(gt,aVo),e(gt,ld),e(ld,nVo),e(ld,W_e),e(W_e,sVo),e(ld,lVo),e(ld,kX),e(kX,iVo),e(ld,dVo),e(gt,cVo),M(ob,gt,null),e(Io,fVo),e(Io,ro),M(Ly,ro,null),e(ro,mVo),e(ro,Q_e),e(Q_e,gVo),e(ro,hVo),e(ro,Ga),e(Ga,pVo),e(Ga,H_e),e(H_e,_Vo),e(Ga,uVo),e(Ga,U_e),e(U_e,bVo),e(Ga,vVo),e(Ga,J_e),e(J_e,FVo),e(Ga,TVo),e(ro,MVo),e(ro,P),e(P,rb),e(rb,Y_e),e(Y_e,EVo),e(rb,CVo),e(rb,SX),e(SX,wVo),e(rb,AVo),e(P,LVo),e(P,tb),e(tb,K_e),e(K_e,yVo),e(tb,xVo),e(tb,RX),e(RX,$Vo),e(tb,kVo),e(P,SVo),e(P,ab),e(ab,Z_e),e(Z_e,RVo),e(ab,PVo),e(ab,PX),e(PX,BVo),e(ab,IVo),e(P,NVo),e(P,nb),e(nb,eue),e(eue,qVo),e(nb,jVo),e(nb,BX),e(BX,DVo),e(nb,GVo),e(P,OVo),e(P,sb),e(sb,oue),e(oue,VVo),e(sb,XVo),e(sb,IX),e(IX,zVo),e(sb,WVo),e(P,QVo),e(P,lb),e(lb,rue),e(rue,HVo),e(lb,UVo),e(lb,NX),e(NX,JVo),e(lb,YVo),e(P,KVo),e(P,ib),e(ib,tue),e(tue,ZVo),e(ib,eXo),e(ib,qX),e(qX,oXo),e(ib,rXo),e(P,tXo),e(P,db),e(db,aue),e(aue,aXo),e(db,nXo),e(db,jX),e(jX,sXo),e(db,lXo),e(P,iXo),e(P,cb),e(cb,nue),e(nue,dXo),e(cb,cXo),e(cb,DX),e(DX,fXo),e(cb,mXo),e(P,gXo),e(P,fb),e(fb,sue),e(sue,hXo),e(fb,pXo),e(fb,GX),e(GX,_Xo),e(fb,uXo),e(P,bXo),e(P,mb),e(mb,lue),e(lue,vXo),e(mb,FXo),e(mb,OX),e(OX,TXo),e(mb,MXo),e(P,EXo),e(P,gb),e(gb,iue),e(iue,CXo),e(gb,wXo),e(gb,VX),e(VX,AXo),e(gb,LXo),e(P,yXo),e(P,hb),e(hb,due),e(due,xXo),e(hb,$Xo),e(hb,XX),e(XX,kXo),e(hb,SXo),e(P,RXo),e(P,pb),e(pb,cue),e(cue,PXo),e(pb,BXo),e(pb,zX),e(zX,IXo),e(pb,NXo),e(P,qXo),e(P,_b),e(_b,fue),e(fue,jXo),e(_b,DXo),e(_b,WX),e(WX,GXo),e(_b,OXo),e(P,VXo),e(P,ub),e(ub,mue),e(mue,XXo),e(ub,zXo),e(ub,QX),e(QX,WXo),e(ub,QXo),e(P,HXo),e(P,bb),e(bb,gue),e(gue,UXo),e(bb,JXo),e(bb,HX),e(HX,YXo),e(bb,KXo),e(P,ZXo),e(P,vb),e(vb,hue),e(hue,ezo),e(vb,ozo),e(vb,UX),e(UX,rzo),e(vb,tzo),e(P,azo),e(P,Fb),e(Fb,pue),e(pue,nzo),e(Fb,szo),e(Fb,JX),e(JX,lzo),e(Fb,izo),e(P,dzo),e(P,Tb),e(Tb,_ue),e(_ue,czo),e(Tb,fzo),e(Tb,YX),e(YX,mzo),e(Tb,gzo),e(P,hzo),e(P,Mb),e(Mb,uue),e(uue,pzo),e(Mb,_zo),e(Mb,KX),e(KX,uzo),e(Mb,bzo),e(P,vzo),e(P,Eb),e(Eb,bue),e(bue,Fzo),e(Eb,Tzo),e(Eb,ZX),e(ZX,Mzo),e(Eb,Ezo),e(P,Czo),e(P,Cb),e(Cb,vue),e(vue,wzo),e(Cb,Azo),e(Cb,ez),e(ez,Lzo),e(Cb,yzo),e(P,xzo),e(P,wb),e(wb,Fue),e(Fue,$zo),e(wb,kzo),e(wb,oz),e(oz,Szo),e(wb,Rzo),e(P,Pzo),e(P,Ab),e(Ab,Tue),e(Tue,Bzo),e(Ab,Izo),e(Ab,rz),e(rz,Nzo),e(Ab,qzo),e(P,jzo),e(P,Lb),e(Lb,Mue),e(Mue,Dzo),e(Lb,Gzo),e(Lb,tz),e(tz,Ozo),e(Lb,Vzo),e(P,Xzo),e(P,yb),e(yb,Eue),e(Eue,zzo),e(yb,Wzo),e(yb,az),e(az,Qzo),e(yb,Hzo),e(P,Uzo),e(P,xb),e(xb,Cue),e(Cue,Jzo),e(xb,Yzo),e(xb,nz),e(nz,Kzo),e(xb,Zzo),e(P,eWo),e(P,$b),e($b,wue),e(wue,oWo),e($b,rWo),e($b,sz),e(sz,tWo),e($b,aWo),e(P,nWo),e(P,kb),e(kb,Aue),e(Aue,sWo),e(kb,lWo),e(kb,lz),e(lz,iWo),e(kb,dWo),e(P,cWo),e(P,Sb),e(Sb,Lue),e(Lue,fWo),e(Sb,mWo),e(Sb,iz),e(iz,gWo),e(Sb,hWo),e(P,pWo),e(P,Rb),e(Rb,yue),e(yue,_Wo),e(Rb,uWo),e(Rb,dz),e(dz,bWo),e(Rb,vWo),e(P,FWo),e(P,Pb),e(Pb,xue),e(xue,TWo),e(Pb,MWo),e(Pb,cz),e(cz,EWo),e(Pb,CWo),e(P,wWo),e(P,Bb),e(Bb,$ue),e($ue,AWo),e(Bb,LWo),e(Bb,fz),e(fz,yWo),e(Bb,xWo),e(P,$Wo),e(P,Ib),e(Ib,kue),e(kue,kWo),e(Ib,SWo),e(Ib,mz),e(mz,RWo),e(Ib,PWo),e(P,BWo),e(P,Nb),e(Nb,Sue),e(Sue,IWo),e(Nb,NWo),e(Nb,gz),e(gz,qWo),e(Nb,jWo),e(P,DWo),e(P,qb),e(qb,Rue),e(Rue,GWo),e(qb,OWo),e(qb,hz),e(hz,VWo),e(qb,XWo),e(P,zWo),e(P,jb),e(jb,Pue),e(Pue,WWo),e(jb,QWo),e(jb,pz),e(pz,HWo),e(jb,UWo),e(P,JWo),e(P,Db),e(Db,Bue),e(Bue,YWo),e(Db,KWo),e(Db,_z),e(_z,ZWo),e(Db,eQo),e(P,oQo),e(P,Gb),e(Gb,Iue),e(Iue,rQo),e(Gb,tQo),e(Gb,uz),e(uz,aQo),e(Gb,nQo),e(P,sQo),e(P,Ob),e(Ob,Nue),e(Nue,lQo),e(Ob,iQo),e(Ob,bz),e(bz,dQo),e(Ob,cQo),e(P,fQo),e(P,Vb),e(Vb,que),e(que,mQo),e(Vb,gQo),e(Vb,vz),e(vz,hQo),e(Vb,pQo),e(P,_Qo),e(P,Xb),e(Xb,jue),e(jue,uQo),e(Xb,bQo),e(Xb,Fz),e(Fz,vQo),e(Xb,FQo),e(P,TQo),e(P,zb),e(zb,Due),e(Due,MQo),e(zb,EQo),e(zb,Tz),e(Tz,CQo),e(zb,wQo),e(P,AQo),e(P,Wb),e(Wb,Gue),e(Gue,LQo),e(Wb,yQo),e(Wb,Mz),e(Mz,xQo),e(Wb,$Qo),e(P,kQo),e(P,Qb),e(Qb,Oue),e(Oue,SQo),e(Qb,RQo),e(Qb,Ez),e(Ez,PQo),e(Qb,BQo),e(P,IQo),e(P,Hb),e(Hb,Vue),e(Vue,NQo),e(Hb,qQo),e(Hb,Cz),e(Cz,jQo),e(Hb,DQo),e(P,GQo),e(P,Ub),e(Ub,Xue),e(Xue,OQo),e(Ub,VQo),e(Ub,wz),e(wz,XQo),e(Ub,zQo),e(P,WQo),e(P,Jb),e(Jb,zue),e(zue,QQo),e(Jb,HQo),e(Jb,Az),e(Az,UQo),e(Jb,JQo),e(P,YQo),e(P,Yb),e(Yb,Wue),e(Wue,KQo),e(Yb,ZQo),e(Yb,Lz),e(Lz,eHo),e(Yb,oHo),e(P,rHo),e(P,Kb),e(Kb,Que),e(Que,tHo),e(Kb,aHo),e(Kb,yz),e(yz,nHo),e(Kb,sHo),e(P,lHo),e(P,Zb),e(Zb,Hue),e(Hue,iHo),e(Zb,dHo),e(Zb,xz),e(xz,cHo),e(Zb,fHo),e(ro,mHo),e(ro,ev),e(ev,gHo),e(ev,Uue),e(Uue,hHo),e(ev,pHo),e(ev,Jue),e(Jue,_Ho),e(ro,uHo),M(ov,ro,null),b(f,eWe,u),b(f,id,u),e(id,rv),e(rv,Yue),M(yy,Yue,null),e(id,bHo),e(id,Kue),e(Kue,vHo),b(f,oWe,u),b(f,No,u),M(xy,No,null),e(No,FHo),e(No,dd),e(dd,THo),e(dd,$z),e($z,MHo),e(dd,EHo),e(dd,kz),e(kz,CHo),e(dd,wHo),e(No,AHo),e(No,$y),e($y,LHo),e($y,Zue),e(Zue,yHo),e($y,xHo),e(No,$Ho),e(No,ht),M(ky,ht,null),e(ht,kHo),e(ht,e2e),e(e2e,SHo),e(ht,RHo),e(ht,cd),e(cd,PHo),e(cd,o2e),e(o2e,BHo),e(cd,IHo),e(cd,Sz),e(Sz,NHo),e(cd,qHo),e(ht,jHo),M(tv,ht,null),e(No,DHo),e(No,to),M(Sy,to,null),e(to,GHo),e(to,r2e),e(r2e,OHo),e(to,VHo),e(to,Oa),e(Oa,XHo),e(Oa,t2e),e(t2e,zHo),e(Oa,WHo),e(Oa,a2e),e(a2e,QHo),e(Oa,HHo),e(Oa,n2e),e(n2e,UHo),e(Oa,JHo),e(to,YHo),e(to,Z),e(Z,av),e(av,s2e),e(s2e,KHo),e(av,ZHo),e(av,Rz),e(Rz,eUo),e(av,oUo),e(Z,rUo),e(Z,nv),e(nv,l2e),e(l2e,tUo),e(nv,aUo),e(nv,Pz),e(Pz,nUo),e(nv,sUo),e(Z,lUo),e(Z,sv),e(sv,i2e),e(i2e,iUo),e(sv,dUo),e(sv,Bz),e(Bz,cUo),e(sv,fUo),e(Z,mUo),e(Z,lv),e(lv,d2e),e(d2e,gUo),e(lv,hUo),e(lv,Iz),e(Iz,pUo),e(lv,_Uo),e(Z,uUo),e(Z,iv),e(iv,c2e),e(c2e,bUo),e(iv,vUo),e(iv,Nz),e(Nz,FUo),e(iv,TUo),e(Z,MUo),e(Z,dv),e(dv,f2e),e(f2e,EUo),e(dv,CUo),e(dv,qz),e(qz,wUo),e(dv,AUo),e(Z,LUo),e(Z,cv),e(cv,m2e),e(m2e,yUo),e(cv,xUo),e(cv,jz),e(jz,$Uo),e(cv,kUo),e(Z,SUo),e(Z,fv),e(fv,g2e),e(g2e,RUo),e(fv,PUo),e(fv,Dz),e(Dz,BUo),e(fv,IUo),e(Z,NUo),e(Z,mv),e(mv,h2e),e(h2e,qUo),e(mv,jUo),e(mv,Gz),e(Gz,DUo),e(mv,GUo),e(Z,OUo),e(Z,gv),e(gv,p2e),e(p2e,VUo),e(gv,XUo),e(gv,Oz),e(Oz,zUo),e(gv,WUo),e(Z,QUo),e(Z,hv),e(hv,_2e),e(_2e,HUo),e(hv,UUo),e(hv,Vz),e(Vz,JUo),e(hv,YUo),e(Z,KUo),e(Z,pv),e(pv,u2e),e(u2e,ZUo),e(pv,eJo),e(pv,Xz),e(Xz,oJo),e(pv,rJo),e(Z,tJo),e(Z,_v),e(_v,b2e),e(b2e,aJo),e(_v,nJo),e(_v,zz),e(zz,sJo),e(_v,lJo),e(Z,iJo),e(Z,uv),e(uv,v2e),e(v2e,dJo),e(uv,cJo),e(uv,Wz),e(Wz,fJo),e(uv,mJo),e(Z,gJo),e(Z,bv),e(bv,F2e),e(F2e,hJo),e(bv,pJo),e(bv,Qz),e(Qz,_Jo),e(bv,uJo),e(Z,bJo),e(Z,vv),e(vv,T2e),e(T2e,vJo),e(vv,FJo),e(vv,Hz),e(Hz,TJo),e(vv,MJo),e(Z,EJo),e(Z,Fv),e(Fv,M2e),e(M2e,CJo),e(Fv,wJo),e(Fv,Uz),e(Uz,AJo),e(Fv,LJo),e(Z,yJo),e(Z,Tv),e(Tv,E2e),e(E2e,xJo),e(Tv,$Jo),e(Tv,Jz),e(Jz,kJo),e(Tv,SJo),e(Z,RJo),e(Z,Mv),e(Mv,C2e),e(C2e,PJo),e(Mv,BJo),e(Mv,Yz),e(Yz,IJo),e(Mv,NJo),e(Z,qJo),e(Z,Ev),e(Ev,w2e),e(w2e,jJo),e(Ev,DJo),e(Ev,Kz),e(Kz,GJo),e(Ev,OJo),e(Z,VJo),e(Z,Cv),e(Cv,A2e),e(A2e,XJo),e(Cv,zJo),e(Cv,Zz),e(Zz,WJo),e(Cv,QJo),e(Z,HJo),e(Z,wv),e(wv,L2e),e(L2e,UJo),e(wv,JJo),e(wv,eW),e(eW,YJo),e(wv,KJo),e(Z,ZJo),e(Z,Av),e(Av,y2e),e(y2e,eYo),e(Av,oYo),e(Av,oW),e(oW,rYo),e(Av,tYo),e(Z,aYo),e(Z,Lv),e(Lv,x2e),e(x2e,nYo),e(Lv,sYo),e(Lv,rW),e(rW,lYo),e(Lv,iYo),e(Z,dYo),e(Z,yv),e(yv,$2e),e($2e,cYo),e(yv,fYo),e(yv,tW),e(tW,mYo),e(yv,gYo),e(Z,hYo),e(Z,xv),e(xv,k2e),e(k2e,pYo),e(xv,_Yo),e(xv,aW),e(aW,uYo),e(xv,bYo),e(Z,vYo),e(Z,$v),e($v,S2e),e(S2e,FYo),e($v,TYo),e($v,nW),e(nW,MYo),e($v,EYo),e(Z,CYo),e(Z,kv),e(kv,R2e),e(R2e,wYo),e(kv,AYo),e(kv,sW),e(sW,LYo),e(kv,yYo),e(Z,xYo),e(Z,Sv),e(Sv,P2e),e(P2e,$Yo),e(Sv,kYo),e(Sv,lW),e(lW,SYo),e(Sv,RYo),e(Z,PYo),e(Z,Rv),e(Rv,B2e),e(B2e,BYo),e(Rv,IYo),e(Rv,iW),e(iW,NYo),e(Rv,qYo),e(Z,jYo),e(Z,Pv),e(Pv,I2e),e(I2e,DYo),e(Pv,GYo),e(Pv,dW),e(dW,OYo),e(Pv,VYo),e(to,XYo),e(to,Bv),e(Bv,zYo),e(Bv,N2e),e(N2e,WYo),e(Bv,QYo),e(Bv,q2e),e(q2e,HYo),e(to,UYo),M(Iv,to,null),b(f,rWe,u),b(f,fd,u),e(fd,Nv),e(Nv,j2e),M(Ry,j2e,null),e(fd,JYo),e(fd,D2e),e(D2e,YYo),b(f,tWe,u),b(f,qo,u),M(Py,qo,null),e(qo,KYo),e(qo,md),e(md,ZYo),e(md,cW),e(cW,eKo),e(md,oKo),e(md,fW),e(fW,rKo),e(md,tKo),e(qo,aKo),e(qo,By),e(By,nKo),e(By,G2e),e(G2e,sKo),e(By,lKo),e(qo,iKo),e(qo,pt),M(Iy,pt,null),e(pt,dKo),e(pt,O2e),e(O2e,cKo),e(pt,fKo),e(pt,gd),e(gd,mKo),e(gd,V2e),e(V2e,gKo),e(gd,hKo),e(gd,mW),e(mW,pKo),e(gd,_Ko),e(pt,uKo),M(qv,pt,null),e(qo,bKo),e(qo,ao),M(Ny,ao,null),e(ao,vKo),e(ao,X2e),e(X2e,FKo),e(ao,TKo),e(ao,Va),e(Va,MKo),e(Va,z2e),e(z2e,EKo),e(Va,CKo),e(Va,W2e),e(W2e,wKo),e(Va,AKo),e(Va,Q2e),e(Q2e,LKo),e(Va,yKo),e(ao,xKo),e(ao,jo),e(jo,jv),e(jv,H2e),e(H2e,$Ko),e(jv,kKo),e(jv,gW),e(gW,SKo),e(jv,RKo),e(jo,PKo),e(jo,Dv),e(Dv,U2e),e(U2e,BKo),e(Dv,IKo),e(Dv,hW),e(hW,NKo),e(Dv,qKo),e(jo,jKo),e(jo,Gv),e(Gv,J2e),e(J2e,DKo),e(Gv,GKo),e(Gv,pW),e(pW,OKo),e(Gv,VKo),e(jo,XKo),e(jo,Ov),e(Ov,Y2e),e(Y2e,zKo),e(Ov,WKo),e(Ov,_W),e(_W,QKo),e(Ov,HKo),e(jo,UKo),e(jo,Vv),e(Vv,K2e),e(K2e,JKo),e(Vv,YKo),e(Vv,uW),e(uW,KKo),e(Vv,ZKo),e(jo,eZo),e(jo,Xv),e(Xv,Z2e),e(Z2e,oZo),e(Xv,rZo),e(Xv,bW),e(bW,tZo),e(Xv,aZo),e(ao,nZo),e(ao,zv),e(zv,sZo),e(zv,e1e),e(e1e,lZo),e(zv,iZo),e(zv,o1e),e(o1e,dZo),e(ao,cZo),M(Wv,ao,null),b(f,aWe,u),b(f,hd,u),e(hd,Qv),e(Qv,r1e),M(qy,r1e,null),e(hd,fZo),e(hd,t1e),e(t1e,mZo),b(f,nWe,u),b(f,Do,u),M(jy,Do,null),e(Do,gZo),e(Do,pd),e(pd,hZo),e(pd,vW),e(vW,pZo),e(pd,_Zo),e(pd,FW),e(FW,uZo),e(pd,bZo),e(Do,vZo),e(Do,Dy),e(Dy,FZo),e(Dy,a1e),e(a1e,TZo),e(Dy,MZo),e(Do,EZo),e(Do,_t),M(Gy,_t,null),e(_t,CZo),e(_t,n1e),e(n1e,wZo),e(_t,AZo),e(_t,_d),e(_d,LZo),e(_d,s1e),e(s1e,yZo),e(_d,xZo),e(_d,TW),e(TW,$Zo),e(_d,kZo),e(_t,SZo),M(Hv,_t,null),e(Do,RZo),e(Do,no),M(Oy,no,null),e(no,PZo),e(no,l1e),e(l1e,BZo),e(no,IZo),e(no,Xa),e(Xa,NZo),e(Xa,i1e),e(i1e,qZo),e(Xa,jZo),e(Xa,d1e),e(d1e,DZo),e(Xa,GZo),e(Xa,c1e),e(c1e,OZo),e(Xa,VZo),e(no,XZo),e(no,H),e(H,Uv),e(Uv,f1e),e(f1e,zZo),e(Uv,WZo),e(Uv,MW),e(MW,QZo),e(Uv,HZo),e(H,UZo),e(H,Jv),e(Jv,m1e),e(m1e,JZo),e(Jv,YZo),e(Jv,EW),e(EW,KZo),e(Jv,ZZo),e(H,eer),e(H,Yv),e(Yv,g1e),e(g1e,oer),e(Yv,rer),e(Yv,CW),e(CW,ter),e(Yv,aer),e(H,ner),e(H,Kv),e(Kv,h1e),e(h1e,ser),e(Kv,ler),e(Kv,wW),e(wW,ier),e(Kv,der),e(H,cer),e(H,Zv),e(Zv,p1e),e(p1e,fer),e(Zv,mer),e(Zv,AW),e(AW,ger),e(Zv,her),e(H,per),e(H,e0),e(e0,_1e),e(_1e,_er),e(e0,uer),e(e0,LW),e(LW,ber),e(e0,ver),e(H,Fer),e(H,o0),e(o0,u1e),e(u1e,Ter),e(o0,Mer),e(o0,yW),e(yW,Eer),e(o0,Cer),e(H,wer),e(H,r0),e(r0,b1e),e(b1e,Aer),e(r0,Ler),e(r0,xW),e(xW,yer),e(r0,xer),e(H,$er),e(H,t0),e(t0,v1e),e(v1e,ker),e(t0,Ser),e(t0,$W),e($W,Rer),e(t0,Per),e(H,Ber),e(H,a0),e(a0,F1e),e(F1e,Ier),e(a0,Ner),e(a0,kW),e(kW,qer),e(a0,jer),e(H,Der),e(H,n0),e(n0,T1e),e(T1e,Ger),e(n0,Oer),e(n0,SW),e(SW,Ver),e(n0,Xer),e(H,zer),e(H,s0),e(s0,M1e),e(M1e,Wer),e(s0,Qer),e(s0,RW),e(RW,Her),e(s0,Uer),e(H,Jer),e(H,l0),e(l0,E1e),e(E1e,Yer),e(l0,Ker),e(l0,PW),e(PW,Zer),e(l0,eor),e(H,oor),e(H,i0),e(i0,C1e),e(C1e,ror),e(i0,tor),e(i0,BW),e(BW,aor),e(i0,nor),e(H,sor),e(H,d0),e(d0,w1e),e(w1e,lor),e(d0,ior),e(d0,IW),e(IW,dor),e(d0,cor),e(H,mor),e(H,c0),e(c0,A1e),e(A1e,gor),e(c0,hor),e(c0,NW),e(NW,por),e(c0,_or),e(H,uor),e(H,f0),e(f0,L1e),e(L1e,bor),e(f0,vor),e(f0,qW),e(qW,For),e(f0,Tor),e(H,Mor),e(H,m0),e(m0,y1e),e(y1e,Eor),e(m0,Cor),e(m0,jW),e(jW,wor),e(m0,Aor),e(H,Lor),e(H,g0),e(g0,x1e),e(x1e,yor),e(g0,xor),e(g0,DW),e(DW,$or),e(g0,kor),e(H,Sor),e(H,h0),e(h0,$1e),e($1e,Ror),e(h0,Por),e(h0,GW),e(GW,Bor),e(h0,Ior),e(H,Nor),e(H,p0),e(p0,k1e),e(k1e,qor),e(p0,jor),e(p0,OW),e(OW,Dor),e(p0,Gor),e(H,Oor),e(H,_0),e(_0,S1e),e(S1e,Vor),e(_0,Xor),e(_0,VW),e(VW,zor),e(_0,Wor),e(H,Qor),e(H,u0),e(u0,R1e),e(R1e,Hor),e(u0,Uor),e(u0,XW),e(XW,Jor),e(u0,Yor),e(H,Kor),e(H,b0),e(b0,P1e),e(P1e,Zor),e(b0,err),e(b0,zW),e(zW,orr),e(b0,rrr),e(H,trr),e(H,v0),e(v0,B1e),e(B1e,arr),e(v0,nrr),e(v0,WW),e(WW,srr),e(v0,lrr),e(H,irr),e(H,F0),e(F0,I1e),e(I1e,drr),e(F0,crr),e(F0,QW),e(QW,frr),e(F0,mrr),e(H,grr),e(H,T0),e(T0,N1e),e(N1e,hrr),e(T0,prr),e(T0,HW),e(HW,_rr),e(T0,urr),e(H,brr),e(H,M0),e(M0,q1e),e(q1e,vrr),e(M0,Frr),e(M0,UW),e(UW,Trr),e(M0,Mrr),e(H,Err),e(H,E0),e(E0,j1e),e(j1e,Crr),e(E0,wrr),e(E0,JW),e(JW,Arr),e(E0,Lrr),e(H,yrr),e(H,C0),e(C0,D1e),e(D1e,xrr),e(C0,$rr),e(C0,YW),e(YW,krr),e(C0,Srr),e(H,Rrr),e(H,w0),e(w0,G1e),e(G1e,Prr),e(w0,Brr),e(w0,KW),e(KW,Irr),e(w0,Nrr),e(H,qrr),e(H,A0),e(A0,O1e),e(O1e,jrr),e(A0,Drr),e(A0,ZW),e(ZW,Grr),e(A0,Orr),e(H,Vrr),e(H,L0),e(L0,V1e),e(V1e,Xrr),e(L0,zrr),e(L0,eQ),e(eQ,Wrr),e(L0,Qrr),e(H,Hrr),e(H,y0),e(y0,X1e),e(X1e,Urr),e(y0,Jrr),e(y0,oQ),e(oQ,Yrr),e(y0,Krr),e(H,Zrr),e(H,x0),e(x0,z1e),e(z1e,etr),e(x0,otr),e(x0,rQ),e(rQ,rtr),e(x0,ttr),e(H,atr),e(H,$0),e($0,W1e),e(W1e,ntr),e($0,str),e($0,tQ),e(tQ,ltr),e($0,itr),e(H,dtr),e(H,k0),e(k0,Q1e),e(Q1e,ctr),e(k0,ftr),e(k0,aQ),e(aQ,mtr),e(k0,gtr),e(no,htr),e(no,S0),e(S0,ptr),e(S0,H1e),e(H1e,_tr),e(S0,utr),e(S0,U1e),e(U1e,btr),e(no,vtr),M(R0,no,null),b(f,sWe,u),b(f,ud,u),e(ud,P0),e(P0,J1e),M(Vy,J1e,null),e(ud,Ftr),e(ud,Y1e),e(Y1e,Ttr),b(f,lWe,u),b(f,Go,u),M(Xy,Go,null),e(Go,Mtr),e(Go,bd),e(bd,Etr),e(bd,nQ),e(nQ,Ctr),e(bd,wtr),e(bd,sQ),e(sQ,Atr),e(bd,Ltr),e(Go,ytr),e(Go,zy),e(zy,xtr),e(zy,K1e),e(K1e,$tr),e(zy,ktr),e(Go,Str),e(Go,ut),M(Wy,ut,null),e(ut,Rtr),e(ut,Z1e),e(Z1e,Ptr),e(ut,Btr),e(ut,vd),e(vd,Itr),e(vd,e4e),e(e4e,Ntr),e(vd,qtr),e(vd,lQ),e(lQ,jtr),e(vd,Dtr),e(ut,Gtr),M(B0,ut,null),e(Go,Otr),e(Go,so),M(Qy,so,null),e(so,Vtr),e(so,o4e),e(o4e,Xtr),e(so,ztr),e(so,za),e(za,Wtr),e(za,r4e),e(r4e,Qtr),e(za,Htr),e(za,t4e),e(t4e,Utr),e(za,Jtr),e(za,a4e),e(a4e,Ytr),e(za,Ktr),e(so,Ztr),e(so,V),e(V,I0),e(I0,n4e),e(n4e,ear),e(I0,oar),e(I0,iQ),e(iQ,rar),e(I0,tar),e(V,aar),e(V,N0),e(N0,s4e),e(s4e,nar),e(N0,sar),e(N0,dQ),e(dQ,lar),e(N0,iar),e(V,dar),e(V,q0),e(q0,l4e),e(l4e,car),e(q0,far),e(q0,cQ),e(cQ,mar),e(q0,gar),e(V,har),e(V,j0),e(j0,i4e),e(i4e,par),e(j0,_ar),e(j0,fQ),e(fQ,uar),e(j0,bar),e(V,Far),e(V,D0),e(D0,d4e),e(d4e,Tar),e(D0,Mar),e(D0,mQ),e(mQ,Ear),e(D0,Car),e(V,war),e(V,G0),e(G0,c4e),e(c4e,Aar),e(G0,Lar),e(G0,gQ),e(gQ,yar),e(G0,xar),e(V,$ar),e(V,O0),e(O0,f4e),e(f4e,kar),e(O0,Sar),e(O0,hQ),e(hQ,Rar),e(O0,Par),e(V,Bar),e(V,V0),e(V0,m4e),e(m4e,Iar),e(V0,Nar),e(V0,pQ),e(pQ,qar),e(V0,jar),e(V,Dar),e(V,X0),e(X0,g4e),e(g4e,Gar),e(X0,Oar),e(X0,_Q),e(_Q,Var),e(X0,Xar),e(V,zar),e(V,z0),e(z0,h4e),e(h4e,War),e(z0,Qar),e(z0,uQ),e(uQ,Har),e(z0,Uar),e(V,Jar),e(V,W0),e(W0,p4e),e(p4e,Yar),e(W0,Kar),e(W0,bQ),e(bQ,Zar),e(W0,enr),e(V,onr),e(V,Q0),e(Q0,_4e),e(_4e,rnr),e(Q0,tnr),e(Q0,vQ),e(vQ,anr),e(Q0,nnr),e(V,snr),e(V,H0),e(H0,u4e),e(u4e,lnr),e(H0,inr),e(H0,FQ),e(FQ,dnr),e(H0,cnr),e(V,fnr),e(V,U0),e(U0,b4e),e(b4e,mnr),e(U0,gnr),e(U0,TQ),e(TQ,hnr),e(U0,pnr),e(V,_nr),e(V,J0),e(J0,v4e),e(v4e,unr),e(J0,bnr),e(J0,MQ),e(MQ,vnr),e(J0,Fnr),e(V,Tnr),e(V,Y0),e(Y0,F4e),e(F4e,Mnr),e(Y0,Enr),e(Y0,EQ),e(EQ,Cnr),e(Y0,wnr),e(V,Anr),e(V,K0),e(K0,T4e),e(T4e,Lnr),e(K0,ynr),e(K0,CQ),e(CQ,xnr),e(K0,$nr),e(V,knr),e(V,Z0),e(Z0,M4e),e(M4e,Snr),e(Z0,Rnr),e(Z0,wQ),e(wQ,Pnr),e(Z0,Bnr),e(V,Inr),e(V,eF),e(eF,E4e),e(E4e,Nnr),e(eF,qnr),e(eF,AQ),e(AQ,jnr),e(eF,Dnr),e(V,Gnr),e(V,oF),e(oF,C4e),e(C4e,Onr),e(oF,Vnr),e(oF,LQ),e(LQ,Xnr),e(oF,znr),e(V,Wnr),e(V,rF),e(rF,w4e),e(w4e,Qnr),e(rF,Hnr),e(rF,yQ),e(yQ,Unr),e(rF,Jnr),e(V,Ynr),e(V,tF),e(tF,A4e),e(A4e,Knr),e(tF,Znr),e(tF,xQ),e(xQ,esr),e(tF,osr),e(V,rsr),e(V,aF),e(aF,L4e),e(L4e,tsr),e(aF,asr),e(aF,$Q),e($Q,nsr),e(aF,ssr),e(V,lsr),e(V,nF),e(nF,y4e),e(y4e,isr),e(nF,dsr),e(nF,kQ),e(kQ,csr),e(nF,fsr),e(V,msr),e(V,sF),e(sF,x4e),e(x4e,gsr),e(sF,hsr),e(sF,SQ),e(SQ,psr),e(sF,_sr),e(V,usr),e(V,lF),e(lF,$4e),e($4e,bsr),e(lF,vsr),e(lF,RQ),e(RQ,Fsr),e(lF,Tsr),e(V,Msr),e(V,iF),e(iF,k4e),e(k4e,Esr),e(iF,Csr),e(iF,PQ),e(PQ,wsr),e(iF,Asr),e(V,Lsr),e(V,dF),e(dF,S4e),e(S4e,ysr),e(dF,xsr),e(dF,BQ),e(BQ,$sr),e(dF,ksr),e(V,Ssr),e(V,cF),e(cF,R4e),e(R4e,Rsr),e(cF,Psr),e(cF,IQ),e(IQ,Bsr),e(cF,Isr),e(V,Nsr),e(V,fF),e(fF,P4e),e(P4e,qsr),e(fF,jsr),e(fF,NQ),e(NQ,Dsr),e(fF,Gsr),e(V,Osr),e(V,mF),e(mF,B4e),e(B4e,Vsr),e(mF,Xsr),e(mF,qQ),e(qQ,zsr),e(mF,Wsr),e(V,Qsr),e(V,gF),e(gF,I4e),e(I4e,Hsr),e(gF,Usr),e(gF,jQ),e(jQ,Jsr),e(gF,Ysr),e(V,Ksr),e(V,hF),e(hF,N4e),e(N4e,Zsr),e(hF,elr),e(hF,DQ),e(DQ,olr),e(hF,rlr),e(V,tlr),e(V,pF),e(pF,q4e),e(q4e,alr),e(pF,nlr),e(pF,GQ),e(GQ,slr),e(pF,llr),e(V,ilr),e(V,_F),e(_F,j4e),e(j4e,dlr),e(_F,clr),e(_F,OQ),e(OQ,flr),e(_F,mlr),e(V,glr),e(V,uF),e(uF,D4e),e(D4e,hlr),e(uF,plr),e(uF,VQ),e(VQ,_lr),e(uF,ulr),e(V,blr),e(V,bF),e(bF,G4e),e(G4e,vlr),e(bF,Flr),e(bF,XQ),e(XQ,Tlr),e(bF,Mlr),e(V,Elr),e(V,vF),e(vF,O4e),e(O4e,Clr),e(vF,wlr),e(vF,zQ),e(zQ,Alr),e(vF,Llr),e(V,ylr),e(V,FF),e(FF,V4e),e(V4e,xlr),e(FF,$lr),e(FF,WQ),e(WQ,klr),e(FF,Slr),e(V,Rlr),e(V,TF),e(TF,X4e),e(X4e,Plr),e(TF,Blr),e(TF,QQ),e(QQ,Ilr),e(TF,Nlr),e(V,qlr),e(V,MF),e(MF,z4e),e(z4e,jlr),e(MF,Dlr),e(MF,HQ),e(HQ,Glr),e(MF,Olr),e(V,Vlr),e(V,EF),e(EF,W4e),e(W4e,Xlr),e(EF,zlr),e(EF,UQ),e(UQ,Wlr),e(EF,Qlr),e(V,Hlr),e(V,CF),e(CF,Q4e),e(Q4e,Ulr),e(CF,Jlr),e(CF,JQ),e(JQ,Ylr),e(CF,Klr),e(so,Zlr),e(so,wF),e(wF,eir),e(wF,H4e),e(H4e,oir),e(wF,rir),e(wF,U4e),e(U4e,tir),e(so,air),M(AF,so,null),b(f,iWe,u),b(f,Fd,u),e(Fd,LF),e(LF,J4e),M(Hy,J4e,null),e(Fd,nir),e(Fd,Y4e),e(Y4e,sir),b(f,dWe,u),b(f,Oo,u),M(Uy,Oo,null),e(Oo,lir),e(Oo,Td),e(Td,iir),e(Td,YQ),e(YQ,dir),e(Td,cir),e(Td,KQ),e(KQ,fir),e(Td,mir),e(Oo,gir),e(Oo,Jy),e(Jy,hir),e(Jy,K4e),e(K4e,pir),e(Jy,_ir),e(Oo,uir),e(Oo,bt),M(Yy,bt,null),e(bt,bir),e(bt,Z4e),e(Z4e,vir),e(bt,Fir),e(bt,Md),e(Md,Tir),e(Md,ebe),e(ebe,Mir),e(Md,Eir),e(Md,ZQ),e(ZQ,Cir),e(Md,wir),e(bt,Air),M(yF,bt,null),e(Oo,Lir),e(Oo,lo),M(Ky,lo,null),e(lo,yir),e(lo,obe),e(obe,xir),e(lo,$ir),e(lo,Wa),e(Wa,kir),e(Wa,rbe),e(rbe,Sir),e(Wa,Rir),e(Wa,tbe),e(tbe,Pir),e(Wa,Bir),e(Wa,abe),e(abe,Iir),e(Wa,Nir),e(lo,qir),e(lo,nbe),e(nbe,xF),e(xF,sbe),e(sbe,jir),e(xF,Dir),e(xF,eH),e(eH,Gir),e(xF,Oir),e(lo,Vir),e(lo,$F),e($F,Xir),e($F,lbe),e(lbe,zir),e($F,Wir),e($F,ibe),e(ibe,Qir),e(lo,Hir),M(kF,lo,null),b(f,cWe,u),b(f,Ed,u),e(Ed,SF),e(SF,dbe),M(Zy,dbe,null),e(Ed,Uir),e(Ed,cbe),e(cbe,Jir),b(f,fWe,u),b(f,Vo,u),M(e9,Vo,null),e(Vo,Yir),e(Vo,Cd),e(Cd,Kir),e(Cd,oH),e(oH,Zir),e(Cd,edr),e(Cd,rH),e(rH,odr),e(Cd,rdr),e(Vo,tdr),e(Vo,o9),e(o9,adr),e(o9,fbe),e(fbe,ndr),e(o9,sdr),e(Vo,ldr),e(Vo,vt),M(r9,vt,null),e(vt,idr),e(vt,mbe),e(mbe,ddr),e(vt,cdr),e(vt,wd),e(wd,fdr),e(wd,gbe),e(gbe,mdr),e(wd,gdr),e(wd,tH),e(tH,hdr),e(wd,pdr),e(vt,_dr),M(RF,vt,null),e(Vo,udr),e(Vo,io),M(t9,io,null),e(io,bdr),e(io,hbe),e(hbe,vdr),e(io,Fdr),e(io,Qa),e(Qa,Tdr),e(Qa,pbe),e(pbe,Mdr),e(Qa,Edr),e(Qa,_be),e(_be,Cdr),e(Qa,wdr),e(Qa,ube),e(ube,Adr),e(Qa,Ldr),e(io,ydr),e(io,be),e(be,PF),e(PF,bbe),e(bbe,xdr),e(PF,$dr),e(PF,aH),e(aH,kdr),e(PF,Sdr),e(be,Rdr),e(be,BF),e(BF,vbe),e(vbe,Pdr),e(BF,Bdr),e(BF,nH),e(nH,Idr),e(BF,Ndr),e(be,qdr),e(be,IF),e(IF,Fbe),e(Fbe,jdr),e(IF,Ddr),e(IF,sH),e(sH,Gdr),e(IF,Odr),e(be,Vdr),e(be,NF),e(NF,Tbe),e(Tbe,Xdr),e(NF,zdr),e(NF,lH),e(lH,Wdr),e(NF,Qdr),e(be,Hdr),e(be,Ys),e(Ys,Mbe),e(Mbe,Udr),e(Ys,Jdr),e(Ys,iH),e(iH,Ydr),e(Ys,Kdr),e(Ys,dH),e(dH,Zdr),e(Ys,ecr),e(be,ocr),e(be,qF),e(qF,Ebe),e(Ebe,rcr),e(qF,tcr),e(qF,cH),e(cH,acr),e(qF,ncr),e(be,scr),e(be,Ks),e(Ks,Cbe),e(Cbe,lcr),e(Ks,icr),e(Ks,fH),e(fH,dcr),e(Ks,ccr),e(Ks,mH),e(mH,fcr),e(Ks,mcr),e(be,gcr),e(be,jF),e(jF,wbe),e(wbe,hcr),e(jF,pcr),e(jF,gH),e(gH,_cr),e(jF,ucr),e(be,bcr),e(be,Ft),e(Ft,Abe),e(Abe,vcr),e(Ft,Fcr),e(Ft,hH),e(hH,Tcr),e(Ft,Mcr),e(Ft,pH),e(pH,Ecr),e(Ft,Ccr),e(Ft,_H),e(_H,wcr),e(Ft,Acr),e(be,Lcr),e(be,DF),e(DF,Lbe),e(Lbe,ycr),e(DF,xcr),e(DF,uH),e(uH,$cr),e(DF,kcr),e(be,Scr),e(be,GF),e(GF,ybe),e(ybe,Rcr),e(GF,Pcr),e(GF,bH),e(bH,Bcr),e(GF,Icr),e(be,Ncr),e(be,OF),e(OF,xbe),e(xbe,qcr),e(OF,jcr),e(OF,vH),e(vH,Dcr),e(OF,Gcr),e(be,Ocr),e(be,VF),e(VF,$be),e($be,Vcr),e(VF,Xcr),e(VF,FH),e(FH,zcr),e(VF,Wcr),e(be,Qcr),e(be,XF),e(XF,kbe),e(kbe,Hcr),e(XF,Ucr),e(XF,TH),e(TH,Jcr),e(XF,Ycr),e(be,Kcr),e(be,zF),e(zF,Sbe),e(Sbe,Zcr),e(zF,efr),e(zF,MH),e(MH,ofr),e(zF,rfr),e(be,tfr),e(be,WF),e(WF,Rbe),e(Rbe,afr),e(WF,nfr),e(WF,EH),e(EH,sfr),e(WF,lfr),e(be,ifr),e(be,QF),e(QF,Pbe),e(Pbe,dfr),e(QF,cfr),e(QF,CH),e(CH,ffr),e(QF,mfr),e(io,gfr),e(io,HF),e(HF,hfr),e(HF,Bbe),e(Bbe,pfr),e(HF,_fr),e(HF,Ibe),e(Ibe,ufr),e(io,bfr),M(UF,io,null),b(f,mWe,u),b(f,Ad,u),e(Ad,JF),e(JF,Nbe),M(a9,Nbe,null),e(Ad,vfr),e(Ad,qbe),e(qbe,Ffr),b(f,gWe,u),b(f,Xo,u),M(n9,Xo,null),e(Xo,Tfr),e(Xo,Ld),e(Ld,Mfr),e(Ld,wH),e(wH,Efr),e(Ld,Cfr),e(Ld,AH),e(AH,wfr),e(Ld,Afr),e(Xo,Lfr),e(Xo,s9),e(s9,yfr),e(s9,jbe),e(jbe,xfr),e(s9,$fr),e(Xo,kfr),e(Xo,Tt),M(l9,Tt,null),e(Tt,Sfr),e(Tt,Dbe),e(Dbe,Rfr),e(Tt,Pfr),e(Tt,yd),e(yd,Bfr),e(yd,Gbe),e(Gbe,Ifr),e(yd,Nfr),e(yd,LH),e(LH,qfr),e(yd,jfr),e(Tt,Dfr),M(YF,Tt,null),e(Xo,Gfr),e(Xo,co),M(i9,co,null),e(co,Ofr),e(co,Obe),e(Obe,Vfr),e(co,Xfr),e(co,Ha),e(Ha,zfr),e(Ha,Vbe),e(Vbe,Wfr),e(Ha,Qfr),e(Ha,Xbe),e(Xbe,Hfr),e(Ha,Ufr),e(Ha,zbe),e(zbe,Jfr),e(Ha,Yfr),e(co,Kfr),e(co,Wbe),e(Wbe,KF),e(KF,Qbe),e(Qbe,Zfr),e(KF,emr),e(KF,yH),e(yH,omr),e(KF,rmr),e(co,tmr),e(co,ZF),e(ZF,amr),e(ZF,Hbe),e(Hbe,nmr),e(ZF,smr),e(ZF,Ube),e(Ube,lmr),e(co,imr),M(eT,co,null),b(f,hWe,u),b(f,xd,u),e(xd,oT),e(oT,Jbe),M(d9,Jbe,null),e(xd,dmr),e(xd,Ybe),e(Ybe,cmr),b(f,pWe,u),b(f,zo,u),M(c9,zo,null),e(zo,fmr),e(zo,$d),e($d,mmr),e($d,xH),e(xH,gmr),e($d,hmr),e($d,$H),e($H,pmr),e($d,_mr),e(zo,umr),e(zo,f9),e(f9,bmr),e(f9,Kbe),e(Kbe,vmr),e(f9,Fmr),e(zo,Tmr),e(zo,Mt),M(m9,Mt,null),e(Mt,Mmr),e(Mt,Zbe),e(Zbe,Emr),e(Mt,Cmr),e(Mt,kd),e(kd,wmr),e(kd,eve),e(eve,Amr),e(kd,Lmr),e(kd,kH),e(kH,ymr),e(kd,xmr),e(Mt,$mr),M(rT,Mt,null),e(zo,kmr),e(zo,fo),M(g9,fo,null),e(fo,Smr),e(fo,ove),e(ove,Rmr),e(fo,Pmr),e(fo,Ua),e(Ua,Bmr),e(Ua,rve),e(rve,Imr),e(Ua,Nmr),e(Ua,tve),e(tve,qmr),e(Ua,jmr),e(Ua,ave),e(ave,Dmr),e(Ua,Gmr),e(fo,Omr),e(fo,nve),e(nve,tT),e(tT,sve),e(sve,Vmr),e(tT,Xmr),e(tT,SH),e(SH,zmr),e(tT,Wmr),e(fo,Qmr),e(fo,aT),e(aT,Hmr),e(aT,lve),e(lve,Umr),e(aT,Jmr),e(aT,ive),e(ive,Ymr),e(fo,Kmr),M(nT,fo,null),b(f,_We,u),b(f,Sd,u),e(Sd,sT),e(sT,dve),M(h9,dve,null),e(Sd,Zmr),e(Sd,cve),e(cve,egr),b(f,uWe,u),b(f,Wo,u),M(p9,Wo,null),e(Wo,ogr),e(Wo,Rd),e(Rd,rgr),e(Rd,RH),e(RH,tgr),e(Rd,agr),e(Rd,PH),e(PH,ngr),e(Rd,sgr),e(Wo,lgr),e(Wo,_9),e(_9,igr),e(_9,fve),e(fve,dgr),e(_9,cgr),e(Wo,fgr),e(Wo,Et),M(u9,Et,null),e(Et,mgr),e(Et,mve),e(mve,ggr),e(Et,hgr),e(Et,Pd),e(Pd,pgr),e(Pd,gve),e(gve,_gr),e(Pd,ugr),e(Pd,BH),e(BH,bgr),e(Pd,vgr),e(Et,Fgr),M(lT,Et,null),e(Wo,Tgr),e(Wo,mo),M(b9,mo,null),e(mo,Mgr),e(mo,hve),e(hve,Egr),e(mo,Cgr),e(mo,Ja),e(Ja,wgr),e(Ja,pve),e(pve,Agr),e(Ja,Lgr),e(Ja,_ve),e(_ve,ygr),e(Ja,xgr),e(Ja,uve),e(uve,$gr),e(Ja,kgr),e(mo,Sgr),e(mo,Pe),e(Pe,iT),e(iT,bve),e(bve,Rgr),e(iT,Pgr),e(iT,IH),e(IH,Bgr),e(iT,Igr),e(Pe,Ngr),e(Pe,dT),e(dT,vve),e(vve,qgr),e(dT,jgr),e(dT,NH),e(NH,Dgr),e(dT,Ggr),e(Pe,Ogr),e(Pe,cT),e(cT,Fve),e(Fve,Vgr),e(cT,Xgr),e(cT,qH),e(qH,zgr),e(cT,Wgr),e(Pe,Qgr),e(Pe,fT),e(fT,Tve),e(Tve,Hgr),e(fT,Ugr),e(fT,jH),e(jH,Jgr),e(fT,Ygr),e(Pe,Kgr),e(Pe,mT),e(mT,Mve),e(Mve,Zgr),e(mT,ehr),e(mT,DH),e(DH,ohr),e(mT,rhr),e(Pe,thr),e(Pe,gT),e(gT,Eve),e(Eve,ahr),e(gT,nhr),e(gT,GH),e(GH,shr),e(gT,lhr),e(Pe,ihr),e(Pe,hT),e(hT,Cve),e(Cve,dhr),e(hT,chr),e(hT,OH),e(OH,fhr),e(hT,mhr),e(Pe,ghr),e(Pe,pT),e(pT,wve),e(wve,hhr),e(pT,phr),e(pT,VH),e(VH,_hr),e(pT,uhr),e(Pe,bhr),e(Pe,_T),e(_T,Ave),e(Ave,vhr),e(_T,Fhr),e(_T,XH),e(XH,Thr),e(_T,Mhr),e(mo,Ehr),e(mo,uT),e(uT,Chr),e(uT,Lve),e(Lve,whr),e(uT,Ahr),e(uT,yve),e(yve,Lhr),e(mo,yhr),M(bT,mo,null),b(f,bWe,u),b(f,Bd,u),e(Bd,vT),e(vT,xve),M(v9,xve,null),e(Bd,xhr),e(Bd,$ve),e($ve,$hr),b(f,vWe,u),b(f,Qo,u),M(F9,Qo,null),e(Qo,khr),e(Qo,Id),e(Id,Shr),e(Id,zH),e(zH,Rhr),e(Id,Phr),e(Id,WH),e(WH,Bhr),e(Id,Ihr),e(Qo,Nhr),e(Qo,T9),e(T9,qhr),e(T9,kve),e(kve,jhr),e(T9,Dhr),e(Qo,Ghr),e(Qo,Ct),M(M9,Ct,null),e(Ct,Ohr),e(Ct,Sve),e(Sve,Vhr),e(Ct,Xhr),e(Ct,Nd),e(Nd,zhr),e(Nd,Rve),e(Rve,Whr),e(Nd,Qhr),e(Nd,QH),e(QH,Hhr),e(Nd,Uhr),e(Ct,Jhr),M(FT,Ct,null),e(Qo,Yhr),e(Qo,go),M(E9,go,null),e(go,Khr),e(go,Pve),e(Pve,Zhr),e(go,epr),e(go,Ya),e(Ya,opr),e(Ya,Bve),e(Bve,rpr),e(Ya,tpr),e(Ya,Ive),e(Ive,apr),e(Ya,npr),e(Ya,Nve),e(Nve,spr),e(Ya,lpr),e(go,ipr),e(go,rt),e(rt,TT),e(TT,qve),e(qve,dpr),e(TT,cpr),e(TT,HH),e(HH,fpr),e(TT,mpr),e(rt,gpr),e(rt,MT),e(MT,jve),e(jve,hpr),e(MT,ppr),e(MT,UH),e(UH,_pr),e(MT,upr),e(rt,bpr),e(rt,ET),e(ET,Dve),e(Dve,vpr),e(ET,Fpr),e(ET,JH),e(JH,Tpr),e(ET,Mpr),e(rt,Epr),e(rt,CT),e(CT,Gve),e(Gve,Cpr),e(CT,wpr),e(CT,YH),e(YH,Apr),e(CT,Lpr),e(rt,ypr),e(rt,wT),e(wT,Ove),e(Ove,xpr),e(wT,$pr),e(wT,KH),e(KH,kpr),e(wT,Spr),e(go,Rpr),e(go,AT),e(AT,Ppr),e(AT,Vve),e(Vve,Bpr),e(AT,Ipr),e(AT,Xve),e(Xve,Npr),e(go,qpr),M(LT,go,null),b(f,FWe,u),b(f,qd,u),e(qd,yT),e(yT,zve),M(C9,zve,null),e(qd,jpr),e(qd,Wve),e(Wve,Dpr),b(f,TWe,u),b(f,Ho,u),M(w9,Ho,null),e(Ho,Gpr),e(Ho,jd),e(jd,Opr),e(jd,ZH),e(ZH,Vpr),e(jd,Xpr),e(jd,eU),e(eU,zpr),e(jd,Wpr),e(Ho,Qpr),e(Ho,A9),e(A9,Hpr),e(A9,Qve),e(Qve,Upr),e(A9,Jpr),e(Ho,Ypr),e(Ho,wt),M(L9,wt,null),e(wt,Kpr),e(wt,Hve),e(Hve,Zpr),e(wt,e_r),e(wt,Dd),e(Dd,o_r),e(Dd,Uve),e(Uve,r_r),e(Dd,t_r),e(Dd,oU),e(oU,a_r),e(Dd,n_r),e(wt,s_r),M(xT,wt,null),e(Ho,l_r),e(Ho,ho),M(y9,ho,null),e(ho,i_r),e(ho,Jve),e(Jve,d_r),e(ho,c_r),e(ho,Ka),e(Ka,f_r),e(Ka,Yve),e(Yve,m_r),e(Ka,g_r),e(Ka,Kve),e(Kve,h_r),e(Ka,p_r),e(Ka,Zve),e(Zve,__r),e(Ka,u_r),e(ho,b_r),e(ho,Le),e(Le,$T),e($T,e0e),e(e0e,v_r),e($T,F_r),e($T,rU),e(rU,T_r),e($T,M_r),e(Le,E_r),e(Le,kT),e(kT,o0e),e(o0e,C_r),e(kT,w_r),e(kT,tU),e(tU,A_r),e(kT,L_r),e(Le,y_r),e(Le,ST),e(ST,r0e),e(r0e,x_r),e(ST,$_r),e(ST,aU),e(aU,k_r),e(ST,S_r),e(Le,R_r),e(Le,RT),e(RT,t0e),e(t0e,P_r),e(RT,B_r),e(RT,nU),e(nU,I_r),e(RT,N_r),e(Le,q_r),e(Le,PT),e(PT,a0e),e(a0e,j_r),e(PT,D_r),e(PT,sU),e(sU,G_r),e(PT,O_r),e(Le,V_r),e(Le,BT),e(BT,n0e),e(n0e,X_r),e(BT,z_r),e(BT,lU),e(lU,W_r),e(BT,Q_r),e(Le,H_r),e(Le,IT),e(IT,s0e),e(s0e,U_r),e(IT,J_r),e(IT,iU),e(iU,Y_r),e(IT,K_r),e(Le,Z_r),e(Le,NT),e(NT,l0e),e(l0e,eur),e(NT,our),e(NT,dU),e(dU,rur),e(NT,tur),e(Le,aur),e(Le,qT),e(qT,i0e),e(i0e,nur),e(qT,sur),e(qT,cU),e(cU,lur),e(qT,iur),e(Le,dur),e(Le,jT),e(jT,d0e),e(d0e,cur),e(jT,fur),e(jT,fU),e(fU,mur),e(jT,gur),e(ho,hur),e(ho,DT),e(DT,pur),e(DT,c0e),e(c0e,_ur),e(DT,uur),e(DT,f0e),e(f0e,bur),e(ho,vur),M(GT,ho,null),b(f,MWe,u),b(f,Gd,u),e(Gd,OT),e(OT,m0e),M(x9,m0e,null),e(Gd,Fur),e(Gd,g0e),e(g0e,Tur),b(f,EWe,u),b(f,Uo,u),M($9,Uo,null),e(Uo,Mur),e(Uo,Od),e(Od,Eur),e(Od,mU),e(mU,Cur),e(Od,wur),e(Od,gU),e(gU,Aur),e(Od,Lur),e(Uo,yur),e(Uo,k9),e(k9,xur),e(k9,h0e),e(h0e,$ur),e(k9,kur),e(Uo,Sur),e(Uo,At),M(S9,At,null),e(At,Rur),e(At,p0e),e(p0e,Pur),e(At,Bur),e(At,Vd),e(Vd,Iur),e(Vd,_0e),e(_0e,Nur),e(Vd,qur),e(Vd,hU),e(hU,jur),e(Vd,Dur),e(At,Gur),M(VT,At,null),e(Uo,Our),e(Uo,po),M(R9,po,null),e(po,Vur),e(po,u0e),e(u0e,Xur),e(po,zur),e(po,Za),e(Za,Wur),e(Za,b0e),e(b0e,Qur),e(Za,Hur),e(Za,v0e),e(v0e,Uur),e(Za,Jur),e(Za,F0e),e(F0e,Yur),e(Za,Kur),e(po,Zur),e(po,P9),e(P9,XT),e(XT,T0e),e(T0e,e2r),e(XT,o2r),e(XT,pU),e(pU,r2r),e(XT,t2r),e(P9,a2r),e(P9,zT),e(zT,M0e),e(M0e,n2r),e(zT,s2r),e(zT,_U),e(_U,l2r),e(zT,i2r),e(po,d2r),e(po,WT),e(WT,c2r),e(WT,E0e),e(E0e,f2r),e(WT,m2r),e(WT,C0e),e(C0e,g2r),e(po,h2r),M(QT,po,null),b(f,CWe,u),b(f,Xd,u),e(Xd,HT),e(HT,w0e),M(B9,w0e,null),e(Xd,p2r),e(Xd,A0e),e(A0e,_2r),b(f,wWe,u),b(f,Jo,u),M(I9,Jo,null),e(Jo,u2r),e(Jo,zd),e(zd,b2r),e(zd,uU),e(uU,v2r),e(zd,F2r),e(zd,bU),e(bU,T2r),e(zd,M2r),e(Jo,E2r),e(Jo,N9),e(N9,C2r),e(N9,L0e),e(L0e,w2r),e(N9,A2r),e(Jo,L2r),e(Jo,Lt),M(q9,Lt,null),e(Lt,y2r),e(Lt,y0e),e(y0e,x2r),e(Lt,$2r),e(Lt,Wd),e(Wd,k2r),e(Wd,x0e),e(x0e,S2r),e(Wd,R2r),e(Wd,vU),e(vU,P2r),e(Wd,B2r),e(Lt,I2r),M(UT,Lt,null),e(Jo,N2r),e(Jo,_o),M(j9,_o,null),e(_o,q2r),e(_o,$0e),e($0e,j2r),e(_o,D2r),e(_o,en),e(en,G2r),e(en,k0e),e(k0e,O2r),e(en,V2r),e(en,S0e),e(S0e,X2r),e(en,z2r),e(en,R0e),e(R0e,W2r),e(en,Q2r),e(_o,H2r),e(_o,tt),e(tt,JT),e(JT,P0e),e(P0e,U2r),e(JT,J2r),e(JT,FU),e(FU,Y2r),e(JT,K2r),e(tt,Z2r),e(tt,YT),e(YT,B0e),e(B0e,e1r),e(YT,o1r),e(YT,TU),e(TU,r1r),e(YT,t1r),e(tt,a1r),e(tt,KT),e(KT,I0e),e(I0e,n1r),e(KT,s1r),e(KT,MU),e(MU,l1r),e(KT,i1r),e(tt,d1r),e(tt,ZT),e(ZT,N0e),e(N0e,c1r),e(ZT,f1r),e(ZT,EU),e(EU,m1r),e(ZT,g1r),e(tt,h1r),e(tt,e8),e(e8,q0e),e(q0e,p1r),e(e8,_1r),e(e8,CU),e(CU,u1r),e(e8,b1r),e(_o,v1r),e(_o,o8),e(o8,F1r),e(o8,j0e),e(j0e,T1r),e(o8,M1r),e(o8,D0e),e(D0e,E1r),e(_o,C1r),M(r8,_o,null),b(f,AWe,u),b(f,Qd,u),e(Qd,t8),e(t8,G0e),M(D9,G0e,null),e(Qd,w1r),e(Qd,O0e),e(O0e,A1r),b(f,LWe,u),b(f,Yo,u),M(G9,Yo,null),e(Yo,L1r),e(Yo,Hd),e(Hd,y1r),e(Hd,wU),e(wU,x1r),e(Hd,$1r),e(Hd,AU),e(AU,k1r),e(Hd,S1r),e(Yo,R1r),e(Yo,O9),e(O9,P1r),e(O9,V0e),e(V0e,B1r),e(O9,I1r),e(Yo,N1r),e(Yo,yt),M(V9,yt,null),e(yt,q1r),e(yt,X0e),e(X0e,j1r),e(yt,D1r),e(yt,Ud),e(Ud,G1r),e(Ud,z0e),e(z0e,O1r),e(Ud,V1r),e(Ud,LU),e(LU,X1r),e(Ud,z1r),e(yt,W1r),M(a8,yt,null),e(Yo,Q1r),e(Yo,uo),M(X9,uo,null),e(uo,H1r),e(uo,W0e),e(W0e,U1r),e(uo,J1r),e(uo,on),e(on,Y1r),e(on,Q0e),e(Q0e,K1r),e(on,Z1r),e(on,H0e),e(H0e,e4r),e(on,o4r),e(on,U0e),e(U0e,r4r),e(on,t4r),e(uo,a4r),e(uo,rn),e(rn,n8),e(n8,J0e),e(J0e,n4r),e(n8,s4r),e(n8,yU),e(yU,l4r),e(n8,i4r),e(rn,d4r),e(rn,s8),e(s8,Y0e),e(Y0e,c4r),e(s8,f4r),e(s8,xU),e(xU,m4r),e(s8,g4r),e(rn,h4r),e(rn,l8),e(l8,K0e),e(K0e,p4r),e(l8,_4r),e(l8,$U),e($U,u4r),e(l8,b4r),e(rn,v4r),e(rn,i8),e(i8,Z0e),e(Z0e,F4r),e(i8,T4r),e(i8,kU),e(kU,M4r),e(i8,E4r),e(uo,C4r),e(uo,d8),e(d8,w4r),e(d8,eFe),e(eFe,A4r),e(d8,L4r),e(d8,oFe),e(oFe,y4r),e(uo,x4r),M(c8,uo,null),b(f,yWe,u),b(f,Jd,u),e(Jd,f8),e(f8,rFe),M(z9,rFe,null),e(Jd,$4r),e(Jd,tFe),e(tFe,k4r),b(f,xWe,u),b(f,Ko,u),M(W9,Ko,null),e(Ko,S4r),e(Ko,Yd),e(Yd,R4r),e(Yd,SU),e(SU,P4r),e(Yd,B4r),e(Yd,RU),e(RU,I4r),e(Yd,N4r),e(Ko,q4r),e(Ko,Q9),e(Q9,j4r),e(Q9,aFe),e(aFe,D4r),e(Q9,G4r),e(Ko,O4r),e(Ko,xt),M(H9,xt,null),e(xt,V4r),e(xt,nFe),e(nFe,X4r),e(xt,z4r),e(xt,Kd),e(Kd,W4r),e(Kd,sFe),e(sFe,Q4r),e(Kd,H4r),e(Kd,PU),e(PU,U4r),e(Kd,J4r),e(xt,Y4r),M(m8,xt,null),e(Ko,K4r),e(Ko,bo),M(U9,bo,null),e(bo,Z4r),e(bo,lFe),e(lFe,ebr),e(bo,obr),e(bo,tn),e(tn,rbr),e(tn,iFe),e(iFe,tbr),e(tn,abr),e(tn,dFe),e(dFe,nbr),e(tn,sbr),e(tn,cFe),e(cFe,lbr),e(tn,ibr),e(bo,dbr),e(bo,J9),e(J9,g8),e(g8,fFe),e(fFe,cbr),e(g8,fbr),e(g8,BU),e(BU,mbr),e(g8,gbr),e(J9,hbr),e(J9,h8),e(h8,mFe),e(mFe,pbr),e(h8,_br),e(h8,IU),e(IU,ubr),e(h8,bbr),e(bo,vbr),e(bo,p8),e(p8,Fbr),e(p8,gFe),e(gFe,Tbr),e(p8,Mbr),e(p8,hFe),e(hFe,Ebr),e(bo,Cbr),M(_8,bo,null),b(f,$We,u),b(f,Zd,u),e(Zd,u8),e(u8,pFe),M(Y9,pFe,null),e(Zd,wbr),e(Zd,_Fe),e(_Fe,Abr),b(f,kWe,u),b(f,Zo,u),M(K9,Zo,null),e(Zo,Lbr),e(Zo,ec),e(ec,ybr),e(ec,NU),e(NU,xbr),e(ec,$br),e(ec,qU),e(qU,kbr),e(ec,Sbr),e(Zo,Rbr),e(Zo,Z9),e(Z9,Pbr),e(Z9,uFe),e(uFe,Bbr),e(Z9,Ibr),e(Zo,Nbr),e(Zo,$t),M(ex,$t,null),e($t,qbr),e($t,bFe),e(bFe,jbr),e($t,Dbr),e($t,oc),e(oc,Gbr),e(oc,vFe),e(vFe,Obr),e(oc,Vbr),e(oc,jU),e(jU,Xbr),e(oc,zbr),e($t,Wbr),M(b8,$t,null),e(Zo,Qbr),e(Zo,vo),M(ox,vo,null),e(vo,Hbr),e(vo,FFe),e(FFe,Ubr),e(vo,Jbr),e(vo,an),e(an,Ybr),e(an,TFe),e(TFe,Kbr),e(an,Zbr),e(an,MFe),e(MFe,evr),e(an,ovr),e(an,EFe),e(EFe,rvr),e(an,tvr),e(vo,avr),e(vo,CFe),e(CFe,v8),e(v8,wFe),e(wFe,nvr),e(v8,svr),e(v8,DU),e(DU,lvr),e(v8,ivr),e(vo,dvr),e(vo,F8),e(F8,cvr),e(F8,AFe),e(AFe,fvr),e(F8,mvr),e(F8,LFe),e(LFe,gvr),e(vo,hvr),M(T8,vo,null),b(f,SWe,u),b(f,rc,u),e(rc,M8),e(M8,yFe),M(rx,yFe,null),e(rc,pvr),e(rc,xFe),e(xFe,_vr),b(f,RWe,u),b(f,er,u),M(tx,er,null),e(er,uvr),e(er,tc),e(tc,bvr),e(tc,GU),e(GU,vvr),e(tc,Fvr),e(tc,OU),e(OU,Tvr),e(tc,Mvr),e(er,Evr),e(er,ax),e(ax,Cvr),e(ax,$Fe),e($Fe,wvr),e(ax,Avr),e(er,Lvr),e(er,kt),M(nx,kt,null),e(kt,yvr),e(kt,kFe),e(kFe,xvr),e(kt,$vr),e(kt,ac),e(ac,kvr),e(ac,SFe),e(SFe,Svr),e(ac,Rvr),e(ac,VU),e(VU,Pvr),e(ac,Bvr),e(kt,Ivr),M(E8,kt,null),e(er,Nvr),e(er,Fo),M(sx,Fo,null),e(Fo,qvr),e(Fo,RFe),e(RFe,jvr),e(Fo,Dvr),e(Fo,nn),e(nn,Gvr),e(nn,PFe),e(PFe,Ovr),e(nn,Vvr),e(nn,BFe),e(BFe,Xvr),e(nn,zvr),e(nn,IFe),e(IFe,Wvr),e(nn,Qvr),e(Fo,Hvr),e(Fo,at),e(at,C8),e(C8,NFe),e(NFe,Uvr),e(C8,Jvr),e(C8,XU),e(XU,Yvr),e(C8,Kvr),e(at,Zvr),e(at,w8),e(w8,qFe),e(qFe,e0r),e(w8,o0r),e(w8,zU),e(zU,r0r),e(w8,t0r),e(at,a0r),e(at,A8),e(A8,jFe),e(jFe,n0r),e(A8,s0r),e(A8,WU),e(WU,l0r),e(A8,i0r),e(at,d0r),e(at,L8),e(L8,DFe),e(DFe,c0r),e(L8,f0r),e(L8,QU),e(QU,m0r),e(L8,g0r),e(at,h0r),e(at,y8),e(y8,GFe),e(GFe,p0r),e(y8,_0r),e(y8,HU),e(HU,u0r),e(y8,b0r),e(Fo,v0r),e(Fo,x8),e(x8,F0r),e(x8,OFe),e(OFe,T0r),e(x8,M0r),e(x8,VFe),e(VFe,E0r),e(Fo,C0r),M($8,Fo,null),b(f,PWe,u),b(f,nc,u),e(nc,k8),e(k8,XFe),M(lx,XFe,null),e(nc,w0r),e(nc,zFe),e(zFe,A0r),b(f,BWe,u),b(f,or,u),M(ix,or,null),e(or,L0r),e(or,sc),e(sc,y0r),e(sc,UU),e(UU,x0r),e(sc,$0r),e(sc,JU),e(JU,k0r),e(sc,S0r),e(or,R0r),e(or,dx),e(dx,P0r),e(dx,WFe),e(WFe,B0r),e(dx,I0r),e(or,N0r),e(or,St),M(cx,St,null),e(St,q0r),e(St,QFe),e(QFe,j0r),e(St,D0r),e(St,lc),e(lc,G0r),e(lc,HFe),e(HFe,O0r),e(lc,V0r),e(lc,YU),e(YU,X0r),e(lc,z0r),e(St,W0r),M(S8,St,null),e(or,Q0r),e(or,To),M(fx,To,null),e(To,H0r),e(To,UFe),e(UFe,U0r),e(To,J0r),e(To,sn),e(sn,Y0r),e(sn,JFe),e(JFe,K0r),e(sn,Z0r),e(sn,YFe),e(YFe,eFr),e(sn,oFr),e(sn,KFe),e(KFe,rFr),e(sn,tFr),e(To,aFr),e(To,ZFe),e(ZFe,R8),e(R8,eTe),e(eTe,nFr),e(R8,sFr),e(R8,KU),e(KU,lFr),e(R8,iFr),e(To,dFr),e(To,P8),e(P8,cFr),e(P8,oTe),e(oTe,fFr),e(P8,mFr),e(P8,rTe),e(rTe,gFr),e(To,hFr),M(B8,To,null),b(f,IWe,u),b(f,ic,u),e(ic,I8),e(I8,tTe),M(mx,tTe,null),e(ic,pFr),e(ic,aTe),e(aTe,_Fr),b(f,NWe,u),b(f,rr,u),M(gx,rr,null),e(rr,uFr),e(rr,dc),e(dc,bFr),e(dc,ZU),e(ZU,vFr),e(dc,FFr),e(dc,eJ),e(eJ,TFr),e(dc,MFr),e(rr,EFr),e(rr,hx),e(hx,CFr),e(hx,nTe),e(nTe,wFr),e(hx,AFr),e(rr,LFr),e(rr,Rt),M(px,Rt,null),e(Rt,yFr),e(Rt,sTe),e(sTe,xFr),e(Rt,$Fr),e(Rt,cc),e(cc,kFr),e(cc,lTe),e(lTe,SFr),e(cc,RFr),e(cc,oJ),e(oJ,PFr),e(cc,BFr),e(Rt,IFr),M(N8,Rt,null),e(rr,NFr),e(rr,$r),M(_x,$r,null),e($r,qFr),e($r,iTe),e(iTe,jFr),e($r,DFr),e($r,ln),e(ln,GFr),e(ln,dTe),e(dTe,OFr),e(ln,VFr),e(ln,cTe),e(cTe,XFr),e(ln,zFr),e(ln,fTe),e(fTe,WFr),e(ln,QFr),e($r,HFr),e($r,I),e(I,q8),e(q8,mTe),e(mTe,UFr),e(q8,JFr),e(q8,rJ),e(rJ,YFr),e(q8,KFr),e(I,ZFr),e(I,j8),e(j8,gTe),e(gTe,eTr),e(j8,oTr),e(j8,tJ),e(tJ,rTr),e(j8,tTr),e(I,aTr),e(I,D8),e(D8,hTe),e(hTe,nTr),e(D8,sTr),e(D8,aJ),e(aJ,lTr),e(D8,iTr),e(I,dTr),e(I,G8),e(G8,pTe),e(pTe,cTr),e(G8,fTr),e(G8,nJ),e(nJ,mTr),e(G8,gTr),e(I,hTr),e(I,O8),e(O8,_Te),e(_Te,pTr),e(O8,_Tr),e(O8,sJ),e(sJ,uTr),e(O8,bTr),e(I,vTr),e(I,V8),e(V8,uTe),e(uTe,FTr),e(V8,TTr),e(V8,lJ),e(lJ,MTr),e(V8,ETr),e(I,CTr),e(I,X8),e(X8,bTe),e(bTe,wTr),e(X8,ATr),e(X8,iJ),e(iJ,LTr),e(X8,yTr),e(I,xTr),e(I,z8),e(z8,vTe),e(vTe,$Tr),e(z8,kTr),e(z8,dJ),e(dJ,STr),e(z8,RTr),e(I,PTr),e(I,W8),e(W8,FTe),e(FTe,BTr),e(W8,ITr),e(W8,cJ),e(cJ,NTr),e(W8,qTr),e(I,jTr),e(I,Q8),e(Q8,TTe),e(TTe,DTr),e(Q8,GTr),e(Q8,fJ),e(fJ,OTr),e(Q8,VTr),e(I,XTr),e(I,H8),e(H8,MTe),e(MTe,zTr),e(H8,WTr),e(H8,mJ),e(mJ,QTr),e(H8,HTr),e(I,UTr),e(I,U8),e(U8,ETe),e(ETe,JTr),e(U8,YTr),e(U8,gJ),e(gJ,KTr),e(U8,ZTr),e(I,e8r),e(I,J8),e(J8,CTe),e(CTe,o8r),e(J8,r8r),e(J8,hJ),e(hJ,t8r),e(J8,a8r),e(I,n8r),e(I,Y8),e(Y8,wTe),e(wTe,s8r),e(Y8,l8r),e(Y8,pJ),e(pJ,i8r),e(Y8,d8r),e(I,c8r),e(I,K8),e(K8,ATe),e(ATe,f8r),e(K8,m8r),e(K8,_J),e(_J,g8r),e(K8,h8r),e(I,p8r),e(I,Z8),e(Z8,LTe),e(LTe,_8r),e(Z8,u8r),e(Z8,uJ),e(uJ,b8r),e(Z8,v8r),e(I,F8r),e(I,eM),e(eM,yTe),e(yTe,T8r),e(eM,M8r),e(eM,bJ),e(bJ,E8r),e(eM,C8r),e(I,w8r),e(I,oM),e(oM,xTe),e(xTe,A8r),e(oM,L8r),e(oM,vJ),e(vJ,y8r),e(oM,x8r),e(I,$8r),e(I,Zs),e(Zs,$Te),e($Te,k8r),e(Zs,S8r),e(Zs,FJ),e(FJ,R8r),e(Zs,P8r),e(Zs,TJ),e(TJ,B8r),e(Zs,I8r),e(I,N8r),e(I,rM),e(rM,kTe),e(kTe,q8r),e(rM,j8r),e(rM,MJ),e(MJ,D8r),e(rM,G8r),e(I,O8r),e(I,tM),e(tM,STe),e(STe,V8r),e(tM,X8r),e(tM,EJ),e(EJ,z8r),e(tM,W8r),e(I,Q8r),e(I,aM),e(aM,RTe),e(RTe,H8r),e(aM,U8r),e(aM,CJ),e(CJ,J8r),e(aM,Y8r),e(I,K8r),e(I,nM),e(nM,PTe),e(PTe,Z8r),e(nM,eMr),e(nM,wJ),e(wJ,oMr),e(nM,rMr),e(I,tMr),e(I,sM),e(sM,BTe),e(BTe,aMr),e(sM,nMr),e(sM,AJ),e(AJ,sMr),e(sM,lMr),e(I,iMr),e(I,lM),e(lM,ITe),e(ITe,dMr),e(lM,cMr),e(lM,LJ),e(LJ,fMr),e(lM,mMr),e(I,gMr),e(I,iM),e(iM,NTe),e(NTe,hMr),e(iM,pMr),e(iM,yJ),e(yJ,_Mr),e(iM,uMr),e(I,bMr),e(I,dM),e(dM,qTe),e(qTe,vMr),e(dM,FMr),e(dM,xJ),e(xJ,TMr),e(dM,MMr),e(I,EMr),e(I,cM),e(cM,jTe),e(jTe,CMr),e(cM,wMr),e(cM,$J),e($J,AMr),e(cM,LMr),e(I,yMr),e(I,fM),e(fM,DTe),e(DTe,xMr),e(fM,$Mr),e(fM,kJ),e(kJ,kMr),e(fM,SMr),e(I,RMr),e(I,mM),e(mM,GTe),e(GTe,PMr),e(mM,BMr),e(mM,SJ),e(SJ,IMr),e(mM,NMr),e(I,qMr),e(I,gM),e(gM,OTe),e(OTe,jMr),e(gM,DMr),e(gM,RJ),e(RJ,GMr),e(gM,OMr),e(I,VMr),e(I,hM),e(hM,VTe),e(VTe,XMr),e(hM,zMr),e(hM,PJ),e(PJ,WMr),e(hM,QMr),e(I,HMr),e(I,pM),e(pM,XTe),e(XTe,UMr),e(pM,JMr),e(pM,BJ),e(BJ,YMr),e(pM,KMr),e(I,ZMr),e(I,_M),e(_M,zTe),e(zTe,eEr),e(_M,oEr),e(_M,IJ),e(IJ,rEr),e(_M,tEr),e(I,aEr),e(I,uM),e(uM,WTe),e(WTe,nEr),e(uM,sEr),e(uM,NJ),e(NJ,lEr),e(uM,iEr),e(I,dEr),e(I,bM),e(bM,QTe),e(QTe,cEr),e(bM,fEr),e(bM,qJ),e(qJ,mEr),e(bM,gEr),e(I,hEr),e(I,vM),e(vM,HTe),e(HTe,pEr),e(vM,_Er),e(vM,jJ),e(jJ,uEr),e(vM,bEr),e(I,vEr),e(I,FM),e(FM,UTe),e(UTe,FEr),e(FM,TEr),e(FM,DJ),e(DJ,MEr),e(FM,EEr),e(I,CEr),e(I,TM),e(TM,JTe),e(JTe,wEr),e(TM,AEr),e(TM,GJ),e(GJ,LEr),e(TM,yEr),e(I,xEr),e(I,MM),e(MM,YTe),e(YTe,$Er),e(MM,kEr),e(MM,OJ),e(OJ,SEr),e(MM,REr),e(I,PEr),e(I,EM),e(EM,KTe),e(KTe,BEr),e(EM,IEr),e(EM,VJ),e(VJ,NEr),e(EM,qEr),e(I,jEr),e(I,CM),e(CM,ZTe),e(ZTe,DEr),e(CM,GEr),e(CM,XJ),e(XJ,OEr),e(CM,VEr),e(I,XEr),e(I,wM),e(wM,e8e),e(e8e,zEr),e(wM,WEr),e(wM,zJ),e(zJ,QEr),e(wM,HEr),e(I,UEr),e(I,AM),e(AM,o8e),e(o8e,JEr),e(AM,YEr),e(AM,WJ),e(WJ,KEr),e(AM,ZEr),e(I,eCr),e(I,LM),e(LM,r8e),e(r8e,oCr),e(LM,rCr),e(LM,QJ),e(QJ,tCr),e(LM,aCr),e(I,nCr),e(I,yM),e(yM,t8e),e(t8e,sCr),e(yM,lCr),e(yM,HJ),e(HJ,iCr),e(yM,dCr),e(I,cCr),e(I,xM),e(xM,a8e),e(a8e,fCr),e(xM,mCr),e(xM,UJ),e(UJ,gCr),e(xM,hCr),e(I,pCr),e(I,$M),e($M,n8e),e(n8e,_Cr),e($M,uCr),e($M,JJ),e(JJ,bCr),e($M,vCr),e(I,FCr),e(I,kM),e(kM,s8e),e(s8e,TCr),e(kM,MCr),e(kM,YJ),e(YJ,ECr),e(kM,CCr),e(I,wCr),e(I,SM),e(SM,l8e),e(l8e,ACr),e(SM,LCr),e(SM,KJ),e(KJ,yCr),e(SM,xCr),e(I,$Cr),e(I,RM),e(RM,i8e),e(i8e,kCr),e(RM,SCr),e(RM,ZJ),e(ZJ,RCr),e(RM,PCr),e($r,BCr),M(PM,$r,null),b(f,qWe,u),b(f,fc,u),e(fc,BM),e(BM,d8e),M(ux,d8e,null),e(fc,ICr),e(fc,c8e),e(c8e,NCr),b(f,jWe,u),b(f,tr,u),M(bx,tr,null),e(tr,qCr),e(tr,mc),e(mc,jCr),e(mc,eY),e(eY,DCr),e(mc,GCr),e(mc,oY),e(oY,OCr),e(mc,VCr),e(tr,XCr),e(tr,vx),e(vx,zCr),e(vx,f8e),e(f8e,WCr),e(vx,QCr),e(tr,HCr),e(tr,Pt),M(Fx,Pt,null),e(Pt,UCr),e(Pt,m8e),e(m8e,JCr),e(Pt,YCr),e(Pt,gc),e(gc,KCr),e(gc,g8e),e(g8e,ZCr),e(gc,e5r),e(gc,rY),e(rY,o5r),e(gc,r5r),e(Pt,t5r),M(IM,Pt,null),e(tr,a5r),e(tr,kr),M(Tx,kr,null),e(kr,n5r),e(kr,h8e),e(h8e,s5r),e(kr,l5r),e(kr,dn),e(dn,i5r),e(dn,p8e),e(p8e,d5r),e(dn,c5r),e(dn,_8e),e(_8e,f5r),e(dn,m5r),e(dn,u8e),e(u8e,g5r),e(dn,h5r),e(kr,p5r),e(kr,se),e(se,NM),e(NM,b8e),e(b8e,_5r),e(NM,u5r),e(NM,tY),e(tY,b5r),e(NM,v5r),e(se,F5r),e(se,qM),e(qM,v8e),e(v8e,T5r),e(qM,M5r),e(qM,aY),e(aY,E5r),e(qM,C5r),e(se,w5r),e(se,jM),e(jM,F8e),e(F8e,A5r),e(jM,L5r),e(jM,nY),e(nY,y5r),e(jM,x5r),e(se,$5r),e(se,DM),e(DM,T8e),e(T8e,k5r),e(DM,S5r),e(DM,sY),e(sY,R5r),e(DM,P5r),e(se,B5r),e(se,GM),e(GM,M8e),e(M8e,I5r),e(GM,N5r),e(GM,lY),e(lY,q5r),e(GM,j5r),e(se,D5r),e(se,OM),e(OM,E8e),e(E8e,G5r),e(OM,O5r),e(OM,iY),e(iY,V5r),e(OM,X5r),e(se,z5r),e(se,VM),e(VM,C8e),e(C8e,W5r),e(VM,Q5r),e(VM,dY),e(dY,H5r),e(VM,U5r),e(se,J5r),e(se,XM),e(XM,w8e),e(w8e,Y5r),e(XM,K5r),e(XM,cY),e(cY,Z5r),e(XM,e3r),e(se,o3r),e(se,zM),e(zM,A8e),e(A8e,r3r),e(zM,t3r),e(zM,fY),e(fY,a3r),e(zM,n3r),e(se,s3r),e(se,WM),e(WM,L8e),e(L8e,l3r),e(WM,i3r),e(WM,mY),e(mY,d3r),e(WM,c3r),e(se,f3r),e(se,QM),e(QM,y8e),e(y8e,m3r),e(QM,g3r),e(QM,gY),e(gY,h3r),e(QM,p3r),e(se,_3r),e(se,HM),e(HM,x8e),e(x8e,u3r),e(HM,b3r),e(HM,hY),e(hY,v3r),e(HM,F3r),e(se,T3r),e(se,UM),e(UM,$8e),e($8e,M3r),e(UM,E3r),e(UM,pY),e(pY,C3r),e(UM,w3r),e(se,A3r),e(se,JM),e(JM,k8e),e(k8e,L3r),e(JM,y3r),e(JM,_Y),e(_Y,x3r),e(JM,$3r),e(se,k3r),e(se,YM),e(YM,S8e),e(S8e,S3r),e(YM,R3r),e(YM,uY),e(uY,P3r),e(YM,B3r),e(se,I3r),e(se,KM),e(KM,R8e),e(R8e,N3r),e(KM,q3r),e(KM,bY),e(bY,j3r),e(KM,D3r),e(se,G3r),e(se,ZM),e(ZM,P8e),e(P8e,O3r),e(ZM,V3r),e(ZM,vY),e(vY,X3r),e(ZM,z3r),e(se,W3r),e(se,eE),e(eE,B8e),e(B8e,Q3r),e(eE,H3r),e(eE,FY),e(FY,U3r),e(eE,J3r),e(se,Y3r),e(se,oE),e(oE,I8e),e(I8e,K3r),e(oE,Z3r),e(oE,TY),e(TY,ewr),e(oE,owr),e(se,rwr),e(se,rE),e(rE,N8e),e(N8e,twr),e(rE,awr),e(rE,MY),e(MY,nwr),e(rE,swr),e(se,lwr),e(se,tE),e(tE,q8e),e(q8e,iwr),e(tE,dwr),e(tE,EY),e(EY,cwr),e(tE,fwr),e(se,mwr),e(se,aE),e(aE,j8e),e(j8e,gwr),e(aE,hwr),e(aE,CY),e(CY,pwr),e(aE,_wr),e(se,uwr),e(se,nE),e(nE,D8e),e(D8e,bwr),e(nE,vwr),e(nE,wY),e(wY,Fwr),e(nE,Twr),e(kr,Mwr),M(sE,kr,null),b(f,DWe,u),b(f,hc,u),e(hc,lE),e(lE,G8e),M(Mx,G8e,null),e(hc,Ewr),e(hc,O8e),e(O8e,Cwr),b(f,GWe,u),b(f,ar,u),M(Ex,ar,null),e(ar,wwr),e(ar,pc),e(pc,Awr),e(pc,AY),e(AY,Lwr),e(pc,ywr),e(pc,LY),e(LY,xwr),e(pc,$wr),e(ar,kwr),e(ar,Cx),e(Cx,Swr),e(Cx,V8e),e(V8e,Rwr),e(Cx,Pwr),e(ar,Bwr),e(ar,Bt),M(wx,Bt,null),e(Bt,Iwr),e(Bt,X8e),e(X8e,Nwr),e(Bt,qwr),e(Bt,_c),e(_c,jwr),e(_c,z8e),e(z8e,Dwr),e(_c,Gwr),e(_c,yY),e(yY,Owr),e(_c,Vwr),e(Bt,Xwr),M(iE,Bt,null),e(ar,zwr),e(ar,Sr),M(Ax,Sr,null),e(Sr,Wwr),e(Sr,W8e),e(W8e,Qwr),e(Sr,Hwr),e(Sr,cn),e(cn,Uwr),e(cn,Q8e),e(Q8e,Jwr),e(cn,Ywr),e(cn,H8e),e(H8e,Kwr),e(cn,Zwr),e(cn,U8e),e(U8e,e6r),e(cn,o6r),e(Sr,r6r),e(Sr,Me),e(Me,dE),e(dE,J8e),e(J8e,t6r),e(dE,a6r),e(dE,xY),e(xY,n6r),e(dE,s6r),e(Me,l6r),e(Me,cE),e(cE,Y8e),e(Y8e,i6r),e(cE,d6r),e(cE,$Y),e($Y,c6r),e(cE,f6r),e(Me,m6r),e(Me,fE),e(fE,K8e),e(K8e,g6r),e(fE,h6r),e(fE,kY),e(kY,p6r),e(fE,_6r),e(Me,u6r),e(Me,mE),e(mE,Z8e),e(Z8e,b6r),e(mE,v6r),e(mE,SY),e(SY,F6r),e(mE,T6r),e(Me,M6r),e(Me,gE),e(gE,eMe),e(eMe,E6r),e(gE,C6r),e(gE,RY),e(RY,w6r),e(gE,A6r),e(Me,L6r),e(Me,hE),e(hE,oMe),e(oMe,y6r),e(hE,x6r),e(hE,PY),e(PY,$6r),e(hE,k6r),e(Me,S6r),e(Me,pE),e(pE,rMe),e(rMe,R6r),e(pE,P6r),e(pE,BY),e(BY,B6r),e(pE,I6r),e(Me,N6r),e(Me,_E),e(_E,tMe),e(tMe,q6r),e(_E,j6r),e(_E,IY),e(IY,D6r),e(_E,G6r),e(Me,O6r),e(Me,uE),e(uE,aMe),e(aMe,V6r),e(uE,X6r),e(uE,NY),e(NY,z6r),e(uE,W6r),e(Me,Q6r),e(Me,bE),e(bE,nMe),e(nMe,H6r),e(bE,U6r),e(bE,qY),e(qY,J6r),e(bE,Y6r),e(Me,K6r),e(Me,vE),e(vE,sMe),e(sMe,Z6r),e(vE,eAr),e(vE,jY),e(jY,oAr),e(vE,rAr),e(Me,tAr),e(Me,FE),e(FE,lMe),e(lMe,aAr),e(FE,nAr),e(FE,DY),e(DY,sAr),e(FE,lAr),e(Me,iAr),e(Me,TE),e(TE,iMe),e(iMe,dAr),e(TE,cAr),e(TE,GY),e(GY,fAr),e(TE,mAr),e(Sr,gAr),M(ME,Sr,null),b(f,OWe,u),b(f,uc,u),e(uc,EE),e(EE,dMe),M(Lx,dMe,null),e(uc,hAr),e(uc,cMe),e(cMe,pAr),b(f,VWe,u),b(f,nr,u),M(yx,nr,null),e(nr,_Ar),e(nr,bc),e(bc,uAr),e(bc,OY),e(OY,bAr),e(bc,vAr),e(bc,VY),e(VY,FAr),e(bc,TAr),e(nr,MAr),e(nr,xx),e(xx,EAr),e(xx,fMe),e(fMe,CAr),e(xx,wAr),e(nr,AAr),e(nr,It),M($x,It,null),e(It,LAr),e(It,mMe),e(mMe,yAr),e(It,xAr),e(It,vc),e(vc,$Ar),e(vc,gMe),e(gMe,kAr),e(vc,SAr),e(vc,XY),e(XY,RAr),e(vc,PAr),e(It,BAr),M(CE,It,null),e(nr,IAr),e(nr,Rr),M(kx,Rr,null),e(Rr,NAr),e(Rr,hMe),e(hMe,qAr),e(Rr,jAr),e(Rr,fn),e(fn,DAr),e(fn,pMe),e(pMe,GAr),e(fn,OAr),e(fn,_Me),e(_Me,VAr),e(fn,XAr),e(fn,uMe),e(uMe,zAr),e(fn,WAr),e(Rr,QAr),e(Rr,Ve),e(Ve,wE),e(wE,bMe),e(bMe,HAr),e(wE,UAr),e(wE,zY),e(zY,JAr),e(wE,YAr),e(Ve,KAr),e(Ve,AE),e(AE,vMe),e(vMe,ZAr),e(AE,e7r),e(AE,WY),e(WY,o7r),e(AE,r7r),e(Ve,t7r),e(Ve,el),e(el,FMe),e(FMe,a7r),e(el,n7r),e(el,QY),e(QY,s7r),e(el,l7r),e(el,HY),e(HY,i7r),e(el,d7r),e(Ve,c7r),e(Ve,LE),e(LE,TMe),e(TMe,f7r),e(LE,m7r),e(LE,UY),e(UY,g7r),e(LE,h7r),e(Ve,p7r),e(Ve,yE),e(yE,MMe),e(MMe,_7r),e(yE,u7r),e(yE,JY),e(JY,b7r),e(yE,v7r),e(Ve,F7r),e(Ve,xE),e(xE,EMe),e(EMe,T7r),e(xE,M7r),e(xE,YY),e(YY,E7r),e(xE,C7r),e(Ve,w7r),e(Ve,$E),e($E,CMe),e(CMe,A7r),e($E,L7r),e($E,KY),e(KY,y7r),e($E,x7r),e(Ve,$7r),e(Ve,kE),e(kE,wMe),e(wMe,k7r),e(kE,S7r),e(kE,ZY),e(ZY,R7r),e(kE,P7r),e(Rr,B7r),M(SE,Rr,null),b(f,XWe,u),b(f,Fc,u),e(Fc,RE),e(RE,AMe),M(Sx,AMe,null),e(Fc,I7r),e(Fc,LMe),e(LMe,N7r),b(f,zWe,u),b(f,sr,u),M(Rx,sr,null),e(sr,q7r),e(sr,Tc),e(Tc,j7r),e(Tc,eK),e(eK,D7r),e(Tc,G7r),e(Tc,oK),e(oK,O7r),e(Tc,V7r),e(sr,X7r),e(sr,Px),e(Px,z7r),e(Px,yMe),e(yMe,W7r),e(Px,Q7r),e(sr,H7r),e(sr,Nt),M(Bx,Nt,null),e(Nt,U7r),e(Nt,xMe),e(xMe,J7r),e(Nt,Y7r),e(Nt,Mc),e(Mc,K7r),e(Mc,$Me),e($Me,Z7r),e(Mc,eLr),e(Mc,rK),e(rK,oLr),e(Mc,rLr),e(Nt,tLr),M(PE,Nt,null),e(sr,aLr),e(sr,Pr),M(Ix,Pr,null),e(Pr,nLr),e(Pr,kMe),e(kMe,sLr),e(Pr,lLr),e(Pr,mn),e(mn,iLr),e(mn,SMe),e(SMe,dLr),e(mn,cLr),e(mn,RMe),e(RMe,fLr),e(mn,mLr),e(mn,PMe),e(PMe,gLr),e(mn,hLr),e(Pr,pLr),e(Pr,ie),e(ie,BE),e(BE,BMe),e(BMe,_Lr),e(BE,uLr),e(BE,tK),e(tK,bLr),e(BE,vLr),e(ie,FLr),e(ie,IE),e(IE,IMe),e(IMe,TLr),e(IE,MLr),e(IE,aK),e(aK,ELr),e(IE,CLr),e(ie,wLr),e(ie,NE),e(NE,NMe),e(NMe,ALr),e(NE,LLr),e(NE,nK),e(nK,yLr),e(NE,xLr),e(ie,$Lr),e(ie,qE),e(qE,qMe),e(qMe,kLr),e(qE,SLr),e(qE,sK),e(sK,RLr),e(qE,PLr),e(ie,BLr),e(ie,jE),e(jE,jMe),e(jMe,ILr),e(jE,NLr),e(jE,lK),e(lK,qLr),e(jE,jLr),e(ie,DLr),e(ie,DE),e(DE,DMe),e(DMe,GLr),e(DE,OLr),e(DE,iK),e(iK,VLr),e(DE,XLr),e(ie,zLr),e(ie,GE),e(GE,GMe),e(GMe,WLr),e(GE,QLr),e(GE,dK),e(dK,HLr),e(GE,ULr),e(ie,JLr),e(ie,OE),e(OE,OMe),e(OMe,YLr),e(OE,KLr),e(OE,cK),e(cK,ZLr),e(OE,eyr),e(ie,oyr),e(ie,VE),e(VE,VMe),e(VMe,ryr),e(VE,tyr),e(VE,fK),e(fK,ayr),e(VE,nyr),e(ie,syr),e(ie,XE),e(XE,XMe),e(XMe,lyr),e(XE,iyr),e(XE,mK),e(mK,dyr),e(XE,cyr),e(ie,fyr),e(ie,zE),e(zE,zMe),e(zMe,myr),e(zE,gyr),e(zE,gK),e(gK,hyr),e(zE,pyr),e(ie,_yr),e(ie,WE),e(WE,WMe),e(WMe,uyr),e(WE,byr),e(WE,hK),e(hK,vyr),e(WE,Fyr),e(ie,Tyr),e(ie,QE),e(QE,QMe),e(QMe,Myr),e(QE,Eyr),e(QE,pK),e(pK,Cyr),e(QE,wyr),e(ie,Ayr),e(ie,HE),e(HE,HMe),e(HMe,Lyr),e(HE,yyr),e(HE,_K),e(_K,xyr),e(HE,$yr),e(ie,kyr),e(ie,UE),e(UE,UMe),e(UMe,Syr),e(UE,Ryr),e(UE,uK),e(uK,Pyr),e(UE,Byr),e(ie,Iyr),e(ie,JE),e(JE,JMe),e(JMe,Nyr),e(JE,qyr),e(JE,bK),e(bK,jyr),e(JE,Dyr),e(ie,Gyr),e(ie,YE),e(YE,YMe),e(YMe,Oyr),e(YE,Vyr),e(YE,vK),e(vK,Xyr),e(YE,zyr),e(ie,Wyr),e(ie,KE),e(KE,KMe),e(KMe,Qyr),e(KE,Hyr),e(KE,FK),e(FK,Uyr),e(KE,Jyr),e(ie,Yyr),e(ie,ZE),e(ZE,ZMe),e(ZMe,Kyr),e(ZE,Zyr),e(ZE,TK),e(TK,e9r),e(ZE,o9r),e(ie,r9r),e(ie,eC),e(eC,eEe),e(eEe,t9r),e(eC,a9r),e(eC,MK),e(MK,n9r),e(eC,s9r),e(Pr,l9r),M(oC,Pr,null),b(f,WWe,u),b(f,Ec,u),e(Ec,rC),e(rC,oEe),M(Nx,oEe,null),e(Ec,i9r),e(Ec,rEe),e(rEe,d9r),b(f,QWe,u),b(f,lr,u),M(qx,lr,null),e(lr,c9r),e(lr,Cc),e(Cc,f9r),e(Cc,EK),e(EK,m9r),e(Cc,g9r),e(Cc,CK),e(CK,h9r),e(Cc,p9r),e(lr,_9r),e(lr,jx),e(jx,u9r),e(jx,tEe),e(tEe,b9r),e(jx,v9r),e(lr,F9r),e(lr,qt),M(Dx,qt,null),e(qt,T9r),e(qt,aEe),e(aEe,M9r),e(qt,E9r),e(qt,wc),e(wc,C9r),e(wc,nEe),e(nEe,w9r),e(wc,A9r),e(wc,wK),e(wK,L9r),e(wc,y9r),e(qt,x9r),M(tC,qt,null),e(lr,$9r),e(lr,Br),M(Gx,Br,null),e(Br,k9r),e(Br,sEe),e(sEe,S9r),e(Br,R9r),e(Br,gn),e(gn,P9r),e(gn,lEe),e(lEe,B9r),e(gn,I9r),e(gn,iEe),e(iEe,N9r),e(gn,q9r),e(gn,dEe),e(dEe,j9r),e(gn,D9r),e(Br,G9r),e(Br,ye),e(ye,aC),e(aC,cEe),e(cEe,O9r),e(aC,V9r),e(aC,AK),e(AK,X9r),e(aC,z9r),e(ye,W9r),e(ye,nC),e(nC,fEe),e(fEe,Q9r),e(nC,H9r),e(nC,LK),e(LK,U9r),e(nC,J9r),e(ye,Y9r),e(ye,sC),e(sC,mEe),e(mEe,K9r),e(sC,Z9r),e(sC,yK),e(yK,exr),e(sC,oxr),e(ye,rxr),e(ye,lC),e(lC,gEe),e(gEe,txr),e(lC,axr),e(lC,xK),e(xK,nxr),e(lC,sxr),e(ye,lxr),e(ye,iC),e(iC,hEe),e(hEe,ixr),e(iC,dxr),e(iC,$K),e($K,cxr),e(iC,fxr),e(ye,mxr),e(ye,dC),e(dC,pEe),e(pEe,gxr),e(dC,hxr),e(dC,kK),e(kK,pxr),e(dC,_xr),e(ye,uxr),e(ye,cC),e(cC,_Ee),e(_Ee,bxr),e(cC,vxr),e(cC,SK),e(SK,Fxr),e(cC,Txr),e(ye,Mxr),e(ye,fC),e(fC,uEe),e(uEe,Exr),e(fC,Cxr),e(fC,RK),e(RK,wxr),e(fC,Axr),e(ye,Lxr),e(ye,mC),e(mC,bEe),e(bEe,yxr),e(mC,xxr),e(mC,PK),e(PK,$xr),e(mC,kxr),e(ye,Sxr),e(ye,gC),e(gC,vEe),e(vEe,Rxr),e(gC,Pxr),e(gC,BK),e(BK,Bxr),e(gC,Ixr),e(Br,Nxr),M(hC,Br,null),b(f,HWe,u),b(f,Ac,u),e(Ac,pC),e(pC,FEe),M(Ox,FEe,null),e(Ac,qxr),e(Ac,TEe),e(TEe,jxr),b(f,UWe,u),b(f,ir,u),M(Vx,ir,null),e(ir,Dxr),e(ir,Lc),e(Lc,Gxr),e(Lc,IK),e(IK,Oxr),e(Lc,Vxr),e(Lc,NK),e(NK,Xxr),e(Lc,zxr),e(ir,Wxr),e(ir,Xx),e(Xx,Qxr),e(Xx,MEe),e(MEe,Hxr),e(Xx,Uxr),e(ir,Jxr),e(ir,jt),M(zx,jt,null),e(jt,Yxr),e(jt,EEe),e(EEe,Kxr),e(jt,Zxr),e(jt,yc),e(yc,e$r),e(yc,CEe),e(CEe,o$r),e(yc,r$r),e(yc,qK),e(qK,t$r),e(yc,a$r),e(jt,n$r),M(_C,jt,null),e(ir,s$r),e(ir,Ir),M(Wx,Ir,null),e(Ir,l$r),e(Ir,wEe),e(wEe,i$r),e(Ir,d$r),e(Ir,hn),e(hn,c$r),e(hn,AEe),e(AEe,f$r),e(hn,m$r),e(hn,LEe),e(LEe,g$r),e(hn,h$r),e(hn,yEe),e(yEe,p$r),e(hn,_$r),e(Ir,u$r),e(Ir,te),e(te,uC),e(uC,xEe),e(xEe,b$r),e(uC,v$r),e(uC,jK),e(jK,F$r),e(uC,T$r),e(te,M$r),e(te,bC),e(bC,$Ee),e($Ee,E$r),e(bC,C$r),e(bC,DK),e(DK,w$r),e(bC,A$r),e(te,L$r),e(te,vC),e(vC,kEe),e(kEe,y$r),e(vC,x$r),e(vC,GK),e(GK,$$r),e(vC,k$r),e(te,S$r),e(te,FC),e(FC,SEe),e(SEe,R$r),e(FC,P$r),e(FC,OK),e(OK,B$r),e(FC,I$r),e(te,N$r),e(te,TC),e(TC,REe),e(REe,q$r),e(TC,j$r),e(TC,VK),e(VK,D$r),e(TC,G$r),e(te,O$r),e(te,MC),e(MC,PEe),e(PEe,V$r),e(MC,X$r),e(MC,XK),e(XK,z$r),e(MC,W$r),e(te,Q$r),e(te,EC),e(EC,BEe),e(BEe,H$r),e(EC,U$r),e(EC,zK),e(zK,J$r),e(EC,Y$r),e(te,K$r),e(te,CC),e(CC,IEe),e(IEe,Z$r),e(CC,ekr),e(CC,WK),e(WK,okr),e(CC,rkr),e(te,tkr),e(te,wC),e(wC,NEe),e(NEe,akr),e(wC,nkr),e(wC,QK),e(QK,skr),e(wC,lkr),e(te,ikr),e(te,AC),e(AC,qEe),e(qEe,dkr),e(AC,ckr),e(AC,HK),e(HK,fkr),e(AC,mkr),e(te,gkr),e(te,LC),e(LC,jEe),e(jEe,hkr),e(LC,pkr),e(LC,UK),e(UK,_kr),e(LC,ukr),e(te,bkr),e(te,yC),e(yC,DEe),e(DEe,vkr),e(yC,Fkr),e(yC,JK),e(JK,Tkr),e(yC,Mkr),e(te,Ekr),e(te,xC),e(xC,GEe),e(GEe,Ckr),e(xC,wkr),e(xC,YK),e(YK,Akr),e(xC,Lkr),e(te,ykr),e(te,$C),e($C,OEe),e(OEe,xkr),e($C,$kr),e($C,KK),e(KK,kkr),e($C,Skr),e(te,Rkr),e(te,kC),e(kC,VEe),e(VEe,Pkr),e(kC,Bkr),e(kC,ZK),e(ZK,Ikr),e(kC,Nkr),e(te,qkr),e(te,SC),e(SC,XEe),e(XEe,jkr),e(SC,Dkr),e(SC,eZ),e(eZ,Gkr),e(SC,Okr),e(te,Vkr),e(te,RC),e(RC,zEe),e(zEe,Xkr),e(RC,zkr),e(RC,oZ),e(oZ,Wkr),e(RC,Qkr),e(te,Hkr),e(te,PC),e(PC,WEe),e(WEe,Ukr),e(PC,Jkr),e(PC,rZ),e(rZ,Ykr),e(PC,Kkr),e(te,Zkr),e(te,BC),e(BC,QEe),e(QEe,eSr),e(BC,oSr),e(BC,tZ),e(tZ,rSr),e(BC,tSr),e(te,aSr),e(te,IC),e(IC,HEe),e(HEe,nSr),e(IC,sSr),e(IC,aZ),e(aZ,lSr),e(IC,iSr),e(te,dSr),e(te,NC),e(NC,UEe),e(UEe,cSr),e(NC,fSr),e(NC,nZ),e(nZ,mSr),e(NC,gSr),e(te,hSr),e(te,qC),e(qC,JEe),e(JEe,pSr),e(qC,_Sr),e(qC,sZ),e(sZ,uSr),e(qC,bSr),e(te,vSr),e(te,jC),e(jC,YEe),e(YEe,FSr),e(jC,TSr),e(jC,lZ),e(lZ,MSr),e(jC,ESr),e(te,CSr),e(te,DC),e(DC,KEe),e(KEe,wSr),e(DC,ASr),e(DC,iZ),e(iZ,LSr),e(DC,ySr),e(te,xSr),e(te,GC),e(GC,ZEe),e(ZEe,$Sr),e(GC,kSr),e(GC,dZ),e(dZ,SSr),e(GC,RSr),e(te,PSr),e(te,OC),e(OC,eCe),e(eCe,BSr),e(OC,ISr),e(OC,cZ),e(cZ,NSr),e(OC,qSr),e(Ir,jSr),M(VC,Ir,null),b(f,JWe,u),b(f,xc,u),e(xc,XC),e(XC,oCe),M(Qx,oCe,null),e(xc,DSr),e(xc,rCe),e(rCe,GSr),b(f,YWe,u),b(f,dr,u),M(Hx,dr,null),e(dr,OSr),e(dr,$c),e($c,VSr),e($c,fZ),e(fZ,XSr),e($c,zSr),e($c,mZ),e(mZ,WSr),e($c,QSr),e(dr,HSr),e(dr,Ux),e(Ux,USr),e(Ux,tCe),e(tCe,JSr),e(Ux,YSr),e(dr,KSr),e(dr,Dt),M(Jx,Dt,null),e(Dt,ZSr),e(Dt,aCe),e(aCe,eRr),e(Dt,oRr),e(Dt,kc),e(kc,rRr),e(kc,nCe),e(nCe,tRr),e(kc,aRr),e(kc,gZ),e(gZ,nRr),e(kc,sRr),e(Dt,lRr),M(zC,Dt,null),e(dr,iRr),e(dr,Nr),M(Yx,Nr,null),e(Nr,dRr),e(Nr,sCe),e(sCe,cRr),e(Nr,fRr),e(Nr,pn),e(pn,mRr),e(pn,lCe),e(lCe,gRr),e(pn,hRr),e(pn,iCe),e(iCe,pRr),e(pn,_Rr),e(pn,dCe),e(dCe,uRr),e(pn,bRr),e(Nr,vRr),e(Nr,ve),e(ve,WC),e(WC,cCe),e(cCe,FRr),e(WC,TRr),e(WC,hZ),e(hZ,MRr),e(WC,ERr),e(ve,CRr),e(ve,QC),e(QC,fCe),e(fCe,wRr),e(QC,ARr),e(QC,pZ),e(pZ,LRr),e(QC,yRr),e(ve,xRr),e(ve,HC),e(HC,mCe),e(mCe,$Rr),e(HC,kRr),e(HC,_Z),e(_Z,SRr),e(HC,RRr),e(ve,PRr),e(ve,UC),e(UC,gCe),e(gCe,BRr),e(UC,IRr),e(UC,uZ),e(uZ,NRr),e(UC,qRr),e(ve,jRr),e(ve,JC),e(JC,hCe),e(hCe,DRr),e(JC,GRr),e(JC,bZ),e(bZ,ORr),e(JC,VRr),e(ve,XRr),e(ve,YC),e(YC,pCe),e(pCe,zRr),e(YC,WRr),e(YC,vZ),e(vZ,QRr),e(YC,HRr),e(ve,URr),e(ve,KC),e(KC,_Ce),e(_Ce,JRr),e(KC,YRr),e(KC,FZ),e(FZ,KRr),e(KC,ZRr),e(ve,ePr),e(ve,ZC),e(ZC,uCe),e(uCe,oPr),e(ZC,rPr),e(ZC,TZ),e(TZ,tPr),e(ZC,aPr),e(ve,nPr),e(ve,e5),e(e5,bCe),e(bCe,sPr),e(e5,lPr),e(e5,MZ),e(MZ,iPr),e(e5,dPr),e(ve,cPr),e(ve,o5),e(o5,vCe),e(vCe,fPr),e(o5,mPr),e(o5,EZ),e(EZ,gPr),e(o5,hPr),e(ve,pPr),e(ve,r5),e(r5,FCe),e(FCe,_Pr),e(r5,uPr),e(r5,CZ),e(CZ,bPr),e(r5,vPr),e(ve,FPr),e(ve,t5),e(t5,TCe),e(TCe,TPr),e(t5,MPr),e(t5,wZ),e(wZ,EPr),e(t5,CPr),e(ve,wPr),e(ve,a5),e(a5,MCe),e(MCe,APr),e(a5,LPr),e(a5,AZ),e(AZ,yPr),e(a5,xPr),e(ve,$Pr),e(ve,n5),e(n5,ECe),e(ECe,kPr),e(n5,SPr),e(n5,LZ),e(LZ,RPr),e(n5,PPr),e(ve,BPr),e(ve,s5),e(s5,CCe),e(CCe,IPr),e(s5,NPr),e(s5,yZ),e(yZ,qPr),e(s5,jPr),e(ve,DPr),e(ve,l5),e(l5,wCe),e(wCe,GPr),e(l5,OPr),e(l5,xZ),e(xZ,VPr),e(l5,XPr),e(ve,zPr),e(ve,i5),e(i5,ACe),e(ACe,WPr),e(i5,QPr),e(i5,$Z),e($Z,HPr),e(i5,UPr),e(Nr,JPr),M(d5,Nr,null),b(f,KWe,u),b(f,Sc,u),e(Sc,c5),e(c5,LCe),M(Kx,LCe,null),e(Sc,YPr),e(Sc,yCe),e(yCe,KPr),b(f,ZWe,u),b(f,cr,u),M(Zx,cr,null),e(cr,ZPr),e(cr,Rc),e(Rc,eBr),e(Rc,kZ),e(kZ,oBr),e(Rc,rBr),e(Rc,SZ),e(SZ,tBr),e(Rc,aBr),e(cr,nBr),e(cr,e$),e(e$,sBr),e(e$,xCe),e(xCe,lBr),e(e$,iBr),e(cr,dBr),e(cr,Gt),M(o$,Gt,null),e(Gt,cBr),e(Gt,$Ce),e($Ce,fBr),e(Gt,mBr),e(Gt,Pc),e(Pc,gBr),e(Pc,kCe),e(kCe,hBr),e(Pc,pBr),e(Pc,RZ),e(RZ,_Br),e(Pc,uBr),e(Gt,bBr),M(f5,Gt,null),e(cr,vBr),e(cr,qr),M(r$,qr,null),e(qr,FBr),e(qr,SCe),e(SCe,TBr),e(qr,MBr),e(qr,_n),e(_n,EBr),e(_n,RCe),e(RCe,CBr),e(_n,wBr),e(_n,PCe),e(PCe,ABr),e(_n,LBr),e(_n,BCe),e(BCe,yBr),e(_n,xBr),e(qr,$Br),e(qr,t$),e(t$,m5),e(m5,ICe),e(ICe,kBr),e(m5,SBr),e(m5,PZ),e(PZ,RBr),e(m5,PBr),e(t$,BBr),e(t$,g5),e(g5,NCe),e(NCe,IBr),e(g5,NBr),e(g5,BZ),e(BZ,qBr),e(g5,jBr),e(qr,DBr),M(h5,qr,null),b(f,eQe,u),b(f,Bc,u),e(Bc,p5),e(p5,qCe),M(a$,qCe,null),e(Bc,GBr),e(Bc,jCe),e(jCe,OBr),b(f,oQe,u),b(f,fr,u),M(n$,fr,null),e(fr,VBr),e(fr,Ic),e(Ic,XBr),e(Ic,IZ),e(IZ,zBr),e(Ic,WBr),e(Ic,NZ),e(NZ,QBr),e(Ic,HBr),e(fr,UBr),e(fr,s$),e(s$,JBr),e(s$,DCe),e(DCe,YBr),e(s$,KBr),e(fr,ZBr),e(fr,Ot),M(l$,Ot,null),e(Ot,eIr),e(Ot,GCe),e(GCe,oIr),e(Ot,rIr),e(Ot,Nc),e(Nc,tIr),e(Nc,OCe),e(OCe,aIr),e(Nc,nIr),e(Nc,qZ),e(qZ,sIr),e(Nc,lIr),e(Ot,iIr),M(_5,Ot,null),e(fr,dIr),e(fr,jr),M(i$,jr,null),e(jr,cIr),e(jr,VCe),e(VCe,fIr),e(jr,mIr),e(jr,un),e(un,gIr),e(un,XCe),e(XCe,hIr),e(un,pIr),e(un,zCe),e(zCe,_Ir),e(un,uIr),e(un,WCe),e(WCe,bIr),e(un,vIr),e(jr,FIr),e(jr,QCe),e(QCe,u5),e(u5,HCe),e(HCe,TIr),e(u5,MIr),e(u5,jZ),e(jZ,EIr),e(u5,CIr),e(jr,wIr),M(b5,jr,null),b(f,rQe,u),b(f,qc,u),e(qc,v5),e(v5,UCe),M(d$,UCe,null),e(qc,AIr),e(qc,JCe),e(JCe,LIr),b(f,tQe,u),b(f,mr,u),M(c$,mr,null),e(mr,yIr),e(mr,jc),e(jc,xIr),e(jc,DZ),e(DZ,$Ir),e(jc,kIr),e(jc,GZ),e(GZ,SIr),e(jc,RIr),e(mr,PIr),e(mr,f$),e(f$,BIr),e(f$,YCe),e(YCe,IIr),e(f$,NIr),e(mr,qIr),e(mr,Vt),M(m$,Vt,null),e(Vt,jIr),e(Vt,KCe),e(KCe,DIr),e(Vt,GIr),e(Vt,Dc),e(Dc,OIr),e(Dc,ZCe),e(ZCe,VIr),e(Dc,XIr),e(Dc,OZ),e(OZ,zIr),e(Dc,WIr),e(Vt,QIr),M(F5,Vt,null),e(mr,HIr),e(mr,Dr),M(g$,Dr,null),e(Dr,UIr),e(Dr,e5e),e(e5e,JIr),e(Dr,YIr),e(Dr,bn),e(bn,KIr),e(bn,o5e),e(o5e,ZIr),e(bn,eNr),e(bn,r5e),e(r5e,oNr),e(bn,rNr),e(bn,t5e),e(t5e,tNr),e(bn,aNr),e(Dr,nNr),e(Dr,de),e(de,T5),e(T5,a5e),e(a5e,sNr),e(T5,lNr),e(T5,VZ),e(VZ,iNr),e(T5,dNr),e(de,cNr),e(de,M5),e(M5,n5e),e(n5e,fNr),e(M5,mNr),e(M5,XZ),e(XZ,gNr),e(M5,hNr),e(de,pNr),e(de,E5),e(E5,s5e),e(s5e,_Nr),e(E5,uNr),e(E5,zZ),e(zZ,bNr),e(E5,vNr),e(de,FNr),e(de,C5),e(C5,l5e),e(l5e,TNr),e(C5,MNr),e(C5,WZ),e(WZ,ENr),e(C5,CNr),e(de,wNr),e(de,w5),e(w5,i5e),e(i5e,ANr),e(w5,LNr),e(w5,QZ),e(QZ,yNr),e(w5,xNr),e(de,$Nr),e(de,A5),e(A5,d5e),e(d5e,kNr),e(A5,SNr),e(A5,HZ),e(HZ,RNr),e(A5,PNr),e(de,BNr),e(de,L5),e(L5,c5e),e(c5e,INr),e(L5,NNr),e(L5,UZ),e(UZ,qNr),e(L5,jNr),e(de,DNr),e(de,y5),e(y5,f5e),e(f5e,GNr),e(y5,ONr),e(y5,JZ),e(JZ,VNr),e(y5,XNr),e(de,zNr),e(de,x5),e(x5,m5e),e(m5e,WNr),e(x5,QNr),e(x5,YZ),e(YZ,HNr),e(x5,UNr),e(de,JNr),e(de,$5),e($5,g5e),e(g5e,YNr),e($5,KNr),e($5,KZ),e(KZ,ZNr),e($5,eqr),e(de,oqr),e(de,k5),e(k5,h5e),e(h5e,rqr),e(k5,tqr),e(k5,ZZ),e(ZZ,aqr),e(k5,nqr),e(de,sqr),e(de,S5),e(S5,p5e),e(p5e,lqr),e(S5,iqr),e(S5,eee),e(eee,dqr),e(S5,cqr),e(de,fqr),e(de,R5),e(R5,_5e),e(_5e,mqr),e(R5,gqr),e(R5,oee),e(oee,hqr),e(R5,pqr),e(de,_qr),e(de,P5),e(P5,u5e),e(u5e,uqr),e(P5,bqr),e(P5,ree),e(ree,vqr),e(P5,Fqr),e(de,Tqr),e(de,B5),e(B5,b5e),e(b5e,Mqr),e(B5,Eqr),e(B5,tee),e(tee,Cqr),e(B5,wqr),e(de,Aqr),e(de,I5),e(I5,v5e),e(v5e,Lqr),e(I5,yqr),e(I5,aee),e(aee,xqr),e(I5,$qr),e(de,kqr),e(de,N5),e(N5,F5e),e(F5e,Sqr),e(N5,Rqr),e(N5,nee),e(nee,Pqr),e(N5,Bqr),e(de,Iqr),e(de,q5),e(q5,T5e),e(T5e,Nqr),e(q5,qqr),e(q5,see),e(see,jqr),e(q5,Dqr),e(de,Gqr),e(de,j5),e(j5,M5e),e(M5e,Oqr),e(j5,Vqr),e(j5,lee),e(lee,Xqr),e(j5,zqr),e(de,Wqr),e(de,D5),e(D5,E5e),e(E5e,Qqr),e(D5,Hqr),e(D5,iee),e(iee,Uqr),e(D5,Jqr),e(Dr,Yqr),M(G5,Dr,null),b(f,aQe,u),b(f,Gc,u),e(Gc,O5),e(O5,C5e),M(h$,C5e,null),e(Gc,Kqr),e(Gc,w5e),e(w5e,Zqr),b(f,nQe,u),b(f,gr,u),M(p$,gr,null),e(gr,ejr),e(gr,Oc),e(Oc,ojr),e(Oc,dee),e(dee,rjr),e(Oc,tjr),e(Oc,cee),e(cee,ajr),e(Oc,njr),e(gr,sjr),e(gr,_$),e(_$,ljr),e(_$,A5e),e(A5e,ijr),e(_$,djr),e(gr,cjr),e(gr,Xt),M(u$,Xt,null),e(Xt,fjr),e(Xt,L5e),e(L5e,mjr),e(Xt,gjr),e(Xt,Vc),e(Vc,hjr),e(Vc,y5e),e(y5e,pjr),e(Vc,_jr),e(Vc,fee),e(fee,ujr),e(Vc,bjr),e(Xt,vjr),M(V5,Xt,null),e(gr,Fjr),e(gr,Gr),M(b$,Gr,null),e(Gr,Tjr),e(Gr,x5e),e(x5e,Mjr),e(Gr,Ejr),e(Gr,vn),e(vn,Cjr),e(vn,$5e),e($5e,wjr),e(vn,Ajr),e(vn,k5e),e(k5e,Ljr),e(vn,yjr),e(vn,S5e),e(S5e,xjr),e(vn,$jr),e(Gr,kjr),e(Gr,ce),e(ce,X5),e(X5,R5e),e(R5e,Sjr),e(X5,Rjr),e(X5,mee),e(mee,Pjr),e(X5,Bjr),e(ce,Ijr),e(ce,z5),e(z5,P5e),e(P5e,Njr),e(z5,qjr),e(z5,gee),e(gee,jjr),e(z5,Djr),e(ce,Gjr),e(ce,W5),e(W5,B5e),e(B5e,Ojr),e(W5,Vjr),e(W5,hee),e(hee,Xjr),e(W5,zjr),e(ce,Wjr),e(ce,Q5),e(Q5,I5e),e(I5e,Qjr),e(Q5,Hjr),e(Q5,pee),e(pee,Ujr),e(Q5,Jjr),e(ce,Yjr),e(ce,H5),e(H5,N5e),e(N5e,Kjr),e(H5,Zjr),e(H5,_ee),e(_ee,eDr),e(H5,oDr),e(ce,rDr),e(ce,U5),e(U5,q5e),e(q5e,tDr),e(U5,aDr),e(U5,uee),e(uee,nDr),e(U5,sDr),e(ce,lDr),e(ce,J5),e(J5,j5e),e(j5e,iDr),e(J5,dDr),e(J5,bee),e(bee,cDr),e(J5,fDr),e(ce,mDr),e(ce,Y5),e(Y5,D5e),e(D5e,gDr),e(Y5,hDr),e(Y5,vee),e(vee,pDr),e(Y5,_Dr),e(ce,uDr),e(ce,K5),e(K5,G5e),e(G5e,bDr),e(K5,vDr),e(K5,Fee),e(Fee,FDr),e(K5,TDr),e(ce,MDr),e(ce,Z5),e(Z5,O5e),e(O5e,EDr),e(Z5,CDr),e(Z5,Tee),e(Tee,wDr),e(Z5,ADr),e(ce,LDr),e(ce,e3),e(e3,V5e),e(V5e,yDr),e(e3,xDr),e(e3,Mee),e(Mee,$Dr),e(e3,kDr),e(ce,SDr),e(ce,o3),e(o3,X5e),e(X5e,RDr),e(o3,PDr),e(o3,Eee),e(Eee,BDr),e(o3,IDr),e(ce,NDr),e(ce,r3),e(r3,z5e),e(z5e,qDr),e(r3,jDr),e(r3,Cee),e(Cee,DDr),e(r3,GDr),e(ce,ODr),e(ce,t3),e(t3,W5e),e(W5e,VDr),e(t3,XDr),e(t3,wee),e(wee,zDr),e(t3,WDr),e(ce,QDr),e(ce,a3),e(a3,Q5e),e(Q5e,HDr),e(a3,UDr),e(a3,Aee),e(Aee,JDr),e(a3,YDr),e(ce,KDr),e(ce,n3),e(n3,H5e),e(H5e,ZDr),e(n3,eGr),e(n3,Lee),e(Lee,oGr),e(n3,rGr),e(ce,tGr),e(ce,s3),e(s3,U5e),e(U5e,aGr),e(s3,nGr),e(s3,yee),e(yee,sGr),e(s3,lGr),e(ce,iGr),e(ce,l3),e(l3,J5e),e(J5e,dGr),e(l3,cGr),e(l3,xee),e(xee,fGr),e(l3,mGr),e(ce,gGr),e(ce,i3),e(i3,Y5e),e(Y5e,hGr),e(i3,pGr),e(i3,$ee),e($ee,_Gr),e(i3,uGr),e(ce,bGr),e(ce,d3),e(d3,K5e),e(K5e,vGr),e(d3,FGr),e(d3,kee),e(kee,TGr),e(d3,MGr),e(Gr,EGr),M(c3,Gr,null),b(f,sQe,u),b(f,Xc,u),e(Xc,f3),e(f3,Z5e),M(v$,Z5e,null),e(Xc,CGr),e(Xc,e3e),e(e3e,wGr),b(f,lQe,u),b(f,hr,u),M(F$,hr,null),e(hr,AGr),e(hr,zc),e(zc,LGr),e(zc,See),e(See,yGr),e(zc,xGr),e(zc,Ree),e(Ree,$Gr),e(zc,kGr),e(hr,SGr),e(hr,T$),e(T$,RGr),e(T$,o3e),e(o3e,PGr),e(T$,BGr),e(hr,IGr),e(hr,zt),M(M$,zt,null),e(zt,NGr),e(zt,r3e),e(r3e,qGr),e(zt,jGr),e(zt,Wc),e(Wc,DGr),e(Wc,t3e),e(t3e,GGr),e(Wc,OGr),e(Wc,Pee),e(Pee,VGr),e(Wc,XGr),e(zt,zGr),M(m3,zt,null),e(hr,WGr),e(hr,Or),M(E$,Or,null),e(Or,QGr),e(Or,a3e),e(a3e,HGr),e(Or,UGr),e(Or,Fn),e(Fn,JGr),e(Fn,n3e),e(n3e,YGr),e(Fn,KGr),e(Fn,s3e),e(s3e,ZGr),e(Fn,eOr),e(Fn,l3e),e(l3e,oOr),e(Fn,rOr),e(Or,tOr),e(Or,i3e),e(i3e,g3),e(g3,d3e),e(d3e,aOr),e(g3,nOr),e(g3,Bee),e(Bee,sOr),e(g3,lOr),e(Or,iOr),M(h3,Or,null),b(f,iQe,u),b(f,Qc,u),e(Qc,p3),e(p3,c3e),M(C$,c3e,null),e(Qc,dOr),e(Qc,f3e),e(f3e,cOr),b(f,dQe,u),b(f,pr,u),M(w$,pr,null),e(pr,fOr),e(pr,Hc),e(Hc,mOr),e(Hc,Iee),e(Iee,gOr),e(Hc,hOr),e(Hc,Nee),e(Nee,pOr),e(Hc,_Or),e(pr,uOr),e(pr,A$),e(A$,bOr),e(A$,m3e),e(m3e,vOr),e(A$,FOr),e(pr,TOr),e(pr,Wt),M(L$,Wt,null),e(Wt,MOr),e(Wt,g3e),e(g3e,EOr),e(Wt,COr),e(Wt,Uc),e(Uc,wOr),e(Uc,h3e),e(h3e,AOr),e(Uc,LOr),e(Uc,qee),e(qee,yOr),e(Uc,xOr),e(Wt,$Or),M(_3,Wt,null),e(pr,kOr),e(pr,Vr),M(y$,Vr,null),e(Vr,SOr),e(Vr,p3e),e(p3e,ROr),e(Vr,POr),e(Vr,Tn),e(Tn,BOr),e(Tn,_3e),e(_3e,IOr),e(Tn,NOr),e(Tn,u3e),e(u3e,qOr),e(Tn,jOr),e(Tn,b3e),e(b3e,DOr),e(Tn,GOr),e(Vr,OOr),e(Vr,v3e),e(v3e,u3),e(u3,F3e),e(F3e,VOr),e(u3,XOr),e(u3,jee),e(jee,zOr),e(u3,WOr),e(Vr,QOr),M(b3,Vr,null),b(f,cQe,u),b(f,Jc,u),e(Jc,v3),e(v3,T3e),M(x$,T3e,null),e(Jc,HOr),e(Jc,M3e),e(M3e,UOr),b(f,fQe,u),b(f,_r,u),M($$,_r,null),e(_r,JOr),e(_r,Yc),e(Yc,YOr),e(Yc,Dee),e(Dee,KOr),e(Yc,ZOr),e(Yc,Gee),e(Gee,eVr),e(Yc,oVr),e(_r,rVr),e(_r,k$),e(k$,tVr),e(k$,E3e),e(E3e,aVr),e(k$,nVr),e(_r,sVr),e(_r,Qt),M(S$,Qt,null),e(Qt,lVr),e(Qt,C3e),e(C3e,iVr),e(Qt,dVr),e(Qt,Kc),e(Kc,cVr),e(Kc,w3e),e(w3e,fVr),e(Kc,mVr),e(Kc,Oee),e(Oee,gVr),e(Kc,hVr),e(Qt,pVr),M(F3,Qt,null),e(_r,_Vr),e(_r,Xr),M(R$,Xr,null),e(Xr,uVr),e(Xr,A3e),e(A3e,bVr),e(Xr,vVr),e(Xr,Mn),e(Mn,FVr),e(Mn,L3e),e(L3e,TVr),e(Mn,MVr),e(Mn,y3e),e(y3e,EVr),e(Mn,CVr),e(Mn,x3e),e(x3e,wVr),e(Mn,AVr),e(Xr,LVr),e(Xr,oe),e(oe,T3),e(T3,$3e),e($3e,yVr),e(T3,xVr),e(T3,Vee),e(Vee,$Vr),e(T3,kVr),e(oe,SVr),e(oe,M3),e(M3,k3e),e(k3e,RVr),e(M3,PVr),e(M3,Xee),e(Xee,BVr),e(M3,IVr),e(oe,NVr),e(oe,E3),e(E3,S3e),e(S3e,qVr),e(E3,jVr),e(E3,zee),e(zee,DVr),e(E3,GVr),e(oe,OVr),e(oe,C3),e(C3,R3e),e(R3e,VVr),e(C3,XVr),e(C3,Wee),e(Wee,zVr),e(C3,WVr),e(oe,QVr),e(oe,w3),e(w3,P3e),e(P3e,HVr),e(w3,UVr),e(w3,Qee),e(Qee,JVr),e(w3,YVr),e(oe,KVr),e(oe,A3),e(A3,B3e),e(B3e,ZVr),e(A3,eXr),e(A3,Hee),e(Hee,oXr),e(A3,rXr),e(oe,tXr),e(oe,L3),e(L3,I3e),e(I3e,aXr),e(L3,nXr),e(L3,Uee),e(Uee,sXr),e(L3,lXr),e(oe,iXr),e(oe,y3),e(y3,N3e),e(N3e,dXr),e(y3,cXr),e(y3,Jee),e(Jee,fXr),e(y3,mXr),e(oe,gXr),e(oe,x3),e(x3,q3e),e(q3e,hXr),e(x3,pXr),e(x3,Yee),e(Yee,_Xr),e(x3,uXr),e(oe,bXr),e(oe,$3),e($3,j3e),e(j3e,vXr),e($3,FXr),e($3,Kee),e(Kee,TXr),e($3,MXr),e(oe,EXr),e(oe,k3),e(k3,D3e),e(D3e,CXr),e(k3,wXr),e(k3,Zee),e(Zee,AXr),e(k3,LXr),e(oe,yXr),e(oe,S3),e(S3,G3e),e(G3e,xXr),e(S3,$Xr),e(S3,eoe),e(eoe,kXr),e(S3,SXr),e(oe,RXr),e(oe,R3),e(R3,O3e),e(O3e,PXr),e(R3,BXr),e(R3,ooe),e(ooe,IXr),e(R3,NXr),e(oe,qXr),e(oe,P3),e(P3,V3e),e(V3e,jXr),e(P3,DXr),e(P3,roe),e(roe,GXr),e(P3,OXr),e(oe,VXr),e(oe,B3),e(B3,X3e),e(X3e,XXr),e(B3,zXr),e(B3,toe),e(toe,WXr),e(B3,QXr),e(oe,HXr),e(oe,I3),e(I3,z3e),e(z3e,UXr),e(I3,JXr),e(I3,aoe),e(aoe,YXr),e(I3,KXr),e(oe,ZXr),e(oe,N3),e(N3,W3e),e(W3e,ezr),e(N3,ozr),e(N3,noe),e(noe,rzr),e(N3,tzr),e(oe,azr),e(oe,q3),e(q3,Q3e),e(Q3e,nzr),e(q3,szr),e(q3,soe),e(soe,lzr),e(q3,izr),e(oe,dzr),e(oe,j3),e(j3,H3e),e(H3e,czr),e(j3,fzr),e(j3,loe),e(loe,mzr),e(j3,gzr),e(oe,hzr),e(oe,D3),e(D3,U3e),e(U3e,pzr),e(D3,_zr),e(D3,ioe),e(ioe,uzr),e(D3,bzr),e(oe,vzr),e(oe,G3),e(G3,J3e),e(J3e,Fzr),e(G3,Tzr),e(G3,doe),e(doe,Mzr),e(G3,Ezr),e(oe,Czr),e(oe,O3),e(O3,Y3e),e(Y3e,wzr),e(O3,Azr),e(O3,coe),e(coe,Lzr),e(O3,yzr),e(oe,xzr),e(oe,V3),e(V3,K3e),e(K3e,$zr),e(V3,kzr),e(V3,foe),e(foe,Szr),e(V3,Rzr),e(oe,Pzr),e(oe,X3),e(X3,Z3e),e(Z3e,Bzr),e(X3,Izr),e(X3,moe),e(moe,Nzr),e(X3,qzr),e(oe,jzr),e(oe,z3),e(z3,ewe),e(ewe,Dzr),e(z3,Gzr),e(z3,goe),e(goe,Ozr),e(z3,Vzr),e(oe,Xzr),e(oe,W3),e(W3,owe),e(owe,zzr),e(W3,Wzr),e(W3,hoe),e(hoe,Qzr),e(W3,Hzr),e(oe,Uzr),e(oe,Q3),e(Q3,rwe),e(rwe,Jzr),e(Q3,Yzr),e(Q3,poe),e(poe,Kzr),e(Q3,Zzr),e(Xr,eWr),M(H3,Xr,null),b(f,mQe,u),b(f,Zc,u),e(Zc,U3),e(U3,twe),M(P$,twe,null),e(Zc,oWr),e(Zc,awe),e(awe,rWr),b(f,gQe,u),b(f,ur,u),M(B$,ur,null),e(ur,tWr),e(ur,ef),e(ef,aWr),e(ef,_oe),e(_oe,nWr),e(ef,sWr),e(ef,uoe),e(uoe,lWr),e(ef,iWr),e(ur,dWr),e(ur,I$),e(I$,cWr),e(I$,nwe),e(nwe,fWr),e(I$,mWr),e(ur,gWr),e(ur,Ht),M(N$,Ht,null),e(Ht,hWr),e(Ht,swe),e(swe,pWr),e(Ht,_Wr),e(Ht,of),e(of,uWr),e(of,lwe),e(lwe,bWr),e(of,vWr),e(of,boe),e(boe,FWr),e(of,TWr),e(Ht,MWr),M(J3,Ht,null),e(ur,EWr),e(ur,zr),M(q$,zr,null),e(zr,CWr),e(zr,iwe),e(iwe,wWr),e(zr,AWr),e(zr,En),e(En,LWr),e(En,dwe),e(dwe,yWr),e(En,xWr),e(En,cwe),e(cwe,$Wr),e(En,kWr),e(En,fwe),e(fwe,SWr),e(En,RWr),e(zr,PWr),e(zr,xe),e(xe,Y3),e(Y3,mwe),e(mwe,BWr),e(Y3,IWr),e(Y3,voe),e(voe,NWr),e(Y3,qWr),e(xe,jWr),e(xe,K3),e(K3,gwe),e(gwe,DWr),e(K3,GWr),e(K3,Foe),e(Foe,OWr),e(K3,VWr),e(xe,XWr),e(xe,Z3),e(Z3,hwe),e(hwe,zWr),e(Z3,WWr),e(Z3,Toe),e(Toe,QWr),e(Z3,HWr),e(xe,UWr),e(xe,ew),e(ew,pwe),e(pwe,JWr),e(ew,YWr),e(ew,Moe),e(Moe,KWr),e(ew,ZWr),e(xe,eQr),e(xe,ow),e(ow,_we),e(_we,oQr),e(ow,rQr),e(ow,Eoe),e(Eoe,tQr),e(ow,aQr),e(xe,nQr),e(xe,rw),e(rw,uwe),e(uwe,sQr),e(rw,lQr),e(rw,Coe),e(Coe,iQr),e(rw,dQr),e(xe,cQr),e(xe,tw),e(tw,bwe),e(bwe,fQr),e(tw,mQr),e(tw,woe),e(woe,gQr),e(tw,hQr),e(xe,pQr),e(xe,aw),e(aw,vwe),e(vwe,_Qr),e(aw,uQr),e(aw,Aoe),e(Aoe,bQr),e(aw,vQr),e(xe,FQr),e(xe,nw),e(nw,Fwe),e(Fwe,TQr),e(nw,MQr),e(nw,Loe),e(Loe,EQr),e(nw,CQr),e(xe,wQr),e(xe,sw),e(sw,Twe),e(Twe,AQr),e(sw,LQr),e(sw,yoe),e(yoe,yQr),e(sw,xQr),e(zr,$Qr),M(lw,zr,null),b(f,hQe,u),b(f,rf,u),e(rf,iw),e(iw,Mwe),M(j$,Mwe,null),e(rf,kQr),e(rf,Ewe),e(Ewe,SQr),b(f,pQe,u),b(f,br,u),M(D$,br,null),e(br,RQr),e(br,tf),e(tf,PQr),e(tf,xoe),e(xoe,BQr),e(tf,IQr),e(tf,$oe),e($oe,NQr),e(tf,qQr),e(br,jQr),e(br,G$),e(G$,DQr),e(G$,Cwe),e(Cwe,GQr),e(G$,OQr),e(br,VQr),e(br,Ut),M(O$,Ut,null),e(Ut,XQr),e(Ut,wwe),e(wwe,zQr),e(Ut,WQr),e(Ut,af),e(af,QQr),e(af,Awe),e(Awe,HQr),e(af,UQr),e(af,koe),e(koe,JQr),e(af,YQr),e(Ut,KQr),M(dw,Ut,null),e(br,ZQr),e(br,Wr),M(V$,Wr,null),e(Wr,eHr),e(Wr,Lwe),e(Lwe,oHr),e(Wr,rHr),e(Wr,Cn),e(Cn,tHr),e(Cn,ywe),e(ywe,aHr),e(Cn,nHr),e(Cn,xwe),e(xwe,sHr),e(Cn,lHr),e(Cn,$we),e($we,iHr),e(Cn,dHr),e(Wr,cHr),e(Wr,Ee),e(Ee,cw),e(cw,kwe),e(kwe,fHr),e(cw,mHr),e(cw,Soe),e(Soe,gHr),e(cw,hHr),e(Ee,pHr),e(Ee,fw),e(fw,Swe),e(Swe,_Hr),e(fw,uHr),e(fw,Roe),e(Roe,bHr),e(fw,vHr),e(Ee,FHr),e(Ee,mw),e(mw,Rwe),e(Rwe,THr),e(mw,MHr),e(mw,Poe),e(Poe,EHr),e(mw,CHr),e(Ee,wHr),e(Ee,gw),e(gw,Pwe),e(Pwe,AHr),e(gw,LHr),e(gw,Boe),e(Boe,yHr),e(gw,xHr),e(Ee,$Hr),e(Ee,hw),e(hw,Bwe),e(Bwe,kHr),e(hw,SHr),e(hw,Ioe),e(Ioe,RHr),e(hw,PHr),e(Ee,BHr),e(Ee,pw),e(pw,Iwe),e(Iwe,IHr),e(pw,NHr),e(pw,Noe),e(Noe,qHr),e(pw,jHr),e(Ee,DHr),e(Ee,_w),e(_w,Nwe),e(Nwe,GHr),e(_w,OHr),e(_w,qoe),e(qoe,VHr),e(_w,XHr),e(Ee,zHr),e(Ee,uw),e(uw,qwe),e(qwe,WHr),e(uw,QHr),e(uw,joe),e(joe,HHr),e(uw,UHr),e(Ee,JHr),e(Ee,bw),e(bw,jwe),e(jwe,YHr),e(bw,KHr),e(bw,Doe),e(Doe,ZHr),e(bw,eUr),e(Ee,oUr),e(Ee,vw),e(vw,Dwe),e(Dwe,rUr),e(vw,tUr),e(vw,Goe),e(Goe,aUr),e(vw,nUr),e(Ee,sUr),e(Ee,Fw),e(Fw,Gwe),e(Gwe,lUr),e(Fw,iUr),e(Fw,Ooe),e(Ooe,dUr),e(Fw,cUr),e(Ee,fUr),e(Ee,Tw),e(Tw,Owe),e(Owe,mUr),e(Tw,gUr),e(Tw,Voe),e(Voe,hUr),e(Tw,pUr),e(Ee,_Ur),e(Ee,Mw),e(Mw,Vwe),e(Vwe,uUr),e(Mw,bUr),e(Mw,Xoe),e(Xoe,vUr),e(Mw,FUr),e(Wr,TUr),M(Ew,Wr,null),b(f,_Qe,u),b(f,nf,u),e(nf,Cw),e(Cw,Xwe),M(X$,Xwe,null),e(nf,MUr),e(nf,zwe),e(zwe,EUr),b(f,uQe,u),b(f,vr,u),M(z$,vr,null),e(vr,CUr),e(vr,sf),e(sf,wUr),e(sf,zoe),e(zoe,AUr),e(sf,LUr),e(sf,Woe),e(Woe,yUr),e(sf,xUr),e(vr,$Ur),e(vr,W$),e(W$,kUr),e(W$,Wwe),e(Wwe,SUr),e(W$,RUr),e(vr,PUr),e(vr,Jt),M(Q$,Jt,null),e(Jt,BUr),e(Jt,Qwe),e(Qwe,IUr),e(Jt,NUr),e(Jt,lf),e(lf,qUr),e(lf,Hwe),e(Hwe,jUr),e(lf,DUr),e(lf,Qoe),e(Qoe,GUr),e(lf,OUr),e(Jt,VUr),M(ww,Jt,null),e(vr,XUr),e(vr,Qr),M(H$,Qr,null),e(Qr,zUr),e(Qr,Uwe),e(Uwe,WUr),e(Qr,QUr),e(Qr,wn),e(wn,HUr),e(wn,Jwe),e(Jwe,UUr),e(wn,JUr),e(wn,Ywe),e(Ywe,YUr),e(wn,KUr),e(wn,Kwe),e(Kwe,ZUr),e(wn,eJr),e(Qr,oJr),e(Qr,$e),e($e,Aw),e(Aw,Zwe),e(Zwe,rJr),e(Aw,tJr),e(Aw,Hoe),e(Hoe,aJr),e(Aw,nJr),e($e,sJr),e($e,Lw),e(Lw,e6e),e(e6e,lJr),e(Lw,iJr),e(Lw,Uoe),e(Uoe,dJr),e(Lw,cJr),e($e,fJr),e($e,yw),e(yw,o6e),e(o6e,mJr),e(yw,gJr),e(yw,Joe),e(Joe,hJr),e(yw,pJr),e($e,_Jr),e($e,xw),e(xw,r6e),e(r6e,uJr),e(xw,bJr),e(xw,Yoe),e(Yoe,vJr),e(xw,FJr),e($e,TJr),e($e,$w),e($w,t6e),e(t6e,MJr),e($w,EJr),e($w,Koe),e(Koe,CJr),e($w,wJr),e($e,AJr),e($e,kw),e(kw,a6e),e(a6e,LJr),e(kw,yJr),e(kw,Zoe),e(Zoe,xJr),e(kw,$Jr),e($e,kJr),e($e,Sw),e(Sw,n6e),e(n6e,SJr),e(Sw,RJr),e(Sw,ere),e(ere,PJr),e(Sw,BJr),e($e,IJr),e($e,Rw),e(Rw,s6e),e(s6e,NJr),e(Rw,qJr),e(Rw,ore),e(ore,jJr),e(Rw,DJr),e($e,GJr),e($e,Pw),e(Pw,l6e),e(l6e,OJr),e(Pw,VJr),e(Pw,rre),e(rre,XJr),e(Pw,zJr),e($e,WJr),e($e,Bw),e(Bw,i6e),e(i6e,QJr),e(Bw,HJr),e(Bw,tre),e(tre,UJr),e(Bw,JJr),e(Qr,YJr),M(Iw,Qr,null),b(f,bQe,u),b(f,df,u),e(df,Nw),e(Nw,d6e),M(U$,d6e,null),e(df,KJr),e(df,c6e),e(c6e,ZJr),b(f,vQe,u),b(f,Fr,u),M(J$,Fr,null),e(Fr,eYr),e(Fr,cf),e(cf,oYr),e(cf,are),e(are,rYr),e(cf,tYr),e(cf,nre),e(nre,aYr),e(cf,nYr),e(Fr,sYr),e(Fr,Y$),e(Y$,lYr),e(Y$,f6e),e(f6e,iYr),e(Y$,dYr),e(Fr,cYr),e(Fr,Yt),M(K$,Yt,null),e(Yt,fYr),e(Yt,m6e),e(m6e,mYr),e(Yt,gYr),e(Yt,ff),e(ff,hYr),e(ff,g6e),e(g6e,pYr),e(ff,_Yr),e(ff,sre),e(sre,uYr),e(ff,bYr),e(Yt,vYr),M(qw,Yt,null),e(Fr,FYr),e(Fr,Hr),M(Z$,Hr,null),e(Hr,TYr),e(Hr,h6e),e(h6e,MYr),e(Hr,EYr),e(Hr,An),e(An,CYr),e(An,p6e),e(p6e,wYr),e(An,AYr),e(An,_6e),e(_6e,LYr),e(An,yYr),e(An,u6e),e(u6e,xYr),e(An,$Yr),e(Hr,kYr),e(Hr,ke),e(ke,jw),e(jw,b6e),e(b6e,SYr),e(jw,RYr),e(jw,lre),e(lre,PYr),e(jw,BYr),e(ke,IYr),e(ke,Dw),e(Dw,v6e),e(v6e,NYr),e(Dw,qYr),e(Dw,ire),e(ire,jYr),e(Dw,DYr),e(ke,GYr),e(ke,Gw),e(Gw,F6e),e(F6e,OYr),e(Gw,VYr),e(Gw,dre),e(dre,XYr),e(Gw,zYr),e(ke,WYr),e(ke,Ow),e(Ow,T6e),e(T6e,QYr),e(Ow,HYr),e(Ow,cre),e(cre,UYr),e(Ow,JYr),e(ke,YYr),e(ke,Vw),e(Vw,M6e),e(M6e,KYr),e(Vw,ZYr),e(Vw,fre),e(fre,eKr),e(Vw,oKr),e(ke,rKr),e(ke,Xw),e(Xw,E6e),e(E6e,tKr),e(Xw,aKr),e(Xw,mre),e(mre,nKr),e(Xw,sKr),e(ke,lKr),e(ke,zw),e(zw,C6e),e(C6e,iKr),e(zw,dKr),e(zw,gre),e(gre,cKr),e(zw,fKr),e(ke,mKr),e(ke,Ww),e(Ww,w6e),e(w6e,gKr),e(Ww,hKr),e(Ww,hre),e(hre,pKr),e(Ww,_Kr),e(ke,uKr),e(ke,Qw),e(Qw,A6e),e(A6e,bKr),e(Qw,vKr),e(Qw,pre),e(pre,FKr),e(Qw,TKr),e(ke,MKr),e(ke,Hw),e(Hw,L6e),e(L6e,EKr),e(Hw,CKr),e(Hw,_re),e(_re,wKr),e(Hw,AKr),e(Hr,LKr),M(Uw,Hr,null),b(f,FQe,u),b(f,mf,u),e(mf,Jw),e(Jw,y6e),M(ek,y6e,null),e(mf,yKr),e(mf,x6e),e(x6e,xKr),b(f,TQe,u),b(f,Tr,u),M(ok,Tr,null),e(Tr,$Kr),e(Tr,gf),e(gf,kKr),e(gf,ure),e(ure,SKr),e(gf,RKr),e(gf,bre),e(bre,PKr),e(gf,BKr),e(Tr,IKr),e(Tr,rk),e(rk,NKr),e(rk,$6e),e($6e,qKr),e(rk,jKr),e(Tr,DKr),e(Tr,Kt),M(tk,Kt,null),e(Kt,GKr),e(Kt,k6e),e(k6e,OKr),e(Kt,VKr),e(Kt,hf),e(hf,XKr),e(hf,S6e),e(S6e,zKr),e(hf,WKr),e(hf,vre),e(vre,QKr),e(hf,HKr),e(Kt,UKr),M(Yw,Kt,null),e(Tr,JKr),e(Tr,Ur),M(ak,Ur,null),e(Ur,YKr),e(Ur,R6e),e(R6e,KKr),e(Ur,ZKr),e(Ur,Ln),e(Ln,eZr),e(Ln,P6e),e(P6e,oZr),e(Ln,rZr),e(Ln,B6e),e(B6e,tZr),e(Ln,aZr),e(Ln,I6e),e(I6e,nZr),e(Ln,sZr),e(Ur,lZr),e(Ur,Se),e(Se,Kw),e(Kw,N6e),e(N6e,iZr),e(Kw,dZr),e(Kw,Fre),e(Fre,cZr),e(Kw,fZr),e(Se,mZr),e(Se,Zw),e(Zw,q6e),e(q6e,gZr),e(Zw,hZr),e(Zw,Tre),e(Tre,pZr),e(Zw,_Zr),e(Se,uZr),e(Se,e6),e(e6,j6e),e(j6e,bZr),e(e6,vZr),e(e6,Mre),e(Mre,FZr),e(e6,TZr),e(Se,MZr),e(Se,o6),e(o6,D6e),e(D6e,EZr),e(o6,CZr),e(o6,Ere),e(Ere,wZr),e(o6,AZr),e(Se,LZr),e(Se,r6),e(r6,G6e),e(G6e,yZr),e(r6,xZr),e(r6,Cre),e(Cre,$Zr),e(r6,kZr),e(Se,SZr),e(Se,t6),e(t6,O6e),e(O6e,RZr),e(t6,PZr),e(t6,wre),e(wre,BZr),e(t6,IZr),e(Se,NZr),e(Se,a6),e(a6,V6e),e(V6e,qZr),e(a6,jZr),e(a6,Are),e(Are,DZr),e(a6,GZr),e(Se,OZr),e(Se,n6),e(n6,X6e),e(X6e,VZr),e(n6,XZr),e(n6,Lre),e(Lre,zZr),e(n6,WZr),e(Se,QZr),e(Se,s6),e(s6,z6e),e(z6e,HZr),e(s6,UZr),e(s6,yre),e(yre,JZr),e(s6,YZr),e(Se,KZr),e(Se,l6),e(l6,W6e),e(W6e,ZZr),e(l6,eet),e(l6,xre),e(xre,oet),e(l6,ret),e(Ur,tet),M(i6,Ur,null),b(f,MQe,u),b(f,pf,u),e(pf,d6),e(d6,Q6e),M(nk,Q6e,null),e(pf,aet),e(pf,H6e),e(H6e,net),b(f,EQe,u),b(f,Mr,u),M(sk,Mr,null),e(Mr,set),e(Mr,_f),e(_f,iet),e(_f,$re),e($re,det),e(_f,cet),e(_f,kre),e(kre,fet),e(_f,met),e(Mr,get),e(Mr,lk),e(lk,het),e(lk,U6e),e(U6e,pet),e(lk,_et),e(Mr,uet),e(Mr,Zt),M(ik,Zt,null),e(Zt,bet),e(Zt,J6e),e(J6e,vet),e(Zt,Fet),e(Zt,uf),e(uf,Tet),e(uf,Y6e),e(Y6e,Met),e(uf,Eet),e(uf,Sre),e(Sre,Cet),e(uf,wet),e(Zt,Aet),M(c6,Zt,null),e(Mr,Let),e(Mr,Jr),M(dk,Jr,null),e(Jr,yet),e(Jr,K6e),e(K6e,xet),e(Jr,$et),e(Jr,yn),e(yn,ket),e(yn,Z6e),e(Z6e,Set),e(yn,Ret),e(yn,eAe),e(eAe,Pet),e(yn,Bet),e(yn,oAe),e(oAe,Iet),e(yn,Net),e(Jr,qet),e(Jr,Re),e(Re,f6),e(f6,rAe),e(rAe,jet),e(f6,Det),e(f6,Rre),e(Rre,Get),e(f6,Oet),e(Re,Vet),e(Re,m6),e(m6,tAe),e(tAe,Xet),e(m6,zet),e(m6,Pre),e(Pre,Wet),e(m6,Qet),e(Re,Het),e(Re,g6),e(g6,aAe),e(aAe,Uet),e(g6,Jet),e(g6,Bre),e(Bre,Yet),e(g6,Ket),e(Re,Zet),e(Re,h6),e(h6,nAe),e(nAe,eot),e(h6,oot),e(h6,Ire),e(Ire,rot),e(h6,tot),e(Re,aot),e(Re,p6),e(p6,sAe),e(sAe,not),e(p6,sot),e(p6,Nre),e(Nre,lot),e(p6,iot),e(Re,dot),e(Re,_6),e(_6,lAe),e(lAe,cot),e(_6,fot),e(_6,qre),e(qre,mot),e(_6,got),e(Re,hot),e(Re,u6),e(u6,iAe),e(iAe,pot),e(u6,_ot),e(u6,jre),e(jre,uot),e(u6,bot),e(Re,vot),e(Re,b6),e(b6,dAe),e(dAe,Fot),e(b6,Tot),e(b6,Dre),e(Dre,Mot),e(b6,Eot),e(Re,Cot),e(Re,v6),e(v6,cAe),e(cAe,wot),e(v6,Aot),e(v6,Gre),e(Gre,Lot),e(v6,yot),e(Re,xot),e(Re,F6),e(F6,fAe),e(fAe,$ot),e(F6,kot),e(F6,Ore),e(Ore,Sot),e(F6,Rot),e(Jr,Pot),M(T6,Jr,null),b(f,CQe,u),b(f,bf,u),e(bf,M6),e(M6,mAe),M(ck,mAe,null),e(bf,Bot),e(bf,gAe),e(gAe,Iot),b(f,wQe,u),b(f,Er,u),M(fk,Er,null),e(Er,Not),e(Er,vf),e(vf,qot),e(vf,Vre),e(Vre,jot),e(vf,Dot),e(vf,Xre),e(Xre,Got),e(vf,Oot),e(Er,Vot),e(Er,mk),e(mk,Xot),e(mk,hAe),e(hAe,zot),e(mk,Wot),e(Er,Qot),e(Er,ea),M(gk,ea,null),e(ea,Hot),e(ea,pAe),e(pAe,Uot),e(ea,Jot),e(ea,Ff),e(Ff,Yot),e(Ff,_Ae),e(_Ae,Kot),e(Ff,Zot),e(Ff,zre),e(zre,ert),e(Ff,ort),e(ea,rrt),M(E6,ea,null),e(Er,trt),e(Er,Yr),M(hk,Yr,null),e(Yr,art),e(Yr,uAe),e(uAe,nrt),e(Yr,srt),e(Yr,xn),e(xn,lrt),e(xn,bAe),e(bAe,irt),e(xn,drt),e(xn,vAe),e(vAe,crt),e(xn,frt),e(xn,FAe),e(FAe,mrt),e(xn,grt),e(Yr,hrt),e(Yr,Xe),e(Xe,C6),e(C6,TAe),e(TAe,prt),e(C6,_rt),e(C6,Wre),e(Wre,urt),e(C6,brt),e(Xe,vrt),e(Xe,w6),e(w6,MAe),e(MAe,Frt),e(w6,Trt),e(w6,Qre),e(Qre,Mrt),e(w6,Ert),e(Xe,Crt),e(Xe,A6),e(A6,EAe),e(EAe,wrt),e(A6,Art),e(A6,Hre),e(Hre,Lrt),e(A6,yrt),e(Xe,xrt),e(Xe,L6),e(L6,CAe),e(CAe,$rt),e(L6,krt),e(L6,Ure),e(Ure,Srt),e(L6,Rrt),e(Xe,Prt),e(Xe,y6),e(y6,wAe),e(wAe,Brt),e(y6,Irt),e(y6,Jre),e(Jre,Nrt),e(y6,qrt),e(Xe,jrt),e(Xe,x6),e(x6,AAe),e(AAe,Drt),e(x6,Grt),e(x6,Yre),e(Yre,Ort),e(x6,Vrt),e(Xe,Xrt),e(Xe,$6),e($6,LAe),e(LAe,zrt),e($6,Wrt),e($6,Kre),e(Kre,Qrt),e($6,Hrt),e(Xe,Urt),e(Xe,k6),e(k6,yAe),e(yAe,Jrt),e(k6,Yrt),e(k6,Zre),e(Zre,Krt),e(k6,Zrt),e(Yr,ett),M(S6,Yr,null),b(f,AQe,u),b(f,Tf,u),e(Tf,R6),e(R6,xAe),M(pk,xAe,null),e(Tf,ott),e(Tf,$Ae),e($Ae,rtt),b(f,LQe,u),b(f,Cr,u),M(_k,Cr,null),e(Cr,ttt),e(Cr,Mf),e(Mf,att),e(Mf,ete),e(ete,ntt),e(Mf,stt),e(Mf,ote),e(ote,ltt),e(Mf,itt),e(Cr,dtt),e(Cr,uk),e(uk,ctt),e(uk,kAe),e(kAe,ftt),e(uk,mtt),e(Cr,gtt),e(Cr,oa),M(bk,oa,null),e(oa,htt),e(oa,SAe),e(SAe,ptt),e(oa,_tt),e(oa,Ef),e(Ef,utt),e(Ef,RAe),e(RAe,btt),e(Ef,vtt),e(Ef,rte),e(rte,Ftt),e(Ef,Ttt),e(oa,Mtt),M(P6,oa,null),e(Cr,Ett),e(Cr,Kr),M(vk,Kr,null),e(Kr,Ctt),e(Kr,PAe),e(PAe,wtt),e(Kr,Att),e(Kr,$n),e($n,Ltt),e($n,BAe),e(BAe,ytt),e($n,xtt),e($n,IAe),e(IAe,$tt),e($n,ktt),e($n,NAe),e(NAe,Stt),e($n,Rtt),e(Kr,Ptt),e(Kr,ze),e(ze,B6),e(B6,qAe),e(qAe,Btt),e(B6,Itt),e(B6,tte),e(tte,Ntt),e(B6,qtt),e(ze,jtt),e(ze,I6),e(I6,jAe),e(jAe,Dtt),e(I6,Gtt),e(I6,ate),e(ate,Ott),e(I6,Vtt),e(ze,Xtt),e(ze,N6),e(N6,DAe),e(DAe,ztt),e(N6,Wtt),e(N6,nte),e(nte,Qtt),e(N6,Htt),e(ze,Utt),e(ze,q6),e(q6,GAe),e(GAe,Jtt),e(q6,Ytt),e(q6,ste),e(ste,Ktt),e(q6,Ztt),e(ze,eat),e(ze,j6),e(j6,OAe),e(OAe,oat),e(j6,rat),e(j6,lte),e(lte,tat),e(j6,aat),e(ze,nat),e(ze,D6),e(D6,VAe),e(VAe,sat),e(D6,lat),e(D6,ite),e(ite,iat),e(D6,dat),e(ze,cat),e(ze,G6),e(G6,XAe),e(XAe,fat),e(G6,mat),e(G6,dte),e(dte,gat),e(G6,hat),e(ze,pat),e(ze,O6),e(O6,zAe),e(zAe,_at),e(O6,uat),e(O6,cte),e(cte,bat),e(O6,vat),e(Kr,Fat),M(V6,Kr,null),b(f,yQe,u),b(f,Cf,u),e(Cf,X6),e(X6,WAe),M(Fk,WAe,null),e(Cf,Tat),e(Cf,QAe),e(QAe,Mat),b(f,xQe,u),b(f,wr,u),M(Tk,wr,null),e(wr,Eat),e(wr,wf),e(wf,Cat),e(wf,fte),e(fte,wat),e(wf,Aat),e(wf,mte),e(mte,Lat),e(wf,yat),e(wr,xat),e(wr,Mk),e(Mk,$at),e(Mk,HAe),e(HAe,kat),e(Mk,Sat),e(wr,Rat),e(wr,ra),M(Ek,ra,null),e(ra,Pat),e(ra,UAe),e(UAe,Bat),e(ra,Iat),e(ra,Af),e(Af,Nat),e(Af,JAe),e(JAe,qat),e(Af,jat),e(Af,gte),e(gte,Dat),e(Af,Gat),e(ra,Oat),M(z6,ra,null),e(wr,Vat),e(wr,Zr),M(Ck,Zr,null),e(Zr,Xat),e(Zr,YAe),e(YAe,zat),e(Zr,Wat),e(Zr,kn),e(kn,Qat),e(kn,KAe),e(KAe,Hat),e(kn,Uat),e(kn,ZAe),e(ZAe,Jat),e(kn,Yat),e(kn,e7e),e(e7e,Kat),e(kn,Zat),e(Zr,ent),e(Zr,o7e),e(o7e,W6),e(W6,r7e),e(r7e,ont),e(W6,rnt),e(W6,hte),e(hte,tnt),e(W6,ant),e(Zr,nnt),M(Q6,Zr,null),b(f,$Qe,u),b(f,Lf,u),e(Lf,H6),e(H6,t7e),M(wk,t7e,null),e(Lf,snt),e(Lf,a7e),e(a7e,lnt),b(f,kQe,u),b(f,Ar,u),M(Ak,Ar,null),e(Ar,int),e(Ar,yf),e(yf,dnt),e(yf,pte),e(pte,cnt),e(yf,fnt),e(yf,_te),e(_te,mnt),e(yf,gnt),e(Ar,hnt),e(Ar,Lk),e(Lk,pnt),e(Lk,n7e),e(n7e,_nt),e(Lk,unt),e(Ar,bnt),e(Ar,ta),M(yk,ta,null),e(ta,vnt),e(ta,s7e),e(s7e,Fnt),e(ta,Tnt),e(ta,xf),e(xf,Mnt),e(xf,l7e),e(l7e,Ent),e(xf,Cnt),e(xf,ute),e(ute,wnt),e(xf,Ant),e(ta,Lnt),M(U6,ta,null),e(Ar,ynt),e(Ar,et),M(xk,et,null),e(et,xnt),e(et,i7e),e(i7e,$nt),e(et,knt),e(et,Sn),e(Sn,Snt),e(Sn,d7e),e(d7e,Rnt),e(Sn,Pnt),e(Sn,c7e),e(c7e,Bnt),e(Sn,Int),e(Sn,f7e),e(f7e,Nnt),e(Sn,qnt),e(et,jnt),e(et,$k),e($k,J6),e(J6,m7e),e(m7e,Dnt),e(J6,Gnt),e(J6,bte),e(bte,Ont),e(J6,Vnt),e($k,Xnt),e($k,Y6),e(Y6,g7e),e(g7e,znt),e(Y6,Wnt),e(Y6,vte),e(vte,Qnt),e(Y6,Hnt),e(et,Unt),M(K6,et,null),b(f,SQe,u),b(f,$f,u),e($f,Z6),e(Z6,h7e),M(kk,h7e,null),e($f,Jnt),e($f,p7e),e(p7e,Ynt),b(f,RQe,u),b(f,Lr,u),M(Sk,Lr,null),e(Lr,Knt),e(Lr,kf),e(kf,Znt),e(kf,Fte),e(Fte,est),e(kf,ost),e(kf,Tte),e(Tte,rst),e(kf,tst),e(Lr,ast),e(Lr,Rk),e(Rk,nst),e(Rk,_7e),e(_7e,sst),e(Rk,lst),e(Lr,ist),e(Lr,aa),M(Pk,aa,null),e(aa,dst),e(aa,u7e),e(u7e,cst),e(aa,fst),e(aa,Sf),e(Sf,mst),e(Sf,b7e),e(b7e,gst),e(Sf,hst),e(Sf,Mte),e(Mte,pst),e(Sf,_st),e(aa,ust),M(eA,aa,null),e(Lr,bst),e(Lr,ot),M(Bk,ot,null),e(ot,vst),e(ot,v7e),e(v7e,Fst),e(ot,Tst),e(ot,Rn),e(Rn,Mst),e(Rn,F7e),e(F7e,Est),e(Rn,Cst),e(Rn,T7e),e(T7e,wst),e(Rn,Ast),e(Rn,M7e),e(M7e,Lst),e(Rn,yst),e(ot,xst),e(ot,E7e),e(E7e,oA),e(oA,C7e),e(C7e,$st),e(oA,kst),e(oA,Ete),e(Ete,Sst),e(oA,Rst),e(ot,Pst),M(rA,ot,null),PQe=!0},p(f,[u]){const Ik={};u&2&&(Ik.$$scope={dirty:u,ctx:f}),Gf.$set(Ik);const w7e={};u&2&&(w7e.$$scope={dirty:u,ctx:f}),oh.$set(w7e);const A7e={};u&2&&(A7e.$$scope={dirty:u,ctx:f}),Nh.$set(A7e);const L7e={};u&2&&(L7e.$$scope={dirty:u,ctx:f}),Mp.$set(L7e);const Nk={};u&2&&(Nk.$$scope={dirty:u,ctx:f}),Ep.$set(Nk);const y7e={};u&2&&(y7e.$$scope={dirty:u,ctx:f}),zp.$set(y7e);const Pn={};u&2&&(Pn.$$scope={dirty:u,ctx:f}),Wp.$set(Pn);const x7e={};u&2&&(x7e.$$scope={dirty:u,ctx:f}),Up.$set(x7e);const $7e={};u&2&&($7e.$$scope={dirty:u,ctx:f}),r2.$set($7e);const k7e={};u&2&&(k7e.$$scope={dirty:u,ctx:f}),a2.$set(k7e);const qk={};u&2&&(qk.$$scope={dirty:u,ctx:f}),K2.$set(qk);const S7e={};u&2&&(S7e.$$scope={dirty:u,ctx:f}),e1.$set(S7e);const jk={};u&2&&(jk.$$scope={dirty:u,ctx:f}),O1.$set(jk);const R7e={};u&2&&(R7e.$$scope={dirty:u,ctx:f}),X1.$set(R7e);const Dk={};u&2&&(Dk.$$scope={dirty:u,ctx:f}),$4.$set(Dk);const P7e={};u&2&&(P7e.$$scope={dirty:u,ctx:f}),S4.$set(P7e);const B7e={};u&2&&(B7e.$$scope={dirty:u,ctx:f}),Z4.$set(B7e);const I7e={};u&2&&(I7e.$$scope={dirty:u,ctx:f}),ob.$set(I7e);const Rf={};u&2&&(Rf.$$scope={dirty:u,ctx:f}),ov.$set(Rf);const N7e={};u&2&&(N7e.$$scope={dirty:u,ctx:f}),tv.$set(N7e);const q7e={};u&2&&(q7e.$$scope={dirty:u,ctx:f}),Iv.$set(q7e);const j7e={};u&2&&(j7e.$$scope={dirty:u,ctx:f}),qv.$set(j7e);const Gk={};u&2&&(Gk.$$scope={dirty:u,ctx:f}),Wv.$set(Gk);const D7e={};u&2&&(D7e.$$scope={dirty:u,ctx:f}),Hv.$set(D7e);const G7e={};u&2&&(G7e.$$scope={dirty:u,ctx:f}),R0.$set(G7e);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:f}),B0.$set(O7e);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),AF.$set(nt);const Ok={};u&2&&(Ok.$$scope={dirty:u,ctx:f}),yF.$set(Ok);const V7e={};u&2&&(V7e.$$scope={dirty:u,ctx:f}),kF.$set(V7e);const Vk={};u&2&&(Vk.$$scope={dirty:u,ctx:f}),RF.$set(Vk);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:f}),UF.$set(X7e);const st={};u&2&&(st.$$scope={dirty:u,ctx:f}),YF.$set(st);const z7e={};u&2&&(z7e.$$scope={dirty:u,ctx:f}),eT.$set(z7e);const Pf={};u&2&&(Pf.$$scope={dirty:u,ctx:f}),rT.$set(Pf);const W7e={};u&2&&(W7e.$$scope={dirty:u,ctx:f}),nT.$set(W7e);const Q7e={};u&2&&(Q7e.$$scope={dirty:u,ctx:f}),lT.$set(Q7e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),bT.$set(L);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),FT.$set(tA);const H7e={};u&2&&(H7e.$$scope={dirty:u,ctx:f}),LT.$set(H7e);const U7e={};u&2&&(U7e.$$scope={dirty:u,ctx:f}),xT.$set(U7e);const aA={};u&2&&(aA.$$scope={dirty:u,ctx:f}),GT.$set(aA);const J7e={};u&2&&(J7e.$$scope={dirty:u,ctx:f}),VT.$set(J7e);const Y7e={};u&2&&(Y7e.$$scope={dirty:u,ctx:f}),QT.$set(Y7e);const nA={};u&2&&(nA.$$scope={dirty:u,ctx:f}),UT.$set(nA);const K7e={};u&2&&(K7e.$$scope={dirty:u,ctx:f}),r8.$set(K7e);const Z7e={};u&2&&(Z7e.$$scope={dirty:u,ctx:f}),a8.$set(Z7e);const sA={};u&2&&(sA.$$scope={dirty:u,ctx:f}),c8.$set(sA);const eLe={};u&2&&(eLe.$$scope={dirty:u,ctx:f}),m8.$set(eLe);const oLe={};u&2&&(oLe.$$scope={dirty:u,ctx:f}),_8.$set(oLe);const lA={};u&2&&(lA.$$scope={dirty:u,ctx:f}),b8.$set(lA);const rLe={};u&2&&(rLe.$$scope={dirty:u,ctx:f}),T8.$set(rLe);const tLe={};u&2&&(tLe.$$scope={dirty:u,ctx:f}),E8.$set(tLe);const iA={};u&2&&(iA.$$scope={dirty:u,ctx:f}),$8.$set(iA);const aLe={};u&2&&(aLe.$$scope={dirty:u,ctx:f}),S8.$set(aLe);const nLe={};u&2&&(nLe.$$scope={dirty:u,ctx:f}),B8.$set(nLe);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),N8.$set(dA);const sLe={};u&2&&(sLe.$$scope={dirty:u,ctx:f}),PM.$set(sLe);const lLe={};u&2&&(lLe.$$scope={dirty:u,ctx:f}),IM.$set(lLe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),sE.$set(cA);const iLe={};u&2&&(iLe.$$scope={dirty:u,ctx:f}),iE.$set(iLe);const dLe={};u&2&&(dLe.$$scope={dirty:u,ctx:f}),ME.$set(dLe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),CE.$set(fA);const cLe={};u&2&&(cLe.$$scope={dirty:u,ctx:f}),SE.$set(cLe);const fLe={};u&2&&(fLe.$$scope={dirty:u,ctx:f}),PE.$set(fLe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),oC.$set(mA);const mLe={};u&2&&(mLe.$$scope={dirty:u,ctx:f}),tC.$set(mLe);const gLe={};u&2&&(gLe.$$scope={dirty:u,ctx:f}),hC.$set(gLe);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),_C.$set(gA);const hLe={};u&2&&(hLe.$$scope={dirty:u,ctx:f}),VC.$set(hLe);const pLe={};u&2&&(pLe.$$scope={dirty:u,ctx:f}),zC.$set(pLe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),d5.$set(hA);const _Le={};u&2&&(_Le.$$scope={dirty:u,ctx:f}),f5.$set(_Le);const uLe={};u&2&&(uLe.$$scope={dirty:u,ctx:f}),h5.$set(uLe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),_5.$set(pA);const bLe={};u&2&&(bLe.$$scope={dirty:u,ctx:f}),b5.$set(bLe);const vLe={};u&2&&(vLe.$$scope={dirty:u,ctx:f}),F5.$set(vLe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),G5.$set(_A);const FLe={};u&2&&(FLe.$$scope={dirty:u,ctx:f}),V5.$set(FLe);const TLe={};u&2&&(TLe.$$scope={dirty:u,ctx:f}),c3.$set(TLe);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),m3.$set(uA);const MLe={};u&2&&(MLe.$$scope={dirty:u,ctx:f}),h3.$set(MLe);const ELe={};u&2&&(ELe.$$scope={dirty:u,ctx:f}),_3.$set(ELe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),b3.$set(bA);const CLe={};u&2&&(CLe.$$scope={dirty:u,ctx:f}),F3.$set(CLe);const wLe={};u&2&&(wLe.$$scope={dirty:u,ctx:f}),H3.$set(wLe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),J3.$set(vA);const ALe={};u&2&&(ALe.$$scope={dirty:u,ctx:f}),lw.$set(ALe);const LLe={};u&2&&(LLe.$$scope={dirty:u,ctx:f}),dw.$set(LLe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),Ew.$set(FA);const yLe={};u&2&&(yLe.$$scope={dirty:u,ctx:f}),ww.$set(yLe);const xLe={};u&2&&(xLe.$$scope={dirty:u,ctx:f}),Iw.$set(xLe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),qw.$set(TA);const $Le={};u&2&&($Le.$$scope={dirty:u,ctx:f}),Uw.$set($Le);const kLe={};u&2&&(kLe.$$scope={dirty:u,ctx:f}),Yw.$set(kLe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),i6.$set(MA);const SLe={};u&2&&(SLe.$$scope={dirty:u,ctx:f}),c6.$set(SLe);const RLe={};u&2&&(RLe.$$scope={dirty:u,ctx:f}),T6.$set(RLe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),E6.$set(EA);const PLe={};u&2&&(PLe.$$scope={dirty:u,ctx:f}),S6.$set(PLe);const BLe={};u&2&&(BLe.$$scope={dirty:u,ctx:f}),P6.$set(BLe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),V6.$set(CA);const ILe={};u&2&&(ILe.$$scope={dirty:u,ctx:f}),z6.$set(ILe);const NLe={};u&2&&(NLe.$$scope={dirty:u,ctx:f}),Q6.$set(NLe);const wA={};u&2&&(wA.$$scope={dirty:u,ctx:f}),U6.$set(wA);const qLe={};u&2&&(qLe.$$scope={dirty:u,ctx:f}),K6.$set(qLe);const jLe={};u&2&&(jLe.$$scope={dirty:u,ctx:f}),eA.$set(jLe);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),rA.$set(AA)},i(f){PQe||(E(c.$$.fragment,f),E(Sa.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(Gf.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(SL.$$.fragment,f),E(oh.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(Nh.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(XL.$$.fragment,f),E(Mp.$$.fragment,f),E(Ep.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(JL.$$.fragment,f),E(zp.$$.fragment,f),E(Wp.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(oy.$$.fragment,f),E(Up.$$.fragment,f),E(ry.$$.fragment,f),E(r2.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(a2.$$.fragment,f),E(ly.$$.fragment,f),E(K2.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(e1.$$.fragment,f),E(my.$$.fragment,f),E(O1.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(_y.$$.fragment,f),E(X1.$$.fragment,f),E(uy.$$.fragment,f),E($4.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(S4.$$.fragment,f),E(My.$$.fragment,f),E(Z4.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(ob.$$.fragment,f),E(Ly.$$.fragment,f),E(ov.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(tv.$$.fragment,f),E(Sy.$$.fragment,f),E(Iv.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(qv.$$.fragment,f),E(Ny.$$.fragment,f),E(Wv.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(Hv.$$.fragment,f),E(Oy.$$.fragment,f),E(R0.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(B0.$$.fragment,f),E(Qy.$$.fragment,f),E(AF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(yF.$$.fragment,f),E(Ky.$$.fragment,f),E(kF.$$.fragment,f),E(Zy.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(RF.$$.fragment,f),E(t9.$$.fragment,f),E(UF.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(YF.$$.fragment,f),E(i9.$$.fragment,f),E(eT.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(rT.$$.fragment,f),E(g9.$$.fragment,f),E(nT.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(lT.$$.fragment,f),E(b9.$$.fragment,f),E(bT.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(FT.$$.fragment,f),E(E9.$$.fragment,f),E(LT.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(xT.$$.fragment,f),E(y9.$$.fragment,f),E(GT.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(VT.$$.fragment,f),E(R9.$$.fragment,f),E(QT.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(UT.$$.fragment,f),E(j9.$$.fragment,f),E(r8.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(a8.$$.fragment,f),E(X9.$$.fragment,f),E(c8.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(m8.$$.fragment,f),E(U9.$$.fragment,f),E(_8.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(b8.$$.fragment,f),E(ox.$$.fragment,f),E(T8.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(E8.$$.fragment,f),E(sx.$$.fragment,f),E($8.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(S8.$$.fragment,f),E(fx.$$.fragment,f),E(B8.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(N8.$$.fragment,f),E(_x.$$.fragment,f),E(PM.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(IM.$$.fragment,f),E(Tx.$$.fragment,f),E(sE.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(iE.$$.fragment,f),E(Ax.$$.fragment,f),E(ME.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(CE.$$.fragment,f),E(kx.$$.fragment,f),E(SE.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(PE.$$.fragment,f),E(Ix.$$.fragment,f),E(oC.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(tC.$$.fragment,f),E(Gx.$$.fragment,f),E(hC.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(_C.$$.fragment,f),E(Wx.$$.fragment,f),E(VC.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(zC.$$.fragment,f),E(Yx.$$.fragment,f),E(d5.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(f5.$$.fragment,f),E(r$.$$.fragment,f),E(h5.$$.fragment,f),E(a$.$$.fragment,f),E(n$.$$.fragment,f),E(l$.$$.fragment,f),E(_5.$$.fragment,f),E(i$.$$.fragment,f),E(b5.$$.fragment,f),E(d$.$$.fragment,f),E(c$.$$.fragment,f),E(m$.$$.fragment,f),E(F5.$$.fragment,f),E(g$.$$.fragment,f),E(G5.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(u$.$$.fragment,f),E(V5.$$.fragment,f),E(b$.$$.fragment,f),E(c3.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(m3.$$.fragment,f),E(E$.$$.fragment,f),E(h3.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(_3.$$.fragment,f),E(y$.$$.fragment,f),E(b3.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(F3.$$.fragment,f),E(R$.$$.fragment,f),E(H3.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E(J3.$$.fragment,f),E(q$.$$.fragment,f),E(lw.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(dw.$$.fragment,f),E(V$.$$.fragment,f),E(Ew.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(ww.$$.fragment,f),E(H$.$$.fragment,f),E(Iw.$$.fragment,f),E(U$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(qw.$$.fragment,f),E(Z$.$$.fragment,f),E(Uw.$$.fragment,f),E(ek.$$.fragment,f),E(ok.$$.fragment,f),E(tk.$$.fragment,f),E(Yw.$$.fragment,f),E(ak.$$.fragment,f),E(i6.$$.fragment,f),E(nk.$$.fragment,f),E(sk.$$.fragment,f),E(ik.$$.fragment,f),E(c6.$$.fragment,f),E(dk.$$.fragment,f),E(T6.$$.fragment,f),E(ck.$$.fragment,f),E(fk.$$.fragment,f),E(gk.$$.fragment,f),E(E6.$$.fragment,f),E(hk.$$.fragment,f),E(S6.$$.fragment,f),E(pk.$$.fragment,f),E(_k.$$.fragment,f),E(bk.$$.fragment,f),E(P6.$$.fragment,f),E(vk.$$.fragment,f),E(V6.$$.fragment,f),E(Fk.$$.fragment,f),E(Tk.$$.fragment,f),E(Ek.$$.fragment,f),E(z6.$$.fragment,f),E(Ck.$$.fragment,f),E(Q6.$$.fragment,f),E(wk.$$.fragment,f),E(Ak.$$.fragment,f),E(yk.$$.fragment,f),E(U6.$$.fragment,f),E(xk.$$.fragment,f),E(K6.$$.fragment,f),E(kk.$$.fragment,f),E(Sk.$$.fragment,f),E(Pk.$$.fragment,f),E(eA.$$.fragment,f),E(Bk.$$.fragment,f),E(rA.$$.fragment,f),PQe=!0)},o(f){C(c.$$.fragment,f),C(Sa.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(Gf.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(SL.$$.fragment,f),C(oh.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(Nh.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(XL.$$.fragment,f),C(Mp.$$.fragment,f),C(Ep.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(JL.$$.fragment,f),C(zp.$$.fragment,f),C(Wp.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(oy.$$.fragment,f),C(Up.$$.fragment,f),C(ry.$$.fragment,f),C(r2.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(a2.$$.fragment,f),C(ly.$$.fragment,f),C(K2.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(e1.$$.fragment,f),C(my.$$.fragment,f),C(O1.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(_y.$$.fragment,f),C(X1.$$.fragment,f),C(uy.$$.fragment,f),C($4.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(S4.$$.fragment,f),C(My.$$.fragment,f),C(Z4.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(ob.$$.fragment,f),C(Ly.$$.fragment,f),C(ov.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(tv.$$.fragment,f),C(Sy.$$.fragment,f),C(Iv.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(qv.$$.fragment,f),C(Ny.$$.fragment,f),C(Wv.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(Hv.$$.fragment,f),C(Oy.$$.fragment,f),C(R0.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(B0.$$.fragment,f),C(Qy.$$.fragment,f),C(AF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(yF.$$.fragment,f),C(Ky.$$.fragment,f),C(kF.$$.fragment,f),C(Zy.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(RF.$$.fragment,f),C(t9.$$.fragment,f),C(UF.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(YF.$$.fragment,f),C(i9.$$.fragment,f),C(eT.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(rT.$$.fragment,f),C(g9.$$.fragment,f),C(nT.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(lT.$$.fragment,f),C(b9.$$.fragment,f),C(bT.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(FT.$$.fragment,f),C(E9.$$.fragment,f),C(LT.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(xT.$$.fragment,f),C(y9.$$.fragment,f),C(GT.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(VT.$$.fragment,f),C(R9.$$.fragment,f),C(QT.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(UT.$$.fragment,f),C(j9.$$.fragment,f),C(r8.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(a8.$$.fragment,f),C(X9.$$.fragment,f),C(c8.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(m8.$$.fragment,f),C(U9.$$.fragment,f),C(_8.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(b8.$$.fragment,f),C(ox.$$.fragment,f),C(T8.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(E8.$$.fragment,f),C(sx.$$.fragment,f),C($8.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(S8.$$.fragment,f),C(fx.$$.fragment,f),C(B8.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(N8.$$.fragment,f),C(_x.$$.fragment,f),C(PM.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(IM.$$.fragment,f),C(Tx.$$.fragment,f),C(sE.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(iE.$$.fragment,f),C(Ax.$$.fragment,f),C(ME.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(CE.$$.fragment,f),C(kx.$$.fragment,f),C(SE.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(PE.$$.fragment,f),C(Ix.$$.fragment,f),C(oC.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(tC.$$.fragment,f),C(Gx.$$.fragment,f),C(hC.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(_C.$$.fragment,f),C(Wx.$$.fragment,f),C(VC.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(zC.$$.fragment,f),C(Yx.$$.fragment,f),C(d5.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(f5.$$.fragment,f),C(r$.$$.fragment,f),C(h5.$$.fragment,f),C(a$.$$.fragment,f),C(n$.$$.fragment,f),C(l$.$$.fragment,f),C(_5.$$.fragment,f),C(i$.$$.fragment,f),C(b5.$$.fragment,f),C(d$.$$.fragment,f),C(c$.$$.fragment,f),C(m$.$$.fragment,f),C(F5.$$.fragment,f),C(g$.$$.fragment,f),C(G5.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(u$.$$.fragment,f),C(V5.$$.fragment,f),C(b$.$$.fragment,f),C(c3.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(m3.$$.fragment,f),C(E$.$$.fragment,f),C(h3.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(_3.$$.fragment,f),C(y$.$$.fragment,f),C(b3.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(F3.$$.fragment,f),C(R$.$$.fragment,f),C(H3.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C(J3.$$.fragment,f),C(q$.$$.fragment,f),C(lw.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(dw.$$.fragment,f),C(V$.$$.fragment,f),C(Ew.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(ww.$$.fragment,f),C(H$.$$.fragment,f),C(Iw.$$.fragment,f),C(U$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(qw.$$.fragment,f),C(Z$.$$.fragment,f),C(Uw.$$.fragment,f),C(ek.$$.fragment,f),C(ok.$$.fragment,f),C(tk.$$.fragment,f),C(Yw.$$.fragment,f),C(ak.$$.fragment,f),C(i6.$$.fragment,f),C(nk.$$.fragment,f),C(sk.$$.fragment,f),C(ik.$$.fragment,f),C(c6.$$.fragment,f),C(dk.$$.fragment,f),C(T6.$$.fragment,f),C(ck.$$.fragment,f),C(fk.$$.fragment,f),C(gk.$$.fragment,f),C(E6.$$.fragment,f),C(hk.$$.fragment,f),C(S6.$$.fragment,f),C(pk.$$.fragment,f),C(_k.$$.fragment,f),C(bk.$$.fragment,f),C(P6.$$.fragment,f),C(vk.$$.fragment,f),C(V6.$$.fragment,f),C(Fk.$$.fragment,f),C(Tk.$$.fragment,f),C(Ek.$$.fragment,f),C(z6.$$.fragment,f),C(Ck.$$.fragment,f),C(Q6.$$.fragment,f),C(wk.$$.fragment,f),C(Ak.$$.fragment,f),C(yk.$$.fragment,f),C(U6.$$.fragment,f),C(xk.$$.fragment,f),C(K6.$$.fragment,f),C(kk.$$.fragment,f),C(Sk.$$.fragment,f),C(Pk.$$.fragment,f),C(eA.$$.fragment,f),C(Bk.$$.fragment,f),C(rA.$$.fragment,f),PQe=!1},d(f){t(g),f&&t(v),f&&t(p),w(c),f&&t(If),f&&t(lt),f&&t(Oe),f&&t(Qe),f&&t(qf),w(Sa,f),f&&t(He),f&&t(Ae),f&&t(Ao),f&&t(Ra),f&&t(xze),f&&t(Ni),w(AL),f&&t($ze),f&&t(jn),f&&t(kze),w(LL,f),f&&t(Sze),f&&t(cR),f&&t(Rze),w(Gf,f),f&&t(Pze),f&&t(qi),w(yL),f&&t(Bze),f&&t(Lo),w(xL),w(SL),w(oh),w(RL),f&&t(Ize),f&&t(Di),w(PL),f&&t(Nze),f&&t(yo),w(BL),w(qL),w(Nh),w(jL),f&&t(qze),f&&t(Gi),w(DL),f&&t(jze),f&&t(xo),w(GL),w(XL),w(Mp),w(Ep),w(zL),f&&t(Dze),f&&t(Oi),w(WL),f&&t(Gze),f&&t($o),w(QL),w(JL),w(zp),w(Wp),w(YL),f&&t(Oze),f&&t(Xi),w(KL),f&&t(Vze),f&&t(ko),w(ZL),w(oy),w(Up),w(ry),w(r2),f&&t(Xze),f&&t(Qi),w(ty),f&&t(zze),f&&t(So),w(ay),w(sy),w(a2),w(ly),w(K2),f&&t(Wze),f&&t(Ji),w(iy),f&&t(Qze),f&&t(Ro),w(dy),w(fy),w(e1),w(my),w(O1),f&&t(Hze),f&&t(Zi),w(gy),f&&t(Uze),f&&t(Po),w(hy),w(_y),w(X1),w(uy),w($4),f&&t(Jze),f&&t(rd),w(by),f&&t(Yze),f&&t(Bo),w(vy),w(Ty),w(S4),w(My),w(Z4),f&&t(Kze),f&&t(nd),w(Ey),f&&t(Zze),f&&t(Io),w(Cy),w(Ay),w(ob),w(Ly),w(ov),f&&t(eWe),f&&t(id),w(yy),f&&t(oWe),f&&t(No),w(xy),w(ky),w(tv),w(Sy),w(Iv),f&&t(rWe),f&&t(fd),w(Ry),f&&t(tWe),f&&t(qo),w(Py),w(Iy),w(qv),w(Ny),w(Wv),f&&t(aWe),f&&t(hd),w(qy),f&&t(nWe),f&&t(Do),w(jy),w(Gy),w(Hv),w(Oy),w(R0),f&&t(sWe),f&&t(ud),w(Vy),f&&t(lWe),f&&t(Go),w(Xy),w(Wy),w(B0),w(Qy),w(AF),f&&t(iWe),f&&t(Fd),w(Hy),f&&t(dWe),f&&t(Oo),w(Uy),w(Yy),w(yF),w(Ky),w(kF),f&&t(cWe),f&&t(Ed),w(Zy),f&&t(fWe),f&&t(Vo),w(e9),w(r9),w(RF),w(t9),w(UF),f&&t(mWe),f&&t(Ad),w(a9),f&&t(gWe),f&&t(Xo),w(n9),w(l9),w(YF),w(i9),w(eT),f&&t(hWe),f&&t(xd),w(d9),f&&t(pWe),f&&t(zo),w(c9),w(m9),w(rT),w(g9),w(nT),f&&t(_We),f&&t(Sd),w(h9),f&&t(uWe),f&&t(Wo),w(p9),w(u9),w(lT),w(b9),w(bT),f&&t(bWe),f&&t(Bd),w(v9),f&&t(vWe),f&&t(Qo),w(F9),w(M9),w(FT),w(E9),w(LT),f&&t(FWe),f&&t(qd),w(C9),f&&t(TWe),f&&t(Ho),w(w9),w(L9),w(xT),w(y9),w(GT),f&&t(MWe),f&&t(Gd),w(x9),f&&t(EWe),f&&t(Uo),w($9),w(S9),w(VT),w(R9),w(QT),f&&t(CWe),f&&t(Xd),w(B9),f&&t(wWe),f&&t(Jo),w(I9),w(q9),w(UT),w(j9),w(r8),f&&t(AWe),f&&t(Qd),w(D9),f&&t(LWe),f&&t(Yo),w(G9),w(V9),w(a8),w(X9),w(c8),f&&t(yWe),f&&t(Jd),w(z9),f&&t(xWe),f&&t(Ko),w(W9),w(H9),w(m8),w(U9),w(_8),f&&t($We),f&&t(Zd),w(Y9),f&&t(kWe),f&&t(Zo),w(K9),w(ex),w(b8),w(ox),w(T8),f&&t(SWe),f&&t(rc),w(rx),f&&t(RWe),f&&t(er),w(tx),w(nx),w(E8),w(sx),w($8),f&&t(PWe),f&&t(nc),w(lx),f&&t(BWe),f&&t(or),w(ix),w(cx),w(S8),w(fx),w(B8),f&&t(IWe),f&&t(ic),w(mx),f&&t(NWe),f&&t(rr),w(gx),w(px),w(N8),w(_x),w(PM),f&&t(qWe),f&&t(fc),w(ux),f&&t(jWe),f&&t(tr),w(bx),w(Fx),w(IM),w(Tx),w(sE),f&&t(DWe),f&&t(hc),w(Mx),f&&t(GWe),f&&t(ar),w(Ex),w(wx),w(iE),w(Ax),w(ME),f&&t(OWe),f&&t(uc),w(Lx),f&&t(VWe),f&&t(nr),w(yx),w($x),w(CE),w(kx),w(SE),f&&t(XWe),f&&t(Fc),w(Sx),f&&t(zWe),f&&t(sr),w(Rx),w(Bx),w(PE),w(Ix),w(oC),f&&t(WWe),f&&t(Ec),w(Nx),f&&t(QWe),f&&t(lr),w(qx),w(Dx),w(tC),w(Gx),w(hC),f&&t(HWe),f&&t(Ac),w(Ox),f&&t(UWe),f&&t(ir),w(Vx),w(zx),w(_C),w(Wx),w(VC),f&&t(JWe),f&&t(xc),w(Qx),f&&t(YWe),f&&t(dr),w(Hx),w(Jx),w(zC),w(Yx),w(d5),f&&t(KWe),f&&t(Sc),w(Kx),f&&t(ZWe),f&&t(cr),w(Zx),w(o$),w(f5),w(r$),w(h5),f&&t(eQe),f&&t(Bc),w(a$),f&&t(oQe),f&&t(fr),w(n$),w(l$),w(_5),w(i$),w(b5),f&&t(rQe),f&&t(qc),w(d$),f&&t(tQe),f&&t(mr),w(c$),w(m$),w(F5),w(g$),w(G5),f&&t(aQe),f&&t(Gc),w(h$),f&&t(nQe),f&&t(gr),w(p$),w(u$),w(V5),w(b$),w(c3),f&&t(sQe),f&&t(Xc),w(v$),f&&t(lQe),f&&t(hr),w(F$),w(M$),w(m3),w(E$),w(h3),f&&t(iQe),f&&t(Qc),w(C$),f&&t(dQe),f&&t(pr),w(w$),w(L$),w(_3),w(y$),w(b3),f&&t(cQe),f&&t(Jc),w(x$),f&&t(fQe),f&&t(_r),w($$),w(S$),w(F3),w(R$),w(H3),f&&t(mQe),f&&t(Zc),w(P$),f&&t(gQe),f&&t(ur),w(B$),w(N$),w(J3),w(q$),w(lw),f&&t(hQe),f&&t(rf),w(j$),f&&t(pQe),f&&t(br),w(D$),w(O$),w(dw),w(V$),w(Ew),f&&t(_Qe),f&&t(nf),w(X$),f&&t(uQe),f&&t(vr),w(z$),w(Q$),w(ww),w(H$),w(Iw),f&&t(bQe),f&&t(df),w(U$),f&&t(vQe),f&&t(Fr),w(J$),w(K$),w(qw),w(Z$),w(Uw),f&&t(FQe),f&&t(mf),w(ek),f&&t(TQe),f&&t(Tr),w(ok),w(tk),w(Yw),w(ak),w(i6),f&&t(MQe),f&&t(pf),w(nk),f&&t(EQe),f&&t(Mr),w(sk),w(ik),w(c6),w(dk),w(T6),f&&t(CQe),f&&t(bf),w(ck),f&&t(wQe),f&&t(Er),w(fk),w(gk),w(E6),w(hk),w(S6),f&&t(AQe),f&&t(Tf),w(pk),f&&t(LQe),f&&t(Cr),w(_k),w(bk),w(P6),w(vk),w(V6),f&&t(yQe),f&&t(Cf),w(Fk),f&&t(xQe),f&&t(wr),w(Tk),w(Ek),w(z6),w(Ck),w(Q6),f&&t($Qe),f&&t(Lf),w(wk),f&&t(kQe),f&&t(Ar),w(Ak),w(yk),w(U6),w(xk),w(K6),f&&t(SQe),f&&t($f),w(kk),f&&t(RQe),f&&t(Lr),w(Sk),w(Pk),w(eA),w(Bk),w(rA)}}}const aZt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function nZt($){return tYt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mZt extends ZJt{constructor(g){super();eYt(this,g,nZt,tZt,oYt,{})}}export{mZt as default,aZt as metadata};
