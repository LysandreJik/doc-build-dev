import{S as ona,i as rna,s as tna,e as a,k as l,w as F,t as o,M as ana,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as nna,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Egt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function sna($){let g,v,p,m,u,d,h,yo,Ui,cm,gt,Hi,Ji,xL,fm,Oe,We,Yi,Hn,$L,Jn,Yn,kL,Ki,Kn,SL,Zi,mm,Va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),Ui=a("code"),cm=o("model_type"),gt=o(" attribute is set to the same key you use when registering the config (here "),Hi=a("code"),Ji=o('"new-model"'),xL=o(")."),fm=l(),Oe=a("p"),We=o("Likewise, if your "),Yi=a("code"),Hn=o("NewModel"),$L=o(" is a subclass of "),Jn=a("a"),Yn=o("PreTrainedModel"),kL=o(`, make sure its
`),Ki=a("code"),Kn=o("config_class"),SL=o(` attribute is set to the same class you use when registering the model (here
`),Zi=a("code"),mm=o("NewModelConfig"),Va=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var LP=s(p);m=r(LP,"NewModelConfig"),LP.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ed=s(d);h=r(ed,"PretrainedConfig"),ed.forEach(t),yo=r(Ae,`, make sure its
`),Ui=n(Ae,"CODE",{});var xP=s(Ui);cm=r(xP,"model_type"),xP.forEach(t),gt=r(Ae," attribute is set to the same key you use when registering the config (here "),Hi=n(Ae,"CODE",{});var $P=s(Hi);Ji=r($P,'"new-model"'),$P.forEach(t),xL=r(Ae,")."),Ae.forEach(t),fm=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);We=r(Lo,"Likewise, if your "),Yi=n(Lo,"CODE",{});var Xa=s(Yi);Hn=r(Xa,"NewModel"),Xa.forEach(t),$L=r(Lo," is a subclass of "),Jn=n(Lo,"A",{href:!0});var kP=s(Jn);Yn=r(kP,"PreTrainedModel"),kP.forEach(t),kL=r(Lo,`, make sure its
`),Ki=n(Lo,"CODE",{});var gm=s(Ki);Kn=r(gm,"config_class"),gm.forEach(t),SL=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Zi=n(Lo,"CODE",{});var SP=s(Zi);mm=r(SP,"NewModelConfig"),SP.forEach(t),Va=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(Jn,"href","/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,yo),e(g,Ui),e(Ui,cm),e(g,gt),e(g,Hi),e(Hi,Ji),e(g,xL),b(Ue,fm,Ae),b(Ue,Oe,Ae),e(Oe,We),e(Oe,Yi),e(Yi,Hn),e(Oe,$L),e(Oe,Jn),e(Jn,Yn),e(Oe,kL),e(Oe,Ki),e(Ki,Kn),e(Oe,SL),e(Oe,Zi),e(Zi,mm),e(Oe,Va)},d(Ue){Ue&&t(g),Ue&&t(fm),Ue&&t(Oe)}}}function lna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ina($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dna($){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var yo=s(p);m=r(yo,"use_auth_token=True"),yo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function cna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fna($){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var yo=s(p);m=r(yo,"use_auth_token=True"),yo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function mna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function una($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _na($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ena($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ana($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $na($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-doc-qa")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-doc-qa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ina($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-doc-qa")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-doc-qa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-doc-qa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-doc-qa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ona($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Una($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zna($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function esa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function osa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function asa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ssa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function isa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function csa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function msa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function psa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function usa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _sa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Msa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Esa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Csa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Asa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ysa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $sa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ksa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ssa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Psa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Isa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Osa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Usa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ysa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ksa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zsa($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ela($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ola($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ala($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ila($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cla($){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fla($){let g,v,p,m,u,d,h,yo,Ui,cm,gt,Hi,Ji,xL,fm,Oe,We,Yi,Hn,$L,Jn,Yn,kL,Ki,Kn,SL,Zi,mm,Va,Ue,Ae,LP,ed,xP,$P,Lo,Xa,kP,gm,SP,mZe,qUe,od,hm,ule,RL,gZe,_le,hZe,jUe,Zn,pZe,ble,uZe,_Ze,vle,bZe,vZe,DUe,PL,GUe,RP,FZe,OUe,pm,VUe,rd,um,Fle,BL,TZe,Tle,MZe,XUe,xo,IL,EZe,NL,CZe,PP,wZe,AZe,yZe,qL,LZe,Mle,xZe,$Ze,kZe,Rr,jL,SZe,Ele,RZe,PZe,td,BZe,Cle,IZe,NZe,wle,qZe,jZe,DZe,A,_m,Ale,GZe,OZe,BP,VZe,XZe,zZe,bm,yle,QZe,WZe,IP,UZe,HZe,JZe,vm,Lle,YZe,KZe,NP,ZZe,eeo,oeo,Fm,xle,reo,teo,qP,aeo,neo,seo,Tm,$le,leo,ieo,jP,deo,ceo,feo,Mm,kle,meo,geo,DP,heo,peo,ueo,Em,Sle,_eo,beo,GP,veo,Feo,Teo,Cm,Rle,Meo,Eeo,OP,Ceo,weo,Aeo,wm,Ple,yeo,Leo,VP,xeo,$eo,keo,Am,Ble,Seo,Reo,XP,Peo,Beo,Ieo,ym,Ile,Neo,qeo,zP,jeo,Deo,Geo,Lm,Nle,Oeo,Veo,QP,Xeo,zeo,Qeo,xm,qle,Weo,Ueo,WP,Heo,Jeo,Yeo,$m,jle,Keo,Zeo,UP,eoo,ooo,roo,km,Dle,too,aoo,HP,noo,soo,loo,Sm,Gle,ioo,doo,JP,coo,foo,moo,Rm,Ole,goo,hoo,YP,poo,uoo,_oo,Pm,Vle,boo,voo,KP,Foo,Too,Moo,Bm,Xle,Eoo,Coo,ZP,woo,Aoo,yoo,Im,zle,Loo,xoo,eB,$oo,koo,Soo,Nm,Qle,Roo,Poo,oB,Boo,Ioo,Noo,qm,Wle,qoo,joo,rB,Doo,Goo,Ooo,jm,Ule,Voo,Xoo,tB,zoo,Qoo,Woo,Dm,Hle,Uoo,Hoo,aB,Joo,Yoo,Koo,Gm,Jle,Zoo,ero,nB,oro,rro,tro,Om,Yle,aro,nro,sB,sro,lro,iro,Vm,Kle,dro,cro,lB,fro,mro,gro,Xm,Zle,hro,pro,iB,uro,_ro,bro,zm,eie,vro,Fro,dB,Tro,Mro,Ero,Qm,oie,Cro,wro,cB,Aro,yro,Lro,Wm,rie,xro,$ro,fB,kro,Sro,Rro,Um,tie,Pro,Bro,mB,Iro,Nro,qro,Hm,aie,jro,Dro,gB,Gro,Oro,Vro,Jm,nie,Xro,zro,hB,Qro,Wro,Uro,Ym,sie,Hro,Jro,pB,Yro,Kro,Zro,Km,lie,eto,oto,uB,rto,tto,ato,Zm,iie,nto,sto,_B,lto,ito,dto,eg,die,cto,fto,bB,mto,gto,hto,og,cie,pto,uto,vB,_to,bto,vto,rg,fie,Fto,Tto,FB,Mto,Eto,Cto,tg,mie,wto,Ato,TB,yto,Lto,xto,ag,gie,$to,kto,MB,Sto,Rto,Pto,ng,hie,Bto,Ito,EB,Nto,qto,jto,sg,pie,Dto,Gto,CB,Oto,Vto,Xto,lg,uie,zto,Qto,wB,Wto,Uto,Hto,ig,_ie,Jto,Yto,AB,Kto,Zto,eao,dg,bie,oao,rao,yB,tao,aao,nao,cg,vie,sao,lao,LB,iao,dao,cao,fg,Fie,fao,mao,xB,gao,hao,pao,mg,Tie,uao,_ao,$B,bao,vao,Fao,gg,Mie,Tao,Mao,kB,Eao,Cao,wao,hg,Eie,Aao,yao,SB,Lao,xao,$ao,pg,Cie,kao,Sao,RB,Rao,Pao,Bao,ug,wie,Iao,Nao,PB,qao,jao,Dao,_g,Aie,Gao,Oao,BB,Vao,Xao,zao,bg,yie,Qao,Wao,IB,Uao,Hao,Jao,vg,Lie,Yao,Kao,NB,Zao,eno,ono,Fg,xie,rno,tno,qB,ano,nno,sno,Tg,$ie,lno,ino,jB,dno,cno,fno,Mg,kie,mno,gno,DB,hno,pno,uno,Eg,Sie,_no,bno,GB,vno,Fno,Tno,Cg,Rie,Mno,Eno,OB,Cno,wno,Ano,wg,Pie,yno,Lno,VB,xno,$no,kno,Ag,Bie,Sno,Rno,XB,Pno,Bno,Ino,yg,Iie,Nno,qno,zB,jno,Dno,Gno,Lg,Nie,Ono,Vno,QB,Xno,zno,Qno,xg,qie,Wno,Uno,WB,Hno,Jno,Yno,$g,jie,Kno,Zno,UB,eso,oso,rso,kg,Die,tso,aso,HB,nso,sso,lso,Sg,Gie,iso,dso,JB,cso,fso,mso,Rg,Oie,gso,hso,YB,pso,uso,_so,Pg,Vie,bso,vso,KB,Fso,Tso,Mso,Bg,Xie,Eso,Cso,ZB,wso,Aso,yso,Ig,zie,Lso,xso,eI,$so,kso,Sso,Ng,Qie,Rso,Pso,oI,Bso,Iso,Nso,qg,Wie,qso,jso,rI,Dso,Gso,Oso,jg,Uie,Vso,Xso,tI,zso,Qso,Wso,Dg,Hie,Uso,Hso,aI,Jso,Yso,Kso,Gg,Jie,Zso,elo,nI,olo,rlo,tlo,Og,Yie,alo,nlo,sI,slo,llo,ilo,Vg,Kie,dlo,clo,lI,flo,mlo,glo,Xg,Zie,hlo,plo,iI,ulo,_lo,blo,zg,ede,vlo,Flo,dI,Tlo,Mlo,Elo,Qg,ode,Clo,wlo,cI,Alo,ylo,Llo,Wg,rde,xlo,$lo,fI,klo,Slo,Rlo,Ug,tde,Plo,Blo,mI,Ilo,Nlo,qlo,Hg,ade,jlo,Dlo,gI,Glo,Olo,Vlo,Jg,nde,Xlo,zlo,hI,Qlo,Wlo,Ulo,Yg,sde,Hlo,Jlo,pI,Ylo,Klo,Zlo,Kg,lde,eio,oio,uI,rio,tio,aio,Zg,ide,nio,sio,_I,lio,iio,dio,eh,dde,cio,fio,bI,mio,gio,hio,oh,cde,pio,uio,vI,_io,bio,vio,rh,fde,Fio,Tio,FI,Mio,Eio,Cio,th,mde,wio,Aio,TI,yio,Lio,xio,ah,gde,$io,kio,MI,Sio,Rio,Pio,nh,hde,Bio,Iio,EI,Nio,qio,jio,sh,pde,Dio,Gio,CI,Oio,Vio,Xio,lh,ude,zio,Qio,wI,Wio,Uio,Hio,ih,_de,Jio,Yio,AI,Kio,Zio,edo,dh,bde,odo,rdo,yI,tdo,ado,ndo,ch,vde,sdo,ldo,LI,ido,ddo,cdo,fh,Fde,fdo,mdo,xI,gdo,hdo,pdo,mh,Tde,udo,_do,$I,bdo,vdo,Fdo,gh,Mde,Tdo,Mdo,kI,Edo,Cdo,wdo,hh,Ede,Ado,ydo,SI,Ldo,xdo,$do,ph,Cde,kdo,Sdo,RI,Rdo,Pdo,Bdo,uh,wde,Ido,Ndo,PI,qdo,jdo,Ddo,_h,Ade,Gdo,Odo,BI,Vdo,Xdo,zdo,bh,yde,Qdo,Wdo,II,Udo,Hdo,Jdo,vh,Lde,Ydo,Kdo,NI,Zdo,eco,oco,Fh,xde,rco,tco,qI,aco,nco,sco,Th,$de,lco,ico,jI,dco,cco,fco,Mh,kde,mco,gco,DI,hco,pco,uco,Eh,Sde,_co,bco,GI,vco,Fco,Tco,Ch,Rde,Mco,Eco,OI,Cco,wco,Aco,wh,Pde,yco,Lco,VI,xco,$co,kco,Ah,Bde,Sco,Rco,XI,Pco,Bco,Ico,yh,Ide,Nco,qco,zI,jco,Dco,Gco,Lh,Nde,Oco,Vco,QI,Xco,zco,Qco,xh,qde,Wco,Uco,WI,Hco,Jco,Yco,$h,jde,Kco,Zco,UI,efo,ofo,rfo,kh,tfo,Sh,DL,afo,Dde,nfo,zUe,ad,Rh,Gde,GL,sfo,Ode,lfo,QUe,$o,OL,ifo,VL,dfo,HI,cfo,ffo,mfo,XL,gfo,Vde,hfo,pfo,ufo,Pr,zL,_fo,Xde,bfo,vfo,za,Ffo,zde,Tfo,Mfo,Qde,Efo,Cfo,Wde,wfo,Afo,yfo,k,es,Ude,Lfo,xfo,JI,$fo,kfo,YI,Sfo,Rfo,Pfo,os,Hde,Bfo,Ifo,KI,Nfo,qfo,ZI,jfo,Dfo,Gfo,rs,Jde,Ofo,Vfo,eN,Xfo,zfo,oN,Qfo,Wfo,Ufo,Ph,Yde,Hfo,Jfo,rN,Yfo,Kfo,Zfo,ts,Kde,emo,omo,tN,rmo,tmo,aN,amo,nmo,smo,Bh,Zde,lmo,imo,nN,dmo,cmo,fmo,Ih,ece,mmo,gmo,sN,hmo,pmo,umo,Nh,oce,_mo,bmo,lN,vmo,Fmo,Tmo,as,rce,Mmo,Emo,iN,Cmo,wmo,dN,Amo,ymo,Lmo,ns,tce,xmo,$mo,cN,kmo,Smo,fN,Rmo,Pmo,Bmo,ss,ace,Imo,Nmo,mN,qmo,jmo,gN,Dmo,Gmo,Omo,qh,nce,Vmo,Xmo,hN,zmo,Qmo,Wmo,jh,sce,Umo,Hmo,pN,Jmo,Ymo,Kmo,Dh,lce,Zmo,ego,uN,ogo,rgo,tgo,ls,ice,ago,ngo,_N,sgo,lgo,bN,igo,dgo,cgo,Gh,dce,fgo,mgo,vN,ggo,hgo,pgo,is,cce,ugo,_go,FN,bgo,vgo,TN,Fgo,Tgo,Mgo,ds,fce,Ego,Cgo,MN,wgo,Ago,EN,ygo,Lgo,xgo,cs,mce,$go,kgo,CN,Sgo,Rgo,wN,Pgo,Bgo,Igo,fs,gce,Ngo,qgo,AN,jgo,Dgo,yN,Ggo,Ogo,Vgo,Oh,hce,Xgo,zgo,LN,Qgo,Wgo,Ugo,ms,pce,Hgo,Jgo,xN,Ygo,Kgo,$N,Zgo,eho,oho,gs,uce,rho,tho,kN,aho,nho,SN,sho,lho,iho,hs,_ce,dho,cho,RN,fho,mho,PN,gho,hho,pho,ps,bce,uho,_ho,BN,bho,vho,IN,Fho,Tho,Mho,us,vce,Eho,Cho,NN,who,Aho,qN,yho,Lho,xho,_s,Fce,$ho,kho,jN,Sho,Rho,DN,Pho,Bho,Iho,Vh,Tce,Nho,qho,GN,jho,Dho,Gho,bs,Mce,Oho,Vho,ON,Xho,zho,VN,Qho,Who,Uho,Xh,Ece,Hho,Jho,XN,Yho,Kho,Zho,vs,Cce,epo,opo,zN,rpo,tpo,QN,apo,npo,spo,Fs,wce,lpo,ipo,WN,dpo,cpo,UN,fpo,mpo,gpo,Ts,Ace,hpo,ppo,HN,upo,_po,JN,bpo,vpo,Fpo,zh,yce,Tpo,Mpo,YN,Epo,Cpo,wpo,Ms,Lce,Apo,ypo,KN,Lpo,xpo,ZN,$po,kpo,Spo,Es,xce,Rpo,Ppo,eq,Bpo,Ipo,oq,Npo,qpo,jpo,Cs,$ce,Dpo,Gpo,rq,Opo,Vpo,tq,Xpo,zpo,Qpo,Qh,kce,Wpo,Upo,aq,Hpo,Jpo,Ypo,ws,Sce,Kpo,Zpo,nq,euo,ouo,sq,ruo,tuo,auo,As,Rce,nuo,suo,lq,luo,iuo,iq,duo,cuo,fuo,ys,Pce,muo,guo,dq,huo,puo,cq,uuo,_uo,buo,Ls,Bce,vuo,Fuo,fq,Tuo,Muo,mq,Euo,Cuo,wuo,xs,Ice,Auo,yuo,gq,Luo,xuo,hq,$uo,kuo,Suo,$s,Nce,Ruo,Puo,pq,Buo,Iuo,uq,Nuo,quo,juo,ks,qce,Duo,Guo,_q,Ouo,Vuo,bq,Xuo,zuo,Quo,Ss,jce,Wuo,Uuo,vq,Huo,Juo,Fq,Yuo,Kuo,Zuo,Wh,Dce,e_o,o_o,Tq,r_o,t_o,a_o,Rs,Gce,n_o,s_o,Mq,l_o,i_o,Eq,d_o,c_o,f_o,Uh,Oce,m_o,g_o,Cq,h_o,p_o,u_o,Hh,Vce,__o,b_o,wq,v_o,F_o,T_o,Ps,Xce,M_o,E_o,Aq,C_o,w_o,yq,A_o,y_o,L_o,Bs,zce,x_o,$_o,Lq,k_o,S_o,xq,R_o,P_o,B_o,Is,Qce,I_o,N_o,$q,q_o,j_o,kq,D_o,G_o,O_o,Jh,Wce,V_o,X_o,Sq,z_o,Q_o,W_o,Ns,Uce,U_o,H_o,Rq,J_o,Y_o,Pq,K_o,Z_o,e2o,qs,Hce,o2o,r2o,Bq,t2o,a2o,Iq,n2o,s2o,l2o,js,Jce,i2o,d2o,Nq,c2o,f2o,qq,m2o,g2o,h2o,Ds,Yce,p2o,u2o,jq,_2o,b2o,Dq,v2o,F2o,T2o,Gs,Kce,M2o,E2o,Gq,C2o,w2o,Oq,A2o,y2o,L2o,Os,Zce,x2o,$2o,Vq,k2o,S2o,Xq,R2o,P2o,B2o,Vs,efe,I2o,N2o,zq,q2o,j2o,Qq,D2o,G2o,O2o,Xs,ofe,V2o,X2o,Wq,z2o,Q2o,Uq,W2o,U2o,H2o,Yh,rfe,J2o,Y2o,Hq,K2o,Z2o,e1o,zs,tfe,o1o,r1o,Jq,t1o,a1o,Yq,n1o,s1o,l1o,Qs,afe,i1o,d1o,Kq,c1o,f1o,Zq,m1o,g1o,h1o,Kh,nfe,p1o,u1o,ej,_1o,b1o,v1o,Zh,sfe,F1o,T1o,oj,M1o,E1o,C1o,ep,lfe,w1o,A1o,rj,y1o,L1o,x1o,op,ife,$1o,k1o,tj,S1o,R1o,P1o,Ws,dfe,B1o,I1o,aj,N1o,q1o,nj,j1o,D1o,G1o,rp,cfe,O1o,V1o,sj,X1o,z1o,Q1o,Us,ffe,W1o,U1o,lj,H1o,J1o,ij,Y1o,K1o,Z1o,Hs,mfe,ebo,obo,dj,rbo,tbo,cj,abo,nbo,sbo,Js,gfe,lbo,ibo,fj,dbo,cbo,mj,fbo,mbo,gbo,Ys,hfe,hbo,pbo,gj,ubo,_bo,hj,bbo,vbo,Fbo,Ks,pfe,Tbo,Mbo,pj,Ebo,Cbo,uj,wbo,Abo,ybo,Zs,ufe,Lbo,xbo,_j,$bo,kbo,bj,Sbo,Rbo,Pbo,tp,_fe,Bbo,Ibo,vj,Nbo,qbo,jbo,ap,bfe,Dbo,Gbo,Fj,Obo,Vbo,Xbo,el,vfe,zbo,Qbo,Tj,Wbo,Ubo,Mj,Hbo,Jbo,Ybo,ol,Ffe,Kbo,Zbo,Ej,evo,ovo,Cj,rvo,tvo,avo,rl,Tfe,nvo,svo,wj,lvo,ivo,Aj,dvo,cvo,fvo,np,Mfe,mvo,gvo,yj,hvo,pvo,uvo,sp,Efe,_vo,bvo,Lj,vvo,Fvo,Tvo,lp,Cfe,Mvo,Evo,xj,Cvo,wvo,Avo,tl,wfe,yvo,Lvo,$j,xvo,$vo,kj,kvo,Svo,Rvo,al,Afe,Pvo,Bvo,Sj,Ivo,Nvo,Rj,qvo,jvo,Dvo,ip,yfe,Gvo,Ovo,Pj,Vvo,Xvo,zvo,dp,Lfe,Qvo,Wvo,Bj,Uvo,Hvo,Jvo,cp,xfe,Yvo,Kvo,Ij,Zvo,e3o,o3o,nl,$fe,r3o,t3o,Nj,a3o,n3o,qj,s3o,l3o,i3o,fp,kfe,d3o,c3o,jj,f3o,m3o,g3o,mp,Sfe,h3o,p3o,Dj,u3o,_3o,b3o,sl,Rfe,v3o,F3o,Gj,T3o,M3o,Oj,E3o,C3o,w3o,ll,Pfe,A3o,y3o,Vj,L3o,x3o,Xj,$3o,k3o,S3o,il,Bfe,R3o,P3o,zj,B3o,I3o,Qj,N3o,q3o,j3o,dl,Ife,D3o,G3o,Wj,O3o,V3o,Uj,X3o,z3o,Q3o,gp,W3o,hp,QL,U3o,Nfe,H3o,WUe,nd,pp,qfe,WL,J3o,jfe,Y3o,UUe,ko,UL,K3o,HL,Z3o,Hj,eFo,oFo,rFo,JL,tFo,Dfe,aFo,nFo,sFo,He,YL,lFo,Gfe,iFo,dFo,Qa,cFo,Ofe,fFo,mFo,Vfe,gFo,hFo,Xfe,pFo,uFo,_Fo,W,up,zfe,bFo,vFo,Jj,FFo,TFo,MFo,_p,Qfe,EFo,CFo,Yj,wFo,AFo,yFo,bp,Wfe,LFo,xFo,Kj,$Fo,kFo,SFo,vp,Ufe,RFo,PFo,Zj,BFo,IFo,NFo,Fp,Hfe,qFo,jFo,eD,DFo,GFo,OFo,Tp,Jfe,VFo,XFo,oD,zFo,QFo,WFo,Mp,Yfe,UFo,HFo,rD,JFo,YFo,KFo,Ep,Kfe,ZFo,e7o,tD,o7o,r7o,t7o,Cp,Zfe,a7o,n7o,aD,s7o,l7o,i7o,wp,eme,d7o,c7o,nD,f7o,m7o,g7o,Ap,ome,h7o,p7o,sD,u7o,_7o,b7o,yp,rme,v7o,F7o,lD,T7o,M7o,E7o,Lp,tme,C7o,w7o,iD,A7o,y7o,L7o,xp,ame,x7o,$7o,dD,k7o,S7o,R7o,$p,nme,P7o,B7o,cD,I7o,N7o,q7o,kp,sme,j7o,D7o,fD,G7o,O7o,V7o,Sp,lme,X7o,z7o,mD,Q7o,W7o,U7o,Rp,ime,H7o,J7o,gD,Y7o,K7o,Z7o,Pp,dme,eTo,oTo,hD,rTo,tTo,aTo,Bp,cme,nTo,sTo,pD,lTo,iTo,dTo,Ip,fme,cTo,fTo,uD,mTo,gTo,hTo,Np,mme,pTo,uTo,_D,_To,bTo,vTo,qp,gme,FTo,TTo,bD,MTo,ETo,CTo,jp,hme,wTo,ATo,vD,yTo,LTo,xTo,Dp,pme,$To,kTo,FD,STo,RTo,PTo,Gp,ume,BTo,ITo,TD,NTo,qTo,jTo,Op,_me,DTo,GTo,MD,OTo,VTo,XTo,Vp,bme,zTo,QTo,ED,WTo,UTo,HTo,Xp,vme,JTo,YTo,CD,KTo,ZTo,e8o,zp,Fme,o8o,r8o,wD,t8o,a8o,n8o,Qp,Tme,s8o,l8o,AD,i8o,d8o,c8o,Wp,Mme,f8o,m8o,yD,g8o,h8o,p8o,Up,Eme,u8o,_8o,LD,b8o,v8o,F8o,Hp,Cme,T8o,M8o,xD,E8o,C8o,w8o,Jp,wme,A8o,y8o,$D,L8o,x8o,$8o,Yp,Ame,k8o,S8o,kD,R8o,P8o,B8o,Kp,yme,I8o,N8o,SD,q8o,j8o,D8o,Zp,Lme,G8o,O8o,RD,V8o,X8o,z8o,eu,Q8o,ou,W8o,ru,KL,U8o,xme,H8o,HUe,sd,tu,$me,ZL,J8o,kme,Y8o,JUe,So,e9,K8o,o9,Z8o,PD,eMo,oMo,rMo,r9,tMo,Sme,aMo,nMo,sMo,Je,t9,lMo,Rme,iMo,dMo,ld,cMo,Pme,fMo,mMo,Bme,gMo,hMo,pMo,ie,au,Ime,uMo,_Mo,BD,bMo,vMo,FMo,nu,Nme,TMo,MMo,ID,EMo,CMo,wMo,su,qme,AMo,yMo,ND,LMo,xMo,$Mo,lu,jme,kMo,SMo,qD,RMo,PMo,BMo,iu,Dme,IMo,NMo,jD,qMo,jMo,DMo,du,Gme,GMo,OMo,DD,VMo,XMo,zMo,cu,Ome,QMo,WMo,GD,UMo,HMo,JMo,fu,Vme,YMo,KMo,OD,ZMo,eEo,oEo,mu,Xme,rEo,tEo,VD,aEo,nEo,sEo,gu,zme,lEo,iEo,XD,dEo,cEo,fEo,hu,Qme,mEo,gEo,zD,hEo,pEo,uEo,pu,Wme,_Eo,bEo,QD,vEo,FEo,TEo,uu,Ume,MEo,EEo,WD,CEo,wEo,AEo,_u,Hme,yEo,LEo,UD,xEo,$Eo,kEo,bu,Jme,SEo,REo,HD,PEo,BEo,IEo,vu,Yme,NEo,qEo,JD,jEo,DEo,GEo,Fu,Kme,OEo,VEo,YD,XEo,zEo,QEo,Tu,Zme,WEo,UEo,KD,HEo,JEo,YEo,Mu,ege,KEo,ZEo,ZD,e4o,o4o,r4o,Eu,oge,t4o,a4o,eG,n4o,s4o,l4o,Cu,i4o,wu,d4o,Au,a9,c4o,rge,f4o,YUe,id,yu,tge,n9,m4o,age,g4o,KUe,Ro,s9,h4o,dd,p4o,oG,u4o,_4o,rG,b4o,v4o,F4o,l9,T4o,nge,M4o,E4o,C4o,ht,i9,w4o,sge,A4o,y4o,cd,L4o,lge,x4o,$4o,tG,k4o,S4o,R4o,Lu,P4o,Ye,d9,B4o,ige,I4o,N4o,Wa,q4o,dge,j4o,D4o,cge,G4o,O4o,fge,V4o,X4o,z4o,L,xu,mge,Q4o,W4o,aG,U4o,H4o,J4o,$u,gge,Y4o,K4o,nG,Z4o,eCo,oCo,ku,hge,rCo,tCo,sG,aCo,nCo,sCo,Su,pge,lCo,iCo,lG,dCo,cCo,fCo,Ru,uge,mCo,gCo,iG,hCo,pCo,uCo,Pu,_ge,_Co,bCo,dG,vCo,FCo,TCo,Bu,bge,MCo,ECo,cG,CCo,wCo,ACo,Iu,vge,yCo,LCo,fG,xCo,$Co,kCo,Nu,Fge,SCo,RCo,mG,PCo,BCo,ICo,qu,Tge,NCo,qCo,gG,jCo,DCo,GCo,ju,Mge,OCo,VCo,hG,XCo,zCo,QCo,Du,Ege,WCo,UCo,pG,HCo,JCo,YCo,Gu,Cge,KCo,ZCo,uG,e5o,o5o,r5o,Ou,wge,t5o,a5o,_G,n5o,s5o,l5o,Vu,Age,i5o,d5o,bG,c5o,f5o,m5o,Xu,yge,g5o,h5o,vG,p5o,u5o,_5o,zu,Lge,b5o,v5o,FG,F5o,T5o,M5o,Qu,xge,E5o,C5o,TG,w5o,A5o,y5o,Wu,$ge,L5o,x5o,MG,$5o,k5o,S5o,Uu,kge,R5o,P5o,EG,B5o,I5o,N5o,Hu,Sge,q5o,j5o,CG,D5o,G5o,O5o,Ju,Rge,V5o,X5o,wG,z5o,Q5o,W5o,Yu,Pge,U5o,H5o,AG,J5o,Y5o,K5o,Ku,Bge,Z5o,e0o,yG,o0o,r0o,t0o,Zu,Ige,a0o,n0o,LG,s0o,l0o,i0o,e_,Nge,d0o,c0o,xG,f0o,m0o,g0o,o_,qge,h0o,p0o,$G,u0o,_0o,b0o,r_,jge,v0o,F0o,kG,T0o,M0o,E0o,t_,Dge,C0o,w0o,SG,A0o,y0o,L0o,a_,Gge,x0o,$0o,RG,k0o,S0o,R0o,n_,Oge,P0o,B0o,PG,I0o,N0o,q0o,s_,Vge,j0o,D0o,BG,G0o,O0o,V0o,l_,Xge,X0o,z0o,IG,Q0o,W0o,U0o,i_,zge,H0o,J0o,NG,Y0o,K0o,Z0o,d_,Qge,ewo,owo,qG,rwo,two,awo,cl,Wge,nwo,swo,jG,lwo,iwo,DG,dwo,cwo,fwo,c_,Uge,mwo,gwo,GG,hwo,pwo,uwo,f_,Hge,_wo,bwo,OG,vwo,Fwo,Two,m_,Jge,Mwo,Ewo,VG,Cwo,wwo,Awo,g_,Yge,ywo,Lwo,XG,xwo,$wo,kwo,h_,Kge,Swo,Rwo,zG,Pwo,Bwo,Iwo,p_,Zge,Nwo,qwo,QG,jwo,Dwo,Gwo,u_,ehe,Owo,Vwo,WG,Xwo,zwo,Qwo,__,ohe,Wwo,Uwo,UG,Hwo,Jwo,Ywo,b_,rhe,Kwo,Zwo,HG,eAo,oAo,rAo,v_,the,tAo,aAo,JG,nAo,sAo,lAo,F_,ahe,iAo,dAo,YG,cAo,fAo,mAo,T_,nhe,gAo,hAo,KG,pAo,uAo,_Ao,M_,she,bAo,vAo,ZG,FAo,TAo,MAo,E_,lhe,EAo,CAo,eO,wAo,AAo,yAo,C_,ihe,LAo,xAo,oO,$Ao,kAo,SAo,w_,dhe,RAo,PAo,rO,BAo,IAo,NAo,A_,che,qAo,jAo,tO,DAo,GAo,OAo,y_,fhe,VAo,XAo,aO,zAo,QAo,WAo,L_,mhe,UAo,HAo,nO,JAo,YAo,KAo,x_,ghe,ZAo,e6o,sO,o6o,r6o,t6o,$_,hhe,a6o,n6o,lO,s6o,l6o,i6o,k_,phe,d6o,c6o,iO,f6o,m6o,g6o,S_,uhe,h6o,p6o,dO,u6o,_6o,b6o,R_,_he,v6o,F6o,cO,T6o,M6o,E6o,P_,bhe,C6o,w6o,fO,A6o,y6o,L6o,B_,vhe,x6o,$6o,mO,k6o,S6o,R6o,I_,Fhe,P6o,B6o,gO,I6o,N6o,q6o,N_,The,j6o,D6o,hO,G6o,O6o,V6o,q_,Mhe,X6o,z6o,pO,Q6o,W6o,U6o,j_,Ehe,H6o,J6o,uO,Y6o,K6o,Z6o,D_,Che,eyo,oyo,_O,ryo,tyo,ayo,G_,whe,nyo,syo,bO,lyo,iyo,dyo,O_,Ahe,cyo,fyo,vO,myo,gyo,hyo,V_,yhe,pyo,uyo,FO,_yo,byo,vyo,X_,Lhe,Fyo,Tyo,TO,Myo,Eyo,Cyo,z_,xhe,wyo,Ayo,MO,yyo,Lyo,xyo,Q_,$he,$yo,kyo,EO,Syo,Ryo,Pyo,W_,khe,Byo,Iyo,CO,Nyo,qyo,jyo,U_,She,Dyo,Gyo,wO,Oyo,Vyo,Xyo,H_,Rhe,zyo,Qyo,AO,Wyo,Uyo,Hyo,J_,Phe,Jyo,Yyo,yO,Kyo,Zyo,eLo,Y_,Bhe,oLo,rLo,LO,tLo,aLo,nLo,K_,Ihe,sLo,lLo,xO,iLo,dLo,cLo,Z_,Nhe,fLo,mLo,$O,gLo,hLo,pLo,e2,qhe,uLo,_Lo,kO,bLo,vLo,FLo,o2,jhe,TLo,MLo,SO,ELo,CLo,wLo,r2,Dhe,ALo,yLo,RO,LLo,xLo,$Lo,t2,Ghe,kLo,SLo,PO,RLo,PLo,BLo,a2,Ohe,ILo,NLo,BO,qLo,jLo,DLo,n2,Vhe,GLo,OLo,IO,VLo,XLo,zLo,s2,Xhe,QLo,WLo,NO,ULo,HLo,JLo,l2,zhe,YLo,KLo,qO,ZLo,e9o,o9o,i2,Qhe,r9o,t9o,jO,a9o,n9o,s9o,d2,Whe,l9o,i9o,DO,d9o,c9o,f9o,c2,Uhe,m9o,g9o,GO,h9o,p9o,u9o,f2,Hhe,_9o,b9o,OO,v9o,F9o,T9o,m2,Jhe,M9o,E9o,VO,C9o,w9o,A9o,g2,Yhe,y9o,L9o,XO,x9o,$9o,k9o,h2,Khe,S9o,R9o,zO,P9o,B9o,I9o,p2,Zhe,N9o,q9o,QO,j9o,D9o,G9o,u2,epe,O9o,V9o,WO,X9o,z9o,Q9o,_2,ope,W9o,U9o,UO,H9o,J9o,Y9o,b2,rpe,K9o,Z9o,HO,exo,oxo,rxo,v2,tpe,txo,axo,JO,nxo,sxo,lxo,F2,ape,ixo,dxo,YO,cxo,fxo,mxo,T2,npe,gxo,hxo,KO,pxo,uxo,_xo,M2,spe,bxo,vxo,ZO,Fxo,Txo,Mxo,E2,lpe,Exo,Cxo,eV,wxo,Axo,yxo,C2,ipe,Lxo,xxo,oV,$xo,kxo,Sxo,w2,dpe,Rxo,Pxo,rV,Bxo,Ixo,Nxo,A2,cpe,qxo,jxo,tV,Dxo,Gxo,Oxo,y2,fpe,Vxo,Xxo,aV,zxo,Qxo,Wxo,L2,mpe,Uxo,Hxo,nV,Jxo,Yxo,Kxo,x2,gpe,Zxo,e$o,sV,o$o,r$o,t$o,$2,hpe,a$o,n$o,lV,s$o,l$o,i$o,k2,ppe,d$o,c$o,iV,f$o,m$o,g$o,S2,upe,h$o,p$o,dV,u$o,_$o,b$o,R2,_pe,v$o,F$o,cV,T$o,M$o,E$o,P2,bpe,C$o,w$o,fV,A$o,y$o,L$o,B2,vpe,x$o,$$o,mV,k$o,S$o,R$o,I2,P$o,Fpe,B$o,I$o,Tpe,N$o,q$o,N2,ZUe,fd,q2,Mpe,c9,j$o,Epe,D$o,eHe,Po,f9,G$o,md,O$o,gV,V$o,X$o,hV,z$o,Q$o,W$o,m9,U$o,Cpe,H$o,J$o,Y$o,pt,g9,K$o,wpe,Z$o,eko,gd,oko,Ape,rko,tko,pV,ako,nko,sko,j2,lko,Ke,h9,iko,ype,dko,cko,Ua,fko,Lpe,mko,gko,xpe,hko,pko,$pe,uko,_ko,bko,G,D2,kpe,vko,Fko,uV,Tko,Mko,Eko,G2,Spe,Cko,wko,_V,Ako,yko,Lko,O2,Rpe,xko,$ko,bV,kko,Sko,Rko,V2,Ppe,Pko,Bko,vV,Iko,Nko,qko,X2,Bpe,jko,Dko,FV,Gko,Oko,Vko,z2,Ipe,Xko,zko,TV,Qko,Wko,Uko,Q2,Npe,Hko,Jko,MV,Yko,Kko,Zko,W2,qpe,eSo,oSo,EV,rSo,tSo,aSo,U2,jpe,nSo,sSo,CV,lSo,iSo,dSo,H2,Dpe,cSo,fSo,wV,mSo,gSo,hSo,J2,Gpe,pSo,uSo,AV,_So,bSo,vSo,Y2,Ope,FSo,TSo,yV,MSo,ESo,CSo,K2,Vpe,wSo,ASo,LV,ySo,LSo,xSo,Z2,Xpe,$So,kSo,xV,SSo,RSo,PSo,e1,zpe,BSo,ISo,$V,NSo,qSo,jSo,o1,Qpe,DSo,GSo,kV,OSo,VSo,XSo,r1,Wpe,zSo,QSo,SV,WSo,USo,HSo,t1,Upe,JSo,YSo,RV,KSo,ZSo,eRo,a1,Hpe,oRo,rRo,PV,tRo,aRo,nRo,n1,Jpe,sRo,lRo,BV,iRo,dRo,cRo,s1,Ype,fRo,mRo,IV,gRo,hRo,pRo,l1,Kpe,uRo,_Ro,NV,bRo,vRo,FRo,i1,Zpe,TRo,MRo,qV,ERo,CRo,wRo,d1,eue,ARo,yRo,jV,LRo,xRo,$Ro,c1,oue,kRo,SRo,DV,RRo,PRo,BRo,f1,rue,IRo,NRo,GV,qRo,jRo,DRo,m1,tue,GRo,ORo,OV,VRo,XRo,zRo,g1,aue,QRo,WRo,VV,URo,HRo,JRo,h1,nue,YRo,KRo,XV,ZRo,ePo,oPo,p1,sue,rPo,tPo,zV,aPo,nPo,sPo,u1,lue,lPo,iPo,QV,dPo,cPo,fPo,_1,iue,mPo,gPo,WV,hPo,pPo,uPo,b1,due,_Po,bPo,UV,vPo,FPo,TPo,v1,cue,MPo,EPo,HV,CPo,wPo,APo,F1,fue,yPo,LPo,JV,xPo,$Po,kPo,T1,mue,SPo,RPo,YV,PPo,BPo,IPo,M1,gue,NPo,qPo,KV,jPo,DPo,GPo,E1,hue,OPo,VPo,ZV,XPo,zPo,QPo,C1,pue,WPo,UPo,eX,HPo,JPo,YPo,w1,uue,KPo,ZPo,oX,eBo,oBo,rBo,A1,_ue,tBo,aBo,rX,nBo,sBo,lBo,y1,bue,iBo,dBo,tX,cBo,fBo,mBo,L1,vue,gBo,hBo,aX,pBo,uBo,_Bo,x1,Fue,bBo,vBo,nX,FBo,TBo,MBo,$1,Tue,EBo,CBo,sX,wBo,ABo,yBo,k1,Mue,LBo,xBo,lX,$Bo,kBo,SBo,S1,Eue,RBo,PBo,iX,BBo,IBo,NBo,R1,qBo,Cue,jBo,DBo,wue,GBo,OBo,P1,oHe,hd,B1,Aue,p9,VBo,yue,XBo,rHe,Bo,u9,zBo,pd,QBo,dX,WBo,UBo,cX,HBo,JBo,YBo,_9,KBo,Lue,ZBo,eIo,oIo,ut,b9,rIo,xue,tIo,aIo,ud,nIo,$ue,sIo,lIo,fX,iIo,dIo,cIo,I1,fIo,Ze,v9,mIo,kue,gIo,hIo,Ha,pIo,Sue,uIo,_Io,Rue,bIo,vIo,Pue,FIo,TIo,MIo,z,N1,Bue,EIo,CIo,mX,wIo,AIo,yIo,q1,Iue,LIo,xIo,gX,$Io,kIo,SIo,j1,Nue,RIo,PIo,hX,BIo,IIo,NIo,D1,que,qIo,jIo,pX,DIo,GIo,OIo,G1,jue,VIo,XIo,uX,zIo,QIo,WIo,O1,Due,UIo,HIo,_X,JIo,YIo,KIo,V1,Gue,ZIo,eNo,bX,oNo,rNo,tNo,X1,Oue,aNo,nNo,vX,sNo,lNo,iNo,z1,Vue,dNo,cNo,FX,fNo,mNo,gNo,Q1,Xue,hNo,pNo,TX,uNo,_No,bNo,W1,zue,vNo,FNo,MX,TNo,MNo,ENo,U1,Que,CNo,wNo,EX,ANo,yNo,LNo,H1,Wue,xNo,$No,CX,kNo,SNo,RNo,J1,Uue,PNo,BNo,wX,INo,NNo,qNo,Y1,Hue,jNo,DNo,AX,GNo,ONo,VNo,K1,Jue,XNo,zNo,yX,QNo,WNo,UNo,Z1,Yue,HNo,JNo,LX,YNo,KNo,ZNo,eb,Kue,eqo,oqo,xX,rqo,tqo,aqo,ob,Zue,nqo,sqo,$X,lqo,iqo,dqo,rb,e_e,cqo,fqo,kX,mqo,gqo,hqo,tb,o_e,pqo,uqo,SX,_qo,bqo,vqo,ab,r_e,Fqo,Tqo,RX,Mqo,Eqo,Cqo,nb,t_e,wqo,Aqo,PX,yqo,Lqo,xqo,sb,a_e,$qo,kqo,BX,Sqo,Rqo,Pqo,lb,n_e,Bqo,Iqo,IX,Nqo,qqo,jqo,ib,s_e,Dqo,Gqo,NX,Oqo,Vqo,Xqo,db,l_e,zqo,Qqo,qX,Wqo,Uqo,Hqo,cb,i_e,Jqo,Yqo,jX,Kqo,Zqo,ejo,fb,d_e,ojo,rjo,DX,tjo,ajo,njo,mb,c_e,sjo,ljo,GX,ijo,djo,cjo,gb,f_e,fjo,mjo,OX,gjo,hjo,pjo,hb,m_e,ujo,_jo,VX,bjo,vjo,Fjo,pb,g_e,Tjo,Mjo,XX,Ejo,Cjo,wjo,ub,h_e,Ajo,yjo,zX,Ljo,xjo,$jo,_b,p_e,kjo,Sjo,QX,Rjo,Pjo,Bjo,bb,u_e,Ijo,Njo,WX,qjo,jjo,Djo,vb,__e,Gjo,Ojo,UX,Vjo,Xjo,zjo,Fb,b_e,Qjo,Wjo,HX,Ujo,Hjo,Jjo,Tb,v_e,Yjo,Kjo,JX,Zjo,eDo,oDo,Mb,F_e,rDo,tDo,YX,aDo,nDo,sDo,Eb,lDo,T_e,iDo,dDo,M_e,cDo,fDo,Cb,tHe,_d,wb,E_e,F9,mDo,C_e,gDo,aHe,Io,T9,hDo,bd,pDo,KX,uDo,_Do,ZX,bDo,vDo,FDo,M9,TDo,w_e,MDo,EDo,CDo,_t,E9,wDo,A_e,ADo,yDo,vd,LDo,y_e,xDo,$Do,ez,kDo,SDo,RDo,Ab,PDo,eo,C9,BDo,L_e,IDo,NDo,Ja,qDo,x_e,jDo,DDo,$_e,GDo,ODo,k_e,VDo,XDo,zDo,U,yb,S_e,QDo,WDo,oz,UDo,HDo,JDo,Lb,R_e,YDo,KDo,rz,ZDo,eGo,oGo,xb,P_e,rGo,tGo,tz,aGo,nGo,sGo,$b,B_e,lGo,iGo,az,dGo,cGo,fGo,kb,I_e,mGo,gGo,nz,hGo,pGo,uGo,Sb,N_e,_Go,bGo,sz,vGo,FGo,TGo,Rb,q_e,MGo,EGo,lz,CGo,wGo,AGo,Pb,j_e,yGo,LGo,iz,xGo,$Go,kGo,Bb,D_e,SGo,RGo,dz,PGo,BGo,IGo,Ib,G_e,NGo,qGo,cz,jGo,DGo,GGo,Nb,O_e,OGo,VGo,fz,XGo,zGo,QGo,qb,V_e,WGo,UGo,mz,HGo,JGo,YGo,jb,X_e,KGo,ZGo,gz,eOo,oOo,rOo,Db,z_e,tOo,aOo,hz,nOo,sOo,lOo,Gb,Q_e,iOo,dOo,pz,cOo,fOo,mOo,Ob,W_e,gOo,hOo,uz,pOo,uOo,_Oo,Vb,U_e,bOo,vOo,_z,FOo,TOo,MOo,Xb,H_e,EOo,COo,bz,wOo,AOo,yOo,zb,J_e,LOo,xOo,vz,$Oo,kOo,SOo,Qb,Y_e,ROo,POo,Fz,BOo,IOo,NOo,Wb,K_e,qOo,jOo,Tz,DOo,GOo,OOo,Ub,Z_e,VOo,XOo,Mz,zOo,QOo,WOo,Hb,e2e,UOo,HOo,Ez,JOo,YOo,KOo,Jb,o2e,ZOo,eVo,Cz,oVo,rVo,tVo,Yb,r2e,aVo,nVo,wz,sVo,lVo,iVo,Kb,t2e,dVo,cVo,Az,fVo,mVo,gVo,Zb,a2e,hVo,pVo,yz,uVo,_Vo,bVo,ev,n2e,vVo,FVo,Lz,TVo,MVo,EVo,ov,s2e,CVo,wVo,xz,AVo,yVo,LVo,rv,l2e,xVo,$Vo,$z,kVo,SVo,RVo,tv,i2e,PVo,BVo,kz,IVo,NVo,qVo,av,d2e,jVo,DVo,Sz,GVo,OVo,VVo,nv,c2e,XVo,zVo,Rz,QVo,WVo,UVo,sv,f2e,HVo,JVo,m2e,YVo,KVo,ZVo,lv,g2e,eXo,oXo,Pz,rXo,tXo,aXo,iv,h2e,nXo,sXo,Bz,lXo,iXo,dXo,dv,p2e,cXo,fXo,Iz,mXo,gXo,hXo,cv,u2e,pXo,uXo,Nz,_Xo,bXo,vXo,fv,FXo,_2e,TXo,MXo,b2e,EXo,CXo,mv,nHe,Fd,gv,v2e,w9,wXo,F2e,AXo,sHe,No,A9,yXo,Td,LXo,qz,xXo,$Xo,jz,kXo,SXo,RXo,y9,PXo,T2e,BXo,IXo,NXo,bt,L9,qXo,M2e,jXo,DXo,Md,GXo,E2e,OXo,VXo,Dz,XXo,zXo,QXo,hv,WXo,oo,x9,UXo,C2e,HXo,JXo,Ya,YXo,w2e,KXo,ZXo,A2e,ezo,ozo,y2e,rzo,tzo,azo,me,pv,L2e,nzo,szo,Gz,lzo,izo,dzo,uv,x2e,czo,fzo,Oz,mzo,gzo,hzo,_v,$2e,pzo,uzo,Vz,_zo,bzo,vzo,bv,k2e,Fzo,Tzo,Xz,Mzo,Ezo,Czo,vv,S2e,wzo,Azo,zz,yzo,Lzo,xzo,Fv,R2e,$zo,kzo,Qz,Szo,Rzo,Pzo,Tv,P2e,Bzo,Izo,Wz,Nzo,qzo,jzo,Mv,B2e,Dzo,Gzo,Uz,Ozo,Vzo,Xzo,Ev,I2e,zzo,Qzo,Hz,Wzo,Uzo,Hzo,Cv,N2e,Jzo,Yzo,Jz,Kzo,Zzo,eQo,wv,q2e,oQo,rQo,Yz,tQo,aQo,nQo,Av,j2e,sQo,lQo,Kz,iQo,dQo,cQo,yv,D2e,fQo,mQo,Zz,gQo,hQo,pQo,Lv,G2e,uQo,_Qo,eQ,bQo,vQo,FQo,xv,O2e,TQo,MQo,oQ,EQo,CQo,wQo,$v,V2e,AQo,yQo,rQ,LQo,xQo,$Qo,kv,X2e,kQo,SQo,tQ,RQo,PQo,BQo,Sv,z2e,IQo,NQo,aQ,qQo,jQo,DQo,Rv,Q2e,GQo,OQo,nQ,VQo,XQo,zQo,Pv,QQo,W2e,WQo,UQo,U2e,HQo,JQo,Bv,lHe,Ed,Iv,H2e,$9,YQo,J2e,KQo,iHe,qo,k9,ZQo,Cd,eWo,sQ,oWo,rWo,lQ,tWo,aWo,nWo,S9,sWo,Y2e,lWo,iWo,dWo,vt,R9,cWo,K2e,fWo,mWo,wd,gWo,Z2e,hWo,pWo,iQ,uWo,_Wo,bWo,Nv,vWo,ro,P9,FWo,e1e,TWo,MWo,Ka,EWo,o1e,CWo,wWo,r1e,AWo,yWo,t1e,LWo,xWo,$Wo,N,qv,a1e,kWo,SWo,dQ,RWo,PWo,BWo,jv,n1e,IWo,NWo,cQ,qWo,jWo,DWo,Dv,s1e,GWo,OWo,fQ,VWo,XWo,zWo,Gv,l1e,QWo,WWo,mQ,UWo,HWo,JWo,Ov,i1e,YWo,KWo,gQ,ZWo,eUo,oUo,Vv,d1e,rUo,tUo,hQ,aUo,nUo,sUo,Xv,c1e,lUo,iUo,pQ,dUo,cUo,fUo,zv,f1e,mUo,gUo,uQ,hUo,pUo,uUo,Qv,m1e,_Uo,bUo,_Q,vUo,FUo,TUo,Wv,g1e,MUo,EUo,bQ,CUo,wUo,AUo,Uv,h1e,yUo,LUo,vQ,xUo,$Uo,kUo,Hv,p1e,SUo,RUo,FQ,PUo,BUo,IUo,Jv,u1e,NUo,qUo,TQ,jUo,DUo,GUo,Yv,_1e,OUo,VUo,MQ,XUo,zUo,QUo,Kv,b1e,WUo,UUo,EQ,HUo,JUo,YUo,Zv,v1e,KUo,ZUo,CQ,eHo,oHo,rHo,e3,F1e,tHo,aHo,wQ,nHo,sHo,lHo,o3,T1e,iHo,dHo,AQ,cHo,fHo,mHo,r3,M1e,gHo,hHo,yQ,pHo,uHo,_Ho,t3,E1e,bHo,vHo,LQ,FHo,THo,MHo,a3,C1e,EHo,CHo,xQ,wHo,AHo,yHo,n3,w1e,LHo,xHo,$Q,$Ho,kHo,SHo,s3,A1e,RHo,PHo,kQ,BHo,IHo,NHo,l3,y1e,qHo,jHo,SQ,DHo,GHo,OHo,i3,L1e,VHo,XHo,RQ,zHo,QHo,WHo,d3,x1e,UHo,HHo,PQ,JHo,YHo,KHo,c3,$1e,ZHo,eJo,BQ,oJo,rJo,tJo,f3,k1e,aJo,nJo,IQ,sJo,lJo,iJo,m3,S1e,dJo,cJo,NQ,fJo,mJo,gJo,g3,R1e,hJo,pJo,qQ,uJo,_Jo,bJo,h3,P1e,vJo,FJo,jQ,TJo,MJo,EJo,p3,B1e,CJo,wJo,DQ,AJo,yJo,LJo,u3,I1e,xJo,$Jo,GQ,kJo,SJo,RJo,_3,N1e,PJo,BJo,OQ,IJo,NJo,qJo,b3,q1e,jJo,DJo,VQ,GJo,OJo,VJo,v3,j1e,XJo,zJo,XQ,QJo,WJo,UJo,F3,D1e,HJo,JJo,zQ,YJo,KJo,ZJo,T3,G1e,eYo,oYo,QQ,rYo,tYo,aYo,M3,O1e,nYo,sYo,WQ,lYo,iYo,dYo,E3,V1e,cYo,fYo,UQ,mYo,gYo,hYo,C3,X1e,pYo,uYo,HQ,_Yo,bYo,vYo,w3,z1e,FYo,TYo,JQ,MYo,EYo,CYo,A3,Q1e,wYo,AYo,YQ,yYo,LYo,xYo,y3,W1e,$Yo,kYo,KQ,SYo,RYo,PYo,L3,U1e,BYo,IYo,ZQ,NYo,qYo,jYo,x3,H1e,DYo,GYo,eW,OYo,VYo,XYo,$3,J1e,zYo,QYo,oW,WYo,UYo,HYo,k3,Y1e,JYo,YYo,rW,KYo,ZYo,eKo,S3,K1e,oKo,rKo,tW,tKo,aKo,nKo,R3,Z1e,sKo,lKo,aW,iKo,dKo,cKo,P3,ebe,fKo,mKo,nW,gKo,hKo,pKo,B3,obe,uKo,_Ko,sW,bKo,vKo,FKo,I3,TKo,rbe,MKo,EKo,tbe,CKo,wKo,N3,dHe,Ad,q3,abe,B9,AKo,nbe,yKo,cHe,jo,I9,LKo,yd,xKo,lW,$Ko,kKo,iW,SKo,RKo,PKo,N9,BKo,sbe,IKo,NKo,qKo,Ft,q9,jKo,lbe,DKo,GKo,Ld,OKo,ibe,VKo,XKo,dW,zKo,QKo,WKo,j3,UKo,to,j9,HKo,dbe,JKo,YKo,Za,KKo,cbe,ZKo,eZo,fbe,oZo,rZo,mbe,tZo,aZo,nZo,Z,D3,gbe,sZo,lZo,cW,iZo,dZo,cZo,G3,hbe,fZo,mZo,fW,gZo,hZo,pZo,O3,pbe,uZo,_Zo,mW,bZo,vZo,FZo,V3,ube,TZo,MZo,gW,EZo,CZo,wZo,X3,_be,AZo,yZo,hW,LZo,xZo,$Zo,z3,bbe,kZo,SZo,pW,RZo,PZo,BZo,Q3,vbe,IZo,NZo,uW,qZo,jZo,DZo,W3,Fbe,GZo,OZo,_W,VZo,XZo,zZo,U3,Tbe,QZo,WZo,bW,UZo,HZo,JZo,H3,Mbe,YZo,KZo,vW,ZZo,eer,oer,J3,Ebe,rer,ter,FW,aer,ner,ser,Y3,Cbe,ler,ier,TW,der,cer,fer,K3,wbe,mer,ger,MW,her,per,uer,Z3,Abe,_er,ber,EW,ver,Fer,Ter,eF,ybe,Mer,Eer,CW,Cer,wer,Aer,oF,Lbe,yer,Ler,wW,xer,$er,ker,rF,xbe,Ser,Rer,AW,Per,Ber,Ier,tF,$be,Ner,qer,yW,jer,Der,Ger,aF,kbe,Oer,Ver,LW,Xer,zer,Qer,nF,Sbe,Wer,Uer,xW,Her,Jer,Yer,sF,Rbe,Ker,Zer,$W,eor,oor,ror,lF,Pbe,tor,aor,kW,nor,sor,lor,iF,Bbe,ior,dor,SW,cor,mor,gor,dF,Ibe,hor,por,RW,uor,_or,bor,cF,Nbe,vor,For,PW,Tor,Mor,Eor,fF,qbe,Cor,wor,BW,Aor,yor,Lor,mF,jbe,xor,$or,IW,kor,Sor,Ror,gF,Dbe,Por,Bor,NW,Ior,Nor,qor,hF,Gbe,jor,Dor,qW,Gor,Oor,Vor,pF,Obe,Xor,zor,jW,Qor,Wor,Uor,uF,Vbe,Hor,Jor,DW,Yor,Kor,Zor,_F,err,Xbe,orr,rrr,zbe,trr,arr,bF,fHe,xd,vF,Qbe,D9,nrr,Wbe,srr,mHe,Do,G9,lrr,$d,irr,GW,drr,crr,OW,frr,mrr,grr,O9,hrr,Ube,prr,urr,_rr,Tt,V9,brr,Hbe,vrr,Frr,kd,Trr,Jbe,Mrr,Err,VW,Crr,wrr,Arr,FF,yrr,ao,X9,Lrr,Ybe,xrr,$rr,en,krr,Kbe,Srr,Rrr,Zbe,Prr,Brr,eve,Irr,Nrr,qrr,Go,TF,ove,jrr,Drr,XW,Grr,Orr,Vrr,MF,rve,Xrr,zrr,zW,Qrr,Wrr,Urr,EF,tve,Hrr,Jrr,QW,Yrr,Krr,Zrr,CF,ave,etr,otr,WW,rtr,ttr,atr,wF,nve,ntr,str,UW,ltr,itr,dtr,AF,sve,ctr,ftr,HW,mtr,gtr,htr,yF,ptr,lve,utr,_tr,ive,btr,vtr,LF,gHe,Sd,xF,dve,z9,Ftr,cve,Ttr,hHe,Oo,Q9,Mtr,Rd,Etr,JW,Ctr,wtr,YW,Atr,ytr,Ltr,W9,xtr,fve,$tr,ktr,Str,Mt,U9,Rtr,mve,Ptr,Btr,Pd,Itr,gve,Ntr,qtr,KW,jtr,Dtr,Gtr,$F,Otr,no,H9,Vtr,hve,Xtr,ztr,on,Qtr,pve,Wtr,Utr,uve,Htr,Jtr,_ve,Ytr,Ktr,Ztr,H,kF,bve,ear,oar,ZW,rar,tar,aar,SF,vve,nar,sar,eU,lar,iar,dar,RF,Fve,car,far,oU,mar,gar,har,PF,Tve,par,uar,rU,_ar,bar,Far,BF,Mve,Tar,Mar,tU,Ear,Car,war,IF,Eve,Aar,yar,aU,Lar,xar,$ar,NF,Cve,kar,Sar,nU,Rar,Par,Bar,qF,wve,Iar,Nar,sU,qar,jar,Dar,jF,Ave,Gar,Oar,lU,Var,Xar,zar,DF,yve,Qar,War,iU,Uar,Har,Jar,GF,Lve,Yar,Kar,dU,Zar,enr,onr,OF,xve,rnr,tnr,cU,anr,nnr,snr,VF,$ve,lnr,inr,fU,dnr,cnr,fnr,XF,kve,mnr,gnr,mU,hnr,pnr,unr,zF,Sve,_nr,bnr,gU,vnr,Fnr,Tnr,QF,Rve,Mnr,Enr,hU,Cnr,wnr,Anr,WF,Pve,ynr,Lnr,pU,xnr,$nr,knr,UF,Bve,Snr,Rnr,uU,Pnr,Bnr,Inr,HF,Ive,Nnr,qnr,_U,jnr,Dnr,Gnr,JF,Nve,Onr,Vnr,bU,Xnr,znr,Qnr,YF,qve,Wnr,Unr,vU,Hnr,Jnr,Ynr,KF,jve,Knr,Znr,FU,esr,osr,rsr,ZF,Dve,tsr,asr,TU,nsr,ssr,lsr,e7,Gve,isr,dsr,MU,csr,fsr,msr,o7,Ove,gsr,hsr,EU,psr,usr,_sr,r7,Vve,bsr,vsr,CU,Fsr,Tsr,Msr,t7,Xve,Esr,Csr,wU,wsr,Asr,ysr,a7,zve,Lsr,xsr,AU,$sr,ksr,Ssr,n7,Qve,Rsr,Psr,yU,Bsr,Isr,Nsr,s7,Wve,qsr,jsr,LU,Dsr,Gsr,Osr,l7,Uve,Vsr,Xsr,xU,zsr,Qsr,Wsr,i7,Hve,Usr,Hsr,$U,Jsr,Ysr,Ksr,d7,Jve,Zsr,elr,kU,olr,rlr,tlr,c7,Yve,alr,nlr,SU,slr,llr,ilr,f7,Kve,dlr,clr,RU,flr,mlr,glr,m7,Zve,hlr,plr,PU,ulr,_lr,blr,g7,e3e,vlr,Flr,BU,Tlr,Mlr,Elr,h7,Clr,o3e,wlr,Alr,r3e,ylr,Llr,p7,pHe,Bd,u7,t3e,J9,xlr,a3e,$lr,uHe,Vo,Y9,klr,Id,Slr,IU,Rlr,Plr,NU,Blr,Ilr,Nlr,K9,qlr,n3e,jlr,Dlr,Glr,Et,Z9,Olr,s3e,Vlr,Xlr,Nd,zlr,l3e,Qlr,Wlr,qU,Ulr,Hlr,Jlr,_7,Ylr,so,ex,Klr,i3e,Zlr,eir,rn,oir,d3e,rir,tir,c3e,air,nir,f3e,sir,lir,iir,V,b7,m3e,dir,cir,jU,fir,mir,gir,v7,g3e,hir,pir,DU,uir,_ir,bir,F7,h3e,vir,Fir,GU,Tir,Mir,Eir,T7,p3e,Cir,wir,OU,Air,yir,Lir,M7,u3e,xir,$ir,VU,kir,Sir,Rir,E7,_3e,Pir,Bir,XU,Iir,Nir,qir,C7,b3e,jir,Dir,zU,Gir,Oir,Vir,w7,v3e,Xir,zir,QU,Qir,Wir,Uir,A7,F3e,Hir,Jir,WU,Yir,Kir,Zir,y7,T3e,edr,odr,UU,rdr,tdr,adr,L7,M3e,ndr,sdr,HU,ldr,idr,ddr,x7,E3e,cdr,fdr,JU,mdr,gdr,hdr,$7,C3e,pdr,udr,YU,_dr,bdr,vdr,k7,w3e,Fdr,Tdr,KU,Mdr,Edr,Cdr,S7,A3e,wdr,Adr,ZU,ydr,Ldr,xdr,R7,y3e,$dr,kdr,eH,Sdr,Rdr,Pdr,P7,L3e,Bdr,Idr,oH,Ndr,qdr,jdr,B7,x3e,Ddr,Gdr,rH,Odr,Vdr,Xdr,I7,$3e,zdr,Qdr,tH,Wdr,Udr,Hdr,N7,k3e,Jdr,Ydr,aH,Kdr,Zdr,ecr,q7,S3e,ocr,rcr,nH,tcr,acr,ncr,j7,R3e,scr,lcr,sH,icr,dcr,ccr,D7,P3e,fcr,mcr,lH,gcr,hcr,pcr,G7,B3e,ucr,_cr,iH,bcr,vcr,Fcr,O7,I3e,Tcr,Mcr,dH,Ecr,Ccr,wcr,V7,N3e,Acr,ycr,cH,Lcr,xcr,$cr,X7,q3e,kcr,Scr,fH,Rcr,Pcr,Bcr,z7,j3e,Icr,Ncr,mH,qcr,jcr,Dcr,Q7,D3e,Gcr,Ocr,gH,Vcr,Xcr,zcr,W7,G3e,Qcr,Wcr,hH,Ucr,Hcr,Jcr,U7,O3e,Ycr,Kcr,pH,Zcr,efr,ofr,H7,V3e,rfr,tfr,uH,afr,nfr,sfr,J7,X3e,lfr,ifr,_H,dfr,cfr,ffr,Y7,z3e,mfr,gfr,bH,hfr,pfr,ufr,K7,Q3e,_fr,bfr,vH,vfr,Ffr,Tfr,Z7,W3e,Mfr,Efr,FH,Cfr,wfr,Afr,eT,U3e,yfr,Lfr,TH,xfr,$fr,kfr,oT,H3e,Sfr,Rfr,MH,Pfr,Bfr,Ifr,rT,J3e,Nfr,qfr,EH,jfr,Dfr,Gfr,tT,Y3e,Ofr,Vfr,CH,Xfr,zfr,Qfr,aT,K3e,Wfr,Ufr,wH,Hfr,Jfr,Yfr,nT,Z3e,Kfr,Zfr,AH,emr,omr,rmr,sT,eFe,tmr,amr,yH,nmr,smr,lmr,lT,imr,oFe,dmr,cmr,rFe,fmr,mmr,iT,_He,qd,dT,tFe,ox,gmr,aFe,hmr,bHe,Xo,rx,pmr,jd,umr,LH,_mr,bmr,xH,vmr,Fmr,Tmr,tx,Mmr,nFe,Emr,Cmr,wmr,Ct,ax,Amr,sFe,ymr,Lmr,Dd,xmr,lFe,$mr,kmr,$H,Smr,Rmr,Pmr,cT,Bmr,lo,nx,Imr,iFe,Nmr,qmr,tn,jmr,dFe,Dmr,Gmr,cFe,Omr,Vmr,fFe,Xmr,zmr,Qmr,mFe,fT,gFe,Wmr,Umr,kH,Hmr,Jmr,Ymr,mT,Kmr,hFe,Zmr,egr,pFe,ogr,rgr,gT,vHe,Gd,hT,uFe,sx,tgr,_Fe,agr,FHe,zo,lx,ngr,Od,sgr,SH,lgr,igr,RH,dgr,cgr,fgr,ix,mgr,bFe,ggr,hgr,pgr,wt,dx,ugr,vFe,_gr,bgr,Vd,vgr,FFe,Fgr,Tgr,PH,Mgr,Egr,Cgr,pT,wgr,io,cx,Agr,TFe,ygr,Lgr,an,xgr,MFe,$gr,kgr,EFe,Sgr,Rgr,CFe,Pgr,Bgr,Igr,Xd,uT,wFe,Ngr,qgr,BH,jgr,Dgr,Ggr,_T,AFe,Ogr,Vgr,IH,Xgr,zgr,Qgr,bT,yFe,Wgr,Ugr,NH,Hgr,Jgr,Ygr,vT,Kgr,LFe,Zgr,ehr,xFe,ohr,rhr,FT,THe,zd,TT,$Fe,fx,thr,kFe,ahr,MHe,Qo,mx,nhr,Qd,shr,qH,lhr,ihr,jH,dhr,chr,fhr,gx,mhr,SFe,ghr,hhr,phr,At,hx,uhr,RFe,_hr,bhr,Wd,vhr,PFe,Fhr,Thr,DH,Mhr,Ehr,Chr,MT,whr,co,px,Ahr,BFe,yhr,Lhr,nn,xhr,IFe,$hr,khr,NFe,Shr,Rhr,qFe,Phr,Bhr,Ihr,be,ET,jFe,Nhr,qhr,GH,jhr,Dhr,Ghr,CT,DFe,Ohr,Vhr,OH,Xhr,zhr,Qhr,wT,GFe,Whr,Uhr,VH,Hhr,Jhr,Yhr,AT,OFe,Khr,Zhr,XH,epr,opr,rpr,fl,VFe,tpr,apr,zH,npr,spr,QH,lpr,ipr,dpr,yT,XFe,cpr,fpr,WH,mpr,gpr,hpr,ml,zFe,ppr,upr,UH,_pr,bpr,HH,vpr,Fpr,Tpr,LT,QFe,Mpr,Epr,JH,Cpr,wpr,Apr,yt,WFe,ypr,Lpr,YH,xpr,$pr,KH,kpr,Spr,ZH,Rpr,Ppr,Bpr,xT,UFe,Ipr,Npr,eJ,qpr,jpr,Dpr,$T,HFe,Gpr,Opr,oJ,Vpr,Xpr,zpr,kT,JFe,Qpr,Wpr,rJ,Upr,Hpr,Jpr,ST,YFe,Ypr,Kpr,tJ,Zpr,eur,our,RT,KFe,rur,tur,aJ,aur,nur,sur,PT,ZFe,lur,iur,nJ,dur,cur,fur,BT,e7e,mur,gur,sJ,hur,pur,uur,IT,o7e,_ur,bur,lJ,vur,Fur,Tur,NT,Mur,r7e,Eur,Cur,t7e,wur,Aur,qT,EHe,Ud,jT,a7e,ux,yur,n7e,Lur,CHe,Wo,_x,xur,Hd,$ur,iJ,kur,Sur,dJ,Rur,Pur,Bur,bx,Iur,s7e,Nur,qur,jur,Lt,vx,Dur,l7e,Gur,Our,Jd,Vur,i7e,Xur,zur,cJ,Qur,Wur,Uur,DT,Hur,fo,Fx,Jur,d7e,Yur,Kur,sn,Zur,c7e,e_r,o_r,f7e,r_r,t_r,m7e,a_r,n_r,s_r,g7e,GT,h7e,l_r,i_r,fJ,d_r,c_r,f_r,OT,m_r,p7e,g_r,h_r,u7e,p_r,u_r,VT,wHe,Yd,XT,_7e,Tx,__r,b7e,b_r,AHe,Uo,Mx,v_r,Kd,F_r,mJ,T_r,M_r,gJ,E_r,C_r,w_r,Ex,A_r,v7e,y_r,L_r,x_r,xt,Cx,$_r,F7e,k_r,S_r,Zd,R_r,T7e,P_r,B_r,hJ,I_r,N_r,q_r,zT,j_r,mo,wx,D_r,M7e,G_r,O_r,ln,V_r,E7e,X_r,z_r,C7e,Q_r,W_r,w7e,U_r,H_r,J_r,A7e,QT,y7e,Y_r,K_r,pJ,Z_r,e2r,o2r,WT,r2r,L7e,t2r,a2r,x7e,n2r,s2r,UT,yHe,ec,HT,$7e,Ax,l2r,k7e,i2r,LHe,Ho,yx,d2r,oc,c2r,uJ,f2r,m2r,_J,g2r,h2r,p2r,Lx,u2r,S7e,_2r,b2r,v2r,$t,xx,F2r,R7e,T2r,M2r,rc,E2r,P7e,C2r,w2r,bJ,A2r,y2r,L2r,JT,x2r,go,$x,$2r,B7e,k2r,S2r,dn,R2r,I7e,P2r,B2r,N7e,I2r,N2r,q7e,q2r,j2r,D2r,j7e,YT,D7e,G2r,O2r,vJ,V2r,X2r,z2r,KT,Q2r,G7e,W2r,U2r,O7e,H2r,J2r,ZT,xHe,tc,e8,V7e,kx,Y2r,X7e,K2r,$He,Jo,Sx,Z2r,ac,e1r,FJ,o1r,r1r,TJ,t1r,a1r,n1r,Rx,s1r,z7e,l1r,i1r,d1r,kt,Px,c1r,Q7e,f1r,m1r,nc,g1r,W7e,h1r,p1r,MJ,u1r,_1r,b1r,o8,v1r,ho,Bx,F1r,U7e,T1r,M1r,cn,E1r,H7e,C1r,w1r,J7e,A1r,y1r,Y7e,L1r,x1r,$1r,Pe,r8,K7e,k1r,S1r,EJ,R1r,P1r,B1r,t8,Z7e,I1r,N1r,CJ,q1r,j1r,D1r,a8,eTe,G1r,O1r,wJ,V1r,X1r,z1r,n8,oTe,Q1r,W1r,AJ,U1r,H1r,J1r,s8,rTe,Y1r,K1r,yJ,Z1r,ebr,obr,l8,tTe,rbr,tbr,LJ,abr,nbr,sbr,i8,aTe,lbr,ibr,xJ,dbr,cbr,fbr,d8,nTe,mbr,gbr,$J,hbr,pbr,ubr,c8,sTe,_br,bbr,kJ,vbr,Fbr,Tbr,f8,Mbr,lTe,Ebr,Cbr,iTe,wbr,Abr,m8,kHe,sc,g8,dTe,Ix,ybr,cTe,Lbr,SHe,Yo,Nx,xbr,lc,$br,SJ,kbr,Sbr,RJ,Rbr,Pbr,Bbr,qx,Ibr,fTe,Nbr,qbr,jbr,St,jx,Dbr,mTe,Gbr,Obr,ic,Vbr,gTe,Xbr,zbr,PJ,Qbr,Wbr,Ubr,h8,Hbr,po,Dx,Jbr,hTe,Ybr,Kbr,fn,Zbr,pTe,evr,ovr,uTe,rvr,tvr,_Te,avr,nvr,svr,it,p8,bTe,lvr,ivr,BJ,dvr,cvr,fvr,u8,vTe,mvr,gvr,IJ,hvr,pvr,uvr,_8,FTe,_vr,bvr,NJ,vvr,Fvr,Tvr,b8,TTe,Mvr,Evr,qJ,Cvr,wvr,Avr,v8,MTe,yvr,Lvr,jJ,xvr,$vr,kvr,F8,Svr,ETe,Rvr,Pvr,CTe,Bvr,Ivr,T8,RHe,dc,M8,wTe,Gx,Nvr,ATe,qvr,PHe,Ko,Ox,jvr,cc,Dvr,DJ,Gvr,Ovr,GJ,Vvr,Xvr,zvr,Vx,Qvr,yTe,Wvr,Uvr,Hvr,Rt,Xx,Jvr,LTe,Yvr,Kvr,fc,Zvr,xTe,e3r,o3r,OJ,r3r,t3r,a3r,E8,n3r,uo,zx,s3r,$Te,l3r,i3r,mn,d3r,kTe,c3r,f3r,STe,m3r,g3r,RTe,h3r,p3r,u3r,ye,C8,PTe,_3r,b3r,VJ,v3r,F3r,T3r,w8,BTe,M3r,E3r,XJ,C3r,w3r,A3r,A8,ITe,y3r,L3r,zJ,x3r,$3r,k3r,y8,NTe,S3r,R3r,QJ,P3r,B3r,I3r,L8,qTe,N3r,q3r,WJ,j3r,D3r,G3r,x8,jTe,O3r,V3r,UJ,X3r,z3r,Q3r,$8,DTe,W3r,U3r,HJ,H3r,J3r,Y3r,k8,GTe,K3r,Z3r,JJ,eFr,oFr,rFr,S8,OTe,tFr,aFr,YJ,nFr,sFr,lFr,R8,VTe,iFr,dFr,KJ,cFr,fFr,mFr,P8,gFr,XTe,hFr,pFr,zTe,uFr,_Fr,B8,BHe,mc,I8,QTe,Qx,bFr,WTe,vFr,IHe,Zo,Wx,FFr,gc,TFr,ZJ,MFr,EFr,eY,CFr,wFr,AFr,Ux,yFr,UTe,LFr,xFr,$Fr,Pt,Hx,kFr,HTe,SFr,RFr,hc,PFr,JTe,BFr,IFr,oY,NFr,qFr,jFr,N8,DFr,_o,Jx,GFr,YTe,OFr,VFr,gn,XFr,KTe,zFr,QFr,ZTe,WFr,UFr,e8e,HFr,JFr,YFr,Yx,q8,o8e,KFr,ZFr,rY,e7r,o7r,r7r,j8,r8e,t7r,a7r,tY,n7r,s7r,l7r,D8,i7r,t8e,d7r,c7r,a8e,f7r,m7r,G8,NHe,pc,O8,n8e,Kx,g7r,s8e,h7r,qHe,er,Zx,p7r,uc,u7r,aY,_7r,b7r,nY,v7r,F7r,T7r,e$,M7r,l8e,E7r,C7r,w7r,Bt,o$,A7r,i8e,y7r,L7r,_c,x7r,d8e,$7r,k7r,sY,S7r,R7r,P7r,V8,B7r,bo,r$,I7r,c8e,N7r,q7r,hn,j7r,f8e,D7r,G7r,m8e,O7r,V7r,g8e,X7r,z7r,Q7r,dt,X8,h8e,W7r,U7r,lY,H7r,J7r,Y7r,z8,p8e,K7r,Z7r,iY,eTr,oTr,rTr,Q8,u8e,tTr,aTr,dY,nTr,sTr,lTr,W8,_8e,iTr,dTr,cY,cTr,fTr,mTr,U8,b8e,gTr,hTr,fY,pTr,uTr,_Tr,H8,bTr,v8e,vTr,FTr,F8e,TTr,MTr,J8,jHe,bc,Y8,T8e,t$,ETr,M8e,CTr,DHe,or,a$,wTr,vc,ATr,mY,yTr,LTr,gY,xTr,$Tr,kTr,n$,STr,E8e,RTr,PTr,BTr,It,s$,ITr,C8e,NTr,qTr,Fc,jTr,w8e,DTr,GTr,hY,OTr,VTr,XTr,K8,zTr,vo,l$,QTr,A8e,WTr,UTr,pn,HTr,y8e,JTr,YTr,L8e,KTr,ZTr,x8e,e8r,o8r,r8r,un,Z8,$8e,t8r,a8r,pY,n8r,s8r,l8r,eM,k8e,i8r,d8r,uY,c8r,f8r,m8r,oM,S8e,g8r,h8r,_Y,p8r,u8r,_8r,rM,R8e,b8r,v8r,bY,F8r,T8r,M8r,tM,E8r,P8e,C8r,w8r,B8e,A8r,y8r,aM,GHe,Tc,nM,I8e,i$,L8r,N8e,x8r,OHe,rr,d$,$8r,Mc,k8r,vY,S8r,R8r,FY,P8r,B8r,I8r,c$,N8r,q8e,q8r,j8r,D8r,Nt,f$,G8r,j8e,O8r,V8r,Ec,X8r,D8e,z8r,Q8r,TY,W8r,U8r,H8r,sM,J8r,Fo,m$,Y8r,G8e,K8r,Z8r,_n,eMr,O8e,oMr,rMr,V8e,tMr,aMr,X8e,nMr,sMr,lMr,g$,lM,z8e,iMr,dMr,MY,cMr,fMr,mMr,iM,Q8e,gMr,hMr,EY,pMr,uMr,_Mr,dM,bMr,W8e,vMr,FMr,U8e,TMr,MMr,cM,VHe,Cc,fM,H8e,h$,EMr,J8e,CMr,XHe,tr,p$,wMr,wc,AMr,CY,yMr,LMr,wY,xMr,$Mr,kMr,u$,SMr,Y8e,RMr,PMr,BMr,qt,_$,IMr,K8e,NMr,qMr,Ac,jMr,Z8e,DMr,GMr,AY,OMr,VMr,XMr,mM,zMr,To,b$,QMr,eMe,WMr,UMr,bn,HMr,oMe,JMr,YMr,rMe,KMr,ZMr,tMe,eEr,oEr,rEr,aMe,gM,nMe,tEr,aEr,yY,nEr,sEr,lEr,hM,iEr,sMe,dEr,cEr,lMe,fEr,mEr,pM,zHe,yc,uM,iMe,v$,gEr,dMe,hEr,QHe,ar,F$,pEr,Lc,uEr,LY,_Er,bEr,xY,vEr,FEr,TEr,T$,MEr,cMe,EEr,CEr,wEr,jt,M$,AEr,fMe,yEr,LEr,xc,xEr,mMe,$Er,kEr,$Y,SEr,REr,PEr,_M,BEr,Mo,E$,IEr,gMe,NEr,qEr,vn,jEr,hMe,DEr,GEr,pMe,OEr,VEr,uMe,XEr,zEr,QEr,ct,bM,_Me,WEr,UEr,kY,HEr,JEr,YEr,vM,bMe,KEr,ZEr,SY,e4r,o4r,r4r,FM,vMe,t4r,a4r,RY,n4r,s4r,l4r,TM,FMe,i4r,d4r,PY,c4r,f4r,m4r,MM,TMe,g4r,h4r,BY,p4r,u4r,_4r,EM,b4r,MMe,v4r,F4r,EMe,T4r,M4r,CM,WHe,$c,wM,CMe,C$,E4r,wMe,C4r,UHe,nr,w$,w4r,kc,A4r,IY,y4r,L4r,NY,x4r,$4r,k4r,A$,S4r,AMe,R4r,P4r,B4r,Dt,y$,I4r,yMe,N4r,q4r,Sc,j4r,LMe,D4r,G4r,qY,O4r,V4r,X4r,AM,z4r,Eo,L$,Q4r,xMe,W4r,U4r,Fn,H4r,$Me,J4r,Y4r,kMe,K4r,Z4r,SMe,eCr,oCr,rCr,RMe,yM,PMe,tCr,aCr,jY,nCr,sCr,lCr,LM,iCr,BMe,dCr,cCr,IMe,fCr,mCr,xM,HHe,Rc,$M,NMe,x$,gCr,qMe,hCr,JHe,sr,$$,pCr,Pc,uCr,DY,_Cr,bCr,GY,vCr,FCr,TCr,k$,MCr,jMe,ECr,CCr,wCr,Gt,S$,ACr,DMe,yCr,LCr,Bc,xCr,GMe,$Cr,kCr,OY,SCr,RCr,PCr,kM,BCr,Br,R$,ICr,OMe,NCr,qCr,Tn,jCr,VMe,DCr,GCr,XMe,OCr,VCr,zMe,XCr,zCr,QCr,q,SM,QMe,WCr,UCr,VY,HCr,JCr,YCr,RM,WMe,KCr,ZCr,XY,e5r,o5r,r5r,PM,UMe,t5r,a5r,zY,n5r,s5r,l5r,BM,HMe,i5r,d5r,QY,c5r,f5r,m5r,IM,JMe,g5r,h5r,WY,p5r,u5r,_5r,NM,YMe,b5r,v5r,UY,F5r,T5r,M5r,qM,KMe,E5r,C5r,HY,w5r,A5r,y5r,jM,ZMe,L5r,x5r,JY,$5r,k5r,S5r,DM,eEe,R5r,P5r,YY,B5r,I5r,N5r,GM,oEe,q5r,j5r,KY,D5r,G5r,O5r,OM,rEe,V5r,X5r,ZY,z5r,Q5r,W5r,VM,tEe,U5r,H5r,eK,J5r,Y5r,K5r,XM,aEe,Z5r,e0r,oK,o0r,r0r,t0r,zM,nEe,a0r,n0r,rK,s0r,l0r,i0r,QM,sEe,d0r,c0r,tK,f0r,m0r,g0r,WM,lEe,h0r,p0r,aK,u0r,_0r,b0r,UM,iEe,v0r,F0r,nK,T0r,M0r,E0r,HM,dEe,C0r,w0r,sK,A0r,y0r,L0r,gl,cEe,x0r,$0r,lK,k0r,S0r,iK,R0r,P0r,B0r,JM,fEe,I0r,N0r,dK,q0r,j0r,D0r,YM,mEe,G0r,O0r,cK,V0r,X0r,z0r,KM,gEe,Q0r,W0r,fK,U0r,H0r,J0r,ZM,hEe,Y0r,K0r,mK,Z0r,ewr,owr,eE,pEe,rwr,twr,gK,awr,nwr,swr,oE,uEe,lwr,iwr,hK,dwr,cwr,fwr,rE,_Ee,mwr,gwr,pK,hwr,pwr,uwr,tE,bEe,_wr,bwr,uK,vwr,Fwr,Twr,aE,vEe,Mwr,Ewr,_K,Cwr,wwr,Awr,nE,FEe,ywr,Lwr,bK,xwr,$wr,kwr,sE,TEe,Swr,Rwr,vK,Pwr,Bwr,Iwr,lE,MEe,Nwr,qwr,FK,jwr,Dwr,Gwr,iE,EEe,Owr,Vwr,TK,Xwr,zwr,Qwr,dE,CEe,Wwr,Uwr,MK,Hwr,Jwr,Ywr,cE,wEe,Kwr,Zwr,EK,eAr,oAr,rAr,fE,AEe,tAr,aAr,CK,nAr,sAr,lAr,mE,yEe,iAr,dAr,wK,cAr,fAr,mAr,gE,LEe,gAr,hAr,AK,pAr,uAr,_Ar,hE,xEe,bAr,vAr,yK,FAr,TAr,MAr,pE,$Ee,EAr,CAr,LK,wAr,AAr,yAr,uE,kEe,LAr,xAr,xK,$Ar,kAr,SAr,_E,SEe,RAr,PAr,$K,BAr,IAr,NAr,bE,REe,qAr,jAr,kK,DAr,GAr,OAr,vE,PEe,VAr,XAr,SK,zAr,QAr,WAr,FE,BEe,UAr,HAr,RK,JAr,YAr,KAr,TE,IEe,ZAr,e6r,PK,o6r,r6r,t6r,ME,NEe,a6r,n6r,BK,s6r,l6r,i6r,EE,qEe,d6r,c6r,IK,f6r,m6r,g6r,CE,jEe,h6r,p6r,NK,u6r,_6r,b6r,wE,DEe,v6r,F6r,qK,T6r,M6r,E6r,AE,GEe,C6r,w6r,jK,A6r,y6r,L6r,yE,OEe,x6r,$6r,DK,k6r,S6r,R6r,LE,YHe,Ic,xE,VEe,P$,P6r,XEe,B6r,KHe,lr,B$,I6r,Nc,N6r,GK,q6r,j6r,OK,D6r,G6r,O6r,I$,V6r,zEe,X6r,z6r,Q6r,Ot,N$,W6r,QEe,U6r,H6r,qc,J6r,WEe,Y6r,K6r,VK,Z6r,eyr,oyr,$E,ryr,Ir,q$,tyr,UEe,ayr,nyr,Mn,syr,HEe,lyr,iyr,JEe,dyr,cyr,YEe,fyr,myr,gyr,se,kE,KEe,hyr,pyr,XK,uyr,_yr,byr,SE,ZEe,vyr,Fyr,zK,Tyr,Myr,Eyr,RE,e4e,Cyr,wyr,QK,Ayr,yyr,Lyr,PE,o4e,xyr,$yr,WK,kyr,Syr,Ryr,BE,r4e,Pyr,Byr,UK,Iyr,Nyr,qyr,IE,t4e,jyr,Dyr,HK,Gyr,Oyr,Vyr,NE,a4e,Xyr,zyr,JK,Qyr,Wyr,Uyr,qE,n4e,Hyr,Jyr,YK,Yyr,Kyr,Zyr,jE,s4e,eLr,oLr,KK,rLr,tLr,aLr,DE,l4e,nLr,sLr,ZK,lLr,iLr,dLr,GE,i4e,cLr,fLr,eZ,mLr,gLr,hLr,OE,d4e,pLr,uLr,oZ,_Lr,bLr,vLr,VE,c4e,FLr,TLr,rZ,MLr,ELr,CLr,XE,f4e,wLr,ALr,tZ,yLr,LLr,xLr,zE,m4e,$Lr,kLr,aZ,SLr,RLr,PLr,QE,g4e,BLr,ILr,nZ,NLr,qLr,jLr,WE,h4e,DLr,GLr,sZ,OLr,VLr,XLr,UE,p4e,zLr,QLr,lZ,WLr,ULr,HLr,HE,u4e,JLr,YLr,iZ,KLr,ZLr,e9r,JE,_4e,o9r,r9r,dZ,t9r,a9r,n9r,YE,b4e,s9r,l9r,cZ,i9r,d9r,c9r,KE,v4e,f9r,m9r,fZ,g9r,h9r,p9r,ZE,F4e,u9r,_9r,mZ,b9r,v9r,F9r,e4,ZHe,jc,o4,T4e,j$,T9r,M4e,M9r,eJe,ir,D$,E9r,Dc,C9r,gZ,w9r,A9r,hZ,y9r,L9r,x9r,G$,$9r,E4e,k9r,S9r,R9r,Vt,O$,P9r,C4e,B9r,I9r,Gc,N9r,w4e,q9r,j9r,pZ,D9r,G9r,O9r,r4,V9r,Nr,V$,X9r,A4e,z9r,Q9r,En,W9r,y4e,U9r,H9r,L4e,J9r,Y9r,x4e,K9r,Z9r,exr,Me,t4,$4e,oxr,rxr,uZ,txr,axr,nxr,a4,k4e,sxr,lxr,_Z,ixr,dxr,cxr,n4,S4e,fxr,mxr,bZ,gxr,hxr,pxr,s4,R4e,uxr,_xr,vZ,bxr,vxr,Fxr,l4,P4e,Txr,Mxr,FZ,Exr,Cxr,wxr,i4,B4e,Axr,yxr,TZ,Lxr,xxr,$xr,d4,I4e,kxr,Sxr,MZ,Rxr,Pxr,Bxr,c4,N4e,Ixr,Nxr,EZ,qxr,jxr,Dxr,f4,q4e,Gxr,Oxr,CZ,Vxr,Xxr,zxr,m4,j4e,Qxr,Wxr,wZ,Uxr,Hxr,Jxr,g4,D4e,Yxr,Kxr,AZ,Zxr,e$r,o$r,h4,G4e,r$r,t$r,yZ,a$r,n$r,s$r,p4,O4e,l$r,i$r,LZ,d$r,c$r,f$r,u4,oJe,Oc,_4,V4e,X$,m$r,X4e,g$r,rJe,dr,z$,h$r,Vc,p$r,xZ,u$r,_$r,$Z,b$r,v$r,F$r,Q$,T$r,z4e,M$r,E$r,C$r,Xt,W$,w$r,Q4e,A$r,y$r,Xc,L$r,W4e,x$r,$$r,kZ,k$r,S$r,R$r,b4,P$r,qr,U$,B$r,U4e,I$r,N$r,Cn,q$r,H4e,j$r,D$r,J4e,G$r,O$r,Y4e,V$r,X$r,z$r,Ve,v4,K4e,Q$r,W$r,SZ,U$r,H$r,J$r,F4,Z4e,Y$r,K$r,RZ,Z$r,ekr,okr,hl,eCe,rkr,tkr,PZ,akr,nkr,BZ,skr,lkr,ikr,T4,oCe,dkr,ckr,IZ,fkr,mkr,gkr,M4,rCe,hkr,pkr,NZ,ukr,_kr,bkr,E4,tCe,vkr,Fkr,qZ,Tkr,Mkr,Ekr,C4,aCe,Ckr,wkr,jZ,Akr,ykr,Lkr,w4,nCe,xkr,$kr,DZ,kkr,Skr,Rkr,A4,tJe,zc,y4,sCe,H$,Pkr,lCe,Bkr,aJe,cr,J$,Ikr,Qc,Nkr,GZ,qkr,jkr,OZ,Dkr,Gkr,Okr,Y$,Vkr,iCe,Xkr,zkr,Qkr,zt,K$,Wkr,dCe,Ukr,Hkr,Wc,Jkr,cCe,Ykr,Kkr,VZ,Zkr,eSr,oSr,L4,rSr,jr,Z$,tSr,fCe,aSr,nSr,wn,sSr,mCe,lSr,iSr,gCe,dSr,cSr,hCe,fSr,mSr,gSr,ek,x4,pCe,hSr,pSr,XZ,uSr,_Sr,bSr,$4,uCe,vSr,FSr,zZ,TSr,MSr,ESr,k4,nJe,Uc,S4,_Ce,ok,CSr,bCe,wSr,sJe,fr,rk,ASr,Hc,ySr,QZ,LSr,xSr,WZ,$Sr,kSr,SSr,tk,RSr,vCe,PSr,BSr,ISr,Qt,ak,NSr,FCe,qSr,jSr,Jc,DSr,TCe,GSr,OSr,UZ,VSr,XSr,zSr,R4,QSr,Dr,nk,WSr,MCe,USr,HSr,An,JSr,ECe,YSr,KSr,CCe,ZSr,eRr,wCe,oRr,rRr,tRr,de,P4,ACe,aRr,nRr,HZ,sRr,lRr,iRr,B4,yCe,dRr,cRr,JZ,fRr,mRr,gRr,I4,LCe,hRr,pRr,YZ,uRr,_Rr,bRr,N4,xCe,vRr,FRr,KZ,TRr,MRr,ERr,q4,$Ce,CRr,wRr,ZZ,ARr,yRr,LRr,j4,kCe,xRr,$Rr,eee,kRr,SRr,RRr,D4,SCe,PRr,BRr,oee,IRr,NRr,qRr,G4,RCe,jRr,DRr,ree,GRr,ORr,VRr,O4,PCe,XRr,zRr,tee,QRr,WRr,URr,V4,BCe,HRr,JRr,aee,YRr,KRr,ZRr,X4,ICe,ePr,oPr,nee,rPr,tPr,aPr,z4,NCe,nPr,sPr,see,lPr,iPr,dPr,Q4,qCe,cPr,fPr,lee,mPr,gPr,hPr,W4,jCe,pPr,uPr,iee,_Pr,bPr,vPr,U4,DCe,FPr,TPr,dee,MPr,EPr,CPr,H4,GCe,wPr,APr,cee,yPr,LPr,xPr,J4,OCe,$Pr,kPr,fee,SPr,RPr,PPr,Y4,VCe,BPr,IPr,mee,NPr,qPr,jPr,K4,XCe,DPr,GPr,gee,OPr,VPr,XPr,Z4,zCe,zPr,QPr,hee,WPr,UPr,HPr,eC,lJe,Yc,oC,QCe,sk,JPr,WCe,YPr,iJe,mr,lk,KPr,Kc,ZPr,pee,eBr,oBr,uee,rBr,tBr,aBr,ik,nBr,UCe,sBr,lBr,iBr,Wt,dk,dBr,HCe,cBr,fBr,Zc,mBr,JCe,gBr,hBr,_ee,pBr,uBr,_Br,rC,bBr,Gr,ck,vBr,YCe,FBr,TBr,yn,MBr,KCe,EBr,CBr,ZCe,wBr,ABr,e5e,yBr,LBr,xBr,Le,tC,o5e,$Br,kBr,bee,SBr,RBr,PBr,aC,r5e,BBr,IBr,vee,NBr,qBr,jBr,nC,t5e,DBr,GBr,Fee,OBr,VBr,XBr,sC,a5e,zBr,QBr,Tee,WBr,UBr,HBr,lC,n5e,JBr,YBr,Mee,KBr,ZBr,eIr,iC,s5e,oIr,rIr,Eee,tIr,aIr,nIr,dC,l5e,sIr,lIr,Cee,iIr,dIr,cIr,cC,i5e,fIr,mIr,wee,gIr,hIr,pIr,fC,d5e,uIr,_Ir,Aee,bIr,vIr,FIr,mC,c5e,TIr,MIr,yee,EIr,CIr,wIr,gC,dJe,ef,hC,f5e,fk,AIr,m5e,yIr,cJe,gr,mk,LIr,of,xIr,Lee,$Ir,kIr,xee,SIr,RIr,PIr,gk,BIr,g5e,IIr,NIr,qIr,Ut,hk,jIr,h5e,DIr,GIr,rf,OIr,p5e,VIr,XIr,$ee,zIr,QIr,WIr,pC,UIr,Or,pk,HIr,u5e,JIr,YIr,Ln,KIr,_5e,ZIr,eNr,b5e,oNr,rNr,v5e,tNr,aNr,nNr,te,uC,F5e,sNr,lNr,kee,iNr,dNr,cNr,_C,T5e,fNr,mNr,See,gNr,hNr,pNr,bC,M5e,uNr,_Nr,Ree,bNr,vNr,FNr,vC,E5e,TNr,MNr,Pee,ENr,CNr,wNr,FC,C5e,ANr,yNr,Bee,LNr,xNr,$Nr,TC,w5e,kNr,SNr,Iee,RNr,PNr,BNr,MC,A5e,INr,NNr,Nee,qNr,jNr,DNr,EC,y5e,GNr,ONr,qee,VNr,XNr,zNr,CC,L5e,QNr,WNr,jee,UNr,HNr,JNr,wC,x5e,YNr,KNr,Dee,ZNr,eqr,oqr,AC,$5e,rqr,tqr,Gee,aqr,nqr,sqr,yC,k5e,lqr,iqr,Oee,dqr,cqr,fqr,LC,S5e,mqr,gqr,Vee,hqr,pqr,uqr,xC,R5e,_qr,bqr,Xee,vqr,Fqr,Tqr,$C,P5e,Mqr,Eqr,zee,Cqr,wqr,Aqr,kC,B5e,yqr,Lqr,Qee,xqr,$qr,kqr,SC,I5e,Sqr,Rqr,Wee,Pqr,Bqr,Iqr,RC,N5e,Nqr,qqr,Uee,jqr,Dqr,Gqr,PC,q5e,Oqr,Vqr,Hee,Xqr,zqr,Qqr,BC,j5e,Wqr,Uqr,Jee,Hqr,Jqr,Yqr,IC,D5e,Kqr,Zqr,Yee,ejr,ojr,rjr,NC,G5e,tjr,ajr,Kee,njr,sjr,ljr,qC,O5e,ijr,djr,Zee,cjr,fjr,mjr,jC,V5e,gjr,hjr,eoe,pjr,ujr,_jr,DC,X5e,bjr,vjr,ooe,Fjr,Tjr,Mjr,GC,z5e,Ejr,Cjr,roe,wjr,Ajr,yjr,OC,fJe,tf,VC,Q5e,uk,Ljr,W5e,xjr,mJe,hr,_k,$jr,af,kjr,toe,Sjr,Rjr,aoe,Pjr,Bjr,Ijr,bk,Njr,U5e,qjr,jjr,Djr,Ht,vk,Gjr,H5e,Ojr,Vjr,nf,Xjr,J5e,zjr,Qjr,noe,Wjr,Ujr,Hjr,XC,Jjr,Vr,Fk,Yjr,Y5e,Kjr,Zjr,xn,eDr,K5e,oDr,rDr,Z5e,tDr,aDr,e0e,nDr,sDr,lDr,ve,zC,o0e,iDr,dDr,soe,cDr,fDr,mDr,QC,r0e,gDr,hDr,loe,pDr,uDr,_Dr,WC,t0e,bDr,vDr,ioe,FDr,TDr,MDr,UC,a0e,EDr,CDr,doe,wDr,ADr,yDr,HC,n0e,LDr,xDr,coe,$Dr,kDr,SDr,JC,s0e,RDr,PDr,foe,BDr,IDr,NDr,YC,l0e,qDr,jDr,moe,DDr,GDr,ODr,KC,i0e,VDr,XDr,goe,zDr,QDr,WDr,ZC,d0e,UDr,HDr,hoe,JDr,YDr,KDr,e5,c0e,ZDr,eGr,poe,oGr,rGr,tGr,o5,f0e,aGr,nGr,uoe,sGr,lGr,iGr,r5,m0e,dGr,cGr,_oe,fGr,mGr,gGr,t5,g0e,hGr,pGr,boe,uGr,_Gr,bGr,a5,h0e,vGr,FGr,voe,TGr,MGr,EGr,n5,p0e,CGr,wGr,Foe,AGr,yGr,LGr,s5,u0e,xGr,$Gr,Toe,kGr,SGr,RGr,l5,_0e,PGr,BGr,Moe,IGr,NGr,qGr,i5,gJe,sf,d5,b0e,Tk,jGr,v0e,DGr,hJe,pr,Mk,GGr,lf,OGr,Eoe,VGr,XGr,Coe,zGr,QGr,WGr,Ek,UGr,F0e,HGr,JGr,YGr,Jt,Ck,KGr,T0e,ZGr,eOr,df,oOr,M0e,rOr,tOr,woe,aOr,nOr,sOr,c5,lOr,Xr,wk,iOr,E0e,dOr,cOr,$n,fOr,C0e,mOr,gOr,w0e,hOr,pOr,A0e,uOr,_Or,bOr,Ak,f5,y0e,vOr,FOr,Aoe,TOr,MOr,EOr,m5,L0e,COr,wOr,yoe,AOr,yOr,LOr,g5,pJe,cf,h5,x0e,yk,xOr,$0e,$Or,uJe,ur,Lk,kOr,ff,SOr,Loe,ROr,POr,xoe,BOr,IOr,NOr,xk,qOr,k0e,jOr,DOr,GOr,Yt,$k,OOr,S0e,VOr,XOr,mf,zOr,R0e,QOr,WOr,$oe,UOr,HOr,JOr,p5,YOr,zr,kk,KOr,P0e,ZOr,eVr,kn,oVr,B0e,rVr,tVr,I0e,aVr,nVr,N0e,sVr,lVr,iVr,q0e,u5,j0e,dVr,cVr,koe,fVr,mVr,gVr,_5,_Je,gf,b5,D0e,Sk,hVr,G0e,pVr,bJe,_r,Rk,uVr,hf,_Vr,Soe,bVr,vVr,Roe,FVr,TVr,MVr,Pk,EVr,O0e,CVr,wVr,AVr,Kt,Bk,yVr,V0e,LVr,xVr,pf,$Vr,X0e,kVr,SVr,Poe,RVr,PVr,BVr,v5,IVr,Qr,Ik,NVr,z0e,qVr,jVr,Sn,DVr,Q0e,GVr,OVr,W0e,VVr,XVr,U0e,zVr,QVr,WVr,ce,F5,H0e,UVr,HVr,Boe,JVr,YVr,KVr,T5,J0e,ZVr,eXr,Ioe,oXr,rXr,tXr,M5,Y0e,aXr,nXr,Noe,sXr,lXr,iXr,E5,K0e,dXr,cXr,qoe,fXr,mXr,gXr,C5,Z0e,hXr,pXr,joe,uXr,_Xr,bXr,w5,ewe,vXr,FXr,Doe,TXr,MXr,EXr,A5,owe,CXr,wXr,Goe,AXr,yXr,LXr,y5,rwe,xXr,$Xr,Ooe,kXr,SXr,RXr,L5,twe,PXr,BXr,Voe,IXr,NXr,qXr,x5,awe,jXr,DXr,Xoe,GXr,OXr,VXr,$5,nwe,XXr,zXr,zoe,QXr,WXr,UXr,k5,swe,HXr,JXr,Qoe,YXr,KXr,ZXr,S5,lwe,ezr,ozr,Woe,rzr,tzr,azr,R5,iwe,nzr,szr,Uoe,lzr,izr,dzr,P5,dwe,czr,fzr,Hoe,mzr,gzr,hzr,B5,cwe,pzr,uzr,Joe,_zr,bzr,vzr,I5,fwe,Fzr,Tzr,Yoe,Mzr,Ezr,Czr,N5,mwe,wzr,Azr,Koe,yzr,Lzr,xzr,q5,gwe,$zr,kzr,Zoe,Szr,Rzr,Pzr,j5,hwe,Bzr,Izr,ere,Nzr,qzr,jzr,D5,vJe,uf,G5,pwe,Nk,Dzr,uwe,Gzr,FJe,br,qk,Ozr,_f,Vzr,ore,Xzr,zzr,rre,Qzr,Wzr,Uzr,jk,Hzr,_we,Jzr,Yzr,Kzr,Zt,Dk,Zzr,bwe,eQr,oQr,bf,rQr,vwe,tQr,aQr,tre,nQr,sQr,lQr,O5,iQr,Wr,Gk,dQr,Fwe,cQr,fQr,Rn,mQr,Twe,gQr,hQr,Mwe,pQr,uQr,Ewe,_Qr,bQr,vQr,fe,V5,Cwe,FQr,TQr,are,MQr,EQr,CQr,X5,wwe,wQr,AQr,nre,yQr,LQr,xQr,z5,Awe,$Qr,kQr,sre,SQr,RQr,PQr,Q5,ywe,BQr,IQr,lre,NQr,qQr,jQr,W5,Lwe,DQr,GQr,ire,OQr,VQr,XQr,U5,xwe,zQr,QQr,dre,WQr,UQr,HQr,H5,$we,JQr,YQr,cre,KQr,ZQr,eWr,J5,kwe,oWr,rWr,fre,tWr,aWr,nWr,Y5,Swe,sWr,lWr,mre,iWr,dWr,cWr,K5,Rwe,fWr,mWr,gre,gWr,hWr,pWr,Z5,Pwe,uWr,_Wr,hre,bWr,vWr,FWr,e0,Bwe,TWr,MWr,pre,EWr,CWr,wWr,o0,Iwe,AWr,yWr,ure,LWr,xWr,$Wr,r0,Nwe,kWr,SWr,_re,RWr,PWr,BWr,t0,qwe,IWr,NWr,bre,qWr,jWr,DWr,a0,jwe,GWr,OWr,vre,VWr,XWr,zWr,n0,Dwe,QWr,WWr,Fre,UWr,HWr,JWr,s0,Gwe,YWr,KWr,Tre,ZWr,eUr,oUr,l0,Owe,rUr,tUr,Mre,aUr,nUr,sUr,i0,Vwe,lUr,iUr,Ere,dUr,cUr,fUr,d0,TJe,vf,c0,Xwe,Ok,mUr,zwe,gUr,MJe,vr,Vk,hUr,Ff,pUr,Cre,uUr,_Ur,wre,bUr,vUr,FUr,Xk,TUr,Qwe,MUr,EUr,CUr,ea,zk,wUr,Wwe,AUr,yUr,Tf,LUr,Uwe,xUr,$Ur,Are,kUr,SUr,RUr,f0,PUr,Ur,Qk,BUr,Hwe,IUr,NUr,Pn,qUr,Jwe,jUr,DUr,Ywe,GUr,OUr,Kwe,VUr,XUr,zUr,Zwe,m0,eAe,QUr,WUr,yre,UUr,HUr,JUr,g0,EJe,Mf,h0,oAe,Wk,YUr,rAe,KUr,CJe,Fr,Uk,ZUr,Ef,eHr,Lre,oHr,rHr,xre,tHr,aHr,nHr,Hk,sHr,tAe,lHr,iHr,dHr,oa,Jk,cHr,aAe,fHr,mHr,Cf,gHr,nAe,hHr,pHr,$re,uHr,_Hr,bHr,p0,vHr,Hr,Yk,FHr,sAe,THr,MHr,Bn,EHr,lAe,CHr,wHr,iAe,AHr,yHr,dAe,LHr,xHr,$Hr,cAe,u0,fAe,kHr,SHr,kre,RHr,PHr,BHr,_0,wJe,wf,b0,mAe,Kk,IHr,gAe,NHr,AJe,Tr,Zk,qHr,Af,jHr,Sre,DHr,GHr,Rre,OHr,VHr,XHr,eS,zHr,hAe,QHr,WHr,UHr,ra,oS,HHr,pAe,JHr,YHr,yf,KHr,uAe,ZHr,eJr,Pre,oJr,rJr,tJr,v0,aJr,Jr,rS,nJr,_Ae,sJr,lJr,In,iJr,bAe,dJr,cJr,vAe,fJr,mJr,FAe,gJr,hJr,pJr,re,F0,TAe,uJr,_Jr,Bre,bJr,vJr,FJr,T0,MAe,TJr,MJr,Ire,EJr,CJr,wJr,M0,EAe,AJr,yJr,Nre,LJr,xJr,$Jr,E0,CAe,kJr,SJr,qre,RJr,PJr,BJr,C0,wAe,IJr,NJr,jre,qJr,jJr,DJr,w0,AAe,GJr,OJr,Dre,VJr,XJr,zJr,A0,yAe,QJr,WJr,Gre,UJr,HJr,JJr,y0,LAe,YJr,KJr,Ore,ZJr,eYr,oYr,L0,xAe,rYr,tYr,Vre,aYr,nYr,sYr,x0,$Ae,lYr,iYr,Xre,dYr,cYr,fYr,$0,kAe,mYr,gYr,zre,hYr,pYr,uYr,k0,SAe,_Yr,bYr,Qre,vYr,FYr,TYr,S0,RAe,MYr,EYr,Wre,CYr,wYr,AYr,R0,PAe,yYr,LYr,Ure,xYr,$Yr,kYr,P0,BAe,SYr,RYr,Hre,PYr,BYr,IYr,B0,IAe,NYr,qYr,Jre,jYr,DYr,GYr,I0,NAe,OYr,VYr,Yre,XYr,zYr,QYr,N0,qAe,WYr,UYr,Kre,HYr,JYr,YYr,q0,jAe,KYr,ZYr,Zre,eKr,oKr,rKr,j0,DAe,tKr,aKr,ete,nKr,sKr,lKr,D0,GAe,iKr,dKr,ote,cKr,fKr,mKr,G0,OAe,gKr,hKr,rte,pKr,uKr,_Kr,O0,VAe,bKr,vKr,tte,FKr,TKr,MKr,V0,XAe,EKr,CKr,ate,wKr,AKr,yKr,X0,zAe,LKr,xKr,nte,$Kr,kKr,SKr,z0,QAe,RKr,PKr,ste,BKr,IKr,NKr,Q0,WAe,qKr,jKr,lte,DKr,GKr,OKr,W0,yJe,Lf,U0,UAe,tS,VKr,HAe,XKr,LJe,Mr,aS,zKr,xf,QKr,ite,WKr,UKr,dte,HKr,JKr,YKr,nS,KKr,JAe,ZKr,eZr,oZr,ta,sS,rZr,YAe,tZr,aZr,$f,nZr,KAe,sZr,lZr,cte,iZr,dZr,cZr,H0,fZr,Yr,lS,mZr,ZAe,gZr,hZr,Nn,pZr,e6e,uZr,_Zr,o6e,bZr,vZr,r6e,FZr,TZr,MZr,xe,J0,t6e,EZr,CZr,fte,wZr,AZr,yZr,Y0,a6e,LZr,xZr,mte,$Zr,kZr,SZr,K0,n6e,RZr,PZr,gte,BZr,IZr,NZr,Z0,s6e,qZr,jZr,hte,DZr,GZr,OZr,ew,l6e,VZr,XZr,pte,zZr,QZr,WZr,ow,i6e,UZr,HZr,ute,JZr,YZr,KZr,rw,d6e,ZZr,eet,_te,oet,ret,tet,tw,c6e,aet,net,bte,set,iet,det,aw,f6e,cet,fet,vte,met,get,het,nw,m6e,pet,uet,Fte,_et,bet,vet,sw,xJe,kf,lw,g6e,iS,Fet,h6e,Tet,$Je,Er,dS,Met,Sf,Eet,Tte,Cet,wet,Mte,Aet,yet,Let,cS,xet,p6e,$et,ket,Set,aa,fS,Ret,u6e,Pet,Bet,Rf,Iet,_6e,Net,qet,Ete,jet,Det,Get,iw,Oet,Kr,mS,Vet,b6e,Xet,zet,qn,Qet,v6e,Wet,Uet,F6e,Het,Jet,T6e,Yet,Ket,Zet,Ee,dw,M6e,eot,oot,Cte,rot,tot,aot,cw,E6e,not,sot,wte,lot,iot,dot,fw,C6e,cot,fot,Ate,mot,got,hot,mw,w6e,pot,uot,yte,_ot,bot,vot,gw,A6e,Fot,Tot,Lte,Mot,Eot,Cot,hw,y6e,wot,Aot,xte,yot,Lot,xot,pw,L6e,$ot,kot,$te,Sot,Rot,Pot,uw,x6e,Bot,Iot,kte,Not,qot,jot,_w,$6e,Dot,Got,Ste,Oot,Vot,Xot,bw,k6e,zot,Qot,Rte,Wot,Uot,Hot,vw,S6e,Jot,Yot,Pte,Kot,Zot,ert,Fw,R6e,ort,rrt,Bte,trt,art,nrt,Tw,P6e,srt,lrt,Ite,irt,drt,crt,Mw,kJe,Pf,Ew,B6e,gS,frt,I6e,mrt,SJe,Cr,hS,grt,Bf,hrt,Nte,prt,urt,qte,_rt,brt,vrt,pS,Frt,N6e,Trt,Mrt,Ert,na,uS,Crt,q6e,wrt,Art,If,yrt,j6e,Lrt,xrt,jte,$rt,krt,Srt,Cw,Rrt,Zr,_S,Prt,D6e,Brt,Irt,jn,Nrt,G6e,qrt,jrt,O6e,Drt,Grt,V6e,Ort,Vrt,Xrt,$e,ww,X6e,zrt,Qrt,Dte,Wrt,Urt,Hrt,Aw,z6e,Jrt,Yrt,Gte,Krt,Zrt,ett,yw,Q6e,ott,rtt,Ote,ttt,att,ntt,Lw,W6e,stt,ltt,Vte,itt,dtt,ctt,xw,U6e,ftt,mtt,Xte,gtt,htt,ptt,$w,H6e,utt,_tt,zte,btt,vtt,Ftt,kw,J6e,Ttt,Mtt,Qte,Ett,Ctt,wtt,Sw,Y6e,Att,ytt,Wte,Ltt,xtt,$tt,Rw,K6e,ktt,Stt,Ute,Rtt,Ptt,Btt,Pw,Z6e,Itt,Ntt,Hte,qtt,jtt,Dtt,Bw,RJe,Nf,Iw,eye,bS,Gtt,oye,Ott,PJe,wr,vS,Vtt,qf,Xtt,Jte,ztt,Qtt,Yte,Wtt,Utt,Htt,FS,Jtt,rye,Ytt,Ktt,Ztt,sa,TS,eat,tye,oat,rat,jf,tat,aye,aat,nat,Kte,sat,lat,iat,Nw,dat,et,MS,cat,nye,fat,mat,Dn,gat,sye,hat,pat,lye,uat,_at,iye,bat,vat,Fat,ke,qw,dye,Tat,Mat,Zte,Eat,Cat,wat,jw,cye,Aat,yat,eae,Lat,xat,$at,Dw,fye,kat,Sat,oae,Rat,Pat,Bat,Gw,mye,Iat,Nat,rae,qat,jat,Dat,Ow,gye,Gat,Oat,tae,Vat,Xat,zat,Vw,hye,Qat,Wat,aae,Uat,Hat,Jat,Xw,pye,Yat,Kat,nae,Zat,ent,ont,zw,uye,rnt,tnt,sae,ant,nnt,snt,Qw,_ye,lnt,int,lae,dnt,cnt,fnt,Ww,bye,mnt,gnt,iae,hnt,pnt,unt,Uw,BJe,Df,Hw,vye,ES,_nt,Fye,bnt,IJe,Ar,CS,vnt,Gf,Fnt,dae,Tnt,Mnt,cae,Ent,Cnt,wnt,wS,Ant,Tye,ynt,Lnt,xnt,la,AS,$nt,Mye,knt,Snt,Of,Rnt,Eye,Pnt,Bnt,fae,Int,Nnt,qnt,Jw,jnt,ot,yS,Dnt,Cye,Gnt,Ont,Gn,Vnt,wye,Xnt,znt,Aye,Qnt,Wnt,yye,Unt,Hnt,Jnt,Se,Yw,Lye,Ynt,Knt,mae,Znt,est,ost,Kw,xye,rst,tst,gae,ast,nst,sst,Zw,$ye,lst,ist,hae,dst,cst,fst,eA,kye,mst,gst,pae,hst,pst,ust,oA,Sye,_st,bst,uae,vst,Fst,Tst,rA,Rye,Mst,Est,_ae,Cst,wst,Ast,tA,Pye,yst,Lst,bae,xst,$st,kst,aA,Bye,Sst,Rst,vae,Pst,Bst,Ist,nA,Iye,Nst,qst,Fae,jst,Dst,Gst,sA,Nye,Ost,Vst,Tae,Xst,zst,Qst,lA,NJe,Vf,iA,qye,LS,Wst,jye,Ust,qJe,yr,xS,Hst,Xf,Jst,Mae,Yst,Kst,Eae,Zst,elt,olt,$S,rlt,Dye,tlt,alt,nlt,ia,kS,slt,Gye,llt,ilt,zf,dlt,Oye,clt,flt,Cae,mlt,glt,hlt,dA,plt,rt,SS,ult,Vye,_lt,blt,On,vlt,Xye,Flt,Tlt,zye,Mlt,Elt,Qye,Clt,wlt,Alt,Re,cA,Wye,ylt,Llt,wae,xlt,$lt,klt,fA,Uye,Slt,Rlt,Aae,Plt,Blt,Ilt,mA,Hye,Nlt,qlt,yae,jlt,Dlt,Glt,gA,Jye,Olt,Vlt,Lae,Xlt,zlt,Qlt,hA,Yye,Wlt,Ult,xae,Hlt,Jlt,Ylt,pA,Kye,Klt,Zlt,$ae,eit,oit,rit,uA,Zye,tit,ait,kae,nit,sit,lit,_A,eLe,iit,dit,Sae,cit,fit,mit,bA,oLe,git,hit,Rae,pit,uit,_it,vA,rLe,bit,vit,Pae,Fit,Tit,Mit,FA,jJe,Qf,TA,tLe,RS,Eit,aLe,Cit,DJe,Lr,PS,wit,Wf,Ait,Bae,yit,Lit,Iae,xit,$it,kit,BS,Sit,nLe,Rit,Pit,Bit,da,IS,Iit,sLe,Nit,qit,Uf,jit,lLe,Dit,Git,Nae,Oit,Vit,Xit,MA,zit,tt,NS,Qit,iLe,Wit,Uit,Vn,Hit,dLe,Jit,Yit,cLe,Kit,Zit,fLe,edt,odt,rdt,Xe,EA,mLe,tdt,adt,qae,ndt,sdt,ldt,CA,gLe,idt,ddt,jae,cdt,fdt,mdt,wA,hLe,gdt,hdt,Dae,pdt,udt,_dt,AA,pLe,bdt,vdt,Gae,Fdt,Tdt,Mdt,yA,uLe,Edt,Cdt,Oae,wdt,Adt,ydt,LA,_Le,Ldt,xdt,Vae,$dt,kdt,Sdt,xA,bLe,Rdt,Pdt,Xae,Bdt,Idt,Ndt,$A,vLe,qdt,jdt,zae,Ddt,Gdt,Odt,kA,GJe,Hf,SA,FLe,qS,Vdt,TLe,Xdt,OJe,xr,jS,zdt,Jf,Qdt,Qae,Wdt,Udt,Wae,Hdt,Jdt,Ydt,DS,Kdt,MLe,Zdt,ect,oct,ca,GS,rct,ELe,tct,act,Yf,nct,CLe,sct,lct,Uae,ict,dct,cct,RA,fct,at,OS,mct,wLe,gct,hct,Xn,pct,ALe,uct,_ct,yLe,bct,vct,LLe,Fct,Tct,Mct,ze,PA,xLe,Ect,Cct,Hae,wct,Act,yct,BA,$Le,Lct,xct,Jae,$ct,kct,Sct,IA,kLe,Rct,Pct,Yae,Bct,Ict,Nct,NA,SLe,qct,jct,Kae,Dct,Gct,Oct,qA,RLe,Vct,Xct,Zae,zct,Qct,Wct,jA,PLe,Uct,Hct,ene,Jct,Yct,Kct,DA,BLe,Zct,eft,one,oft,rft,tft,GA,ILe,aft,nft,rne,sft,lft,ift,OA,VJe,Kf,VA,NLe,VS,dft,qLe,cft,XJe,$r,XS,fft,Zf,mft,tne,gft,hft,ane,pft,uft,_ft,zS,bft,jLe,vft,Fft,Tft,fa,QS,Mft,DLe,Eft,Cft,em,wft,GLe,Aft,yft,nne,Lft,xft,$ft,XA,kft,nt,WS,Sft,OLe,Rft,Pft,zn,Bft,VLe,Ift,Nft,XLe,qft,jft,zLe,Dft,Gft,Oft,QLe,zA,WLe,Vft,Xft,sne,zft,Qft,Wft,QA,zJe,om,WA,ULe,US,Uft,HLe,Hft,QJe,kr,HS,Jft,rm,Yft,lne,Kft,Zft,ine,emt,omt,rmt,JS,tmt,JLe,amt,nmt,smt,ma,YS,lmt,YLe,imt,dmt,tm,cmt,KLe,fmt,mmt,dne,gmt,hmt,pmt,UA,umt,st,KS,_mt,ZLe,bmt,vmt,Qn,Fmt,e9e,Tmt,Mmt,o9e,Emt,Cmt,r9e,wmt,Amt,ymt,ZS,HA,t9e,Lmt,xmt,cne,$mt,kmt,Smt,JA,a9e,Rmt,Pmt,fne,Bmt,Imt,Nmt,YA,WJe,am,KA,n9e,eR,qmt,s9e,jmt,UJe,Sr,oR,Dmt,nm,Gmt,mne,Omt,Vmt,gne,Xmt,zmt,Qmt,rR,Wmt,l9e,Umt,Hmt,Jmt,ga,tR,Ymt,i9e,Kmt,Zmt,sm,egt,d9e,ogt,rgt,hne,tgt,agt,ngt,ZA,sgt,lt,aR,lgt,c9e,igt,dgt,Wn,cgt,f9e,fgt,mgt,m9e,ggt,hgt,g9e,pgt,ugt,_gt,h9e,e6,p9e,bgt,vgt,pne,Fgt,Tgt,Mgt,o6,HJe;return d=new oe({}),Va=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),RL=new oe({}),PL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),pm=new Egt({props:{warning:!0,$$slots:{default:[sna]},$$scope:{ctx:$}}}),BL=new oe({}),IL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/configuration_auto.py#L625"}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/configuration_auto.py#L648"}}),kh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),DL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/configuration_auto.py#L771"}}),GL=new oe({}),OL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/tokenization_auto.py#L418"}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_18732/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/tokenization_auto.py#L432"}}),gp=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),QL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/tokenization_auto.py#L633"}}),WL=new oe({}),UL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_18732/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),eu=new Egt({props:{$$slots:{default:[dna]},$$scope:{ctx:$}}}),ou=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),KL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),ZL=new oe({}),e9=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/processing_auto.py#L91"}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/processing_auto.py#L105"}}),Cu=new Egt({props:{$$slots:{default:[fna]},$$scope:{ctx:$}}}),wu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),a9=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/processing_auto.py#L258"}}),n9=new oe({}),s9=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L825"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),Lu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),N2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),c9=new oe({}),f9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L832"}}),g9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),P1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),p9=new oe({}),u9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L847"}}),b9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),I1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),F9=new oe({}),T9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L854"}}),E9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),w9=new oe({}),A9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L861"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),$9=new oe({}),k9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L870"}}),R9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),Nv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),B9=new oe({}),I9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L926"}}),q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),D9=new oe({}),G9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L933"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),z9=new oe({}),Q9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L919"}}),U9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L879"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),_7=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kna]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Sna]},$$scope:{ctx:$}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L886"}}),ax=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Rna]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Pna]},$$scope:{ctx:$}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L908"}}),dx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Bna]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Ina]},$$scope:{ctx:$}}}),fx=new oe({}),mx=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L942"}}),hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Nna]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[qna]},$$scope:{ctx:$}}}),ux=new oe({}),_x=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L981"}}),vx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[jna]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Dna]},$$scope:{ctx:$}}}),Tx=new oe({}),Mx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L988"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Gna]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Ona]},$$scope:{ctx:$}}}),Ax=new oe({}),yx=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L897"}}),xx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Vna]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Xna]},$$scope:{ctx:$}}}),kx=new oe({}),Sx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L995"}}),Px=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zna]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),m8=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Qna]},$$scope:{ctx:$}}}),Ix=new oe({}),Nx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L1018"}}),jx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),h8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Wna]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),T8=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Una]},$$scope:{ctx:$}}}),Gx=new oe({}),Ox=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L1002"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Hna]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),B8=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jna]},$$scope:{ctx:$}}}),Qx=new oe({}),Wx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L1009"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),N8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Yna]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),G8=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kna]},$$scope:{ctx:$}}}),Kx=new oe({}),Zx=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L1027"}}),o$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zna]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[esa]},$$scope:{ctx:$}}}),t$=new oe({}),a$=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L1034"}}),s$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),K8=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[osa]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rsa]},$$scope:{ctx:$}}}),i$=new oe({}),d$=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L974"}}),f$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tsa]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[asa]},$$scope:{ctx:$}}}),h$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L949"}}),_$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nsa]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ssa]},$$scope:{ctx:$}}}),v$=new oe({}),F$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L956"}}),M$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lsa]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[isa]},$$scope:{ctx:$}}}),C$=new oe({}),w$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_auto.py#L965"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dsa]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[csa]},$$scope:{ctx:$}}}),x$=new oe({}),$$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),S$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fsa]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[msa]},$$scope:{ctx:$}}}),P$=new oe({}),B$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),N$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gsa]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hsa]},$$scope:{ctx:$}}}),j$=new oe({}),D$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),O$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[psa]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[usa]},$$scope:{ctx:$}}}),X$=new oe({}),z$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),W$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/pr_18732/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),b4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_sa]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bsa]},$$scope:{ctx:$}}}),H$=new oe({}),J$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L463"}}),K$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[vsa]},$$scope:{ctx:$}}}),Z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Fsa]},$$scope:{ctx:$}}}),ok=new oe({}),rk=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),ak=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Tsa]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Msa]},$$scope:{ctx:$}}}),sk=new oe({}),lk=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),dk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Esa]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Csa]},$$scope:{ctx:$}}}),fk=new oe({}),mk=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),hk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wsa]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Asa]},$$scope:{ctx:$}}}),uk=new oe({}),_k=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),vk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ysa]},$$scope:{ctx:$}}}),Fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),i5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Lsa]},$$scope:{ctx:$}}}),Tk=new oe({}),Mk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Ck=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xsa]},$$scope:{ctx:$}}}),wk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$sa]},$$scope:{ctx:$}}}),yk=new oe({}),Lk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),$k=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ksa]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ssa]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Rsa]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Psa]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Bsa]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Isa]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),zk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Nsa]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qsa]},$$scope:{ctx:$}}}),Wk=new oe({}),Uk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jsa]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Dsa]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),oS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Gsa]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Osa]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),sS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Vsa]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Xsa]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),fS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[zsa]},$$scope:{ctx:$}}}),mS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Qsa]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),uS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Wsa]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Usa]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),TS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Hsa]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Jsa]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),AS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ysa]},$$scope:{ctx:$}}}),yS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ksa]},$$scope:{ctx:$}}}),LS=new oe({}),xS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),kS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Zsa]},$$scope:{ctx:$}}}),SS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),FA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ela]},$$scope:{ctx:$}}}),RS=new oe({}),PS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),IS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),MA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ola]},$$scope:{ctx:$}}}),NS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rla]},$$scope:{ctx:$}}}),qS=new oe({}),jS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),GS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[tla]},$$scope:{ctx:$}}}),OS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ala]},$$scope:{ctx:$}}}),VS=new oe({}),XS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),QS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[nla]},$$scope:{ctx:$}}}),WS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[sla]},$$scope:{ctx:$}}}),US=new oe({}),HS=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),YS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[lla]},$$scope:{ctx:$}}}),KS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ila]},$$scope:{ctx:$}}}),eR=new oe({}),oR=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),tR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L389"}}),ZA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[dla]},$$scope:{ctx:$}}}),aR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_18732/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_18732/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_18732/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cla]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),Ui=o("Auto Classes"),cm=l(),gt=a("p"),Hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ji=a("code"),xL=o("from_pretrained()"),fm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Yi=o("Instantiating one of "),Hn=a("a"),$L=o("AutoConfig"),Jn=o(", "),Yn=a("a"),kL=o("AutoModel"),Ki=o(`, and
`),Kn=a("a"),SL=o("AutoTokenizer"),Zi=o(" will directly create a class of the relevant architecture. For instance"),mm=l(),F(Va.$$.fragment),Ue=l(),Ae=a("p"),LP=o("will create a model that is an instance of "),ed=a("a"),xP=o("BertModel"),$P=o("."),Lo=l(),Xa=a("p"),kP=o("There is one class of "),gm=a("code"),SP=o("AutoModel"),mZe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qUe=l(),od=a("h2"),hm=a("a"),ule=a("span"),F(RL.$$.fragment),gZe=l(),_le=a("span"),hZe=o("Extending the Auto Classes"),jUe=l(),Zn=a("p"),pZe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ble=a("code"),uZe=o("NewModel"),_Ze=o(", make sure you have a "),vle=a("code"),bZe=o("NewModelConfig"),vZe=o(` then you can add those to the auto
classes like this:`),DUe=l(),F(PL.$$.fragment),GUe=l(),RP=a("p"),FZe=o("You will then be able to use the auto classes like you would usually do!"),OUe=l(),F(pm.$$.fragment),VUe=l(),rd=a("h2"),um=a("a"),Fle=a("span"),F(BL.$$.fragment),TZe=l(),Tle=a("span"),MZe=o("AutoConfig"),XUe=l(),xo=a("div"),F(IL.$$.fragment),EZe=l(),NL=a("p"),CZe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),PP=a("a"),wZe=o("from_pretrained()"),AZe=o(" class method."),yZe=l(),qL=a("p"),LZe=o("This class cannot be instantiated directly using "),Mle=a("code"),xZe=o("__init__()"),$Ze=o(" (throws an error)."),kZe=l(),Rr=a("div"),F(jL.$$.fragment),SZe=l(),Ele=a("p"),RZe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),PZe=l(),td=a("p"),BZe=o("The configuration class to instantiate is selected based on the "),Cle=a("code"),IZe=o("model_type"),NZe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),wle=a("code"),qZe=o("pretrained_model_name_or_path"),jZe=o(":"),DZe=l(),A=a("ul"),_m=a("li"),Ale=a("strong"),GZe=o("albert"),OZe=o(" \u2014 "),BP=a("a"),VZe=o("AlbertConfig"),XZe=o(" (ALBERT model)"),zZe=l(),bm=a("li"),yle=a("strong"),QZe=o("bart"),WZe=o(" \u2014 "),IP=a("a"),UZe=o("BartConfig"),HZe=o(" (BART model)"),JZe=l(),vm=a("li"),Lle=a("strong"),YZe=o("beit"),KZe=o(" \u2014 "),NP=a("a"),ZZe=o("BeitConfig"),eeo=o(" (BEiT model)"),oeo=l(),Fm=a("li"),xle=a("strong"),reo=o("bert"),teo=o(" \u2014 "),qP=a("a"),aeo=o("BertConfig"),neo=o(" (BERT model)"),seo=l(),Tm=a("li"),$le=a("strong"),leo=o("bert-generation"),ieo=o(" \u2014 "),jP=a("a"),deo=o("BertGenerationConfig"),ceo=o(" (Bert Generation model)"),feo=l(),Mm=a("li"),kle=a("strong"),meo=o("big_bird"),geo=o(" \u2014 "),DP=a("a"),heo=o("BigBirdConfig"),peo=o(" (BigBird model)"),ueo=l(),Em=a("li"),Sle=a("strong"),_eo=o("bigbird_pegasus"),beo=o(" \u2014 "),GP=a("a"),veo=o("BigBirdPegasusConfig"),Feo=o(" (BigBird-Pegasus model)"),Teo=l(),Cm=a("li"),Rle=a("strong"),Meo=o("blenderbot"),Eeo=o(" \u2014 "),OP=a("a"),Ceo=o("BlenderbotConfig"),weo=o(" (Blenderbot model)"),Aeo=l(),wm=a("li"),Ple=a("strong"),yeo=o("blenderbot-small"),Leo=o(" \u2014 "),VP=a("a"),xeo=o("BlenderbotSmallConfig"),$eo=o(" (BlenderbotSmall model)"),keo=l(),Am=a("li"),Ble=a("strong"),Seo=o("bloom"),Reo=o(" \u2014 "),XP=a("a"),Peo=o("BloomConfig"),Beo=o(" (BLOOM model)"),Ieo=l(),ym=a("li"),Ile=a("strong"),Neo=o("camembert"),qeo=o(" \u2014 "),zP=a("a"),jeo=o("CamembertConfig"),Deo=o(" (CamemBERT model)"),Geo=l(),Lm=a("li"),Nle=a("strong"),Oeo=o("canine"),Veo=o(" \u2014 "),QP=a("a"),Xeo=o("CanineConfig"),zeo=o(" (CANINE model)"),Qeo=l(),xm=a("li"),qle=a("strong"),Weo=o("clip"),Ueo=o(" \u2014 "),WP=a("a"),Heo=o("CLIPConfig"),Jeo=o(" (CLIP model)"),Yeo=l(),$m=a("li"),jle=a("strong"),Keo=o("codegen"),Zeo=o(" \u2014 "),UP=a("a"),eoo=o("CodeGenConfig"),ooo=o(" (CodeGen model)"),roo=l(),km=a("li"),Dle=a("strong"),too=o("convbert"),aoo=o(" \u2014 "),HP=a("a"),noo=o("ConvBertConfig"),soo=o(" (ConvBERT model)"),loo=l(),Sm=a("li"),Gle=a("strong"),ioo=o("convnext"),doo=o(" \u2014 "),JP=a("a"),coo=o("ConvNextConfig"),foo=o(" (ConvNeXT model)"),moo=l(),Rm=a("li"),Ole=a("strong"),goo=o("ctrl"),hoo=o(" \u2014 "),YP=a("a"),poo=o("CTRLConfig"),uoo=o(" (CTRL model)"),_oo=l(),Pm=a("li"),Vle=a("strong"),boo=o("cvt"),voo=o(" \u2014 "),KP=a("a"),Foo=o("CvtConfig"),Too=o(" (CvT model)"),Moo=l(),Bm=a("li"),Xle=a("strong"),Eoo=o("data2vec-audio"),Coo=o(" \u2014 "),ZP=a("a"),woo=o("Data2VecAudioConfig"),Aoo=o(" (Data2VecAudio model)"),yoo=l(),Im=a("li"),zle=a("strong"),Loo=o("data2vec-text"),xoo=o(" \u2014 "),eB=a("a"),$oo=o("Data2VecTextConfig"),koo=o(" (Data2VecText model)"),Soo=l(),Nm=a("li"),Qle=a("strong"),Roo=o("data2vec-vision"),Poo=o(" \u2014 "),oB=a("a"),Boo=o("Data2VecVisionConfig"),Ioo=o(" (Data2VecVision model)"),Noo=l(),qm=a("li"),Wle=a("strong"),qoo=o("deberta"),joo=o(" \u2014 "),rB=a("a"),Doo=o("DebertaConfig"),Goo=o(" (DeBERTa model)"),Ooo=l(),jm=a("li"),Ule=a("strong"),Voo=o("deberta-v2"),Xoo=o(" \u2014 "),tB=a("a"),zoo=o("DebertaV2Config"),Qoo=o(" (DeBERTa-v2 model)"),Woo=l(),Dm=a("li"),Hle=a("strong"),Uoo=o("decision_transformer"),Hoo=o(" \u2014 "),aB=a("a"),Joo=o("DecisionTransformerConfig"),Yoo=o(" (Decision Transformer model)"),Koo=l(),Gm=a("li"),Jle=a("strong"),Zoo=o("deit"),ero=o(" \u2014 "),nB=a("a"),oro=o("DeiTConfig"),rro=o(" (DeiT model)"),tro=l(),Om=a("li"),Yle=a("strong"),aro=o("detr"),nro=o(" \u2014 "),sB=a("a"),sro=o("DetrConfig"),lro=o(" (DETR model)"),iro=l(),Vm=a("li"),Kle=a("strong"),dro=o("distilbert"),cro=o(" \u2014 "),lB=a("a"),fro=o("DistilBertConfig"),mro=o(" (DistilBERT model)"),gro=l(),Xm=a("li"),Zle=a("strong"),hro=o("donut-swin"),pro=o(" \u2014 "),iB=a("a"),uro=o("DonutSwinConfig"),_ro=o(" (DonutSwin model)"),bro=l(),zm=a("li"),eie=a("strong"),vro=o("dpr"),Fro=o(" \u2014 "),dB=a("a"),Tro=o("DPRConfig"),Mro=o(" (DPR model)"),Ero=l(),Qm=a("li"),oie=a("strong"),Cro=o("dpt"),wro=o(" \u2014 "),cB=a("a"),Aro=o("DPTConfig"),yro=o(" (DPT model)"),Lro=l(),Wm=a("li"),rie=a("strong"),xro=o("electra"),$ro=o(" \u2014 "),fB=a("a"),kro=o("ElectraConfig"),Sro=o(" (ELECTRA model)"),Rro=l(),Um=a("li"),tie=a("strong"),Pro=o("encoder-decoder"),Bro=o(" \u2014 "),mB=a("a"),Iro=o("EncoderDecoderConfig"),Nro=o(" (Encoder decoder model)"),qro=l(),Hm=a("li"),aie=a("strong"),jro=o("flaubert"),Dro=o(" \u2014 "),gB=a("a"),Gro=o("FlaubertConfig"),Oro=o(" (FlauBERT model)"),Vro=l(),Jm=a("li"),nie=a("strong"),Xro=o("flava"),zro=o(" \u2014 "),hB=a("a"),Qro=o("FlavaConfig"),Wro=o(" (FLAVA model)"),Uro=l(),Ym=a("li"),sie=a("strong"),Hro=o("fnet"),Jro=o(" \u2014 "),pB=a("a"),Yro=o("FNetConfig"),Kro=o(" (FNet model)"),Zro=l(),Km=a("li"),lie=a("strong"),eto=o("fsmt"),oto=o(" \u2014 "),uB=a("a"),rto=o("FSMTConfig"),tto=o(" (FairSeq Machine-Translation model)"),ato=l(),Zm=a("li"),iie=a("strong"),nto=o("funnel"),sto=o(" \u2014 "),_B=a("a"),lto=o("FunnelConfig"),ito=o(" (Funnel Transformer model)"),dto=l(),eg=a("li"),die=a("strong"),cto=o("glpn"),fto=o(" \u2014 "),bB=a("a"),mto=o("GLPNConfig"),gto=o(" (GLPN model)"),hto=l(),og=a("li"),cie=a("strong"),pto=o("gpt2"),uto=o(" \u2014 "),vB=a("a"),_to=o("GPT2Config"),bto=o(" (OpenAI GPT-2 model)"),vto=l(),rg=a("li"),fie=a("strong"),Fto=o("gpt_neo"),Tto=o(" \u2014 "),FB=a("a"),Mto=o("GPTNeoConfig"),Eto=o(" (GPT Neo model)"),Cto=l(),tg=a("li"),mie=a("strong"),wto=o("gpt_neox"),Ato=o(" \u2014 "),TB=a("a"),yto=o("GPTNeoXConfig"),Lto=o(" (GPT NeoX model)"),xto=l(),ag=a("li"),gie=a("strong"),$to=o("gptj"),kto=o(" \u2014 "),MB=a("a"),Sto=o("GPTJConfig"),Rto=o(" (GPT-J model)"),Pto=l(),ng=a("li"),hie=a("strong"),Bto=o("groupvit"),Ito=o(" \u2014 "),EB=a("a"),Nto=o("GroupViTConfig"),qto=o(" (GroupViT model)"),jto=l(),sg=a("li"),pie=a("strong"),Dto=o("hubert"),Gto=o(" \u2014 "),CB=a("a"),Oto=o("HubertConfig"),Vto=o(" (Hubert model)"),Xto=l(),lg=a("li"),uie=a("strong"),zto=o("ibert"),Qto=o(" \u2014 "),wB=a("a"),Wto=o("IBertConfig"),Uto=o(" (I-BERT model)"),Hto=l(),ig=a("li"),_ie=a("strong"),Jto=o("imagegpt"),Yto=o(" \u2014 "),AB=a("a"),Kto=o("ImageGPTConfig"),Zto=o(" (ImageGPT model)"),eao=l(),dg=a("li"),bie=a("strong"),oao=o("layoutlm"),rao=o(" \u2014 "),yB=a("a"),tao=o("LayoutLMConfig"),aao=o(" (LayoutLM model)"),nao=l(),cg=a("li"),vie=a("strong"),sao=o("layoutlmv2"),lao=o(" \u2014 "),LB=a("a"),iao=o("LayoutLMv2Config"),dao=o(" (LayoutLMv2 model)"),cao=l(),fg=a("li"),Fie=a("strong"),fao=o("layoutlmv3"),mao=o(" \u2014 "),xB=a("a"),gao=o("LayoutLMv3Config"),hao=o(" (LayoutLMv3 model)"),pao=l(),mg=a("li"),Tie=a("strong"),uao=o("led"),_ao=o(" \u2014 "),$B=a("a"),bao=o("LEDConfig"),vao=o(" (LED model)"),Fao=l(),gg=a("li"),Mie=a("strong"),Tao=o("levit"),Mao=o(" \u2014 "),kB=a("a"),Eao=o("LevitConfig"),Cao=o(" (LeViT model)"),wao=l(),hg=a("li"),Eie=a("strong"),Aao=o("longformer"),yao=o(" \u2014 "),SB=a("a"),Lao=o("LongformerConfig"),xao=o(" (Longformer model)"),$ao=l(),pg=a("li"),Cie=a("strong"),kao=o("longt5"),Sao=o(" \u2014 "),RB=a("a"),Rao=o("LongT5Config"),Pao=o(" (LongT5 model)"),Bao=l(),ug=a("li"),wie=a("strong"),Iao=o("luke"),Nao=o(" \u2014 "),PB=a("a"),qao=o("LukeConfig"),jao=o(" (LUKE model)"),Dao=l(),_g=a("li"),Aie=a("strong"),Gao=o("lxmert"),Oao=o(" \u2014 "),BB=a("a"),Vao=o("LxmertConfig"),Xao=o(" (LXMERT model)"),zao=l(),bg=a("li"),yie=a("strong"),Qao=o("m2m_100"),Wao=o(" \u2014 "),IB=a("a"),Uao=o("M2M100Config"),Hao=o(" (M2M100 model)"),Jao=l(),vg=a("li"),Lie=a("strong"),Yao=o("marian"),Kao=o(" \u2014 "),NB=a("a"),Zao=o("MarianConfig"),eno=o(" (Marian model)"),ono=l(),Fg=a("li"),xie=a("strong"),rno=o("maskformer"),tno=o(" \u2014 "),qB=a("a"),ano=o("MaskFormerConfig"),nno=o(" (MaskFormer model)"),sno=l(),Tg=a("li"),$ie=a("strong"),lno=o("mbart"),ino=o(" \u2014 "),jB=a("a"),dno=o("MBartConfig"),cno=o(" (mBART model)"),fno=l(),Mg=a("li"),kie=a("strong"),mno=o("mctct"),gno=o(" \u2014 "),DB=a("a"),hno=o("MCTCTConfig"),pno=o(" (M-CTC-T model)"),uno=l(),Eg=a("li"),Sie=a("strong"),_no=o("megatron-bert"),bno=o(" \u2014 "),GB=a("a"),vno=o("MegatronBertConfig"),Fno=o(" (Megatron-BERT model)"),Tno=l(),Cg=a("li"),Rie=a("strong"),Mno=o("mobilebert"),Eno=o(" \u2014 "),OB=a("a"),Cno=o("MobileBertConfig"),wno=o(" (MobileBERT model)"),Ano=l(),wg=a("li"),Pie=a("strong"),yno=o("mobilevit"),Lno=o(" \u2014 "),VB=a("a"),xno=o("MobileViTConfig"),$no=o(" (MobileViT model)"),kno=l(),Ag=a("li"),Bie=a("strong"),Sno=o("mpnet"),Rno=o(" \u2014 "),XB=a("a"),Pno=o("MPNetConfig"),Bno=o(" (MPNet model)"),Ino=l(),yg=a("li"),Iie=a("strong"),Nno=o("mt5"),qno=o(" \u2014 "),zB=a("a"),jno=o("MT5Config"),Dno=o(" (MT5 model)"),Gno=l(),Lg=a("li"),Nie=a("strong"),Ono=o("mvp"),Vno=o(" \u2014 "),QB=a("a"),Xno=o("MvpConfig"),zno=o(" (MVP model)"),Qno=l(),xg=a("li"),qie=a("strong"),Wno=o("nezha"),Uno=o(" \u2014 "),WB=a("a"),Hno=o("NezhaConfig"),Jno=o(" (Nezha model)"),Yno=l(),$g=a("li"),jie=a("strong"),Kno=o("nystromformer"),Zno=o(" \u2014 "),UB=a("a"),eso=o("NystromformerConfig"),oso=o(" (Nystr\xF6mformer model)"),rso=l(),kg=a("li"),Die=a("strong"),tso=o("openai-gpt"),aso=o(" \u2014 "),HB=a("a"),nso=o("OpenAIGPTConfig"),sso=o(" (OpenAI GPT model)"),lso=l(),Sg=a("li"),Gie=a("strong"),iso=o("opt"),dso=o(" \u2014 "),JB=a("a"),cso=o("OPTConfig"),fso=o(" (OPT model)"),mso=l(),Rg=a("li"),Oie=a("strong"),gso=o("owlvit"),hso=o(" \u2014 "),YB=a("a"),pso=o("OwlViTConfig"),uso=o(" (OWL-ViT model)"),_so=l(),Pg=a("li"),Vie=a("strong"),bso=o("pegasus"),vso=o(" \u2014 "),KB=a("a"),Fso=o("PegasusConfig"),Tso=o(" (Pegasus model)"),Mso=l(),Bg=a("li"),Xie=a("strong"),Eso=o("perceiver"),Cso=o(" \u2014 "),ZB=a("a"),wso=o("PerceiverConfig"),Aso=o(" (Perceiver model)"),yso=l(),Ig=a("li"),zie=a("strong"),Lso=o("plbart"),xso=o(" \u2014 "),eI=a("a"),$so=o("PLBartConfig"),kso=o(" (PLBart model)"),Sso=l(),Ng=a("li"),Qie=a("strong"),Rso=o("poolformer"),Pso=o(" \u2014 "),oI=a("a"),Bso=o("PoolFormerConfig"),Iso=o(" (PoolFormer model)"),Nso=l(),qg=a("li"),Wie=a("strong"),qso=o("prophetnet"),jso=o(" \u2014 "),rI=a("a"),Dso=o("ProphetNetConfig"),Gso=o(" (ProphetNet model)"),Oso=l(),jg=a("li"),Uie=a("strong"),Vso=o("qdqbert"),Xso=o(" \u2014 "),tI=a("a"),zso=o("QDQBertConfig"),Qso=o(" (QDQBert model)"),Wso=l(),Dg=a("li"),Hie=a("strong"),Uso=o("rag"),Hso=o(" \u2014 "),aI=a("a"),Jso=o("RagConfig"),Yso=o(" (RAG model)"),Kso=l(),Gg=a("li"),Jie=a("strong"),Zso=o("realm"),elo=o(" \u2014 "),nI=a("a"),olo=o("RealmConfig"),rlo=o(" (REALM model)"),tlo=l(),Og=a("li"),Yie=a("strong"),alo=o("reformer"),nlo=o(" \u2014 "),sI=a("a"),slo=o("ReformerConfig"),llo=o(" (Reformer model)"),ilo=l(),Vg=a("li"),Kie=a("strong"),dlo=o("regnet"),clo=o(" \u2014 "),lI=a("a"),flo=o("RegNetConfig"),mlo=o(" (RegNet model)"),glo=l(),Xg=a("li"),Zie=a("strong"),hlo=o("rembert"),plo=o(" \u2014 "),iI=a("a"),ulo=o("RemBertConfig"),_lo=o(" (RemBERT model)"),blo=l(),zg=a("li"),ede=a("strong"),vlo=o("resnet"),Flo=o(" \u2014 "),dI=a("a"),Tlo=o("ResNetConfig"),Mlo=o(" (ResNet model)"),Elo=l(),Qg=a("li"),ode=a("strong"),Clo=o("retribert"),wlo=o(" \u2014 "),cI=a("a"),Alo=o("RetriBertConfig"),ylo=o(" (RetriBERT model)"),Llo=l(),Wg=a("li"),rde=a("strong"),xlo=o("roberta"),$lo=o(" \u2014 "),fI=a("a"),klo=o("RobertaConfig"),Slo=o(" (RoBERTa model)"),Rlo=l(),Ug=a("li"),tde=a("strong"),Plo=o("roformer"),Blo=o(" \u2014 "),mI=a("a"),Ilo=o("RoFormerConfig"),Nlo=o(" (RoFormer model)"),qlo=l(),Hg=a("li"),ade=a("strong"),jlo=o("segformer"),Dlo=o(" \u2014 "),gI=a("a"),Glo=o("SegformerConfig"),Olo=o(" (SegFormer model)"),Vlo=l(),Jg=a("li"),nde=a("strong"),Xlo=o("sew"),zlo=o(" \u2014 "),hI=a("a"),Qlo=o("SEWConfig"),Wlo=o(" (SEW model)"),Ulo=l(),Yg=a("li"),sde=a("strong"),Hlo=o("sew-d"),Jlo=o(" \u2014 "),pI=a("a"),Ylo=o("SEWDConfig"),Klo=o(" (SEW-D model)"),Zlo=l(),Kg=a("li"),lde=a("strong"),eio=o("speech-encoder-decoder"),oio=o(" \u2014 "),uI=a("a"),rio=o("SpeechEncoderDecoderConfig"),tio=o(" (Speech Encoder decoder model)"),aio=l(),Zg=a("li"),ide=a("strong"),nio=o("speech_to_text"),sio=o(" \u2014 "),_I=a("a"),lio=o("Speech2TextConfig"),iio=o(" (Speech2Text model)"),dio=l(),eh=a("li"),dde=a("strong"),cio=o("speech_to_text_2"),fio=o(" \u2014 "),bI=a("a"),mio=o("Speech2Text2Config"),gio=o(" (Speech2Text2 model)"),hio=l(),oh=a("li"),cde=a("strong"),pio=o("splinter"),uio=o(" \u2014 "),vI=a("a"),_io=o("SplinterConfig"),bio=o(" (Splinter model)"),vio=l(),rh=a("li"),fde=a("strong"),Fio=o("squeezebert"),Tio=o(" \u2014 "),FI=a("a"),Mio=o("SqueezeBertConfig"),Eio=o(" (SqueezeBERT model)"),Cio=l(),th=a("li"),mde=a("strong"),wio=o("swin"),Aio=o(" \u2014 "),TI=a("a"),yio=o("SwinConfig"),Lio=o(" (Swin Transformer model)"),xio=l(),ah=a("li"),gde=a("strong"),$io=o("swinv2"),kio=o(" \u2014 "),MI=a("a"),Sio=o("Swinv2Config"),Rio=o(" (Swin Transformer V2 model)"),Pio=l(),nh=a("li"),hde=a("strong"),Bio=o("t5"),Iio=o(" \u2014 "),EI=a("a"),Nio=o("T5Config"),qio=o(" (T5 model)"),jio=l(),sh=a("li"),pde=a("strong"),Dio=o("tapas"),Gio=o(" \u2014 "),CI=a("a"),Oio=o("TapasConfig"),Vio=o(" (TAPAS model)"),Xio=l(),lh=a("li"),ude=a("strong"),zio=o("trajectory_transformer"),Qio=o(" \u2014 "),wI=a("a"),Wio=o("TrajectoryTransformerConfig"),Uio=o(" (Trajectory Transformer model)"),Hio=l(),ih=a("li"),_de=a("strong"),Jio=o("transfo-xl"),Yio=o(" \u2014 "),AI=a("a"),Kio=o("TransfoXLConfig"),Zio=o(" (Transformer-XL model)"),edo=l(),dh=a("li"),bde=a("strong"),odo=o("trocr"),rdo=o(" \u2014 "),yI=a("a"),tdo=o("TrOCRConfig"),ado=o(" (TrOCR model)"),ndo=l(),ch=a("li"),vde=a("strong"),sdo=o("unispeech"),ldo=o(" \u2014 "),LI=a("a"),ido=o("UniSpeechConfig"),ddo=o(" (UniSpeech model)"),cdo=l(),fh=a("li"),Fde=a("strong"),fdo=o("unispeech-sat"),mdo=o(" \u2014 "),xI=a("a"),gdo=o("UniSpeechSatConfig"),hdo=o(" (UniSpeechSat model)"),pdo=l(),mh=a("li"),Tde=a("strong"),udo=o("van"),_do=o(" \u2014 "),$I=a("a"),bdo=o("VanConfig"),vdo=o(" (VAN model)"),Fdo=l(),gh=a("li"),Mde=a("strong"),Tdo=o("videomae"),Mdo=o(" \u2014 "),kI=a("a"),Edo=o("VideoMAEConfig"),Cdo=o(" (VideoMAE model)"),wdo=l(),hh=a("li"),Ede=a("strong"),Ado=o("vilt"),ydo=o(" \u2014 "),SI=a("a"),Ldo=o("ViltConfig"),xdo=o(" (ViLT model)"),$do=l(),ph=a("li"),Cde=a("strong"),kdo=o("vision-encoder-decoder"),Sdo=o(" \u2014 "),RI=a("a"),Rdo=o("VisionEncoderDecoderConfig"),Pdo=o(" (Vision Encoder decoder model)"),Bdo=l(),uh=a("li"),wde=a("strong"),Ido=o("vision-text-dual-encoder"),Ndo=o(" \u2014 "),PI=a("a"),qdo=o("VisionTextDualEncoderConfig"),jdo=o(" (VisionTextDualEncoder model)"),Ddo=l(),_h=a("li"),Ade=a("strong"),Gdo=o("visual_bert"),Odo=o(" \u2014 "),BI=a("a"),Vdo=o("VisualBertConfig"),Xdo=o(" (VisualBERT model)"),zdo=l(),bh=a("li"),yde=a("strong"),Qdo=o("vit"),Wdo=o(" \u2014 "),II=a("a"),Udo=o("ViTConfig"),Hdo=o(" (ViT model)"),Jdo=l(),vh=a("li"),Lde=a("strong"),Ydo=o("vit_mae"),Kdo=o(" \u2014 "),NI=a("a"),Zdo=o("ViTMAEConfig"),eco=o(" (ViTMAE model)"),oco=l(),Fh=a("li"),xde=a("strong"),rco=o("wav2vec2"),tco=o(" \u2014 "),qI=a("a"),aco=o("Wav2Vec2Config"),nco=o(" (Wav2Vec2 model)"),sco=l(),Th=a("li"),$de=a("strong"),lco=o("wav2vec2-conformer"),ico=o(" \u2014 "),jI=a("a"),dco=o("Wav2Vec2ConformerConfig"),cco=o(" (Wav2Vec2-Conformer model)"),fco=l(),Mh=a("li"),kde=a("strong"),mco=o("wavlm"),gco=o(" \u2014 "),DI=a("a"),hco=o("WavLMConfig"),pco=o(" (WavLM model)"),uco=l(),Eh=a("li"),Sde=a("strong"),_co=o("xglm"),bco=o(" \u2014 "),GI=a("a"),vco=o("XGLMConfig"),Fco=o(" (XGLM model)"),Tco=l(),Ch=a("li"),Rde=a("strong"),Mco=o("xlm"),Eco=o(" \u2014 "),OI=a("a"),Cco=o("XLMConfig"),wco=o(" (XLM model)"),Aco=l(),wh=a("li"),Pde=a("strong"),yco=o("xlm-prophetnet"),Lco=o(" \u2014 "),VI=a("a"),xco=o("XLMProphetNetConfig"),$co=o(" (XLM-ProphetNet model)"),kco=l(),Ah=a("li"),Bde=a("strong"),Sco=o("xlm-roberta"),Rco=o(" \u2014 "),XI=a("a"),Pco=o("XLMRobertaConfig"),Bco=o(" (XLM-RoBERTa model)"),Ico=l(),yh=a("li"),Ide=a("strong"),Nco=o("xlm-roberta-xl"),qco=o(" \u2014 "),zI=a("a"),jco=o("XLMRobertaXLConfig"),Dco=o(" (XLM-RoBERTa-XL model)"),Gco=l(),Lh=a("li"),Nde=a("strong"),Oco=o("xlnet"),Vco=o(" \u2014 "),QI=a("a"),Xco=o("XLNetConfig"),zco=o(" (XLNet model)"),Qco=l(),xh=a("li"),qde=a("strong"),Wco=o("yolos"),Uco=o(" \u2014 "),WI=a("a"),Hco=o("YolosConfig"),Jco=o(" (YOLOS model)"),Yco=l(),$h=a("li"),jde=a("strong"),Kco=o("yoso"),Zco=o(" \u2014 "),UI=a("a"),efo=o("YosoConfig"),ofo=o(" (YOSO model)"),rfo=l(),F(kh.$$.fragment),tfo=l(),Sh=a("div"),F(DL.$$.fragment),afo=l(),Dde=a("p"),nfo=o("Register a new configuration for this class."),zUe=l(),ad=a("h2"),Rh=a("a"),Gde=a("span"),F(GL.$$.fragment),sfo=l(),Ode=a("span"),lfo=o("AutoTokenizer"),QUe=l(),$o=a("div"),F(OL.$$.fragment),ifo=l(),VL=a("p"),dfo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HI=a("a"),cfo=o("AutoTokenizer.from_pretrained()"),ffo=o(" class method."),mfo=l(),XL=a("p"),gfo=o("This class cannot be instantiated directly using "),Vde=a("code"),hfo=o("__init__()"),pfo=o(" (throws an error)."),ufo=l(),Pr=a("div"),F(zL.$$.fragment),_fo=l(),Xde=a("p"),bfo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),vfo=l(),za=a("p"),Ffo=o("The tokenizer class to instantiate is selected based on the "),zde=a("code"),Tfo=o("model_type"),Mfo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),Efo=o("pretrained_model_name_or_path"),Cfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=a("code"),wfo=o("pretrained_model_name_or_path"),Afo=o(":"),yfo=l(),k=a("ul"),es=a("li"),Ude=a("strong"),Lfo=o("albert"),xfo=o(" \u2014 "),JI=a("a"),$fo=o("AlbertTokenizer"),kfo=o(" or "),YI=a("a"),Sfo=o("AlbertTokenizerFast"),Rfo=o(" (ALBERT model)"),Pfo=l(),os=a("li"),Hde=a("strong"),Bfo=o("bart"),Ifo=o(" \u2014 "),KI=a("a"),Nfo=o("BartTokenizer"),qfo=o(" or "),ZI=a("a"),jfo=o("BartTokenizerFast"),Dfo=o(" (BART model)"),Gfo=l(),rs=a("li"),Jde=a("strong"),Ofo=o("barthez"),Vfo=o(" \u2014 "),eN=a("a"),Xfo=o("BarthezTokenizer"),zfo=o(" or "),oN=a("a"),Qfo=o("BarthezTokenizerFast"),Wfo=o(" (BARThez model)"),Ufo=l(),Ph=a("li"),Yde=a("strong"),Hfo=o("bartpho"),Jfo=o(" \u2014 "),rN=a("a"),Yfo=o("BartphoTokenizer"),Kfo=o(" (BARTpho model)"),Zfo=l(),ts=a("li"),Kde=a("strong"),emo=o("bert"),omo=o(" \u2014 "),tN=a("a"),rmo=o("BertTokenizer"),tmo=o(" or "),aN=a("a"),amo=o("BertTokenizerFast"),nmo=o(" (BERT model)"),smo=l(),Bh=a("li"),Zde=a("strong"),lmo=o("bert-generation"),imo=o(" \u2014 "),nN=a("a"),dmo=o("BertGenerationTokenizer"),cmo=o(" (Bert Generation model)"),fmo=l(),Ih=a("li"),ece=a("strong"),mmo=o("bert-japanese"),gmo=o(" \u2014 "),sN=a("a"),hmo=o("BertJapaneseTokenizer"),pmo=o(" (BertJapanese model)"),umo=l(),Nh=a("li"),oce=a("strong"),_mo=o("bertweet"),bmo=o(" \u2014 "),lN=a("a"),vmo=o("BertweetTokenizer"),Fmo=o(" (BERTweet model)"),Tmo=l(),as=a("li"),rce=a("strong"),Mmo=o("big_bird"),Emo=o(" \u2014 "),iN=a("a"),Cmo=o("BigBirdTokenizer"),wmo=o(" or "),dN=a("a"),Amo=o("BigBirdTokenizerFast"),ymo=o(" (BigBird model)"),Lmo=l(),ns=a("li"),tce=a("strong"),xmo=o("bigbird_pegasus"),$mo=o(" \u2014 "),cN=a("a"),kmo=o("PegasusTokenizer"),Smo=o(" or "),fN=a("a"),Rmo=o("PegasusTokenizerFast"),Pmo=o(" (BigBird-Pegasus model)"),Bmo=l(),ss=a("li"),ace=a("strong"),Imo=o("blenderbot"),Nmo=o(" \u2014 "),mN=a("a"),qmo=o("BlenderbotTokenizer"),jmo=o(" or "),gN=a("a"),Dmo=o("BlenderbotTokenizerFast"),Gmo=o(" (Blenderbot model)"),Omo=l(),qh=a("li"),nce=a("strong"),Vmo=o("blenderbot-small"),Xmo=o(" \u2014 "),hN=a("a"),zmo=o("BlenderbotSmallTokenizer"),Qmo=o(" (BlenderbotSmall model)"),Wmo=l(),jh=a("li"),sce=a("strong"),Umo=o("bloom"),Hmo=o(" \u2014 "),pN=a("a"),Jmo=o("BloomTokenizerFast"),Ymo=o(" (BLOOM model)"),Kmo=l(),Dh=a("li"),lce=a("strong"),Zmo=o("byt5"),ego=o(" \u2014 "),uN=a("a"),ogo=o("ByT5Tokenizer"),rgo=o(" (ByT5 model)"),tgo=l(),ls=a("li"),ice=a("strong"),ago=o("camembert"),ngo=o(" \u2014 "),_N=a("a"),sgo=o("CamembertTokenizer"),lgo=o(" or "),bN=a("a"),igo=o("CamembertTokenizerFast"),dgo=o(" (CamemBERT model)"),cgo=l(),Gh=a("li"),dce=a("strong"),fgo=o("canine"),mgo=o(" \u2014 "),vN=a("a"),ggo=o("CanineTokenizer"),hgo=o(" (CANINE model)"),pgo=l(),is=a("li"),cce=a("strong"),ugo=o("clip"),_go=o(" \u2014 "),FN=a("a"),bgo=o("CLIPTokenizer"),vgo=o(" or "),TN=a("a"),Fgo=o("CLIPTokenizerFast"),Tgo=o(" (CLIP model)"),Mgo=l(),ds=a("li"),fce=a("strong"),Ego=o("codegen"),Cgo=o(" \u2014 "),MN=a("a"),wgo=o("CodeGenTokenizer"),Ago=o(" or "),EN=a("a"),ygo=o("CodeGenTokenizerFast"),Lgo=o(" (CodeGen model)"),xgo=l(),cs=a("li"),mce=a("strong"),$go=o("convbert"),kgo=o(" \u2014 "),CN=a("a"),Sgo=o("ConvBertTokenizer"),Rgo=o(" or "),wN=a("a"),Pgo=o("ConvBertTokenizerFast"),Bgo=o(" (ConvBERT model)"),Igo=l(),fs=a("li"),gce=a("strong"),Ngo=o("cpm"),qgo=o(" \u2014 "),AN=a("a"),jgo=o("CpmTokenizer"),Dgo=o(" or "),yN=a("a"),Ggo=o("CpmTokenizerFast"),Ogo=o(" (CPM model)"),Vgo=l(),Oh=a("li"),hce=a("strong"),Xgo=o("ctrl"),zgo=o(" \u2014 "),LN=a("a"),Qgo=o("CTRLTokenizer"),Wgo=o(" (CTRL model)"),Ugo=l(),ms=a("li"),pce=a("strong"),Hgo=o("data2vec-text"),Jgo=o(" \u2014 "),xN=a("a"),Ygo=o("RobertaTokenizer"),Kgo=o(" or "),$N=a("a"),Zgo=o("RobertaTokenizerFast"),eho=o(" (Data2VecText model)"),oho=l(),gs=a("li"),uce=a("strong"),rho=o("deberta"),tho=o(" \u2014 "),kN=a("a"),aho=o("DebertaTokenizer"),nho=o(" or "),SN=a("a"),sho=o("DebertaTokenizerFast"),lho=o(" (DeBERTa model)"),iho=l(),hs=a("li"),_ce=a("strong"),dho=o("deberta-v2"),cho=o(" \u2014 "),RN=a("a"),fho=o("DebertaV2Tokenizer"),mho=o(" or "),PN=a("a"),gho=o("DebertaV2TokenizerFast"),hho=o(" (DeBERTa-v2 model)"),pho=l(),ps=a("li"),bce=a("strong"),uho=o("distilbert"),_ho=o(" \u2014 "),BN=a("a"),bho=o("DistilBertTokenizer"),vho=o(" or "),IN=a("a"),Fho=o("DistilBertTokenizerFast"),Tho=o(" (DistilBERT model)"),Mho=l(),us=a("li"),vce=a("strong"),Eho=o("dpr"),Cho=o(" \u2014 "),NN=a("a"),who=o("DPRQuestionEncoderTokenizer"),Aho=o(" or "),qN=a("a"),yho=o("DPRQuestionEncoderTokenizerFast"),Lho=o(" (DPR model)"),xho=l(),_s=a("li"),Fce=a("strong"),$ho=o("electra"),kho=o(" \u2014 "),jN=a("a"),Sho=o("ElectraTokenizer"),Rho=o(" or "),DN=a("a"),Pho=o("ElectraTokenizerFast"),Bho=o(" (ELECTRA model)"),Iho=l(),Vh=a("li"),Tce=a("strong"),Nho=o("flaubert"),qho=o(" \u2014 "),GN=a("a"),jho=o("FlaubertTokenizer"),Dho=o(" (FlauBERT model)"),Gho=l(),bs=a("li"),Mce=a("strong"),Oho=o("fnet"),Vho=o(" \u2014 "),ON=a("a"),Xho=o("FNetTokenizer"),zho=o(" or "),VN=a("a"),Qho=o("FNetTokenizerFast"),Who=o(" (FNet model)"),Uho=l(),Xh=a("li"),Ece=a("strong"),Hho=o("fsmt"),Jho=o(" \u2014 "),XN=a("a"),Yho=o("FSMTTokenizer"),Kho=o(" (FairSeq Machine-Translation model)"),Zho=l(),vs=a("li"),Cce=a("strong"),epo=o("funnel"),opo=o(" \u2014 "),zN=a("a"),rpo=o("FunnelTokenizer"),tpo=o(" or "),QN=a("a"),apo=o("FunnelTokenizerFast"),npo=o(" (Funnel Transformer model)"),spo=l(),Fs=a("li"),wce=a("strong"),lpo=o("gpt2"),ipo=o(" \u2014 "),WN=a("a"),dpo=o("GPT2Tokenizer"),cpo=o(" or "),UN=a("a"),fpo=o("GPT2TokenizerFast"),mpo=o(" (OpenAI GPT-2 model)"),gpo=l(),Ts=a("li"),Ace=a("strong"),hpo=o("gpt_neo"),ppo=o(" \u2014 "),HN=a("a"),upo=o("GPT2Tokenizer"),_po=o(" or "),JN=a("a"),bpo=o("GPT2TokenizerFast"),vpo=o(" (GPT Neo model)"),Fpo=l(),zh=a("li"),yce=a("strong"),Tpo=o("gpt_neox"),Mpo=o(" \u2014 "),YN=a("a"),Epo=o("GPTNeoXTokenizerFast"),Cpo=o(" (GPT NeoX model)"),wpo=l(),Ms=a("li"),Lce=a("strong"),Apo=o("gptj"),ypo=o(" \u2014 "),KN=a("a"),Lpo=o("GPT2Tokenizer"),xpo=o(" or "),ZN=a("a"),$po=o("GPT2TokenizerFast"),kpo=o(" (GPT-J model)"),Spo=l(),Es=a("li"),xce=a("strong"),Rpo=o("groupvit"),Ppo=o(" \u2014 "),eq=a("a"),Bpo=o("CLIPTokenizer"),Ipo=o(" or "),oq=a("a"),Npo=o("CLIPTokenizerFast"),qpo=o(" (GroupViT model)"),jpo=l(),Cs=a("li"),$ce=a("strong"),Dpo=o("herbert"),Gpo=o(" \u2014 "),rq=a("a"),Opo=o("HerbertTokenizer"),Vpo=o(" or "),tq=a("a"),Xpo=o("HerbertTokenizerFast"),zpo=o(" (HerBERT model)"),Qpo=l(),Qh=a("li"),kce=a("strong"),Wpo=o("hubert"),Upo=o(" \u2014 "),aq=a("a"),Hpo=o("Wav2Vec2CTCTokenizer"),Jpo=o(" (Hubert model)"),Ypo=l(),ws=a("li"),Sce=a("strong"),Kpo=o("ibert"),Zpo=o(" \u2014 "),nq=a("a"),euo=o("RobertaTokenizer"),ouo=o(" or "),sq=a("a"),ruo=o("RobertaTokenizerFast"),tuo=o(" (I-BERT model)"),auo=l(),As=a("li"),Rce=a("strong"),nuo=o("layoutlm"),suo=o(" \u2014 "),lq=a("a"),luo=o("LayoutLMTokenizer"),iuo=o(" or "),iq=a("a"),duo=o("LayoutLMTokenizerFast"),cuo=o(" (LayoutLM model)"),fuo=l(),ys=a("li"),Pce=a("strong"),muo=o("layoutlmv2"),guo=o(" \u2014 "),dq=a("a"),huo=o("LayoutLMv2Tokenizer"),puo=o(" or "),cq=a("a"),uuo=o("LayoutLMv2TokenizerFast"),_uo=o(" (LayoutLMv2 model)"),buo=l(),Ls=a("li"),Bce=a("strong"),vuo=o("layoutlmv3"),Fuo=o(" \u2014 "),fq=a("a"),Tuo=o("LayoutLMv3Tokenizer"),Muo=o(" or "),mq=a("a"),Euo=o("LayoutLMv3TokenizerFast"),Cuo=o(" (LayoutLMv3 model)"),wuo=l(),xs=a("li"),Ice=a("strong"),Auo=o("layoutxlm"),yuo=o(" \u2014 "),gq=a("a"),Luo=o("LayoutXLMTokenizer"),xuo=o(" or "),hq=a("a"),$uo=o("LayoutXLMTokenizerFast"),kuo=o(" (LayoutXLM model)"),Suo=l(),$s=a("li"),Nce=a("strong"),Ruo=o("led"),Puo=o(" \u2014 "),pq=a("a"),Buo=o("LEDTokenizer"),Iuo=o(" or "),uq=a("a"),Nuo=o("LEDTokenizerFast"),quo=o(" (LED model)"),juo=l(),ks=a("li"),qce=a("strong"),Duo=o("longformer"),Guo=o(" \u2014 "),_q=a("a"),Ouo=o("LongformerTokenizer"),Vuo=o(" or "),bq=a("a"),Xuo=o("LongformerTokenizerFast"),zuo=o(" (Longformer model)"),Quo=l(),Ss=a("li"),jce=a("strong"),Wuo=o("longt5"),Uuo=o(" \u2014 "),vq=a("a"),Huo=o("T5Tokenizer"),Juo=o(" or "),Fq=a("a"),Yuo=o("T5TokenizerFast"),Kuo=o(" (LongT5 model)"),Zuo=l(),Wh=a("li"),Dce=a("strong"),e_o=o("luke"),o_o=o(" \u2014 "),Tq=a("a"),r_o=o("LukeTokenizer"),t_o=o(" (LUKE model)"),a_o=l(),Rs=a("li"),Gce=a("strong"),n_o=o("lxmert"),s_o=o(" \u2014 "),Mq=a("a"),l_o=o("LxmertTokenizer"),i_o=o(" or "),Eq=a("a"),d_o=o("LxmertTokenizerFast"),c_o=o(" (LXMERT model)"),f_o=l(),Uh=a("li"),Oce=a("strong"),m_o=o("m2m_100"),g_o=o(" \u2014 "),Cq=a("a"),h_o=o("M2M100Tokenizer"),p_o=o(" (M2M100 model)"),u_o=l(),Hh=a("li"),Vce=a("strong"),__o=o("marian"),b_o=o(" \u2014 "),wq=a("a"),v_o=o("MarianTokenizer"),F_o=o(" (Marian model)"),T_o=l(),Ps=a("li"),Xce=a("strong"),M_o=o("mbart"),E_o=o(" \u2014 "),Aq=a("a"),C_o=o("MBartTokenizer"),w_o=o(" or "),yq=a("a"),A_o=o("MBartTokenizerFast"),y_o=o(" (mBART model)"),L_o=l(),Bs=a("li"),zce=a("strong"),x_o=o("mbart50"),$_o=o(" \u2014 "),Lq=a("a"),k_o=o("MBart50Tokenizer"),S_o=o(" or "),xq=a("a"),R_o=o("MBart50TokenizerFast"),P_o=o(" (mBART-50 model)"),B_o=l(),Is=a("li"),Qce=a("strong"),I_o=o("megatron-bert"),N_o=o(" \u2014 "),$q=a("a"),q_o=o("BertTokenizer"),j_o=o(" or "),kq=a("a"),D_o=o("BertTokenizerFast"),G_o=o(" (Megatron-BERT model)"),O_o=l(),Jh=a("li"),Wce=a("strong"),V_o=o("mluke"),X_o=o(" \u2014 "),Sq=a("a"),z_o=o("MLukeTokenizer"),Q_o=o(" (mLUKE model)"),W_o=l(),Ns=a("li"),Uce=a("strong"),U_o=o("mobilebert"),H_o=o(" \u2014 "),Rq=a("a"),J_o=o("MobileBertTokenizer"),Y_o=o(" or "),Pq=a("a"),K_o=o("MobileBertTokenizerFast"),Z_o=o(" (MobileBERT model)"),e2o=l(),qs=a("li"),Hce=a("strong"),o2o=o("mpnet"),r2o=o(" \u2014 "),Bq=a("a"),t2o=o("MPNetTokenizer"),a2o=o(" or "),Iq=a("a"),n2o=o("MPNetTokenizerFast"),s2o=o(" (MPNet model)"),l2o=l(),js=a("li"),Jce=a("strong"),i2o=o("mt5"),d2o=o(" \u2014 "),Nq=a("a"),c2o=o("MT5Tokenizer"),f2o=o(" or "),qq=a("a"),m2o=o("MT5TokenizerFast"),g2o=o(" (MT5 model)"),h2o=l(),Ds=a("li"),Yce=a("strong"),p2o=o("mvp"),u2o=o(" \u2014 "),jq=a("a"),_2o=o("MvpTokenizer"),b2o=o(" or "),Dq=a("a"),v2o=o("MvpTokenizerFast"),F2o=o(" (MVP model)"),T2o=l(),Gs=a("li"),Kce=a("strong"),M2o=o("nezha"),E2o=o(" \u2014 "),Gq=a("a"),C2o=o("BertTokenizer"),w2o=o(" or "),Oq=a("a"),A2o=o("BertTokenizerFast"),y2o=o(" (Nezha model)"),L2o=l(),Os=a("li"),Zce=a("strong"),x2o=o("nllb"),$2o=o(" \u2014 "),Vq=a("a"),k2o=o("NllbTokenizer"),S2o=o(" or "),Xq=a("a"),R2o=o("NllbTokenizerFast"),P2o=o(" (NLLB model)"),B2o=l(),Vs=a("li"),efe=a("strong"),I2o=o("nystromformer"),N2o=o(" \u2014 "),zq=a("a"),q2o=o("AlbertTokenizer"),j2o=o(" or "),Qq=a("a"),D2o=o("AlbertTokenizerFast"),G2o=o(" (Nystr\xF6mformer model)"),O2o=l(),Xs=a("li"),ofe=a("strong"),V2o=o("openai-gpt"),X2o=o(" \u2014 "),Wq=a("a"),z2o=o("OpenAIGPTTokenizer"),Q2o=o(" or "),Uq=a("a"),W2o=o("OpenAIGPTTokenizerFast"),U2o=o(" (OpenAI GPT model)"),H2o=l(),Yh=a("li"),rfe=a("strong"),J2o=o("opt"),Y2o=o(" \u2014 "),Hq=a("a"),K2o=o("GPT2Tokenizer"),Z2o=o(" (OPT model)"),e1o=l(),zs=a("li"),tfe=a("strong"),o1o=o("owlvit"),r1o=o(" \u2014 "),Jq=a("a"),t1o=o("CLIPTokenizer"),a1o=o(" or "),Yq=a("a"),n1o=o("CLIPTokenizerFast"),s1o=o(" (OWL-ViT model)"),l1o=l(),Qs=a("li"),afe=a("strong"),i1o=o("pegasus"),d1o=o(" \u2014 "),Kq=a("a"),c1o=o("PegasusTokenizer"),f1o=o(" or "),Zq=a("a"),m1o=o("PegasusTokenizerFast"),g1o=o(" (Pegasus model)"),h1o=l(),Kh=a("li"),nfe=a("strong"),p1o=o("perceiver"),u1o=o(" \u2014 "),ej=a("a"),_1o=o("PerceiverTokenizer"),b1o=o(" (Perceiver model)"),v1o=l(),Zh=a("li"),sfe=a("strong"),F1o=o("phobert"),T1o=o(" \u2014 "),oj=a("a"),M1o=o("PhobertTokenizer"),E1o=o(" (PhoBERT model)"),C1o=l(),ep=a("li"),lfe=a("strong"),w1o=o("plbart"),A1o=o(" \u2014 "),rj=a("a"),y1o=o("PLBartTokenizer"),L1o=o(" (PLBart model)"),x1o=l(),op=a("li"),ife=a("strong"),$1o=o("prophetnet"),k1o=o(" \u2014 "),tj=a("a"),S1o=o("ProphetNetTokenizer"),R1o=o(" (ProphetNet model)"),P1o=l(),Ws=a("li"),dfe=a("strong"),B1o=o("qdqbert"),I1o=o(" \u2014 "),aj=a("a"),N1o=o("BertTokenizer"),q1o=o(" or "),nj=a("a"),j1o=o("BertTokenizerFast"),D1o=o(" (QDQBert model)"),G1o=l(),rp=a("li"),cfe=a("strong"),O1o=o("rag"),V1o=o(" \u2014 "),sj=a("a"),X1o=o("RagTokenizer"),z1o=o(" (RAG model)"),Q1o=l(),Us=a("li"),ffe=a("strong"),W1o=o("realm"),U1o=o(" \u2014 "),lj=a("a"),H1o=o("RealmTokenizer"),J1o=o(" or "),ij=a("a"),Y1o=o("RealmTokenizerFast"),K1o=o(" (REALM model)"),Z1o=l(),Hs=a("li"),mfe=a("strong"),ebo=o("reformer"),obo=o(" \u2014 "),dj=a("a"),rbo=o("ReformerTokenizer"),tbo=o(" or "),cj=a("a"),abo=o("ReformerTokenizerFast"),nbo=o(" (Reformer model)"),sbo=l(),Js=a("li"),gfe=a("strong"),lbo=o("rembert"),ibo=o(" \u2014 "),fj=a("a"),dbo=o("RemBertTokenizer"),cbo=o(" or "),mj=a("a"),fbo=o("RemBertTokenizerFast"),mbo=o(" (RemBERT model)"),gbo=l(),Ys=a("li"),hfe=a("strong"),hbo=o("retribert"),pbo=o(" \u2014 "),gj=a("a"),ubo=o("RetriBertTokenizer"),_bo=o(" or "),hj=a("a"),bbo=o("RetriBertTokenizerFast"),vbo=o(" (RetriBERT model)"),Fbo=l(),Ks=a("li"),pfe=a("strong"),Tbo=o("roberta"),Mbo=o(" \u2014 "),pj=a("a"),Ebo=o("RobertaTokenizer"),Cbo=o(" or "),uj=a("a"),wbo=o("RobertaTokenizerFast"),Abo=o(" (RoBERTa model)"),ybo=l(),Zs=a("li"),ufe=a("strong"),Lbo=o("roformer"),xbo=o(" \u2014 "),_j=a("a"),$bo=o("RoFormerTokenizer"),kbo=o(" or "),bj=a("a"),Sbo=o("RoFormerTokenizerFast"),Rbo=o(" (RoFormer model)"),Pbo=l(),tp=a("li"),_fe=a("strong"),Bbo=o("speech_to_text"),Ibo=o(" \u2014 "),vj=a("a"),Nbo=o("Speech2TextTokenizer"),qbo=o(" (Speech2Text model)"),jbo=l(),ap=a("li"),bfe=a("strong"),Dbo=o("speech_to_text_2"),Gbo=o(" \u2014 "),Fj=a("a"),Obo=o("Speech2Text2Tokenizer"),Vbo=o(" (Speech2Text2 model)"),Xbo=l(),el=a("li"),vfe=a("strong"),zbo=o("splinter"),Qbo=o(" \u2014 "),Tj=a("a"),Wbo=o("SplinterTokenizer"),Ubo=o(" or "),Mj=a("a"),Hbo=o("SplinterTokenizerFast"),Jbo=o(" (Splinter model)"),Ybo=l(),ol=a("li"),Ffe=a("strong"),Kbo=o("squeezebert"),Zbo=o(" \u2014 "),Ej=a("a"),evo=o("SqueezeBertTokenizer"),ovo=o(" or "),Cj=a("a"),rvo=o("SqueezeBertTokenizerFast"),tvo=o(" (SqueezeBERT model)"),avo=l(),rl=a("li"),Tfe=a("strong"),nvo=o("t5"),svo=o(" \u2014 "),wj=a("a"),lvo=o("T5Tokenizer"),ivo=o(" or "),Aj=a("a"),dvo=o("T5TokenizerFast"),cvo=o(" (T5 model)"),fvo=l(),np=a("li"),Mfe=a("strong"),mvo=o("tapas"),gvo=o(" \u2014 "),yj=a("a"),hvo=o("TapasTokenizer"),pvo=o(" (TAPAS model)"),uvo=l(),sp=a("li"),Efe=a("strong"),_vo=o("tapex"),bvo=o(" \u2014 "),Lj=a("a"),vvo=o("TapexTokenizer"),Fvo=o(" (TAPEX model)"),Tvo=l(),lp=a("li"),Cfe=a("strong"),Mvo=o("transfo-xl"),Evo=o(" \u2014 "),xj=a("a"),Cvo=o("TransfoXLTokenizer"),wvo=o(" (Transformer-XL model)"),Avo=l(),tl=a("li"),wfe=a("strong"),yvo=o("vilt"),Lvo=o(" \u2014 "),$j=a("a"),xvo=o("BertTokenizer"),$vo=o(" or "),kj=a("a"),kvo=o("BertTokenizerFast"),Svo=o(" (ViLT model)"),Rvo=l(),al=a("li"),Afe=a("strong"),Pvo=o("visual_bert"),Bvo=o(" \u2014 "),Sj=a("a"),Ivo=o("BertTokenizer"),Nvo=o(" or "),Rj=a("a"),qvo=o("BertTokenizerFast"),jvo=o(" (VisualBERT model)"),Dvo=l(),ip=a("li"),yfe=a("strong"),Gvo=o("wav2vec2"),Ovo=o(" \u2014 "),Pj=a("a"),Vvo=o("Wav2Vec2CTCTokenizer"),Xvo=o(" (Wav2Vec2 model)"),zvo=l(),dp=a("li"),Lfe=a("strong"),Qvo=o("wav2vec2-conformer"),Wvo=o(" \u2014 "),Bj=a("a"),Uvo=o("Wav2Vec2CTCTokenizer"),Hvo=o(" (Wav2Vec2-Conformer model)"),Jvo=l(),cp=a("li"),xfe=a("strong"),Yvo=o("wav2vec2_phoneme"),Kvo=o(" \u2014 "),Ij=a("a"),Zvo=o("Wav2Vec2PhonemeCTCTokenizer"),e3o=o(" (Wav2Vec2Phoneme model)"),o3o=l(),nl=a("li"),$fe=a("strong"),r3o=o("xglm"),t3o=o(" \u2014 "),Nj=a("a"),a3o=o("XGLMTokenizer"),n3o=o(" or "),qj=a("a"),s3o=o("XGLMTokenizerFast"),l3o=o(" (XGLM model)"),i3o=l(),fp=a("li"),kfe=a("strong"),d3o=o("xlm"),c3o=o(" \u2014 "),jj=a("a"),f3o=o("XLMTokenizer"),m3o=o(" (XLM model)"),g3o=l(),mp=a("li"),Sfe=a("strong"),h3o=o("xlm-prophetnet"),p3o=o(" \u2014 "),Dj=a("a"),u3o=o("XLMProphetNetTokenizer"),_3o=o(" (XLM-ProphetNet model)"),b3o=l(),sl=a("li"),Rfe=a("strong"),v3o=o("xlm-roberta"),F3o=o(" \u2014 "),Gj=a("a"),T3o=o("XLMRobertaTokenizer"),M3o=o(" or "),Oj=a("a"),E3o=o("XLMRobertaTokenizerFast"),C3o=o(" (XLM-RoBERTa model)"),w3o=l(),ll=a("li"),Pfe=a("strong"),A3o=o("xlm-roberta-xl"),y3o=o(" \u2014 "),Vj=a("a"),L3o=o("RobertaTokenizer"),x3o=o(" or "),Xj=a("a"),$3o=o("RobertaTokenizerFast"),k3o=o(" (XLM-RoBERTa-XL model)"),S3o=l(),il=a("li"),Bfe=a("strong"),R3o=o("xlnet"),P3o=o(" \u2014 "),zj=a("a"),B3o=o("XLNetTokenizer"),I3o=o(" or "),Qj=a("a"),N3o=o("XLNetTokenizerFast"),q3o=o(" (XLNet model)"),j3o=l(),dl=a("li"),Ife=a("strong"),D3o=o("yoso"),G3o=o(" \u2014 "),Wj=a("a"),O3o=o("AlbertTokenizer"),V3o=o(" or "),Uj=a("a"),X3o=o("AlbertTokenizerFast"),z3o=o(" (YOSO model)"),Q3o=l(),F(gp.$$.fragment),W3o=l(),hp=a("div"),F(QL.$$.fragment),U3o=l(),Nfe=a("p"),H3o=o("Register a new tokenizer in this mapping."),WUe=l(),nd=a("h2"),pp=a("a"),qfe=a("span"),F(WL.$$.fragment),J3o=l(),jfe=a("span"),Y3o=o("AutoFeatureExtractor"),UUe=l(),ko=a("div"),F(UL.$$.fragment),K3o=l(),HL=a("p"),Z3o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hj=a("a"),eFo=o("AutoFeatureExtractor.from_pretrained()"),oFo=o(" class method."),rFo=l(),JL=a("p"),tFo=o("This class cannot be instantiated directly using "),Dfe=a("code"),aFo=o("__init__()"),nFo=o(" (throws an error)."),sFo=l(),He=a("div"),F(YL.$$.fragment),lFo=l(),Gfe=a("p"),iFo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dFo=l(),Qa=a("p"),cFo=o("The feature extractor class to instantiate is selected based on the "),Ofe=a("code"),fFo=o("model_type"),mFo=o(` property of the config object
(either passed as an argument or loaded from `),Vfe=a("code"),gFo=o("pretrained_model_name_or_path"),hFo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Xfe=a("code"),pFo=o("pretrained_model_name_or_path"),uFo=o(":"),_Fo=l(),W=a("ul"),up=a("li"),zfe=a("strong"),bFo=o("beit"),vFo=o(" \u2014 "),Jj=a("a"),FFo=o("BeitFeatureExtractor"),TFo=o(" (BEiT model)"),MFo=l(),_p=a("li"),Qfe=a("strong"),EFo=o("clip"),CFo=o(" \u2014 "),Yj=a("a"),wFo=o("CLIPFeatureExtractor"),AFo=o(" (CLIP model)"),yFo=l(),bp=a("li"),Wfe=a("strong"),LFo=o("convnext"),xFo=o(" \u2014 "),Kj=a("a"),$Fo=o("ConvNextFeatureExtractor"),kFo=o(" (ConvNeXT model)"),SFo=l(),vp=a("li"),Ufe=a("strong"),RFo=o("cvt"),PFo=o(" \u2014 "),Zj=a("a"),BFo=o("ConvNextFeatureExtractor"),IFo=o(" (CvT model)"),NFo=l(),Fp=a("li"),Hfe=a("strong"),qFo=o("data2vec-audio"),jFo=o(" \u2014 "),eD=a("a"),DFo=o("Wav2Vec2FeatureExtractor"),GFo=o(" (Data2VecAudio model)"),OFo=l(),Tp=a("li"),Jfe=a("strong"),VFo=o("data2vec-vision"),XFo=o(" \u2014 "),oD=a("a"),zFo=o("BeitFeatureExtractor"),QFo=o(" (Data2VecVision model)"),WFo=l(),Mp=a("li"),Yfe=a("strong"),UFo=o("deit"),HFo=o(" \u2014 "),rD=a("a"),JFo=o("DeiTFeatureExtractor"),YFo=o(" (DeiT model)"),KFo=l(),Ep=a("li"),Kfe=a("strong"),ZFo=o("detr"),e7o=o(" \u2014 "),tD=a("a"),o7o=o("DetrFeatureExtractor"),r7o=o(" (DETR model)"),t7o=l(),Cp=a("li"),Zfe=a("strong"),a7o=o("donut"),n7o=o(" \u2014 "),aD=a("a"),s7o=o("DonutFeatureExtractor"),l7o=o(" (Donut model)"),i7o=l(),wp=a("li"),eme=a("strong"),d7o=o("dpt"),c7o=o(" \u2014 "),nD=a("a"),f7o=o("DPTFeatureExtractor"),m7o=o(" (DPT model)"),g7o=l(),Ap=a("li"),ome=a("strong"),h7o=o("flava"),p7o=o(" \u2014 "),sD=a("a"),u7o=o("FlavaFeatureExtractor"),_7o=o(" (FLAVA model)"),b7o=l(),yp=a("li"),rme=a("strong"),v7o=o("glpn"),F7o=o(" \u2014 "),lD=a("a"),T7o=o("GLPNFeatureExtractor"),M7o=o(" (GLPN model)"),E7o=l(),Lp=a("li"),tme=a("strong"),C7o=o("groupvit"),w7o=o(" \u2014 "),iD=a("a"),A7o=o("CLIPFeatureExtractor"),y7o=o(" (GroupViT model)"),L7o=l(),xp=a("li"),ame=a("strong"),x7o=o("hubert"),$7o=o(" \u2014 "),dD=a("a"),k7o=o("Wav2Vec2FeatureExtractor"),S7o=o(" (Hubert model)"),R7o=l(),$p=a("li"),nme=a("strong"),P7o=o("imagegpt"),B7o=o(" \u2014 "),cD=a("a"),I7o=o("ImageGPTFeatureExtractor"),N7o=o(" (ImageGPT model)"),q7o=l(),kp=a("li"),sme=a("strong"),j7o=o("layoutlmv2"),D7o=o(" \u2014 "),fD=a("a"),G7o=o("LayoutLMv2FeatureExtractor"),O7o=o(" (LayoutLMv2 model)"),V7o=l(),Sp=a("li"),lme=a("strong"),X7o=o("layoutlmv3"),z7o=o(" \u2014 "),mD=a("a"),Q7o=o("LayoutLMv3FeatureExtractor"),W7o=o(" (LayoutLMv3 model)"),U7o=l(),Rp=a("li"),ime=a("strong"),H7o=o("levit"),J7o=o(" \u2014 "),gD=a("a"),Y7o=o("LevitFeatureExtractor"),K7o=o(" (LeViT model)"),Z7o=l(),Pp=a("li"),dme=a("strong"),eTo=o("maskformer"),oTo=o(" \u2014 "),hD=a("a"),rTo=o("MaskFormerFeatureExtractor"),tTo=o(" (MaskFormer model)"),aTo=l(),Bp=a("li"),cme=a("strong"),nTo=o("mctct"),sTo=o(" \u2014 "),pD=a("a"),lTo=o("MCTCTFeatureExtractor"),iTo=o(" (M-CTC-T model)"),dTo=l(),Ip=a("li"),fme=a("strong"),cTo=o("mobilevit"),fTo=o(" \u2014 "),uD=a("a"),mTo=o("MobileViTFeatureExtractor"),gTo=o(" (MobileViT model)"),hTo=l(),Np=a("li"),mme=a("strong"),pTo=o("owlvit"),uTo=o(" \u2014 "),_D=a("a"),_To=o("OwlViTFeatureExtractor"),bTo=o(" (OWL-ViT model)"),vTo=l(),qp=a("li"),gme=a("strong"),FTo=o("perceiver"),TTo=o(" \u2014 "),bD=a("a"),MTo=o("PerceiverFeatureExtractor"),ETo=o(" (Perceiver model)"),CTo=l(),jp=a("li"),hme=a("strong"),wTo=o("poolformer"),ATo=o(" \u2014 "),vD=a("a"),yTo=o("PoolFormerFeatureExtractor"),LTo=o(" (PoolFormer model)"),xTo=l(),Dp=a("li"),pme=a("strong"),$To=o("regnet"),kTo=o(" \u2014 "),FD=a("a"),STo=o("ConvNextFeatureExtractor"),RTo=o(" (RegNet model)"),PTo=l(),Gp=a("li"),ume=a("strong"),BTo=o("resnet"),ITo=o(" \u2014 "),TD=a("a"),NTo=o("ConvNextFeatureExtractor"),qTo=o(" (ResNet model)"),jTo=l(),Op=a("li"),_me=a("strong"),DTo=o("segformer"),GTo=o(" \u2014 "),MD=a("a"),OTo=o("SegformerFeatureExtractor"),VTo=o(" (SegFormer model)"),XTo=l(),Vp=a("li"),bme=a("strong"),zTo=o("speech_to_text"),QTo=o(" \u2014 "),ED=a("a"),WTo=o("Speech2TextFeatureExtractor"),UTo=o(" (Speech2Text model)"),HTo=l(),Xp=a("li"),vme=a("strong"),JTo=o("swin"),YTo=o(" \u2014 "),CD=a("a"),KTo=o("ViTFeatureExtractor"),ZTo=o(" (Swin Transformer model)"),e8o=l(),zp=a("li"),Fme=a("strong"),o8o=o("swinv2"),r8o=o(" \u2014 "),wD=a("a"),t8o=o("ViTFeatureExtractor"),a8o=o(" (Swin Transformer V2 model)"),n8o=l(),Qp=a("li"),Tme=a("strong"),s8o=o("van"),l8o=o(" \u2014 "),AD=a("a"),i8o=o("ConvNextFeatureExtractor"),d8o=o(" (VAN model)"),c8o=l(),Wp=a("li"),Mme=a("strong"),f8o=o("videomae"),m8o=o(" \u2014 "),yD=a("a"),g8o=o("ViTFeatureExtractor"),h8o=o(" (VideoMAE model)"),p8o=l(),Up=a("li"),Eme=a("strong"),u8o=o("vilt"),_8o=o(" \u2014 "),LD=a("a"),b8o=o("ViltFeatureExtractor"),v8o=o(" (ViLT model)"),F8o=l(),Hp=a("li"),Cme=a("strong"),T8o=o("vit"),M8o=o(" \u2014 "),xD=a("a"),E8o=o("ViTFeatureExtractor"),C8o=o(" (ViT model)"),w8o=l(),Jp=a("li"),wme=a("strong"),A8o=o("vit_mae"),y8o=o(" \u2014 "),$D=a("a"),L8o=o("ViTFeatureExtractor"),x8o=o(" (ViTMAE model)"),$8o=l(),Yp=a("li"),Ame=a("strong"),k8o=o("wav2vec2"),S8o=o(" \u2014 "),kD=a("a"),R8o=o("Wav2Vec2FeatureExtractor"),P8o=o(" (Wav2Vec2 model)"),B8o=l(),Kp=a("li"),yme=a("strong"),I8o=o("wav2vec2-conformer"),N8o=o(" \u2014 "),SD=a("a"),q8o=o("Wav2Vec2FeatureExtractor"),j8o=o(" (Wav2Vec2-Conformer model)"),D8o=l(),Zp=a("li"),Lme=a("strong"),G8o=o("yolos"),O8o=o(" \u2014 "),RD=a("a"),V8o=o("YolosFeatureExtractor"),X8o=o(" (YOLOS model)"),z8o=l(),F(eu.$$.fragment),Q8o=l(),F(ou.$$.fragment),W8o=l(),ru=a("div"),F(KL.$$.fragment),U8o=l(),xme=a("p"),H8o=o("Register a new feature extractor for this class."),HUe=l(),sd=a("h2"),tu=a("a"),$me=a("span"),F(ZL.$$.fragment),J8o=l(),kme=a("span"),Y8o=o("AutoProcessor"),JUe=l(),So=a("div"),F(e9.$$.fragment),K8o=l(),o9=a("p"),Z8o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PD=a("a"),eMo=o("AutoProcessor.from_pretrained()"),oMo=o(" class method."),rMo=l(),r9=a("p"),tMo=o("This class cannot be instantiated directly using "),Sme=a("code"),aMo=o("__init__()"),nMo=o(" (throws an error)."),sMo=l(),Je=a("div"),F(t9.$$.fragment),lMo=l(),Rme=a("p"),iMo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dMo=l(),ld=a("p"),cMo=o("The processor class to instantiate is selected based on the "),Pme=a("code"),fMo=o("model_type"),mMo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),gMo=o("pretrained_model_name_or_path"),hMo=o(" if possible):"),pMo=l(),ie=a("ul"),au=a("li"),Ime=a("strong"),uMo=o("clip"),_Mo=o(" \u2014 "),BD=a("a"),bMo=o("CLIPProcessor"),vMo=o(" (CLIP model)"),FMo=l(),nu=a("li"),Nme=a("strong"),TMo=o("donut"),MMo=o(" \u2014 "),ID=a("a"),EMo=o("DonutProcessor"),CMo=o(" (Donut model)"),wMo=l(),su=a("li"),qme=a("strong"),AMo=o("flava"),yMo=o(" \u2014 "),ND=a("a"),LMo=o("FlavaProcessor"),xMo=o(" (FLAVA model)"),$Mo=l(),lu=a("li"),jme=a("strong"),kMo=o("groupvit"),SMo=o(" \u2014 "),qD=a("a"),RMo=o("CLIPProcessor"),PMo=o(" (GroupViT model)"),BMo=l(),iu=a("li"),Dme=a("strong"),IMo=o("layoutlmv2"),NMo=o(" \u2014 "),jD=a("a"),qMo=o("LayoutLMv2Processor"),jMo=o(" (LayoutLMv2 model)"),DMo=l(),du=a("li"),Gme=a("strong"),GMo=o("layoutlmv3"),OMo=o(" \u2014 "),DD=a("a"),VMo=o("LayoutLMv3Processor"),XMo=o(" (LayoutLMv3 model)"),zMo=l(),cu=a("li"),Ome=a("strong"),QMo=o("layoutxlm"),WMo=o(" \u2014 "),GD=a("a"),UMo=o("LayoutXLMProcessor"),HMo=o(" (LayoutXLM model)"),JMo=l(),fu=a("li"),Vme=a("strong"),YMo=o("owlvit"),KMo=o(" \u2014 "),OD=a("a"),ZMo=o("OwlViTProcessor"),eEo=o(" (OWL-ViT model)"),oEo=l(),mu=a("li"),Xme=a("strong"),rEo=o("sew"),tEo=o(" \u2014 "),VD=a("a"),aEo=o("Wav2Vec2Processor"),nEo=o(" (SEW model)"),sEo=l(),gu=a("li"),zme=a("strong"),lEo=o("sew-d"),iEo=o(" \u2014 "),XD=a("a"),dEo=o("Wav2Vec2Processor"),cEo=o(" (SEW-D model)"),fEo=l(),hu=a("li"),Qme=a("strong"),mEo=o("speech_to_text"),gEo=o(" \u2014 "),zD=a("a"),hEo=o("Speech2TextProcessor"),pEo=o(" (Speech2Text model)"),uEo=l(),pu=a("li"),Wme=a("strong"),_Eo=o("speech_to_text_2"),bEo=o(" \u2014 "),QD=a("a"),vEo=o("Speech2Text2Processor"),FEo=o(" (Speech2Text2 model)"),TEo=l(),uu=a("li"),Ume=a("strong"),MEo=o("trocr"),EEo=o(" \u2014 "),WD=a("a"),CEo=o("TrOCRProcessor"),wEo=o(" (TrOCR model)"),AEo=l(),_u=a("li"),Hme=a("strong"),yEo=o("unispeech"),LEo=o(" \u2014 "),UD=a("a"),xEo=o("Wav2Vec2Processor"),$Eo=o(" (UniSpeech model)"),kEo=l(),bu=a("li"),Jme=a("strong"),SEo=o("unispeech-sat"),REo=o(" \u2014 "),HD=a("a"),PEo=o("Wav2Vec2Processor"),BEo=o(" (UniSpeechSat model)"),IEo=l(),vu=a("li"),Yme=a("strong"),NEo=o("vilt"),qEo=o(" \u2014 "),JD=a("a"),jEo=o("ViltProcessor"),DEo=o(" (ViLT model)"),GEo=l(),Fu=a("li"),Kme=a("strong"),OEo=o("vision-text-dual-encoder"),VEo=o(" \u2014 "),YD=a("a"),XEo=o("VisionTextDualEncoderProcessor"),zEo=o(" (VisionTextDualEncoder model)"),QEo=l(),Tu=a("li"),Zme=a("strong"),WEo=o("wav2vec2"),UEo=o(" \u2014 "),KD=a("a"),HEo=o("Wav2Vec2Processor"),JEo=o(" (Wav2Vec2 model)"),YEo=l(),Mu=a("li"),ege=a("strong"),KEo=o("wav2vec2-conformer"),ZEo=o(" \u2014 "),ZD=a("a"),e4o=o("Wav2Vec2Processor"),o4o=o(" (Wav2Vec2-Conformer model)"),r4o=l(),Eu=a("li"),oge=a("strong"),t4o=o("wavlm"),a4o=o(" \u2014 "),eG=a("a"),n4o=o("Wav2Vec2Processor"),s4o=o(" (WavLM model)"),l4o=l(),F(Cu.$$.fragment),i4o=l(),F(wu.$$.fragment),d4o=l(),Au=a("div"),F(a9.$$.fragment),c4o=l(),rge=a("p"),f4o=o("Register a new processor for this class."),YUe=l(),id=a("h2"),yu=a("a"),tge=a("span"),F(n9.$$.fragment),m4o=l(),age=a("span"),g4o=o("AutoModel"),KUe=l(),Ro=a("div"),F(s9.$$.fragment),h4o=l(),dd=a("p"),p4o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oG=a("a"),u4o=o("from_pretrained()"),_4o=o(" class method or the "),rG=a("a"),b4o=o("from_config()"),v4o=o(` class
method.`),F4o=l(),l9=a("p"),T4o=o("This class cannot be instantiated directly using "),nge=a("code"),M4o=o("__init__()"),E4o=o(" (throws an error)."),C4o=l(),ht=a("div"),F(i9.$$.fragment),w4o=l(),sge=a("p"),A4o=o("Instantiates one of the base model classes of the library from a configuration."),y4o=l(),cd=a("p"),L4o=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),x4o=o("not"),$4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),k4o=o("from_pretrained()"),S4o=o(" to load the model weights."),R4o=l(),F(Lu.$$.fragment),P4o=l(),Ye=a("div"),F(d9.$$.fragment),B4o=l(),ige=a("p"),I4o=o("Instantiate one of the base model classes of the library from a pretrained model."),N4o=l(),Wa=a("p"),q4o=o("The model class to instantiate is selected based on the "),dge=a("code"),j4o=o("model_type"),D4o=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),V4o=o("pretrained_model_name_or_path"),X4o=o(":"),z4o=l(),L=a("ul"),xu=a("li"),mge=a("strong"),Q4o=o("albert"),W4o=o(" \u2014 "),aG=a("a"),U4o=o("AlbertModel"),H4o=o(" (ALBERT model)"),J4o=l(),$u=a("li"),gge=a("strong"),Y4o=o("bart"),K4o=o(" \u2014 "),nG=a("a"),Z4o=o("BartModel"),eCo=o(" (BART model)"),oCo=l(),ku=a("li"),hge=a("strong"),rCo=o("beit"),tCo=o(" \u2014 "),sG=a("a"),aCo=o("BeitModel"),nCo=o(" (BEiT model)"),sCo=l(),Su=a("li"),pge=a("strong"),lCo=o("bert"),iCo=o(" \u2014 "),lG=a("a"),dCo=o("BertModel"),cCo=o(" (BERT model)"),fCo=l(),Ru=a("li"),uge=a("strong"),mCo=o("bert-generation"),gCo=o(" \u2014 "),iG=a("a"),hCo=o("BertGenerationEncoder"),pCo=o(" (Bert Generation model)"),uCo=l(),Pu=a("li"),_ge=a("strong"),_Co=o("big_bird"),bCo=o(" \u2014 "),dG=a("a"),vCo=o("BigBirdModel"),FCo=o(" (BigBird model)"),TCo=l(),Bu=a("li"),bge=a("strong"),MCo=o("bigbird_pegasus"),ECo=o(" \u2014 "),cG=a("a"),CCo=o("BigBirdPegasusModel"),wCo=o(" (BigBird-Pegasus model)"),ACo=l(),Iu=a("li"),vge=a("strong"),yCo=o("blenderbot"),LCo=o(" \u2014 "),fG=a("a"),xCo=o("BlenderbotModel"),$Co=o(" (Blenderbot model)"),kCo=l(),Nu=a("li"),Fge=a("strong"),SCo=o("blenderbot-small"),RCo=o(" \u2014 "),mG=a("a"),PCo=o("BlenderbotSmallModel"),BCo=o(" (BlenderbotSmall model)"),ICo=l(),qu=a("li"),Tge=a("strong"),NCo=o("bloom"),qCo=o(" \u2014 "),gG=a("a"),jCo=o("BloomModel"),DCo=o(" (BLOOM model)"),GCo=l(),ju=a("li"),Mge=a("strong"),OCo=o("camembert"),VCo=o(" \u2014 "),hG=a("a"),XCo=o("CamembertModel"),zCo=o(" (CamemBERT model)"),QCo=l(),Du=a("li"),Ege=a("strong"),WCo=o("canine"),UCo=o(" \u2014 "),pG=a("a"),HCo=o("CanineModel"),JCo=o(" (CANINE model)"),YCo=l(),Gu=a("li"),Cge=a("strong"),KCo=o("clip"),ZCo=o(" \u2014 "),uG=a("a"),e5o=o("CLIPModel"),o5o=o(" (CLIP model)"),r5o=l(),Ou=a("li"),wge=a("strong"),t5o=o("codegen"),a5o=o(" \u2014 "),_G=a("a"),n5o=o("CodeGenModel"),s5o=o(" (CodeGen model)"),l5o=l(),Vu=a("li"),Age=a("strong"),i5o=o("convbert"),d5o=o(" \u2014 "),bG=a("a"),c5o=o("ConvBertModel"),f5o=o(" (ConvBERT model)"),m5o=l(),Xu=a("li"),yge=a("strong"),g5o=o("convnext"),h5o=o(" \u2014 "),vG=a("a"),p5o=o("ConvNextModel"),u5o=o(" (ConvNeXT model)"),_5o=l(),zu=a("li"),Lge=a("strong"),b5o=o("ctrl"),v5o=o(" \u2014 "),FG=a("a"),F5o=o("CTRLModel"),T5o=o(" (CTRL model)"),M5o=l(),Qu=a("li"),xge=a("strong"),E5o=o("cvt"),C5o=o(" \u2014 "),TG=a("a"),w5o=o("CvtModel"),A5o=o(" (CvT model)"),y5o=l(),Wu=a("li"),$ge=a("strong"),L5o=o("data2vec-audio"),x5o=o(" \u2014 "),MG=a("a"),$5o=o("Data2VecAudioModel"),k5o=o(" (Data2VecAudio model)"),S5o=l(),Uu=a("li"),kge=a("strong"),R5o=o("data2vec-text"),P5o=o(" \u2014 "),EG=a("a"),B5o=o("Data2VecTextModel"),I5o=o(" (Data2VecText model)"),N5o=l(),Hu=a("li"),Sge=a("strong"),q5o=o("data2vec-vision"),j5o=o(" \u2014 "),CG=a("a"),D5o=o("Data2VecVisionModel"),G5o=o(" (Data2VecVision model)"),O5o=l(),Ju=a("li"),Rge=a("strong"),V5o=o("deberta"),X5o=o(" \u2014 "),wG=a("a"),z5o=o("DebertaModel"),Q5o=o(" (DeBERTa model)"),W5o=l(),Yu=a("li"),Pge=a("strong"),U5o=o("deberta-v2"),H5o=o(" \u2014 "),AG=a("a"),J5o=o("DebertaV2Model"),Y5o=o(" (DeBERTa-v2 model)"),K5o=l(),Ku=a("li"),Bge=a("strong"),Z5o=o("decision_transformer"),e0o=o(" \u2014 "),yG=a("a"),o0o=o("DecisionTransformerModel"),r0o=o(" (Decision Transformer model)"),t0o=l(),Zu=a("li"),Ige=a("strong"),a0o=o("deit"),n0o=o(" \u2014 "),LG=a("a"),s0o=o("DeiTModel"),l0o=o(" (DeiT model)"),i0o=l(),e_=a("li"),Nge=a("strong"),d0o=o("detr"),c0o=o(" \u2014 "),xG=a("a"),f0o=o("DetrModel"),m0o=o(" (DETR model)"),g0o=l(),o_=a("li"),qge=a("strong"),h0o=o("distilbert"),p0o=o(" \u2014 "),$G=a("a"),u0o=o("DistilBertModel"),_0o=o(" (DistilBERT model)"),b0o=l(),r_=a("li"),jge=a("strong"),v0o=o("donut-swin"),F0o=o(" \u2014 "),kG=a("a"),T0o=o("DonutSwinModel"),M0o=o(" (DonutSwin model)"),E0o=l(),t_=a("li"),Dge=a("strong"),C0o=o("dpr"),w0o=o(" \u2014 "),SG=a("a"),A0o=o("DPRQuestionEncoder"),y0o=o(" (DPR model)"),L0o=l(),a_=a("li"),Gge=a("strong"),x0o=o("dpt"),$0o=o(" \u2014 "),RG=a("a"),k0o=o("DPTModel"),S0o=o(" (DPT model)"),R0o=l(),n_=a("li"),Oge=a("strong"),P0o=o("electra"),B0o=o(" \u2014 "),PG=a("a"),I0o=o("ElectraModel"),N0o=o(" (ELECTRA model)"),q0o=l(),s_=a("li"),Vge=a("strong"),j0o=o("flaubert"),D0o=o(" \u2014 "),BG=a("a"),G0o=o("FlaubertModel"),O0o=o(" (FlauBERT model)"),V0o=l(),l_=a("li"),Xge=a("strong"),X0o=o("flava"),z0o=o(" \u2014 "),IG=a("a"),Q0o=o("FlavaModel"),W0o=o(" (FLAVA model)"),U0o=l(),i_=a("li"),zge=a("strong"),H0o=o("fnet"),J0o=o(" \u2014 "),NG=a("a"),Y0o=o("FNetModel"),K0o=o(" (FNet model)"),Z0o=l(),d_=a("li"),Qge=a("strong"),ewo=o("fsmt"),owo=o(" \u2014 "),qG=a("a"),rwo=o("FSMTModel"),two=o(" (FairSeq Machine-Translation model)"),awo=l(),cl=a("li"),Wge=a("strong"),nwo=o("funnel"),swo=o(" \u2014 "),jG=a("a"),lwo=o("FunnelModel"),iwo=o(" or "),DG=a("a"),dwo=o("FunnelBaseModel"),cwo=o(" (Funnel Transformer model)"),fwo=l(),c_=a("li"),Uge=a("strong"),mwo=o("glpn"),gwo=o(" \u2014 "),GG=a("a"),hwo=o("GLPNModel"),pwo=o(" (GLPN model)"),uwo=l(),f_=a("li"),Hge=a("strong"),_wo=o("gpt2"),bwo=o(" \u2014 "),OG=a("a"),vwo=o("GPT2Model"),Fwo=o(" (OpenAI GPT-2 model)"),Two=l(),m_=a("li"),Jge=a("strong"),Mwo=o("gpt_neo"),Ewo=o(" \u2014 "),VG=a("a"),Cwo=o("GPTNeoModel"),wwo=o(" (GPT Neo model)"),Awo=l(),g_=a("li"),Yge=a("strong"),ywo=o("gpt_neox"),Lwo=o(" \u2014 "),XG=a("a"),xwo=o("GPTNeoXModel"),$wo=o(" (GPT NeoX model)"),kwo=l(),h_=a("li"),Kge=a("strong"),Swo=o("gptj"),Rwo=o(" \u2014 "),zG=a("a"),Pwo=o("GPTJModel"),Bwo=o(" (GPT-J model)"),Iwo=l(),p_=a("li"),Zge=a("strong"),Nwo=o("groupvit"),qwo=o(" \u2014 "),QG=a("a"),jwo=o("GroupViTModel"),Dwo=o(" (GroupViT model)"),Gwo=l(),u_=a("li"),ehe=a("strong"),Owo=o("hubert"),Vwo=o(" \u2014 "),WG=a("a"),Xwo=o("HubertModel"),zwo=o(" (Hubert model)"),Qwo=l(),__=a("li"),ohe=a("strong"),Wwo=o("ibert"),Uwo=o(" \u2014 "),UG=a("a"),Hwo=o("IBertModel"),Jwo=o(" (I-BERT model)"),Ywo=l(),b_=a("li"),rhe=a("strong"),Kwo=o("imagegpt"),Zwo=o(" \u2014 "),HG=a("a"),eAo=o("ImageGPTModel"),oAo=o(" (ImageGPT model)"),rAo=l(),v_=a("li"),the=a("strong"),tAo=o("layoutlm"),aAo=o(" \u2014 "),JG=a("a"),nAo=o("LayoutLMModel"),sAo=o(" (LayoutLM model)"),lAo=l(),F_=a("li"),ahe=a("strong"),iAo=o("layoutlmv2"),dAo=o(" \u2014 "),YG=a("a"),cAo=o("LayoutLMv2Model"),fAo=o(" (LayoutLMv2 model)"),mAo=l(),T_=a("li"),nhe=a("strong"),gAo=o("layoutlmv3"),hAo=o(" \u2014 "),KG=a("a"),pAo=o("LayoutLMv3Model"),uAo=o(" (LayoutLMv3 model)"),_Ao=l(),M_=a("li"),she=a("strong"),bAo=o("led"),vAo=o(" \u2014 "),ZG=a("a"),FAo=o("LEDModel"),TAo=o(" (LED model)"),MAo=l(),E_=a("li"),lhe=a("strong"),EAo=o("levit"),CAo=o(" \u2014 "),eO=a("a"),wAo=o("LevitModel"),AAo=o(" (LeViT model)"),yAo=l(),C_=a("li"),ihe=a("strong"),LAo=o("longformer"),xAo=o(" \u2014 "),oO=a("a"),$Ao=o("LongformerModel"),kAo=o(" (Longformer model)"),SAo=l(),w_=a("li"),dhe=a("strong"),RAo=o("longt5"),PAo=o(" \u2014 "),rO=a("a"),BAo=o("LongT5Model"),IAo=o(" (LongT5 model)"),NAo=l(),A_=a("li"),che=a("strong"),qAo=o("luke"),jAo=o(" \u2014 "),tO=a("a"),DAo=o("LukeModel"),GAo=o(" (LUKE model)"),OAo=l(),y_=a("li"),fhe=a("strong"),VAo=o("lxmert"),XAo=o(" \u2014 "),aO=a("a"),zAo=o("LxmertModel"),QAo=o(" (LXMERT model)"),WAo=l(),L_=a("li"),mhe=a("strong"),UAo=o("m2m_100"),HAo=o(" \u2014 "),nO=a("a"),JAo=o("M2M100Model"),YAo=o(" (M2M100 model)"),KAo=l(),x_=a("li"),ghe=a("strong"),ZAo=o("marian"),e6o=o(" \u2014 "),sO=a("a"),o6o=o("MarianModel"),r6o=o(" (Marian model)"),t6o=l(),$_=a("li"),hhe=a("strong"),a6o=o("maskformer"),n6o=o(" \u2014 "),lO=a("a"),s6o=o("MaskFormerModel"),l6o=o(" (MaskFormer model)"),i6o=l(),k_=a("li"),phe=a("strong"),d6o=o("mbart"),c6o=o(" \u2014 "),iO=a("a"),f6o=o("MBartModel"),m6o=o(" (mBART model)"),g6o=l(),S_=a("li"),uhe=a("strong"),h6o=o("mctct"),p6o=o(" \u2014 "),dO=a("a"),u6o=o("MCTCTModel"),_6o=o(" (M-CTC-T model)"),b6o=l(),R_=a("li"),_he=a("strong"),v6o=o("megatron-bert"),F6o=o(" \u2014 "),cO=a("a"),T6o=o("MegatronBertModel"),M6o=o(" (Megatron-BERT model)"),E6o=l(),P_=a("li"),bhe=a("strong"),C6o=o("mobilebert"),w6o=o(" \u2014 "),fO=a("a"),A6o=o("MobileBertModel"),y6o=o(" (MobileBERT model)"),L6o=l(),B_=a("li"),vhe=a("strong"),x6o=o("mobilevit"),$6o=o(" \u2014 "),mO=a("a"),k6o=o("MobileViTModel"),S6o=o(" (MobileViT model)"),R6o=l(),I_=a("li"),Fhe=a("strong"),P6o=o("mpnet"),B6o=o(" \u2014 "),gO=a("a"),I6o=o("MPNetModel"),N6o=o(" (MPNet model)"),q6o=l(),N_=a("li"),The=a("strong"),j6o=o("mt5"),D6o=o(" \u2014 "),hO=a("a"),G6o=o("MT5Model"),O6o=o(" (MT5 model)"),V6o=l(),q_=a("li"),Mhe=a("strong"),X6o=o("mvp"),z6o=o(" \u2014 "),pO=a("a"),Q6o=o("MvpModel"),W6o=o(" (MVP model)"),U6o=l(),j_=a("li"),Ehe=a("strong"),H6o=o("nezha"),J6o=o(" \u2014 "),uO=a("a"),Y6o=o("NezhaModel"),K6o=o(" (Nezha model)"),Z6o=l(),D_=a("li"),Che=a("strong"),eyo=o("nllb"),oyo=o(" \u2014 "),_O=a("a"),ryo=o("M2M100Model"),tyo=o(" (NLLB model)"),ayo=l(),G_=a("li"),whe=a("strong"),nyo=o("nystromformer"),syo=o(" \u2014 "),bO=a("a"),lyo=o("NystromformerModel"),iyo=o(" (Nystr\xF6mformer model)"),dyo=l(),O_=a("li"),Ahe=a("strong"),cyo=o("openai-gpt"),fyo=o(" \u2014 "),vO=a("a"),myo=o("OpenAIGPTModel"),gyo=o(" (OpenAI GPT model)"),hyo=l(),V_=a("li"),yhe=a("strong"),pyo=o("opt"),uyo=o(" \u2014 "),FO=a("a"),_yo=o("OPTModel"),byo=o(" (OPT model)"),vyo=l(),X_=a("li"),Lhe=a("strong"),Fyo=o("owlvit"),Tyo=o(" \u2014 "),TO=a("a"),Myo=o("OwlViTModel"),Eyo=o(" (OWL-ViT model)"),Cyo=l(),z_=a("li"),xhe=a("strong"),wyo=o("pegasus"),Ayo=o(" \u2014 "),MO=a("a"),yyo=o("PegasusModel"),Lyo=o(" (Pegasus model)"),xyo=l(),Q_=a("li"),$he=a("strong"),$yo=o("perceiver"),kyo=o(" \u2014 "),EO=a("a"),Syo=o("PerceiverModel"),Ryo=o(" (Perceiver model)"),Pyo=l(),W_=a("li"),khe=a("strong"),Byo=o("plbart"),Iyo=o(" \u2014 "),CO=a("a"),Nyo=o("PLBartModel"),qyo=o(" (PLBart model)"),jyo=l(),U_=a("li"),She=a("strong"),Dyo=o("poolformer"),Gyo=o(" \u2014 "),wO=a("a"),Oyo=o("PoolFormerModel"),Vyo=o(" (PoolFormer model)"),Xyo=l(),H_=a("li"),Rhe=a("strong"),zyo=o("prophetnet"),Qyo=o(" \u2014 "),AO=a("a"),Wyo=o("ProphetNetModel"),Uyo=o(" (ProphetNet model)"),Hyo=l(),J_=a("li"),Phe=a("strong"),Jyo=o("qdqbert"),Yyo=o(" \u2014 "),yO=a("a"),Kyo=o("QDQBertModel"),Zyo=o(" (QDQBert model)"),eLo=l(),Y_=a("li"),Bhe=a("strong"),oLo=o("reformer"),rLo=o(" \u2014 "),LO=a("a"),tLo=o("ReformerModel"),aLo=o(" (Reformer model)"),nLo=l(),K_=a("li"),Ihe=a("strong"),sLo=o("regnet"),lLo=o(" \u2014 "),xO=a("a"),iLo=o("RegNetModel"),dLo=o(" (RegNet model)"),cLo=l(),Z_=a("li"),Nhe=a("strong"),fLo=o("rembert"),mLo=o(" \u2014 "),$O=a("a"),gLo=o("RemBertModel"),hLo=o(" (RemBERT model)"),pLo=l(),e2=a("li"),qhe=a("strong"),uLo=o("resnet"),_Lo=o(" \u2014 "),kO=a("a"),bLo=o("ResNetModel"),vLo=o(" (ResNet model)"),FLo=l(),o2=a("li"),jhe=a("strong"),TLo=o("retribert"),MLo=o(" \u2014 "),SO=a("a"),ELo=o("RetriBertModel"),CLo=o(" (RetriBERT model)"),wLo=l(),r2=a("li"),Dhe=a("strong"),ALo=o("roberta"),yLo=o(" \u2014 "),RO=a("a"),LLo=o("RobertaModel"),xLo=o(" (RoBERTa model)"),$Lo=l(),t2=a("li"),Ghe=a("strong"),kLo=o("roformer"),SLo=o(" \u2014 "),PO=a("a"),RLo=o("RoFormerModel"),PLo=o(" (RoFormer model)"),BLo=l(),a2=a("li"),Ohe=a("strong"),ILo=o("segformer"),NLo=o(" \u2014 "),BO=a("a"),qLo=o("SegformerModel"),jLo=o(" (SegFormer model)"),DLo=l(),n2=a("li"),Vhe=a("strong"),GLo=o("sew"),OLo=o(" \u2014 "),IO=a("a"),VLo=o("SEWModel"),XLo=o(" (SEW model)"),zLo=l(),s2=a("li"),Xhe=a("strong"),QLo=o("sew-d"),WLo=o(" \u2014 "),NO=a("a"),ULo=o("SEWDModel"),HLo=o(" (SEW-D model)"),JLo=l(),l2=a("li"),zhe=a("strong"),YLo=o("speech_to_text"),KLo=o(" \u2014 "),qO=a("a"),ZLo=o("Speech2TextModel"),e9o=o(" (Speech2Text model)"),o9o=l(),i2=a("li"),Qhe=a("strong"),r9o=o("splinter"),t9o=o(" \u2014 "),jO=a("a"),a9o=o("SplinterModel"),n9o=o(" (Splinter model)"),s9o=l(),d2=a("li"),Whe=a("strong"),l9o=o("squeezebert"),i9o=o(" \u2014 "),DO=a("a"),d9o=o("SqueezeBertModel"),c9o=o(" (SqueezeBERT model)"),f9o=l(),c2=a("li"),Uhe=a("strong"),m9o=o("swin"),g9o=o(" \u2014 "),GO=a("a"),h9o=o("SwinModel"),p9o=o(" (Swin Transformer model)"),u9o=l(),f2=a("li"),Hhe=a("strong"),_9o=o("swinv2"),b9o=o(" \u2014 "),OO=a("a"),v9o=o("Swinv2Model"),F9o=o(" (Swin Transformer V2 model)"),T9o=l(),m2=a("li"),Jhe=a("strong"),M9o=o("t5"),E9o=o(" \u2014 "),VO=a("a"),C9o=o("T5Model"),w9o=o(" (T5 model)"),A9o=l(),g2=a("li"),Yhe=a("strong"),y9o=o("tapas"),L9o=o(" \u2014 "),XO=a("a"),x9o=o("TapasModel"),$9o=o(" (TAPAS model)"),k9o=l(),h2=a("li"),Khe=a("strong"),S9o=o("trajectory_transformer"),R9o=o(" \u2014 "),zO=a("a"),P9o=o("TrajectoryTransformerModel"),B9o=o(" (Trajectory Transformer model)"),I9o=l(),p2=a("li"),Zhe=a("strong"),N9o=o("transfo-xl"),q9o=o(" \u2014 "),QO=a("a"),j9o=o("TransfoXLModel"),D9o=o(" (Transformer-XL model)"),G9o=l(),u2=a("li"),epe=a("strong"),O9o=o("unispeech"),V9o=o(" \u2014 "),WO=a("a"),X9o=o("UniSpeechModel"),z9o=o(" (UniSpeech model)"),Q9o=l(),_2=a("li"),ope=a("strong"),W9o=o("unispeech-sat"),U9o=o(" \u2014 "),UO=a("a"),H9o=o("UniSpeechSatModel"),J9o=o(" (UniSpeechSat model)"),Y9o=l(),b2=a("li"),rpe=a("strong"),K9o=o("van"),Z9o=o(" \u2014 "),HO=a("a"),exo=o("VanModel"),oxo=o(" (VAN model)"),rxo=l(),v2=a("li"),tpe=a("strong"),txo=o("videomae"),axo=o(" \u2014 "),JO=a("a"),nxo=o("VideoMAEModel"),sxo=o(" (VideoMAE model)"),lxo=l(),F2=a("li"),ape=a("strong"),ixo=o("vilt"),dxo=o(" \u2014 "),YO=a("a"),cxo=o("ViltModel"),fxo=o(" (ViLT model)"),mxo=l(),T2=a("li"),npe=a("strong"),gxo=o("vision-text-dual-encoder"),hxo=o(" \u2014 "),KO=a("a"),pxo=o("VisionTextDualEncoderModel"),uxo=o(" (VisionTextDualEncoder model)"),_xo=l(),M2=a("li"),spe=a("strong"),bxo=o("visual_bert"),vxo=o(" \u2014 "),ZO=a("a"),Fxo=o("VisualBertModel"),Txo=o(" (VisualBERT model)"),Mxo=l(),E2=a("li"),lpe=a("strong"),Exo=o("vit"),Cxo=o(" \u2014 "),eV=a("a"),wxo=o("ViTModel"),Axo=o(" (ViT model)"),yxo=l(),C2=a("li"),ipe=a("strong"),Lxo=o("vit_mae"),xxo=o(" \u2014 "),oV=a("a"),$xo=o("ViTMAEModel"),kxo=o(" (ViTMAE model)"),Sxo=l(),w2=a("li"),dpe=a("strong"),Rxo=o("wav2vec2"),Pxo=o(" \u2014 "),rV=a("a"),Bxo=o("Wav2Vec2Model"),Ixo=o(" (Wav2Vec2 model)"),Nxo=l(),A2=a("li"),cpe=a("strong"),qxo=o("wav2vec2-conformer"),jxo=o(" \u2014 "),tV=a("a"),Dxo=o("Wav2Vec2ConformerModel"),Gxo=o(" (Wav2Vec2-Conformer model)"),Oxo=l(),y2=a("li"),fpe=a("strong"),Vxo=o("wavlm"),Xxo=o(" \u2014 "),aV=a("a"),zxo=o("WavLMModel"),Qxo=o(" (WavLM model)"),Wxo=l(),L2=a("li"),mpe=a("strong"),Uxo=o("xglm"),Hxo=o(" \u2014 "),nV=a("a"),Jxo=o("XGLMModel"),Yxo=o(" (XGLM model)"),Kxo=l(),x2=a("li"),gpe=a("strong"),Zxo=o("xlm"),e$o=o(" \u2014 "),sV=a("a"),o$o=o("XLMModel"),r$o=o(" (XLM model)"),t$o=l(),$2=a("li"),hpe=a("strong"),a$o=o("xlm-prophetnet"),n$o=o(" \u2014 "),lV=a("a"),s$o=o("XLMProphetNetModel"),l$o=o(" (XLM-ProphetNet model)"),i$o=l(),k2=a("li"),ppe=a("strong"),d$o=o("xlm-roberta"),c$o=o(" \u2014 "),iV=a("a"),f$o=o("XLMRobertaModel"),m$o=o(" (XLM-RoBERTa model)"),g$o=l(),S2=a("li"),upe=a("strong"),h$o=o("xlm-roberta-xl"),p$o=o(" \u2014 "),dV=a("a"),u$o=o("XLMRobertaXLModel"),_$o=o(" (XLM-RoBERTa-XL model)"),b$o=l(),R2=a("li"),_pe=a("strong"),v$o=o("xlnet"),F$o=o(" \u2014 "),cV=a("a"),T$o=o("XLNetModel"),M$o=o(" (XLNet model)"),E$o=l(),P2=a("li"),bpe=a("strong"),C$o=o("yolos"),w$o=o(" \u2014 "),fV=a("a"),A$o=o("YolosModel"),y$o=o(" (YOLOS model)"),L$o=l(),B2=a("li"),vpe=a("strong"),x$o=o("yoso"),$$o=o(" \u2014 "),mV=a("a"),k$o=o("YosoModel"),S$o=o(" (YOSO model)"),R$o=l(),I2=a("p"),P$o=o("The model is set in evaluation mode by default using "),Fpe=a("code"),B$o=o("model.eval()"),I$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=a("code"),N$o=o("model.train()"),q$o=l(),F(N2.$$.fragment),ZUe=l(),fd=a("h2"),q2=a("a"),Mpe=a("span"),F(c9.$$.fragment),j$o=l(),Epe=a("span"),D$o=o("AutoModelForPreTraining"),eHe=l(),Po=a("div"),F(f9.$$.fragment),G$o=l(),md=a("p"),O$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gV=a("a"),V$o=o("from_pretrained()"),X$o=o(" class method or the "),hV=a("a"),z$o=o("from_config()"),Q$o=o(` class
method.`),W$o=l(),m9=a("p"),U$o=o("This class cannot be instantiated directly using "),Cpe=a("code"),H$o=o("__init__()"),J$o=o(" (throws an error)."),Y$o=l(),pt=a("div"),F(g9.$$.fragment),K$o=l(),wpe=a("p"),Z$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eko=l(),gd=a("p"),oko=o(`Note:
Loading a model from its configuration file does `),Ape=a("strong"),rko=o("not"),tko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),ako=o("from_pretrained()"),nko=o(" to load the model weights."),sko=l(),F(j2.$$.fragment),lko=l(),Ke=a("div"),F(h9.$$.fragment),iko=l(),ype=a("p"),dko=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cko=l(),Ua=a("p"),fko=o("The model class to instantiate is selected based on the "),Lpe=a("code"),mko=o("model_type"),gko=o(` property of the config object (either
passed as an argument or loaded from `),xpe=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=a("code"),uko=o("pretrained_model_name_or_path"),_ko=o(":"),bko=l(),G=a("ul"),D2=a("li"),kpe=a("strong"),vko=o("albert"),Fko=o(" \u2014 "),uV=a("a"),Tko=o("AlbertForPreTraining"),Mko=o(" (ALBERT model)"),Eko=l(),G2=a("li"),Spe=a("strong"),Cko=o("bart"),wko=o(" \u2014 "),_V=a("a"),Ako=o("BartForConditionalGeneration"),yko=o(" (BART model)"),Lko=l(),O2=a("li"),Rpe=a("strong"),xko=o("bert"),$ko=o(" \u2014 "),bV=a("a"),kko=o("BertForPreTraining"),Sko=o(" (BERT model)"),Rko=l(),V2=a("li"),Ppe=a("strong"),Pko=o("big_bird"),Bko=o(" \u2014 "),vV=a("a"),Iko=o("BigBirdForPreTraining"),Nko=o(" (BigBird model)"),qko=l(),X2=a("li"),Bpe=a("strong"),jko=o("bloom"),Dko=o(" \u2014 "),FV=a("a"),Gko=o("BloomForCausalLM"),Oko=o(" (BLOOM model)"),Vko=l(),z2=a("li"),Ipe=a("strong"),Xko=o("camembert"),zko=o(" \u2014 "),TV=a("a"),Qko=o("CamembertForMaskedLM"),Wko=o(" (CamemBERT model)"),Uko=l(),Q2=a("li"),Npe=a("strong"),Hko=o("ctrl"),Jko=o(" \u2014 "),MV=a("a"),Yko=o("CTRLLMHeadModel"),Kko=o(" (CTRL model)"),Zko=l(),W2=a("li"),qpe=a("strong"),eSo=o("data2vec-text"),oSo=o(" \u2014 "),EV=a("a"),rSo=o("Data2VecTextForMaskedLM"),tSo=o(" (Data2VecText model)"),aSo=l(),U2=a("li"),jpe=a("strong"),nSo=o("deberta"),sSo=o(" \u2014 "),CV=a("a"),lSo=o("DebertaForMaskedLM"),iSo=o(" (DeBERTa model)"),dSo=l(),H2=a("li"),Dpe=a("strong"),cSo=o("deberta-v2"),fSo=o(" \u2014 "),wV=a("a"),mSo=o("DebertaV2ForMaskedLM"),gSo=o(" (DeBERTa-v2 model)"),hSo=l(),J2=a("li"),Gpe=a("strong"),pSo=o("distilbert"),uSo=o(" \u2014 "),AV=a("a"),_So=o("DistilBertForMaskedLM"),bSo=o(" (DistilBERT model)"),vSo=l(),Y2=a("li"),Ope=a("strong"),FSo=o("electra"),TSo=o(" \u2014 "),yV=a("a"),MSo=o("ElectraForPreTraining"),ESo=o(" (ELECTRA model)"),CSo=l(),K2=a("li"),Vpe=a("strong"),wSo=o("flaubert"),ASo=o(" \u2014 "),LV=a("a"),ySo=o("FlaubertWithLMHeadModel"),LSo=o(" (FlauBERT model)"),xSo=l(),Z2=a("li"),Xpe=a("strong"),$So=o("flava"),kSo=o(" \u2014 "),xV=a("a"),SSo=o("FlavaForPreTraining"),RSo=o(" (FLAVA model)"),PSo=l(),e1=a("li"),zpe=a("strong"),BSo=o("fnet"),ISo=o(" \u2014 "),$V=a("a"),NSo=o("FNetForPreTraining"),qSo=o(" (FNet model)"),jSo=l(),o1=a("li"),Qpe=a("strong"),DSo=o("fsmt"),GSo=o(" \u2014 "),kV=a("a"),OSo=o("FSMTForConditionalGeneration"),VSo=o(" (FairSeq Machine-Translation model)"),XSo=l(),r1=a("li"),Wpe=a("strong"),zSo=o("funnel"),QSo=o(" \u2014 "),SV=a("a"),WSo=o("FunnelForPreTraining"),USo=o(" (Funnel Transformer model)"),HSo=l(),t1=a("li"),Upe=a("strong"),JSo=o("gpt2"),YSo=o(" \u2014 "),RV=a("a"),KSo=o("GPT2LMHeadModel"),ZSo=o(" (OpenAI GPT-2 model)"),eRo=l(),a1=a("li"),Hpe=a("strong"),oRo=o("ibert"),rRo=o(" \u2014 "),PV=a("a"),tRo=o("IBertForMaskedLM"),aRo=o(" (I-BERT model)"),nRo=l(),n1=a("li"),Jpe=a("strong"),sRo=o("layoutlm"),lRo=o(" \u2014 "),BV=a("a"),iRo=o("LayoutLMForMaskedLM"),dRo=o(" (LayoutLM model)"),cRo=l(),s1=a("li"),Ype=a("strong"),fRo=o("longformer"),mRo=o(" \u2014 "),IV=a("a"),gRo=o("LongformerForMaskedLM"),hRo=o(" (Longformer model)"),pRo=l(),l1=a("li"),Kpe=a("strong"),uRo=o("luke"),_Ro=o(" \u2014 "),NV=a("a"),bRo=o("LukeForMaskedLM"),vRo=o(" (LUKE model)"),FRo=l(),i1=a("li"),Zpe=a("strong"),TRo=o("lxmert"),MRo=o(" \u2014 "),qV=a("a"),ERo=o("LxmertForPreTraining"),CRo=o(" (LXMERT model)"),wRo=l(),d1=a("li"),eue=a("strong"),ARo=o("megatron-bert"),yRo=o(" \u2014 "),jV=a("a"),LRo=o("MegatronBertForPreTraining"),xRo=o(" (Megatron-BERT model)"),$Ro=l(),c1=a("li"),oue=a("strong"),kRo=o("mobilebert"),SRo=o(" \u2014 "),DV=a("a"),RRo=o("MobileBertForPreTraining"),PRo=o(" (MobileBERT model)"),BRo=l(),f1=a("li"),rue=a("strong"),IRo=o("mpnet"),NRo=o(" \u2014 "),GV=a("a"),qRo=o("MPNetForMaskedLM"),jRo=o(" (MPNet model)"),DRo=l(),m1=a("li"),tue=a("strong"),GRo=o("mvp"),ORo=o(" \u2014 "),OV=a("a"),VRo=o("MvpForConditionalGeneration"),XRo=o(" (MVP model)"),zRo=l(),g1=a("li"),aue=a("strong"),QRo=o("nezha"),WRo=o(" \u2014 "),VV=a("a"),URo=o("NezhaForPreTraining"),HRo=o(" (Nezha model)"),JRo=l(),h1=a("li"),nue=a("strong"),YRo=o("openai-gpt"),KRo=o(" \u2014 "),XV=a("a"),ZRo=o("OpenAIGPTLMHeadModel"),ePo=o(" (OpenAI GPT model)"),oPo=l(),p1=a("li"),sue=a("strong"),rPo=o("retribert"),tPo=o(" \u2014 "),zV=a("a"),aPo=o("RetriBertModel"),nPo=o(" (RetriBERT model)"),sPo=l(),u1=a("li"),lue=a("strong"),lPo=o("roberta"),iPo=o(" \u2014 "),QV=a("a"),dPo=o("RobertaForMaskedLM"),cPo=o(" (RoBERTa model)"),fPo=l(),_1=a("li"),iue=a("strong"),mPo=o("splinter"),gPo=o(" \u2014 "),WV=a("a"),hPo=o("SplinterForPreTraining"),pPo=o(" (Splinter model)"),uPo=l(),b1=a("li"),due=a("strong"),_Po=o("squeezebert"),bPo=o(" \u2014 "),UV=a("a"),vPo=o("SqueezeBertForMaskedLM"),FPo=o(" (SqueezeBERT model)"),TPo=l(),v1=a("li"),cue=a("strong"),MPo=o("t5"),EPo=o(" \u2014 "),HV=a("a"),CPo=o("T5ForConditionalGeneration"),wPo=o(" (T5 model)"),APo=l(),F1=a("li"),fue=a("strong"),yPo=o("tapas"),LPo=o(" \u2014 "),JV=a("a"),xPo=o("TapasForMaskedLM"),$Po=o(" (TAPAS model)"),kPo=l(),T1=a("li"),mue=a("strong"),SPo=o("transfo-xl"),RPo=o(" \u2014 "),YV=a("a"),PPo=o("TransfoXLLMHeadModel"),BPo=o(" (Transformer-XL model)"),IPo=l(),M1=a("li"),gue=a("strong"),NPo=o("unispeech"),qPo=o(" \u2014 "),KV=a("a"),jPo=o("UniSpeechForPreTraining"),DPo=o(" (UniSpeech model)"),GPo=l(),E1=a("li"),hue=a("strong"),OPo=o("unispeech-sat"),VPo=o(" \u2014 "),ZV=a("a"),XPo=o("UniSpeechSatForPreTraining"),zPo=o(" (UniSpeechSat model)"),QPo=l(),C1=a("li"),pue=a("strong"),WPo=o("videomae"),UPo=o(" \u2014 "),eX=a("a"),HPo=o("VideoMAEForPreTraining"),JPo=o(" (VideoMAE model)"),YPo=l(),w1=a("li"),uue=a("strong"),KPo=o("visual_bert"),ZPo=o(" \u2014 "),oX=a("a"),eBo=o("VisualBertForPreTraining"),oBo=o(" (VisualBERT model)"),rBo=l(),A1=a("li"),_ue=a("strong"),tBo=o("vit_mae"),aBo=o(" \u2014 "),rX=a("a"),nBo=o("ViTMAEForPreTraining"),sBo=o(" (ViTMAE model)"),lBo=l(),y1=a("li"),bue=a("strong"),iBo=o("wav2vec2"),dBo=o(" \u2014 "),tX=a("a"),cBo=o("Wav2Vec2ForPreTraining"),fBo=o(" (Wav2Vec2 model)"),mBo=l(),L1=a("li"),vue=a("strong"),gBo=o("wav2vec2-conformer"),hBo=o(" \u2014 "),aX=a("a"),pBo=o("Wav2Vec2ConformerForPreTraining"),uBo=o(" (Wav2Vec2-Conformer model)"),_Bo=l(),x1=a("li"),Fue=a("strong"),bBo=o("xlm"),vBo=o(" \u2014 "),nX=a("a"),FBo=o("XLMWithLMHeadModel"),TBo=o(" (XLM model)"),MBo=l(),$1=a("li"),Tue=a("strong"),EBo=o("xlm-roberta"),CBo=o(" \u2014 "),sX=a("a"),wBo=o("XLMRobertaForMaskedLM"),ABo=o(" (XLM-RoBERTa model)"),yBo=l(),k1=a("li"),Mue=a("strong"),LBo=o("xlm-roberta-xl"),xBo=o(" \u2014 "),lX=a("a"),$Bo=o("XLMRobertaXLForMaskedLM"),kBo=o(" (XLM-RoBERTa-XL model)"),SBo=l(),S1=a("li"),Eue=a("strong"),RBo=o("xlnet"),PBo=o(" \u2014 "),iX=a("a"),BBo=o("XLNetLMHeadModel"),IBo=o(" (XLNet model)"),NBo=l(),R1=a("p"),qBo=o("The model is set in evaluation mode by default using "),Cue=a("code"),jBo=o("model.eval()"),DBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),GBo=o("model.train()"),OBo=l(),F(P1.$$.fragment),oHe=l(),hd=a("h2"),B1=a("a"),Aue=a("span"),F(p9.$$.fragment),VBo=l(),yue=a("span"),XBo=o("AutoModelForCausalLM"),rHe=l(),Bo=a("div"),F(u9.$$.fragment),zBo=l(),pd=a("p"),QBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dX=a("a"),WBo=o("from_pretrained()"),UBo=o(" class method or the "),cX=a("a"),HBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),_9=a("p"),KBo=o("This class cannot be instantiated directly using "),Lue=a("code"),ZBo=o("__init__()"),eIo=o(" (throws an error)."),oIo=l(),ut=a("div"),F(b9.$$.fragment),rIo=l(),xue=a("p"),tIo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aIo=l(),ud=a("p"),nIo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),sIo=o("not"),lIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),iIo=o("from_pretrained()"),dIo=o(" to load the model weights."),cIo=l(),F(I1.$$.fragment),fIo=l(),Ze=a("div"),F(v9.$$.fragment),mIo=l(),kue=a("p"),gIo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hIo=l(),Ha=a("p"),pIo=o("The model class to instantiate is selected based on the "),Sue=a("code"),uIo=o("model_type"),_Io=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),FIo=o("pretrained_model_name_or_path"),TIo=o(":"),MIo=l(),z=a("ul"),N1=a("li"),Bue=a("strong"),EIo=o("bart"),CIo=o(" \u2014 "),mX=a("a"),wIo=o("BartForCausalLM"),AIo=o(" (BART model)"),yIo=l(),q1=a("li"),Iue=a("strong"),LIo=o("bert"),xIo=o(" \u2014 "),gX=a("a"),$Io=o("BertLMHeadModel"),kIo=o(" (BERT model)"),SIo=l(),j1=a("li"),Nue=a("strong"),RIo=o("bert-generation"),PIo=o(" \u2014 "),hX=a("a"),BIo=o("BertGenerationDecoder"),IIo=o(" (Bert Generation model)"),NIo=l(),D1=a("li"),que=a("strong"),qIo=o("big_bird"),jIo=o(" \u2014 "),pX=a("a"),DIo=o("BigBirdForCausalLM"),GIo=o(" (BigBird model)"),OIo=l(),G1=a("li"),jue=a("strong"),VIo=o("bigbird_pegasus"),XIo=o(" \u2014 "),uX=a("a"),zIo=o("BigBirdPegasusForCausalLM"),QIo=o(" (BigBird-Pegasus model)"),WIo=l(),O1=a("li"),Due=a("strong"),UIo=o("blenderbot"),HIo=o(" \u2014 "),_X=a("a"),JIo=o("BlenderbotForCausalLM"),YIo=o(" (Blenderbot model)"),KIo=l(),V1=a("li"),Gue=a("strong"),ZIo=o("blenderbot-small"),eNo=o(" \u2014 "),bX=a("a"),oNo=o("BlenderbotSmallForCausalLM"),rNo=o(" (BlenderbotSmall model)"),tNo=l(),X1=a("li"),Oue=a("strong"),aNo=o("bloom"),nNo=o(" \u2014 "),vX=a("a"),sNo=o("BloomForCausalLM"),lNo=o(" (BLOOM model)"),iNo=l(),z1=a("li"),Vue=a("strong"),dNo=o("camembert"),cNo=o(" \u2014 "),FX=a("a"),fNo=o("CamembertForCausalLM"),mNo=o(" (CamemBERT model)"),gNo=l(),Q1=a("li"),Xue=a("strong"),hNo=o("codegen"),pNo=o(" \u2014 "),TX=a("a"),uNo=o("CodeGenForCausalLM"),_No=o(" (CodeGen model)"),bNo=l(),W1=a("li"),zue=a("strong"),vNo=o("ctrl"),FNo=o(" \u2014 "),MX=a("a"),TNo=o("CTRLLMHeadModel"),MNo=o(" (CTRL model)"),ENo=l(),U1=a("li"),Que=a("strong"),CNo=o("data2vec-text"),wNo=o(" \u2014 "),EX=a("a"),ANo=o("Data2VecTextForCausalLM"),yNo=o(" (Data2VecText model)"),LNo=l(),H1=a("li"),Wue=a("strong"),xNo=o("electra"),$No=o(" \u2014 "),CX=a("a"),kNo=o("ElectraForCausalLM"),SNo=o(" (ELECTRA model)"),RNo=l(),J1=a("li"),Uue=a("strong"),PNo=o("gpt2"),BNo=o(" \u2014 "),wX=a("a"),INo=o("GPT2LMHeadModel"),NNo=o(" (OpenAI GPT-2 model)"),qNo=l(),Y1=a("li"),Hue=a("strong"),jNo=o("gpt_neo"),DNo=o(" \u2014 "),AX=a("a"),GNo=o("GPTNeoForCausalLM"),ONo=o(" (GPT Neo model)"),VNo=l(),K1=a("li"),Jue=a("strong"),XNo=o("gpt_neox"),zNo=o(" \u2014 "),yX=a("a"),QNo=o("GPTNeoXForCausalLM"),WNo=o(" (GPT NeoX model)"),UNo=l(),Z1=a("li"),Yue=a("strong"),HNo=o("gptj"),JNo=o(" \u2014 "),LX=a("a"),YNo=o("GPTJForCausalLM"),KNo=o(" (GPT-J model)"),ZNo=l(),eb=a("li"),Kue=a("strong"),eqo=o("marian"),oqo=o(" \u2014 "),xX=a("a"),rqo=o("MarianForCausalLM"),tqo=o(" (Marian model)"),aqo=l(),ob=a("li"),Zue=a("strong"),nqo=o("mbart"),sqo=o(" \u2014 "),$X=a("a"),lqo=o("MBartForCausalLM"),iqo=o(" (mBART model)"),dqo=l(),rb=a("li"),e_e=a("strong"),cqo=o("megatron-bert"),fqo=o(" \u2014 "),kX=a("a"),mqo=o("MegatronBertForCausalLM"),gqo=o(" (Megatron-BERT model)"),hqo=l(),tb=a("li"),o_e=a("strong"),pqo=o("mvp"),uqo=o(" \u2014 "),SX=a("a"),_qo=o("MvpForCausalLM"),bqo=o(" (MVP model)"),vqo=l(),ab=a("li"),r_e=a("strong"),Fqo=o("openai-gpt"),Tqo=o(" \u2014 "),RX=a("a"),Mqo=o("OpenAIGPTLMHeadModel"),Eqo=o(" (OpenAI GPT model)"),Cqo=l(),nb=a("li"),t_e=a("strong"),wqo=o("opt"),Aqo=o(" \u2014 "),PX=a("a"),yqo=o("OPTForCausalLM"),Lqo=o(" (OPT model)"),xqo=l(),sb=a("li"),a_e=a("strong"),$qo=o("pegasus"),kqo=o(" \u2014 "),BX=a("a"),Sqo=o("PegasusForCausalLM"),Rqo=o(" (Pegasus model)"),Pqo=l(),lb=a("li"),n_e=a("strong"),Bqo=o("plbart"),Iqo=o(" \u2014 "),IX=a("a"),Nqo=o("PLBartForCausalLM"),qqo=o(" (PLBart model)"),jqo=l(),ib=a("li"),s_e=a("strong"),Dqo=o("prophetnet"),Gqo=o(" \u2014 "),NX=a("a"),Oqo=o("ProphetNetForCausalLM"),Vqo=o(" (ProphetNet model)"),Xqo=l(),db=a("li"),l_e=a("strong"),zqo=o("qdqbert"),Qqo=o(" \u2014 "),qX=a("a"),Wqo=o("QDQBertLMHeadModel"),Uqo=o(" (QDQBert model)"),Hqo=l(),cb=a("li"),i_e=a("strong"),Jqo=o("reformer"),Yqo=o(" \u2014 "),jX=a("a"),Kqo=o("ReformerModelWithLMHead"),Zqo=o(" (Reformer model)"),ejo=l(),fb=a("li"),d_e=a("strong"),ojo=o("rembert"),rjo=o(" \u2014 "),DX=a("a"),tjo=o("RemBertForCausalLM"),ajo=o(" (RemBERT model)"),njo=l(),mb=a("li"),c_e=a("strong"),sjo=o("roberta"),ljo=o(" \u2014 "),GX=a("a"),ijo=o("RobertaForCausalLM"),djo=o(" (RoBERTa model)"),cjo=l(),gb=a("li"),f_e=a("strong"),fjo=o("roformer"),mjo=o(" \u2014 "),OX=a("a"),gjo=o("RoFormerForCausalLM"),hjo=o(" (RoFormer model)"),pjo=l(),hb=a("li"),m_e=a("strong"),ujo=o("speech_to_text_2"),_jo=o(" \u2014 "),VX=a("a"),bjo=o("Speech2Text2ForCausalLM"),vjo=o(" (Speech2Text2 model)"),Fjo=l(),pb=a("li"),g_e=a("strong"),Tjo=o("transfo-xl"),Mjo=o(" \u2014 "),XX=a("a"),Ejo=o("TransfoXLLMHeadModel"),Cjo=o(" (Transformer-XL model)"),wjo=l(),ub=a("li"),h_e=a("strong"),Ajo=o("trocr"),yjo=o(" \u2014 "),zX=a("a"),Ljo=o("TrOCRForCausalLM"),xjo=o(" (TrOCR model)"),$jo=l(),_b=a("li"),p_e=a("strong"),kjo=o("xglm"),Sjo=o(" \u2014 "),QX=a("a"),Rjo=o("XGLMForCausalLM"),Pjo=o(" (XGLM model)"),Bjo=l(),bb=a("li"),u_e=a("strong"),Ijo=o("xlm"),Njo=o(" \u2014 "),WX=a("a"),qjo=o("XLMWithLMHeadModel"),jjo=o(" (XLM model)"),Djo=l(),vb=a("li"),__e=a("strong"),Gjo=o("xlm-prophetnet"),Ojo=o(" \u2014 "),UX=a("a"),Vjo=o("XLMProphetNetForCausalLM"),Xjo=o(" (XLM-ProphetNet model)"),zjo=l(),Fb=a("li"),b_e=a("strong"),Qjo=o("xlm-roberta"),Wjo=o(" \u2014 "),HX=a("a"),Ujo=o("XLMRobertaForCausalLM"),Hjo=o(" (XLM-RoBERTa model)"),Jjo=l(),Tb=a("li"),v_e=a("strong"),Yjo=o("xlm-roberta-xl"),Kjo=o(" \u2014 "),JX=a("a"),Zjo=o("XLMRobertaXLForCausalLM"),eDo=o(" (XLM-RoBERTa-XL model)"),oDo=l(),Mb=a("li"),F_e=a("strong"),rDo=o("xlnet"),tDo=o(" \u2014 "),YX=a("a"),aDo=o("XLNetLMHeadModel"),nDo=o(" (XLNet model)"),sDo=l(),Eb=a("p"),lDo=o("The model is set in evaluation mode by default using "),T_e=a("code"),iDo=o("model.eval()"),dDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),cDo=o("model.train()"),fDo=l(),F(Cb.$$.fragment),tHe=l(),_d=a("h2"),wb=a("a"),E_e=a("span"),F(F9.$$.fragment),mDo=l(),C_e=a("span"),gDo=o("AutoModelForMaskedLM"),aHe=l(),Io=a("div"),F(T9.$$.fragment),hDo=l(),bd=a("p"),pDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KX=a("a"),uDo=o("from_pretrained()"),_Do=o(" class method or the "),ZX=a("a"),bDo=o("from_config()"),vDo=o(` class
method.`),FDo=l(),M9=a("p"),TDo=o("This class cannot be instantiated directly using "),w_e=a("code"),MDo=o("__init__()"),EDo=o(" (throws an error)."),CDo=l(),_t=a("div"),F(E9.$$.fragment),wDo=l(),A_e=a("p"),ADo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yDo=l(),vd=a("p"),LDo=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),xDo=o("not"),$Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),kDo=o("from_pretrained()"),SDo=o(" to load the model weights."),RDo=l(),F(Ab.$$.fragment),PDo=l(),eo=a("div"),F(C9.$$.fragment),BDo=l(),L_e=a("p"),IDo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NDo=l(),Ja=a("p"),qDo=o("The model class to instantiate is selected based on the "),x_e=a("code"),jDo=o("model_type"),DDo=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),VDo=o("pretrained_model_name_or_path"),XDo=o(":"),zDo=l(),U=a("ul"),yb=a("li"),S_e=a("strong"),QDo=o("albert"),WDo=o(" \u2014 "),oz=a("a"),UDo=o("AlbertForMaskedLM"),HDo=o(" (ALBERT model)"),JDo=l(),Lb=a("li"),R_e=a("strong"),YDo=o("bart"),KDo=o(" \u2014 "),rz=a("a"),ZDo=o("BartForConditionalGeneration"),eGo=o(" (BART model)"),oGo=l(),xb=a("li"),P_e=a("strong"),rGo=o("bert"),tGo=o(" \u2014 "),tz=a("a"),aGo=o("BertForMaskedLM"),nGo=o(" (BERT model)"),sGo=l(),$b=a("li"),B_e=a("strong"),lGo=o("big_bird"),iGo=o(" \u2014 "),az=a("a"),dGo=o("BigBirdForMaskedLM"),cGo=o(" (BigBird model)"),fGo=l(),kb=a("li"),I_e=a("strong"),mGo=o("camembert"),gGo=o(" \u2014 "),nz=a("a"),hGo=o("CamembertForMaskedLM"),pGo=o(" (CamemBERT model)"),uGo=l(),Sb=a("li"),N_e=a("strong"),_Go=o("convbert"),bGo=o(" \u2014 "),sz=a("a"),vGo=o("ConvBertForMaskedLM"),FGo=o(" (ConvBERT model)"),TGo=l(),Rb=a("li"),q_e=a("strong"),MGo=o("data2vec-text"),EGo=o(" \u2014 "),lz=a("a"),CGo=o("Data2VecTextForMaskedLM"),wGo=o(" (Data2VecText model)"),AGo=l(),Pb=a("li"),j_e=a("strong"),yGo=o("deberta"),LGo=o(" \u2014 "),iz=a("a"),xGo=o("DebertaForMaskedLM"),$Go=o(" (DeBERTa model)"),kGo=l(),Bb=a("li"),D_e=a("strong"),SGo=o("deberta-v2"),RGo=o(" \u2014 "),dz=a("a"),PGo=o("DebertaV2ForMaskedLM"),BGo=o(" (DeBERTa-v2 model)"),IGo=l(),Ib=a("li"),G_e=a("strong"),NGo=o("distilbert"),qGo=o(" \u2014 "),cz=a("a"),jGo=o("DistilBertForMaskedLM"),DGo=o(" (DistilBERT model)"),GGo=l(),Nb=a("li"),O_e=a("strong"),OGo=o("electra"),VGo=o(" \u2014 "),fz=a("a"),XGo=o("ElectraForMaskedLM"),zGo=o(" (ELECTRA model)"),QGo=l(),qb=a("li"),V_e=a("strong"),WGo=o("flaubert"),UGo=o(" \u2014 "),mz=a("a"),HGo=o("FlaubertWithLMHeadModel"),JGo=o(" (FlauBERT model)"),YGo=l(),jb=a("li"),X_e=a("strong"),KGo=o("fnet"),ZGo=o(" \u2014 "),gz=a("a"),eOo=o("FNetForMaskedLM"),oOo=o(" (FNet model)"),rOo=l(),Db=a("li"),z_e=a("strong"),tOo=o("funnel"),aOo=o(" \u2014 "),hz=a("a"),nOo=o("FunnelForMaskedLM"),sOo=o(" (Funnel Transformer model)"),lOo=l(),Gb=a("li"),Q_e=a("strong"),iOo=o("ibert"),dOo=o(" \u2014 "),pz=a("a"),cOo=o("IBertForMaskedLM"),fOo=o(" (I-BERT model)"),mOo=l(),Ob=a("li"),W_e=a("strong"),gOo=o("layoutlm"),hOo=o(" \u2014 "),uz=a("a"),pOo=o("LayoutLMForMaskedLM"),uOo=o(" (LayoutLM model)"),_Oo=l(),Vb=a("li"),U_e=a("strong"),bOo=o("longformer"),vOo=o(" \u2014 "),_z=a("a"),FOo=o("LongformerForMaskedLM"),TOo=o(" (Longformer model)"),MOo=l(),Xb=a("li"),H_e=a("strong"),EOo=o("luke"),COo=o(" \u2014 "),bz=a("a"),wOo=o("LukeForMaskedLM"),AOo=o(" (LUKE model)"),yOo=l(),zb=a("li"),J_e=a("strong"),LOo=o("mbart"),xOo=o(" \u2014 "),vz=a("a"),$Oo=o("MBartForConditionalGeneration"),kOo=o(" (mBART model)"),SOo=l(),Qb=a("li"),Y_e=a("strong"),ROo=o("megatron-bert"),POo=o(" \u2014 "),Fz=a("a"),BOo=o("MegatronBertForMaskedLM"),IOo=o(" (Megatron-BERT model)"),NOo=l(),Wb=a("li"),K_e=a("strong"),qOo=o("mobilebert"),jOo=o(" \u2014 "),Tz=a("a"),DOo=o("MobileBertForMaskedLM"),GOo=o(" (MobileBERT model)"),OOo=l(),Ub=a("li"),Z_e=a("strong"),VOo=o("mpnet"),XOo=o(" \u2014 "),Mz=a("a"),zOo=o("MPNetForMaskedLM"),QOo=o(" (MPNet model)"),WOo=l(),Hb=a("li"),e2e=a("strong"),UOo=o("mvp"),HOo=o(" \u2014 "),Ez=a("a"),JOo=o("MvpForConditionalGeneration"),YOo=o(" (MVP model)"),KOo=l(),Jb=a("li"),o2e=a("strong"),ZOo=o("nezha"),eVo=o(" \u2014 "),Cz=a("a"),oVo=o("NezhaForMaskedLM"),rVo=o(" (Nezha model)"),tVo=l(),Yb=a("li"),r2e=a("strong"),aVo=o("nystromformer"),nVo=o(" \u2014 "),wz=a("a"),sVo=o("NystromformerForMaskedLM"),lVo=o(" (Nystr\xF6mformer model)"),iVo=l(),Kb=a("li"),t2e=a("strong"),dVo=o("perceiver"),cVo=o(" \u2014 "),Az=a("a"),fVo=o("PerceiverForMaskedLM"),mVo=o(" (Perceiver model)"),gVo=l(),Zb=a("li"),a2e=a("strong"),hVo=o("qdqbert"),pVo=o(" \u2014 "),yz=a("a"),uVo=o("QDQBertForMaskedLM"),_Vo=o(" (QDQBert model)"),bVo=l(),ev=a("li"),n2e=a("strong"),vVo=o("reformer"),FVo=o(" \u2014 "),Lz=a("a"),TVo=o("ReformerForMaskedLM"),MVo=o(" (Reformer model)"),EVo=l(),ov=a("li"),s2e=a("strong"),CVo=o("rembert"),wVo=o(" \u2014 "),xz=a("a"),AVo=o("RemBertForMaskedLM"),yVo=o(" (RemBERT model)"),LVo=l(),rv=a("li"),l2e=a("strong"),xVo=o("roberta"),$Vo=o(" \u2014 "),$z=a("a"),kVo=o("RobertaForMaskedLM"),SVo=o(" (RoBERTa model)"),RVo=l(),tv=a("li"),i2e=a("strong"),PVo=o("roformer"),BVo=o(" \u2014 "),kz=a("a"),IVo=o("RoFormerForMaskedLM"),NVo=o(" (RoFormer model)"),qVo=l(),av=a("li"),d2e=a("strong"),jVo=o("squeezebert"),DVo=o(" \u2014 "),Sz=a("a"),GVo=o("SqueezeBertForMaskedLM"),OVo=o(" (SqueezeBERT model)"),VVo=l(),nv=a("li"),c2e=a("strong"),XVo=o("tapas"),zVo=o(" \u2014 "),Rz=a("a"),QVo=o("TapasForMaskedLM"),WVo=o(" (TAPAS model)"),UVo=l(),sv=a("li"),f2e=a("strong"),HVo=o("wav2vec2"),JVo=o(" \u2014 "),m2e=a("code"),YVo=o("Wav2Vec2ForMaskedLM"),KVo=o(" (Wav2Vec2 model)"),ZVo=l(),lv=a("li"),g2e=a("strong"),eXo=o("xlm"),oXo=o(" \u2014 "),Pz=a("a"),rXo=o("XLMWithLMHeadModel"),tXo=o(" (XLM model)"),aXo=l(),iv=a("li"),h2e=a("strong"),nXo=o("xlm-roberta"),sXo=o(" \u2014 "),Bz=a("a"),lXo=o("XLMRobertaForMaskedLM"),iXo=o(" (XLM-RoBERTa model)"),dXo=l(),dv=a("li"),p2e=a("strong"),cXo=o("xlm-roberta-xl"),fXo=o(" \u2014 "),Iz=a("a"),mXo=o("XLMRobertaXLForMaskedLM"),gXo=o(" (XLM-RoBERTa-XL model)"),hXo=l(),cv=a("li"),u2e=a("strong"),pXo=o("yoso"),uXo=o(" \u2014 "),Nz=a("a"),_Xo=o("YosoForMaskedLM"),bXo=o(" (YOSO model)"),vXo=l(),fv=a("p"),FXo=o("The model is set in evaluation mode by default using "),_2e=a("code"),TXo=o("model.eval()"),MXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),EXo=o("model.train()"),CXo=l(),F(mv.$$.fragment),nHe=l(),Fd=a("h2"),gv=a("a"),v2e=a("span"),F(w9.$$.fragment),wXo=l(),F2e=a("span"),AXo=o("AutoModelForSeq2SeqLM"),sHe=l(),No=a("div"),F(A9.$$.fragment),yXo=l(),Td=a("p"),LXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qz=a("a"),xXo=o("from_pretrained()"),$Xo=o(" class method or the "),jz=a("a"),kXo=o("from_config()"),SXo=o(` class
method.`),RXo=l(),y9=a("p"),PXo=o("This class cannot be instantiated directly using "),T2e=a("code"),BXo=o("__init__()"),IXo=o(" (throws an error)."),NXo=l(),bt=a("div"),F(L9.$$.fragment),qXo=l(),M2e=a("p"),jXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DXo=l(),Md=a("p"),GXo=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),OXo=o("not"),VXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),XXo=o("from_pretrained()"),zXo=o(" to load the model weights."),QXo=l(),F(hv.$$.fragment),WXo=l(),oo=a("div"),F(x9.$$.fragment),UXo=l(),C2e=a("p"),HXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JXo=l(),Ya=a("p"),YXo=o("The model class to instantiate is selected based on the "),w2e=a("code"),KXo=o("model_type"),ZXo=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(":"),azo=l(),me=a("ul"),pv=a("li"),L2e=a("strong"),nzo=o("bart"),szo=o(" \u2014 "),Gz=a("a"),lzo=o("BartForConditionalGeneration"),izo=o(" (BART model)"),dzo=l(),uv=a("li"),x2e=a("strong"),czo=o("bigbird_pegasus"),fzo=o(" \u2014 "),Oz=a("a"),mzo=o("BigBirdPegasusForConditionalGeneration"),gzo=o(" (BigBird-Pegasus model)"),hzo=l(),_v=a("li"),$2e=a("strong"),pzo=o("blenderbot"),uzo=o(" \u2014 "),Vz=a("a"),_zo=o("BlenderbotForConditionalGeneration"),bzo=o(" (Blenderbot model)"),vzo=l(),bv=a("li"),k2e=a("strong"),Fzo=o("blenderbot-small"),Tzo=o(" \u2014 "),Xz=a("a"),Mzo=o("BlenderbotSmallForConditionalGeneration"),Ezo=o(" (BlenderbotSmall model)"),Czo=l(),vv=a("li"),S2e=a("strong"),wzo=o("encoder-decoder"),Azo=o(" \u2014 "),zz=a("a"),yzo=o("EncoderDecoderModel"),Lzo=o(" (Encoder decoder model)"),xzo=l(),Fv=a("li"),R2e=a("strong"),$zo=o("fsmt"),kzo=o(" \u2014 "),Qz=a("a"),Szo=o("FSMTForConditionalGeneration"),Rzo=o(" (FairSeq Machine-Translation model)"),Pzo=l(),Tv=a("li"),P2e=a("strong"),Bzo=o("led"),Izo=o(" \u2014 "),Wz=a("a"),Nzo=o("LEDForConditionalGeneration"),qzo=o(" (LED model)"),jzo=l(),Mv=a("li"),B2e=a("strong"),Dzo=o("longt5"),Gzo=o(" \u2014 "),Uz=a("a"),Ozo=o("LongT5ForConditionalGeneration"),Vzo=o(" (LongT5 model)"),Xzo=l(),Ev=a("li"),I2e=a("strong"),zzo=o("m2m_100"),Qzo=o(" \u2014 "),Hz=a("a"),Wzo=o("M2M100ForConditionalGeneration"),Uzo=o(" (M2M100 model)"),Hzo=l(),Cv=a("li"),N2e=a("strong"),Jzo=o("marian"),Yzo=o(" \u2014 "),Jz=a("a"),Kzo=o("MarianMTModel"),Zzo=o(" (Marian model)"),eQo=l(),wv=a("li"),q2e=a("strong"),oQo=o("mbart"),rQo=o(" \u2014 "),Yz=a("a"),tQo=o("MBartForConditionalGeneration"),aQo=o(" (mBART model)"),nQo=l(),Av=a("li"),j2e=a("strong"),sQo=o("mt5"),lQo=o(" \u2014 "),Kz=a("a"),iQo=o("MT5ForConditionalGeneration"),dQo=o(" (MT5 model)"),cQo=l(),yv=a("li"),D2e=a("strong"),fQo=o("mvp"),mQo=o(" \u2014 "),Zz=a("a"),gQo=o("MvpForConditionalGeneration"),hQo=o(" (MVP model)"),pQo=l(),Lv=a("li"),G2e=a("strong"),uQo=o("nllb"),_Qo=o(" \u2014 "),eQ=a("a"),bQo=o("M2M100ForConditionalGeneration"),vQo=o(" (NLLB model)"),FQo=l(),xv=a("li"),O2e=a("strong"),TQo=o("pegasus"),MQo=o(" \u2014 "),oQ=a("a"),EQo=o("PegasusForConditionalGeneration"),CQo=o(" (Pegasus model)"),wQo=l(),$v=a("li"),V2e=a("strong"),AQo=o("plbart"),yQo=o(" \u2014 "),rQ=a("a"),LQo=o("PLBartForConditionalGeneration"),xQo=o(" (PLBart model)"),$Qo=l(),kv=a("li"),X2e=a("strong"),kQo=o("prophetnet"),SQo=o(" \u2014 "),tQ=a("a"),RQo=o("ProphetNetForConditionalGeneration"),PQo=o(" (ProphetNet model)"),BQo=l(),Sv=a("li"),z2e=a("strong"),IQo=o("t5"),NQo=o(" \u2014 "),aQ=a("a"),qQo=o("T5ForConditionalGeneration"),jQo=o(" (T5 model)"),DQo=l(),Rv=a("li"),Q2e=a("strong"),GQo=o("xlm-prophetnet"),OQo=o(" \u2014 "),nQ=a("a"),VQo=o("XLMProphetNetForConditionalGeneration"),XQo=o(" (XLM-ProphetNet model)"),zQo=l(),Pv=a("p"),QQo=o("The model is set in evaluation mode by default using "),W2e=a("code"),WQo=o("model.eval()"),UQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),HQo=o("model.train()"),JQo=l(),F(Bv.$$.fragment),lHe=l(),Ed=a("h2"),Iv=a("a"),H2e=a("span"),F($9.$$.fragment),YQo=l(),J2e=a("span"),KQo=o("AutoModelForSequenceClassification"),iHe=l(),qo=a("div"),F(k9.$$.fragment),ZQo=l(),Cd=a("p"),eWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sQ=a("a"),oWo=o("from_pretrained()"),rWo=o(" class method or the "),lQ=a("a"),tWo=o("from_config()"),aWo=o(` class
method.`),nWo=l(),S9=a("p"),sWo=o("This class cannot be instantiated directly using "),Y2e=a("code"),lWo=o("__init__()"),iWo=o(" (throws an error)."),dWo=l(),vt=a("div"),F(R9.$$.fragment),cWo=l(),K2e=a("p"),fWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mWo=l(),wd=a("p"),gWo=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),hWo=o("not"),pWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),uWo=o("from_pretrained()"),_Wo=o(" to load the model weights."),bWo=l(),F(Nv.$$.fragment),vWo=l(),ro=a("div"),F(P9.$$.fragment),FWo=l(),e1e=a("p"),TWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),MWo=l(),Ka=a("p"),EWo=o("The model class to instantiate is selected based on the "),o1e=a("code"),CWo=o("model_type"),wWo=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),AWo=o("pretrained_model_name_or_path"),yWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),LWo=o("pretrained_model_name_or_path"),xWo=o(":"),$Wo=l(),N=a("ul"),qv=a("li"),a1e=a("strong"),kWo=o("albert"),SWo=o(" \u2014 "),dQ=a("a"),RWo=o("AlbertForSequenceClassification"),PWo=o(" (ALBERT model)"),BWo=l(),jv=a("li"),n1e=a("strong"),IWo=o("bart"),NWo=o(" \u2014 "),cQ=a("a"),qWo=o("BartForSequenceClassification"),jWo=o(" (BART model)"),DWo=l(),Dv=a("li"),s1e=a("strong"),GWo=o("bert"),OWo=o(" \u2014 "),fQ=a("a"),VWo=o("BertForSequenceClassification"),XWo=o(" (BERT model)"),zWo=l(),Gv=a("li"),l1e=a("strong"),QWo=o("big_bird"),WWo=o(" \u2014 "),mQ=a("a"),UWo=o("BigBirdForSequenceClassification"),HWo=o(" (BigBird model)"),JWo=l(),Ov=a("li"),i1e=a("strong"),YWo=o("bigbird_pegasus"),KWo=o(" \u2014 "),gQ=a("a"),ZWo=o("BigBirdPegasusForSequenceClassification"),eUo=o(" (BigBird-Pegasus model)"),oUo=l(),Vv=a("li"),d1e=a("strong"),rUo=o("bloom"),tUo=o(" \u2014 "),hQ=a("a"),aUo=o("BloomForSequenceClassification"),nUo=o(" (BLOOM model)"),sUo=l(),Xv=a("li"),c1e=a("strong"),lUo=o("camembert"),iUo=o(" \u2014 "),pQ=a("a"),dUo=o("CamembertForSequenceClassification"),cUo=o(" (CamemBERT model)"),fUo=l(),zv=a("li"),f1e=a("strong"),mUo=o("canine"),gUo=o(" \u2014 "),uQ=a("a"),hUo=o("CanineForSequenceClassification"),pUo=o(" (CANINE model)"),uUo=l(),Qv=a("li"),m1e=a("strong"),_Uo=o("convbert"),bUo=o(" \u2014 "),_Q=a("a"),vUo=o("ConvBertForSequenceClassification"),FUo=o(" (ConvBERT model)"),TUo=l(),Wv=a("li"),g1e=a("strong"),MUo=o("ctrl"),EUo=o(" \u2014 "),bQ=a("a"),CUo=o("CTRLForSequenceClassification"),wUo=o(" (CTRL model)"),AUo=l(),Uv=a("li"),h1e=a("strong"),yUo=o("data2vec-text"),LUo=o(" \u2014 "),vQ=a("a"),xUo=o("Data2VecTextForSequenceClassification"),$Uo=o(" (Data2VecText model)"),kUo=l(),Hv=a("li"),p1e=a("strong"),SUo=o("deberta"),RUo=o(" \u2014 "),FQ=a("a"),PUo=o("DebertaForSequenceClassification"),BUo=o(" (DeBERTa model)"),IUo=l(),Jv=a("li"),u1e=a("strong"),NUo=o("deberta-v2"),qUo=o(" \u2014 "),TQ=a("a"),jUo=o("DebertaV2ForSequenceClassification"),DUo=o(" (DeBERTa-v2 model)"),GUo=l(),Yv=a("li"),_1e=a("strong"),OUo=o("distilbert"),VUo=o(" \u2014 "),MQ=a("a"),XUo=o("DistilBertForSequenceClassification"),zUo=o(" (DistilBERT model)"),QUo=l(),Kv=a("li"),b1e=a("strong"),WUo=o("electra"),UUo=o(" \u2014 "),EQ=a("a"),HUo=o("ElectraForSequenceClassification"),JUo=o(" (ELECTRA model)"),YUo=l(),Zv=a("li"),v1e=a("strong"),KUo=o("flaubert"),ZUo=o(" \u2014 "),CQ=a("a"),eHo=o("FlaubertForSequenceClassification"),oHo=o(" (FlauBERT model)"),rHo=l(),e3=a("li"),F1e=a("strong"),tHo=o("fnet"),aHo=o(" \u2014 "),wQ=a("a"),nHo=o("FNetForSequenceClassification"),sHo=o(" (FNet model)"),lHo=l(),o3=a("li"),T1e=a("strong"),iHo=o("funnel"),dHo=o(" \u2014 "),AQ=a("a"),cHo=o("FunnelForSequenceClassification"),fHo=o(" (Funnel Transformer model)"),mHo=l(),r3=a("li"),M1e=a("strong"),gHo=o("gpt2"),hHo=o(" \u2014 "),yQ=a("a"),pHo=o("GPT2ForSequenceClassification"),uHo=o(" (OpenAI GPT-2 model)"),_Ho=l(),t3=a("li"),E1e=a("strong"),bHo=o("gpt_neo"),vHo=o(" \u2014 "),LQ=a("a"),FHo=o("GPTNeoForSequenceClassification"),THo=o(" (GPT Neo model)"),MHo=l(),a3=a("li"),C1e=a("strong"),EHo=o("gptj"),CHo=o(" \u2014 "),xQ=a("a"),wHo=o("GPTJForSequenceClassification"),AHo=o(" (GPT-J model)"),yHo=l(),n3=a("li"),w1e=a("strong"),LHo=o("ibert"),xHo=o(" \u2014 "),$Q=a("a"),$Ho=o("IBertForSequenceClassification"),kHo=o(" (I-BERT model)"),SHo=l(),s3=a("li"),A1e=a("strong"),RHo=o("layoutlm"),PHo=o(" \u2014 "),kQ=a("a"),BHo=o("LayoutLMForSequenceClassification"),IHo=o(" (LayoutLM model)"),NHo=l(),l3=a("li"),y1e=a("strong"),qHo=o("layoutlmv2"),jHo=o(" \u2014 "),SQ=a("a"),DHo=o("LayoutLMv2ForSequenceClassification"),GHo=o(" (LayoutLMv2 model)"),OHo=l(),i3=a("li"),L1e=a("strong"),VHo=o("layoutlmv3"),XHo=o(" \u2014 "),RQ=a("a"),zHo=o("LayoutLMv3ForSequenceClassification"),QHo=o(" (LayoutLMv3 model)"),WHo=l(),d3=a("li"),x1e=a("strong"),UHo=o("led"),HHo=o(" \u2014 "),PQ=a("a"),JHo=o("LEDForSequenceClassification"),YHo=o(" (LED model)"),KHo=l(),c3=a("li"),$1e=a("strong"),ZHo=o("longformer"),eJo=o(" \u2014 "),BQ=a("a"),oJo=o("LongformerForSequenceClassification"),rJo=o(" (Longformer model)"),tJo=l(),f3=a("li"),k1e=a("strong"),aJo=o("luke"),nJo=o(" \u2014 "),IQ=a("a"),sJo=o("LukeForSequenceClassification"),lJo=o(" (LUKE model)"),iJo=l(),m3=a("li"),S1e=a("strong"),dJo=o("mbart"),cJo=o(" \u2014 "),NQ=a("a"),fJo=o("MBartForSequenceClassification"),mJo=o(" (mBART model)"),gJo=l(),g3=a("li"),R1e=a("strong"),hJo=o("megatron-bert"),pJo=o(" \u2014 "),qQ=a("a"),uJo=o("MegatronBertForSequenceClassification"),_Jo=o(" (Megatron-BERT model)"),bJo=l(),h3=a("li"),P1e=a("strong"),vJo=o("mobilebert"),FJo=o(" \u2014 "),jQ=a("a"),TJo=o("MobileBertForSequenceClassification"),MJo=o(" (MobileBERT model)"),EJo=l(),p3=a("li"),B1e=a("strong"),CJo=o("mpnet"),wJo=o(" \u2014 "),DQ=a("a"),AJo=o("MPNetForSequenceClassification"),yJo=o(" (MPNet model)"),LJo=l(),u3=a("li"),I1e=a("strong"),xJo=o("mvp"),$Jo=o(" \u2014 "),GQ=a("a"),kJo=o("MvpForSequenceClassification"),SJo=o(" (MVP model)"),RJo=l(),_3=a("li"),N1e=a("strong"),PJo=o("nezha"),BJo=o(" \u2014 "),OQ=a("a"),IJo=o("NezhaForSequenceClassification"),NJo=o(" (Nezha model)"),qJo=l(),b3=a("li"),q1e=a("strong"),jJo=o("nystromformer"),DJo=o(" \u2014 "),VQ=a("a"),GJo=o("NystromformerForSequenceClassification"),OJo=o(" (Nystr\xF6mformer model)"),VJo=l(),v3=a("li"),j1e=a("strong"),XJo=o("openai-gpt"),zJo=o(" \u2014 "),XQ=a("a"),QJo=o("OpenAIGPTForSequenceClassification"),WJo=o(" (OpenAI GPT model)"),UJo=l(),F3=a("li"),D1e=a("strong"),HJo=o("opt"),JJo=o(" \u2014 "),zQ=a("a"),YJo=o("OPTForSequenceClassification"),KJo=o(" (OPT model)"),ZJo=l(),T3=a("li"),G1e=a("strong"),eYo=o("perceiver"),oYo=o(" \u2014 "),QQ=a("a"),rYo=o("PerceiverForSequenceClassification"),tYo=o(" (Perceiver model)"),aYo=l(),M3=a("li"),O1e=a("strong"),nYo=o("plbart"),sYo=o(" \u2014 "),WQ=a("a"),lYo=o("PLBartForSequenceClassification"),iYo=o(" (PLBart model)"),dYo=l(),E3=a("li"),V1e=a("strong"),cYo=o("qdqbert"),fYo=o(" \u2014 "),UQ=a("a"),mYo=o("QDQBertForSequenceClassification"),gYo=o(" (QDQBert model)"),hYo=l(),C3=a("li"),X1e=a("strong"),pYo=o("reformer"),uYo=o(" \u2014 "),HQ=a("a"),_Yo=o("ReformerForSequenceClassification"),bYo=o(" (Reformer model)"),vYo=l(),w3=a("li"),z1e=a("strong"),FYo=o("rembert"),TYo=o(" \u2014 "),JQ=a("a"),MYo=o("RemBertForSequenceClassification"),EYo=o(" (RemBERT model)"),CYo=l(),A3=a("li"),Q1e=a("strong"),wYo=o("roberta"),AYo=o(" \u2014 "),YQ=a("a"),yYo=o("RobertaForSequenceClassification"),LYo=o(" (RoBERTa model)"),xYo=l(),y3=a("li"),W1e=a("strong"),$Yo=o("roformer"),kYo=o(" \u2014 "),KQ=a("a"),SYo=o("RoFormerForSequenceClassification"),RYo=o(" (RoFormer model)"),PYo=l(),L3=a("li"),U1e=a("strong"),BYo=o("squeezebert"),IYo=o(" \u2014 "),ZQ=a("a"),NYo=o("SqueezeBertForSequenceClassification"),qYo=o(" (SqueezeBERT model)"),jYo=l(),x3=a("li"),H1e=a("strong"),DYo=o("tapas"),GYo=o(" \u2014 "),eW=a("a"),OYo=o("TapasForSequenceClassification"),VYo=o(" (TAPAS model)"),XYo=l(),$3=a("li"),J1e=a("strong"),zYo=o("transfo-xl"),QYo=o(" \u2014 "),oW=a("a"),WYo=o("TransfoXLForSequenceClassification"),UYo=o(" (Transformer-XL model)"),HYo=l(),k3=a("li"),Y1e=a("strong"),JYo=o("xlm"),YYo=o(" \u2014 "),rW=a("a"),KYo=o("XLMForSequenceClassification"),ZYo=o(" (XLM model)"),eKo=l(),S3=a("li"),K1e=a("strong"),oKo=o("xlm-roberta"),rKo=o(" \u2014 "),tW=a("a"),tKo=o("XLMRobertaForSequenceClassification"),aKo=o(" (XLM-RoBERTa model)"),nKo=l(),R3=a("li"),Z1e=a("strong"),sKo=o("xlm-roberta-xl"),lKo=o(" \u2014 "),aW=a("a"),iKo=o("XLMRobertaXLForSequenceClassification"),dKo=o(" (XLM-RoBERTa-XL model)"),cKo=l(),P3=a("li"),ebe=a("strong"),fKo=o("xlnet"),mKo=o(" \u2014 "),nW=a("a"),gKo=o("XLNetForSequenceClassification"),hKo=o(" (XLNet model)"),pKo=l(),B3=a("li"),obe=a("strong"),uKo=o("yoso"),_Ko=o(" \u2014 "),sW=a("a"),bKo=o("YosoForSequenceClassification"),vKo=o(" (YOSO model)"),FKo=l(),I3=a("p"),TKo=o("The model is set in evaluation mode by default using "),rbe=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=a("code"),CKo=o("model.train()"),wKo=l(),F(N3.$$.fragment),dHe=l(),Ad=a("h2"),q3=a("a"),abe=a("span"),F(B9.$$.fragment),AKo=l(),nbe=a("span"),yKo=o("AutoModelForMultipleChoice"),cHe=l(),jo=a("div"),F(I9.$$.fragment),LKo=l(),yd=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lW=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),iW=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),N9=a("p"),BKo=o("This class cannot be instantiated directly using "),sbe=a("code"),IKo=o("__init__()"),NKo=o(" (throws an error)."),qKo=l(),Ft=a("div"),F(q9.$$.fragment),jKo=l(),lbe=a("p"),DKo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GKo=l(),Ld=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),zKo=o("from_pretrained()"),QKo=o(" to load the model weights."),WKo=l(),F(j3.$$.fragment),UKo=l(),to=a("div"),F(j9.$$.fragment),HKo=l(),dbe=a("p"),JKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),YKo=l(),Za=a("p"),KKo=o("The model class to instantiate is selected based on the "),cbe=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),Z=a("ul"),D3=a("li"),gbe=a("strong"),sZo=o("albert"),lZo=o(" \u2014 "),cW=a("a"),iZo=o("AlbertForMultipleChoice"),dZo=o(" (ALBERT model)"),cZo=l(),G3=a("li"),hbe=a("strong"),fZo=o("bert"),mZo=o(" \u2014 "),fW=a("a"),gZo=o("BertForMultipleChoice"),hZo=o(" (BERT model)"),pZo=l(),O3=a("li"),pbe=a("strong"),uZo=o("big_bird"),_Zo=o(" \u2014 "),mW=a("a"),bZo=o("BigBirdForMultipleChoice"),vZo=o(" (BigBird model)"),FZo=l(),V3=a("li"),ube=a("strong"),TZo=o("camembert"),MZo=o(" \u2014 "),gW=a("a"),EZo=o("CamembertForMultipleChoice"),CZo=o(" (CamemBERT model)"),wZo=l(),X3=a("li"),_be=a("strong"),AZo=o("canine"),yZo=o(" \u2014 "),hW=a("a"),LZo=o("CanineForMultipleChoice"),xZo=o(" (CANINE model)"),$Zo=l(),z3=a("li"),bbe=a("strong"),kZo=o("convbert"),SZo=o(" \u2014 "),pW=a("a"),RZo=o("ConvBertForMultipleChoice"),PZo=o(" (ConvBERT model)"),BZo=l(),Q3=a("li"),vbe=a("strong"),IZo=o("data2vec-text"),NZo=o(" \u2014 "),uW=a("a"),qZo=o("Data2VecTextForMultipleChoice"),jZo=o(" (Data2VecText model)"),DZo=l(),W3=a("li"),Fbe=a("strong"),GZo=o("deberta-v2"),OZo=o(" \u2014 "),_W=a("a"),VZo=o("DebertaV2ForMultipleChoice"),XZo=o(" (DeBERTa-v2 model)"),zZo=l(),U3=a("li"),Tbe=a("strong"),QZo=o("distilbert"),WZo=o(" \u2014 "),bW=a("a"),UZo=o("DistilBertForMultipleChoice"),HZo=o(" (DistilBERT model)"),JZo=l(),H3=a("li"),Mbe=a("strong"),YZo=o("electra"),KZo=o(" \u2014 "),vW=a("a"),ZZo=o("ElectraForMultipleChoice"),eer=o(" (ELECTRA model)"),oer=l(),J3=a("li"),Ebe=a("strong"),rer=o("flaubert"),ter=o(" \u2014 "),FW=a("a"),aer=o("FlaubertForMultipleChoice"),ner=o(" (FlauBERT model)"),ser=l(),Y3=a("li"),Cbe=a("strong"),ler=o("fnet"),ier=o(" \u2014 "),TW=a("a"),der=o("FNetForMultipleChoice"),cer=o(" (FNet model)"),fer=l(),K3=a("li"),wbe=a("strong"),mer=o("funnel"),ger=o(" \u2014 "),MW=a("a"),her=o("FunnelForMultipleChoice"),per=o(" (Funnel Transformer model)"),uer=l(),Z3=a("li"),Abe=a("strong"),_er=o("ibert"),ber=o(" \u2014 "),EW=a("a"),ver=o("IBertForMultipleChoice"),Fer=o(" (I-BERT model)"),Ter=l(),eF=a("li"),ybe=a("strong"),Mer=o("longformer"),Eer=o(" \u2014 "),CW=a("a"),Cer=o("LongformerForMultipleChoice"),wer=o(" (Longformer model)"),Aer=l(),oF=a("li"),Lbe=a("strong"),yer=o("luke"),Ler=o(" \u2014 "),wW=a("a"),xer=o("LukeForMultipleChoice"),$er=o(" (LUKE model)"),ker=l(),rF=a("li"),xbe=a("strong"),Ser=o("megatron-bert"),Rer=o(" \u2014 "),AW=a("a"),Per=o("MegatronBertForMultipleChoice"),Ber=o(" (Megatron-BERT model)"),Ier=l(),tF=a("li"),$be=a("strong"),Ner=o("mobilebert"),qer=o(" \u2014 "),yW=a("a"),jer=o("MobileBertForMultipleChoice"),Der=o(" (MobileBERT model)"),Ger=l(),aF=a("li"),kbe=a("strong"),Oer=o("mpnet"),Ver=o(" \u2014 "),LW=a("a"),Xer=o("MPNetForMultipleChoice"),zer=o(" (MPNet model)"),Qer=l(),nF=a("li"),Sbe=a("strong"),Wer=o("nezha"),Uer=o(" \u2014 "),xW=a("a"),Her=o("NezhaForMultipleChoice"),Jer=o(" (Nezha model)"),Yer=l(),sF=a("li"),Rbe=a("strong"),Ker=o("nystromformer"),Zer=o(" \u2014 "),$W=a("a"),eor=o("NystromformerForMultipleChoice"),oor=o(" (Nystr\xF6mformer model)"),ror=l(),lF=a("li"),Pbe=a("strong"),tor=o("qdqbert"),aor=o(" \u2014 "),kW=a("a"),nor=o("QDQBertForMultipleChoice"),sor=o(" (QDQBert model)"),lor=l(),iF=a("li"),Bbe=a("strong"),ior=o("rembert"),dor=o(" \u2014 "),SW=a("a"),cor=o("RemBertForMultipleChoice"),mor=o(" (RemBERT model)"),gor=l(),dF=a("li"),Ibe=a("strong"),hor=o("roberta"),por=o(" \u2014 "),RW=a("a"),uor=o("RobertaForMultipleChoice"),_or=o(" (RoBERTa model)"),bor=l(),cF=a("li"),Nbe=a("strong"),vor=o("roformer"),For=o(" \u2014 "),PW=a("a"),Tor=o("RoFormerForMultipleChoice"),Mor=o(" (RoFormer model)"),Eor=l(),fF=a("li"),qbe=a("strong"),Cor=o("squeezebert"),wor=o(" \u2014 "),BW=a("a"),Aor=o("SqueezeBertForMultipleChoice"),yor=o(" (SqueezeBERT model)"),Lor=l(),mF=a("li"),jbe=a("strong"),xor=o("xlm"),$or=o(" \u2014 "),IW=a("a"),kor=o("XLMForMultipleChoice"),Sor=o(" (XLM model)"),Ror=l(),gF=a("li"),Dbe=a("strong"),Por=o("xlm-roberta"),Bor=o(" \u2014 "),NW=a("a"),Ior=o("XLMRobertaForMultipleChoice"),Nor=o(" (XLM-RoBERTa model)"),qor=l(),hF=a("li"),Gbe=a("strong"),jor=o("xlm-roberta-xl"),Dor=o(" \u2014 "),qW=a("a"),Gor=o("XLMRobertaXLForMultipleChoice"),Oor=o(" (XLM-RoBERTa-XL model)"),Vor=l(),pF=a("li"),Obe=a("strong"),Xor=o("xlnet"),zor=o(" \u2014 "),jW=a("a"),Qor=o("XLNetForMultipleChoice"),Wor=o(" (XLNet model)"),Uor=l(),uF=a("li"),Vbe=a("strong"),Hor=o("yoso"),Jor=o(" \u2014 "),DW=a("a"),Yor=o("YosoForMultipleChoice"),Kor=o(" (YOSO model)"),Zor=l(),_F=a("p"),err=o("The model is set in evaluation mode by default using "),Xbe=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=a("code"),trr=o("model.train()"),arr=l(),F(bF.$$.fragment),fHe=l(),xd=a("h2"),vF=a("a"),Qbe=a("span"),F(D9.$$.fragment),nrr=l(),Wbe=a("span"),srr=o("AutoModelForNextSentencePrediction"),mHe=l(),Do=a("div"),F(G9.$$.fragment),lrr=l(),$d=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GW=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),OW=a("a"),frr=o("from_config()"),mrr=o(` class
method.`),grr=l(),O9=a("p"),hrr=o("This class cannot be instantiated directly using "),Ube=a("code"),prr=o("__init__()"),urr=o(" (throws an error)."),_rr=l(),Tt=a("div"),F(V9.$$.fragment),brr=l(),Hbe=a("p"),vrr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Frr=l(),kd=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(FF.$$.fragment),yrr=l(),ao=a("div"),F(X9.$$.fragment),Lrr=l(),Ybe=a("p"),xrr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$rr=l(),en=a("p"),krr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),Irr=o("pretrained_model_name_or_path"),Nrr=o(":"),qrr=l(),Go=a("ul"),TF=a("li"),ove=a("strong"),jrr=o("bert"),Drr=o(" \u2014 "),XW=a("a"),Grr=o("BertForNextSentencePrediction"),Orr=o(" (BERT model)"),Vrr=l(),MF=a("li"),rve=a("strong"),Xrr=o("fnet"),zrr=o(" \u2014 "),zW=a("a"),Qrr=o("FNetForNextSentencePrediction"),Wrr=o(" (FNet model)"),Urr=l(),EF=a("li"),tve=a("strong"),Hrr=o("megatron-bert"),Jrr=o(" \u2014 "),QW=a("a"),Yrr=o("MegatronBertForNextSentencePrediction"),Krr=o(" (Megatron-BERT model)"),Zrr=l(),CF=a("li"),ave=a("strong"),etr=o("mobilebert"),otr=o(" \u2014 "),WW=a("a"),rtr=o("MobileBertForNextSentencePrediction"),ttr=o(" (MobileBERT model)"),atr=l(),wF=a("li"),nve=a("strong"),ntr=o("nezha"),str=o(" \u2014 "),UW=a("a"),ltr=o("NezhaForNextSentencePrediction"),itr=o(" (Nezha model)"),dtr=l(),AF=a("li"),sve=a("strong"),ctr=o("qdqbert"),ftr=o(" \u2014 "),HW=a("a"),mtr=o("QDQBertForNextSentencePrediction"),gtr=o(" (QDQBert model)"),htr=l(),yF=a("p"),ptr=o("The model is set in evaluation mode by default using "),lve=a("code"),utr=o("model.eval()"),_tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),btr=o("model.train()"),vtr=l(),F(LF.$$.fragment),gHe=l(),Sd=a("h2"),xF=a("a"),dve=a("span"),F(z9.$$.fragment),Ftr=l(),cve=a("span"),Ttr=o("AutoModelForTokenClassification"),hHe=l(),Oo=a("div"),F(Q9.$$.fragment),Mtr=l(),Rd=a("p"),Etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JW=a("a"),Ctr=o("from_pretrained()"),wtr=o(" class method or the "),YW=a("a"),Atr=o("from_config()"),ytr=o(` class
method.`),Ltr=l(),W9=a("p"),xtr=o("This class cannot be instantiated directly using "),fve=a("code"),$tr=o("__init__()"),ktr=o(" (throws an error)."),Str=l(),Mt=a("div"),F(U9.$$.fragment),Rtr=l(),mve=a("p"),Ptr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Btr=l(),Pd=a("p"),Itr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),Ntr=o("not"),qtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),jtr=o("from_pretrained()"),Dtr=o(" to load the model weights."),Gtr=l(),F($F.$$.fragment),Otr=l(),no=a("div"),F(H9.$$.fragment),Vtr=l(),hve=a("p"),Xtr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ztr=l(),on=a("p"),Qtr=o("The model class to instantiate is selected based on the "),pve=a("code"),Wtr=o("model_type"),Utr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),Htr=o("pretrained_model_name_or_path"),Jtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),Ytr=o("pretrained_model_name_or_path"),Ktr=o(":"),Ztr=l(),H=a("ul"),kF=a("li"),bve=a("strong"),ear=o("albert"),oar=o(" \u2014 "),ZW=a("a"),rar=o("AlbertForTokenClassification"),tar=o(" (ALBERT model)"),aar=l(),SF=a("li"),vve=a("strong"),nar=o("bert"),sar=o(" \u2014 "),eU=a("a"),lar=o("BertForTokenClassification"),iar=o(" (BERT model)"),dar=l(),RF=a("li"),Fve=a("strong"),car=o("big_bird"),far=o(" \u2014 "),oU=a("a"),mar=o("BigBirdForTokenClassification"),gar=o(" (BigBird model)"),har=l(),PF=a("li"),Tve=a("strong"),par=o("bloom"),uar=o(" \u2014 "),rU=a("a"),_ar=o("BloomForTokenClassification"),bar=o(" (BLOOM model)"),Far=l(),BF=a("li"),Mve=a("strong"),Tar=o("camembert"),Mar=o(" \u2014 "),tU=a("a"),Ear=o("CamembertForTokenClassification"),Car=o(" (CamemBERT model)"),war=l(),IF=a("li"),Eve=a("strong"),Aar=o("canine"),yar=o(" \u2014 "),aU=a("a"),Lar=o("CanineForTokenClassification"),xar=o(" (CANINE model)"),$ar=l(),NF=a("li"),Cve=a("strong"),kar=o("convbert"),Sar=o(" \u2014 "),nU=a("a"),Rar=o("ConvBertForTokenClassification"),Par=o(" (ConvBERT model)"),Bar=l(),qF=a("li"),wve=a("strong"),Iar=o("data2vec-text"),Nar=o(" \u2014 "),sU=a("a"),qar=o("Data2VecTextForTokenClassification"),jar=o(" (Data2VecText model)"),Dar=l(),jF=a("li"),Ave=a("strong"),Gar=o("deberta"),Oar=o(" \u2014 "),lU=a("a"),Var=o("DebertaForTokenClassification"),Xar=o(" (DeBERTa model)"),zar=l(),DF=a("li"),yve=a("strong"),Qar=o("deberta-v2"),War=o(" \u2014 "),iU=a("a"),Uar=o("DebertaV2ForTokenClassification"),Har=o(" (DeBERTa-v2 model)"),Jar=l(),GF=a("li"),Lve=a("strong"),Yar=o("distilbert"),Kar=o(" \u2014 "),dU=a("a"),Zar=o("DistilBertForTokenClassification"),enr=o(" (DistilBERT model)"),onr=l(),OF=a("li"),xve=a("strong"),rnr=o("electra"),tnr=o(" \u2014 "),cU=a("a"),anr=o("ElectraForTokenClassification"),nnr=o(" (ELECTRA model)"),snr=l(),VF=a("li"),$ve=a("strong"),lnr=o("flaubert"),inr=o(" \u2014 "),fU=a("a"),dnr=o("FlaubertForTokenClassification"),cnr=o(" (FlauBERT model)"),fnr=l(),XF=a("li"),kve=a("strong"),mnr=o("fnet"),gnr=o(" \u2014 "),mU=a("a"),hnr=o("FNetForTokenClassification"),pnr=o(" (FNet model)"),unr=l(),zF=a("li"),Sve=a("strong"),_nr=o("funnel"),bnr=o(" \u2014 "),gU=a("a"),vnr=o("FunnelForTokenClassification"),Fnr=o(" (Funnel Transformer model)"),Tnr=l(),QF=a("li"),Rve=a("strong"),Mnr=o("gpt2"),Enr=o(" \u2014 "),hU=a("a"),Cnr=o("GPT2ForTokenClassification"),wnr=o(" (OpenAI GPT-2 model)"),Anr=l(),WF=a("li"),Pve=a("strong"),ynr=o("ibert"),Lnr=o(" \u2014 "),pU=a("a"),xnr=o("IBertForTokenClassification"),$nr=o(" (I-BERT model)"),knr=l(),UF=a("li"),Bve=a("strong"),Snr=o("layoutlm"),Rnr=o(" \u2014 "),uU=a("a"),Pnr=o("LayoutLMForTokenClassification"),Bnr=o(" (LayoutLM model)"),Inr=l(),HF=a("li"),Ive=a("strong"),Nnr=o("layoutlmv2"),qnr=o(" \u2014 "),_U=a("a"),jnr=o("LayoutLMv2ForTokenClassification"),Dnr=o(" (LayoutLMv2 model)"),Gnr=l(),JF=a("li"),Nve=a("strong"),Onr=o("layoutlmv3"),Vnr=o(" \u2014 "),bU=a("a"),Xnr=o("LayoutLMv3ForTokenClassification"),znr=o(" (LayoutLMv3 model)"),Qnr=l(),YF=a("li"),qve=a("strong"),Wnr=o("longformer"),Unr=o(" \u2014 "),vU=a("a"),Hnr=o("LongformerForTokenClassification"),Jnr=o(" (Longformer model)"),Ynr=l(),KF=a("li"),jve=a("strong"),Knr=o("luke"),Znr=o(" \u2014 "),FU=a("a"),esr=o("LukeForTokenClassification"),osr=o(" (LUKE model)"),rsr=l(),ZF=a("li"),Dve=a("strong"),tsr=o("megatron-bert"),asr=o(" \u2014 "),TU=a("a"),nsr=o("MegatronBertForTokenClassification"),ssr=o(" (Megatron-BERT model)"),lsr=l(),e7=a("li"),Gve=a("strong"),isr=o("mobilebert"),dsr=o(" \u2014 "),MU=a("a"),csr=o("MobileBertForTokenClassification"),fsr=o(" (MobileBERT model)"),msr=l(),o7=a("li"),Ove=a("strong"),gsr=o("mpnet"),hsr=o(" \u2014 "),EU=a("a"),psr=o("MPNetForTokenClassification"),usr=o(" (MPNet model)"),_sr=l(),r7=a("li"),Vve=a("strong"),bsr=o("nezha"),vsr=o(" \u2014 "),CU=a("a"),Fsr=o("NezhaForTokenClassification"),Tsr=o(" (Nezha model)"),Msr=l(),t7=a("li"),Xve=a("strong"),Esr=o("nystromformer"),Csr=o(" \u2014 "),wU=a("a"),wsr=o("NystromformerForTokenClassification"),Asr=o(" (Nystr\xF6mformer model)"),ysr=l(),a7=a("li"),zve=a("strong"),Lsr=o("qdqbert"),xsr=o(" \u2014 "),AU=a("a"),$sr=o("QDQBertForTokenClassification"),ksr=o(" (QDQBert model)"),Ssr=l(),n7=a("li"),Qve=a("strong"),Rsr=o("rembert"),Psr=o(" \u2014 "),yU=a("a"),Bsr=o("RemBertForTokenClassification"),Isr=o(" (RemBERT model)"),Nsr=l(),s7=a("li"),Wve=a("strong"),qsr=o("roberta"),jsr=o(" \u2014 "),LU=a("a"),Dsr=o("RobertaForTokenClassification"),Gsr=o(" (RoBERTa model)"),Osr=l(),l7=a("li"),Uve=a("strong"),Vsr=o("roformer"),Xsr=o(" \u2014 "),xU=a("a"),zsr=o("RoFormerForTokenClassification"),Qsr=o(" (RoFormer model)"),Wsr=l(),i7=a("li"),Hve=a("strong"),Usr=o("squeezebert"),Hsr=o(" \u2014 "),$U=a("a"),Jsr=o("SqueezeBertForTokenClassification"),Ysr=o(" (SqueezeBERT model)"),Ksr=l(),d7=a("li"),Jve=a("strong"),Zsr=o("xlm"),elr=o(" \u2014 "),kU=a("a"),olr=o("XLMForTokenClassification"),rlr=o(" (XLM model)"),tlr=l(),c7=a("li"),Yve=a("strong"),alr=o("xlm-roberta"),nlr=o(" \u2014 "),SU=a("a"),slr=o("XLMRobertaForTokenClassification"),llr=o(" (XLM-RoBERTa model)"),ilr=l(),f7=a("li"),Kve=a("strong"),dlr=o("xlm-roberta-xl"),clr=o(" \u2014 "),RU=a("a"),flr=o("XLMRobertaXLForTokenClassification"),mlr=o(" (XLM-RoBERTa-XL model)"),glr=l(),m7=a("li"),Zve=a("strong"),hlr=o("xlnet"),plr=o(" \u2014 "),PU=a("a"),ulr=o("XLNetForTokenClassification"),_lr=o(" (XLNet model)"),blr=l(),g7=a("li"),e3e=a("strong"),vlr=o("yoso"),Flr=o(" \u2014 "),BU=a("a"),Tlr=o("YosoForTokenClassification"),Mlr=o(" (YOSO model)"),Elr=l(),h7=a("p"),Clr=o("The model is set in evaluation mode by default using "),o3e=a("code"),wlr=o("model.eval()"),Alr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r3e=a("code"),ylr=o("model.train()"),Llr=l(),F(p7.$$.fragment),pHe=l(),Bd=a("h2"),u7=a("a"),t3e=a("span"),F(J9.$$.fragment),xlr=l(),a3e=a("span"),$lr=o("AutoModelForQuestionAnswering"),uHe=l(),Vo=a("div"),F(Y9.$$.fragment),klr=l(),Id=a("p"),Slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IU=a("a"),Rlr=o("from_pretrained()"),Plr=o(" class method or the "),NU=a("a"),Blr=o("from_config()"),Ilr=o(` class
method.`),Nlr=l(),K9=a("p"),qlr=o("This class cannot be instantiated directly using "),n3e=a("code"),jlr=o("__init__()"),Dlr=o(" (throws an error)."),Glr=l(),Et=a("div"),F(Z9.$$.fragment),Olr=l(),s3e=a("p"),Vlr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xlr=l(),Nd=a("p"),zlr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),Qlr=o("not"),Wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),Ulr=o("from_pretrained()"),Hlr=o(" to load the model weights."),Jlr=l(),F(_7.$$.fragment),Ylr=l(),so=a("div"),F(ex.$$.fragment),Klr=l(),i3e=a("p"),Zlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eir=l(),rn=a("p"),oir=o("The model class to instantiate is selected based on the "),d3e=a("code"),rir=o("model_type"),tir=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),air=o("pretrained_model_name_or_path"),nir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),sir=o("pretrained_model_name_or_path"),lir=o(":"),iir=l(),V=a("ul"),b7=a("li"),m3e=a("strong"),dir=o("albert"),cir=o(" \u2014 "),jU=a("a"),fir=o("AlbertForQuestionAnswering"),mir=o(" (ALBERT model)"),gir=l(),v7=a("li"),g3e=a("strong"),hir=o("bart"),pir=o(" \u2014 "),DU=a("a"),uir=o("BartForQuestionAnswering"),_ir=o(" (BART model)"),bir=l(),F7=a("li"),h3e=a("strong"),vir=o("bert"),Fir=o(" \u2014 "),GU=a("a"),Tir=o("BertForQuestionAnswering"),Mir=o(" (BERT model)"),Eir=l(),T7=a("li"),p3e=a("strong"),Cir=o("big_bird"),wir=o(" \u2014 "),OU=a("a"),Air=o("BigBirdForQuestionAnswering"),yir=o(" (BigBird model)"),Lir=l(),M7=a("li"),u3e=a("strong"),xir=o("bigbird_pegasus"),$ir=o(" \u2014 "),VU=a("a"),kir=o("BigBirdPegasusForQuestionAnswering"),Sir=o(" (BigBird-Pegasus model)"),Rir=l(),E7=a("li"),_3e=a("strong"),Pir=o("camembert"),Bir=o(" \u2014 "),XU=a("a"),Iir=o("CamembertForQuestionAnswering"),Nir=o(" (CamemBERT model)"),qir=l(),C7=a("li"),b3e=a("strong"),jir=o("canine"),Dir=o(" \u2014 "),zU=a("a"),Gir=o("CanineForQuestionAnswering"),Oir=o(" (CANINE model)"),Vir=l(),w7=a("li"),v3e=a("strong"),Xir=o("convbert"),zir=o(" \u2014 "),QU=a("a"),Qir=o("ConvBertForQuestionAnswering"),Wir=o(" (ConvBERT model)"),Uir=l(),A7=a("li"),F3e=a("strong"),Hir=o("data2vec-text"),Jir=o(" \u2014 "),WU=a("a"),Yir=o("Data2VecTextForQuestionAnswering"),Kir=o(" (Data2VecText model)"),Zir=l(),y7=a("li"),T3e=a("strong"),edr=o("deberta"),odr=o(" \u2014 "),UU=a("a"),rdr=o("DebertaForQuestionAnswering"),tdr=o(" (DeBERTa model)"),adr=l(),L7=a("li"),M3e=a("strong"),ndr=o("deberta-v2"),sdr=o(" \u2014 "),HU=a("a"),ldr=o("DebertaV2ForQuestionAnswering"),idr=o(" (DeBERTa-v2 model)"),ddr=l(),x7=a("li"),E3e=a("strong"),cdr=o("distilbert"),fdr=o(" \u2014 "),JU=a("a"),mdr=o("DistilBertForQuestionAnswering"),gdr=o(" (DistilBERT model)"),hdr=l(),$7=a("li"),C3e=a("strong"),pdr=o("electra"),udr=o(" \u2014 "),YU=a("a"),_dr=o("ElectraForQuestionAnswering"),bdr=o(" (ELECTRA model)"),vdr=l(),k7=a("li"),w3e=a("strong"),Fdr=o("flaubert"),Tdr=o(" \u2014 "),KU=a("a"),Mdr=o("FlaubertForQuestionAnsweringSimple"),Edr=o(" (FlauBERT model)"),Cdr=l(),S7=a("li"),A3e=a("strong"),wdr=o("fnet"),Adr=o(" \u2014 "),ZU=a("a"),ydr=o("FNetForQuestionAnswering"),Ldr=o(" (FNet model)"),xdr=l(),R7=a("li"),y3e=a("strong"),$dr=o("funnel"),kdr=o(" \u2014 "),eH=a("a"),Sdr=o("FunnelForQuestionAnswering"),Rdr=o(" (Funnel Transformer model)"),Pdr=l(),P7=a("li"),L3e=a("strong"),Bdr=o("gptj"),Idr=o(" \u2014 "),oH=a("a"),Ndr=o("GPTJForQuestionAnswering"),qdr=o(" (GPT-J model)"),jdr=l(),B7=a("li"),x3e=a("strong"),Ddr=o("ibert"),Gdr=o(" \u2014 "),rH=a("a"),Odr=o("IBertForQuestionAnswering"),Vdr=o(" (I-BERT model)"),Xdr=l(),I7=a("li"),$3e=a("strong"),zdr=o("layoutlmv2"),Qdr=o(" \u2014 "),tH=a("a"),Wdr=o("LayoutLMv2ForQuestionAnswering"),Udr=o(" (LayoutLMv2 model)"),Hdr=l(),N7=a("li"),k3e=a("strong"),Jdr=o("layoutlmv3"),Ydr=o(" \u2014 "),aH=a("a"),Kdr=o("LayoutLMv3ForQuestionAnswering"),Zdr=o(" (LayoutLMv3 model)"),ecr=l(),q7=a("li"),S3e=a("strong"),ocr=o("led"),rcr=o(" \u2014 "),nH=a("a"),tcr=o("LEDForQuestionAnswering"),acr=o(" (LED model)"),ncr=l(),j7=a("li"),R3e=a("strong"),scr=o("longformer"),lcr=o(" \u2014 "),sH=a("a"),icr=o("LongformerForQuestionAnswering"),dcr=o(" (Longformer model)"),ccr=l(),D7=a("li"),P3e=a("strong"),fcr=o("luke"),mcr=o(" \u2014 "),lH=a("a"),gcr=o("LukeForQuestionAnswering"),hcr=o(" (LUKE model)"),pcr=l(),G7=a("li"),B3e=a("strong"),ucr=o("lxmert"),_cr=o(" \u2014 "),iH=a("a"),bcr=o("LxmertForQuestionAnswering"),vcr=o(" (LXMERT model)"),Fcr=l(),O7=a("li"),I3e=a("strong"),Tcr=o("mbart"),Mcr=o(" \u2014 "),dH=a("a"),Ecr=o("MBartForQuestionAnswering"),Ccr=o(" (mBART model)"),wcr=l(),V7=a("li"),N3e=a("strong"),Acr=o("megatron-bert"),ycr=o(" \u2014 "),cH=a("a"),Lcr=o("MegatronBertForQuestionAnswering"),xcr=o(" (Megatron-BERT model)"),$cr=l(),X7=a("li"),q3e=a("strong"),kcr=o("mobilebert"),Scr=o(" \u2014 "),fH=a("a"),Rcr=o("MobileBertForQuestionAnswering"),Pcr=o(" (MobileBERT model)"),Bcr=l(),z7=a("li"),j3e=a("strong"),Icr=o("mpnet"),Ncr=o(" \u2014 "),mH=a("a"),qcr=o("MPNetForQuestionAnswering"),jcr=o(" (MPNet model)"),Dcr=l(),Q7=a("li"),D3e=a("strong"),Gcr=o("mvp"),Ocr=o(" \u2014 "),gH=a("a"),Vcr=o("MvpForQuestionAnswering"),Xcr=o(" (MVP model)"),zcr=l(),W7=a("li"),G3e=a("strong"),Qcr=o("nezha"),Wcr=o(" \u2014 "),hH=a("a"),Ucr=o("NezhaForQuestionAnswering"),Hcr=o(" (Nezha model)"),Jcr=l(),U7=a("li"),O3e=a("strong"),Ycr=o("nystromformer"),Kcr=o(" \u2014 "),pH=a("a"),Zcr=o("NystromformerForQuestionAnswering"),efr=o(" (Nystr\xF6mformer model)"),ofr=l(),H7=a("li"),V3e=a("strong"),rfr=o("qdqbert"),tfr=o(" \u2014 "),uH=a("a"),afr=o("QDQBertForQuestionAnswering"),nfr=o(" (QDQBert model)"),sfr=l(),J7=a("li"),X3e=a("strong"),lfr=o("reformer"),ifr=o(" \u2014 "),_H=a("a"),dfr=o("ReformerForQuestionAnswering"),cfr=o(" (Reformer model)"),ffr=l(),Y7=a("li"),z3e=a("strong"),mfr=o("rembert"),gfr=o(" \u2014 "),bH=a("a"),hfr=o("RemBertForQuestionAnswering"),pfr=o(" (RemBERT model)"),ufr=l(),K7=a("li"),Q3e=a("strong"),_fr=o("roberta"),bfr=o(" \u2014 "),vH=a("a"),vfr=o("RobertaForQuestionAnswering"),Ffr=o(" (RoBERTa model)"),Tfr=l(),Z7=a("li"),W3e=a("strong"),Mfr=o("roformer"),Efr=o(" \u2014 "),FH=a("a"),Cfr=o("RoFormerForQuestionAnswering"),wfr=o(" (RoFormer model)"),Afr=l(),eT=a("li"),U3e=a("strong"),yfr=o("splinter"),Lfr=o(" \u2014 "),TH=a("a"),xfr=o("SplinterForQuestionAnswering"),$fr=o(" (Splinter model)"),kfr=l(),oT=a("li"),H3e=a("strong"),Sfr=o("squeezebert"),Rfr=o(" \u2014 "),MH=a("a"),Pfr=o("SqueezeBertForQuestionAnswering"),Bfr=o(" (SqueezeBERT model)"),Ifr=l(),rT=a("li"),J3e=a("strong"),Nfr=o("xlm"),qfr=o(" \u2014 "),EH=a("a"),jfr=o("XLMForQuestionAnsweringSimple"),Dfr=o(" (XLM model)"),Gfr=l(),tT=a("li"),Y3e=a("strong"),Ofr=o("xlm-roberta"),Vfr=o(" \u2014 "),CH=a("a"),Xfr=o("XLMRobertaForQuestionAnswering"),zfr=o(" (XLM-RoBERTa model)"),Qfr=l(),aT=a("li"),K3e=a("strong"),Wfr=o("xlm-roberta-xl"),Ufr=o(" \u2014 "),wH=a("a"),Hfr=o("XLMRobertaXLForQuestionAnswering"),Jfr=o(" (XLM-RoBERTa-XL model)"),Yfr=l(),nT=a("li"),Z3e=a("strong"),Kfr=o("xlnet"),Zfr=o(" \u2014 "),AH=a("a"),emr=o("XLNetForQuestionAnsweringSimple"),omr=o(" (XLNet model)"),rmr=l(),sT=a("li"),eFe=a("strong"),tmr=o("yoso"),amr=o(" \u2014 "),yH=a("a"),nmr=o("YosoForQuestionAnswering"),smr=o(" (YOSO model)"),lmr=l(),lT=a("p"),imr=o("The model is set in evaluation mode by default using "),oFe=a("code"),dmr=o("model.eval()"),cmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rFe=a("code"),fmr=o("model.train()"),mmr=l(),F(iT.$$.fragment),_He=l(),qd=a("h2"),dT=a("a"),tFe=a("span"),F(ox.$$.fragment),gmr=l(),aFe=a("span"),hmr=o("AutoModelForTableQuestionAnswering"),bHe=l(),Xo=a("div"),F(rx.$$.fragment),pmr=l(),jd=a("p"),umr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LH=a("a"),_mr=o("from_pretrained()"),bmr=o(" class method or the "),xH=a("a"),vmr=o("from_config()"),Fmr=o(` class
method.`),Tmr=l(),tx=a("p"),Mmr=o("This class cannot be instantiated directly using "),nFe=a("code"),Emr=o("__init__()"),Cmr=o(" (throws an error)."),wmr=l(),Ct=a("div"),F(ax.$$.fragment),Amr=l(),sFe=a("p"),ymr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lmr=l(),Dd=a("p"),xmr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),$mr=o("not"),kmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Smr=o("from_pretrained()"),Rmr=o(" to load the model weights."),Pmr=l(),F(cT.$$.fragment),Bmr=l(),lo=a("div"),F(nx.$$.fragment),Imr=l(),iFe=a("p"),Nmr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qmr=l(),tn=a("p"),jmr=o("The model class to instantiate is selected based on the "),dFe=a("code"),Dmr=o("model_type"),Gmr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),Omr=o("pretrained_model_name_or_path"),Vmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(":"),Qmr=l(),mFe=a("ul"),fT=a("li"),gFe=a("strong"),Wmr=o("tapas"),Umr=o(" \u2014 "),kH=a("a"),Hmr=o("TapasForQuestionAnswering"),Jmr=o(" (TAPAS model)"),Ymr=l(),mT=a("p"),Kmr=o("The model is set in evaluation mode by default using "),hFe=a("code"),Zmr=o("model.eval()"),egr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pFe=a("code"),ogr=o("model.train()"),rgr=l(),F(gT.$$.fragment),vHe=l(),Gd=a("h2"),hT=a("a"),uFe=a("span"),F(sx.$$.fragment),tgr=l(),_Fe=a("span"),agr=o("AutoModelForDocumentQuestionAnswering"),FHe=l(),zo=a("div"),F(lx.$$.fragment),ngr=l(),Od=a("p"),sgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),SH=a("a"),lgr=o("from_pretrained()"),igr=o(" class method or the "),RH=a("a"),dgr=o("from_config()"),cgr=o(` class
method.`),fgr=l(),ix=a("p"),mgr=o("This class cannot be instantiated directly using "),bFe=a("code"),ggr=o("__init__()"),hgr=o(" (throws an error)."),pgr=l(),wt=a("div"),F(dx.$$.fragment),ugr=l(),vFe=a("p"),_gr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),bgr=l(),Vd=a("p"),vgr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),Fgr=o("not"),Tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),Mgr=o("from_pretrained()"),Egr=o(" to load the model weights."),Cgr=l(),F(pT.$$.fragment),wgr=l(),io=a("div"),F(cx.$$.fragment),Agr=l(),TFe=a("p"),ygr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Lgr=l(),an=a("p"),xgr=o("The model class to instantiate is selected based on the "),MFe=a("code"),$gr=o("model_type"),kgr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),Sgr=o("pretrained_model_name_or_path"),Rgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),Pgr=o("pretrained_model_name_or_path"),Bgr=o(":"),Igr=l(),Xd=a("ul"),uT=a("li"),wFe=a("strong"),Ngr=o("donut-swin"),qgr=o(" \u2014 "),BH=a("a"),jgr=o("DonutSwinModel"),Dgr=o(" (DonutSwin model)"),Ggr=l(),_T=a("li"),AFe=a("strong"),Ogr=o("layoutlmv2"),Vgr=o(" \u2014 "),IH=a("a"),Xgr=o("LayoutLMv2ForQuestionAnswering"),zgr=o(" (LayoutLMv2 model)"),Qgr=l(),bT=a("li"),yFe=a("strong"),Wgr=o("layoutlmv3"),Ugr=o(" \u2014 "),NH=a("a"),Hgr=o("LayoutLMv3ForQuestionAnswering"),Jgr=o(" (LayoutLMv3 model)"),Ygr=l(),vT=a("p"),Kgr=o("The model is set in evaluation mode by default using "),LFe=a("code"),Zgr=o("model.eval()"),ehr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=a("code"),ohr=o("model.train()"),rhr=l(),F(FT.$$.fragment),THe=l(),zd=a("h2"),TT=a("a"),$Fe=a("span"),F(fx.$$.fragment),thr=l(),kFe=a("span"),ahr=o("AutoModelForImageClassification"),MHe=l(),Qo=a("div"),F(mx.$$.fragment),nhr=l(),Qd=a("p"),shr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=a("a"),lhr=o("from_pretrained()"),ihr=o(" class method or the "),jH=a("a"),dhr=o("from_config()"),chr=o(` class
method.`),fhr=l(),gx=a("p"),mhr=o("This class cannot be instantiated directly using "),SFe=a("code"),ghr=o("__init__()"),hhr=o(" (throws an error)."),phr=l(),At=a("div"),F(hx.$$.fragment),uhr=l(),RFe=a("p"),_hr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bhr=l(),Wd=a("p"),vhr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),Fhr=o("not"),Thr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),Mhr=o("from_pretrained()"),Ehr=o(" to load the model weights."),Chr=l(),F(MT.$$.fragment),whr=l(),co=a("div"),F(px.$$.fragment),Ahr=l(),BFe=a("p"),yhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lhr=l(),nn=a("p"),xhr=o("The model class to instantiate is selected based on the "),IFe=a("code"),$hr=o("model_type"),khr=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=a("code"),Phr=o("pretrained_model_name_or_path"),Bhr=o(":"),Ihr=l(),be=a("ul"),ET=a("li"),jFe=a("strong"),Nhr=o("beit"),qhr=o(" \u2014 "),GH=a("a"),jhr=o("BeitForImageClassification"),Dhr=o(" (BEiT model)"),Ghr=l(),CT=a("li"),DFe=a("strong"),Ohr=o("convnext"),Vhr=o(" \u2014 "),OH=a("a"),Xhr=o("ConvNextForImageClassification"),zhr=o(" (ConvNeXT model)"),Qhr=l(),wT=a("li"),GFe=a("strong"),Whr=o("cvt"),Uhr=o(" \u2014 "),VH=a("a"),Hhr=o("CvtForImageClassification"),Jhr=o(" (CvT model)"),Yhr=l(),AT=a("li"),OFe=a("strong"),Khr=o("data2vec-vision"),Zhr=o(" \u2014 "),XH=a("a"),epr=o("Data2VecVisionForImageClassification"),opr=o(" (Data2VecVision model)"),rpr=l(),fl=a("li"),VFe=a("strong"),tpr=o("deit"),apr=o(" \u2014 "),zH=a("a"),npr=o("DeiTForImageClassification"),spr=o(" or "),QH=a("a"),lpr=o("DeiTForImageClassificationWithTeacher"),ipr=o(" (DeiT model)"),dpr=l(),yT=a("li"),XFe=a("strong"),cpr=o("imagegpt"),fpr=o(" \u2014 "),WH=a("a"),mpr=o("ImageGPTForImageClassification"),gpr=o(" (ImageGPT model)"),hpr=l(),ml=a("li"),zFe=a("strong"),ppr=o("levit"),upr=o(" \u2014 "),UH=a("a"),_pr=o("LevitForImageClassification"),bpr=o(" or "),HH=a("a"),vpr=o("LevitForImageClassificationWithTeacher"),Fpr=o(" (LeViT model)"),Tpr=l(),LT=a("li"),QFe=a("strong"),Mpr=o("mobilevit"),Epr=o(" \u2014 "),JH=a("a"),Cpr=o("MobileViTForImageClassification"),wpr=o(" (MobileViT model)"),Apr=l(),yt=a("li"),WFe=a("strong"),ypr=o("perceiver"),Lpr=o(" \u2014 "),YH=a("a"),xpr=o("PerceiverForImageClassificationLearned"),$pr=o(" or "),KH=a("a"),kpr=o("PerceiverForImageClassificationFourier"),Spr=o(" or "),ZH=a("a"),Rpr=o("PerceiverForImageClassificationConvProcessing"),Ppr=o(" (Perceiver model)"),Bpr=l(),xT=a("li"),UFe=a("strong"),Ipr=o("poolformer"),Npr=o(" \u2014 "),eJ=a("a"),qpr=o("PoolFormerForImageClassification"),jpr=o(" (PoolFormer model)"),Dpr=l(),$T=a("li"),HFe=a("strong"),Gpr=o("regnet"),Opr=o(" \u2014 "),oJ=a("a"),Vpr=o("RegNetForImageClassification"),Xpr=o(" (RegNet model)"),zpr=l(),kT=a("li"),JFe=a("strong"),Qpr=o("resnet"),Wpr=o(" \u2014 "),rJ=a("a"),Upr=o("ResNetForImageClassification"),Hpr=o(" (ResNet model)"),Jpr=l(),ST=a("li"),YFe=a("strong"),Ypr=o("segformer"),Kpr=o(" \u2014 "),tJ=a("a"),Zpr=o("SegformerForImageClassification"),eur=o(" (SegFormer model)"),our=l(),RT=a("li"),KFe=a("strong"),rur=o("swin"),tur=o(" \u2014 "),aJ=a("a"),aur=o("SwinForImageClassification"),nur=o(" (Swin Transformer model)"),sur=l(),PT=a("li"),ZFe=a("strong"),lur=o("swinv2"),iur=o(" \u2014 "),nJ=a("a"),dur=o("Swinv2ForImageClassification"),cur=o(" (Swin Transformer V2 model)"),fur=l(),BT=a("li"),e7e=a("strong"),mur=o("van"),gur=o(" \u2014 "),sJ=a("a"),hur=o("VanForImageClassification"),pur=o(" (VAN model)"),uur=l(),IT=a("li"),o7e=a("strong"),_ur=o("vit"),bur=o(" \u2014 "),lJ=a("a"),vur=o("ViTForImageClassification"),Fur=o(" (ViT model)"),Tur=l(),NT=a("p"),Mur=o("The model is set in evaluation mode by default using "),r7e=a("code"),Eur=o("model.eval()"),Cur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t7e=a("code"),wur=o("model.train()"),Aur=l(),F(qT.$$.fragment),EHe=l(),Ud=a("h2"),jT=a("a"),a7e=a("span"),F(ux.$$.fragment),yur=l(),n7e=a("span"),Lur=o("AutoModelForVideoClassification"),CHe=l(),Wo=a("div"),F(_x.$$.fragment),xur=l(),Hd=a("p"),$ur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),iJ=a("a"),kur=o("from_pretrained()"),Sur=o(" class method or the "),dJ=a("a"),Rur=o("from_config()"),Pur=o(` class
method.`),Bur=l(),bx=a("p"),Iur=o("This class cannot be instantiated directly using "),s7e=a("code"),Nur=o("__init__()"),qur=o(" (throws an error)."),jur=l(),Lt=a("div"),F(vx.$$.fragment),Dur=l(),l7e=a("p"),Gur=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Our=l(),Jd=a("p"),Vur=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),Xur=o("not"),zur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),Qur=o("from_pretrained()"),Wur=o(" to load the model weights."),Uur=l(),F(DT.$$.fragment),Hur=l(),fo=a("div"),F(Fx.$$.fragment),Jur=l(),d7e=a("p"),Yur=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Kur=l(),sn=a("p"),Zur=o("The model class to instantiate is selected based on the "),c7e=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),f7e=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),g7e=a("ul"),GT=a("li"),h7e=a("strong"),l_r=o("videomae"),i_r=o(" \u2014 "),fJ=a("a"),d_r=o("VideoMAEForVideoClassification"),c_r=o(" (VideoMAE model)"),f_r=l(),OT=a("p"),m_r=o("The model is set in evaluation mode by default using "),p7e=a("code"),g_r=o("model.eval()"),h_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=a("code"),p_r=o("model.train()"),u_r=l(),F(VT.$$.fragment),wHe=l(),Yd=a("h2"),XT=a("a"),_7e=a("span"),F(Tx.$$.fragment),__r=l(),b7e=a("span"),b_r=o("AutoModelForVision2Seq"),AHe=l(),Uo=a("div"),F(Mx.$$.fragment),v_r=l(),Kd=a("p"),F_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mJ=a("a"),T_r=o("from_pretrained()"),M_r=o(" class method or the "),gJ=a("a"),E_r=o("from_config()"),C_r=o(` class
method.`),w_r=l(),Ex=a("p"),A_r=o("This class cannot be instantiated directly using "),v7e=a("code"),y_r=o("__init__()"),L_r=o(" (throws an error)."),x_r=l(),xt=a("div"),F(Cx.$$.fragment),$_r=l(),F7e=a("p"),k_r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S_r=l(),Zd=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),P_r=o("not"),B_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),I_r=o("from_pretrained()"),N_r=o(" to load the model weights."),q_r=l(),F(zT.$$.fragment),j_r=l(),mo=a("div"),F(wx.$$.fragment),D_r=l(),M7e=a("p"),G_r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O_r=l(),ln=a("p"),V_r=o("The model class to instantiate is selected based on the "),E7e=a("code"),X_r=o("model_type"),z_r=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),Q_r=o("pretrained_model_name_or_path"),W_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),U_r=o("pretrained_model_name_or_path"),H_r=o(":"),J_r=l(),A7e=a("ul"),QT=a("li"),y7e=a("strong"),Y_r=o("vision-encoder-decoder"),K_r=o(" \u2014 "),pJ=a("a"),Z_r=o("VisionEncoderDecoderModel"),e2r=o(" (Vision Encoder decoder model)"),o2r=l(),WT=a("p"),r2r=o("The model is set in evaluation mode by default using "),L7e=a("code"),t2r=o("model.eval()"),a2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x7e=a("code"),n2r=o("model.train()"),s2r=l(),F(UT.$$.fragment),yHe=l(),ec=a("h2"),HT=a("a"),$7e=a("span"),F(Ax.$$.fragment),l2r=l(),k7e=a("span"),i2r=o("AutoModelForVisualQuestionAnswering"),LHe=l(),Ho=a("div"),F(yx.$$.fragment),d2r=l(),oc=a("p"),c2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),uJ=a("a"),f2r=o("from_pretrained()"),m2r=o(" class method or the "),_J=a("a"),g2r=o("from_config()"),h2r=o(` class
method.`),p2r=l(),Lx=a("p"),u2r=o("This class cannot be instantiated directly using "),S7e=a("code"),_2r=o("__init__()"),b2r=o(" (throws an error)."),v2r=l(),$t=a("div"),F(xx.$$.fragment),F2r=l(),R7e=a("p"),T2r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),M2r=l(),rc=a("p"),E2r=o(`Note:
Loading a model from its configuration file does `),P7e=a("strong"),C2r=o("not"),w2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),A2r=o("from_pretrained()"),y2r=o(" to load the model weights."),L2r=l(),F(JT.$$.fragment),x2r=l(),go=a("div"),F($x.$$.fragment),$2r=l(),B7e=a("p"),k2r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),S2r=l(),dn=a("p"),R2r=o("The model class to instantiate is selected based on the "),I7e=a("code"),P2r=o("model_type"),B2r=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),I2r=o("pretrained_model_name_or_path"),N2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=a("code"),q2r=o("pretrained_model_name_or_path"),j2r=o(":"),D2r=l(),j7e=a("ul"),YT=a("li"),D7e=a("strong"),G2r=o("vilt"),O2r=o(" \u2014 "),vJ=a("a"),V2r=o("ViltForQuestionAnswering"),X2r=o(" (ViLT model)"),z2r=l(),KT=a("p"),Q2r=o("The model is set in evaluation mode by default using "),G7e=a("code"),W2r=o("model.eval()"),U2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O7e=a("code"),H2r=o("model.train()"),J2r=l(),F(ZT.$$.fragment),xHe=l(),tc=a("h2"),e8=a("a"),V7e=a("span"),F(kx.$$.fragment),Y2r=l(),X7e=a("span"),K2r=o("AutoModelForAudioClassification"),$He=l(),Jo=a("div"),F(Sx.$$.fragment),Z2r=l(),ac=a("p"),e1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FJ=a("a"),o1r=o("from_pretrained()"),r1r=o(" class method or the "),TJ=a("a"),t1r=o("from_config()"),a1r=o(` class
method.`),n1r=l(),Rx=a("p"),s1r=o("This class cannot be instantiated directly using "),z7e=a("code"),l1r=o("__init__()"),i1r=o(" (throws an error)."),d1r=l(),kt=a("div"),F(Px.$$.fragment),c1r=l(),Q7e=a("p"),f1r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),m1r=l(),nc=a("p"),g1r=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),h1r=o("not"),p1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),u1r=o("from_pretrained()"),_1r=o(" to load the model weights."),b1r=l(),F(o8.$$.fragment),v1r=l(),ho=a("div"),F(Bx.$$.fragment),F1r=l(),U7e=a("p"),T1r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),M1r=l(),cn=a("p"),E1r=o("The model class to instantiate is selected based on the "),H7e=a("code"),C1r=o("model_type"),w1r=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),A1r=o("pretrained_model_name_or_path"),y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),L1r=o("pretrained_model_name_or_path"),x1r=o(":"),$1r=l(),Pe=a("ul"),r8=a("li"),K7e=a("strong"),k1r=o("data2vec-audio"),S1r=o(" \u2014 "),EJ=a("a"),R1r=o("Data2VecAudioForSequenceClassification"),P1r=o(" (Data2VecAudio model)"),B1r=l(),t8=a("li"),Z7e=a("strong"),I1r=o("hubert"),N1r=o(" \u2014 "),CJ=a("a"),q1r=o("HubertForSequenceClassification"),j1r=o(" (Hubert model)"),D1r=l(),a8=a("li"),eTe=a("strong"),G1r=o("sew"),O1r=o(" \u2014 "),wJ=a("a"),V1r=o("SEWForSequenceClassification"),X1r=o(" (SEW model)"),z1r=l(),n8=a("li"),oTe=a("strong"),Q1r=o("sew-d"),W1r=o(" \u2014 "),AJ=a("a"),U1r=o("SEWDForSequenceClassification"),H1r=o(" (SEW-D model)"),J1r=l(),s8=a("li"),rTe=a("strong"),Y1r=o("unispeech"),K1r=o(" \u2014 "),yJ=a("a"),Z1r=o("UniSpeechForSequenceClassification"),ebr=o(" (UniSpeech model)"),obr=l(),l8=a("li"),tTe=a("strong"),rbr=o("unispeech-sat"),tbr=o(" \u2014 "),LJ=a("a"),abr=o("UniSpeechSatForSequenceClassification"),nbr=o(" (UniSpeechSat model)"),sbr=l(),i8=a("li"),aTe=a("strong"),lbr=o("wav2vec2"),ibr=o(" \u2014 "),xJ=a("a"),dbr=o("Wav2Vec2ForSequenceClassification"),cbr=o(" (Wav2Vec2 model)"),fbr=l(),d8=a("li"),nTe=a("strong"),mbr=o("wav2vec2-conformer"),gbr=o(" \u2014 "),$J=a("a"),hbr=o("Wav2Vec2ConformerForSequenceClassification"),pbr=o(" (Wav2Vec2-Conformer model)"),ubr=l(),c8=a("li"),sTe=a("strong"),_br=o("wavlm"),bbr=o(" \u2014 "),kJ=a("a"),vbr=o("WavLMForSequenceClassification"),Fbr=o(" (WavLM model)"),Tbr=l(),f8=a("p"),Mbr=o("The model is set in evaluation mode by default using "),lTe=a("code"),Ebr=o("model.eval()"),Cbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iTe=a("code"),wbr=o("model.train()"),Abr=l(),F(m8.$$.fragment),kHe=l(),sc=a("h2"),g8=a("a"),dTe=a("span"),F(Ix.$$.fragment),ybr=l(),cTe=a("span"),Lbr=o("AutoModelForAudioFrameClassification"),SHe=l(),Yo=a("div"),F(Nx.$$.fragment),xbr=l(),lc=a("p"),$br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SJ=a("a"),kbr=o("from_pretrained()"),Sbr=o(" class method or the "),RJ=a("a"),Rbr=o("from_config()"),Pbr=o(` class
method.`),Bbr=l(),qx=a("p"),Ibr=o("This class cannot be instantiated directly using "),fTe=a("code"),Nbr=o("__init__()"),qbr=o(" (throws an error)."),jbr=l(),St=a("div"),F(jx.$$.fragment),Dbr=l(),mTe=a("p"),Gbr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Obr=l(),ic=a("p"),Vbr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),Xbr=o("not"),zbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),Qbr=o("from_pretrained()"),Wbr=o(" to load the model weights."),Ubr=l(),F(h8.$$.fragment),Hbr=l(),po=a("div"),F(Dx.$$.fragment),Jbr=l(),hTe=a("p"),Ybr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kbr=l(),fn=a("p"),Zbr=o("The model class to instantiate is selected based on the "),pTe=a("code"),evr=o("model_type"),ovr=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(":"),svr=l(),it=a("ul"),p8=a("li"),bTe=a("strong"),lvr=o("data2vec-audio"),ivr=o(" \u2014 "),BJ=a("a"),dvr=o("Data2VecAudioForAudioFrameClassification"),cvr=o(" (Data2VecAudio model)"),fvr=l(),u8=a("li"),vTe=a("strong"),mvr=o("unispeech-sat"),gvr=o(" \u2014 "),IJ=a("a"),hvr=o("UniSpeechSatForAudioFrameClassification"),pvr=o(" (UniSpeechSat model)"),uvr=l(),_8=a("li"),FTe=a("strong"),_vr=o("wav2vec2"),bvr=o(" \u2014 "),NJ=a("a"),vvr=o("Wav2Vec2ForAudioFrameClassification"),Fvr=o(" (Wav2Vec2 model)"),Tvr=l(),b8=a("li"),TTe=a("strong"),Mvr=o("wav2vec2-conformer"),Evr=o(" \u2014 "),qJ=a("a"),Cvr=o("Wav2Vec2ConformerForAudioFrameClassification"),wvr=o(" (Wav2Vec2-Conformer model)"),Avr=l(),v8=a("li"),MTe=a("strong"),yvr=o("wavlm"),Lvr=o(" \u2014 "),jJ=a("a"),xvr=o("WavLMForAudioFrameClassification"),$vr=o(" (WavLM model)"),kvr=l(),F8=a("p"),Svr=o("The model is set in evaluation mode by default using "),ETe=a("code"),Rvr=o("model.eval()"),Pvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CTe=a("code"),Bvr=o("model.train()"),Ivr=l(),F(T8.$$.fragment),RHe=l(),dc=a("h2"),M8=a("a"),wTe=a("span"),F(Gx.$$.fragment),Nvr=l(),ATe=a("span"),qvr=o("AutoModelForCTC"),PHe=l(),Ko=a("div"),F(Ox.$$.fragment),jvr=l(),cc=a("p"),Dvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DJ=a("a"),Gvr=o("from_pretrained()"),Ovr=o(" class method or the "),GJ=a("a"),Vvr=o("from_config()"),Xvr=o(` class
method.`),zvr=l(),Vx=a("p"),Qvr=o("This class cannot be instantiated directly using "),yTe=a("code"),Wvr=o("__init__()"),Uvr=o(" (throws an error)."),Hvr=l(),Rt=a("div"),F(Xx.$$.fragment),Jvr=l(),LTe=a("p"),Yvr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Kvr=l(),fc=a("p"),Zvr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),e3r=o("not"),o3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),r3r=o("from_pretrained()"),t3r=o(" to load the model weights."),a3r=l(),F(E8.$$.fragment),n3r=l(),uo=a("div"),F(zx.$$.fragment),s3r=l(),$Te=a("p"),l3r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),i3r=l(),mn=a("p"),d3r=o("The model class to instantiate is selected based on the "),kTe=a("code"),c3r=o("model_type"),f3r=o(` property of the config object (either
passed as an argument or loaded from `),STe=a("code"),m3r=o("pretrained_model_name_or_path"),g3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=a("code"),h3r=o("pretrained_model_name_or_path"),p3r=o(":"),u3r=l(),ye=a("ul"),C8=a("li"),PTe=a("strong"),_3r=o("data2vec-audio"),b3r=o(" \u2014 "),VJ=a("a"),v3r=o("Data2VecAudioForCTC"),F3r=o(" (Data2VecAudio model)"),T3r=l(),w8=a("li"),BTe=a("strong"),M3r=o("hubert"),E3r=o(" \u2014 "),XJ=a("a"),C3r=o("HubertForCTC"),w3r=o(" (Hubert model)"),A3r=l(),A8=a("li"),ITe=a("strong"),y3r=o("mctct"),L3r=o(" \u2014 "),zJ=a("a"),x3r=o("MCTCTForCTC"),$3r=o(" (M-CTC-T model)"),k3r=l(),y8=a("li"),NTe=a("strong"),S3r=o("sew"),R3r=o(" \u2014 "),QJ=a("a"),P3r=o("SEWForCTC"),B3r=o(" (SEW model)"),I3r=l(),L8=a("li"),qTe=a("strong"),N3r=o("sew-d"),q3r=o(" \u2014 "),WJ=a("a"),j3r=o("SEWDForCTC"),D3r=o(" (SEW-D model)"),G3r=l(),x8=a("li"),jTe=a("strong"),O3r=o("unispeech"),V3r=o(" \u2014 "),UJ=a("a"),X3r=o("UniSpeechForCTC"),z3r=o(" (UniSpeech model)"),Q3r=l(),$8=a("li"),DTe=a("strong"),W3r=o("unispeech-sat"),U3r=o(" \u2014 "),HJ=a("a"),H3r=o("UniSpeechSatForCTC"),J3r=o(" (UniSpeechSat model)"),Y3r=l(),k8=a("li"),GTe=a("strong"),K3r=o("wav2vec2"),Z3r=o(" \u2014 "),JJ=a("a"),eFr=o("Wav2Vec2ForCTC"),oFr=o(" (Wav2Vec2 model)"),rFr=l(),S8=a("li"),OTe=a("strong"),tFr=o("wav2vec2-conformer"),aFr=o(" \u2014 "),YJ=a("a"),nFr=o("Wav2Vec2ConformerForCTC"),sFr=o(" (Wav2Vec2-Conformer model)"),lFr=l(),R8=a("li"),VTe=a("strong"),iFr=o("wavlm"),dFr=o(" \u2014 "),KJ=a("a"),cFr=o("WavLMForCTC"),fFr=o(" (WavLM model)"),mFr=l(),P8=a("p"),gFr=o("The model is set in evaluation mode by default using "),XTe=a("code"),hFr=o("model.eval()"),pFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zTe=a("code"),uFr=o("model.train()"),_Fr=l(),F(B8.$$.fragment),BHe=l(),mc=a("h2"),I8=a("a"),QTe=a("span"),F(Qx.$$.fragment),bFr=l(),WTe=a("span"),vFr=o("AutoModelForSpeechSeq2Seq"),IHe=l(),Zo=a("div"),F(Wx.$$.fragment),FFr=l(),gc=a("p"),TFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZJ=a("a"),MFr=o("from_pretrained()"),EFr=o(" class method or the "),eY=a("a"),CFr=o("from_config()"),wFr=o(` class
method.`),AFr=l(),Ux=a("p"),yFr=o("This class cannot be instantiated directly using "),UTe=a("code"),LFr=o("__init__()"),xFr=o(" (throws an error)."),$Fr=l(),Pt=a("div"),F(Hx.$$.fragment),kFr=l(),HTe=a("p"),SFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RFr=l(),hc=a("p"),PFr=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),BFr=o("not"),IFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),NFr=o("from_pretrained()"),qFr=o(" to load the model weights."),jFr=l(),F(N8.$$.fragment),DFr=l(),_o=a("div"),F(Jx.$$.fragment),GFr=l(),YTe=a("p"),OFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VFr=l(),gn=a("p"),XFr=o("The model class to instantiate is selected based on the "),KTe=a("code"),zFr=o("model_type"),QFr=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),WFr=o("pretrained_model_name_or_path"),UFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),HFr=o("pretrained_model_name_or_path"),JFr=o(":"),YFr=l(),Yx=a("ul"),q8=a("li"),o8e=a("strong"),KFr=o("speech-encoder-decoder"),ZFr=o(" \u2014 "),rY=a("a"),e7r=o("SpeechEncoderDecoderModel"),o7r=o(" (Speech Encoder decoder model)"),r7r=l(),j8=a("li"),r8e=a("strong"),t7r=o("speech_to_text"),a7r=o(" \u2014 "),tY=a("a"),n7r=o("Speech2TextForConditionalGeneration"),s7r=o(" (Speech2Text model)"),l7r=l(),D8=a("p"),i7r=o("The model is set in evaluation mode by default using "),t8e=a("code"),d7r=o("model.eval()"),c7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=a("code"),f7r=o("model.train()"),m7r=l(),F(G8.$$.fragment),NHe=l(),pc=a("h2"),O8=a("a"),n8e=a("span"),F(Kx.$$.fragment),g7r=l(),s8e=a("span"),h7r=o("AutoModelForAudioXVector"),qHe=l(),er=a("div"),F(Zx.$$.fragment),p7r=l(),uc=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aY=a("a"),_7r=o("from_pretrained()"),b7r=o(" class method or the "),nY=a("a"),v7r=o("from_config()"),F7r=o(` class
method.`),T7r=l(),e$=a("p"),M7r=o("This class cannot be instantiated directly using "),l8e=a("code"),E7r=o("__init__()"),C7r=o(" (throws an error)."),w7r=l(),Bt=a("div"),F(o$.$$.fragment),A7r=l(),i8e=a("p"),y7r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),L7r=l(),_c=a("p"),x7r=o(`Note:
Loading a model from its configuration file does `),d8e=a("strong"),$7r=o("not"),k7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),S7r=o("from_pretrained()"),R7r=o(" to load the model weights."),P7r=l(),F(V8.$$.fragment),B7r=l(),bo=a("div"),F(r$.$$.fragment),I7r=l(),c8e=a("p"),N7r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),q7r=l(),hn=a("p"),j7r=o("The model class to instantiate is selected based on the "),f8e=a("code"),D7r=o("model_type"),G7r=o(` property of the config object (either
passed as an argument or loaded from `),m8e=a("code"),O7r=o("pretrained_model_name_or_path"),V7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=a("code"),X7r=o("pretrained_model_name_or_path"),z7r=o(":"),Q7r=l(),dt=a("ul"),X8=a("li"),h8e=a("strong"),W7r=o("data2vec-audio"),U7r=o(" \u2014 "),lY=a("a"),H7r=o("Data2VecAudioForXVector"),J7r=o(" (Data2VecAudio model)"),Y7r=l(),z8=a("li"),p8e=a("strong"),K7r=o("unispeech-sat"),Z7r=o(" \u2014 "),iY=a("a"),eTr=o("UniSpeechSatForXVector"),oTr=o(" (UniSpeechSat model)"),rTr=l(),Q8=a("li"),u8e=a("strong"),tTr=o("wav2vec2"),aTr=o(" \u2014 "),dY=a("a"),nTr=o("Wav2Vec2ForXVector"),sTr=o(" (Wav2Vec2 model)"),lTr=l(),W8=a("li"),_8e=a("strong"),iTr=o("wav2vec2-conformer"),dTr=o(" \u2014 "),cY=a("a"),cTr=o("Wav2Vec2ConformerForXVector"),fTr=o(" (Wav2Vec2-Conformer model)"),mTr=l(),U8=a("li"),b8e=a("strong"),gTr=o("wavlm"),hTr=o(" \u2014 "),fY=a("a"),pTr=o("WavLMForXVector"),uTr=o(" (WavLM model)"),_Tr=l(),H8=a("p"),bTr=o("The model is set in evaluation mode by default using "),v8e=a("code"),vTr=o("model.eval()"),FTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F8e=a("code"),TTr=o("model.train()"),MTr=l(),F(J8.$$.fragment),jHe=l(),bc=a("h2"),Y8=a("a"),T8e=a("span"),F(t$.$$.fragment),ETr=l(),M8e=a("span"),CTr=o("AutoModelForMaskedImageModeling"),DHe=l(),or=a("div"),F(a$.$$.fragment),wTr=l(),vc=a("p"),ATr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mY=a("a"),yTr=o("from_pretrained()"),LTr=o(" class method or the "),gY=a("a"),xTr=o("from_config()"),$Tr=o(` class
method.`),kTr=l(),n$=a("p"),STr=o("This class cannot be instantiated directly using "),E8e=a("code"),RTr=o("__init__()"),PTr=o(" (throws an error)."),BTr=l(),It=a("div"),F(s$.$$.fragment),ITr=l(),C8e=a("p"),NTr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qTr=l(),Fc=a("p"),jTr=o(`Note:
Loading a model from its configuration file does `),w8e=a("strong"),DTr=o("not"),GTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),OTr=o("from_pretrained()"),VTr=o(" to load the model weights."),XTr=l(),F(K8.$$.fragment),zTr=l(),vo=a("div"),F(l$.$$.fragment),QTr=l(),A8e=a("p"),WTr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),UTr=l(),pn=a("p"),HTr=o("The model class to instantiate is selected based on the "),y8e=a("code"),JTr=o("model_type"),YTr=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=a("code"),e8r=o("pretrained_model_name_or_path"),o8r=o(":"),r8r=l(),un=a("ul"),Z8=a("li"),$8e=a("strong"),t8r=o("deit"),a8r=o(" \u2014 "),pY=a("a"),n8r=o("DeiTForMaskedImageModeling"),s8r=o(" (DeiT model)"),l8r=l(),eM=a("li"),k8e=a("strong"),i8r=o("swin"),d8r=o(" \u2014 "),uY=a("a"),c8r=o("SwinForMaskedImageModeling"),f8r=o(" (Swin Transformer model)"),m8r=l(),oM=a("li"),S8e=a("strong"),g8r=o("swinv2"),h8r=o(" \u2014 "),_Y=a("a"),p8r=o("Swinv2ForMaskedImageModeling"),u8r=o(" (Swin Transformer V2 model)"),_8r=l(),rM=a("li"),R8e=a("strong"),b8r=o("vit"),v8r=o(" \u2014 "),bY=a("a"),F8r=o("ViTForMaskedImageModeling"),T8r=o(" (ViT model)"),M8r=l(),tM=a("p"),E8r=o("The model is set in evaluation mode by default using "),P8e=a("code"),C8r=o("model.eval()"),w8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B8e=a("code"),A8r=o("model.train()"),y8r=l(),F(aM.$$.fragment),GHe=l(),Tc=a("h2"),nM=a("a"),I8e=a("span"),F(i$.$$.fragment),L8r=l(),N8e=a("span"),x8r=o("AutoModelForObjectDetection"),OHe=l(),rr=a("div"),F(d$.$$.fragment),$8r=l(),Mc=a("p"),k8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),vY=a("a"),S8r=o("from_pretrained()"),R8r=o(" class method or the "),FY=a("a"),P8r=o("from_config()"),B8r=o(` class
method.`),I8r=l(),c$=a("p"),N8r=o("This class cannot be instantiated directly using "),q8e=a("code"),q8r=o("__init__()"),j8r=o(" (throws an error)."),D8r=l(),Nt=a("div"),F(f$.$$.fragment),G8r=l(),j8e=a("p"),O8r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),V8r=l(),Ec=a("p"),X8r=o(`Note:
Loading a model from its configuration file does `),D8e=a("strong"),z8r=o("not"),Q8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),W8r=o("from_pretrained()"),U8r=o(" to load the model weights."),H8r=l(),F(sM.$$.fragment),J8r=l(),Fo=a("div"),F(m$.$$.fragment),Y8r=l(),G8e=a("p"),K8r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Z8r=l(),_n=a("p"),eMr=o("The model class to instantiate is selected based on the "),O8e=a("code"),oMr=o("model_type"),rMr=o(` property of the config object (either
passed as an argument or loaded from `),V8e=a("code"),tMr=o("pretrained_model_name_or_path"),aMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=a("code"),nMr=o("pretrained_model_name_or_path"),sMr=o(":"),lMr=l(),g$=a("ul"),lM=a("li"),z8e=a("strong"),iMr=o("detr"),dMr=o(" \u2014 "),MY=a("a"),cMr=o("DetrForObjectDetection"),fMr=o(" (DETR model)"),mMr=l(),iM=a("li"),Q8e=a("strong"),gMr=o("yolos"),hMr=o(" \u2014 "),EY=a("a"),pMr=o("YolosForObjectDetection"),uMr=o(" (YOLOS model)"),_Mr=l(),dM=a("p"),bMr=o("The model is set in evaluation mode by default using "),W8e=a("code"),vMr=o("model.eval()"),FMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U8e=a("code"),TMr=o("model.train()"),MMr=l(),F(cM.$$.fragment),VHe=l(),Cc=a("h2"),fM=a("a"),H8e=a("span"),F(h$.$$.fragment),EMr=l(),J8e=a("span"),CMr=o("AutoModelForImageSegmentation"),XHe=l(),tr=a("div"),F(p$.$$.fragment),wMr=l(),wc=a("p"),AMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),CY=a("a"),yMr=o("from_pretrained()"),LMr=o(" class method or the "),wY=a("a"),xMr=o("from_config()"),$Mr=o(` class
method.`),kMr=l(),u$=a("p"),SMr=o("This class cannot be instantiated directly using "),Y8e=a("code"),RMr=o("__init__()"),PMr=o(" (throws an error)."),BMr=l(),qt=a("div"),F(_$.$$.fragment),IMr=l(),K8e=a("p"),NMr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),qMr=l(),Ac=a("p"),jMr=o(`Note:
Loading a model from its configuration file does `),Z8e=a("strong"),DMr=o("not"),GMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),OMr=o("from_pretrained()"),VMr=o(" to load the model weights."),XMr=l(),F(mM.$$.fragment),zMr=l(),To=a("div"),F(b$.$$.fragment),QMr=l(),eMe=a("p"),WMr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),UMr=l(),bn=a("p"),HMr=o("The model class to instantiate is selected based on the "),oMe=a("code"),JMr=o("model_type"),YMr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(":"),rEr=l(),aMe=a("ul"),gM=a("li"),nMe=a("strong"),tEr=o("detr"),aEr=o(" \u2014 "),yY=a("a"),nEr=o("DetrForSegmentation"),sEr=o(" (DETR model)"),lEr=l(),hM=a("p"),iEr=o("The model is set in evaluation mode by default using "),sMe=a("code"),dEr=o("model.eval()"),cEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lMe=a("code"),fEr=o("model.train()"),mEr=l(),F(pM.$$.fragment),zHe=l(),yc=a("h2"),uM=a("a"),iMe=a("span"),F(v$.$$.fragment),gEr=l(),dMe=a("span"),hEr=o("AutoModelForSemanticSegmentation"),QHe=l(),ar=a("div"),F(F$.$$.fragment),pEr=l(),Lc=a("p"),uEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),LY=a("a"),_Er=o("from_pretrained()"),bEr=o(" class method or the "),xY=a("a"),vEr=o("from_config()"),FEr=o(` class
method.`),TEr=l(),T$=a("p"),MEr=o("This class cannot be instantiated directly using "),cMe=a("code"),EEr=o("__init__()"),CEr=o(" (throws an error)."),wEr=l(),jt=a("div"),F(M$.$$.fragment),AEr=l(),fMe=a("p"),yEr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LEr=l(),xc=a("p"),xEr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),$Er=o("not"),kEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),SEr=o("from_pretrained()"),REr=o(" to load the model weights."),PEr=l(),F(_M.$$.fragment),BEr=l(),Mo=a("div"),F(E$.$$.fragment),IEr=l(),gMe=a("p"),NEr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qEr=l(),vn=a("p"),jEr=o("The model class to instantiate is selected based on the "),hMe=a("code"),DEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(":"),QEr=l(),ct=a("ul"),bM=a("li"),_Me=a("strong"),WEr=o("beit"),UEr=o(" \u2014 "),kY=a("a"),HEr=o("BeitForSemanticSegmentation"),JEr=o(" (BEiT model)"),YEr=l(),vM=a("li"),bMe=a("strong"),KEr=o("data2vec-vision"),ZEr=o(" \u2014 "),SY=a("a"),e4r=o("Data2VecVisionForSemanticSegmentation"),o4r=o(" (Data2VecVision model)"),r4r=l(),FM=a("li"),vMe=a("strong"),t4r=o("dpt"),a4r=o(" \u2014 "),RY=a("a"),n4r=o("DPTForSemanticSegmentation"),s4r=o(" (DPT model)"),l4r=l(),TM=a("li"),FMe=a("strong"),i4r=o("mobilevit"),d4r=o(" \u2014 "),PY=a("a"),c4r=o("MobileViTForSemanticSegmentation"),f4r=o(" (MobileViT model)"),m4r=l(),MM=a("li"),TMe=a("strong"),g4r=o("segformer"),h4r=o(" \u2014 "),BY=a("a"),p4r=o("SegformerForSemanticSegmentation"),u4r=o(" (SegFormer model)"),_4r=l(),EM=a("p"),b4r=o("The model is set in evaluation mode by default using "),MMe=a("code"),v4r=o("model.eval()"),F4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EMe=a("code"),T4r=o("model.train()"),M4r=l(),F(CM.$$.fragment),WHe=l(),$c=a("h2"),wM=a("a"),CMe=a("span"),F(C$.$$.fragment),E4r=l(),wMe=a("span"),C4r=o("AutoModelForInstanceSegmentation"),UHe=l(),nr=a("div"),F(w$.$$.fragment),w4r=l(),kc=a("p"),A4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),IY=a("a"),y4r=o("from_pretrained()"),L4r=o(" class method or the "),NY=a("a"),x4r=o("from_config()"),$4r=o(` class
method.`),k4r=l(),A$=a("p"),S4r=o("This class cannot be instantiated directly using "),AMe=a("code"),R4r=o("__init__()"),P4r=o(" (throws an error)."),B4r=l(),Dt=a("div"),F(y$.$$.fragment),I4r=l(),yMe=a("p"),N4r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),q4r=l(),Sc=a("p"),j4r=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),D4r=o("not"),G4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),O4r=o("from_pretrained()"),V4r=o(" to load the model weights."),X4r=l(),F(AM.$$.fragment),z4r=l(),Eo=a("div"),F(L$.$$.fragment),Q4r=l(),xMe=a("p"),W4r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),U4r=l(),Fn=a("p"),H4r=o("The model class to instantiate is selected based on the "),$Me=a("code"),J4r=o("model_type"),Y4r=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),K4r=o("pretrained_model_name_or_path"),Z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),eCr=o("pretrained_model_name_or_path"),oCr=o(":"),rCr=l(),RMe=a("ul"),yM=a("li"),PMe=a("strong"),tCr=o("maskformer"),aCr=o(" \u2014 "),jY=a("a"),nCr=o("MaskFormerForInstanceSegmentation"),sCr=o(" (MaskFormer model)"),lCr=l(),LM=a("p"),iCr=o("The model is set in evaluation mode by default using "),BMe=a("code"),dCr=o("model.eval()"),cCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IMe=a("code"),fCr=o("model.train()"),mCr=l(),F(xM.$$.fragment),HHe=l(),Rc=a("h2"),$M=a("a"),NMe=a("span"),F(x$.$$.fragment),gCr=l(),qMe=a("span"),hCr=o("TFAutoModel"),JHe=l(),sr=a("div"),F($$.$$.fragment),pCr=l(),Pc=a("p"),uCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DY=a("a"),_Cr=o("from_pretrained()"),bCr=o(" class method or the "),GY=a("a"),vCr=o("from_config()"),FCr=o(` class
method.`),TCr=l(),k$=a("p"),MCr=o("This class cannot be instantiated directly using "),jMe=a("code"),ECr=o("__init__()"),CCr=o(" (throws an error)."),wCr=l(),Gt=a("div"),F(S$.$$.fragment),ACr=l(),DMe=a("p"),yCr=o("Instantiates one of the base model classes of the library from a configuration."),LCr=l(),Bc=a("p"),xCr=o(`Note:
Loading a model from its configuration file does `),GMe=a("strong"),$Cr=o("not"),kCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),SCr=o("from_pretrained()"),RCr=o(" to load the model weights."),PCr=l(),F(kM.$$.fragment),BCr=l(),Br=a("div"),F(R$.$$.fragment),ICr=l(),OMe=a("p"),NCr=o("Instantiate one of the base model classes of the library from a pretrained model."),qCr=l(),Tn=a("p"),jCr=o("The model class to instantiate is selected based on the "),VMe=a("code"),DCr=o("model_type"),GCr=o(` property of the config object (either
passed as an argument or loaded from `),XMe=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(":"),QCr=l(),q=a("ul"),SM=a("li"),QMe=a("strong"),WCr=o("albert"),UCr=o(" \u2014 "),VY=a("a"),HCr=o("TFAlbertModel"),JCr=o(" (ALBERT model)"),YCr=l(),RM=a("li"),WMe=a("strong"),KCr=o("bart"),ZCr=o(" \u2014 "),XY=a("a"),e5r=o("TFBartModel"),o5r=o(" (BART model)"),r5r=l(),PM=a("li"),UMe=a("strong"),t5r=o("bert"),a5r=o(" \u2014 "),zY=a("a"),n5r=o("TFBertModel"),s5r=o(" (BERT model)"),l5r=l(),BM=a("li"),HMe=a("strong"),i5r=o("blenderbot"),d5r=o(" \u2014 "),QY=a("a"),c5r=o("TFBlenderbotModel"),f5r=o(" (Blenderbot model)"),m5r=l(),IM=a("li"),JMe=a("strong"),g5r=o("blenderbot-small"),h5r=o(" \u2014 "),WY=a("a"),p5r=o("TFBlenderbotSmallModel"),u5r=o(" (BlenderbotSmall model)"),_5r=l(),NM=a("li"),YMe=a("strong"),b5r=o("camembert"),v5r=o(" \u2014 "),UY=a("a"),F5r=o("TFCamembertModel"),T5r=o(" (CamemBERT model)"),M5r=l(),qM=a("li"),KMe=a("strong"),E5r=o("clip"),C5r=o(" \u2014 "),HY=a("a"),w5r=o("TFCLIPModel"),A5r=o(" (CLIP model)"),y5r=l(),jM=a("li"),ZMe=a("strong"),L5r=o("convbert"),x5r=o(" \u2014 "),JY=a("a"),$5r=o("TFConvBertModel"),k5r=o(" (ConvBERT model)"),S5r=l(),DM=a("li"),eEe=a("strong"),R5r=o("convnext"),P5r=o(" \u2014 "),YY=a("a"),B5r=o("TFConvNextModel"),I5r=o(" (ConvNeXT model)"),N5r=l(),GM=a("li"),oEe=a("strong"),q5r=o("ctrl"),j5r=o(" \u2014 "),KY=a("a"),D5r=o("TFCTRLModel"),G5r=o(" (CTRL model)"),O5r=l(),OM=a("li"),rEe=a("strong"),V5r=o("data2vec-vision"),X5r=o(" \u2014 "),ZY=a("a"),z5r=o("TFData2VecVisionModel"),Q5r=o(" (Data2VecVision model)"),W5r=l(),VM=a("li"),tEe=a("strong"),U5r=o("deberta"),H5r=o(" \u2014 "),eK=a("a"),J5r=o("TFDebertaModel"),Y5r=o(" (DeBERTa model)"),K5r=l(),XM=a("li"),aEe=a("strong"),Z5r=o("deberta-v2"),e0r=o(" \u2014 "),oK=a("a"),o0r=o("TFDebertaV2Model"),r0r=o(" (DeBERTa-v2 model)"),t0r=l(),zM=a("li"),nEe=a("strong"),a0r=o("deit"),n0r=o(" \u2014 "),rK=a("a"),s0r=o("TFDeiTModel"),l0r=o(" (DeiT model)"),i0r=l(),QM=a("li"),sEe=a("strong"),d0r=o("distilbert"),c0r=o(" \u2014 "),tK=a("a"),f0r=o("TFDistilBertModel"),m0r=o(" (DistilBERT model)"),g0r=l(),WM=a("li"),lEe=a("strong"),h0r=o("dpr"),p0r=o(" \u2014 "),aK=a("a"),u0r=o("TFDPRQuestionEncoder"),_0r=o(" (DPR model)"),b0r=l(),UM=a("li"),iEe=a("strong"),v0r=o("electra"),F0r=o(" \u2014 "),nK=a("a"),T0r=o("TFElectraModel"),M0r=o(" (ELECTRA model)"),E0r=l(),HM=a("li"),dEe=a("strong"),C0r=o("flaubert"),w0r=o(" \u2014 "),sK=a("a"),A0r=o("TFFlaubertModel"),y0r=o(" (FlauBERT model)"),L0r=l(),gl=a("li"),cEe=a("strong"),x0r=o("funnel"),$0r=o(" \u2014 "),lK=a("a"),k0r=o("TFFunnelModel"),S0r=o(" or "),iK=a("a"),R0r=o("TFFunnelBaseModel"),P0r=o(" (Funnel Transformer model)"),B0r=l(),JM=a("li"),fEe=a("strong"),I0r=o("gpt2"),N0r=o(" \u2014 "),dK=a("a"),q0r=o("TFGPT2Model"),j0r=o(" (OpenAI GPT-2 model)"),D0r=l(),YM=a("li"),mEe=a("strong"),G0r=o("gptj"),O0r=o(" \u2014 "),cK=a("a"),V0r=o("TFGPTJModel"),X0r=o(" (GPT-J model)"),z0r=l(),KM=a("li"),gEe=a("strong"),Q0r=o("hubert"),W0r=o(" \u2014 "),fK=a("a"),U0r=o("TFHubertModel"),H0r=o(" (Hubert model)"),J0r=l(),ZM=a("li"),hEe=a("strong"),Y0r=o("layoutlm"),K0r=o(" \u2014 "),mK=a("a"),Z0r=o("TFLayoutLMModel"),ewr=o(" (LayoutLM model)"),owr=l(),eE=a("li"),pEe=a("strong"),rwr=o("led"),twr=o(" \u2014 "),gK=a("a"),awr=o("TFLEDModel"),nwr=o(" (LED model)"),swr=l(),oE=a("li"),uEe=a("strong"),lwr=o("longformer"),iwr=o(" \u2014 "),hK=a("a"),dwr=o("TFLongformerModel"),cwr=o(" (Longformer model)"),fwr=l(),rE=a("li"),_Ee=a("strong"),mwr=o("lxmert"),gwr=o(" \u2014 "),pK=a("a"),hwr=o("TFLxmertModel"),pwr=o(" (LXMERT model)"),uwr=l(),tE=a("li"),bEe=a("strong"),_wr=o("marian"),bwr=o(" \u2014 "),uK=a("a"),vwr=o("TFMarianModel"),Fwr=o(" (Marian model)"),Twr=l(),aE=a("li"),vEe=a("strong"),Mwr=o("mbart"),Ewr=o(" \u2014 "),_K=a("a"),Cwr=o("TFMBartModel"),wwr=o(" (mBART model)"),Awr=l(),nE=a("li"),FEe=a("strong"),ywr=o("mobilebert"),Lwr=o(" \u2014 "),bK=a("a"),xwr=o("TFMobileBertModel"),$wr=o(" (MobileBERT model)"),kwr=l(),sE=a("li"),TEe=a("strong"),Swr=o("mpnet"),Rwr=o(" \u2014 "),vK=a("a"),Pwr=o("TFMPNetModel"),Bwr=o(" (MPNet model)"),Iwr=l(),lE=a("li"),MEe=a("strong"),Nwr=o("mt5"),qwr=o(" \u2014 "),FK=a("a"),jwr=o("TFMT5Model"),Dwr=o(" (MT5 model)"),Gwr=l(),iE=a("li"),EEe=a("strong"),Owr=o("openai-gpt"),Vwr=o(" \u2014 "),TK=a("a"),Xwr=o("TFOpenAIGPTModel"),zwr=o(" (OpenAI GPT model)"),Qwr=l(),dE=a("li"),CEe=a("strong"),Wwr=o("opt"),Uwr=o(" \u2014 "),MK=a("a"),Hwr=o("TFOPTModel"),Jwr=o(" (OPT model)"),Ywr=l(),cE=a("li"),wEe=a("strong"),Kwr=o("pegasus"),Zwr=o(" \u2014 "),EK=a("a"),eAr=o("TFPegasusModel"),oAr=o(" (Pegasus model)"),rAr=l(),fE=a("li"),AEe=a("strong"),tAr=o("regnet"),aAr=o(" \u2014 "),CK=a("a"),nAr=o("TFRegNetModel"),sAr=o(" (RegNet model)"),lAr=l(),mE=a("li"),yEe=a("strong"),iAr=o("rembert"),dAr=o(" \u2014 "),wK=a("a"),cAr=o("TFRemBertModel"),fAr=o(" (RemBERT model)"),mAr=l(),gE=a("li"),LEe=a("strong"),gAr=o("resnet"),hAr=o(" \u2014 "),AK=a("a"),pAr=o("TFResNetModel"),uAr=o(" (ResNet model)"),_Ar=l(),hE=a("li"),xEe=a("strong"),bAr=o("roberta"),vAr=o(" \u2014 "),yK=a("a"),FAr=o("TFRobertaModel"),TAr=o(" (RoBERTa model)"),MAr=l(),pE=a("li"),$Ee=a("strong"),EAr=o("roformer"),CAr=o(" \u2014 "),LK=a("a"),wAr=o("TFRoFormerModel"),AAr=o(" (RoFormer model)"),yAr=l(),uE=a("li"),kEe=a("strong"),LAr=o("segformer"),xAr=o(" \u2014 "),xK=a("a"),$Ar=o("TFSegformerModel"),kAr=o(" (SegFormer model)"),SAr=l(),_E=a("li"),SEe=a("strong"),RAr=o("speech_to_text"),PAr=o(" \u2014 "),$K=a("a"),BAr=o("TFSpeech2TextModel"),IAr=o(" (Speech2Text model)"),NAr=l(),bE=a("li"),REe=a("strong"),qAr=o("swin"),jAr=o(" \u2014 "),kK=a("a"),DAr=o("TFSwinModel"),GAr=o(" (Swin Transformer model)"),OAr=l(),vE=a("li"),PEe=a("strong"),VAr=o("t5"),XAr=o(" \u2014 "),SK=a("a"),zAr=o("TFT5Model"),QAr=o(" (T5 model)"),WAr=l(),FE=a("li"),BEe=a("strong"),UAr=o("tapas"),HAr=o(" \u2014 "),RK=a("a"),JAr=o("TFTapasModel"),YAr=o(" (TAPAS model)"),KAr=l(),TE=a("li"),IEe=a("strong"),ZAr=o("transfo-xl"),e6r=o(" \u2014 "),PK=a("a"),o6r=o("TFTransfoXLModel"),r6r=o(" (Transformer-XL model)"),t6r=l(),ME=a("li"),NEe=a("strong"),a6r=o("vit"),n6r=o(" \u2014 "),BK=a("a"),s6r=o("TFViTModel"),l6r=o(" (ViT model)"),i6r=l(),EE=a("li"),qEe=a("strong"),d6r=o("vit_mae"),c6r=o(" \u2014 "),IK=a("a"),f6r=o("TFViTMAEModel"),m6r=o(" (ViTMAE model)"),g6r=l(),CE=a("li"),jEe=a("strong"),h6r=o("wav2vec2"),p6r=o(" \u2014 "),NK=a("a"),u6r=o("TFWav2Vec2Model"),_6r=o(" (Wav2Vec2 model)"),b6r=l(),wE=a("li"),DEe=a("strong"),v6r=o("xlm"),F6r=o(" \u2014 "),qK=a("a"),T6r=o("TFXLMModel"),M6r=o(" (XLM model)"),E6r=l(),AE=a("li"),GEe=a("strong"),C6r=o("xlm-roberta"),w6r=o(" \u2014 "),jK=a("a"),A6r=o("TFXLMRobertaModel"),y6r=o(" (XLM-RoBERTa model)"),L6r=l(),yE=a("li"),OEe=a("strong"),x6r=o("xlnet"),$6r=o(" \u2014 "),DK=a("a"),k6r=o("TFXLNetModel"),S6r=o(" (XLNet model)"),R6r=l(),F(LE.$$.fragment),YHe=l(),Ic=a("h2"),xE=a("a"),VEe=a("span"),F(P$.$$.fragment),P6r=l(),XEe=a("span"),B6r=o("TFAutoModelForPreTraining"),KHe=l(),lr=a("div"),F(B$.$$.fragment),I6r=l(),Nc=a("p"),N6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GK=a("a"),q6r=o("from_pretrained()"),j6r=o(" class method or the "),OK=a("a"),D6r=o("from_config()"),G6r=o(` class
method.`),O6r=l(),I$=a("p"),V6r=o("This class cannot be instantiated directly using "),zEe=a("code"),X6r=o("__init__()"),z6r=o(" (throws an error)."),Q6r=l(),Ot=a("div"),F(N$.$$.fragment),W6r=l(),QEe=a("p"),U6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H6r=l(),qc=a("p"),J6r=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),Y6r=o("not"),K6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),Z6r=o("from_pretrained()"),eyr=o(" to load the model weights."),oyr=l(),F($E.$$.fragment),ryr=l(),Ir=a("div"),F(q$.$$.fragment),tyr=l(),UEe=a("p"),ayr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nyr=l(),Mn=a("p"),syr=o("The model class to instantiate is selected based on the "),HEe=a("code"),lyr=o("model_type"),iyr=o(` property of the config object (either
passed as an argument or loaded from `),JEe=a("code"),dyr=o("pretrained_model_name_or_path"),cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(":"),gyr=l(),se=a("ul"),kE=a("li"),KEe=a("strong"),hyr=o("albert"),pyr=o(" \u2014 "),XK=a("a"),uyr=o("TFAlbertForPreTraining"),_yr=o(" (ALBERT model)"),byr=l(),SE=a("li"),ZEe=a("strong"),vyr=o("bart"),Fyr=o(" \u2014 "),zK=a("a"),Tyr=o("TFBartForConditionalGeneration"),Myr=o(" (BART model)"),Eyr=l(),RE=a("li"),e4e=a("strong"),Cyr=o("bert"),wyr=o(" \u2014 "),QK=a("a"),Ayr=o("TFBertForPreTraining"),yyr=o(" (BERT model)"),Lyr=l(),PE=a("li"),o4e=a("strong"),xyr=o("camembert"),$yr=o(" \u2014 "),WK=a("a"),kyr=o("TFCamembertForMaskedLM"),Syr=o(" (CamemBERT model)"),Ryr=l(),BE=a("li"),r4e=a("strong"),Pyr=o("ctrl"),Byr=o(" \u2014 "),UK=a("a"),Iyr=o("TFCTRLLMHeadModel"),Nyr=o(" (CTRL model)"),qyr=l(),IE=a("li"),t4e=a("strong"),jyr=o("distilbert"),Dyr=o(" \u2014 "),HK=a("a"),Gyr=o("TFDistilBertForMaskedLM"),Oyr=o(" (DistilBERT model)"),Vyr=l(),NE=a("li"),a4e=a("strong"),Xyr=o("electra"),zyr=o(" \u2014 "),JK=a("a"),Qyr=o("TFElectraForPreTraining"),Wyr=o(" (ELECTRA model)"),Uyr=l(),qE=a("li"),n4e=a("strong"),Hyr=o("flaubert"),Jyr=o(" \u2014 "),YK=a("a"),Yyr=o("TFFlaubertWithLMHeadModel"),Kyr=o(" (FlauBERT model)"),Zyr=l(),jE=a("li"),s4e=a("strong"),eLr=o("funnel"),oLr=o(" \u2014 "),KK=a("a"),rLr=o("TFFunnelForPreTraining"),tLr=o(" (Funnel Transformer model)"),aLr=l(),DE=a("li"),l4e=a("strong"),nLr=o("gpt2"),sLr=o(" \u2014 "),ZK=a("a"),lLr=o("TFGPT2LMHeadModel"),iLr=o(" (OpenAI GPT-2 model)"),dLr=l(),GE=a("li"),i4e=a("strong"),cLr=o("layoutlm"),fLr=o(" \u2014 "),eZ=a("a"),mLr=o("TFLayoutLMForMaskedLM"),gLr=o(" (LayoutLM model)"),hLr=l(),OE=a("li"),d4e=a("strong"),pLr=o("lxmert"),uLr=o(" \u2014 "),oZ=a("a"),_Lr=o("TFLxmertForPreTraining"),bLr=o(" (LXMERT model)"),vLr=l(),VE=a("li"),c4e=a("strong"),FLr=o("mobilebert"),TLr=o(" \u2014 "),rZ=a("a"),MLr=o("TFMobileBertForPreTraining"),ELr=o(" (MobileBERT model)"),CLr=l(),XE=a("li"),f4e=a("strong"),wLr=o("mpnet"),ALr=o(" \u2014 "),tZ=a("a"),yLr=o("TFMPNetForMaskedLM"),LLr=o(" (MPNet model)"),xLr=l(),zE=a("li"),m4e=a("strong"),$Lr=o("openai-gpt"),kLr=o(" \u2014 "),aZ=a("a"),SLr=o("TFOpenAIGPTLMHeadModel"),RLr=o(" (OpenAI GPT model)"),PLr=l(),QE=a("li"),g4e=a("strong"),BLr=o("roberta"),ILr=o(" \u2014 "),nZ=a("a"),NLr=o("TFRobertaForMaskedLM"),qLr=o(" (RoBERTa model)"),jLr=l(),WE=a("li"),h4e=a("strong"),DLr=o("t5"),GLr=o(" \u2014 "),sZ=a("a"),OLr=o("TFT5ForConditionalGeneration"),VLr=o(" (T5 model)"),XLr=l(),UE=a("li"),p4e=a("strong"),zLr=o("tapas"),QLr=o(" \u2014 "),lZ=a("a"),WLr=o("TFTapasForMaskedLM"),ULr=o(" (TAPAS model)"),HLr=l(),HE=a("li"),u4e=a("strong"),JLr=o("transfo-xl"),YLr=o(" \u2014 "),iZ=a("a"),KLr=o("TFTransfoXLLMHeadModel"),ZLr=o(" (Transformer-XL model)"),e9r=l(),JE=a("li"),_4e=a("strong"),o9r=o("vit_mae"),r9r=o(" \u2014 "),dZ=a("a"),t9r=o("TFViTMAEForPreTraining"),a9r=o(" (ViTMAE model)"),n9r=l(),YE=a("li"),b4e=a("strong"),s9r=o("xlm"),l9r=o(" \u2014 "),cZ=a("a"),i9r=o("TFXLMWithLMHeadModel"),d9r=o(" (XLM model)"),c9r=l(),KE=a("li"),v4e=a("strong"),f9r=o("xlm-roberta"),m9r=o(" \u2014 "),fZ=a("a"),g9r=o("TFXLMRobertaForMaskedLM"),h9r=o(" (XLM-RoBERTa model)"),p9r=l(),ZE=a("li"),F4e=a("strong"),u9r=o("xlnet"),_9r=o(" \u2014 "),mZ=a("a"),b9r=o("TFXLNetLMHeadModel"),v9r=o(" (XLNet model)"),F9r=l(),F(e4.$$.fragment),ZHe=l(),jc=a("h2"),o4=a("a"),T4e=a("span"),F(j$.$$.fragment),T9r=l(),M4e=a("span"),M9r=o("TFAutoModelForCausalLM"),eJe=l(),ir=a("div"),F(D$.$$.fragment),E9r=l(),Dc=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gZ=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),hZ=a("a"),y9r=o("from_config()"),L9r=o(` class
method.`),x9r=l(),G$=a("p"),$9r=o("This class cannot be instantiated directly using "),E4e=a("code"),k9r=o("__init__()"),S9r=o(" (throws an error)."),R9r=l(),Vt=a("div"),F(O$.$$.fragment),P9r=l(),C4e=a("p"),B9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I9r=l(),Gc=a("p"),N9r=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),q9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),F(r4.$$.fragment),V9r=l(),Nr=a("div"),F(V$.$$.fragment),X9r=l(),A4e=a("p"),z9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q9r=l(),En=a("p"),W9r=o("The model class to instantiate is selected based on the "),y4e=a("code"),U9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),exr=l(),Me=a("ul"),t4=a("li"),$4e=a("strong"),oxr=o("bert"),rxr=o(" \u2014 "),uZ=a("a"),txr=o("TFBertLMHeadModel"),axr=o(" (BERT model)"),nxr=l(),a4=a("li"),k4e=a("strong"),sxr=o("camembert"),lxr=o(" \u2014 "),_Z=a("a"),ixr=o("TFCamembertForCausalLM"),dxr=o(" (CamemBERT model)"),cxr=l(),n4=a("li"),S4e=a("strong"),fxr=o("ctrl"),mxr=o(" \u2014 "),bZ=a("a"),gxr=o("TFCTRLLMHeadModel"),hxr=o(" (CTRL model)"),pxr=l(),s4=a("li"),R4e=a("strong"),uxr=o("gpt2"),_xr=o(" \u2014 "),vZ=a("a"),bxr=o("TFGPT2LMHeadModel"),vxr=o(" (OpenAI GPT-2 model)"),Fxr=l(),l4=a("li"),P4e=a("strong"),Txr=o("gptj"),Mxr=o(" \u2014 "),FZ=a("a"),Exr=o("TFGPTJForCausalLM"),Cxr=o(" (GPT-J model)"),wxr=l(),i4=a("li"),B4e=a("strong"),Axr=o("openai-gpt"),yxr=o(" \u2014 "),TZ=a("a"),Lxr=o("TFOpenAIGPTLMHeadModel"),xxr=o(" (OpenAI GPT model)"),$xr=l(),d4=a("li"),I4e=a("strong"),kxr=o("opt"),Sxr=o(" \u2014 "),MZ=a("a"),Rxr=o("TFOPTForCausalLM"),Pxr=o(" (OPT model)"),Bxr=l(),c4=a("li"),N4e=a("strong"),Ixr=o("rembert"),Nxr=o(" \u2014 "),EZ=a("a"),qxr=o("TFRemBertForCausalLM"),jxr=o(" (RemBERT model)"),Dxr=l(),f4=a("li"),q4e=a("strong"),Gxr=o("roberta"),Oxr=o(" \u2014 "),CZ=a("a"),Vxr=o("TFRobertaForCausalLM"),Xxr=o(" (RoBERTa model)"),zxr=l(),m4=a("li"),j4e=a("strong"),Qxr=o("roformer"),Wxr=o(" \u2014 "),wZ=a("a"),Uxr=o("TFRoFormerForCausalLM"),Hxr=o(" (RoFormer model)"),Jxr=l(),g4=a("li"),D4e=a("strong"),Yxr=o("transfo-xl"),Kxr=o(" \u2014 "),AZ=a("a"),Zxr=o("TFTransfoXLLMHeadModel"),e$r=o(" (Transformer-XL model)"),o$r=l(),h4=a("li"),G4e=a("strong"),r$r=o("xlm"),t$r=o(" \u2014 "),yZ=a("a"),a$r=o("TFXLMWithLMHeadModel"),n$r=o(" (XLM model)"),s$r=l(),p4=a("li"),O4e=a("strong"),l$r=o("xlnet"),i$r=o(" \u2014 "),LZ=a("a"),d$r=o("TFXLNetLMHeadModel"),c$r=o(" (XLNet model)"),f$r=l(),F(u4.$$.fragment),oJe=l(),Oc=a("h2"),_4=a("a"),V4e=a("span"),F(X$.$$.fragment),m$r=l(),X4e=a("span"),g$r=o("TFAutoModelForImageClassification"),rJe=l(),dr=a("div"),F(z$.$$.fragment),h$r=l(),Vc=a("p"),p$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xZ=a("a"),u$r=o("from_pretrained()"),_$r=o(" class method or the "),$Z=a("a"),b$r=o("from_config()"),v$r=o(` class
method.`),F$r=l(),Q$=a("p"),T$r=o("This class cannot be instantiated directly using "),z4e=a("code"),M$r=o("__init__()"),E$r=o(" (throws an error)."),C$r=l(),Xt=a("div"),F(W$.$$.fragment),w$r=l(),Q4e=a("p"),A$r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),y$r=l(),Xc=a("p"),L$r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),x$r=o("not"),$$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("a"),k$r=o("from_pretrained()"),S$r=o(" to load the model weights."),R$r=l(),F(b4.$$.fragment),P$r=l(),qr=a("div"),F(U$.$$.fragment),B$r=l(),U4e=a("p"),I$r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N$r=l(),Cn=a("p"),q$r=o("The model class to instantiate is selected based on the "),H4e=a("code"),j$r=o("model_type"),D$r=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),G$r=o("pretrained_model_name_or_path"),O$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),V$r=o("pretrained_model_name_or_path"),X$r=o(":"),z$r=l(),Ve=a("ul"),v4=a("li"),K4e=a("strong"),Q$r=o("convnext"),W$r=o(" \u2014 "),SZ=a("a"),U$r=o("TFConvNextForImageClassification"),H$r=o(" (ConvNeXT model)"),J$r=l(),F4=a("li"),Z4e=a("strong"),Y$r=o("data2vec-vision"),K$r=o(" \u2014 "),RZ=a("a"),Z$r=o("TFData2VecVisionForImageClassification"),ekr=o(" (Data2VecVision model)"),okr=l(),hl=a("li"),eCe=a("strong"),rkr=o("deit"),tkr=o(" \u2014 "),PZ=a("a"),akr=o("TFDeiTForImageClassification"),nkr=o(" or "),BZ=a("a"),skr=o("TFDeiTForImageClassificationWithTeacher"),lkr=o(" (DeiT model)"),ikr=l(),T4=a("li"),oCe=a("strong"),dkr=o("regnet"),ckr=o(" \u2014 "),IZ=a("a"),fkr=o("TFRegNetForImageClassification"),mkr=o(" (RegNet model)"),gkr=l(),M4=a("li"),rCe=a("strong"),hkr=o("resnet"),pkr=o(" \u2014 "),NZ=a("a"),ukr=o("TFResNetForImageClassification"),_kr=o(" (ResNet model)"),bkr=l(),E4=a("li"),tCe=a("strong"),vkr=o("segformer"),Fkr=o(" \u2014 "),qZ=a("a"),Tkr=o("TFSegformerForImageClassification"),Mkr=o(" (SegFormer model)"),Ekr=l(),C4=a("li"),aCe=a("strong"),Ckr=o("swin"),wkr=o(" \u2014 "),jZ=a("a"),Akr=o("TFSwinForImageClassification"),ykr=o(" (Swin Transformer model)"),Lkr=l(),w4=a("li"),nCe=a("strong"),xkr=o("vit"),$kr=o(" \u2014 "),DZ=a("a"),kkr=o("TFViTForImageClassification"),Skr=o(" (ViT model)"),Rkr=l(),F(A4.$$.fragment),tJe=l(),zc=a("h2"),y4=a("a"),sCe=a("span"),F(H$.$$.fragment),Pkr=l(),lCe=a("span"),Bkr=o("TFAutoModelForSemanticSegmentation"),aJe=l(),cr=a("div"),F(J$.$$.fragment),Ikr=l(),Qc=a("p"),Nkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GZ=a("a"),qkr=o("from_pretrained()"),jkr=o(" class method or the "),OZ=a("a"),Dkr=o("from_config()"),Gkr=o(` class
method.`),Okr=l(),Y$=a("p"),Vkr=o("This class cannot be instantiated directly using "),iCe=a("code"),Xkr=o("__init__()"),zkr=o(" (throws an error)."),Qkr=l(),zt=a("div"),F(K$.$$.fragment),Wkr=l(),dCe=a("p"),Ukr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hkr=l(),Wc=a("p"),Jkr=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),Ykr=o("not"),Kkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("a"),Zkr=o("from_pretrained()"),eSr=o(" to load the model weights."),oSr=l(),F(L4.$$.fragment),rSr=l(),jr=a("div"),F(Z$.$$.fragment),tSr=l(),fCe=a("p"),aSr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),nSr=l(),wn=a("p"),sSr=o("The model class to instantiate is selected based on the "),mCe=a("code"),lSr=o("model_type"),iSr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),dSr=o("pretrained_model_name_or_path"),cSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),fSr=o("pretrained_model_name_or_path"),mSr=o(":"),gSr=l(),ek=a("ul"),x4=a("li"),pCe=a("strong"),hSr=o("data2vec-vision"),pSr=o(" \u2014 "),XZ=a("a"),uSr=o("TFData2VecVisionForSemanticSegmentation"),_Sr=o(" (Data2VecVision model)"),bSr=l(),$4=a("li"),uCe=a("strong"),vSr=o("segformer"),FSr=o(" \u2014 "),zZ=a("a"),TSr=o("TFSegformerForSemanticSegmentation"),MSr=o(" (SegFormer model)"),ESr=l(),F(k4.$$.fragment),nJe=l(),Uc=a("h2"),S4=a("a"),_Ce=a("span"),F(ok.$$.fragment),CSr=l(),bCe=a("span"),wSr=o("TFAutoModelForMaskedLM"),sJe=l(),fr=a("div"),F(rk.$$.fragment),ASr=l(),Hc=a("p"),ySr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QZ=a("a"),LSr=o("from_pretrained()"),xSr=o(" class method or the "),WZ=a("a"),$Sr=o("from_config()"),kSr=o(` class
method.`),SSr=l(),tk=a("p"),RSr=o("This class cannot be instantiated directly using "),vCe=a("code"),PSr=o("__init__()"),BSr=o(" (throws an error)."),ISr=l(),Qt=a("div"),F(ak.$$.fragment),NSr=l(),FCe=a("p"),qSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jSr=l(),Jc=a("p"),DSr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),GSr=o("not"),OSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=a("a"),VSr=o("from_pretrained()"),XSr=o(" to load the model weights."),zSr=l(),F(R4.$$.fragment),QSr=l(),Dr=a("div"),F(nk.$$.fragment),WSr=l(),MCe=a("p"),USr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSr=l(),An=a("p"),JSr=o("The model class to instantiate is selected based on the "),ECe=a("code"),YSr=o("model_type"),KSr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),ZSr=o("pretrained_model_name_or_path"),eRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(":"),tRr=l(),de=a("ul"),P4=a("li"),ACe=a("strong"),aRr=o("albert"),nRr=o(" \u2014 "),HZ=a("a"),sRr=o("TFAlbertForMaskedLM"),lRr=o(" (ALBERT model)"),iRr=l(),B4=a("li"),yCe=a("strong"),dRr=o("bert"),cRr=o(" \u2014 "),JZ=a("a"),fRr=o("TFBertForMaskedLM"),mRr=o(" (BERT model)"),gRr=l(),I4=a("li"),LCe=a("strong"),hRr=o("camembert"),pRr=o(" \u2014 "),YZ=a("a"),uRr=o("TFCamembertForMaskedLM"),_Rr=o(" (CamemBERT model)"),bRr=l(),N4=a("li"),xCe=a("strong"),vRr=o("convbert"),FRr=o(" \u2014 "),KZ=a("a"),TRr=o("TFConvBertForMaskedLM"),MRr=o(" (ConvBERT model)"),ERr=l(),q4=a("li"),$Ce=a("strong"),CRr=o("deberta"),wRr=o(" \u2014 "),ZZ=a("a"),ARr=o("TFDebertaForMaskedLM"),yRr=o(" (DeBERTa model)"),LRr=l(),j4=a("li"),kCe=a("strong"),xRr=o("deberta-v2"),$Rr=o(" \u2014 "),eee=a("a"),kRr=o("TFDebertaV2ForMaskedLM"),SRr=o(" (DeBERTa-v2 model)"),RRr=l(),D4=a("li"),SCe=a("strong"),PRr=o("distilbert"),BRr=o(" \u2014 "),oee=a("a"),IRr=o("TFDistilBertForMaskedLM"),NRr=o(" (DistilBERT model)"),qRr=l(),G4=a("li"),RCe=a("strong"),jRr=o("electra"),DRr=o(" \u2014 "),ree=a("a"),GRr=o("TFElectraForMaskedLM"),ORr=o(" (ELECTRA model)"),VRr=l(),O4=a("li"),PCe=a("strong"),XRr=o("flaubert"),zRr=o(" \u2014 "),tee=a("a"),QRr=o("TFFlaubertWithLMHeadModel"),WRr=o(" (FlauBERT model)"),URr=l(),V4=a("li"),BCe=a("strong"),HRr=o("funnel"),JRr=o(" \u2014 "),aee=a("a"),YRr=o("TFFunnelForMaskedLM"),KRr=o(" (Funnel Transformer model)"),ZRr=l(),X4=a("li"),ICe=a("strong"),ePr=o("layoutlm"),oPr=o(" \u2014 "),nee=a("a"),rPr=o("TFLayoutLMForMaskedLM"),tPr=o(" (LayoutLM model)"),aPr=l(),z4=a("li"),NCe=a("strong"),nPr=o("longformer"),sPr=o(" \u2014 "),see=a("a"),lPr=o("TFLongformerForMaskedLM"),iPr=o(" (Longformer model)"),dPr=l(),Q4=a("li"),qCe=a("strong"),cPr=o("mobilebert"),fPr=o(" \u2014 "),lee=a("a"),mPr=o("TFMobileBertForMaskedLM"),gPr=o(" (MobileBERT model)"),hPr=l(),W4=a("li"),jCe=a("strong"),pPr=o("mpnet"),uPr=o(" \u2014 "),iee=a("a"),_Pr=o("TFMPNetForMaskedLM"),bPr=o(" (MPNet model)"),vPr=l(),U4=a("li"),DCe=a("strong"),FPr=o("rembert"),TPr=o(" \u2014 "),dee=a("a"),MPr=o("TFRemBertForMaskedLM"),EPr=o(" (RemBERT model)"),CPr=l(),H4=a("li"),GCe=a("strong"),wPr=o("roberta"),APr=o(" \u2014 "),cee=a("a"),yPr=o("TFRobertaForMaskedLM"),LPr=o(" (RoBERTa model)"),xPr=l(),J4=a("li"),OCe=a("strong"),$Pr=o("roformer"),kPr=o(" \u2014 "),fee=a("a"),SPr=o("TFRoFormerForMaskedLM"),RPr=o(" (RoFormer model)"),PPr=l(),Y4=a("li"),VCe=a("strong"),BPr=o("tapas"),IPr=o(" \u2014 "),mee=a("a"),NPr=o("TFTapasForMaskedLM"),qPr=o(" (TAPAS model)"),jPr=l(),K4=a("li"),XCe=a("strong"),DPr=o("xlm"),GPr=o(" \u2014 "),gee=a("a"),OPr=o("TFXLMWithLMHeadModel"),VPr=o(" (XLM model)"),XPr=l(),Z4=a("li"),zCe=a("strong"),zPr=o("xlm-roberta"),QPr=o(" \u2014 "),hee=a("a"),WPr=o("TFXLMRobertaForMaskedLM"),UPr=o(" (XLM-RoBERTa model)"),HPr=l(),F(eC.$$.fragment),lJe=l(),Yc=a("h2"),oC=a("a"),QCe=a("span"),F(sk.$$.fragment),JPr=l(),WCe=a("span"),YPr=o("TFAutoModelForSeq2SeqLM"),iJe=l(),mr=a("div"),F(lk.$$.fragment),KPr=l(),Kc=a("p"),ZPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pee=a("a"),eBr=o("from_pretrained()"),oBr=o(" class method or the "),uee=a("a"),rBr=o("from_config()"),tBr=o(` class
method.`),aBr=l(),ik=a("p"),nBr=o("This class cannot be instantiated directly using "),UCe=a("code"),sBr=o("__init__()"),lBr=o(" (throws an error)."),iBr=l(),Wt=a("div"),F(dk.$$.fragment),dBr=l(),HCe=a("p"),cBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fBr=l(),Zc=a("p"),mBr=o(`Note:
Loading a model from its configuration file does `),JCe=a("strong"),gBr=o("not"),hBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),pBr=o("from_pretrained()"),uBr=o(" to load the model weights."),_Br=l(),F(rC.$$.fragment),bBr=l(),Gr=a("div"),F(ck.$$.fragment),vBr=l(),YCe=a("p"),FBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TBr=l(),yn=a("p"),MBr=o("The model class to instantiate is selected based on the "),KCe=a("code"),EBr=o("model_type"),CBr=o(` property of the config object (either
passed as an argument or loaded from `),ZCe=a("code"),wBr=o("pretrained_model_name_or_path"),ABr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=a("code"),yBr=o("pretrained_model_name_or_path"),LBr=o(":"),xBr=l(),Le=a("ul"),tC=a("li"),o5e=a("strong"),$Br=o("bart"),kBr=o(" \u2014 "),bee=a("a"),SBr=o("TFBartForConditionalGeneration"),RBr=o(" (BART model)"),PBr=l(),aC=a("li"),r5e=a("strong"),BBr=o("blenderbot"),IBr=o(" \u2014 "),vee=a("a"),NBr=o("TFBlenderbotForConditionalGeneration"),qBr=o(" (Blenderbot model)"),jBr=l(),nC=a("li"),t5e=a("strong"),DBr=o("blenderbot-small"),GBr=o(" \u2014 "),Fee=a("a"),OBr=o("TFBlenderbotSmallForConditionalGeneration"),VBr=o(" (BlenderbotSmall model)"),XBr=l(),sC=a("li"),a5e=a("strong"),zBr=o("encoder-decoder"),QBr=o(" \u2014 "),Tee=a("a"),WBr=o("TFEncoderDecoderModel"),UBr=o(" (Encoder decoder model)"),HBr=l(),lC=a("li"),n5e=a("strong"),JBr=o("led"),YBr=o(" \u2014 "),Mee=a("a"),KBr=o("TFLEDForConditionalGeneration"),ZBr=o(" (LED model)"),eIr=l(),iC=a("li"),s5e=a("strong"),oIr=o("marian"),rIr=o(" \u2014 "),Eee=a("a"),tIr=o("TFMarianMTModel"),aIr=o(" (Marian model)"),nIr=l(),dC=a("li"),l5e=a("strong"),sIr=o("mbart"),lIr=o(" \u2014 "),Cee=a("a"),iIr=o("TFMBartForConditionalGeneration"),dIr=o(" (mBART model)"),cIr=l(),cC=a("li"),i5e=a("strong"),fIr=o("mt5"),mIr=o(" \u2014 "),wee=a("a"),gIr=o("TFMT5ForConditionalGeneration"),hIr=o(" (MT5 model)"),pIr=l(),fC=a("li"),d5e=a("strong"),uIr=o("pegasus"),_Ir=o(" \u2014 "),Aee=a("a"),bIr=o("TFPegasusForConditionalGeneration"),vIr=o(" (Pegasus model)"),FIr=l(),mC=a("li"),c5e=a("strong"),TIr=o("t5"),MIr=o(" \u2014 "),yee=a("a"),EIr=o("TFT5ForConditionalGeneration"),CIr=o(" (T5 model)"),wIr=l(),F(gC.$$.fragment),dJe=l(),ef=a("h2"),hC=a("a"),f5e=a("span"),F(fk.$$.fragment),AIr=l(),m5e=a("span"),yIr=o("TFAutoModelForSequenceClassification"),cJe=l(),gr=a("div"),F(mk.$$.fragment),LIr=l(),of=a("p"),xIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lee=a("a"),$Ir=o("from_pretrained()"),kIr=o(" class method or the "),xee=a("a"),SIr=o("from_config()"),RIr=o(` class
method.`),PIr=l(),gk=a("p"),BIr=o("This class cannot be instantiated directly using "),g5e=a("code"),IIr=o("__init__()"),NIr=o(" (throws an error)."),qIr=l(),Ut=a("div"),F(hk.$$.fragment),jIr=l(),h5e=a("p"),DIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GIr=l(),rf=a("p"),OIr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),VIr=o("not"),XIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=a("a"),zIr=o("from_pretrained()"),QIr=o(" to load the model weights."),WIr=l(),F(pC.$$.fragment),UIr=l(),Or=a("div"),F(pk.$$.fragment),HIr=l(),u5e=a("p"),JIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YIr=l(),Ln=a("p"),KIr=o("The model class to instantiate is selected based on the "),_5e=a("code"),ZIr=o("model_type"),eNr=o(` property of the config object (either
passed as an argument or loaded from `),b5e=a("code"),oNr=o("pretrained_model_name_or_path"),rNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),tNr=o("pretrained_model_name_or_path"),aNr=o(":"),nNr=l(),te=a("ul"),uC=a("li"),F5e=a("strong"),sNr=o("albert"),lNr=o(" \u2014 "),kee=a("a"),iNr=o("TFAlbertForSequenceClassification"),dNr=o(" (ALBERT model)"),cNr=l(),_C=a("li"),T5e=a("strong"),fNr=o("bert"),mNr=o(" \u2014 "),See=a("a"),gNr=o("TFBertForSequenceClassification"),hNr=o(" (BERT model)"),pNr=l(),bC=a("li"),M5e=a("strong"),uNr=o("camembert"),_Nr=o(" \u2014 "),Ree=a("a"),bNr=o("TFCamembertForSequenceClassification"),vNr=o(" (CamemBERT model)"),FNr=l(),vC=a("li"),E5e=a("strong"),TNr=o("convbert"),MNr=o(" \u2014 "),Pee=a("a"),ENr=o("TFConvBertForSequenceClassification"),CNr=o(" (ConvBERT model)"),wNr=l(),FC=a("li"),C5e=a("strong"),ANr=o("ctrl"),yNr=o(" \u2014 "),Bee=a("a"),LNr=o("TFCTRLForSequenceClassification"),xNr=o(" (CTRL model)"),$Nr=l(),TC=a("li"),w5e=a("strong"),kNr=o("deberta"),SNr=o(" \u2014 "),Iee=a("a"),RNr=o("TFDebertaForSequenceClassification"),PNr=o(" (DeBERTa model)"),BNr=l(),MC=a("li"),A5e=a("strong"),INr=o("deberta-v2"),NNr=o(" \u2014 "),Nee=a("a"),qNr=o("TFDebertaV2ForSequenceClassification"),jNr=o(" (DeBERTa-v2 model)"),DNr=l(),EC=a("li"),y5e=a("strong"),GNr=o("distilbert"),ONr=o(" \u2014 "),qee=a("a"),VNr=o("TFDistilBertForSequenceClassification"),XNr=o(" (DistilBERT model)"),zNr=l(),CC=a("li"),L5e=a("strong"),QNr=o("electra"),WNr=o(" \u2014 "),jee=a("a"),UNr=o("TFElectraForSequenceClassification"),HNr=o(" (ELECTRA model)"),JNr=l(),wC=a("li"),x5e=a("strong"),YNr=o("flaubert"),KNr=o(" \u2014 "),Dee=a("a"),ZNr=o("TFFlaubertForSequenceClassification"),eqr=o(" (FlauBERT model)"),oqr=l(),AC=a("li"),$5e=a("strong"),rqr=o("funnel"),tqr=o(" \u2014 "),Gee=a("a"),aqr=o("TFFunnelForSequenceClassification"),nqr=o(" (Funnel Transformer model)"),sqr=l(),yC=a("li"),k5e=a("strong"),lqr=o("gpt2"),iqr=o(" \u2014 "),Oee=a("a"),dqr=o("TFGPT2ForSequenceClassification"),cqr=o(" (OpenAI GPT-2 model)"),fqr=l(),LC=a("li"),S5e=a("strong"),mqr=o("gptj"),gqr=o(" \u2014 "),Vee=a("a"),hqr=o("TFGPTJForSequenceClassification"),pqr=o(" (GPT-J model)"),uqr=l(),xC=a("li"),R5e=a("strong"),_qr=o("layoutlm"),bqr=o(" \u2014 "),Xee=a("a"),vqr=o("TFLayoutLMForSequenceClassification"),Fqr=o(" (LayoutLM model)"),Tqr=l(),$C=a("li"),P5e=a("strong"),Mqr=o("longformer"),Eqr=o(" \u2014 "),zee=a("a"),Cqr=o("TFLongformerForSequenceClassification"),wqr=o(" (Longformer model)"),Aqr=l(),kC=a("li"),B5e=a("strong"),yqr=o("mobilebert"),Lqr=o(" \u2014 "),Qee=a("a"),xqr=o("TFMobileBertForSequenceClassification"),$qr=o(" (MobileBERT model)"),kqr=l(),SC=a("li"),I5e=a("strong"),Sqr=o("mpnet"),Rqr=o(" \u2014 "),Wee=a("a"),Pqr=o("TFMPNetForSequenceClassification"),Bqr=o(" (MPNet model)"),Iqr=l(),RC=a("li"),N5e=a("strong"),Nqr=o("openai-gpt"),qqr=o(" \u2014 "),Uee=a("a"),jqr=o("TFOpenAIGPTForSequenceClassification"),Dqr=o(" (OpenAI GPT model)"),Gqr=l(),PC=a("li"),q5e=a("strong"),Oqr=o("rembert"),Vqr=o(" \u2014 "),Hee=a("a"),Xqr=o("TFRemBertForSequenceClassification"),zqr=o(" (RemBERT model)"),Qqr=l(),BC=a("li"),j5e=a("strong"),Wqr=o("roberta"),Uqr=o(" \u2014 "),Jee=a("a"),Hqr=o("TFRobertaForSequenceClassification"),Jqr=o(" (RoBERTa model)"),Yqr=l(),IC=a("li"),D5e=a("strong"),Kqr=o("roformer"),Zqr=o(" \u2014 "),Yee=a("a"),ejr=o("TFRoFormerForSequenceClassification"),ojr=o(" (RoFormer model)"),rjr=l(),NC=a("li"),G5e=a("strong"),tjr=o("tapas"),ajr=o(" \u2014 "),Kee=a("a"),njr=o("TFTapasForSequenceClassification"),sjr=o(" (TAPAS model)"),ljr=l(),qC=a("li"),O5e=a("strong"),ijr=o("transfo-xl"),djr=o(" \u2014 "),Zee=a("a"),cjr=o("TFTransfoXLForSequenceClassification"),fjr=o(" (Transformer-XL model)"),mjr=l(),jC=a("li"),V5e=a("strong"),gjr=o("xlm"),hjr=o(" \u2014 "),eoe=a("a"),pjr=o("TFXLMForSequenceClassification"),ujr=o(" (XLM model)"),_jr=l(),DC=a("li"),X5e=a("strong"),bjr=o("xlm-roberta"),vjr=o(" \u2014 "),ooe=a("a"),Fjr=o("TFXLMRobertaForSequenceClassification"),Tjr=o(" (XLM-RoBERTa model)"),Mjr=l(),GC=a("li"),z5e=a("strong"),Ejr=o("xlnet"),Cjr=o(" \u2014 "),roe=a("a"),wjr=o("TFXLNetForSequenceClassification"),Ajr=o(" (XLNet model)"),yjr=l(),F(OC.$$.fragment),fJe=l(),tf=a("h2"),VC=a("a"),Q5e=a("span"),F(uk.$$.fragment),Ljr=l(),W5e=a("span"),xjr=o("TFAutoModelForMultipleChoice"),mJe=l(),hr=a("div"),F(_k.$$.fragment),$jr=l(),af=a("p"),kjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),toe=a("a"),Sjr=o("from_pretrained()"),Rjr=o(" class method or the "),aoe=a("a"),Pjr=o("from_config()"),Bjr=o(` class
method.`),Ijr=l(),bk=a("p"),Njr=o("This class cannot be instantiated directly using "),U5e=a("code"),qjr=o("__init__()"),jjr=o(" (throws an error)."),Djr=l(),Ht=a("div"),F(vk.$$.fragment),Gjr=l(),H5e=a("p"),Ojr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vjr=l(),nf=a("p"),Xjr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),zjr=o("not"),Qjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=a("a"),Wjr=o("from_pretrained()"),Ujr=o(" to load the model weights."),Hjr=l(),F(XC.$$.fragment),Jjr=l(),Vr=a("div"),F(Fk.$$.fragment),Yjr=l(),Y5e=a("p"),Kjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zjr=l(),xn=a("p"),eDr=o("The model class to instantiate is selected based on the "),K5e=a("code"),oDr=o("model_type"),rDr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),tDr=o("pretrained_model_name_or_path"),aDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),nDr=o("pretrained_model_name_or_path"),sDr=o(":"),lDr=l(),ve=a("ul"),zC=a("li"),o0e=a("strong"),iDr=o("albert"),dDr=o(" \u2014 "),soe=a("a"),cDr=o("TFAlbertForMultipleChoice"),fDr=o(" (ALBERT model)"),mDr=l(),QC=a("li"),r0e=a("strong"),gDr=o("bert"),hDr=o(" \u2014 "),loe=a("a"),pDr=o("TFBertForMultipleChoice"),uDr=o(" (BERT model)"),_Dr=l(),WC=a("li"),t0e=a("strong"),bDr=o("camembert"),vDr=o(" \u2014 "),ioe=a("a"),FDr=o("TFCamembertForMultipleChoice"),TDr=o(" (CamemBERT model)"),MDr=l(),UC=a("li"),a0e=a("strong"),EDr=o("convbert"),CDr=o(" \u2014 "),doe=a("a"),wDr=o("TFConvBertForMultipleChoice"),ADr=o(" (ConvBERT model)"),yDr=l(),HC=a("li"),n0e=a("strong"),LDr=o("distilbert"),xDr=o(" \u2014 "),coe=a("a"),$Dr=o("TFDistilBertForMultipleChoice"),kDr=o(" (DistilBERT model)"),SDr=l(),JC=a("li"),s0e=a("strong"),RDr=o("electra"),PDr=o(" \u2014 "),foe=a("a"),BDr=o("TFElectraForMultipleChoice"),IDr=o(" (ELECTRA model)"),NDr=l(),YC=a("li"),l0e=a("strong"),qDr=o("flaubert"),jDr=o(" \u2014 "),moe=a("a"),DDr=o("TFFlaubertForMultipleChoice"),GDr=o(" (FlauBERT model)"),ODr=l(),KC=a("li"),i0e=a("strong"),VDr=o("funnel"),XDr=o(" \u2014 "),goe=a("a"),zDr=o("TFFunnelForMultipleChoice"),QDr=o(" (Funnel Transformer model)"),WDr=l(),ZC=a("li"),d0e=a("strong"),UDr=o("longformer"),HDr=o(" \u2014 "),hoe=a("a"),JDr=o("TFLongformerForMultipleChoice"),YDr=o(" (Longformer model)"),KDr=l(),e5=a("li"),c0e=a("strong"),ZDr=o("mobilebert"),eGr=o(" \u2014 "),poe=a("a"),oGr=o("TFMobileBertForMultipleChoice"),rGr=o(" (MobileBERT model)"),tGr=l(),o5=a("li"),f0e=a("strong"),aGr=o("mpnet"),nGr=o(" \u2014 "),uoe=a("a"),sGr=o("TFMPNetForMultipleChoice"),lGr=o(" (MPNet model)"),iGr=l(),r5=a("li"),m0e=a("strong"),dGr=o("rembert"),cGr=o(" \u2014 "),_oe=a("a"),fGr=o("TFRemBertForMultipleChoice"),mGr=o(" (RemBERT model)"),gGr=l(),t5=a("li"),g0e=a("strong"),hGr=o("roberta"),pGr=o(" \u2014 "),boe=a("a"),uGr=o("TFRobertaForMultipleChoice"),_Gr=o(" (RoBERTa model)"),bGr=l(),a5=a("li"),h0e=a("strong"),vGr=o("roformer"),FGr=o(" \u2014 "),voe=a("a"),TGr=o("TFRoFormerForMultipleChoice"),MGr=o(" (RoFormer model)"),EGr=l(),n5=a("li"),p0e=a("strong"),CGr=o("xlm"),wGr=o(" \u2014 "),Foe=a("a"),AGr=o("TFXLMForMultipleChoice"),yGr=o(" (XLM model)"),LGr=l(),s5=a("li"),u0e=a("strong"),xGr=o("xlm-roberta"),$Gr=o(" \u2014 "),Toe=a("a"),kGr=o("TFXLMRobertaForMultipleChoice"),SGr=o(" (XLM-RoBERTa model)"),RGr=l(),l5=a("li"),_0e=a("strong"),PGr=o("xlnet"),BGr=o(" \u2014 "),Moe=a("a"),IGr=o("TFXLNetForMultipleChoice"),NGr=o(" (XLNet model)"),qGr=l(),F(i5.$$.fragment),gJe=l(),sf=a("h2"),d5=a("a"),b0e=a("span"),F(Tk.$$.fragment),jGr=l(),v0e=a("span"),DGr=o("TFAutoModelForNextSentencePrediction"),hJe=l(),pr=a("div"),F(Mk.$$.fragment),GGr=l(),lf=a("p"),OGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Eoe=a("a"),VGr=o("from_pretrained()"),XGr=o(" class method or the "),Coe=a("a"),zGr=o("from_config()"),QGr=o(` class
method.`),WGr=l(),Ek=a("p"),UGr=o("This class cannot be instantiated directly using "),F0e=a("code"),HGr=o("__init__()"),JGr=o(" (throws an error)."),YGr=l(),Jt=a("div"),F(Ck.$$.fragment),KGr=l(),T0e=a("p"),ZGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eOr=l(),df=a("p"),oOr=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),rOr=o("not"),tOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=a("a"),aOr=o("from_pretrained()"),nOr=o(" to load the model weights."),sOr=l(),F(c5.$$.fragment),lOr=l(),Xr=a("div"),F(wk.$$.fragment),iOr=l(),E0e=a("p"),dOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cOr=l(),$n=a("p"),fOr=o("The model class to instantiate is selected based on the "),C0e=a("code"),mOr=o("model_type"),gOr=o(` property of the config object (either
passed as an argument or loaded from `),w0e=a("code"),hOr=o("pretrained_model_name_or_path"),pOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=a("code"),uOr=o("pretrained_model_name_or_path"),_Or=o(":"),bOr=l(),Ak=a("ul"),f5=a("li"),y0e=a("strong"),vOr=o("bert"),FOr=o(" \u2014 "),Aoe=a("a"),TOr=o("TFBertForNextSentencePrediction"),MOr=o(" (BERT model)"),EOr=l(),m5=a("li"),L0e=a("strong"),COr=o("mobilebert"),wOr=o(" \u2014 "),yoe=a("a"),AOr=o("TFMobileBertForNextSentencePrediction"),yOr=o(" (MobileBERT model)"),LOr=l(),F(g5.$$.fragment),pJe=l(),cf=a("h2"),h5=a("a"),x0e=a("span"),F(yk.$$.fragment),xOr=l(),$0e=a("span"),$Or=o("TFAutoModelForTableQuestionAnswering"),uJe=l(),ur=a("div"),F(Lk.$$.fragment),kOr=l(),ff=a("p"),SOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Loe=a("a"),ROr=o("from_pretrained()"),POr=o(" class method or the "),xoe=a("a"),BOr=o("from_config()"),IOr=o(` class
method.`),NOr=l(),xk=a("p"),qOr=o("This class cannot be instantiated directly using "),k0e=a("code"),jOr=o("__init__()"),DOr=o(" (throws an error)."),GOr=l(),Yt=a("div"),F($k.$$.fragment),OOr=l(),S0e=a("p"),VOr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XOr=l(),mf=a("p"),zOr=o(`Note:
Loading a model from its configuration file does `),R0e=a("strong"),QOr=o("not"),WOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=a("a"),UOr=o("from_pretrained()"),HOr=o(" to load the model weights."),JOr=l(),F(p5.$$.fragment),YOr=l(),zr=a("div"),F(kk.$$.fragment),KOr=l(),P0e=a("p"),ZOr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eVr=l(),kn=a("p"),oVr=o("The model class to instantiate is selected based on the "),B0e=a("code"),rVr=o("model_type"),tVr=o(` property of the config object (either
passed as an argument or loaded from `),I0e=a("code"),aVr=o("pretrained_model_name_or_path"),nVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=a("code"),sVr=o("pretrained_model_name_or_path"),lVr=o(":"),iVr=l(),q0e=a("ul"),u5=a("li"),j0e=a("strong"),dVr=o("tapas"),cVr=o(" \u2014 "),koe=a("a"),fVr=o("TFTapasForQuestionAnswering"),mVr=o(" (TAPAS model)"),gVr=l(),F(_5.$$.fragment),_Je=l(),gf=a("h2"),b5=a("a"),D0e=a("span"),F(Sk.$$.fragment),hVr=l(),G0e=a("span"),pVr=o("TFAutoModelForTokenClassification"),bJe=l(),_r=a("div"),F(Rk.$$.fragment),uVr=l(),hf=a("p"),_Vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Soe=a("a"),bVr=o("from_pretrained()"),vVr=o(" class method or the "),Roe=a("a"),FVr=o("from_config()"),TVr=o(` class
method.`),MVr=l(),Pk=a("p"),EVr=o("This class cannot be instantiated directly using "),O0e=a("code"),CVr=o("__init__()"),wVr=o(" (throws an error)."),AVr=l(),Kt=a("div"),F(Bk.$$.fragment),yVr=l(),V0e=a("p"),LVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xVr=l(),pf=a("p"),$Vr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),kVr=o("not"),SVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=a("a"),RVr=o("from_pretrained()"),PVr=o(" to load the model weights."),BVr=l(),F(v5.$$.fragment),IVr=l(),Qr=a("div"),F(Ik.$$.fragment),NVr=l(),z0e=a("p"),qVr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jVr=l(),Sn=a("p"),DVr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),GVr=o("model_type"),OVr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),VVr=o("pretrained_model_name_or_path"),XVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=a("code"),zVr=o("pretrained_model_name_or_path"),QVr=o(":"),WVr=l(),ce=a("ul"),F5=a("li"),H0e=a("strong"),UVr=o("albert"),HVr=o(" \u2014 "),Boe=a("a"),JVr=o("TFAlbertForTokenClassification"),YVr=o(" (ALBERT model)"),KVr=l(),T5=a("li"),J0e=a("strong"),ZVr=o("bert"),eXr=o(" \u2014 "),Ioe=a("a"),oXr=o("TFBertForTokenClassification"),rXr=o(" (BERT model)"),tXr=l(),M5=a("li"),Y0e=a("strong"),aXr=o("camembert"),nXr=o(" \u2014 "),Noe=a("a"),sXr=o("TFCamembertForTokenClassification"),lXr=o(" (CamemBERT model)"),iXr=l(),E5=a("li"),K0e=a("strong"),dXr=o("convbert"),cXr=o(" \u2014 "),qoe=a("a"),fXr=o("TFConvBertForTokenClassification"),mXr=o(" (ConvBERT model)"),gXr=l(),C5=a("li"),Z0e=a("strong"),hXr=o("deberta"),pXr=o(" \u2014 "),joe=a("a"),uXr=o("TFDebertaForTokenClassification"),_Xr=o(" (DeBERTa model)"),bXr=l(),w5=a("li"),ewe=a("strong"),vXr=o("deberta-v2"),FXr=o(" \u2014 "),Doe=a("a"),TXr=o("TFDebertaV2ForTokenClassification"),MXr=o(" (DeBERTa-v2 model)"),EXr=l(),A5=a("li"),owe=a("strong"),CXr=o("distilbert"),wXr=o(" \u2014 "),Goe=a("a"),AXr=o("TFDistilBertForTokenClassification"),yXr=o(" (DistilBERT model)"),LXr=l(),y5=a("li"),rwe=a("strong"),xXr=o("electra"),$Xr=o(" \u2014 "),Ooe=a("a"),kXr=o("TFElectraForTokenClassification"),SXr=o(" (ELECTRA model)"),RXr=l(),L5=a("li"),twe=a("strong"),PXr=o("flaubert"),BXr=o(" \u2014 "),Voe=a("a"),IXr=o("TFFlaubertForTokenClassification"),NXr=o(" (FlauBERT model)"),qXr=l(),x5=a("li"),awe=a("strong"),jXr=o("funnel"),DXr=o(" \u2014 "),Xoe=a("a"),GXr=o("TFFunnelForTokenClassification"),OXr=o(" (Funnel Transformer model)"),VXr=l(),$5=a("li"),nwe=a("strong"),XXr=o("layoutlm"),zXr=o(" \u2014 "),zoe=a("a"),QXr=o("TFLayoutLMForTokenClassification"),WXr=o(" (LayoutLM model)"),UXr=l(),k5=a("li"),swe=a("strong"),HXr=o("longformer"),JXr=o(" \u2014 "),Qoe=a("a"),YXr=o("TFLongformerForTokenClassification"),KXr=o(" (Longformer model)"),ZXr=l(),S5=a("li"),lwe=a("strong"),ezr=o("mobilebert"),ozr=o(" \u2014 "),Woe=a("a"),rzr=o("TFMobileBertForTokenClassification"),tzr=o(" (MobileBERT model)"),azr=l(),R5=a("li"),iwe=a("strong"),nzr=o("mpnet"),szr=o(" \u2014 "),Uoe=a("a"),lzr=o("TFMPNetForTokenClassification"),izr=o(" (MPNet model)"),dzr=l(),P5=a("li"),dwe=a("strong"),czr=o("rembert"),fzr=o(" \u2014 "),Hoe=a("a"),mzr=o("TFRemBertForTokenClassification"),gzr=o(" (RemBERT model)"),hzr=l(),B5=a("li"),cwe=a("strong"),pzr=o("roberta"),uzr=o(" \u2014 "),Joe=a("a"),_zr=o("TFRobertaForTokenClassification"),bzr=o(" (RoBERTa model)"),vzr=l(),I5=a("li"),fwe=a("strong"),Fzr=o("roformer"),Tzr=o(" \u2014 "),Yoe=a("a"),Mzr=o("TFRoFormerForTokenClassification"),Ezr=o(" (RoFormer model)"),Czr=l(),N5=a("li"),mwe=a("strong"),wzr=o("xlm"),Azr=o(" \u2014 "),Koe=a("a"),yzr=o("TFXLMForTokenClassification"),Lzr=o(" (XLM model)"),xzr=l(),q5=a("li"),gwe=a("strong"),$zr=o("xlm-roberta"),kzr=o(" \u2014 "),Zoe=a("a"),Szr=o("TFXLMRobertaForTokenClassification"),Rzr=o(" (XLM-RoBERTa model)"),Pzr=l(),j5=a("li"),hwe=a("strong"),Bzr=o("xlnet"),Izr=o(" \u2014 "),ere=a("a"),Nzr=o("TFXLNetForTokenClassification"),qzr=o(" (XLNet model)"),jzr=l(),F(D5.$$.fragment),vJe=l(),uf=a("h2"),G5=a("a"),pwe=a("span"),F(Nk.$$.fragment),Dzr=l(),uwe=a("span"),Gzr=o("TFAutoModelForQuestionAnswering"),FJe=l(),br=a("div"),F(qk.$$.fragment),Ozr=l(),_f=a("p"),Vzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ore=a("a"),Xzr=o("from_pretrained()"),zzr=o(" class method or the "),rre=a("a"),Qzr=o("from_config()"),Wzr=o(` class
method.`),Uzr=l(),jk=a("p"),Hzr=o("This class cannot be instantiated directly using "),_we=a("code"),Jzr=o("__init__()"),Yzr=o(" (throws an error)."),Kzr=l(),Zt=a("div"),F(Dk.$$.fragment),Zzr=l(),bwe=a("p"),eQr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oQr=l(),bf=a("p"),rQr=o(`Note:
Loading a model from its configuration file does `),vwe=a("strong"),tQr=o("not"),aQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=a("a"),nQr=o("from_pretrained()"),sQr=o(" to load the model weights."),lQr=l(),F(O5.$$.fragment),iQr=l(),Wr=a("div"),F(Gk.$$.fragment),dQr=l(),Fwe=a("p"),cQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fQr=l(),Rn=a("p"),mQr=o("The model class to instantiate is selected based on the "),Twe=a("code"),gQr=o("model_type"),hQr=o(` property of the config object (either
passed as an argument or loaded from `),Mwe=a("code"),pQr=o("pretrained_model_name_or_path"),uQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=a("code"),_Qr=o("pretrained_model_name_or_path"),bQr=o(":"),vQr=l(),fe=a("ul"),V5=a("li"),Cwe=a("strong"),FQr=o("albert"),TQr=o(" \u2014 "),are=a("a"),MQr=o("TFAlbertForQuestionAnswering"),EQr=o(" (ALBERT model)"),CQr=l(),X5=a("li"),wwe=a("strong"),wQr=o("bert"),AQr=o(" \u2014 "),nre=a("a"),yQr=o("TFBertForQuestionAnswering"),LQr=o(" (BERT model)"),xQr=l(),z5=a("li"),Awe=a("strong"),$Qr=o("camembert"),kQr=o(" \u2014 "),sre=a("a"),SQr=o("TFCamembertForQuestionAnswering"),RQr=o(" (CamemBERT model)"),PQr=l(),Q5=a("li"),ywe=a("strong"),BQr=o("convbert"),IQr=o(" \u2014 "),lre=a("a"),NQr=o("TFConvBertForQuestionAnswering"),qQr=o(" (ConvBERT model)"),jQr=l(),W5=a("li"),Lwe=a("strong"),DQr=o("deberta"),GQr=o(" \u2014 "),ire=a("a"),OQr=o("TFDebertaForQuestionAnswering"),VQr=o(" (DeBERTa model)"),XQr=l(),U5=a("li"),xwe=a("strong"),zQr=o("deberta-v2"),QQr=o(" \u2014 "),dre=a("a"),WQr=o("TFDebertaV2ForQuestionAnswering"),UQr=o(" (DeBERTa-v2 model)"),HQr=l(),H5=a("li"),$we=a("strong"),JQr=o("distilbert"),YQr=o(" \u2014 "),cre=a("a"),KQr=o("TFDistilBertForQuestionAnswering"),ZQr=o(" (DistilBERT model)"),eWr=l(),J5=a("li"),kwe=a("strong"),oWr=o("electra"),rWr=o(" \u2014 "),fre=a("a"),tWr=o("TFElectraForQuestionAnswering"),aWr=o(" (ELECTRA model)"),nWr=l(),Y5=a("li"),Swe=a("strong"),sWr=o("flaubert"),lWr=o(" \u2014 "),mre=a("a"),iWr=o("TFFlaubertForQuestionAnsweringSimple"),dWr=o(" (FlauBERT model)"),cWr=l(),K5=a("li"),Rwe=a("strong"),fWr=o("funnel"),mWr=o(" \u2014 "),gre=a("a"),gWr=o("TFFunnelForQuestionAnswering"),hWr=o(" (Funnel Transformer model)"),pWr=l(),Z5=a("li"),Pwe=a("strong"),uWr=o("gptj"),_Wr=o(" \u2014 "),hre=a("a"),bWr=o("TFGPTJForQuestionAnswering"),vWr=o(" (GPT-J model)"),FWr=l(),e0=a("li"),Bwe=a("strong"),TWr=o("longformer"),MWr=o(" \u2014 "),pre=a("a"),EWr=o("TFLongformerForQuestionAnswering"),CWr=o(" (Longformer model)"),wWr=l(),o0=a("li"),Iwe=a("strong"),AWr=o("mobilebert"),yWr=o(" \u2014 "),ure=a("a"),LWr=o("TFMobileBertForQuestionAnswering"),xWr=o(" (MobileBERT model)"),$Wr=l(),r0=a("li"),Nwe=a("strong"),kWr=o("mpnet"),SWr=o(" \u2014 "),_re=a("a"),RWr=o("TFMPNetForQuestionAnswering"),PWr=o(" (MPNet model)"),BWr=l(),t0=a("li"),qwe=a("strong"),IWr=o("rembert"),NWr=o(" \u2014 "),bre=a("a"),qWr=o("TFRemBertForQuestionAnswering"),jWr=o(" (RemBERT model)"),DWr=l(),a0=a("li"),jwe=a("strong"),GWr=o("roberta"),OWr=o(" \u2014 "),vre=a("a"),VWr=o("TFRobertaForQuestionAnswering"),XWr=o(" (RoBERTa model)"),zWr=l(),n0=a("li"),Dwe=a("strong"),QWr=o("roformer"),WWr=o(" \u2014 "),Fre=a("a"),UWr=o("TFRoFormerForQuestionAnswering"),HWr=o(" (RoFormer model)"),JWr=l(),s0=a("li"),Gwe=a("strong"),YWr=o("xlm"),KWr=o(" \u2014 "),Tre=a("a"),ZWr=o("TFXLMForQuestionAnsweringSimple"),eUr=o(" (XLM model)"),oUr=l(),l0=a("li"),Owe=a("strong"),rUr=o("xlm-roberta"),tUr=o(" \u2014 "),Mre=a("a"),aUr=o("TFXLMRobertaForQuestionAnswering"),nUr=o(" (XLM-RoBERTa model)"),sUr=l(),i0=a("li"),Vwe=a("strong"),lUr=o("xlnet"),iUr=o(" \u2014 "),Ere=a("a"),dUr=o("TFXLNetForQuestionAnsweringSimple"),cUr=o(" (XLNet model)"),fUr=l(),F(d0.$$.fragment),TJe=l(),vf=a("h2"),c0=a("a"),Xwe=a("span"),F(Ok.$$.fragment),mUr=l(),zwe=a("span"),gUr=o("TFAutoModelForVision2Seq"),MJe=l(),vr=a("div"),F(Vk.$$.fragment),hUr=l(),Ff=a("p"),pUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=a("a"),uUr=o("from_pretrained()"),_Ur=o(" class method or the "),wre=a("a"),bUr=o("from_config()"),vUr=o(` class
method.`),FUr=l(),Xk=a("p"),TUr=o("This class cannot be instantiated directly using "),Qwe=a("code"),MUr=o("__init__()"),EUr=o(" (throws an error)."),CUr=l(),ea=a("div"),F(zk.$$.fragment),wUr=l(),Wwe=a("p"),AUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yUr=l(),Tf=a("p"),LUr=o(`Note:
Loading a model from its configuration file does `),Uwe=a("strong"),xUr=o("not"),$Ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),kUr=o("from_pretrained()"),SUr=o(" to load the model weights."),RUr=l(),F(f0.$$.fragment),PUr=l(),Ur=a("div"),F(Qk.$$.fragment),BUr=l(),Hwe=a("p"),IUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NUr=l(),Pn=a("p"),qUr=o("The model class to instantiate is selected based on the "),Jwe=a("code"),jUr=o("model_type"),DUr=o(` property of the config object (either
passed as an argument or loaded from `),Ywe=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kwe=a("code"),VUr=o("pretrained_model_name_or_path"),XUr=o(":"),zUr=l(),Zwe=a("ul"),m0=a("li"),eAe=a("strong"),QUr=o("vision-encoder-decoder"),WUr=o(" \u2014 "),yre=a("a"),UUr=o("TFVisionEncoderDecoderModel"),HUr=o(" (Vision Encoder decoder model)"),JUr=l(),F(g0.$$.fragment),EJe=l(),Mf=a("h2"),h0=a("a"),oAe=a("span"),F(Wk.$$.fragment),YUr=l(),rAe=a("span"),KUr=o("TFAutoModelForSpeechSeq2Seq"),CJe=l(),Fr=a("div"),F(Uk.$$.fragment),ZUr=l(),Ef=a("p"),eHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lre=a("a"),oHr=o("from_pretrained()"),rHr=o(" class method or the "),xre=a("a"),tHr=o("from_config()"),aHr=o(` class
method.`),nHr=l(),Hk=a("p"),sHr=o("This class cannot be instantiated directly using "),tAe=a("code"),lHr=o("__init__()"),iHr=o(" (throws an error)."),dHr=l(),oa=a("div"),F(Jk.$$.fragment),cHr=l(),aAe=a("p"),fHr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mHr=l(),Cf=a("p"),gHr=o(`Note:
Loading a model from its configuration file does `),nAe=a("strong"),hHr=o("not"),pHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("a"),uHr=o("from_pretrained()"),_Hr=o(" to load the model weights."),bHr=l(),F(p0.$$.fragment),vHr=l(),Hr=a("div"),F(Yk.$$.fragment),FHr=l(),sAe=a("p"),THr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MHr=l(),Bn=a("p"),EHr=o("The model class to instantiate is selected based on the "),lAe=a("code"),CHr=o("model_type"),wHr=o(` property of the config object (either
passed as an argument or loaded from `),iAe=a("code"),AHr=o("pretrained_model_name_or_path"),yHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dAe=a("code"),LHr=o("pretrained_model_name_or_path"),xHr=o(":"),$Hr=l(),cAe=a("ul"),u0=a("li"),fAe=a("strong"),kHr=o("speech_to_text"),SHr=o(" \u2014 "),kre=a("a"),RHr=o("TFSpeech2TextForConditionalGeneration"),PHr=o(" (Speech2Text model)"),BHr=l(),F(_0.$$.fragment),wJe=l(),wf=a("h2"),b0=a("a"),mAe=a("span"),F(Kk.$$.fragment),IHr=l(),gAe=a("span"),NHr=o("FlaxAutoModel"),AJe=l(),Tr=a("div"),F(Zk.$$.fragment),qHr=l(),Af=a("p"),jHr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Sre=a("a"),DHr=o("from_pretrained()"),GHr=o(" class method or the "),Rre=a("a"),OHr=o("from_config()"),VHr=o(` class
method.`),XHr=l(),eS=a("p"),zHr=o("This class cannot be instantiated directly using "),hAe=a("code"),QHr=o("__init__()"),WHr=o(" (throws an error)."),UHr=l(),ra=a("div"),F(oS.$$.fragment),HHr=l(),pAe=a("p"),JHr=o("Instantiates one of the base model classes of the library from a configuration."),YHr=l(),yf=a("p"),KHr=o(`Note:
Loading a model from its configuration file does `),uAe=a("strong"),ZHr=o("not"),eJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("a"),oJr=o("from_pretrained()"),rJr=o(" to load the model weights."),tJr=l(),F(v0.$$.fragment),aJr=l(),Jr=a("div"),F(rS.$$.fragment),nJr=l(),_Ae=a("p"),sJr=o("Instantiate one of the base model classes of the library from a pretrained model."),lJr=l(),In=a("p"),iJr=o("The model class to instantiate is selected based on the "),bAe=a("code"),dJr=o("model_type"),cJr=o(` property of the config object (either
passed as an argument or loaded from `),vAe=a("code"),fJr=o("pretrained_model_name_or_path"),mJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FAe=a("code"),gJr=o("pretrained_model_name_or_path"),hJr=o(":"),pJr=l(),re=a("ul"),F0=a("li"),TAe=a("strong"),uJr=o("albert"),_Jr=o(" \u2014 "),Bre=a("a"),bJr=o("FlaxAlbertModel"),vJr=o(" (ALBERT model)"),FJr=l(),T0=a("li"),MAe=a("strong"),TJr=o("bart"),MJr=o(" \u2014 "),Ire=a("a"),EJr=o("FlaxBartModel"),CJr=o(" (BART model)"),wJr=l(),M0=a("li"),EAe=a("strong"),AJr=o("beit"),yJr=o(" \u2014 "),Nre=a("a"),LJr=o("FlaxBeitModel"),xJr=o(" (BEiT model)"),$Jr=l(),E0=a("li"),CAe=a("strong"),kJr=o("bert"),SJr=o(" \u2014 "),qre=a("a"),RJr=o("FlaxBertModel"),PJr=o(" (BERT model)"),BJr=l(),C0=a("li"),wAe=a("strong"),IJr=o("big_bird"),NJr=o(" \u2014 "),jre=a("a"),qJr=o("FlaxBigBirdModel"),jJr=o(" (BigBird model)"),DJr=l(),w0=a("li"),AAe=a("strong"),GJr=o("blenderbot"),OJr=o(" \u2014 "),Dre=a("a"),VJr=o("FlaxBlenderbotModel"),XJr=o(" (Blenderbot model)"),zJr=l(),A0=a("li"),yAe=a("strong"),QJr=o("blenderbot-small"),WJr=o(" \u2014 "),Gre=a("a"),UJr=o("FlaxBlenderbotSmallModel"),HJr=o(" (BlenderbotSmall model)"),JJr=l(),y0=a("li"),LAe=a("strong"),YJr=o("clip"),KJr=o(" \u2014 "),Ore=a("a"),ZJr=o("FlaxCLIPModel"),eYr=o(" (CLIP model)"),oYr=l(),L0=a("li"),xAe=a("strong"),rYr=o("distilbert"),tYr=o(" \u2014 "),Vre=a("a"),aYr=o("FlaxDistilBertModel"),nYr=o(" (DistilBERT model)"),sYr=l(),x0=a("li"),$Ae=a("strong"),lYr=o("electra"),iYr=o(" \u2014 "),Xre=a("a"),dYr=o("FlaxElectraModel"),cYr=o(" (ELECTRA model)"),fYr=l(),$0=a("li"),kAe=a("strong"),mYr=o("gpt2"),gYr=o(" \u2014 "),zre=a("a"),hYr=o("FlaxGPT2Model"),pYr=o(" (OpenAI GPT-2 model)"),uYr=l(),k0=a("li"),SAe=a("strong"),_Yr=o("gpt_neo"),bYr=o(" \u2014 "),Qre=a("a"),vYr=o("FlaxGPTNeoModel"),FYr=o(" (GPT Neo model)"),TYr=l(),S0=a("li"),RAe=a("strong"),MYr=o("gptj"),EYr=o(" \u2014 "),Wre=a("a"),CYr=o("FlaxGPTJModel"),wYr=o(" (GPT-J model)"),AYr=l(),R0=a("li"),PAe=a("strong"),yYr=o("longt5"),LYr=o(" \u2014 "),Ure=a("a"),xYr=o("FlaxLongT5Model"),$Yr=o(" (LongT5 model)"),kYr=l(),P0=a("li"),BAe=a("strong"),SYr=o("marian"),RYr=o(" \u2014 "),Hre=a("a"),PYr=o("FlaxMarianModel"),BYr=o(" (Marian model)"),IYr=l(),B0=a("li"),IAe=a("strong"),NYr=o("mbart"),qYr=o(" \u2014 "),Jre=a("a"),jYr=o("FlaxMBartModel"),DYr=o(" (mBART model)"),GYr=l(),I0=a("li"),NAe=a("strong"),OYr=o("mt5"),VYr=o(" \u2014 "),Yre=a("a"),XYr=o("FlaxMT5Model"),zYr=o(" (MT5 model)"),QYr=l(),N0=a("li"),qAe=a("strong"),WYr=o("opt"),UYr=o(" \u2014 "),Kre=a("a"),HYr=o("FlaxOPTModel"),JYr=o(" (OPT model)"),YYr=l(),q0=a("li"),jAe=a("strong"),KYr=o("pegasus"),ZYr=o(" \u2014 "),Zre=a("a"),eKr=o("FlaxPegasusModel"),oKr=o(" (Pegasus model)"),rKr=l(),j0=a("li"),DAe=a("strong"),tKr=o("roberta"),aKr=o(" \u2014 "),ete=a("a"),nKr=o("FlaxRobertaModel"),sKr=o(" (RoBERTa model)"),lKr=l(),D0=a("li"),GAe=a("strong"),iKr=o("roformer"),dKr=o(" \u2014 "),ote=a("a"),cKr=o("FlaxRoFormerModel"),fKr=o(" (RoFormer model)"),mKr=l(),G0=a("li"),OAe=a("strong"),gKr=o("t5"),hKr=o(" \u2014 "),rte=a("a"),pKr=o("FlaxT5Model"),uKr=o(" (T5 model)"),_Kr=l(),O0=a("li"),VAe=a("strong"),bKr=o("vision-text-dual-encoder"),vKr=o(" \u2014 "),tte=a("a"),FKr=o("FlaxVisionTextDualEncoderModel"),TKr=o(" (VisionTextDualEncoder model)"),MKr=l(),V0=a("li"),XAe=a("strong"),EKr=o("vit"),CKr=o(" \u2014 "),ate=a("a"),wKr=o("FlaxViTModel"),AKr=o(" (ViT model)"),yKr=l(),X0=a("li"),zAe=a("strong"),LKr=o("wav2vec2"),xKr=o(" \u2014 "),nte=a("a"),$Kr=o("FlaxWav2Vec2Model"),kKr=o(" (Wav2Vec2 model)"),SKr=l(),z0=a("li"),QAe=a("strong"),RKr=o("xglm"),PKr=o(" \u2014 "),ste=a("a"),BKr=o("FlaxXGLMModel"),IKr=o(" (XGLM model)"),NKr=l(),Q0=a("li"),WAe=a("strong"),qKr=o("xlm-roberta"),jKr=o(" \u2014 "),lte=a("a"),DKr=o("FlaxXLMRobertaModel"),GKr=o(" (XLM-RoBERTa model)"),OKr=l(),F(W0.$$.fragment),yJe=l(),Lf=a("h2"),U0=a("a"),UAe=a("span"),F(tS.$$.fragment),VKr=l(),HAe=a("span"),XKr=o("FlaxAutoModelForCausalLM"),LJe=l(),Mr=a("div"),F(aS.$$.fragment),zKr=l(),xf=a("p"),QKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ite=a("a"),WKr=o("from_pretrained()"),UKr=o(" class method or the "),dte=a("a"),HKr=o("from_config()"),JKr=o(` class
method.`),YKr=l(),nS=a("p"),KKr=o("This class cannot be instantiated directly using "),JAe=a("code"),ZKr=o("__init__()"),eZr=o(" (throws an error)."),oZr=l(),ta=a("div"),F(sS.$$.fragment),rZr=l(),YAe=a("p"),tZr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aZr=l(),$f=a("p"),nZr=o(`Note:
Loading a model from its configuration file does `),KAe=a("strong"),sZr=o("not"),lZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=a("a"),iZr=o("from_pretrained()"),dZr=o(" to load the model weights."),cZr=l(),F(H0.$$.fragment),fZr=l(),Yr=a("div"),F(lS.$$.fragment),mZr=l(),ZAe=a("p"),gZr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hZr=l(),Nn=a("p"),pZr=o("The model class to instantiate is selected based on the "),e6e=a("code"),uZr=o("model_type"),_Zr=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),bZr=o("pretrained_model_name_or_path"),vZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),FZr=o("pretrained_model_name_or_path"),TZr=o(":"),MZr=l(),xe=a("ul"),J0=a("li"),t6e=a("strong"),EZr=o("bart"),CZr=o(" \u2014 "),fte=a("a"),wZr=o("FlaxBartForCausalLM"),AZr=o(" (BART model)"),yZr=l(),Y0=a("li"),a6e=a("strong"),LZr=o("bert"),xZr=o(" \u2014 "),mte=a("a"),$Zr=o("FlaxBertForCausalLM"),kZr=o(" (BERT model)"),SZr=l(),K0=a("li"),n6e=a("strong"),RZr=o("big_bird"),PZr=o(" \u2014 "),gte=a("a"),BZr=o("FlaxBigBirdForCausalLM"),IZr=o(" (BigBird model)"),NZr=l(),Z0=a("li"),s6e=a("strong"),qZr=o("electra"),jZr=o(" \u2014 "),hte=a("a"),DZr=o("FlaxElectraForCausalLM"),GZr=o(" (ELECTRA model)"),OZr=l(),ew=a("li"),l6e=a("strong"),VZr=o("gpt2"),XZr=o(" \u2014 "),pte=a("a"),zZr=o("FlaxGPT2LMHeadModel"),QZr=o(" (OpenAI GPT-2 model)"),WZr=l(),ow=a("li"),i6e=a("strong"),UZr=o("gpt_neo"),HZr=o(" \u2014 "),ute=a("a"),JZr=o("FlaxGPTNeoForCausalLM"),YZr=o(" (GPT Neo model)"),KZr=l(),rw=a("li"),d6e=a("strong"),ZZr=o("gptj"),eet=o(" \u2014 "),_te=a("a"),oet=o("FlaxGPTJForCausalLM"),ret=o(" (GPT-J model)"),tet=l(),tw=a("li"),c6e=a("strong"),aet=o("opt"),net=o(" \u2014 "),bte=a("a"),set=o("FlaxOPTForCausalLM"),iet=o(" (OPT model)"),det=l(),aw=a("li"),f6e=a("strong"),cet=o("roberta"),fet=o(" \u2014 "),vte=a("a"),met=o("FlaxRobertaForCausalLM"),get=o(" (RoBERTa model)"),het=l(),nw=a("li"),m6e=a("strong"),pet=o("xglm"),uet=o(" \u2014 "),Fte=a("a"),_et=o("FlaxXGLMForCausalLM"),bet=o(" (XGLM model)"),vet=l(),F(sw.$$.fragment),xJe=l(),kf=a("h2"),lw=a("a"),g6e=a("span"),F(iS.$$.fragment),Fet=l(),h6e=a("span"),Tet=o("FlaxAutoModelForPreTraining"),$Je=l(),Er=a("div"),F(dS.$$.fragment),Met=l(),Sf=a("p"),Eet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tte=a("a"),Cet=o("from_pretrained()"),wet=o(" class method or the "),Mte=a("a"),Aet=o("from_config()"),yet=o(` class
method.`),Let=l(),cS=a("p"),xet=o("This class cannot be instantiated directly using "),p6e=a("code"),$et=o("__init__()"),ket=o(" (throws an error)."),Set=l(),aa=a("div"),F(fS.$$.fragment),Ret=l(),u6e=a("p"),Pet=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bet=l(),Rf=a("p"),Iet=o(`Note:
Loading a model from its configuration file does `),_6e=a("strong"),Net=o("not"),qet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=a("a"),jet=o("from_pretrained()"),Det=o(" to load the model weights."),Get=l(),F(iw.$$.fragment),Oet=l(),Kr=a("div"),F(mS.$$.fragment),Vet=l(),b6e=a("p"),Xet=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zet=l(),qn=a("p"),Qet=o("The model class to instantiate is selected based on the "),v6e=a("code"),Wet=o("model_type"),Uet=o(` property of the config object (either
passed as an argument or loaded from `),F6e=a("code"),Het=o("pretrained_model_name_or_path"),Jet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=a("code"),Yet=o("pretrained_model_name_or_path"),Ket=o(":"),Zet=l(),Ee=a("ul"),dw=a("li"),M6e=a("strong"),eot=o("albert"),oot=o(" \u2014 "),Cte=a("a"),rot=o("FlaxAlbertForPreTraining"),tot=o(" (ALBERT model)"),aot=l(),cw=a("li"),E6e=a("strong"),not=o("bart"),sot=o(" \u2014 "),wte=a("a"),lot=o("FlaxBartForConditionalGeneration"),iot=o(" (BART model)"),dot=l(),fw=a("li"),C6e=a("strong"),cot=o("bert"),fot=o(" \u2014 "),Ate=a("a"),mot=o("FlaxBertForPreTraining"),got=o(" (BERT model)"),hot=l(),mw=a("li"),w6e=a("strong"),pot=o("big_bird"),uot=o(" \u2014 "),yte=a("a"),_ot=o("FlaxBigBirdForPreTraining"),bot=o(" (BigBird model)"),vot=l(),gw=a("li"),A6e=a("strong"),Fot=o("electra"),Tot=o(" \u2014 "),Lte=a("a"),Mot=o("FlaxElectraForPreTraining"),Eot=o(" (ELECTRA model)"),Cot=l(),hw=a("li"),y6e=a("strong"),wot=o("longt5"),Aot=o(" \u2014 "),xte=a("a"),yot=o("FlaxLongT5ForConditionalGeneration"),Lot=o(" (LongT5 model)"),xot=l(),pw=a("li"),L6e=a("strong"),$ot=o("mbart"),kot=o(" \u2014 "),$te=a("a"),Sot=o("FlaxMBartForConditionalGeneration"),Rot=o(" (mBART model)"),Pot=l(),uw=a("li"),x6e=a("strong"),Bot=o("mt5"),Iot=o(" \u2014 "),kte=a("a"),Not=o("FlaxMT5ForConditionalGeneration"),qot=o(" (MT5 model)"),jot=l(),_w=a("li"),$6e=a("strong"),Dot=o("roberta"),Got=o(" \u2014 "),Ste=a("a"),Oot=o("FlaxRobertaForMaskedLM"),Vot=o(" (RoBERTa model)"),Xot=l(),bw=a("li"),k6e=a("strong"),zot=o("roformer"),Qot=o(" \u2014 "),Rte=a("a"),Wot=o("FlaxRoFormerForMaskedLM"),Uot=o(" (RoFormer model)"),Hot=l(),vw=a("li"),S6e=a("strong"),Jot=o("t5"),Yot=o(" \u2014 "),Pte=a("a"),Kot=o("FlaxT5ForConditionalGeneration"),Zot=o(" (T5 model)"),ert=l(),Fw=a("li"),R6e=a("strong"),ort=o("wav2vec2"),rrt=o(" \u2014 "),Bte=a("a"),trt=o("FlaxWav2Vec2ForPreTraining"),art=o(" (Wav2Vec2 model)"),nrt=l(),Tw=a("li"),P6e=a("strong"),srt=o("xlm-roberta"),lrt=o(" \u2014 "),Ite=a("a"),irt=o("FlaxXLMRobertaForMaskedLM"),drt=o(" (XLM-RoBERTa model)"),crt=l(),F(Mw.$$.fragment),kJe=l(),Pf=a("h2"),Ew=a("a"),B6e=a("span"),F(gS.$$.fragment),frt=l(),I6e=a("span"),mrt=o("FlaxAutoModelForMaskedLM"),SJe=l(),Cr=a("div"),F(hS.$$.fragment),grt=l(),Bf=a("p"),hrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nte=a("a"),prt=o("from_pretrained()"),urt=o(" class method or the "),qte=a("a"),_rt=o("from_config()"),brt=o(` class
method.`),vrt=l(),pS=a("p"),Frt=o("This class cannot be instantiated directly using "),N6e=a("code"),Trt=o("__init__()"),Mrt=o(" (throws an error)."),Ert=l(),na=a("div"),F(uS.$$.fragment),Crt=l(),q6e=a("p"),wrt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Art=l(),If=a("p"),yrt=o(`Note:
Loading a model from its configuration file does `),j6e=a("strong"),Lrt=o("not"),xrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=a("a"),$rt=o("from_pretrained()"),krt=o(" to load the model weights."),Srt=l(),F(Cw.$$.fragment),Rrt=l(),Zr=a("div"),F(_S.$$.fragment),Prt=l(),D6e=a("p"),Brt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Irt=l(),jn=a("p"),Nrt=o("The model class to instantiate is selected based on the "),G6e=a("code"),qrt=o("model_type"),jrt=o(` property of the config object (either
passed as an argument or loaded from `),O6e=a("code"),Drt=o("pretrained_model_name_or_path"),Grt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=a("code"),Ort=o("pretrained_model_name_or_path"),Vrt=o(":"),Xrt=l(),$e=a("ul"),ww=a("li"),X6e=a("strong"),zrt=o("albert"),Qrt=o(" \u2014 "),Dte=a("a"),Wrt=o("FlaxAlbertForMaskedLM"),Urt=o(" (ALBERT model)"),Hrt=l(),Aw=a("li"),z6e=a("strong"),Jrt=o("bart"),Yrt=o(" \u2014 "),Gte=a("a"),Krt=o("FlaxBartForConditionalGeneration"),Zrt=o(" (BART model)"),ett=l(),yw=a("li"),Q6e=a("strong"),ott=o("bert"),rtt=o(" \u2014 "),Ote=a("a"),ttt=o("FlaxBertForMaskedLM"),att=o(" (BERT model)"),ntt=l(),Lw=a("li"),W6e=a("strong"),stt=o("big_bird"),ltt=o(" \u2014 "),Vte=a("a"),itt=o("FlaxBigBirdForMaskedLM"),dtt=o(" (BigBird model)"),ctt=l(),xw=a("li"),U6e=a("strong"),ftt=o("distilbert"),mtt=o(" \u2014 "),Xte=a("a"),gtt=o("FlaxDistilBertForMaskedLM"),htt=o(" (DistilBERT model)"),ptt=l(),$w=a("li"),H6e=a("strong"),utt=o("electra"),_tt=o(" \u2014 "),zte=a("a"),btt=o("FlaxElectraForMaskedLM"),vtt=o(" (ELECTRA model)"),Ftt=l(),kw=a("li"),J6e=a("strong"),Ttt=o("mbart"),Mtt=o(" \u2014 "),Qte=a("a"),Ett=o("FlaxMBartForConditionalGeneration"),Ctt=o(" (mBART model)"),wtt=l(),Sw=a("li"),Y6e=a("strong"),Att=o("roberta"),ytt=o(" \u2014 "),Wte=a("a"),Ltt=o("FlaxRobertaForMaskedLM"),xtt=o(" (RoBERTa model)"),$tt=l(),Rw=a("li"),K6e=a("strong"),ktt=o("roformer"),Stt=o(" \u2014 "),Ute=a("a"),Rtt=o("FlaxRoFormerForMaskedLM"),Ptt=o(" (RoFormer model)"),Btt=l(),Pw=a("li"),Z6e=a("strong"),Itt=o("xlm-roberta"),Ntt=o(" \u2014 "),Hte=a("a"),qtt=o("FlaxXLMRobertaForMaskedLM"),jtt=o(" (XLM-RoBERTa model)"),Dtt=l(),F(Bw.$$.fragment),RJe=l(),Nf=a("h2"),Iw=a("a"),eye=a("span"),F(bS.$$.fragment),Gtt=l(),oye=a("span"),Ott=o("FlaxAutoModelForSeq2SeqLM"),PJe=l(),wr=a("div"),F(vS.$$.fragment),Vtt=l(),qf=a("p"),Xtt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Jte=a("a"),ztt=o("from_pretrained()"),Qtt=o(" class method or the "),Yte=a("a"),Wtt=o("from_config()"),Utt=o(` class
method.`),Htt=l(),FS=a("p"),Jtt=o("This class cannot be instantiated directly using "),rye=a("code"),Ytt=o("__init__()"),Ktt=o(" (throws an error)."),Ztt=l(),sa=a("div"),F(TS.$$.fragment),eat=l(),tye=a("p"),oat=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rat=l(),jf=a("p"),tat=o(`Note:
Loading a model from its configuration file does `),aye=a("strong"),aat=o("not"),nat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=a("a"),sat=o("from_pretrained()"),lat=o(" to load the model weights."),iat=l(),F(Nw.$$.fragment),dat=l(),et=a("div"),F(MS.$$.fragment),cat=l(),nye=a("p"),fat=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mat=l(),Dn=a("p"),gat=o("The model class to instantiate is selected based on the "),sye=a("code"),hat=o("model_type"),pat=o(` property of the config object (either
passed as an argument or loaded from `),lye=a("code"),uat=o("pretrained_model_name_or_path"),_at=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iye=a("code"),bat=o("pretrained_model_name_or_path"),vat=o(":"),Fat=l(),ke=a("ul"),qw=a("li"),dye=a("strong"),Tat=o("bart"),Mat=o(" \u2014 "),Zte=a("a"),Eat=o("FlaxBartForConditionalGeneration"),Cat=o(" (BART model)"),wat=l(),jw=a("li"),cye=a("strong"),Aat=o("blenderbot"),yat=o(" \u2014 "),eae=a("a"),Lat=o("FlaxBlenderbotForConditionalGeneration"),xat=o(" (Blenderbot model)"),$at=l(),Dw=a("li"),fye=a("strong"),kat=o("blenderbot-small"),Sat=o(" \u2014 "),oae=a("a"),Rat=o("FlaxBlenderbotSmallForConditionalGeneration"),Pat=o(" (BlenderbotSmall model)"),Bat=l(),Gw=a("li"),mye=a("strong"),Iat=o("encoder-decoder"),Nat=o(" \u2014 "),rae=a("a"),qat=o("FlaxEncoderDecoderModel"),jat=o(" (Encoder decoder model)"),Dat=l(),Ow=a("li"),gye=a("strong"),Gat=o("longt5"),Oat=o(" \u2014 "),tae=a("a"),Vat=o("FlaxLongT5ForConditionalGeneration"),Xat=o(" (LongT5 model)"),zat=l(),Vw=a("li"),hye=a("strong"),Qat=o("marian"),Wat=o(" \u2014 "),aae=a("a"),Uat=o("FlaxMarianMTModel"),Hat=o(" (Marian model)"),Jat=l(),Xw=a("li"),pye=a("strong"),Yat=o("mbart"),Kat=o(" \u2014 "),nae=a("a"),Zat=o("FlaxMBartForConditionalGeneration"),ent=o(" (mBART model)"),ont=l(),zw=a("li"),uye=a("strong"),rnt=o("mt5"),tnt=o(" \u2014 "),sae=a("a"),ant=o("FlaxMT5ForConditionalGeneration"),nnt=o(" (MT5 model)"),snt=l(),Qw=a("li"),_ye=a("strong"),lnt=o("pegasus"),int=o(" \u2014 "),lae=a("a"),dnt=o("FlaxPegasusForConditionalGeneration"),cnt=o(" (Pegasus model)"),fnt=l(),Ww=a("li"),bye=a("strong"),mnt=o("t5"),gnt=o(" \u2014 "),iae=a("a"),hnt=o("FlaxT5ForConditionalGeneration"),pnt=o(" (T5 model)"),unt=l(),F(Uw.$$.fragment),BJe=l(),Df=a("h2"),Hw=a("a"),vye=a("span"),F(ES.$$.fragment),_nt=l(),Fye=a("span"),bnt=o("FlaxAutoModelForSequenceClassification"),IJe=l(),Ar=a("div"),F(CS.$$.fragment),vnt=l(),Gf=a("p"),Fnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dae=a("a"),Tnt=o("from_pretrained()"),Mnt=o(" class method or the "),cae=a("a"),Ent=o("from_config()"),Cnt=o(` class
method.`),wnt=l(),wS=a("p"),Ant=o("This class cannot be instantiated directly using "),Tye=a("code"),ynt=o("__init__()"),Lnt=o(" (throws an error)."),xnt=l(),la=a("div"),F(AS.$$.fragment),$nt=l(),Mye=a("p"),knt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Snt=l(),Of=a("p"),Rnt=o(`Note:
Loading a model from its configuration file does `),Eye=a("strong"),Pnt=o("not"),Bnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fae=a("a"),Int=o("from_pretrained()"),Nnt=o(" to load the model weights."),qnt=l(),F(Jw.$$.fragment),jnt=l(),ot=a("div"),F(yS.$$.fragment),Dnt=l(),Cye=a("p"),Gnt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ont=l(),Gn=a("p"),Vnt=o("The model class to instantiate is selected based on the "),wye=a("code"),Xnt=o("model_type"),znt=o(` property of the config object (either
passed as an argument or loaded from `),Aye=a("code"),Qnt=o("pretrained_model_name_or_path"),Wnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yye=a("code"),Unt=o("pretrained_model_name_or_path"),Hnt=o(":"),Jnt=l(),Se=a("ul"),Yw=a("li"),Lye=a("strong"),Ynt=o("albert"),Knt=o(" \u2014 "),mae=a("a"),Znt=o("FlaxAlbertForSequenceClassification"),est=o(" (ALBERT model)"),ost=l(),Kw=a("li"),xye=a("strong"),rst=o("bart"),tst=o(" \u2014 "),gae=a("a"),ast=o("FlaxBartForSequenceClassification"),nst=o(" (BART model)"),sst=l(),Zw=a("li"),$ye=a("strong"),lst=o("bert"),ist=o(" \u2014 "),hae=a("a"),dst=o("FlaxBertForSequenceClassification"),cst=o(" (BERT model)"),fst=l(),eA=a("li"),kye=a("strong"),mst=o("big_bird"),gst=o(" \u2014 "),pae=a("a"),hst=o("FlaxBigBirdForSequenceClassification"),pst=o(" (BigBird model)"),ust=l(),oA=a("li"),Sye=a("strong"),_st=o("distilbert"),bst=o(" \u2014 "),uae=a("a"),vst=o("FlaxDistilBertForSequenceClassification"),Fst=o(" (DistilBERT model)"),Tst=l(),rA=a("li"),Rye=a("strong"),Mst=o("electra"),Est=o(" \u2014 "),_ae=a("a"),Cst=o("FlaxElectraForSequenceClassification"),wst=o(" (ELECTRA model)"),Ast=l(),tA=a("li"),Pye=a("strong"),yst=o("mbart"),Lst=o(" \u2014 "),bae=a("a"),xst=o("FlaxMBartForSequenceClassification"),$st=o(" (mBART model)"),kst=l(),aA=a("li"),Bye=a("strong"),Sst=o("roberta"),Rst=o(" \u2014 "),vae=a("a"),Pst=o("FlaxRobertaForSequenceClassification"),Bst=o(" (RoBERTa model)"),Ist=l(),nA=a("li"),Iye=a("strong"),Nst=o("roformer"),qst=o(" \u2014 "),Fae=a("a"),jst=o("FlaxRoFormerForSequenceClassification"),Dst=o(" (RoFormer model)"),Gst=l(),sA=a("li"),Nye=a("strong"),Ost=o("xlm-roberta"),Vst=o(" \u2014 "),Tae=a("a"),Xst=o("FlaxXLMRobertaForSequenceClassification"),zst=o(" (XLM-RoBERTa model)"),Qst=l(),F(lA.$$.fragment),NJe=l(),Vf=a("h2"),iA=a("a"),qye=a("span"),F(LS.$$.fragment),Wst=l(),jye=a("span"),Ust=o("FlaxAutoModelForQuestionAnswering"),qJe=l(),yr=a("div"),F(xS.$$.fragment),Hst=l(),Xf=a("p"),Jst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mae=a("a"),Yst=o("from_pretrained()"),Kst=o(" class method or the "),Eae=a("a"),Zst=o("from_config()"),elt=o(` class
method.`),olt=l(),$S=a("p"),rlt=o("This class cannot be instantiated directly using "),Dye=a("code"),tlt=o("__init__()"),alt=o(" (throws an error)."),nlt=l(),ia=a("div"),F(kS.$$.fragment),slt=l(),Gye=a("p"),llt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ilt=l(),zf=a("p"),dlt=o(`Note:
Loading a model from its configuration file does `),Oye=a("strong"),clt=o("not"),flt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=a("a"),mlt=o("from_pretrained()"),glt=o(" to load the model weights."),hlt=l(),F(dA.$$.fragment),plt=l(),rt=a("div"),F(SS.$$.fragment),ult=l(),Vye=a("p"),_lt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),blt=l(),On=a("p"),vlt=o("The model class to instantiate is selected based on the "),Xye=a("code"),Flt=o("model_type"),Tlt=o(` property of the config object (either
passed as an argument or loaded from `),zye=a("code"),Mlt=o("pretrained_model_name_or_path"),Elt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qye=a("code"),Clt=o("pretrained_model_name_or_path"),wlt=o(":"),Alt=l(),Re=a("ul"),cA=a("li"),Wye=a("strong"),ylt=o("albert"),Llt=o(" \u2014 "),wae=a("a"),xlt=o("FlaxAlbertForQuestionAnswering"),$lt=o(" (ALBERT model)"),klt=l(),fA=a("li"),Uye=a("strong"),Slt=o("bart"),Rlt=o(" \u2014 "),Aae=a("a"),Plt=o("FlaxBartForQuestionAnswering"),Blt=o(" (BART model)"),Ilt=l(),mA=a("li"),Hye=a("strong"),Nlt=o("bert"),qlt=o(" \u2014 "),yae=a("a"),jlt=o("FlaxBertForQuestionAnswering"),Dlt=o(" (BERT model)"),Glt=l(),gA=a("li"),Jye=a("strong"),Olt=o("big_bird"),Vlt=o(" \u2014 "),Lae=a("a"),Xlt=o("FlaxBigBirdForQuestionAnswering"),zlt=o(" (BigBird model)"),Qlt=l(),hA=a("li"),Yye=a("strong"),Wlt=o("distilbert"),Ult=o(" \u2014 "),xae=a("a"),Hlt=o("FlaxDistilBertForQuestionAnswering"),Jlt=o(" (DistilBERT model)"),Ylt=l(),pA=a("li"),Kye=a("strong"),Klt=o("electra"),Zlt=o(" \u2014 "),$ae=a("a"),eit=o("FlaxElectraForQuestionAnswering"),oit=o(" (ELECTRA model)"),rit=l(),uA=a("li"),Zye=a("strong"),tit=o("mbart"),ait=o(" \u2014 "),kae=a("a"),nit=o("FlaxMBartForQuestionAnswering"),sit=o(" (mBART model)"),lit=l(),_A=a("li"),eLe=a("strong"),iit=o("roberta"),dit=o(" \u2014 "),Sae=a("a"),cit=o("FlaxRobertaForQuestionAnswering"),fit=o(" (RoBERTa model)"),mit=l(),bA=a("li"),oLe=a("strong"),git=o("roformer"),hit=o(" \u2014 "),Rae=a("a"),pit=o("FlaxRoFormerForQuestionAnswering"),uit=o(" (RoFormer model)"),_it=l(),vA=a("li"),rLe=a("strong"),bit=o("xlm-roberta"),vit=o(" \u2014 "),Pae=a("a"),Fit=o("FlaxXLMRobertaForQuestionAnswering"),Tit=o(" (XLM-RoBERTa model)"),Mit=l(),F(FA.$$.fragment),jJe=l(),Qf=a("h2"),TA=a("a"),tLe=a("span"),F(RS.$$.fragment),Eit=l(),aLe=a("span"),Cit=o("FlaxAutoModelForTokenClassification"),DJe=l(),Lr=a("div"),F(PS.$$.fragment),wit=l(),Wf=a("p"),Ait=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bae=a("a"),yit=o("from_pretrained()"),Lit=o(" class method or the "),Iae=a("a"),xit=o("from_config()"),$it=o(` class
method.`),kit=l(),BS=a("p"),Sit=o("This class cannot be instantiated directly using "),nLe=a("code"),Rit=o("__init__()"),Pit=o(" (throws an error)."),Bit=l(),da=a("div"),F(IS.$$.fragment),Iit=l(),sLe=a("p"),Nit=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qit=l(),Uf=a("p"),jit=o(`Note:
Loading a model from its configuration file does `),lLe=a("strong"),Dit=o("not"),Git=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=a("a"),Oit=o("from_pretrained()"),Vit=o(" to load the model weights."),Xit=l(),F(MA.$$.fragment),zit=l(),tt=a("div"),F(NS.$$.fragment),Qit=l(),iLe=a("p"),Wit=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uit=l(),Vn=a("p"),Hit=o("The model class to instantiate is selected based on the "),dLe=a("code"),Jit=o("model_type"),Yit=o(` property of the config object (either
passed as an argument or loaded from `),cLe=a("code"),Kit=o("pretrained_model_name_or_path"),Zit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fLe=a("code"),edt=o("pretrained_model_name_or_path"),odt=o(":"),rdt=l(),Xe=a("ul"),EA=a("li"),mLe=a("strong"),tdt=o("albert"),adt=o(" \u2014 "),qae=a("a"),ndt=o("FlaxAlbertForTokenClassification"),sdt=o(" (ALBERT model)"),ldt=l(),CA=a("li"),gLe=a("strong"),idt=o("bert"),ddt=o(" \u2014 "),jae=a("a"),cdt=o("FlaxBertForTokenClassification"),fdt=o(" (BERT model)"),mdt=l(),wA=a("li"),hLe=a("strong"),gdt=o("big_bird"),hdt=o(" \u2014 "),Dae=a("a"),pdt=o("FlaxBigBirdForTokenClassification"),udt=o(" (BigBird model)"),_dt=l(),AA=a("li"),pLe=a("strong"),bdt=o("distilbert"),vdt=o(" \u2014 "),Gae=a("a"),Fdt=o("FlaxDistilBertForTokenClassification"),Tdt=o(" (DistilBERT model)"),Mdt=l(),yA=a("li"),uLe=a("strong"),Edt=o("electra"),Cdt=o(" \u2014 "),Oae=a("a"),wdt=o("FlaxElectraForTokenClassification"),Adt=o(" (ELECTRA model)"),ydt=l(),LA=a("li"),_Le=a("strong"),Ldt=o("roberta"),xdt=o(" \u2014 "),Vae=a("a"),$dt=o("FlaxRobertaForTokenClassification"),kdt=o(" (RoBERTa model)"),Sdt=l(),xA=a("li"),bLe=a("strong"),Rdt=o("roformer"),Pdt=o(" \u2014 "),Xae=a("a"),Bdt=o("FlaxRoFormerForTokenClassification"),Idt=o(" (RoFormer model)"),Ndt=l(),$A=a("li"),vLe=a("strong"),qdt=o("xlm-roberta"),jdt=o(" \u2014 "),zae=a("a"),Ddt=o("FlaxXLMRobertaForTokenClassification"),Gdt=o(" (XLM-RoBERTa model)"),Odt=l(),F(kA.$$.fragment),GJe=l(),Hf=a("h2"),SA=a("a"),FLe=a("span"),F(qS.$$.fragment),Vdt=l(),TLe=a("span"),Xdt=o("FlaxAutoModelForMultipleChoice"),OJe=l(),xr=a("div"),F(jS.$$.fragment),zdt=l(),Jf=a("p"),Qdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qae=a("a"),Wdt=o("from_pretrained()"),Udt=o(" class method or the "),Wae=a("a"),Hdt=o("from_config()"),Jdt=o(` class
method.`),Ydt=l(),DS=a("p"),Kdt=o("This class cannot be instantiated directly using "),MLe=a("code"),Zdt=o("__init__()"),ect=o(" (throws an error)."),oct=l(),ca=a("div"),F(GS.$$.fragment),rct=l(),ELe=a("p"),tct=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),act=l(),Yf=a("p"),nct=o(`Note:
Loading a model from its configuration file does `),CLe=a("strong"),sct=o("not"),lct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uae=a("a"),ict=o("from_pretrained()"),dct=o(" to load the model weights."),cct=l(),F(RA.$$.fragment),fct=l(),at=a("div"),F(OS.$$.fragment),mct=l(),wLe=a("p"),gct=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hct=l(),Xn=a("p"),pct=o("The model class to instantiate is selected based on the "),ALe=a("code"),uct=o("model_type"),_ct=o(` property of the config object (either
passed as an argument or loaded from `),yLe=a("code"),bct=o("pretrained_model_name_or_path"),vct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=a("code"),Fct=o("pretrained_model_name_or_path"),Tct=o(":"),Mct=l(),ze=a("ul"),PA=a("li"),xLe=a("strong"),Ect=o("albert"),Cct=o(" \u2014 "),Hae=a("a"),wct=o("FlaxAlbertForMultipleChoice"),Act=o(" (ALBERT model)"),yct=l(),BA=a("li"),$Le=a("strong"),Lct=o("bert"),xct=o(" \u2014 "),Jae=a("a"),$ct=o("FlaxBertForMultipleChoice"),kct=o(" (BERT model)"),Sct=l(),IA=a("li"),kLe=a("strong"),Rct=o("big_bird"),Pct=o(" \u2014 "),Yae=a("a"),Bct=o("FlaxBigBirdForMultipleChoice"),Ict=o(" (BigBird model)"),Nct=l(),NA=a("li"),SLe=a("strong"),qct=o("distilbert"),jct=o(" \u2014 "),Kae=a("a"),Dct=o("FlaxDistilBertForMultipleChoice"),Gct=o(" (DistilBERT model)"),Oct=l(),qA=a("li"),RLe=a("strong"),Vct=o("electra"),Xct=o(" \u2014 "),Zae=a("a"),zct=o("FlaxElectraForMultipleChoice"),Qct=o(" (ELECTRA model)"),Wct=l(),jA=a("li"),PLe=a("strong"),Uct=o("roberta"),Hct=o(" \u2014 "),ene=a("a"),Jct=o("FlaxRobertaForMultipleChoice"),Yct=o(" (RoBERTa model)"),Kct=l(),DA=a("li"),BLe=a("strong"),Zct=o("roformer"),eft=o(" \u2014 "),one=a("a"),oft=o("FlaxRoFormerForMultipleChoice"),rft=o(" (RoFormer model)"),tft=l(),GA=a("li"),ILe=a("strong"),aft=o("xlm-roberta"),nft=o(" \u2014 "),rne=a("a"),sft=o("FlaxXLMRobertaForMultipleChoice"),lft=o(" (XLM-RoBERTa model)"),ift=l(),F(OA.$$.fragment),VJe=l(),Kf=a("h2"),VA=a("a"),NLe=a("span"),F(VS.$$.fragment),dft=l(),qLe=a("span"),cft=o("FlaxAutoModelForNextSentencePrediction"),XJe=l(),$r=a("div"),F(XS.$$.fragment),fft=l(),Zf=a("p"),mft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tne=a("a"),gft=o("from_pretrained()"),hft=o(" class method or the "),ane=a("a"),pft=o("from_config()"),uft=o(` class
method.`),_ft=l(),zS=a("p"),bft=o("This class cannot be instantiated directly using "),jLe=a("code"),vft=o("__init__()"),Fft=o(" (throws an error)."),Tft=l(),fa=a("div"),F(QS.$$.fragment),Mft=l(),DLe=a("p"),Eft=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Cft=l(),em=a("p"),wft=o(`Note:
Loading a model from its configuration file does `),GLe=a("strong"),Aft=o("not"),yft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=a("a"),Lft=o("from_pretrained()"),xft=o(" to load the model weights."),$ft=l(),F(XA.$$.fragment),kft=l(),nt=a("div"),F(WS.$$.fragment),Sft=l(),OLe=a("p"),Rft=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pft=l(),zn=a("p"),Bft=o("The model class to instantiate is selected based on the "),VLe=a("code"),Ift=o("model_type"),Nft=o(` property of the config object (either
passed as an argument or loaded from `),XLe=a("code"),qft=o("pretrained_model_name_or_path"),jft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zLe=a("code"),Dft=o("pretrained_model_name_or_path"),Gft=o(":"),Oft=l(),QLe=a("ul"),zA=a("li"),WLe=a("strong"),Vft=o("bert"),Xft=o(" \u2014 "),sne=a("a"),zft=o("FlaxBertForNextSentencePrediction"),Qft=o(" (BERT model)"),Wft=l(),F(QA.$$.fragment),zJe=l(),om=a("h2"),WA=a("a"),ULe=a("span"),F(US.$$.fragment),Uft=l(),HLe=a("span"),Hft=o("FlaxAutoModelForImageClassification"),QJe=l(),kr=a("div"),F(HS.$$.fragment),Jft=l(),rm=a("p"),Yft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lne=a("a"),Kft=o("from_pretrained()"),Zft=o(" class method or the "),ine=a("a"),emt=o("from_config()"),omt=o(` class
method.`),rmt=l(),JS=a("p"),tmt=o("This class cannot be instantiated directly using "),JLe=a("code"),amt=o("__init__()"),nmt=o(" (throws an error)."),smt=l(),ma=a("div"),F(YS.$$.fragment),lmt=l(),YLe=a("p"),imt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dmt=l(),tm=a("p"),cmt=o(`Note:
Loading a model from its configuration file does `),KLe=a("strong"),fmt=o("not"),mmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dne=a("a"),gmt=o("from_pretrained()"),hmt=o(" to load the model weights."),pmt=l(),F(UA.$$.fragment),umt=l(),st=a("div"),F(KS.$$.fragment),_mt=l(),ZLe=a("p"),bmt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vmt=l(),Qn=a("p"),Fmt=o("The model class to instantiate is selected based on the "),e9e=a("code"),Tmt=o("model_type"),Mmt=o(` property of the config object (either
passed as an argument or loaded from `),o9e=a("code"),Emt=o("pretrained_model_name_or_path"),Cmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r9e=a("code"),wmt=o("pretrained_model_name_or_path"),Amt=o(":"),ymt=l(),ZS=a("ul"),HA=a("li"),t9e=a("strong"),Lmt=o("beit"),xmt=o(" \u2014 "),cne=a("a"),$mt=o("FlaxBeitForImageClassification"),kmt=o(" (BEiT model)"),Smt=l(),JA=a("li"),a9e=a("strong"),Rmt=o("vit"),Pmt=o(" \u2014 "),fne=a("a"),Bmt=o("FlaxViTForImageClassification"),Imt=o(" (ViT model)"),Nmt=l(),F(YA.$$.fragment),WJe=l(),am=a("h2"),KA=a("a"),n9e=a("span"),F(eR.$$.fragment),qmt=l(),s9e=a("span"),jmt=o("FlaxAutoModelForVision2Seq"),UJe=l(),Sr=a("div"),F(oR.$$.fragment),Dmt=l(),nm=a("p"),Gmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mne=a("a"),Omt=o("from_pretrained()"),Vmt=o(" class method or the "),gne=a("a"),Xmt=o("from_config()"),zmt=o(` class
method.`),Qmt=l(),rR=a("p"),Wmt=o("This class cannot be instantiated directly using "),l9e=a("code"),Umt=o("__init__()"),Hmt=o(" (throws an error)."),Jmt=l(),ga=a("div"),F(tR.$$.fragment),Ymt=l(),i9e=a("p"),Kmt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zmt=l(),sm=a("p"),egt=o(`Note:
Loading a model from its configuration file does `),d9e=a("strong"),ogt=o("not"),rgt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=a("a"),tgt=o("from_pretrained()"),agt=o(" to load the model weights."),ngt=l(),F(ZA.$$.fragment),sgt=l(),lt=a("div"),F(aR.$$.fragment),lgt=l(),c9e=a("p"),igt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dgt=l(),Wn=a("p"),cgt=o("The model class to instantiate is selected based on the "),f9e=a("code"),fgt=o("model_type"),mgt=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),ggt=o("pretrained_model_name_or_path"),hgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=a("code"),pgt=o("pretrained_model_name_or_path"),ugt=o(":"),_gt=l(),h9e=a("ul"),e6=a("li"),p9e=a("strong"),bgt=o("vision-encoder-decoder"),vgt=o(" \u2014 "),pne=a("a"),Fgt=o("FlaxVisionEncoderDecoderModel"),Tgt=o(" (Vision Encoder decoder model)"),Mgt=l(),F(o6.$$.fragment),this.h()},l(f){const _=ana('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var nR=s(p);m=n(nR,"A",{id:!0,class:!0,href:!0});var u9e=s(m);u=n(u9e,"SPAN",{});var _9e=s(u);T(d.$$.fragment,_9e),_9e.forEach(t),u9e.forEach(t),h=i(nR),yo=n(nR,"SPAN",{});var b9e=s(yo);Ui=r(b9e,"Auto Classes"),b9e.forEach(t),nR.forEach(t),cm=i(f),gt=n(f,"P",{});var sR=s(gt);Hi=r(sR,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ji=n(sR,"CODE",{});var v9e=s(Ji);xL=r(v9e,"from_pretrained()"),v9e.forEach(t),fm=r(sR,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),sR.forEach(t),Oe=i(f),We=n(f,"P",{});var Un=s(We);Yi=r(Un,"Instantiating one of "),Hn=n(Un,"A",{href:!0});var F9e=s(Hn);$L=r(F9e,"AutoConfig"),F9e.forEach(t),Jn=r(Un,", "),Yn=n(Un,"A",{href:!0});var T9e=s(Yn);kL=r(T9e,"AutoModel"),T9e.forEach(t),Ki=r(Un,`, and
`),Kn=n(Un,"A",{href:!0});var M9e=s(Kn);SL=r(M9e,"AutoTokenizer"),M9e.forEach(t),Zi=r(Un," will directly create a class of the relevant architecture. For instance"),Un.forEach(t),mm=i(f),T(Va.$$.fragment,f),Ue=i(f),Ae=n(f,"P",{});var lR=s(Ae);LP=r(lR,"will create a model that is an instance of "),ed=n(lR,"A",{href:!0});var E9e=s(ed);xP=r(E9e,"BertModel"),E9e.forEach(t),$P=r(lR,"."),lR.forEach(t),Lo=i(f),Xa=n(f,"P",{});var iR=s(Xa);kP=r(iR,"There is one class of "),gm=n(iR,"CODE",{});var C9e=s(gm);SP=r(C9e,"AutoModel"),C9e.forEach(t),mZe=r(iR," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),iR.forEach(t),qUe=i(f),od=n(f,"H2",{class:!0});var dR=s(od);hm=n(dR,"A",{id:!0,class:!0,href:!0});var w9e=s(hm);ule=n(w9e,"SPAN",{});var A9e=s(ule);T(RL.$$.fragment,A9e),A9e.forEach(t),w9e.forEach(t),gZe=i(dR),_le=n(dR,"SPAN",{});var y9e=s(_le);hZe=r(y9e,"Extending the Auto Classes"),y9e.forEach(t),dR.forEach(t),jUe=i(f),Zn=n(f,"P",{});var lm=s(Zn);pZe=r(lm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ble=n(lm,"CODE",{});var L9e=s(ble);uZe=r(L9e,"NewModel"),L9e.forEach(t),_Ze=r(lm,", make sure you have a "),vle=n(lm,"CODE",{});var x9e=s(vle);bZe=r(x9e,"NewModelConfig"),x9e.forEach(t),vZe=r(lm,` then you can add those to the auto
classes like this:`),lm.forEach(t),DUe=i(f),T(PL.$$.fragment,f),GUe=i(f),RP=n(f,"P",{});var $9e=s(RP);FZe=r($9e,"You will then be able to use the auto classes like you would usually do!"),$9e.forEach(t),OUe=i(f),T(pm.$$.fragment,f),VUe=i(f),rd=n(f,"H2",{class:!0});var cR=s(rd);um=n(cR,"A",{id:!0,class:!0,href:!0});var k9e=s(um);Fle=n(k9e,"SPAN",{});var S9e=s(Fle);T(BL.$$.fragment,S9e),S9e.forEach(t),k9e.forEach(t),TZe=i(cR),Tle=n(cR,"SPAN",{});var R9e=s(Tle);MZe=r(R9e,"AutoConfig"),R9e.forEach(t),cR.forEach(t),XUe=i(f),xo=n(f,"DIV",{class:!0});var ft=s(xo);T(IL.$$.fragment,ft),EZe=i(ft),NL=n(ft,"P",{});var fR=s(NL);CZe=r(fR,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),PP=n(fR,"A",{href:!0});var P9e=s(PP);wZe=r(P9e,"from_pretrained()"),P9e.forEach(t),AZe=r(fR," class method."),fR.forEach(t),yZe=i(ft),qL=n(ft,"P",{});var mR=s(qL);LZe=r(mR,"This class cannot be instantiated directly using "),Mle=n(mR,"CODE",{});var B9e=s(Mle);xZe=r(B9e,"__init__()"),B9e.forEach(t),$Ze=r(mR," (throws an error)."),mR.forEach(t),kZe=i(ft),Rr=n(ft,"DIV",{class:!0});var mt=s(Rr);T(jL.$$.fragment,mt),SZe=i(mt),Ele=n(mt,"P",{});var I9e=s(Ele);RZe=r(I9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),I9e.forEach(t),PZe=i(mt),td=n(mt,"P",{});var im=s(td);BZe=r(im,"The configuration class to instantiate is selected based on the "),Cle=n(im,"CODE",{});var N9e=s(Cle);IZe=r(N9e,"model_type"),N9e.forEach(t),NZe=r(im,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),wle=n(im,"CODE",{});var q9e=s(wle);qZe=r(q9e,"pretrained_model_name_or_path"),q9e.forEach(t),jZe=r(im,":"),im.forEach(t),DZe=i(mt),A=n(mt,"UL",{});var y=s(A);_m=n(y,"LI",{});var r6=s(_m);Ale=n(r6,"STRONG",{});var j9e=s(Ale);GZe=r(j9e,"albert"),j9e.forEach(t),OZe=r(r6," \u2014 "),BP=n(r6,"A",{href:!0});var D9e=s(BP);VZe=r(D9e,"AlbertConfig"),D9e.forEach(t),XZe=r(r6," (ALBERT model)"),r6.forEach(t),zZe=i(y),bm=n(y,"LI",{});var t6=s(bm);yle=n(t6,"STRONG",{});var G9e=s(yle);QZe=r(G9e,"bart"),G9e.forEach(t),WZe=r(t6," \u2014 "),IP=n(t6,"A",{href:!0});var O9e=s(IP);UZe=r(O9e,"BartConfig"),O9e.forEach(t),HZe=r(t6," (BART model)"),t6.forEach(t),JZe=i(y),vm=n(y,"LI",{});var a6=s(vm);Lle=n(a6,"STRONG",{});var V9e=s(Lle);YZe=r(V9e,"beit"),V9e.forEach(t),KZe=r(a6," \u2014 "),NP=n(a6,"A",{href:!0});var X9e=s(NP);ZZe=r(X9e,"BeitConfig"),X9e.forEach(t),eeo=r(a6," (BEiT model)"),a6.forEach(t),oeo=i(y),Fm=n(y,"LI",{});var n6=s(Fm);xle=n(n6,"STRONG",{});var z9e=s(xle);reo=r(z9e,"bert"),z9e.forEach(t),teo=r(n6," \u2014 "),qP=n(n6,"A",{href:!0});var Q9e=s(qP);aeo=r(Q9e,"BertConfig"),Q9e.forEach(t),neo=r(n6," (BERT model)"),n6.forEach(t),seo=i(y),Tm=n(y,"LI",{});var s6=s(Tm);$le=n(s6,"STRONG",{});var W9e=s($le);leo=r(W9e,"bert-generation"),W9e.forEach(t),ieo=r(s6," \u2014 "),jP=n(s6,"A",{href:!0});var U9e=s(jP);deo=r(U9e,"BertGenerationConfig"),U9e.forEach(t),ceo=r(s6," (Bert Generation model)"),s6.forEach(t),feo=i(y),Mm=n(y,"LI",{});var l6=s(Mm);kle=n(l6,"STRONG",{});var H9e=s(kle);meo=r(H9e,"big_bird"),H9e.forEach(t),geo=r(l6," \u2014 "),DP=n(l6,"A",{href:!0});var J9e=s(DP);heo=r(J9e,"BigBirdConfig"),J9e.forEach(t),peo=r(l6," (BigBird model)"),l6.forEach(t),ueo=i(y),Em=n(y,"LI",{});var i6=s(Em);Sle=n(i6,"STRONG",{});var Y9e=s(Sle);_eo=r(Y9e,"bigbird_pegasus"),Y9e.forEach(t),beo=r(i6," \u2014 "),GP=n(i6,"A",{href:!0});var K9e=s(GP);veo=r(K9e,"BigBirdPegasusConfig"),K9e.forEach(t),Feo=r(i6," (BigBird-Pegasus model)"),i6.forEach(t),Teo=i(y),Cm=n(y,"LI",{});var d6=s(Cm);Rle=n(d6,"STRONG",{});var Z9e=s(Rle);Meo=r(Z9e,"blenderbot"),Z9e.forEach(t),Eeo=r(d6," \u2014 "),OP=n(d6,"A",{href:!0});var exe=s(OP);Ceo=r(exe,"BlenderbotConfig"),exe.forEach(t),weo=r(d6," (Blenderbot model)"),d6.forEach(t),Aeo=i(y),wm=n(y,"LI",{});var c6=s(wm);Ple=n(c6,"STRONG",{});var oxe=s(Ple);yeo=r(oxe,"blenderbot-small"),oxe.forEach(t),Leo=r(c6," \u2014 "),VP=n(c6,"A",{href:!0});var rxe=s(VP);xeo=r(rxe,"BlenderbotSmallConfig"),rxe.forEach(t),$eo=r(c6," (BlenderbotSmall model)"),c6.forEach(t),keo=i(y),Am=n(y,"LI",{});var f6=s(Am);Ble=n(f6,"STRONG",{});var txe=s(Ble);Seo=r(txe,"bloom"),txe.forEach(t),Reo=r(f6," \u2014 "),XP=n(f6,"A",{href:!0});var axe=s(XP);Peo=r(axe,"BloomConfig"),axe.forEach(t),Beo=r(f6," (BLOOM model)"),f6.forEach(t),Ieo=i(y),ym=n(y,"LI",{});var m6=s(ym);Ile=n(m6,"STRONG",{});var nxe=s(Ile);Neo=r(nxe,"camembert"),nxe.forEach(t),qeo=r(m6," \u2014 "),zP=n(m6,"A",{href:!0});var sxe=s(zP);jeo=r(sxe,"CamembertConfig"),sxe.forEach(t),Deo=r(m6," (CamemBERT model)"),m6.forEach(t),Geo=i(y),Lm=n(y,"LI",{});var g6=s(Lm);Nle=n(g6,"STRONG",{});var lxe=s(Nle);Oeo=r(lxe,"canine"),lxe.forEach(t),Veo=r(g6," \u2014 "),QP=n(g6,"A",{href:!0});var ixe=s(QP);Xeo=r(ixe,"CanineConfig"),ixe.forEach(t),zeo=r(g6," (CANINE model)"),g6.forEach(t),Qeo=i(y),xm=n(y,"LI",{});var h6=s(xm);qle=n(h6,"STRONG",{});var dxe=s(qle);Weo=r(dxe,"clip"),dxe.forEach(t),Ueo=r(h6," \u2014 "),WP=n(h6,"A",{href:!0});var cxe=s(WP);Heo=r(cxe,"CLIPConfig"),cxe.forEach(t),Jeo=r(h6," (CLIP model)"),h6.forEach(t),Yeo=i(y),$m=n(y,"LI",{});var p6=s($m);jle=n(p6,"STRONG",{});var fxe=s(jle);Keo=r(fxe,"codegen"),fxe.forEach(t),Zeo=r(p6," \u2014 "),UP=n(p6,"A",{href:!0});var mxe=s(UP);eoo=r(mxe,"CodeGenConfig"),mxe.forEach(t),ooo=r(p6," (CodeGen model)"),p6.forEach(t),roo=i(y),km=n(y,"LI",{});var u6=s(km);Dle=n(u6,"STRONG",{});var gxe=s(Dle);too=r(gxe,"convbert"),gxe.forEach(t),aoo=r(u6," \u2014 "),HP=n(u6,"A",{href:!0});var hxe=s(HP);noo=r(hxe,"ConvBertConfig"),hxe.forEach(t),soo=r(u6," (ConvBERT model)"),u6.forEach(t),loo=i(y),Sm=n(y,"LI",{});var _6=s(Sm);Gle=n(_6,"STRONG",{});var pxe=s(Gle);ioo=r(pxe,"convnext"),pxe.forEach(t),doo=r(_6," \u2014 "),JP=n(_6,"A",{href:!0});var uxe=s(JP);coo=r(uxe,"ConvNextConfig"),uxe.forEach(t),foo=r(_6," (ConvNeXT model)"),_6.forEach(t),moo=i(y),Rm=n(y,"LI",{});var b6=s(Rm);Ole=n(b6,"STRONG",{});var _xe=s(Ole);goo=r(_xe,"ctrl"),_xe.forEach(t),hoo=r(b6," \u2014 "),YP=n(b6,"A",{href:!0});var bxe=s(YP);poo=r(bxe,"CTRLConfig"),bxe.forEach(t),uoo=r(b6," (CTRL model)"),b6.forEach(t),_oo=i(y),Pm=n(y,"LI",{});var v6=s(Pm);Vle=n(v6,"STRONG",{});var vxe=s(Vle);boo=r(vxe,"cvt"),vxe.forEach(t),voo=r(v6," \u2014 "),KP=n(v6,"A",{href:!0});var Fxe=s(KP);Foo=r(Fxe,"CvtConfig"),Fxe.forEach(t),Too=r(v6," (CvT model)"),v6.forEach(t),Moo=i(y),Bm=n(y,"LI",{});var F6=s(Bm);Xle=n(F6,"STRONG",{});var Txe=s(Xle);Eoo=r(Txe,"data2vec-audio"),Txe.forEach(t),Coo=r(F6," \u2014 "),ZP=n(F6,"A",{href:!0});var Mxe=s(ZP);woo=r(Mxe,"Data2VecAudioConfig"),Mxe.forEach(t),Aoo=r(F6," (Data2VecAudio model)"),F6.forEach(t),yoo=i(y),Im=n(y,"LI",{});var T6=s(Im);zle=n(T6,"STRONG",{});var Exe=s(zle);Loo=r(Exe,"data2vec-text"),Exe.forEach(t),xoo=r(T6," \u2014 "),eB=n(T6,"A",{href:!0});var Cxe=s(eB);$oo=r(Cxe,"Data2VecTextConfig"),Cxe.forEach(t),koo=r(T6," (Data2VecText model)"),T6.forEach(t),Soo=i(y),Nm=n(y,"LI",{});var M6=s(Nm);Qle=n(M6,"STRONG",{});var wxe=s(Qle);Roo=r(wxe,"data2vec-vision"),wxe.forEach(t),Poo=r(M6," \u2014 "),oB=n(M6,"A",{href:!0});var Axe=s(oB);Boo=r(Axe,"Data2VecVisionConfig"),Axe.forEach(t),Ioo=r(M6," (Data2VecVision model)"),M6.forEach(t),Noo=i(y),qm=n(y,"LI",{});var E6=s(qm);Wle=n(E6,"STRONG",{});var yxe=s(Wle);qoo=r(yxe,"deberta"),yxe.forEach(t),joo=r(E6," \u2014 "),rB=n(E6,"A",{href:!0});var Lxe=s(rB);Doo=r(Lxe,"DebertaConfig"),Lxe.forEach(t),Goo=r(E6," (DeBERTa model)"),E6.forEach(t),Ooo=i(y),jm=n(y,"LI",{});var C6=s(jm);Ule=n(C6,"STRONG",{});var xxe=s(Ule);Voo=r(xxe,"deberta-v2"),xxe.forEach(t),Xoo=r(C6," \u2014 "),tB=n(C6,"A",{href:!0});var $xe=s(tB);zoo=r($xe,"DebertaV2Config"),$xe.forEach(t),Qoo=r(C6," (DeBERTa-v2 model)"),C6.forEach(t),Woo=i(y),Dm=n(y,"LI",{});var w6=s(Dm);Hle=n(w6,"STRONG",{});var kxe=s(Hle);Uoo=r(kxe,"decision_transformer"),kxe.forEach(t),Hoo=r(w6," \u2014 "),aB=n(w6,"A",{href:!0});var Sxe=s(aB);Joo=r(Sxe,"DecisionTransformerConfig"),Sxe.forEach(t),Yoo=r(w6," (Decision Transformer model)"),w6.forEach(t),Koo=i(y),Gm=n(y,"LI",{});var A6=s(Gm);Jle=n(A6,"STRONG",{});var Rxe=s(Jle);Zoo=r(Rxe,"deit"),Rxe.forEach(t),ero=r(A6," \u2014 "),nB=n(A6,"A",{href:!0});var Pxe=s(nB);oro=r(Pxe,"DeiTConfig"),Pxe.forEach(t),rro=r(A6," (DeiT model)"),A6.forEach(t),tro=i(y),Om=n(y,"LI",{});var y6=s(Om);Yle=n(y6,"STRONG",{});var Cgt=s(Yle);aro=r(Cgt,"detr"),Cgt.forEach(t),nro=r(y6," \u2014 "),sB=n(y6,"A",{href:!0});var wgt=s(sB);sro=r(wgt,"DetrConfig"),wgt.forEach(t),lro=r(y6," (DETR model)"),y6.forEach(t),iro=i(y),Vm=n(y,"LI",{});var Bxe=s(Vm);Kle=n(Bxe,"STRONG",{});var Agt=s(Kle);dro=r(Agt,"distilbert"),Agt.forEach(t),cro=r(Bxe," \u2014 "),lB=n(Bxe,"A",{href:!0});var ygt=s(lB);fro=r(ygt,"DistilBertConfig"),ygt.forEach(t),mro=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),gro=i(y),Xm=n(y,"LI",{});var Ixe=s(Xm);Zle=n(Ixe,"STRONG",{});var Lgt=s(Zle);hro=r(Lgt,"donut-swin"),Lgt.forEach(t),pro=r(Ixe," \u2014 "),iB=n(Ixe,"A",{href:!0});var xgt=s(iB);uro=r(xgt,"DonutSwinConfig"),xgt.forEach(t),_ro=r(Ixe," (DonutSwin model)"),Ixe.forEach(t),bro=i(y),zm=n(y,"LI",{});var Nxe=s(zm);eie=n(Nxe,"STRONG",{});var $gt=s(eie);vro=r($gt,"dpr"),$gt.forEach(t),Fro=r(Nxe," \u2014 "),dB=n(Nxe,"A",{href:!0});var kgt=s(dB);Tro=r(kgt,"DPRConfig"),kgt.forEach(t),Mro=r(Nxe," (DPR model)"),Nxe.forEach(t),Ero=i(y),Qm=n(y,"LI",{});var qxe=s(Qm);oie=n(qxe,"STRONG",{});var Sgt=s(oie);Cro=r(Sgt,"dpt"),Sgt.forEach(t),wro=r(qxe," \u2014 "),cB=n(qxe,"A",{href:!0});var Rgt=s(cB);Aro=r(Rgt,"DPTConfig"),Rgt.forEach(t),yro=r(qxe," (DPT model)"),qxe.forEach(t),Lro=i(y),Wm=n(y,"LI",{});var jxe=s(Wm);rie=n(jxe,"STRONG",{});var Pgt=s(rie);xro=r(Pgt,"electra"),Pgt.forEach(t),$ro=r(jxe," \u2014 "),fB=n(jxe,"A",{href:!0});var Bgt=s(fB);kro=r(Bgt,"ElectraConfig"),Bgt.forEach(t),Sro=r(jxe," (ELECTRA model)"),jxe.forEach(t),Rro=i(y),Um=n(y,"LI",{});var Dxe=s(Um);tie=n(Dxe,"STRONG",{});var Igt=s(tie);Pro=r(Igt,"encoder-decoder"),Igt.forEach(t),Bro=r(Dxe," \u2014 "),mB=n(Dxe,"A",{href:!0});var Ngt=s(mB);Iro=r(Ngt,"EncoderDecoderConfig"),Ngt.forEach(t),Nro=r(Dxe," (Encoder decoder model)"),Dxe.forEach(t),qro=i(y),Hm=n(y,"LI",{});var Gxe=s(Hm);aie=n(Gxe,"STRONG",{});var qgt=s(aie);jro=r(qgt,"flaubert"),qgt.forEach(t),Dro=r(Gxe," \u2014 "),gB=n(Gxe,"A",{href:!0});var jgt=s(gB);Gro=r(jgt,"FlaubertConfig"),jgt.forEach(t),Oro=r(Gxe," (FlauBERT model)"),Gxe.forEach(t),Vro=i(y),Jm=n(y,"LI",{});var Oxe=s(Jm);nie=n(Oxe,"STRONG",{});var Dgt=s(nie);Xro=r(Dgt,"flava"),Dgt.forEach(t),zro=r(Oxe," \u2014 "),hB=n(Oxe,"A",{href:!0});var Ggt=s(hB);Qro=r(Ggt,"FlavaConfig"),Ggt.forEach(t),Wro=r(Oxe," (FLAVA model)"),Oxe.forEach(t),Uro=i(y),Ym=n(y,"LI",{});var Vxe=s(Ym);sie=n(Vxe,"STRONG",{});var Ogt=s(sie);Hro=r(Ogt,"fnet"),Ogt.forEach(t),Jro=r(Vxe," \u2014 "),pB=n(Vxe,"A",{href:!0});var Vgt=s(pB);Yro=r(Vgt,"FNetConfig"),Vgt.forEach(t),Kro=r(Vxe," (FNet model)"),Vxe.forEach(t),Zro=i(y),Km=n(y,"LI",{});var Xxe=s(Km);lie=n(Xxe,"STRONG",{});var Xgt=s(lie);eto=r(Xgt,"fsmt"),Xgt.forEach(t),oto=r(Xxe," \u2014 "),uB=n(Xxe,"A",{href:!0});var zgt=s(uB);rto=r(zgt,"FSMTConfig"),zgt.forEach(t),tto=r(Xxe," (FairSeq Machine-Translation model)"),Xxe.forEach(t),ato=i(y),Zm=n(y,"LI",{});var zxe=s(Zm);iie=n(zxe,"STRONG",{});var Qgt=s(iie);nto=r(Qgt,"funnel"),Qgt.forEach(t),sto=r(zxe," \u2014 "),_B=n(zxe,"A",{href:!0});var Wgt=s(_B);lto=r(Wgt,"FunnelConfig"),Wgt.forEach(t),ito=r(zxe," (Funnel Transformer model)"),zxe.forEach(t),dto=i(y),eg=n(y,"LI",{});var Qxe=s(eg);die=n(Qxe,"STRONG",{});var Ugt=s(die);cto=r(Ugt,"glpn"),Ugt.forEach(t),fto=r(Qxe," \u2014 "),bB=n(Qxe,"A",{href:!0});var Hgt=s(bB);mto=r(Hgt,"GLPNConfig"),Hgt.forEach(t),gto=r(Qxe," (GLPN model)"),Qxe.forEach(t),hto=i(y),og=n(y,"LI",{});var Wxe=s(og);cie=n(Wxe,"STRONG",{});var Jgt=s(cie);pto=r(Jgt,"gpt2"),Jgt.forEach(t),uto=r(Wxe," \u2014 "),vB=n(Wxe,"A",{href:!0});var Ygt=s(vB);_to=r(Ygt,"GPT2Config"),Ygt.forEach(t),bto=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),vto=i(y),rg=n(y,"LI",{});var Uxe=s(rg);fie=n(Uxe,"STRONG",{});var Kgt=s(fie);Fto=r(Kgt,"gpt_neo"),Kgt.forEach(t),Tto=r(Uxe," \u2014 "),FB=n(Uxe,"A",{href:!0});var Zgt=s(FB);Mto=r(Zgt,"GPTNeoConfig"),Zgt.forEach(t),Eto=r(Uxe," (GPT Neo model)"),Uxe.forEach(t),Cto=i(y),tg=n(y,"LI",{});var Hxe=s(tg);mie=n(Hxe,"STRONG",{});var eht=s(mie);wto=r(eht,"gpt_neox"),eht.forEach(t),Ato=r(Hxe," \u2014 "),TB=n(Hxe,"A",{href:!0});var oht=s(TB);yto=r(oht,"GPTNeoXConfig"),oht.forEach(t),Lto=r(Hxe," (GPT NeoX model)"),Hxe.forEach(t),xto=i(y),ag=n(y,"LI",{});var Jxe=s(ag);gie=n(Jxe,"STRONG",{});var rht=s(gie);$to=r(rht,"gptj"),rht.forEach(t),kto=r(Jxe," \u2014 "),MB=n(Jxe,"A",{href:!0});var tht=s(MB);Sto=r(tht,"GPTJConfig"),tht.forEach(t),Rto=r(Jxe," (GPT-J model)"),Jxe.forEach(t),Pto=i(y),ng=n(y,"LI",{});var Yxe=s(ng);hie=n(Yxe,"STRONG",{});var aht=s(hie);Bto=r(aht,"groupvit"),aht.forEach(t),Ito=r(Yxe," \u2014 "),EB=n(Yxe,"A",{href:!0});var nht=s(EB);Nto=r(nht,"GroupViTConfig"),nht.forEach(t),qto=r(Yxe," (GroupViT model)"),Yxe.forEach(t),jto=i(y),sg=n(y,"LI",{});var Kxe=s(sg);pie=n(Kxe,"STRONG",{});var sht=s(pie);Dto=r(sht,"hubert"),sht.forEach(t),Gto=r(Kxe," \u2014 "),CB=n(Kxe,"A",{href:!0});var lht=s(CB);Oto=r(lht,"HubertConfig"),lht.forEach(t),Vto=r(Kxe," (Hubert model)"),Kxe.forEach(t),Xto=i(y),lg=n(y,"LI",{});var Zxe=s(lg);uie=n(Zxe,"STRONG",{});var iht=s(uie);zto=r(iht,"ibert"),iht.forEach(t),Qto=r(Zxe," \u2014 "),wB=n(Zxe,"A",{href:!0});var dht=s(wB);Wto=r(dht,"IBertConfig"),dht.forEach(t),Uto=r(Zxe," (I-BERT model)"),Zxe.forEach(t),Hto=i(y),ig=n(y,"LI",{});var e$e=s(ig);_ie=n(e$e,"STRONG",{});var cht=s(_ie);Jto=r(cht,"imagegpt"),cht.forEach(t),Yto=r(e$e," \u2014 "),AB=n(e$e,"A",{href:!0});var fht=s(AB);Kto=r(fht,"ImageGPTConfig"),fht.forEach(t),Zto=r(e$e," (ImageGPT model)"),e$e.forEach(t),eao=i(y),dg=n(y,"LI",{});var o$e=s(dg);bie=n(o$e,"STRONG",{});var mht=s(bie);oao=r(mht,"layoutlm"),mht.forEach(t),rao=r(o$e," \u2014 "),yB=n(o$e,"A",{href:!0});var ght=s(yB);tao=r(ght,"LayoutLMConfig"),ght.forEach(t),aao=r(o$e," (LayoutLM model)"),o$e.forEach(t),nao=i(y),cg=n(y,"LI",{});var r$e=s(cg);vie=n(r$e,"STRONG",{});var hht=s(vie);sao=r(hht,"layoutlmv2"),hht.forEach(t),lao=r(r$e," \u2014 "),LB=n(r$e,"A",{href:!0});var pht=s(LB);iao=r(pht,"LayoutLMv2Config"),pht.forEach(t),dao=r(r$e," (LayoutLMv2 model)"),r$e.forEach(t),cao=i(y),fg=n(y,"LI",{});var t$e=s(fg);Fie=n(t$e,"STRONG",{});var uht=s(Fie);fao=r(uht,"layoutlmv3"),uht.forEach(t),mao=r(t$e," \u2014 "),xB=n(t$e,"A",{href:!0});var _ht=s(xB);gao=r(_ht,"LayoutLMv3Config"),_ht.forEach(t),hao=r(t$e," (LayoutLMv3 model)"),t$e.forEach(t),pao=i(y),mg=n(y,"LI",{});var a$e=s(mg);Tie=n(a$e,"STRONG",{});var bht=s(Tie);uao=r(bht,"led"),bht.forEach(t),_ao=r(a$e," \u2014 "),$B=n(a$e,"A",{href:!0});var vht=s($B);bao=r(vht,"LEDConfig"),vht.forEach(t),vao=r(a$e," (LED model)"),a$e.forEach(t),Fao=i(y),gg=n(y,"LI",{});var n$e=s(gg);Mie=n(n$e,"STRONG",{});var Fht=s(Mie);Tao=r(Fht,"levit"),Fht.forEach(t),Mao=r(n$e," \u2014 "),kB=n(n$e,"A",{href:!0});var Tht=s(kB);Eao=r(Tht,"LevitConfig"),Tht.forEach(t),Cao=r(n$e," (LeViT model)"),n$e.forEach(t),wao=i(y),hg=n(y,"LI",{});var s$e=s(hg);Eie=n(s$e,"STRONG",{});var Mht=s(Eie);Aao=r(Mht,"longformer"),Mht.forEach(t),yao=r(s$e," \u2014 "),SB=n(s$e,"A",{href:!0});var Eht=s(SB);Lao=r(Eht,"LongformerConfig"),Eht.forEach(t),xao=r(s$e," (Longformer model)"),s$e.forEach(t),$ao=i(y),pg=n(y,"LI",{});var l$e=s(pg);Cie=n(l$e,"STRONG",{});var Cht=s(Cie);kao=r(Cht,"longt5"),Cht.forEach(t),Sao=r(l$e," \u2014 "),RB=n(l$e,"A",{href:!0});var wht=s(RB);Rao=r(wht,"LongT5Config"),wht.forEach(t),Pao=r(l$e," (LongT5 model)"),l$e.forEach(t),Bao=i(y),ug=n(y,"LI",{});var i$e=s(ug);wie=n(i$e,"STRONG",{});var Aht=s(wie);Iao=r(Aht,"luke"),Aht.forEach(t),Nao=r(i$e," \u2014 "),PB=n(i$e,"A",{href:!0});var yht=s(PB);qao=r(yht,"LukeConfig"),yht.forEach(t),jao=r(i$e," (LUKE model)"),i$e.forEach(t),Dao=i(y),_g=n(y,"LI",{});var d$e=s(_g);Aie=n(d$e,"STRONG",{});var Lht=s(Aie);Gao=r(Lht,"lxmert"),Lht.forEach(t),Oao=r(d$e," \u2014 "),BB=n(d$e,"A",{href:!0});var xht=s(BB);Vao=r(xht,"LxmertConfig"),xht.forEach(t),Xao=r(d$e," (LXMERT model)"),d$e.forEach(t),zao=i(y),bg=n(y,"LI",{});var c$e=s(bg);yie=n(c$e,"STRONG",{});var $ht=s(yie);Qao=r($ht,"m2m_100"),$ht.forEach(t),Wao=r(c$e," \u2014 "),IB=n(c$e,"A",{href:!0});var kht=s(IB);Uao=r(kht,"M2M100Config"),kht.forEach(t),Hao=r(c$e," (M2M100 model)"),c$e.forEach(t),Jao=i(y),vg=n(y,"LI",{});var f$e=s(vg);Lie=n(f$e,"STRONG",{});var Sht=s(Lie);Yao=r(Sht,"marian"),Sht.forEach(t),Kao=r(f$e," \u2014 "),NB=n(f$e,"A",{href:!0});var Rht=s(NB);Zao=r(Rht,"MarianConfig"),Rht.forEach(t),eno=r(f$e," (Marian model)"),f$e.forEach(t),ono=i(y),Fg=n(y,"LI",{});var m$e=s(Fg);xie=n(m$e,"STRONG",{});var Pht=s(xie);rno=r(Pht,"maskformer"),Pht.forEach(t),tno=r(m$e," \u2014 "),qB=n(m$e,"A",{href:!0});var Bht=s(qB);ano=r(Bht,"MaskFormerConfig"),Bht.forEach(t),nno=r(m$e," (MaskFormer model)"),m$e.forEach(t),sno=i(y),Tg=n(y,"LI",{});var g$e=s(Tg);$ie=n(g$e,"STRONG",{});var Iht=s($ie);lno=r(Iht,"mbart"),Iht.forEach(t),ino=r(g$e," \u2014 "),jB=n(g$e,"A",{href:!0});var Nht=s(jB);dno=r(Nht,"MBartConfig"),Nht.forEach(t),cno=r(g$e," (mBART model)"),g$e.forEach(t),fno=i(y),Mg=n(y,"LI",{});var h$e=s(Mg);kie=n(h$e,"STRONG",{});var qht=s(kie);mno=r(qht,"mctct"),qht.forEach(t),gno=r(h$e," \u2014 "),DB=n(h$e,"A",{href:!0});var jht=s(DB);hno=r(jht,"MCTCTConfig"),jht.forEach(t),pno=r(h$e," (M-CTC-T model)"),h$e.forEach(t),uno=i(y),Eg=n(y,"LI",{});var p$e=s(Eg);Sie=n(p$e,"STRONG",{});var Dht=s(Sie);_no=r(Dht,"megatron-bert"),Dht.forEach(t),bno=r(p$e," \u2014 "),GB=n(p$e,"A",{href:!0});var Ght=s(GB);vno=r(Ght,"MegatronBertConfig"),Ght.forEach(t),Fno=r(p$e," (Megatron-BERT model)"),p$e.forEach(t),Tno=i(y),Cg=n(y,"LI",{});var u$e=s(Cg);Rie=n(u$e,"STRONG",{});var Oht=s(Rie);Mno=r(Oht,"mobilebert"),Oht.forEach(t),Eno=r(u$e," \u2014 "),OB=n(u$e,"A",{href:!0});var Vht=s(OB);Cno=r(Vht,"MobileBertConfig"),Vht.forEach(t),wno=r(u$e," (MobileBERT model)"),u$e.forEach(t),Ano=i(y),wg=n(y,"LI",{});var _$e=s(wg);Pie=n(_$e,"STRONG",{});var Xht=s(Pie);yno=r(Xht,"mobilevit"),Xht.forEach(t),Lno=r(_$e," \u2014 "),VB=n(_$e,"A",{href:!0});var zht=s(VB);xno=r(zht,"MobileViTConfig"),zht.forEach(t),$no=r(_$e," (MobileViT model)"),_$e.forEach(t),kno=i(y),Ag=n(y,"LI",{});var b$e=s(Ag);Bie=n(b$e,"STRONG",{});var Qht=s(Bie);Sno=r(Qht,"mpnet"),Qht.forEach(t),Rno=r(b$e," \u2014 "),XB=n(b$e,"A",{href:!0});var Wht=s(XB);Pno=r(Wht,"MPNetConfig"),Wht.forEach(t),Bno=r(b$e," (MPNet model)"),b$e.forEach(t),Ino=i(y),yg=n(y,"LI",{});var v$e=s(yg);Iie=n(v$e,"STRONG",{});var Uht=s(Iie);Nno=r(Uht,"mt5"),Uht.forEach(t),qno=r(v$e," \u2014 "),zB=n(v$e,"A",{href:!0});var Hht=s(zB);jno=r(Hht,"MT5Config"),Hht.forEach(t),Dno=r(v$e," (MT5 model)"),v$e.forEach(t),Gno=i(y),Lg=n(y,"LI",{});var F$e=s(Lg);Nie=n(F$e,"STRONG",{});var Jht=s(Nie);Ono=r(Jht,"mvp"),Jht.forEach(t),Vno=r(F$e," \u2014 "),QB=n(F$e,"A",{href:!0});var Yht=s(QB);Xno=r(Yht,"MvpConfig"),Yht.forEach(t),zno=r(F$e," (MVP model)"),F$e.forEach(t),Qno=i(y),xg=n(y,"LI",{});var T$e=s(xg);qie=n(T$e,"STRONG",{});var Kht=s(qie);Wno=r(Kht,"nezha"),Kht.forEach(t),Uno=r(T$e," \u2014 "),WB=n(T$e,"A",{href:!0});var Zht=s(WB);Hno=r(Zht,"NezhaConfig"),Zht.forEach(t),Jno=r(T$e," (Nezha model)"),T$e.forEach(t),Yno=i(y),$g=n(y,"LI",{});var M$e=s($g);jie=n(M$e,"STRONG",{});var ept=s(jie);Kno=r(ept,"nystromformer"),ept.forEach(t),Zno=r(M$e," \u2014 "),UB=n(M$e,"A",{href:!0});var opt=s(UB);eso=r(opt,"NystromformerConfig"),opt.forEach(t),oso=r(M$e," (Nystr\xF6mformer model)"),M$e.forEach(t),rso=i(y),kg=n(y,"LI",{});var E$e=s(kg);Die=n(E$e,"STRONG",{});var rpt=s(Die);tso=r(rpt,"openai-gpt"),rpt.forEach(t),aso=r(E$e," \u2014 "),HB=n(E$e,"A",{href:!0});var tpt=s(HB);nso=r(tpt,"OpenAIGPTConfig"),tpt.forEach(t),sso=r(E$e," (OpenAI GPT model)"),E$e.forEach(t),lso=i(y),Sg=n(y,"LI",{});var C$e=s(Sg);Gie=n(C$e,"STRONG",{});var apt=s(Gie);iso=r(apt,"opt"),apt.forEach(t),dso=r(C$e," \u2014 "),JB=n(C$e,"A",{href:!0});var npt=s(JB);cso=r(npt,"OPTConfig"),npt.forEach(t),fso=r(C$e," (OPT model)"),C$e.forEach(t),mso=i(y),Rg=n(y,"LI",{});var w$e=s(Rg);Oie=n(w$e,"STRONG",{});var spt=s(Oie);gso=r(spt,"owlvit"),spt.forEach(t),hso=r(w$e," \u2014 "),YB=n(w$e,"A",{href:!0});var lpt=s(YB);pso=r(lpt,"OwlViTConfig"),lpt.forEach(t),uso=r(w$e," (OWL-ViT model)"),w$e.forEach(t),_so=i(y),Pg=n(y,"LI",{});var A$e=s(Pg);Vie=n(A$e,"STRONG",{});var ipt=s(Vie);bso=r(ipt,"pegasus"),ipt.forEach(t),vso=r(A$e," \u2014 "),KB=n(A$e,"A",{href:!0});var dpt=s(KB);Fso=r(dpt,"PegasusConfig"),dpt.forEach(t),Tso=r(A$e," (Pegasus model)"),A$e.forEach(t),Mso=i(y),Bg=n(y,"LI",{});var y$e=s(Bg);Xie=n(y$e,"STRONG",{});var cpt=s(Xie);Eso=r(cpt,"perceiver"),cpt.forEach(t),Cso=r(y$e," \u2014 "),ZB=n(y$e,"A",{href:!0});var fpt=s(ZB);wso=r(fpt,"PerceiverConfig"),fpt.forEach(t),Aso=r(y$e," (Perceiver model)"),y$e.forEach(t),yso=i(y),Ig=n(y,"LI",{});var L$e=s(Ig);zie=n(L$e,"STRONG",{});var mpt=s(zie);Lso=r(mpt,"plbart"),mpt.forEach(t),xso=r(L$e," \u2014 "),eI=n(L$e,"A",{href:!0});var gpt=s(eI);$so=r(gpt,"PLBartConfig"),gpt.forEach(t),kso=r(L$e," (PLBart model)"),L$e.forEach(t),Sso=i(y),Ng=n(y,"LI",{});var x$e=s(Ng);Qie=n(x$e,"STRONG",{});var hpt=s(Qie);Rso=r(hpt,"poolformer"),hpt.forEach(t),Pso=r(x$e," \u2014 "),oI=n(x$e,"A",{href:!0});var ppt=s(oI);Bso=r(ppt,"PoolFormerConfig"),ppt.forEach(t),Iso=r(x$e," (PoolFormer model)"),x$e.forEach(t),Nso=i(y),qg=n(y,"LI",{});var $$e=s(qg);Wie=n($$e,"STRONG",{});var upt=s(Wie);qso=r(upt,"prophetnet"),upt.forEach(t),jso=r($$e," \u2014 "),rI=n($$e,"A",{href:!0});var _pt=s(rI);Dso=r(_pt,"ProphetNetConfig"),_pt.forEach(t),Gso=r($$e," (ProphetNet model)"),$$e.forEach(t),Oso=i(y),jg=n(y,"LI",{});var k$e=s(jg);Uie=n(k$e,"STRONG",{});var bpt=s(Uie);Vso=r(bpt,"qdqbert"),bpt.forEach(t),Xso=r(k$e," \u2014 "),tI=n(k$e,"A",{href:!0});var vpt=s(tI);zso=r(vpt,"QDQBertConfig"),vpt.forEach(t),Qso=r(k$e," (QDQBert model)"),k$e.forEach(t),Wso=i(y),Dg=n(y,"LI",{});var S$e=s(Dg);Hie=n(S$e,"STRONG",{});var Fpt=s(Hie);Uso=r(Fpt,"rag"),Fpt.forEach(t),Hso=r(S$e," \u2014 "),aI=n(S$e,"A",{href:!0});var Tpt=s(aI);Jso=r(Tpt,"RagConfig"),Tpt.forEach(t),Yso=r(S$e," (RAG model)"),S$e.forEach(t),Kso=i(y),Gg=n(y,"LI",{});var R$e=s(Gg);Jie=n(R$e,"STRONG",{});var Mpt=s(Jie);Zso=r(Mpt,"realm"),Mpt.forEach(t),elo=r(R$e," \u2014 "),nI=n(R$e,"A",{href:!0});var Ept=s(nI);olo=r(Ept,"RealmConfig"),Ept.forEach(t),rlo=r(R$e," (REALM model)"),R$e.forEach(t),tlo=i(y),Og=n(y,"LI",{});var P$e=s(Og);Yie=n(P$e,"STRONG",{});var Cpt=s(Yie);alo=r(Cpt,"reformer"),Cpt.forEach(t),nlo=r(P$e," \u2014 "),sI=n(P$e,"A",{href:!0});var wpt=s(sI);slo=r(wpt,"ReformerConfig"),wpt.forEach(t),llo=r(P$e," (Reformer model)"),P$e.forEach(t),ilo=i(y),Vg=n(y,"LI",{});var B$e=s(Vg);Kie=n(B$e,"STRONG",{});var Apt=s(Kie);dlo=r(Apt,"regnet"),Apt.forEach(t),clo=r(B$e," \u2014 "),lI=n(B$e,"A",{href:!0});var ypt=s(lI);flo=r(ypt,"RegNetConfig"),ypt.forEach(t),mlo=r(B$e," (RegNet model)"),B$e.forEach(t),glo=i(y),Xg=n(y,"LI",{});var I$e=s(Xg);Zie=n(I$e,"STRONG",{});var Lpt=s(Zie);hlo=r(Lpt,"rembert"),Lpt.forEach(t),plo=r(I$e," \u2014 "),iI=n(I$e,"A",{href:!0});var xpt=s(iI);ulo=r(xpt,"RemBertConfig"),xpt.forEach(t),_lo=r(I$e," (RemBERT model)"),I$e.forEach(t),blo=i(y),zg=n(y,"LI",{});var N$e=s(zg);ede=n(N$e,"STRONG",{});var $pt=s(ede);vlo=r($pt,"resnet"),$pt.forEach(t),Flo=r(N$e," \u2014 "),dI=n(N$e,"A",{href:!0});var kpt=s(dI);Tlo=r(kpt,"ResNetConfig"),kpt.forEach(t),Mlo=r(N$e," (ResNet model)"),N$e.forEach(t),Elo=i(y),Qg=n(y,"LI",{});var q$e=s(Qg);ode=n(q$e,"STRONG",{});var Spt=s(ode);Clo=r(Spt,"retribert"),Spt.forEach(t),wlo=r(q$e," \u2014 "),cI=n(q$e,"A",{href:!0});var Rpt=s(cI);Alo=r(Rpt,"RetriBertConfig"),Rpt.forEach(t),ylo=r(q$e," (RetriBERT model)"),q$e.forEach(t),Llo=i(y),Wg=n(y,"LI",{});var j$e=s(Wg);rde=n(j$e,"STRONG",{});var Ppt=s(rde);xlo=r(Ppt,"roberta"),Ppt.forEach(t),$lo=r(j$e," \u2014 "),fI=n(j$e,"A",{href:!0});var Bpt=s(fI);klo=r(Bpt,"RobertaConfig"),Bpt.forEach(t),Slo=r(j$e," (RoBERTa model)"),j$e.forEach(t),Rlo=i(y),Ug=n(y,"LI",{});var D$e=s(Ug);tde=n(D$e,"STRONG",{});var Ipt=s(tde);Plo=r(Ipt,"roformer"),Ipt.forEach(t),Blo=r(D$e," \u2014 "),mI=n(D$e,"A",{href:!0});var Npt=s(mI);Ilo=r(Npt,"RoFormerConfig"),Npt.forEach(t),Nlo=r(D$e," (RoFormer model)"),D$e.forEach(t),qlo=i(y),Hg=n(y,"LI",{});var G$e=s(Hg);ade=n(G$e,"STRONG",{});var qpt=s(ade);jlo=r(qpt,"segformer"),qpt.forEach(t),Dlo=r(G$e," \u2014 "),gI=n(G$e,"A",{href:!0});var jpt=s(gI);Glo=r(jpt,"SegformerConfig"),jpt.forEach(t),Olo=r(G$e," (SegFormer model)"),G$e.forEach(t),Vlo=i(y),Jg=n(y,"LI",{});var O$e=s(Jg);nde=n(O$e,"STRONG",{});var Dpt=s(nde);Xlo=r(Dpt,"sew"),Dpt.forEach(t),zlo=r(O$e," \u2014 "),hI=n(O$e,"A",{href:!0});var Gpt=s(hI);Qlo=r(Gpt,"SEWConfig"),Gpt.forEach(t),Wlo=r(O$e," (SEW model)"),O$e.forEach(t),Ulo=i(y),Yg=n(y,"LI",{});var V$e=s(Yg);sde=n(V$e,"STRONG",{});var Opt=s(sde);Hlo=r(Opt,"sew-d"),Opt.forEach(t),Jlo=r(V$e," \u2014 "),pI=n(V$e,"A",{href:!0});var Vpt=s(pI);Ylo=r(Vpt,"SEWDConfig"),Vpt.forEach(t),Klo=r(V$e," (SEW-D model)"),V$e.forEach(t),Zlo=i(y),Kg=n(y,"LI",{});var X$e=s(Kg);lde=n(X$e,"STRONG",{});var Xpt=s(lde);eio=r(Xpt,"speech-encoder-decoder"),Xpt.forEach(t),oio=r(X$e," \u2014 "),uI=n(X$e,"A",{href:!0});var zpt=s(uI);rio=r(zpt,"SpeechEncoderDecoderConfig"),zpt.forEach(t),tio=r(X$e," (Speech Encoder decoder model)"),X$e.forEach(t),aio=i(y),Zg=n(y,"LI",{});var z$e=s(Zg);ide=n(z$e,"STRONG",{});var Qpt=s(ide);nio=r(Qpt,"speech_to_text"),Qpt.forEach(t),sio=r(z$e," \u2014 "),_I=n(z$e,"A",{href:!0});var Wpt=s(_I);lio=r(Wpt,"Speech2TextConfig"),Wpt.forEach(t),iio=r(z$e," (Speech2Text model)"),z$e.forEach(t),dio=i(y),eh=n(y,"LI",{});var Q$e=s(eh);dde=n(Q$e,"STRONG",{});var Upt=s(dde);cio=r(Upt,"speech_to_text_2"),Upt.forEach(t),fio=r(Q$e," \u2014 "),bI=n(Q$e,"A",{href:!0});var Hpt=s(bI);mio=r(Hpt,"Speech2Text2Config"),Hpt.forEach(t),gio=r(Q$e," (Speech2Text2 model)"),Q$e.forEach(t),hio=i(y),oh=n(y,"LI",{});var W$e=s(oh);cde=n(W$e,"STRONG",{});var Jpt=s(cde);pio=r(Jpt,"splinter"),Jpt.forEach(t),uio=r(W$e," \u2014 "),vI=n(W$e,"A",{href:!0});var Ypt=s(vI);_io=r(Ypt,"SplinterConfig"),Ypt.forEach(t),bio=r(W$e," (Splinter model)"),W$e.forEach(t),vio=i(y),rh=n(y,"LI",{});var U$e=s(rh);fde=n(U$e,"STRONG",{});var Kpt=s(fde);Fio=r(Kpt,"squeezebert"),Kpt.forEach(t),Tio=r(U$e," \u2014 "),FI=n(U$e,"A",{href:!0});var Zpt=s(FI);Mio=r(Zpt,"SqueezeBertConfig"),Zpt.forEach(t),Eio=r(U$e," (SqueezeBERT model)"),U$e.forEach(t),Cio=i(y),th=n(y,"LI",{});var H$e=s(th);mde=n(H$e,"STRONG",{});var eut=s(mde);wio=r(eut,"swin"),eut.forEach(t),Aio=r(H$e," \u2014 "),TI=n(H$e,"A",{href:!0});var out=s(TI);yio=r(out,"SwinConfig"),out.forEach(t),Lio=r(H$e," (Swin Transformer model)"),H$e.forEach(t),xio=i(y),ah=n(y,"LI",{});var J$e=s(ah);gde=n(J$e,"STRONG",{});var rut=s(gde);$io=r(rut,"swinv2"),rut.forEach(t),kio=r(J$e," \u2014 "),MI=n(J$e,"A",{href:!0});var tut=s(MI);Sio=r(tut,"Swinv2Config"),tut.forEach(t),Rio=r(J$e," (Swin Transformer V2 model)"),J$e.forEach(t),Pio=i(y),nh=n(y,"LI",{});var Y$e=s(nh);hde=n(Y$e,"STRONG",{});var aut=s(hde);Bio=r(aut,"t5"),aut.forEach(t),Iio=r(Y$e," \u2014 "),EI=n(Y$e,"A",{href:!0});var nut=s(EI);Nio=r(nut,"T5Config"),nut.forEach(t),qio=r(Y$e," (T5 model)"),Y$e.forEach(t),jio=i(y),sh=n(y,"LI",{});var K$e=s(sh);pde=n(K$e,"STRONG",{});var sut=s(pde);Dio=r(sut,"tapas"),sut.forEach(t),Gio=r(K$e," \u2014 "),CI=n(K$e,"A",{href:!0});var lut=s(CI);Oio=r(lut,"TapasConfig"),lut.forEach(t),Vio=r(K$e," (TAPAS model)"),K$e.forEach(t),Xio=i(y),lh=n(y,"LI",{});var Z$e=s(lh);ude=n(Z$e,"STRONG",{});var iut=s(ude);zio=r(iut,"trajectory_transformer"),iut.forEach(t),Qio=r(Z$e," \u2014 "),wI=n(Z$e,"A",{href:!0});var dut=s(wI);Wio=r(dut,"TrajectoryTransformerConfig"),dut.forEach(t),Uio=r(Z$e," (Trajectory Transformer model)"),Z$e.forEach(t),Hio=i(y),ih=n(y,"LI",{});var eke=s(ih);_de=n(eke,"STRONG",{});var cut=s(_de);Jio=r(cut,"transfo-xl"),cut.forEach(t),Yio=r(eke," \u2014 "),AI=n(eke,"A",{href:!0});var fut=s(AI);Kio=r(fut,"TransfoXLConfig"),fut.forEach(t),Zio=r(eke," (Transformer-XL model)"),eke.forEach(t),edo=i(y),dh=n(y,"LI",{});var oke=s(dh);bde=n(oke,"STRONG",{});var mut=s(bde);odo=r(mut,"trocr"),mut.forEach(t),rdo=r(oke," \u2014 "),yI=n(oke,"A",{href:!0});var gut=s(yI);tdo=r(gut,"TrOCRConfig"),gut.forEach(t),ado=r(oke," (TrOCR model)"),oke.forEach(t),ndo=i(y),ch=n(y,"LI",{});var rke=s(ch);vde=n(rke,"STRONG",{});var hut=s(vde);sdo=r(hut,"unispeech"),hut.forEach(t),ldo=r(rke," \u2014 "),LI=n(rke,"A",{href:!0});var put=s(LI);ido=r(put,"UniSpeechConfig"),put.forEach(t),ddo=r(rke," (UniSpeech model)"),rke.forEach(t),cdo=i(y),fh=n(y,"LI",{});var tke=s(fh);Fde=n(tke,"STRONG",{});var uut=s(Fde);fdo=r(uut,"unispeech-sat"),uut.forEach(t),mdo=r(tke," \u2014 "),xI=n(tke,"A",{href:!0});var _ut=s(xI);gdo=r(_ut,"UniSpeechSatConfig"),_ut.forEach(t),hdo=r(tke," (UniSpeechSat model)"),tke.forEach(t),pdo=i(y),mh=n(y,"LI",{});var ake=s(mh);Tde=n(ake,"STRONG",{});var but=s(Tde);udo=r(but,"van"),but.forEach(t),_do=r(ake," \u2014 "),$I=n(ake,"A",{href:!0});var vut=s($I);bdo=r(vut,"VanConfig"),vut.forEach(t),vdo=r(ake," (VAN model)"),ake.forEach(t),Fdo=i(y),gh=n(y,"LI",{});var nke=s(gh);Mde=n(nke,"STRONG",{});var Fut=s(Mde);Tdo=r(Fut,"videomae"),Fut.forEach(t),Mdo=r(nke," \u2014 "),kI=n(nke,"A",{href:!0});var Tut=s(kI);Edo=r(Tut,"VideoMAEConfig"),Tut.forEach(t),Cdo=r(nke," (VideoMAE model)"),nke.forEach(t),wdo=i(y),hh=n(y,"LI",{});var ske=s(hh);Ede=n(ske,"STRONG",{});var Mut=s(Ede);Ado=r(Mut,"vilt"),Mut.forEach(t),ydo=r(ske," \u2014 "),SI=n(ske,"A",{href:!0});var Eut=s(SI);Ldo=r(Eut,"ViltConfig"),Eut.forEach(t),xdo=r(ske," (ViLT model)"),ske.forEach(t),$do=i(y),ph=n(y,"LI",{});var lke=s(ph);Cde=n(lke,"STRONG",{});var Cut=s(Cde);kdo=r(Cut,"vision-encoder-decoder"),Cut.forEach(t),Sdo=r(lke," \u2014 "),RI=n(lke,"A",{href:!0});var wut=s(RI);Rdo=r(wut,"VisionEncoderDecoderConfig"),wut.forEach(t),Pdo=r(lke," (Vision Encoder decoder model)"),lke.forEach(t),Bdo=i(y),uh=n(y,"LI",{});var ike=s(uh);wde=n(ike,"STRONG",{});var Aut=s(wde);Ido=r(Aut,"vision-text-dual-encoder"),Aut.forEach(t),Ndo=r(ike," \u2014 "),PI=n(ike,"A",{href:!0});var yut=s(PI);qdo=r(yut,"VisionTextDualEncoderConfig"),yut.forEach(t),jdo=r(ike," (VisionTextDualEncoder model)"),ike.forEach(t),Ddo=i(y),_h=n(y,"LI",{});var dke=s(_h);Ade=n(dke,"STRONG",{});var Lut=s(Ade);Gdo=r(Lut,"visual_bert"),Lut.forEach(t),Odo=r(dke," \u2014 "),BI=n(dke,"A",{href:!0});var xut=s(BI);Vdo=r(xut,"VisualBertConfig"),xut.forEach(t),Xdo=r(dke," (VisualBERT model)"),dke.forEach(t),zdo=i(y),bh=n(y,"LI",{});var cke=s(bh);yde=n(cke,"STRONG",{});var $ut=s(yde);Qdo=r($ut,"vit"),$ut.forEach(t),Wdo=r(cke," \u2014 "),II=n(cke,"A",{href:!0});var kut=s(II);Udo=r(kut,"ViTConfig"),kut.forEach(t),Hdo=r(cke," (ViT model)"),cke.forEach(t),Jdo=i(y),vh=n(y,"LI",{});var fke=s(vh);Lde=n(fke,"STRONG",{});var Sut=s(Lde);Ydo=r(Sut,"vit_mae"),Sut.forEach(t),Kdo=r(fke," \u2014 "),NI=n(fke,"A",{href:!0});var Rut=s(NI);Zdo=r(Rut,"ViTMAEConfig"),Rut.forEach(t),eco=r(fke," (ViTMAE model)"),fke.forEach(t),oco=i(y),Fh=n(y,"LI",{});var mke=s(Fh);xde=n(mke,"STRONG",{});var Put=s(xde);rco=r(Put,"wav2vec2"),Put.forEach(t),tco=r(mke," \u2014 "),qI=n(mke,"A",{href:!0});var But=s(qI);aco=r(But,"Wav2Vec2Config"),But.forEach(t),nco=r(mke," (Wav2Vec2 model)"),mke.forEach(t),sco=i(y),Th=n(y,"LI",{});var gke=s(Th);$de=n(gke,"STRONG",{});var Iut=s($de);lco=r(Iut,"wav2vec2-conformer"),Iut.forEach(t),ico=r(gke," \u2014 "),jI=n(gke,"A",{href:!0});var Nut=s(jI);dco=r(Nut,"Wav2Vec2ConformerConfig"),Nut.forEach(t),cco=r(gke," (Wav2Vec2-Conformer model)"),gke.forEach(t),fco=i(y),Mh=n(y,"LI",{});var hke=s(Mh);kde=n(hke,"STRONG",{});var qut=s(kde);mco=r(qut,"wavlm"),qut.forEach(t),gco=r(hke," \u2014 "),DI=n(hke,"A",{href:!0});var jut=s(DI);hco=r(jut,"WavLMConfig"),jut.forEach(t),pco=r(hke," (WavLM model)"),hke.forEach(t),uco=i(y),Eh=n(y,"LI",{});var pke=s(Eh);Sde=n(pke,"STRONG",{});var Dut=s(Sde);_co=r(Dut,"xglm"),Dut.forEach(t),bco=r(pke," \u2014 "),GI=n(pke,"A",{href:!0});var Gut=s(GI);vco=r(Gut,"XGLMConfig"),Gut.forEach(t),Fco=r(pke," (XGLM model)"),pke.forEach(t),Tco=i(y),Ch=n(y,"LI",{});var uke=s(Ch);Rde=n(uke,"STRONG",{});var Out=s(Rde);Mco=r(Out,"xlm"),Out.forEach(t),Eco=r(uke," \u2014 "),OI=n(uke,"A",{href:!0});var Vut=s(OI);Cco=r(Vut,"XLMConfig"),Vut.forEach(t),wco=r(uke," (XLM model)"),uke.forEach(t),Aco=i(y),wh=n(y,"LI",{});var _ke=s(wh);Pde=n(_ke,"STRONG",{});var Xut=s(Pde);yco=r(Xut,"xlm-prophetnet"),Xut.forEach(t),Lco=r(_ke," \u2014 "),VI=n(_ke,"A",{href:!0});var zut=s(VI);xco=r(zut,"XLMProphetNetConfig"),zut.forEach(t),$co=r(_ke," (XLM-ProphetNet model)"),_ke.forEach(t),kco=i(y),Ah=n(y,"LI",{});var bke=s(Ah);Bde=n(bke,"STRONG",{});var Qut=s(Bde);Sco=r(Qut,"xlm-roberta"),Qut.forEach(t),Rco=r(bke," \u2014 "),XI=n(bke,"A",{href:!0});var Wut=s(XI);Pco=r(Wut,"XLMRobertaConfig"),Wut.forEach(t),Bco=r(bke," (XLM-RoBERTa model)"),bke.forEach(t),Ico=i(y),yh=n(y,"LI",{});var vke=s(yh);Ide=n(vke,"STRONG",{});var Uut=s(Ide);Nco=r(Uut,"xlm-roberta-xl"),Uut.forEach(t),qco=r(vke," \u2014 "),zI=n(vke,"A",{href:!0});var Hut=s(zI);jco=r(Hut,"XLMRobertaXLConfig"),Hut.forEach(t),Dco=r(vke," (XLM-RoBERTa-XL model)"),vke.forEach(t),Gco=i(y),Lh=n(y,"LI",{});var Fke=s(Lh);Nde=n(Fke,"STRONG",{});var Jut=s(Nde);Oco=r(Jut,"xlnet"),Jut.forEach(t),Vco=r(Fke," \u2014 "),QI=n(Fke,"A",{href:!0});var Yut=s(QI);Xco=r(Yut,"XLNetConfig"),Yut.forEach(t),zco=r(Fke," (XLNet model)"),Fke.forEach(t),Qco=i(y),xh=n(y,"LI",{});var Tke=s(xh);qde=n(Tke,"STRONG",{});var Kut=s(qde);Wco=r(Kut,"yolos"),Kut.forEach(t),Uco=r(Tke," \u2014 "),WI=n(Tke,"A",{href:!0});var Zut=s(WI);Hco=r(Zut,"YolosConfig"),Zut.forEach(t),Jco=r(Tke," (YOLOS model)"),Tke.forEach(t),Yco=i(y),$h=n(y,"LI",{});var Mke=s($h);jde=n(Mke,"STRONG",{});var e_t=s(jde);Kco=r(e_t,"yoso"),e_t.forEach(t),Zco=r(Mke," \u2014 "),UI=n(Mke,"A",{href:!0});var o_t=s(UI);efo=r(o_t,"YosoConfig"),o_t.forEach(t),ofo=r(Mke," (YOSO model)"),Mke.forEach(t),y.forEach(t),rfo=i(mt),T(kh.$$.fragment,mt),mt.forEach(t),tfo=i(ft),Sh=n(ft,"DIV",{class:!0});var JJe=s(Sh);T(DL.$$.fragment,JJe),afo=i(JJe),Dde=n(JJe,"P",{});var r_t=s(Dde);nfo=r(r_t,"Register a new configuration for this class."),r_t.forEach(t),JJe.forEach(t),ft.forEach(t),zUe=i(f),ad=n(f,"H2",{class:!0});var YJe=s(ad);Rh=n(YJe,"A",{id:!0,class:!0,href:!0});var t_t=s(Rh);Gde=n(t_t,"SPAN",{});var a_t=s(Gde);T(GL.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),sfo=i(YJe),Ode=n(YJe,"SPAN",{});var n_t=s(Ode);lfo=r(n_t,"AutoTokenizer"),n_t.forEach(t),YJe.forEach(t),QUe=i(f),$o=n(f,"DIV",{class:!0});var pl=s($o);T(OL.$$.fragment,pl),ifo=i(pl),VL=n(pl,"P",{});var KJe=s(VL);dfo=r(KJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HI=n(KJe,"A",{href:!0});var s_t=s(HI);cfo=r(s_t,"AutoTokenizer.from_pretrained()"),s_t.forEach(t),ffo=r(KJe," class method."),KJe.forEach(t),mfo=i(pl),XL=n(pl,"P",{});var ZJe=s(XL);gfo=r(ZJe,"This class cannot be instantiated directly using "),Vde=n(ZJe,"CODE",{});var l_t=s(Vde);hfo=r(l_t,"__init__()"),l_t.forEach(t),pfo=r(ZJe," (throws an error)."),ZJe.forEach(t),ufo=i(pl),Pr=n(pl,"DIV",{class:!0});var ul=s(Pr);T(zL.$$.fragment,ul),_fo=i(ul),Xde=n(ul,"P",{});var i_t=s(Xde);bfo=r(i_t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),i_t.forEach(t),vfo=i(ul),za=n(ul,"P",{});var L6=s(za);Ffo=r(L6,"The tokenizer class to instantiate is selected based on the "),zde=n(L6,"CODE",{});var d_t=s(zde);Tfo=r(d_t,"model_type"),d_t.forEach(t),Mfo=r(L6,` property of the config object (either
passed as an argument or loaded from `),Qde=n(L6,"CODE",{});var c_t=s(Qde);Efo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),Cfo=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wde=n(L6,"CODE",{});var f_t=s(Wde);wfo=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),Afo=r(L6,":"),L6.forEach(t),yfo=i(ul),k=n(ul,"UL",{});var S=s(k);es=n(S,"LI",{});var gR=s(es);Ude=n(gR,"STRONG",{});var m_t=s(Ude);Lfo=r(m_t,"albert"),m_t.forEach(t),xfo=r(gR," \u2014 "),JI=n(gR,"A",{href:!0});var g_t=s(JI);$fo=r(g_t,"AlbertTokenizer"),g_t.forEach(t),kfo=r(gR," or "),YI=n(gR,"A",{href:!0});var h_t=s(YI);Sfo=r(h_t,"AlbertTokenizerFast"),h_t.forEach(t),Rfo=r(gR," (ALBERT model)"),gR.forEach(t),Pfo=i(S),os=n(S,"LI",{});var hR=s(os);Hde=n(hR,"STRONG",{});var p_t=s(Hde);Bfo=r(p_t,"bart"),p_t.forEach(t),Ifo=r(hR," \u2014 "),KI=n(hR,"A",{href:!0});var u_t=s(KI);Nfo=r(u_t,"BartTokenizer"),u_t.forEach(t),qfo=r(hR," or "),ZI=n(hR,"A",{href:!0});var __t=s(ZI);jfo=r(__t,"BartTokenizerFast"),__t.forEach(t),Dfo=r(hR," (BART model)"),hR.forEach(t),Gfo=i(S),rs=n(S,"LI",{});var pR=s(rs);Jde=n(pR,"STRONG",{});var b_t=s(Jde);Ofo=r(b_t,"barthez"),b_t.forEach(t),Vfo=r(pR," \u2014 "),eN=n(pR,"A",{href:!0});var v_t=s(eN);Xfo=r(v_t,"BarthezTokenizer"),v_t.forEach(t),zfo=r(pR," or "),oN=n(pR,"A",{href:!0});var F_t=s(oN);Qfo=r(F_t,"BarthezTokenizerFast"),F_t.forEach(t),Wfo=r(pR," (BARThez model)"),pR.forEach(t),Ufo=i(S),Ph=n(S,"LI",{});var Eke=s(Ph);Yde=n(Eke,"STRONG",{});var T_t=s(Yde);Hfo=r(T_t,"bartpho"),T_t.forEach(t),Jfo=r(Eke," \u2014 "),rN=n(Eke,"A",{href:!0});var M_t=s(rN);Yfo=r(M_t,"BartphoTokenizer"),M_t.forEach(t),Kfo=r(Eke," (BARTpho model)"),Eke.forEach(t),Zfo=i(S),ts=n(S,"LI",{});var uR=s(ts);Kde=n(uR,"STRONG",{});var E_t=s(Kde);emo=r(E_t,"bert"),E_t.forEach(t),omo=r(uR," \u2014 "),tN=n(uR,"A",{href:!0});var C_t=s(tN);rmo=r(C_t,"BertTokenizer"),C_t.forEach(t),tmo=r(uR," or "),aN=n(uR,"A",{href:!0});var w_t=s(aN);amo=r(w_t,"BertTokenizerFast"),w_t.forEach(t),nmo=r(uR," (BERT model)"),uR.forEach(t),smo=i(S),Bh=n(S,"LI",{});var Cke=s(Bh);Zde=n(Cke,"STRONG",{});var A_t=s(Zde);lmo=r(A_t,"bert-generation"),A_t.forEach(t),imo=r(Cke," \u2014 "),nN=n(Cke,"A",{href:!0});var y_t=s(nN);dmo=r(y_t,"BertGenerationTokenizer"),y_t.forEach(t),cmo=r(Cke," (Bert Generation model)"),Cke.forEach(t),fmo=i(S),Ih=n(S,"LI",{});var wke=s(Ih);ece=n(wke,"STRONG",{});var L_t=s(ece);mmo=r(L_t,"bert-japanese"),L_t.forEach(t),gmo=r(wke," \u2014 "),sN=n(wke,"A",{href:!0});var x_t=s(sN);hmo=r(x_t,"BertJapaneseTokenizer"),x_t.forEach(t),pmo=r(wke," (BertJapanese model)"),wke.forEach(t),umo=i(S),Nh=n(S,"LI",{});var Ake=s(Nh);oce=n(Ake,"STRONG",{});var $_t=s(oce);_mo=r($_t,"bertweet"),$_t.forEach(t),bmo=r(Ake," \u2014 "),lN=n(Ake,"A",{href:!0});var k_t=s(lN);vmo=r(k_t,"BertweetTokenizer"),k_t.forEach(t),Fmo=r(Ake," (BERTweet model)"),Ake.forEach(t),Tmo=i(S),as=n(S,"LI",{});var _R=s(as);rce=n(_R,"STRONG",{});var S_t=s(rce);Mmo=r(S_t,"big_bird"),S_t.forEach(t),Emo=r(_R," \u2014 "),iN=n(_R,"A",{href:!0});var R_t=s(iN);Cmo=r(R_t,"BigBirdTokenizer"),R_t.forEach(t),wmo=r(_R," or "),dN=n(_R,"A",{href:!0});var P_t=s(dN);Amo=r(P_t,"BigBirdTokenizerFast"),P_t.forEach(t),ymo=r(_R," (BigBird model)"),_R.forEach(t),Lmo=i(S),ns=n(S,"LI",{});var bR=s(ns);tce=n(bR,"STRONG",{});var B_t=s(tce);xmo=r(B_t,"bigbird_pegasus"),B_t.forEach(t),$mo=r(bR," \u2014 "),cN=n(bR,"A",{href:!0});var I_t=s(cN);kmo=r(I_t,"PegasusTokenizer"),I_t.forEach(t),Smo=r(bR," or "),fN=n(bR,"A",{href:!0});var N_t=s(fN);Rmo=r(N_t,"PegasusTokenizerFast"),N_t.forEach(t),Pmo=r(bR," (BigBird-Pegasus model)"),bR.forEach(t),Bmo=i(S),ss=n(S,"LI",{});var vR=s(ss);ace=n(vR,"STRONG",{});var q_t=s(ace);Imo=r(q_t,"blenderbot"),q_t.forEach(t),Nmo=r(vR," \u2014 "),mN=n(vR,"A",{href:!0});var j_t=s(mN);qmo=r(j_t,"BlenderbotTokenizer"),j_t.forEach(t),jmo=r(vR," or "),gN=n(vR,"A",{href:!0});var D_t=s(gN);Dmo=r(D_t,"BlenderbotTokenizerFast"),D_t.forEach(t),Gmo=r(vR," (Blenderbot model)"),vR.forEach(t),Omo=i(S),qh=n(S,"LI",{});var yke=s(qh);nce=n(yke,"STRONG",{});var G_t=s(nce);Vmo=r(G_t,"blenderbot-small"),G_t.forEach(t),Xmo=r(yke," \u2014 "),hN=n(yke,"A",{href:!0});var O_t=s(hN);zmo=r(O_t,"BlenderbotSmallTokenizer"),O_t.forEach(t),Qmo=r(yke," (BlenderbotSmall model)"),yke.forEach(t),Wmo=i(S),jh=n(S,"LI",{});var Lke=s(jh);sce=n(Lke,"STRONG",{});var V_t=s(sce);Umo=r(V_t,"bloom"),V_t.forEach(t),Hmo=r(Lke," \u2014 "),pN=n(Lke,"A",{href:!0});var X_t=s(pN);Jmo=r(X_t,"BloomTokenizerFast"),X_t.forEach(t),Ymo=r(Lke," (BLOOM model)"),Lke.forEach(t),Kmo=i(S),Dh=n(S,"LI",{});var xke=s(Dh);lce=n(xke,"STRONG",{});var z_t=s(lce);Zmo=r(z_t,"byt5"),z_t.forEach(t),ego=r(xke," \u2014 "),uN=n(xke,"A",{href:!0});var Q_t=s(uN);ogo=r(Q_t,"ByT5Tokenizer"),Q_t.forEach(t),rgo=r(xke," (ByT5 model)"),xke.forEach(t),tgo=i(S),ls=n(S,"LI",{});var FR=s(ls);ice=n(FR,"STRONG",{});var W_t=s(ice);ago=r(W_t,"camembert"),W_t.forEach(t),ngo=r(FR," \u2014 "),_N=n(FR,"A",{href:!0});var U_t=s(_N);sgo=r(U_t,"CamembertTokenizer"),U_t.forEach(t),lgo=r(FR," or "),bN=n(FR,"A",{href:!0});var H_t=s(bN);igo=r(H_t,"CamembertTokenizerFast"),H_t.forEach(t),dgo=r(FR," (CamemBERT model)"),FR.forEach(t),cgo=i(S),Gh=n(S,"LI",{});var $ke=s(Gh);dce=n($ke,"STRONG",{});var J_t=s(dce);fgo=r(J_t,"canine"),J_t.forEach(t),mgo=r($ke," \u2014 "),vN=n($ke,"A",{href:!0});var Y_t=s(vN);ggo=r(Y_t,"CanineTokenizer"),Y_t.forEach(t),hgo=r($ke," (CANINE model)"),$ke.forEach(t),pgo=i(S),is=n(S,"LI",{});var TR=s(is);cce=n(TR,"STRONG",{});var K_t=s(cce);ugo=r(K_t,"clip"),K_t.forEach(t),_go=r(TR," \u2014 "),FN=n(TR,"A",{href:!0});var Z_t=s(FN);bgo=r(Z_t,"CLIPTokenizer"),Z_t.forEach(t),vgo=r(TR," or "),TN=n(TR,"A",{href:!0});var e2t=s(TN);Fgo=r(e2t,"CLIPTokenizerFast"),e2t.forEach(t),Tgo=r(TR," (CLIP model)"),TR.forEach(t),Mgo=i(S),ds=n(S,"LI",{});var MR=s(ds);fce=n(MR,"STRONG",{});var o2t=s(fce);Ego=r(o2t,"codegen"),o2t.forEach(t),Cgo=r(MR," \u2014 "),MN=n(MR,"A",{href:!0});var r2t=s(MN);wgo=r(r2t,"CodeGenTokenizer"),r2t.forEach(t),Ago=r(MR," or "),EN=n(MR,"A",{href:!0});var t2t=s(EN);ygo=r(t2t,"CodeGenTokenizerFast"),t2t.forEach(t),Lgo=r(MR," (CodeGen model)"),MR.forEach(t),xgo=i(S),cs=n(S,"LI",{});var ER=s(cs);mce=n(ER,"STRONG",{});var a2t=s(mce);$go=r(a2t,"convbert"),a2t.forEach(t),kgo=r(ER," \u2014 "),CN=n(ER,"A",{href:!0});var n2t=s(CN);Sgo=r(n2t,"ConvBertTokenizer"),n2t.forEach(t),Rgo=r(ER," or "),wN=n(ER,"A",{href:!0});var s2t=s(wN);Pgo=r(s2t,"ConvBertTokenizerFast"),s2t.forEach(t),Bgo=r(ER," (ConvBERT model)"),ER.forEach(t),Igo=i(S),fs=n(S,"LI",{});var CR=s(fs);gce=n(CR,"STRONG",{});var l2t=s(gce);Ngo=r(l2t,"cpm"),l2t.forEach(t),qgo=r(CR," \u2014 "),AN=n(CR,"A",{href:!0});var i2t=s(AN);jgo=r(i2t,"CpmTokenizer"),i2t.forEach(t),Dgo=r(CR," or "),yN=n(CR,"A",{href:!0});var d2t=s(yN);Ggo=r(d2t,"CpmTokenizerFast"),d2t.forEach(t),Ogo=r(CR," (CPM model)"),CR.forEach(t),Vgo=i(S),Oh=n(S,"LI",{});var kke=s(Oh);hce=n(kke,"STRONG",{});var c2t=s(hce);Xgo=r(c2t,"ctrl"),c2t.forEach(t),zgo=r(kke," \u2014 "),LN=n(kke,"A",{href:!0});var f2t=s(LN);Qgo=r(f2t,"CTRLTokenizer"),f2t.forEach(t),Wgo=r(kke," (CTRL model)"),kke.forEach(t),Ugo=i(S),ms=n(S,"LI",{});var wR=s(ms);pce=n(wR,"STRONG",{});var m2t=s(pce);Hgo=r(m2t,"data2vec-text"),m2t.forEach(t),Jgo=r(wR," \u2014 "),xN=n(wR,"A",{href:!0});var g2t=s(xN);Ygo=r(g2t,"RobertaTokenizer"),g2t.forEach(t),Kgo=r(wR," or "),$N=n(wR,"A",{href:!0});var h2t=s($N);Zgo=r(h2t,"RobertaTokenizerFast"),h2t.forEach(t),eho=r(wR," (Data2VecText model)"),wR.forEach(t),oho=i(S),gs=n(S,"LI",{});var AR=s(gs);uce=n(AR,"STRONG",{});var p2t=s(uce);rho=r(p2t,"deberta"),p2t.forEach(t),tho=r(AR," \u2014 "),kN=n(AR,"A",{href:!0});var u2t=s(kN);aho=r(u2t,"DebertaTokenizer"),u2t.forEach(t),nho=r(AR," or "),SN=n(AR,"A",{href:!0});var _2t=s(SN);sho=r(_2t,"DebertaTokenizerFast"),_2t.forEach(t),lho=r(AR," (DeBERTa model)"),AR.forEach(t),iho=i(S),hs=n(S,"LI",{});var yR=s(hs);_ce=n(yR,"STRONG",{});var b2t=s(_ce);dho=r(b2t,"deberta-v2"),b2t.forEach(t),cho=r(yR," \u2014 "),RN=n(yR,"A",{href:!0});var v2t=s(RN);fho=r(v2t,"DebertaV2Tokenizer"),v2t.forEach(t),mho=r(yR," or "),PN=n(yR,"A",{href:!0});var F2t=s(PN);gho=r(F2t,"DebertaV2TokenizerFast"),F2t.forEach(t),hho=r(yR," (DeBERTa-v2 model)"),yR.forEach(t),pho=i(S),ps=n(S,"LI",{});var LR=s(ps);bce=n(LR,"STRONG",{});var T2t=s(bce);uho=r(T2t,"distilbert"),T2t.forEach(t),_ho=r(LR," \u2014 "),BN=n(LR,"A",{href:!0});var M2t=s(BN);bho=r(M2t,"DistilBertTokenizer"),M2t.forEach(t),vho=r(LR," or "),IN=n(LR,"A",{href:!0});var E2t=s(IN);Fho=r(E2t,"DistilBertTokenizerFast"),E2t.forEach(t),Tho=r(LR," (DistilBERT model)"),LR.forEach(t),Mho=i(S),us=n(S,"LI",{});var xR=s(us);vce=n(xR,"STRONG",{});var C2t=s(vce);Eho=r(C2t,"dpr"),C2t.forEach(t),Cho=r(xR," \u2014 "),NN=n(xR,"A",{href:!0});var w2t=s(NN);who=r(w2t,"DPRQuestionEncoderTokenizer"),w2t.forEach(t),Aho=r(xR," or "),qN=n(xR,"A",{href:!0});var A2t=s(qN);yho=r(A2t,"DPRQuestionEncoderTokenizerFast"),A2t.forEach(t),Lho=r(xR," (DPR model)"),xR.forEach(t),xho=i(S),_s=n(S,"LI",{});var $R=s(_s);Fce=n($R,"STRONG",{});var y2t=s(Fce);$ho=r(y2t,"electra"),y2t.forEach(t),kho=r($R," \u2014 "),jN=n($R,"A",{href:!0});var L2t=s(jN);Sho=r(L2t,"ElectraTokenizer"),L2t.forEach(t),Rho=r($R," or "),DN=n($R,"A",{href:!0});var x2t=s(DN);Pho=r(x2t,"ElectraTokenizerFast"),x2t.forEach(t),Bho=r($R," (ELECTRA model)"),$R.forEach(t),Iho=i(S),Vh=n(S,"LI",{});var Ske=s(Vh);Tce=n(Ske,"STRONG",{});var $2t=s(Tce);Nho=r($2t,"flaubert"),$2t.forEach(t),qho=r(Ske," \u2014 "),GN=n(Ske,"A",{href:!0});var k2t=s(GN);jho=r(k2t,"FlaubertTokenizer"),k2t.forEach(t),Dho=r(Ske," (FlauBERT model)"),Ske.forEach(t),Gho=i(S),bs=n(S,"LI",{});var kR=s(bs);Mce=n(kR,"STRONG",{});var S2t=s(Mce);Oho=r(S2t,"fnet"),S2t.forEach(t),Vho=r(kR," \u2014 "),ON=n(kR,"A",{href:!0});var R2t=s(ON);Xho=r(R2t,"FNetTokenizer"),R2t.forEach(t),zho=r(kR," or "),VN=n(kR,"A",{href:!0});var P2t=s(VN);Qho=r(P2t,"FNetTokenizerFast"),P2t.forEach(t),Who=r(kR," (FNet model)"),kR.forEach(t),Uho=i(S),Xh=n(S,"LI",{});var Rke=s(Xh);Ece=n(Rke,"STRONG",{});var B2t=s(Ece);Hho=r(B2t,"fsmt"),B2t.forEach(t),Jho=r(Rke," \u2014 "),XN=n(Rke,"A",{href:!0});var I2t=s(XN);Yho=r(I2t,"FSMTTokenizer"),I2t.forEach(t),Kho=r(Rke," (FairSeq Machine-Translation model)"),Rke.forEach(t),Zho=i(S),vs=n(S,"LI",{});var SR=s(vs);Cce=n(SR,"STRONG",{});var N2t=s(Cce);epo=r(N2t,"funnel"),N2t.forEach(t),opo=r(SR," \u2014 "),zN=n(SR,"A",{href:!0});var q2t=s(zN);rpo=r(q2t,"FunnelTokenizer"),q2t.forEach(t),tpo=r(SR," or "),QN=n(SR,"A",{href:!0});var j2t=s(QN);apo=r(j2t,"FunnelTokenizerFast"),j2t.forEach(t),npo=r(SR," (Funnel Transformer model)"),SR.forEach(t),spo=i(S),Fs=n(S,"LI",{});var RR=s(Fs);wce=n(RR,"STRONG",{});var D2t=s(wce);lpo=r(D2t,"gpt2"),D2t.forEach(t),ipo=r(RR," \u2014 "),WN=n(RR,"A",{href:!0});var G2t=s(WN);dpo=r(G2t,"GPT2Tokenizer"),G2t.forEach(t),cpo=r(RR," or "),UN=n(RR,"A",{href:!0});var O2t=s(UN);fpo=r(O2t,"GPT2TokenizerFast"),O2t.forEach(t),mpo=r(RR," (OpenAI GPT-2 model)"),RR.forEach(t),gpo=i(S),Ts=n(S,"LI",{});var PR=s(Ts);Ace=n(PR,"STRONG",{});var V2t=s(Ace);hpo=r(V2t,"gpt_neo"),V2t.forEach(t),ppo=r(PR," \u2014 "),HN=n(PR,"A",{href:!0});var X2t=s(HN);upo=r(X2t,"GPT2Tokenizer"),X2t.forEach(t),_po=r(PR," or "),JN=n(PR,"A",{href:!0});var z2t=s(JN);bpo=r(z2t,"GPT2TokenizerFast"),z2t.forEach(t),vpo=r(PR," (GPT Neo model)"),PR.forEach(t),Fpo=i(S),zh=n(S,"LI",{});var Pke=s(zh);yce=n(Pke,"STRONG",{});var Q2t=s(yce);Tpo=r(Q2t,"gpt_neox"),Q2t.forEach(t),Mpo=r(Pke," \u2014 "),YN=n(Pke,"A",{href:!0});var W2t=s(YN);Epo=r(W2t,"GPTNeoXTokenizerFast"),W2t.forEach(t),Cpo=r(Pke," (GPT NeoX model)"),Pke.forEach(t),wpo=i(S),Ms=n(S,"LI",{});var BR=s(Ms);Lce=n(BR,"STRONG",{});var U2t=s(Lce);Apo=r(U2t,"gptj"),U2t.forEach(t),ypo=r(BR," \u2014 "),KN=n(BR,"A",{href:!0});var H2t=s(KN);Lpo=r(H2t,"GPT2Tokenizer"),H2t.forEach(t),xpo=r(BR," or "),ZN=n(BR,"A",{href:!0});var J2t=s(ZN);$po=r(J2t,"GPT2TokenizerFast"),J2t.forEach(t),kpo=r(BR," (GPT-J model)"),BR.forEach(t),Spo=i(S),Es=n(S,"LI",{});var IR=s(Es);xce=n(IR,"STRONG",{});var Y2t=s(xce);Rpo=r(Y2t,"groupvit"),Y2t.forEach(t),Ppo=r(IR," \u2014 "),eq=n(IR,"A",{href:!0});var K2t=s(eq);Bpo=r(K2t,"CLIPTokenizer"),K2t.forEach(t),Ipo=r(IR," or "),oq=n(IR,"A",{href:!0});var Z2t=s(oq);Npo=r(Z2t,"CLIPTokenizerFast"),Z2t.forEach(t),qpo=r(IR," (GroupViT model)"),IR.forEach(t),jpo=i(S),Cs=n(S,"LI",{});var NR=s(Cs);$ce=n(NR,"STRONG",{});var e1t=s($ce);Dpo=r(e1t,"herbert"),e1t.forEach(t),Gpo=r(NR," \u2014 "),rq=n(NR,"A",{href:!0});var o1t=s(rq);Opo=r(o1t,"HerbertTokenizer"),o1t.forEach(t),Vpo=r(NR," or "),tq=n(NR,"A",{href:!0});var r1t=s(tq);Xpo=r(r1t,"HerbertTokenizerFast"),r1t.forEach(t),zpo=r(NR," (HerBERT model)"),NR.forEach(t),Qpo=i(S),Qh=n(S,"LI",{});var Bke=s(Qh);kce=n(Bke,"STRONG",{});var t1t=s(kce);Wpo=r(t1t,"hubert"),t1t.forEach(t),Upo=r(Bke," \u2014 "),aq=n(Bke,"A",{href:!0});var a1t=s(aq);Hpo=r(a1t,"Wav2Vec2CTCTokenizer"),a1t.forEach(t),Jpo=r(Bke," (Hubert model)"),Bke.forEach(t),Ypo=i(S),ws=n(S,"LI",{});var qR=s(ws);Sce=n(qR,"STRONG",{});var n1t=s(Sce);Kpo=r(n1t,"ibert"),n1t.forEach(t),Zpo=r(qR," \u2014 "),nq=n(qR,"A",{href:!0});var s1t=s(nq);euo=r(s1t,"RobertaTokenizer"),s1t.forEach(t),ouo=r(qR," or "),sq=n(qR,"A",{href:!0});var l1t=s(sq);ruo=r(l1t,"RobertaTokenizerFast"),l1t.forEach(t),tuo=r(qR," (I-BERT model)"),qR.forEach(t),auo=i(S),As=n(S,"LI",{});var jR=s(As);Rce=n(jR,"STRONG",{});var i1t=s(Rce);nuo=r(i1t,"layoutlm"),i1t.forEach(t),suo=r(jR," \u2014 "),lq=n(jR,"A",{href:!0});var d1t=s(lq);luo=r(d1t,"LayoutLMTokenizer"),d1t.forEach(t),iuo=r(jR," or "),iq=n(jR,"A",{href:!0});var c1t=s(iq);duo=r(c1t,"LayoutLMTokenizerFast"),c1t.forEach(t),cuo=r(jR," (LayoutLM model)"),jR.forEach(t),fuo=i(S),ys=n(S,"LI",{});var DR=s(ys);Pce=n(DR,"STRONG",{});var f1t=s(Pce);muo=r(f1t,"layoutlmv2"),f1t.forEach(t),guo=r(DR," \u2014 "),dq=n(DR,"A",{href:!0});var m1t=s(dq);huo=r(m1t,"LayoutLMv2Tokenizer"),m1t.forEach(t),puo=r(DR," or "),cq=n(DR,"A",{href:!0});var g1t=s(cq);uuo=r(g1t,"LayoutLMv2TokenizerFast"),g1t.forEach(t),_uo=r(DR," (LayoutLMv2 model)"),DR.forEach(t),buo=i(S),Ls=n(S,"LI",{});var GR=s(Ls);Bce=n(GR,"STRONG",{});var h1t=s(Bce);vuo=r(h1t,"layoutlmv3"),h1t.forEach(t),Fuo=r(GR," \u2014 "),fq=n(GR,"A",{href:!0});var p1t=s(fq);Tuo=r(p1t,"LayoutLMv3Tokenizer"),p1t.forEach(t),Muo=r(GR," or "),mq=n(GR,"A",{href:!0});var u1t=s(mq);Euo=r(u1t,"LayoutLMv3TokenizerFast"),u1t.forEach(t),Cuo=r(GR," (LayoutLMv3 model)"),GR.forEach(t),wuo=i(S),xs=n(S,"LI",{});var OR=s(xs);Ice=n(OR,"STRONG",{});var _1t=s(Ice);Auo=r(_1t,"layoutxlm"),_1t.forEach(t),yuo=r(OR," \u2014 "),gq=n(OR,"A",{href:!0});var b1t=s(gq);Luo=r(b1t,"LayoutXLMTokenizer"),b1t.forEach(t),xuo=r(OR," or "),hq=n(OR,"A",{href:!0});var v1t=s(hq);$uo=r(v1t,"LayoutXLMTokenizerFast"),v1t.forEach(t),kuo=r(OR," (LayoutXLM model)"),OR.forEach(t),Suo=i(S),$s=n(S,"LI",{});var VR=s($s);Nce=n(VR,"STRONG",{});var F1t=s(Nce);Ruo=r(F1t,"led"),F1t.forEach(t),Puo=r(VR," \u2014 "),pq=n(VR,"A",{href:!0});var T1t=s(pq);Buo=r(T1t,"LEDTokenizer"),T1t.forEach(t),Iuo=r(VR," or "),uq=n(VR,"A",{href:!0});var M1t=s(uq);Nuo=r(M1t,"LEDTokenizerFast"),M1t.forEach(t),quo=r(VR," (LED model)"),VR.forEach(t),juo=i(S),ks=n(S,"LI",{});var XR=s(ks);qce=n(XR,"STRONG",{});var E1t=s(qce);Duo=r(E1t,"longformer"),E1t.forEach(t),Guo=r(XR," \u2014 "),_q=n(XR,"A",{href:!0});var C1t=s(_q);Ouo=r(C1t,"LongformerTokenizer"),C1t.forEach(t),Vuo=r(XR," or "),bq=n(XR,"A",{href:!0});var w1t=s(bq);Xuo=r(w1t,"LongformerTokenizerFast"),w1t.forEach(t),zuo=r(XR," (Longformer model)"),XR.forEach(t),Quo=i(S),Ss=n(S,"LI",{});var zR=s(Ss);jce=n(zR,"STRONG",{});var A1t=s(jce);Wuo=r(A1t,"longt5"),A1t.forEach(t),Uuo=r(zR," \u2014 "),vq=n(zR,"A",{href:!0});var y1t=s(vq);Huo=r(y1t,"T5Tokenizer"),y1t.forEach(t),Juo=r(zR," or "),Fq=n(zR,"A",{href:!0});var L1t=s(Fq);Yuo=r(L1t,"T5TokenizerFast"),L1t.forEach(t),Kuo=r(zR," (LongT5 model)"),zR.forEach(t),Zuo=i(S),Wh=n(S,"LI",{});var Ike=s(Wh);Dce=n(Ike,"STRONG",{});var x1t=s(Dce);e_o=r(x1t,"luke"),x1t.forEach(t),o_o=r(Ike," \u2014 "),Tq=n(Ike,"A",{href:!0});var $1t=s(Tq);r_o=r($1t,"LukeTokenizer"),$1t.forEach(t),t_o=r(Ike," (LUKE model)"),Ike.forEach(t),a_o=i(S),Rs=n(S,"LI",{});var QR=s(Rs);Gce=n(QR,"STRONG",{});var k1t=s(Gce);n_o=r(k1t,"lxmert"),k1t.forEach(t),s_o=r(QR," \u2014 "),Mq=n(QR,"A",{href:!0});var S1t=s(Mq);l_o=r(S1t,"LxmertTokenizer"),S1t.forEach(t),i_o=r(QR," or "),Eq=n(QR,"A",{href:!0});var R1t=s(Eq);d_o=r(R1t,"LxmertTokenizerFast"),R1t.forEach(t),c_o=r(QR," (LXMERT model)"),QR.forEach(t),f_o=i(S),Uh=n(S,"LI",{});var Nke=s(Uh);Oce=n(Nke,"STRONG",{});var P1t=s(Oce);m_o=r(P1t,"m2m_100"),P1t.forEach(t),g_o=r(Nke," \u2014 "),Cq=n(Nke,"A",{href:!0});var B1t=s(Cq);h_o=r(B1t,"M2M100Tokenizer"),B1t.forEach(t),p_o=r(Nke," (M2M100 model)"),Nke.forEach(t),u_o=i(S),Hh=n(S,"LI",{});var qke=s(Hh);Vce=n(qke,"STRONG",{});var I1t=s(Vce);__o=r(I1t,"marian"),I1t.forEach(t),b_o=r(qke," \u2014 "),wq=n(qke,"A",{href:!0});var N1t=s(wq);v_o=r(N1t,"MarianTokenizer"),N1t.forEach(t),F_o=r(qke," (Marian model)"),qke.forEach(t),T_o=i(S),Ps=n(S,"LI",{});var WR=s(Ps);Xce=n(WR,"STRONG",{});var q1t=s(Xce);M_o=r(q1t,"mbart"),q1t.forEach(t),E_o=r(WR," \u2014 "),Aq=n(WR,"A",{href:!0});var j1t=s(Aq);C_o=r(j1t,"MBartTokenizer"),j1t.forEach(t),w_o=r(WR," or "),yq=n(WR,"A",{href:!0});var D1t=s(yq);A_o=r(D1t,"MBartTokenizerFast"),D1t.forEach(t),y_o=r(WR," (mBART model)"),WR.forEach(t),L_o=i(S),Bs=n(S,"LI",{});var UR=s(Bs);zce=n(UR,"STRONG",{});var G1t=s(zce);x_o=r(G1t,"mbart50"),G1t.forEach(t),$_o=r(UR," \u2014 "),Lq=n(UR,"A",{href:!0});var O1t=s(Lq);k_o=r(O1t,"MBart50Tokenizer"),O1t.forEach(t),S_o=r(UR," or "),xq=n(UR,"A",{href:!0});var V1t=s(xq);R_o=r(V1t,"MBart50TokenizerFast"),V1t.forEach(t),P_o=r(UR," (mBART-50 model)"),UR.forEach(t),B_o=i(S),Is=n(S,"LI",{});var HR=s(Is);Qce=n(HR,"STRONG",{});var X1t=s(Qce);I_o=r(X1t,"megatron-bert"),X1t.forEach(t),N_o=r(HR," \u2014 "),$q=n(HR,"A",{href:!0});var z1t=s($q);q_o=r(z1t,"BertTokenizer"),z1t.forEach(t),j_o=r(HR," or "),kq=n(HR,"A",{href:!0});var Q1t=s(kq);D_o=r(Q1t,"BertTokenizerFast"),Q1t.forEach(t),G_o=r(HR," (Megatron-BERT model)"),HR.forEach(t),O_o=i(S),Jh=n(S,"LI",{});var jke=s(Jh);Wce=n(jke,"STRONG",{});var W1t=s(Wce);V_o=r(W1t,"mluke"),W1t.forEach(t),X_o=r(jke," \u2014 "),Sq=n(jke,"A",{href:!0});var U1t=s(Sq);z_o=r(U1t,"MLukeTokenizer"),U1t.forEach(t),Q_o=r(jke," (mLUKE model)"),jke.forEach(t),W_o=i(S),Ns=n(S,"LI",{});var JR=s(Ns);Uce=n(JR,"STRONG",{});var H1t=s(Uce);U_o=r(H1t,"mobilebert"),H1t.forEach(t),H_o=r(JR," \u2014 "),Rq=n(JR,"A",{href:!0});var J1t=s(Rq);J_o=r(J1t,"MobileBertTokenizer"),J1t.forEach(t),Y_o=r(JR," or "),Pq=n(JR,"A",{href:!0});var Y1t=s(Pq);K_o=r(Y1t,"MobileBertTokenizerFast"),Y1t.forEach(t),Z_o=r(JR," (MobileBERT model)"),JR.forEach(t),e2o=i(S),qs=n(S,"LI",{});var YR=s(qs);Hce=n(YR,"STRONG",{});var K1t=s(Hce);o2o=r(K1t,"mpnet"),K1t.forEach(t),r2o=r(YR," \u2014 "),Bq=n(YR,"A",{href:!0});var Z1t=s(Bq);t2o=r(Z1t,"MPNetTokenizer"),Z1t.forEach(t),a2o=r(YR," or "),Iq=n(YR,"A",{href:!0});var ebt=s(Iq);n2o=r(ebt,"MPNetTokenizerFast"),ebt.forEach(t),s2o=r(YR," (MPNet model)"),YR.forEach(t),l2o=i(S),js=n(S,"LI",{});var KR=s(js);Jce=n(KR,"STRONG",{});var obt=s(Jce);i2o=r(obt,"mt5"),obt.forEach(t),d2o=r(KR," \u2014 "),Nq=n(KR,"A",{href:!0});var rbt=s(Nq);c2o=r(rbt,"MT5Tokenizer"),rbt.forEach(t),f2o=r(KR," or "),qq=n(KR,"A",{href:!0});var tbt=s(qq);m2o=r(tbt,"MT5TokenizerFast"),tbt.forEach(t),g2o=r(KR," (MT5 model)"),KR.forEach(t),h2o=i(S),Ds=n(S,"LI",{});var ZR=s(Ds);Yce=n(ZR,"STRONG",{});var abt=s(Yce);p2o=r(abt,"mvp"),abt.forEach(t),u2o=r(ZR," \u2014 "),jq=n(ZR,"A",{href:!0});var nbt=s(jq);_2o=r(nbt,"MvpTokenizer"),nbt.forEach(t),b2o=r(ZR," or "),Dq=n(ZR,"A",{href:!0});var sbt=s(Dq);v2o=r(sbt,"MvpTokenizerFast"),sbt.forEach(t),F2o=r(ZR," (MVP model)"),ZR.forEach(t),T2o=i(S),Gs=n(S,"LI",{});var eP=s(Gs);Kce=n(eP,"STRONG",{});var lbt=s(Kce);M2o=r(lbt,"nezha"),lbt.forEach(t),E2o=r(eP," \u2014 "),Gq=n(eP,"A",{href:!0});var ibt=s(Gq);C2o=r(ibt,"BertTokenizer"),ibt.forEach(t),w2o=r(eP," or "),Oq=n(eP,"A",{href:!0});var dbt=s(Oq);A2o=r(dbt,"BertTokenizerFast"),dbt.forEach(t),y2o=r(eP," (Nezha model)"),eP.forEach(t),L2o=i(S),Os=n(S,"LI",{});var oP=s(Os);Zce=n(oP,"STRONG",{});var cbt=s(Zce);x2o=r(cbt,"nllb"),cbt.forEach(t),$2o=r(oP," \u2014 "),Vq=n(oP,"A",{href:!0});var fbt=s(Vq);k2o=r(fbt,"NllbTokenizer"),fbt.forEach(t),S2o=r(oP," or "),Xq=n(oP,"A",{href:!0});var mbt=s(Xq);R2o=r(mbt,"NllbTokenizerFast"),mbt.forEach(t),P2o=r(oP," (NLLB model)"),oP.forEach(t),B2o=i(S),Vs=n(S,"LI",{});var rP=s(Vs);efe=n(rP,"STRONG",{});var gbt=s(efe);I2o=r(gbt,"nystromformer"),gbt.forEach(t),N2o=r(rP," \u2014 "),zq=n(rP,"A",{href:!0});var hbt=s(zq);q2o=r(hbt,"AlbertTokenizer"),hbt.forEach(t),j2o=r(rP," or "),Qq=n(rP,"A",{href:!0});var pbt=s(Qq);D2o=r(pbt,"AlbertTokenizerFast"),pbt.forEach(t),G2o=r(rP," (Nystr\xF6mformer model)"),rP.forEach(t),O2o=i(S),Xs=n(S,"LI",{});var tP=s(Xs);ofe=n(tP,"STRONG",{});var ubt=s(ofe);V2o=r(ubt,"openai-gpt"),ubt.forEach(t),X2o=r(tP," \u2014 "),Wq=n(tP,"A",{href:!0});var _bt=s(Wq);z2o=r(_bt,"OpenAIGPTTokenizer"),_bt.forEach(t),Q2o=r(tP," or "),Uq=n(tP,"A",{href:!0});var bbt=s(Uq);W2o=r(bbt,"OpenAIGPTTokenizerFast"),bbt.forEach(t),U2o=r(tP," (OpenAI GPT model)"),tP.forEach(t),H2o=i(S),Yh=n(S,"LI",{});var Dke=s(Yh);rfe=n(Dke,"STRONG",{});var vbt=s(rfe);J2o=r(vbt,"opt"),vbt.forEach(t),Y2o=r(Dke," \u2014 "),Hq=n(Dke,"A",{href:!0});var Fbt=s(Hq);K2o=r(Fbt,"GPT2Tokenizer"),Fbt.forEach(t),Z2o=r(Dke," (OPT model)"),Dke.forEach(t),e1o=i(S),zs=n(S,"LI",{});var aP=s(zs);tfe=n(aP,"STRONG",{});var Tbt=s(tfe);o1o=r(Tbt,"owlvit"),Tbt.forEach(t),r1o=r(aP," \u2014 "),Jq=n(aP,"A",{href:!0});var Mbt=s(Jq);t1o=r(Mbt,"CLIPTokenizer"),Mbt.forEach(t),a1o=r(aP," or "),Yq=n(aP,"A",{href:!0});var Ebt=s(Yq);n1o=r(Ebt,"CLIPTokenizerFast"),Ebt.forEach(t),s1o=r(aP," (OWL-ViT model)"),aP.forEach(t),l1o=i(S),Qs=n(S,"LI",{});var nP=s(Qs);afe=n(nP,"STRONG",{});var Cbt=s(afe);i1o=r(Cbt,"pegasus"),Cbt.forEach(t),d1o=r(nP," \u2014 "),Kq=n(nP,"A",{href:!0});var wbt=s(Kq);c1o=r(wbt,"PegasusTokenizer"),wbt.forEach(t),f1o=r(nP," or "),Zq=n(nP,"A",{href:!0});var Abt=s(Zq);m1o=r(Abt,"PegasusTokenizerFast"),Abt.forEach(t),g1o=r(nP," (Pegasus model)"),nP.forEach(t),h1o=i(S),Kh=n(S,"LI",{});var Gke=s(Kh);nfe=n(Gke,"STRONG",{});var ybt=s(nfe);p1o=r(ybt,"perceiver"),ybt.forEach(t),u1o=r(Gke," \u2014 "),ej=n(Gke,"A",{href:!0});var Lbt=s(ej);_1o=r(Lbt,"PerceiverTokenizer"),Lbt.forEach(t),b1o=r(Gke," (Perceiver model)"),Gke.forEach(t),v1o=i(S),Zh=n(S,"LI",{});var Oke=s(Zh);sfe=n(Oke,"STRONG",{});var xbt=s(sfe);F1o=r(xbt,"phobert"),xbt.forEach(t),T1o=r(Oke," \u2014 "),oj=n(Oke,"A",{href:!0});var $bt=s(oj);M1o=r($bt,"PhobertTokenizer"),$bt.forEach(t),E1o=r(Oke," (PhoBERT model)"),Oke.forEach(t),C1o=i(S),ep=n(S,"LI",{});var Vke=s(ep);lfe=n(Vke,"STRONG",{});var kbt=s(lfe);w1o=r(kbt,"plbart"),kbt.forEach(t),A1o=r(Vke," \u2014 "),rj=n(Vke,"A",{href:!0});var Sbt=s(rj);y1o=r(Sbt,"PLBartTokenizer"),Sbt.forEach(t),L1o=r(Vke," (PLBart model)"),Vke.forEach(t),x1o=i(S),op=n(S,"LI",{});var Xke=s(op);ife=n(Xke,"STRONG",{});var Rbt=s(ife);$1o=r(Rbt,"prophetnet"),Rbt.forEach(t),k1o=r(Xke," \u2014 "),tj=n(Xke,"A",{href:!0});var Pbt=s(tj);S1o=r(Pbt,"ProphetNetTokenizer"),Pbt.forEach(t),R1o=r(Xke," (ProphetNet model)"),Xke.forEach(t),P1o=i(S),Ws=n(S,"LI",{});var sP=s(Ws);dfe=n(sP,"STRONG",{});var Bbt=s(dfe);B1o=r(Bbt,"qdqbert"),Bbt.forEach(t),I1o=r(sP," \u2014 "),aj=n(sP,"A",{href:!0});var Ibt=s(aj);N1o=r(Ibt,"BertTokenizer"),Ibt.forEach(t),q1o=r(sP," or "),nj=n(sP,"A",{href:!0});var Nbt=s(nj);j1o=r(Nbt,"BertTokenizerFast"),Nbt.forEach(t),D1o=r(sP," (QDQBert model)"),sP.forEach(t),G1o=i(S),rp=n(S,"LI",{});var zke=s(rp);cfe=n(zke,"STRONG",{});var qbt=s(cfe);O1o=r(qbt,"rag"),qbt.forEach(t),V1o=r(zke," \u2014 "),sj=n(zke,"A",{href:!0});var jbt=s(sj);X1o=r(jbt,"RagTokenizer"),jbt.forEach(t),z1o=r(zke," (RAG model)"),zke.forEach(t),Q1o=i(S),Us=n(S,"LI",{});var lP=s(Us);ffe=n(lP,"STRONG",{});var Dbt=s(ffe);W1o=r(Dbt,"realm"),Dbt.forEach(t),U1o=r(lP," \u2014 "),lj=n(lP,"A",{href:!0});var Gbt=s(lj);H1o=r(Gbt,"RealmTokenizer"),Gbt.forEach(t),J1o=r(lP," or "),ij=n(lP,"A",{href:!0});var Obt=s(ij);Y1o=r(Obt,"RealmTokenizerFast"),Obt.forEach(t),K1o=r(lP," (REALM model)"),lP.forEach(t),Z1o=i(S),Hs=n(S,"LI",{});var iP=s(Hs);mfe=n(iP,"STRONG",{});var Vbt=s(mfe);ebo=r(Vbt,"reformer"),Vbt.forEach(t),obo=r(iP," \u2014 "),dj=n(iP,"A",{href:!0});var Xbt=s(dj);rbo=r(Xbt,"ReformerTokenizer"),Xbt.forEach(t),tbo=r(iP," or "),cj=n(iP,"A",{href:!0});var zbt=s(cj);abo=r(zbt,"ReformerTokenizerFast"),zbt.forEach(t),nbo=r(iP," (Reformer model)"),iP.forEach(t),sbo=i(S),Js=n(S,"LI",{});var dP=s(Js);gfe=n(dP,"STRONG",{});var Qbt=s(gfe);lbo=r(Qbt,"rembert"),Qbt.forEach(t),ibo=r(dP," \u2014 "),fj=n(dP,"A",{href:!0});var Wbt=s(fj);dbo=r(Wbt,"RemBertTokenizer"),Wbt.forEach(t),cbo=r(dP," or "),mj=n(dP,"A",{href:!0});var Ubt=s(mj);fbo=r(Ubt,"RemBertTokenizerFast"),Ubt.forEach(t),mbo=r(dP," (RemBERT model)"),dP.forEach(t),gbo=i(S),Ys=n(S,"LI",{});var cP=s(Ys);hfe=n(cP,"STRONG",{});var Hbt=s(hfe);hbo=r(Hbt,"retribert"),Hbt.forEach(t),pbo=r(cP," \u2014 "),gj=n(cP,"A",{href:!0});var Jbt=s(gj);ubo=r(Jbt,"RetriBertTokenizer"),Jbt.forEach(t),_bo=r(cP," or "),hj=n(cP,"A",{href:!0});var Ybt=s(hj);bbo=r(Ybt,"RetriBertTokenizerFast"),Ybt.forEach(t),vbo=r(cP," (RetriBERT model)"),cP.forEach(t),Fbo=i(S),Ks=n(S,"LI",{});var fP=s(Ks);pfe=n(fP,"STRONG",{});var Kbt=s(pfe);Tbo=r(Kbt,"roberta"),Kbt.forEach(t),Mbo=r(fP," \u2014 "),pj=n(fP,"A",{href:!0});var Zbt=s(pj);Ebo=r(Zbt,"RobertaTokenizer"),Zbt.forEach(t),Cbo=r(fP," or "),uj=n(fP,"A",{href:!0});var evt=s(uj);wbo=r(evt,"RobertaTokenizerFast"),evt.forEach(t),Abo=r(fP," (RoBERTa model)"),fP.forEach(t),ybo=i(S),Zs=n(S,"LI",{});var mP=s(Zs);ufe=n(mP,"STRONG",{});var ovt=s(ufe);Lbo=r(ovt,"roformer"),ovt.forEach(t),xbo=r(mP," \u2014 "),_j=n(mP,"A",{href:!0});var rvt=s(_j);$bo=r(rvt,"RoFormerTokenizer"),rvt.forEach(t),kbo=r(mP," or "),bj=n(mP,"A",{href:!0});var tvt=s(bj);Sbo=r(tvt,"RoFormerTokenizerFast"),tvt.forEach(t),Rbo=r(mP," (RoFormer model)"),mP.forEach(t),Pbo=i(S),tp=n(S,"LI",{});var Qke=s(tp);_fe=n(Qke,"STRONG",{});var avt=s(_fe);Bbo=r(avt,"speech_to_text"),avt.forEach(t),Ibo=r(Qke," \u2014 "),vj=n(Qke,"A",{href:!0});var nvt=s(vj);Nbo=r(nvt,"Speech2TextTokenizer"),nvt.forEach(t),qbo=r(Qke," (Speech2Text model)"),Qke.forEach(t),jbo=i(S),ap=n(S,"LI",{});var Wke=s(ap);bfe=n(Wke,"STRONG",{});var svt=s(bfe);Dbo=r(svt,"speech_to_text_2"),svt.forEach(t),Gbo=r(Wke," \u2014 "),Fj=n(Wke,"A",{href:!0});var lvt=s(Fj);Obo=r(lvt,"Speech2Text2Tokenizer"),lvt.forEach(t),Vbo=r(Wke," (Speech2Text2 model)"),Wke.forEach(t),Xbo=i(S),el=n(S,"LI",{});var gP=s(el);vfe=n(gP,"STRONG",{});var ivt=s(vfe);zbo=r(ivt,"splinter"),ivt.forEach(t),Qbo=r(gP," \u2014 "),Tj=n(gP,"A",{href:!0});var dvt=s(Tj);Wbo=r(dvt,"SplinterTokenizer"),dvt.forEach(t),Ubo=r(gP," or "),Mj=n(gP,"A",{href:!0});var cvt=s(Mj);Hbo=r(cvt,"SplinterTokenizerFast"),cvt.forEach(t),Jbo=r(gP," (Splinter model)"),gP.forEach(t),Ybo=i(S),ol=n(S,"LI",{});var hP=s(ol);Ffe=n(hP,"STRONG",{});var fvt=s(Ffe);Kbo=r(fvt,"squeezebert"),fvt.forEach(t),Zbo=r(hP," \u2014 "),Ej=n(hP,"A",{href:!0});var mvt=s(Ej);evo=r(mvt,"SqueezeBertTokenizer"),mvt.forEach(t),ovo=r(hP," or "),Cj=n(hP,"A",{href:!0});var gvt=s(Cj);rvo=r(gvt,"SqueezeBertTokenizerFast"),gvt.forEach(t),tvo=r(hP," (SqueezeBERT model)"),hP.forEach(t),avo=i(S),rl=n(S,"LI",{});var pP=s(rl);Tfe=n(pP,"STRONG",{});var hvt=s(Tfe);nvo=r(hvt,"t5"),hvt.forEach(t),svo=r(pP," \u2014 "),wj=n(pP,"A",{href:!0});var pvt=s(wj);lvo=r(pvt,"T5Tokenizer"),pvt.forEach(t),ivo=r(pP," or "),Aj=n(pP,"A",{href:!0});var uvt=s(Aj);dvo=r(uvt,"T5TokenizerFast"),uvt.forEach(t),cvo=r(pP," (T5 model)"),pP.forEach(t),fvo=i(S),np=n(S,"LI",{});var Uke=s(np);Mfe=n(Uke,"STRONG",{});var _vt=s(Mfe);mvo=r(_vt,"tapas"),_vt.forEach(t),gvo=r(Uke," \u2014 "),yj=n(Uke,"A",{href:!0});var bvt=s(yj);hvo=r(bvt,"TapasTokenizer"),bvt.forEach(t),pvo=r(Uke," (TAPAS model)"),Uke.forEach(t),uvo=i(S),sp=n(S,"LI",{});var Hke=s(sp);Efe=n(Hke,"STRONG",{});var vvt=s(Efe);_vo=r(vvt,"tapex"),vvt.forEach(t),bvo=r(Hke," \u2014 "),Lj=n(Hke,"A",{href:!0});var Fvt=s(Lj);vvo=r(Fvt,"TapexTokenizer"),Fvt.forEach(t),Fvo=r(Hke," (TAPEX model)"),Hke.forEach(t),Tvo=i(S),lp=n(S,"LI",{});var Jke=s(lp);Cfe=n(Jke,"STRONG",{});var Tvt=s(Cfe);Mvo=r(Tvt,"transfo-xl"),Tvt.forEach(t),Evo=r(Jke," \u2014 "),xj=n(Jke,"A",{href:!0});var Mvt=s(xj);Cvo=r(Mvt,"TransfoXLTokenizer"),Mvt.forEach(t),wvo=r(Jke," (Transformer-XL model)"),Jke.forEach(t),Avo=i(S),tl=n(S,"LI",{});var uP=s(tl);wfe=n(uP,"STRONG",{});var Evt=s(wfe);yvo=r(Evt,"vilt"),Evt.forEach(t),Lvo=r(uP," \u2014 "),$j=n(uP,"A",{href:!0});var Cvt=s($j);xvo=r(Cvt,"BertTokenizer"),Cvt.forEach(t),$vo=r(uP," or "),kj=n(uP,"A",{href:!0});var wvt=s(kj);kvo=r(wvt,"BertTokenizerFast"),wvt.forEach(t),Svo=r(uP," (ViLT model)"),uP.forEach(t),Rvo=i(S),al=n(S,"LI",{});var _P=s(al);Afe=n(_P,"STRONG",{});var Avt=s(Afe);Pvo=r(Avt,"visual_bert"),Avt.forEach(t),Bvo=r(_P," \u2014 "),Sj=n(_P,"A",{href:!0});var yvt=s(Sj);Ivo=r(yvt,"BertTokenizer"),yvt.forEach(t),Nvo=r(_P," or "),Rj=n(_P,"A",{href:!0});var Lvt=s(Rj);qvo=r(Lvt,"BertTokenizerFast"),Lvt.forEach(t),jvo=r(_P," (VisualBERT model)"),_P.forEach(t),Dvo=i(S),ip=n(S,"LI",{});var Yke=s(ip);yfe=n(Yke,"STRONG",{});var xvt=s(yfe);Gvo=r(xvt,"wav2vec2"),xvt.forEach(t),Ovo=r(Yke," \u2014 "),Pj=n(Yke,"A",{href:!0});var $vt=s(Pj);Vvo=r($vt,"Wav2Vec2CTCTokenizer"),$vt.forEach(t),Xvo=r(Yke," (Wav2Vec2 model)"),Yke.forEach(t),zvo=i(S),dp=n(S,"LI",{});var Kke=s(dp);Lfe=n(Kke,"STRONG",{});var kvt=s(Lfe);Qvo=r(kvt,"wav2vec2-conformer"),kvt.forEach(t),Wvo=r(Kke," \u2014 "),Bj=n(Kke,"A",{href:!0});var Svt=s(Bj);Uvo=r(Svt,"Wav2Vec2CTCTokenizer"),Svt.forEach(t),Hvo=r(Kke," (Wav2Vec2-Conformer model)"),Kke.forEach(t),Jvo=i(S),cp=n(S,"LI",{});var Zke=s(cp);xfe=n(Zke,"STRONG",{});var Rvt=s(xfe);Yvo=r(Rvt,"wav2vec2_phoneme"),Rvt.forEach(t),Kvo=r(Zke," \u2014 "),Ij=n(Zke,"A",{href:!0});var Pvt=s(Ij);Zvo=r(Pvt,"Wav2Vec2PhonemeCTCTokenizer"),Pvt.forEach(t),e3o=r(Zke," (Wav2Vec2Phoneme model)"),Zke.forEach(t),o3o=i(S),nl=n(S,"LI",{});var bP=s(nl);$fe=n(bP,"STRONG",{});var Bvt=s($fe);r3o=r(Bvt,"xglm"),Bvt.forEach(t),t3o=r(bP," \u2014 "),Nj=n(bP,"A",{href:!0});var Ivt=s(Nj);a3o=r(Ivt,"XGLMTokenizer"),Ivt.forEach(t),n3o=r(bP," or "),qj=n(bP,"A",{href:!0});var Nvt=s(qj);s3o=r(Nvt,"XGLMTokenizerFast"),Nvt.forEach(t),l3o=r(bP," (XGLM model)"),bP.forEach(t),i3o=i(S),fp=n(S,"LI",{});var eSe=s(fp);kfe=n(eSe,"STRONG",{});var qvt=s(kfe);d3o=r(qvt,"xlm"),qvt.forEach(t),c3o=r(eSe," \u2014 "),jj=n(eSe,"A",{href:!0});var jvt=s(jj);f3o=r(jvt,"XLMTokenizer"),jvt.forEach(t),m3o=r(eSe," (XLM model)"),eSe.forEach(t),g3o=i(S),mp=n(S,"LI",{});var oSe=s(mp);Sfe=n(oSe,"STRONG",{});var Dvt=s(Sfe);h3o=r(Dvt,"xlm-prophetnet"),Dvt.forEach(t),p3o=r(oSe," \u2014 "),Dj=n(oSe,"A",{href:!0});var Gvt=s(Dj);u3o=r(Gvt,"XLMProphetNetTokenizer"),Gvt.forEach(t),_3o=r(oSe," (XLM-ProphetNet model)"),oSe.forEach(t),b3o=i(S),sl=n(S,"LI",{});var vP=s(sl);Rfe=n(vP,"STRONG",{});var Ovt=s(Rfe);v3o=r(Ovt,"xlm-roberta"),Ovt.forEach(t),F3o=r(vP," \u2014 "),Gj=n(vP,"A",{href:!0});var Vvt=s(Gj);T3o=r(Vvt,"XLMRobertaTokenizer"),Vvt.forEach(t),M3o=r(vP," or "),Oj=n(vP,"A",{href:!0});var Xvt=s(Oj);E3o=r(Xvt,"XLMRobertaTokenizerFast"),Xvt.forEach(t),C3o=r(vP," (XLM-RoBERTa model)"),vP.forEach(t),w3o=i(S),ll=n(S,"LI",{});var FP=s(ll);Pfe=n(FP,"STRONG",{});var zvt=s(Pfe);A3o=r(zvt,"xlm-roberta-xl"),zvt.forEach(t),y3o=r(FP," \u2014 "),Vj=n(FP,"A",{href:!0});var Qvt=s(Vj);L3o=r(Qvt,"RobertaTokenizer"),Qvt.forEach(t),x3o=r(FP," or "),Xj=n(FP,"A",{href:!0});var Wvt=s(Xj);$3o=r(Wvt,"RobertaTokenizerFast"),Wvt.forEach(t),k3o=r(FP," (XLM-RoBERTa-XL model)"),FP.forEach(t),S3o=i(S),il=n(S,"LI",{});var TP=s(il);Bfe=n(TP,"STRONG",{});var Uvt=s(Bfe);R3o=r(Uvt,"xlnet"),Uvt.forEach(t),P3o=r(TP," \u2014 "),zj=n(TP,"A",{href:!0});var Hvt=s(zj);B3o=r(Hvt,"XLNetTokenizer"),Hvt.forEach(t),I3o=r(TP," or "),Qj=n(TP,"A",{href:!0});var Jvt=s(Qj);N3o=r(Jvt,"XLNetTokenizerFast"),Jvt.forEach(t),q3o=r(TP," (XLNet model)"),TP.forEach(t),j3o=i(S),dl=n(S,"LI",{});var MP=s(dl);Ife=n(MP,"STRONG",{});var Yvt=s(Ife);D3o=r(Yvt,"yoso"),Yvt.forEach(t),G3o=r(MP," \u2014 "),Wj=n(MP,"A",{href:!0});var Kvt=s(Wj);O3o=r(Kvt,"AlbertTokenizer"),Kvt.forEach(t),V3o=r(MP," or "),Uj=n(MP,"A",{href:!0});var Zvt=s(Uj);X3o=r(Zvt,"AlbertTokenizerFast"),Zvt.forEach(t),z3o=r(MP," (YOSO model)"),MP.forEach(t),S.forEach(t),Q3o=i(ul),T(gp.$$.fragment,ul),ul.forEach(t),W3o=i(pl),hp=n(pl,"DIV",{class:!0});var eYe=s(hp);T(QL.$$.fragment,eYe),U3o=i(eYe),Nfe=n(eYe,"P",{});var e3t=s(Nfe);H3o=r(e3t,"Register a new tokenizer in this mapping."),e3t.forEach(t),eYe.forEach(t),pl.forEach(t),WUe=i(f),nd=n(f,"H2",{class:!0});var oYe=s(nd);pp=n(oYe,"A",{id:!0,class:!0,href:!0});var o3t=s(pp);qfe=n(o3t,"SPAN",{});var r3t=s(qfe);T(WL.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),J3o=i(oYe),jfe=n(oYe,"SPAN",{});var t3t=s(jfe);Y3o=r(t3t,"AutoFeatureExtractor"),t3t.forEach(t),oYe.forEach(t),UUe=i(f),ko=n(f,"DIV",{class:!0});var _l=s(ko);T(UL.$$.fragment,_l),K3o=i(_l),HL=n(_l,"P",{});var rYe=s(HL);Z3o=r(rYe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hj=n(rYe,"A",{href:!0});var a3t=s(Hj);eFo=r(a3t,"AutoFeatureExtractor.from_pretrained()"),a3t.forEach(t),oFo=r(rYe," class method."),rYe.forEach(t),rFo=i(_l),JL=n(_l,"P",{});var tYe=s(JL);tFo=r(tYe,"This class cannot be instantiated directly using "),Dfe=n(tYe,"CODE",{});var n3t=s(Dfe);aFo=r(n3t,"__init__()"),n3t.forEach(t),nFo=r(tYe," (throws an error)."),tYe.forEach(t),sFo=i(_l),He=n(_l,"DIV",{class:!0});var ha=s(He);T(YL.$$.fragment,ha),lFo=i(ha),Gfe=n(ha,"P",{});var s3t=s(Gfe);iFo=r(s3t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),s3t.forEach(t),dFo=i(ha),Qa=n(ha,"P",{});var x6=s(Qa);cFo=r(x6,"The feature extractor class to instantiate is selected based on the "),Ofe=n(x6,"CODE",{});var l3t=s(Ofe);fFo=r(l3t,"model_type"),l3t.forEach(t),mFo=r(x6,` property of the config object
(either passed as an argument or loaded from `),Vfe=n(x6,"CODE",{});var i3t=s(Vfe);gFo=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),hFo=r(x6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Xfe=n(x6,"CODE",{});var d3t=s(Xfe);pFo=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),uFo=r(x6,":"),x6.forEach(t),_Fo=i(ha),W=n(ha,"UL",{});var J=s(W);up=n(J,"LI",{});var rSe=s(up);zfe=n(rSe,"STRONG",{});var c3t=s(zfe);bFo=r(c3t,"beit"),c3t.forEach(t),vFo=r(rSe," \u2014 "),Jj=n(rSe,"A",{href:!0});var f3t=s(Jj);FFo=r(f3t,"BeitFeatureExtractor"),f3t.forEach(t),TFo=r(rSe," (BEiT model)"),rSe.forEach(t),MFo=i(J),_p=n(J,"LI",{});var tSe=s(_p);Qfe=n(tSe,"STRONG",{});var m3t=s(Qfe);EFo=r(m3t,"clip"),m3t.forEach(t),CFo=r(tSe," \u2014 "),Yj=n(tSe,"A",{href:!0});var g3t=s(Yj);wFo=r(g3t,"CLIPFeatureExtractor"),g3t.forEach(t),AFo=r(tSe," (CLIP model)"),tSe.forEach(t),yFo=i(J),bp=n(J,"LI",{});var aSe=s(bp);Wfe=n(aSe,"STRONG",{});var h3t=s(Wfe);LFo=r(h3t,"convnext"),h3t.forEach(t),xFo=r(aSe," \u2014 "),Kj=n(aSe,"A",{href:!0});var p3t=s(Kj);$Fo=r(p3t,"ConvNextFeatureExtractor"),p3t.forEach(t),kFo=r(aSe," (ConvNeXT model)"),aSe.forEach(t),SFo=i(J),vp=n(J,"LI",{});var nSe=s(vp);Ufe=n(nSe,"STRONG",{});var u3t=s(Ufe);RFo=r(u3t,"cvt"),u3t.forEach(t),PFo=r(nSe," \u2014 "),Zj=n(nSe,"A",{href:!0});var _3t=s(Zj);BFo=r(_3t,"ConvNextFeatureExtractor"),_3t.forEach(t),IFo=r(nSe," (CvT model)"),nSe.forEach(t),NFo=i(J),Fp=n(J,"LI",{});var sSe=s(Fp);Hfe=n(sSe,"STRONG",{});var b3t=s(Hfe);qFo=r(b3t,"data2vec-audio"),b3t.forEach(t),jFo=r(sSe," \u2014 "),eD=n(sSe,"A",{href:!0});var v3t=s(eD);DFo=r(v3t,"Wav2Vec2FeatureExtractor"),v3t.forEach(t),GFo=r(sSe," (Data2VecAudio model)"),sSe.forEach(t),OFo=i(J),Tp=n(J,"LI",{});var lSe=s(Tp);Jfe=n(lSe,"STRONG",{});var F3t=s(Jfe);VFo=r(F3t,"data2vec-vision"),F3t.forEach(t),XFo=r(lSe," \u2014 "),oD=n(lSe,"A",{href:!0});var T3t=s(oD);zFo=r(T3t,"BeitFeatureExtractor"),T3t.forEach(t),QFo=r(lSe," (Data2VecVision model)"),lSe.forEach(t),WFo=i(J),Mp=n(J,"LI",{});var iSe=s(Mp);Yfe=n(iSe,"STRONG",{});var M3t=s(Yfe);UFo=r(M3t,"deit"),M3t.forEach(t),HFo=r(iSe," \u2014 "),rD=n(iSe,"A",{href:!0});var E3t=s(rD);JFo=r(E3t,"DeiTFeatureExtractor"),E3t.forEach(t),YFo=r(iSe," (DeiT model)"),iSe.forEach(t),KFo=i(J),Ep=n(J,"LI",{});var dSe=s(Ep);Kfe=n(dSe,"STRONG",{});var C3t=s(Kfe);ZFo=r(C3t,"detr"),C3t.forEach(t),e7o=r(dSe," \u2014 "),tD=n(dSe,"A",{href:!0});var w3t=s(tD);o7o=r(w3t,"DetrFeatureExtractor"),w3t.forEach(t),r7o=r(dSe," (DETR model)"),dSe.forEach(t),t7o=i(J),Cp=n(J,"LI",{});var cSe=s(Cp);Zfe=n(cSe,"STRONG",{});var A3t=s(Zfe);a7o=r(A3t,"donut"),A3t.forEach(t),n7o=r(cSe," \u2014 "),aD=n(cSe,"A",{href:!0});var y3t=s(aD);s7o=r(y3t,"DonutFeatureExtractor"),y3t.forEach(t),l7o=r(cSe," (Donut model)"),cSe.forEach(t),i7o=i(J),wp=n(J,"LI",{});var fSe=s(wp);eme=n(fSe,"STRONG",{});var L3t=s(eme);d7o=r(L3t,"dpt"),L3t.forEach(t),c7o=r(fSe," \u2014 "),nD=n(fSe,"A",{href:!0});var x3t=s(nD);f7o=r(x3t,"DPTFeatureExtractor"),x3t.forEach(t),m7o=r(fSe," (DPT model)"),fSe.forEach(t),g7o=i(J),Ap=n(J,"LI",{});var mSe=s(Ap);ome=n(mSe,"STRONG",{});var $3t=s(ome);h7o=r($3t,"flava"),$3t.forEach(t),p7o=r(mSe," \u2014 "),sD=n(mSe,"A",{href:!0});var k3t=s(sD);u7o=r(k3t,"FlavaFeatureExtractor"),k3t.forEach(t),_7o=r(mSe," (FLAVA model)"),mSe.forEach(t),b7o=i(J),yp=n(J,"LI",{});var gSe=s(yp);rme=n(gSe,"STRONG",{});var S3t=s(rme);v7o=r(S3t,"glpn"),S3t.forEach(t),F7o=r(gSe," \u2014 "),lD=n(gSe,"A",{href:!0});var R3t=s(lD);T7o=r(R3t,"GLPNFeatureExtractor"),R3t.forEach(t),M7o=r(gSe," (GLPN model)"),gSe.forEach(t),E7o=i(J),Lp=n(J,"LI",{});var hSe=s(Lp);tme=n(hSe,"STRONG",{});var P3t=s(tme);C7o=r(P3t,"groupvit"),P3t.forEach(t),w7o=r(hSe," \u2014 "),iD=n(hSe,"A",{href:!0});var B3t=s(iD);A7o=r(B3t,"CLIPFeatureExtractor"),B3t.forEach(t),y7o=r(hSe," (GroupViT model)"),hSe.forEach(t),L7o=i(J),xp=n(J,"LI",{});var pSe=s(xp);ame=n(pSe,"STRONG",{});var I3t=s(ame);x7o=r(I3t,"hubert"),I3t.forEach(t),$7o=r(pSe," \u2014 "),dD=n(pSe,"A",{href:!0});var N3t=s(dD);k7o=r(N3t,"Wav2Vec2FeatureExtractor"),N3t.forEach(t),S7o=r(pSe," (Hubert model)"),pSe.forEach(t),R7o=i(J),$p=n(J,"LI",{});var uSe=s($p);nme=n(uSe,"STRONG",{});var q3t=s(nme);P7o=r(q3t,"imagegpt"),q3t.forEach(t),B7o=r(uSe," \u2014 "),cD=n(uSe,"A",{href:!0});var j3t=s(cD);I7o=r(j3t,"ImageGPTFeatureExtractor"),j3t.forEach(t),N7o=r(uSe," (ImageGPT model)"),uSe.forEach(t),q7o=i(J),kp=n(J,"LI",{});var _Se=s(kp);sme=n(_Se,"STRONG",{});var D3t=s(sme);j7o=r(D3t,"layoutlmv2"),D3t.forEach(t),D7o=r(_Se," \u2014 "),fD=n(_Se,"A",{href:!0});var G3t=s(fD);G7o=r(G3t,"LayoutLMv2FeatureExtractor"),G3t.forEach(t),O7o=r(_Se," (LayoutLMv2 model)"),_Se.forEach(t),V7o=i(J),Sp=n(J,"LI",{});var bSe=s(Sp);lme=n(bSe,"STRONG",{});var O3t=s(lme);X7o=r(O3t,"layoutlmv3"),O3t.forEach(t),z7o=r(bSe," \u2014 "),mD=n(bSe,"A",{href:!0});var V3t=s(mD);Q7o=r(V3t,"LayoutLMv3FeatureExtractor"),V3t.forEach(t),W7o=r(bSe," (LayoutLMv3 model)"),bSe.forEach(t),U7o=i(J),Rp=n(J,"LI",{});var vSe=s(Rp);ime=n(vSe,"STRONG",{});var X3t=s(ime);H7o=r(X3t,"levit"),X3t.forEach(t),J7o=r(vSe," \u2014 "),gD=n(vSe,"A",{href:!0});var z3t=s(gD);Y7o=r(z3t,"LevitFeatureExtractor"),z3t.forEach(t),K7o=r(vSe," (LeViT model)"),vSe.forEach(t),Z7o=i(J),Pp=n(J,"LI",{});var FSe=s(Pp);dme=n(FSe,"STRONG",{});var Q3t=s(dme);eTo=r(Q3t,"maskformer"),Q3t.forEach(t),oTo=r(FSe," \u2014 "),hD=n(FSe,"A",{href:!0});var W3t=s(hD);rTo=r(W3t,"MaskFormerFeatureExtractor"),W3t.forEach(t),tTo=r(FSe," (MaskFormer model)"),FSe.forEach(t),aTo=i(J),Bp=n(J,"LI",{});var TSe=s(Bp);cme=n(TSe,"STRONG",{});var U3t=s(cme);nTo=r(U3t,"mctct"),U3t.forEach(t),sTo=r(TSe," \u2014 "),pD=n(TSe,"A",{href:!0});var H3t=s(pD);lTo=r(H3t,"MCTCTFeatureExtractor"),H3t.forEach(t),iTo=r(TSe," (M-CTC-T model)"),TSe.forEach(t),dTo=i(J),Ip=n(J,"LI",{});var MSe=s(Ip);fme=n(MSe,"STRONG",{});var J3t=s(fme);cTo=r(J3t,"mobilevit"),J3t.forEach(t),fTo=r(MSe," \u2014 "),uD=n(MSe,"A",{href:!0});var Y3t=s(uD);mTo=r(Y3t,"MobileViTFeatureExtractor"),Y3t.forEach(t),gTo=r(MSe," (MobileViT model)"),MSe.forEach(t),hTo=i(J),Np=n(J,"LI",{});var ESe=s(Np);mme=n(ESe,"STRONG",{});var K3t=s(mme);pTo=r(K3t,"owlvit"),K3t.forEach(t),uTo=r(ESe," \u2014 "),_D=n(ESe,"A",{href:!0});var Z3t=s(_D);_To=r(Z3t,"OwlViTFeatureExtractor"),Z3t.forEach(t),bTo=r(ESe," (OWL-ViT model)"),ESe.forEach(t),vTo=i(J),qp=n(J,"LI",{});var CSe=s(qp);gme=n(CSe,"STRONG",{});var eFt=s(gme);FTo=r(eFt,"perceiver"),eFt.forEach(t),TTo=r(CSe," \u2014 "),bD=n(CSe,"A",{href:!0});var oFt=s(bD);MTo=r(oFt,"PerceiverFeatureExtractor"),oFt.forEach(t),ETo=r(CSe," (Perceiver model)"),CSe.forEach(t),CTo=i(J),jp=n(J,"LI",{});var wSe=s(jp);hme=n(wSe,"STRONG",{});var rFt=s(hme);wTo=r(rFt,"poolformer"),rFt.forEach(t),ATo=r(wSe," \u2014 "),vD=n(wSe,"A",{href:!0});var tFt=s(vD);yTo=r(tFt,"PoolFormerFeatureExtractor"),tFt.forEach(t),LTo=r(wSe," (PoolFormer model)"),wSe.forEach(t),xTo=i(J),Dp=n(J,"LI",{});var ASe=s(Dp);pme=n(ASe,"STRONG",{});var aFt=s(pme);$To=r(aFt,"regnet"),aFt.forEach(t),kTo=r(ASe," \u2014 "),FD=n(ASe,"A",{href:!0});var nFt=s(FD);STo=r(nFt,"ConvNextFeatureExtractor"),nFt.forEach(t),RTo=r(ASe," (RegNet model)"),ASe.forEach(t),PTo=i(J),Gp=n(J,"LI",{});var ySe=s(Gp);ume=n(ySe,"STRONG",{});var sFt=s(ume);BTo=r(sFt,"resnet"),sFt.forEach(t),ITo=r(ySe," \u2014 "),TD=n(ySe,"A",{href:!0});var lFt=s(TD);NTo=r(lFt,"ConvNextFeatureExtractor"),lFt.forEach(t),qTo=r(ySe," (ResNet model)"),ySe.forEach(t),jTo=i(J),Op=n(J,"LI",{});var LSe=s(Op);_me=n(LSe,"STRONG",{});var iFt=s(_me);DTo=r(iFt,"segformer"),iFt.forEach(t),GTo=r(LSe," \u2014 "),MD=n(LSe,"A",{href:!0});var dFt=s(MD);OTo=r(dFt,"SegformerFeatureExtractor"),dFt.forEach(t),VTo=r(LSe," (SegFormer model)"),LSe.forEach(t),XTo=i(J),Vp=n(J,"LI",{});var xSe=s(Vp);bme=n(xSe,"STRONG",{});var cFt=s(bme);zTo=r(cFt,"speech_to_text"),cFt.forEach(t),QTo=r(xSe," \u2014 "),ED=n(xSe,"A",{href:!0});var fFt=s(ED);WTo=r(fFt,"Speech2TextFeatureExtractor"),fFt.forEach(t),UTo=r(xSe," (Speech2Text model)"),xSe.forEach(t),HTo=i(J),Xp=n(J,"LI",{});var $Se=s(Xp);vme=n($Se,"STRONG",{});var mFt=s(vme);JTo=r(mFt,"swin"),mFt.forEach(t),YTo=r($Se," \u2014 "),CD=n($Se,"A",{href:!0});var gFt=s(CD);KTo=r(gFt,"ViTFeatureExtractor"),gFt.forEach(t),ZTo=r($Se," (Swin Transformer model)"),$Se.forEach(t),e8o=i(J),zp=n(J,"LI",{});var kSe=s(zp);Fme=n(kSe,"STRONG",{});var hFt=s(Fme);o8o=r(hFt,"swinv2"),hFt.forEach(t),r8o=r(kSe," \u2014 "),wD=n(kSe,"A",{href:!0});var pFt=s(wD);t8o=r(pFt,"ViTFeatureExtractor"),pFt.forEach(t),a8o=r(kSe," (Swin Transformer V2 model)"),kSe.forEach(t),n8o=i(J),Qp=n(J,"LI",{});var SSe=s(Qp);Tme=n(SSe,"STRONG",{});var uFt=s(Tme);s8o=r(uFt,"van"),uFt.forEach(t),l8o=r(SSe," \u2014 "),AD=n(SSe,"A",{href:!0});var _Ft=s(AD);i8o=r(_Ft,"ConvNextFeatureExtractor"),_Ft.forEach(t),d8o=r(SSe," (VAN model)"),SSe.forEach(t),c8o=i(J),Wp=n(J,"LI",{});var RSe=s(Wp);Mme=n(RSe,"STRONG",{});var bFt=s(Mme);f8o=r(bFt,"videomae"),bFt.forEach(t),m8o=r(RSe," \u2014 "),yD=n(RSe,"A",{href:!0});var vFt=s(yD);g8o=r(vFt,"ViTFeatureExtractor"),vFt.forEach(t),h8o=r(RSe," (VideoMAE model)"),RSe.forEach(t),p8o=i(J),Up=n(J,"LI",{});var PSe=s(Up);Eme=n(PSe,"STRONG",{});var FFt=s(Eme);u8o=r(FFt,"vilt"),FFt.forEach(t),_8o=r(PSe," \u2014 "),LD=n(PSe,"A",{href:!0});var TFt=s(LD);b8o=r(TFt,"ViltFeatureExtractor"),TFt.forEach(t),v8o=r(PSe," (ViLT model)"),PSe.forEach(t),F8o=i(J),Hp=n(J,"LI",{});var BSe=s(Hp);Cme=n(BSe,"STRONG",{});var MFt=s(Cme);T8o=r(MFt,"vit"),MFt.forEach(t),M8o=r(BSe," \u2014 "),xD=n(BSe,"A",{href:!0});var EFt=s(xD);E8o=r(EFt,"ViTFeatureExtractor"),EFt.forEach(t),C8o=r(BSe," (ViT model)"),BSe.forEach(t),w8o=i(J),Jp=n(J,"LI",{});var ISe=s(Jp);wme=n(ISe,"STRONG",{});var CFt=s(wme);A8o=r(CFt,"vit_mae"),CFt.forEach(t),y8o=r(ISe," \u2014 "),$D=n(ISe,"A",{href:!0});var wFt=s($D);L8o=r(wFt,"ViTFeatureExtractor"),wFt.forEach(t),x8o=r(ISe," (ViTMAE model)"),ISe.forEach(t),$8o=i(J),Yp=n(J,"LI",{});var NSe=s(Yp);Ame=n(NSe,"STRONG",{});var AFt=s(Ame);k8o=r(AFt,"wav2vec2"),AFt.forEach(t),S8o=r(NSe," \u2014 "),kD=n(NSe,"A",{href:!0});var yFt=s(kD);R8o=r(yFt,"Wav2Vec2FeatureExtractor"),yFt.forEach(t),P8o=r(NSe," (Wav2Vec2 model)"),NSe.forEach(t),B8o=i(J),Kp=n(J,"LI",{});var qSe=s(Kp);yme=n(qSe,"STRONG",{});var LFt=s(yme);I8o=r(LFt,"wav2vec2-conformer"),LFt.forEach(t),N8o=r(qSe," \u2014 "),SD=n(qSe,"A",{href:!0});var xFt=s(SD);q8o=r(xFt,"Wav2Vec2FeatureExtractor"),xFt.forEach(t),j8o=r(qSe," (Wav2Vec2-Conformer model)"),qSe.forEach(t),D8o=i(J),Zp=n(J,"LI",{});var jSe=s(Zp);Lme=n(jSe,"STRONG",{});var $Ft=s(Lme);G8o=r($Ft,"yolos"),$Ft.forEach(t),O8o=r(jSe," \u2014 "),RD=n(jSe,"A",{href:!0});var kFt=s(RD);V8o=r(kFt,"YolosFeatureExtractor"),kFt.forEach(t),X8o=r(jSe," (YOLOS model)"),jSe.forEach(t),J.forEach(t),z8o=i(ha),T(eu.$$.fragment,ha),Q8o=i(ha),T(ou.$$.fragment,ha),ha.forEach(t),W8o=i(_l),ru=n(_l,"DIV",{class:!0});var aYe=s(ru);T(KL.$$.fragment,aYe),U8o=i(aYe),xme=n(aYe,"P",{});var SFt=s(xme);H8o=r(SFt,"Register a new feature extractor for this class."),SFt.forEach(t),aYe.forEach(t),_l.forEach(t),HUe=i(f),sd=n(f,"H2",{class:!0});var nYe=s(sd);tu=n(nYe,"A",{id:!0,class:!0,href:!0});var RFt=s(tu);$me=n(RFt,"SPAN",{});var PFt=s($me);T(ZL.$$.fragment,PFt),PFt.forEach(t),RFt.forEach(t),J8o=i(nYe),kme=n(nYe,"SPAN",{});var BFt=s(kme);Y8o=r(BFt,"AutoProcessor"),BFt.forEach(t),nYe.forEach(t),JUe=i(f),So=n(f,"DIV",{class:!0});var bl=s(So);T(e9.$$.fragment,bl),K8o=i(bl),o9=n(bl,"P",{});var sYe=s(o9);Z8o=r(sYe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PD=n(sYe,"A",{href:!0});var IFt=s(PD);eMo=r(IFt,"AutoProcessor.from_pretrained()"),IFt.forEach(t),oMo=r(sYe," class method."),sYe.forEach(t),rMo=i(bl),r9=n(bl,"P",{});var lYe=s(r9);tMo=r(lYe,"This class cannot be instantiated directly using "),Sme=n(lYe,"CODE",{});var NFt=s(Sme);aMo=r(NFt,"__init__()"),NFt.forEach(t),nMo=r(lYe," (throws an error)."),lYe.forEach(t),sMo=i(bl),Je=n(bl,"DIV",{class:!0});var pa=s(Je);T(t9.$$.fragment,pa),lMo=i(pa),Rme=n(pa,"P",{});var qFt=s(Rme);iMo=r(qFt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qFt.forEach(t),dMo=i(pa),ld=n(pa,"P",{});var une=s(ld);cMo=r(une,"The processor class to instantiate is selected based on the "),Pme=n(une,"CODE",{});var jFt=s(Pme);fMo=r(jFt,"model_type"),jFt.forEach(t),mMo=r(une,` property of the config object (either
passed as an argument or loaded from `),Bme=n(une,"CODE",{});var DFt=s(Bme);gMo=r(DFt,"pretrained_model_name_or_path"),DFt.forEach(t),hMo=r(une," if possible):"),une.forEach(t),pMo=i(pa),ie=n(pa,"UL",{});var ge=s(ie);au=n(ge,"LI",{});var DSe=s(au);Ime=n(DSe,"STRONG",{});var GFt=s(Ime);uMo=r(GFt,"clip"),GFt.forEach(t),_Mo=r(DSe," \u2014 "),BD=n(DSe,"A",{href:!0});var OFt=s(BD);bMo=r(OFt,"CLIPProcessor"),OFt.forEach(t),vMo=r(DSe," (CLIP model)"),DSe.forEach(t),FMo=i(ge),nu=n(ge,"LI",{});var GSe=s(nu);Nme=n(GSe,"STRONG",{});var VFt=s(Nme);TMo=r(VFt,"donut"),VFt.forEach(t),MMo=r(GSe," \u2014 "),ID=n(GSe,"A",{href:!0});var XFt=s(ID);EMo=r(XFt,"DonutProcessor"),XFt.forEach(t),CMo=r(GSe," (Donut model)"),GSe.forEach(t),wMo=i(ge),su=n(ge,"LI",{});var OSe=s(su);qme=n(OSe,"STRONG",{});var zFt=s(qme);AMo=r(zFt,"flava"),zFt.forEach(t),yMo=r(OSe," \u2014 "),ND=n(OSe,"A",{href:!0});var QFt=s(ND);LMo=r(QFt,"FlavaProcessor"),QFt.forEach(t),xMo=r(OSe," (FLAVA model)"),OSe.forEach(t),$Mo=i(ge),lu=n(ge,"LI",{});var VSe=s(lu);jme=n(VSe,"STRONG",{});var WFt=s(jme);kMo=r(WFt,"groupvit"),WFt.forEach(t),SMo=r(VSe," \u2014 "),qD=n(VSe,"A",{href:!0});var UFt=s(qD);RMo=r(UFt,"CLIPProcessor"),UFt.forEach(t),PMo=r(VSe," (GroupViT model)"),VSe.forEach(t),BMo=i(ge),iu=n(ge,"LI",{});var XSe=s(iu);Dme=n(XSe,"STRONG",{});var HFt=s(Dme);IMo=r(HFt,"layoutlmv2"),HFt.forEach(t),NMo=r(XSe," \u2014 "),jD=n(XSe,"A",{href:!0});var JFt=s(jD);qMo=r(JFt,"LayoutLMv2Processor"),JFt.forEach(t),jMo=r(XSe," (LayoutLMv2 model)"),XSe.forEach(t),DMo=i(ge),du=n(ge,"LI",{});var zSe=s(du);Gme=n(zSe,"STRONG",{});var YFt=s(Gme);GMo=r(YFt,"layoutlmv3"),YFt.forEach(t),OMo=r(zSe," \u2014 "),DD=n(zSe,"A",{href:!0});var KFt=s(DD);VMo=r(KFt,"LayoutLMv3Processor"),KFt.forEach(t),XMo=r(zSe," (LayoutLMv3 model)"),zSe.forEach(t),zMo=i(ge),cu=n(ge,"LI",{});var QSe=s(cu);Ome=n(QSe,"STRONG",{});var ZFt=s(Ome);QMo=r(ZFt,"layoutxlm"),ZFt.forEach(t),WMo=r(QSe," \u2014 "),GD=n(QSe,"A",{href:!0});var e7t=s(GD);UMo=r(e7t,"LayoutXLMProcessor"),e7t.forEach(t),HMo=r(QSe," (LayoutXLM model)"),QSe.forEach(t),JMo=i(ge),fu=n(ge,"LI",{});var WSe=s(fu);Vme=n(WSe,"STRONG",{});var o7t=s(Vme);YMo=r(o7t,"owlvit"),o7t.forEach(t),KMo=r(WSe," \u2014 "),OD=n(WSe,"A",{href:!0});var r7t=s(OD);ZMo=r(r7t,"OwlViTProcessor"),r7t.forEach(t),eEo=r(WSe," (OWL-ViT model)"),WSe.forEach(t),oEo=i(ge),mu=n(ge,"LI",{});var USe=s(mu);Xme=n(USe,"STRONG",{});var t7t=s(Xme);rEo=r(t7t,"sew"),t7t.forEach(t),tEo=r(USe," \u2014 "),VD=n(USe,"A",{href:!0});var a7t=s(VD);aEo=r(a7t,"Wav2Vec2Processor"),a7t.forEach(t),nEo=r(USe," (SEW model)"),USe.forEach(t),sEo=i(ge),gu=n(ge,"LI",{});var HSe=s(gu);zme=n(HSe,"STRONG",{});var n7t=s(zme);lEo=r(n7t,"sew-d"),n7t.forEach(t),iEo=r(HSe," \u2014 "),XD=n(HSe,"A",{href:!0});var s7t=s(XD);dEo=r(s7t,"Wav2Vec2Processor"),s7t.forEach(t),cEo=r(HSe," (SEW-D model)"),HSe.forEach(t),fEo=i(ge),hu=n(ge,"LI",{});var JSe=s(hu);Qme=n(JSe,"STRONG",{});var l7t=s(Qme);mEo=r(l7t,"speech_to_text"),l7t.forEach(t),gEo=r(JSe," \u2014 "),zD=n(JSe,"A",{href:!0});var i7t=s(zD);hEo=r(i7t,"Speech2TextProcessor"),i7t.forEach(t),pEo=r(JSe," (Speech2Text model)"),JSe.forEach(t),uEo=i(ge),pu=n(ge,"LI",{});var YSe=s(pu);Wme=n(YSe,"STRONG",{});var d7t=s(Wme);_Eo=r(d7t,"speech_to_text_2"),d7t.forEach(t),bEo=r(YSe," \u2014 "),QD=n(YSe,"A",{href:!0});var c7t=s(QD);vEo=r(c7t,"Speech2Text2Processor"),c7t.forEach(t),FEo=r(YSe," (Speech2Text2 model)"),YSe.forEach(t),TEo=i(ge),uu=n(ge,"LI",{});var KSe=s(uu);Ume=n(KSe,"STRONG",{});var f7t=s(Ume);MEo=r(f7t,"trocr"),f7t.forEach(t),EEo=r(KSe," \u2014 "),WD=n(KSe,"A",{href:!0});var m7t=s(WD);CEo=r(m7t,"TrOCRProcessor"),m7t.forEach(t),wEo=r(KSe," (TrOCR model)"),KSe.forEach(t),AEo=i(ge),_u=n(ge,"LI",{});var ZSe=s(_u);Hme=n(ZSe,"STRONG",{});var g7t=s(Hme);yEo=r(g7t,"unispeech"),g7t.forEach(t),LEo=r(ZSe," \u2014 "),UD=n(ZSe,"A",{href:!0});var h7t=s(UD);xEo=r(h7t,"Wav2Vec2Processor"),h7t.forEach(t),$Eo=r(ZSe," (UniSpeech model)"),ZSe.forEach(t),kEo=i(ge),bu=n(ge,"LI",{});var eRe=s(bu);Jme=n(eRe,"STRONG",{});var p7t=s(Jme);SEo=r(p7t,"unispeech-sat"),p7t.forEach(t),REo=r(eRe," \u2014 "),HD=n(eRe,"A",{href:!0});var u7t=s(HD);PEo=r(u7t,"Wav2Vec2Processor"),u7t.forEach(t),BEo=r(eRe," (UniSpeechSat model)"),eRe.forEach(t),IEo=i(ge),vu=n(ge,"LI",{});var oRe=s(vu);Yme=n(oRe,"STRONG",{});var _7t=s(Yme);NEo=r(_7t,"vilt"),_7t.forEach(t),qEo=r(oRe," \u2014 "),JD=n(oRe,"A",{href:!0});var b7t=s(JD);jEo=r(b7t,"ViltProcessor"),b7t.forEach(t),DEo=r(oRe," (ViLT model)"),oRe.forEach(t),GEo=i(ge),Fu=n(ge,"LI",{});var rRe=s(Fu);Kme=n(rRe,"STRONG",{});var v7t=s(Kme);OEo=r(v7t,"vision-text-dual-encoder"),v7t.forEach(t),VEo=r(rRe," \u2014 "),YD=n(rRe,"A",{href:!0});var F7t=s(YD);XEo=r(F7t,"VisionTextDualEncoderProcessor"),F7t.forEach(t),zEo=r(rRe," (VisionTextDualEncoder model)"),rRe.forEach(t),QEo=i(ge),Tu=n(ge,"LI",{});var tRe=s(Tu);Zme=n(tRe,"STRONG",{});var T7t=s(Zme);WEo=r(T7t,"wav2vec2"),T7t.forEach(t),UEo=r(tRe," \u2014 "),KD=n(tRe,"A",{href:!0});var M7t=s(KD);HEo=r(M7t,"Wav2Vec2Processor"),M7t.forEach(t),JEo=r(tRe," (Wav2Vec2 model)"),tRe.forEach(t),YEo=i(ge),Mu=n(ge,"LI",{});var aRe=s(Mu);ege=n(aRe,"STRONG",{});var E7t=s(ege);KEo=r(E7t,"wav2vec2-conformer"),E7t.forEach(t),ZEo=r(aRe," \u2014 "),ZD=n(aRe,"A",{href:!0});var C7t=s(ZD);e4o=r(C7t,"Wav2Vec2Processor"),C7t.forEach(t),o4o=r(aRe," (Wav2Vec2-Conformer model)"),aRe.forEach(t),r4o=i(ge),Eu=n(ge,"LI",{});var nRe=s(Eu);oge=n(nRe,"STRONG",{});var w7t=s(oge);t4o=r(w7t,"wavlm"),w7t.forEach(t),a4o=r(nRe," \u2014 "),eG=n(nRe,"A",{href:!0});var A7t=s(eG);n4o=r(A7t,"Wav2Vec2Processor"),A7t.forEach(t),s4o=r(nRe," (WavLM model)"),nRe.forEach(t),ge.forEach(t),l4o=i(pa),T(Cu.$$.fragment,pa),i4o=i(pa),T(wu.$$.fragment,pa),pa.forEach(t),d4o=i(bl),Au=n(bl,"DIV",{class:!0});var iYe=s(Au);T(a9.$$.fragment,iYe),c4o=i(iYe),rge=n(iYe,"P",{});var y7t=s(rge);f4o=r(y7t,"Register a new processor for this class."),y7t.forEach(t),iYe.forEach(t),bl.forEach(t),YUe=i(f),id=n(f,"H2",{class:!0});var dYe=s(id);yu=n(dYe,"A",{id:!0,class:!0,href:!0});var L7t=s(yu);tge=n(L7t,"SPAN",{});var x7t=s(tge);T(n9.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),m4o=i(dYe),age=n(dYe,"SPAN",{});var $7t=s(age);g4o=r($7t,"AutoModel"),$7t.forEach(t),dYe.forEach(t),KUe=i(f),Ro=n(f,"DIV",{class:!0});var vl=s(Ro);T(s9.$$.fragment,vl),h4o=i(vl),dd=n(vl,"P",{});var _ne=s(dd);p4o=r(_ne,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),oG=n(_ne,"A",{href:!0});var k7t=s(oG);u4o=r(k7t,"from_pretrained()"),k7t.forEach(t),_4o=r(_ne," class method or the "),rG=n(_ne,"A",{href:!0});var S7t=s(rG);b4o=r(S7t,"from_config()"),S7t.forEach(t),v4o=r(_ne,` class
method.`),_ne.forEach(t),F4o=i(vl),l9=n(vl,"P",{});var cYe=s(l9);T4o=r(cYe,"This class cannot be instantiated directly using "),nge=n(cYe,"CODE",{});var R7t=s(nge);M4o=r(R7t,"__init__()"),R7t.forEach(t),E4o=r(cYe," (throws an error)."),cYe.forEach(t),C4o=i(vl),ht=n(vl,"DIV",{class:!0});var $6=s(ht);T(i9.$$.fragment,$6),w4o=i($6),sge=n($6,"P",{});var P7t=s(sge);A4o=r(P7t,"Instantiates one of the base model classes of the library from a configuration."),P7t.forEach(t),y4o=i($6),cd=n($6,"P",{});var bne=s(cd);L4o=r(bne,`Note:
Loading a model from its configuration file does `),lge=n(bne,"STRONG",{});var B7t=s(lge);x4o=r(B7t,"not"),B7t.forEach(t),$4o=r(bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(bne,"A",{href:!0});var I7t=s(tG);k4o=r(I7t,"from_pretrained()"),I7t.forEach(t),S4o=r(bne," to load the model weights."),bne.forEach(t),R4o=i($6),T(Lu.$$.fragment,$6),$6.forEach(t),P4o=i(vl),Ye=n(vl,"DIV",{class:!0});var ua=s(Ye);T(d9.$$.fragment,ua),B4o=i(ua),ige=n(ua,"P",{});var N7t=s(ige);I4o=r(N7t,"Instantiate one of the base model classes of the library from a pretrained model."),N7t.forEach(t),N4o=i(ua),Wa=n(ua,"P",{});var k6=s(Wa);q4o=r(k6,"The model class to instantiate is selected based on the "),dge=n(k6,"CODE",{});var q7t=s(dge);j4o=r(q7t,"model_type"),q7t.forEach(t),D4o=r(k6,` property of the config object (either
passed as an argument or loaded from `),cge=n(k6,"CODE",{});var j7t=s(cge);G4o=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),O4o=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(k6,"CODE",{});var D7t=s(fge);V4o=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),X4o=r(k6,":"),k6.forEach(t),z4o=i(ua),L=n(ua,"UL",{});var x=s(L);xu=n(x,"LI",{});var sRe=s(xu);mge=n(sRe,"STRONG",{});var G7t=s(mge);Q4o=r(G7t,"albert"),G7t.forEach(t),W4o=r(sRe," \u2014 "),aG=n(sRe,"A",{href:!0});var O7t=s(aG);U4o=r(O7t,"AlbertModel"),O7t.forEach(t),H4o=r(sRe," (ALBERT model)"),sRe.forEach(t),J4o=i(x),$u=n(x,"LI",{});var lRe=s($u);gge=n(lRe,"STRONG",{});var V7t=s(gge);Y4o=r(V7t,"bart"),V7t.forEach(t),K4o=r(lRe," \u2014 "),nG=n(lRe,"A",{href:!0});var X7t=s(nG);Z4o=r(X7t,"BartModel"),X7t.forEach(t),eCo=r(lRe," (BART model)"),lRe.forEach(t),oCo=i(x),ku=n(x,"LI",{});var iRe=s(ku);hge=n(iRe,"STRONG",{});var z7t=s(hge);rCo=r(z7t,"beit"),z7t.forEach(t),tCo=r(iRe," \u2014 "),sG=n(iRe,"A",{href:!0});var Q7t=s(sG);aCo=r(Q7t,"BeitModel"),Q7t.forEach(t),nCo=r(iRe," (BEiT model)"),iRe.forEach(t),sCo=i(x),Su=n(x,"LI",{});var dRe=s(Su);pge=n(dRe,"STRONG",{});var W7t=s(pge);lCo=r(W7t,"bert"),W7t.forEach(t),iCo=r(dRe," \u2014 "),lG=n(dRe,"A",{href:!0});var U7t=s(lG);dCo=r(U7t,"BertModel"),U7t.forEach(t),cCo=r(dRe," (BERT model)"),dRe.forEach(t),fCo=i(x),Ru=n(x,"LI",{});var cRe=s(Ru);uge=n(cRe,"STRONG",{});var H7t=s(uge);mCo=r(H7t,"bert-generation"),H7t.forEach(t),gCo=r(cRe," \u2014 "),iG=n(cRe,"A",{href:!0});var J7t=s(iG);hCo=r(J7t,"BertGenerationEncoder"),J7t.forEach(t),pCo=r(cRe," (Bert Generation model)"),cRe.forEach(t),uCo=i(x),Pu=n(x,"LI",{});var fRe=s(Pu);_ge=n(fRe,"STRONG",{});var Y7t=s(_ge);_Co=r(Y7t,"big_bird"),Y7t.forEach(t),bCo=r(fRe," \u2014 "),dG=n(fRe,"A",{href:!0});var K7t=s(dG);vCo=r(K7t,"BigBirdModel"),K7t.forEach(t),FCo=r(fRe," (BigBird model)"),fRe.forEach(t),TCo=i(x),Bu=n(x,"LI",{});var mRe=s(Bu);bge=n(mRe,"STRONG",{});var Z7t=s(bge);MCo=r(Z7t,"bigbird_pegasus"),Z7t.forEach(t),ECo=r(mRe," \u2014 "),cG=n(mRe,"A",{href:!0});var eTt=s(cG);CCo=r(eTt,"BigBirdPegasusModel"),eTt.forEach(t),wCo=r(mRe," (BigBird-Pegasus model)"),mRe.forEach(t),ACo=i(x),Iu=n(x,"LI",{});var gRe=s(Iu);vge=n(gRe,"STRONG",{});var oTt=s(vge);yCo=r(oTt,"blenderbot"),oTt.forEach(t),LCo=r(gRe," \u2014 "),fG=n(gRe,"A",{href:!0});var rTt=s(fG);xCo=r(rTt,"BlenderbotModel"),rTt.forEach(t),$Co=r(gRe," (Blenderbot model)"),gRe.forEach(t),kCo=i(x),Nu=n(x,"LI",{});var hRe=s(Nu);Fge=n(hRe,"STRONG",{});var tTt=s(Fge);SCo=r(tTt,"blenderbot-small"),tTt.forEach(t),RCo=r(hRe," \u2014 "),mG=n(hRe,"A",{href:!0});var aTt=s(mG);PCo=r(aTt,"BlenderbotSmallModel"),aTt.forEach(t),BCo=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),ICo=i(x),qu=n(x,"LI",{});var pRe=s(qu);Tge=n(pRe,"STRONG",{});var nTt=s(Tge);NCo=r(nTt,"bloom"),nTt.forEach(t),qCo=r(pRe," \u2014 "),gG=n(pRe,"A",{href:!0});var sTt=s(gG);jCo=r(sTt,"BloomModel"),sTt.forEach(t),DCo=r(pRe," (BLOOM model)"),pRe.forEach(t),GCo=i(x),ju=n(x,"LI",{});var uRe=s(ju);Mge=n(uRe,"STRONG",{});var lTt=s(Mge);OCo=r(lTt,"camembert"),lTt.forEach(t),VCo=r(uRe," \u2014 "),hG=n(uRe,"A",{href:!0});var iTt=s(hG);XCo=r(iTt,"CamembertModel"),iTt.forEach(t),zCo=r(uRe," (CamemBERT model)"),uRe.forEach(t),QCo=i(x),Du=n(x,"LI",{});var _Re=s(Du);Ege=n(_Re,"STRONG",{});var dTt=s(Ege);WCo=r(dTt,"canine"),dTt.forEach(t),UCo=r(_Re," \u2014 "),pG=n(_Re,"A",{href:!0});var cTt=s(pG);HCo=r(cTt,"CanineModel"),cTt.forEach(t),JCo=r(_Re," (CANINE model)"),_Re.forEach(t),YCo=i(x),Gu=n(x,"LI",{});var bRe=s(Gu);Cge=n(bRe,"STRONG",{});var fTt=s(Cge);KCo=r(fTt,"clip"),fTt.forEach(t),ZCo=r(bRe," \u2014 "),uG=n(bRe,"A",{href:!0});var mTt=s(uG);e5o=r(mTt,"CLIPModel"),mTt.forEach(t),o5o=r(bRe," (CLIP model)"),bRe.forEach(t),r5o=i(x),Ou=n(x,"LI",{});var vRe=s(Ou);wge=n(vRe,"STRONG",{});var gTt=s(wge);t5o=r(gTt,"codegen"),gTt.forEach(t),a5o=r(vRe," \u2014 "),_G=n(vRe,"A",{href:!0});var hTt=s(_G);n5o=r(hTt,"CodeGenModel"),hTt.forEach(t),s5o=r(vRe," (CodeGen model)"),vRe.forEach(t),l5o=i(x),Vu=n(x,"LI",{});var FRe=s(Vu);Age=n(FRe,"STRONG",{});var pTt=s(Age);i5o=r(pTt,"convbert"),pTt.forEach(t),d5o=r(FRe," \u2014 "),bG=n(FRe,"A",{href:!0});var uTt=s(bG);c5o=r(uTt,"ConvBertModel"),uTt.forEach(t),f5o=r(FRe," (ConvBERT model)"),FRe.forEach(t),m5o=i(x),Xu=n(x,"LI",{});var TRe=s(Xu);yge=n(TRe,"STRONG",{});var _Tt=s(yge);g5o=r(_Tt,"convnext"),_Tt.forEach(t),h5o=r(TRe," \u2014 "),vG=n(TRe,"A",{href:!0});var bTt=s(vG);p5o=r(bTt,"ConvNextModel"),bTt.forEach(t),u5o=r(TRe," (ConvNeXT model)"),TRe.forEach(t),_5o=i(x),zu=n(x,"LI",{});var MRe=s(zu);Lge=n(MRe,"STRONG",{});var vTt=s(Lge);b5o=r(vTt,"ctrl"),vTt.forEach(t),v5o=r(MRe," \u2014 "),FG=n(MRe,"A",{href:!0});var FTt=s(FG);F5o=r(FTt,"CTRLModel"),FTt.forEach(t),T5o=r(MRe," (CTRL model)"),MRe.forEach(t),M5o=i(x),Qu=n(x,"LI",{});var ERe=s(Qu);xge=n(ERe,"STRONG",{});var TTt=s(xge);E5o=r(TTt,"cvt"),TTt.forEach(t),C5o=r(ERe," \u2014 "),TG=n(ERe,"A",{href:!0});var MTt=s(TG);w5o=r(MTt,"CvtModel"),MTt.forEach(t),A5o=r(ERe," (CvT model)"),ERe.forEach(t),y5o=i(x),Wu=n(x,"LI",{});var CRe=s(Wu);$ge=n(CRe,"STRONG",{});var ETt=s($ge);L5o=r(ETt,"data2vec-audio"),ETt.forEach(t),x5o=r(CRe," \u2014 "),MG=n(CRe,"A",{href:!0});var CTt=s(MG);$5o=r(CTt,"Data2VecAudioModel"),CTt.forEach(t),k5o=r(CRe," (Data2VecAudio model)"),CRe.forEach(t),S5o=i(x),Uu=n(x,"LI",{});var wRe=s(Uu);kge=n(wRe,"STRONG",{});var wTt=s(kge);R5o=r(wTt,"data2vec-text"),wTt.forEach(t),P5o=r(wRe," \u2014 "),EG=n(wRe,"A",{href:!0});var ATt=s(EG);B5o=r(ATt,"Data2VecTextModel"),ATt.forEach(t),I5o=r(wRe," (Data2VecText model)"),wRe.forEach(t),N5o=i(x),Hu=n(x,"LI",{});var ARe=s(Hu);Sge=n(ARe,"STRONG",{});var yTt=s(Sge);q5o=r(yTt,"data2vec-vision"),yTt.forEach(t),j5o=r(ARe," \u2014 "),CG=n(ARe,"A",{href:!0});var LTt=s(CG);D5o=r(LTt,"Data2VecVisionModel"),LTt.forEach(t),G5o=r(ARe," (Data2VecVision model)"),ARe.forEach(t),O5o=i(x),Ju=n(x,"LI",{});var yRe=s(Ju);Rge=n(yRe,"STRONG",{});var xTt=s(Rge);V5o=r(xTt,"deberta"),xTt.forEach(t),X5o=r(yRe," \u2014 "),wG=n(yRe,"A",{href:!0});var $Tt=s(wG);z5o=r($Tt,"DebertaModel"),$Tt.forEach(t),Q5o=r(yRe," (DeBERTa model)"),yRe.forEach(t),W5o=i(x),Yu=n(x,"LI",{});var LRe=s(Yu);Pge=n(LRe,"STRONG",{});var kTt=s(Pge);U5o=r(kTt,"deberta-v2"),kTt.forEach(t),H5o=r(LRe," \u2014 "),AG=n(LRe,"A",{href:!0});var STt=s(AG);J5o=r(STt,"DebertaV2Model"),STt.forEach(t),Y5o=r(LRe," (DeBERTa-v2 model)"),LRe.forEach(t),K5o=i(x),Ku=n(x,"LI",{});var xRe=s(Ku);Bge=n(xRe,"STRONG",{});var RTt=s(Bge);Z5o=r(RTt,"decision_transformer"),RTt.forEach(t),e0o=r(xRe," \u2014 "),yG=n(xRe,"A",{href:!0});var PTt=s(yG);o0o=r(PTt,"DecisionTransformerModel"),PTt.forEach(t),r0o=r(xRe," (Decision Transformer model)"),xRe.forEach(t),t0o=i(x),Zu=n(x,"LI",{});var $Re=s(Zu);Ige=n($Re,"STRONG",{});var BTt=s(Ige);a0o=r(BTt,"deit"),BTt.forEach(t),n0o=r($Re," \u2014 "),LG=n($Re,"A",{href:!0});var ITt=s(LG);s0o=r(ITt,"DeiTModel"),ITt.forEach(t),l0o=r($Re," (DeiT model)"),$Re.forEach(t),i0o=i(x),e_=n(x,"LI",{});var kRe=s(e_);Nge=n(kRe,"STRONG",{});var NTt=s(Nge);d0o=r(NTt,"detr"),NTt.forEach(t),c0o=r(kRe," \u2014 "),xG=n(kRe,"A",{href:!0});var qTt=s(xG);f0o=r(qTt,"DetrModel"),qTt.forEach(t),m0o=r(kRe," (DETR model)"),kRe.forEach(t),g0o=i(x),o_=n(x,"LI",{});var SRe=s(o_);qge=n(SRe,"STRONG",{});var jTt=s(qge);h0o=r(jTt,"distilbert"),jTt.forEach(t),p0o=r(SRe," \u2014 "),$G=n(SRe,"A",{href:!0});var DTt=s($G);u0o=r(DTt,"DistilBertModel"),DTt.forEach(t),_0o=r(SRe," (DistilBERT model)"),SRe.forEach(t),b0o=i(x),r_=n(x,"LI",{});var RRe=s(r_);jge=n(RRe,"STRONG",{});var GTt=s(jge);v0o=r(GTt,"donut-swin"),GTt.forEach(t),F0o=r(RRe," \u2014 "),kG=n(RRe,"A",{href:!0});var OTt=s(kG);T0o=r(OTt,"DonutSwinModel"),OTt.forEach(t),M0o=r(RRe," (DonutSwin model)"),RRe.forEach(t),E0o=i(x),t_=n(x,"LI",{});var PRe=s(t_);Dge=n(PRe,"STRONG",{});var VTt=s(Dge);C0o=r(VTt,"dpr"),VTt.forEach(t),w0o=r(PRe," \u2014 "),SG=n(PRe,"A",{href:!0});var XTt=s(SG);A0o=r(XTt,"DPRQuestionEncoder"),XTt.forEach(t),y0o=r(PRe," (DPR model)"),PRe.forEach(t),L0o=i(x),a_=n(x,"LI",{});var BRe=s(a_);Gge=n(BRe,"STRONG",{});var zTt=s(Gge);x0o=r(zTt,"dpt"),zTt.forEach(t),$0o=r(BRe," \u2014 "),RG=n(BRe,"A",{href:!0});var QTt=s(RG);k0o=r(QTt,"DPTModel"),QTt.forEach(t),S0o=r(BRe," (DPT model)"),BRe.forEach(t),R0o=i(x),n_=n(x,"LI",{});var IRe=s(n_);Oge=n(IRe,"STRONG",{});var WTt=s(Oge);P0o=r(WTt,"electra"),WTt.forEach(t),B0o=r(IRe," \u2014 "),PG=n(IRe,"A",{href:!0});var UTt=s(PG);I0o=r(UTt,"ElectraModel"),UTt.forEach(t),N0o=r(IRe," (ELECTRA model)"),IRe.forEach(t),q0o=i(x),s_=n(x,"LI",{});var NRe=s(s_);Vge=n(NRe,"STRONG",{});var HTt=s(Vge);j0o=r(HTt,"flaubert"),HTt.forEach(t),D0o=r(NRe," \u2014 "),BG=n(NRe,"A",{href:!0});var JTt=s(BG);G0o=r(JTt,"FlaubertModel"),JTt.forEach(t),O0o=r(NRe," (FlauBERT model)"),NRe.forEach(t),V0o=i(x),l_=n(x,"LI",{});var qRe=s(l_);Xge=n(qRe,"STRONG",{});var YTt=s(Xge);X0o=r(YTt,"flava"),YTt.forEach(t),z0o=r(qRe," \u2014 "),IG=n(qRe,"A",{href:!0});var KTt=s(IG);Q0o=r(KTt,"FlavaModel"),KTt.forEach(t),W0o=r(qRe," (FLAVA model)"),qRe.forEach(t),U0o=i(x),i_=n(x,"LI",{});var jRe=s(i_);zge=n(jRe,"STRONG",{});var ZTt=s(zge);H0o=r(ZTt,"fnet"),ZTt.forEach(t),J0o=r(jRe," \u2014 "),NG=n(jRe,"A",{href:!0});var e8t=s(NG);Y0o=r(e8t,"FNetModel"),e8t.forEach(t),K0o=r(jRe," (FNet model)"),jRe.forEach(t),Z0o=i(x),d_=n(x,"LI",{});var DRe=s(d_);Qge=n(DRe,"STRONG",{});var o8t=s(Qge);ewo=r(o8t,"fsmt"),o8t.forEach(t),owo=r(DRe," \u2014 "),qG=n(DRe,"A",{href:!0});var r8t=s(qG);rwo=r(r8t,"FSMTModel"),r8t.forEach(t),two=r(DRe," (FairSeq Machine-Translation model)"),DRe.forEach(t),awo=i(x),cl=n(x,"LI",{});var EP=s(cl);Wge=n(EP,"STRONG",{});var t8t=s(Wge);nwo=r(t8t,"funnel"),t8t.forEach(t),swo=r(EP," \u2014 "),jG=n(EP,"A",{href:!0});var a8t=s(jG);lwo=r(a8t,"FunnelModel"),a8t.forEach(t),iwo=r(EP," or "),DG=n(EP,"A",{href:!0});var n8t=s(DG);dwo=r(n8t,"FunnelBaseModel"),n8t.forEach(t),cwo=r(EP," (Funnel Transformer model)"),EP.forEach(t),fwo=i(x),c_=n(x,"LI",{});var GRe=s(c_);Uge=n(GRe,"STRONG",{});var s8t=s(Uge);mwo=r(s8t,"glpn"),s8t.forEach(t),gwo=r(GRe," \u2014 "),GG=n(GRe,"A",{href:!0});var l8t=s(GG);hwo=r(l8t,"GLPNModel"),l8t.forEach(t),pwo=r(GRe," (GLPN model)"),GRe.forEach(t),uwo=i(x),f_=n(x,"LI",{});var ORe=s(f_);Hge=n(ORe,"STRONG",{});var i8t=s(Hge);_wo=r(i8t,"gpt2"),i8t.forEach(t),bwo=r(ORe," \u2014 "),OG=n(ORe,"A",{href:!0});var d8t=s(OG);vwo=r(d8t,"GPT2Model"),d8t.forEach(t),Fwo=r(ORe," (OpenAI GPT-2 model)"),ORe.forEach(t),Two=i(x),m_=n(x,"LI",{});var VRe=s(m_);Jge=n(VRe,"STRONG",{});var c8t=s(Jge);Mwo=r(c8t,"gpt_neo"),c8t.forEach(t),Ewo=r(VRe," \u2014 "),VG=n(VRe,"A",{href:!0});var f8t=s(VG);Cwo=r(f8t,"GPTNeoModel"),f8t.forEach(t),wwo=r(VRe," (GPT Neo model)"),VRe.forEach(t),Awo=i(x),g_=n(x,"LI",{});var XRe=s(g_);Yge=n(XRe,"STRONG",{});var m8t=s(Yge);ywo=r(m8t,"gpt_neox"),m8t.forEach(t),Lwo=r(XRe," \u2014 "),XG=n(XRe,"A",{href:!0});var g8t=s(XG);xwo=r(g8t,"GPTNeoXModel"),g8t.forEach(t),$wo=r(XRe," (GPT NeoX model)"),XRe.forEach(t),kwo=i(x),h_=n(x,"LI",{});var zRe=s(h_);Kge=n(zRe,"STRONG",{});var h8t=s(Kge);Swo=r(h8t,"gptj"),h8t.forEach(t),Rwo=r(zRe," \u2014 "),zG=n(zRe,"A",{href:!0});var p8t=s(zG);Pwo=r(p8t,"GPTJModel"),p8t.forEach(t),Bwo=r(zRe," (GPT-J model)"),zRe.forEach(t),Iwo=i(x),p_=n(x,"LI",{});var QRe=s(p_);Zge=n(QRe,"STRONG",{});var u8t=s(Zge);Nwo=r(u8t,"groupvit"),u8t.forEach(t),qwo=r(QRe," \u2014 "),QG=n(QRe,"A",{href:!0});var _8t=s(QG);jwo=r(_8t,"GroupViTModel"),_8t.forEach(t),Dwo=r(QRe," (GroupViT model)"),QRe.forEach(t),Gwo=i(x),u_=n(x,"LI",{});var WRe=s(u_);ehe=n(WRe,"STRONG",{});var b8t=s(ehe);Owo=r(b8t,"hubert"),b8t.forEach(t),Vwo=r(WRe," \u2014 "),WG=n(WRe,"A",{href:!0});var v8t=s(WG);Xwo=r(v8t,"HubertModel"),v8t.forEach(t),zwo=r(WRe," (Hubert model)"),WRe.forEach(t),Qwo=i(x),__=n(x,"LI",{});var URe=s(__);ohe=n(URe,"STRONG",{});var F8t=s(ohe);Wwo=r(F8t,"ibert"),F8t.forEach(t),Uwo=r(URe," \u2014 "),UG=n(URe,"A",{href:!0});var T8t=s(UG);Hwo=r(T8t,"IBertModel"),T8t.forEach(t),Jwo=r(URe," (I-BERT model)"),URe.forEach(t),Ywo=i(x),b_=n(x,"LI",{});var HRe=s(b_);rhe=n(HRe,"STRONG",{});var M8t=s(rhe);Kwo=r(M8t,"imagegpt"),M8t.forEach(t),Zwo=r(HRe," \u2014 "),HG=n(HRe,"A",{href:!0});var E8t=s(HG);eAo=r(E8t,"ImageGPTModel"),E8t.forEach(t),oAo=r(HRe," (ImageGPT model)"),HRe.forEach(t),rAo=i(x),v_=n(x,"LI",{});var JRe=s(v_);the=n(JRe,"STRONG",{});var C8t=s(the);tAo=r(C8t,"layoutlm"),C8t.forEach(t),aAo=r(JRe," \u2014 "),JG=n(JRe,"A",{href:!0});var w8t=s(JG);nAo=r(w8t,"LayoutLMModel"),w8t.forEach(t),sAo=r(JRe," (LayoutLM model)"),JRe.forEach(t),lAo=i(x),F_=n(x,"LI",{});var YRe=s(F_);ahe=n(YRe,"STRONG",{});var A8t=s(ahe);iAo=r(A8t,"layoutlmv2"),A8t.forEach(t),dAo=r(YRe," \u2014 "),YG=n(YRe,"A",{href:!0});var y8t=s(YG);cAo=r(y8t,"LayoutLMv2Model"),y8t.forEach(t),fAo=r(YRe," (LayoutLMv2 model)"),YRe.forEach(t),mAo=i(x),T_=n(x,"LI",{});var KRe=s(T_);nhe=n(KRe,"STRONG",{});var L8t=s(nhe);gAo=r(L8t,"layoutlmv3"),L8t.forEach(t),hAo=r(KRe," \u2014 "),KG=n(KRe,"A",{href:!0});var x8t=s(KG);pAo=r(x8t,"LayoutLMv3Model"),x8t.forEach(t),uAo=r(KRe," (LayoutLMv3 model)"),KRe.forEach(t),_Ao=i(x),M_=n(x,"LI",{});var ZRe=s(M_);she=n(ZRe,"STRONG",{});var $8t=s(she);bAo=r($8t,"led"),$8t.forEach(t),vAo=r(ZRe," \u2014 "),ZG=n(ZRe,"A",{href:!0});var k8t=s(ZG);FAo=r(k8t,"LEDModel"),k8t.forEach(t),TAo=r(ZRe," (LED model)"),ZRe.forEach(t),MAo=i(x),E_=n(x,"LI",{});var ePe=s(E_);lhe=n(ePe,"STRONG",{});var S8t=s(lhe);EAo=r(S8t,"levit"),S8t.forEach(t),CAo=r(ePe," \u2014 "),eO=n(ePe,"A",{href:!0});var R8t=s(eO);wAo=r(R8t,"LevitModel"),R8t.forEach(t),AAo=r(ePe," (LeViT model)"),ePe.forEach(t),yAo=i(x),C_=n(x,"LI",{});var oPe=s(C_);ihe=n(oPe,"STRONG",{});var P8t=s(ihe);LAo=r(P8t,"longformer"),P8t.forEach(t),xAo=r(oPe," \u2014 "),oO=n(oPe,"A",{href:!0});var B8t=s(oO);$Ao=r(B8t,"LongformerModel"),B8t.forEach(t),kAo=r(oPe," (Longformer model)"),oPe.forEach(t),SAo=i(x),w_=n(x,"LI",{});var rPe=s(w_);dhe=n(rPe,"STRONG",{});var I8t=s(dhe);RAo=r(I8t,"longt5"),I8t.forEach(t),PAo=r(rPe," \u2014 "),rO=n(rPe,"A",{href:!0});var N8t=s(rO);BAo=r(N8t,"LongT5Model"),N8t.forEach(t),IAo=r(rPe," (LongT5 model)"),rPe.forEach(t),NAo=i(x),A_=n(x,"LI",{});var tPe=s(A_);che=n(tPe,"STRONG",{});var q8t=s(che);qAo=r(q8t,"luke"),q8t.forEach(t),jAo=r(tPe," \u2014 "),tO=n(tPe,"A",{href:!0});var j8t=s(tO);DAo=r(j8t,"LukeModel"),j8t.forEach(t),GAo=r(tPe," (LUKE model)"),tPe.forEach(t),OAo=i(x),y_=n(x,"LI",{});var aPe=s(y_);fhe=n(aPe,"STRONG",{});var D8t=s(fhe);VAo=r(D8t,"lxmert"),D8t.forEach(t),XAo=r(aPe," \u2014 "),aO=n(aPe,"A",{href:!0});var G8t=s(aO);zAo=r(G8t,"LxmertModel"),G8t.forEach(t),QAo=r(aPe," (LXMERT model)"),aPe.forEach(t),WAo=i(x),L_=n(x,"LI",{});var nPe=s(L_);mhe=n(nPe,"STRONG",{});var O8t=s(mhe);UAo=r(O8t,"m2m_100"),O8t.forEach(t),HAo=r(nPe," \u2014 "),nO=n(nPe,"A",{href:!0});var V8t=s(nO);JAo=r(V8t,"M2M100Model"),V8t.forEach(t),YAo=r(nPe," (M2M100 model)"),nPe.forEach(t),KAo=i(x),x_=n(x,"LI",{});var sPe=s(x_);ghe=n(sPe,"STRONG",{});var X8t=s(ghe);ZAo=r(X8t,"marian"),X8t.forEach(t),e6o=r(sPe," \u2014 "),sO=n(sPe,"A",{href:!0});var z8t=s(sO);o6o=r(z8t,"MarianModel"),z8t.forEach(t),r6o=r(sPe," (Marian model)"),sPe.forEach(t),t6o=i(x),$_=n(x,"LI",{});var lPe=s($_);hhe=n(lPe,"STRONG",{});var Q8t=s(hhe);a6o=r(Q8t,"maskformer"),Q8t.forEach(t),n6o=r(lPe," \u2014 "),lO=n(lPe,"A",{href:!0});var W8t=s(lO);s6o=r(W8t,"MaskFormerModel"),W8t.forEach(t),l6o=r(lPe," (MaskFormer model)"),lPe.forEach(t),i6o=i(x),k_=n(x,"LI",{});var iPe=s(k_);phe=n(iPe,"STRONG",{});var U8t=s(phe);d6o=r(U8t,"mbart"),U8t.forEach(t),c6o=r(iPe," \u2014 "),iO=n(iPe,"A",{href:!0});var H8t=s(iO);f6o=r(H8t,"MBartModel"),H8t.forEach(t),m6o=r(iPe," (mBART model)"),iPe.forEach(t),g6o=i(x),S_=n(x,"LI",{});var dPe=s(S_);uhe=n(dPe,"STRONG",{});var J8t=s(uhe);h6o=r(J8t,"mctct"),J8t.forEach(t),p6o=r(dPe," \u2014 "),dO=n(dPe,"A",{href:!0});var Y8t=s(dO);u6o=r(Y8t,"MCTCTModel"),Y8t.forEach(t),_6o=r(dPe," (M-CTC-T model)"),dPe.forEach(t),b6o=i(x),R_=n(x,"LI",{});var cPe=s(R_);_he=n(cPe,"STRONG",{});var K8t=s(_he);v6o=r(K8t,"megatron-bert"),K8t.forEach(t),F6o=r(cPe," \u2014 "),cO=n(cPe,"A",{href:!0});var Z8t=s(cO);T6o=r(Z8t,"MegatronBertModel"),Z8t.forEach(t),M6o=r(cPe," (Megatron-BERT model)"),cPe.forEach(t),E6o=i(x),P_=n(x,"LI",{});var fPe=s(P_);bhe=n(fPe,"STRONG",{});var eMt=s(bhe);C6o=r(eMt,"mobilebert"),eMt.forEach(t),w6o=r(fPe," \u2014 "),fO=n(fPe,"A",{href:!0});var oMt=s(fO);A6o=r(oMt,"MobileBertModel"),oMt.forEach(t),y6o=r(fPe," (MobileBERT model)"),fPe.forEach(t),L6o=i(x),B_=n(x,"LI",{});var mPe=s(B_);vhe=n(mPe,"STRONG",{});var rMt=s(vhe);x6o=r(rMt,"mobilevit"),rMt.forEach(t),$6o=r(mPe," \u2014 "),mO=n(mPe,"A",{href:!0});var tMt=s(mO);k6o=r(tMt,"MobileViTModel"),tMt.forEach(t),S6o=r(mPe," (MobileViT model)"),mPe.forEach(t),R6o=i(x),I_=n(x,"LI",{});var gPe=s(I_);Fhe=n(gPe,"STRONG",{});var aMt=s(Fhe);P6o=r(aMt,"mpnet"),aMt.forEach(t),B6o=r(gPe," \u2014 "),gO=n(gPe,"A",{href:!0});var nMt=s(gO);I6o=r(nMt,"MPNetModel"),nMt.forEach(t),N6o=r(gPe," (MPNet model)"),gPe.forEach(t),q6o=i(x),N_=n(x,"LI",{});var hPe=s(N_);The=n(hPe,"STRONG",{});var sMt=s(The);j6o=r(sMt,"mt5"),sMt.forEach(t),D6o=r(hPe," \u2014 "),hO=n(hPe,"A",{href:!0});var lMt=s(hO);G6o=r(lMt,"MT5Model"),lMt.forEach(t),O6o=r(hPe," (MT5 model)"),hPe.forEach(t),V6o=i(x),q_=n(x,"LI",{});var pPe=s(q_);Mhe=n(pPe,"STRONG",{});var iMt=s(Mhe);X6o=r(iMt,"mvp"),iMt.forEach(t),z6o=r(pPe," \u2014 "),pO=n(pPe,"A",{href:!0});var dMt=s(pO);Q6o=r(dMt,"MvpModel"),dMt.forEach(t),W6o=r(pPe," (MVP model)"),pPe.forEach(t),U6o=i(x),j_=n(x,"LI",{});var uPe=s(j_);Ehe=n(uPe,"STRONG",{});var cMt=s(Ehe);H6o=r(cMt,"nezha"),cMt.forEach(t),J6o=r(uPe," \u2014 "),uO=n(uPe,"A",{href:!0});var fMt=s(uO);Y6o=r(fMt,"NezhaModel"),fMt.forEach(t),K6o=r(uPe," (Nezha model)"),uPe.forEach(t),Z6o=i(x),D_=n(x,"LI",{});var _Pe=s(D_);Che=n(_Pe,"STRONG",{});var mMt=s(Che);eyo=r(mMt,"nllb"),mMt.forEach(t),oyo=r(_Pe," \u2014 "),_O=n(_Pe,"A",{href:!0});var gMt=s(_O);ryo=r(gMt,"M2M100Model"),gMt.forEach(t),tyo=r(_Pe," (NLLB model)"),_Pe.forEach(t),ayo=i(x),G_=n(x,"LI",{});var bPe=s(G_);whe=n(bPe,"STRONG",{});var hMt=s(whe);nyo=r(hMt,"nystromformer"),hMt.forEach(t),syo=r(bPe," \u2014 "),bO=n(bPe,"A",{href:!0});var pMt=s(bO);lyo=r(pMt,"NystromformerModel"),pMt.forEach(t),iyo=r(bPe," (Nystr\xF6mformer model)"),bPe.forEach(t),dyo=i(x),O_=n(x,"LI",{});var vPe=s(O_);Ahe=n(vPe,"STRONG",{});var uMt=s(Ahe);cyo=r(uMt,"openai-gpt"),uMt.forEach(t),fyo=r(vPe," \u2014 "),vO=n(vPe,"A",{href:!0});var _Mt=s(vO);myo=r(_Mt,"OpenAIGPTModel"),_Mt.forEach(t),gyo=r(vPe," (OpenAI GPT model)"),vPe.forEach(t),hyo=i(x),V_=n(x,"LI",{});var FPe=s(V_);yhe=n(FPe,"STRONG",{});var bMt=s(yhe);pyo=r(bMt,"opt"),bMt.forEach(t),uyo=r(FPe," \u2014 "),FO=n(FPe,"A",{href:!0});var vMt=s(FO);_yo=r(vMt,"OPTModel"),vMt.forEach(t),byo=r(FPe," (OPT model)"),FPe.forEach(t),vyo=i(x),X_=n(x,"LI",{});var TPe=s(X_);Lhe=n(TPe,"STRONG",{});var FMt=s(Lhe);Fyo=r(FMt,"owlvit"),FMt.forEach(t),Tyo=r(TPe," \u2014 "),TO=n(TPe,"A",{href:!0});var TMt=s(TO);Myo=r(TMt,"OwlViTModel"),TMt.forEach(t),Eyo=r(TPe," (OWL-ViT model)"),TPe.forEach(t),Cyo=i(x),z_=n(x,"LI",{});var MPe=s(z_);xhe=n(MPe,"STRONG",{});var MMt=s(xhe);wyo=r(MMt,"pegasus"),MMt.forEach(t),Ayo=r(MPe," \u2014 "),MO=n(MPe,"A",{href:!0});var EMt=s(MO);yyo=r(EMt,"PegasusModel"),EMt.forEach(t),Lyo=r(MPe," (Pegasus model)"),MPe.forEach(t),xyo=i(x),Q_=n(x,"LI",{});var EPe=s(Q_);$he=n(EPe,"STRONG",{});var CMt=s($he);$yo=r(CMt,"perceiver"),CMt.forEach(t),kyo=r(EPe," \u2014 "),EO=n(EPe,"A",{href:!0});var wMt=s(EO);Syo=r(wMt,"PerceiverModel"),wMt.forEach(t),Ryo=r(EPe," (Perceiver model)"),EPe.forEach(t),Pyo=i(x),W_=n(x,"LI",{});var CPe=s(W_);khe=n(CPe,"STRONG",{});var AMt=s(khe);Byo=r(AMt,"plbart"),AMt.forEach(t),Iyo=r(CPe," \u2014 "),CO=n(CPe,"A",{href:!0});var yMt=s(CO);Nyo=r(yMt,"PLBartModel"),yMt.forEach(t),qyo=r(CPe," (PLBart model)"),CPe.forEach(t),jyo=i(x),U_=n(x,"LI",{});var wPe=s(U_);She=n(wPe,"STRONG",{});var LMt=s(She);Dyo=r(LMt,"poolformer"),LMt.forEach(t),Gyo=r(wPe," \u2014 "),wO=n(wPe,"A",{href:!0});var xMt=s(wO);Oyo=r(xMt,"PoolFormerModel"),xMt.forEach(t),Vyo=r(wPe," (PoolFormer model)"),wPe.forEach(t),Xyo=i(x),H_=n(x,"LI",{});var APe=s(H_);Rhe=n(APe,"STRONG",{});var $Mt=s(Rhe);zyo=r($Mt,"prophetnet"),$Mt.forEach(t),Qyo=r(APe," \u2014 "),AO=n(APe,"A",{href:!0});var kMt=s(AO);Wyo=r(kMt,"ProphetNetModel"),kMt.forEach(t),Uyo=r(APe," (ProphetNet model)"),APe.forEach(t),Hyo=i(x),J_=n(x,"LI",{});var yPe=s(J_);Phe=n(yPe,"STRONG",{});var SMt=s(Phe);Jyo=r(SMt,"qdqbert"),SMt.forEach(t),Yyo=r(yPe," \u2014 "),yO=n(yPe,"A",{href:!0});var RMt=s(yO);Kyo=r(RMt,"QDQBertModel"),RMt.forEach(t),Zyo=r(yPe," (QDQBert model)"),yPe.forEach(t),eLo=i(x),Y_=n(x,"LI",{});var LPe=s(Y_);Bhe=n(LPe,"STRONG",{});var PMt=s(Bhe);oLo=r(PMt,"reformer"),PMt.forEach(t),rLo=r(LPe," \u2014 "),LO=n(LPe,"A",{href:!0});var BMt=s(LO);tLo=r(BMt,"ReformerModel"),BMt.forEach(t),aLo=r(LPe," (Reformer model)"),LPe.forEach(t),nLo=i(x),K_=n(x,"LI",{});var xPe=s(K_);Ihe=n(xPe,"STRONG",{});var IMt=s(Ihe);sLo=r(IMt,"regnet"),IMt.forEach(t),lLo=r(xPe," \u2014 "),xO=n(xPe,"A",{href:!0});var NMt=s(xO);iLo=r(NMt,"RegNetModel"),NMt.forEach(t),dLo=r(xPe," (RegNet model)"),xPe.forEach(t),cLo=i(x),Z_=n(x,"LI",{});var $Pe=s(Z_);Nhe=n($Pe,"STRONG",{});var qMt=s(Nhe);fLo=r(qMt,"rembert"),qMt.forEach(t),mLo=r($Pe," \u2014 "),$O=n($Pe,"A",{href:!0});var jMt=s($O);gLo=r(jMt,"RemBertModel"),jMt.forEach(t),hLo=r($Pe," (RemBERT model)"),$Pe.forEach(t),pLo=i(x),e2=n(x,"LI",{});var kPe=s(e2);qhe=n(kPe,"STRONG",{});var DMt=s(qhe);uLo=r(DMt,"resnet"),DMt.forEach(t),_Lo=r(kPe," \u2014 "),kO=n(kPe,"A",{href:!0});var GMt=s(kO);bLo=r(GMt,"ResNetModel"),GMt.forEach(t),vLo=r(kPe," (ResNet model)"),kPe.forEach(t),FLo=i(x),o2=n(x,"LI",{});var SPe=s(o2);jhe=n(SPe,"STRONG",{});var OMt=s(jhe);TLo=r(OMt,"retribert"),OMt.forEach(t),MLo=r(SPe," \u2014 "),SO=n(SPe,"A",{href:!0});var VMt=s(SO);ELo=r(VMt,"RetriBertModel"),VMt.forEach(t),CLo=r(SPe," (RetriBERT model)"),SPe.forEach(t),wLo=i(x),r2=n(x,"LI",{});var RPe=s(r2);Dhe=n(RPe,"STRONG",{});var XMt=s(Dhe);ALo=r(XMt,"roberta"),XMt.forEach(t),yLo=r(RPe," \u2014 "),RO=n(RPe,"A",{href:!0});var zMt=s(RO);LLo=r(zMt,"RobertaModel"),zMt.forEach(t),xLo=r(RPe," (RoBERTa model)"),RPe.forEach(t),$Lo=i(x),t2=n(x,"LI",{});var PPe=s(t2);Ghe=n(PPe,"STRONG",{});var QMt=s(Ghe);kLo=r(QMt,"roformer"),QMt.forEach(t),SLo=r(PPe," \u2014 "),PO=n(PPe,"A",{href:!0});var WMt=s(PO);RLo=r(WMt,"RoFormerModel"),WMt.forEach(t),PLo=r(PPe," (RoFormer model)"),PPe.forEach(t),BLo=i(x),a2=n(x,"LI",{});var BPe=s(a2);Ohe=n(BPe,"STRONG",{});var UMt=s(Ohe);ILo=r(UMt,"segformer"),UMt.forEach(t),NLo=r(BPe," \u2014 "),BO=n(BPe,"A",{href:!0});var HMt=s(BO);qLo=r(HMt,"SegformerModel"),HMt.forEach(t),jLo=r(BPe," (SegFormer model)"),BPe.forEach(t),DLo=i(x),n2=n(x,"LI",{});var IPe=s(n2);Vhe=n(IPe,"STRONG",{});var JMt=s(Vhe);GLo=r(JMt,"sew"),JMt.forEach(t),OLo=r(IPe," \u2014 "),IO=n(IPe,"A",{href:!0});var YMt=s(IO);VLo=r(YMt,"SEWModel"),YMt.forEach(t),XLo=r(IPe," (SEW model)"),IPe.forEach(t),zLo=i(x),s2=n(x,"LI",{});var NPe=s(s2);Xhe=n(NPe,"STRONG",{});var KMt=s(Xhe);QLo=r(KMt,"sew-d"),KMt.forEach(t),WLo=r(NPe," \u2014 "),NO=n(NPe,"A",{href:!0});var ZMt=s(NO);ULo=r(ZMt,"SEWDModel"),ZMt.forEach(t),HLo=r(NPe," (SEW-D model)"),NPe.forEach(t),JLo=i(x),l2=n(x,"LI",{});var qPe=s(l2);zhe=n(qPe,"STRONG",{});var eEt=s(zhe);YLo=r(eEt,"speech_to_text"),eEt.forEach(t),KLo=r(qPe," \u2014 "),qO=n(qPe,"A",{href:!0});var oEt=s(qO);ZLo=r(oEt,"Speech2TextModel"),oEt.forEach(t),e9o=r(qPe," (Speech2Text model)"),qPe.forEach(t),o9o=i(x),i2=n(x,"LI",{});var jPe=s(i2);Qhe=n(jPe,"STRONG",{});var rEt=s(Qhe);r9o=r(rEt,"splinter"),rEt.forEach(t),t9o=r(jPe," \u2014 "),jO=n(jPe,"A",{href:!0});var tEt=s(jO);a9o=r(tEt,"SplinterModel"),tEt.forEach(t),n9o=r(jPe," (Splinter model)"),jPe.forEach(t),s9o=i(x),d2=n(x,"LI",{});var DPe=s(d2);Whe=n(DPe,"STRONG",{});var aEt=s(Whe);l9o=r(aEt,"squeezebert"),aEt.forEach(t),i9o=r(DPe," \u2014 "),DO=n(DPe,"A",{href:!0});var nEt=s(DO);d9o=r(nEt,"SqueezeBertModel"),nEt.forEach(t),c9o=r(DPe," (SqueezeBERT model)"),DPe.forEach(t),f9o=i(x),c2=n(x,"LI",{});var GPe=s(c2);Uhe=n(GPe,"STRONG",{});var sEt=s(Uhe);m9o=r(sEt,"swin"),sEt.forEach(t),g9o=r(GPe," \u2014 "),GO=n(GPe,"A",{href:!0});var lEt=s(GO);h9o=r(lEt,"SwinModel"),lEt.forEach(t),p9o=r(GPe," (Swin Transformer model)"),GPe.forEach(t),u9o=i(x),f2=n(x,"LI",{});var OPe=s(f2);Hhe=n(OPe,"STRONG",{});var iEt=s(Hhe);_9o=r(iEt,"swinv2"),iEt.forEach(t),b9o=r(OPe," \u2014 "),OO=n(OPe,"A",{href:!0});var dEt=s(OO);v9o=r(dEt,"Swinv2Model"),dEt.forEach(t),F9o=r(OPe," (Swin Transformer V2 model)"),OPe.forEach(t),T9o=i(x),m2=n(x,"LI",{});var VPe=s(m2);Jhe=n(VPe,"STRONG",{});var cEt=s(Jhe);M9o=r(cEt,"t5"),cEt.forEach(t),E9o=r(VPe," \u2014 "),VO=n(VPe,"A",{href:!0});var fEt=s(VO);C9o=r(fEt,"T5Model"),fEt.forEach(t),w9o=r(VPe," (T5 model)"),VPe.forEach(t),A9o=i(x),g2=n(x,"LI",{});var XPe=s(g2);Yhe=n(XPe,"STRONG",{});var mEt=s(Yhe);y9o=r(mEt,"tapas"),mEt.forEach(t),L9o=r(XPe," \u2014 "),XO=n(XPe,"A",{href:!0});var gEt=s(XO);x9o=r(gEt,"TapasModel"),gEt.forEach(t),$9o=r(XPe," (TAPAS model)"),XPe.forEach(t),k9o=i(x),h2=n(x,"LI",{});var zPe=s(h2);Khe=n(zPe,"STRONG",{});var hEt=s(Khe);S9o=r(hEt,"trajectory_transformer"),hEt.forEach(t),R9o=r(zPe," \u2014 "),zO=n(zPe,"A",{href:!0});var pEt=s(zO);P9o=r(pEt,"TrajectoryTransformerModel"),pEt.forEach(t),B9o=r(zPe," (Trajectory Transformer model)"),zPe.forEach(t),I9o=i(x),p2=n(x,"LI",{});var QPe=s(p2);Zhe=n(QPe,"STRONG",{});var uEt=s(Zhe);N9o=r(uEt,"transfo-xl"),uEt.forEach(t),q9o=r(QPe," \u2014 "),QO=n(QPe,"A",{href:!0});var _Et=s(QO);j9o=r(_Et,"TransfoXLModel"),_Et.forEach(t),D9o=r(QPe," (Transformer-XL model)"),QPe.forEach(t),G9o=i(x),u2=n(x,"LI",{});var WPe=s(u2);epe=n(WPe,"STRONG",{});var bEt=s(epe);O9o=r(bEt,"unispeech"),bEt.forEach(t),V9o=r(WPe," \u2014 "),WO=n(WPe,"A",{href:!0});var vEt=s(WO);X9o=r(vEt,"UniSpeechModel"),vEt.forEach(t),z9o=r(WPe," (UniSpeech model)"),WPe.forEach(t),Q9o=i(x),_2=n(x,"LI",{});var UPe=s(_2);ope=n(UPe,"STRONG",{});var FEt=s(ope);W9o=r(FEt,"unispeech-sat"),FEt.forEach(t),U9o=r(UPe," \u2014 "),UO=n(UPe,"A",{href:!0});var TEt=s(UO);H9o=r(TEt,"UniSpeechSatModel"),TEt.forEach(t),J9o=r(UPe," (UniSpeechSat model)"),UPe.forEach(t),Y9o=i(x),b2=n(x,"LI",{});var HPe=s(b2);rpe=n(HPe,"STRONG",{});var MEt=s(rpe);K9o=r(MEt,"van"),MEt.forEach(t),Z9o=r(HPe," \u2014 "),HO=n(HPe,"A",{href:!0});var EEt=s(HO);exo=r(EEt,"VanModel"),EEt.forEach(t),oxo=r(HPe," (VAN model)"),HPe.forEach(t),rxo=i(x),v2=n(x,"LI",{});var JPe=s(v2);tpe=n(JPe,"STRONG",{});var CEt=s(tpe);txo=r(CEt,"videomae"),CEt.forEach(t),axo=r(JPe," \u2014 "),JO=n(JPe,"A",{href:!0});var wEt=s(JO);nxo=r(wEt,"VideoMAEModel"),wEt.forEach(t),sxo=r(JPe," (VideoMAE model)"),JPe.forEach(t),lxo=i(x),F2=n(x,"LI",{});var YPe=s(F2);ape=n(YPe,"STRONG",{});var AEt=s(ape);ixo=r(AEt,"vilt"),AEt.forEach(t),dxo=r(YPe," \u2014 "),YO=n(YPe,"A",{href:!0});var yEt=s(YO);cxo=r(yEt,"ViltModel"),yEt.forEach(t),fxo=r(YPe," (ViLT model)"),YPe.forEach(t),mxo=i(x),T2=n(x,"LI",{});var KPe=s(T2);npe=n(KPe,"STRONG",{});var LEt=s(npe);gxo=r(LEt,"vision-text-dual-encoder"),LEt.forEach(t),hxo=r(KPe," \u2014 "),KO=n(KPe,"A",{href:!0});var xEt=s(KO);pxo=r(xEt,"VisionTextDualEncoderModel"),xEt.forEach(t),uxo=r(KPe," (VisionTextDualEncoder model)"),KPe.forEach(t),_xo=i(x),M2=n(x,"LI",{});var ZPe=s(M2);spe=n(ZPe,"STRONG",{});var $Et=s(spe);bxo=r($Et,"visual_bert"),$Et.forEach(t),vxo=r(ZPe," \u2014 "),ZO=n(ZPe,"A",{href:!0});var kEt=s(ZO);Fxo=r(kEt,"VisualBertModel"),kEt.forEach(t),Txo=r(ZPe," (VisualBERT model)"),ZPe.forEach(t),Mxo=i(x),E2=n(x,"LI",{});var eBe=s(E2);lpe=n(eBe,"STRONG",{});var SEt=s(lpe);Exo=r(SEt,"vit"),SEt.forEach(t),Cxo=r(eBe," \u2014 "),eV=n(eBe,"A",{href:!0});var REt=s(eV);wxo=r(REt,"ViTModel"),REt.forEach(t),Axo=r(eBe," (ViT model)"),eBe.forEach(t),yxo=i(x),C2=n(x,"LI",{});var oBe=s(C2);ipe=n(oBe,"STRONG",{});var PEt=s(ipe);Lxo=r(PEt,"vit_mae"),PEt.forEach(t),xxo=r(oBe," \u2014 "),oV=n(oBe,"A",{href:!0});var BEt=s(oV);$xo=r(BEt,"ViTMAEModel"),BEt.forEach(t),kxo=r(oBe," (ViTMAE model)"),oBe.forEach(t),Sxo=i(x),w2=n(x,"LI",{});var rBe=s(w2);dpe=n(rBe,"STRONG",{});var IEt=s(dpe);Rxo=r(IEt,"wav2vec2"),IEt.forEach(t),Pxo=r(rBe," \u2014 "),rV=n(rBe,"A",{href:!0});var NEt=s(rV);Bxo=r(NEt,"Wav2Vec2Model"),NEt.forEach(t),Ixo=r(rBe," (Wav2Vec2 model)"),rBe.forEach(t),Nxo=i(x),A2=n(x,"LI",{});var tBe=s(A2);cpe=n(tBe,"STRONG",{});var qEt=s(cpe);qxo=r(qEt,"wav2vec2-conformer"),qEt.forEach(t),jxo=r(tBe," \u2014 "),tV=n(tBe,"A",{href:!0});var jEt=s(tV);Dxo=r(jEt,"Wav2Vec2ConformerModel"),jEt.forEach(t),Gxo=r(tBe," (Wav2Vec2-Conformer model)"),tBe.forEach(t),Oxo=i(x),y2=n(x,"LI",{});var aBe=s(y2);fpe=n(aBe,"STRONG",{});var DEt=s(fpe);Vxo=r(DEt,"wavlm"),DEt.forEach(t),Xxo=r(aBe," \u2014 "),aV=n(aBe,"A",{href:!0});var GEt=s(aV);zxo=r(GEt,"WavLMModel"),GEt.forEach(t),Qxo=r(aBe," (WavLM model)"),aBe.forEach(t),Wxo=i(x),L2=n(x,"LI",{});var nBe=s(L2);mpe=n(nBe,"STRONG",{});var OEt=s(mpe);Uxo=r(OEt,"xglm"),OEt.forEach(t),Hxo=r(nBe," \u2014 "),nV=n(nBe,"A",{href:!0});var VEt=s(nV);Jxo=r(VEt,"XGLMModel"),VEt.forEach(t),Yxo=r(nBe," (XGLM model)"),nBe.forEach(t),Kxo=i(x),x2=n(x,"LI",{});var sBe=s(x2);gpe=n(sBe,"STRONG",{});var XEt=s(gpe);Zxo=r(XEt,"xlm"),XEt.forEach(t),e$o=r(sBe," \u2014 "),sV=n(sBe,"A",{href:!0});var zEt=s(sV);o$o=r(zEt,"XLMModel"),zEt.forEach(t),r$o=r(sBe," (XLM model)"),sBe.forEach(t),t$o=i(x),$2=n(x,"LI",{});var lBe=s($2);hpe=n(lBe,"STRONG",{});var QEt=s(hpe);a$o=r(QEt,"xlm-prophetnet"),QEt.forEach(t),n$o=r(lBe," \u2014 "),lV=n(lBe,"A",{href:!0});var WEt=s(lV);s$o=r(WEt,"XLMProphetNetModel"),WEt.forEach(t),l$o=r(lBe," (XLM-ProphetNet model)"),lBe.forEach(t),i$o=i(x),k2=n(x,"LI",{});var iBe=s(k2);ppe=n(iBe,"STRONG",{});var UEt=s(ppe);d$o=r(UEt,"xlm-roberta"),UEt.forEach(t),c$o=r(iBe," \u2014 "),iV=n(iBe,"A",{href:!0});var HEt=s(iV);f$o=r(HEt,"XLMRobertaModel"),HEt.forEach(t),m$o=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),g$o=i(x),S2=n(x,"LI",{});var dBe=s(S2);upe=n(dBe,"STRONG",{});var JEt=s(upe);h$o=r(JEt,"xlm-roberta-xl"),JEt.forEach(t),p$o=r(dBe," \u2014 "),dV=n(dBe,"A",{href:!0});var YEt=s(dV);u$o=r(YEt,"XLMRobertaXLModel"),YEt.forEach(t),_$o=r(dBe," (XLM-RoBERTa-XL model)"),dBe.forEach(t),b$o=i(x),R2=n(x,"LI",{});var cBe=s(R2);_pe=n(cBe,"STRONG",{});var KEt=s(_pe);v$o=r(KEt,"xlnet"),KEt.forEach(t),F$o=r(cBe," \u2014 "),cV=n(cBe,"A",{href:!0});var ZEt=s(cV);T$o=r(ZEt,"XLNetModel"),ZEt.forEach(t),M$o=r(cBe," (XLNet model)"),cBe.forEach(t),E$o=i(x),P2=n(x,"LI",{});var fBe=s(P2);bpe=n(fBe,"STRONG",{});var e4t=s(bpe);C$o=r(e4t,"yolos"),e4t.forEach(t),w$o=r(fBe," \u2014 "),fV=n(fBe,"A",{href:!0});var o4t=s(fV);A$o=r(o4t,"YolosModel"),o4t.forEach(t),y$o=r(fBe," (YOLOS model)"),fBe.forEach(t),L$o=i(x),B2=n(x,"LI",{});var mBe=s(B2);vpe=n(mBe,"STRONG",{});var r4t=s(vpe);x$o=r(r4t,"yoso"),r4t.forEach(t),$$o=r(mBe," \u2014 "),mV=n(mBe,"A",{href:!0});var t4t=s(mV);k$o=r(t4t,"YosoModel"),t4t.forEach(t),S$o=r(mBe," (YOSO model)"),mBe.forEach(t),x.forEach(t),R$o=i(ua),I2=n(ua,"P",{});var gBe=s(I2);P$o=r(gBe,"The model is set in evaluation mode by default using "),Fpe=n(gBe,"CODE",{});var a4t=s(Fpe);B$o=r(a4t,"model.eval()"),a4t.forEach(t),I$o=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=n(gBe,"CODE",{});var n4t=s(Tpe);N$o=r(n4t,"model.train()"),n4t.forEach(t),gBe.forEach(t),q$o=i(ua),T(N2.$$.fragment,ua),ua.forEach(t),vl.forEach(t),ZUe=i(f),fd=n(f,"H2",{class:!0});var fYe=s(fd);q2=n(fYe,"A",{id:!0,class:!0,href:!0});var s4t=s(q2);Mpe=n(s4t,"SPAN",{});var l4t=s(Mpe);T(c9.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),j$o=i(fYe),Epe=n(fYe,"SPAN",{});var i4t=s(Epe);D$o=r(i4t,"AutoModelForPreTraining"),i4t.forEach(t),fYe.forEach(t),eHe=i(f),Po=n(f,"DIV",{class:!0});var Fl=s(Po);T(f9.$$.fragment,Fl),G$o=i(Fl),md=n(Fl,"P",{});var vne=s(md);O$o=r(vne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gV=n(vne,"A",{href:!0});var d4t=s(gV);V$o=r(d4t,"from_pretrained()"),d4t.forEach(t),X$o=r(vne," class method or the "),hV=n(vne,"A",{href:!0});var c4t=s(hV);z$o=r(c4t,"from_config()"),c4t.forEach(t),Q$o=r(vne,` class
method.`),vne.forEach(t),W$o=i(Fl),m9=n(Fl,"P",{});var mYe=s(m9);U$o=r(mYe,"This class cannot be instantiated directly using "),Cpe=n(mYe,"CODE",{});var f4t=s(Cpe);H$o=r(f4t,"__init__()"),f4t.forEach(t),J$o=r(mYe," (throws an error)."),mYe.forEach(t),Y$o=i(Fl),pt=n(Fl,"DIV",{class:!0});var S6=s(pt);T(g9.$$.fragment,S6),K$o=i(S6),wpe=n(S6,"P",{});var m4t=s(wpe);Z$o=r(m4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m4t.forEach(t),eko=i(S6),gd=n(S6,"P",{});var Fne=s(gd);oko=r(Fne,`Note:
Loading a model from its configuration file does `),Ape=n(Fne,"STRONG",{});var g4t=s(Ape);rko=r(g4t,"not"),g4t.forEach(t),tko=r(Fne,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(Fne,"A",{href:!0});var h4t=s(pV);ako=r(h4t,"from_pretrained()"),h4t.forEach(t),nko=r(Fne," to load the model weights."),Fne.forEach(t),sko=i(S6),T(j2.$$.fragment,S6),S6.forEach(t),lko=i(Fl),Ke=n(Fl,"DIV",{class:!0});var _a=s(Ke);T(h9.$$.fragment,_a),iko=i(_a),ype=n(_a,"P",{});var p4t=s(ype);dko=r(p4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p4t.forEach(t),cko=i(_a),Ua=n(_a,"P",{});var R6=s(Ua);fko=r(R6,"The model class to instantiate is selected based on the "),Lpe=n(R6,"CODE",{});var u4t=s(Lpe);mko=r(u4t,"model_type"),u4t.forEach(t),gko=r(R6,` property of the config object (either
passed as an argument or loaded from `),xpe=n(R6,"CODE",{});var _4t=s(xpe);hko=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),pko=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=n(R6,"CODE",{});var b4t=s($pe);uko=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),_ko=r(R6,":"),R6.forEach(t),bko=i(_a),G=n(_a,"UL",{});var O=s(G);D2=n(O,"LI",{});var hBe=s(D2);kpe=n(hBe,"STRONG",{});var v4t=s(kpe);vko=r(v4t,"albert"),v4t.forEach(t),Fko=r(hBe," \u2014 "),uV=n(hBe,"A",{href:!0});var F4t=s(uV);Tko=r(F4t,"AlbertForPreTraining"),F4t.forEach(t),Mko=r(hBe," (ALBERT model)"),hBe.forEach(t),Eko=i(O),G2=n(O,"LI",{});var pBe=s(G2);Spe=n(pBe,"STRONG",{});var T4t=s(Spe);Cko=r(T4t,"bart"),T4t.forEach(t),wko=r(pBe," \u2014 "),_V=n(pBe,"A",{href:!0});var M4t=s(_V);Ako=r(M4t,"BartForConditionalGeneration"),M4t.forEach(t),yko=r(pBe," (BART model)"),pBe.forEach(t),Lko=i(O),O2=n(O,"LI",{});var uBe=s(O2);Rpe=n(uBe,"STRONG",{});var E4t=s(Rpe);xko=r(E4t,"bert"),E4t.forEach(t),$ko=r(uBe," \u2014 "),bV=n(uBe,"A",{href:!0});var C4t=s(bV);kko=r(C4t,"BertForPreTraining"),C4t.forEach(t),Sko=r(uBe," (BERT model)"),uBe.forEach(t),Rko=i(O),V2=n(O,"LI",{});var _Be=s(V2);Ppe=n(_Be,"STRONG",{});var w4t=s(Ppe);Pko=r(w4t,"big_bird"),w4t.forEach(t),Bko=r(_Be," \u2014 "),vV=n(_Be,"A",{href:!0});var A4t=s(vV);Iko=r(A4t,"BigBirdForPreTraining"),A4t.forEach(t),Nko=r(_Be," (BigBird model)"),_Be.forEach(t),qko=i(O),X2=n(O,"LI",{});var bBe=s(X2);Bpe=n(bBe,"STRONG",{});var y4t=s(Bpe);jko=r(y4t,"bloom"),y4t.forEach(t),Dko=r(bBe," \u2014 "),FV=n(bBe,"A",{href:!0});var L4t=s(FV);Gko=r(L4t,"BloomForCausalLM"),L4t.forEach(t),Oko=r(bBe," (BLOOM model)"),bBe.forEach(t),Vko=i(O),z2=n(O,"LI",{});var vBe=s(z2);Ipe=n(vBe,"STRONG",{});var x4t=s(Ipe);Xko=r(x4t,"camembert"),x4t.forEach(t),zko=r(vBe," \u2014 "),TV=n(vBe,"A",{href:!0});var $4t=s(TV);Qko=r($4t,"CamembertForMaskedLM"),$4t.forEach(t),Wko=r(vBe," (CamemBERT model)"),vBe.forEach(t),Uko=i(O),Q2=n(O,"LI",{});var FBe=s(Q2);Npe=n(FBe,"STRONG",{});var k4t=s(Npe);Hko=r(k4t,"ctrl"),k4t.forEach(t),Jko=r(FBe," \u2014 "),MV=n(FBe,"A",{href:!0});var S4t=s(MV);Yko=r(S4t,"CTRLLMHeadModel"),S4t.forEach(t),Kko=r(FBe," (CTRL model)"),FBe.forEach(t),Zko=i(O),W2=n(O,"LI",{});var TBe=s(W2);qpe=n(TBe,"STRONG",{});var R4t=s(qpe);eSo=r(R4t,"data2vec-text"),R4t.forEach(t),oSo=r(TBe," \u2014 "),EV=n(TBe,"A",{href:!0});var P4t=s(EV);rSo=r(P4t,"Data2VecTextForMaskedLM"),P4t.forEach(t),tSo=r(TBe," (Data2VecText model)"),TBe.forEach(t),aSo=i(O),U2=n(O,"LI",{});var MBe=s(U2);jpe=n(MBe,"STRONG",{});var B4t=s(jpe);nSo=r(B4t,"deberta"),B4t.forEach(t),sSo=r(MBe," \u2014 "),CV=n(MBe,"A",{href:!0});var I4t=s(CV);lSo=r(I4t,"DebertaForMaskedLM"),I4t.forEach(t),iSo=r(MBe," (DeBERTa model)"),MBe.forEach(t),dSo=i(O),H2=n(O,"LI",{});var EBe=s(H2);Dpe=n(EBe,"STRONG",{});var N4t=s(Dpe);cSo=r(N4t,"deberta-v2"),N4t.forEach(t),fSo=r(EBe," \u2014 "),wV=n(EBe,"A",{href:!0});var q4t=s(wV);mSo=r(q4t,"DebertaV2ForMaskedLM"),q4t.forEach(t),gSo=r(EBe," (DeBERTa-v2 model)"),EBe.forEach(t),hSo=i(O),J2=n(O,"LI",{});var CBe=s(J2);Gpe=n(CBe,"STRONG",{});var j4t=s(Gpe);pSo=r(j4t,"distilbert"),j4t.forEach(t),uSo=r(CBe," \u2014 "),AV=n(CBe,"A",{href:!0});var D4t=s(AV);_So=r(D4t,"DistilBertForMaskedLM"),D4t.forEach(t),bSo=r(CBe," (DistilBERT model)"),CBe.forEach(t),vSo=i(O),Y2=n(O,"LI",{});var wBe=s(Y2);Ope=n(wBe,"STRONG",{});var G4t=s(Ope);FSo=r(G4t,"electra"),G4t.forEach(t),TSo=r(wBe," \u2014 "),yV=n(wBe,"A",{href:!0});var O4t=s(yV);MSo=r(O4t,"ElectraForPreTraining"),O4t.forEach(t),ESo=r(wBe," (ELECTRA model)"),wBe.forEach(t),CSo=i(O),K2=n(O,"LI",{});var ABe=s(K2);Vpe=n(ABe,"STRONG",{});var V4t=s(Vpe);wSo=r(V4t,"flaubert"),V4t.forEach(t),ASo=r(ABe," \u2014 "),LV=n(ABe,"A",{href:!0});var X4t=s(LV);ySo=r(X4t,"FlaubertWithLMHeadModel"),X4t.forEach(t),LSo=r(ABe," (FlauBERT model)"),ABe.forEach(t),xSo=i(O),Z2=n(O,"LI",{});var yBe=s(Z2);Xpe=n(yBe,"STRONG",{});var z4t=s(Xpe);$So=r(z4t,"flava"),z4t.forEach(t),kSo=r(yBe," \u2014 "),xV=n(yBe,"A",{href:!0});var Q4t=s(xV);SSo=r(Q4t,"FlavaForPreTraining"),Q4t.forEach(t),RSo=r(yBe," (FLAVA model)"),yBe.forEach(t),PSo=i(O),e1=n(O,"LI",{});var LBe=s(e1);zpe=n(LBe,"STRONG",{});var W4t=s(zpe);BSo=r(W4t,"fnet"),W4t.forEach(t),ISo=r(LBe," \u2014 "),$V=n(LBe,"A",{href:!0});var U4t=s($V);NSo=r(U4t,"FNetForPreTraining"),U4t.forEach(t),qSo=r(LBe," (FNet model)"),LBe.forEach(t),jSo=i(O),o1=n(O,"LI",{});var xBe=s(o1);Qpe=n(xBe,"STRONG",{});var H4t=s(Qpe);DSo=r(H4t,"fsmt"),H4t.forEach(t),GSo=r(xBe," \u2014 "),kV=n(xBe,"A",{href:!0});var J4t=s(kV);OSo=r(J4t,"FSMTForConditionalGeneration"),J4t.forEach(t),VSo=r(xBe," (FairSeq Machine-Translation model)"),xBe.forEach(t),XSo=i(O),r1=n(O,"LI",{});var $Be=s(r1);Wpe=n($Be,"STRONG",{});var Y4t=s(Wpe);zSo=r(Y4t,"funnel"),Y4t.forEach(t),QSo=r($Be," \u2014 "),SV=n($Be,"A",{href:!0});var K4t=s(SV);WSo=r(K4t,"FunnelForPreTraining"),K4t.forEach(t),USo=r($Be," (Funnel Transformer model)"),$Be.forEach(t),HSo=i(O),t1=n(O,"LI",{});var kBe=s(t1);Upe=n(kBe,"STRONG",{});var Z4t=s(Upe);JSo=r(Z4t,"gpt2"),Z4t.forEach(t),YSo=r(kBe," \u2014 "),RV=n(kBe,"A",{href:!0});var eCt=s(RV);KSo=r(eCt,"GPT2LMHeadModel"),eCt.forEach(t),ZSo=r(kBe," (OpenAI GPT-2 model)"),kBe.forEach(t),eRo=i(O),a1=n(O,"LI",{});var SBe=s(a1);Hpe=n(SBe,"STRONG",{});var oCt=s(Hpe);oRo=r(oCt,"ibert"),oCt.forEach(t),rRo=r(SBe," \u2014 "),PV=n(SBe,"A",{href:!0});var rCt=s(PV);tRo=r(rCt,"IBertForMaskedLM"),rCt.forEach(t),aRo=r(SBe," (I-BERT model)"),SBe.forEach(t),nRo=i(O),n1=n(O,"LI",{});var RBe=s(n1);Jpe=n(RBe,"STRONG",{});var tCt=s(Jpe);sRo=r(tCt,"layoutlm"),tCt.forEach(t),lRo=r(RBe," \u2014 "),BV=n(RBe,"A",{href:!0});var aCt=s(BV);iRo=r(aCt,"LayoutLMForMaskedLM"),aCt.forEach(t),dRo=r(RBe," (LayoutLM model)"),RBe.forEach(t),cRo=i(O),s1=n(O,"LI",{});var PBe=s(s1);Ype=n(PBe,"STRONG",{});var nCt=s(Ype);fRo=r(nCt,"longformer"),nCt.forEach(t),mRo=r(PBe," \u2014 "),IV=n(PBe,"A",{href:!0});var sCt=s(IV);gRo=r(sCt,"LongformerForMaskedLM"),sCt.forEach(t),hRo=r(PBe," (Longformer model)"),PBe.forEach(t),pRo=i(O),l1=n(O,"LI",{});var BBe=s(l1);Kpe=n(BBe,"STRONG",{});var lCt=s(Kpe);uRo=r(lCt,"luke"),lCt.forEach(t),_Ro=r(BBe," \u2014 "),NV=n(BBe,"A",{href:!0});var iCt=s(NV);bRo=r(iCt,"LukeForMaskedLM"),iCt.forEach(t),vRo=r(BBe," (LUKE model)"),BBe.forEach(t),FRo=i(O),i1=n(O,"LI",{});var IBe=s(i1);Zpe=n(IBe,"STRONG",{});var dCt=s(Zpe);TRo=r(dCt,"lxmert"),dCt.forEach(t),MRo=r(IBe," \u2014 "),qV=n(IBe,"A",{href:!0});var cCt=s(qV);ERo=r(cCt,"LxmertForPreTraining"),cCt.forEach(t),CRo=r(IBe," (LXMERT model)"),IBe.forEach(t),wRo=i(O),d1=n(O,"LI",{});var NBe=s(d1);eue=n(NBe,"STRONG",{});var fCt=s(eue);ARo=r(fCt,"megatron-bert"),fCt.forEach(t),yRo=r(NBe," \u2014 "),jV=n(NBe,"A",{href:!0});var mCt=s(jV);LRo=r(mCt,"MegatronBertForPreTraining"),mCt.forEach(t),xRo=r(NBe," (Megatron-BERT model)"),NBe.forEach(t),$Ro=i(O),c1=n(O,"LI",{});var qBe=s(c1);oue=n(qBe,"STRONG",{});var gCt=s(oue);kRo=r(gCt,"mobilebert"),gCt.forEach(t),SRo=r(qBe," \u2014 "),DV=n(qBe,"A",{href:!0});var hCt=s(DV);RRo=r(hCt,"MobileBertForPreTraining"),hCt.forEach(t),PRo=r(qBe," (MobileBERT model)"),qBe.forEach(t),BRo=i(O),f1=n(O,"LI",{});var jBe=s(f1);rue=n(jBe,"STRONG",{});var pCt=s(rue);IRo=r(pCt,"mpnet"),pCt.forEach(t),NRo=r(jBe," \u2014 "),GV=n(jBe,"A",{href:!0});var uCt=s(GV);qRo=r(uCt,"MPNetForMaskedLM"),uCt.forEach(t),jRo=r(jBe," (MPNet model)"),jBe.forEach(t),DRo=i(O),m1=n(O,"LI",{});var DBe=s(m1);tue=n(DBe,"STRONG",{});var _Ct=s(tue);GRo=r(_Ct,"mvp"),_Ct.forEach(t),ORo=r(DBe," \u2014 "),OV=n(DBe,"A",{href:!0});var bCt=s(OV);VRo=r(bCt,"MvpForConditionalGeneration"),bCt.forEach(t),XRo=r(DBe," (MVP model)"),DBe.forEach(t),zRo=i(O),g1=n(O,"LI",{});var GBe=s(g1);aue=n(GBe,"STRONG",{});var vCt=s(aue);QRo=r(vCt,"nezha"),vCt.forEach(t),WRo=r(GBe," \u2014 "),VV=n(GBe,"A",{href:!0});var FCt=s(VV);URo=r(FCt,"NezhaForPreTraining"),FCt.forEach(t),HRo=r(GBe," (Nezha model)"),GBe.forEach(t),JRo=i(O),h1=n(O,"LI",{});var OBe=s(h1);nue=n(OBe,"STRONG",{});var TCt=s(nue);YRo=r(TCt,"openai-gpt"),TCt.forEach(t),KRo=r(OBe," \u2014 "),XV=n(OBe,"A",{href:!0});var MCt=s(XV);ZRo=r(MCt,"OpenAIGPTLMHeadModel"),MCt.forEach(t),ePo=r(OBe," (OpenAI GPT model)"),OBe.forEach(t),oPo=i(O),p1=n(O,"LI",{});var VBe=s(p1);sue=n(VBe,"STRONG",{});var ECt=s(sue);rPo=r(ECt,"retribert"),ECt.forEach(t),tPo=r(VBe," \u2014 "),zV=n(VBe,"A",{href:!0});var CCt=s(zV);aPo=r(CCt,"RetriBertModel"),CCt.forEach(t),nPo=r(VBe," (RetriBERT model)"),VBe.forEach(t),sPo=i(O),u1=n(O,"LI",{});var XBe=s(u1);lue=n(XBe,"STRONG",{});var wCt=s(lue);lPo=r(wCt,"roberta"),wCt.forEach(t),iPo=r(XBe," \u2014 "),QV=n(XBe,"A",{href:!0});var ACt=s(QV);dPo=r(ACt,"RobertaForMaskedLM"),ACt.forEach(t),cPo=r(XBe," (RoBERTa model)"),XBe.forEach(t),fPo=i(O),_1=n(O,"LI",{});var zBe=s(_1);iue=n(zBe,"STRONG",{});var yCt=s(iue);mPo=r(yCt,"splinter"),yCt.forEach(t),gPo=r(zBe," \u2014 "),WV=n(zBe,"A",{href:!0});var LCt=s(WV);hPo=r(LCt,"SplinterForPreTraining"),LCt.forEach(t),pPo=r(zBe," (Splinter model)"),zBe.forEach(t),uPo=i(O),b1=n(O,"LI",{});var QBe=s(b1);due=n(QBe,"STRONG",{});var xCt=s(due);_Po=r(xCt,"squeezebert"),xCt.forEach(t),bPo=r(QBe," \u2014 "),UV=n(QBe,"A",{href:!0});var $Ct=s(UV);vPo=r($Ct,"SqueezeBertForMaskedLM"),$Ct.forEach(t),FPo=r(QBe," (SqueezeBERT model)"),QBe.forEach(t),TPo=i(O),v1=n(O,"LI",{});var WBe=s(v1);cue=n(WBe,"STRONG",{});var kCt=s(cue);MPo=r(kCt,"t5"),kCt.forEach(t),EPo=r(WBe," \u2014 "),HV=n(WBe,"A",{href:!0});var SCt=s(HV);CPo=r(SCt,"T5ForConditionalGeneration"),SCt.forEach(t),wPo=r(WBe," (T5 model)"),WBe.forEach(t),APo=i(O),F1=n(O,"LI",{});var UBe=s(F1);fue=n(UBe,"STRONG",{});var RCt=s(fue);yPo=r(RCt,"tapas"),RCt.forEach(t),LPo=r(UBe," \u2014 "),JV=n(UBe,"A",{href:!0});var PCt=s(JV);xPo=r(PCt,"TapasForMaskedLM"),PCt.forEach(t),$Po=r(UBe," (TAPAS model)"),UBe.forEach(t),kPo=i(O),T1=n(O,"LI",{});var HBe=s(T1);mue=n(HBe,"STRONG",{});var BCt=s(mue);SPo=r(BCt,"transfo-xl"),BCt.forEach(t),RPo=r(HBe," \u2014 "),YV=n(HBe,"A",{href:!0});var ICt=s(YV);PPo=r(ICt,"TransfoXLLMHeadModel"),ICt.forEach(t),BPo=r(HBe," (Transformer-XL model)"),HBe.forEach(t),IPo=i(O),M1=n(O,"LI",{});var JBe=s(M1);gue=n(JBe,"STRONG",{});var NCt=s(gue);NPo=r(NCt,"unispeech"),NCt.forEach(t),qPo=r(JBe," \u2014 "),KV=n(JBe,"A",{href:!0});var qCt=s(KV);jPo=r(qCt,"UniSpeechForPreTraining"),qCt.forEach(t),DPo=r(JBe," (UniSpeech model)"),JBe.forEach(t),GPo=i(O),E1=n(O,"LI",{});var YBe=s(E1);hue=n(YBe,"STRONG",{});var jCt=s(hue);OPo=r(jCt,"unispeech-sat"),jCt.forEach(t),VPo=r(YBe," \u2014 "),ZV=n(YBe,"A",{href:!0});var DCt=s(ZV);XPo=r(DCt,"UniSpeechSatForPreTraining"),DCt.forEach(t),zPo=r(YBe," (UniSpeechSat model)"),YBe.forEach(t),QPo=i(O),C1=n(O,"LI",{});var KBe=s(C1);pue=n(KBe,"STRONG",{});var GCt=s(pue);WPo=r(GCt,"videomae"),GCt.forEach(t),UPo=r(KBe," \u2014 "),eX=n(KBe,"A",{href:!0});var OCt=s(eX);HPo=r(OCt,"VideoMAEForPreTraining"),OCt.forEach(t),JPo=r(KBe," (VideoMAE model)"),KBe.forEach(t),YPo=i(O),w1=n(O,"LI",{});var ZBe=s(w1);uue=n(ZBe,"STRONG",{});var VCt=s(uue);KPo=r(VCt,"visual_bert"),VCt.forEach(t),ZPo=r(ZBe," \u2014 "),oX=n(ZBe,"A",{href:!0});var XCt=s(oX);eBo=r(XCt,"VisualBertForPreTraining"),XCt.forEach(t),oBo=r(ZBe," (VisualBERT model)"),ZBe.forEach(t),rBo=i(O),A1=n(O,"LI",{});var eIe=s(A1);_ue=n(eIe,"STRONG",{});var zCt=s(_ue);tBo=r(zCt,"vit_mae"),zCt.forEach(t),aBo=r(eIe," \u2014 "),rX=n(eIe,"A",{href:!0});var QCt=s(rX);nBo=r(QCt,"ViTMAEForPreTraining"),QCt.forEach(t),sBo=r(eIe," (ViTMAE model)"),eIe.forEach(t),lBo=i(O),y1=n(O,"LI",{});var oIe=s(y1);bue=n(oIe,"STRONG",{});var WCt=s(bue);iBo=r(WCt,"wav2vec2"),WCt.forEach(t),dBo=r(oIe," \u2014 "),tX=n(oIe,"A",{href:!0});var UCt=s(tX);cBo=r(UCt,"Wav2Vec2ForPreTraining"),UCt.forEach(t),fBo=r(oIe," (Wav2Vec2 model)"),oIe.forEach(t),mBo=i(O),L1=n(O,"LI",{});var rIe=s(L1);vue=n(rIe,"STRONG",{});var HCt=s(vue);gBo=r(HCt,"wav2vec2-conformer"),HCt.forEach(t),hBo=r(rIe," \u2014 "),aX=n(rIe,"A",{href:!0});var JCt=s(aX);pBo=r(JCt,"Wav2Vec2ConformerForPreTraining"),JCt.forEach(t),uBo=r(rIe," (Wav2Vec2-Conformer model)"),rIe.forEach(t),_Bo=i(O),x1=n(O,"LI",{});var tIe=s(x1);Fue=n(tIe,"STRONG",{});var YCt=s(Fue);bBo=r(YCt,"xlm"),YCt.forEach(t),vBo=r(tIe," \u2014 "),nX=n(tIe,"A",{href:!0});var KCt=s(nX);FBo=r(KCt,"XLMWithLMHeadModel"),KCt.forEach(t),TBo=r(tIe," (XLM model)"),tIe.forEach(t),MBo=i(O),$1=n(O,"LI",{});var aIe=s($1);Tue=n(aIe,"STRONG",{});var ZCt=s(Tue);EBo=r(ZCt,"xlm-roberta"),ZCt.forEach(t),CBo=r(aIe," \u2014 "),sX=n(aIe,"A",{href:!0});var e5t=s(sX);wBo=r(e5t,"XLMRobertaForMaskedLM"),e5t.forEach(t),ABo=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),yBo=i(O),k1=n(O,"LI",{});var nIe=s(k1);Mue=n(nIe,"STRONG",{});var o5t=s(Mue);LBo=r(o5t,"xlm-roberta-xl"),o5t.forEach(t),xBo=r(nIe," \u2014 "),lX=n(nIe,"A",{href:!0});var r5t=s(lX);$Bo=r(r5t,"XLMRobertaXLForMaskedLM"),r5t.forEach(t),kBo=r(nIe," (XLM-RoBERTa-XL model)"),nIe.forEach(t),SBo=i(O),S1=n(O,"LI",{});var sIe=s(S1);Eue=n(sIe,"STRONG",{});var t5t=s(Eue);RBo=r(t5t,"xlnet"),t5t.forEach(t),PBo=r(sIe," \u2014 "),iX=n(sIe,"A",{href:!0});var a5t=s(iX);BBo=r(a5t,"XLNetLMHeadModel"),a5t.forEach(t),IBo=r(sIe," (XLNet model)"),sIe.forEach(t),O.forEach(t),NBo=i(_a),R1=n(_a,"P",{});var lIe=s(R1);qBo=r(lIe,"The model is set in evaluation mode by default using "),Cue=n(lIe,"CODE",{});var n5t=s(Cue);jBo=r(n5t,"model.eval()"),n5t.forEach(t),DBo=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(lIe,"CODE",{});var s5t=s(wue);GBo=r(s5t,"model.train()"),s5t.forEach(t),lIe.forEach(t),OBo=i(_a),T(P1.$$.fragment,_a),_a.forEach(t),Fl.forEach(t),oHe=i(f),hd=n(f,"H2",{class:!0});var gYe=s(hd);B1=n(gYe,"A",{id:!0,class:!0,href:!0});var l5t=s(B1);Aue=n(l5t,"SPAN",{});var i5t=s(Aue);T(p9.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),VBo=i(gYe),yue=n(gYe,"SPAN",{});var d5t=s(yue);XBo=r(d5t,"AutoModelForCausalLM"),d5t.forEach(t),gYe.forEach(t),rHe=i(f),Bo=n(f,"DIV",{class:!0});var Tl=s(Bo);T(u9.$$.fragment,Tl),zBo=i(Tl),pd=n(Tl,"P",{});var Tne=s(pd);QBo=r(Tne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dX=n(Tne,"A",{href:!0});var c5t=s(dX);WBo=r(c5t,"from_pretrained()"),c5t.forEach(t),UBo=r(Tne," class method or the "),cX=n(Tne,"A",{href:!0});var f5t=s(cX);HBo=r(f5t,"from_config()"),f5t.forEach(t),JBo=r(Tne,` class
method.`),Tne.forEach(t),YBo=i(Tl),_9=n(Tl,"P",{});var hYe=s(_9);KBo=r(hYe,"This class cannot be instantiated directly using "),Lue=n(hYe,"CODE",{});var m5t=s(Lue);ZBo=r(m5t,"__init__()"),m5t.forEach(t),eIo=r(hYe," (throws an error)."),hYe.forEach(t),oIo=i(Tl),ut=n(Tl,"DIV",{class:!0});var P6=s(ut);T(b9.$$.fragment,P6),rIo=i(P6),xue=n(P6,"P",{});var g5t=s(xue);tIo=r(g5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),g5t.forEach(t),aIo=i(P6),ud=n(P6,"P",{});var Mne=s(ud);nIo=r(Mne,`Note:
Loading a model from its configuration file does `),$ue=n(Mne,"STRONG",{});var h5t=s($ue);sIo=r(h5t,"not"),h5t.forEach(t),lIo=r(Mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(Mne,"A",{href:!0});var p5t=s(fX);iIo=r(p5t,"from_pretrained()"),p5t.forEach(t),dIo=r(Mne," to load the model weights."),Mne.forEach(t),cIo=i(P6),T(I1.$$.fragment,P6),P6.forEach(t),fIo=i(Tl),Ze=n(Tl,"DIV",{class:!0});var ba=s(Ze);T(v9.$$.fragment,ba),mIo=i(ba),kue=n(ba,"P",{});var u5t=s(kue);gIo=r(u5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u5t.forEach(t),hIo=i(ba),Ha=n(ba,"P",{});var B6=s(Ha);pIo=r(B6,"The model class to instantiate is selected based on the "),Sue=n(B6,"CODE",{});var _5t=s(Sue);uIo=r(_5t,"model_type"),_5t.forEach(t),_Io=r(B6,` property of the config object (either
passed as an argument or loaded from `),Rue=n(B6,"CODE",{});var b5t=s(Rue);bIo=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),vIo=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(B6,"CODE",{});var v5t=s(Pue);FIo=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),TIo=r(B6,":"),B6.forEach(t),MIo=i(ba),z=n(ba,"UL",{});var Q=s(z);N1=n(Q,"LI",{});var iIe=s(N1);Bue=n(iIe,"STRONG",{});var F5t=s(Bue);EIo=r(F5t,"bart"),F5t.forEach(t),CIo=r(iIe," \u2014 "),mX=n(iIe,"A",{href:!0});var T5t=s(mX);wIo=r(T5t,"BartForCausalLM"),T5t.forEach(t),AIo=r(iIe," (BART model)"),iIe.forEach(t),yIo=i(Q),q1=n(Q,"LI",{});var dIe=s(q1);Iue=n(dIe,"STRONG",{});var M5t=s(Iue);LIo=r(M5t,"bert"),M5t.forEach(t),xIo=r(dIe," \u2014 "),gX=n(dIe,"A",{href:!0});var E5t=s(gX);$Io=r(E5t,"BertLMHeadModel"),E5t.forEach(t),kIo=r(dIe," (BERT model)"),dIe.forEach(t),SIo=i(Q),j1=n(Q,"LI",{});var cIe=s(j1);Nue=n(cIe,"STRONG",{});var C5t=s(Nue);RIo=r(C5t,"bert-generation"),C5t.forEach(t),PIo=r(cIe," \u2014 "),hX=n(cIe,"A",{href:!0});var w5t=s(hX);BIo=r(w5t,"BertGenerationDecoder"),w5t.forEach(t),IIo=r(cIe," (Bert Generation model)"),cIe.forEach(t),NIo=i(Q),D1=n(Q,"LI",{});var fIe=s(D1);que=n(fIe,"STRONG",{});var A5t=s(que);qIo=r(A5t,"big_bird"),A5t.forEach(t),jIo=r(fIe," \u2014 "),pX=n(fIe,"A",{href:!0});var y5t=s(pX);DIo=r(y5t,"BigBirdForCausalLM"),y5t.forEach(t),GIo=r(fIe," (BigBird model)"),fIe.forEach(t),OIo=i(Q),G1=n(Q,"LI",{});var mIe=s(G1);jue=n(mIe,"STRONG",{});var L5t=s(jue);VIo=r(L5t,"bigbird_pegasus"),L5t.forEach(t),XIo=r(mIe," \u2014 "),uX=n(mIe,"A",{href:!0});var x5t=s(uX);zIo=r(x5t,"BigBirdPegasusForCausalLM"),x5t.forEach(t),QIo=r(mIe," (BigBird-Pegasus model)"),mIe.forEach(t),WIo=i(Q),O1=n(Q,"LI",{});var gIe=s(O1);Due=n(gIe,"STRONG",{});var $5t=s(Due);UIo=r($5t,"blenderbot"),$5t.forEach(t),HIo=r(gIe," \u2014 "),_X=n(gIe,"A",{href:!0});var k5t=s(_X);JIo=r(k5t,"BlenderbotForCausalLM"),k5t.forEach(t),YIo=r(gIe," (Blenderbot model)"),gIe.forEach(t),KIo=i(Q),V1=n(Q,"LI",{});var hIe=s(V1);Gue=n(hIe,"STRONG",{});var S5t=s(Gue);ZIo=r(S5t,"blenderbot-small"),S5t.forEach(t),eNo=r(hIe," \u2014 "),bX=n(hIe,"A",{href:!0});var R5t=s(bX);oNo=r(R5t,"BlenderbotSmallForCausalLM"),R5t.forEach(t),rNo=r(hIe," (BlenderbotSmall model)"),hIe.forEach(t),tNo=i(Q),X1=n(Q,"LI",{});var pIe=s(X1);Oue=n(pIe,"STRONG",{});var P5t=s(Oue);aNo=r(P5t,"bloom"),P5t.forEach(t),nNo=r(pIe," \u2014 "),vX=n(pIe,"A",{href:!0});var B5t=s(vX);sNo=r(B5t,"BloomForCausalLM"),B5t.forEach(t),lNo=r(pIe," (BLOOM model)"),pIe.forEach(t),iNo=i(Q),z1=n(Q,"LI",{});var uIe=s(z1);Vue=n(uIe,"STRONG",{});var I5t=s(Vue);dNo=r(I5t,"camembert"),I5t.forEach(t),cNo=r(uIe," \u2014 "),FX=n(uIe,"A",{href:!0});var N5t=s(FX);fNo=r(N5t,"CamembertForCausalLM"),N5t.forEach(t),mNo=r(uIe," (CamemBERT model)"),uIe.forEach(t),gNo=i(Q),Q1=n(Q,"LI",{});var _Ie=s(Q1);Xue=n(_Ie,"STRONG",{});var q5t=s(Xue);hNo=r(q5t,"codegen"),q5t.forEach(t),pNo=r(_Ie," \u2014 "),TX=n(_Ie,"A",{href:!0});var j5t=s(TX);uNo=r(j5t,"CodeGenForCausalLM"),j5t.forEach(t),_No=r(_Ie," (CodeGen model)"),_Ie.forEach(t),bNo=i(Q),W1=n(Q,"LI",{});var bIe=s(W1);zue=n(bIe,"STRONG",{});var D5t=s(zue);vNo=r(D5t,"ctrl"),D5t.forEach(t),FNo=r(bIe," \u2014 "),MX=n(bIe,"A",{href:!0});var G5t=s(MX);TNo=r(G5t,"CTRLLMHeadModel"),G5t.forEach(t),MNo=r(bIe," (CTRL model)"),bIe.forEach(t),ENo=i(Q),U1=n(Q,"LI",{});var vIe=s(U1);Que=n(vIe,"STRONG",{});var O5t=s(Que);CNo=r(O5t,"data2vec-text"),O5t.forEach(t),wNo=r(vIe," \u2014 "),EX=n(vIe,"A",{href:!0});var V5t=s(EX);ANo=r(V5t,"Data2VecTextForCausalLM"),V5t.forEach(t),yNo=r(vIe," (Data2VecText model)"),vIe.forEach(t),LNo=i(Q),H1=n(Q,"LI",{});var FIe=s(H1);Wue=n(FIe,"STRONG",{});var X5t=s(Wue);xNo=r(X5t,"electra"),X5t.forEach(t),$No=r(FIe," \u2014 "),CX=n(FIe,"A",{href:!0});var z5t=s(CX);kNo=r(z5t,"ElectraForCausalLM"),z5t.forEach(t),SNo=r(FIe," (ELECTRA model)"),FIe.forEach(t),RNo=i(Q),J1=n(Q,"LI",{});var TIe=s(J1);Uue=n(TIe,"STRONG",{});var Q5t=s(Uue);PNo=r(Q5t,"gpt2"),Q5t.forEach(t),BNo=r(TIe," \u2014 "),wX=n(TIe,"A",{href:!0});var W5t=s(wX);INo=r(W5t,"GPT2LMHeadModel"),W5t.forEach(t),NNo=r(TIe," (OpenAI GPT-2 model)"),TIe.forEach(t),qNo=i(Q),Y1=n(Q,"LI",{});var MIe=s(Y1);Hue=n(MIe,"STRONG",{});var U5t=s(Hue);jNo=r(U5t,"gpt_neo"),U5t.forEach(t),DNo=r(MIe," \u2014 "),AX=n(MIe,"A",{href:!0});var H5t=s(AX);GNo=r(H5t,"GPTNeoForCausalLM"),H5t.forEach(t),ONo=r(MIe," (GPT Neo model)"),MIe.forEach(t),VNo=i(Q),K1=n(Q,"LI",{});var EIe=s(K1);Jue=n(EIe,"STRONG",{});var J5t=s(Jue);XNo=r(J5t,"gpt_neox"),J5t.forEach(t),zNo=r(EIe," \u2014 "),yX=n(EIe,"A",{href:!0});var Y5t=s(yX);QNo=r(Y5t,"GPTNeoXForCausalLM"),Y5t.forEach(t),WNo=r(EIe," (GPT NeoX model)"),EIe.forEach(t),UNo=i(Q),Z1=n(Q,"LI",{});var CIe=s(Z1);Yue=n(CIe,"STRONG",{});var K5t=s(Yue);HNo=r(K5t,"gptj"),K5t.forEach(t),JNo=r(CIe," \u2014 "),LX=n(CIe,"A",{href:!0});var Z5t=s(LX);YNo=r(Z5t,"GPTJForCausalLM"),Z5t.forEach(t),KNo=r(CIe," (GPT-J model)"),CIe.forEach(t),ZNo=i(Q),eb=n(Q,"LI",{});var wIe=s(eb);Kue=n(wIe,"STRONG",{});var e0t=s(Kue);eqo=r(e0t,"marian"),e0t.forEach(t),oqo=r(wIe," \u2014 "),xX=n(wIe,"A",{href:!0});var o0t=s(xX);rqo=r(o0t,"MarianForCausalLM"),o0t.forEach(t),tqo=r(wIe," (Marian model)"),wIe.forEach(t),aqo=i(Q),ob=n(Q,"LI",{});var AIe=s(ob);Zue=n(AIe,"STRONG",{});var r0t=s(Zue);nqo=r(r0t,"mbart"),r0t.forEach(t),sqo=r(AIe," \u2014 "),$X=n(AIe,"A",{href:!0});var t0t=s($X);lqo=r(t0t,"MBartForCausalLM"),t0t.forEach(t),iqo=r(AIe," (mBART model)"),AIe.forEach(t),dqo=i(Q),rb=n(Q,"LI",{});var yIe=s(rb);e_e=n(yIe,"STRONG",{});var a0t=s(e_e);cqo=r(a0t,"megatron-bert"),a0t.forEach(t),fqo=r(yIe," \u2014 "),kX=n(yIe,"A",{href:!0});var n0t=s(kX);mqo=r(n0t,"MegatronBertForCausalLM"),n0t.forEach(t),gqo=r(yIe," (Megatron-BERT model)"),yIe.forEach(t),hqo=i(Q),tb=n(Q,"LI",{});var LIe=s(tb);o_e=n(LIe,"STRONG",{});var s0t=s(o_e);pqo=r(s0t,"mvp"),s0t.forEach(t),uqo=r(LIe," \u2014 "),SX=n(LIe,"A",{href:!0});var l0t=s(SX);_qo=r(l0t,"MvpForCausalLM"),l0t.forEach(t),bqo=r(LIe," (MVP model)"),LIe.forEach(t),vqo=i(Q),ab=n(Q,"LI",{});var xIe=s(ab);r_e=n(xIe,"STRONG",{});var i0t=s(r_e);Fqo=r(i0t,"openai-gpt"),i0t.forEach(t),Tqo=r(xIe," \u2014 "),RX=n(xIe,"A",{href:!0});var d0t=s(RX);Mqo=r(d0t,"OpenAIGPTLMHeadModel"),d0t.forEach(t),Eqo=r(xIe," (OpenAI GPT model)"),xIe.forEach(t),Cqo=i(Q),nb=n(Q,"LI",{});var $Ie=s(nb);t_e=n($Ie,"STRONG",{});var c0t=s(t_e);wqo=r(c0t,"opt"),c0t.forEach(t),Aqo=r($Ie," \u2014 "),PX=n($Ie,"A",{href:!0});var f0t=s(PX);yqo=r(f0t,"OPTForCausalLM"),f0t.forEach(t),Lqo=r($Ie," (OPT model)"),$Ie.forEach(t),xqo=i(Q),sb=n(Q,"LI",{});var kIe=s(sb);a_e=n(kIe,"STRONG",{});var m0t=s(a_e);$qo=r(m0t,"pegasus"),m0t.forEach(t),kqo=r(kIe," \u2014 "),BX=n(kIe,"A",{href:!0});var g0t=s(BX);Sqo=r(g0t,"PegasusForCausalLM"),g0t.forEach(t),Rqo=r(kIe," (Pegasus model)"),kIe.forEach(t),Pqo=i(Q),lb=n(Q,"LI",{});var SIe=s(lb);n_e=n(SIe,"STRONG",{});var h0t=s(n_e);Bqo=r(h0t,"plbart"),h0t.forEach(t),Iqo=r(SIe," \u2014 "),IX=n(SIe,"A",{href:!0});var p0t=s(IX);Nqo=r(p0t,"PLBartForCausalLM"),p0t.forEach(t),qqo=r(SIe," (PLBart model)"),SIe.forEach(t),jqo=i(Q),ib=n(Q,"LI",{});var RIe=s(ib);s_e=n(RIe,"STRONG",{});var u0t=s(s_e);Dqo=r(u0t,"prophetnet"),u0t.forEach(t),Gqo=r(RIe," \u2014 "),NX=n(RIe,"A",{href:!0});var _0t=s(NX);Oqo=r(_0t,"ProphetNetForCausalLM"),_0t.forEach(t),Vqo=r(RIe," (ProphetNet model)"),RIe.forEach(t),Xqo=i(Q),db=n(Q,"LI",{});var PIe=s(db);l_e=n(PIe,"STRONG",{});var b0t=s(l_e);zqo=r(b0t,"qdqbert"),b0t.forEach(t),Qqo=r(PIe," \u2014 "),qX=n(PIe,"A",{href:!0});var v0t=s(qX);Wqo=r(v0t,"QDQBertLMHeadModel"),v0t.forEach(t),Uqo=r(PIe," (QDQBert model)"),PIe.forEach(t),Hqo=i(Q),cb=n(Q,"LI",{});var BIe=s(cb);i_e=n(BIe,"STRONG",{});var F0t=s(i_e);Jqo=r(F0t,"reformer"),F0t.forEach(t),Yqo=r(BIe," \u2014 "),jX=n(BIe,"A",{href:!0});var T0t=s(jX);Kqo=r(T0t,"ReformerModelWithLMHead"),T0t.forEach(t),Zqo=r(BIe," (Reformer model)"),BIe.forEach(t),ejo=i(Q),fb=n(Q,"LI",{});var IIe=s(fb);d_e=n(IIe,"STRONG",{});var M0t=s(d_e);ojo=r(M0t,"rembert"),M0t.forEach(t),rjo=r(IIe," \u2014 "),DX=n(IIe,"A",{href:!0});var E0t=s(DX);tjo=r(E0t,"RemBertForCausalLM"),E0t.forEach(t),ajo=r(IIe," (RemBERT model)"),IIe.forEach(t),njo=i(Q),mb=n(Q,"LI",{});var NIe=s(mb);c_e=n(NIe,"STRONG",{});var C0t=s(c_e);sjo=r(C0t,"roberta"),C0t.forEach(t),ljo=r(NIe," \u2014 "),GX=n(NIe,"A",{href:!0});var w0t=s(GX);ijo=r(w0t,"RobertaForCausalLM"),w0t.forEach(t),djo=r(NIe," (RoBERTa model)"),NIe.forEach(t),cjo=i(Q),gb=n(Q,"LI",{});var qIe=s(gb);f_e=n(qIe,"STRONG",{});var A0t=s(f_e);fjo=r(A0t,"roformer"),A0t.forEach(t),mjo=r(qIe," \u2014 "),OX=n(qIe,"A",{href:!0});var y0t=s(OX);gjo=r(y0t,"RoFormerForCausalLM"),y0t.forEach(t),hjo=r(qIe," (RoFormer model)"),qIe.forEach(t),pjo=i(Q),hb=n(Q,"LI",{});var jIe=s(hb);m_e=n(jIe,"STRONG",{});var L0t=s(m_e);ujo=r(L0t,"speech_to_text_2"),L0t.forEach(t),_jo=r(jIe," \u2014 "),VX=n(jIe,"A",{href:!0});var x0t=s(VX);bjo=r(x0t,"Speech2Text2ForCausalLM"),x0t.forEach(t),vjo=r(jIe," (Speech2Text2 model)"),jIe.forEach(t),Fjo=i(Q),pb=n(Q,"LI",{});var DIe=s(pb);g_e=n(DIe,"STRONG",{});var $0t=s(g_e);Tjo=r($0t,"transfo-xl"),$0t.forEach(t),Mjo=r(DIe," \u2014 "),XX=n(DIe,"A",{href:!0});var k0t=s(XX);Ejo=r(k0t,"TransfoXLLMHeadModel"),k0t.forEach(t),Cjo=r(DIe," (Transformer-XL model)"),DIe.forEach(t),wjo=i(Q),ub=n(Q,"LI",{});var GIe=s(ub);h_e=n(GIe,"STRONG",{});var S0t=s(h_e);Ajo=r(S0t,"trocr"),S0t.forEach(t),yjo=r(GIe," \u2014 "),zX=n(GIe,"A",{href:!0});var R0t=s(zX);Ljo=r(R0t,"TrOCRForCausalLM"),R0t.forEach(t),xjo=r(GIe," (TrOCR model)"),GIe.forEach(t),$jo=i(Q),_b=n(Q,"LI",{});var OIe=s(_b);p_e=n(OIe,"STRONG",{});var P0t=s(p_e);kjo=r(P0t,"xglm"),P0t.forEach(t),Sjo=r(OIe," \u2014 "),QX=n(OIe,"A",{href:!0});var B0t=s(QX);Rjo=r(B0t,"XGLMForCausalLM"),B0t.forEach(t),Pjo=r(OIe," (XGLM model)"),OIe.forEach(t),Bjo=i(Q),bb=n(Q,"LI",{});var VIe=s(bb);u_e=n(VIe,"STRONG",{});var I0t=s(u_e);Ijo=r(I0t,"xlm"),I0t.forEach(t),Njo=r(VIe," \u2014 "),WX=n(VIe,"A",{href:!0});var N0t=s(WX);qjo=r(N0t,"XLMWithLMHeadModel"),N0t.forEach(t),jjo=r(VIe," (XLM model)"),VIe.forEach(t),Djo=i(Q),vb=n(Q,"LI",{});var XIe=s(vb);__e=n(XIe,"STRONG",{});var q0t=s(__e);Gjo=r(q0t,"xlm-prophetnet"),q0t.forEach(t),Ojo=r(XIe," \u2014 "),UX=n(XIe,"A",{href:!0});var j0t=s(UX);Vjo=r(j0t,"XLMProphetNetForCausalLM"),j0t.forEach(t),Xjo=r(XIe," (XLM-ProphetNet model)"),XIe.forEach(t),zjo=i(Q),Fb=n(Q,"LI",{});var zIe=s(Fb);b_e=n(zIe,"STRONG",{});var D0t=s(b_e);Qjo=r(D0t,"xlm-roberta"),D0t.forEach(t),Wjo=r(zIe," \u2014 "),HX=n(zIe,"A",{href:!0});var G0t=s(HX);Ujo=r(G0t,"XLMRobertaForCausalLM"),G0t.forEach(t),Hjo=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),Jjo=i(Q),Tb=n(Q,"LI",{});var QIe=s(Tb);v_e=n(QIe,"STRONG",{});var O0t=s(v_e);Yjo=r(O0t,"xlm-roberta-xl"),O0t.forEach(t),Kjo=r(QIe," \u2014 "),JX=n(QIe,"A",{href:!0});var V0t=s(JX);Zjo=r(V0t,"XLMRobertaXLForCausalLM"),V0t.forEach(t),eDo=r(QIe," (XLM-RoBERTa-XL model)"),QIe.forEach(t),oDo=i(Q),Mb=n(Q,"LI",{});var WIe=s(Mb);F_e=n(WIe,"STRONG",{});var X0t=s(F_e);rDo=r(X0t,"xlnet"),X0t.forEach(t),tDo=r(WIe," \u2014 "),YX=n(WIe,"A",{href:!0});var z0t=s(YX);aDo=r(z0t,"XLNetLMHeadModel"),z0t.forEach(t),nDo=r(WIe," (XLNet model)"),WIe.forEach(t),Q.forEach(t),sDo=i(ba),Eb=n(ba,"P",{});var UIe=s(Eb);lDo=r(UIe,"The model is set in evaluation mode by default using "),T_e=n(UIe,"CODE",{});var Q0t=s(T_e);iDo=r(Q0t,"model.eval()"),Q0t.forEach(t),dDo=r(UIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(UIe,"CODE",{});var W0t=s(M_e);cDo=r(W0t,"model.train()"),W0t.forEach(t),UIe.forEach(t),fDo=i(ba),T(Cb.$$.fragment,ba),ba.forEach(t),Tl.forEach(t),tHe=i(f),_d=n(f,"H2",{class:!0});var pYe=s(_d);wb=n(pYe,"A",{id:!0,class:!0,href:!0});var U0t=s(wb);E_e=n(U0t,"SPAN",{});var H0t=s(E_e);T(F9.$$.fragment,H0t),H0t.forEach(t),U0t.forEach(t),mDo=i(pYe),C_e=n(pYe,"SPAN",{});var J0t=s(C_e);gDo=r(J0t,"AutoModelForMaskedLM"),J0t.forEach(t),pYe.forEach(t),aHe=i(f),Io=n(f,"DIV",{class:!0});var Ml=s(Io);T(T9.$$.fragment,Ml),hDo=i(Ml),bd=n(Ml,"P",{});var Ene=s(bd);pDo=r(Ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KX=n(Ene,"A",{href:!0});var Y0t=s(KX);uDo=r(Y0t,"from_pretrained()"),Y0t.forEach(t),_Do=r(Ene," class method or the "),ZX=n(Ene,"A",{href:!0});var K0t=s(ZX);bDo=r(K0t,"from_config()"),K0t.forEach(t),vDo=r(Ene,` class
method.`),Ene.forEach(t),FDo=i(Ml),M9=n(Ml,"P",{});var uYe=s(M9);TDo=r(uYe,"This class cannot be instantiated directly using "),w_e=n(uYe,"CODE",{});var Z0t=s(w_e);MDo=r(Z0t,"__init__()"),Z0t.forEach(t),EDo=r(uYe," (throws an error)."),uYe.forEach(t),CDo=i(Ml),_t=n(Ml,"DIV",{class:!0});var I6=s(_t);T(E9.$$.fragment,I6),wDo=i(I6),A_e=n(I6,"P",{});var ewt=s(A_e);ADo=r(ewt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ewt.forEach(t),yDo=i(I6),vd=n(I6,"P",{});var Cne=s(vd);LDo=r(Cne,`Note:
Loading a model from its configuration file does `),y_e=n(Cne,"STRONG",{});var owt=s(y_e);xDo=r(owt,"not"),owt.forEach(t),$Do=r(Cne,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(Cne,"A",{href:!0});var rwt=s(ez);kDo=r(rwt,"from_pretrained()"),rwt.forEach(t),SDo=r(Cne," to load the model weights."),Cne.forEach(t),RDo=i(I6),T(Ab.$$.fragment,I6),I6.forEach(t),PDo=i(Ml),eo=n(Ml,"DIV",{class:!0});var va=s(eo);T(C9.$$.fragment,va),BDo=i(va),L_e=n(va,"P",{});var twt=s(L_e);IDo=r(twt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),twt.forEach(t),NDo=i(va),Ja=n(va,"P",{});var N6=s(Ja);qDo=r(N6,"The model class to instantiate is selected based on the "),x_e=n(N6,"CODE",{});var awt=s(x_e);jDo=r(awt,"model_type"),awt.forEach(t),DDo=r(N6,` property of the config object (either
passed as an argument or loaded from `),$_e=n(N6,"CODE",{});var nwt=s($_e);GDo=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),ODo=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(N6,"CODE",{});var swt=s(k_e);VDo=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),XDo=r(N6,":"),N6.forEach(t),zDo=i(va),U=n(va,"UL",{});var Y=s(U);yb=n(Y,"LI",{});var HIe=s(yb);S_e=n(HIe,"STRONG",{});var lwt=s(S_e);QDo=r(lwt,"albert"),lwt.forEach(t),WDo=r(HIe," \u2014 "),oz=n(HIe,"A",{href:!0});var iwt=s(oz);UDo=r(iwt,"AlbertForMaskedLM"),iwt.forEach(t),HDo=r(HIe," (ALBERT model)"),HIe.forEach(t),JDo=i(Y),Lb=n(Y,"LI",{});var JIe=s(Lb);R_e=n(JIe,"STRONG",{});var dwt=s(R_e);YDo=r(dwt,"bart"),dwt.forEach(t),KDo=r(JIe," \u2014 "),rz=n(JIe,"A",{href:!0});var cwt=s(rz);ZDo=r(cwt,"BartForConditionalGeneration"),cwt.forEach(t),eGo=r(JIe," (BART model)"),JIe.forEach(t),oGo=i(Y),xb=n(Y,"LI",{});var YIe=s(xb);P_e=n(YIe,"STRONG",{});var fwt=s(P_e);rGo=r(fwt,"bert"),fwt.forEach(t),tGo=r(YIe," \u2014 "),tz=n(YIe,"A",{href:!0});var mwt=s(tz);aGo=r(mwt,"BertForMaskedLM"),mwt.forEach(t),nGo=r(YIe," (BERT model)"),YIe.forEach(t),sGo=i(Y),$b=n(Y,"LI",{});var KIe=s($b);B_e=n(KIe,"STRONG",{});var gwt=s(B_e);lGo=r(gwt,"big_bird"),gwt.forEach(t),iGo=r(KIe," \u2014 "),az=n(KIe,"A",{href:!0});var hwt=s(az);dGo=r(hwt,"BigBirdForMaskedLM"),hwt.forEach(t),cGo=r(KIe," (BigBird model)"),KIe.forEach(t),fGo=i(Y),kb=n(Y,"LI",{});var ZIe=s(kb);I_e=n(ZIe,"STRONG",{});var pwt=s(I_e);mGo=r(pwt,"camembert"),pwt.forEach(t),gGo=r(ZIe," \u2014 "),nz=n(ZIe,"A",{href:!0});var uwt=s(nz);hGo=r(uwt,"CamembertForMaskedLM"),uwt.forEach(t),pGo=r(ZIe," (CamemBERT model)"),ZIe.forEach(t),uGo=i(Y),Sb=n(Y,"LI",{});var eNe=s(Sb);N_e=n(eNe,"STRONG",{});var _wt=s(N_e);_Go=r(_wt,"convbert"),_wt.forEach(t),bGo=r(eNe," \u2014 "),sz=n(eNe,"A",{href:!0});var bwt=s(sz);vGo=r(bwt,"ConvBertForMaskedLM"),bwt.forEach(t),FGo=r(eNe," (ConvBERT model)"),eNe.forEach(t),TGo=i(Y),Rb=n(Y,"LI",{});var oNe=s(Rb);q_e=n(oNe,"STRONG",{});var vwt=s(q_e);MGo=r(vwt,"data2vec-text"),vwt.forEach(t),EGo=r(oNe," \u2014 "),lz=n(oNe,"A",{href:!0});var Fwt=s(lz);CGo=r(Fwt,"Data2VecTextForMaskedLM"),Fwt.forEach(t),wGo=r(oNe," (Data2VecText model)"),oNe.forEach(t),AGo=i(Y),Pb=n(Y,"LI",{});var rNe=s(Pb);j_e=n(rNe,"STRONG",{});var Twt=s(j_e);yGo=r(Twt,"deberta"),Twt.forEach(t),LGo=r(rNe," \u2014 "),iz=n(rNe,"A",{href:!0});var Mwt=s(iz);xGo=r(Mwt,"DebertaForMaskedLM"),Mwt.forEach(t),$Go=r(rNe," (DeBERTa model)"),rNe.forEach(t),kGo=i(Y),Bb=n(Y,"LI",{});var tNe=s(Bb);D_e=n(tNe,"STRONG",{});var Ewt=s(D_e);SGo=r(Ewt,"deberta-v2"),Ewt.forEach(t),RGo=r(tNe," \u2014 "),dz=n(tNe,"A",{href:!0});var Cwt=s(dz);PGo=r(Cwt,"DebertaV2ForMaskedLM"),Cwt.forEach(t),BGo=r(tNe," (DeBERTa-v2 model)"),tNe.forEach(t),IGo=i(Y),Ib=n(Y,"LI",{});var aNe=s(Ib);G_e=n(aNe,"STRONG",{});var wwt=s(G_e);NGo=r(wwt,"distilbert"),wwt.forEach(t),qGo=r(aNe," \u2014 "),cz=n(aNe,"A",{href:!0});var Awt=s(cz);jGo=r(Awt,"DistilBertForMaskedLM"),Awt.forEach(t),DGo=r(aNe," (DistilBERT model)"),aNe.forEach(t),GGo=i(Y),Nb=n(Y,"LI",{});var nNe=s(Nb);O_e=n(nNe,"STRONG",{});var ywt=s(O_e);OGo=r(ywt,"electra"),ywt.forEach(t),VGo=r(nNe," \u2014 "),fz=n(nNe,"A",{href:!0});var Lwt=s(fz);XGo=r(Lwt,"ElectraForMaskedLM"),Lwt.forEach(t),zGo=r(nNe," (ELECTRA model)"),nNe.forEach(t),QGo=i(Y),qb=n(Y,"LI",{});var sNe=s(qb);V_e=n(sNe,"STRONG",{});var xwt=s(V_e);WGo=r(xwt,"flaubert"),xwt.forEach(t),UGo=r(sNe," \u2014 "),mz=n(sNe,"A",{href:!0});var $wt=s(mz);HGo=r($wt,"FlaubertWithLMHeadModel"),$wt.forEach(t),JGo=r(sNe," (FlauBERT model)"),sNe.forEach(t),YGo=i(Y),jb=n(Y,"LI",{});var lNe=s(jb);X_e=n(lNe,"STRONG",{});var kwt=s(X_e);KGo=r(kwt,"fnet"),kwt.forEach(t),ZGo=r(lNe," \u2014 "),gz=n(lNe,"A",{href:!0});var Swt=s(gz);eOo=r(Swt,"FNetForMaskedLM"),Swt.forEach(t),oOo=r(lNe," (FNet model)"),lNe.forEach(t),rOo=i(Y),Db=n(Y,"LI",{});var iNe=s(Db);z_e=n(iNe,"STRONG",{});var Rwt=s(z_e);tOo=r(Rwt,"funnel"),Rwt.forEach(t),aOo=r(iNe," \u2014 "),hz=n(iNe,"A",{href:!0});var Pwt=s(hz);nOo=r(Pwt,"FunnelForMaskedLM"),Pwt.forEach(t),sOo=r(iNe," (Funnel Transformer model)"),iNe.forEach(t),lOo=i(Y),Gb=n(Y,"LI",{});var dNe=s(Gb);Q_e=n(dNe,"STRONG",{});var Bwt=s(Q_e);iOo=r(Bwt,"ibert"),Bwt.forEach(t),dOo=r(dNe," \u2014 "),pz=n(dNe,"A",{href:!0});var Iwt=s(pz);cOo=r(Iwt,"IBertForMaskedLM"),Iwt.forEach(t),fOo=r(dNe," (I-BERT model)"),dNe.forEach(t),mOo=i(Y),Ob=n(Y,"LI",{});var cNe=s(Ob);W_e=n(cNe,"STRONG",{});var Nwt=s(W_e);gOo=r(Nwt,"layoutlm"),Nwt.forEach(t),hOo=r(cNe," \u2014 "),uz=n(cNe,"A",{href:!0});var qwt=s(uz);pOo=r(qwt,"LayoutLMForMaskedLM"),qwt.forEach(t),uOo=r(cNe," (LayoutLM model)"),cNe.forEach(t),_Oo=i(Y),Vb=n(Y,"LI",{});var fNe=s(Vb);U_e=n(fNe,"STRONG",{});var jwt=s(U_e);bOo=r(jwt,"longformer"),jwt.forEach(t),vOo=r(fNe," \u2014 "),_z=n(fNe,"A",{href:!0});var Dwt=s(_z);FOo=r(Dwt,"LongformerForMaskedLM"),Dwt.forEach(t),TOo=r(fNe," (Longformer model)"),fNe.forEach(t),MOo=i(Y),Xb=n(Y,"LI",{});var mNe=s(Xb);H_e=n(mNe,"STRONG",{});var Gwt=s(H_e);EOo=r(Gwt,"luke"),Gwt.forEach(t),COo=r(mNe," \u2014 "),bz=n(mNe,"A",{href:!0});var Owt=s(bz);wOo=r(Owt,"LukeForMaskedLM"),Owt.forEach(t),AOo=r(mNe," (LUKE model)"),mNe.forEach(t),yOo=i(Y),zb=n(Y,"LI",{});var gNe=s(zb);J_e=n(gNe,"STRONG",{});var Vwt=s(J_e);LOo=r(Vwt,"mbart"),Vwt.forEach(t),xOo=r(gNe," \u2014 "),vz=n(gNe,"A",{href:!0});var Xwt=s(vz);$Oo=r(Xwt,"MBartForConditionalGeneration"),Xwt.forEach(t),kOo=r(gNe," (mBART model)"),gNe.forEach(t),SOo=i(Y),Qb=n(Y,"LI",{});var hNe=s(Qb);Y_e=n(hNe,"STRONG",{});var zwt=s(Y_e);ROo=r(zwt,"megatron-bert"),zwt.forEach(t),POo=r(hNe," \u2014 "),Fz=n(hNe,"A",{href:!0});var Qwt=s(Fz);BOo=r(Qwt,"MegatronBertForMaskedLM"),Qwt.forEach(t),IOo=r(hNe," (Megatron-BERT model)"),hNe.forEach(t),NOo=i(Y),Wb=n(Y,"LI",{});var pNe=s(Wb);K_e=n(pNe,"STRONG",{});var Wwt=s(K_e);qOo=r(Wwt,"mobilebert"),Wwt.forEach(t),jOo=r(pNe," \u2014 "),Tz=n(pNe,"A",{href:!0});var Uwt=s(Tz);DOo=r(Uwt,"MobileBertForMaskedLM"),Uwt.forEach(t),GOo=r(pNe," (MobileBERT model)"),pNe.forEach(t),OOo=i(Y),Ub=n(Y,"LI",{});var uNe=s(Ub);Z_e=n(uNe,"STRONG",{});var Hwt=s(Z_e);VOo=r(Hwt,"mpnet"),Hwt.forEach(t),XOo=r(uNe," \u2014 "),Mz=n(uNe,"A",{href:!0});var Jwt=s(Mz);zOo=r(Jwt,"MPNetForMaskedLM"),Jwt.forEach(t),QOo=r(uNe," (MPNet model)"),uNe.forEach(t),WOo=i(Y),Hb=n(Y,"LI",{});var _Ne=s(Hb);e2e=n(_Ne,"STRONG",{});var Ywt=s(e2e);UOo=r(Ywt,"mvp"),Ywt.forEach(t),HOo=r(_Ne," \u2014 "),Ez=n(_Ne,"A",{href:!0});var Kwt=s(Ez);JOo=r(Kwt,"MvpForConditionalGeneration"),Kwt.forEach(t),YOo=r(_Ne," (MVP model)"),_Ne.forEach(t),KOo=i(Y),Jb=n(Y,"LI",{});var bNe=s(Jb);o2e=n(bNe,"STRONG",{});var Zwt=s(o2e);ZOo=r(Zwt,"nezha"),Zwt.forEach(t),eVo=r(bNe," \u2014 "),Cz=n(bNe,"A",{href:!0});var eAt=s(Cz);oVo=r(eAt,"NezhaForMaskedLM"),eAt.forEach(t),rVo=r(bNe," (Nezha model)"),bNe.forEach(t),tVo=i(Y),Yb=n(Y,"LI",{});var vNe=s(Yb);r2e=n(vNe,"STRONG",{});var oAt=s(r2e);aVo=r(oAt,"nystromformer"),oAt.forEach(t),nVo=r(vNe," \u2014 "),wz=n(vNe,"A",{href:!0});var rAt=s(wz);sVo=r(rAt,"NystromformerForMaskedLM"),rAt.forEach(t),lVo=r(vNe," (Nystr\xF6mformer model)"),vNe.forEach(t),iVo=i(Y),Kb=n(Y,"LI",{});var FNe=s(Kb);t2e=n(FNe,"STRONG",{});var tAt=s(t2e);dVo=r(tAt,"perceiver"),tAt.forEach(t),cVo=r(FNe," \u2014 "),Az=n(FNe,"A",{href:!0});var aAt=s(Az);fVo=r(aAt,"PerceiverForMaskedLM"),aAt.forEach(t),mVo=r(FNe," (Perceiver model)"),FNe.forEach(t),gVo=i(Y),Zb=n(Y,"LI",{});var TNe=s(Zb);a2e=n(TNe,"STRONG",{});var nAt=s(a2e);hVo=r(nAt,"qdqbert"),nAt.forEach(t),pVo=r(TNe," \u2014 "),yz=n(TNe,"A",{href:!0});var sAt=s(yz);uVo=r(sAt,"QDQBertForMaskedLM"),sAt.forEach(t),_Vo=r(TNe," (QDQBert model)"),TNe.forEach(t),bVo=i(Y),ev=n(Y,"LI",{});var MNe=s(ev);n2e=n(MNe,"STRONG",{});var lAt=s(n2e);vVo=r(lAt,"reformer"),lAt.forEach(t),FVo=r(MNe," \u2014 "),Lz=n(MNe,"A",{href:!0});var iAt=s(Lz);TVo=r(iAt,"ReformerForMaskedLM"),iAt.forEach(t),MVo=r(MNe," (Reformer model)"),MNe.forEach(t),EVo=i(Y),ov=n(Y,"LI",{});var ENe=s(ov);s2e=n(ENe,"STRONG",{});var dAt=s(s2e);CVo=r(dAt,"rembert"),dAt.forEach(t),wVo=r(ENe," \u2014 "),xz=n(ENe,"A",{href:!0});var cAt=s(xz);AVo=r(cAt,"RemBertForMaskedLM"),cAt.forEach(t),yVo=r(ENe," (RemBERT model)"),ENe.forEach(t),LVo=i(Y),rv=n(Y,"LI",{});var CNe=s(rv);l2e=n(CNe,"STRONG",{});var fAt=s(l2e);xVo=r(fAt,"roberta"),fAt.forEach(t),$Vo=r(CNe," \u2014 "),$z=n(CNe,"A",{href:!0});var mAt=s($z);kVo=r(mAt,"RobertaForMaskedLM"),mAt.forEach(t),SVo=r(CNe," (RoBERTa model)"),CNe.forEach(t),RVo=i(Y),tv=n(Y,"LI",{});var wNe=s(tv);i2e=n(wNe,"STRONG",{});var gAt=s(i2e);PVo=r(gAt,"roformer"),gAt.forEach(t),BVo=r(wNe," \u2014 "),kz=n(wNe,"A",{href:!0});var hAt=s(kz);IVo=r(hAt,"RoFormerForMaskedLM"),hAt.forEach(t),NVo=r(wNe," (RoFormer model)"),wNe.forEach(t),qVo=i(Y),av=n(Y,"LI",{});var ANe=s(av);d2e=n(ANe,"STRONG",{});var pAt=s(d2e);jVo=r(pAt,"squeezebert"),pAt.forEach(t),DVo=r(ANe," \u2014 "),Sz=n(ANe,"A",{href:!0});var uAt=s(Sz);GVo=r(uAt,"SqueezeBertForMaskedLM"),uAt.forEach(t),OVo=r(ANe," (SqueezeBERT model)"),ANe.forEach(t),VVo=i(Y),nv=n(Y,"LI",{});var yNe=s(nv);c2e=n(yNe,"STRONG",{});var _At=s(c2e);XVo=r(_At,"tapas"),_At.forEach(t),zVo=r(yNe," \u2014 "),Rz=n(yNe,"A",{href:!0});var bAt=s(Rz);QVo=r(bAt,"TapasForMaskedLM"),bAt.forEach(t),WVo=r(yNe," (TAPAS model)"),yNe.forEach(t),UVo=i(Y),sv=n(Y,"LI",{});var LNe=s(sv);f2e=n(LNe,"STRONG",{});var vAt=s(f2e);HVo=r(vAt,"wav2vec2"),vAt.forEach(t),JVo=r(LNe," \u2014 "),m2e=n(LNe,"CODE",{});var FAt=s(m2e);YVo=r(FAt,"Wav2Vec2ForMaskedLM"),FAt.forEach(t),KVo=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),ZVo=i(Y),lv=n(Y,"LI",{});var xNe=s(lv);g2e=n(xNe,"STRONG",{});var TAt=s(g2e);eXo=r(TAt,"xlm"),TAt.forEach(t),oXo=r(xNe," \u2014 "),Pz=n(xNe,"A",{href:!0});var MAt=s(Pz);rXo=r(MAt,"XLMWithLMHeadModel"),MAt.forEach(t),tXo=r(xNe," (XLM model)"),xNe.forEach(t),aXo=i(Y),iv=n(Y,"LI",{});var $Ne=s(iv);h2e=n($Ne,"STRONG",{});var EAt=s(h2e);nXo=r(EAt,"xlm-roberta"),EAt.forEach(t),sXo=r($Ne," \u2014 "),Bz=n($Ne,"A",{href:!0});var CAt=s(Bz);lXo=r(CAt,"XLMRobertaForMaskedLM"),CAt.forEach(t),iXo=r($Ne," (XLM-RoBERTa model)"),$Ne.forEach(t),dXo=i(Y),dv=n(Y,"LI",{});var kNe=s(dv);p2e=n(kNe,"STRONG",{});var wAt=s(p2e);cXo=r(wAt,"xlm-roberta-xl"),wAt.forEach(t),fXo=r(kNe," \u2014 "),Iz=n(kNe,"A",{href:!0});var AAt=s(Iz);mXo=r(AAt,"XLMRobertaXLForMaskedLM"),AAt.forEach(t),gXo=r(kNe," (XLM-RoBERTa-XL model)"),kNe.forEach(t),hXo=i(Y),cv=n(Y,"LI",{});var SNe=s(cv);u2e=n(SNe,"STRONG",{});var yAt=s(u2e);pXo=r(yAt,"yoso"),yAt.forEach(t),uXo=r(SNe," \u2014 "),Nz=n(SNe,"A",{href:!0});var LAt=s(Nz);_Xo=r(LAt,"YosoForMaskedLM"),LAt.forEach(t),bXo=r(SNe," (YOSO model)"),SNe.forEach(t),Y.forEach(t),vXo=i(va),fv=n(va,"P",{});var RNe=s(fv);FXo=r(RNe,"The model is set in evaluation mode by default using "),_2e=n(RNe,"CODE",{});var xAt=s(_2e);TXo=r(xAt,"model.eval()"),xAt.forEach(t),MXo=r(RNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(RNe,"CODE",{});var $At=s(b2e);EXo=r($At,"model.train()"),$At.forEach(t),RNe.forEach(t),CXo=i(va),T(mv.$$.fragment,va),va.forEach(t),Ml.forEach(t),nHe=i(f),Fd=n(f,"H2",{class:!0});var _Ye=s(Fd);gv=n(_Ye,"A",{id:!0,class:!0,href:!0});var kAt=s(gv);v2e=n(kAt,"SPAN",{});var SAt=s(v2e);T(w9.$$.fragment,SAt),SAt.forEach(t),kAt.forEach(t),wXo=i(_Ye),F2e=n(_Ye,"SPAN",{});var RAt=s(F2e);AXo=r(RAt,"AutoModelForSeq2SeqLM"),RAt.forEach(t),_Ye.forEach(t),sHe=i(f),No=n(f,"DIV",{class:!0});var El=s(No);T(A9.$$.fragment,El),yXo=i(El),Td=n(El,"P",{});var wne=s(Td);LXo=r(wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qz=n(wne,"A",{href:!0});var PAt=s(qz);xXo=r(PAt,"from_pretrained()"),PAt.forEach(t),$Xo=r(wne," class method or the "),jz=n(wne,"A",{href:!0});var BAt=s(jz);kXo=r(BAt,"from_config()"),BAt.forEach(t),SXo=r(wne,` class
method.`),wne.forEach(t),RXo=i(El),y9=n(El,"P",{});var bYe=s(y9);PXo=r(bYe,"This class cannot be instantiated directly using "),T2e=n(bYe,"CODE",{});var IAt=s(T2e);BXo=r(IAt,"__init__()"),IAt.forEach(t),IXo=r(bYe," (throws an error)."),bYe.forEach(t),NXo=i(El),bt=n(El,"DIV",{class:!0});var q6=s(bt);T(L9.$$.fragment,q6),qXo=i(q6),M2e=n(q6,"P",{});var NAt=s(M2e);jXo=r(NAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NAt.forEach(t),DXo=i(q6),Md=n(q6,"P",{});var Ane=s(Md);GXo=r(Ane,`Note:
Loading a model from its configuration file does `),E2e=n(Ane,"STRONG",{});var qAt=s(E2e);OXo=r(qAt,"not"),qAt.forEach(t),VXo=r(Ane,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(Ane,"A",{href:!0});var jAt=s(Dz);XXo=r(jAt,"from_pretrained()"),jAt.forEach(t),zXo=r(Ane," to load the model weights."),Ane.forEach(t),QXo=i(q6),T(hv.$$.fragment,q6),q6.forEach(t),WXo=i(El),oo=n(El,"DIV",{class:!0});var Fa=s(oo);T(x9.$$.fragment,Fa),UXo=i(Fa),C2e=n(Fa,"P",{});var DAt=s(C2e);HXo=r(DAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DAt.forEach(t),JXo=i(Fa),Ya=n(Fa,"P",{});var j6=s(Ya);YXo=r(j6,"The model class to instantiate is selected based on the "),w2e=n(j6,"CODE",{});var GAt=s(w2e);KXo=r(GAt,"model_type"),GAt.forEach(t),ZXo=r(j6,` property of the config object (either
passed as an argument or loaded from `),A2e=n(j6,"CODE",{});var OAt=s(A2e);ezo=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),ozo=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(j6,"CODE",{});var VAt=s(y2e);rzo=r(VAt,"pretrained_model_name_or_path"),VAt.forEach(t),tzo=r(j6,":"),j6.forEach(t),azo=i(Fa),me=n(Fa,"UL",{});var _e=s(me);pv=n(_e,"LI",{});var PNe=s(pv);L2e=n(PNe,"STRONG",{});var XAt=s(L2e);nzo=r(XAt,"bart"),XAt.forEach(t),szo=r(PNe," \u2014 "),Gz=n(PNe,"A",{href:!0});var zAt=s(Gz);lzo=r(zAt,"BartForConditionalGeneration"),zAt.forEach(t),izo=r(PNe," (BART model)"),PNe.forEach(t),dzo=i(_e),uv=n(_e,"LI",{});var BNe=s(uv);x2e=n(BNe,"STRONG",{});var QAt=s(x2e);czo=r(QAt,"bigbird_pegasus"),QAt.forEach(t),fzo=r(BNe," \u2014 "),Oz=n(BNe,"A",{href:!0});var WAt=s(Oz);mzo=r(WAt,"BigBirdPegasusForConditionalGeneration"),WAt.forEach(t),gzo=r(BNe," (BigBird-Pegasus model)"),BNe.forEach(t),hzo=i(_e),_v=n(_e,"LI",{});var INe=s(_v);$2e=n(INe,"STRONG",{});var UAt=s($2e);pzo=r(UAt,"blenderbot"),UAt.forEach(t),uzo=r(INe," \u2014 "),Vz=n(INe,"A",{href:!0});var HAt=s(Vz);_zo=r(HAt,"BlenderbotForConditionalGeneration"),HAt.forEach(t),bzo=r(INe," (Blenderbot model)"),INe.forEach(t),vzo=i(_e),bv=n(_e,"LI",{});var NNe=s(bv);k2e=n(NNe,"STRONG",{});var JAt=s(k2e);Fzo=r(JAt,"blenderbot-small"),JAt.forEach(t),Tzo=r(NNe," \u2014 "),Xz=n(NNe,"A",{href:!0});var YAt=s(Xz);Mzo=r(YAt,"BlenderbotSmallForConditionalGeneration"),YAt.forEach(t),Ezo=r(NNe," (BlenderbotSmall model)"),NNe.forEach(t),Czo=i(_e),vv=n(_e,"LI",{});var qNe=s(vv);S2e=n(qNe,"STRONG",{});var KAt=s(S2e);wzo=r(KAt,"encoder-decoder"),KAt.forEach(t),Azo=r(qNe," \u2014 "),zz=n(qNe,"A",{href:!0});var ZAt=s(zz);yzo=r(ZAt,"EncoderDecoderModel"),ZAt.forEach(t),Lzo=r(qNe," (Encoder decoder model)"),qNe.forEach(t),xzo=i(_e),Fv=n(_e,"LI",{});var jNe=s(Fv);R2e=n(jNe,"STRONG",{});var e6t=s(R2e);$zo=r(e6t,"fsmt"),e6t.forEach(t),kzo=r(jNe," \u2014 "),Qz=n(jNe,"A",{href:!0});var o6t=s(Qz);Szo=r(o6t,"FSMTForConditionalGeneration"),o6t.forEach(t),Rzo=r(jNe," (FairSeq Machine-Translation model)"),jNe.forEach(t),Pzo=i(_e),Tv=n(_e,"LI",{});var DNe=s(Tv);P2e=n(DNe,"STRONG",{});var r6t=s(P2e);Bzo=r(r6t,"led"),r6t.forEach(t),Izo=r(DNe," \u2014 "),Wz=n(DNe,"A",{href:!0});var t6t=s(Wz);Nzo=r(t6t,"LEDForConditionalGeneration"),t6t.forEach(t),qzo=r(DNe," (LED model)"),DNe.forEach(t),jzo=i(_e),Mv=n(_e,"LI",{});var GNe=s(Mv);B2e=n(GNe,"STRONG",{});var a6t=s(B2e);Dzo=r(a6t,"longt5"),a6t.forEach(t),Gzo=r(GNe," \u2014 "),Uz=n(GNe,"A",{href:!0});var n6t=s(Uz);Ozo=r(n6t,"LongT5ForConditionalGeneration"),n6t.forEach(t),Vzo=r(GNe," (LongT5 model)"),GNe.forEach(t),Xzo=i(_e),Ev=n(_e,"LI",{});var ONe=s(Ev);I2e=n(ONe,"STRONG",{});var s6t=s(I2e);zzo=r(s6t,"m2m_100"),s6t.forEach(t),Qzo=r(ONe," \u2014 "),Hz=n(ONe,"A",{href:!0});var l6t=s(Hz);Wzo=r(l6t,"M2M100ForConditionalGeneration"),l6t.forEach(t),Uzo=r(ONe," (M2M100 model)"),ONe.forEach(t),Hzo=i(_e),Cv=n(_e,"LI",{});var VNe=s(Cv);N2e=n(VNe,"STRONG",{});var i6t=s(N2e);Jzo=r(i6t,"marian"),i6t.forEach(t),Yzo=r(VNe," \u2014 "),Jz=n(VNe,"A",{href:!0});var d6t=s(Jz);Kzo=r(d6t,"MarianMTModel"),d6t.forEach(t),Zzo=r(VNe," (Marian model)"),VNe.forEach(t),eQo=i(_e),wv=n(_e,"LI",{});var XNe=s(wv);q2e=n(XNe,"STRONG",{});var c6t=s(q2e);oQo=r(c6t,"mbart"),c6t.forEach(t),rQo=r(XNe," \u2014 "),Yz=n(XNe,"A",{href:!0});var f6t=s(Yz);tQo=r(f6t,"MBartForConditionalGeneration"),f6t.forEach(t),aQo=r(XNe," (mBART model)"),XNe.forEach(t),nQo=i(_e),Av=n(_e,"LI",{});var zNe=s(Av);j2e=n(zNe,"STRONG",{});var m6t=s(j2e);sQo=r(m6t,"mt5"),m6t.forEach(t),lQo=r(zNe," \u2014 "),Kz=n(zNe,"A",{href:!0});var g6t=s(Kz);iQo=r(g6t,"MT5ForConditionalGeneration"),g6t.forEach(t),dQo=r(zNe," (MT5 model)"),zNe.forEach(t),cQo=i(_e),yv=n(_e,"LI",{});var QNe=s(yv);D2e=n(QNe,"STRONG",{});var h6t=s(D2e);fQo=r(h6t,"mvp"),h6t.forEach(t),mQo=r(QNe," \u2014 "),Zz=n(QNe,"A",{href:!0});var p6t=s(Zz);gQo=r(p6t,"MvpForConditionalGeneration"),p6t.forEach(t),hQo=r(QNe," (MVP model)"),QNe.forEach(t),pQo=i(_e),Lv=n(_e,"LI",{});var WNe=s(Lv);G2e=n(WNe,"STRONG",{});var u6t=s(G2e);uQo=r(u6t,"nllb"),u6t.forEach(t),_Qo=r(WNe," \u2014 "),eQ=n(WNe,"A",{href:!0});var _6t=s(eQ);bQo=r(_6t,"M2M100ForConditionalGeneration"),_6t.forEach(t),vQo=r(WNe," (NLLB model)"),WNe.forEach(t),FQo=i(_e),xv=n(_e,"LI",{});var UNe=s(xv);O2e=n(UNe,"STRONG",{});var b6t=s(O2e);TQo=r(b6t,"pegasus"),b6t.forEach(t),MQo=r(UNe," \u2014 "),oQ=n(UNe,"A",{href:!0});var v6t=s(oQ);EQo=r(v6t,"PegasusForConditionalGeneration"),v6t.forEach(t),CQo=r(UNe," (Pegasus model)"),UNe.forEach(t),wQo=i(_e),$v=n(_e,"LI",{});var HNe=s($v);V2e=n(HNe,"STRONG",{});var F6t=s(V2e);AQo=r(F6t,"plbart"),F6t.forEach(t),yQo=r(HNe," \u2014 "),rQ=n(HNe,"A",{href:!0});var T6t=s(rQ);LQo=r(T6t,"PLBartForConditionalGeneration"),T6t.forEach(t),xQo=r(HNe," (PLBart model)"),HNe.forEach(t),$Qo=i(_e),kv=n(_e,"LI",{});var JNe=s(kv);X2e=n(JNe,"STRONG",{});var M6t=s(X2e);kQo=r(M6t,"prophetnet"),M6t.forEach(t),SQo=r(JNe," \u2014 "),tQ=n(JNe,"A",{href:!0});var E6t=s(tQ);RQo=r(E6t,"ProphetNetForConditionalGeneration"),E6t.forEach(t),PQo=r(JNe," (ProphetNet model)"),JNe.forEach(t),BQo=i(_e),Sv=n(_e,"LI",{});var YNe=s(Sv);z2e=n(YNe,"STRONG",{});var C6t=s(z2e);IQo=r(C6t,"t5"),C6t.forEach(t),NQo=r(YNe," \u2014 "),aQ=n(YNe,"A",{href:!0});var w6t=s(aQ);qQo=r(w6t,"T5ForConditionalGeneration"),w6t.forEach(t),jQo=r(YNe," (T5 model)"),YNe.forEach(t),DQo=i(_e),Rv=n(_e,"LI",{});var KNe=s(Rv);Q2e=n(KNe,"STRONG",{});var A6t=s(Q2e);GQo=r(A6t,"xlm-prophetnet"),A6t.forEach(t),OQo=r(KNe," \u2014 "),nQ=n(KNe,"A",{href:!0});var y6t=s(nQ);VQo=r(y6t,"XLMProphetNetForConditionalGeneration"),y6t.forEach(t),XQo=r(KNe," (XLM-ProphetNet model)"),KNe.forEach(t),_e.forEach(t),zQo=i(Fa),Pv=n(Fa,"P",{});var ZNe=s(Pv);QQo=r(ZNe,"The model is set in evaluation mode by default using "),W2e=n(ZNe,"CODE",{});var L6t=s(W2e);WQo=r(L6t,"model.eval()"),L6t.forEach(t),UQo=r(ZNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(ZNe,"CODE",{});var x6t=s(U2e);HQo=r(x6t,"model.train()"),x6t.forEach(t),ZNe.forEach(t),JQo=i(Fa),T(Bv.$$.fragment,Fa),Fa.forEach(t),El.forEach(t),lHe=i(f),Ed=n(f,"H2",{class:!0});var vYe=s(Ed);Iv=n(vYe,"A",{id:!0,class:!0,href:!0});var $6t=s(Iv);H2e=n($6t,"SPAN",{});var k6t=s(H2e);T($9.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),YQo=i(vYe),J2e=n(vYe,"SPAN",{});var S6t=s(J2e);KQo=r(S6t,"AutoModelForSequenceClassification"),S6t.forEach(t),vYe.forEach(t),iHe=i(f),qo=n(f,"DIV",{class:!0});var Cl=s(qo);T(k9.$$.fragment,Cl),ZQo=i(Cl),Cd=n(Cl,"P",{});var yne=s(Cd);eWo=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sQ=n(yne,"A",{href:!0});var R6t=s(sQ);oWo=r(R6t,"from_pretrained()"),R6t.forEach(t),rWo=r(yne," class method or the "),lQ=n(yne,"A",{href:!0});var P6t=s(lQ);tWo=r(P6t,"from_config()"),P6t.forEach(t),aWo=r(yne,` class
method.`),yne.forEach(t),nWo=i(Cl),S9=n(Cl,"P",{});var FYe=s(S9);sWo=r(FYe,"This class cannot be instantiated directly using "),Y2e=n(FYe,"CODE",{});var B6t=s(Y2e);lWo=r(B6t,"__init__()"),B6t.forEach(t),iWo=r(FYe," (throws an error)."),FYe.forEach(t),dWo=i(Cl),vt=n(Cl,"DIV",{class:!0});var D6=s(vt);T(R9.$$.fragment,D6),cWo=i(D6),K2e=n(D6,"P",{});var I6t=s(K2e);fWo=r(I6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I6t.forEach(t),mWo=i(D6),wd=n(D6,"P",{});var Lne=s(wd);gWo=r(Lne,`Note:
Loading a model from its configuration file does `),Z2e=n(Lne,"STRONG",{});var N6t=s(Z2e);hWo=r(N6t,"not"),N6t.forEach(t),pWo=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(Lne,"A",{href:!0});var q6t=s(iQ);uWo=r(q6t,"from_pretrained()"),q6t.forEach(t),_Wo=r(Lne," to load the model weights."),Lne.forEach(t),bWo=i(D6),T(Nv.$$.fragment,D6),D6.forEach(t),vWo=i(Cl),ro=n(Cl,"DIV",{class:!0});var Ta=s(ro);T(P9.$$.fragment,Ta),FWo=i(Ta),e1e=n(Ta,"P",{});var j6t=s(e1e);TWo=r(j6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j6t.forEach(t),MWo=i(Ta),Ka=n(Ta,"P",{});var G6=s(Ka);EWo=r(G6,"The model class to instantiate is selected based on the "),o1e=n(G6,"CODE",{});var D6t=s(o1e);CWo=r(D6t,"model_type"),D6t.forEach(t),wWo=r(G6,` property of the config object (either
passed as an argument or loaded from `),r1e=n(G6,"CODE",{});var G6t=s(r1e);AWo=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),yWo=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(G6,"CODE",{});var O6t=s(t1e);LWo=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),xWo=r(G6,":"),G6.forEach(t),$Wo=i(Ta),N=n(Ta,"UL",{});var j=s(N);qv=n(j,"LI",{});var eqe=s(qv);a1e=n(eqe,"STRONG",{});var V6t=s(a1e);kWo=r(V6t,"albert"),V6t.forEach(t),SWo=r(eqe," \u2014 "),dQ=n(eqe,"A",{href:!0});var X6t=s(dQ);RWo=r(X6t,"AlbertForSequenceClassification"),X6t.forEach(t),PWo=r(eqe," (ALBERT model)"),eqe.forEach(t),BWo=i(j),jv=n(j,"LI",{});var oqe=s(jv);n1e=n(oqe,"STRONG",{});var z6t=s(n1e);IWo=r(z6t,"bart"),z6t.forEach(t),NWo=r(oqe," \u2014 "),cQ=n(oqe,"A",{href:!0});var Q6t=s(cQ);qWo=r(Q6t,"BartForSequenceClassification"),Q6t.forEach(t),jWo=r(oqe," (BART model)"),oqe.forEach(t),DWo=i(j),Dv=n(j,"LI",{});var rqe=s(Dv);s1e=n(rqe,"STRONG",{});var W6t=s(s1e);GWo=r(W6t,"bert"),W6t.forEach(t),OWo=r(rqe," \u2014 "),fQ=n(rqe,"A",{href:!0});var U6t=s(fQ);VWo=r(U6t,"BertForSequenceClassification"),U6t.forEach(t),XWo=r(rqe," (BERT model)"),rqe.forEach(t),zWo=i(j),Gv=n(j,"LI",{});var tqe=s(Gv);l1e=n(tqe,"STRONG",{});var H6t=s(l1e);QWo=r(H6t,"big_bird"),H6t.forEach(t),WWo=r(tqe," \u2014 "),mQ=n(tqe,"A",{href:!0});var J6t=s(mQ);UWo=r(J6t,"BigBirdForSequenceClassification"),J6t.forEach(t),HWo=r(tqe," (BigBird model)"),tqe.forEach(t),JWo=i(j),Ov=n(j,"LI",{});var aqe=s(Ov);i1e=n(aqe,"STRONG",{});var Y6t=s(i1e);YWo=r(Y6t,"bigbird_pegasus"),Y6t.forEach(t),KWo=r(aqe," \u2014 "),gQ=n(aqe,"A",{href:!0});var K6t=s(gQ);ZWo=r(K6t,"BigBirdPegasusForSequenceClassification"),K6t.forEach(t),eUo=r(aqe," (BigBird-Pegasus model)"),aqe.forEach(t),oUo=i(j),Vv=n(j,"LI",{});var nqe=s(Vv);d1e=n(nqe,"STRONG",{});var Z6t=s(d1e);rUo=r(Z6t,"bloom"),Z6t.forEach(t),tUo=r(nqe," \u2014 "),hQ=n(nqe,"A",{href:!0});var eyt=s(hQ);aUo=r(eyt,"BloomForSequenceClassification"),eyt.forEach(t),nUo=r(nqe," (BLOOM model)"),nqe.forEach(t),sUo=i(j),Xv=n(j,"LI",{});var sqe=s(Xv);c1e=n(sqe,"STRONG",{});var oyt=s(c1e);lUo=r(oyt,"camembert"),oyt.forEach(t),iUo=r(sqe," \u2014 "),pQ=n(sqe,"A",{href:!0});var ryt=s(pQ);dUo=r(ryt,"CamembertForSequenceClassification"),ryt.forEach(t),cUo=r(sqe," (CamemBERT model)"),sqe.forEach(t),fUo=i(j),zv=n(j,"LI",{});var lqe=s(zv);f1e=n(lqe,"STRONG",{});var tyt=s(f1e);mUo=r(tyt,"canine"),tyt.forEach(t),gUo=r(lqe," \u2014 "),uQ=n(lqe,"A",{href:!0});var ayt=s(uQ);hUo=r(ayt,"CanineForSequenceClassification"),ayt.forEach(t),pUo=r(lqe," (CANINE model)"),lqe.forEach(t),uUo=i(j),Qv=n(j,"LI",{});var iqe=s(Qv);m1e=n(iqe,"STRONG",{});var nyt=s(m1e);_Uo=r(nyt,"convbert"),nyt.forEach(t),bUo=r(iqe," \u2014 "),_Q=n(iqe,"A",{href:!0});var syt=s(_Q);vUo=r(syt,"ConvBertForSequenceClassification"),syt.forEach(t),FUo=r(iqe," (ConvBERT model)"),iqe.forEach(t),TUo=i(j),Wv=n(j,"LI",{});var dqe=s(Wv);g1e=n(dqe,"STRONG",{});var lyt=s(g1e);MUo=r(lyt,"ctrl"),lyt.forEach(t),EUo=r(dqe," \u2014 "),bQ=n(dqe,"A",{href:!0});var iyt=s(bQ);CUo=r(iyt,"CTRLForSequenceClassification"),iyt.forEach(t),wUo=r(dqe," (CTRL model)"),dqe.forEach(t),AUo=i(j),Uv=n(j,"LI",{});var cqe=s(Uv);h1e=n(cqe,"STRONG",{});var dyt=s(h1e);yUo=r(dyt,"data2vec-text"),dyt.forEach(t),LUo=r(cqe," \u2014 "),vQ=n(cqe,"A",{href:!0});var cyt=s(vQ);xUo=r(cyt,"Data2VecTextForSequenceClassification"),cyt.forEach(t),$Uo=r(cqe," (Data2VecText model)"),cqe.forEach(t),kUo=i(j),Hv=n(j,"LI",{});var fqe=s(Hv);p1e=n(fqe,"STRONG",{});var fyt=s(p1e);SUo=r(fyt,"deberta"),fyt.forEach(t),RUo=r(fqe," \u2014 "),FQ=n(fqe,"A",{href:!0});var myt=s(FQ);PUo=r(myt,"DebertaForSequenceClassification"),myt.forEach(t),BUo=r(fqe," (DeBERTa model)"),fqe.forEach(t),IUo=i(j),Jv=n(j,"LI",{});var mqe=s(Jv);u1e=n(mqe,"STRONG",{});var gyt=s(u1e);NUo=r(gyt,"deberta-v2"),gyt.forEach(t),qUo=r(mqe," \u2014 "),TQ=n(mqe,"A",{href:!0});var hyt=s(TQ);jUo=r(hyt,"DebertaV2ForSequenceClassification"),hyt.forEach(t),DUo=r(mqe," (DeBERTa-v2 model)"),mqe.forEach(t),GUo=i(j),Yv=n(j,"LI",{});var gqe=s(Yv);_1e=n(gqe,"STRONG",{});var pyt=s(_1e);OUo=r(pyt,"distilbert"),pyt.forEach(t),VUo=r(gqe," \u2014 "),MQ=n(gqe,"A",{href:!0});var uyt=s(MQ);XUo=r(uyt,"DistilBertForSequenceClassification"),uyt.forEach(t),zUo=r(gqe," (DistilBERT model)"),gqe.forEach(t),QUo=i(j),Kv=n(j,"LI",{});var hqe=s(Kv);b1e=n(hqe,"STRONG",{});var _yt=s(b1e);WUo=r(_yt,"electra"),_yt.forEach(t),UUo=r(hqe," \u2014 "),EQ=n(hqe,"A",{href:!0});var byt=s(EQ);HUo=r(byt,"ElectraForSequenceClassification"),byt.forEach(t),JUo=r(hqe," (ELECTRA model)"),hqe.forEach(t),YUo=i(j),Zv=n(j,"LI",{});var pqe=s(Zv);v1e=n(pqe,"STRONG",{});var vyt=s(v1e);KUo=r(vyt,"flaubert"),vyt.forEach(t),ZUo=r(pqe," \u2014 "),CQ=n(pqe,"A",{href:!0});var Fyt=s(CQ);eHo=r(Fyt,"FlaubertForSequenceClassification"),Fyt.forEach(t),oHo=r(pqe," (FlauBERT model)"),pqe.forEach(t),rHo=i(j),e3=n(j,"LI",{});var uqe=s(e3);F1e=n(uqe,"STRONG",{});var Tyt=s(F1e);tHo=r(Tyt,"fnet"),Tyt.forEach(t),aHo=r(uqe," \u2014 "),wQ=n(uqe,"A",{href:!0});var Myt=s(wQ);nHo=r(Myt,"FNetForSequenceClassification"),Myt.forEach(t),sHo=r(uqe," (FNet model)"),uqe.forEach(t),lHo=i(j),o3=n(j,"LI",{});var _qe=s(o3);T1e=n(_qe,"STRONG",{});var Eyt=s(T1e);iHo=r(Eyt,"funnel"),Eyt.forEach(t),dHo=r(_qe," \u2014 "),AQ=n(_qe,"A",{href:!0});var Cyt=s(AQ);cHo=r(Cyt,"FunnelForSequenceClassification"),Cyt.forEach(t),fHo=r(_qe," (Funnel Transformer model)"),_qe.forEach(t),mHo=i(j),r3=n(j,"LI",{});var bqe=s(r3);M1e=n(bqe,"STRONG",{});var wyt=s(M1e);gHo=r(wyt,"gpt2"),wyt.forEach(t),hHo=r(bqe," \u2014 "),yQ=n(bqe,"A",{href:!0});var Ayt=s(yQ);pHo=r(Ayt,"GPT2ForSequenceClassification"),Ayt.forEach(t),uHo=r(bqe," (OpenAI GPT-2 model)"),bqe.forEach(t),_Ho=i(j),t3=n(j,"LI",{});var vqe=s(t3);E1e=n(vqe,"STRONG",{});var yyt=s(E1e);bHo=r(yyt,"gpt_neo"),yyt.forEach(t),vHo=r(vqe," \u2014 "),LQ=n(vqe,"A",{href:!0});var Lyt=s(LQ);FHo=r(Lyt,"GPTNeoForSequenceClassification"),Lyt.forEach(t),THo=r(vqe," (GPT Neo model)"),vqe.forEach(t),MHo=i(j),a3=n(j,"LI",{});var Fqe=s(a3);C1e=n(Fqe,"STRONG",{});var xyt=s(C1e);EHo=r(xyt,"gptj"),xyt.forEach(t),CHo=r(Fqe," \u2014 "),xQ=n(Fqe,"A",{href:!0});var $yt=s(xQ);wHo=r($yt,"GPTJForSequenceClassification"),$yt.forEach(t),AHo=r(Fqe," (GPT-J model)"),Fqe.forEach(t),yHo=i(j),n3=n(j,"LI",{});var Tqe=s(n3);w1e=n(Tqe,"STRONG",{});var kyt=s(w1e);LHo=r(kyt,"ibert"),kyt.forEach(t),xHo=r(Tqe," \u2014 "),$Q=n(Tqe,"A",{href:!0});var Syt=s($Q);$Ho=r(Syt,"IBertForSequenceClassification"),Syt.forEach(t),kHo=r(Tqe," (I-BERT model)"),Tqe.forEach(t),SHo=i(j),s3=n(j,"LI",{});var Mqe=s(s3);A1e=n(Mqe,"STRONG",{});var Ryt=s(A1e);RHo=r(Ryt,"layoutlm"),Ryt.forEach(t),PHo=r(Mqe," \u2014 "),kQ=n(Mqe,"A",{href:!0});var Pyt=s(kQ);BHo=r(Pyt,"LayoutLMForSequenceClassification"),Pyt.forEach(t),IHo=r(Mqe," (LayoutLM model)"),Mqe.forEach(t),NHo=i(j),l3=n(j,"LI",{});var Eqe=s(l3);y1e=n(Eqe,"STRONG",{});var Byt=s(y1e);qHo=r(Byt,"layoutlmv2"),Byt.forEach(t),jHo=r(Eqe," \u2014 "),SQ=n(Eqe,"A",{href:!0});var Iyt=s(SQ);DHo=r(Iyt,"LayoutLMv2ForSequenceClassification"),Iyt.forEach(t),GHo=r(Eqe," (LayoutLMv2 model)"),Eqe.forEach(t),OHo=i(j),i3=n(j,"LI",{});var Cqe=s(i3);L1e=n(Cqe,"STRONG",{});var Nyt=s(L1e);VHo=r(Nyt,"layoutlmv3"),Nyt.forEach(t),XHo=r(Cqe," \u2014 "),RQ=n(Cqe,"A",{href:!0});var qyt=s(RQ);zHo=r(qyt,"LayoutLMv3ForSequenceClassification"),qyt.forEach(t),QHo=r(Cqe," (LayoutLMv3 model)"),Cqe.forEach(t),WHo=i(j),d3=n(j,"LI",{});var wqe=s(d3);x1e=n(wqe,"STRONG",{});var jyt=s(x1e);UHo=r(jyt,"led"),jyt.forEach(t),HHo=r(wqe," \u2014 "),PQ=n(wqe,"A",{href:!0});var Dyt=s(PQ);JHo=r(Dyt,"LEDForSequenceClassification"),Dyt.forEach(t),YHo=r(wqe," (LED model)"),wqe.forEach(t),KHo=i(j),c3=n(j,"LI",{});var Aqe=s(c3);$1e=n(Aqe,"STRONG",{});var Gyt=s($1e);ZHo=r(Gyt,"longformer"),Gyt.forEach(t),eJo=r(Aqe," \u2014 "),BQ=n(Aqe,"A",{href:!0});var Oyt=s(BQ);oJo=r(Oyt,"LongformerForSequenceClassification"),Oyt.forEach(t),rJo=r(Aqe," (Longformer model)"),Aqe.forEach(t),tJo=i(j),f3=n(j,"LI",{});var yqe=s(f3);k1e=n(yqe,"STRONG",{});var Vyt=s(k1e);aJo=r(Vyt,"luke"),Vyt.forEach(t),nJo=r(yqe," \u2014 "),IQ=n(yqe,"A",{href:!0});var Xyt=s(IQ);sJo=r(Xyt,"LukeForSequenceClassification"),Xyt.forEach(t),lJo=r(yqe," (LUKE model)"),yqe.forEach(t),iJo=i(j),m3=n(j,"LI",{});var Lqe=s(m3);S1e=n(Lqe,"STRONG",{});var zyt=s(S1e);dJo=r(zyt,"mbart"),zyt.forEach(t),cJo=r(Lqe," \u2014 "),NQ=n(Lqe,"A",{href:!0});var Qyt=s(NQ);fJo=r(Qyt,"MBartForSequenceClassification"),Qyt.forEach(t),mJo=r(Lqe," (mBART model)"),Lqe.forEach(t),gJo=i(j),g3=n(j,"LI",{});var xqe=s(g3);R1e=n(xqe,"STRONG",{});var Wyt=s(R1e);hJo=r(Wyt,"megatron-bert"),Wyt.forEach(t),pJo=r(xqe," \u2014 "),qQ=n(xqe,"A",{href:!0});var Uyt=s(qQ);uJo=r(Uyt,"MegatronBertForSequenceClassification"),Uyt.forEach(t),_Jo=r(xqe," (Megatron-BERT model)"),xqe.forEach(t),bJo=i(j),h3=n(j,"LI",{});var $qe=s(h3);P1e=n($qe,"STRONG",{});var Hyt=s(P1e);vJo=r(Hyt,"mobilebert"),Hyt.forEach(t),FJo=r($qe," \u2014 "),jQ=n($qe,"A",{href:!0});var Jyt=s(jQ);TJo=r(Jyt,"MobileBertForSequenceClassification"),Jyt.forEach(t),MJo=r($qe," (MobileBERT model)"),$qe.forEach(t),EJo=i(j),p3=n(j,"LI",{});var kqe=s(p3);B1e=n(kqe,"STRONG",{});var Yyt=s(B1e);CJo=r(Yyt,"mpnet"),Yyt.forEach(t),wJo=r(kqe," \u2014 "),DQ=n(kqe,"A",{href:!0});var Kyt=s(DQ);AJo=r(Kyt,"MPNetForSequenceClassification"),Kyt.forEach(t),yJo=r(kqe," (MPNet model)"),kqe.forEach(t),LJo=i(j),u3=n(j,"LI",{});var Sqe=s(u3);I1e=n(Sqe,"STRONG",{});var Zyt=s(I1e);xJo=r(Zyt,"mvp"),Zyt.forEach(t),$Jo=r(Sqe," \u2014 "),GQ=n(Sqe,"A",{href:!0});var eLt=s(GQ);kJo=r(eLt,"MvpForSequenceClassification"),eLt.forEach(t),SJo=r(Sqe," (MVP model)"),Sqe.forEach(t),RJo=i(j),_3=n(j,"LI",{});var Rqe=s(_3);N1e=n(Rqe,"STRONG",{});var oLt=s(N1e);PJo=r(oLt,"nezha"),oLt.forEach(t),BJo=r(Rqe," \u2014 "),OQ=n(Rqe,"A",{href:!0});var rLt=s(OQ);IJo=r(rLt,"NezhaForSequenceClassification"),rLt.forEach(t),NJo=r(Rqe," (Nezha model)"),Rqe.forEach(t),qJo=i(j),b3=n(j,"LI",{});var Pqe=s(b3);q1e=n(Pqe,"STRONG",{});var tLt=s(q1e);jJo=r(tLt,"nystromformer"),tLt.forEach(t),DJo=r(Pqe," \u2014 "),VQ=n(Pqe,"A",{href:!0});var aLt=s(VQ);GJo=r(aLt,"NystromformerForSequenceClassification"),aLt.forEach(t),OJo=r(Pqe," (Nystr\xF6mformer model)"),Pqe.forEach(t),VJo=i(j),v3=n(j,"LI",{});var Bqe=s(v3);j1e=n(Bqe,"STRONG",{});var nLt=s(j1e);XJo=r(nLt,"openai-gpt"),nLt.forEach(t),zJo=r(Bqe," \u2014 "),XQ=n(Bqe,"A",{href:!0});var sLt=s(XQ);QJo=r(sLt,"OpenAIGPTForSequenceClassification"),sLt.forEach(t),WJo=r(Bqe," (OpenAI GPT model)"),Bqe.forEach(t),UJo=i(j),F3=n(j,"LI",{});var Iqe=s(F3);D1e=n(Iqe,"STRONG",{});var lLt=s(D1e);HJo=r(lLt,"opt"),lLt.forEach(t),JJo=r(Iqe," \u2014 "),zQ=n(Iqe,"A",{href:!0});var iLt=s(zQ);YJo=r(iLt,"OPTForSequenceClassification"),iLt.forEach(t),KJo=r(Iqe," (OPT model)"),Iqe.forEach(t),ZJo=i(j),T3=n(j,"LI",{});var Nqe=s(T3);G1e=n(Nqe,"STRONG",{});var dLt=s(G1e);eYo=r(dLt,"perceiver"),dLt.forEach(t),oYo=r(Nqe," \u2014 "),QQ=n(Nqe,"A",{href:!0});var cLt=s(QQ);rYo=r(cLt,"PerceiverForSequenceClassification"),cLt.forEach(t),tYo=r(Nqe," (Perceiver model)"),Nqe.forEach(t),aYo=i(j),M3=n(j,"LI",{});var qqe=s(M3);O1e=n(qqe,"STRONG",{});var fLt=s(O1e);nYo=r(fLt,"plbart"),fLt.forEach(t),sYo=r(qqe," \u2014 "),WQ=n(qqe,"A",{href:!0});var mLt=s(WQ);lYo=r(mLt,"PLBartForSequenceClassification"),mLt.forEach(t),iYo=r(qqe," (PLBart model)"),qqe.forEach(t),dYo=i(j),E3=n(j,"LI",{});var jqe=s(E3);V1e=n(jqe,"STRONG",{});var gLt=s(V1e);cYo=r(gLt,"qdqbert"),gLt.forEach(t),fYo=r(jqe," \u2014 "),UQ=n(jqe,"A",{href:!0});var hLt=s(UQ);mYo=r(hLt,"QDQBertForSequenceClassification"),hLt.forEach(t),gYo=r(jqe," (QDQBert model)"),jqe.forEach(t),hYo=i(j),C3=n(j,"LI",{});var Dqe=s(C3);X1e=n(Dqe,"STRONG",{});var pLt=s(X1e);pYo=r(pLt,"reformer"),pLt.forEach(t),uYo=r(Dqe," \u2014 "),HQ=n(Dqe,"A",{href:!0});var uLt=s(HQ);_Yo=r(uLt,"ReformerForSequenceClassification"),uLt.forEach(t),bYo=r(Dqe," (Reformer model)"),Dqe.forEach(t),vYo=i(j),w3=n(j,"LI",{});var Gqe=s(w3);z1e=n(Gqe,"STRONG",{});var _Lt=s(z1e);FYo=r(_Lt,"rembert"),_Lt.forEach(t),TYo=r(Gqe," \u2014 "),JQ=n(Gqe,"A",{href:!0});var bLt=s(JQ);MYo=r(bLt,"RemBertForSequenceClassification"),bLt.forEach(t),EYo=r(Gqe," (RemBERT model)"),Gqe.forEach(t),CYo=i(j),A3=n(j,"LI",{});var Oqe=s(A3);Q1e=n(Oqe,"STRONG",{});var vLt=s(Q1e);wYo=r(vLt,"roberta"),vLt.forEach(t),AYo=r(Oqe," \u2014 "),YQ=n(Oqe,"A",{href:!0});var FLt=s(YQ);yYo=r(FLt,"RobertaForSequenceClassification"),FLt.forEach(t),LYo=r(Oqe," (RoBERTa model)"),Oqe.forEach(t),xYo=i(j),y3=n(j,"LI",{});var Vqe=s(y3);W1e=n(Vqe,"STRONG",{});var TLt=s(W1e);$Yo=r(TLt,"roformer"),TLt.forEach(t),kYo=r(Vqe," \u2014 "),KQ=n(Vqe,"A",{href:!0});var MLt=s(KQ);SYo=r(MLt,"RoFormerForSequenceClassification"),MLt.forEach(t),RYo=r(Vqe," (RoFormer model)"),Vqe.forEach(t),PYo=i(j),L3=n(j,"LI",{});var Xqe=s(L3);U1e=n(Xqe,"STRONG",{});var ELt=s(U1e);BYo=r(ELt,"squeezebert"),ELt.forEach(t),IYo=r(Xqe," \u2014 "),ZQ=n(Xqe,"A",{href:!0});var CLt=s(ZQ);NYo=r(CLt,"SqueezeBertForSequenceClassification"),CLt.forEach(t),qYo=r(Xqe," (SqueezeBERT model)"),Xqe.forEach(t),jYo=i(j),x3=n(j,"LI",{});var zqe=s(x3);H1e=n(zqe,"STRONG",{});var wLt=s(H1e);DYo=r(wLt,"tapas"),wLt.forEach(t),GYo=r(zqe," \u2014 "),eW=n(zqe,"A",{href:!0});var ALt=s(eW);OYo=r(ALt,"TapasForSequenceClassification"),ALt.forEach(t),VYo=r(zqe," (TAPAS model)"),zqe.forEach(t),XYo=i(j),$3=n(j,"LI",{});var Qqe=s($3);J1e=n(Qqe,"STRONG",{});var yLt=s(J1e);zYo=r(yLt,"transfo-xl"),yLt.forEach(t),QYo=r(Qqe," \u2014 "),oW=n(Qqe,"A",{href:!0});var LLt=s(oW);WYo=r(LLt,"TransfoXLForSequenceClassification"),LLt.forEach(t),UYo=r(Qqe," (Transformer-XL model)"),Qqe.forEach(t),HYo=i(j),k3=n(j,"LI",{});var Wqe=s(k3);Y1e=n(Wqe,"STRONG",{});var xLt=s(Y1e);JYo=r(xLt,"xlm"),xLt.forEach(t),YYo=r(Wqe," \u2014 "),rW=n(Wqe,"A",{href:!0});var $Lt=s(rW);KYo=r($Lt,"XLMForSequenceClassification"),$Lt.forEach(t),ZYo=r(Wqe," (XLM model)"),Wqe.forEach(t),eKo=i(j),S3=n(j,"LI",{});var Uqe=s(S3);K1e=n(Uqe,"STRONG",{});var kLt=s(K1e);oKo=r(kLt,"xlm-roberta"),kLt.forEach(t),rKo=r(Uqe," \u2014 "),tW=n(Uqe,"A",{href:!0});var SLt=s(tW);tKo=r(SLt,"XLMRobertaForSequenceClassification"),SLt.forEach(t),aKo=r(Uqe," (XLM-RoBERTa model)"),Uqe.forEach(t),nKo=i(j),R3=n(j,"LI",{});var Hqe=s(R3);Z1e=n(Hqe,"STRONG",{});var RLt=s(Z1e);sKo=r(RLt,"xlm-roberta-xl"),RLt.forEach(t),lKo=r(Hqe," \u2014 "),aW=n(Hqe,"A",{href:!0});var PLt=s(aW);iKo=r(PLt,"XLMRobertaXLForSequenceClassification"),PLt.forEach(t),dKo=r(Hqe," (XLM-RoBERTa-XL model)"),Hqe.forEach(t),cKo=i(j),P3=n(j,"LI",{});var Jqe=s(P3);ebe=n(Jqe,"STRONG",{});var BLt=s(ebe);fKo=r(BLt,"xlnet"),BLt.forEach(t),mKo=r(Jqe," \u2014 "),nW=n(Jqe,"A",{href:!0});var ILt=s(nW);gKo=r(ILt,"XLNetForSequenceClassification"),ILt.forEach(t),hKo=r(Jqe," (XLNet model)"),Jqe.forEach(t),pKo=i(j),B3=n(j,"LI",{});var Yqe=s(B3);obe=n(Yqe,"STRONG",{});var NLt=s(obe);uKo=r(NLt,"yoso"),NLt.forEach(t),_Ko=r(Yqe," \u2014 "),sW=n(Yqe,"A",{href:!0});var qLt=s(sW);bKo=r(qLt,"YosoForSequenceClassification"),qLt.forEach(t),vKo=r(Yqe," (YOSO model)"),Yqe.forEach(t),j.forEach(t),FKo=i(Ta),I3=n(Ta,"P",{});var Kqe=s(I3);TKo=r(Kqe,"The model is set in evaluation mode by default using "),rbe=n(Kqe,"CODE",{});var jLt=s(rbe);MKo=r(jLt,"model.eval()"),jLt.forEach(t),EKo=r(Kqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tbe=n(Kqe,"CODE",{});var DLt=s(tbe);CKo=r(DLt,"model.train()"),DLt.forEach(t),Kqe.forEach(t),wKo=i(Ta),T(N3.$$.fragment,Ta),Ta.forEach(t),Cl.forEach(t),dHe=i(f),Ad=n(f,"H2",{class:!0});var TYe=s(Ad);q3=n(TYe,"A",{id:!0,class:!0,href:!0});var GLt=s(q3);abe=n(GLt,"SPAN",{});var OLt=s(abe);T(B9.$$.fragment,OLt),OLt.forEach(t),GLt.forEach(t),AKo=i(TYe),nbe=n(TYe,"SPAN",{});var VLt=s(nbe);yKo=r(VLt,"AutoModelForMultipleChoice"),VLt.forEach(t),TYe.forEach(t),cHe=i(f),jo=n(f,"DIV",{class:!0});var wl=s(jo);T(I9.$$.fragment,wl),LKo=i(wl),yd=n(wl,"P",{});var xne=s(yd);xKo=r(xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lW=n(xne,"A",{href:!0});var XLt=s(lW);$Ko=r(XLt,"from_pretrained()"),XLt.forEach(t),kKo=r(xne," class method or the "),iW=n(xne,"A",{href:!0});var zLt=s(iW);SKo=r(zLt,"from_config()"),zLt.forEach(t),RKo=r(xne,` class
method.`),xne.forEach(t),PKo=i(wl),N9=n(wl,"P",{});var MYe=s(N9);BKo=r(MYe,"This class cannot be instantiated directly using "),sbe=n(MYe,"CODE",{});var QLt=s(sbe);IKo=r(QLt,"__init__()"),QLt.forEach(t),NKo=r(MYe," (throws an error)."),MYe.forEach(t),qKo=i(wl),Ft=n(wl,"DIV",{class:!0});var O6=s(Ft);T(q9.$$.fragment,O6),jKo=i(O6),lbe=n(O6,"P",{});var WLt=s(lbe);DKo=r(WLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),WLt.forEach(t),GKo=i(O6),Ld=n(O6,"P",{});var $ne=s(Ld);OKo=r($ne,`Note:
Loading a model from its configuration file does `),ibe=n($ne,"STRONG",{});var ULt=s(ibe);VKo=r(ULt,"not"),ULt.forEach(t),XKo=r($ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n($ne,"A",{href:!0});var HLt=s(dW);zKo=r(HLt,"from_pretrained()"),HLt.forEach(t),QKo=r($ne," to load the model weights."),$ne.forEach(t),WKo=i(O6),T(j3.$$.fragment,O6),O6.forEach(t),UKo=i(wl),to=n(wl,"DIV",{class:!0});var Ma=s(to);T(j9.$$.fragment,Ma),HKo=i(Ma),dbe=n(Ma,"P",{});var JLt=s(dbe);JKo=r(JLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JLt.forEach(t),YKo=i(Ma),Za=n(Ma,"P",{});var V6=s(Za);KKo=r(V6,"The model class to instantiate is selected based on the "),cbe=n(V6,"CODE",{});var YLt=s(cbe);ZKo=r(YLt,"model_type"),YLt.forEach(t),eZo=r(V6,` property of the config object (either
passed as an argument or loaded from `),fbe=n(V6,"CODE",{});var KLt=s(fbe);oZo=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),rZo=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(V6,"CODE",{});var ZLt=s(mbe);tZo=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),aZo=r(V6,":"),V6.forEach(t),nZo=i(Ma),Z=n(Ma,"UL",{});var ee=s(Z);D3=n(ee,"LI",{});var Zqe=s(D3);gbe=n(Zqe,"STRONG",{});var e9t=s(gbe);sZo=r(e9t,"albert"),e9t.forEach(t),lZo=r(Zqe," \u2014 "),cW=n(Zqe,"A",{href:!0});var o9t=s(cW);iZo=r(o9t,"AlbertForMultipleChoice"),o9t.forEach(t),dZo=r(Zqe," (ALBERT model)"),Zqe.forEach(t),cZo=i(ee),G3=n(ee,"LI",{});var eje=s(G3);hbe=n(eje,"STRONG",{});var r9t=s(hbe);fZo=r(r9t,"bert"),r9t.forEach(t),mZo=r(eje," \u2014 "),fW=n(eje,"A",{href:!0});var t9t=s(fW);gZo=r(t9t,"BertForMultipleChoice"),t9t.forEach(t),hZo=r(eje," (BERT model)"),eje.forEach(t),pZo=i(ee),O3=n(ee,"LI",{});var oje=s(O3);pbe=n(oje,"STRONG",{});var a9t=s(pbe);uZo=r(a9t,"big_bird"),a9t.forEach(t),_Zo=r(oje," \u2014 "),mW=n(oje,"A",{href:!0});var n9t=s(mW);bZo=r(n9t,"BigBirdForMultipleChoice"),n9t.forEach(t),vZo=r(oje," (BigBird model)"),oje.forEach(t),FZo=i(ee),V3=n(ee,"LI",{});var rje=s(V3);ube=n(rje,"STRONG",{});var s9t=s(ube);TZo=r(s9t,"camembert"),s9t.forEach(t),MZo=r(rje," \u2014 "),gW=n(rje,"A",{href:!0});var l9t=s(gW);EZo=r(l9t,"CamembertForMultipleChoice"),l9t.forEach(t),CZo=r(rje," (CamemBERT model)"),rje.forEach(t),wZo=i(ee),X3=n(ee,"LI",{});var tje=s(X3);_be=n(tje,"STRONG",{});var i9t=s(_be);AZo=r(i9t,"canine"),i9t.forEach(t),yZo=r(tje," \u2014 "),hW=n(tje,"A",{href:!0});var d9t=s(hW);LZo=r(d9t,"CanineForMultipleChoice"),d9t.forEach(t),xZo=r(tje," (CANINE model)"),tje.forEach(t),$Zo=i(ee),z3=n(ee,"LI",{});var aje=s(z3);bbe=n(aje,"STRONG",{});var c9t=s(bbe);kZo=r(c9t,"convbert"),c9t.forEach(t),SZo=r(aje," \u2014 "),pW=n(aje,"A",{href:!0});var f9t=s(pW);RZo=r(f9t,"ConvBertForMultipleChoice"),f9t.forEach(t),PZo=r(aje," (ConvBERT model)"),aje.forEach(t),BZo=i(ee),Q3=n(ee,"LI",{});var nje=s(Q3);vbe=n(nje,"STRONG",{});var m9t=s(vbe);IZo=r(m9t,"data2vec-text"),m9t.forEach(t),NZo=r(nje," \u2014 "),uW=n(nje,"A",{href:!0});var g9t=s(uW);qZo=r(g9t,"Data2VecTextForMultipleChoice"),g9t.forEach(t),jZo=r(nje," (Data2VecText model)"),nje.forEach(t),DZo=i(ee),W3=n(ee,"LI",{});var sje=s(W3);Fbe=n(sje,"STRONG",{});var h9t=s(Fbe);GZo=r(h9t,"deberta-v2"),h9t.forEach(t),OZo=r(sje," \u2014 "),_W=n(sje,"A",{href:!0});var p9t=s(_W);VZo=r(p9t,"DebertaV2ForMultipleChoice"),p9t.forEach(t),XZo=r(sje," (DeBERTa-v2 model)"),sje.forEach(t),zZo=i(ee),U3=n(ee,"LI",{});var lje=s(U3);Tbe=n(lje,"STRONG",{});var u9t=s(Tbe);QZo=r(u9t,"distilbert"),u9t.forEach(t),WZo=r(lje," \u2014 "),bW=n(lje,"A",{href:!0});var _9t=s(bW);UZo=r(_9t,"DistilBertForMultipleChoice"),_9t.forEach(t),HZo=r(lje," (DistilBERT model)"),lje.forEach(t),JZo=i(ee),H3=n(ee,"LI",{});var ije=s(H3);Mbe=n(ije,"STRONG",{});var b9t=s(Mbe);YZo=r(b9t,"electra"),b9t.forEach(t),KZo=r(ije," \u2014 "),vW=n(ije,"A",{href:!0});var v9t=s(vW);ZZo=r(v9t,"ElectraForMultipleChoice"),v9t.forEach(t),eer=r(ije," (ELECTRA model)"),ije.forEach(t),oer=i(ee),J3=n(ee,"LI",{});var dje=s(J3);Ebe=n(dje,"STRONG",{});var F9t=s(Ebe);rer=r(F9t,"flaubert"),F9t.forEach(t),ter=r(dje," \u2014 "),FW=n(dje,"A",{href:!0});var T9t=s(FW);aer=r(T9t,"FlaubertForMultipleChoice"),T9t.forEach(t),ner=r(dje," (FlauBERT model)"),dje.forEach(t),ser=i(ee),Y3=n(ee,"LI",{});var cje=s(Y3);Cbe=n(cje,"STRONG",{});var M9t=s(Cbe);ler=r(M9t,"fnet"),M9t.forEach(t),ier=r(cje," \u2014 "),TW=n(cje,"A",{href:!0});var E9t=s(TW);der=r(E9t,"FNetForMultipleChoice"),E9t.forEach(t),cer=r(cje," (FNet model)"),cje.forEach(t),fer=i(ee),K3=n(ee,"LI",{});var fje=s(K3);wbe=n(fje,"STRONG",{});var C9t=s(wbe);mer=r(C9t,"funnel"),C9t.forEach(t),ger=r(fje," \u2014 "),MW=n(fje,"A",{href:!0});var w9t=s(MW);her=r(w9t,"FunnelForMultipleChoice"),w9t.forEach(t),per=r(fje," (Funnel Transformer model)"),fje.forEach(t),uer=i(ee),Z3=n(ee,"LI",{});var mje=s(Z3);Abe=n(mje,"STRONG",{});var A9t=s(Abe);_er=r(A9t,"ibert"),A9t.forEach(t),ber=r(mje," \u2014 "),EW=n(mje,"A",{href:!0});var y9t=s(EW);ver=r(y9t,"IBertForMultipleChoice"),y9t.forEach(t),Fer=r(mje," (I-BERT model)"),mje.forEach(t),Ter=i(ee),eF=n(ee,"LI",{});var gje=s(eF);ybe=n(gje,"STRONG",{});var L9t=s(ybe);Mer=r(L9t,"longformer"),L9t.forEach(t),Eer=r(gje," \u2014 "),CW=n(gje,"A",{href:!0});var x9t=s(CW);Cer=r(x9t,"LongformerForMultipleChoice"),x9t.forEach(t),wer=r(gje," (Longformer model)"),gje.forEach(t),Aer=i(ee),oF=n(ee,"LI",{});var hje=s(oF);Lbe=n(hje,"STRONG",{});var $9t=s(Lbe);yer=r($9t,"luke"),$9t.forEach(t),Ler=r(hje," \u2014 "),wW=n(hje,"A",{href:!0});var k9t=s(wW);xer=r(k9t,"LukeForMultipleChoice"),k9t.forEach(t),$er=r(hje," (LUKE model)"),hje.forEach(t),ker=i(ee),rF=n(ee,"LI",{});var pje=s(rF);xbe=n(pje,"STRONG",{});var S9t=s(xbe);Ser=r(S9t,"megatron-bert"),S9t.forEach(t),Rer=r(pje," \u2014 "),AW=n(pje,"A",{href:!0});var R9t=s(AW);Per=r(R9t,"MegatronBertForMultipleChoice"),R9t.forEach(t),Ber=r(pje," (Megatron-BERT model)"),pje.forEach(t),Ier=i(ee),tF=n(ee,"LI",{});var uje=s(tF);$be=n(uje,"STRONG",{});var P9t=s($be);Ner=r(P9t,"mobilebert"),P9t.forEach(t),qer=r(uje," \u2014 "),yW=n(uje,"A",{href:!0});var B9t=s(yW);jer=r(B9t,"MobileBertForMultipleChoice"),B9t.forEach(t),Der=r(uje," (MobileBERT model)"),uje.forEach(t),Ger=i(ee),aF=n(ee,"LI",{});var _je=s(aF);kbe=n(_je,"STRONG",{});var I9t=s(kbe);Oer=r(I9t,"mpnet"),I9t.forEach(t),Ver=r(_je," \u2014 "),LW=n(_je,"A",{href:!0});var N9t=s(LW);Xer=r(N9t,"MPNetForMultipleChoice"),N9t.forEach(t),zer=r(_je," (MPNet model)"),_je.forEach(t),Qer=i(ee),nF=n(ee,"LI",{});var bje=s(nF);Sbe=n(bje,"STRONG",{});var q9t=s(Sbe);Wer=r(q9t,"nezha"),q9t.forEach(t),Uer=r(bje," \u2014 "),xW=n(bje,"A",{href:!0});var j9t=s(xW);Her=r(j9t,"NezhaForMultipleChoice"),j9t.forEach(t),Jer=r(bje," (Nezha model)"),bje.forEach(t),Yer=i(ee),sF=n(ee,"LI",{});var vje=s(sF);Rbe=n(vje,"STRONG",{});var D9t=s(Rbe);Ker=r(D9t,"nystromformer"),D9t.forEach(t),Zer=r(vje," \u2014 "),$W=n(vje,"A",{href:!0});var G9t=s($W);eor=r(G9t,"NystromformerForMultipleChoice"),G9t.forEach(t),oor=r(vje," (Nystr\xF6mformer model)"),vje.forEach(t),ror=i(ee),lF=n(ee,"LI",{});var Fje=s(lF);Pbe=n(Fje,"STRONG",{});var O9t=s(Pbe);tor=r(O9t,"qdqbert"),O9t.forEach(t),aor=r(Fje," \u2014 "),kW=n(Fje,"A",{href:!0});var V9t=s(kW);nor=r(V9t,"QDQBertForMultipleChoice"),V9t.forEach(t),sor=r(Fje," (QDQBert model)"),Fje.forEach(t),lor=i(ee),iF=n(ee,"LI",{});var Tje=s(iF);Bbe=n(Tje,"STRONG",{});var X9t=s(Bbe);ior=r(X9t,"rembert"),X9t.forEach(t),dor=r(Tje," \u2014 "),SW=n(Tje,"A",{href:!0});var z9t=s(SW);cor=r(z9t,"RemBertForMultipleChoice"),z9t.forEach(t),mor=r(Tje," (RemBERT model)"),Tje.forEach(t),gor=i(ee),dF=n(ee,"LI",{});var Mje=s(dF);Ibe=n(Mje,"STRONG",{});var Q9t=s(Ibe);hor=r(Q9t,"roberta"),Q9t.forEach(t),por=r(Mje," \u2014 "),RW=n(Mje,"A",{href:!0});var W9t=s(RW);uor=r(W9t,"RobertaForMultipleChoice"),W9t.forEach(t),_or=r(Mje," (RoBERTa model)"),Mje.forEach(t),bor=i(ee),cF=n(ee,"LI",{});var Eje=s(cF);Nbe=n(Eje,"STRONG",{});var U9t=s(Nbe);vor=r(U9t,"roformer"),U9t.forEach(t),For=r(Eje," \u2014 "),PW=n(Eje,"A",{href:!0});var H9t=s(PW);Tor=r(H9t,"RoFormerForMultipleChoice"),H9t.forEach(t),Mor=r(Eje," (RoFormer model)"),Eje.forEach(t),Eor=i(ee),fF=n(ee,"LI",{});var Cje=s(fF);qbe=n(Cje,"STRONG",{});var J9t=s(qbe);Cor=r(J9t,"squeezebert"),J9t.forEach(t),wor=r(Cje," \u2014 "),BW=n(Cje,"A",{href:!0});var Y9t=s(BW);Aor=r(Y9t,"SqueezeBertForMultipleChoice"),Y9t.forEach(t),yor=r(Cje," (SqueezeBERT model)"),Cje.forEach(t),Lor=i(ee),mF=n(ee,"LI",{});var wje=s(mF);jbe=n(wje,"STRONG",{});var K9t=s(jbe);xor=r(K9t,"xlm"),K9t.forEach(t),$or=r(wje," \u2014 "),IW=n(wje,"A",{href:!0});var Z9t=s(IW);kor=r(Z9t,"XLMForMultipleChoice"),Z9t.forEach(t),Sor=r(wje," (XLM model)"),wje.forEach(t),Ror=i(ee),gF=n(ee,"LI",{});var Aje=s(gF);Dbe=n(Aje,"STRONG",{});var ext=s(Dbe);Por=r(ext,"xlm-roberta"),ext.forEach(t),Bor=r(Aje," \u2014 "),NW=n(Aje,"A",{href:!0});var oxt=s(NW);Ior=r(oxt,"XLMRobertaForMultipleChoice"),oxt.forEach(t),Nor=r(Aje," (XLM-RoBERTa model)"),Aje.forEach(t),qor=i(ee),hF=n(ee,"LI",{});var yje=s(hF);Gbe=n(yje,"STRONG",{});var rxt=s(Gbe);jor=r(rxt,"xlm-roberta-xl"),rxt.forEach(t),Dor=r(yje," \u2014 "),qW=n(yje,"A",{href:!0});var txt=s(qW);Gor=r(txt,"XLMRobertaXLForMultipleChoice"),txt.forEach(t),Oor=r(yje," (XLM-RoBERTa-XL model)"),yje.forEach(t),Vor=i(ee),pF=n(ee,"LI",{});var Lje=s(pF);Obe=n(Lje,"STRONG",{});var axt=s(Obe);Xor=r(axt,"xlnet"),axt.forEach(t),zor=r(Lje," \u2014 "),jW=n(Lje,"A",{href:!0});var nxt=s(jW);Qor=r(nxt,"XLNetForMultipleChoice"),nxt.forEach(t),Wor=r(Lje," (XLNet model)"),Lje.forEach(t),Uor=i(ee),uF=n(ee,"LI",{});var xje=s(uF);Vbe=n(xje,"STRONG",{});var sxt=s(Vbe);Hor=r(sxt,"yoso"),sxt.forEach(t),Jor=r(xje," \u2014 "),DW=n(xje,"A",{href:!0});var lxt=s(DW);Yor=r(lxt,"YosoForMultipleChoice"),lxt.forEach(t),Kor=r(xje," (YOSO model)"),xje.forEach(t),ee.forEach(t),Zor=i(Ma),_F=n(Ma,"P",{});var $je=s(_F);err=r($je,"The model is set in evaluation mode by default using "),Xbe=n($je,"CODE",{});var ixt=s(Xbe);orr=r(ixt,"model.eval()"),ixt.forEach(t),rrr=r($je,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zbe=n($je,"CODE",{});var dxt=s(zbe);trr=r(dxt,"model.train()"),dxt.forEach(t),$je.forEach(t),arr=i(Ma),T(bF.$$.fragment,Ma),Ma.forEach(t),wl.forEach(t),fHe=i(f),xd=n(f,"H2",{class:!0});var EYe=s(xd);vF=n(EYe,"A",{id:!0,class:!0,href:!0});var cxt=s(vF);Qbe=n(cxt,"SPAN",{});var fxt=s(Qbe);T(D9.$$.fragment,fxt),fxt.forEach(t),cxt.forEach(t),nrr=i(EYe),Wbe=n(EYe,"SPAN",{});var mxt=s(Wbe);srr=r(mxt,"AutoModelForNextSentencePrediction"),mxt.forEach(t),EYe.forEach(t),mHe=i(f),Do=n(f,"DIV",{class:!0});var Al=s(Do);T(G9.$$.fragment,Al),lrr=i(Al),$d=n(Al,"P",{});var kne=s($d);irr=r(kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GW=n(kne,"A",{href:!0});var gxt=s(GW);drr=r(gxt,"from_pretrained()"),gxt.forEach(t),crr=r(kne," class method or the "),OW=n(kne,"A",{href:!0});var hxt=s(OW);frr=r(hxt,"from_config()"),hxt.forEach(t),mrr=r(kne,` class
method.`),kne.forEach(t),grr=i(Al),O9=n(Al,"P",{});var CYe=s(O9);hrr=r(CYe,"This class cannot be instantiated directly using "),Ube=n(CYe,"CODE",{});var pxt=s(Ube);prr=r(pxt,"__init__()"),pxt.forEach(t),urr=r(CYe," (throws an error)."),CYe.forEach(t),_rr=i(Al),Tt=n(Al,"DIV",{class:!0});var X6=s(Tt);T(V9.$$.fragment,X6),brr=i(X6),Hbe=n(X6,"P",{});var uxt=s(Hbe);vrr=r(uxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uxt.forEach(t),Frr=i(X6),kd=n(X6,"P",{});var Sne=s(kd);Trr=r(Sne,`Note:
Loading a model from its configuration file does `),Jbe=n(Sne,"STRONG",{});var _xt=s(Jbe);Mrr=r(_xt,"not"),_xt.forEach(t),Err=r(Sne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Sne,"A",{href:!0});var bxt=s(VW);Crr=r(bxt,"from_pretrained()"),bxt.forEach(t),wrr=r(Sne," to load the model weights."),Sne.forEach(t),Arr=i(X6),T(FF.$$.fragment,X6),X6.forEach(t),yrr=i(Al),ao=n(Al,"DIV",{class:!0});var Ea=s(ao);T(X9.$$.fragment,Ea),Lrr=i(Ea),Ybe=n(Ea,"P",{});var vxt=s(Ybe);xrr=r(vxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vxt.forEach(t),$rr=i(Ea),en=n(Ea,"P",{});var z6=s(en);krr=r(z6,"The model class to instantiate is selected based on the "),Kbe=n(z6,"CODE",{});var Fxt=s(Kbe);Srr=r(Fxt,"model_type"),Fxt.forEach(t),Rrr=r(z6,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(z6,"CODE",{});var Txt=s(Zbe);Prr=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),Brr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(z6,"CODE",{});var Mxt=s(eve);Irr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),Nrr=r(z6,":"),z6.forEach(t),qrr=i(Ea),Go=n(Ea,"UL",{});var Ca=s(Go);TF=n(Ca,"LI",{});var kje=s(TF);ove=n(kje,"STRONG",{});var Ext=s(ove);jrr=r(Ext,"bert"),Ext.forEach(t),Drr=r(kje," \u2014 "),XW=n(kje,"A",{href:!0});var Cxt=s(XW);Grr=r(Cxt,"BertForNextSentencePrediction"),Cxt.forEach(t),Orr=r(kje," (BERT model)"),kje.forEach(t),Vrr=i(Ca),MF=n(Ca,"LI",{});var Sje=s(MF);rve=n(Sje,"STRONG",{});var wxt=s(rve);Xrr=r(wxt,"fnet"),wxt.forEach(t),zrr=r(Sje," \u2014 "),zW=n(Sje,"A",{href:!0});var Axt=s(zW);Qrr=r(Axt,"FNetForNextSentencePrediction"),Axt.forEach(t),Wrr=r(Sje," (FNet model)"),Sje.forEach(t),Urr=i(Ca),EF=n(Ca,"LI",{});var Rje=s(EF);tve=n(Rje,"STRONG",{});var yxt=s(tve);Hrr=r(yxt,"megatron-bert"),yxt.forEach(t),Jrr=r(Rje," \u2014 "),QW=n(Rje,"A",{href:!0});var Lxt=s(QW);Yrr=r(Lxt,"MegatronBertForNextSentencePrediction"),Lxt.forEach(t),Krr=r(Rje," (Megatron-BERT model)"),Rje.forEach(t),Zrr=i(Ca),CF=n(Ca,"LI",{});var Pje=s(CF);ave=n(Pje,"STRONG",{});var xxt=s(ave);etr=r(xxt,"mobilebert"),xxt.forEach(t),otr=r(Pje," \u2014 "),WW=n(Pje,"A",{href:!0});var $xt=s(WW);rtr=r($xt,"MobileBertForNextSentencePrediction"),$xt.forEach(t),ttr=r(Pje," (MobileBERT model)"),Pje.forEach(t),atr=i(Ca),wF=n(Ca,"LI",{});var Bje=s(wF);nve=n(Bje,"STRONG",{});var kxt=s(nve);ntr=r(kxt,"nezha"),kxt.forEach(t),str=r(Bje," \u2014 "),UW=n(Bje,"A",{href:!0});var Sxt=s(UW);ltr=r(Sxt,"NezhaForNextSentencePrediction"),Sxt.forEach(t),itr=r(Bje," (Nezha model)"),Bje.forEach(t),dtr=i(Ca),AF=n(Ca,"LI",{});var Ije=s(AF);sve=n(Ije,"STRONG",{});var Rxt=s(sve);ctr=r(Rxt,"qdqbert"),Rxt.forEach(t),ftr=r(Ije," \u2014 "),HW=n(Ije,"A",{href:!0});var Pxt=s(HW);mtr=r(Pxt,"QDQBertForNextSentencePrediction"),Pxt.forEach(t),gtr=r(Ije," (QDQBert model)"),Ije.forEach(t),Ca.forEach(t),htr=i(Ea),yF=n(Ea,"P",{});var Nje=s(yF);ptr=r(Nje,"The model is set in evaluation mode by default using "),lve=n(Nje,"CODE",{});var Bxt=s(lve);utr=r(Bxt,"model.eval()"),Bxt.forEach(t),_tr=r(Nje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(Nje,"CODE",{});var Ixt=s(ive);btr=r(Ixt,"model.train()"),Ixt.forEach(t),Nje.forEach(t),vtr=i(Ea),T(LF.$$.fragment,Ea),Ea.forEach(t),Al.forEach(t),gHe=i(f),Sd=n(f,"H2",{class:!0});var wYe=s(Sd);xF=n(wYe,"A",{id:!0,class:!0,href:!0});var Nxt=s(xF);dve=n(Nxt,"SPAN",{});var qxt=s(dve);T(z9.$$.fragment,qxt),qxt.forEach(t),Nxt.forEach(t),Ftr=i(wYe),cve=n(wYe,"SPAN",{});var jxt=s(cve);Ttr=r(jxt,"AutoModelForTokenClassification"),jxt.forEach(t),wYe.forEach(t),hHe=i(f),Oo=n(f,"DIV",{class:!0});var yl=s(Oo);T(Q9.$$.fragment,yl),Mtr=i(yl),Rd=n(yl,"P",{});var Rne=s(Rd);Etr=r(Rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JW=n(Rne,"A",{href:!0});var Dxt=s(JW);Ctr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),wtr=r(Rne," class method or the "),YW=n(Rne,"A",{href:!0});var Gxt=s(YW);Atr=r(Gxt,"from_config()"),Gxt.forEach(t),ytr=r(Rne,` class
method.`),Rne.forEach(t),Ltr=i(yl),W9=n(yl,"P",{});var AYe=s(W9);xtr=r(AYe,"This class cannot be instantiated directly using "),fve=n(AYe,"CODE",{});var Oxt=s(fve);$tr=r(Oxt,"__init__()"),Oxt.forEach(t),ktr=r(AYe," (throws an error)."),AYe.forEach(t),Str=i(yl),Mt=n(yl,"DIV",{class:!0});var Q6=s(Mt);T(U9.$$.fragment,Q6),Rtr=i(Q6),mve=n(Q6,"P",{});var Vxt=s(mve);Ptr=r(Vxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vxt.forEach(t),Btr=i(Q6),Pd=n(Q6,"P",{});var Pne=s(Pd);Itr=r(Pne,`Note:
Loading a model from its configuration file does `),gve=n(Pne,"STRONG",{});var Xxt=s(gve);Ntr=r(Xxt,"not"),Xxt.forEach(t),qtr=r(Pne,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(Pne,"A",{href:!0});var zxt=s(KW);jtr=r(zxt,"from_pretrained()"),zxt.forEach(t),Dtr=r(Pne," to load the model weights."),Pne.forEach(t),Gtr=i(Q6),T($F.$$.fragment,Q6),Q6.forEach(t),Otr=i(yl),no=n(yl,"DIV",{class:!0});var wa=s(no);T(H9.$$.fragment,wa),Vtr=i(wa),hve=n(wa,"P",{});var Qxt=s(hve);Xtr=r(Qxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qxt.forEach(t),ztr=i(wa),on=n(wa,"P",{});var W6=s(on);Qtr=r(W6,"The model class to instantiate is selected based on the "),pve=n(W6,"CODE",{});var Wxt=s(pve);Wtr=r(Wxt,"model_type"),Wxt.forEach(t),Utr=r(W6,` property of the config object (either
passed as an argument or loaded from `),uve=n(W6,"CODE",{});var Uxt=s(uve);Htr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),Jtr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(W6,"CODE",{});var Hxt=s(_ve);Ytr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),Ktr=r(W6,":"),W6.forEach(t),Ztr=i(wa),H=n(wa,"UL",{});var K=s(H);kF=n(K,"LI",{});var qje=s(kF);bve=n(qje,"STRONG",{});var Jxt=s(bve);ear=r(Jxt,"albert"),Jxt.forEach(t),oar=r(qje," \u2014 "),ZW=n(qje,"A",{href:!0});var Yxt=s(ZW);rar=r(Yxt,"AlbertForTokenClassification"),Yxt.forEach(t),tar=r(qje," (ALBERT model)"),qje.forEach(t),aar=i(K),SF=n(K,"LI",{});var jje=s(SF);vve=n(jje,"STRONG",{});var Kxt=s(vve);nar=r(Kxt,"bert"),Kxt.forEach(t),sar=r(jje," \u2014 "),eU=n(jje,"A",{href:!0});var Zxt=s(eU);lar=r(Zxt,"BertForTokenClassification"),Zxt.forEach(t),iar=r(jje," (BERT model)"),jje.forEach(t),dar=i(K),RF=n(K,"LI",{});var Dje=s(RF);Fve=n(Dje,"STRONG",{});var e$t=s(Fve);car=r(e$t,"big_bird"),e$t.forEach(t),far=r(Dje," \u2014 "),oU=n(Dje,"A",{href:!0});var o$t=s(oU);mar=r(o$t,"BigBirdForTokenClassification"),o$t.forEach(t),gar=r(Dje," (BigBird model)"),Dje.forEach(t),har=i(K),PF=n(K,"LI",{});var Gje=s(PF);Tve=n(Gje,"STRONG",{});var r$t=s(Tve);par=r(r$t,"bloom"),r$t.forEach(t),uar=r(Gje," \u2014 "),rU=n(Gje,"A",{href:!0});var t$t=s(rU);_ar=r(t$t,"BloomForTokenClassification"),t$t.forEach(t),bar=r(Gje," (BLOOM model)"),Gje.forEach(t),Far=i(K),BF=n(K,"LI",{});var Oje=s(BF);Mve=n(Oje,"STRONG",{});var a$t=s(Mve);Tar=r(a$t,"camembert"),a$t.forEach(t),Mar=r(Oje," \u2014 "),tU=n(Oje,"A",{href:!0});var n$t=s(tU);Ear=r(n$t,"CamembertForTokenClassification"),n$t.forEach(t),Car=r(Oje," (CamemBERT model)"),Oje.forEach(t),war=i(K),IF=n(K,"LI",{});var Vje=s(IF);Eve=n(Vje,"STRONG",{});var s$t=s(Eve);Aar=r(s$t,"canine"),s$t.forEach(t),yar=r(Vje," \u2014 "),aU=n(Vje,"A",{href:!0});var l$t=s(aU);Lar=r(l$t,"CanineForTokenClassification"),l$t.forEach(t),xar=r(Vje," (CANINE model)"),Vje.forEach(t),$ar=i(K),NF=n(K,"LI",{});var Xje=s(NF);Cve=n(Xje,"STRONG",{});var i$t=s(Cve);kar=r(i$t,"convbert"),i$t.forEach(t),Sar=r(Xje," \u2014 "),nU=n(Xje,"A",{href:!0});var d$t=s(nU);Rar=r(d$t,"ConvBertForTokenClassification"),d$t.forEach(t),Par=r(Xje," (ConvBERT model)"),Xje.forEach(t),Bar=i(K),qF=n(K,"LI",{});var zje=s(qF);wve=n(zje,"STRONG",{});var c$t=s(wve);Iar=r(c$t,"data2vec-text"),c$t.forEach(t),Nar=r(zje," \u2014 "),sU=n(zje,"A",{href:!0});var f$t=s(sU);qar=r(f$t,"Data2VecTextForTokenClassification"),f$t.forEach(t),jar=r(zje," (Data2VecText model)"),zje.forEach(t),Dar=i(K),jF=n(K,"LI",{});var Qje=s(jF);Ave=n(Qje,"STRONG",{});var m$t=s(Ave);Gar=r(m$t,"deberta"),m$t.forEach(t),Oar=r(Qje," \u2014 "),lU=n(Qje,"A",{href:!0});var g$t=s(lU);Var=r(g$t,"DebertaForTokenClassification"),g$t.forEach(t),Xar=r(Qje," (DeBERTa model)"),Qje.forEach(t),zar=i(K),DF=n(K,"LI",{});var Wje=s(DF);yve=n(Wje,"STRONG",{});var h$t=s(yve);Qar=r(h$t,"deberta-v2"),h$t.forEach(t),War=r(Wje," \u2014 "),iU=n(Wje,"A",{href:!0});var p$t=s(iU);Uar=r(p$t,"DebertaV2ForTokenClassification"),p$t.forEach(t),Har=r(Wje," (DeBERTa-v2 model)"),Wje.forEach(t),Jar=i(K),GF=n(K,"LI",{});var Uje=s(GF);Lve=n(Uje,"STRONG",{});var u$t=s(Lve);Yar=r(u$t,"distilbert"),u$t.forEach(t),Kar=r(Uje," \u2014 "),dU=n(Uje,"A",{href:!0});var _$t=s(dU);Zar=r(_$t,"DistilBertForTokenClassification"),_$t.forEach(t),enr=r(Uje," (DistilBERT model)"),Uje.forEach(t),onr=i(K),OF=n(K,"LI",{});var Hje=s(OF);xve=n(Hje,"STRONG",{});var b$t=s(xve);rnr=r(b$t,"electra"),b$t.forEach(t),tnr=r(Hje," \u2014 "),cU=n(Hje,"A",{href:!0});var v$t=s(cU);anr=r(v$t,"ElectraForTokenClassification"),v$t.forEach(t),nnr=r(Hje," (ELECTRA model)"),Hje.forEach(t),snr=i(K),VF=n(K,"LI",{});var Jje=s(VF);$ve=n(Jje,"STRONG",{});var F$t=s($ve);lnr=r(F$t,"flaubert"),F$t.forEach(t),inr=r(Jje," \u2014 "),fU=n(Jje,"A",{href:!0});var T$t=s(fU);dnr=r(T$t,"FlaubertForTokenClassification"),T$t.forEach(t),cnr=r(Jje," (FlauBERT model)"),Jje.forEach(t),fnr=i(K),XF=n(K,"LI",{});var Yje=s(XF);kve=n(Yje,"STRONG",{});var M$t=s(kve);mnr=r(M$t,"fnet"),M$t.forEach(t),gnr=r(Yje," \u2014 "),mU=n(Yje,"A",{href:!0});var E$t=s(mU);hnr=r(E$t,"FNetForTokenClassification"),E$t.forEach(t),pnr=r(Yje," (FNet model)"),Yje.forEach(t),unr=i(K),zF=n(K,"LI",{});var Kje=s(zF);Sve=n(Kje,"STRONG",{});var C$t=s(Sve);_nr=r(C$t,"funnel"),C$t.forEach(t),bnr=r(Kje," \u2014 "),gU=n(Kje,"A",{href:!0});var w$t=s(gU);vnr=r(w$t,"FunnelForTokenClassification"),w$t.forEach(t),Fnr=r(Kje," (Funnel Transformer model)"),Kje.forEach(t),Tnr=i(K),QF=n(K,"LI",{});var Zje=s(QF);Rve=n(Zje,"STRONG",{});var A$t=s(Rve);Mnr=r(A$t,"gpt2"),A$t.forEach(t),Enr=r(Zje," \u2014 "),hU=n(Zje,"A",{href:!0});var y$t=s(hU);Cnr=r(y$t,"GPT2ForTokenClassification"),y$t.forEach(t),wnr=r(Zje," (OpenAI GPT-2 model)"),Zje.forEach(t),Anr=i(K),WF=n(K,"LI",{});var eDe=s(WF);Pve=n(eDe,"STRONG",{});var L$t=s(Pve);ynr=r(L$t,"ibert"),L$t.forEach(t),Lnr=r(eDe," \u2014 "),pU=n(eDe,"A",{href:!0});var x$t=s(pU);xnr=r(x$t,"IBertForTokenClassification"),x$t.forEach(t),$nr=r(eDe," (I-BERT model)"),eDe.forEach(t),knr=i(K),UF=n(K,"LI",{});var oDe=s(UF);Bve=n(oDe,"STRONG",{});var $$t=s(Bve);Snr=r($$t,"layoutlm"),$$t.forEach(t),Rnr=r(oDe," \u2014 "),uU=n(oDe,"A",{href:!0});var k$t=s(uU);Pnr=r(k$t,"LayoutLMForTokenClassification"),k$t.forEach(t),Bnr=r(oDe," (LayoutLM model)"),oDe.forEach(t),Inr=i(K),HF=n(K,"LI",{});var rDe=s(HF);Ive=n(rDe,"STRONG",{});var S$t=s(Ive);Nnr=r(S$t,"layoutlmv2"),S$t.forEach(t),qnr=r(rDe," \u2014 "),_U=n(rDe,"A",{href:!0});var R$t=s(_U);jnr=r(R$t,"LayoutLMv2ForTokenClassification"),R$t.forEach(t),Dnr=r(rDe," (LayoutLMv2 model)"),rDe.forEach(t),Gnr=i(K),JF=n(K,"LI",{});var tDe=s(JF);Nve=n(tDe,"STRONG",{});var P$t=s(Nve);Onr=r(P$t,"layoutlmv3"),P$t.forEach(t),Vnr=r(tDe," \u2014 "),bU=n(tDe,"A",{href:!0});var B$t=s(bU);Xnr=r(B$t,"LayoutLMv3ForTokenClassification"),B$t.forEach(t),znr=r(tDe," (LayoutLMv3 model)"),tDe.forEach(t),Qnr=i(K),YF=n(K,"LI",{});var aDe=s(YF);qve=n(aDe,"STRONG",{});var I$t=s(qve);Wnr=r(I$t,"longformer"),I$t.forEach(t),Unr=r(aDe," \u2014 "),vU=n(aDe,"A",{href:!0});var N$t=s(vU);Hnr=r(N$t,"LongformerForTokenClassification"),N$t.forEach(t),Jnr=r(aDe," (Longformer model)"),aDe.forEach(t),Ynr=i(K),KF=n(K,"LI",{});var nDe=s(KF);jve=n(nDe,"STRONG",{});var q$t=s(jve);Knr=r(q$t,"luke"),q$t.forEach(t),Znr=r(nDe," \u2014 "),FU=n(nDe,"A",{href:!0});var j$t=s(FU);esr=r(j$t,"LukeForTokenClassification"),j$t.forEach(t),osr=r(nDe," (LUKE model)"),nDe.forEach(t),rsr=i(K),ZF=n(K,"LI",{});var sDe=s(ZF);Dve=n(sDe,"STRONG",{});var D$t=s(Dve);tsr=r(D$t,"megatron-bert"),D$t.forEach(t),asr=r(sDe," \u2014 "),TU=n(sDe,"A",{href:!0});var G$t=s(TU);nsr=r(G$t,"MegatronBertForTokenClassification"),G$t.forEach(t),ssr=r(sDe," (Megatron-BERT model)"),sDe.forEach(t),lsr=i(K),e7=n(K,"LI",{});var lDe=s(e7);Gve=n(lDe,"STRONG",{});var O$t=s(Gve);isr=r(O$t,"mobilebert"),O$t.forEach(t),dsr=r(lDe," \u2014 "),MU=n(lDe,"A",{href:!0});var V$t=s(MU);csr=r(V$t,"MobileBertForTokenClassification"),V$t.forEach(t),fsr=r(lDe," (MobileBERT model)"),lDe.forEach(t),msr=i(K),o7=n(K,"LI",{});var iDe=s(o7);Ove=n(iDe,"STRONG",{});var X$t=s(Ove);gsr=r(X$t,"mpnet"),X$t.forEach(t),hsr=r(iDe," \u2014 "),EU=n(iDe,"A",{href:!0});var z$t=s(EU);psr=r(z$t,"MPNetForTokenClassification"),z$t.forEach(t),usr=r(iDe," (MPNet model)"),iDe.forEach(t),_sr=i(K),r7=n(K,"LI",{});var dDe=s(r7);Vve=n(dDe,"STRONG",{});var Q$t=s(Vve);bsr=r(Q$t,"nezha"),Q$t.forEach(t),vsr=r(dDe," \u2014 "),CU=n(dDe,"A",{href:!0});var W$t=s(CU);Fsr=r(W$t,"NezhaForTokenClassification"),W$t.forEach(t),Tsr=r(dDe," (Nezha model)"),dDe.forEach(t),Msr=i(K),t7=n(K,"LI",{});var cDe=s(t7);Xve=n(cDe,"STRONG",{});var U$t=s(Xve);Esr=r(U$t,"nystromformer"),U$t.forEach(t),Csr=r(cDe," \u2014 "),wU=n(cDe,"A",{href:!0});var H$t=s(wU);wsr=r(H$t,"NystromformerForTokenClassification"),H$t.forEach(t),Asr=r(cDe," (Nystr\xF6mformer model)"),cDe.forEach(t),ysr=i(K),a7=n(K,"LI",{});var fDe=s(a7);zve=n(fDe,"STRONG",{});var J$t=s(zve);Lsr=r(J$t,"qdqbert"),J$t.forEach(t),xsr=r(fDe," \u2014 "),AU=n(fDe,"A",{href:!0});var Y$t=s(AU);$sr=r(Y$t,"QDQBertForTokenClassification"),Y$t.forEach(t),ksr=r(fDe," (QDQBert model)"),fDe.forEach(t),Ssr=i(K),n7=n(K,"LI",{});var mDe=s(n7);Qve=n(mDe,"STRONG",{});var K$t=s(Qve);Rsr=r(K$t,"rembert"),K$t.forEach(t),Psr=r(mDe," \u2014 "),yU=n(mDe,"A",{href:!0});var Z$t=s(yU);Bsr=r(Z$t,"RemBertForTokenClassification"),Z$t.forEach(t),Isr=r(mDe," (RemBERT model)"),mDe.forEach(t),Nsr=i(K),s7=n(K,"LI",{});var gDe=s(s7);Wve=n(gDe,"STRONG",{});var ekt=s(Wve);qsr=r(ekt,"roberta"),ekt.forEach(t),jsr=r(gDe," \u2014 "),LU=n(gDe,"A",{href:!0});var okt=s(LU);Dsr=r(okt,"RobertaForTokenClassification"),okt.forEach(t),Gsr=r(gDe," (RoBERTa model)"),gDe.forEach(t),Osr=i(K),l7=n(K,"LI",{});var hDe=s(l7);Uve=n(hDe,"STRONG",{});var rkt=s(Uve);Vsr=r(rkt,"roformer"),rkt.forEach(t),Xsr=r(hDe," \u2014 "),xU=n(hDe,"A",{href:!0});var tkt=s(xU);zsr=r(tkt,"RoFormerForTokenClassification"),tkt.forEach(t),Qsr=r(hDe," (RoFormer model)"),hDe.forEach(t),Wsr=i(K),i7=n(K,"LI",{});var pDe=s(i7);Hve=n(pDe,"STRONG",{});var akt=s(Hve);Usr=r(akt,"squeezebert"),akt.forEach(t),Hsr=r(pDe," \u2014 "),$U=n(pDe,"A",{href:!0});var nkt=s($U);Jsr=r(nkt,"SqueezeBertForTokenClassification"),nkt.forEach(t),Ysr=r(pDe," (SqueezeBERT model)"),pDe.forEach(t),Ksr=i(K),d7=n(K,"LI",{});var uDe=s(d7);Jve=n(uDe,"STRONG",{});var skt=s(Jve);Zsr=r(skt,"xlm"),skt.forEach(t),elr=r(uDe," \u2014 "),kU=n(uDe,"A",{href:!0});var lkt=s(kU);olr=r(lkt,"XLMForTokenClassification"),lkt.forEach(t),rlr=r(uDe," (XLM model)"),uDe.forEach(t),tlr=i(K),c7=n(K,"LI",{});var _De=s(c7);Yve=n(_De,"STRONG",{});var ikt=s(Yve);alr=r(ikt,"xlm-roberta"),ikt.forEach(t),nlr=r(_De," \u2014 "),SU=n(_De,"A",{href:!0});var dkt=s(SU);slr=r(dkt,"XLMRobertaForTokenClassification"),dkt.forEach(t),llr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),ilr=i(K),f7=n(K,"LI",{});var bDe=s(f7);Kve=n(bDe,"STRONG",{});var ckt=s(Kve);dlr=r(ckt,"xlm-roberta-xl"),ckt.forEach(t),clr=r(bDe," \u2014 "),RU=n(bDe,"A",{href:!0});var fkt=s(RU);flr=r(fkt,"XLMRobertaXLForTokenClassification"),fkt.forEach(t),mlr=r(bDe," (XLM-RoBERTa-XL model)"),bDe.forEach(t),glr=i(K),m7=n(K,"LI",{});var vDe=s(m7);Zve=n(vDe,"STRONG",{});var mkt=s(Zve);hlr=r(mkt,"xlnet"),mkt.forEach(t),plr=r(vDe," \u2014 "),PU=n(vDe,"A",{href:!0});var gkt=s(PU);ulr=r(gkt,"XLNetForTokenClassification"),gkt.forEach(t),_lr=r(vDe," (XLNet model)"),vDe.forEach(t),blr=i(K),g7=n(K,"LI",{});var FDe=s(g7);e3e=n(FDe,"STRONG",{});var hkt=s(e3e);vlr=r(hkt,"yoso"),hkt.forEach(t),Flr=r(FDe," \u2014 "),BU=n(FDe,"A",{href:!0});var pkt=s(BU);Tlr=r(pkt,"YosoForTokenClassification"),pkt.forEach(t),Mlr=r(FDe," (YOSO model)"),FDe.forEach(t),K.forEach(t),Elr=i(wa),h7=n(wa,"P",{});var TDe=s(h7);Clr=r(TDe,"The model is set in evaluation mode by default using "),o3e=n(TDe,"CODE",{});var ukt=s(o3e);wlr=r(ukt,"model.eval()"),ukt.forEach(t),Alr=r(TDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r3e=n(TDe,"CODE",{});var _kt=s(r3e);ylr=r(_kt,"model.train()"),_kt.forEach(t),TDe.forEach(t),Llr=i(wa),T(p7.$$.fragment,wa),wa.forEach(t),yl.forEach(t),pHe=i(f),Bd=n(f,"H2",{class:!0});var yYe=s(Bd);u7=n(yYe,"A",{id:!0,class:!0,href:!0});var bkt=s(u7);t3e=n(bkt,"SPAN",{});var vkt=s(t3e);T(J9.$$.fragment,vkt),vkt.forEach(t),bkt.forEach(t),xlr=i(yYe),a3e=n(yYe,"SPAN",{});var Fkt=s(a3e);$lr=r(Fkt,"AutoModelForQuestionAnswering"),Fkt.forEach(t),yYe.forEach(t),uHe=i(f),Vo=n(f,"DIV",{class:!0});var Ll=s(Vo);T(Y9.$$.fragment,Ll),klr=i(Ll),Id=n(Ll,"P",{});var Bne=s(Id);Slr=r(Bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IU=n(Bne,"A",{href:!0});var Tkt=s(IU);Rlr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),Plr=r(Bne," class method or the "),NU=n(Bne,"A",{href:!0});var Mkt=s(NU);Blr=r(Mkt,"from_config()"),Mkt.forEach(t),Ilr=r(Bne,` class
method.`),Bne.forEach(t),Nlr=i(Ll),K9=n(Ll,"P",{});var LYe=s(K9);qlr=r(LYe,"This class cannot be instantiated directly using "),n3e=n(LYe,"CODE",{});var Ekt=s(n3e);jlr=r(Ekt,"__init__()"),Ekt.forEach(t),Dlr=r(LYe," (throws an error)."),LYe.forEach(t),Glr=i(Ll),Et=n(Ll,"DIV",{class:!0});var U6=s(Et);T(Z9.$$.fragment,U6),Olr=i(U6),s3e=n(U6,"P",{});var Ckt=s(s3e);Vlr=r(Ckt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ckt.forEach(t),Xlr=i(U6),Nd=n(U6,"P",{});var Ine=s(Nd);zlr=r(Ine,`Note:
Loading a model from its configuration file does `),l3e=n(Ine,"STRONG",{});var wkt=s(l3e);Qlr=r(wkt,"not"),wkt.forEach(t),Wlr=r(Ine,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(Ine,"A",{href:!0});var Akt=s(qU);Ulr=r(Akt,"from_pretrained()"),Akt.forEach(t),Hlr=r(Ine," to load the model weights."),Ine.forEach(t),Jlr=i(U6),T(_7.$$.fragment,U6),U6.forEach(t),Ylr=i(Ll),so=n(Ll,"DIV",{class:!0});var Aa=s(so);T(ex.$$.fragment,Aa),Klr=i(Aa),i3e=n(Aa,"P",{});var ykt=s(i3e);Zlr=r(ykt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ykt.forEach(t),eir=i(Aa),rn=n(Aa,"P",{});var H6=s(rn);oir=r(H6,"The model class to instantiate is selected based on the "),d3e=n(H6,"CODE",{});var Lkt=s(d3e);rir=r(Lkt,"model_type"),Lkt.forEach(t),tir=r(H6,` property of the config object (either
passed as an argument or loaded from `),c3e=n(H6,"CODE",{});var xkt=s(c3e);air=r(xkt,"pretrained_model_name_or_path"),xkt.forEach(t),nir=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(H6,"CODE",{});var $kt=s(f3e);sir=r($kt,"pretrained_model_name_or_path"),$kt.forEach(t),lir=r(H6,":"),H6.forEach(t),iir=i(Aa),V=n(Aa,"UL",{});var X=s(V);b7=n(X,"LI",{});var MDe=s(b7);m3e=n(MDe,"STRONG",{});var kkt=s(m3e);dir=r(kkt,"albert"),kkt.forEach(t),cir=r(MDe," \u2014 "),jU=n(MDe,"A",{href:!0});var Skt=s(jU);fir=r(Skt,"AlbertForQuestionAnswering"),Skt.forEach(t),mir=r(MDe," (ALBERT model)"),MDe.forEach(t),gir=i(X),v7=n(X,"LI",{});var EDe=s(v7);g3e=n(EDe,"STRONG",{});var Rkt=s(g3e);hir=r(Rkt,"bart"),Rkt.forEach(t),pir=r(EDe," \u2014 "),DU=n(EDe,"A",{href:!0});var Pkt=s(DU);uir=r(Pkt,"BartForQuestionAnswering"),Pkt.forEach(t),_ir=r(EDe," (BART model)"),EDe.forEach(t),bir=i(X),F7=n(X,"LI",{});var CDe=s(F7);h3e=n(CDe,"STRONG",{});var Bkt=s(h3e);vir=r(Bkt,"bert"),Bkt.forEach(t),Fir=r(CDe," \u2014 "),GU=n(CDe,"A",{href:!0});var Ikt=s(GU);Tir=r(Ikt,"BertForQuestionAnswering"),Ikt.forEach(t),Mir=r(CDe," (BERT model)"),CDe.forEach(t),Eir=i(X),T7=n(X,"LI",{});var wDe=s(T7);p3e=n(wDe,"STRONG",{});var Nkt=s(p3e);Cir=r(Nkt,"big_bird"),Nkt.forEach(t),wir=r(wDe," \u2014 "),OU=n(wDe,"A",{href:!0});var qkt=s(OU);Air=r(qkt,"BigBirdForQuestionAnswering"),qkt.forEach(t),yir=r(wDe," (BigBird model)"),wDe.forEach(t),Lir=i(X),M7=n(X,"LI",{});var ADe=s(M7);u3e=n(ADe,"STRONG",{});var jkt=s(u3e);xir=r(jkt,"bigbird_pegasus"),jkt.forEach(t),$ir=r(ADe," \u2014 "),VU=n(ADe,"A",{href:!0});var Dkt=s(VU);kir=r(Dkt,"BigBirdPegasusForQuestionAnswering"),Dkt.forEach(t),Sir=r(ADe," (BigBird-Pegasus model)"),ADe.forEach(t),Rir=i(X),E7=n(X,"LI",{});var yDe=s(E7);_3e=n(yDe,"STRONG",{});var Gkt=s(_3e);Pir=r(Gkt,"camembert"),Gkt.forEach(t),Bir=r(yDe," \u2014 "),XU=n(yDe,"A",{href:!0});var Okt=s(XU);Iir=r(Okt,"CamembertForQuestionAnswering"),Okt.forEach(t),Nir=r(yDe," (CamemBERT model)"),yDe.forEach(t),qir=i(X),C7=n(X,"LI",{});var LDe=s(C7);b3e=n(LDe,"STRONG",{});var Vkt=s(b3e);jir=r(Vkt,"canine"),Vkt.forEach(t),Dir=r(LDe," \u2014 "),zU=n(LDe,"A",{href:!0});var Xkt=s(zU);Gir=r(Xkt,"CanineForQuestionAnswering"),Xkt.forEach(t),Oir=r(LDe," (CANINE model)"),LDe.forEach(t),Vir=i(X),w7=n(X,"LI",{});var xDe=s(w7);v3e=n(xDe,"STRONG",{});var zkt=s(v3e);Xir=r(zkt,"convbert"),zkt.forEach(t),zir=r(xDe," \u2014 "),QU=n(xDe,"A",{href:!0});var Qkt=s(QU);Qir=r(Qkt,"ConvBertForQuestionAnswering"),Qkt.forEach(t),Wir=r(xDe," (ConvBERT model)"),xDe.forEach(t),Uir=i(X),A7=n(X,"LI",{});var $De=s(A7);F3e=n($De,"STRONG",{});var Wkt=s(F3e);Hir=r(Wkt,"data2vec-text"),Wkt.forEach(t),Jir=r($De," \u2014 "),WU=n($De,"A",{href:!0});var Ukt=s(WU);Yir=r(Ukt,"Data2VecTextForQuestionAnswering"),Ukt.forEach(t),Kir=r($De," (Data2VecText model)"),$De.forEach(t),Zir=i(X),y7=n(X,"LI",{});var kDe=s(y7);T3e=n(kDe,"STRONG",{});var Hkt=s(T3e);edr=r(Hkt,"deberta"),Hkt.forEach(t),odr=r(kDe," \u2014 "),UU=n(kDe,"A",{href:!0});var Jkt=s(UU);rdr=r(Jkt,"DebertaForQuestionAnswering"),Jkt.forEach(t),tdr=r(kDe," (DeBERTa model)"),kDe.forEach(t),adr=i(X),L7=n(X,"LI",{});var SDe=s(L7);M3e=n(SDe,"STRONG",{});var Ykt=s(M3e);ndr=r(Ykt,"deberta-v2"),Ykt.forEach(t),sdr=r(SDe," \u2014 "),HU=n(SDe,"A",{href:!0});var Kkt=s(HU);ldr=r(Kkt,"DebertaV2ForQuestionAnswering"),Kkt.forEach(t),idr=r(SDe," (DeBERTa-v2 model)"),SDe.forEach(t),ddr=i(X),x7=n(X,"LI",{});var RDe=s(x7);E3e=n(RDe,"STRONG",{});var Zkt=s(E3e);cdr=r(Zkt,"distilbert"),Zkt.forEach(t),fdr=r(RDe," \u2014 "),JU=n(RDe,"A",{href:!0});var eSt=s(JU);mdr=r(eSt,"DistilBertForQuestionAnswering"),eSt.forEach(t),gdr=r(RDe," (DistilBERT model)"),RDe.forEach(t),hdr=i(X),$7=n(X,"LI",{});var PDe=s($7);C3e=n(PDe,"STRONG",{});var oSt=s(C3e);pdr=r(oSt,"electra"),oSt.forEach(t),udr=r(PDe," \u2014 "),YU=n(PDe,"A",{href:!0});var rSt=s(YU);_dr=r(rSt,"ElectraForQuestionAnswering"),rSt.forEach(t),bdr=r(PDe," (ELECTRA model)"),PDe.forEach(t),vdr=i(X),k7=n(X,"LI",{});var BDe=s(k7);w3e=n(BDe,"STRONG",{});var tSt=s(w3e);Fdr=r(tSt,"flaubert"),tSt.forEach(t),Tdr=r(BDe," \u2014 "),KU=n(BDe,"A",{href:!0});var aSt=s(KU);Mdr=r(aSt,"FlaubertForQuestionAnsweringSimple"),aSt.forEach(t),Edr=r(BDe," (FlauBERT model)"),BDe.forEach(t),Cdr=i(X),S7=n(X,"LI",{});var IDe=s(S7);A3e=n(IDe,"STRONG",{});var nSt=s(A3e);wdr=r(nSt,"fnet"),nSt.forEach(t),Adr=r(IDe," \u2014 "),ZU=n(IDe,"A",{href:!0});var sSt=s(ZU);ydr=r(sSt,"FNetForQuestionAnswering"),sSt.forEach(t),Ldr=r(IDe," (FNet model)"),IDe.forEach(t),xdr=i(X),R7=n(X,"LI",{});var NDe=s(R7);y3e=n(NDe,"STRONG",{});var lSt=s(y3e);$dr=r(lSt,"funnel"),lSt.forEach(t),kdr=r(NDe," \u2014 "),eH=n(NDe,"A",{href:!0});var iSt=s(eH);Sdr=r(iSt,"FunnelForQuestionAnswering"),iSt.forEach(t),Rdr=r(NDe," (Funnel Transformer model)"),NDe.forEach(t),Pdr=i(X),P7=n(X,"LI",{});var qDe=s(P7);L3e=n(qDe,"STRONG",{});var dSt=s(L3e);Bdr=r(dSt,"gptj"),dSt.forEach(t),Idr=r(qDe," \u2014 "),oH=n(qDe,"A",{href:!0});var cSt=s(oH);Ndr=r(cSt,"GPTJForQuestionAnswering"),cSt.forEach(t),qdr=r(qDe," (GPT-J model)"),qDe.forEach(t),jdr=i(X),B7=n(X,"LI",{});var jDe=s(B7);x3e=n(jDe,"STRONG",{});var fSt=s(x3e);Ddr=r(fSt,"ibert"),fSt.forEach(t),Gdr=r(jDe," \u2014 "),rH=n(jDe,"A",{href:!0});var mSt=s(rH);Odr=r(mSt,"IBertForQuestionAnswering"),mSt.forEach(t),Vdr=r(jDe," (I-BERT model)"),jDe.forEach(t),Xdr=i(X),I7=n(X,"LI",{});var DDe=s(I7);$3e=n(DDe,"STRONG",{});var gSt=s($3e);zdr=r(gSt,"layoutlmv2"),gSt.forEach(t),Qdr=r(DDe," \u2014 "),tH=n(DDe,"A",{href:!0});var hSt=s(tH);Wdr=r(hSt,"LayoutLMv2ForQuestionAnswering"),hSt.forEach(t),Udr=r(DDe," (LayoutLMv2 model)"),DDe.forEach(t),Hdr=i(X),N7=n(X,"LI",{});var GDe=s(N7);k3e=n(GDe,"STRONG",{});var pSt=s(k3e);Jdr=r(pSt,"layoutlmv3"),pSt.forEach(t),Ydr=r(GDe," \u2014 "),aH=n(GDe,"A",{href:!0});var uSt=s(aH);Kdr=r(uSt,"LayoutLMv3ForQuestionAnswering"),uSt.forEach(t),Zdr=r(GDe," (LayoutLMv3 model)"),GDe.forEach(t),ecr=i(X),q7=n(X,"LI",{});var ODe=s(q7);S3e=n(ODe,"STRONG",{});var _St=s(S3e);ocr=r(_St,"led"),_St.forEach(t),rcr=r(ODe," \u2014 "),nH=n(ODe,"A",{href:!0});var bSt=s(nH);tcr=r(bSt,"LEDForQuestionAnswering"),bSt.forEach(t),acr=r(ODe," (LED model)"),ODe.forEach(t),ncr=i(X),j7=n(X,"LI",{});var VDe=s(j7);R3e=n(VDe,"STRONG",{});var vSt=s(R3e);scr=r(vSt,"longformer"),vSt.forEach(t),lcr=r(VDe," \u2014 "),sH=n(VDe,"A",{href:!0});var FSt=s(sH);icr=r(FSt,"LongformerForQuestionAnswering"),FSt.forEach(t),dcr=r(VDe," (Longformer model)"),VDe.forEach(t),ccr=i(X),D7=n(X,"LI",{});var XDe=s(D7);P3e=n(XDe,"STRONG",{});var TSt=s(P3e);fcr=r(TSt,"luke"),TSt.forEach(t),mcr=r(XDe," \u2014 "),lH=n(XDe,"A",{href:!0});var MSt=s(lH);gcr=r(MSt,"LukeForQuestionAnswering"),MSt.forEach(t),hcr=r(XDe," (LUKE model)"),XDe.forEach(t),pcr=i(X),G7=n(X,"LI",{});var zDe=s(G7);B3e=n(zDe,"STRONG",{});var ESt=s(B3e);ucr=r(ESt,"lxmert"),ESt.forEach(t),_cr=r(zDe," \u2014 "),iH=n(zDe,"A",{href:!0});var CSt=s(iH);bcr=r(CSt,"LxmertForQuestionAnswering"),CSt.forEach(t),vcr=r(zDe," (LXMERT model)"),zDe.forEach(t),Fcr=i(X),O7=n(X,"LI",{});var QDe=s(O7);I3e=n(QDe,"STRONG",{});var wSt=s(I3e);Tcr=r(wSt,"mbart"),wSt.forEach(t),Mcr=r(QDe," \u2014 "),dH=n(QDe,"A",{href:!0});var ASt=s(dH);Ecr=r(ASt,"MBartForQuestionAnswering"),ASt.forEach(t),Ccr=r(QDe," (mBART model)"),QDe.forEach(t),wcr=i(X),V7=n(X,"LI",{});var WDe=s(V7);N3e=n(WDe,"STRONG",{});var ySt=s(N3e);Acr=r(ySt,"megatron-bert"),ySt.forEach(t),ycr=r(WDe," \u2014 "),cH=n(WDe,"A",{href:!0});var LSt=s(cH);Lcr=r(LSt,"MegatronBertForQuestionAnswering"),LSt.forEach(t),xcr=r(WDe," (Megatron-BERT model)"),WDe.forEach(t),$cr=i(X),X7=n(X,"LI",{});var UDe=s(X7);q3e=n(UDe,"STRONG",{});var xSt=s(q3e);kcr=r(xSt,"mobilebert"),xSt.forEach(t),Scr=r(UDe," \u2014 "),fH=n(UDe,"A",{href:!0});var $St=s(fH);Rcr=r($St,"MobileBertForQuestionAnswering"),$St.forEach(t),Pcr=r(UDe," (MobileBERT model)"),UDe.forEach(t),Bcr=i(X),z7=n(X,"LI",{});var HDe=s(z7);j3e=n(HDe,"STRONG",{});var kSt=s(j3e);Icr=r(kSt,"mpnet"),kSt.forEach(t),Ncr=r(HDe," \u2014 "),mH=n(HDe,"A",{href:!0});var SSt=s(mH);qcr=r(SSt,"MPNetForQuestionAnswering"),SSt.forEach(t),jcr=r(HDe," (MPNet model)"),HDe.forEach(t),Dcr=i(X),Q7=n(X,"LI",{});var JDe=s(Q7);D3e=n(JDe,"STRONG",{});var RSt=s(D3e);Gcr=r(RSt,"mvp"),RSt.forEach(t),Ocr=r(JDe," \u2014 "),gH=n(JDe,"A",{href:!0});var PSt=s(gH);Vcr=r(PSt,"MvpForQuestionAnswering"),PSt.forEach(t),Xcr=r(JDe," (MVP model)"),JDe.forEach(t),zcr=i(X),W7=n(X,"LI",{});var YDe=s(W7);G3e=n(YDe,"STRONG",{});var BSt=s(G3e);Qcr=r(BSt,"nezha"),BSt.forEach(t),Wcr=r(YDe," \u2014 "),hH=n(YDe,"A",{href:!0});var ISt=s(hH);Ucr=r(ISt,"NezhaForQuestionAnswering"),ISt.forEach(t),Hcr=r(YDe," (Nezha model)"),YDe.forEach(t),Jcr=i(X),U7=n(X,"LI",{});var KDe=s(U7);O3e=n(KDe,"STRONG",{});var NSt=s(O3e);Ycr=r(NSt,"nystromformer"),NSt.forEach(t),Kcr=r(KDe," \u2014 "),pH=n(KDe,"A",{href:!0});var qSt=s(pH);Zcr=r(qSt,"NystromformerForQuestionAnswering"),qSt.forEach(t),efr=r(KDe," (Nystr\xF6mformer model)"),KDe.forEach(t),ofr=i(X),H7=n(X,"LI",{});var ZDe=s(H7);V3e=n(ZDe,"STRONG",{});var jSt=s(V3e);rfr=r(jSt,"qdqbert"),jSt.forEach(t),tfr=r(ZDe," \u2014 "),uH=n(ZDe,"A",{href:!0});var DSt=s(uH);afr=r(DSt,"QDQBertForQuestionAnswering"),DSt.forEach(t),nfr=r(ZDe," (QDQBert model)"),ZDe.forEach(t),sfr=i(X),J7=n(X,"LI",{});var eGe=s(J7);X3e=n(eGe,"STRONG",{});var GSt=s(X3e);lfr=r(GSt,"reformer"),GSt.forEach(t),ifr=r(eGe," \u2014 "),_H=n(eGe,"A",{href:!0});var OSt=s(_H);dfr=r(OSt,"ReformerForQuestionAnswering"),OSt.forEach(t),cfr=r(eGe," (Reformer model)"),eGe.forEach(t),ffr=i(X),Y7=n(X,"LI",{});var oGe=s(Y7);z3e=n(oGe,"STRONG",{});var VSt=s(z3e);mfr=r(VSt,"rembert"),VSt.forEach(t),gfr=r(oGe," \u2014 "),bH=n(oGe,"A",{href:!0});var XSt=s(bH);hfr=r(XSt,"RemBertForQuestionAnswering"),XSt.forEach(t),pfr=r(oGe," (RemBERT model)"),oGe.forEach(t),ufr=i(X),K7=n(X,"LI",{});var rGe=s(K7);Q3e=n(rGe,"STRONG",{});var zSt=s(Q3e);_fr=r(zSt,"roberta"),zSt.forEach(t),bfr=r(rGe," \u2014 "),vH=n(rGe,"A",{href:!0});var QSt=s(vH);vfr=r(QSt,"RobertaForQuestionAnswering"),QSt.forEach(t),Ffr=r(rGe," (RoBERTa model)"),rGe.forEach(t),Tfr=i(X),Z7=n(X,"LI",{});var tGe=s(Z7);W3e=n(tGe,"STRONG",{});var WSt=s(W3e);Mfr=r(WSt,"roformer"),WSt.forEach(t),Efr=r(tGe," \u2014 "),FH=n(tGe,"A",{href:!0});var USt=s(FH);Cfr=r(USt,"RoFormerForQuestionAnswering"),USt.forEach(t),wfr=r(tGe," (RoFormer model)"),tGe.forEach(t),Afr=i(X),eT=n(X,"LI",{});var aGe=s(eT);U3e=n(aGe,"STRONG",{});var HSt=s(U3e);yfr=r(HSt,"splinter"),HSt.forEach(t),Lfr=r(aGe," \u2014 "),TH=n(aGe,"A",{href:!0});var JSt=s(TH);xfr=r(JSt,"SplinterForQuestionAnswering"),JSt.forEach(t),$fr=r(aGe," (Splinter model)"),aGe.forEach(t),kfr=i(X),oT=n(X,"LI",{});var nGe=s(oT);H3e=n(nGe,"STRONG",{});var YSt=s(H3e);Sfr=r(YSt,"squeezebert"),YSt.forEach(t),Rfr=r(nGe," \u2014 "),MH=n(nGe,"A",{href:!0});var KSt=s(MH);Pfr=r(KSt,"SqueezeBertForQuestionAnswering"),KSt.forEach(t),Bfr=r(nGe," (SqueezeBERT model)"),nGe.forEach(t),Ifr=i(X),rT=n(X,"LI",{});var sGe=s(rT);J3e=n(sGe,"STRONG",{});var ZSt=s(J3e);Nfr=r(ZSt,"xlm"),ZSt.forEach(t),qfr=r(sGe," \u2014 "),EH=n(sGe,"A",{href:!0});var eRt=s(EH);jfr=r(eRt,"XLMForQuestionAnsweringSimple"),eRt.forEach(t),Dfr=r(sGe," (XLM model)"),sGe.forEach(t),Gfr=i(X),tT=n(X,"LI",{});var lGe=s(tT);Y3e=n(lGe,"STRONG",{});var oRt=s(Y3e);Ofr=r(oRt,"xlm-roberta"),oRt.forEach(t),Vfr=r(lGe," \u2014 "),CH=n(lGe,"A",{href:!0});var rRt=s(CH);Xfr=r(rRt,"XLMRobertaForQuestionAnswering"),rRt.forEach(t),zfr=r(lGe," (XLM-RoBERTa model)"),lGe.forEach(t),Qfr=i(X),aT=n(X,"LI",{});var iGe=s(aT);K3e=n(iGe,"STRONG",{});var tRt=s(K3e);Wfr=r(tRt,"xlm-roberta-xl"),tRt.forEach(t),Ufr=r(iGe," \u2014 "),wH=n(iGe,"A",{href:!0});var aRt=s(wH);Hfr=r(aRt,"XLMRobertaXLForQuestionAnswering"),aRt.forEach(t),Jfr=r(iGe," (XLM-RoBERTa-XL model)"),iGe.forEach(t),Yfr=i(X),nT=n(X,"LI",{});var dGe=s(nT);Z3e=n(dGe,"STRONG",{});var nRt=s(Z3e);Kfr=r(nRt,"xlnet"),nRt.forEach(t),Zfr=r(dGe," \u2014 "),AH=n(dGe,"A",{href:!0});var sRt=s(AH);emr=r(sRt,"XLNetForQuestionAnsweringSimple"),sRt.forEach(t),omr=r(dGe," (XLNet model)"),dGe.forEach(t),rmr=i(X),sT=n(X,"LI",{});var cGe=s(sT);eFe=n(cGe,"STRONG",{});var lRt=s(eFe);tmr=r(lRt,"yoso"),lRt.forEach(t),amr=r(cGe," \u2014 "),yH=n(cGe,"A",{href:!0});var iRt=s(yH);nmr=r(iRt,"YosoForQuestionAnswering"),iRt.forEach(t),smr=r(cGe," (YOSO model)"),cGe.forEach(t),X.forEach(t),lmr=i(Aa),lT=n(Aa,"P",{});var fGe=s(lT);imr=r(fGe,"The model is set in evaluation mode by default using "),oFe=n(fGe,"CODE",{});var dRt=s(oFe);dmr=r(dRt,"model.eval()"),dRt.forEach(t),cmr=r(fGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rFe=n(fGe,"CODE",{});var cRt=s(rFe);fmr=r(cRt,"model.train()"),cRt.forEach(t),fGe.forEach(t),mmr=i(Aa),T(iT.$$.fragment,Aa),Aa.forEach(t),Ll.forEach(t),_He=i(f),qd=n(f,"H2",{class:!0});var xYe=s(qd);dT=n(xYe,"A",{id:!0,class:!0,href:!0});var fRt=s(dT);tFe=n(fRt,"SPAN",{});var mRt=s(tFe);T(ox.$$.fragment,mRt),mRt.forEach(t),fRt.forEach(t),gmr=i(xYe),aFe=n(xYe,"SPAN",{});var gRt=s(aFe);hmr=r(gRt,"AutoModelForTableQuestionAnswering"),gRt.forEach(t),xYe.forEach(t),bHe=i(f),Xo=n(f,"DIV",{class:!0});var xl=s(Xo);T(rx.$$.fragment,xl),pmr=i(xl),jd=n(xl,"P",{});var Nne=s(jd);umr=r(Nne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),LH=n(Nne,"A",{href:!0});var hRt=s(LH);_mr=r(hRt,"from_pretrained()"),hRt.forEach(t),bmr=r(Nne," class method or the "),xH=n(Nne,"A",{href:!0});var pRt=s(xH);vmr=r(pRt,"from_config()"),pRt.forEach(t),Fmr=r(Nne,` class
method.`),Nne.forEach(t),Tmr=i(xl),tx=n(xl,"P",{});var $Ye=s(tx);Mmr=r($Ye,"This class cannot be instantiated directly using "),nFe=n($Ye,"CODE",{});var uRt=s(nFe);Emr=r(uRt,"__init__()"),uRt.forEach(t),Cmr=r($Ye," (throws an error)."),$Ye.forEach(t),wmr=i(xl),Ct=n(xl,"DIV",{class:!0});var J6=s(Ct);T(ax.$$.fragment,J6),Amr=i(J6),sFe=n(J6,"P",{});var _Rt=s(sFe);ymr=r(_Rt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_Rt.forEach(t),Lmr=i(J6),Dd=n(J6,"P",{});var qne=s(Dd);xmr=r(qne,`Note:
Loading a model from its configuration file does `),lFe=n(qne,"STRONG",{});var bRt=s(lFe);$mr=r(bRt,"not"),bRt.forEach(t),kmr=r(qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(qne,"A",{href:!0});var vRt=s($H);Smr=r(vRt,"from_pretrained()"),vRt.forEach(t),Rmr=r(qne," to load the model weights."),qne.forEach(t),Pmr=i(J6),T(cT.$$.fragment,J6),J6.forEach(t),Bmr=i(xl),lo=n(xl,"DIV",{class:!0});var ya=s(lo);T(nx.$$.fragment,ya),Imr=i(ya),iFe=n(ya,"P",{});var FRt=s(iFe);Nmr=r(FRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FRt.forEach(t),qmr=i(ya),tn=n(ya,"P",{});var Y6=s(tn);jmr=r(Y6,"The model class to instantiate is selected based on the "),dFe=n(Y6,"CODE",{});var TRt=s(dFe);Dmr=r(TRt,"model_type"),TRt.forEach(t),Gmr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),cFe=n(Y6,"CODE",{});var MRt=s(cFe);Omr=r(MRt,"pretrained_model_name_or_path"),MRt.forEach(t),Vmr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(Y6,"CODE",{});var ERt=s(fFe);Xmr=r(ERt,"pretrained_model_name_or_path"),ERt.forEach(t),zmr=r(Y6,":"),Y6.forEach(t),Qmr=i(ya),mFe=n(ya,"UL",{});var CRt=s(mFe);fT=n(CRt,"LI",{});var mGe=s(fT);gFe=n(mGe,"STRONG",{});var wRt=s(gFe);Wmr=r(wRt,"tapas"),wRt.forEach(t),Umr=r(mGe," \u2014 "),kH=n(mGe,"A",{href:!0});var ARt=s(kH);Hmr=r(ARt,"TapasForQuestionAnswering"),ARt.forEach(t),Jmr=r(mGe," (TAPAS model)"),mGe.forEach(t),CRt.forEach(t),Ymr=i(ya),mT=n(ya,"P",{});var gGe=s(mT);Kmr=r(gGe,"The model is set in evaluation mode by default using "),hFe=n(gGe,"CODE",{});var yRt=s(hFe);Zmr=r(yRt,"model.eval()"),yRt.forEach(t),egr=r(gGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pFe=n(gGe,"CODE",{});var LRt=s(pFe);ogr=r(LRt,"model.train()"),LRt.forEach(t),gGe.forEach(t),rgr=i(ya),T(gT.$$.fragment,ya),ya.forEach(t),xl.forEach(t),vHe=i(f),Gd=n(f,"H2",{class:!0});var kYe=s(Gd);hT=n(kYe,"A",{id:!0,class:!0,href:!0});var xRt=s(hT);uFe=n(xRt,"SPAN",{});var $Rt=s(uFe);T(sx.$$.fragment,$Rt),$Rt.forEach(t),xRt.forEach(t),tgr=i(kYe),_Fe=n(kYe,"SPAN",{});var kRt=s(_Fe);agr=r(kRt,"AutoModelForDocumentQuestionAnswering"),kRt.forEach(t),kYe.forEach(t),FHe=i(f),zo=n(f,"DIV",{class:!0});var $l=s(zo);T(lx.$$.fragment,$l),ngr=i($l),Od=n($l,"P",{});var jne=s(Od);sgr=r(jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),SH=n(jne,"A",{href:!0});var SRt=s(SH);lgr=r(SRt,"from_pretrained()"),SRt.forEach(t),igr=r(jne," class method or the "),RH=n(jne,"A",{href:!0});var RRt=s(RH);dgr=r(RRt,"from_config()"),RRt.forEach(t),cgr=r(jne,` class
method.`),jne.forEach(t),fgr=i($l),ix=n($l,"P",{});var SYe=s(ix);mgr=r(SYe,"This class cannot be instantiated directly using "),bFe=n(SYe,"CODE",{});var PRt=s(bFe);ggr=r(PRt,"__init__()"),PRt.forEach(t),hgr=r(SYe," (throws an error)."),SYe.forEach(t),pgr=i($l),wt=n($l,"DIV",{class:!0});var K6=s(wt);T(dx.$$.fragment,K6),ugr=i(K6),vFe=n(K6,"P",{});var BRt=s(vFe);_gr=r(BRt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),BRt.forEach(t),bgr=i(K6),Vd=n(K6,"P",{});var Dne=s(Vd);vgr=r(Dne,`Note:
Loading a model from its configuration file does `),FFe=n(Dne,"STRONG",{});var IRt=s(FFe);Fgr=r(IRt,"not"),IRt.forEach(t),Tgr=r(Dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(Dne,"A",{href:!0});var NRt=s(PH);Mgr=r(NRt,"from_pretrained()"),NRt.forEach(t),Egr=r(Dne," to load the model weights."),Dne.forEach(t),Cgr=i(K6),T(pT.$$.fragment,K6),K6.forEach(t),wgr=i($l),io=n($l,"DIV",{class:!0});var La=s(io);T(cx.$$.fragment,La),Agr=i(La),TFe=n(La,"P",{});var qRt=s(TFe);ygr=r(qRt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),qRt.forEach(t),Lgr=i(La),an=n(La,"P",{});var Z6=s(an);xgr=r(Z6,"The model class to instantiate is selected based on the "),MFe=n(Z6,"CODE",{});var jRt=s(MFe);$gr=r(jRt,"model_type"),jRt.forEach(t),kgr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),EFe=n(Z6,"CODE",{});var DRt=s(EFe);Sgr=r(DRt,"pretrained_model_name_or_path"),DRt.forEach(t),Rgr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(Z6,"CODE",{});var GRt=s(CFe);Pgr=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),Bgr=r(Z6,":"),Z6.forEach(t),Igr=i(La),Xd=n(La,"UL",{});var Gne=s(Xd);uT=n(Gne,"LI",{});var hGe=s(uT);wFe=n(hGe,"STRONG",{});var ORt=s(wFe);Ngr=r(ORt,"donut-swin"),ORt.forEach(t),qgr=r(hGe," \u2014 "),BH=n(hGe,"A",{href:!0});var VRt=s(BH);jgr=r(VRt,"DonutSwinModel"),VRt.forEach(t),Dgr=r(hGe," (DonutSwin model)"),hGe.forEach(t),Ggr=i(Gne),_T=n(Gne,"LI",{});var pGe=s(_T);AFe=n(pGe,"STRONG",{});var XRt=s(AFe);Ogr=r(XRt,"layoutlmv2"),XRt.forEach(t),Vgr=r(pGe," \u2014 "),IH=n(pGe,"A",{href:!0});var zRt=s(IH);Xgr=r(zRt,"LayoutLMv2ForQuestionAnswering"),zRt.forEach(t),zgr=r(pGe," (LayoutLMv2 model)"),pGe.forEach(t),Qgr=i(Gne),bT=n(Gne,"LI",{});var uGe=s(bT);yFe=n(uGe,"STRONG",{});var QRt=s(yFe);Wgr=r(QRt,"layoutlmv3"),QRt.forEach(t),Ugr=r(uGe," \u2014 "),NH=n(uGe,"A",{href:!0});var WRt=s(NH);Hgr=r(WRt,"LayoutLMv3ForQuestionAnswering"),WRt.forEach(t),Jgr=r(uGe," (LayoutLMv3 model)"),uGe.forEach(t),Gne.forEach(t),Ygr=i(La),vT=n(La,"P",{});var _Ge=s(vT);Kgr=r(_Ge,"The model is set in evaluation mode by default using "),LFe=n(_Ge,"CODE",{});var URt=s(LFe);Zgr=r(URt,"model.eval()"),URt.forEach(t),ehr=r(_Ge,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xFe=n(_Ge,"CODE",{});var HRt=s(xFe);ohr=r(HRt,"model.train()"),HRt.forEach(t),_Ge.forEach(t),rhr=i(La),T(FT.$$.fragment,La),La.forEach(t),$l.forEach(t),THe=i(f),zd=n(f,"H2",{class:!0});var RYe=s(zd);TT=n(RYe,"A",{id:!0,class:!0,href:!0});var JRt=s(TT);$Fe=n(JRt,"SPAN",{});var YRt=s($Fe);T(fx.$$.fragment,YRt),YRt.forEach(t),JRt.forEach(t),thr=i(RYe),kFe=n(RYe,"SPAN",{});var KRt=s(kFe);ahr=r(KRt,"AutoModelForImageClassification"),KRt.forEach(t),RYe.forEach(t),MHe=i(f),Qo=n(f,"DIV",{class:!0});var kl=s(Qo);T(mx.$$.fragment,kl),nhr=i(kl),Qd=n(kl,"P",{});var One=s(Qd);shr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=n(One,"A",{href:!0});var ZRt=s(qH);lhr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),ihr=r(One," class method or the "),jH=n(One,"A",{href:!0});var ePt=s(jH);dhr=r(ePt,"from_config()"),ePt.forEach(t),chr=r(One,` class
method.`),One.forEach(t),fhr=i(kl),gx=n(kl,"P",{});var PYe=s(gx);mhr=r(PYe,"This class cannot be instantiated directly using "),SFe=n(PYe,"CODE",{});var oPt=s(SFe);ghr=r(oPt,"__init__()"),oPt.forEach(t),hhr=r(PYe," (throws an error)."),PYe.forEach(t),phr=i(kl),At=n(kl,"DIV",{class:!0});var ey=s(At);T(hx.$$.fragment,ey),uhr=i(ey),RFe=n(ey,"P",{});var rPt=s(RFe);_hr=r(rPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rPt.forEach(t),bhr=i(ey),Wd=n(ey,"P",{});var Vne=s(Wd);vhr=r(Vne,`Note:
Loading a model from its configuration file does `),PFe=n(Vne,"STRONG",{});var tPt=s(PFe);Fhr=r(tPt,"not"),tPt.forEach(t),Thr=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(Vne,"A",{href:!0});var aPt=s(DH);Mhr=r(aPt,"from_pretrained()"),aPt.forEach(t),Ehr=r(Vne," to load the model weights."),Vne.forEach(t),Chr=i(ey),T(MT.$$.fragment,ey),ey.forEach(t),whr=i(kl),co=n(kl,"DIV",{class:!0});var xa=s(co);T(px.$$.fragment,xa),Ahr=i(xa),BFe=n(xa,"P",{});var nPt=s(BFe);yhr=r(nPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nPt.forEach(t),Lhr=i(xa),nn=n(xa,"P",{});var oy=s(nn);xhr=r(oy,"The model class to instantiate is selected based on the "),IFe=n(oy,"CODE",{});var sPt=s(IFe);$hr=r(sPt,"model_type"),sPt.forEach(t),khr=r(oy,` property of the config object (either
passed as an argument or loaded from `),NFe=n(oy,"CODE",{});var lPt=s(NFe);Shr=r(lPt,"pretrained_model_name_or_path"),lPt.forEach(t),Rhr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qFe=n(oy,"CODE",{});var iPt=s(qFe);Phr=r(iPt,"pretrained_model_name_or_path"),iPt.forEach(t),Bhr=r(oy,":"),oy.forEach(t),Ihr=i(xa),be=n(xa,"UL",{});var Fe=s(be);ET=n(Fe,"LI",{});var bGe=s(ET);jFe=n(bGe,"STRONG",{});var dPt=s(jFe);Nhr=r(dPt,"beit"),dPt.forEach(t),qhr=r(bGe," \u2014 "),GH=n(bGe,"A",{href:!0});var cPt=s(GH);jhr=r(cPt,"BeitForImageClassification"),cPt.forEach(t),Dhr=r(bGe," (BEiT model)"),bGe.forEach(t),Ghr=i(Fe),CT=n(Fe,"LI",{});var vGe=s(CT);DFe=n(vGe,"STRONG",{});var fPt=s(DFe);Ohr=r(fPt,"convnext"),fPt.forEach(t),Vhr=r(vGe," \u2014 "),OH=n(vGe,"A",{href:!0});var mPt=s(OH);Xhr=r(mPt,"ConvNextForImageClassification"),mPt.forEach(t),zhr=r(vGe," (ConvNeXT model)"),vGe.forEach(t),Qhr=i(Fe),wT=n(Fe,"LI",{});var FGe=s(wT);GFe=n(FGe,"STRONG",{});var gPt=s(GFe);Whr=r(gPt,"cvt"),gPt.forEach(t),Uhr=r(FGe," \u2014 "),VH=n(FGe,"A",{href:!0});var hPt=s(VH);Hhr=r(hPt,"CvtForImageClassification"),hPt.forEach(t),Jhr=r(FGe," (CvT model)"),FGe.forEach(t),Yhr=i(Fe),AT=n(Fe,"LI",{});var TGe=s(AT);OFe=n(TGe,"STRONG",{});var pPt=s(OFe);Khr=r(pPt,"data2vec-vision"),pPt.forEach(t),Zhr=r(TGe," \u2014 "),XH=n(TGe,"A",{href:!0});var uPt=s(XH);epr=r(uPt,"Data2VecVisionForImageClassification"),uPt.forEach(t),opr=r(TGe," (Data2VecVision model)"),TGe.forEach(t),rpr=i(Fe),fl=n(Fe,"LI",{});var CP=s(fl);VFe=n(CP,"STRONG",{});var _Pt=s(VFe);tpr=r(_Pt,"deit"),_Pt.forEach(t),apr=r(CP," \u2014 "),zH=n(CP,"A",{href:!0});var bPt=s(zH);npr=r(bPt,"DeiTForImageClassification"),bPt.forEach(t),spr=r(CP," or "),QH=n(CP,"A",{href:!0});var vPt=s(QH);lpr=r(vPt,"DeiTForImageClassificationWithTeacher"),vPt.forEach(t),ipr=r(CP," (DeiT model)"),CP.forEach(t),dpr=i(Fe),yT=n(Fe,"LI",{});var MGe=s(yT);XFe=n(MGe,"STRONG",{});var FPt=s(XFe);cpr=r(FPt,"imagegpt"),FPt.forEach(t),fpr=r(MGe," \u2014 "),WH=n(MGe,"A",{href:!0});var TPt=s(WH);mpr=r(TPt,"ImageGPTForImageClassification"),TPt.forEach(t),gpr=r(MGe," (ImageGPT model)"),MGe.forEach(t),hpr=i(Fe),ml=n(Fe,"LI",{});var wP=s(ml);zFe=n(wP,"STRONG",{});var MPt=s(zFe);ppr=r(MPt,"levit"),MPt.forEach(t),upr=r(wP," \u2014 "),UH=n(wP,"A",{href:!0});var EPt=s(UH);_pr=r(EPt,"LevitForImageClassification"),EPt.forEach(t),bpr=r(wP," or "),HH=n(wP,"A",{href:!0});var CPt=s(HH);vpr=r(CPt,"LevitForImageClassificationWithTeacher"),CPt.forEach(t),Fpr=r(wP," (LeViT model)"),wP.forEach(t),Tpr=i(Fe),LT=n(Fe,"LI",{});var EGe=s(LT);QFe=n(EGe,"STRONG",{});var wPt=s(QFe);Mpr=r(wPt,"mobilevit"),wPt.forEach(t),Epr=r(EGe," \u2014 "),JH=n(EGe,"A",{href:!0});var APt=s(JH);Cpr=r(APt,"MobileViTForImageClassification"),APt.forEach(t),wpr=r(EGe," (MobileViT model)"),EGe.forEach(t),Apr=i(Fe),yt=n(Fe,"LI",{});var dm=s(yt);WFe=n(dm,"STRONG",{});var yPt=s(WFe);ypr=r(yPt,"perceiver"),yPt.forEach(t),Lpr=r(dm," \u2014 "),YH=n(dm,"A",{href:!0});var LPt=s(YH);xpr=r(LPt,"PerceiverForImageClassificationLearned"),LPt.forEach(t),$pr=r(dm," or "),KH=n(dm,"A",{href:!0});var xPt=s(KH);kpr=r(xPt,"PerceiverForImageClassificationFourier"),xPt.forEach(t),Spr=r(dm," or "),ZH=n(dm,"A",{href:!0});var $Pt=s(ZH);Rpr=r($Pt,"PerceiverForImageClassificationConvProcessing"),$Pt.forEach(t),Ppr=r(dm," (Perceiver model)"),dm.forEach(t),Bpr=i(Fe),xT=n(Fe,"LI",{});var CGe=s(xT);UFe=n(CGe,"STRONG",{});var kPt=s(UFe);Ipr=r(kPt,"poolformer"),kPt.forEach(t),Npr=r(CGe," \u2014 "),eJ=n(CGe,"A",{href:!0});var SPt=s(eJ);qpr=r(SPt,"PoolFormerForImageClassification"),SPt.forEach(t),jpr=r(CGe," (PoolFormer model)"),CGe.forEach(t),Dpr=i(Fe),$T=n(Fe,"LI",{});var wGe=s($T);HFe=n(wGe,"STRONG",{});var RPt=s(HFe);Gpr=r(RPt,"regnet"),RPt.forEach(t),Opr=r(wGe," \u2014 "),oJ=n(wGe,"A",{href:!0});var PPt=s(oJ);Vpr=r(PPt,"RegNetForImageClassification"),PPt.forEach(t),Xpr=r(wGe," (RegNet model)"),wGe.forEach(t),zpr=i(Fe),kT=n(Fe,"LI",{});var AGe=s(kT);JFe=n(AGe,"STRONG",{});var BPt=s(JFe);Qpr=r(BPt,"resnet"),BPt.forEach(t),Wpr=r(AGe," \u2014 "),rJ=n(AGe,"A",{href:!0});var IPt=s(rJ);Upr=r(IPt,"ResNetForImageClassification"),IPt.forEach(t),Hpr=r(AGe," (ResNet model)"),AGe.forEach(t),Jpr=i(Fe),ST=n(Fe,"LI",{});var yGe=s(ST);YFe=n(yGe,"STRONG",{});var NPt=s(YFe);Ypr=r(NPt,"segformer"),NPt.forEach(t),Kpr=r(yGe," \u2014 "),tJ=n(yGe,"A",{href:!0});var qPt=s(tJ);Zpr=r(qPt,"SegformerForImageClassification"),qPt.forEach(t),eur=r(yGe," (SegFormer model)"),yGe.forEach(t),our=i(Fe),RT=n(Fe,"LI",{});var LGe=s(RT);KFe=n(LGe,"STRONG",{});var jPt=s(KFe);rur=r(jPt,"swin"),jPt.forEach(t),tur=r(LGe," \u2014 "),aJ=n(LGe,"A",{href:!0});var DPt=s(aJ);aur=r(DPt,"SwinForImageClassification"),DPt.forEach(t),nur=r(LGe," (Swin Transformer model)"),LGe.forEach(t),sur=i(Fe),PT=n(Fe,"LI",{});var xGe=s(PT);ZFe=n(xGe,"STRONG",{});var GPt=s(ZFe);lur=r(GPt,"swinv2"),GPt.forEach(t),iur=r(xGe," \u2014 "),nJ=n(xGe,"A",{href:!0});var OPt=s(nJ);dur=r(OPt,"Swinv2ForImageClassification"),OPt.forEach(t),cur=r(xGe," (Swin Transformer V2 model)"),xGe.forEach(t),fur=i(Fe),BT=n(Fe,"LI",{});var $Ge=s(BT);e7e=n($Ge,"STRONG",{});var VPt=s(e7e);mur=r(VPt,"van"),VPt.forEach(t),gur=r($Ge," \u2014 "),sJ=n($Ge,"A",{href:!0});var XPt=s(sJ);hur=r(XPt,"VanForImageClassification"),XPt.forEach(t),pur=r($Ge," (VAN model)"),$Ge.forEach(t),uur=i(Fe),IT=n(Fe,"LI",{});var kGe=s(IT);o7e=n(kGe,"STRONG",{});var zPt=s(o7e);_ur=r(zPt,"vit"),zPt.forEach(t),bur=r(kGe," \u2014 "),lJ=n(kGe,"A",{href:!0});var QPt=s(lJ);vur=r(QPt,"ViTForImageClassification"),QPt.forEach(t),Fur=r(kGe," (ViT model)"),kGe.forEach(t),Fe.forEach(t),Tur=i(xa),NT=n(xa,"P",{});var SGe=s(NT);Mur=r(SGe,"The model is set in evaluation mode by default using "),r7e=n(SGe,"CODE",{});var WPt=s(r7e);Eur=r(WPt,"model.eval()"),WPt.forEach(t),Cur=r(SGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t7e=n(SGe,"CODE",{});var UPt=s(t7e);wur=r(UPt,"model.train()"),UPt.forEach(t),SGe.forEach(t),Aur=i(xa),T(qT.$$.fragment,xa),xa.forEach(t),kl.forEach(t),EHe=i(f),Ud=n(f,"H2",{class:!0});var BYe=s(Ud);jT=n(BYe,"A",{id:!0,class:!0,href:!0});var HPt=s(jT);a7e=n(HPt,"SPAN",{});var JPt=s(a7e);T(ux.$$.fragment,JPt),JPt.forEach(t),HPt.forEach(t),yur=i(BYe),n7e=n(BYe,"SPAN",{});var YPt=s(n7e);Lur=r(YPt,"AutoModelForVideoClassification"),YPt.forEach(t),BYe.forEach(t),CHe=i(f),Wo=n(f,"DIV",{class:!0});var Sl=s(Wo);T(_x.$$.fragment,Sl),xur=i(Sl),Hd=n(Sl,"P",{});var Xne=s(Hd);$ur=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),iJ=n(Xne,"A",{href:!0});var KPt=s(iJ);kur=r(KPt,"from_pretrained()"),KPt.forEach(t),Sur=r(Xne," class method or the "),dJ=n(Xne,"A",{href:!0});var ZPt=s(dJ);Rur=r(ZPt,"from_config()"),ZPt.forEach(t),Pur=r(Xne,` class
method.`),Xne.forEach(t),Bur=i(Sl),bx=n(Sl,"P",{});var IYe=s(bx);Iur=r(IYe,"This class cannot be instantiated directly using "),s7e=n(IYe,"CODE",{});var eBt=s(s7e);Nur=r(eBt,"__init__()"),eBt.forEach(t),qur=r(IYe," (throws an error)."),IYe.forEach(t),jur=i(Sl),Lt=n(Sl,"DIV",{class:!0});var ry=s(Lt);T(vx.$$.fragment,ry),Dur=i(ry),l7e=n(ry,"P",{});var oBt=s(l7e);Gur=r(oBt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),oBt.forEach(t),Our=i(ry),Jd=n(ry,"P",{});var zne=s(Jd);Vur=r(zne,`Note:
Loading a model from its configuration file does `),i7e=n(zne,"STRONG",{});var rBt=s(i7e);Xur=r(rBt,"not"),rBt.forEach(t),zur=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(zne,"A",{href:!0});var tBt=s(cJ);Qur=r(tBt,"from_pretrained()"),tBt.forEach(t),Wur=r(zne," to load the model weights."),zne.forEach(t),Uur=i(ry),T(DT.$$.fragment,ry),ry.forEach(t),Hur=i(Sl),fo=n(Sl,"DIV",{class:!0});var $a=s(fo);T(Fx.$$.fragment,$a),Jur=i($a),d7e=n($a,"P",{});var aBt=s(d7e);Yur=r(aBt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),aBt.forEach(t),Kur=i($a),sn=n($a,"P",{});var ty=s(sn);Zur=r(ty,"The model class to instantiate is selected based on the "),c7e=n(ty,"CODE",{});var nBt=s(c7e);e_r=r(nBt,"model_type"),nBt.forEach(t),o_r=r(ty,` property of the config object (either
passed as an argument or loaded from `),f7e=n(ty,"CODE",{});var sBt=s(f7e);r_r=r(sBt,"pretrained_model_name_or_path"),sBt.forEach(t),t_r=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m7e=n(ty,"CODE",{});var lBt=s(m7e);a_r=r(lBt,"pretrained_model_name_or_path"),lBt.forEach(t),n_r=r(ty,":"),ty.forEach(t),s_r=i($a),g7e=n($a,"UL",{});var iBt=s(g7e);GT=n(iBt,"LI",{});var RGe=s(GT);h7e=n(RGe,"STRONG",{});var dBt=s(h7e);l_r=r(dBt,"videomae"),dBt.forEach(t),i_r=r(RGe," \u2014 "),fJ=n(RGe,"A",{href:!0});var cBt=s(fJ);d_r=r(cBt,"VideoMAEForVideoClassification"),cBt.forEach(t),c_r=r(RGe," (VideoMAE model)"),RGe.forEach(t),iBt.forEach(t),f_r=i($a),OT=n($a,"P",{});var PGe=s(OT);m_r=r(PGe,"The model is set in evaluation mode by default using "),p7e=n(PGe,"CODE",{});var fBt=s(p7e);g_r=r(fBt,"model.eval()"),fBt.forEach(t),h_r=r(PGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=n(PGe,"CODE",{});var mBt=s(u7e);p_r=r(mBt,"model.train()"),mBt.forEach(t),PGe.forEach(t),u_r=i($a),T(VT.$$.fragment,$a),$a.forEach(t),Sl.forEach(t),wHe=i(f),Yd=n(f,"H2",{class:!0});var NYe=s(Yd);XT=n(NYe,"A",{id:!0,class:!0,href:!0});var gBt=s(XT);_7e=n(gBt,"SPAN",{});var hBt=s(_7e);T(Tx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),__r=i(NYe),b7e=n(NYe,"SPAN",{});var pBt=s(b7e);b_r=r(pBt,"AutoModelForVision2Seq"),pBt.forEach(t),NYe.forEach(t),AHe=i(f),Uo=n(f,"DIV",{class:!0});var Rl=s(Uo);T(Mx.$$.fragment,Rl),v_r=i(Rl),Kd=n(Rl,"P",{});var Qne=s(Kd);F_r=r(Qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mJ=n(Qne,"A",{href:!0});var uBt=s(mJ);T_r=r(uBt,"from_pretrained()"),uBt.forEach(t),M_r=r(Qne," class method or the "),gJ=n(Qne,"A",{href:!0});var _Bt=s(gJ);E_r=r(_Bt,"from_config()"),_Bt.forEach(t),C_r=r(Qne,` class
method.`),Qne.forEach(t),w_r=i(Rl),Ex=n(Rl,"P",{});var qYe=s(Ex);A_r=r(qYe,"This class cannot be instantiated directly using "),v7e=n(qYe,"CODE",{});var bBt=s(v7e);y_r=r(bBt,"__init__()"),bBt.forEach(t),L_r=r(qYe," (throws an error)."),qYe.forEach(t),x_r=i(Rl),xt=n(Rl,"DIV",{class:!0});var ay=s(xt);T(Cx.$$.fragment,ay),$_r=i(ay),F7e=n(ay,"P",{});var vBt=s(F7e);k_r=r(vBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vBt.forEach(t),S_r=i(ay),Zd=n(ay,"P",{});var Wne=s(Zd);R_r=r(Wne,`Note:
Loading a model from its configuration file does `),T7e=n(Wne,"STRONG",{});var FBt=s(T7e);P_r=r(FBt,"not"),FBt.forEach(t),B_r=r(Wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Wne,"A",{href:!0});var TBt=s(hJ);I_r=r(TBt,"from_pretrained()"),TBt.forEach(t),N_r=r(Wne," to load the model weights."),Wne.forEach(t),q_r=i(ay),T(zT.$$.fragment,ay),ay.forEach(t),j_r=i(Rl),mo=n(Rl,"DIV",{class:!0});var ka=s(mo);T(wx.$$.fragment,ka),D_r=i(ka),M7e=n(ka,"P",{});var MBt=s(M7e);G_r=r(MBt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MBt.forEach(t),O_r=i(ka),ln=n(ka,"P",{});var ny=s(ln);V_r=r(ny,"The model class to instantiate is selected based on the "),E7e=n(ny,"CODE",{});var EBt=s(E7e);X_r=r(EBt,"model_type"),EBt.forEach(t),z_r=r(ny,` property of the config object (either
passed as an argument or loaded from `),C7e=n(ny,"CODE",{});var CBt=s(C7e);Q_r=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),W_r=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(ny,"CODE",{});var wBt=s(w7e);U_r=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),H_r=r(ny,":"),ny.forEach(t),J_r=i(ka),A7e=n(ka,"UL",{});var ABt=s(A7e);QT=n(ABt,"LI",{});var BGe=s(QT);y7e=n(BGe,"STRONG",{});var yBt=s(y7e);Y_r=r(yBt,"vision-encoder-decoder"),yBt.forEach(t),K_r=r(BGe," \u2014 "),pJ=n(BGe,"A",{href:!0});var LBt=s(pJ);Z_r=r(LBt,"VisionEncoderDecoderModel"),LBt.forEach(t),e2r=r(BGe," (Vision Encoder decoder model)"),BGe.forEach(t),ABt.forEach(t),o2r=i(ka),WT=n(ka,"P",{});var IGe=s(WT);r2r=r(IGe,"The model is set in evaluation mode by default using "),L7e=n(IGe,"CODE",{});var xBt=s(L7e);t2r=r(xBt,"model.eval()"),xBt.forEach(t),a2r=r(IGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x7e=n(IGe,"CODE",{});var $Bt=s(x7e);n2r=r($Bt,"model.train()"),$Bt.forEach(t),IGe.forEach(t),s2r=i(ka),T(UT.$$.fragment,ka),ka.forEach(t),Rl.forEach(t),yHe=i(f),ec=n(f,"H2",{class:!0});var jYe=s(ec);HT=n(jYe,"A",{id:!0,class:!0,href:!0});var kBt=s(HT);$7e=n(kBt,"SPAN",{});var SBt=s($7e);T(Ax.$$.fragment,SBt),SBt.forEach(t),kBt.forEach(t),l2r=i(jYe),k7e=n(jYe,"SPAN",{});var RBt=s(k7e);i2r=r(RBt,"AutoModelForVisualQuestionAnswering"),RBt.forEach(t),jYe.forEach(t),LHe=i(f),Ho=n(f,"DIV",{class:!0});var Pl=s(Ho);T(yx.$$.fragment,Pl),d2r=i(Pl),oc=n(Pl,"P",{});var Une=s(oc);c2r=r(Une,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),uJ=n(Une,"A",{href:!0});var PBt=s(uJ);f2r=r(PBt,"from_pretrained()"),PBt.forEach(t),m2r=r(Une," class method or the "),_J=n(Une,"A",{href:!0});var BBt=s(_J);g2r=r(BBt,"from_config()"),BBt.forEach(t),h2r=r(Une,` class
method.`),Une.forEach(t),p2r=i(Pl),Lx=n(Pl,"P",{});var DYe=s(Lx);u2r=r(DYe,"This class cannot be instantiated directly using "),S7e=n(DYe,"CODE",{});var IBt=s(S7e);_2r=r(IBt,"__init__()"),IBt.forEach(t),b2r=r(DYe," (throws an error)."),DYe.forEach(t),v2r=i(Pl),$t=n(Pl,"DIV",{class:!0});var sy=s($t);T(xx.$$.fragment,sy),F2r=i(sy),R7e=n(sy,"P",{});var NBt=s(R7e);T2r=r(NBt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),NBt.forEach(t),M2r=i(sy),rc=n(sy,"P",{});var Hne=s(rc);E2r=r(Hne,`Note:
Loading a model from its configuration file does `),P7e=n(Hne,"STRONG",{});var qBt=s(P7e);C2r=r(qBt,"not"),qBt.forEach(t),w2r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(Hne,"A",{href:!0});var jBt=s(bJ);A2r=r(jBt,"from_pretrained()"),jBt.forEach(t),y2r=r(Hne," to load the model weights."),Hne.forEach(t),L2r=i(sy),T(JT.$$.fragment,sy),sy.forEach(t),x2r=i(Pl),go=n(Pl,"DIV",{class:!0});var Sa=s(go);T($x.$$.fragment,Sa),$2r=i(Sa),B7e=n(Sa,"P",{});var DBt=s(B7e);k2r=r(DBt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),DBt.forEach(t),S2r=i(Sa),dn=n(Sa,"P",{});var ly=s(dn);R2r=r(ly,"The model class to instantiate is selected based on the "),I7e=n(ly,"CODE",{});var GBt=s(I7e);P2r=r(GBt,"model_type"),GBt.forEach(t),B2r=r(ly,` property of the config object (either
passed as an argument or loaded from `),N7e=n(ly,"CODE",{});var OBt=s(N7e);I2r=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),N2r=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q7e=n(ly,"CODE",{});var VBt=s(q7e);q2r=r(VBt,"pretrained_model_name_or_path"),VBt.forEach(t),j2r=r(ly,":"),ly.forEach(t),D2r=i(Sa),j7e=n(Sa,"UL",{});var XBt=s(j7e);YT=n(XBt,"LI",{});var NGe=s(YT);D7e=n(NGe,"STRONG",{});var zBt=s(D7e);G2r=r(zBt,"vilt"),zBt.forEach(t),O2r=r(NGe," \u2014 "),vJ=n(NGe,"A",{href:!0});var QBt=s(vJ);V2r=r(QBt,"ViltForQuestionAnswering"),QBt.forEach(t),X2r=r(NGe," (ViLT model)"),NGe.forEach(t),XBt.forEach(t),z2r=i(Sa),KT=n(Sa,"P",{});var qGe=s(KT);Q2r=r(qGe,"The model is set in evaluation mode by default using "),G7e=n(qGe,"CODE",{});var WBt=s(G7e);W2r=r(WBt,"model.eval()"),WBt.forEach(t),U2r=r(qGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O7e=n(qGe,"CODE",{});var UBt=s(O7e);H2r=r(UBt,"model.train()"),UBt.forEach(t),qGe.forEach(t),J2r=i(Sa),T(ZT.$$.fragment,Sa),Sa.forEach(t),Pl.forEach(t),xHe=i(f),tc=n(f,"H2",{class:!0});var GYe=s(tc);e8=n(GYe,"A",{id:!0,class:!0,href:!0});var HBt=s(e8);V7e=n(HBt,"SPAN",{});var JBt=s(V7e);T(kx.$$.fragment,JBt),JBt.forEach(t),HBt.forEach(t),Y2r=i(GYe),X7e=n(GYe,"SPAN",{});var YBt=s(X7e);K2r=r(YBt,"AutoModelForAudioClassification"),YBt.forEach(t),GYe.forEach(t),$He=i(f),Jo=n(f,"DIV",{class:!0});var Bl=s(Jo);T(Sx.$$.fragment,Bl),Z2r=i(Bl),ac=n(Bl,"P",{});var Jne=s(ac);e1r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),FJ=n(Jne,"A",{href:!0});var KBt=s(FJ);o1r=r(KBt,"from_pretrained()"),KBt.forEach(t),r1r=r(Jne," class method or the "),TJ=n(Jne,"A",{href:!0});var ZBt=s(TJ);t1r=r(ZBt,"from_config()"),ZBt.forEach(t),a1r=r(Jne,` class
method.`),Jne.forEach(t),n1r=i(Bl),Rx=n(Bl,"P",{});var OYe=s(Rx);s1r=r(OYe,"This class cannot be instantiated directly using "),z7e=n(OYe,"CODE",{});var eIt=s(z7e);l1r=r(eIt,"__init__()"),eIt.forEach(t),i1r=r(OYe," (throws an error)."),OYe.forEach(t),d1r=i(Bl),kt=n(Bl,"DIV",{class:!0});var iy=s(kt);T(Px.$$.fragment,iy),c1r=i(iy),Q7e=n(iy,"P",{});var oIt=s(Q7e);f1r=r(oIt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oIt.forEach(t),m1r=i(iy),nc=n(iy,"P",{});var Yne=s(nc);g1r=r(Yne,`Note:
Loading a model from its configuration file does `),W7e=n(Yne,"STRONG",{});var rIt=s(W7e);h1r=r(rIt,"not"),rIt.forEach(t),p1r=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Yne,"A",{href:!0});var tIt=s(MJ);u1r=r(tIt,"from_pretrained()"),tIt.forEach(t),_1r=r(Yne," to load the model weights."),Yne.forEach(t),b1r=i(iy),T(o8.$$.fragment,iy),iy.forEach(t),v1r=i(Bl),ho=n(Bl,"DIV",{class:!0});var Ra=s(ho);T(Bx.$$.fragment,Ra),F1r=i(Ra),U7e=n(Ra,"P",{});var aIt=s(U7e);T1r=r(aIt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),aIt.forEach(t),M1r=i(Ra),cn=n(Ra,"P",{});var dy=s(cn);E1r=r(dy,"The model class to instantiate is selected based on the "),H7e=n(dy,"CODE",{});var nIt=s(H7e);C1r=r(nIt,"model_type"),nIt.forEach(t),w1r=r(dy,` property of the config object (either
passed as an argument or loaded from `),J7e=n(dy,"CODE",{});var sIt=s(J7e);A1r=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),y1r=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(dy,"CODE",{});var lIt=s(Y7e);L1r=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),x1r=r(dy,":"),dy.forEach(t),$1r=i(Ra),Pe=n(Ra,"UL",{});var Qe=s(Pe);r8=n(Qe,"LI",{});var jGe=s(r8);K7e=n(jGe,"STRONG",{});var iIt=s(K7e);k1r=r(iIt,"data2vec-audio"),iIt.forEach(t),S1r=r(jGe," \u2014 "),EJ=n(jGe,"A",{href:!0});var dIt=s(EJ);R1r=r(dIt,"Data2VecAudioForSequenceClassification"),dIt.forEach(t),P1r=r(jGe," (Data2VecAudio model)"),jGe.forEach(t),B1r=i(Qe),t8=n(Qe,"LI",{});var DGe=s(t8);Z7e=n(DGe,"STRONG",{});var cIt=s(Z7e);I1r=r(cIt,"hubert"),cIt.forEach(t),N1r=r(DGe," \u2014 "),CJ=n(DGe,"A",{href:!0});var fIt=s(CJ);q1r=r(fIt,"HubertForSequenceClassification"),fIt.forEach(t),j1r=r(DGe," (Hubert model)"),DGe.forEach(t),D1r=i(Qe),a8=n(Qe,"LI",{});var GGe=s(a8);eTe=n(GGe,"STRONG",{});var mIt=s(eTe);G1r=r(mIt,"sew"),mIt.forEach(t),O1r=r(GGe," \u2014 "),wJ=n(GGe,"A",{href:!0});var gIt=s(wJ);V1r=r(gIt,"SEWForSequenceClassification"),gIt.forEach(t),X1r=r(GGe," (SEW model)"),GGe.forEach(t),z1r=i(Qe),n8=n(Qe,"LI",{});var OGe=s(n8);oTe=n(OGe,"STRONG",{});var hIt=s(oTe);Q1r=r(hIt,"sew-d"),hIt.forEach(t),W1r=r(OGe," \u2014 "),AJ=n(OGe,"A",{href:!0});var pIt=s(AJ);U1r=r(pIt,"SEWDForSequenceClassification"),pIt.forEach(t),H1r=r(OGe," (SEW-D model)"),OGe.forEach(t),J1r=i(Qe),s8=n(Qe,"LI",{});var VGe=s(s8);rTe=n(VGe,"STRONG",{});var uIt=s(rTe);Y1r=r(uIt,"unispeech"),uIt.forEach(t),K1r=r(VGe," \u2014 "),yJ=n(VGe,"A",{href:!0});var _It=s(yJ);Z1r=r(_It,"UniSpeechForSequenceClassification"),_It.forEach(t),ebr=r(VGe," (UniSpeech model)"),VGe.forEach(t),obr=i(Qe),l8=n(Qe,"LI",{});var XGe=s(l8);tTe=n(XGe,"STRONG",{});var bIt=s(tTe);rbr=r(bIt,"unispeech-sat"),bIt.forEach(t),tbr=r(XGe," \u2014 "),LJ=n(XGe,"A",{href:!0});var vIt=s(LJ);abr=r(vIt,"UniSpeechSatForSequenceClassification"),vIt.forEach(t),nbr=r(XGe," (UniSpeechSat model)"),XGe.forEach(t),sbr=i(Qe),i8=n(Qe,"LI",{});var zGe=s(i8);aTe=n(zGe,"STRONG",{});var FIt=s(aTe);lbr=r(FIt,"wav2vec2"),FIt.forEach(t),ibr=r(zGe," \u2014 "),xJ=n(zGe,"A",{href:!0});var TIt=s(xJ);dbr=r(TIt,"Wav2Vec2ForSequenceClassification"),TIt.forEach(t),cbr=r(zGe," (Wav2Vec2 model)"),zGe.forEach(t),fbr=i(Qe),d8=n(Qe,"LI",{});var QGe=s(d8);nTe=n(QGe,"STRONG",{});var MIt=s(nTe);mbr=r(MIt,"wav2vec2-conformer"),MIt.forEach(t),gbr=r(QGe," \u2014 "),$J=n(QGe,"A",{href:!0});var EIt=s($J);hbr=r(EIt,"Wav2Vec2ConformerForSequenceClassification"),EIt.forEach(t),pbr=r(QGe," (Wav2Vec2-Conformer model)"),QGe.forEach(t),ubr=i(Qe),c8=n(Qe,"LI",{});var WGe=s(c8);sTe=n(WGe,"STRONG",{});var CIt=s(sTe);_br=r(CIt,"wavlm"),CIt.forEach(t),bbr=r(WGe," \u2014 "),kJ=n(WGe,"A",{href:!0});var wIt=s(kJ);vbr=r(wIt,"WavLMForSequenceClassification"),wIt.forEach(t),Fbr=r(WGe," (WavLM model)"),WGe.forEach(t),Qe.forEach(t),Tbr=i(Ra),f8=n(Ra,"P",{});var UGe=s(f8);Mbr=r(UGe,"The model is set in evaluation mode by default using "),lTe=n(UGe,"CODE",{});var AIt=s(lTe);Ebr=r(AIt,"model.eval()"),AIt.forEach(t),Cbr=r(UGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iTe=n(UGe,"CODE",{});var yIt=s(iTe);wbr=r(yIt,"model.train()"),yIt.forEach(t),UGe.forEach(t),Abr=i(Ra),T(m8.$$.fragment,Ra),Ra.forEach(t),Bl.forEach(t),kHe=i(f),sc=n(f,"H2",{class:!0});var VYe=s(sc);g8=n(VYe,"A",{id:!0,class:!0,href:!0});var LIt=s(g8);dTe=n(LIt,"SPAN",{});var xIt=s(dTe);T(Ix.$$.fragment,xIt),xIt.forEach(t),LIt.forEach(t),ybr=i(VYe),cTe=n(VYe,"SPAN",{});var $It=s(cTe);Lbr=r($It,"AutoModelForAudioFrameClassification"),$It.forEach(t),VYe.forEach(t),SHe=i(f),Yo=n(f,"DIV",{class:!0});var Il=s(Yo);T(Nx.$$.fragment,Il),xbr=i(Il),lc=n(Il,"P",{});var Kne=s(lc);$br=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),SJ=n(Kne,"A",{href:!0});var kIt=s(SJ);kbr=r(kIt,"from_pretrained()"),kIt.forEach(t),Sbr=r(Kne," class method or the "),RJ=n(Kne,"A",{href:!0});var SIt=s(RJ);Rbr=r(SIt,"from_config()"),SIt.forEach(t),Pbr=r(Kne,` class
method.`),Kne.forEach(t),Bbr=i(Il),qx=n(Il,"P",{});var XYe=s(qx);Ibr=r(XYe,"This class cannot be instantiated directly using "),fTe=n(XYe,"CODE",{});var RIt=s(fTe);Nbr=r(RIt,"__init__()"),RIt.forEach(t),qbr=r(XYe," (throws an error)."),XYe.forEach(t),jbr=i(Il),St=n(Il,"DIV",{class:!0});var cy=s(St);T(jx.$$.fragment,cy),Dbr=i(cy),mTe=n(cy,"P",{});var PIt=s(mTe);Gbr=r(PIt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),PIt.forEach(t),Obr=i(cy),ic=n(cy,"P",{});var Zne=s(ic);Vbr=r(Zne,`Note:
Loading a model from its configuration file does `),gTe=n(Zne,"STRONG",{});var BIt=s(gTe);Xbr=r(BIt,"not"),BIt.forEach(t),zbr=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(Zne,"A",{href:!0});var IIt=s(PJ);Qbr=r(IIt,"from_pretrained()"),IIt.forEach(t),Wbr=r(Zne," to load the model weights."),Zne.forEach(t),Ubr=i(cy),T(h8.$$.fragment,cy),cy.forEach(t),Hbr=i(Il),po=n(Il,"DIV",{class:!0});var Pa=s(po);T(Dx.$$.fragment,Pa),Jbr=i(Pa),hTe=n(Pa,"P",{});var NIt=s(hTe);Ybr=r(NIt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),NIt.forEach(t),Kbr=i(Pa),fn=n(Pa,"P",{});var fy=s(fn);Zbr=r(fy,"The model class to instantiate is selected based on the "),pTe=n(fy,"CODE",{});var qIt=s(pTe);evr=r(qIt,"model_type"),qIt.forEach(t),ovr=r(fy,` property of the config object (either
passed as an argument or loaded from `),uTe=n(fy,"CODE",{});var jIt=s(uTe);rvr=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),tvr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(fy,"CODE",{});var DIt=s(_Te);avr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),nvr=r(fy,":"),fy.forEach(t),svr=i(Pa),it=n(Pa,"UL",{});var Nl=s(it);p8=n(Nl,"LI",{});var HGe=s(p8);bTe=n(HGe,"STRONG",{});var GIt=s(bTe);lvr=r(GIt,"data2vec-audio"),GIt.forEach(t),ivr=r(HGe," \u2014 "),BJ=n(HGe,"A",{href:!0});var OIt=s(BJ);dvr=r(OIt,"Data2VecAudioForAudioFrameClassification"),OIt.forEach(t),cvr=r(HGe," (Data2VecAudio model)"),HGe.forEach(t),fvr=i(Nl),u8=n(Nl,"LI",{});var JGe=s(u8);vTe=n(JGe,"STRONG",{});var VIt=s(vTe);mvr=r(VIt,"unispeech-sat"),VIt.forEach(t),gvr=r(JGe," \u2014 "),IJ=n(JGe,"A",{href:!0});var XIt=s(IJ);hvr=r(XIt,"UniSpeechSatForAudioFrameClassification"),XIt.forEach(t),pvr=r(JGe," (UniSpeechSat model)"),JGe.forEach(t),uvr=i(Nl),_8=n(Nl,"LI",{});var YGe=s(_8);FTe=n(YGe,"STRONG",{});var zIt=s(FTe);_vr=r(zIt,"wav2vec2"),zIt.forEach(t),bvr=r(YGe," \u2014 "),NJ=n(YGe,"A",{href:!0});var QIt=s(NJ);vvr=r(QIt,"Wav2Vec2ForAudioFrameClassification"),QIt.forEach(t),Fvr=r(YGe," (Wav2Vec2 model)"),YGe.forEach(t),Tvr=i(Nl),b8=n(Nl,"LI",{});var KGe=s(b8);TTe=n(KGe,"STRONG",{});var WIt=s(TTe);Mvr=r(WIt,"wav2vec2-conformer"),WIt.forEach(t),Evr=r(KGe," \u2014 "),qJ=n(KGe,"A",{href:!0});var UIt=s(qJ);Cvr=r(UIt,"Wav2Vec2ConformerForAudioFrameClassification"),UIt.forEach(t),wvr=r(KGe," (Wav2Vec2-Conformer model)"),KGe.forEach(t),Avr=i(Nl),v8=n(Nl,"LI",{});var ZGe=s(v8);MTe=n(ZGe,"STRONG",{});var HIt=s(MTe);yvr=r(HIt,"wavlm"),HIt.forEach(t),Lvr=r(ZGe," \u2014 "),jJ=n(ZGe,"A",{href:!0});var JIt=s(jJ);xvr=r(JIt,"WavLMForAudioFrameClassification"),JIt.forEach(t),$vr=r(ZGe," (WavLM model)"),ZGe.forEach(t),Nl.forEach(t),kvr=i(Pa),F8=n(Pa,"P",{});var eOe=s(F8);Svr=r(eOe,"The model is set in evaluation mode by default using "),ETe=n(eOe,"CODE",{});var YIt=s(ETe);Rvr=r(YIt,"model.eval()"),YIt.forEach(t),Pvr=r(eOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),CTe=n(eOe,"CODE",{});var KIt=s(CTe);Bvr=r(KIt,"model.train()"),KIt.forEach(t),eOe.forEach(t),Ivr=i(Pa),T(T8.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),RHe=i(f),dc=n(f,"H2",{class:!0});var zYe=s(dc);M8=n(zYe,"A",{id:!0,class:!0,href:!0});var ZIt=s(M8);wTe=n(ZIt,"SPAN",{});var eNt=s(wTe);T(Gx.$$.fragment,eNt),eNt.forEach(t),ZIt.forEach(t),Nvr=i(zYe),ATe=n(zYe,"SPAN",{});var oNt=s(ATe);qvr=r(oNt,"AutoModelForCTC"),oNt.forEach(t),zYe.forEach(t),PHe=i(f),Ko=n(f,"DIV",{class:!0});var ql=s(Ko);T(Ox.$$.fragment,ql),jvr=i(ql),cc=n(ql,"P",{});var ese=s(cc);Dvr=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DJ=n(ese,"A",{href:!0});var rNt=s(DJ);Gvr=r(rNt,"from_pretrained()"),rNt.forEach(t),Ovr=r(ese," class method or the "),GJ=n(ese,"A",{href:!0});var tNt=s(GJ);Vvr=r(tNt,"from_config()"),tNt.forEach(t),Xvr=r(ese,` class
method.`),ese.forEach(t),zvr=i(ql),Vx=n(ql,"P",{});var QYe=s(Vx);Qvr=r(QYe,"This class cannot be instantiated directly using "),yTe=n(QYe,"CODE",{});var aNt=s(yTe);Wvr=r(aNt,"__init__()"),aNt.forEach(t),Uvr=r(QYe," (throws an error)."),QYe.forEach(t),Hvr=i(ql),Rt=n(ql,"DIV",{class:!0});var my=s(Rt);T(Xx.$$.fragment,my),Jvr=i(my),LTe=n(my,"P",{});var nNt=s(LTe);Yvr=r(nNt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),nNt.forEach(t),Kvr=i(my),fc=n(my,"P",{});var ose=s(fc);Zvr=r(ose,`Note:
Loading a model from its configuration file does `),xTe=n(ose,"STRONG",{});var sNt=s(xTe);e3r=r(sNt,"not"),sNt.forEach(t),o3r=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(ose,"A",{href:!0});var lNt=s(OJ);r3r=r(lNt,"from_pretrained()"),lNt.forEach(t),t3r=r(ose," to load the model weights."),ose.forEach(t),a3r=i(my),T(E8.$$.fragment,my),my.forEach(t),n3r=i(ql),uo=n(ql,"DIV",{class:!0});var Ba=s(uo);T(zx.$$.fragment,Ba),s3r=i(Ba),$Te=n(Ba,"P",{});var iNt=s($Te);l3r=r(iNt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),iNt.forEach(t),i3r=i(Ba),mn=n(Ba,"P",{});var gy=s(mn);d3r=r(gy,"The model class to instantiate is selected based on the "),kTe=n(gy,"CODE",{});var dNt=s(kTe);c3r=r(dNt,"model_type"),dNt.forEach(t),f3r=r(gy,` property of the config object (either
passed as an argument or loaded from `),STe=n(gy,"CODE",{});var cNt=s(STe);m3r=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),g3r=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RTe=n(gy,"CODE",{});var fNt=s(RTe);h3r=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),p3r=r(gy,":"),gy.forEach(t),u3r=i(Ba),ye=n(Ba,"UL",{});var Be=s(ye);C8=n(Be,"LI",{});var oOe=s(C8);PTe=n(oOe,"STRONG",{});var mNt=s(PTe);_3r=r(mNt,"data2vec-audio"),mNt.forEach(t),b3r=r(oOe," \u2014 "),VJ=n(oOe,"A",{href:!0});var gNt=s(VJ);v3r=r(gNt,"Data2VecAudioForCTC"),gNt.forEach(t),F3r=r(oOe," (Data2VecAudio model)"),oOe.forEach(t),T3r=i(Be),w8=n(Be,"LI",{});var rOe=s(w8);BTe=n(rOe,"STRONG",{});var hNt=s(BTe);M3r=r(hNt,"hubert"),hNt.forEach(t),E3r=r(rOe," \u2014 "),XJ=n(rOe,"A",{href:!0});var pNt=s(XJ);C3r=r(pNt,"HubertForCTC"),pNt.forEach(t),w3r=r(rOe," (Hubert model)"),rOe.forEach(t),A3r=i(Be),A8=n(Be,"LI",{});var tOe=s(A8);ITe=n(tOe,"STRONG",{});var uNt=s(ITe);y3r=r(uNt,"mctct"),uNt.forEach(t),L3r=r(tOe," \u2014 "),zJ=n(tOe,"A",{href:!0});var _Nt=s(zJ);x3r=r(_Nt,"MCTCTForCTC"),_Nt.forEach(t),$3r=r(tOe," (M-CTC-T model)"),tOe.forEach(t),k3r=i(Be),y8=n(Be,"LI",{});var aOe=s(y8);NTe=n(aOe,"STRONG",{});var bNt=s(NTe);S3r=r(bNt,"sew"),bNt.forEach(t),R3r=r(aOe," \u2014 "),QJ=n(aOe,"A",{href:!0});var vNt=s(QJ);P3r=r(vNt,"SEWForCTC"),vNt.forEach(t),B3r=r(aOe," (SEW model)"),aOe.forEach(t),I3r=i(Be),L8=n(Be,"LI",{});var nOe=s(L8);qTe=n(nOe,"STRONG",{});var FNt=s(qTe);N3r=r(FNt,"sew-d"),FNt.forEach(t),q3r=r(nOe," \u2014 "),WJ=n(nOe,"A",{href:!0});var TNt=s(WJ);j3r=r(TNt,"SEWDForCTC"),TNt.forEach(t),D3r=r(nOe," (SEW-D model)"),nOe.forEach(t),G3r=i(Be),x8=n(Be,"LI",{});var sOe=s(x8);jTe=n(sOe,"STRONG",{});var MNt=s(jTe);O3r=r(MNt,"unispeech"),MNt.forEach(t),V3r=r(sOe," \u2014 "),UJ=n(sOe,"A",{href:!0});var ENt=s(UJ);X3r=r(ENt,"UniSpeechForCTC"),ENt.forEach(t),z3r=r(sOe," (UniSpeech model)"),sOe.forEach(t),Q3r=i(Be),$8=n(Be,"LI",{});var lOe=s($8);DTe=n(lOe,"STRONG",{});var CNt=s(DTe);W3r=r(CNt,"unispeech-sat"),CNt.forEach(t),U3r=r(lOe," \u2014 "),HJ=n(lOe,"A",{href:!0});var wNt=s(HJ);H3r=r(wNt,"UniSpeechSatForCTC"),wNt.forEach(t),J3r=r(lOe," (UniSpeechSat model)"),lOe.forEach(t),Y3r=i(Be),k8=n(Be,"LI",{});var iOe=s(k8);GTe=n(iOe,"STRONG",{});var ANt=s(GTe);K3r=r(ANt,"wav2vec2"),ANt.forEach(t),Z3r=r(iOe," \u2014 "),JJ=n(iOe,"A",{href:!0});var yNt=s(JJ);eFr=r(yNt,"Wav2Vec2ForCTC"),yNt.forEach(t),oFr=r(iOe," (Wav2Vec2 model)"),iOe.forEach(t),rFr=i(Be),S8=n(Be,"LI",{});var dOe=s(S8);OTe=n(dOe,"STRONG",{});var LNt=s(OTe);tFr=r(LNt,"wav2vec2-conformer"),LNt.forEach(t),aFr=r(dOe," \u2014 "),YJ=n(dOe,"A",{href:!0});var xNt=s(YJ);nFr=r(xNt,"Wav2Vec2ConformerForCTC"),xNt.forEach(t),sFr=r(dOe," (Wav2Vec2-Conformer model)"),dOe.forEach(t),lFr=i(Be),R8=n(Be,"LI",{});var cOe=s(R8);VTe=n(cOe,"STRONG",{});var $Nt=s(VTe);iFr=r($Nt,"wavlm"),$Nt.forEach(t),dFr=r(cOe," \u2014 "),KJ=n(cOe,"A",{href:!0});var kNt=s(KJ);cFr=r(kNt,"WavLMForCTC"),kNt.forEach(t),fFr=r(cOe," (WavLM model)"),cOe.forEach(t),Be.forEach(t),mFr=i(Ba),P8=n(Ba,"P",{});var fOe=s(P8);gFr=r(fOe,"The model is set in evaluation mode by default using "),XTe=n(fOe,"CODE",{});var SNt=s(XTe);hFr=r(SNt,"model.eval()"),SNt.forEach(t),pFr=r(fOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zTe=n(fOe,"CODE",{});var RNt=s(zTe);uFr=r(RNt,"model.train()"),RNt.forEach(t),fOe.forEach(t),_Fr=i(Ba),T(B8.$$.fragment,Ba),Ba.forEach(t),ql.forEach(t),BHe=i(f),mc=n(f,"H2",{class:!0});var WYe=s(mc);I8=n(WYe,"A",{id:!0,class:!0,href:!0});var PNt=s(I8);QTe=n(PNt,"SPAN",{});var BNt=s(QTe);T(Qx.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),bFr=i(WYe),WTe=n(WYe,"SPAN",{});var INt=s(WTe);vFr=r(INt,"AutoModelForSpeechSeq2Seq"),INt.forEach(t),WYe.forEach(t),IHe=i(f),Zo=n(f,"DIV",{class:!0});var jl=s(Zo);T(Wx.$$.fragment,jl),FFr=i(jl),gc=n(jl,"P",{});var rse=s(gc);TFr=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZJ=n(rse,"A",{href:!0});var NNt=s(ZJ);MFr=r(NNt,"from_pretrained()"),NNt.forEach(t),EFr=r(rse," class method or the "),eY=n(rse,"A",{href:!0});var qNt=s(eY);CFr=r(qNt,"from_config()"),qNt.forEach(t),wFr=r(rse,` class
method.`),rse.forEach(t),AFr=i(jl),Ux=n(jl,"P",{});var UYe=s(Ux);yFr=r(UYe,"This class cannot be instantiated directly using "),UTe=n(UYe,"CODE",{});var jNt=s(UTe);LFr=r(jNt,"__init__()"),jNt.forEach(t),xFr=r(UYe," (throws an error)."),UYe.forEach(t),$Fr=i(jl),Pt=n(jl,"DIV",{class:!0});var hy=s(Pt);T(Hx.$$.fragment,hy),kFr=i(hy),HTe=n(hy,"P",{});var DNt=s(HTe);SFr=r(DNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),DNt.forEach(t),RFr=i(hy),hc=n(hy,"P",{});var tse=s(hc);PFr=r(tse,`Note:
Loading a model from its configuration file does `),JTe=n(tse,"STRONG",{});var GNt=s(JTe);BFr=r(GNt,"not"),GNt.forEach(t),IFr=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(tse,"A",{href:!0});var ONt=s(oY);NFr=r(ONt,"from_pretrained()"),ONt.forEach(t),qFr=r(tse," to load the model weights."),tse.forEach(t),jFr=i(hy),T(N8.$$.fragment,hy),hy.forEach(t),DFr=i(jl),_o=n(jl,"DIV",{class:!0});var Ia=s(_o);T(Jx.$$.fragment,Ia),GFr=i(Ia),YTe=n(Ia,"P",{});var VNt=s(YTe);OFr=r(VNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VNt.forEach(t),VFr=i(Ia),gn=n(Ia,"P",{});var py=s(gn);XFr=r(py,"The model class to instantiate is selected based on the "),KTe=n(py,"CODE",{});var XNt=s(KTe);zFr=r(XNt,"model_type"),XNt.forEach(t),QFr=r(py,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(py,"CODE",{});var zNt=s(ZTe);WFr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),UFr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(py,"CODE",{});var QNt=s(e8e);HFr=r(QNt,"pretrained_model_name_or_path"),QNt.forEach(t),JFr=r(py,":"),py.forEach(t),YFr=i(Ia),Yx=n(Ia,"UL",{});var HYe=s(Yx);q8=n(HYe,"LI",{});var mOe=s(q8);o8e=n(mOe,"STRONG",{});var WNt=s(o8e);KFr=r(WNt,"speech-encoder-decoder"),WNt.forEach(t),ZFr=r(mOe," \u2014 "),rY=n(mOe,"A",{href:!0});var UNt=s(rY);e7r=r(UNt,"SpeechEncoderDecoderModel"),UNt.forEach(t),o7r=r(mOe," (Speech Encoder decoder model)"),mOe.forEach(t),r7r=i(HYe),j8=n(HYe,"LI",{});var gOe=s(j8);r8e=n(gOe,"STRONG",{});var HNt=s(r8e);t7r=r(HNt,"speech_to_text"),HNt.forEach(t),a7r=r(gOe," \u2014 "),tY=n(gOe,"A",{href:!0});var JNt=s(tY);n7r=r(JNt,"Speech2TextForConditionalGeneration"),JNt.forEach(t),s7r=r(gOe," (Speech2Text model)"),gOe.forEach(t),HYe.forEach(t),l7r=i(Ia),D8=n(Ia,"P",{});var hOe=s(D8);i7r=r(hOe,"The model is set in evaluation mode by default using "),t8e=n(hOe,"CODE",{});var YNt=s(t8e);d7r=r(YNt,"model.eval()"),YNt.forEach(t),c7r=r(hOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a8e=n(hOe,"CODE",{});var KNt=s(a8e);f7r=r(KNt,"model.train()"),KNt.forEach(t),hOe.forEach(t),m7r=i(Ia),T(G8.$$.fragment,Ia),Ia.forEach(t),jl.forEach(t),NHe=i(f),pc=n(f,"H2",{class:!0});var JYe=s(pc);O8=n(JYe,"A",{id:!0,class:!0,href:!0});var ZNt=s(O8);n8e=n(ZNt,"SPAN",{});var eqt=s(n8e);T(Kx.$$.fragment,eqt),eqt.forEach(t),ZNt.forEach(t),g7r=i(JYe),s8e=n(JYe,"SPAN",{});var oqt=s(s8e);h7r=r(oqt,"AutoModelForAudioXVector"),oqt.forEach(t),JYe.forEach(t),qHe=i(f),er=n(f,"DIV",{class:!0});var Dl=s(er);T(Zx.$$.fragment,Dl),p7r=i(Dl),uc=n(Dl,"P",{});var ase=s(uc);u7r=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aY=n(ase,"A",{href:!0});var rqt=s(aY);_7r=r(rqt,"from_pretrained()"),rqt.forEach(t),b7r=r(ase," class method or the "),nY=n(ase,"A",{href:!0});var tqt=s(nY);v7r=r(tqt,"from_config()"),tqt.forEach(t),F7r=r(ase,` class
method.`),ase.forEach(t),T7r=i(Dl),e$=n(Dl,"P",{});var YYe=s(e$);M7r=r(YYe,"This class cannot be instantiated directly using "),l8e=n(YYe,"CODE",{});var aqt=s(l8e);E7r=r(aqt,"__init__()"),aqt.forEach(t),C7r=r(YYe," (throws an error)."),YYe.forEach(t),w7r=i(Dl),Bt=n(Dl,"DIV",{class:!0});var uy=s(Bt);T(o$.$$.fragment,uy),A7r=i(uy),i8e=n(uy,"P",{});var nqt=s(i8e);y7r=r(nqt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nqt.forEach(t),L7r=i(uy),_c=n(uy,"P",{});var nse=s(_c);x7r=r(nse,`Note:
Loading a model from its configuration file does `),d8e=n(nse,"STRONG",{});var sqt=s(d8e);$7r=r(sqt,"not"),sqt.forEach(t),k7r=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(nse,"A",{href:!0});var lqt=s(sY);S7r=r(lqt,"from_pretrained()"),lqt.forEach(t),R7r=r(nse," to load the model weights."),nse.forEach(t),P7r=i(uy),T(V8.$$.fragment,uy),uy.forEach(t),B7r=i(Dl),bo=n(Dl,"DIV",{class:!0});var Na=s(bo);T(r$.$$.fragment,Na),I7r=i(Na),c8e=n(Na,"P",{});var iqt=s(c8e);N7r=r(iqt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),iqt.forEach(t),q7r=i(Na),hn=n(Na,"P",{});var _y=s(hn);j7r=r(_y,"The model class to instantiate is selected based on the "),f8e=n(_y,"CODE",{});var dqt=s(f8e);D7r=r(dqt,"model_type"),dqt.forEach(t),G7r=r(_y,` property of the config object (either
passed as an argument or loaded from `),m8e=n(_y,"CODE",{});var cqt=s(m8e);O7r=r(cqt,"pretrained_model_name_or_path"),cqt.forEach(t),V7r=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g8e=n(_y,"CODE",{});var fqt=s(g8e);X7r=r(fqt,"pretrained_model_name_or_path"),fqt.forEach(t),z7r=r(_y,":"),_y.forEach(t),Q7r=i(Na),dt=n(Na,"UL",{});var Gl=s(dt);X8=n(Gl,"LI",{});var pOe=s(X8);h8e=n(pOe,"STRONG",{});var mqt=s(h8e);W7r=r(mqt,"data2vec-audio"),mqt.forEach(t),U7r=r(pOe," \u2014 "),lY=n(pOe,"A",{href:!0});var gqt=s(lY);H7r=r(gqt,"Data2VecAudioForXVector"),gqt.forEach(t),J7r=r(pOe," (Data2VecAudio model)"),pOe.forEach(t),Y7r=i(Gl),z8=n(Gl,"LI",{});var uOe=s(z8);p8e=n(uOe,"STRONG",{});var hqt=s(p8e);K7r=r(hqt,"unispeech-sat"),hqt.forEach(t),Z7r=r(uOe," \u2014 "),iY=n(uOe,"A",{href:!0});var pqt=s(iY);eTr=r(pqt,"UniSpeechSatForXVector"),pqt.forEach(t),oTr=r(uOe," (UniSpeechSat model)"),uOe.forEach(t),rTr=i(Gl),Q8=n(Gl,"LI",{});var _Oe=s(Q8);u8e=n(_Oe,"STRONG",{});var uqt=s(u8e);tTr=r(uqt,"wav2vec2"),uqt.forEach(t),aTr=r(_Oe," \u2014 "),dY=n(_Oe,"A",{href:!0});var _qt=s(dY);nTr=r(_qt,"Wav2Vec2ForXVector"),_qt.forEach(t),sTr=r(_Oe," (Wav2Vec2 model)"),_Oe.forEach(t),lTr=i(Gl),W8=n(Gl,"LI",{});var bOe=s(W8);_8e=n(bOe,"STRONG",{});var bqt=s(_8e);iTr=r(bqt,"wav2vec2-conformer"),bqt.forEach(t),dTr=r(bOe," \u2014 "),cY=n(bOe,"A",{href:!0});var vqt=s(cY);cTr=r(vqt,"Wav2Vec2ConformerForXVector"),vqt.forEach(t),fTr=r(bOe," (Wav2Vec2-Conformer model)"),bOe.forEach(t),mTr=i(Gl),U8=n(Gl,"LI",{});var vOe=s(U8);b8e=n(vOe,"STRONG",{});var Fqt=s(b8e);gTr=r(Fqt,"wavlm"),Fqt.forEach(t),hTr=r(vOe," \u2014 "),fY=n(vOe,"A",{href:!0});var Tqt=s(fY);pTr=r(Tqt,"WavLMForXVector"),Tqt.forEach(t),uTr=r(vOe," (WavLM model)"),vOe.forEach(t),Gl.forEach(t),_Tr=i(Na),H8=n(Na,"P",{});var FOe=s(H8);bTr=r(FOe,"The model is set in evaluation mode by default using "),v8e=n(FOe,"CODE",{});var Mqt=s(v8e);vTr=r(Mqt,"model.eval()"),Mqt.forEach(t),FTr=r(FOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F8e=n(FOe,"CODE",{});var Eqt=s(F8e);TTr=r(Eqt,"model.train()"),Eqt.forEach(t),FOe.forEach(t),MTr=i(Na),T(J8.$$.fragment,Na),Na.forEach(t),Dl.forEach(t),jHe=i(f),bc=n(f,"H2",{class:!0});var KYe=s(bc);Y8=n(KYe,"A",{id:!0,class:!0,href:!0});var Cqt=s(Y8);T8e=n(Cqt,"SPAN",{});var wqt=s(T8e);T(t$.$$.fragment,wqt),wqt.forEach(t),Cqt.forEach(t),ETr=i(KYe),M8e=n(KYe,"SPAN",{});var Aqt=s(M8e);CTr=r(Aqt,"AutoModelForMaskedImageModeling"),Aqt.forEach(t),KYe.forEach(t),DHe=i(f),or=n(f,"DIV",{class:!0});var Ol=s(or);T(a$.$$.fragment,Ol),wTr=i(Ol),vc=n(Ol,"P",{});var sse=s(vc);ATr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mY=n(sse,"A",{href:!0});var yqt=s(mY);yTr=r(yqt,"from_pretrained()"),yqt.forEach(t),LTr=r(sse," class method or the "),gY=n(sse,"A",{href:!0});var Lqt=s(gY);xTr=r(Lqt,"from_config()"),Lqt.forEach(t),$Tr=r(sse,` class
method.`),sse.forEach(t),kTr=i(Ol),n$=n(Ol,"P",{});var ZYe=s(n$);STr=r(ZYe,"This class cannot be instantiated directly using "),E8e=n(ZYe,"CODE",{});var xqt=s(E8e);RTr=r(xqt,"__init__()"),xqt.forEach(t),PTr=r(ZYe," (throws an error)."),ZYe.forEach(t),BTr=i(Ol),It=n(Ol,"DIV",{class:!0});var by=s(It);T(s$.$$.fragment,by),ITr=i(by),C8e=n(by,"P",{});var $qt=s(C8e);NTr=r($qt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$qt.forEach(t),qTr=i(by),Fc=n(by,"P",{});var lse=s(Fc);jTr=r(lse,`Note:
Loading a model from its configuration file does `),w8e=n(lse,"STRONG",{});var kqt=s(w8e);DTr=r(kqt,"not"),kqt.forEach(t),GTr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(lse,"A",{href:!0});var Sqt=s(hY);OTr=r(Sqt,"from_pretrained()"),Sqt.forEach(t),VTr=r(lse," to load the model weights."),lse.forEach(t),XTr=i(by),T(K8.$$.fragment,by),by.forEach(t),zTr=i(Ol),vo=n(Ol,"DIV",{class:!0});var qa=s(vo);T(l$.$$.fragment,qa),QTr=i(qa),A8e=n(qa,"P",{});var Rqt=s(A8e);WTr=r(Rqt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rqt.forEach(t),UTr=i(qa),pn=n(qa,"P",{});var vy=s(pn);HTr=r(vy,"The model class to instantiate is selected based on the "),y8e=n(vy,"CODE",{});var Pqt=s(y8e);JTr=r(Pqt,"model_type"),Pqt.forEach(t),YTr=r(vy,` property of the config object (either
passed as an argument or loaded from `),L8e=n(vy,"CODE",{});var Bqt=s(L8e);KTr=r(Bqt,"pretrained_model_name_or_path"),Bqt.forEach(t),ZTr=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=n(vy,"CODE",{});var Iqt=s(x8e);e8r=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),o8r=r(vy,":"),vy.forEach(t),r8r=i(qa),un=n(qa,"UL",{});var Fy=s(un);Z8=n(Fy,"LI",{});var TOe=s(Z8);$8e=n(TOe,"STRONG",{});var Nqt=s($8e);t8r=r(Nqt,"deit"),Nqt.forEach(t),a8r=r(TOe," \u2014 "),pY=n(TOe,"A",{href:!0});var qqt=s(pY);n8r=r(qqt,"DeiTForMaskedImageModeling"),qqt.forEach(t),s8r=r(TOe," (DeiT model)"),TOe.forEach(t),l8r=i(Fy),eM=n(Fy,"LI",{});var MOe=s(eM);k8e=n(MOe,"STRONG",{});var jqt=s(k8e);i8r=r(jqt,"swin"),jqt.forEach(t),d8r=r(MOe," \u2014 "),uY=n(MOe,"A",{href:!0});var Dqt=s(uY);c8r=r(Dqt,"SwinForMaskedImageModeling"),Dqt.forEach(t),f8r=r(MOe," (Swin Transformer model)"),MOe.forEach(t),m8r=i(Fy),oM=n(Fy,"LI",{});var EOe=s(oM);S8e=n(EOe,"STRONG",{});var Gqt=s(S8e);g8r=r(Gqt,"swinv2"),Gqt.forEach(t),h8r=r(EOe," \u2014 "),_Y=n(EOe,"A",{href:!0});var Oqt=s(_Y);p8r=r(Oqt,"Swinv2ForMaskedImageModeling"),Oqt.forEach(t),u8r=r(EOe," (Swin Transformer V2 model)"),EOe.forEach(t),_8r=i(Fy),rM=n(Fy,"LI",{});var COe=s(rM);R8e=n(COe,"STRONG",{});var Vqt=s(R8e);b8r=r(Vqt,"vit"),Vqt.forEach(t),v8r=r(COe," \u2014 "),bY=n(COe,"A",{href:!0});var Xqt=s(bY);F8r=r(Xqt,"ViTForMaskedImageModeling"),Xqt.forEach(t),T8r=r(COe," (ViT model)"),COe.forEach(t),Fy.forEach(t),M8r=i(qa),tM=n(qa,"P",{});var wOe=s(tM);E8r=r(wOe,"The model is set in evaluation mode by default using "),P8e=n(wOe,"CODE",{});var zqt=s(P8e);C8r=r(zqt,"model.eval()"),zqt.forEach(t),w8r=r(wOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B8e=n(wOe,"CODE",{});var Qqt=s(B8e);A8r=r(Qqt,"model.train()"),Qqt.forEach(t),wOe.forEach(t),y8r=i(qa),T(aM.$$.fragment,qa),qa.forEach(t),Ol.forEach(t),GHe=i(f),Tc=n(f,"H2",{class:!0});var eKe=s(Tc);nM=n(eKe,"A",{id:!0,class:!0,href:!0});var Wqt=s(nM);I8e=n(Wqt,"SPAN",{});var Uqt=s(I8e);T(i$.$$.fragment,Uqt),Uqt.forEach(t),Wqt.forEach(t),L8r=i(eKe),N8e=n(eKe,"SPAN",{});var Hqt=s(N8e);x8r=r(Hqt,"AutoModelForObjectDetection"),Hqt.forEach(t),eKe.forEach(t),OHe=i(f),rr=n(f,"DIV",{class:!0});var Vl=s(rr);T(d$.$$.fragment,Vl),$8r=i(Vl),Mc=n(Vl,"P",{});var ise=s(Mc);k8r=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),vY=n(ise,"A",{href:!0});var Jqt=s(vY);S8r=r(Jqt,"from_pretrained()"),Jqt.forEach(t),R8r=r(ise," class method or the "),FY=n(ise,"A",{href:!0});var Yqt=s(FY);P8r=r(Yqt,"from_config()"),Yqt.forEach(t),B8r=r(ise,` class
method.`),ise.forEach(t),I8r=i(Vl),c$=n(Vl,"P",{});var oKe=s(c$);N8r=r(oKe,"This class cannot be instantiated directly using "),q8e=n(oKe,"CODE",{});var Kqt=s(q8e);q8r=r(Kqt,"__init__()"),Kqt.forEach(t),j8r=r(oKe," (throws an error)."),oKe.forEach(t),D8r=i(Vl),Nt=n(Vl,"DIV",{class:!0});var Ty=s(Nt);T(f$.$$.fragment,Ty),G8r=i(Ty),j8e=n(Ty,"P",{});var Zqt=s(j8e);O8r=r(Zqt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zqt.forEach(t),V8r=i(Ty),Ec=n(Ty,"P",{});var dse=s(Ec);X8r=r(dse,`Note:
Loading a model from its configuration file does `),D8e=n(dse,"STRONG",{});var ejt=s(D8e);z8r=r(ejt,"not"),ejt.forEach(t),Q8r=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(dse,"A",{href:!0});var ojt=s(TY);W8r=r(ojt,"from_pretrained()"),ojt.forEach(t),U8r=r(dse," to load the model weights."),dse.forEach(t),H8r=i(Ty),T(sM.$$.fragment,Ty),Ty.forEach(t),J8r=i(Vl),Fo=n(Vl,"DIV",{class:!0});var ja=s(Fo);T(m$.$$.fragment,ja),Y8r=i(ja),G8e=n(ja,"P",{});var rjt=s(G8e);K8r=r(rjt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),rjt.forEach(t),Z8r=i(ja),_n=n(ja,"P",{});var My=s(_n);eMr=r(My,"The model class to instantiate is selected based on the "),O8e=n(My,"CODE",{});var tjt=s(O8e);oMr=r(tjt,"model_type"),tjt.forEach(t),rMr=r(My,` property of the config object (either
passed as an argument or loaded from `),V8e=n(My,"CODE",{});var ajt=s(V8e);tMr=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),aMr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=n(My,"CODE",{});var njt=s(X8e);nMr=r(njt,"pretrained_model_name_or_path"),njt.forEach(t),sMr=r(My,":"),My.forEach(t),lMr=i(ja),g$=n(ja,"UL",{});var rKe=s(g$);lM=n(rKe,"LI",{});var AOe=s(lM);z8e=n(AOe,"STRONG",{});var sjt=s(z8e);iMr=r(sjt,"detr"),sjt.forEach(t),dMr=r(AOe," \u2014 "),MY=n(AOe,"A",{href:!0});var ljt=s(MY);cMr=r(ljt,"DetrForObjectDetection"),ljt.forEach(t),fMr=r(AOe," (DETR model)"),AOe.forEach(t),mMr=i(rKe),iM=n(rKe,"LI",{});var yOe=s(iM);Q8e=n(yOe,"STRONG",{});var ijt=s(Q8e);gMr=r(ijt,"yolos"),ijt.forEach(t),hMr=r(yOe," \u2014 "),EY=n(yOe,"A",{href:!0});var djt=s(EY);pMr=r(djt,"YolosForObjectDetection"),djt.forEach(t),uMr=r(yOe," (YOLOS model)"),yOe.forEach(t),rKe.forEach(t),_Mr=i(ja),dM=n(ja,"P",{});var LOe=s(dM);bMr=r(LOe,"The model is set in evaluation mode by default using "),W8e=n(LOe,"CODE",{});var cjt=s(W8e);vMr=r(cjt,"model.eval()"),cjt.forEach(t),FMr=r(LOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U8e=n(LOe,"CODE",{});var fjt=s(U8e);TMr=r(fjt,"model.train()"),fjt.forEach(t),LOe.forEach(t),MMr=i(ja),T(cM.$$.fragment,ja),ja.forEach(t),Vl.forEach(t),VHe=i(f),Cc=n(f,"H2",{class:!0});var tKe=s(Cc);fM=n(tKe,"A",{id:!0,class:!0,href:!0});var mjt=s(fM);H8e=n(mjt,"SPAN",{});var gjt=s(H8e);T(h$.$$.fragment,gjt),gjt.forEach(t),mjt.forEach(t),EMr=i(tKe),J8e=n(tKe,"SPAN",{});var hjt=s(J8e);CMr=r(hjt,"AutoModelForImageSegmentation"),hjt.forEach(t),tKe.forEach(t),XHe=i(f),tr=n(f,"DIV",{class:!0});var Xl=s(tr);T(p$.$$.fragment,Xl),wMr=i(Xl),wc=n(Xl,"P",{});var cse=s(wc);AMr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),CY=n(cse,"A",{href:!0});var pjt=s(CY);yMr=r(pjt,"from_pretrained()"),pjt.forEach(t),LMr=r(cse," class method or the "),wY=n(cse,"A",{href:!0});var ujt=s(wY);xMr=r(ujt,"from_config()"),ujt.forEach(t),$Mr=r(cse,` class
method.`),cse.forEach(t),kMr=i(Xl),u$=n(Xl,"P",{});var aKe=s(u$);SMr=r(aKe,"This class cannot be instantiated directly using "),Y8e=n(aKe,"CODE",{});var _jt=s(Y8e);RMr=r(_jt,"__init__()"),_jt.forEach(t),PMr=r(aKe," (throws an error)."),aKe.forEach(t),BMr=i(Xl),qt=n(Xl,"DIV",{class:!0});var Ey=s(qt);T(_$.$$.fragment,Ey),IMr=i(Ey),K8e=n(Ey,"P",{});var bjt=s(K8e);NMr=r(bjt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bjt.forEach(t),qMr=i(Ey),Ac=n(Ey,"P",{});var fse=s(Ac);jMr=r(fse,`Note:
Loading a model from its configuration file does `),Z8e=n(fse,"STRONG",{});var vjt=s(Z8e);DMr=r(vjt,"not"),vjt.forEach(t),GMr=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(fse,"A",{href:!0});var Fjt=s(AY);OMr=r(Fjt,"from_pretrained()"),Fjt.forEach(t),VMr=r(fse," to load the model weights."),fse.forEach(t),XMr=i(Ey),T(mM.$$.fragment,Ey),Ey.forEach(t),zMr=i(Xl),To=n(Xl,"DIV",{class:!0});var Da=s(To);T(b$.$$.fragment,Da),QMr=i(Da),eMe=n(Da,"P",{});var Tjt=s(eMe);WMr=r(Tjt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tjt.forEach(t),UMr=i(Da),bn=n(Da,"P",{});var Cy=s(bn);HMr=r(Cy,"The model class to instantiate is selected based on the "),oMe=n(Cy,"CODE",{});var Mjt=s(oMe);JMr=r(Mjt,"model_type"),Mjt.forEach(t),YMr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),rMe=n(Cy,"CODE",{});var Ejt=s(rMe);KMr=r(Ejt,"pretrained_model_name_or_path"),Ejt.forEach(t),ZMr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(Cy,"CODE",{});var Cjt=s(tMe);eEr=r(Cjt,"pretrained_model_name_or_path"),Cjt.forEach(t),oEr=r(Cy,":"),Cy.forEach(t),rEr=i(Da),aMe=n(Da,"UL",{});var wjt=s(aMe);gM=n(wjt,"LI",{});var xOe=s(gM);nMe=n(xOe,"STRONG",{});var Ajt=s(nMe);tEr=r(Ajt,"detr"),Ajt.forEach(t),aEr=r(xOe," \u2014 "),yY=n(xOe,"A",{href:!0});var yjt=s(yY);nEr=r(yjt,"DetrForSegmentation"),yjt.forEach(t),sEr=r(xOe," (DETR model)"),xOe.forEach(t),wjt.forEach(t),lEr=i(Da),hM=n(Da,"P",{});var $Oe=s(hM);iEr=r($Oe,"The model is set in evaluation mode by default using "),sMe=n($Oe,"CODE",{});var Ljt=s(sMe);dEr=r(Ljt,"model.eval()"),Ljt.forEach(t),cEr=r($Oe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lMe=n($Oe,"CODE",{});var xjt=s(lMe);fEr=r(xjt,"model.train()"),xjt.forEach(t),$Oe.forEach(t),mEr=i(Da),T(pM.$$.fragment,Da),Da.forEach(t),Xl.forEach(t),zHe=i(f),yc=n(f,"H2",{class:!0});var nKe=s(yc);uM=n(nKe,"A",{id:!0,class:!0,href:!0});var $jt=s(uM);iMe=n($jt,"SPAN",{});var kjt=s(iMe);T(v$.$$.fragment,kjt),kjt.forEach(t),$jt.forEach(t),gEr=i(nKe),dMe=n(nKe,"SPAN",{});var Sjt=s(dMe);hEr=r(Sjt,"AutoModelForSemanticSegmentation"),Sjt.forEach(t),nKe.forEach(t),QHe=i(f),ar=n(f,"DIV",{class:!0});var zl=s(ar);T(F$.$$.fragment,zl),pEr=i(zl),Lc=n(zl,"P",{});var mse=s(Lc);uEr=r(mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),LY=n(mse,"A",{href:!0});var Rjt=s(LY);_Er=r(Rjt,"from_pretrained()"),Rjt.forEach(t),bEr=r(mse," class method or the "),xY=n(mse,"A",{href:!0});var Pjt=s(xY);vEr=r(Pjt,"from_config()"),Pjt.forEach(t),FEr=r(mse,` class
method.`),mse.forEach(t),TEr=i(zl),T$=n(zl,"P",{});var sKe=s(T$);MEr=r(sKe,"This class cannot be instantiated directly using "),cMe=n(sKe,"CODE",{});var Bjt=s(cMe);EEr=r(Bjt,"__init__()"),Bjt.forEach(t),CEr=r(sKe," (throws an error)."),sKe.forEach(t),wEr=i(zl),jt=n(zl,"DIV",{class:!0});var wy=s(jt);T(M$.$$.fragment,wy),AEr=i(wy),fMe=n(wy,"P",{});var Ijt=s(fMe);yEr=r(Ijt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ijt.forEach(t),LEr=i(wy),xc=n(wy,"P",{});var gse=s(xc);xEr=r(gse,`Note:
Loading a model from its configuration file does `),mMe=n(gse,"STRONG",{});var Njt=s(mMe);$Er=r(Njt,"not"),Njt.forEach(t),kEr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(gse,"A",{href:!0});var qjt=s($Y);SEr=r(qjt,"from_pretrained()"),qjt.forEach(t),REr=r(gse," to load the model weights."),gse.forEach(t),PEr=i(wy),T(_M.$$.fragment,wy),wy.forEach(t),BEr=i(zl),Mo=n(zl,"DIV",{class:!0});var Ga=s(Mo);T(E$.$$.fragment,Ga),IEr=i(Ga),gMe=n(Ga,"P",{});var jjt=s(gMe);NEr=r(jjt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jjt.forEach(t),qEr=i(Ga),vn=n(Ga,"P",{});var Ay=s(vn);jEr=r(Ay,"The model class to instantiate is selected based on the "),hMe=n(Ay,"CODE",{});var Djt=s(hMe);DEr=r(Djt,"model_type"),Djt.forEach(t),GEr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),pMe=n(Ay,"CODE",{});var Gjt=s(pMe);OEr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),VEr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(Ay,"CODE",{});var Ojt=s(uMe);XEr=r(Ojt,"pretrained_model_name_or_path"),Ojt.forEach(t),zEr=r(Ay,":"),Ay.forEach(t),QEr=i(Ga),ct=n(Ga,"UL",{});var Ql=s(ct);bM=n(Ql,"LI",{});var kOe=s(bM);_Me=n(kOe,"STRONG",{});var Vjt=s(_Me);WEr=r(Vjt,"beit"),Vjt.forEach(t),UEr=r(kOe," \u2014 "),kY=n(kOe,"A",{href:!0});var Xjt=s(kY);HEr=r(Xjt,"BeitForSemanticSegmentation"),Xjt.forEach(t),JEr=r(kOe," (BEiT model)"),kOe.forEach(t),YEr=i(Ql),vM=n(Ql,"LI",{});var SOe=s(vM);bMe=n(SOe,"STRONG",{});var zjt=s(bMe);KEr=r(zjt,"data2vec-vision"),zjt.forEach(t),ZEr=r(SOe," \u2014 "),SY=n(SOe,"A",{href:!0});var Qjt=s(SY);e4r=r(Qjt,"Data2VecVisionForSemanticSegmentation"),Qjt.forEach(t),o4r=r(SOe," (Data2VecVision model)"),SOe.forEach(t),r4r=i(Ql),FM=n(Ql,"LI",{});var ROe=s(FM);vMe=n(ROe,"STRONG",{});var Wjt=s(vMe);t4r=r(Wjt,"dpt"),Wjt.forEach(t),a4r=r(ROe," \u2014 "),RY=n(ROe,"A",{href:!0});var Ujt=s(RY);n4r=r(Ujt,"DPTForSemanticSegmentation"),Ujt.forEach(t),s4r=r(ROe," (DPT model)"),ROe.forEach(t),l4r=i(Ql),TM=n(Ql,"LI",{});var POe=s(TM);FMe=n(POe,"STRONG",{});var Hjt=s(FMe);i4r=r(Hjt,"mobilevit"),Hjt.forEach(t),d4r=r(POe," \u2014 "),PY=n(POe,"A",{href:!0});var Jjt=s(PY);c4r=r(Jjt,"MobileViTForSemanticSegmentation"),Jjt.forEach(t),f4r=r(POe," (MobileViT model)"),POe.forEach(t),m4r=i(Ql),MM=n(Ql,"LI",{});var BOe=s(MM);TMe=n(BOe,"STRONG",{});var Yjt=s(TMe);g4r=r(Yjt,"segformer"),Yjt.forEach(t),h4r=r(BOe," \u2014 "),BY=n(BOe,"A",{href:!0});var Kjt=s(BY);p4r=r(Kjt,"SegformerForSemanticSegmentation"),Kjt.forEach(t),u4r=r(BOe," (SegFormer model)"),BOe.forEach(t),Ql.forEach(t),_4r=i(Ga),EM=n(Ga,"P",{});var IOe=s(EM);b4r=r(IOe,"The model is set in evaluation mode by default using "),MMe=n(IOe,"CODE",{});var Zjt=s(MMe);v4r=r(Zjt,"model.eval()"),Zjt.forEach(t),F4r=r(IOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EMe=n(IOe,"CODE",{});var eDt=s(EMe);T4r=r(eDt,"model.train()"),eDt.forEach(t),IOe.forEach(t),M4r=i(Ga),T(CM.$$.fragment,Ga),Ga.forEach(t),zl.forEach(t),WHe=i(f),$c=n(f,"H2",{class:!0});var lKe=s($c);wM=n(lKe,"A",{id:!0,class:!0,href:!0});var oDt=s(wM);CMe=n(oDt,"SPAN",{});var rDt=s(CMe);T(C$.$$.fragment,rDt),rDt.forEach(t),oDt.forEach(t),E4r=i(lKe),wMe=n(lKe,"SPAN",{});var tDt=s(wMe);C4r=r(tDt,"AutoModelForInstanceSegmentation"),tDt.forEach(t),lKe.forEach(t),UHe=i(f),nr=n(f,"DIV",{class:!0});var Wl=s(nr);T(w$.$$.fragment,Wl),w4r=i(Wl),kc=n(Wl,"P",{});var hse=s(kc);A4r=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),IY=n(hse,"A",{href:!0});var aDt=s(IY);y4r=r(aDt,"from_pretrained()"),aDt.forEach(t),L4r=r(hse," class method or the "),NY=n(hse,"A",{href:!0});var nDt=s(NY);x4r=r(nDt,"from_config()"),nDt.forEach(t),$4r=r(hse,` class
method.`),hse.forEach(t),k4r=i(Wl),A$=n(Wl,"P",{});var iKe=s(A$);S4r=r(iKe,"This class cannot be instantiated directly using "),AMe=n(iKe,"CODE",{});var sDt=s(AMe);R4r=r(sDt,"__init__()"),sDt.forEach(t),P4r=r(iKe," (throws an error)."),iKe.forEach(t),B4r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var yy=s(Dt);T(y$.$$.fragment,yy),I4r=i(yy),yMe=n(yy,"P",{});var lDt=s(yMe);N4r=r(lDt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lDt.forEach(t),q4r=i(yy),Sc=n(yy,"P",{});var pse=s(Sc);j4r=r(pse,`Note:
Loading a model from its configuration file does `),LMe=n(pse,"STRONG",{});var iDt=s(LMe);D4r=r(iDt,"not"),iDt.forEach(t),G4r=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(pse,"A",{href:!0});var dDt=s(qY);O4r=r(dDt,"from_pretrained()"),dDt.forEach(t),V4r=r(pse," to load the model weights."),pse.forEach(t),X4r=i(yy),T(AM.$$.fragment,yy),yy.forEach(t),z4r=i(Wl),Eo=n(Wl,"DIV",{class:!0});var Oa=s(Eo);T(L$.$$.fragment,Oa),Q4r=i(Oa),xMe=n(Oa,"P",{});var cDt=s(xMe);W4r=r(cDt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cDt.forEach(t),U4r=i(Oa),Fn=n(Oa,"P",{});var Ly=s(Fn);H4r=r(Ly,"The model class to instantiate is selected based on the "),$Me=n(Ly,"CODE",{});var fDt=s($Me);J4r=r(fDt,"model_type"),fDt.forEach(t),Y4r=r(Ly,` property of the config object (either
passed as an argument or loaded from `),kMe=n(Ly,"CODE",{});var mDt=s(kMe);K4r=r(mDt,"pretrained_model_name_or_path"),mDt.forEach(t),Z4r=r(Ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(Ly,"CODE",{});var gDt=s(SMe);eCr=r(gDt,"pretrained_model_name_or_path"),gDt.forEach(t),oCr=r(Ly,":"),Ly.forEach(t),rCr=i(Oa),RMe=n(Oa,"UL",{});var hDt=s(RMe);yM=n(hDt,"LI",{});var NOe=s(yM);PMe=n(NOe,"STRONG",{});var pDt=s(PMe);tCr=r(pDt,"maskformer"),pDt.forEach(t),aCr=r(NOe," \u2014 "),jY=n(NOe,"A",{href:!0});var uDt=s(jY);nCr=r(uDt,"MaskFormerForInstanceSegmentation"),uDt.forEach(t),sCr=r(NOe," (MaskFormer model)"),NOe.forEach(t),hDt.forEach(t),lCr=i(Oa),LM=n(Oa,"P",{});var qOe=s(LM);iCr=r(qOe,"The model is set in evaluation mode by default using "),BMe=n(qOe,"CODE",{});var _Dt=s(BMe);dCr=r(_Dt,"model.eval()"),_Dt.forEach(t),cCr=r(qOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IMe=n(qOe,"CODE",{});var bDt=s(IMe);fCr=r(bDt,"model.train()"),bDt.forEach(t),qOe.forEach(t),mCr=i(Oa),T(xM.$$.fragment,Oa),Oa.forEach(t),Wl.forEach(t),HHe=i(f),Rc=n(f,"H2",{class:!0});var dKe=s(Rc);$M=n(dKe,"A",{id:!0,class:!0,href:!0});var vDt=s($M);NMe=n(vDt,"SPAN",{});var FDt=s(NMe);T(x$.$$.fragment,FDt),FDt.forEach(t),vDt.forEach(t),gCr=i(dKe),qMe=n(dKe,"SPAN",{});var TDt=s(qMe);hCr=r(TDt,"TFAutoModel"),TDt.forEach(t),dKe.forEach(t),JHe=i(f),sr=n(f,"DIV",{class:!0});var Ul=s(sr);T($$.$$.fragment,Ul),pCr=i(Ul),Pc=n(Ul,"P",{});var use=s(Pc);uCr=r(use,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DY=n(use,"A",{href:!0});var MDt=s(DY);_Cr=r(MDt,"from_pretrained()"),MDt.forEach(t),bCr=r(use," class method or the "),GY=n(use,"A",{href:!0});var EDt=s(GY);vCr=r(EDt,"from_config()"),EDt.forEach(t),FCr=r(use,` class
method.`),use.forEach(t),TCr=i(Ul),k$=n(Ul,"P",{});var cKe=s(k$);MCr=r(cKe,"This class cannot be instantiated directly using "),jMe=n(cKe,"CODE",{});var CDt=s(jMe);ECr=r(CDt,"__init__()"),CDt.forEach(t),CCr=r(cKe," (throws an error)."),cKe.forEach(t),wCr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var xy=s(Gt);T(S$.$$.fragment,xy),ACr=i(xy),DMe=n(xy,"P",{});var wDt=s(DMe);yCr=r(wDt,"Instantiates one of the base model classes of the library from a configuration."),wDt.forEach(t),LCr=i(xy),Bc=n(xy,"P",{});var _se=s(Bc);xCr=r(_se,`Note:
Loading a model from its configuration file does `),GMe=n(_se,"STRONG",{});var ADt=s(GMe);$Cr=r(ADt,"not"),ADt.forEach(t),kCr=r(_se,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(_se,"A",{href:!0});var yDt=s(OY);SCr=r(yDt,"from_pretrained()"),yDt.forEach(t),RCr=r(_se," to load the model weights."),_se.forEach(t),PCr=i(xy),T(kM.$$.fragment,xy),xy.forEach(t),BCr=i(Ul),Br=n(Ul,"DIV",{class:!0});var Hl=s(Br);T(R$.$$.fragment,Hl),ICr=i(Hl),OMe=n(Hl,"P",{});var LDt=s(OMe);NCr=r(LDt,"Instantiate one of the base model classes of the library from a pretrained model."),LDt.forEach(t),qCr=i(Hl),Tn=n(Hl,"P",{});var $y=s(Tn);jCr=r($y,"The model class to instantiate is selected based on the "),VMe=n($y,"CODE",{});var xDt=s(VMe);DCr=r(xDt,"model_type"),xDt.forEach(t),GCr=r($y,` property of the config object (either
passed as an argument or loaded from `),XMe=n($y,"CODE",{});var $Dt=s(XMe);OCr=r($Dt,"pretrained_model_name_or_path"),$Dt.forEach(t),VCr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zMe=n($y,"CODE",{});var kDt=s(zMe);XCr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),zCr=r($y,":"),$y.forEach(t),QCr=i(Hl),q=n(Hl,"UL",{});var D=s(q);SM=n(D,"LI",{});var jOe=s(SM);QMe=n(jOe,"STRONG",{});var SDt=s(QMe);WCr=r(SDt,"albert"),SDt.forEach(t),UCr=r(jOe," \u2014 "),VY=n(jOe,"A",{href:!0});var RDt=s(VY);HCr=r(RDt,"TFAlbertModel"),RDt.forEach(t),JCr=r(jOe," (ALBERT model)"),jOe.forEach(t),YCr=i(D),RM=n(D,"LI",{});var DOe=s(RM);WMe=n(DOe,"STRONG",{});var PDt=s(WMe);KCr=r(PDt,"bart"),PDt.forEach(t),ZCr=r(DOe," \u2014 "),XY=n(DOe,"A",{href:!0});var BDt=s(XY);e5r=r(BDt,"TFBartModel"),BDt.forEach(t),o5r=r(DOe," (BART model)"),DOe.forEach(t),r5r=i(D),PM=n(D,"LI",{});var GOe=s(PM);UMe=n(GOe,"STRONG",{});var IDt=s(UMe);t5r=r(IDt,"bert"),IDt.forEach(t),a5r=r(GOe," \u2014 "),zY=n(GOe,"A",{href:!0});var NDt=s(zY);n5r=r(NDt,"TFBertModel"),NDt.forEach(t),s5r=r(GOe," (BERT model)"),GOe.forEach(t),l5r=i(D),BM=n(D,"LI",{});var OOe=s(BM);HMe=n(OOe,"STRONG",{});var qDt=s(HMe);i5r=r(qDt,"blenderbot"),qDt.forEach(t),d5r=r(OOe," \u2014 "),QY=n(OOe,"A",{href:!0});var jDt=s(QY);c5r=r(jDt,"TFBlenderbotModel"),jDt.forEach(t),f5r=r(OOe," (Blenderbot model)"),OOe.forEach(t),m5r=i(D),IM=n(D,"LI",{});var VOe=s(IM);JMe=n(VOe,"STRONG",{});var DDt=s(JMe);g5r=r(DDt,"blenderbot-small"),DDt.forEach(t),h5r=r(VOe," \u2014 "),WY=n(VOe,"A",{href:!0});var GDt=s(WY);p5r=r(GDt,"TFBlenderbotSmallModel"),GDt.forEach(t),u5r=r(VOe," (BlenderbotSmall model)"),VOe.forEach(t),_5r=i(D),NM=n(D,"LI",{});var XOe=s(NM);YMe=n(XOe,"STRONG",{});var ODt=s(YMe);b5r=r(ODt,"camembert"),ODt.forEach(t),v5r=r(XOe," \u2014 "),UY=n(XOe,"A",{href:!0});var VDt=s(UY);F5r=r(VDt,"TFCamembertModel"),VDt.forEach(t),T5r=r(XOe," (CamemBERT model)"),XOe.forEach(t),M5r=i(D),qM=n(D,"LI",{});var zOe=s(qM);KMe=n(zOe,"STRONG",{});var XDt=s(KMe);E5r=r(XDt,"clip"),XDt.forEach(t),C5r=r(zOe," \u2014 "),HY=n(zOe,"A",{href:!0});var zDt=s(HY);w5r=r(zDt,"TFCLIPModel"),zDt.forEach(t),A5r=r(zOe," (CLIP model)"),zOe.forEach(t),y5r=i(D),jM=n(D,"LI",{});var QOe=s(jM);ZMe=n(QOe,"STRONG",{});var QDt=s(ZMe);L5r=r(QDt,"convbert"),QDt.forEach(t),x5r=r(QOe," \u2014 "),JY=n(QOe,"A",{href:!0});var WDt=s(JY);$5r=r(WDt,"TFConvBertModel"),WDt.forEach(t),k5r=r(QOe," (ConvBERT model)"),QOe.forEach(t),S5r=i(D),DM=n(D,"LI",{});var WOe=s(DM);eEe=n(WOe,"STRONG",{});var UDt=s(eEe);R5r=r(UDt,"convnext"),UDt.forEach(t),P5r=r(WOe," \u2014 "),YY=n(WOe,"A",{href:!0});var HDt=s(YY);B5r=r(HDt,"TFConvNextModel"),HDt.forEach(t),I5r=r(WOe," (ConvNeXT model)"),WOe.forEach(t),N5r=i(D),GM=n(D,"LI",{});var UOe=s(GM);oEe=n(UOe,"STRONG",{});var JDt=s(oEe);q5r=r(JDt,"ctrl"),JDt.forEach(t),j5r=r(UOe," \u2014 "),KY=n(UOe,"A",{href:!0});var YDt=s(KY);D5r=r(YDt,"TFCTRLModel"),YDt.forEach(t),G5r=r(UOe," (CTRL model)"),UOe.forEach(t),O5r=i(D),OM=n(D,"LI",{});var HOe=s(OM);rEe=n(HOe,"STRONG",{});var KDt=s(rEe);V5r=r(KDt,"data2vec-vision"),KDt.forEach(t),X5r=r(HOe," \u2014 "),ZY=n(HOe,"A",{href:!0});var ZDt=s(ZY);z5r=r(ZDt,"TFData2VecVisionModel"),ZDt.forEach(t),Q5r=r(HOe," (Data2VecVision model)"),HOe.forEach(t),W5r=i(D),VM=n(D,"LI",{});var JOe=s(VM);tEe=n(JOe,"STRONG",{});var eGt=s(tEe);U5r=r(eGt,"deberta"),eGt.forEach(t),H5r=r(JOe," \u2014 "),eK=n(JOe,"A",{href:!0});var oGt=s(eK);J5r=r(oGt,"TFDebertaModel"),oGt.forEach(t),Y5r=r(JOe," (DeBERTa model)"),JOe.forEach(t),K5r=i(D),XM=n(D,"LI",{});var YOe=s(XM);aEe=n(YOe,"STRONG",{});var rGt=s(aEe);Z5r=r(rGt,"deberta-v2"),rGt.forEach(t),e0r=r(YOe," \u2014 "),oK=n(YOe,"A",{href:!0});var tGt=s(oK);o0r=r(tGt,"TFDebertaV2Model"),tGt.forEach(t),r0r=r(YOe," (DeBERTa-v2 model)"),YOe.forEach(t),t0r=i(D),zM=n(D,"LI",{});var KOe=s(zM);nEe=n(KOe,"STRONG",{});var aGt=s(nEe);a0r=r(aGt,"deit"),aGt.forEach(t),n0r=r(KOe," \u2014 "),rK=n(KOe,"A",{href:!0});var nGt=s(rK);s0r=r(nGt,"TFDeiTModel"),nGt.forEach(t),l0r=r(KOe," (DeiT model)"),KOe.forEach(t),i0r=i(D),QM=n(D,"LI",{});var ZOe=s(QM);sEe=n(ZOe,"STRONG",{});var sGt=s(sEe);d0r=r(sGt,"distilbert"),sGt.forEach(t),c0r=r(ZOe," \u2014 "),tK=n(ZOe,"A",{href:!0});var lGt=s(tK);f0r=r(lGt,"TFDistilBertModel"),lGt.forEach(t),m0r=r(ZOe," (DistilBERT model)"),ZOe.forEach(t),g0r=i(D),WM=n(D,"LI",{});var eVe=s(WM);lEe=n(eVe,"STRONG",{});var iGt=s(lEe);h0r=r(iGt,"dpr"),iGt.forEach(t),p0r=r(eVe," \u2014 "),aK=n(eVe,"A",{href:!0});var dGt=s(aK);u0r=r(dGt,"TFDPRQuestionEncoder"),dGt.forEach(t),_0r=r(eVe," (DPR model)"),eVe.forEach(t),b0r=i(D),UM=n(D,"LI",{});var oVe=s(UM);iEe=n(oVe,"STRONG",{});var cGt=s(iEe);v0r=r(cGt,"electra"),cGt.forEach(t),F0r=r(oVe," \u2014 "),nK=n(oVe,"A",{href:!0});var fGt=s(nK);T0r=r(fGt,"TFElectraModel"),fGt.forEach(t),M0r=r(oVe," (ELECTRA model)"),oVe.forEach(t),E0r=i(D),HM=n(D,"LI",{});var rVe=s(HM);dEe=n(rVe,"STRONG",{});var mGt=s(dEe);C0r=r(mGt,"flaubert"),mGt.forEach(t),w0r=r(rVe," \u2014 "),sK=n(rVe,"A",{href:!0});var gGt=s(sK);A0r=r(gGt,"TFFlaubertModel"),gGt.forEach(t),y0r=r(rVe," (FlauBERT model)"),rVe.forEach(t),L0r=i(D),gl=n(D,"LI",{});var AP=s(gl);cEe=n(AP,"STRONG",{});var hGt=s(cEe);x0r=r(hGt,"funnel"),hGt.forEach(t),$0r=r(AP," \u2014 "),lK=n(AP,"A",{href:!0});var pGt=s(lK);k0r=r(pGt,"TFFunnelModel"),pGt.forEach(t),S0r=r(AP," or "),iK=n(AP,"A",{href:!0});var uGt=s(iK);R0r=r(uGt,"TFFunnelBaseModel"),uGt.forEach(t),P0r=r(AP," (Funnel Transformer model)"),AP.forEach(t),B0r=i(D),JM=n(D,"LI",{});var tVe=s(JM);fEe=n(tVe,"STRONG",{});var _Gt=s(fEe);I0r=r(_Gt,"gpt2"),_Gt.forEach(t),N0r=r(tVe," \u2014 "),dK=n(tVe,"A",{href:!0});var bGt=s(dK);q0r=r(bGt,"TFGPT2Model"),bGt.forEach(t),j0r=r(tVe," (OpenAI GPT-2 model)"),tVe.forEach(t),D0r=i(D),YM=n(D,"LI",{});var aVe=s(YM);mEe=n(aVe,"STRONG",{});var vGt=s(mEe);G0r=r(vGt,"gptj"),vGt.forEach(t),O0r=r(aVe," \u2014 "),cK=n(aVe,"A",{href:!0});var FGt=s(cK);V0r=r(FGt,"TFGPTJModel"),FGt.forEach(t),X0r=r(aVe," (GPT-J model)"),aVe.forEach(t),z0r=i(D),KM=n(D,"LI",{});var nVe=s(KM);gEe=n(nVe,"STRONG",{});var TGt=s(gEe);Q0r=r(TGt,"hubert"),TGt.forEach(t),W0r=r(nVe," \u2014 "),fK=n(nVe,"A",{href:!0});var MGt=s(fK);U0r=r(MGt,"TFHubertModel"),MGt.forEach(t),H0r=r(nVe," (Hubert model)"),nVe.forEach(t),J0r=i(D),ZM=n(D,"LI",{});var sVe=s(ZM);hEe=n(sVe,"STRONG",{});var EGt=s(hEe);Y0r=r(EGt,"layoutlm"),EGt.forEach(t),K0r=r(sVe," \u2014 "),mK=n(sVe,"A",{href:!0});var CGt=s(mK);Z0r=r(CGt,"TFLayoutLMModel"),CGt.forEach(t),ewr=r(sVe," (LayoutLM model)"),sVe.forEach(t),owr=i(D),eE=n(D,"LI",{});var lVe=s(eE);pEe=n(lVe,"STRONG",{});var wGt=s(pEe);rwr=r(wGt,"led"),wGt.forEach(t),twr=r(lVe," \u2014 "),gK=n(lVe,"A",{href:!0});var AGt=s(gK);awr=r(AGt,"TFLEDModel"),AGt.forEach(t),nwr=r(lVe," (LED model)"),lVe.forEach(t),swr=i(D),oE=n(D,"LI",{});var iVe=s(oE);uEe=n(iVe,"STRONG",{});var yGt=s(uEe);lwr=r(yGt,"longformer"),yGt.forEach(t),iwr=r(iVe," \u2014 "),hK=n(iVe,"A",{href:!0});var LGt=s(hK);dwr=r(LGt,"TFLongformerModel"),LGt.forEach(t),cwr=r(iVe," (Longformer model)"),iVe.forEach(t),fwr=i(D),rE=n(D,"LI",{});var dVe=s(rE);_Ee=n(dVe,"STRONG",{});var xGt=s(_Ee);mwr=r(xGt,"lxmert"),xGt.forEach(t),gwr=r(dVe," \u2014 "),pK=n(dVe,"A",{href:!0});var $Gt=s(pK);hwr=r($Gt,"TFLxmertModel"),$Gt.forEach(t),pwr=r(dVe," (LXMERT model)"),dVe.forEach(t),uwr=i(D),tE=n(D,"LI",{});var cVe=s(tE);bEe=n(cVe,"STRONG",{});var kGt=s(bEe);_wr=r(kGt,"marian"),kGt.forEach(t),bwr=r(cVe," \u2014 "),uK=n(cVe,"A",{href:!0});var SGt=s(uK);vwr=r(SGt,"TFMarianModel"),SGt.forEach(t),Fwr=r(cVe," (Marian model)"),cVe.forEach(t),Twr=i(D),aE=n(D,"LI",{});var fVe=s(aE);vEe=n(fVe,"STRONG",{});var RGt=s(vEe);Mwr=r(RGt,"mbart"),RGt.forEach(t),Ewr=r(fVe," \u2014 "),_K=n(fVe,"A",{href:!0});var PGt=s(_K);Cwr=r(PGt,"TFMBartModel"),PGt.forEach(t),wwr=r(fVe," (mBART model)"),fVe.forEach(t),Awr=i(D),nE=n(D,"LI",{});var mVe=s(nE);FEe=n(mVe,"STRONG",{});var BGt=s(FEe);ywr=r(BGt,"mobilebert"),BGt.forEach(t),Lwr=r(mVe," \u2014 "),bK=n(mVe,"A",{href:!0});var IGt=s(bK);xwr=r(IGt,"TFMobileBertModel"),IGt.forEach(t),$wr=r(mVe," (MobileBERT model)"),mVe.forEach(t),kwr=i(D),sE=n(D,"LI",{});var gVe=s(sE);TEe=n(gVe,"STRONG",{});var NGt=s(TEe);Swr=r(NGt,"mpnet"),NGt.forEach(t),Rwr=r(gVe," \u2014 "),vK=n(gVe,"A",{href:!0});var qGt=s(vK);Pwr=r(qGt,"TFMPNetModel"),qGt.forEach(t),Bwr=r(gVe," (MPNet model)"),gVe.forEach(t),Iwr=i(D),lE=n(D,"LI",{});var hVe=s(lE);MEe=n(hVe,"STRONG",{});var jGt=s(MEe);Nwr=r(jGt,"mt5"),jGt.forEach(t),qwr=r(hVe," \u2014 "),FK=n(hVe,"A",{href:!0});var DGt=s(FK);jwr=r(DGt,"TFMT5Model"),DGt.forEach(t),Dwr=r(hVe," (MT5 model)"),hVe.forEach(t),Gwr=i(D),iE=n(D,"LI",{});var pVe=s(iE);EEe=n(pVe,"STRONG",{});var GGt=s(EEe);Owr=r(GGt,"openai-gpt"),GGt.forEach(t),Vwr=r(pVe," \u2014 "),TK=n(pVe,"A",{href:!0});var OGt=s(TK);Xwr=r(OGt,"TFOpenAIGPTModel"),OGt.forEach(t),zwr=r(pVe," (OpenAI GPT model)"),pVe.forEach(t),Qwr=i(D),dE=n(D,"LI",{});var uVe=s(dE);CEe=n(uVe,"STRONG",{});var VGt=s(CEe);Wwr=r(VGt,"opt"),VGt.forEach(t),Uwr=r(uVe," \u2014 "),MK=n(uVe,"A",{href:!0});var XGt=s(MK);Hwr=r(XGt,"TFOPTModel"),XGt.forEach(t),Jwr=r(uVe," (OPT model)"),uVe.forEach(t),Ywr=i(D),cE=n(D,"LI",{});var _Ve=s(cE);wEe=n(_Ve,"STRONG",{});var zGt=s(wEe);Kwr=r(zGt,"pegasus"),zGt.forEach(t),Zwr=r(_Ve," \u2014 "),EK=n(_Ve,"A",{href:!0});var QGt=s(EK);eAr=r(QGt,"TFPegasusModel"),QGt.forEach(t),oAr=r(_Ve," (Pegasus model)"),_Ve.forEach(t),rAr=i(D),fE=n(D,"LI",{});var bVe=s(fE);AEe=n(bVe,"STRONG",{});var WGt=s(AEe);tAr=r(WGt,"regnet"),WGt.forEach(t),aAr=r(bVe," \u2014 "),CK=n(bVe,"A",{href:!0});var UGt=s(CK);nAr=r(UGt,"TFRegNetModel"),UGt.forEach(t),sAr=r(bVe," (RegNet model)"),bVe.forEach(t),lAr=i(D),mE=n(D,"LI",{});var vVe=s(mE);yEe=n(vVe,"STRONG",{});var HGt=s(yEe);iAr=r(HGt,"rembert"),HGt.forEach(t),dAr=r(vVe," \u2014 "),wK=n(vVe,"A",{href:!0});var JGt=s(wK);cAr=r(JGt,"TFRemBertModel"),JGt.forEach(t),fAr=r(vVe," (RemBERT model)"),vVe.forEach(t),mAr=i(D),gE=n(D,"LI",{});var FVe=s(gE);LEe=n(FVe,"STRONG",{});var YGt=s(LEe);gAr=r(YGt,"resnet"),YGt.forEach(t),hAr=r(FVe," \u2014 "),AK=n(FVe,"A",{href:!0});var KGt=s(AK);pAr=r(KGt,"TFResNetModel"),KGt.forEach(t),uAr=r(FVe," (ResNet model)"),FVe.forEach(t),_Ar=i(D),hE=n(D,"LI",{});var TVe=s(hE);xEe=n(TVe,"STRONG",{});var ZGt=s(xEe);bAr=r(ZGt,"roberta"),ZGt.forEach(t),vAr=r(TVe," \u2014 "),yK=n(TVe,"A",{href:!0});var eOt=s(yK);FAr=r(eOt,"TFRobertaModel"),eOt.forEach(t),TAr=r(TVe," (RoBERTa model)"),TVe.forEach(t),MAr=i(D),pE=n(D,"LI",{});var MVe=s(pE);$Ee=n(MVe,"STRONG",{});var oOt=s($Ee);EAr=r(oOt,"roformer"),oOt.forEach(t),CAr=r(MVe," \u2014 "),LK=n(MVe,"A",{href:!0});var rOt=s(LK);wAr=r(rOt,"TFRoFormerModel"),rOt.forEach(t),AAr=r(MVe," (RoFormer model)"),MVe.forEach(t),yAr=i(D),uE=n(D,"LI",{});var EVe=s(uE);kEe=n(EVe,"STRONG",{});var tOt=s(kEe);LAr=r(tOt,"segformer"),tOt.forEach(t),xAr=r(EVe," \u2014 "),xK=n(EVe,"A",{href:!0});var aOt=s(xK);$Ar=r(aOt,"TFSegformerModel"),aOt.forEach(t),kAr=r(EVe," (SegFormer model)"),EVe.forEach(t),SAr=i(D),_E=n(D,"LI",{});var CVe=s(_E);SEe=n(CVe,"STRONG",{});var nOt=s(SEe);RAr=r(nOt,"speech_to_text"),nOt.forEach(t),PAr=r(CVe," \u2014 "),$K=n(CVe,"A",{href:!0});var sOt=s($K);BAr=r(sOt,"TFSpeech2TextModel"),sOt.forEach(t),IAr=r(CVe," (Speech2Text model)"),CVe.forEach(t),NAr=i(D),bE=n(D,"LI",{});var wVe=s(bE);REe=n(wVe,"STRONG",{});var lOt=s(REe);qAr=r(lOt,"swin"),lOt.forEach(t),jAr=r(wVe," \u2014 "),kK=n(wVe,"A",{href:!0});var iOt=s(kK);DAr=r(iOt,"TFSwinModel"),iOt.forEach(t),GAr=r(wVe," (Swin Transformer model)"),wVe.forEach(t),OAr=i(D),vE=n(D,"LI",{});var AVe=s(vE);PEe=n(AVe,"STRONG",{});var dOt=s(PEe);VAr=r(dOt,"t5"),dOt.forEach(t),XAr=r(AVe," \u2014 "),SK=n(AVe,"A",{href:!0});var cOt=s(SK);zAr=r(cOt,"TFT5Model"),cOt.forEach(t),QAr=r(AVe," (T5 model)"),AVe.forEach(t),WAr=i(D),FE=n(D,"LI",{});var yVe=s(FE);BEe=n(yVe,"STRONG",{});var fOt=s(BEe);UAr=r(fOt,"tapas"),fOt.forEach(t),HAr=r(yVe," \u2014 "),RK=n(yVe,"A",{href:!0});var mOt=s(RK);JAr=r(mOt,"TFTapasModel"),mOt.forEach(t),YAr=r(yVe," (TAPAS model)"),yVe.forEach(t),KAr=i(D),TE=n(D,"LI",{});var LVe=s(TE);IEe=n(LVe,"STRONG",{});var gOt=s(IEe);ZAr=r(gOt,"transfo-xl"),gOt.forEach(t),e6r=r(LVe," \u2014 "),PK=n(LVe,"A",{href:!0});var hOt=s(PK);o6r=r(hOt,"TFTransfoXLModel"),hOt.forEach(t),r6r=r(LVe," (Transformer-XL model)"),LVe.forEach(t),t6r=i(D),ME=n(D,"LI",{});var xVe=s(ME);NEe=n(xVe,"STRONG",{});var pOt=s(NEe);a6r=r(pOt,"vit"),pOt.forEach(t),n6r=r(xVe," \u2014 "),BK=n(xVe,"A",{href:!0});var uOt=s(BK);s6r=r(uOt,"TFViTModel"),uOt.forEach(t),l6r=r(xVe," (ViT model)"),xVe.forEach(t),i6r=i(D),EE=n(D,"LI",{});var $Ve=s(EE);qEe=n($Ve,"STRONG",{});var _Ot=s(qEe);d6r=r(_Ot,"vit_mae"),_Ot.forEach(t),c6r=r($Ve," \u2014 "),IK=n($Ve,"A",{href:!0});var bOt=s(IK);f6r=r(bOt,"TFViTMAEModel"),bOt.forEach(t),m6r=r($Ve," (ViTMAE model)"),$Ve.forEach(t),g6r=i(D),CE=n(D,"LI",{});var kVe=s(CE);jEe=n(kVe,"STRONG",{});var vOt=s(jEe);h6r=r(vOt,"wav2vec2"),vOt.forEach(t),p6r=r(kVe," \u2014 "),NK=n(kVe,"A",{href:!0});var FOt=s(NK);u6r=r(FOt,"TFWav2Vec2Model"),FOt.forEach(t),_6r=r(kVe," (Wav2Vec2 model)"),kVe.forEach(t),b6r=i(D),wE=n(D,"LI",{});var SVe=s(wE);DEe=n(SVe,"STRONG",{});var TOt=s(DEe);v6r=r(TOt,"xlm"),TOt.forEach(t),F6r=r(SVe," \u2014 "),qK=n(SVe,"A",{href:!0});var MOt=s(qK);T6r=r(MOt,"TFXLMModel"),MOt.forEach(t),M6r=r(SVe," (XLM model)"),SVe.forEach(t),E6r=i(D),AE=n(D,"LI",{});var RVe=s(AE);GEe=n(RVe,"STRONG",{});var EOt=s(GEe);C6r=r(EOt,"xlm-roberta"),EOt.forEach(t),w6r=r(RVe," \u2014 "),jK=n(RVe,"A",{href:!0});var COt=s(jK);A6r=r(COt,"TFXLMRobertaModel"),COt.forEach(t),y6r=r(RVe," (XLM-RoBERTa model)"),RVe.forEach(t),L6r=i(D),yE=n(D,"LI",{});var PVe=s(yE);OEe=n(PVe,"STRONG",{});var wOt=s(OEe);x6r=r(wOt,"xlnet"),wOt.forEach(t),$6r=r(PVe," \u2014 "),DK=n(PVe,"A",{href:!0});var AOt=s(DK);k6r=r(AOt,"TFXLNetModel"),AOt.forEach(t),S6r=r(PVe," (XLNet model)"),PVe.forEach(t),D.forEach(t),R6r=i(Hl),T(LE.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),YHe=i(f),Ic=n(f,"H2",{class:!0});var fKe=s(Ic);xE=n(fKe,"A",{id:!0,class:!0,href:!0});var yOt=s(xE);VEe=n(yOt,"SPAN",{});var LOt=s(VEe);T(P$.$$.fragment,LOt),LOt.forEach(t),yOt.forEach(t),P6r=i(fKe),XEe=n(fKe,"SPAN",{});var xOt=s(XEe);B6r=r(xOt,"TFAutoModelForPreTraining"),xOt.forEach(t),fKe.forEach(t),KHe=i(f),lr=n(f,"DIV",{class:!0});var Jl=s(lr);T(B$.$$.fragment,Jl),I6r=i(Jl),Nc=n(Jl,"P",{});var bse=s(Nc);N6r=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GK=n(bse,"A",{href:!0});var $Ot=s(GK);q6r=r($Ot,"from_pretrained()"),$Ot.forEach(t),j6r=r(bse," class method or the "),OK=n(bse,"A",{href:!0});var kOt=s(OK);D6r=r(kOt,"from_config()"),kOt.forEach(t),G6r=r(bse,` class
method.`),bse.forEach(t),O6r=i(Jl),I$=n(Jl,"P",{});var mKe=s(I$);V6r=r(mKe,"This class cannot be instantiated directly using "),zEe=n(mKe,"CODE",{});var SOt=s(zEe);X6r=r(SOt,"__init__()"),SOt.forEach(t),z6r=r(mKe," (throws an error)."),mKe.forEach(t),Q6r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var ky=s(Ot);T(N$.$$.fragment,ky),W6r=i(ky),QEe=n(ky,"P",{});var ROt=s(QEe);U6r=r(ROt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ROt.forEach(t),H6r=i(ky),qc=n(ky,"P",{});var vse=s(qc);J6r=r(vse,`Note:
Loading a model from its configuration file does `),WEe=n(vse,"STRONG",{});var POt=s(WEe);Y6r=r(POt,"not"),POt.forEach(t),K6r=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(vse,"A",{href:!0});var BOt=s(VK);Z6r=r(BOt,"from_pretrained()"),BOt.forEach(t),eyr=r(vse," to load the model weights."),vse.forEach(t),oyr=i(ky),T($E.$$.fragment,ky),ky.forEach(t),ryr=i(Jl),Ir=n(Jl,"DIV",{class:!0});var Yl=s(Ir);T(q$.$$.fragment,Yl),tyr=i(Yl),UEe=n(Yl,"P",{});var IOt=s(UEe);ayr=r(IOt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IOt.forEach(t),nyr=i(Yl),Mn=n(Yl,"P",{});var Sy=s(Mn);syr=r(Sy,"The model class to instantiate is selected based on the "),HEe=n(Sy,"CODE",{});var NOt=s(HEe);lyr=r(NOt,"model_type"),NOt.forEach(t),iyr=r(Sy,` property of the config object (either
passed as an argument or loaded from `),JEe=n(Sy,"CODE",{});var qOt=s(JEe);dyr=r(qOt,"pretrained_model_name_or_path"),qOt.forEach(t),cyr=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=n(Sy,"CODE",{});var jOt=s(YEe);fyr=r(jOt,"pretrained_model_name_or_path"),jOt.forEach(t),myr=r(Sy,":"),Sy.forEach(t),gyr=i(Yl),se=n(Yl,"UL",{});var le=s(se);kE=n(le,"LI",{});var BVe=s(kE);KEe=n(BVe,"STRONG",{});var DOt=s(KEe);hyr=r(DOt,"albert"),DOt.forEach(t),pyr=r(BVe," \u2014 "),XK=n(BVe,"A",{href:!0});var GOt=s(XK);uyr=r(GOt,"TFAlbertForPreTraining"),GOt.forEach(t),_yr=r(BVe," (ALBERT model)"),BVe.forEach(t),byr=i(le),SE=n(le,"LI",{});var IVe=s(SE);ZEe=n(IVe,"STRONG",{});var OOt=s(ZEe);vyr=r(OOt,"bart"),OOt.forEach(t),Fyr=r(IVe," \u2014 "),zK=n(IVe,"A",{href:!0});var VOt=s(zK);Tyr=r(VOt,"TFBartForConditionalGeneration"),VOt.forEach(t),Myr=r(IVe," (BART model)"),IVe.forEach(t),Eyr=i(le),RE=n(le,"LI",{});var NVe=s(RE);e4e=n(NVe,"STRONG",{});var XOt=s(e4e);Cyr=r(XOt,"bert"),XOt.forEach(t),wyr=r(NVe," \u2014 "),QK=n(NVe,"A",{href:!0});var zOt=s(QK);Ayr=r(zOt,"TFBertForPreTraining"),zOt.forEach(t),yyr=r(NVe," (BERT model)"),NVe.forEach(t),Lyr=i(le),PE=n(le,"LI",{});var qVe=s(PE);o4e=n(qVe,"STRONG",{});var QOt=s(o4e);xyr=r(QOt,"camembert"),QOt.forEach(t),$yr=r(qVe," \u2014 "),WK=n(qVe,"A",{href:!0});var WOt=s(WK);kyr=r(WOt,"TFCamembertForMaskedLM"),WOt.forEach(t),Syr=r(qVe," (CamemBERT model)"),qVe.forEach(t),Ryr=i(le),BE=n(le,"LI",{});var jVe=s(BE);r4e=n(jVe,"STRONG",{});var UOt=s(r4e);Pyr=r(UOt,"ctrl"),UOt.forEach(t),Byr=r(jVe," \u2014 "),UK=n(jVe,"A",{href:!0});var HOt=s(UK);Iyr=r(HOt,"TFCTRLLMHeadModel"),HOt.forEach(t),Nyr=r(jVe," (CTRL model)"),jVe.forEach(t),qyr=i(le),IE=n(le,"LI",{});var DVe=s(IE);t4e=n(DVe,"STRONG",{});var JOt=s(t4e);jyr=r(JOt,"distilbert"),JOt.forEach(t),Dyr=r(DVe," \u2014 "),HK=n(DVe,"A",{href:!0});var YOt=s(HK);Gyr=r(YOt,"TFDistilBertForMaskedLM"),YOt.forEach(t),Oyr=r(DVe," (DistilBERT model)"),DVe.forEach(t),Vyr=i(le),NE=n(le,"LI",{});var GVe=s(NE);a4e=n(GVe,"STRONG",{});var KOt=s(a4e);Xyr=r(KOt,"electra"),KOt.forEach(t),zyr=r(GVe," \u2014 "),JK=n(GVe,"A",{href:!0});var ZOt=s(JK);Qyr=r(ZOt,"TFElectraForPreTraining"),ZOt.forEach(t),Wyr=r(GVe," (ELECTRA model)"),GVe.forEach(t),Uyr=i(le),qE=n(le,"LI",{});var OVe=s(qE);n4e=n(OVe,"STRONG",{});var eVt=s(n4e);Hyr=r(eVt,"flaubert"),eVt.forEach(t),Jyr=r(OVe," \u2014 "),YK=n(OVe,"A",{href:!0});var oVt=s(YK);Yyr=r(oVt,"TFFlaubertWithLMHeadModel"),oVt.forEach(t),Kyr=r(OVe," (FlauBERT model)"),OVe.forEach(t),Zyr=i(le),jE=n(le,"LI",{});var VVe=s(jE);s4e=n(VVe,"STRONG",{});var rVt=s(s4e);eLr=r(rVt,"funnel"),rVt.forEach(t),oLr=r(VVe," \u2014 "),KK=n(VVe,"A",{href:!0});var tVt=s(KK);rLr=r(tVt,"TFFunnelForPreTraining"),tVt.forEach(t),tLr=r(VVe," (Funnel Transformer model)"),VVe.forEach(t),aLr=i(le),DE=n(le,"LI",{});var XVe=s(DE);l4e=n(XVe,"STRONG",{});var aVt=s(l4e);nLr=r(aVt,"gpt2"),aVt.forEach(t),sLr=r(XVe," \u2014 "),ZK=n(XVe,"A",{href:!0});var nVt=s(ZK);lLr=r(nVt,"TFGPT2LMHeadModel"),nVt.forEach(t),iLr=r(XVe," (OpenAI GPT-2 model)"),XVe.forEach(t),dLr=i(le),GE=n(le,"LI",{});var zVe=s(GE);i4e=n(zVe,"STRONG",{});var sVt=s(i4e);cLr=r(sVt,"layoutlm"),sVt.forEach(t),fLr=r(zVe," \u2014 "),eZ=n(zVe,"A",{href:!0});var lVt=s(eZ);mLr=r(lVt,"TFLayoutLMForMaskedLM"),lVt.forEach(t),gLr=r(zVe," (LayoutLM model)"),zVe.forEach(t),hLr=i(le),OE=n(le,"LI",{});var QVe=s(OE);d4e=n(QVe,"STRONG",{});var iVt=s(d4e);pLr=r(iVt,"lxmert"),iVt.forEach(t),uLr=r(QVe," \u2014 "),oZ=n(QVe,"A",{href:!0});var dVt=s(oZ);_Lr=r(dVt,"TFLxmertForPreTraining"),dVt.forEach(t),bLr=r(QVe," (LXMERT model)"),QVe.forEach(t),vLr=i(le),VE=n(le,"LI",{});var WVe=s(VE);c4e=n(WVe,"STRONG",{});var cVt=s(c4e);FLr=r(cVt,"mobilebert"),cVt.forEach(t),TLr=r(WVe," \u2014 "),rZ=n(WVe,"A",{href:!0});var fVt=s(rZ);MLr=r(fVt,"TFMobileBertForPreTraining"),fVt.forEach(t),ELr=r(WVe," (MobileBERT model)"),WVe.forEach(t),CLr=i(le),XE=n(le,"LI",{});var UVe=s(XE);f4e=n(UVe,"STRONG",{});var mVt=s(f4e);wLr=r(mVt,"mpnet"),mVt.forEach(t),ALr=r(UVe," \u2014 "),tZ=n(UVe,"A",{href:!0});var gVt=s(tZ);yLr=r(gVt,"TFMPNetForMaskedLM"),gVt.forEach(t),LLr=r(UVe," (MPNet model)"),UVe.forEach(t),xLr=i(le),zE=n(le,"LI",{});var HVe=s(zE);m4e=n(HVe,"STRONG",{});var hVt=s(m4e);$Lr=r(hVt,"openai-gpt"),hVt.forEach(t),kLr=r(HVe," \u2014 "),aZ=n(HVe,"A",{href:!0});var pVt=s(aZ);SLr=r(pVt,"TFOpenAIGPTLMHeadModel"),pVt.forEach(t),RLr=r(HVe," (OpenAI GPT model)"),HVe.forEach(t),PLr=i(le),QE=n(le,"LI",{});var JVe=s(QE);g4e=n(JVe,"STRONG",{});var uVt=s(g4e);BLr=r(uVt,"roberta"),uVt.forEach(t),ILr=r(JVe," \u2014 "),nZ=n(JVe,"A",{href:!0});var _Vt=s(nZ);NLr=r(_Vt,"TFRobertaForMaskedLM"),_Vt.forEach(t),qLr=r(JVe," (RoBERTa model)"),JVe.forEach(t),jLr=i(le),WE=n(le,"LI",{});var YVe=s(WE);h4e=n(YVe,"STRONG",{});var bVt=s(h4e);DLr=r(bVt,"t5"),bVt.forEach(t),GLr=r(YVe," \u2014 "),sZ=n(YVe,"A",{href:!0});var vVt=s(sZ);OLr=r(vVt,"TFT5ForConditionalGeneration"),vVt.forEach(t),VLr=r(YVe," (T5 model)"),YVe.forEach(t),XLr=i(le),UE=n(le,"LI",{});var KVe=s(UE);p4e=n(KVe,"STRONG",{});var FVt=s(p4e);zLr=r(FVt,"tapas"),FVt.forEach(t),QLr=r(KVe," \u2014 "),lZ=n(KVe,"A",{href:!0});var TVt=s(lZ);WLr=r(TVt,"TFTapasForMaskedLM"),TVt.forEach(t),ULr=r(KVe," (TAPAS model)"),KVe.forEach(t),HLr=i(le),HE=n(le,"LI",{});var ZVe=s(HE);u4e=n(ZVe,"STRONG",{});var MVt=s(u4e);JLr=r(MVt,"transfo-xl"),MVt.forEach(t),YLr=r(ZVe," \u2014 "),iZ=n(ZVe,"A",{href:!0});var EVt=s(iZ);KLr=r(EVt,"TFTransfoXLLMHeadModel"),EVt.forEach(t),ZLr=r(ZVe," (Transformer-XL model)"),ZVe.forEach(t),e9r=i(le),JE=n(le,"LI",{});var eXe=s(JE);_4e=n(eXe,"STRONG",{});var CVt=s(_4e);o9r=r(CVt,"vit_mae"),CVt.forEach(t),r9r=r(eXe," \u2014 "),dZ=n(eXe,"A",{href:!0});var wVt=s(dZ);t9r=r(wVt,"TFViTMAEForPreTraining"),wVt.forEach(t),a9r=r(eXe," (ViTMAE model)"),eXe.forEach(t),n9r=i(le),YE=n(le,"LI",{});var oXe=s(YE);b4e=n(oXe,"STRONG",{});var AVt=s(b4e);s9r=r(AVt,"xlm"),AVt.forEach(t),l9r=r(oXe," \u2014 "),cZ=n(oXe,"A",{href:!0});var yVt=s(cZ);i9r=r(yVt,"TFXLMWithLMHeadModel"),yVt.forEach(t),d9r=r(oXe," (XLM model)"),oXe.forEach(t),c9r=i(le),KE=n(le,"LI",{});var rXe=s(KE);v4e=n(rXe,"STRONG",{});var LVt=s(v4e);f9r=r(LVt,"xlm-roberta"),LVt.forEach(t),m9r=r(rXe," \u2014 "),fZ=n(rXe,"A",{href:!0});var xVt=s(fZ);g9r=r(xVt,"TFXLMRobertaForMaskedLM"),xVt.forEach(t),h9r=r(rXe," (XLM-RoBERTa model)"),rXe.forEach(t),p9r=i(le),ZE=n(le,"LI",{});var tXe=s(ZE);F4e=n(tXe,"STRONG",{});var $Vt=s(F4e);u9r=r($Vt,"xlnet"),$Vt.forEach(t),_9r=r(tXe," \u2014 "),mZ=n(tXe,"A",{href:!0});var kVt=s(mZ);b9r=r(kVt,"TFXLNetLMHeadModel"),kVt.forEach(t),v9r=r(tXe," (XLNet model)"),tXe.forEach(t),le.forEach(t),F9r=i(Yl),T(e4.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),ZHe=i(f),jc=n(f,"H2",{class:!0});var gKe=s(jc);o4=n(gKe,"A",{id:!0,class:!0,href:!0});var SVt=s(o4);T4e=n(SVt,"SPAN",{});var RVt=s(T4e);T(j$.$$.fragment,RVt),RVt.forEach(t),SVt.forEach(t),T9r=i(gKe),M4e=n(gKe,"SPAN",{});var PVt=s(M4e);M9r=r(PVt,"TFAutoModelForCausalLM"),PVt.forEach(t),gKe.forEach(t),eJe=i(f),ir=n(f,"DIV",{class:!0});var Kl=s(ir);T(D$.$$.fragment,Kl),E9r=i(Kl),Dc=n(Kl,"P",{});var Fse=s(Dc);C9r=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gZ=n(Fse,"A",{href:!0});var BVt=s(gZ);w9r=r(BVt,"from_pretrained()"),BVt.forEach(t),A9r=r(Fse," class method or the "),hZ=n(Fse,"A",{href:!0});var IVt=s(hZ);y9r=r(IVt,"from_config()"),IVt.forEach(t),L9r=r(Fse,` class
method.`),Fse.forEach(t),x9r=i(Kl),G$=n(Kl,"P",{});var hKe=s(G$);$9r=r(hKe,"This class cannot be instantiated directly using "),E4e=n(hKe,"CODE",{});var NVt=s(E4e);k9r=r(NVt,"__init__()"),NVt.forEach(t),S9r=r(hKe," (throws an error)."),hKe.forEach(t),R9r=i(Kl),Vt=n(Kl,"DIV",{class:!0});var Ry=s(Vt);T(O$.$$.fragment,Ry),P9r=i(Ry),C4e=n(Ry,"P",{});var qVt=s(C4e);B9r=r(qVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qVt.forEach(t),I9r=i(Ry),Gc=n(Ry,"P",{});var Tse=s(Gc);N9r=r(Tse,`Note:
Loading a model from its configuration file does `),w4e=n(Tse,"STRONG",{});var jVt=s(w4e);q9r=r(jVt,"not"),jVt.forEach(t),j9r=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Tse,"A",{href:!0});var DVt=s(pZ);D9r=r(DVt,"from_pretrained()"),DVt.forEach(t),G9r=r(Tse," to load the model weights."),Tse.forEach(t),O9r=i(Ry),T(r4.$$.fragment,Ry),Ry.forEach(t),V9r=i(Kl),Nr=n(Kl,"DIV",{class:!0});var Zl=s(Nr);T(V$.$$.fragment,Zl),X9r=i(Zl),A4e=n(Zl,"P",{});var GVt=s(A4e);z9r=r(GVt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GVt.forEach(t),Q9r=i(Zl),En=n(Zl,"P",{});var Py=s(En);W9r=r(Py,"The model class to instantiate is selected based on the "),y4e=n(Py,"CODE",{});var OVt=s(y4e);U9r=r(OVt,"model_type"),OVt.forEach(t),H9r=r(Py,` property of the config object (either
passed as an argument or loaded from `),L4e=n(Py,"CODE",{});var VVt=s(L4e);J9r=r(VVt,"pretrained_model_name_or_path"),VVt.forEach(t),Y9r=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(Py,"CODE",{});var XVt=s(x4e);K9r=r(XVt,"pretrained_model_name_or_path"),XVt.forEach(t),Z9r=r(Py,":"),Py.forEach(t),exr=i(Zl),Me=n(Zl,"UL",{});var Ce=s(Me);t4=n(Ce,"LI",{});var aXe=s(t4);$4e=n(aXe,"STRONG",{});var zVt=s($4e);oxr=r(zVt,"bert"),zVt.forEach(t),rxr=r(aXe," \u2014 "),uZ=n(aXe,"A",{href:!0});var QVt=s(uZ);txr=r(QVt,"TFBertLMHeadModel"),QVt.forEach(t),axr=r(aXe," (BERT model)"),aXe.forEach(t),nxr=i(Ce),a4=n(Ce,"LI",{});var nXe=s(a4);k4e=n(nXe,"STRONG",{});var WVt=s(k4e);sxr=r(WVt,"camembert"),WVt.forEach(t),lxr=r(nXe," \u2014 "),_Z=n(nXe,"A",{href:!0});var UVt=s(_Z);ixr=r(UVt,"TFCamembertForCausalLM"),UVt.forEach(t),dxr=r(nXe," (CamemBERT model)"),nXe.forEach(t),cxr=i(Ce),n4=n(Ce,"LI",{});var sXe=s(n4);S4e=n(sXe,"STRONG",{});var HVt=s(S4e);fxr=r(HVt,"ctrl"),HVt.forEach(t),mxr=r(sXe," \u2014 "),bZ=n(sXe,"A",{href:!0});var JVt=s(bZ);gxr=r(JVt,"TFCTRLLMHeadModel"),JVt.forEach(t),hxr=r(sXe," (CTRL model)"),sXe.forEach(t),pxr=i(Ce),s4=n(Ce,"LI",{});var lXe=s(s4);R4e=n(lXe,"STRONG",{});var YVt=s(R4e);uxr=r(YVt,"gpt2"),YVt.forEach(t),_xr=r(lXe," \u2014 "),vZ=n(lXe,"A",{href:!0});var KVt=s(vZ);bxr=r(KVt,"TFGPT2LMHeadModel"),KVt.forEach(t),vxr=r(lXe," (OpenAI GPT-2 model)"),lXe.forEach(t),Fxr=i(Ce),l4=n(Ce,"LI",{});var iXe=s(l4);P4e=n(iXe,"STRONG",{});var ZVt=s(P4e);Txr=r(ZVt,"gptj"),ZVt.forEach(t),Mxr=r(iXe," \u2014 "),FZ=n(iXe,"A",{href:!0});var eXt=s(FZ);Exr=r(eXt,"TFGPTJForCausalLM"),eXt.forEach(t),Cxr=r(iXe," (GPT-J model)"),iXe.forEach(t),wxr=i(Ce),i4=n(Ce,"LI",{});var dXe=s(i4);B4e=n(dXe,"STRONG",{});var oXt=s(B4e);Axr=r(oXt,"openai-gpt"),oXt.forEach(t),yxr=r(dXe," \u2014 "),TZ=n(dXe,"A",{href:!0});var rXt=s(TZ);Lxr=r(rXt,"TFOpenAIGPTLMHeadModel"),rXt.forEach(t),xxr=r(dXe," (OpenAI GPT model)"),dXe.forEach(t),$xr=i(Ce),d4=n(Ce,"LI",{});var cXe=s(d4);I4e=n(cXe,"STRONG",{});var tXt=s(I4e);kxr=r(tXt,"opt"),tXt.forEach(t),Sxr=r(cXe," \u2014 "),MZ=n(cXe,"A",{href:!0});var aXt=s(MZ);Rxr=r(aXt,"TFOPTForCausalLM"),aXt.forEach(t),Pxr=r(cXe," (OPT model)"),cXe.forEach(t),Bxr=i(Ce),c4=n(Ce,"LI",{});var fXe=s(c4);N4e=n(fXe,"STRONG",{});var nXt=s(N4e);Ixr=r(nXt,"rembert"),nXt.forEach(t),Nxr=r(fXe," \u2014 "),EZ=n(fXe,"A",{href:!0});var sXt=s(EZ);qxr=r(sXt,"TFRemBertForCausalLM"),sXt.forEach(t),jxr=r(fXe," (RemBERT model)"),fXe.forEach(t),Dxr=i(Ce),f4=n(Ce,"LI",{});var mXe=s(f4);q4e=n(mXe,"STRONG",{});var lXt=s(q4e);Gxr=r(lXt,"roberta"),lXt.forEach(t),Oxr=r(mXe," \u2014 "),CZ=n(mXe,"A",{href:!0});var iXt=s(CZ);Vxr=r(iXt,"TFRobertaForCausalLM"),iXt.forEach(t),Xxr=r(mXe," (RoBERTa model)"),mXe.forEach(t),zxr=i(Ce),m4=n(Ce,"LI",{});var gXe=s(m4);j4e=n(gXe,"STRONG",{});var dXt=s(j4e);Qxr=r(dXt,"roformer"),dXt.forEach(t),Wxr=r(gXe," \u2014 "),wZ=n(gXe,"A",{href:!0});var cXt=s(wZ);Uxr=r(cXt,"TFRoFormerForCausalLM"),cXt.forEach(t),Hxr=r(gXe," (RoFormer model)"),gXe.forEach(t),Jxr=i(Ce),g4=n(Ce,"LI",{});var hXe=s(g4);D4e=n(hXe,"STRONG",{});var fXt=s(D4e);Yxr=r(fXt,"transfo-xl"),fXt.forEach(t),Kxr=r(hXe," \u2014 "),AZ=n(hXe,"A",{href:!0});var mXt=s(AZ);Zxr=r(mXt,"TFTransfoXLLMHeadModel"),mXt.forEach(t),e$r=r(hXe," (Transformer-XL model)"),hXe.forEach(t),o$r=i(Ce),h4=n(Ce,"LI",{});var pXe=s(h4);G4e=n(pXe,"STRONG",{});var gXt=s(G4e);r$r=r(gXt,"xlm"),gXt.forEach(t),t$r=r(pXe," \u2014 "),yZ=n(pXe,"A",{href:!0});var hXt=s(yZ);a$r=r(hXt,"TFXLMWithLMHeadModel"),hXt.forEach(t),n$r=r(pXe," (XLM model)"),pXe.forEach(t),s$r=i(Ce),p4=n(Ce,"LI",{});var uXe=s(p4);O4e=n(uXe,"STRONG",{});var pXt=s(O4e);l$r=r(pXt,"xlnet"),pXt.forEach(t),i$r=r(uXe," \u2014 "),LZ=n(uXe,"A",{href:!0});var uXt=s(LZ);d$r=r(uXt,"TFXLNetLMHeadModel"),uXt.forEach(t),c$r=r(uXe," (XLNet model)"),uXe.forEach(t),Ce.forEach(t),f$r=i(Zl),T(u4.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),oJe=i(f),Oc=n(f,"H2",{class:!0});var pKe=s(Oc);_4=n(pKe,"A",{id:!0,class:!0,href:!0});var _Xt=s(_4);V4e=n(_Xt,"SPAN",{});var bXt=s(V4e);T(X$.$$.fragment,bXt),bXt.forEach(t),_Xt.forEach(t),m$r=i(pKe),X4e=n(pKe,"SPAN",{});var vXt=s(X4e);g$r=r(vXt,"TFAutoModelForImageClassification"),vXt.forEach(t),pKe.forEach(t),rJe=i(f),dr=n(f,"DIV",{class:!0});var ei=s(dr);T(z$.$$.fragment,ei),h$r=i(ei),Vc=n(ei,"P",{});var Mse=s(Vc);p$r=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xZ=n(Mse,"A",{href:!0});var FXt=s(xZ);u$r=r(FXt,"from_pretrained()"),FXt.forEach(t),_$r=r(Mse," class method or the "),$Z=n(Mse,"A",{href:!0});var TXt=s($Z);b$r=r(TXt,"from_config()"),TXt.forEach(t),v$r=r(Mse,` class
method.`),Mse.forEach(t),F$r=i(ei),Q$=n(ei,"P",{});var uKe=s(Q$);T$r=r(uKe,"This class cannot be instantiated directly using "),z4e=n(uKe,"CODE",{});var MXt=s(z4e);M$r=r(MXt,"__init__()"),MXt.forEach(t),E$r=r(uKe," (throws an error)."),uKe.forEach(t),C$r=i(ei),Xt=n(ei,"DIV",{class:!0});var By=s(Xt);T(W$.$$.fragment,By),w$r=i(By),Q4e=n(By,"P",{});var EXt=s(Q4e);A$r=r(EXt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EXt.forEach(t),y$r=i(By),Xc=n(By,"P",{});var Ese=s(Xc);L$r=r(Ese,`Note:
Loading a model from its configuration file does `),W4e=n(Ese,"STRONG",{});var CXt=s(W4e);x$r=r(CXt,"not"),CXt.forEach(t),$$r=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(Ese,"A",{href:!0});var wXt=s(kZ);k$r=r(wXt,"from_pretrained()"),wXt.forEach(t),S$r=r(Ese," to load the model weights."),Ese.forEach(t),R$r=i(By),T(b4.$$.fragment,By),By.forEach(t),P$r=i(ei),qr=n(ei,"DIV",{class:!0});var oi=s(qr);T(U$.$$.fragment,oi),B$r=i(oi),U4e=n(oi,"P",{});var AXt=s(U4e);I$r=r(AXt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AXt.forEach(t),N$r=i(oi),Cn=n(oi,"P",{});var Iy=s(Cn);q$r=r(Iy,"The model class to instantiate is selected based on the "),H4e=n(Iy,"CODE",{});var yXt=s(H4e);j$r=r(yXt,"model_type"),yXt.forEach(t),D$r=r(Iy,` property of the config object (either
passed as an argument or loaded from `),J4e=n(Iy,"CODE",{});var LXt=s(J4e);G$r=r(LXt,"pretrained_model_name_or_path"),LXt.forEach(t),O$r=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(Iy,"CODE",{});var xXt=s(Y4e);V$r=r(xXt,"pretrained_model_name_or_path"),xXt.forEach(t),X$r=r(Iy,":"),Iy.forEach(t),z$r=i(oi),Ve=n(oi,"UL",{});var Co=s(Ve);v4=n(Co,"LI",{});var _Xe=s(v4);K4e=n(_Xe,"STRONG",{});var $Xt=s(K4e);Q$r=r($Xt,"convnext"),$Xt.forEach(t),W$r=r(_Xe," \u2014 "),SZ=n(_Xe,"A",{href:!0});var kXt=s(SZ);U$r=r(kXt,"TFConvNextForImageClassification"),kXt.forEach(t),H$r=r(_Xe," (ConvNeXT model)"),_Xe.forEach(t),J$r=i(Co),F4=n(Co,"LI",{});var bXe=s(F4);Z4e=n(bXe,"STRONG",{});var SXt=s(Z4e);Y$r=r(SXt,"data2vec-vision"),SXt.forEach(t),K$r=r(bXe," \u2014 "),RZ=n(bXe,"A",{href:!0});var RXt=s(RZ);Z$r=r(RXt,"TFData2VecVisionForImageClassification"),RXt.forEach(t),ekr=r(bXe," (Data2VecVision model)"),bXe.forEach(t),okr=i(Co),hl=n(Co,"LI",{});var yP=s(hl);eCe=n(yP,"STRONG",{});var PXt=s(eCe);rkr=r(PXt,"deit"),PXt.forEach(t),tkr=r(yP," \u2014 "),PZ=n(yP,"A",{href:!0});var BXt=s(PZ);akr=r(BXt,"TFDeiTForImageClassification"),BXt.forEach(t),nkr=r(yP," or "),BZ=n(yP,"A",{href:!0});var IXt=s(BZ);skr=r(IXt,"TFDeiTForImageClassificationWithTeacher"),IXt.forEach(t),lkr=r(yP," (DeiT model)"),yP.forEach(t),ikr=i(Co),T4=n(Co,"LI",{});var vXe=s(T4);oCe=n(vXe,"STRONG",{});var NXt=s(oCe);dkr=r(NXt,"regnet"),NXt.forEach(t),ckr=r(vXe," \u2014 "),IZ=n(vXe,"A",{href:!0});var qXt=s(IZ);fkr=r(qXt,"TFRegNetForImageClassification"),qXt.forEach(t),mkr=r(vXe," (RegNet model)"),vXe.forEach(t),gkr=i(Co),M4=n(Co,"LI",{});var FXe=s(M4);rCe=n(FXe,"STRONG",{});var jXt=s(rCe);hkr=r(jXt,"resnet"),jXt.forEach(t),pkr=r(FXe," \u2014 "),NZ=n(FXe,"A",{href:!0});var DXt=s(NZ);ukr=r(DXt,"TFResNetForImageClassification"),DXt.forEach(t),_kr=r(FXe," (ResNet model)"),FXe.forEach(t),bkr=i(Co),E4=n(Co,"LI",{});var TXe=s(E4);tCe=n(TXe,"STRONG",{});var GXt=s(tCe);vkr=r(GXt,"segformer"),GXt.forEach(t),Fkr=r(TXe," \u2014 "),qZ=n(TXe,"A",{href:!0});var OXt=s(qZ);Tkr=r(OXt,"TFSegformerForImageClassification"),OXt.forEach(t),Mkr=r(TXe," (SegFormer model)"),TXe.forEach(t),Ekr=i(Co),C4=n(Co,"LI",{});var MXe=s(C4);aCe=n(MXe,"STRONG",{});var VXt=s(aCe);Ckr=r(VXt,"swin"),VXt.forEach(t),wkr=r(MXe," \u2014 "),jZ=n(MXe,"A",{href:!0});var XXt=s(jZ);Akr=r(XXt,"TFSwinForImageClassification"),XXt.forEach(t),ykr=r(MXe," (Swin Transformer model)"),MXe.forEach(t),Lkr=i(Co),w4=n(Co,"LI",{});var EXe=s(w4);nCe=n(EXe,"STRONG",{});var zXt=s(nCe);xkr=r(zXt,"vit"),zXt.forEach(t),$kr=r(EXe," \u2014 "),DZ=n(EXe,"A",{href:!0});var QXt=s(DZ);kkr=r(QXt,"TFViTForImageClassification"),QXt.forEach(t),Skr=r(EXe," (ViT model)"),EXe.forEach(t),Co.forEach(t),Rkr=i(oi),T(A4.$$.fragment,oi),oi.forEach(t),ei.forEach(t),tJe=i(f),zc=n(f,"H2",{class:!0});var _Ke=s(zc);y4=n(_Ke,"A",{id:!0,class:!0,href:!0});var WXt=s(y4);sCe=n(WXt,"SPAN",{});var UXt=s(sCe);T(H$.$$.fragment,UXt),UXt.forEach(t),WXt.forEach(t),Pkr=i(_Ke),lCe=n(_Ke,"SPAN",{});var HXt=s(lCe);Bkr=r(HXt,"TFAutoModelForSemanticSegmentation"),HXt.forEach(t),_Ke.forEach(t),aJe=i(f),cr=n(f,"DIV",{class:!0});var ri=s(cr);T(J$.$$.fragment,ri),Ikr=i(ri),Qc=n(ri,"P",{});var Cse=s(Qc);Nkr=r(Cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GZ=n(Cse,"A",{href:!0});var JXt=s(GZ);qkr=r(JXt,"from_pretrained()"),JXt.forEach(t),jkr=r(Cse," class method or the "),OZ=n(Cse,"A",{href:!0});var YXt=s(OZ);Dkr=r(YXt,"from_config()"),YXt.forEach(t),Gkr=r(Cse,` class
method.`),Cse.forEach(t),Okr=i(ri),Y$=n(ri,"P",{});var bKe=s(Y$);Vkr=r(bKe,"This class cannot be instantiated directly using "),iCe=n(bKe,"CODE",{});var KXt=s(iCe);Xkr=r(KXt,"__init__()"),KXt.forEach(t),zkr=r(bKe," (throws an error)."),bKe.forEach(t),Qkr=i(ri),zt=n(ri,"DIV",{class:!0});var Ny=s(zt);T(K$.$$.fragment,Ny),Wkr=i(Ny),dCe=n(Ny,"P",{});var ZXt=s(dCe);Ukr=r(ZXt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ZXt.forEach(t),Hkr=i(Ny),Wc=n(Ny,"P",{});var wse=s(Wc);Jkr=r(wse,`Note:
Loading a model from its configuration file does `),cCe=n(wse,"STRONG",{});var ezt=s(cCe);Ykr=r(ezt,"not"),ezt.forEach(t),Kkr=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=n(wse,"A",{href:!0});var ozt=s(VZ);Zkr=r(ozt,"from_pretrained()"),ozt.forEach(t),eSr=r(wse," to load the model weights."),wse.forEach(t),oSr=i(Ny),T(L4.$$.fragment,Ny),Ny.forEach(t),rSr=i(ri),jr=n(ri,"DIV",{class:!0});var ti=s(jr);T(Z$.$$.fragment,ti),tSr=i(ti),fCe=n(ti,"P",{});var rzt=s(fCe);aSr=r(rzt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rzt.forEach(t),nSr=i(ti),wn=n(ti,"P",{});var qy=s(wn);sSr=r(qy,"The model class to instantiate is selected based on the "),mCe=n(qy,"CODE",{});var tzt=s(mCe);lSr=r(tzt,"model_type"),tzt.forEach(t),iSr=r(qy,` property of the config object (either
passed as an argument or loaded from `),gCe=n(qy,"CODE",{});var azt=s(gCe);dSr=r(azt,"pretrained_model_name_or_path"),azt.forEach(t),cSr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(qy,"CODE",{});var nzt=s(hCe);fSr=r(nzt,"pretrained_model_name_or_path"),nzt.forEach(t),mSr=r(qy,":"),qy.forEach(t),gSr=i(ti),ek=n(ti,"UL",{});var vKe=s(ek);x4=n(vKe,"LI",{});var CXe=s(x4);pCe=n(CXe,"STRONG",{});var szt=s(pCe);hSr=r(szt,"data2vec-vision"),szt.forEach(t),pSr=r(CXe," \u2014 "),XZ=n(CXe,"A",{href:!0});var lzt=s(XZ);uSr=r(lzt,"TFData2VecVisionForSemanticSegmentation"),lzt.forEach(t),_Sr=r(CXe," (Data2VecVision model)"),CXe.forEach(t),bSr=i(vKe),$4=n(vKe,"LI",{});var wXe=s($4);uCe=n(wXe,"STRONG",{});var izt=s(uCe);vSr=r(izt,"segformer"),izt.forEach(t),FSr=r(wXe," \u2014 "),zZ=n(wXe,"A",{href:!0});var dzt=s(zZ);TSr=r(dzt,"TFSegformerForSemanticSegmentation"),dzt.forEach(t),MSr=r(wXe," (SegFormer model)"),wXe.forEach(t),vKe.forEach(t),ESr=i(ti),T(k4.$$.fragment,ti),ti.forEach(t),ri.forEach(t),nJe=i(f),Uc=n(f,"H2",{class:!0});var FKe=s(Uc);S4=n(FKe,"A",{id:!0,class:!0,href:!0});var czt=s(S4);_Ce=n(czt,"SPAN",{});var fzt=s(_Ce);T(ok.$$.fragment,fzt),fzt.forEach(t),czt.forEach(t),CSr=i(FKe),bCe=n(FKe,"SPAN",{});var mzt=s(bCe);wSr=r(mzt,"TFAutoModelForMaskedLM"),mzt.forEach(t),FKe.forEach(t),sJe=i(f),fr=n(f,"DIV",{class:!0});var ai=s(fr);T(rk.$$.fragment,ai),ASr=i(ai),Hc=n(ai,"P",{});var Ase=s(Hc);ySr=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),QZ=n(Ase,"A",{href:!0});var gzt=s(QZ);LSr=r(gzt,"from_pretrained()"),gzt.forEach(t),xSr=r(Ase," class method or the "),WZ=n(Ase,"A",{href:!0});var hzt=s(WZ);$Sr=r(hzt,"from_config()"),hzt.forEach(t),kSr=r(Ase,` class
method.`),Ase.forEach(t),SSr=i(ai),tk=n(ai,"P",{});var TKe=s(tk);RSr=r(TKe,"This class cannot be instantiated directly using "),vCe=n(TKe,"CODE",{});var pzt=s(vCe);PSr=r(pzt,"__init__()"),pzt.forEach(t),BSr=r(TKe," (throws an error)."),TKe.forEach(t),ISr=i(ai),Qt=n(ai,"DIV",{class:!0});var jy=s(Qt);T(ak.$$.fragment,jy),NSr=i(jy),FCe=n(jy,"P",{});var uzt=s(FCe);qSr=r(uzt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uzt.forEach(t),jSr=i(jy),Jc=n(jy,"P",{});var yse=s(Jc);DSr=r(yse,`Note:
Loading a model from its configuration file does `),TCe=n(yse,"STRONG",{});var _zt=s(TCe);GSr=r(_zt,"not"),_zt.forEach(t),OSr=r(yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),UZ=n(yse,"A",{href:!0});var bzt=s(UZ);VSr=r(bzt,"from_pretrained()"),bzt.forEach(t),XSr=r(yse," to load the model weights."),yse.forEach(t),zSr=i(jy),T(R4.$$.fragment,jy),jy.forEach(t),QSr=i(ai),Dr=n(ai,"DIV",{class:!0});var ni=s(Dr);T(nk.$$.fragment,ni),WSr=i(ni),MCe=n(ni,"P",{});var vzt=s(MCe);USr=r(vzt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vzt.forEach(t),HSr=i(ni),An=n(ni,"P",{});var Dy=s(An);JSr=r(Dy,"The model class to instantiate is selected based on the "),ECe=n(Dy,"CODE",{});var Fzt=s(ECe);YSr=r(Fzt,"model_type"),Fzt.forEach(t),KSr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),CCe=n(Dy,"CODE",{});var Tzt=s(CCe);ZSr=r(Tzt,"pretrained_model_name_or_path"),Tzt.forEach(t),eRr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(Dy,"CODE",{});var Mzt=s(wCe);oRr=r(Mzt,"pretrained_model_name_or_path"),Mzt.forEach(t),rRr=r(Dy,":"),Dy.forEach(t),tRr=i(ni),de=n(ni,"UL",{});var he=s(de);P4=n(he,"LI",{});var AXe=s(P4);ACe=n(AXe,"STRONG",{});var Ezt=s(ACe);aRr=r(Ezt,"albert"),Ezt.forEach(t),nRr=r(AXe," \u2014 "),HZ=n(AXe,"A",{href:!0});var Czt=s(HZ);sRr=r(Czt,"TFAlbertForMaskedLM"),Czt.forEach(t),lRr=r(AXe," (ALBERT model)"),AXe.forEach(t),iRr=i(he),B4=n(he,"LI",{});var yXe=s(B4);yCe=n(yXe,"STRONG",{});var wzt=s(yCe);dRr=r(wzt,"bert"),wzt.forEach(t),cRr=r(yXe," \u2014 "),JZ=n(yXe,"A",{href:!0});var Azt=s(JZ);fRr=r(Azt,"TFBertForMaskedLM"),Azt.forEach(t),mRr=r(yXe," (BERT model)"),yXe.forEach(t),gRr=i(he),I4=n(he,"LI",{});var LXe=s(I4);LCe=n(LXe,"STRONG",{});var yzt=s(LCe);hRr=r(yzt,"camembert"),yzt.forEach(t),pRr=r(LXe," \u2014 "),YZ=n(LXe,"A",{href:!0});var Lzt=s(YZ);uRr=r(Lzt,"TFCamembertForMaskedLM"),Lzt.forEach(t),_Rr=r(LXe," (CamemBERT model)"),LXe.forEach(t),bRr=i(he),N4=n(he,"LI",{});var xXe=s(N4);xCe=n(xXe,"STRONG",{});var xzt=s(xCe);vRr=r(xzt,"convbert"),xzt.forEach(t),FRr=r(xXe," \u2014 "),KZ=n(xXe,"A",{href:!0});var $zt=s(KZ);TRr=r($zt,"TFConvBertForMaskedLM"),$zt.forEach(t),MRr=r(xXe," (ConvBERT model)"),xXe.forEach(t),ERr=i(he),q4=n(he,"LI",{});var $Xe=s(q4);$Ce=n($Xe,"STRONG",{});var kzt=s($Ce);CRr=r(kzt,"deberta"),kzt.forEach(t),wRr=r($Xe," \u2014 "),ZZ=n($Xe,"A",{href:!0});var Szt=s(ZZ);ARr=r(Szt,"TFDebertaForMaskedLM"),Szt.forEach(t),yRr=r($Xe," (DeBERTa model)"),$Xe.forEach(t),LRr=i(he),j4=n(he,"LI",{});var kXe=s(j4);kCe=n(kXe,"STRONG",{});var Rzt=s(kCe);xRr=r(Rzt,"deberta-v2"),Rzt.forEach(t),$Rr=r(kXe," \u2014 "),eee=n(kXe,"A",{href:!0});var Pzt=s(eee);kRr=r(Pzt,"TFDebertaV2ForMaskedLM"),Pzt.forEach(t),SRr=r(kXe," (DeBERTa-v2 model)"),kXe.forEach(t),RRr=i(he),D4=n(he,"LI",{});var SXe=s(D4);SCe=n(SXe,"STRONG",{});var Bzt=s(SCe);PRr=r(Bzt,"distilbert"),Bzt.forEach(t),BRr=r(SXe," \u2014 "),oee=n(SXe,"A",{href:!0});var Izt=s(oee);IRr=r(Izt,"TFDistilBertForMaskedLM"),Izt.forEach(t),NRr=r(SXe," (DistilBERT model)"),SXe.forEach(t),qRr=i(he),G4=n(he,"LI",{});var RXe=s(G4);RCe=n(RXe,"STRONG",{});var Nzt=s(RCe);jRr=r(Nzt,"electra"),Nzt.forEach(t),DRr=r(RXe," \u2014 "),ree=n(RXe,"A",{href:!0});var qzt=s(ree);GRr=r(qzt,"TFElectraForMaskedLM"),qzt.forEach(t),ORr=r(RXe," (ELECTRA model)"),RXe.forEach(t),VRr=i(he),O4=n(he,"LI",{});var PXe=s(O4);PCe=n(PXe,"STRONG",{});var jzt=s(PCe);XRr=r(jzt,"flaubert"),jzt.forEach(t),zRr=r(PXe," \u2014 "),tee=n(PXe,"A",{href:!0});var Dzt=s(tee);QRr=r(Dzt,"TFFlaubertWithLMHeadModel"),Dzt.forEach(t),WRr=r(PXe," (FlauBERT model)"),PXe.forEach(t),URr=i(he),V4=n(he,"LI",{});var BXe=s(V4);BCe=n(BXe,"STRONG",{});var Gzt=s(BCe);HRr=r(Gzt,"funnel"),Gzt.forEach(t),JRr=r(BXe," \u2014 "),aee=n(BXe,"A",{href:!0});var Ozt=s(aee);YRr=r(Ozt,"TFFunnelForMaskedLM"),Ozt.forEach(t),KRr=r(BXe," (Funnel Transformer model)"),BXe.forEach(t),ZRr=i(he),X4=n(he,"LI",{});var IXe=s(X4);ICe=n(IXe,"STRONG",{});var Vzt=s(ICe);ePr=r(Vzt,"layoutlm"),Vzt.forEach(t),oPr=r(IXe," \u2014 "),nee=n(IXe,"A",{href:!0});var Xzt=s(nee);rPr=r(Xzt,"TFLayoutLMForMaskedLM"),Xzt.forEach(t),tPr=r(IXe," (LayoutLM model)"),IXe.forEach(t),aPr=i(he),z4=n(he,"LI",{});var NXe=s(z4);NCe=n(NXe,"STRONG",{});var zzt=s(NCe);nPr=r(zzt,"longformer"),zzt.forEach(t),sPr=r(NXe," \u2014 "),see=n(NXe,"A",{href:!0});var Qzt=s(see);lPr=r(Qzt,"TFLongformerForMaskedLM"),Qzt.forEach(t),iPr=r(NXe," (Longformer model)"),NXe.forEach(t),dPr=i(he),Q4=n(he,"LI",{});var qXe=s(Q4);qCe=n(qXe,"STRONG",{});var Wzt=s(qCe);cPr=r(Wzt,"mobilebert"),Wzt.forEach(t),fPr=r(qXe," \u2014 "),lee=n(qXe,"A",{href:!0});var Uzt=s(lee);mPr=r(Uzt,"TFMobileBertForMaskedLM"),Uzt.forEach(t),gPr=r(qXe," (MobileBERT model)"),qXe.forEach(t),hPr=i(he),W4=n(he,"LI",{});var jXe=s(W4);jCe=n(jXe,"STRONG",{});var Hzt=s(jCe);pPr=r(Hzt,"mpnet"),Hzt.forEach(t),uPr=r(jXe," \u2014 "),iee=n(jXe,"A",{href:!0});var Jzt=s(iee);_Pr=r(Jzt,"TFMPNetForMaskedLM"),Jzt.forEach(t),bPr=r(jXe," (MPNet model)"),jXe.forEach(t),vPr=i(he),U4=n(he,"LI",{});var DXe=s(U4);DCe=n(DXe,"STRONG",{});var Yzt=s(DCe);FPr=r(Yzt,"rembert"),Yzt.forEach(t),TPr=r(DXe," \u2014 "),dee=n(DXe,"A",{href:!0});var Kzt=s(dee);MPr=r(Kzt,"TFRemBertForMaskedLM"),Kzt.forEach(t),EPr=r(DXe," (RemBERT model)"),DXe.forEach(t),CPr=i(he),H4=n(he,"LI",{});var GXe=s(H4);GCe=n(GXe,"STRONG",{});var Zzt=s(GCe);wPr=r(Zzt,"roberta"),Zzt.forEach(t),APr=r(GXe," \u2014 "),cee=n(GXe,"A",{href:!0});var eQt=s(cee);yPr=r(eQt,"TFRobertaForMaskedLM"),eQt.forEach(t),LPr=r(GXe," (RoBERTa model)"),GXe.forEach(t),xPr=i(he),J4=n(he,"LI",{});var OXe=s(J4);OCe=n(OXe,"STRONG",{});var oQt=s(OCe);$Pr=r(oQt,"roformer"),oQt.forEach(t),kPr=r(OXe," \u2014 "),fee=n(OXe,"A",{href:!0});var rQt=s(fee);SPr=r(rQt,"TFRoFormerForMaskedLM"),rQt.forEach(t),RPr=r(OXe," (RoFormer model)"),OXe.forEach(t),PPr=i(he),Y4=n(he,"LI",{});var VXe=s(Y4);VCe=n(VXe,"STRONG",{});var tQt=s(VCe);BPr=r(tQt,"tapas"),tQt.forEach(t),IPr=r(VXe," \u2014 "),mee=n(VXe,"A",{href:!0});var aQt=s(mee);NPr=r(aQt,"TFTapasForMaskedLM"),aQt.forEach(t),qPr=r(VXe," (TAPAS model)"),VXe.forEach(t),jPr=i(he),K4=n(he,"LI",{});var XXe=s(K4);XCe=n(XXe,"STRONG",{});var nQt=s(XCe);DPr=r(nQt,"xlm"),nQt.forEach(t),GPr=r(XXe," \u2014 "),gee=n(XXe,"A",{href:!0});var sQt=s(gee);OPr=r(sQt,"TFXLMWithLMHeadModel"),sQt.forEach(t),VPr=r(XXe," (XLM model)"),XXe.forEach(t),XPr=i(he),Z4=n(he,"LI",{});var zXe=s(Z4);zCe=n(zXe,"STRONG",{});var lQt=s(zCe);zPr=r(lQt,"xlm-roberta"),lQt.forEach(t),QPr=r(zXe," \u2014 "),hee=n(zXe,"A",{href:!0});var iQt=s(hee);WPr=r(iQt,"TFXLMRobertaForMaskedLM"),iQt.forEach(t),UPr=r(zXe," (XLM-RoBERTa model)"),zXe.forEach(t),he.forEach(t),HPr=i(ni),T(eC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),lJe=i(f),Yc=n(f,"H2",{class:!0});var MKe=s(Yc);oC=n(MKe,"A",{id:!0,class:!0,href:!0});var dQt=s(oC);QCe=n(dQt,"SPAN",{});var cQt=s(QCe);T(sk.$$.fragment,cQt),cQt.forEach(t),dQt.forEach(t),JPr=i(MKe),WCe=n(MKe,"SPAN",{});var fQt=s(WCe);YPr=r(fQt,"TFAutoModelForSeq2SeqLM"),fQt.forEach(t),MKe.forEach(t),iJe=i(f),mr=n(f,"DIV",{class:!0});var si=s(mr);T(lk.$$.fragment,si),KPr=i(si),Kc=n(si,"P",{});var Lse=s(Kc);ZPr=r(Lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pee=n(Lse,"A",{href:!0});var mQt=s(pee);eBr=r(mQt,"from_pretrained()"),mQt.forEach(t),oBr=r(Lse," class method or the "),uee=n(Lse,"A",{href:!0});var gQt=s(uee);rBr=r(gQt,"from_config()"),gQt.forEach(t),tBr=r(Lse,` class
method.`),Lse.forEach(t),aBr=i(si),ik=n(si,"P",{});var EKe=s(ik);nBr=r(EKe,"This class cannot be instantiated directly using "),UCe=n(EKe,"CODE",{});var hQt=s(UCe);sBr=r(hQt,"__init__()"),hQt.forEach(t),lBr=r(EKe," (throws an error)."),EKe.forEach(t),iBr=i(si),Wt=n(si,"DIV",{class:!0});var Gy=s(Wt);T(dk.$$.fragment,Gy),dBr=i(Gy),HCe=n(Gy,"P",{});var pQt=s(HCe);cBr=r(pQt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pQt.forEach(t),fBr=i(Gy),Zc=n(Gy,"P",{});var xse=s(Zc);mBr=r(xse,`Note:
Loading a model from its configuration file does `),JCe=n(xse,"STRONG",{});var uQt=s(JCe);gBr=r(uQt,"not"),uQt.forEach(t),hBr=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(xse,"A",{href:!0});var _Qt=s(_ee);pBr=r(_Qt,"from_pretrained()"),_Qt.forEach(t),uBr=r(xse," to load the model weights."),xse.forEach(t),_Br=i(Gy),T(rC.$$.fragment,Gy),Gy.forEach(t),bBr=i(si),Gr=n(si,"DIV",{class:!0});var li=s(Gr);T(ck.$$.fragment,li),vBr=i(li),YCe=n(li,"P",{});var bQt=s(YCe);FBr=r(bQt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bQt.forEach(t),TBr=i(li),yn=n(li,"P",{});var Oy=s(yn);MBr=r(Oy,"The model class to instantiate is selected based on the "),KCe=n(Oy,"CODE",{});var vQt=s(KCe);EBr=r(vQt,"model_type"),vQt.forEach(t),CBr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),ZCe=n(Oy,"CODE",{});var FQt=s(ZCe);wBr=r(FQt,"pretrained_model_name_or_path"),FQt.forEach(t),ABr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e5e=n(Oy,"CODE",{});var TQt=s(e5e);yBr=r(TQt,"pretrained_model_name_or_path"),TQt.forEach(t),LBr=r(Oy,":"),Oy.forEach(t),xBr=i(li),Le=n(li,"UL",{});var Ie=s(Le);tC=n(Ie,"LI",{});var QXe=s(tC);o5e=n(QXe,"STRONG",{});var MQt=s(o5e);$Br=r(MQt,"bart"),MQt.forEach(t),kBr=r(QXe," \u2014 "),bee=n(QXe,"A",{href:!0});var EQt=s(bee);SBr=r(EQt,"TFBartForConditionalGeneration"),EQt.forEach(t),RBr=r(QXe," (BART model)"),QXe.forEach(t),PBr=i(Ie),aC=n(Ie,"LI",{});var WXe=s(aC);r5e=n(WXe,"STRONG",{});var CQt=s(r5e);BBr=r(CQt,"blenderbot"),CQt.forEach(t),IBr=r(WXe," \u2014 "),vee=n(WXe,"A",{href:!0});var wQt=s(vee);NBr=r(wQt,"TFBlenderbotForConditionalGeneration"),wQt.forEach(t),qBr=r(WXe," (Blenderbot model)"),WXe.forEach(t),jBr=i(Ie),nC=n(Ie,"LI",{});var UXe=s(nC);t5e=n(UXe,"STRONG",{});var AQt=s(t5e);DBr=r(AQt,"blenderbot-small"),AQt.forEach(t),GBr=r(UXe," \u2014 "),Fee=n(UXe,"A",{href:!0});var yQt=s(Fee);OBr=r(yQt,"TFBlenderbotSmallForConditionalGeneration"),yQt.forEach(t),VBr=r(UXe," (BlenderbotSmall model)"),UXe.forEach(t),XBr=i(Ie),sC=n(Ie,"LI",{});var HXe=s(sC);a5e=n(HXe,"STRONG",{});var LQt=s(a5e);zBr=r(LQt,"encoder-decoder"),LQt.forEach(t),QBr=r(HXe," \u2014 "),Tee=n(HXe,"A",{href:!0});var xQt=s(Tee);WBr=r(xQt,"TFEncoderDecoderModel"),xQt.forEach(t),UBr=r(HXe," (Encoder decoder model)"),HXe.forEach(t),HBr=i(Ie),lC=n(Ie,"LI",{});var JXe=s(lC);n5e=n(JXe,"STRONG",{});var $Qt=s(n5e);JBr=r($Qt,"led"),$Qt.forEach(t),YBr=r(JXe," \u2014 "),Mee=n(JXe,"A",{href:!0});var kQt=s(Mee);KBr=r(kQt,"TFLEDForConditionalGeneration"),kQt.forEach(t),ZBr=r(JXe," (LED model)"),JXe.forEach(t),eIr=i(Ie),iC=n(Ie,"LI",{});var YXe=s(iC);s5e=n(YXe,"STRONG",{});var SQt=s(s5e);oIr=r(SQt,"marian"),SQt.forEach(t),rIr=r(YXe," \u2014 "),Eee=n(YXe,"A",{href:!0});var RQt=s(Eee);tIr=r(RQt,"TFMarianMTModel"),RQt.forEach(t),aIr=r(YXe," (Marian model)"),YXe.forEach(t),nIr=i(Ie),dC=n(Ie,"LI",{});var KXe=s(dC);l5e=n(KXe,"STRONG",{});var PQt=s(l5e);sIr=r(PQt,"mbart"),PQt.forEach(t),lIr=r(KXe," \u2014 "),Cee=n(KXe,"A",{href:!0});var BQt=s(Cee);iIr=r(BQt,"TFMBartForConditionalGeneration"),BQt.forEach(t),dIr=r(KXe," (mBART model)"),KXe.forEach(t),cIr=i(Ie),cC=n(Ie,"LI",{});var ZXe=s(cC);i5e=n(ZXe,"STRONG",{});var IQt=s(i5e);fIr=r(IQt,"mt5"),IQt.forEach(t),mIr=r(ZXe," \u2014 "),wee=n(ZXe,"A",{href:!0});var NQt=s(wee);gIr=r(NQt,"TFMT5ForConditionalGeneration"),NQt.forEach(t),hIr=r(ZXe," (MT5 model)"),ZXe.forEach(t),pIr=i(Ie),fC=n(Ie,"LI",{});var eze=s(fC);d5e=n(eze,"STRONG",{});var qQt=s(d5e);uIr=r(qQt,"pegasus"),qQt.forEach(t),_Ir=r(eze," \u2014 "),Aee=n(eze,"A",{href:!0});var jQt=s(Aee);bIr=r(jQt,"TFPegasusForConditionalGeneration"),jQt.forEach(t),vIr=r(eze," (Pegasus model)"),eze.forEach(t),FIr=i(Ie),mC=n(Ie,"LI",{});var oze=s(mC);c5e=n(oze,"STRONG",{});var DQt=s(c5e);TIr=r(DQt,"t5"),DQt.forEach(t),MIr=r(oze," \u2014 "),yee=n(oze,"A",{href:!0});var GQt=s(yee);EIr=r(GQt,"TFT5ForConditionalGeneration"),GQt.forEach(t),CIr=r(oze," (T5 model)"),oze.forEach(t),Ie.forEach(t),wIr=i(li),T(gC.$$.fragment,li),li.forEach(t),si.forEach(t),dJe=i(f),ef=n(f,"H2",{class:!0});var CKe=s(ef);hC=n(CKe,"A",{id:!0,class:!0,href:!0});var OQt=s(hC);f5e=n(OQt,"SPAN",{});var VQt=s(f5e);T(fk.$$.fragment,VQt),VQt.forEach(t),OQt.forEach(t),AIr=i(CKe),m5e=n(CKe,"SPAN",{});var XQt=s(m5e);yIr=r(XQt,"TFAutoModelForSequenceClassification"),XQt.forEach(t),CKe.forEach(t),cJe=i(f),gr=n(f,"DIV",{class:!0});var ii=s(gr);T(mk.$$.fragment,ii),LIr=i(ii),of=n(ii,"P",{});var $se=s(of);xIr=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lee=n($se,"A",{href:!0});var zQt=s(Lee);$Ir=r(zQt,"from_pretrained()"),zQt.forEach(t),kIr=r($se," class method or the "),xee=n($se,"A",{href:!0});var QQt=s(xee);SIr=r(QQt,"from_config()"),QQt.forEach(t),RIr=r($se,` class
method.`),$se.forEach(t),PIr=i(ii),gk=n(ii,"P",{});var wKe=s(gk);BIr=r(wKe,"This class cannot be instantiated directly using "),g5e=n(wKe,"CODE",{});var WQt=s(g5e);IIr=r(WQt,"__init__()"),WQt.forEach(t),NIr=r(wKe," (throws an error)."),wKe.forEach(t),qIr=i(ii),Ut=n(ii,"DIV",{class:!0});var Vy=s(Ut);T(hk.$$.fragment,Vy),jIr=i(Vy),h5e=n(Vy,"P",{});var UQt=s(h5e);DIr=r(UQt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UQt.forEach(t),GIr=i(Vy),rf=n(Vy,"P",{});var kse=s(rf);OIr=r(kse,`Note:
Loading a model from its configuration file does `),p5e=n(kse,"STRONG",{});var HQt=s(p5e);VIr=r(HQt,"not"),HQt.forEach(t),XIr=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ee=n(kse,"A",{href:!0});var JQt=s($ee);zIr=r(JQt,"from_pretrained()"),JQt.forEach(t),QIr=r(kse," to load the model weights."),kse.forEach(t),WIr=i(Vy),T(pC.$$.fragment,Vy),Vy.forEach(t),UIr=i(ii),Or=n(ii,"DIV",{class:!0});var di=s(Or);T(pk.$$.fragment,di),HIr=i(di),u5e=n(di,"P",{});var YQt=s(u5e);JIr=r(YQt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YQt.forEach(t),YIr=i(di),Ln=n(di,"P",{});var Xy=s(Ln);KIr=r(Xy,"The model class to instantiate is selected based on the "),_5e=n(Xy,"CODE",{});var KQt=s(_5e);ZIr=r(KQt,"model_type"),KQt.forEach(t),eNr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),b5e=n(Xy,"CODE",{});var ZQt=s(b5e);oNr=r(ZQt,"pretrained_model_name_or_path"),ZQt.forEach(t),rNr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(Xy,"CODE",{});var eWt=s(v5e);tNr=r(eWt,"pretrained_model_name_or_path"),eWt.forEach(t),aNr=r(Xy,":"),Xy.forEach(t),nNr=i(di),te=n(di,"UL",{});var ne=s(te);uC=n(ne,"LI",{});var rze=s(uC);F5e=n(rze,"STRONG",{});var oWt=s(F5e);sNr=r(oWt,"albert"),oWt.forEach(t),lNr=r(rze," \u2014 "),kee=n(rze,"A",{href:!0});var rWt=s(kee);iNr=r(rWt,"TFAlbertForSequenceClassification"),rWt.forEach(t),dNr=r(rze," (ALBERT model)"),rze.forEach(t),cNr=i(ne),_C=n(ne,"LI",{});var tze=s(_C);T5e=n(tze,"STRONG",{});var tWt=s(T5e);fNr=r(tWt,"bert"),tWt.forEach(t),mNr=r(tze," \u2014 "),See=n(tze,"A",{href:!0});var aWt=s(See);gNr=r(aWt,"TFBertForSequenceClassification"),aWt.forEach(t),hNr=r(tze," (BERT model)"),tze.forEach(t),pNr=i(ne),bC=n(ne,"LI",{});var aze=s(bC);M5e=n(aze,"STRONG",{});var nWt=s(M5e);uNr=r(nWt,"camembert"),nWt.forEach(t),_Nr=r(aze," \u2014 "),Ree=n(aze,"A",{href:!0});var sWt=s(Ree);bNr=r(sWt,"TFCamembertForSequenceClassification"),sWt.forEach(t),vNr=r(aze," (CamemBERT model)"),aze.forEach(t),FNr=i(ne),vC=n(ne,"LI",{});var nze=s(vC);E5e=n(nze,"STRONG",{});var lWt=s(E5e);TNr=r(lWt,"convbert"),lWt.forEach(t),MNr=r(nze," \u2014 "),Pee=n(nze,"A",{href:!0});var iWt=s(Pee);ENr=r(iWt,"TFConvBertForSequenceClassification"),iWt.forEach(t),CNr=r(nze," (ConvBERT model)"),nze.forEach(t),wNr=i(ne),FC=n(ne,"LI",{});var sze=s(FC);C5e=n(sze,"STRONG",{});var dWt=s(C5e);ANr=r(dWt,"ctrl"),dWt.forEach(t),yNr=r(sze," \u2014 "),Bee=n(sze,"A",{href:!0});var cWt=s(Bee);LNr=r(cWt,"TFCTRLForSequenceClassification"),cWt.forEach(t),xNr=r(sze," (CTRL model)"),sze.forEach(t),$Nr=i(ne),TC=n(ne,"LI",{});var lze=s(TC);w5e=n(lze,"STRONG",{});var fWt=s(w5e);kNr=r(fWt,"deberta"),fWt.forEach(t),SNr=r(lze," \u2014 "),Iee=n(lze,"A",{href:!0});var mWt=s(Iee);RNr=r(mWt,"TFDebertaForSequenceClassification"),mWt.forEach(t),PNr=r(lze," (DeBERTa model)"),lze.forEach(t),BNr=i(ne),MC=n(ne,"LI",{});var ize=s(MC);A5e=n(ize,"STRONG",{});var gWt=s(A5e);INr=r(gWt,"deberta-v2"),gWt.forEach(t),NNr=r(ize," \u2014 "),Nee=n(ize,"A",{href:!0});var hWt=s(Nee);qNr=r(hWt,"TFDebertaV2ForSequenceClassification"),hWt.forEach(t),jNr=r(ize," (DeBERTa-v2 model)"),ize.forEach(t),DNr=i(ne),EC=n(ne,"LI",{});var dze=s(EC);y5e=n(dze,"STRONG",{});var pWt=s(y5e);GNr=r(pWt,"distilbert"),pWt.forEach(t),ONr=r(dze," \u2014 "),qee=n(dze,"A",{href:!0});var uWt=s(qee);VNr=r(uWt,"TFDistilBertForSequenceClassification"),uWt.forEach(t),XNr=r(dze," (DistilBERT model)"),dze.forEach(t),zNr=i(ne),CC=n(ne,"LI",{});var cze=s(CC);L5e=n(cze,"STRONG",{});var _Wt=s(L5e);QNr=r(_Wt,"electra"),_Wt.forEach(t),WNr=r(cze," \u2014 "),jee=n(cze,"A",{href:!0});var bWt=s(jee);UNr=r(bWt,"TFElectraForSequenceClassification"),bWt.forEach(t),HNr=r(cze," (ELECTRA model)"),cze.forEach(t),JNr=i(ne),wC=n(ne,"LI",{});var fze=s(wC);x5e=n(fze,"STRONG",{});var vWt=s(x5e);YNr=r(vWt,"flaubert"),vWt.forEach(t),KNr=r(fze," \u2014 "),Dee=n(fze,"A",{href:!0});var FWt=s(Dee);ZNr=r(FWt,"TFFlaubertForSequenceClassification"),FWt.forEach(t),eqr=r(fze," (FlauBERT model)"),fze.forEach(t),oqr=i(ne),AC=n(ne,"LI",{});var mze=s(AC);$5e=n(mze,"STRONG",{});var TWt=s($5e);rqr=r(TWt,"funnel"),TWt.forEach(t),tqr=r(mze," \u2014 "),Gee=n(mze,"A",{href:!0});var MWt=s(Gee);aqr=r(MWt,"TFFunnelForSequenceClassification"),MWt.forEach(t),nqr=r(mze," (Funnel Transformer model)"),mze.forEach(t),sqr=i(ne),yC=n(ne,"LI",{});var gze=s(yC);k5e=n(gze,"STRONG",{});var EWt=s(k5e);lqr=r(EWt,"gpt2"),EWt.forEach(t),iqr=r(gze," \u2014 "),Oee=n(gze,"A",{href:!0});var CWt=s(Oee);dqr=r(CWt,"TFGPT2ForSequenceClassification"),CWt.forEach(t),cqr=r(gze," (OpenAI GPT-2 model)"),gze.forEach(t),fqr=i(ne),LC=n(ne,"LI",{});var hze=s(LC);S5e=n(hze,"STRONG",{});var wWt=s(S5e);mqr=r(wWt,"gptj"),wWt.forEach(t),gqr=r(hze," \u2014 "),Vee=n(hze,"A",{href:!0});var AWt=s(Vee);hqr=r(AWt,"TFGPTJForSequenceClassification"),AWt.forEach(t),pqr=r(hze," (GPT-J model)"),hze.forEach(t),uqr=i(ne),xC=n(ne,"LI",{});var pze=s(xC);R5e=n(pze,"STRONG",{});var yWt=s(R5e);_qr=r(yWt,"layoutlm"),yWt.forEach(t),bqr=r(pze," \u2014 "),Xee=n(pze,"A",{href:!0});var LWt=s(Xee);vqr=r(LWt,"TFLayoutLMForSequenceClassification"),LWt.forEach(t),Fqr=r(pze," (LayoutLM model)"),pze.forEach(t),Tqr=i(ne),$C=n(ne,"LI",{});var uze=s($C);P5e=n(uze,"STRONG",{});var xWt=s(P5e);Mqr=r(xWt,"longformer"),xWt.forEach(t),Eqr=r(uze," \u2014 "),zee=n(uze,"A",{href:!0});var $Wt=s(zee);Cqr=r($Wt,"TFLongformerForSequenceClassification"),$Wt.forEach(t),wqr=r(uze," (Longformer model)"),uze.forEach(t),Aqr=i(ne),kC=n(ne,"LI",{});var _ze=s(kC);B5e=n(_ze,"STRONG",{});var kWt=s(B5e);yqr=r(kWt,"mobilebert"),kWt.forEach(t),Lqr=r(_ze," \u2014 "),Qee=n(_ze,"A",{href:!0});var SWt=s(Qee);xqr=r(SWt,"TFMobileBertForSequenceClassification"),SWt.forEach(t),$qr=r(_ze," (MobileBERT model)"),_ze.forEach(t),kqr=i(ne),SC=n(ne,"LI",{});var bze=s(SC);I5e=n(bze,"STRONG",{});var RWt=s(I5e);Sqr=r(RWt,"mpnet"),RWt.forEach(t),Rqr=r(bze," \u2014 "),Wee=n(bze,"A",{href:!0});var PWt=s(Wee);Pqr=r(PWt,"TFMPNetForSequenceClassification"),PWt.forEach(t),Bqr=r(bze," (MPNet model)"),bze.forEach(t),Iqr=i(ne),RC=n(ne,"LI",{});var vze=s(RC);N5e=n(vze,"STRONG",{});var BWt=s(N5e);Nqr=r(BWt,"openai-gpt"),BWt.forEach(t),qqr=r(vze," \u2014 "),Uee=n(vze,"A",{href:!0});var IWt=s(Uee);jqr=r(IWt,"TFOpenAIGPTForSequenceClassification"),IWt.forEach(t),Dqr=r(vze," (OpenAI GPT model)"),vze.forEach(t),Gqr=i(ne),PC=n(ne,"LI",{});var Fze=s(PC);q5e=n(Fze,"STRONG",{});var NWt=s(q5e);Oqr=r(NWt,"rembert"),NWt.forEach(t),Vqr=r(Fze," \u2014 "),Hee=n(Fze,"A",{href:!0});var qWt=s(Hee);Xqr=r(qWt,"TFRemBertForSequenceClassification"),qWt.forEach(t),zqr=r(Fze," (RemBERT model)"),Fze.forEach(t),Qqr=i(ne),BC=n(ne,"LI",{});var Tze=s(BC);j5e=n(Tze,"STRONG",{});var jWt=s(j5e);Wqr=r(jWt,"roberta"),jWt.forEach(t),Uqr=r(Tze," \u2014 "),Jee=n(Tze,"A",{href:!0});var DWt=s(Jee);Hqr=r(DWt,"TFRobertaForSequenceClassification"),DWt.forEach(t),Jqr=r(Tze," (RoBERTa model)"),Tze.forEach(t),Yqr=i(ne),IC=n(ne,"LI",{});var Mze=s(IC);D5e=n(Mze,"STRONG",{});var GWt=s(D5e);Kqr=r(GWt,"roformer"),GWt.forEach(t),Zqr=r(Mze," \u2014 "),Yee=n(Mze,"A",{href:!0});var OWt=s(Yee);ejr=r(OWt,"TFRoFormerForSequenceClassification"),OWt.forEach(t),ojr=r(Mze," (RoFormer model)"),Mze.forEach(t),rjr=i(ne),NC=n(ne,"LI",{});var Eze=s(NC);G5e=n(Eze,"STRONG",{});var VWt=s(G5e);tjr=r(VWt,"tapas"),VWt.forEach(t),ajr=r(Eze," \u2014 "),Kee=n(Eze,"A",{href:!0});var XWt=s(Kee);njr=r(XWt,"TFTapasForSequenceClassification"),XWt.forEach(t),sjr=r(Eze," (TAPAS model)"),Eze.forEach(t),ljr=i(ne),qC=n(ne,"LI",{});var Cze=s(qC);O5e=n(Cze,"STRONG",{});var zWt=s(O5e);ijr=r(zWt,"transfo-xl"),zWt.forEach(t),djr=r(Cze," \u2014 "),Zee=n(Cze,"A",{href:!0});var QWt=s(Zee);cjr=r(QWt,"TFTransfoXLForSequenceClassification"),QWt.forEach(t),fjr=r(Cze," (Transformer-XL model)"),Cze.forEach(t),mjr=i(ne),jC=n(ne,"LI",{});var wze=s(jC);V5e=n(wze,"STRONG",{});var WWt=s(V5e);gjr=r(WWt,"xlm"),WWt.forEach(t),hjr=r(wze," \u2014 "),eoe=n(wze,"A",{href:!0});var UWt=s(eoe);pjr=r(UWt,"TFXLMForSequenceClassification"),UWt.forEach(t),ujr=r(wze," (XLM model)"),wze.forEach(t),_jr=i(ne),DC=n(ne,"LI",{});var Aze=s(DC);X5e=n(Aze,"STRONG",{});var HWt=s(X5e);bjr=r(HWt,"xlm-roberta"),HWt.forEach(t),vjr=r(Aze," \u2014 "),ooe=n(Aze,"A",{href:!0});var JWt=s(ooe);Fjr=r(JWt,"TFXLMRobertaForSequenceClassification"),JWt.forEach(t),Tjr=r(Aze," (XLM-RoBERTa model)"),Aze.forEach(t),Mjr=i(ne),GC=n(ne,"LI",{});var yze=s(GC);z5e=n(yze,"STRONG",{});var YWt=s(z5e);Ejr=r(YWt,"xlnet"),YWt.forEach(t),Cjr=r(yze," \u2014 "),roe=n(yze,"A",{href:!0});var KWt=s(roe);wjr=r(KWt,"TFXLNetForSequenceClassification"),KWt.forEach(t),Ajr=r(yze," (XLNet model)"),yze.forEach(t),ne.forEach(t),yjr=i(di),T(OC.$$.fragment,di),di.forEach(t),ii.forEach(t),fJe=i(f),tf=n(f,"H2",{class:!0});var AKe=s(tf);VC=n(AKe,"A",{id:!0,class:!0,href:!0});var ZWt=s(VC);Q5e=n(ZWt,"SPAN",{});var eUt=s(Q5e);T(uk.$$.fragment,eUt),eUt.forEach(t),ZWt.forEach(t),Ljr=i(AKe),W5e=n(AKe,"SPAN",{});var oUt=s(W5e);xjr=r(oUt,"TFAutoModelForMultipleChoice"),oUt.forEach(t),AKe.forEach(t),mJe=i(f),hr=n(f,"DIV",{class:!0});var ci=s(hr);T(_k.$$.fragment,ci),$jr=i(ci),af=n(ci,"P",{});var Sse=s(af);kjr=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),toe=n(Sse,"A",{href:!0});var rUt=s(toe);Sjr=r(rUt,"from_pretrained()"),rUt.forEach(t),Rjr=r(Sse," class method or the "),aoe=n(Sse,"A",{href:!0});var tUt=s(aoe);Pjr=r(tUt,"from_config()"),tUt.forEach(t),Bjr=r(Sse,` class
method.`),Sse.forEach(t),Ijr=i(ci),bk=n(ci,"P",{});var yKe=s(bk);Njr=r(yKe,"This class cannot be instantiated directly using "),U5e=n(yKe,"CODE",{});var aUt=s(U5e);qjr=r(aUt,"__init__()"),aUt.forEach(t),jjr=r(yKe," (throws an error)."),yKe.forEach(t),Djr=i(ci),Ht=n(ci,"DIV",{class:!0});var zy=s(Ht);T(vk.$$.fragment,zy),Gjr=i(zy),H5e=n(zy,"P",{});var nUt=s(H5e);Ojr=r(nUt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nUt.forEach(t),Vjr=i(zy),nf=n(zy,"P",{});var Rse=s(nf);Xjr=r(Rse,`Note:
Loading a model from its configuration file does `),J5e=n(Rse,"STRONG",{});var sUt=s(J5e);zjr=r(sUt,"not"),sUt.forEach(t),Qjr=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),noe=n(Rse,"A",{href:!0});var lUt=s(noe);Wjr=r(lUt,"from_pretrained()"),lUt.forEach(t),Ujr=r(Rse," to load the model weights."),Rse.forEach(t),Hjr=i(zy),T(XC.$$.fragment,zy),zy.forEach(t),Jjr=i(ci),Vr=n(ci,"DIV",{class:!0});var fi=s(Vr);T(Fk.$$.fragment,fi),Yjr=i(fi),Y5e=n(fi,"P",{});var iUt=s(Y5e);Kjr=r(iUt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iUt.forEach(t),Zjr=i(fi),xn=n(fi,"P",{});var Qy=s(xn);eDr=r(Qy,"The model class to instantiate is selected based on the "),K5e=n(Qy,"CODE",{});var dUt=s(K5e);oDr=r(dUt,"model_type"),dUt.forEach(t),rDr=r(Qy,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(Qy,"CODE",{});var cUt=s(Z5e);tDr=r(cUt,"pretrained_model_name_or_path"),cUt.forEach(t),aDr=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(Qy,"CODE",{});var fUt=s(e0e);nDr=r(fUt,"pretrained_model_name_or_path"),fUt.forEach(t),sDr=r(Qy,":"),Qy.forEach(t),lDr=i(fi),ve=n(fi,"UL",{});var Te=s(ve);zC=n(Te,"LI",{});var Lze=s(zC);o0e=n(Lze,"STRONG",{});var mUt=s(o0e);iDr=r(mUt,"albert"),mUt.forEach(t),dDr=r(Lze," \u2014 "),soe=n(Lze,"A",{href:!0});var gUt=s(soe);cDr=r(gUt,"TFAlbertForMultipleChoice"),gUt.forEach(t),fDr=r(Lze," (ALBERT model)"),Lze.forEach(t),mDr=i(Te),QC=n(Te,"LI",{});var xze=s(QC);r0e=n(xze,"STRONG",{});var hUt=s(r0e);gDr=r(hUt,"bert"),hUt.forEach(t),hDr=r(xze," \u2014 "),loe=n(xze,"A",{href:!0});var pUt=s(loe);pDr=r(pUt,"TFBertForMultipleChoice"),pUt.forEach(t),uDr=r(xze," (BERT model)"),xze.forEach(t),_Dr=i(Te),WC=n(Te,"LI",{});var $ze=s(WC);t0e=n($ze,"STRONG",{});var uUt=s(t0e);bDr=r(uUt,"camembert"),uUt.forEach(t),vDr=r($ze," \u2014 "),ioe=n($ze,"A",{href:!0});var _Ut=s(ioe);FDr=r(_Ut,"TFCamembertForMultipleChoice"),_Ut.forEach(t),TDr=r($ze," (CamemBERT model)"),$ze.forEach(t),MDr=i(Te),UC=n(Te,"LI",{});var kze=s(UC);a0e=n(kze,"STRONG",{});var bUt=s(a0e);EDr=r(bUt,"convbert"),bUt.forEach(t),CDr=r(kze," \u2014 "),doe=n(kze,"A",{href:!0});var vUt=s(doe);wDr=r(vUt,"TFConvBertForMultipleChoice"),vUt.forEach(t),ADr=r(kze," (ConvBERT model)"),kze.forEach(t),yDr=i(Te),HC=n(Te,"LI",{});var Sze=s(HC);n0e=n(Sze,"STRONG",{});var FUt=s(n0e);LDr=r(FUt,"distilbert"),FUt.forEach(t),xDr=r(Sze," \u2014 "),coe=n(Sze,"A",{href:!0});var TUt=s(coe);$Dr=r(TUt,"TFDistilBertForMultipleChoice"),TUt.forEach(t),kDr=r(Sze," (DistilBERT model)"),Sze.forEach(t),SDr=i(Te),JC=n(Te,"LI",{});var Rze=s(JC);s0e=n(Rze,"STRONG",{});var MUt=s(s0e);RDr=r(MUt,"electra"),MUt.forEach(t),PDr=r(Rze," \u2014 "),foe=n(Rze,"A",{href:!0});var EUt=s(foe);BDr=r(EUt,"TFElectraForMultipleChoice"),EUt.forEach(t),IDr=r(Rze," (ELECTRA model)"),Rze.forEach(t),NDr=i(Te),YC=n(Te,"LI",{});var Pze=s(YC);l0e=n(Pze,"STRONG",{});var CUt=s(l0e);qDr=r(CUt,"flaubert"),CUt.forEach(t),jDr=r(Pze," \u2014 "),moe=n(Pze,"A",{href:!0});var wUt=s(moe);DDr=r(wUt,"TFFlaubertForMultipleChoice"),wUt.forEach(t),GDr=r(Pze," (FlauBERT model)"),Pze.forEach(t),ODr=i(Te),KC=n(Te,"LI",{});var Bze=s(KC);i0e=n(Bze,"STRONG",{});var AUt=s(i0e);VDr=r(AUt,"funnel"),AUt.forEach(t),XDr=r(Bze," \u2014 "),goe=n(Bze,"A",{href:!0});var yUt=s(goe);zDr=r(yUt,"TFFunnelForMultipleChoice"),yUt.forEach(t),QDr=r(Bze," (Funnel Transformer model)"),Bze.forEach(t),WDr=i(Te),ZC=n(Te,"LI",{});var Ize=s(ZC);d0e=n(Ize,"STRONG",{});var LUt=s(d0e);UDr=r(LUt,"longformer"),LUt.forEach(t),HDr=r(Ize," \u2014 "),hoe=n(Ize,"A",{href:!0});var xUt=s(hoe);JDr=r(xUt,"TFLongformerForMultipleChoice"),xUt.forEach(t),YDr=r(Ize," (Longformer model)"),Ize.forEach(t),KDr=i(Te),e5=n(Te,"LI",{});var Nze=s(e5);c0e=n(Nze,"STRONG",{});var $Ut=s(c0e);ZDr=r($Ut,"mobilebert"),$Ut.forEach(t),eGr=r(Nze," \u2014 "),poe=n(Nze,"A",{href:!0});var kUt=s(poe);oGr=r(kUt,"TFMobileBertForMultipleChoice"),kUt.forEach(t),rGr=r(Nze," (MobileBERT model)"),Nze.forEach(t),tGr=i(Te),o5=n(Te,"LI",{});var qze=s(o5);f0e=n(qze,"STRONG",{});var SUt=s(f0e);aGr=r(SUt,"mpnet"),SUt.forEach(t),nGr=r(qze," \u2014 "),uoe=n(qze,"A",{href:!0});var RUt=s(uoe);sGr=r(RUt,"TFMPNetForMultipleChoice"),RUt.forEach(t),lGr=r(qze," (MPNet model)"),qze.forEach(t),iGr=i(Te),r5=n(Te,"LI",{});var jze=s(r5);m0e=n(jze,"STRONG",{});var PUt=s(m0e);dGr=r(PUt,"rembert"),PUt.forEach(t),cGr=r(jze," \u2014 "),_oe=n(jze,"A",{href:!0});var BUt=s(_oe);fGr=r(BUt,"TFRemBertForMultipleChoice"),BUt.forEach(t),mGr=r(jze," (RemBERT model)"),jze.forEach(t),gGr=i(Te),t5=n(Te,"LI",{});var Dze=s(t5);g0e=n(Dze,"STRONG",{});var IUt=s(g0e);hGr=r(IUt,"roberta"),IUt.forEach(t),pGr=r(Dze," \u2014 "),boe=n(Dze,"A",{href:!0});var NUt=s(boe);uGr=r(NUt,"TFRobertaForMultipleChoice"),NUt.forEach(t),_Gr=r(Dze," (RoBERTa model)"),Dze.forEach(t),bGr=i(Te),a5=n(Te,"LI",{});var Gze=s(a5);h0e=n(Gze,"STRONG",{});var qUt=s(h0e);vGr=r(qUt,"roformer"),qUt.forEach(t),FGr=r(Gze," \u2014 "),voe=n(Gze,"A",{href:!0});var jUt=s(voe);TGr=r(jUt,"TFRoFormerForMultipleChoice"),jUt.forEach(t),MGr=r(Gze," (RoFormer model)"),Gze.forEach(t),EGr=i(Te),n5=n(Te,"LI",{});var Oze=s(n5);p0e=n(Oze,"STRONG",{});var DUt=s(p0e);CGr=r(DUt,"xlm"),DUt.forEach(t),wGr=r(Oze," \u2014 "),Foe=n(Oze,"A",{href:!0});var GUt=s(Foe);AGr=r(GUt,"TFXLMForMultipleChoice"),GUt.forEach(t),yGr=r(Oze," (XLM model)"),Oze.forEach(t),LGr=i(Te),s5=n(Te,"LI",{});var Vze=s(s5);u0e=n(Vze,"STRONG",{});var OUt=s(u0e);xGr=r(OUt,"xlm-roberta"),OUt.forEach(t),$Gr=r(Vze," \u2014 "),Toe=n(Vze,"A",{href:!0});var VUt=s(Toe);kGr=r(VUt,"TFXLMRobertaForMultipleChoice"),VUt.forEach(t),SGr=r(Vze," (XLM-RoBERTa model)"),Vze.forEach(t),RGr=i(Te),l5=n(Te,"LI",{});var Xze=s(l5);_0e=n(Xze,"STRONG",{});var XUt=s(_0e);PGr=r(XUt,"xlnet"),XUt.forEach(t),BGr=r(Xze," \u2014 "),Moe=n(Xze,"A",{href:!0});var zUt=s(Moe);IGr=r(zUt,"TFXLNetForMultipleChoice"),zUt.forEach(t),NGr=r(Xze," (XLNet model)"),Xze.forEach(t),Te.forEach(t),qGr=i(fi),T(i5.$$.fragment,fi),fi.forEach(t),ci.forEach(t),gJe=i(f),sf=n(f,"H2",{class:!0});var LKe=s(sf);d5=n(LKe,"A",{id:!0,class:!0,href:!0});var QUt=s(d5);b0e=n(QUt,"SPAN",{});var WUt=s(b0e);T(Tk.$$.fragment,WUt),WUt.forEach(t),QUt.forEach(t),jGr=i(LKe),v0e=n(LKe,"SPAN",{});var UUt=s(v0e);DGr=r(UUt,"TFAutoModelForNextSentencePrediction"),UUt.forEach(t),LKe.forEach(t),hJe=i(f),pr=n(f,"DIV",{class:!0});var mi=s(pr);T(Mk.$$.fragment,mi),GGr=i(mi),lf=n(mi,"P",{});var Pse=s(lf);OGr=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Eoe=n(Pse,"A",{href:!0});var HUt=s(Eoe);VGr=r(HUt,"from_pretrained()"),HUt.forEach(t),XGr=r(Pse," class method or the "),Coe=n(Pse,"A",{href:!0});var JUt=s(Coe);zGr=r(JUt,"from_config()"),JUt.forEach(t),QGr=r(Pse,` class
method.`),Pse.forEach(t),WGr=i(mi),Ek=n(mi,"P",{});var xKe=s(Ek);UGr=r(xKe,"This class cannot be instantiated directly using "),F0e=n(xKe,"CODE",{});var YUt=s(F0e);HGr=r(YUt,"__init__()"),YUt.forEach(t),JGr=r(xKe," (throws an error)."),xKe.forEach(t),YGr=i(mi),Jt=n(mi,"DIV",{class:!0});var Wy=s(Jt);T(Ck.$$.fragment,Wy),KGr=i(Wy),T0e=n(Wy,"P",{});var KUt=s(T0e);ZGr=r(KUt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),KUt.forEach(t),eOr=i(Wy),df=n(Wy,"P",{});var Bse=s(df);oOr=r(Bse,`Note:
Loading a model from its configuration file does `),M0e=n(Bse,"STRONG",{});var ZUt=s(M0e);rOr=r(ZUt,"not"),ZUt.forEach(t),tOr=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),woe=n(Bse,"A",{href:!0});var eHt=s(woe);aOr=r(eHt,"from_pretrained()"),eHt.forEach(t),nOr=r(Bse," to load the model weights."),Bse.forEach(t),sOr=i(Wy),T(c5.$$.fragment,Wy),Wy.forEach(t),lOr=i(mi),Xr=n(mi,"DIV",{class:!0});var gi=s(Xr);T(wk.$$.fragment,gi),iOr=i(gi),E0e=n(gi,"P",{});var oHt=s(E0e);dOr=r(oHt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oHt.forEach(t),cOr=i(gi),$n=n(gi,"P",{});var Uy=s($n);fOr=r(Uy,"The model class to instantiate is selected based on the "),C0e=n(Uy,"CODE",{});var rHt=s(C0e);mOr=r(rHt,"model_type"),rHt.forEach(t),gOr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),w0e=n(Uy,"CODE",{});var tHt=s(w0e);hOr=r(tHt,"pretrained_model_name_or_path"),tHt.forEach(t),pOr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=n(Uy,"CODE",{});var aHt=s(A0e);uOr=r(aHt,"pretrained_model_name_or_path"),aHt.forEach(t),_Or=r(Uy,":"),Uy.forEach(t),bOr=i(gi),Ak=n(gi,"UL",{});var $Ke=s(Ak);f5=n($Ke,"LI",{});var zze=s(f5);y0e=n(zze,"STRONG",{});var nHt=s(y0e);vOr=r(nHt,"bert"),nHt.forEach(t),FOr=r(zze," \u2014 "),Aoe=n(zze,"A",{href:!0});var sHt=s(Aoe);TOr=r(sHt,"TFBertForNextSentencePrediction"),sHt.forEach(t),MOr=r(zze," (BERT model)"),zze.forEach(t),EOr=i($Ke),m5=n($Ke,"LI",{});var Qze=s(m5);L0e=n(Qze,"STRONG",{});var lHt=s(L0e);COr=r(lHt,"mobilebert"),lHt.forEach(t),wOr=r(Qze," \u2014 "),yoe=n(Qze,"A",{href:!0});var iHt=s(yoe);AOr=r(iHt,"TFMobileBertForNextSentencePrediction"),iHt.forEach(t),yOr=r(Qze," (MobileBERT model)"),Qze.forEach(t),$Ke.forEach(t),LOr=i(gi),T(g5.$$.fragment,gi),gi.forEach(t),mi.forEach(t),pJe=i(f),cf=n(f,"H2",{class:!0});var kKe=s(cf);h5=n(kKe,"A",{id:!0,class:!0,href:!0});var dHt=s(h5);x0e=n(dHt,"SPAN",{});var cHt=s(x0e);T(yk.$$.fragment,cHt),cHt.forEach(t),dHt.forEach(t),xOr=i(kKe),$0e=n(kKe,"SPAN",{});var fHt=s($0e);$Or=r(fHt,"TFAutoModelForTableQuestionAnswering"),fHt.forEach(t),kKe.forEach(t),uJe=i(f),ur=n(f,"DIV",{class:!0});var hi=s(ur);T(Lk.$$.fragment,hi),kOr=i(hi),ff=n(hi,"P",{});var Ise=s(ff);SOr=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Loe=n(Ise,"A",{href:!0});var mHt=s(Loe);ROr=r(mHt,"from_pretrained()"),mHt.forEach(t),POr=r(Ise," class method or the "),xoe=n(Ise,"A",{href:!0});var gHt=s(xoe);BOr=r(gHt,"from_config()"),gHt.forEach(t),IOr=r(Ise,` class
method.`),Ise.forEach(t),NOr=i(hi),xk=n(hi,"P",{});var SKe=s(xk);qOr=r(SKe,"This class cannot be instantiated directly using "),k0e=n(SKe,"CODE",{});var hHt=s(k0e);jOr=r(hHt,"__init__()"),hHt.forEach(t),DOr=r(SKe," (throws an error)."),SKe.forEach(t),GOr=i(hi),Yt=n(hi,"DIV",{class:!0});var Hy=s(Yt);T($k.$$.fragment,Hy),OOr=i(Hy),S0e=n(Hy,"P",{});var pHt=s(S0e);VOr=r(pHt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pHt.forEach(t),XOr=i(Hy),mf=n(Hy,"P",{});var Nse=s(mf);zOr=r(Nse,`Note:
Loading a model from its configuration file does `),R0e=n(Nse,"STRONG",{});var uHt=s(R0e);QOr=r(uHt,"not"),uHt.forEach(t),WOr=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$oe=n(Nse,"A",{href:!0});var _Ht=s($oe);UOr=r(_Ht,"from_pretrained()"),_Ht.forEach(t),HOr=r(Nse," to load the model weights."),Nse.forEach(t),JOr=i(Hy),T(p5.$$.fragment,Hy),Hy.forEach(t),YOr=i(hi),zr=n(hi,"DIV",{class:!0});var pi=s(zr);T(kk.$$.fragment,pi),KOr=i(pi),P0e=n(pi,"P",{});var bHt=s(P0e);ZOr=r(bHt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),bHt.forEach(t),eVr=i(pi),kn=n(pi,"P",{});var Jy=s(kn);oVr=r(Jy,"The model class to instantiate is selected based on the "),B0e=n(Jy,"CODE",{});var vHt=s(B0e);rVr=r(vHt,"model_type"),vHt.forEach(t),tVr=r(Jy,` property of the config object (either
passed as an argument or loaded from `),I0e=n(Jy,"CODE",{});var FHt=s(I0e);aVr=r(FHt,"pretrained_model_name_or_path"),FHt.forEach(t),nVr=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N0e=n(Jy,"CODE",{});var THt=s(N0e);sVr=r(THt,"pretrained_model_name_or_path"),THt.forEach(t),lVr=r(Jy,":"),Jy.forEach(t),iVr=i(pi),q0e=n(pi,"UL",{});var MHt=s(q0e);u5=n(MHt,"LI",{});var Wze=s(u5);j0e=n(Wze,"STRONG",{});var EHt=s(j0e);dVr=r(EHt,"tapas"),EHt.forEach(t),cVr=r(Wze," \u2014 "),koe=n(Wze,"A",{href:!0});var CHt=s(koe);fVr=r(CHt,"TFTapasForQuestionAnswering"),CHt.forEach(t),mVr=r(Wze," (TAPAS model)"),Wze.forEach(t),MHt.forEach(t),gVr=i(pi),T(_5.$$.fragment,pi),pi.forEach(t),hi.forEach(t),_Je=i(f),gf=n(f,"H2",{class:!0});var RKe=s(gf);b5=n(RKe,"A",{id:!0,class:!0,href:!0});var wHt=s(b5);D0e=n(wHt,"SPAN",{});var AHt=s(D0e);T(Sk.$$.fragment,AHt),AHt.forEach(t),wHt.forEach(t),hVr=i(RKe),G0e=n(RKe,"SPAN",{});var yHt=s(G0e);pVr=r(yHt,"TFAutoModelForTokenClassification"),yHt.forEach(t),RKe.forEach(t),bJe=i(f),_r=n(f,"DIV",{class:!0});var ui=s(_r);T(Rk.$$.fragment,ui),uVr=i(ui),hf=n(ui,"P",{});var qse=s(hf);_Vr=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Soe=n(qse,"A",{href:!0});var LHt=s(Soe);bVr=r(LHt,"from_pretrained()"),LHt.forEach(t),vVr=r(qse," class method or the "),Roe=n(qse,"A",{href:!0});var xHt=s(Roe);FVr=r(xHt,"from_config()"),xHt.forEach(t),TVr=r(qse,` class
method.`),qse.forEach(t),MVr=i(ui),Pk=n(ui,"P",{});var PKe=s(Pk);EVr=r(PKe,"This class cannot be instantiated directly using "),O0e=n(PKe,"CODE",{});var $Ht=s(O0e);CVr=r($Ht,"__init__()"),$Ht.forEach(t),wVr=r(PKe," (throws an error)."),PKe.forEach(t),AVr=i(ui),Kt=n(ui,"DIV",{class:!0});var Yy=s(Kt);T(Bk.$$.fragment,Yy),yVr=i(Yy),V0e=n(Yy,"P",{});var kHt=s(V0e);LVr=r(kHt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kHt.forEach(t),xVr=i(Yy),pf=n(Yy,"P",{});var jse=s(pf);$Vr=r(jse,`Note:
Loading a model from its configuration file does `),X0e=n(jse,"STRONG",{});var SHt=s(X0e);kVr=r(SHt,"not"),SHt.forEach(t),SVr=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Poe=n(jse,"A",{href:!0});var RHt=s(Poe);RVr=r(RHt,"from_pretrained()"),RHt.forEach(t),PVr=r(jse," to load the model weights."),jse.forEach(t),BVr=i(Yy),T(v5.$$.fragment,Yy),Yy.forEach(t),IVr=i(ui),Qr=n(ui,"DIV",{class:!0});var _i=s(Qr);T(Ik.$$.fragment,_i),NVr=i(_i),z0e=n(_i,"P",{});var PHt=s(z0e);qVr=r(PHt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),PHt.forEach(t),jVr=i(_i),Sn=n(_i,"P",{});var Ky=s(Sn);DVr=r(Ky,"The model class to instantiate is selected based on the "),Q0e=n(Ky,"CODE",{});var BHt=s(Q0e);GVr=r(BHt,"model_type"),BHt.forEach(t),OVr=r(Ky,` property of the config object (either
passed as an argument or loaded from `),W0e=n(Ky,"CODE",{});var IHt=s(W0e);VVr=r(IHt,"pretrained_model_name_or_path"),IHt.forEach(t),XVr=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U0e=n(Ky,"CODE",{});var NHt=s(U0e);zVr=r(NHt,"pretrained_model_name_or_path"),NHt.forEach(t),QVr=r(Ky,":"),Ky.forEach(t),WVr=i(_i),ce=n(_i,"UL",{});var pe=s(ce);F5=n(pe,"LI",{});var Uze=s(F5);H0e=n(Uze,"STRONG",{});var qHt=s(H0e);UVr=r(qHt,"albert"),qHt.forEach(t),HVr=r(Uze," \u2014 "),Boe=n(Uze,"A",{href:!0});var jHt=s(Boe);JVr=r(jHt,"TFAlbertForTokenClassification"),jHt.forEach(t),YVr=r(Uze," (ALBERT model)"),Uze.forEach(t),KVr=i(pe),T5=n(pe,"LI",{});var Hze=s(T5);J0e=n(Hze,"STRONG",{});var DHt=s(J0e);ZVr=r(DHt,"bert"),DHt.forEach(t),eXr=r(Hze," \u2014 "),Ioe=n(Hze,"A",{href:!0});var GHt=s(Ioe);oXr=r(GHt,"TFBertForTokenClassification"),GHt.forEach(t),rXr=r(Hze," (BERT model)"),Hze.forEach(t),tXr=i(pe),M5=n(pe,"LI",{});var Jze=s(M5);Y0e=n(Jze,"STRONG",{});var OHt=s(Y0e);aXr=r(OHt,"camembert"),OHt.forEach(t),nXr=r(Jze," \u2014 "),Noe=n(Jze,"A",{href:!0});var VHt=s(Noe);sXr=r(VHt,"TFCamembertForTokenClassification"),VHt.forEach(t),lXr=r(Jze," (CamemBERT model)"),Jze.forEach(t),iXr=i(pe),E5=n(pe,"LI",{});var Yze=s(E5);K0e=n(Yze,"STRONG",{});var XHt=s(K0e);dXr=r(XHt,"convbert"),XHt.forEach(t),cXr=r(Yze," \u2014 "),qoe=n(Yze,"A",{href:!0});var zHt=s(qoe);fXr=r(zHt,"TFConvBertForTokenClassification"),zHt.forEach(t),mXr=r(Yze," (ConvBERT model)"),Yze.forEach(t),gXr=i(pe),C5=n(pe,"LI",{});var Kze=s(C5);Z0e=n(Kze,"STRONG",{});var QHt=s(Z0e);hXr=r(QHt,"deberta"),QHt.forEach(t),pXr=r(Kze," \u2014 "),joe=n(Kze,"A",{href:!0});var WHt=s(joe);uXr=r(WHt,"TFDebertaForTokenClassification"),WHt.forEach(t),_Xr=r(Kze," (DeBERTa model)"),Kze.forEach(t),bXr=i(pe),w5=n(pe,"LI",{});var Zze=s(w5);ewe=n(Zze,"STRONG",{});var UHt=s(ewe);vXr=r(UHt,"deberta-v2"),UHt.forEach(t),FXr=r(Zze," \u2014 "),Doe=n(Zze,"A",{href:!0});var HHt=s(Doe);TXr=r(HHt,"TFDebertaV2ForTokenClassification"),HHt.forEach(t),MXr=r(Zze," (DeBERTa-v2 model)"),Zze.forEach(t),EXr=i(pe),A5=n(pe,"LI",{});var eQe=s(A5);owe=n(eQe,"STRONG",{});var JHt=s(owe);CXr=r(JHt,"distilbert"),JHt.forEach(t),wXr=r(eQe," \u2014 "),Goe=n(eQe,"A",{href:!0});var YHt=s(Goe);AXr=r(YHt,"TFDistilBertForTokenClassification"),YHt.forEach(t),yXr=r(eQe," (DistilBERT model)"),eQe.forEach(t),LXr=i(pe),y5=n(pe,"LI",{});var oQe=s(y5);rwe=n(oQe,"STRONG",{});var KHt=s(rwe);xXr=r(KHt,"electra"),KHt.forEach(t),$Xr=r(oQe," \u2014 "),Ooe=n(oQe,"A",{href:!0});var ZHt=s(Ooe);kXr=r(ZHt,"TFElectraForTokenClassification"),ZHt.forEach(t),SXr=r(oQe," (ELECTRA model)"),oQe.forEach(t),RXr=i(pe),L5=n(pe,"LI",{});var rQe=s(L5);twe=n(rQe,"STRONG",{});var eJt=s(twe);PXr=r(eJt,"flaubert"),eJt.forEach(t),BXr=r(rQe," \u2014 "),Voe=n(rQe,"A",{href:!0});var oJt=s(Voe);IXr=r(oJt,"TFFlaubertForTokenClassification"),oJt.forEach(t),NXr=r(rQe," (FlauBERT model)"),rQe.forEach(t),qXr=i(pe),x5=n(pe,"LI",{});var tQe=s(x5);awe=n(tQe,"STRONG",{});var rJt=s(awe);jXr=r(rJt,"funnel"),rJt.forEach(t),DXr=r(tQe," \u2014 "),Xoe=n(tQe,"A",{href:!0});var tJt=s(Xoe);GXr=r(tJt,"TFFunnelForTokenClassification"),tJt.forEach(t),OXr=r(tQe," (Funnel Transformer model)"),tQe.forEach(t),VXr=i(pe),$5=n(pe,"LI",{});var aQe=s($5);nwe=n(aQe,"STRONG",{});var aJt=s(nwe);XXr=r(aJt,"layoutlm"),aJt.forEach(t),zXr=r(aQe," \u2014 "),zoe=n(aQe,"A",{href:!0});var nJt=s(zoe);QXr=r(nJt,"TFLayoutLMForTokenClassification"),nJt.forEach(t),WXr=r(aQe," (LayoutLM model)"),aQe.forEach(t),UXr=i(pe),k5=n(pe,"LI",{});var nQe=s(k5);swe=n(nQe,"STRONG",{});var sJt=s(swe);HXr=r(sJt,"longformer"),sJt.forEach(t),JXr=r(nQe," \u2014 "),Qoe=n(nQe,"A",{href:!0});var lJt=s(Qoe);YXr=r(lJt,"TFLongformerForTokenClassification"),lJt.forEach(t),KXr=r(nQe," (Longformer model)"),nQe.forEach(t),ZXr=i(pe),S5=n(pe,"LI",{});var sQe=s(S5);lwe=n(sQe,"STRONG",{});var iJt=s(lwe);ezr=r(iJt,"mobilebert"),iJt.forEach(t),ozr=r(sQe," \u2014 "),Woe=n(sQe,"A",{href:!0});var dJt=s(Woe);rzr=r(dJt,"TFMobileBertForTokenClassification"),dJt.forEach(t),tzr=r(sQe," (MobileBERT model)"),sQe.forEach(t),azr=i(pe),R5=n(pe,"LI",{});var lQe=s(R5);iwe=n(lQe,"STRONG",{});var cJt=s(iwe);nzr=r(cJt,"mpnet"),cJt.forEach(t),szr=r(lQe," \u2014 "),Uoe=n(lQe,"A",{href:!0});var fJt=s(Uoe);lzr=r(fJt,"TFMPNetForTokenClassification"),fJt.forEach(t),izr=r(lQe," (MPNet model)"),lQe.forEach(t),dzr=i(pe),P5=n(pe,"LI",{});var iQe=s(P5);dwe=n(iQe,"STRONG",{});var mJt=s(dwe);czr=r(mJt,"rembert"),mJt.forEach(t),fzr=r(iQe," \u2014 "),Hoe=n(iQe,"A",{href:!0});var gJt=s(Hoe);mzr=r(gJt,"TFRemBertForTokenClassification"),gJt.forEach(t),gzr=r(iQe," (RemBERT model)"),iQe.forEach(t),hzr=i(pe),B5=n(pe,"LI",{});var dQe=s(B5);cwe=n(dQe,"STRONG",{});var hJt=s(cwe);pzr=r(hJt,"roberta"),hJt.forEach(t),uzr=r(dQe," \u2014 "),Joe=n(dQe,"A",{href:!0});var pJt=s(Joe);_zr=r(pJt,"TFRobertaForTokenClassification"),pJt.forEach(t),bzr=r(dQe," (RoBERTa model)"),dQe.forEach(t),vzr=i(pe),I5=n(pe,"LI",{});var cQe=s(I5);fwe=n(cQe,"STRONG",{});var uJt=s(fwe);Fzr=r(uJt,"roformer"),uJt.forEach(t),Tzr=r(cQe," \u2014 "),Yoe=n(cQe,"A",{href:!0});var _Jt=s(Yoe);Mzr=r(_Jt,"TFRoFormerForTokenClassification"),_Jt.forEach(t),Ezr=r(cQe," (RoFormer model)"),cQe.forEach(t),Czr=i(pe),N5=n(pe,"LI",{});var fQe=s(N5);mwe=n(fQe,"STRONG",{});var bJt=s(mwe);wzr=r(bJt,"xlm"),bJt.forEach(t),Azr=r(fQe," \u2014 "),Koe=n(fQe,"A",{href:!0});var vJt=s(Koe);yzr=r(vJt,"TFXLMForTokenClassification"),vJt.forEach(t),Lzr=r(fQe," (XLM model)"),fQe.forEach(t),xzr=i(pe),q5=n(pe,"LI",{});var mQe=s(q5);gwe=n(mQe,"STRONG",{});var FJt=s(gwe);$zr=r(FJt,"xlm-roberta"),FJt.forEach(t),kzr=r(mQe," \u2014 "),Zoe=n(mQe,"A",{href:!0});var TJt=s(Zoe);Szr=r(TJt,"TFXLMRobertaForTokenClassification"),TJt.forEach(t),Rzr=r(mQe," (XLM-RoBERTa model)"),mQe.forEach(t),Pzr=i(pe),j5=n(pe,"LI",{});var gQe=s(j5);hwe=n(gQe,"STRONG",{});var MJt=s(hwe);Bzr=r(MJt,"xlnet"),MJt.forEach(t),Izr=r(gQe," \u2014 "),ere=n(gQe,"A",{href:!0});var EJt=s(ere);Nzr=r(EJt,"TFXLNetForTokenClassification"),EJt.forEach(t),qzr=r(gQe," (XLNet model)"),gQe.forEach(t),pe.forEach(t),jzr=i(_i),T(D5.$$.fragment,_i),_i.forEach(t),ui.forEach(t),vJe=i(f),uf=n(f,"H2",{class:!0});var BKe=s(uf);G5=n(BKe,"A",{id:!0,class:!0,href:!0});var CJt=s(G5);pwe=n(CJt,"SPAN",{});var wJt=s(pwe);T(Nk.$$.fragment,wJt),wJt.forEach(t),CJt.forEach(t),Dzr=i(BKe),uwe=n(BKe,"SPAN",{});var AJt=s(uwe);Gzr=r(AJt,"TFAutoModelForQuestionAnswering"),AJt.forEach(t),BKe.forEach(t),FJe=i(f),br=n(f,"DIV",{class:!0});var bi=s(br);T(qk.$$.fragment,bi),Ozr=i(bi),_f=n(bi,"P",{});var Dse=s(_f);Vzr=r(Dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ore=n(Dse,"A",{href:!0});var yJt=s(ore);Xzr=r(yJt,"from_pretrained()"),yJt.forEach(t),zzr=r(Dse," class method or the "),rre=n(Dse,"A",{href:!0});var LJt=s(rre);Qzr=r(LJt,"from_config()"),LJt.forEach(t),Wzr=r(Dse,` class
method.`),Dse.forEach(t),Uzr=i(bi),jk=n(bi,"P",{});var IKe=s(jk);Hzr=r(IKe,"This class cannot be instantiated directly using "),_we=n(IKe,"CODE",{});var xJt=s(_we);Jzr=r(xJt,"__init__()"),xJt.forEach(t),Yzr=r(IKe," (throws an error)."),IKe.forEach(t),Kzr=i(bi),Zt=n(bi,"DIV",{class:!0});var Zy=s(Zt);T(Dk.$$.fragment,Zy),Zzr=i(Zy),bwe=n(Zy,"P",{});var $Jt=s(bwe);eQr=r($Jt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Jt.forEach(t),oQr=i(Zy),bf=n(Zy,"P",{});var Gse=s(bf);rQr=r(Gse,`Note:
Loading a model from its configuration file does `),vwe=n(Gse,"STRONG",{});var kJt=s(vwe);tQr=r(kJt,"not"),kJt.forEach(t),aQr=r(Gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tre=n(Gse,"A",{href:!0});var SJt=s(tre);nQr=r(SJt,"from_pretrained()"),SJt.forEach(t),sQr=r(Gse," to load the model weights."),Gse.forEach(t),lQr=i(Zy),T(O5.$$.fragment,Zy),Zy.forEach(t),iQr=i(bi),Wr=n(bi,"DIV",{class:!0});var vi=s(Wr);T(Gk.$$.fragment,vi),dQr=i(vi),Fwe=n(vi,"P",{});var RJt=s(Fwe);cQr=r(RJt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RJt.forEach(t),fQr=i(vi),Rn=n(vi,"P",{});var eL=s(Rn);mQr=r(eL,"The model class to instantiate is selected based on the "),Twe=n(eL,"CODE",{});var PJt=s(Twe);gQr=r(PJt,"model_type"),PJt.forEach(t),hQr=r(eL,` property of the config object (either
passed as an argument or loaded from `),Mwe=n(eL,"CODE",{});var BJt=s(Mwe);pQr=r(BJt,"pretrained_model_name_or_path"),BJt.forEach(t),uQr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ewe=n(eL,"CODE",{});var IJt=s(Ewe);_Qr=r(IJt,"pretrained_model_name_or_path"),IJt.forEach(t),bQr=r(eL,":"),eL.forEach(t),vQr=i(vi),fe=n(vi,"UL",{});var ue=s(fe);V5=n(ue,"LI",{});var hQe=s(V5);Cwe=n(hQe,"STRONG",{});var NJt=s(Cwe);FQr=r(NJt,"albert"),NJt.forEach(t),TQr=r(hQe," \u2014 "),are=n(hQe,"A",{href:!0});var qJt=s(are);MQr=r(qJt,"TFAlbertForQuestionAnswering"),qJt.forEach(t),EQr=r(hQe," (ALBERT model)"),hQe.forEach(t),CQr=i(ue),X5=n(ue,"LI",{});var pQe=s(X5);wwe=n(pQe,"STRONG",{});var jJt=s(wwe);wQr=r(jJt,"bert"),jJt.forEach(t),AQr=r(pQe," \u2014 "),nre=n(pQe,"A",{href:!0});var DJt=s(nre);yQr=r(DJt,"TFBertForQuestionAnswering"),DJt.forEach(t),LQr=r(pQe," (BERT model)"),pQe.forEach(t),xQr=i(ue),z5=n(ue,"LI",{});var uQe=s(z5);Awe=n(uQe,"STRONG",{});var GJt=s(Awe);$Qr=r(GJt,"camembert"),GJt.forEach(t),kQr=r(uQe," \u2014 "),sre=n(uQe,"A",{href:!0});var OJt=s(sre);SQr=r(OJt,"TFCamembertForQuestionAnswering"),OJt.forEach(t),RQr=r(uQe," (CamemBERT model)"),uQe.forEach(t),PQr=i(ue),Q5=n(ue,"LI",{});var _Qe=s(Q5);ywe=n(_Qe,"STRONG",{});var VJt=s(ywe);BQr=r(VJt,"convbert"),VJt.forEach(t),IQr=r(_Qe," \u2014 "),lre=n(_Qe,"A",{href:!0});var XJt=s(lre);NQr=r(XJt,"TFConvBertForQuestionAnswering"),XJt.forEach(t),qQr=r(_Qe," (ConvBERT model)"),_Qe.forEach(t),jQr=i(ue),W5=n(ue,"LI",{});var bQe=s(W5);Lwe=n(bQe,"STRONG",{});var zJt=s(Lwe);DQr=r(zJt,"deberta"),zJt.forEach(t),GQr=r(bQe," \u2014 "),ire=n(bQe,"A",{href:!0});var QJt=s(ire);OQr=r(QJt,"TFDebertaForQuestionAnswering"),QJt.forEach(t),VQr=r(bQe," (DeBERTa model)"),bQe.forEach(t),XQr=i(ue),U5=n(ue,"LI",{});var vQe=s(U5);xwe=n(vQe,"STRONG",{});var WJt=s(xwe);zQr=r(WJt,"deberta-v2"),WJt.forEach(t),QQr=r(vQe," \u2014 "),dre=n(vQe,"A",{href:!0});var UJt=s(dre);WQr=r(UJt,"TFDebertaV2ForQuestionAnswering"),UJt.forEach(t),UQr=r(vQe," (DeBERTa-v2 model)"),vQe.forEach(t),HQr=i(ue),H5=n(ue,"LI",{});var FQe=s(H5);$we=n(FQe,"STRONG",{});var HJt=s($we);JQr=r(HJt,"distilbert"),HJt.forEach(t),YQr=r(FQe," \u2014 "),cre=n(FQe,"A",{href:!0});var JJt=s(cre);KQr=r(JJt,"TFDistilBertForQuestionAnswering"),JJt.forEach(t),ZQr=r(FQe," (DistilBERT model)"),FQe.forEach(t),eWr=i(ue),J5=n(ue,"LI",{});var TQe=s(J5);kwe=n(TQe,"STRONG",{});var YJt=s(kwe);oWr=r(YJt,"electra"),YJt.forEach(t),rWr=r(TQe," \u2014 "),fre=n(TQe,"A",{href:!0});var KJt=s(fre);tWr=r(KJt,"TFElectraForQuestionAnswering"),KJt.forEach(t),aWr=r(TQe," (ELECTRA model)"),TQe.forEach(t),nWr=i(ue),Y5=n(ue,"LI",{});var MQe=s(Y5);Swe=n(MQe,"STRONG",{});var ZJt=s(Swe);sWr=r(ZJt,"flaubert"),ZJt.forEach(t),lWr=r(MQe," \u2014 "),mre=n(MQe,"A",{href:!0});var eYt=s(mre);iWr=r(eYt,"TFFlaubertForQuestionAnsweringSimple"),eYt.forEach(t),dWr=r(MQe," (FlauBERT model)"),MQe.forEach(t),cWr=i(ue),K5=n(ue,"LI",{});var EQe=s(K5);Rwe=n(EQe,"STRONG",{});var oYt=s(Rwe);fWr=r(oYt,"funnel"),oYt.forEach(t),mWr=r(EQe," \u2014 "),gre=n(EQe,"A",{href:!0});var rYt=s(gre);gWr=r(rYt,"TFFunnelForQuestionAnswering"),rYt.forEach(t),hWr=r(EQe," (Funnel Transformer model)"),EQe.forEach(t),pWr=i(ue),Z5=n(ue,"LI",{});var CQe=s(Z5);Pwe=n(CQe,"STRONG",{});var tYt=s(Pwe);uWr=r(tYt,"gptj"),tYt.forEach(t),_Wr=r(CQe," \u2014 "),hre=n(CQe,"A",{href:!0});var aYt=s(hre);bWr=r(aYt,"TFGPTJForQuestionAnswering"),aYt.forEach(t),vWr=r(CQe," (GPT-J model)"),CQe.forEach(t),FWr=i(ue),e0=n(ue,"LI",{});var wQe=s(e0);Bwe=n(wQe,"STRONG",{});var nYt=s(Bwe);TWr=r(nYt,"longformer"),nYt.forEach(t),MWr=r(wQe," \u2014 "),pre=n(wQe,"A",{href:!0});var sYt=s(pre);EWr=r(sYt,"TFLongformerForQuestionAnswering"),sYt.forEach(t),CWr=r(wQe," (Longformer model)"),wQe.forEach(t),wWr=i(ue),o0=n(ue,"LI",{});var AQe=s(o0);Iwe=n(AQe,"STRONG",{});var lYt=s(Iwe);AWr=r(lYt,"mobilebert"),lYt.forEach(t),yWr=r(AQe," \u2014 "),ure=n(AQe,"A",{href:!0});var iYt=s(ure);LWr=r(iYt,"TFMobileBertForQuestionAnswering"),iYt.forEach(t),xWr=r(AQe," (MobileBERT model)"),AQe.forEach(t),$Wr=i(ue),r0=n(ue,"LI",{});var yQe=s(r0);Nwe=n(yQe,"STRONG",{});var dYt=s(Nwe);kWr=r(dYt,"mpnet"),dYt.forEach(t),SWr=r(yQe," \u2014 "),_re=n(yQe,"A",{href:!0});var cYt=s(_re);RWr=r(cYt,"TFMPNetForQuestionAnswering"),cYt.forEach(t),PWr=r(yQe," (MPNet model)"),yQe.forEach(t),BWr=i(ue),t0=n(ue,"LI",{});var LQe=s(t0);qwe=n(LQe,"STRONG",{});var fYt=s(qwe);IWr=r(fYt,"rembert"),fYt.forEach(t),NWr=r(LQe," \u2014 "),bre=n(LQe,"A",{href:!0});var mYt=s(bre);qWr=r(mYt,"TFRemBertForQuestionAnswering"),mYt.forEach(t),jWr=r(LQe," (RemBERT model)"),LQe.forEach(t),DWr=i(ue),a0=n(ue,"LI",{});var xQe=s(a0);jwe=n(xQe,"STRONG",{});var gYt=s(jwe);GWr=r(gYt,"roberta"),gYt.forEach(t),OWr=r(xQe," \u2014 "),vre=n(xQe,"A",{href:!0});var hYt=s(vre);VWr=r(hYt,"TFRobertaForQuestionAnswering"),hYt.forEach(t),XWr=r(xQe," (RoBERTa model)"),xQe.forEach(t),zWr=i(ue),n0=n(ue,"LI",{});var $Qe=s(n0);Dwe=n($Qe,"STRONG",{});var pYt=s(Dwe);QWr=r(pYt,"roformer"),pYt.forEach(t),WWr=r($Qe," \u2014 "),Fre=n($Qe,"A",{href:!0});var uYt=s(Fre);UWr=r(uYt,"TFRoFormerForQuestionAnswering"),uYt.forEach(t),HWr=r($Qe," (RoFormer model)"),$Qe.forEach(t),JWr=i(ue),s0=n(ue,"LI",{});var kQe=s(s0);Gwe=n(kQe,"STRONG",{});var _Yt=s(Gwe);YWr=r(_Yt,"xlm"),_Yt.forEach(t),KWr=r(kQe," \u2014 "),Tre=n(kQe,"A",{href:!0});var bYt=s(Tre);ZWr=r(bYt,"TFXLMForQuestionAnsweringSimple"),bYt.forEach(t),eUr=r(kQe," (XLM model)"),kQe.forEach(t),oUr=i(ue),l0=n(ue,"LI",{});var SQe=s(l0);Owe=n(SQe,"STRONG",{});var vYt=s(Owe);rUr=r(vYt,"xlm-roberta"),vYt.forEach(t),tUr=r(SQe," \u2014 "),Mre=n(SQe,"A",{href:!0});var FYt=s(Mre);aUr=r(FYt,"TFXLMRobertaForQuestionAnswering"),FYt.forEach(t),nUr=r(SQe," (XLM-RoBERTa model)"),SQe.forEach(t),sUr=i(ue),i0=n(ue,"LI",{});var RQe=s(i0);Vwe=n(RQe,"STRONG",{});var TYt=s(Vwe);lUr=r(TYt,"xlnet"),TYt.forEach(t),iUr=r(RQe," \u2014 "),Ere=n(RQe,"A",{href:!0});var MYt=s(Ere);dUr=r(MYt,"TFXLNetForQuestionAnsweringSimple"),MYt.forEach(t),cUr=r(RQe," (XLNet model)"),RQe.forEach(t),ue.forEach(t),fUr=i(vi),T(d0.$$.fragment,vi),vi.forEach(t),bi.forEach(t),TJe=i(f),vf=n(f,"H2",{class:!0});var NKe=s(vf);c0=n(NKe,"A",{id:!0,class:!0,href:!0});var EYt=s(c0);Xwe=n(EYt,"SPAN",{});var CYt=s(Xwe);T(Ok.$$.fragment,CYt),CYt.forEach(t),EYt.forEach(t),mUr=i(NKe),zwe=n(NKe,"SPAN",{});var wYt=s(zwe);gUr=r(wYt,"TFAutoModelForVision2Seq"),wYt.forEach(t),NKe.forEach(t),MJe=i(f),vr=n(f,"DIV",{class:!0});var Fi=s(vr);T(Vk.$$.fragment,Fi),hUr=i(Fi),Ff=n(Fi,"P",{});var Ose=s(Ff);pUr=r(Ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Cre=n(Ose,"A",{href:!0});var AYt=s(Cre);uUr=r(AYt,"from_pretrained()"),AYt.forEach(t),_Ur=r(Ose," class method or the "),wre=n(Ose,"A",{href:!0});var yYt=s(wre);bUr=r(yYt,"from_config()"),yYt.forEach(t),vUr=r(Ose,` class
method.`),Ose.forEach(t),FUr=i(Fi),Xk=n(Fi,"P",{});var qKe=s(Xk);TUr=r(qKe,"This class cannot be instantiated directly using "),Qwe=n(qKe,"CODE",{});var LYt=s(Qwe);MUr=r(LYt,"__init__()"),LYt.forEach(t),EUr=r(qKe," (throws an error)."),qKe.forEach(t),CUr=i(Fi),ea=n(Fi,"DIV",{class:!0});var oL=s(ea);T(zk.$$.fragment,oL),wUr=i(oL),Wwe=n(oL,"P",{});var xYt=s(Wwe);AUr=r(xYt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xYt.forEach(t),yUr=i(oL),Tf=n(oL,"P",{});var Vse=s(Tf);LUr=r(Vse,`Note:
Loading a model from its configuration file does `),Uwe=n(Vse,"STRONG",{});var $Yt=s(Uwe);xUr=r($Yt,"not"),$Yt.forEach(t),$Ur=r(Vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Vse,"A",{href:!0});var kYt=s(Are);kUr=r(kYt,"from_pretrained()"),kYt.forEach(t),SUr=r(Vse," to load the model weights."),Vse.forEach(t),RUr=i(oL),T(f0.$$.fragment,oL),oL.forEach(t),PUr=i(Fi),Ur=n(Fi,"DIV",{class:!0});var Ti=s(Ur);T(Qk.$$.fragment,Ti),BUr=i(Ti),Hwe=n(Ti,"P",{});var SYt=s(Hwe);IUr=r(SYt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SYt.forEach(t),NUr=i(Ti),Pn=n(Ti,"P",{});var rL=s(Pn);qUr=r(rL,"The model class to instantiate is selected based on the "),Jwe=n(rL,"CODE",{});var RYt=s(Jwe);jUr=r(RYt,"model_type"),RYt.forEach(t),DUr=r(rL,` property of the config object (either
passed as an argument or loaded from `),Ywe=n(rL,"CODE",{});var PYt=s(Ywe);GUr=r(PYt,"pretrained_model_name_or_path"),PYt.forEach(t),OUr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kwe=n(rL,"CODE",{});var BYt=s(Kwe);VUr=r(BYt,"pretrained_model_name_or_path"),BYt.forEach(t),XUr=r(rL,":"),rL.forEach(t),zUr=i(Ti),Zwe=n(Ti,"UL",{});var IYt=s(Zwe);m0=n(IYt,"LI",{});var PQe=s(m0);eAe=n(PQe,"STRONG",{});var NYt=s(eAe);QUr=r(NYt,"vision-encoder-decoder"),NYt.forEach(t),WUr=r(PQe," \u2014 "),yre=n(PQe,"A",{href:!0});var qYt=s(yre);UUr=r(qYt,"TFVisionEncoderDecoderModel"),qYt.forEach(t),HUr=r(PQe," (Vision Encoder decoder model)"),PQe.forEach(t),IYt.forEach(t),JUr=i(Ti),T(g0.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),EJe=i(f),Mf=n(f,"H2",{class:!0});var jKe=s(Mf);h0=n(jKe,"A",{id:!0,class:!0,href:!0});var jYt=s(h0);oAe=n(jYt,"SPAN",{});var DYt=s(oAe);T(Wk.$$.fragment,DYt),DYt.forEach(t),jYt.forEach(t),YUr=i(jKe),rAe=n(jKe,"SPAN",{});var GYt=s(rAe);KUr=r(GYt,"TFAutoModelForSpeechSeq2Seq"),GYt.forEach(t),jKe.forEach(t),CJe=i(f),Fr=n(f,"DIV",{class:!0});var Mi=s(Fr);T(Uk.$$.fragment,Mi),ZUr=i(Mi),Ef=n(Mi,"P",{});var Xse=s(Ef);eHr=r(Xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Lre=n(Xse,"A",{href:!0});var OYt=s(Lre);oHr=r(OYt,"from_pretrained()"),OYt.forEach(t),rHr=r(Xse," class method or the "),xre=n(Xse,"A",{href:!0});var VYt=s(xre);tHr=r(VYt,"from_config()"),VYt.forEach(t),aHr=r(Xse,` class
method.`),Xse.forEach(t),nHr=i(Mi),Hk=n(Mi,"P",{});var DKe=s(Hk);sHr=r(DKe,"This class cannot be instantiated directly using "),tAe=n(DKe,"CODE",{});var XYt=s(tAe);lHr=r(XYt,"__init__()"),XYt.forEach(t),iHr=r(DKe," (throws an error)."),DKe.forEach(t),dHr=i(Mi),oa=n(Mi,"DIV",{class:!0});var tL=s(oa);T(Jk.$$.fragment,tL),cHr=i(tL),aAe=n(tL,"P",{});var zYt=s(aAe);fHr=r(zYt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zYt.forEach(t),mHr=i(tL),Cf=n(tL,"P",{});var zse=s(Cf);gHr=r(zse,`Note:
Loading a model from its configuration file does `),nAe=n(zse,"STRONG",{});var QYt=s(nAe);hHr=r(QYt,"not"),QYt.forEach(t),pHr=r(zse,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(zse,"A",{href:!0});var WYt=s($re);uHr=r(WYt,"from_pretrained()"),WYt.forEach(t),_Hr=r(zse," to load the model weights."),zse.forEach(t),bHr=i(tL),T(p0.$$.fragment,tL),tL.forEach(t),vHr=i(Mi),Hr=n(Mi,"DIV",{class:!0});var Ei=s(Hr);T(Yk.$$.fragment,Ei),FHr=i(Ei),sAe=n(Ei,"P",{});var UYt=s(sAe);THr=r(UYt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UYt.forEach(t),MHr=i(Ei),Bn=n(Ei,"P",{});var aL=s(Bn);EHr=r(aL,"The model class to instantiate is selected based on the "),lAe=n(aL,"CODE",{});var HYt=s(lAe);CHr=r(HYt,"model_type"),HYt.forEach(t),wHr=r(aL,` property of the config object (either
passed as an argument or loaded from `),iAe=n(aL,"CODE",{});var JYt=s(iAe);AHr=r(JYt,"pretrained_model_name_or_path"),JYt.forEach(t),yHr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dAe=n(aL,"CODE",{});var YYt=s(dAe);LHr=r(YYt,"pretrained_model_name_or_path"),YYt.forEach(t),xHr=r(aL,":"),aL.forEach(t),$Hr=i(Ei),cAe=n(Ei,"UL",{});var KYt=s(cAe);u0=n(KYt,"LI",{});var BQe=s(u0);fAe=n(BQe,"STRONG",{});var ZYt=s(fAe);kHr=r(ZYt,"speech_to_text"),ZYt.forEach(t),SHr=r(BQe," \u2014 "),kre=n(BQe,"A",{href:!0});var eKt=s(kre);RHr=r(eKt,"TFSpeech2TextForConditionalGeneration"),eKt.forEach(t),PHr=r(BQe," (Speech2Text model)"),BQe.forEach(t),KYt.forEach(t),BHr=i(Ei),T(_0.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),wJe=i(f),wf=n(f,"H2",{class:!0});var GKe=s(wf);b0=n(GKe,"A",{id:!0,class:!0,href:!0});var oKt=s(b0);mAe=n(oKt,"SPAN",{});var rKt=s(mAe);T(Kk.$$.fragment,rKt),rKt.forEach(t),oKt.forEach(t),IHr=i(GKe),gAe=n(GKe,"SPAN",{});var tKt=s(gAe);NHr=r(tKt,"FlaxAutoModel"),tKt.forEach(t),GKe.forEach(t),AJe=i(f),Tr=n(f,"DIV",{class:!0});var Ci=s(Tr);T(Zk.$$.fragment,Ci),qHr=i(Ci),Af=n(Ci,"P",{});var Qse=s(Af);jHr=r(Qse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Sre=n(Qse,"A",{href:!0});var aKt=s(Sre);DHr=r(aKt,"from_pretrained()"),aKt.forEach(t),GHr=r(Qse," class method or the "),Rre=n(Qse,"A",{href:!0});var nKt=s(Rre);OHr=r(nKt,"from_config()"),nKt.forEach(t),VHr=r(Qse,` class
method.`),Qse.forEach(t),XHr=i(Ci),eS=n(Ci,"P",{});var OKe=s(eS);zHr=r(OKe,"This class cannot be instantiated directly using "),hAe=n(OKe,"CODE",{});var sKt=s(hAe);QHr=r(sKt,"__init__()"),sKt.forEach(t),WHr=r(OKe," (throws an error)."),OKe.forEach(t),UHr=i(Ci),ra=n(Ci,"DIV",{class:!0});var nL=s(ra);T(oS.$$.fragment,nL),HHr=i(nL),pAe=n(nL,"P",{});var lKt=s(pAe);JHr=r(lKt,"Instantiates one of the base model classes of the library from a configuration."),lKt.forEach(t),YHr=i(nL),yf=n(nL,"P",{});var Wse=s(yf);KHr=r(Wse,`Note:
Loading a model from its configuration file does `),uAe=n(Wse,"STRONG",{});var iKt=s(uAe);ZHr=r(iKt,"not"),iKt.forEach(t),eJr=r(Wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(Wse,"A",{href:!0});var dKt=s(Pre);oJr=r(dKt,"from_pretrained()"),dKt.forEach(t),rJr=r(Wse," to load the model weights."),Wse.forEach(t),tJr=i(nL),T(v0.$$.fragment,nL),nL.forEach(t),aJr=i(Ci),Jr=n(Ci,"DIV",{class:!0});var wi=s(Jr);T(rS.$$.fragment,wi),nJr=i(wi),_Ae=n(wi,"P",{});var cKt=s(_Ae);sJr=r(cKt,"Instantiate one of the base model classes of the library from a pretrained model."),cKt.forEach(t),lJr=i(wi),In=n(wi,"P",{});var sL=s(In);iJr=r(sL,"The model class to instantiate is selected based on the "),bAe=n(sL,"CODE",{});var fKt=s(bAe);dJr=r(fKt,"model_type"),fKt.forEach(t),cJr=r(sL,` property of the config object (either
passed as an argument or loaded from `),vAe=n(sL,"CODE",{});var mKt=s(vAe);fJr=r(mKt,"pretrained_model_name_or_path"),mKt.forEach(t),mJr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FAe=n(sL,"CODE",{});var gKt=s(FAe);gJr=r(gKt,"pretrained_model_name_or_path"),gKt.forEach(t),hJr=r(sL,":"),sL.forEach(t),pJr=i(wi),re=n(wi,"UL",{});var ae=s(re);F0=n(ae,"LI",{});var IQe=s(F0);TAe=n(IQe,"STRONG",{});var hKt=s(TAe);uJr=r(hKt,"albert"),hKt.forEach(t),_Jr=r(IQe," \u2014 "),Bre=n(IQe,"A",{href:!0});var pKt=s(Bre);bJr=r(pKt,"FlaxAlbertModel"),pKt.forEach(t),vJr=r(IQe," (ALBERT model)"),IQe.forEach(t),FJr=i(ae),T0=n(ae,"LI",{});var NQe=s(T0);MAe=n(NQe,"STRONG",{});var uKt=s(MAe);TJr=r(uKt,"bart"),uKt.forEach(t),MJr=r(NQe," \u2014 "),Ire=n(NQe,"A",{href:!0});var _Kt=s(Ire);EJr=r(_Kt,"FlaxBartModel"),_Kt.forEach(t),CJr=r(NQe," (BART model)"),NQe.forEach(t),wJr=i(ae),M0=n(ae,"LI",{});var qQe=s(M0);EAe=n(qQe,"STRONG",{});var bKt=s(EAe);AJr=r(bKt,"beit"),bKt.forEach(t),yJr=r(qQe," \u2014 "),Nre=n(qQe,"A",{href:!0});var vKt=s(Nre);LJr=r(vKt,"FlaxBeitModel"),vKt.forEach(t),xJr=r(qQe," (BEiT model)"),qQe.forEach(t),$Jr=i(ae),E0=n(ae,"LI",{});var jQe=s(E0);CAe=n(jQe,"STRONG",{});var FKt=s(CAe);kJr=r(FKt,"bert"),FKt.forEach(t),SJr=r(jQe," \u2014 "),qre=n(jQe,"A",{href:!0});var TKt=s(qre);RJr=r(TKt,"FlaxBertModel"),TKt.forEach(t),PJr=r(jQe," (BERT model)"),jQe.forEach(t),BJr=i(ae),C0=n(ae,"LI",{});var DQe=s(C0);wAe=n(DQe,"STRONG",{});var MKt=s(wAe);IJr=r(MKt,"big_bird"),MKt.forEach(t),NJr=r(DQe," \u2014 "),jre=n(DQe,"A",{href:!0});var EKt=s(jre);qJr=r(EKt,"FlaxBigBirdModel"),EKt.forEach(t),jJr=r(DQe," (BigBird model)"),DQe.forEach(t),DJr=i(ae),w0=n(ae,"LI",{});var GQe=s(w0);AAe=n(GQe,"STRONG",{});var CKt=s(AAe);GJr=r(CKt,"blenderbot"),CKt.forEach(t),OJr=r(GQe," \u2014 "),Dre=n(GQe,"A",{href:!0});var wKt=s(Dre);VJr=r(wKt,"FlaxBlenderbotModel"),wKt.forEach(t),XJr=r(GQe," (Blenderbot model)"),GQe.forEach(t),zJr=i(ae),A0=n(ae,"LI",{});var OQe=s(A0);yAe=n(OQe,"STRONG",{});var AKt=s(yAe);QJr=r(AKt,"blenderbot-small"),AKt.forEach(t),WJr=r(OQe," \u2014 "),Gre=n(OQe,"A",{href:!0});var yKt=s(Gre);UJr=r(yKt,"FlaxBlenderbotSmallModel"),yKt.forEach(t),HJr=r(OQe," (BlenderbotSmall model)"),OQe.forEach(t),JJr=i(ae),y0=n(ae,"LI",{});var VQe=s(y0);LAe=n(VQe,"STRONG",{});var LKt=s(LAe);YJr=r(LKt,"clip"),LKt.forEach(t),KJr=r(VQe," \u2014 "),Ore=n(VQe,"A",{href:!0});var xKt=s(Ore);ZJr=r(xKt,"FlaxCLIPModel"),xKt.forEach(t),eYr=r(VQe," (CLIP model)"),VQe.forEach(t),oYr=i(ae),L0=n(ae,"LI",{});var XQe=s(L0);xAe=n(XQe,"STRONG",{});var $Kt=s(xAe);rYr=r($Kt,"distilbert"),$Kt.forEach(t),tYr=r(XQe," \u2014 "),Vre=n(XQe,"A",{href:!0});var kKt=s(Vre);aYr=r(kKt,"FlaxDistilBertModel"),kKt.forEach(t),nYr=r(XQe," (DistilBERT model)"),XQe.forEach(t),sYr=i(ae),x0=n(ae,"LI",{});var zQe=s(x0);$Ae=n(zQe,"STRONG",{});var SKt=s($Ae);lYr=r(SKt,"electra"),SKt.forEach(t),iYr=r(zQe," \u2014 "),Xre=n(zQe,"A",{href:!0});var RKt=s(Xre);dYr=r(RKt,"FlaxElectraModel"),RKt.forEach(t),cYr=r(zQe," (ELECTRA model)"),zQe.forEach(t),fYr=i(ae),$0=n(ae,"LI",{});var QQe=s($0);kAe=n(QQe,"STRONG",{});var PKt=s(kAe);mYr=r(PKt,"gpt2"),PKt.forEach(t),gYr=r(QQe," \u2014 "),zre=n(QQe,"A",{href:!0});var BKt=s(zre);hYr=r(BKt,"FlaxGPT2Model"),BKt.forEach(t),pYr=r(QQe," (OpenAI GPT-2 model)"),QQe.forEach(t),uYr=i(ae),k0=n(ae,"LI",{});var WQe=s(k0);SAe=n(WQe,"STRONG",{});var IKt=s(SAe);_Yr=r(IKt,"gpt_neo"),IKt.forEach(t),bYr=r(WQe," \u2014 "),Qre=n(WQe,"A",{href:!0});var NKt=s(Qre);vYr=r(NKt,"FlaxGPTNeoModel"),NKt.forEach(t),FYr=r(WQe," (GPT Neo model)"),WQe.forEach(t),TYr=i(ae),S0=n(ae,"LI",{});var UQe=s(S0);RAe=n(UQe,"STRONG",{});var qKt=s(RAe);MYr=r(qKt,"gptj"),qKt.forEach(t),EYr=r(UQe," \u2014 "),Wre=n(UQe,"A",{href:!0});var jKt=s(Wre);CYr=r(jKt,"FlaxGPTJModel"),jKt.forEach(t),wYr=r(UQe," (GPT-J model)"),UQe.forEach(t),AYr=i(ae),R0=n(ae,"LI",{});var HQe=s(R0);PAe=n(HQe,"STRONG",{});var DKt=s(PAe);yYr=r(DKt,"longt5"),DKt.forEach(t),LYr=r(HQe," \u2014 "),Ure=n(HQe,"A",{href:!0});var GKt=s(Ure);xYr=r(GKt,"FlaxLongT5Model"),GKt.forEach(t),$Yr=r(HQe," (LongT5 model)"),HQe.forEach(t),kYr=i(ae),P0=n(ae,"LI",{});var JQe=s(P0);BAe=n(JQe,"STRONG",{});var OKt=s(BAe);SYr=r(OKt,"marian"),OKt.forEach(t),RYr=r(JQe," \u2014 "),Hre=n(JQe,"A",{href:!0});var VKt=s(Hre);PYr=r(VKt,"FlaxMarianModel"),VKt.forEach(t),BYr=r(JQe," (Marian model)"),JQe.forEach(t),IYr=i(ae),B0=n(ae,"LI",{});var YQe=s(B0);IAe=n(YQe,"STRONG",{});var XKt=s(IAe);NYr=r(XKt,"mbart"),XKt.forEach(t),qYr=r(YQe," \u2014 "),Jre=n(YQe,"A",{href:!0});var zKt=s(Jre);jYr=r(zKt,"FlaxMBartModel"),zKt.forEach(t),DYr=r(YQe," (mBART model)"),YQe.forEach(t),GYr=i(ae),I0=n(ae,"LI",{});var KQe=s(I0);NAe=n(KQe,"STRONG",{});var QKt=s(NAe);OYr=r(QKt,"mt5"),QKt.forEach(t),VYr=r(KQe," \u2014 "),Yre=n(KQe,"A",{href:!0});var WKt=s(Yre);XYr=r(WKt,"FlaxMT5Model"),WKt.forEach(t),zYr=r(KQe," (MT5 model)"),KQe.forEach(t),QYr=i(ae),N0=n(ae,"LI",{});var ZQe=s(N0);qAe=n(ZQe,"STRONG",{});var UKt=s(qAe);WYr=r(UKt,"opt"),UKt.forEach(t),UYr=r(ZQe," \u2014 "),Kre=n(ZQe,"A",{href:!0});var HKt=s(Kre);HYr=r(HKt,"FlaxOPTModel"),HKt.forEach(t),JYr=r(ZQe," (OPT model)"),ZQe.forEach(t),YYr=i(ae),q0=n(ae,"LI",{});var eWe=s(q0);jAe=n(eWe,"STRONG",{});var JKt=s(jAe);KYr=r(JKt,"pegasus"),JKt.forEach(t),ZYr=r(eWe," \u2014 "),Zre=n(eWe,"A",{href:!0});var YKt=s(Zre);eKr=r(YKt,"FlaxPegasusModel"),YKt.forEach(t),oKr=r(eWe," (Pegasus model)"),eWe.forEach(t),rKr=i(ae),j0=n(ae,"LI",{});var oWe=s(j0);DAe=n(oWe,"STRONG",{});var KKt=s(DAe);tKr=r(KKt,"roberta"),KKt.forEach(t),aKr=r(oWe," \u2014 "),ete=n(oWe,"A",{href:!0});var ZKt=s(ete);nKr=r(ZKt,"FlaxRobertaModel"),ZKt.forEach(t),sKr=r(oWe," (RoBERTa model)"),oWe.forEach(t),lKr=i(ae),D0=n(ae,"LI",{});var rWe=s(D0);GAe=n(rWe,"STRONG",{});var eZt=s(GAe);iKr=r(eZt,"roformer"),eZt.forEach(t),dKr=r(rWe," \u2014 "),ote=n(rWe,"A",{href:!0});var oZt=s(ote);cKr=r(oZt,"FlaxRoFormerModel"),oZt.forEach(t),fKr=r(rWe," (RoFormer model)"),rWe.forEach(t),mKr=i(ae),G0=n(ae,"LI",{});var tWe=s(G0);OAe=n(tWe,"STRONG",{});var rZt=s(OAe);gKr=r(rZt,"t5"),rZt.forEach(t),hKr=r(tWe," \u2014 "),rte=n(tWe,"A",{href:!0});var tZt=s(rte);pKr=r(tZt,"FlaxT5Model"),tZt.forEach(t),uKr=r(tWe," (T5 model)"),tWe.forEach(t),_Kr=i(ae),O0=n(ae,"LI",{});var aWe=s(O0);VAe=n(aWe,"STRONG",{});var aZt=s(VAe);bKr=r(aZt,"vision-text-dual-encoder"),aZt.forEach(t),vKr=r(aWe," \u2014 "),tte=n(aWe,"A",{href:!0});var nZt=s(tte);FKr=r(nZt,"FlaxVisionTextDualEncoderModel"),nZt.forEach(t),TKr=r(aWe," (VisionTextDualEncoder model)"),aWe.forEach(t),MKr=i(ae),V0=n(ae,"LI",{});var nWe=s(V0);XAe=n(nWe,"STRONG",{});var sZt=s(XAe);EKr=r(sZt,"vit"),sZt.forEach(t),CKr=r(nWe," \u2014 "),ate=n(nWe,"A",{href:!0});var lZt=s(ate);wKr=r(lZt,"FlaxViTModel"),lZt.forEach(t),AKr=r(nWe," (ViT model)"),nWe.forEach(t),yKr=i(ae),X0=n(ae,"LI",{});var sWe=s(X0);zAe=n(sWe,"STRONG",{});var iZt=s(zAe);LKr=r(iZt,"wav2vec2"),iZt.forEach(t),xKr=r(sWe," \u2014 "),nte=n(sWe,"A",{href:!0});var dZt=s(nte);$Kr=r(dZt,"FlaxWav2Vec2Model"),dZt.forEach(t),kKr=r(sWe," (Wav2Vec2 model)"),sWe.forEach(t),SKr=i(ae),z0=n(ae,"LI",{});var lWe=s(z0);QAe=n(lWe,"STRONG",{});var cZt=s(QAe);RKr=r(cZt,"xglm"),cZt.forEach(t),PKr=r(lWe," \u2014 "),ste=n(lWe,"A",{href:!0});var fZt=s(ste);BKr=r(fZt,"FlaxXGLMModel"),fZt.forEach(t),IKr=r(lWe," (XGLM model)"),lWe.forEach(t),NKr=i(ae),Q0=n(ae,"LI",{});var iWe=s(Q0);WAe=n(iWe,"STRONG",{});var mZt=s(WAe);qKr=r(mZt,"xlm-roberta"),mZt.forEach(t),jKr=r(iWe," \u2014 "),lte=n(iWe,"A",{href:!0});var gZt=s(lte);DKr=r(gZt,"FlaxXLMRobertaModel"),gZt.forEach(t),GKr=r(iWe," (XLM-RoBERTa model)"),iWe.forEach(t),ae.forEach(t),OKr=i(wi),T(W0.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),yJe=i(f),Lf=n(f,"H2",{class:!0});var VKe=s(Lf);U0=n(VKe,"A",{id:!0,class:!0,href:!0});var hZt=s(U0);UAe=n(hZt,"SPAN",{});var pZt=s(UAe);T(tS.$$.fragment,pZt),pZt.forEach(t),hZt.forEach(t),VKr=i(VKe),HAe=n(VKe,"SPAN",{});var uZt=s(HAe);XKr=r(uZt,"FlaxAutoModelForCausalLM"),uZt.forEach(t),VKe.forEach(t),LJe=i(f),Mr=n(f,"DIV",{class:!0});var Ai=s(Mr);T(aS.$$.fragment,Ai),zKr=i(Ai),xf=n(Ai,"P",{});var Use=s(xf);QKr=r(Use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ite=n(Use,"A",{href:!0});var _Zt=s(ite);WKr=r(_Zt,"from_pretrained()"),_Zt.forEach(t),UKr=r(Use," class method or the "),dte=n(Use,"A",{href:!0});var bZt=s(dte);HKr=r(bZt,"from_config()"),bZt.forEach(t),JKr=r(Use,` class
method.`),Use.forEach(t),YKr=i(Ai),nS=n(Ai,"P",{});var XKe=s(nS);KKr=r(XKe,"This class cannot be instantiated directly using "),JAe=n(XKe,"CODE",{});var vZt=s(JAe);ZKr=r(vZt,"__init__()"),vZt.forEach(t),eZr=r(XKe," (throws an error)."),XKe.forEach(t),oZr=i(Ai),ta=n(Ai,"DIV",{class:!0});var lL=s(ta);T(sS.$$.fragment,lL),rZr=i(lL),YAe=n(lL,"P",{});var FZt=s(YAe);tZr=r(FZt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FZt.forEach(t),aZr=i(lL),$f=n(lL,"P",{});var Hse=s($f);nZr=r(Hse,`Note:
Loading a model from its configuration file does `),KAe=n(Hse,"STRONG",{});var TZt=s(KAe);sZr=r(TZt,"not"),TZt.forEach(t),lZr=r(Hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),cte=n(Hse,"A",{href:!0});var MZt=s(cte);iZr=r(MZt,"from_pretrained()"),MZt.forEach(t),dZr=r(Hse," to load the model weights."),Hse.forEach(t),cZr=i(lL),T(H0.$$.fragment,lL),lL.forEach(t),fZr=i(Ai),Yr=n(Ai,"DIV",{class:!0});var yi=s(Yr);T(lS.$$.fragment,yi),mZr=i(yi),ZAe=n(yi,"P",{});var EZt=s(ZAe);gZr=r(EZt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EZt.forEach(t),hZr=i(yi),Nn=n(yi,"P",{});var iL=s(Nn);pZr=r(iL,"The model class to instantiate is selected based on the "),e6e=n(iL,"CODE",{});var CZt=s(e6e);uZr=r(CZt,"model_type"),CZt.forEach(t),_Zr=r(iL,` property of the config object (either
passed as an argument or loaded from `),o6e=n(iL,"CODE",{});var wZt=s(o6e);bZr=r(wZt,"pretrained_model_name_or_path"),wZt.forEach(t),vZr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(iL,"CODE",{});var AZt=s(r6e);FZr=r(AZt,"pretrained_model_name_or_path"),AZt.forEach(t),TZr=r(iL,":"),iL.forEach(t),MZr=i(yi),xe=n(yi,"UL",{});var Ne=s(xe);J0=n(Ne,"LI",{});var dWe=s(J0);t6e=n(dWe,"STRONG",{});var yZt=s(t6e);EZr=r(yZt,"bart"),yZt.forEach(t),CZr=r(dWe," \u2014 "),fte=n(dWe,"A",{href:!0});var LZt=s(fte);wZr=r(LZt,"FlaxBartForCausalLM"),LZt.forEach(t),AZr=r(dWe," (BART model)"),dWe.forEach(t),yZr=i(Ne),Y0=n(Ne,"LI",{});var cWe=s(Y0);a6e=n(cWe,"STRONG",{});var xZt=s(a6e);LZr=r(xZt,"bert"),xZt.forEach(t),xZr=r(cWe," \u2014 "),mte=n(cWe,"A",{href:!0});var $Zt=s(mte);$Zr=r($Zt,"FlaxBertForCausalLM"),$Zt.forEach(t),kZr=r(cWe," (BERT model)"),cWe.forEach(t),SZr=i(Ne),K0=n(Ne,"LI",{});var fWe=s(K0);n6e=n(fWe,"STRONG",{});var kZt=s(n6e);RZr=r(kZt,"big_bird"),kZt.forEach(t),PZr=r(fWe," \u2014 "),gte=n(fWe,"A",{href:!0});var SZt=s(gte);BZr=r(SZt,"FlaxBigBirdForCausalLM"),SZt.forEach(t),IZr=r(fWe," (BigBird model)"),fWe.forEach(t),NZr=i(Ne),Z0=n(Ne,"LI",{});var mWe=s(Z0);s6e=n(mWe,"STRONG",{});var RZt=s(s6e);qZr=r(RZt,"electra"),RZt.forEach(t),jZr=r(mWe," \u2014 "),hte=n(mWe,"A",{href:!0});var PZt=s(hte);DZr=r(PZt,"FlaxElectraForCausalLM"),PZt.forEach(t),GZr=r(mWe," (ELECTRA model)"),mWe.forEach(t),OZr=i(Ne),ew=n(Ne,"LI",{});var gWe=s(ew);l6e=n(gWe,"STRONG",{});var BZt=s(l6e);VZr=r(BZt,"gpt2"),BZt.forEach(t),XZr=r(gWe," \u2014 "),pte=n(gWe,"A",{href:!0});var IZt=s(pte);zZr=r(IZt,"FlaxGPT2LMHeadModel"),IZt.forEach(t),QZr=r(gWe," (OpenAI GPT-2 model)"),gWe.forEach(t),WZr=i(Ne),ow=n(Ne,"LI",{});var hWe=s(ow);i6e=n(hWe,"STRONG",{});var NZt=s(i6e);UZr=r(NZt,"gpt_neo"),NZt.forEach(t),HZr=r(hWe," \u2014 "),ute=n(hWe,"A",{href:!0});var qZt=s(ute);JZr=r(qZt,"FlaxGPTNeoForCausalLM"),qZt.forEach(t),YZr=r(hWe," (GPT Neo model)"),hWe.forEach(t),KZr=i(Ne),rw=n(Ne,"LI",{});var pWe=s(rw);d6e=n(pWe,"STRONG",{});var jZt=s(d6e);ZZr=r(jZt,"gptj"),jZt.forEach(t),eet=r(pWe," \u2014 "),_te=n(pWe,"A",{href:!0});var DZt=s(_te);oet=r(DZt,"FlaxGPTJForCausalLM"),DZt.forEach(t),ret=r(pWe," (GPT-J model)"),pWe.forEach(t),tet=i(Ne),tw=n(Ne,"LI",{});var uWe=s(tw);c6e=n(uWe,"STRONG",{});var GZt=s(c6e);aet=r(GZt,"opt"),GZt.forEach(t),net=r(uWe," \u2014 "),bte=n(uWe,"A",{href:!0});var OZt=s(bte);set=r(OZt,"FlaxOPTForCausalLM"),OZt.forEach(t),iet=r(uWe," (OPT model)"),uWe.forEach(t),det=i(Ne),aw=n(Ne,"LI",{});var _We=s(aw);f6e=n(_We,"STRONG",{});var VZt=s(f6e);cet=r(VZt,"roberta"),VZt.forEach(t),fet=r(_We," \u2014 "),vte=n(_We,"A",{href:!0});var XZt=s(vte);met=r(XZt,"FlaxRobertaForCausalLM"),XZt.forEach(t),get=r(_We," (RoBERTa model)"),_We.forEach(t),het=i(Ne),nw=n(Ne,"LI",{});var bWe=s(nw);m6e=n(bWe,"STRONG",{});var zZt=s(m6e);pet=r(zZt,"xglm"),zZt.forEach(t),uet=r(bWe," \u2014 "),Fte=n(bWe,"A",{href:!0});var QZt=s(Fte);_et=r(QZt,"FlaxXGLMForCausalLM"),QZt.forEach(t),bet=r(bWe," (XGLM model)"),bWe.forEach(t),Ne.forEach(t),vet=i(yi),T(sw.$$.fragment,yi),yi.forEach(t),Ai.forEach(t),xJe=i(f),kf=n(f,"H2",{class:!0});var zKe=s(kf);lw=n(zKe,"A",{id:!0,class:!0,href:!0});var WZt=s(lw);g6e=n(WZt,"SPAN",{});var UZt=s(g6e);T(iS.$$.fragment,UZt),UZt.forEach(t),WZt.forEach(t),Fet=i(zKe),h6e=n(zKe,"SPAN",{});var HZt=s(h6e);Tet=r(HZt,"FlaxAutoModelForPreTraining"),HZt.forEach(t),zKe.forEach(t),$Je=i(f),Er=n(f,"DIV",{class:!0});var Li=s(Er);T(dS.$$.fragment,Li),Met=i(Li),Sf=n(Li,"P",{});var Jse=s(Sf);Eet=r(Jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Tte=n(Jse,"A",{href:!0});var JZt=s(Tte);Cet=r(JZt,"from_pretrained()"),JZt.forEach(t),wet=r(Jse," class method or the "),Mte=n(Jse,"A",{href:!0});var YZt=s(Mte);Aet=r(YZt,"from_config()"),YZt.forEach(t),yet=r(Jse,` class
method.`),Jse.forEach(t),Let=i(Li),cS=n(Li,"P",{});var QKe=s(cS);xet=r(QKe,"This class cannot be instantiated directly using "),p6e=n(QKe,"CODE",{});var KZt=s(p6e);$et=r(KZt,"__init__()"),KZt.forEach(t),ket=r(QKe," (throws an error)."),QKe.forEach(t),Set=i(Li),aa=n(Li,"DIV",{class:!0});var dL=s(aa);T(fS.$$.fragment,dL),Ret=i(dL),u6e=n(dL,"P",{});var ZZt=s(u6e);Pet=r(ZZt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZZt.forEach(t),Bet=i(dL),Rf=n(dL,"P",{});var Yse=s(Rf);Iet=r(Yse,`Note:
Loading a model from its configuration file does `),_6e=n(Yse,"STRONG",{});var eea=s(_6e);Net=r(eea,"not"),eea.forEach(t),qet=r(Yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ete=n(Yse,"A",{href:!0});var oea=s(Ete);jet=r(oea,"from_pretrained()"),oea.forEach(t),Det=r(Yse," to load the model weights."),Yse.forEach(t),Get=i(dL),T(iw.$$.fragment,dL),dL.forEach(t),Oet=i(Li),Kr=n(Li,"DIV",{class:!0});var xi=s(Kr);T(mS.$$.fragment,xi),Vet=i(xi),b6e=n(xi,"P",{});var rea=s(b6e);Xet=r(rea,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rea.forEach(t),zet=i(xi),qn=n(xi,"P",{});var cL=s(qn);Qet=r(cL,"The model class to instantiate is selected based on the "),v6e=n(cL,"CODE",{});var tea=s(v6e);Wet=r(tea,"model_type"),tea.forEach(t),Uet=r(cL,` property of the config object (either
passed as an argument or loaded from `),F6e=n(cL,"CODE",{});var aea=s(F6e);Het=r(aea,"pretrained_model_name_or_path"),aea.forEach(t),Jet=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T6e=n(cL,"CODE",{});var nea=s(T6e);Yet=r(nea,"pretrained_model_name_or_path"),nea.forEach(t),Ket=r(cL,":"),cL.forEach(t),Zet=i(xi),Ee=n(xi,"UL",{});var we=s(Ee);dw=n(we,"LI",{});var vWe=s(dw);M6e=n(vWe,"STRONG",{});var sea=s(M6e);eot=r(sea,"albert"),sea.forEach(t),oot=r(vWe," \u2014 "),Cte=n(vWe,"A",{href:!0});var lea=s(Cte);rot=r(lea,"FlaxAlbertForPreTraining"),lea.forEach(t),tot=r(vWe," (ALBERT model)"),vWe.forEach(t),aot=i(we),cw=n(we,"LI",{});var FWe=s(cw);E6e=n(FWe,"STRONG",{});var iea=s(E6e);not=r(iea,"bart"),iea.forEach(t),sot=r(FWe," \u2014 "),wte=n(FWe,"A",{href:!0});var dea=s(wte);lot=r(dea,"FlaxBartForConditionalGeneration"),dea.forEach(t),iot=r(FWe," (BART model)"),FWe.forEach(t),dot=i(we),fw=n(we,"LI",{});var TWe=s(fw);C6e=n(TWe,"STRONG",{});var cea=s(C6e);cot=r(cea,"bert"),cea.forEach(t),fot=r(TWe," \u2014 "),Ate=n(TWe,"A",{href:!0});var fea=s(Ate);mot=r(fea,"FlaxBertForPreTraining"),fea.forEach(t),got=r(TWe," (BERT model)"),TWe.forEach(t),hot=i(we),mw=n(we,"LI",{});var MWe=s(mw);w6e=n(MWe,"STRONG",{});var mea=s(w6e);pot=r(mea,"big_bird"),mea.forEach(t),uot=r(MWe," \u2014 "),yte=n(MWe,"A",{href:!0});var gea=s(yte);_ot=r(gea,"FlaxBigBirdForPreTraining"),gea.forEach(t),bot=r(MWe," (BigBird model)"),MWe.forEach(t),vot=i(we),gw=n(we,"LI",{});var EWe=s(gw);A6e=n(EWe,"STRONG",{});var hea=s(A6e);Fot=r(hea,"electra"),hea.forEach(t),Tot=r(EWe," \u2014 "),Lte=n(EWe,"A",{href:!0});var pea=s(Lte);Mot=r(pea,"FlaxElectraForPreTraining"),pea.forEach(t),Eot=r(EWe," (ELECTRA model)"),EWe.forEach(t),Cot=i(we),hw=n(we,"LI",{});var CWe=s(hw);y6e=n(CWe,"STRONG",{});var uea=s(y6e);wot=r(uea,"longt5"),uea.forEach(t),Aot=r(CWe," \u2014 "),xte=n(CWe,"A",{href:!0});var _ea=s(xte);yot=r(_ea,"FlaxLongT5ForConditionalGeneration"),_ea.forEach(t),Lot=r(CWe," (LongT5 model)"),CWe.forEach(t),xot=i(we),pw=n(we,"LI",{});var wWe=s(pw);L6e=n(wWe,"STRONG",{});var bea=s(L6e);$ot=r(bea,"mbart"),bea.forEach(t),kot=r(wWe," \u2014 "),$te=n(wWe,"A",{href:!0});var vea=s($te);Sot=r(vea,"FlaxMBartForConditionalGeneration"),vea.forEach(t),Rot=r(wWe," (mBART model)"),wWe.forEach(t),Pot=i(we),uw=n(we,"LI",{});var AWe=s(uw);x6e=n(AWe,"STRONG",{});var Fea=s(x6e);Bot=r(Fea,"mt5"),Fea.forEach(t),Iot=r(AWe," \u2014 "),kte=n(AWe,"A",{href:!0});var Tea=s(kte);Not=r(Tea,"FlaxMT5ForConditionalGeneration"),Tea.forEach(t),qot=r(AWe," (MT5 model)"),AWe.forEach(t),jot=i(we),_w=n(we,"LI",{});var yWe=s(_w);$6e=n(yWe,"STRONG",{});var Mea=s($6e);Dot=r(Mea,"roberta"),Mea.forEach(t),Got=r(yWe," \u2014 "),Ste=n(yWe,"A",{href:!0});var Eea=s(Ste);Oot=r(Eea,"FlaxRobertaForMaskedLM"),Eea.forEach(t),Vot=r(yWe," (RoBERTa model)"),yWe.forEach(t),Xot=i(we),bw=n(we,"LI",{});var LWe=s(bw);k6e=n(LWe,"STRONG",{});var Cea=s(k6e);zot=r(Cea,"roformer"),Cea.forEach(t),Qot=r(LWe," \u2014 "),Rte=n(LWe,"A",{href:!0});var wea=s(Rte);Wot=r(wea,"FlaxRoFormerForMaskedLM"),wea.forEach(t),Uot=r(LWe," (RoFormer model)"),LWe.forEach(t),Hot=i(we),vw=n(we,"LI",{});var xWe=s(vw);S6e=n(xWe,"STRONG",{});var Aea=s(S6e);Jot=r(Aea,"t5"),Aea.forEach(t),Yot=r(xWe," \u2014 "),Pte=n(xWe,"A",{href:!0});var yea=s(Pte);Kot=r(yea,"FlaxT5ForConditionalGeneration"),yea.forEach(t),Zot=r(xWe," (T5 model)"),xWe.forEach(t),ert=i(we),Fw=n(we,"LI",{});var $We=s(Fw);R6e=n($We,"STRONG",{});var Lea=s(R6e);ort=r(Lea,"wav2vec2"),Lea.forEach(t),rrt=r($We," \u2014 "),Bte=n($We,"A",{href:!0});var xea=s(Bte);trt=r(xea,"FlaxWav2Vec2ForPreTraining"),xea.forEach(t),art=r($We," (Wav2Vec2 model)"),$We.forEach(t),nrt=i(we),Tw=n(we,"LI",{});var kWe=s(Tw);P6e=n(kWe,"STRONG",{});var $ea=s(P6e);srt=r($ea,"xlm-roberta"),$ea.forEach(t),lrt=r(kWe," \u2014 "),Ite=n(kWe,"A",{href:!0});var kea=s(Ite);irt=r(kea,"FlaxXLMRobertaForMaskedLM"),kea.forEach(t),drt=r(kWe," (XLM-RoBERTa model)"),kWe.forEach(t),we.forEach(t),crt=i(xi),T(Mw.$$.fragment,xi),xi.forEach(t),Li.forEach(t),kJe=i(f),Pf=n(f,"H2",{class:!0});var WKe=s(Pf);Ew=n(WKe,"A",{id:!0,class:!0,href:!0});var Sea=s(Ew);B6e=n(Sea,"SPAN",{});var Rea=s(B6e);T(gS.$$.fragment,Rea),Rea.forEach(t),Sea.forEach(t),frt=i(WKe),I6e=n(WKe,"SPAN",{});var Pea=s(I6e);mrt=r(Pea,"FlaxAutoModelForMaskedLM"),Pea.forEach(t),WKe.forEach(t),SJe=i(f),Cr=n(f,"DIV",{class:!0});var $i=s(Cr);T(hS.$$.fragment,$i),grt=i($i),Bf=n($i,"P",{});var Kse=s(Bf);hrt=r(Kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Nte=n(Kse,"A",{href:!0});var Bea=s(Nte);prt=r(Bea,"from_pretrained()"),Bea.forEach(t),urt=r(Kse," class method or the "),qte=n(Kse,"A",{href:!0});var Iea=s(qte);_rt=r(Iea,"from_config()"),Iea.forEach(t),brt=r(Kse,` class
method.`),Kse.forEach(t),vrt=i($i),pS=n($i,"P",{});var UKe=s(pS);Frt=r(UKe,"This class cannot be instantiated directly using "),N6e=n(UKe,"CODE",{});var Nea=s(N6e);Trt=r(Nea,"__init__()"),Nea.forEach(t),Mrt=r(UKe," (throws an error)."),UKe.forEach(t),Ert=i($i),na=n($i,"DIV",{class:!0});var fL=s(na);T(uS.$$.fragment,fL),Crt=i(fL),q6e=n(fL,"P",{});var qea=s(q6e);wrt=r(qea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qea.forEach(t),Art=i(fL),If=n(fL,"P",{});var Zse=s(If);yrt=r(Zse,`Note:
Loading a model from its configuration file does `),j6e=n(Zse,"STRONG",{});var jea=s(j6e);Lrt=r(jea,"not"),jea.forEach(t),xrt=r(Zse,` load the model weights. It only affects the
model\u2019s configuration. Use `),jte=n(Zse,"A",{href:!0});var Dea=s(jte);$rt=r(Dea,"from_pretrained()"),Dea.forEach(t),krt=r(Zse," to load the model weights."),Zse.forEach(t),Srt=i(fL),T(Cw.$$.fragment,fL),fL.forEach(t),Rrt=i($i),Zr=n($i,"DIV",{class:!0});var ki=s(Zr);T(_S.$$.fragment,ki),Prt=i(ki),D6e=n(ki,"P",{});var Gea=s(D6e);Brt=r(Gea,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gea.forEach(t),Irt=i(ki),jn=n(ki,"P",{});var mL=s(jn);Nrt=r(mL,"The model class to instantiate is selected based on the "),G6e=n(mL,"CODE",{});var Oea=s(G6e);qrt=r(Oea,"model_type"),Oea.forEach(t),jrt=r(mL,` property of the config object (either
passed as an argument or loaded from `),O6e=n(mL,"CODE",{});var Vea=s(O6e);Drt=r(Vea,"pretrained_model_name_or_path"),Vea.forEach(t),Grt=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V6e=n(mL,"CODE",{});var Xea=s(V6e);Ort=r(Xea,"pretrained_model_name_or_path"),Xea.forEach(t),Vrt=r(mL,":"),mL.forEach(t),Xrt=i(ki),$e=n(ki,"UL",{});var qe=s($e);ww=n(qe,"LI",{});var SWe=s(ww);X6e=n(SWe,"STRONG",{});var zea=s(X6e);zrt=r(zea,"albert"),zea.forEach(t),Qrt=r(SWe," \u2014 "),Dte=n(SWe,"A",{href:!0});var Qea=s(Dte);Wrt=r(Qea,"FlaxAlbertForMaskedLM"),Qea.forEach(t),Urt=r(SWe," (ALBERT model)"),SWe.forEach(t),Hrt=i(qe),Aw=n(qe,"LI",{});var RWe=s(Aw);z6e=n(RWe,"STRONG",{});var Wea=s(z6e);Jrt=r(Wea,"bart"),Wea.forEach(t),Yrt=r(RWe," \u2014 "),Gte=n(RWe,"A",{href:!0});var Uea=s(Gte);Krt=r(Uea,"FlaxBartForConditionalGeneration"),Uea.forEach(t),Zrt=r(RWe," (BART model)"),RWe.forEach(t),ett=i(qe),yw=n(qe,"LI",{});var PWe=s(yw);Q6e=n(PWe,"STRONG",{});var Hea=s(Q6e);ott=r(Hea,"bert"),Hea.forEach(t),rtt=r(PWe," \u2014 "),Ote=n(PWe,"A",{href:!0});var Jea=s(Ote);ttt=r(Jea,"FlaxBertForMaskedLM"),Jea.forEach(t),att=r(PWe," (BERT model)"),PWe.forEach(t),ntt=i(qe),Lw=n(qe,"LI",{});var BWe=s(Lw);W6e=n(BWe,"STRONG",{});var Yea=s(W6e);stt=r(Yea,"big_bird"),Yea.forEach(t),ltt=r(BWe," \u2014 "),Vte=n(BWe,"A",{href:!0});var Kea=s(Vte);itt=r(Kea,"FlaxBigBirdForMaskedLM"),Kea.forEach(t),dtt=r(BWe," (BigBird model)"),BWe.forEach(t),ctt=i(qe),xw=n(qe,"LI",{});var IWe=s(xw);U6e=n(IWe,"STRONG",{});var Zea=s(U6e);ftt=r(Zea,"distilbert"),Zea.forEach(t),mtt=r(IWe," \u2014 "),Xte=n(IWe,"A",{href:!0});var eoa=s(Xte);gtt=r(eoa,"FlaxDistilBertForMaskedLM"),eoa.forEach(t),htt=r(IWe," (DistilBERT model)"),IWe.forEach(t),ptt=i(qe),$w=n(qe,"LI",{});var NWe=s($w);H6e=n(NWe,"STRONG",{});var ooa=s(H6e);utt=r(ooa,"electra"),ooa.forEach(t),_tt=r(NWe," \u2014 "),zte=n(NWe,"A",{href:!0});var roa=s(zte);btt=r(roa,"FlaxElectraForMaskedLM"),roa.forEach(t),vtt=r(NWe," (ELECTRA model)"),NWe.forEach(t),Ftt=i(qe),kw=n(qe,"LI",{});var qWe=s(kw);J6e=n(qWe,"STRONG",{});var toa=s(J6e);Ttt=r(toa,"mbart"),toa.forEach(t),Mtt=r(qWe," \u2014 "),Qte=n(qWe,"A",{href:!0});var aoa=s(Qte);Ett=r(aoa,"FlaxMBartForConditionalGeneration"),aoa.forEach(t),Ctt=r(qWe," (mBART model)"),qWe.forEach(t),wtt=i(qe),Sw=n(qe,"LI",{});var jWe=s(Sw);Y6e=n(jWe,"STRONG",{});var noa=s(Y6e);Att=r(noa,"roberta"),noa.forEach(t),ytt=r(jWe," \u2014 "),Wte=n(jWe,"A",{href:!0});var soa=s(Wte);Ltt=r(soa,"FlaxRobertaForMaskedLM"),soa.forEach(t),xtt=r(jWe," (RoBERTa model)"),jWe.forEach(t),$tt=i(qe),Rw=n(qe,"LI",{});var DWe=s(Rw);K6e=n(DWe,"STRONG",{});var loa=s(K6e);ktt=r(loa,"roformer"),loa.forEach(t),Stt=r(DWe," \u2014 "),Ute=n(DWe,"A",{href:!0});var ioa=s(Ute);Rtt=r(ioa,"FlaxRoFormerForMaskedLM"),ioa.forEach(t),Ptt=r(DWe," (RoFormer model)"),DWe.forEach(t),Btt=i(qe),Pw=n(qe,"LI",{});var GWe=s(Pw);Z6e=n(GWe,"STRONG",{});var doa=s(Z6e);Itt=r(doa,"xlm-roberta"),doa.forEach(t),Ntt=r(GWe," \u2014 "),Hte=n(GWe,"A",{href:!0});var coa=s(Hte);qtt=r(coa,"FlaxXLMRobertaForMaskedLM"),coa.forEach(t),jtt=r(GWe," (XLM-RoBERTa model)"),GWe.forEach(t),qe.forEach(t),Dtt=i(ki),T(Bw.$$.fragment,ki),ki.forEach(t),$i.forEach(t),RJe=i(f),Nf=n(f,"H2",{class:!0});var HKe=s(Nf);Iw=n(HKe,"A",{id:!0,class:!0,href:!0});var foa=s(Iw);eye=n(foa,"SPAN",{});var moa=s(eye);T(bS.$$.fragment,moa),moa.forEach(t),foa.forEach(t),Gtt=i(HKe),oye=n(HKe,"SPAN",{});var goa=s(oye);Ott=r(goa,"FlaxAutoModelForSeq2SeqLM"),goa.forEach(t),HKe.forEach(t),PJe=i(f),wr=n(f,"DIV",{class:!0});var Si=s(wr);T(vS.$$.fragment,Si),Vtt=i(Si),qf=n(Si,"P",{});var ele=s(qf);Xtt=r(ele,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Jte=n(ele,"A",{href:!0});var hoa=s(Jte);ztt=r(hoa,"from_pretrained()"),hoa.forEach(t),Qtt=r(ele," class method or the "),Yte=n(ele,"A",{href:!0});var poa=s(Yte);Wtt=r(poa,"from_config()"),poa.forEach(t),Utt=r(ele,` class
method.`),ele.forEach(t),Htt=i(Si),FS=n(Si,"P",{});var JKe=s(FS);Jtt=r(JKe,"This class cannot be instantiated directly using "),rye=n(JKe,"CODE",{});var uoa=s(rye);Ytt=r(uoa,"__init__()"),uoa.forEach(t),Ktt=r(JKe," (throws an error)."),JKe.forEach(t),Ztt=i(Si),sa=n(Si,"DIV",{class:!0});var gL=s(sa);T(TS.$$.fragment,gL),eat=i(gL),tye=n(gL,"P",{});var _oa=s(tye);oat=r(_oa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_oa.forEach(t),rat=i(gL),jf=n(gL,"P",{});var ole=s(jf);tat=r(ole,`Note:
Loading a model from its configuration file does `),aye=n(ole,"STRONG",{});var boa=s(aye);aat=r(boa,"not"),boa.forEach(t),nat=r(ole,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kte=n(ole,"A",{href:!0});var voa=s(Kte);sat=r(voa,"from_pretrained()"),voa.forEach(t),lat=r(ole," to load the model weights."),ole.forEach(t),iat=i(gL),T(Nw.$$.fragment,gL),gL.forEach(t),dat=i(Si),et=n(Si,"DIV",{class:!0});var Ri=s(et);T(MS.$$.fragment,Ri),cat=i(Ri),nye=n(Ri,"P",{});var Foa=s(nye);fat=r(Foa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Foa.forEach(t),mat=i(Ri),Dn=n(Ri,"P",{});var hL=s(Dn);gat=r(hL,"The model class to instantiate is selected based on the "),sye=n(hL,"CODE",{});var Toa=s(sye);hat=r(Toa,"model_type"),Toa.forEach(t),pat=r(hL,` property of the config object (either
passed as an argument or loaded from `),lye=n(hL,"CODE",{});var Moa=s(lye);uat=r(Moa,"pretrained_model_name_or_path"),Moa.forEach(t),_at=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iye=n(hL,"CODE",{});var Eoa=s(iye);bat=r(Eoa,"pretrained_model_name_or_path"),Eoa.forEach(t),vat=r(hL,":"),hL.forEach(t),Fat=i(Ri),ke=n(Ri,"UL",{});var je=s(ke);qw=n(je,"LI",{});var OWe=s(qw);dye=n(OWe,"STRONG",{});var Coa=s(dye);Tat=r(Coa,"bart"),Coa.forEach(t),Mat=r(OWe," \u2014 "),Zte=n(OWe,"A",{href:!0});var woa=s(Zte);Eat=r(woa,"FlaxBartForConditionalGeneration"),woa.forEach(t),Cat=r(OWe," (BART model)"),OWe.forEach(t),wat=i(je),jw=n(je,"LI",{});var VWe=s(jw);cye=n(VWe,"STRONG",{});var Aoa=s(cye);Aat=r(Aoa,"blenderbot"),Aoa.forEach(t),yat=r(VWe," \u2014 "),eae=n(VWe,"A",{href:!0});var yoa=s(eae);Lat=r(yoa,"FlaxBlenderbotForConditionalGeneration"),yoa.forEach(t),xat=r(VWe," (Blenderbot model)"),VWe.forEach(t),$at=i(je),Dw=n(je,"LI",{});var XWe=s(Dw);fye=n(XWe,"STRONG",{});var Loa=s(fye);kat=r(Loa,"blenderbot-small"),Loa.forEach(t),Sat=r(XWe," \u2014 "),oae=n(XWe,"A",{href:!0});var xoa=s(oae);Rat=r(xoa,"FlaxBlenderbotSmallForConditionalGeneration"),xoa.forEach(t),Pat=r(XWe," (BlenderbotSmall model)"),XWe.forEach(t),Bat=i(je),Gw=n(je,"LI",{});var zWe=s(Gw);mye=n(zWe,"STRONG",{});var $oa=s(mye);Iat=r($oa,"encoder-decoder"),$oa.forEach(t),Nat=r(zWe," \u2014 "),rae=n(zWe,"A",{href:!0});var koa=s(rae);qat=r(koa,"FlaxEncoderDecoderModel"),koa.forEach(t),jat=r(zWe," (Encoder decoder model)"),zWe.forEach(t),Dat=i(je),Ow=n(je,"LI",{});var QWe=s(Ow);gye=n(QWe,"STRONG",{});var Soa=s(gye);Gat=r(Soa,"longt5"),Soa.forEach(t),Oat=r(QWe," \u2014 "),tae=n(QWe,"A",{href:!0});var Roa=s(tae);Vat=r(Roa,"FlaxLongT5ForConditionalGeneration"),Roa.forEach(t),Xat=r(QWe," (LongT5 model)"),QWe.forEach(t),zat=i(je),Vw=n(je,"LI",{});var WWe=s(Vw);hye=n(WWe,"STRONG",{});var Poa=s(hye);Qat=r(Poa,"marian"),Poa.forEach(t),Wat=r(WWe," \u2014 "),aae=n(WWe,"A",{href:!0});var Boa=s(aae);Uat=r(Boa,"FlaxMarianMTModel"),Boa.forEach(t),Hat=r(WWe," (Marian model)"),WWe.forEach(t),Jat=i(je),Xw=n(je,"LI",{});var UWe=s(Xw);pye=n(UWe,"STRONG",{});var Ioa=s(pye);Yat=r(Ioa,"mbart"),Ioa.forEach(t),Kat=r(UWe," \u2014 "),nae=n(UWe,"A",{href:!0});var Noa=s(nae);Zat=r(Noa,"FlaxMBartForConditionalGeneration"),Noa.forEach(t),ent=r(UWe," (mBART model)"),UWe.forEach(t),ont=i(je),zw=n(je,"LI",{});var HWe=s(zw);uye=n(HWe,"STRONG",{});var qoa=s(uye);rnt=r(qoa,"mt5"),qoa.forEach(t),tnt=r(HWe," \u2014 "),sae=n(HWe,"A",{href:!0});var joa=s(sae);ant=r(joa,"FlaxMT5ForConditionalGeneration"),joa.forEach(t),nnt=r(HWe," (MT5 model)"),HWe.forEach(t),snt=i(je),Qw=n(je,"LI",{});var JWe=s(Qw);_ye=n(JWe,"STRONG",{});var Doa=s(_ye);lnt=r(Doa,"pegasus"),Doa.forEach(t),int=r(JWe," \u2014 "),lae=n(JWe,"A",{href:!0});var Goa=s(lae);dnt=r(Goa,"FlaxPegasusForConditionalGeneration"),Goa.forEach(t),cnt=r(JWe," (Pegasus model)"),JWe.forEach(t),fnt=i(je),Ww=n(je,"LI",{});var YWe=s(Ww);bye=n(YWe,"STRONG",{});var Ooa=s(bye);mnt=r(Ooa,"t5"),Ooa.forEach(t),gnt=r(YWe," \u2014 "),iae=n(YWe,"A",{href:!0});var Voa=s(iae);hnt=r(Voa,"FlaxT5ForConditionalGeneration"),Voa.forEach(t),pnt=r(YWe," (T5 model)"),YWe.forEach(t),je.forEach(t),unt=i(Ri),T(Uw.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),BJe=i(f),Df=n(f,"H2",{class:!0});var YKe=s(Df);Hw=n(YKe,"A",{id:!0,class:!0,href:!0});var Xoa=s(Hw);vye=n(Xoa,"SPAN",{});var zoa=s(vye);T(ES.$$.fragment,zoa),zoa.forEach(t),Xoa.forEach(t),_nt=i(YKe),Fye=n(YKe,"SPAN",{});var Qoa=s(Fye);bnt=r(Qoa,"FlaxAutoModelForSequenceClassification"),Qoa.forEach(t),YKe.forEach(t),IJe=i(f),Ar=n(f,"DIV",{class:!0});var Pi=s(Ar);T(CS.$$.fragment,Pi),vnt=i(Pi),Gf=n(Pi,"P",{});var rle=s(Gf);Fnt=r(rle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dae=n(rle,"A",{href:!0});var Woa=s(dae);Tnt=r(Woa,"from_pretrained()"),Woa.forEach(t),Mnt=r(rle," class method or the "),cae=n(rle,"A",{href:!0});var Uoa=s(cae);Ent=r(Uoa,"from_config()"),Uoa.forEach(t),Cnt=r(rle,` class
method.`),rle.forEach(t),wnt=i(Pi),wS=n(Pi,"P",{});var KKe=s(wS);Ant=r(KKe,"This class cannot be instantiated directly using "),Tye=n(KKe,"CODE",{});var Hoa=s(Tye);ynt=r(Hoa,"__init__()"),Hoa.forEach(t),Lnt=r(KKe," (throws an error)."),KKe.forEach(t),xnt=i(Pi),la=n(Pi,"DIV",{class:!0});var pL=s(la);T(AS.$$.fragment,pL),$nt=i(pL),Mye=n(pL,"P",{});var Joa=s(Mye);knt=r(Joa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Joa.forEach(t),Snt=i(pL),Of=n(pL,"P",{});var tle=s(Of);Rnt=r(tle,`Note:
Loading a model from its configuration file does `),Eye=n(tle,"STRONG",{});var Yoa=s(Eye);Pnt=r(Yoa,"not"),Yoa.forEach(t),Bnt=r(tle,` load the model weights. It only affects the
model\u2019s configuration. Use `),fae=n(tle,"A",{href:!0});var Koa=s(fae);Int=r(Koa,"from_pretrained()"),Koa.forEach(t),Nnt=r(tle," to load the model weights."),tle.forEach(t),qnt=i(pL),T(Jw.$$.fragment,pL),pL.forEach(t),jnt=i(Pi),ot=n(Pi,"DIV",{class:!0});var Bi=s(ot);T(yS.$$.fragment,Bi),Dnt=i(Bi),Cye=n(Bi,"P",{});var Zoa=s(Cye);Gnt=r(Zoa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Zoa.forEach(t),Ont=i(Bi),Gn=n(Bi,"P",{});var uL=s(Gn);Vnt=r(uL,"The model class to instantiate is selected based on the "),wye=n(uL,"CODE",{});var era=s(wye);Xnt=r(era,"model_type"),era.forEach(t),znt=r(uL,` property of the config object (either
passed as an argument or loaded from `),Aye=n(uL,"CODE",{});var ora=s(Aye);Qnt=r(ora,"pretrained_model_name_or_path"),ora.forEach(t),Wnt=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yye=n(uL,"CODE",{});var rra=s(yye);Unt=r(rra,"pretrained_model_name_or_path"),rra.forEach(t),Hnt=r(uL,":"),uL.forEach(t),Jnt=i(Bi),Se=n(Bi,"UL",{});var De=s(Se);Yw=n(De,"LI",{});var KWe=s(Yw);Lye=n(KWe,"STRONG",{});var tra=s(Lye);Ynt=r(tra,"albert"),tra.forEach(t),Knt=r(KWe," \u2014 "),mae=n(KWe,"A",{href:!0});var ara=s(mae);Znt=r(ara,"FlaxAlbertForSequenceClassification"),ara.forEach(t),est=r(KWe," (ALBERT model)"),KWe.forEach(t),ost=i(De),Kw=n(De,"LI",{});var ZWe=s(Kw);xye=n(ZWe,"STRONG",{});var nra=s(xye);rst=r(nra,"bart"),nra.forEach(t),tst=r(ZWe," \u2014 "),gae=n(ZWe,"A",{href:!0});var sra=s(gae);ast=r(sra,"FlaxBartForSequenceClassification"),sra.forEach(t),nst=r(ZWe," (BART model)"),ZWe.forEach(t),sst=i(De),Zw=n(De,"LI",{});var eUe=s(Zw);$ye=n(eUe,"STRONG",{});var lra=s($ye);lst=r(lra,"bert"),lra.forEach(t),ist=r(eUe," \u2014 "),hae=n(eUe,"A",{href:!0});var ira=s(hae);dst=r(ira,"FlaxBertForSequenceClassification"),ira.forEach(t),cst=r(eUe," (BERT model)"),eUe.forEach(t),fst=i(De),eA=n(De,"LI",{});var oUe=s(eA);kye=n(oUe,"STRONG",{});var dra=s(kye);mst=r(dra,"big_bird"),dra.forEach(t),gst=r(oUe," \u2014 "),pae=n(oUe,"A",{href:!0});var cra=s(pae);hst=r(cra,"FlaxBigBirdForSequenceClassification"),cra.forEach(t),pst=r(oUe," (BigBird model)"),oUe.forEach(t),ust=i(De),oA=n(De,"LI",{});var rUe=s(oA);Sye=n(rUe,"STRONG",{});var fra=s(Sye);_st=r(fra,"distilbert"),fra.forEach(t),bst=r(rUe," \u2014 "),uae=n(rUe,"A",{href:!0});var mra=s(uae);vst=r(mra,"FlaxDistilBertForSequenceClassification"),mra.forEach(t),Fst=r(rUe," (DistilBERT model)"),rUe.forEach(t),Tst=i(De),rA=n(De,"LI",{});var tUe=s(rA);Rye=n(tUe,"STRONG",{});var gra=s(Rye);Mst=r(gra,"electra"),gra.forEach(t),Est=r(tUe," \u2014 "),_ae=n(tUe,"A",{href:!0});var hra=s(_ae);Cst=r(hra,"FlaxElectraForSequenceClassification"),hra.forEach(t),wst=r(tUe," (ELECTRA model)"),tUe.forEach(t),Ast=i(De),tA=n(De,"LI",{});var aUe=s(tA);Pye=n(aUe,"STRONG",{});var pra=s(Pye);yst=r(pra,"mbart"),pra.forEach(t),Lst=r(aUe," \u2014 "),bae=n(aUe,"A",{href:!0});var ura=s(bae);xst=r(ura,"FlaxMBartForSequenceClassification"),ura.forEach(t),$st=r(aUe," (mBART model)"),aUe.forEach(t),kst=i(De),aA=n(De,"LI",{});var nUe=s(aA);Bye=n(nUe,"STRONG",{});var _ra=s(Bye);Sst=r(_ra,"roberta"),_ra.forEach(t),Rst=r(nUe," \u2014 "),vae=n(nUe,"A",{href:!0});var bra=s(vae);Pst=r(bra,"FlaxRobertaForSequenceClassification"),bra.forEach(t),Bst=r(nUe," (RoBERTa model)"),nUe.forEach(t),Ist=i(De),nA=n(De,"LI",{});var sUe=s(nA);Iye=n(sUe,"STRONG",{});var vra=s(Iye);Nst=r(vra,"roformer"),vra.forEach(t),qst=r(sUe," \u2014 "),Fae=n(sUe,"A",{href:!0});var Fra=s(Fae);jst=r(Fra,"FlaxRoFormerForSequenceClassification"),Fra.forEach(t),Dst=r(sUe," (RoFormer model)"),sUe.forEach(t),Gst=i(De),sA=n(De,"LI",{});var lUe=s(sA);Nye=n(lUe,"STRONG",{});var Tra=s(Nye);Ost=r(Tra,"xlm-roberta"),Tra.forEach(t),Vst=r(lUe," \u2014 "),Tae=n(lUe,"A",{href:!0});var Mra=s(Tae);Xst=r(Mra,"FlaxXLMRobertaForSequenceClassification"),Mra.forEach(t),zst=r(lUe," (XLM-RoBERTa model)"),lUe.forEach(t),De.forEach(t),Qst=i(Bi),T(lA.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),NJe=i(f),Vf=n(f,"H2",{class:!0});var ZKe=s(Vf);iA=n(ZKe,"A",{id:!0,class:!0,href:!0});var Era=s(iA);qye=n(Era,"SPAN",{});var Cra=s(qye);T(LS.$$.fragment,Cra),Cra.forEach(t),Era.forEach(t),Wst=i(ZKe),jye=n(ZKe,"SPAN",{});var wra=s(jye);Ust=r(wra,"FlaxAutoModelForQuestionAnswering"),wra.forEach(t),ZKe.forEach(t),qJe=i(f),yr=n(f,"DIV",{class:!0});var Ii=s(yr);T(xS.$$.fragment,Ii),Hst=i(Ii),Xf=n(Ii,"P",{});var ale=s(Xf);Jst=r(ale,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Mae=n(ale,"A",{href:!0});var Ara=s(Mae);Yst=r(Ara,"from_pretrained()"),Ara.forEach(t),Kst=r(ale," class method or the "),Eae=n(ale,"A",{href:!0});var yra=s(Eae);Zst=r(yra,"from_config()"),yra.forEach(t),elt=r(ale,` class
method.`),ale.forEach(t),olt=i(Ii),$S=n(Ii,"P",{});var eZe=s($S);rlt=r(eZe,"This class cannot be instantiated directly using "),Dye=n(eZe,"CODE",{});var Lra=s(Dye);tlt=r(Lra,"__init__()"),Lra.forEach(t),alt=r(eZe," (throws an error)."),eZe.forEach(t),nlt=i(Ii),ia=n(Ii,"DIV",{class:!0});var _L=s(ia);T(kS.$$.fragment,_L),slt=i(_L),Gye=n(_L,"P",{});var xra=s(Gye);llt=r(xra,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xra.forEach(t),ilt=i(_L),zf=n(_L,"P",{});var nle=s(zf);dlt=r(nle,`Note:
Loading a model from its configuration file does `),Oye=n(nle,"STRONG",{});var $ra=s(Oye);clt=r($ra,"not"),$ra.forEach(t),flt=r(nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cae=n(nle,"A",{href:!0});var kra=s(Cae);mlt=r(kra,"from_pretrained()"),kra.forEach(t),glt=r(nle," to load the model weights."),nle.forEach(t),hlt=i(_L),T(dA.$$.fragment,_L),_L.forEach(t),plt=i(Ii),rt=n(Ii,"DIV",{class:!0});var Ni=s(rt);T(SS.$$.fragment,Ni),ult=i(Ni),Vye=n(Ni,"P",{});var Sra=s(Vye);_lt=r(Sra,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sra.forEach(t),blt=i(Ni),On=n(Ni,"P",{});var bL=s(On);vlt=r(bL,"The model class to instantiate is selected based on the "),Xye=n(bL,"CODE",{});var Rra=s(Xye);Flt=r(Rra,"model_type"),Rra.forEach(t),Tlt=r(bL,` property of the config object (either
passed as an argument or loaded from `),zye=n(bL,"CODE",{});var Pra=s(zye);Mlt=r(Pra,"pretrained_model_name_or_path"),Pra.forEach(t),Elt=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qye=n(bL,"CODE",{});var Bra=s(Qye);Clt=r(Bra,"pretrained_model_name_or_path"),Bra.forEach(t),wlt=r(bL,":"),bL.forEach(t),Alt=i(Ni),Re=n(Ni,"UL",{});var Ge=s(Re);cA=n(Ge,"LI",{});var iUe=s(cA);Wye=n(iUe,"STRONG",{});var Ira=s(Wye);ylt=r(Ira,"albert"),Ira.forEach(t),Llt=r(iUe," \u2014 "),wae=n(iUe,"A",{href:!0});var Nra=s(wae);xlt=r(Nra,"FlaxAlbertForQuestionAnswering"),Nra.forEach(t),$lt=r(iUe," (ALBERT model)"),iUe.forEach(t),klt=i(Ge),fA=n(Ge,"LI",{});var dUe=s(fA);Uye=n(dUe,"STRONG",{});var qra=s(Uye);Slt=r(qra,"bart"),qra.forEach(t),Rlt=r(dUe," \u2014 "),Aae=n(dUe,"A",{href:!0});var jra=s(Aae);Plt=r(jra,"FlaxBartForQuestionAnswering"),jra.forEach(t),Blt=r(dUe," (BART model)"),dUe.forEach(t),Ilt=i(Ge),mA=n(Ge,"LI",{});var cUe=s(mA);Hye=n(cUe,"STRONG",{});var Dra=s(Hye);Nlt=r(Dra,"bert"),Dra.forEach(t),qlt=r(cUe," \u2014 "),yae=n(cUe,"A",{href:!0});var Gra=s(yae);jlt=r(Gra,"FlaxBertForQuestionAnswering"),Gra.forEach(t),Dlt=r(cUe," (BERT model)"),cUe.forEach(t),Glt=i(Ge),gA=n(Ge,"LI",{});var fUe=s(gA);Jye=n(fUe,"STRONG",{});var Ora=s(Jye);Olt=r(Ora,"big_bird"),Ora.forEach(t),Vlt=r(fUe," \u2014 "),Lae=n(fUe,"A",{href:!0});var Vra=s(Lae);Xlt=r(Vra,"FlaxBigBirdForQuestionAnswering"),Vra.forEach(t),zlt=r(fUe," (BigBird model)"),fUe.forEach(t),Qlt=i(Ge),hA=n(Ge,"LI",{});var mUe=s(hA);Yye=n(mUe,"STRONG",{});var Xra=s(Yye);Wlt=r(Xra,"distilbert"),Xra.forEach(t),Ult=r(mUe," \u2014 "),xae=n(mUe,"A",{href:!0});var zra=s(xae);Hlt=r(zra,"FlaxDistilBertForQuestionAnswering"),zra.forEach(t),Jlt=r(mUe," (DistilBERT model)"),mUe.forEach(t),Ylt=i(Ge),pA=n(Ge,"LI",{});var gUe=s(pA);Kye=n(gUe,"STRONG",{});var Qra=s(Kye);Klt=r(Qra,"electra"),Qra.forEach(t),Zlt=r(gUe," \u2014 "),$ae=n(gUe,"A",{href:!0});var Wra=s($ae);eit=r(Wra,"FlaxElectraForQuestionAnswering"),Wra.forEach(t),oit=r(gUe," (ELECTRA model)"),gUe.forEach(t),rit=i(Ge),uA=n(Ge,"LI",{});var hUe=s(uA);Zye=n(hUe,"STRONG",{});var Ura=s(Zye);tit=r(Ura,"mbart"),Ura.forEach(t),ait=r(hUe," \u2014 "),kae=n(hUe,"A",{href:!0});var Hra=s(kae);nit=r(Hra,"FlaxMBartForQuestionAnswering"),Hra.forEach(t),sit=r(hUe," (mBART model)"),hUe.forEach(t),lit=i(Ge),_A=n(Ge,"LI",{});var pUe=s(_A);eLe=n(pUe,"STRONG",{});var Jra=s(eLe);iit=r(Jra,"roberta"),Jra.forEach(t),dit=r(pUe," \u2014 "),Sae=n(pUe,"A",{href:!0});var Yra=s(Sae);cit=r(Yra,"FlaxRobertaForQuestionAnswering"),Yra.forEach(t),fit=r(pUe," (RoBERTa model)"),pUe.forEach(t),mit=i(Ge),bA=n(Ge,"LI",{});var uUe=s(bA);oLe=n(uUe,"STRONG",{});var Kra=s(oLe);git=r(Kra,"roformer"),Kra.forEach(t),hit=r(uUe," \u2014 "),Rae=n(uUe,"A",{href:!0});var Zra=s(Rae);pit=r(Zra,"FlaxRoFormerForQuestionAnswering"),Zra.forEach(t),uit=r(uUe," (RoFormer model)"),uUe.forEach(t),_it=i(Ge),vA=n(Ge,"LI",{});var _Ue=s(vA);rLe=n(_Ue,"STRONG",{});var eta=s(rLe);bit=r(eta,"xlm-roberta"),eta.forEach(t),vit=r(_Ue," \u2014 "),Pae=n(_Ue,"A",{href:!0});var ota=s(Pae);Fit=r(ota,"FlaxXLMRobertaForQuestionAnswering"),ota.forEach(t),Tit=r(_Ue," (XLM-RoBERTa model)"),_Ue.forEach(t),Ge.forEach(t),Mit=i(Ni),T(FA.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),jJe=i(f),Qf=n(f,"H2",{class:!0});var oZe=s(Qf);TA=n(oZe,"A",{id:!0,class:!0,href:!0});var rta=s(TA);tLe=n(rta,"SPAN",{});var tta=s(tLe);T(RS.$$.fragment,tta),tta.forEach(t),rta.forEach(t),Eit=i(oZe),aLe=n(oZe,"SPAN",{});var ata=s(aLe);Cit=r(ata,"FlaxAutoModelForTokenClassification"),ata.forEach(t),oZe.forEach(t),DJe=i(f),Lr=n(f,"DIV",{class:!0});var qi=s(Lr);T(PS.$$.fragment,qi),wit=i(qi),Wf=n(qi,"P",{});var sle=s(Wf);Ait=r(sle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Bae=n(sle,"A",{href:!0});var nta=s(Bae);yit=r(nta,"from_pretrained()"),nta.forEach(t),Lit=r(sle," class method or the "),Iae=n(sle,"A",{href:!0});var sta=s(Iae);xit=r(sta,"from_config()"),sta.forEach(t),$it=r(sle,` class
method.`),sle.forEach(t),kit=i(qi),BS=n(qi,"P",{});var rZe=s(BS);Sit=r(rZe,"This class cannot be instantiated directly using "),nLe=n(rZe,"CODE",{});var lta=s(nLe);Rit=r(lta,"__init__()"),lta.forEach(t),Pit=r(rZe," (throws an error)."),rZe.forEach(t),Bit=i(qi),da=n(qi,"DIV",{class:!0});var vL=s(da);T(IS.$$.fragment,vL),Iit=i(vL),sLe=n(vL,"P",{});var ita=s(sLe);Nit=r(ita,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ita.forEach(t),qit=i(vL),Uf=n(vL,"P",{});var lle=s(Uf);jit=r(lle,`Note:
Loading a model from its configuration file does `),lLe=n(lle,"STRONG",{});var dta=s(lLe);Dit=r(dta,"not"),dta.forEach(t),Git=r(lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nae=n(lle,"A",{href:!0});var cta=s(Nae);Oit=r(cta,"from_pretrained()"),cta.forEach(t),Vit=r(lle," to load the model weights."),lle.forEach(t),Xit=i(vL),T(MA.$$.fragment,vL),vL.forEach(t),zit=i(qi),tt=n(qi,"DIV",{class:!0});var ji=s(tt);T(NS.$$.fragment,ji),Qit=i(ji),iLe=n(ji,"P",{});var fta=s(iLe);Wit=r(fta,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fta.forEach(t),Uit=i(ji),Vn=n(ji,"P",{});var FL=s(Vn);Hit=r(FL,"The model class to instantiate is selected based on the "),dLe=n(FL,"CODE",{});var mta=s(dLe);Jit=r(mta,"model_type"),mta.forEach(t),Yit=r(FL,` property of the config object (either
passed as an argument or loaded from `),cLe=n(FL,"CODE",{});var gta=s(cLe);Kit=r(gta,"pretrained_model_name_or_path"),gta.forEach(t),Zit=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fLe=n(FL,"CODE",{});var hta=s(fLe);edt=r(hta,"pretrained_model_name_or_path"),hta.forEach(t),odt=r(FL,":"),FL.forEach(t),rdt=i(ji),Xe=n(ji,"UL",{});var wo=s(Xe);EA=n(wo,"LI",{});var bUe=s(EA);mLe=n(bUe,"STRONG",{});var pta=s(mLe);tdt=r(pta,"albert"),pta.forEach(t),adt=r(bUe," \u2014 "),qae=n(bUe,"A",{href:!0});var uta=s(qae);ndt=r(uta,"FlaxAlbertForTokenClassification"),uta.forEach(t),sdt=r(bUe," (ALBERT model)"),bUe.forEach(t),ldt=i(wo),CA=n(wo,"LI",{});var vUe=s(CA);gLe=n(vUe,"STRONG",{});var _ta=s(gLe);idt=r(_ta,"bert"),_ta.forEach(t),ddt=r(vUe," \u2014 "),jae=n(vUe,"A",{href:!0});var bta=s(jae);cdt=r(bta,"FlaxBertForTokenClassification"),bta.forEach(t),fdt=r(vUe," (BERT model)"),vUe.forEach(t),mdt=i(wo),wA=n(wo,"LI",{});var FUe=s(wA);hLe=n(FUe,"STRONG",{});var vta=s(hLe);gdt=r(vta,"big_bird"),vta.forEach(t),hdt=r(FUe," \u2014 "),Dae=n(FUe,"A",{href:!0});var Fta=s(Dae);pdt=r(Fta,"FlaxBigBirdForTokenClassification"),Fta.forEach(t),udt=r(FUe," (BigBird model)"),FUe.forEach(t),_dt=i(wo),AA=n(wo,"LI",{});var TUe=s(AA);pLe=n(TUe,"STRONG",{});var Tta=s(pLe);bdt=r(Tta,"distilbert"),Tta.forEach(t),vdt=r(TUe," \u2014 "),Gae=n(TUe,"A",{href:!0});var Mta=s(Gae);Fdt=r(Mta,"FlaxDistilBertForTokenClassification"),Mta.forEach(t),Tdt=r(TUe," (DistilBERT model)"),TUe.forEach(t),Mdt=i(wo),yA=n(wo,"LI",{});var MUe=s(yA);uLe=n(MUe,"STRONG",{});var Eta=s(uLe);Edt=r(Eta,"electra"),Eta.forEach(t),Cdt=r(MUe," \u2014 "),Oae=n(MUe,"A",{href:!0});var Cta=s(Oae);wdt=r(Cta,"FlaxElectraForTokenClassification"),Cta.forEach(t),Adt=r(MUe," (ELECTRA model)"),MUe.forEach(t),ydt=i(wo),LA=n(wo,"LI",{});var EUe=s(LA);_Le=n(EUe,"STRONG",{});var wta=s(_Le);Ldt=r(wta,"roberta"),wta.forEach(t),xdt=r(EUe," \u2014 "),Vae=n(EUe,"A",{href:!0});var Ata=s(Vae);$dt=r(Ata,"FlaxRobertaForTokenClassification"),Ata.forEach(t),kdt=r(EUe," (RoBERTa model)"),EUe.forEach(t),Sdt=i(wo),xA=n(wo,"LI",{});var CUe=s(xA);bLe=n(CUe,"STRONG",{});var yta=s(bLe);Rdt=r(yta,"roformer"),yta.forEach(t),Pdt=r(CUe," \u2014 "),Xae=n(CUe,"A",{href:!0});var Lta=s(Xae);Bdt=r(Lta,"FlaxRoFormerForTokenClassification"),Lta.forEach(t),Idt=r(CUe," (RoFormer model)"),CUe.forEach(t),Ndt=i(wo),$A=n(wo,"LI",{});var wUe=s($A);vLe=n(wUe,"STRONG",{});var xta=s(vLe);qdt=r(xta,"xlm-roberta"),xta.forEach(t),jdt=r(wUe," \u2014 "),zae=n(wUe,"A",{href:!0});var $ta=s(zae);Ddt=r($ta,"FlaxXLMRobertaForTokenClassification"),$ta.forEach(t),Gdt=r(wUe," (XLM-RoBERTa model)"),wUe.forEach(t),wo.forEach(t),Odt=i(ji),T(kA.$$.fragment,ji),ji.forEach(t),qi.forEach(t),GJe=i(f),Hf=n(f,"H2",{class:!0});var tZe=s(Hf);SA=n(tZe,"A",{id:!0,class:!0,href:!0});var kta=s(SA);FLe=n(kta,"SPAN",{});var Sta=s(FLe);T(qS.$$.fragment,Sta),Sta.forEach(t),kta.forEach(t),Vdt=i(tZe),TLe=n(tZe,"SPAN",{});var Rta=s(TLe);Xdt=r(Rta,"FlaxAutoModelForMultipleChoice"),Rta.forEach(t),tZe.forEach(t),OJe=i(f),xr=n(f,"DIV",{class:!0});var Di=s(xr);T(jS.$$.fragment,Di),zdt=i(Di),Jf=n(Di,"P",{});var ile=s(Jf);Qdt=r(ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qae=n(ile,"A",{href:!0});var Pta=s(Qae);Wdt=r(Pta,"from_pretrained()"),Pta.forEach(t),Udt=r(ile," class method or the "),Wae=n(ile,"A",{href:!0});var Bta=s(Wae);Hdt=r(Bta,"from_config()"),Bta.forEach(t),Jdt=r(ile,` class
method.`),ile.forEach(t),Ydt=i(Di),DS=n(Di,"P",{});var aZe=s(DS);Kdt=r(aZe,"This class cannot be instantiated directly using "),MLe=n(aZe,"CODE",{});var Ita=s(MLe);Zdt=r(Ita,"__init__()"),Ita.forEach(t),ect=r(aZe," (throws an error)."),aZe.forEach(t),oct=i(Di),ca=n(Di,"DIV",{class:!0});var TL=s(ca);T(GS.$$.fragment,TL),rct=i(TL),ELe=n(TL,"P",{});var Nta=s(ELe);tct=r(Nta,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nta.forEach(t),act=i(TL),Yf=n(TL,"P",{});var dle=s(Yf);nct=r(dle,`Note:
Loading a model from its configuration file does `),CLe=n(dle,"STRONG",{});var qta=s(CLe);sct=r(qta,"not"),qta.forEach(t),lct=r(dle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uae=n(dle,"A",{href:!0});var jta=s(Uae);ict=r(jta,"from_pretrained()"),jta.forEach(t),dct=r(dle," to load the model weights."),dle.forEach(t),cct=i(TL),T(RA.$$.fragment,TL),TL.forEach(t),fct=i(Di),at=n(Di,"DIV",{class:!0});var Gi=s(at);T(OS.$$.fragment,Gi),mct=i(Gi),wLe=n(Gi,"P",{});var Dta=s(wLe);gct=r(Dta,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dta.forEach(t),hct=i(Gi),Xn=n(Gi,"P",{});var ML=s(Xn);pct=r(ML,"The model class to instantiate is selected based on the "),ALe=n(ML,"CODE",{});var Gta=s(ALe);uct=r(Gta,"model_type"),Gta.forEach(t),_ct=r(ML,` property of the config object (either
passed as an argument or loaded from `),yLe=n(ML,"CODE",{});var Ota=s(yLe);bct=r(Ota,"pretrained_model_name_or_path"),Ota.forEach(t),vct=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LLe=n(ML,"CODE",{});var Vta=s(LLe);Fct=r(Vta,"pretrained_model_name_or_path"),Vta.forEach(t),Tct=r(ML,":"),ML.forEach(t),Mct=i(Gi),ze=n(Gi,"UL",{});var Ao=s(ze);PA=n(Ao,"LI",{});var AUe=s(PA);xLe=n(AUe,"STRONG",{});var Xta=s(xLe);Ect=r(Xta,"albert"),Xta.forEach(t),Cct=r(AUe," \u2014 "),Hae=n(AUe,"A",{href:!0});var zta=s(Hae);wct=r(zta,"FlaxAlbertForMultipleChoice"),zta.forEach(t),Act=r(AUe," (ALBERT model)"),AUe.forEach(t),yct=i(Ao),BA=n(Ao,"LI",{});var yUe=s(BA);$Le=n(yUe,"STRONG",{});var Qta=s($Le);Lct=r(Qta,"bert"),Qta.forEach(t),xct=r(yUe," \u2014 "),Jae=n(yUe,"A",{href:!0});var Wta=s(Jae);$ct=r(Wta,"FlaxBertForMultipleChoice"),Wta.forEach(t),kct=r(yUe," (BERT model)"),yUe.forEach(t),Sct=i(Ao),IA=n(Ao,"LI",{});var LUe=s(IA);kLe=n(LUe,"STRONG",{});var Uta=s(kLe);Rct=r(Uta,"big_bird"),Uta.forEach(t),Pct=r(LUe," \u2014 "),Yae=n(LUe,"A",{href:!0});var Hta=s(Yae);Bct=r(Hta,"FlaxBigBirdForMultipleChoice"),Hta.forEach(t),Ict=r(LUe," (BigBird model)"),LUe.forEach(t),Nct=i(Ao),NA=n(Ao,"LI",{});var xUe=s(NA);SLe=n(xUe,"STRONG",{});var Jta=s(SLe);qct=r(Jta,"distilbert"),Jta.forEach(t),jct=r(xUe," \u2014 "),Kae=n(xUe,"A",{href:!0});var Yta=s(Kae);Dct=r(Yta,"FlaxDistilBertForMultipleChoice"),Yta.forEach(t),Gct=r(xUe," (DistilBERT model)"),xUe.forEach(t),Oct=i(Ao),qA=n(Ao,"LI",{});var $Ue=s(qA);RLe=n($Ue,"STRONG",{});var Kta=s(RLe);Vct=r(Kta,"electra"),Kta.forEach(t),Xct=r($Ue," \u2014 "),Zae=n($Ue,"A",{href:!0});var Zta=s(Zae);zct=r(Zta,"FlaxElectraForMultipleChoice"),Zta.forEach(t),Qct=r($Ue," (ELECTRA model)"),$Ue.forEach(t),Wct=i(Ao),jA=n(Ao,"LI",{});var kUe=s(jA);PLe=n(kUe,"STRONG",{});var eaa=s(PLe);Uct=r(eaa,"roberta"),eaa.forEach(t),Hct=r(kUe," \u2014 "),ene=n(kUe,"A",{href:!0});var oaa=s(ene);Jct=r(oaa,"FlaxRobertaForMultipleChoice"),oaa.forEach(t),Yct=r(kUe," (RoBERTa model)"),kUe.forEach(t),Kct=i(Ao),DA=n(Ao,"LI",{});var SUe=s(DA);BLe=n(SUe,"STRONG",{});var raa=s(BLe);Zct=r(raa,"roformer"),raa.forEach(t),eft=r(SUe," \u2014 "),one=n(SUe,"A",{href:!0});var taa=s(one);oft=r(taa,"FlaxRoFormerForMultipleChoice"),taa.forEach(t),rft=r(SUe," (RoFormer model)"),SUe.forEach(t),tft=i(Ao),GA=n(Ao,"LI",{});var RUe=s(GA);ILe=n(RUe,"STRONG",{});var aaa=s(ILe);aft=r(aaa,"xlm-roberta"),aaa.forEach(t),nft=r(RUe," \u2014 "),rne=n(RUe,"A",{href:!0});var naa=s(rne);sft=r(naa,"FlaxXLMRobertaForMultipleChoice"),naa.forEach(t),lft=r(RUe," (XLM-RoBERTa model)"),RUe.forEach(t),Ao.forEach(t),ift=i(Gi),T(OA.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),VJe=i(f),Kf=n(f,"H2",{class:!0});var nZe=s(Kf);VA=n(nZe,"A",{id:!0,class:!0,href:!0});var saa=s(VA);NLe=n(saa,"SPAN",{});var laa=s(NLe);T(VS.$$.fragment,laa),laa.forEach(t),saa.forEach(t),dft=i(nZe),qLe=n(nZe,"SPAN",{});var iaa=s(qLe);cft=r(iaa,"FlaxAutoModelForNextSentencePrediction"),iaa.forEach(t),nZe.forEach(t),XJe=i(f),$r=n(f,"DIV",{class:!0});var Oi=s($r);T(XS.$$.fragment,Oi),fft=i(Oi),Zf=n(Oi,"P",{});var cle=s(Zf);mft=r(cle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tne=n(cle,"A",{href:!0});var daa=s(tne);gft=r(daa,"from_pretrained()"),daa.forEach(t),hft=r(cle," class method or the "),ane=n(cle,"A",{href:!0});var caa=s(ane);pft=r(caa,"from_config()"),caa.forEach(t),uft=r(cle,` class
method.`),cle.forEach(t),_ft=i(Oi),zS=n(Oi,"P",{});var sZe=s(zS);bft=r(sZe,"This class cannot be instantiated directly using "),jLe=n(sZe,"CODE",{});var faa=s(jLe);vft=r(faa,"__init__()"),faa.forEach(t),Fft=r(sZe," (throws an error)."),sZe.forEach(t),Tft=i(Oi),fa=n(Oi,"DIV",{class:!0});var EL=s(fa);T(QS.$$.fragment,EL),Mft=i(EL),DLe=n(EL,"P",{});var maa=s(DLe);Eft=r(maa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),maa.forEach(t),Cft=i(EL),em=n(EL,"P",{});var fle=s(em);wft=r(fle,`Note:
Loading a model from its configuration file does `),GLe=n(fle,"STRONG",{});var gaa=s(GLe);Aft=r(gaa,"not"),gaa.forEach(t),yft=r(fle,` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=n(fle,"A",{href:!0});var haa=s(nne);Lft=r(haa,"from_pretrained()"),haa.forEach(t),xft=r(fle," to load the model weights."),fle.forEach(t),$ft=i(EL),T(XA.$$.fragment,EL),EL.forEach(t),kft=i(Oi),nt=n(Oi,"DIV",{class:!0});var Vi=s(nt);T(WS.$$.fragment,Vi),Sft=i(Vi),OLe=n(Vi,"P",{});var paa=s(OLe);Rft=r(paa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),paa.forEach(t),Pft=i(Vi),zn=n(Vi,"P",{});var CL=s(zn);Bft=r(CL,"The model class to instantiate is selected based on the "),VLe=n(CL,"CODE",{});var uaa=s(VLe);Ift=r(uaa,"model_type"),uaa.forEach(t),Nft=r(CL,` property of the config object (either
passed as an argument or loaded from `),XLe=n(CL,"CODE",{});var _aa=s(XLe);qft=r(_aa,"pretrained_model_name_or_path"),_aa.forEach(t),jft=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zLe=n(CL,"CODE",{});var baa=s(zLe);Dft=r(baa,"pretrained_model_name_or_path"),baa.forEach(t),Gft=r(CL,":"),CL.forEach(t),Oft=i(Vi),QLe=n(Vi,"UL",{});var vaa=s(QLe);zA=n(vaa,"LI",{});var PUe=s(zA);WLe=n(PUe,"STRONG",{});var Faa=s(WLe);Vft=r(Faa,"bert"),Faa.forEach(t),Xft=r(PUe," \u2014 "),sne=n(PUe,"A",{href:!0});var Taa=s(sne);zft=r(Taa,"FlaxBertForNextSentencePrediction"),Taa.forEach(t),Qft=r(PUe," (BERT model)"),PUe.forEach(t),vaa.forEach(t),Wft=i(Vi),T(QA.$$.fragment,Vi),Vi.forEach(t),Oi.forEach(t),zJe=i(f),om=n(f,"H2",{class:!0});var lZe=s(om);WA=n(lZe,"A",{id:!0,class:!0,href:!0});var Maa=s(WA);ULe=n(Maa,"SPAN",{});var Eaa=s(ULe);T(US.$$.fragment,Eaa),Eaa.forEach(t),Maa.forEach(t),Uft=i(lZe),HLe=n(lZe,"SPAN",{});var Caa=s(HLe);Hft=r(Caa,"FlaxAutoModelForImageClassification"),Caa.forEach(t),lZe.forEach(t),QJe=i(f),kr=n(f,"DIV",{class:!0});var Xi=s(kr);T(HS.$$.fragment,Xi),Jft=i(Xi),rm=n(Xi,"P",{});var mle=s(rm);Yft=r(mle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lne=n(mle,"A",{href:!0});var waa=s(lne);Kft=r(waa,"from_pretrained()"),waa.forEach(t),Zft=r(mle," class method or the "),ine=n(mle,"A",{href:!0});var Aaa=s(ine);emt=r(Aaa,"from_config()"),Aaa.forEach(t),omt=r(mle,` class
method.`),mle.forEach(t),rmt=i(Xi),JS=n(Xi,"P",{});var iZe=s(JS);tmt=r(iZe,"This class cannot be instantiated directly using "),JLe=n(iZe,"CODE",{});var yaa=s(JLe);amt=r(yaa,"__init__()"),yaa.forEach(t),nmt=r(iZe," (throws an error)."),iZe.forEach(t),smt=i(Xi),ma=n(Xi,"DIV",{class:!0});var wL=s(ma);T(YS.$$.fragment,wL),lmt=i(wL),YLe=n(wL,"P",{});var Laa=s(YLe);imt=r(Laa,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Laa.forEach(t),dmt=i(wL),tm=n(wL,"P",{});var gle=s(tm);cmt=r(gle,`Note:
Loading a model from its configuration file does `),KLe=n(gle,"STRONG",{});var xaa=s(KLe);fmt=r(xaa,"not"),xaa.forEach(t),mmt=r(gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),dne=n(gle,"A",{href:!0});var $aa=s(dne);gmt=r($aa,"from_pretrained()"),$aa.forEach(t),hmt=r(gle," to load the model weights."),gle.forEach(t),pmt=i(wL),T(UA.$$.fragment,wL),wL.forEach(t),umt=i(Xi),st=n(Xi,"DIV",{class:!0});var zi=s(st);T(KS.$$.fragment,zi),_mt=i(zi),ZLe=n(zi,"P",{});var kaa=s(ZLe);bmt=r(kaa,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kaa.forEach(t),vmt=i(zi),Qn=n(zi,"P",{});var AL=s(Qn);Fmt=r(AL,"The model class to instantiate is selected based on the "),e9e=n(AL,"CODE",{});var Saa=s(e9e);Tmt=r(Saa,"model_type"),Saa.forEach(t),Mmt=r(AL,` property of the config object (either
passed as an argument or loaded from `),o9e=n(AL,"CODE",{});var Raa=s(o9e);Emt=r(Raa,"pretrained_model_name_or_path"),Raa.forEach(t),Cmt=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r9e=n(AL,"CODE",{});var Paa=s(r9e);wmt=r(Paa,"pretrained_model_name_or_path"),Paa.forEach(t),Amt=r(AL,":"),AL.forEach(t),ymt=i(zi),ZS=n(zi,"UL",{});var dZe=s(ZS);HA=n(dZe,"LI",{});var BUe=s(HA);t9e=n(BUe,"STRONG",{});var Baa=s(t9e);Lmt=r(Baa,"beit"),Baa.forEach(t),xmt=r(BUe," \u2014 "),cne=n(BUe,"A",{href:!0});var Iaa=s(cne);$mt=r(Iaa,"FlaxBeitForImageClassification"),Iaa.forEach(t),kmt=r(BUe," (BEiT model)"),BUe.forEach(t),Smt=i(dZe),JA=n(dZe,"LI",{});var IUe=s(JA);a9e=n(IUe,"STRONG",{});var Naa=s(a9e);Rmt=r(Naa,"vit"),Naa.forEach(t),Pmt=r(IUe," \u2014 "),fne=n(IUe,"A",{href:!0});var qaa=s(fne);Bmt=r(qaa,"FlaxViTForImageClassification"),qaa.forEach(t),Imt=r(IUe," (ViT model)"),IUe.forEach(t),dZe.forEach(t),Nmt=i(zi),T(YA.$$.fragment,zi),zi.forEach(t),Xi.forEach(t),WJe=i(f),am=n(f,"H2",{class:!0});var cZe=s(am);KA=n(cZe,"A",{id:!0,class:!0,href:!0});var jaa=s(KA);n9e=n(jaa,"SPAN",{});var Daa=s(n9e);T(eR.$$.fragment,Daa),Daa.forEach(t),jaa.forEach(t),qmt=i(cZe),s9e=n(cZe,"SPAN",{});var Gaa=s(s9e);jmt=r(Gaa,"FlaxAutoModelForVision2Seq"),Gaa.forEach(t),cZe.forEach(t),UJe=i(f),Sr=n(f,"DIV",{class:!0});var Qi=s(Sr);T(oR.$$.fragment,Qi),Dmt=i(Qi),nm=n(Qi,"P",{});var hle=s(nm);Gmt=r(hle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mne=n(hle,"A",{href:!0});var Oaa=s(mne);Omt=r(Oaa,"from_pretrained()"),Oaa.forEach(t),Vmt=r(hle," class method or the "),gne=n(hle,"A",{href:!0});var Vaa=s(gne);Xmt=r(Vaa,"from_config()"),Vaa.forEach(t),zmt=r(hle,` class
method.`),hle.forEach(t),Qmt=i(Qi),rR=n(Qi,"P",{});var fZe=s(rR);Wmt=r(fZe,"This class cannot be instantiated directly using "),l9e=n(fZe,"CODE",{});var Xaa=s(l9e);Umt=r(Xaa,"__init__()"),Xaa.forEach(t),Hmt=r(fZe," (throws an error)."),fZe.forEach(t),Jmt=i(Qi),ga=n(Qi,"DIV",{class:!0});var yL=s(ga);T(tR.$$.fragment,yL),Ymt=i(yL),i9e=n(yL,"P",{});var zaa=s(i9e);Kmt=r(zaa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zaa.forEach(t),Zmt=i(yL),sm=n(yL,"P",{});var ple=s(sm);egt=r(ple,`Note:
Loading a model from its configuration file does `),d9e=n(ple,"STRONG",{});var Qaa=s(d9e);ogt=r(Qaa,"not"),Qaa.forEach(t),rgt=r(ple,` load the model weights. It only affects the
model\u2019s configuration. Use `),hne=n(ple,"A",{href:!0});var Waa=s(hne);tgt=r(Waa,"from_pretrained()"),Waa.forEach(t),agt=r(ple," to load the model weights."),ple.forEach(t),ngt=i(yL),T(ZA.$$.fragment,yL),yL.forEach(t),sgt=i(Qi),lt=n(Qi,"DIV",{class:!0});var Wi=s(lt);T(aR.$$.fragment,Wi),lgt=i(Wi),c9e=n(Wi,"P",{});var Uaa=s(c9e);igt=r(Uaa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Uaa.forEach(t),dgt=i(Wi),Wn=n(Wi,"P",{});var LL=s(Wn);cgt=r(LL,"The model class to instantiate is selected based on the "),f9e=n(LL,"CODE",{});var Haa=s(f9e);fgt=r(Haa,"model_type"),Haa.forEach(t),mgt=r(LL,` property of the config object (either
passed as an argument or loaded from `),m9e=n(LL,"CODE",{});var Jaa=s(m9e);ggt=r(Jaa,"pretrained_model_name_or_path"),Jaa.forEach(t),hgt=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=n(LL,"CODE",{});var Yaa=s(g9e);pgt=r(Yaa,"pretrained_model_name_or_path"),Yaa.forEach(t),ugt=r(LL,":"),LL.forEach(t),_gt=i(Wi),h9e=n(Wi,"UL",{});var Kaa=s(h9e);e6=n(Kaa,"LI",{});var NUe=s(e6);p9e=n(NUe,"STRONG",{});var Zaa=s(p9e);bgt=r(Zaa,"vision-encoder-decoder"),Zaa.forEach(t),vgt=r(NUe," \u2014 "),pne=n(NUe,"A",{href:!0});var ena=s(pne);Fgt=r(ena,"FlaxVisionEncoderDecoderModel"),ena.forEach(t),Tgt=r(NUe," (Vision Encoder decoder model)"),NUe.forEach(t),Kaa.forEach(t),Mgt=i(Wi),T(o6.$$.fragment,Wi),Wi.forEach(t),Qi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(mla)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Hn,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoConfig"),c(Yn,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoModel"),c(Kn,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoTokenizer"),c(ed,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertModel"),c(hm,"id","extending-the-auto-classes"),c(hm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hm,"href","#extending-the-auto-classes"),c(od,"class","relative group"),c(um,"id","transformers.AutoConfig"),c(um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(um,"href","#transformers.AutoConfig"),c(rd,"class","relative group"),c(PP,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(BP,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertConfig"),c(IP,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartConfig"),c(NP,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitConfig"),c(qP,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertConfig"),c(jP,"href","/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(DP,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdConfig"),c(GP,"href","/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(OP,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(VP,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(XP,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomConfig"),c(zP,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertConfig"),c(QP,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineConfig"),c(WP,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPConfig"),c(UP,"href","/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenConfig"),c(HP,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertConfig"),c(JP,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextConfig"),c(YP,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLConfig"),c(KP,"href","/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtConfig"),c(ZP,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(eB,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(oB,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(rB,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaConfig"),c(tB,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(aB,"href","/docs/transformers/pr_18732/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(nB,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTConfig"),c(sB,"href","/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrConfig"),c(lB,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertConfig"),c(iB,"href","/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinConfig"),c(dB,"href","/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRConfig"),c(cB,"href","/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTConfig"),c(fB,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraConfig"),c(mB,"href","/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(gB,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertConfig"),c(hB,"href","/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaConfig"),c(pB,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetConfig"),c(uB,"href","/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTConfig"),c(_B,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelConfig"),c(bB,"href","/docs/transformers/pr_18732/en/model_doc/glpn#transformers.GLPNConfig"),c(vB,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Config"),c(FB,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(TB,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(MB,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJConfig"),c(EB,"href","/docs/transformers/pr_18732/en/model_doc/groupvit#transformers.GroupViTConfig"),c(CB,"href","/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertConfig"),c(wB,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertConfig"),c(AB,"href","/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(yB,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(LB,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(xB,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c($B,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDConfig"),c(kB,"href","/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitConfig"),c(SB,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerConfig"),c(RB,"href","/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Config"),c(PB,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeConfig"),c(BB,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertConfig"),c(IB,"href","/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Config"),c(NB,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianConfig"),c(qB,"href","/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(jB,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartConfig"),c(DB,"href","/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTConfig"),c(GB,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(OB,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(VB,"href","/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(XB,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetConfig"),c(zB,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Config"),c(QB,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpConfig"),c(WB,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaConfig"),c(UB,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(HB,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(JB,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTConfig"),c(YB,"href","/docs/transformers/pr_18732/en/model_doc/owlvit#transformers.OwlViTConfig"),c(KB,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusConfig"),c(ZB,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverConfig"),c(eI,"href","/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartConfig"),c(oI,"href","/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(rI,"href","/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(tI,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(aI,"href","/docs/transformers/pr_18732/en/model_doc/rag#transformers.RagConfig"),c(nI,"href","/docs/transformers/pr_18732/en/model_doc/realm#transformers.RealmConfig"),c(sI,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerConfig"),c(lI,"href","/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetConfig"),c(iI,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertConfig"),c(dI,"href","/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetConfig"),c(cI,"href","/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertConfig"),c(fI,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaConfig"),c(mI,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerConfig"),c(gI,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerConfig"),c(hI,"href","/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWConfig"),c(pI,"href","/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDConfig"),c(uI,"href","/docs/transformers/pr_18732/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(_I,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(bI,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(vI,"href","/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterConfig"),c(FI,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(TI,"href","/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinConfig"),c(MI,"href","/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2Config"),c(EI,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Config"),c(CI,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasConfig"),c(wI,"href","/docs/transformers/pr_18732/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(AI,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yI,"href","/docs/transformers/pr_18732/en/model_doc/trocr#transformers.TrOCRConfig"),c(LI,"href","/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(xI,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c($I,"href","/docs/transformers/pr_18732/en/model_doc/van#transformers.VanConfig"),c(kI,"href","/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEConfig"),c(SI,"href","/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltConfig"),c(RI,"href","/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(PI,"href","/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(BI,"href","/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(II,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTConfig"),c(NI,"href","/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qI,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(jI,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(DI,"href","/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMConfig"),c(GI,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMConfig"),c(OI,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMConfig"),c(VI,"href","/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(XI,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(zI,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QI,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetConfig"),c(WI,"href","/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosConfig"),c(UI,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoConfig"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoTokenizer"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoTokenizer"),c(ad,"class","relative group"),c(HI,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(JI,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertTokenizer"),c(YI,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KI,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartTokenizer"),c(ZI,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartTokenizerFast"),c(eN,"href","/docs/transformers/pr_18732/en/model_doc/barthez#transformers.BarthezTokenizer"),c(oN,"href","/docs/transformers/pr_18732/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(rN,"href","/docs/transformers/pr_18732/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(tN,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizer"),c(aN,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizerFast"),c(nN,"href","/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(sN,"href","/docs/transformers/pr_18732/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(lN,"href","/docs/transformers/pr_18732/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(iN,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(dN,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(cN,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fN,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mN,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(gN,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(hN,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(pN,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(uN,"href","/docs/transformers/pr_18732/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(_N,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertTokenizer"),c(bN,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(vN,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineTokenizer"),c(FN,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPTokenizer"),c(TN,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(MN,"href","/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(EN,"href","/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(CN,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(wN,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(AN,"href","/docs/transformers/pr_18732/en/model_doc/cpm#transformers.CpmTokenizer"),c(yN,"href","/docs/transformers/pr_18732/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(LN,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(xN,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizer"),c($N,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kN,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaTokenizer"),c(SN,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(RN,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(PN,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(BN,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(IN,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NN,"href","/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(qN,"href","/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(jN,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraTokenizer"),c(DN,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(GN,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ON,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetTokenizer"),c(VN,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(XN,"href","/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(zN,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QN,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(WN,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UN,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HN,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JN,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YN,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(KN,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZN,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eq,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPTokenizer"),c(oq,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rq,"href","/docs/transformers/pr_18732/en/model_doc/herbert#transformers.HerbertTokenizer"),c(tq,"href","/docs/transformers/pr_18732/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(aq,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nq,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sq,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lq,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(iq,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(dq,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(cq,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(fq,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(mq,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(gq,"href","/docs/transformers/pr_18732/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(hq,"href","/docs/transformers/pr_18732/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(pq,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDTokenizer"),c(uq,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDTokenizerFast"),c(_q,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerTokenizer"),c(bq,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(vq,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Tokenizer"),c(Fq,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5TokenizerFast"),c(Tq,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeTokenizer"),c(Mq,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Eq,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Cq,"href","/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(wq,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianTokenizer"),c(Aq,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartTokenizer"),c(yq,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Lq,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(xq,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c($q,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizer"),c(kq,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizerFast"),c(Sq,"href","/docs/transformers/pr_18732/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Rq,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Pq,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Bq,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Iq,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Nq,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Tokenizer"),c(qq,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5TokenizerFast"),c(jq,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpTokenizer"),c(Dq,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Gq,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizer"),c(Oq,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizerFast"),c(Vq,"href","/docs/transformers/pr_18732/en/model_doc/nllb#transformers.NllbTokenizer"),c(Xq,"href","/docs/transformers/pr_18732/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(zq,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertTokenizer"),c(Qq,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Wq,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Uq,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Hq,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Jq,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPTokenizer"),c(Yq,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Kq,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Zq,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ej,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(oj,"href","/docs/transformers/pr_18732/en/model_doc/phobert#transformers.PhobertTokenizer"),c(rj,"href","/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartTokenizer"),c(tj,"href","/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(aj,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizer"),c(nj,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizerFast"),c(sj,"href","/docs/transformers/pr_18732/en/model_doc/rag#transformers.RagTokenizer"),c(lj,"href","/docs/transformers/pr_18732/en/model_doc/realm#transformers.RealmTokenizer"),c(ij,"href","/docs/transformers/pr_18732/en/model_doc/realm#transformers.RealmTokenizerFast"),c(dj,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerTokenizer"),c(cj,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(fj,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertTokenizer"),c(mj,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(gj,"href","/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(hj,"href","/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(pj,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uj,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_j,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(bj,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(vj,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Fj,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(Tj,"href","/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterTokenizer"),c(Mj,"href","/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Ej,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Cj,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(wj,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Tokenizer"),c(Aj,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5TokenizerFast"),c(yj,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasTokenizer"),c(Lj,"href","/docs/transformers/pr_18732/en/model_doc/tapex#transformers.TapexTokenizer"),c(xj,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c($j,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizer"),c(kj,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizerFast"),c(Sj,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizer"),c(Rj,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertTokenizerFast"),c(Pj,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Bj,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ij,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(Nj,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qj,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jj,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMTokenizer"),c(Dj,"href","/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Gj,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Oj,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Vj,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Xj,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zj,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Qj,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Wj,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertTokenizer"),c(Uj,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"id","transformers.AutoFeatureExtractor"),c(pp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pp,"href","#transformers.AutoFeatureExtractor"),c(nd,"class","relative group"),c(Hj,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Jj,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Yj,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Kj,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Zj,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oD,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rD,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tD,"href","/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aD,"href","/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(nD,"href","/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(sD,"href","/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(lD,"href","/docs/transformers/pr_18732/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(iD,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(dD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cD,"href","/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(fD,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(mD,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(gD,"href","/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(hD,"href","/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pD,"href","/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(uD,"href","/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(_D,"href","/docs/transformers/pr_18732/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(bD,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vD,"href","/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FD,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TD,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MD,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(ED,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CD,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wD,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(AD,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yD,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LD,"href","/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(xD,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($D,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RD,"href","/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"id","transformers.AutoProcessor"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoProcessor"),c(sd,"class","relative group"),c(PD,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(BD,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPProcessor"),c(ID,"href","/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutProcessor"),c(ND,"href","/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaProcessor"),c(qD,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPProcessor"),c(jD,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(DD,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(GD,"href","/docs/transformers/pr_18732/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(OD,"href","/docs/transformers/pr_18732/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(VD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zD,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(QD,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(WD,"href","/docs/transformers/pr_18732/en/model_doc/trocr#transformers.TrOCRProcessor"),c(UD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JD,"href","/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltProcessor"),c(YD,"href","/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(KD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZD,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eG,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yu,"id","transformers.AutoModel"),c(yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yu,"href","#transformers.AutoModel"),c(id,"class","relative group"),c(oG,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertModel"),c(nG,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartModel"),c(sG,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitModel"),c(lG,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertModel"),c(iG,"href","/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(dG,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdModel"),c(cG,"href","/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(fG,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mG,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(gG,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomModel"),c(hG,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertModel"),c(pG,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineModel"),c(uG,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.CLIPModel"),c(_G,"href","/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenModel"),c(bG,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertModel"),c(vG,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextModel"),c(FG,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLModel"),c(TG,"href","/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtModel"),c(MG,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(EG,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(CG,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wG,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaModel"),c(AG,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(yG,"href","/docs/transformers/pr_18732/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LG,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTModel"),c(xG,"href","/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrModel"),c($G,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertModel"),c(kG,"href","/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinModel"),c(SG,"href","/docs/transformers/pr_18732/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(RG,"href","/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTModel"),c(PG,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraModel"),c(BG,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertModel"),c(IG,"href","/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaModel"),c(NG,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetModel"),c(qG,"href","/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTModel"),c(jG,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelModel"),c(DG,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelBaseModel"),c(GG,"href","/docs/transformers/pr_18732/en/model_doc/glpn#transformers.GLPNModel"),c(OG,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2Model"),c(VG,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(XG,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(zG,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJModel"),c(QG,"href","/docs/transformers/pr_18732/en/model_doc/groupvit#transformers.GroupViTModel"),c(WG,"href","/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertModel"),c(UG,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertModel"),c(HG,"href","/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(JG,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(YG,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(KG,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(ZG,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDModel"),c(eO,"href","/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitModel"),c(oO,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerModel"),c(rO,"href","/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5Model"),c(tO,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeModel"),c(aO,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertModel"),c(nO,"href","/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Model"),c(sO,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianModel"),c(lO,"href","/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerModel"),c(iO,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartModel"),c(dO,"href","/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTModel"),c(cO,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fO,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertModel"),c(mO,"href","/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTModel"),c(gO,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetModel"),c(hO,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5Model"),c(pO,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpModel"),c(uO,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaModel"),c(_O,"href","/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100Model"),c(bO,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerModel"),c(vO,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(FO,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTModel"),c(TO,"href","/docs/transformers/pr_18732/en/model_doc/owlvit#transformers.OwlViTModel"),c(MO,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusModel"),c(EO,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverModel"),c(CO,"href","/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartModel"),c(wO,"href","/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerModel"),c(AO,"href","/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(yO,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertModel"),c(LO,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerModel"),c(xO,"href","/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetModel"),c($O,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertModel"),c(kO,"href","/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetModel"),c(SO,"href","/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertModel"),c(RO,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaModel"),c(PO,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerModel"),c(BO,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerModel"),c(IO,"href","/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWModel"),c(NO,"href","/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDModel"),c(qO,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jO,"href","/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterModel"),c(DO,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(GO,"href","/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinModel"),c(OO,"href","/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2Model"),c(VO,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5Model"),c(XO,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasModel"),c(zO,"href","/docs/transformers/pr_18732/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(QO,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(WO,"href","/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechModel"),c(UO,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(HO,"href","/docs/transformers/pr_18732/en/model_doc/van#transformers.VanModel"),c(JO,"href","/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEModel"),c(YO,"href","/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltModel"),c(KO,"href","/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(ZO,"href","/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertModel"),c(eV,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTModel"),c(oV,"href","/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(rV,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(tV,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(aV,"href","/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMModel"),c(nV,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMModel"),c(sV,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMModel"),c(lV,"href","/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(iV,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(dV,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(cV,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetModel"),c(fV,"href","/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosModel"),c(mV,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q2,"id","transformers.AutoModelForPreTraining"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.AutoModelForPreTraining"),c(fd,"class","relative group"),c(gV,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForPreTraining"),c(_V,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bV,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForPreTraining"),c(vV,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(FV,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForCausalLM"),c(TV,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(MV,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(EV,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(CV,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wV,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AV,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(yV,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForPreTraining"),c(LV,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xV,"href","/docs/transformers/pr_18732/en/model_doc/flava#transformers.FlavaForPreTraining"),c($V,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kV,"href","/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(RV,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(PV,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BV,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(IV,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(NV,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForMaskedLM"),c(qV,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jV,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(DV,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(GV,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(OV,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(VV,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(XV,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zV,"href","/docs/transformers/pr_18732/en/model_doc/retribert#transformers.RetriBertModel"),c(QV,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(WV,"href","/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(UV,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(HV,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(JV,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(YV,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(KV,"href","/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ZV,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(eX,"href","/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(oX,"href","/docs/transformers/pr_18732/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rX,"href","/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tX,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aX,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nX,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sX,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lX,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iX,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B1,"id","transformers.AutoModelForCausalLM"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForCausalLM"),c(hd,"class","relative group"),c(dX,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForCausalLM"),c(gX,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertLMHeadModel"),c(hX,"href","/docs/transformers/pr_18732/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(pX,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(uX,"href","/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_X,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bX,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vX,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FX,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(TX,"href","/docs/transformers/pr_18732/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(MX,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(EX,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(CX,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForCausalLM"),c(wX,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(AX,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(yX,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(LX,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(xX,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianForCausalLM"),c($X,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForCausalLM"),c(kX,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(SX,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForCausalLM"),c(RX,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(PX,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTForCausalLM"),c(BX,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(IX,"href","/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(NX,"href","/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(qX,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(jX,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(DX,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(GX,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(OX,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(VX,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(XX,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(zX,"href","/docs/transformers/pr_18732/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(QX,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(WX,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(UX,"href","/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(HX,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(JX,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(YX,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForMaskedLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForMaskedLM"),c(_d,"class","relative group"),c(KX,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(rz,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(tz,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForMaskedLM"),c(az,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(nz,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sz,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(lz,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iz,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dz,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cz,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fz,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(mz,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gz,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(hz,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(pz,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uz,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_z,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bz,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForMaskedLM"),c(vz,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Tz,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Mz,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Ez,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Cz,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(wz,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Az,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(yz,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Lz,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(xz,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c($z,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kz,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Sz,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Rz,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Pz,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Bz,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Iz,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Nz,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForSeq2SeqLM"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForSeq2SeqLM"),c(Fd,"class","relative group"),c(qz,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Oz,"href","/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Vz,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Xz,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(zz,"href","/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Qz,"href","/docs/transformers/pr_18732/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Wz,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Uz,"href","/docs/transformers/pr_18732/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Hz,"href","/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Jz,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.MarianMTModel"),c(Yz,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Zz,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(eQ,"href","/docs/transformers/pr_18732/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(oQ,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rQ,"href","/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tQ,"href","/docs/transformers/pr_18732/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aQ,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nQ,"href","/docs/transformers/pr_18732/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForSequenceClassification"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForSequenceClassification"),c(Ed,"class","relative group"),c(sQ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cQ,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fQ,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mQ,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gQ,"href","/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hQ,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(pQ,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uQ,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(_Q,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(bQ,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(vQ,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(FQ,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(TQ,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(MQ,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(EQ,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(CQ,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c($Q,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_18732/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(oW,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(rW,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(tW,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(aW,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(nW,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(sW,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.AutoModelForMultipleChoice"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.AutoModelForMultipleChoice"),c(Ad,"class","relative group"),c(lW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForMultipleChoice"),c(mW,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(gW,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(hW,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(pW,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(uW,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(_W,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(bW,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(vW,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(FW,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(TW,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(MW,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(EW,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(CW,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(wW,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(AW,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yW,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(LW,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(xW,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c($W,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(kW,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(RW,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(PW,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(BW,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(IW,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(NW,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(qW,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(jW,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(DW,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForNextSentencePrediction"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForNextSentencePrediction"),c(xd,"class","relative group"),c(GW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(zW,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(QW,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(WW,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(UW,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(HW,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForTokenClassification"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForTokenClassification"),c(Sd,"class","relative group"),c(JW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(eU,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForTokenClassification"),c(oU,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(rU,"href","/docs/transformers/pr_18732/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(tU,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(aU,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForTokenClassification"),c(nU,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(sU,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(lU,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(iU,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(dU,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(cU,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(fU,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(mU,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(gU,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(hU,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(pU,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uU,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(_U,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(bU,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(vU,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(FU,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForTokenClassification"),c(TU,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MU,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EU,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CU,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wU,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AU,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(LU,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xU,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($U,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kU,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SU,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RU,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(PU,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(BU,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.AutoModelForQuestionAnswering"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.AutoModelForQuestionAnswering"),c(Bd,"class","relative group"),c(IU,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_18732/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_18732/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZU,"href","/docs/transformers/pr_18732/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_18732/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_18732/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_18732/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_18732/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_18732/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_18732/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_18732/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_18732/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_18732/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_18732/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CH,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(yH,"href","/docs/transformers/pr_18732/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForTableQuestionAnswering"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(qd,"class","relative group"),c(LH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Gd,"class","relative group"),c(SH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_18732/en/model_doc/donut#transformers.DonutSwinModel"),c(IH,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_18732/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForImageClassification"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForImageClassification"),c(zd,"class","relative group"),c(qH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitForImageClassification"),c(OH,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(VH,"href","/docs/transformers/pr_18732/en/model_doc/cvt#transformers.CvtForImageClassification"),c(XH,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(zH,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTForImageClassification"),c(QH,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(WH,"href","/docs/transformers/pr_18732/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(UH,"href","/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitForImageClassification"),c(HH,"href","/docs/transformers/pr_18732/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(JH,"href","/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(YH,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(KH,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(ZH,"href","/docs/transformers/pr_18732/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(eJ,"href","/docs/transformers/pr_18732/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(oJ,"href","/docs/transformers/pr_18732/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(rJ,"href","/docs/transformers/pr_18732/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(tJ,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(aJ,"href","/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinForImageClassification"),c(nJ,"href","/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(sJ,"href","/docs/transformers/pr_18732/en/model_doc/van#transformers.VanForImageClassification"),c(lJ,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTForImageClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForVideoClassification"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForVideoClassification"),c(Ud,"class","relative group"),c(iJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_18732/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForVision2Seq"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForVision2Seq"),c(Yd,"class","relative group"),c(mJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(ec,"class","relative group"),c(uJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/pr_18732/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e8,"id","transformers.AutoModelForAudioClassification"),c(e8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e8,"href","#transformers.AutoModelForAudioClassification"),c(tc,"class","relative group"),c(FJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c($J,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g8,"id","transformers.AutoModelForAudioFrameClassification"),c(g8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g8,"href","#transformers.AutoModelForAudioFrameClassification"),c(sc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(IJ,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NJ,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(qJ,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(jJ,"href","/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M8,"id","transformers.AutoModelForCTC"),c(M8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M8,"href","#transformers.AutoModelForCTC"),c(dc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XJ,"href","/docs/transformers/pr_18732/en/model_doc/hubert#transformers.HubertForCTC"),c(zJ,"href","/docs/transformers/pr_18732/en/model_doc/mctct#transformers.MCTCTForCTC"),c(QJ,"href","/docs/transformers/pr_18732/en/model_doc/sew#transformers.SEWForCTC"),c(WJ,"href","/docs/transformers/pr_18732/en/model_doc/sew-d#transformers.SEWDForCTC"),c(UJ,"href","/docs/transformers/pr_18732/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(HJ,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(JJ,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(YJ,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(KJ,"href","/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForCTC"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I8,"id","transformers.AutoModelForSpeechSeq2Seq"),c(I8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I8,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(mc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_18732/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tY,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O8,"id","transformers.AutoModelForAudioXVector"),c(O8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O8,"href","#transformers.AutoModelForAudioXVector"),c(pc,"class","relative group"),c(aY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iY,"href","/docs/transformers/pr_18732/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dY,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cY,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(fY,"href","/docs/transformers/pr_18732/en/model_doc/wavlm#transformers.WavLMForXVector"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y8,"id","transformers.AutoModelForMaskedImageModeling"),c(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y8,"href","#transformers.AutoModelForMaskedImageModeling"),c(bc,"class","relative group"),c(mY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(uY,"href","/docs/transformers/pr_18732/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(_Y,"href","/docs/transformers/pr_18732/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(bY,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForObjectDetection"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForObjectDetection"),c(Tc,"class","relative group"),c(vY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrForObjectDetection"),c(EY,"href","/docs/transformers/pr_18732/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.AutoModelForImageSegmentation"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.AutoModelForImageSegmentation"),c(Cc,"class","relative group"),c(CY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/pr_18732/en/model_doc/detr#transformers.DetrForSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.AutoModelForSemanticSegmentation"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.AutoModelForSemanticSegmentation"),c(yc,"class","relative group"),c(LY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(SY,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(RY,"href","/docs/transformers/pr_18732/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(PY,"href","/docs/transformers/pr_18732/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(BY,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.AutoModelForInstanceSegmentation"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.AutoModelForInstanceSegmentation"),c($c,"class","relative group"),c(IY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_18732/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModel"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModel"),c(Rc,"class","relative group"),c(DY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertModel"),c(XY,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.TFBartModel"),c(zY,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertModel"),c(QY,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(WY,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(UY,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertModel"),c(HY,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.TFCLIPModel"),c(JY,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertModel"),c(YY,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.TFConvNextModel"),c(KY,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLModel"),c(ZY,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(eK,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaModel"),c(oK,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(rK,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.TFDeiTModel"),c(tK,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(aK,"href","/docs/transformers/pr_18732/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(nK,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraModel"),c(sK,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(lK,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelModel"),c(iK,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(dK,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2Model"),c(cK,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJModel"),c(fK,"href","/docs/transformers/pr_18732/en/model_doc/hubert#transformers.TFHubertModel"),c(mK,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(gK,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.TFLEDModel"),c(hK,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerModel"),c(pK,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.TFLxmertModel"),c(uK,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.TFMarianModel"),c(_K,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.TFMBartModel"),c(bK,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(vK,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetModel"),c(FK,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.TFMT5Model"),c(TK,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(MK,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.TFOPTModel"),c(EK,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.TFPegasusModel"),c(CK,"href","/docs/transformers/pr_18732/en/model_doc/regnet#transformers.TFRegNetModel"),c(wK,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertModel"),c(AK,"href","/docs/transformers/pr_18732/en/model_doc/resnet#transformers.TFResNetModel"),c(yK,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaModel"),c(LK,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerModel"),c(xK,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.TFSegformerModel"),c($K,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(kK,"href","/docs/transformers/pr_18732/en/model_doc/swin#transformers.TFSwinModel"),c(SK,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.TFT5Model"),c(RK,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasModel"),c(PK,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(BK,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.TFViTModel"),c(IK,"href","/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(NK,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(qK,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMModel"),c(jK,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(DK,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForPreTraining"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForPreTraining"),c(Ic,"class","relative group"),c(GK,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(zK,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(QK,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForPreTraining"),c(WK,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(UK,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(HK,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(JK,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(YK,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(KK,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(ZK,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eZ,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oZ,"href","/docs/transformers/pr_18732/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(rZ,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(tZ,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aZ,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nZ,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sZ,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(lZ,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iZ,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(dZ,"href","/docs/transformers/pr_18732/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(cZ,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(fZ,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(mZ,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.TFAutoModelForCausalLM"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.TFAutoModelForCausalLM"),c(jc,"class","relative group"),c(gZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(_Z,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(bZ,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vZ,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(FZ,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(TZ,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MZ,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(EZ,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(CZ,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(wZ,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(AZ,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yZ,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LZ,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForImageClassification"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForImageClassification"),c(Oc,"class","relative group"),c(xZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Z,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SZ,"href","/docs/transformers/pr_18732/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(RZ,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(PZ,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(BZ,"href","/docs/transformers/pr_18732/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(IZ,"href","/docs/transformers/pr_18732/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(NZ,"href","/docs/transformers/pr_18732/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(qZ,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(jZ,"href","/docs/transformers/pr_18732/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DZ,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.TFViTForImageClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForSemanticSegmentation"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(zc,"class","relative group"),c(GZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XZ,"href","/docs/transformers/pr_18732/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(zZ,"href","/docs/transformers/pr_18732/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.TFAutoModelForMaskedLM"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.TFAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(QZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UZ,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(JZ,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(YZ,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KZ,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(ZZ,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(eee,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(oee,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ree,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(tee,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aee,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(nee,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(see,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(lee,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(iee,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dee,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(cee,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fee,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(mee,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gee,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hee,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Yc,"class","relative group"),c(pee,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vee,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Tee,"href","/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Mee,"href","/docs/transformers/pr_18732/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Eee,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.TFMarianMTModel"),c(Cee,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(wee,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Aee,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(yee,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hC,"id","transformers.TFAutoModelForSequenceClassification"),c(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hC,"href","#transformers.TFAutoModelForSequenceClassification"),c(ef,"class","relative group"),c(Lee,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xee,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ee,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kee,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(See,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Pee,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Bee,"href","/docs/transformers/pr_18732/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Iee,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Nee,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(qee,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(jee,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Dee,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Gee,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Oee,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Vee,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Xee,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(zee,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Qee,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Wee,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Uee,"href","/docs/transformers/pr_18732/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Hee,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Jee,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Yee,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Kee,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Zee,"href","/docs/transformers/pr_18732/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(eoe,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ooe,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(roe,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForMultipleChoice"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForMultipleChoice"),c(tf,"class","relative group"),c(toe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aoe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(noe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(soe,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(loe,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(ioe,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(doe,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(coe,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(foe,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(moe,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(goe,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(poe,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(uoe,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(_oe,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(boe,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(voe,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Foe,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Toe,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Moe,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(sf,"class","relative group"),c(Eoe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Coe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(woe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aoe,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(yoe,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(cf,"class","relative group"),c(Loe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xoe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($oe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(koe,"href","/docs/transformers/pr_18732/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.TFAutoModelForTokenClassification"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.TFAutoModelForTokenClassification"),c(gf,"class","relative group"),c(Soe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Roe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Poe,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Boe,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Ioe,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Noe,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(qoe,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(joe,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Doe,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Goe,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Ooe,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Voe,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Xoe,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(zoe,"href","/docs/transformers/pr_18732/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Qoe,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Woe,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Joe,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Koe,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ere,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForQuestionAnswering"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(uf,"class","relative group"),c(ore,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(are,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(nre,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(sre,"href","/docs/transformers/pr_18732/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(lre,"href","/docs/transformers/pr_18732/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(ire,"href","/docs/transformers/pr_18732/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(dre,"href","/docs/transformers/pr_18732/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(cre,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(fre,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(mre,"href","/docs/transformers/pr_18732/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(gre,"href","/docs/transformers/pr_18732/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(hre,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(pre,"href","/docs/transformers/pr_18732/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(ure,"href","/docs/transformers/pr_18732/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(_re,"href","/docs/transformers/pr_18732/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(bre,"href","/docs/transformers/pr_18732/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(vre,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Fre,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Tre,"href","/docs/transformers/pr_18732/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Mre,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Ere,"href","/docs/transformers/pr_18732/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.TFAutoModelForVision2Seq"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.TFAutoModelForVision2Seq"),c(vf,"class","relative group"),c(Cre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Mf,"class","relative group"),c(Lre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($re,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kre,"href","/docs/transformers/pr_18732/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.FlaxAutoModel"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.FlaxAutoModel"),c(wf,"class","relative group"),c(Sre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pre,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bre,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Ire,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartModel"),c(Nre,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.FlaxBeitModel"),c(qre,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertModel"),c(jre,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Dre,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Gre,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Ore,"href","/docs/transformers/pr_18732/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Vre,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Xre,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraModel"),c(zre,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Qre,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Wre,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Ure,"href","/docs/transformers/pr_18732/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Hre,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.FlaxMarianModel"),c(Jre,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Yre,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Kre,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.FlaxOPTModel"),c(Zre,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(ete,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(ote,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(rte,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.FlaxT5Model"),c(tte,"href","/docs/transformers/pr_18732/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(ate,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.FlaxViTModel"),c(nte,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ste,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(lte,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForCausalLM"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Lf,"class","relative group"),c(ite,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fte,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(mte,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(gte,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(hte,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(pte,"href","/docs/transformers/pr_18732/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ute,"href","/docs/transformers/pr_18732/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(_te,"href","/docs/transformers/pr_18732/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(bte,"href","/docs/transformers/pr_18732/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(vte,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Fte,"href","/docs/transformers/pr_18732/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForPreTraining"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForPreTraining"),c(kf,"class","relative group"),c(Tte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ete,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cte,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wte,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ate,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yte,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Lte,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xte,"href","/docs/transformers/pr_18732/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c($te,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(kte,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ste,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Rte,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Pte,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Bte,"href","/docs/transformers/pr_18732/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Ite,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForMaskedLM"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pf,"class","relative group"),c(Nte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dte,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Gte,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ote,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Vte,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Xte,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(zte,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Qte,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Wte,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Ute,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Hte,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nf,"class","relative group"),c(Jte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kte,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zte,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eae,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(oae,"href","/docs/transformers/pr_18732/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(rae,"href","/docs/transformers/pr_18732/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(tae,"href","/docs/transformers/pr_18732/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aae,"href","/docs/transformers/pr_18732/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(nae,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sae,"href","/docs/transformers/pr_18732/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lae,"href","/docs/transformers/pr_18732/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(iae,"href","/docs/transformers/pr_18732/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Df,"class","relative group"),c(dae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mae,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(gae,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(hae,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pae,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(uae,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(_ae,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(bae,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(vae,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Fae,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Tae,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(iA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Vf,"class","relative group"),c(Mae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wae,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Aae,"href","/docs/transformers/pr_18732/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(yae,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Lae,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(xae,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c($ae,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(kae,"href","/docs/transformers/pr_18732/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Sae,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Rae,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Pae,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TA,"id","transformers.FlaxAutoModelForTokenClassification"),c(TA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Qf,"class","relative group"),c(Bae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qae,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(jae,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Dae,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Gae,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Oae,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Vae,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Xae,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(zae,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Hf,"class","relative group"),c(Qae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uae,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hae,"href","/docs/transformers/pr_18732/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Jae,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Yae,"href","/docs/transformers/pr_18732/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Kae,"href","/docs/transformers/pr_18732/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Zae,"href","/docs/transformers/pr_18732/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ene,"href","/docs/transformers/pr_18732/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(one,"href","/docs/transformers/pr_18732/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(rne,"href","/docs/transformers/pr_18732/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(VA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Kf,"class","relative group"),c(tne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ane,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sne,"href","/docs/transformers/pr_18732/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WA,"id","transformers.FlaxAutoModelForImageClassification"),c(WA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WA,"href","#transformers.FlaxAutoModelForImageClassification"),c(om,"class","relative group"),c(lne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ine,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cne,"href","/docs/transformers/pr_18732/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(fne,"href","/docs/transformers/pr_18732/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KA,"id","transformers.FlaxAutoModelForVision2Seq"),c(KA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(am,"class","relative group"),c(mne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hne,"href","/docs/transformers/pr_18732/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pne,"href","/docs/transformers/pr_18732/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,yo),e(yo,Ui),b(f,cm,_),b(f,gt,_),e(gt,Hi),e(gt,Ji),e(Ji,xL),e(gt,fm),b(f,Oe,_),b(f,We,_),e(We,Yi),e(We,Hn),e(Hn,$L),e(We,Jn),e(We,Yn),e(Yn,kL),e(We,Ki),e(We,Kn),e(Kn,SL),e(We,Zi),b(f,mm,_),M(Va,f,_),b(f,Ue,_),b(f,Ae,_),e(Ae,LP),e(Ae,ed),e(ed,xP),e(Ae,$P),b(f,Lo,_),b(f,Xa,_),e(Xa,kP),e(Xa,gm),e(gm,SP),e(Xa,mZe),b(f,qUe,_),b(f,od,_),e(od,hm),e(hm,ule),M(RL,ule,null),e(od,gZe),e(od,_le),e(_le,hZe),b(f,jUe,_),b(f,Zn,_),e(Zn,pZe),e(Zn,ble),e(ble,uZe),e(Zn,_Ze),e(Zn,vle),e(vle,bZe),e(Zn,vZe),b(f,DUe,_),M(PL,f,_),b(f,GUe,_),b(f,RP,_),e(RP,FZe),b(f,OUe,_),M(pm,f,_),b(f,VUe,_),b(f,rd,_),e(rd,um),e(um,Fle),M(BL,Fle,null),e(rd,TZe),e(rd,Tle),e(Tle,MZe),b(f,XUe,_),b(f,xo,_),M(IL,xo,null),e(xo,EZe),e(xo,NL),e(NL,CZe),e(NL,PP),e(PP,wZe),e(NL,AZe),e(xo,yZe),e(xo,qL),e(qL,LZe),e(qL,Mle),e(Mle,xZe),e(qL,$Ze),e(xo,kZe),e(xo,Rr),M(jL,Rr,null),e(Rr,SZe),e(Rr,Ele),e(Ele,RZe),e(Rr,PZe),e(Rr,td),e(td,BZe),e(td,Cle),e(Cle,IZe),e(td,NZe),e(td,wle),e(wle,qZe),e(td,jZe),e(Rr,DZe),e(Rr,A),e(A,_m),e(_m,Ale),e(Ale,GZe),e(_m,OZe),e(_m,BP),e(BP,VZe),e(_m,XZe),e(A,zZe),e(A,bm),e(bm,yle),e(yle,QZe),e(bm,WZe),e(bm,IP),e(IP,UZe),e(bm,HZe),e(A,JZe),e(A,vm),e(vm,Lle),e(Lle,YZe),e(vm,KZe),e(vm,NP),e(NP,ZZe),e(vm,eeo),e(A,oeo),e(A,Fm),e(Fm,xle),e(xle,reo),e(Fm,teo),e(Fm,qP),e(qP,aeo),e(Fm,neo),e(A,seo),e(A,Tm),e(Tm,$le),e($le,leo),e(Tm,ieo),e(Tm,jP),e(jP,deo),e(Tm,ceo),e(A,feo),e(A,Mm),e(Mm,kle),e(kle,meo),e(Mm,geo),e(Mm,DP),e(DP,heo),e(Mm,peo),e(A,ueo),e(A,Em),e(Em,Sle),e(Sle,_eo),e(Em,beo),e(Em,GP),e(GP,veo),e(Em,Feo),e(A,Teo),e(A,Cm),e(Cm,Rle),e(Rle,Meo),e(Cm,Eeo),e(Cm,OP),e(OP,Ceo),e(Cm,weo),e(A,Aeo),e(A,wm),e(wm,Ple),e(Ple,yeo),e(wm,Leo),e(wm,VP),e(VP,xeo),e(wm,$eo),e(A,keo),e(A,Am),e(Am,Ble),e(Ble,Seo),e(Am,Reo),e(Am,XP),e(XP,Peo),e(Am,Beo),e(A,Ieo),e(A,ym),e(ym,Ile),e(Ile,Neo),e(ym,qeo),e(ym,zP),e(zP,jeo),e(ym,Deo),e(A,Geo),e(A,Lm),e(Lm,Nle),e(Nle,Oeo),e(Lm,Veo),e(Lm,QP),e(QP,Xeo),e(Lm,zeo),e(A,Qeo),e(A,xm),e(xm,qle),e(qle,Weo),e(xm,Ueo),e(xm,WP),e(WP,Heo),e(xm,Jeo),e(A,Yeo),e(A,$m),e($m,jle),e(jle,Keo),e($m,Zeo),e($m,UP),e(UP,eoo),e($m,ooo),e(A,roo),e(A,km),e(km,Dle),e(Dle,too),e(km,aoo),e(km,HP),e(HP,noo),e(km,soo),e(A,loo),e(A,Sm),e(Sm,Gle),e(Gle,ioo),e(Sm,doo),e(Sm,JP),e(JP,coo),e(Sm,foo),e(A,moo),e(A,Rm),e(Rm,Ole),e(Ole,goo),e(Rm,hoo),e(Rm,YP),e(YP,poo),e(Rm,uoo),e(A,_oo),e(A,Pm),e(Pm,Vle),e(Vle,boo),e(Pm,voo),e(Pm,KP),e(KP,Foo),e(Pm,Too),e(A,Moo),e(A,Bm),e(Bm,Xle),e(Xle,Eoo),e(Bm,Coo),e(Bm,ZP),e(ZP,woo),e(Bm,Aoo),e(A,yoo),e(A,Im),e(Im,zle),e(zle,Loo),e(Im,xoo),e(Im,eB),e(eB,$oo),e(Im,koo),e(A,Soo),e(A,Nm),e(Nm,Qle),e(Qle,Roo),e(Nm,Poo),e(Nm,oB),e(oB,Boo),e(Nm,Ioo),e(A,Noo),e(A,qm),e(qm,Wle),e(Wle,qoo),e(qm,joo),e(qm,rB),e(rB,Doo),e(qm,Goo),e(A,Ooo),e(A,jm),e(jm,Ule),e(Ule,Voo),e(jm,Xoo),e(jm,tB),e(tB,zoo),e(jm,Qoo),e(A,Woo),e(A,Dm),e(Dm,Hle),e(Hle,Uoo),e(Dm,Hoo),e(Dm,aB),e(aB,Joo),e(Dm,Yoo),e(A,Koo),e(A,Gm),e(Gm,Jle),e(Jle,Zoo),e(Gm,ero),e(Gm,nB),e(nB,oro),e(Gm,rro),e(A,tro),e(A,Om),e(Om,Yle),e(Yle,aro),e(Om,nro),e(Om,sB),e(sB,sro),e(Om,lro),e(A,iro),e(A,Vm),e(Vm,Kle),e(Kle,dro),e(Vm,cro),e(Vm,lB),e(lB,fro),e(Vm,mro),e(A,gro),e(A,Xm),e(Xm,Zle),e(Zle,hro),e(Xm,pro),e(Xm,iB),e(iB,uro),e(Xm,_ro),e(A,bro),e(A,zm),e(zm,eie),e(eie,vro),e(zm,Fro),e(zm,dB),e(dB,Tro),e(zm,Mro),e(A,Ero),e(A,Qm),e(Qm,oie),e(oie,Cro),e(Qm,wro),e(Qm,cB),e(cB,Aro),e(Qm,yro),e(A,Lro),e(A,Wm),e(Wm,rie),e(rie,xro),e(Wm,$ro),e(Wm,fB),e(fB,kro),e(Wm,Sro),e(A,Rro),e(A,Um),e(Um,tie),e(tie,Pro),e(Um,Bro),e(Um,mB),e(mB,Iro),e(Um,Nro),e(A,qro),e(A,Hm),e(Hm,aie),e(aie,jro),e(Hm,Dro),e(Hm,gB),e(gB,Gro),e(Hm,Oro),e(A,Vro),e(A,Jm),e(Jm,nie),e(nie,Xro),e(Jm,zro),e(Jm,hB),e(hB,Qro),e(Jm,Wro),e(A,Uro),e(A,Ym),e(Ym,sie),e(sie,Hro),e(Ym,Jro),e(Ym,pB),e(pB,Yro),e(Ym,Kro),e(A,Zro),e(A,Km),e(Km,lie),e(lie,eto),e(Km,oto),e(Km,uB),e(uB,rto),e(Km,tto),e(A,ato),e(A,Zm),e(Zm,iie),e(iie,nto),e(Zm,sto),e(Zm,_B),e(_B,lto),e(Zm,ito),e(A,dto),e(A,eg),e(eg,die),e(die,cto),e(eg,fto),e(eg,bB),e(bB,mto),e(eg,gto),e(A,hto),e(A,og),e(og,cie),e(cie,pto),e(og,uto),e(og,vB),e(vB,_to),e(og,bto),e(A,vto),e(A,rg),e(rg,fie),e(fie,Fto),e(rg,Tto),e(rg,FB),e(FB,Mto),e(rg,Eto),e(A,Cto),e(A,tg),e(tg,mie),e(mie,wto),e(tg,Ato),e(tg,TB),e(TB,yto),e(tg,Lto),e(A,xto),e(A,ag),e(ag,gie),e(gie,$to),e(ag,kto),e(ag,MB),e(MB,Sto),e(ag,Rto),e(A,Pto),e(A,ng),e(ng,hie),e(hie,Bto),e(ng,Ito),e(ng,EB),e(EB,Nto),e(ng,qto),e(A,jto),e(A,sg),e(sg,pie),e(pie,Dto),e(sg,Gto),e(sg,CB),e(CB,Oto),e(sg,Vto),e(A,Xto),e(A,lg),e(lg,uie),e(uie,zto),e(lg,Qto),e(lg,wB),e(wB,Wto),e(lg,Uto),e(A,Hto),e(A,ig),e(ig,_ie),e(_ie,Jto),e(ig,Yto),e(ig,AB),e(AB,Kto),e(ig,Zto),e(A,eao),e(A,dg),e(dg,bie),e(bie,oao),e(dg,rao),e(dg,yB),e(yB,tao),e(dg,aao),e(A,nao),e(A,cg),e(cg,vie),e(vie,sao),e(cg,lao),e(cg,LB),e(LB,iao),e(cg,dao),e(A,cao),e(A,fg),e(fg,Fie),e(Fie,fao),e(fg,mao),e(fg,xB),e(xB,gao),e(fg,hao),e(A,pao),e(A,mg),e(mg,Tie),e(Tie,uao),e(mg,_ao),e(mg,$B),e($B,bao),e(mg,vao),e(A,Fao),e(A,gg),e(gg,Mie),e(Mie,Tao),e(gg,Mao),e(gg,kB),e(kB,Eao),e(gg,Cao),e(A,wao),e(A,hg),e(hg,Eie),e(Eie,Aao),e(hg,yao),e(hg,SB),e(SB,Lao),e(hg,xao),e(A,$ao),e(A,pg),e(pg,Cie),e(Cie,kao),e(pg,Sao),e(pg,RB),e(RB,Rao),e(pg,Pao),e(A,Bao),e(A,ug),e(ug,wie),e(wie,Iao),e(ug,Nao),e(ug,PB),e(PB,qao),e(ug,jao),e(A,Dao),e(A,_g),e(_g,Aie),e(Aie,Gao),e(_g,Oao),e(_g,BB),e(BB,Vao),e(_g,Xao),e(A,zao),e(A,bg),e(bg,yie),e(yie,Qao),e(bg,Wao),e(bg,IB),e(IB,Uao),e(bg,Hao),e(A,Jao),e(A,vg),e(vg,Lie),e(Lie,Yao),e(vg,Kao),e(vg,NB),e(NB,Zao),e(vg,eno),e(A,ono),e(A,Fg),e(Fg,xie),e(xie,rno),e(Fg,tno),e(Fg,qB),e(qB,ano),e(Fg,nno),e(A,sno),e(A,Tg),e(Tg,$ie),e($ie,lno),e(Tg,ino),e(Tg,jB),e(jB,dno),e(Tg,cno),e(A,fno),e(A,Mg),e(Mg,kie),e(kie,mno),e(Mg,gno),e(Mg,DB),e(DB,hno),e(Mg,pno),e(A,uno),e(A,Eg),e(Eg,Sie),e(Sie,_no),e(Eg,bno),e(Eg,GB),e(GB,vno),e(Eg,Fno),e(A,Tno),e(A,Cg),e(Cg,Rie),e(Rie,Mno),e(Cg,Eno),e(Cg,OB),e(OB,Cno),e(Cg,wno),e(A,Ano),e(A,wg),e(wg,Pie),e(Pie,yno),e(wg,Lno),e(wg,VB),e(VB,xno),e(wg,$no),e(A,kno),e(A,Ag),e(Ag,Bie),e(Bie,Sno),e(Ag,Rno),e(Ag,XB),e(XB,Pno),e(Ag,Bno),e(A,Ino),e(A,yg),e(yg,Iie),e(Iie,Nno),e(yg,qno),e(yg,zB),e(zB,jno),e(yg,Dno),e(A,Gno),e(A,Lg),e(Lg,Nie),e(Nie,Ono),e(Lg,Vno),e(Lg,QB),e(QB,Xno),e(Lg,zno),e(A,Qno),e(A,xg),e(xg,qie),e(qie,Wno),e(xg,Uno),e(xg,WB),e(WB,Hno),e(xg,Jno),e(A,Yno),e(A,$g),e($g,jie),e(jie,Kno),e($g,Zno),e($g,UB),e(UB,eso),e($g,oso),e(A,rso),e(A,kg),e(kg,Die),e(Die,tso),e(kg,aso),e(kg,HB),e(HB,nso),e(kg,sso),e(A,lso),e(A,Sg),e(Sg,Gie),e(Gie,iso),e(Sg,dso),e(Sg,JB),e(JB,cso),e(Sg,fso),e(A,mso),e(A,Rg),e(Rg,Oie),e(Oie,gso),e(Rg,hso),e(Rg,YB),e(YB,pso),e(Rg,uso),e(A,_so),e(A,Pg),e(Pg,Vie),e(Vie,bso),e(Pg,vso),e(Pg,KB),e(KB,Fso),e(Pg,Tso),e(A,Mso),e(A,Bg),e(Bg,Xie),e(Xie,Eso),e(Bg,Cso),e(Bg,ZB),e(ZB,wso),e(Bg,Aso),e(A,yso),e(A,Ig),e(Ig,zie),e(zie,Lso),e(Ig,xso),e(Ig,eI),e(eI,$so),e(Ig,kso),e(A,Sso),e(A,Ng),e(Ng,Qie),e(Qie,Rso),e(Ng,Pso),e(Ng,oI),e(oI,Bso),e(Ng,Iso),e(A,Nso),e(A,qg),e(qg,Wie),e(Wie,qso),e(qg,jso),e(qg,rI),e(rI,Dso),e(qg,Gso),e(A,Oso),e(A,jg),e(jg,Uie),e(Uie,Vso),e(jg,Xso),e(jg,tI),e(tI,zso),e(jg,Qso),e(A,Wso),e(A,Dg),e(Dg,Hie),e(Hie,Uso),e(Dg,Hso),e(Dg,aI),e(aI,Jso),e(Dg,Yso),e(A,Kso),e(A,Gg),e(Gg,Jie),e(Jie,Zso),e(Gg,elo),e(Gg,nI),e(nI,olo),e(Gg,rlo),e(A,tlo),e(A,Og),e(Og,Yie),e(Yie,alo),e(Og,nlo),e(Og,sI),e(sI,slo),e(Og,llo),e(A,ilo),e(A,Vg),e(Vg,Kie),e(Kie,dlo),e(Vg,clo),e(Vg,lI),e(lI,flo),e(Vg,mlo),e(A,glo),e(A,Xg),e(Xg,Zie),e(Zie,hlo),e(Xg,plo),e(Xg,iI),e(iI,ulo),e(Xg,_lo),e(A,blo),e(A,zg),e(zg,ede),e(ede,vlo),e(zg,Flo),e(zg,dI),e(dI,Tlo),e(zg,Mlo),e(A,Elo),e(A,Qg),e(Qg,ode),e(ode,Clo),e(Qg,wlo),e(Qg,cI),e(cI,Alo),e(Qg,ylo),e(A,Llo),e(A,Wg),e(Wg,rde),e(rde,xlo),e(Wg,$lo),e(Wg,fI),e(fI,klo),e(Wg,Slo),e(A,Rlo),e(A,Ug),e(Ug,tde),e(tde,Plo),e(Ug,Blo),e(Ug,mI),e(mI,Ilo),e(Ug,Nlo),e(A,qlo),e(A,Hg),e(Hg,ade),e(ade,jlo),e(Hg,Dlo),e(Hg,gI),e(gI,Glo),e(Hg,Olo),e(A,Vlo),e(A,Jg),e(Jg,nde),e(nde,Xlo),e(Jg,zlo),e(Jg,hI),e(hI,Qlo),e(Jg,Wlo),e(A,Ulo),e(A,Yg),e(Yg,sde),e(sde,Hlo),e(Yg,Jlo),e(Yg,pI),e(pI,Ylo),e(Yg,Klo),e(A,Zlo),e(A,Kg),e(Kg,lde),e(lde,eio),e(Kg,oio),e(Kg,uI),e(uI,rio),e(Kg,tio),e(A,aio),e(A,Zg),e(Zg,ide),e(ide,nio),e(Zg,sio),e(Zg,_I),e(_I,lio),e(Zg,iio),e(A,dio),e(A,eh),e(eh,dde),e(dde,cio),e(eh,fio),e(eh,bI),e(bI,mio),e(eh,gio),e(A,hio),e(A,oh),e(oh,cde),e(cde,pio),e(oh,uio),e(oh,vI),e(vI,_io),e(oh,bio),e(A,vio),e(A,rh),e(rh,fde),e(fde,Fio),e(rh,Tio),e(rh,FI),e(FI,Mio),e(rh,Eio),e(A,Cio),e(A,th),e(th,mde),e(mde,wio),e(th,Aio),e(th,TI),e(TI,yio),e(th,Lio),e(A,xio),e(A,ah),e(ah,gde),e(gde,$io),e(ah,kio),e(ah,MI),e(MI,Sio),e(ah,Rio),e(A,Pio),e(A,nh),e(nh,hde),e(hde,Bio),e(nh,Iio),e(nh,EI),e(EI,Nio),e(nh,qio),e(A,jio),e(A,sh),e(sh,pde),e(pde,Dio),e(sh,Gio),e(sh,CI),e(CI,Oio),e(sh,Vio),e(A,Xio),e(A,lh),e(lh,ude),e(ude,zio),e(lh,Qio),e(lh,wI),e(wI,Wio),e(lh,Uio),e(A,Hio),e(A,ih),e(ih,_de),e(_de,Jio),e(ih,Yio),e(ih,AI),e(AI,Kio),e(ih,Zio),e(A,edo),e(A,dh),e(dh,bde),e(bde,odo),e(dh,rdo),e(dh,yI),e(yI,tdo),e(dh,ado),e(A,ndo),e(A,ch),e(ch,vde),e(vde,sdo),e(ch,ldo),e(ch,LI),e(LI,ido),e(ch,ddo),e(A,cdo),e(A,fh),e(fh,Fde),e(Fde,fdo),e(fh,mdo),e(fh,xI),e(xI,gdo),e(fh,hdo),e(A,pdo),e(A,mh),e(mh,Tde),e(Tde,udo),e(mh,_do),e(mh,$I),e($I,bdo),e(mh,vdo),e(A,Fdo),e(A,gh),e(gh,Mde),e(Mde,Tdo),e(gh,Mdo),e(gh,kI),e(kI,Edo),e(gh,Cdo),e(A,wdo),e(A,hh),e(hh,Ede),e(Ede,Ado),e(hh,ydo),e(hh,SI),e(SI,Ldo),e(hh,xdo),e(A,$do),e(A,ph),e(ph,Cde),e(Cde,kdo),e(ph,Sdo),e(ph,RI),e(RI,Rdo),e(ph,Pdo),e(A,Bdo),e(A,uh),e(uh,wde),e(wde,Ido),e(uh,Ndo),e(uh,PI),e(PI,qdo),e(uh,jdo),e(A,Ddo),e(A,_h),e(_h,Ade),e(Ade,Gdo),e(_h,Odo),e(_h,BI),e(BI,Vdo),e(_h,Xdo),e(A,zdo),e(A,bh),e(bh,yde),e(yde,Qdo),e(bh,Wdo),e(bh,II),e(II,Udo),e(bh,Hdo),e(A,Jdo),e(A,vh),e(vh,Lde),e(Lde,Ydo),e(vh,Kdo),e(vh,NI),e(NI,Zdo),e(vh,eco),e(A,oco),e(A,Fh),e(Fh,xde),e(xde,rco),e(Fh,tco),e(Fh,qI),e(qI,aco),e(Fh,nco),e(A,sco),e(A,Th),e(Th,$de),e($de,lco),e(Th,ico),e(Th,jI),e(jI,dco),e(Th,cco),e(A,fco),e(A,Mh),e(Mh,kde),e(kde,mco),e(Mh,gco),e(Mh,DI),e(DI,hco),e(Mh,pco),e(A,uco),e(A,Eh),e(Eh,Sde),e(Sde,_co),e(Eh,bco),e(Eh,GI),e(GI,vco),e(Eh,Fco),e(A,Tco),e(A,Ch),e(Ch,Rde),e(Rde,Mco),e(Ch,Eco),e(Ch,OI),e(OI,Cco),e(Ch,wco),e(A,Aco),e(A,wh),e(wh,Pde),e(Pde,yco),e(wh,Lco),e(wh,VI),e(VI,xco),e(wh,$co),e(A,kco),e(A,Ah),e(Ah,Bde),e(Bde,Sco),e(Ah,Rco),e(Ah,XI),e(XI,Pco),e(Ah,Bco),e(A,Ico),e(A,yh),e(yh,Ide),e(Ide,Nco),e(yh,qco),e(yh,zI),e(zI,jco),e(yh,Dco),e(A,Gco),e(A,Lh),e(Lh,Nde),e(Nde,Oco),e(Lh,Vco),e(Lh,QI),e(QI,Xco),e(Lh,zco),e(A,Qco),e(A,xh),e(xh,qde),e(qde,Wco),e(xh,Uco),e(xh,WI),e(WI,Hco),e(xh,Jco),e(A,Yco),e(A,$h),e($h,jde),e(jde,Kco),e($h,Zco),e($h,UI),e(UI,efo),e($h,ofo),e(Rr,rfo),M(kh,Rr,null),e(xo,tfo),e(xo,Sh),M(DL,Sh,null),e(Sh,afo),e(Sh,Dde),e(Dde,nfo),b(f,zUe,_),b(f,ad,_),e(ad,Rh),e(Rh,Gde),M(GL,Gde,null),e(ad,sfo),e(ad,Ode),e(Ode,lfo),b(f,QUe,_),b(f,$o,_),M(OL,$o,null),e($o,ifo),e($o,VL),e(VL,dfo),e(VL,HI),e(HI,cfo),e(VL,ffo),e($o,mfo),e($o,XL),e(XL,gfo),e(XL,Vde),e(Vde,hfo),e(XL,pfo),e($o,ufo),e($o,Pr),M(zL,Pr,null),e(Pr,_fo),e(Pr,Xde),e(Xde,bfo),e(Pr,vfo),e(Pr,za),e(za,Ffo),e(za,zde),e(zde,Tfo),e(za,Mfo),e(za,Qde),e(Qde,Efo),e(za,Cfo),e(za,Wde),e(Wde,wfo),e(za,Afo),e(Pr,yfo),e(Pr,k),e(k,es),e(es,Ude),e(Ude,Lfo),e(es,xfo),e(es,JI),e(JI,$fo),e(es,kfo),e(es,YI),e(YI,Sfo),e(es,Rfo),e(k,Pfo),e(k,os),e(os,Hde),e(Hde,Bfo),e(os,Ifo),e(os,KI),e(KI,Nfo),e(os,qfo),e(os,ZI),e(ZI,jfo),e(os,Dfo),e(k,Gfo),e(k,rs),e(rs,Jde),e(Jde,Ofo),e(rs,Vfo),e(rs,eN),e(eN,Xfo),e(rs,zfo),e(rs,oN),e(oN,Qfo),e(rs,Wfo),e(k,Ufo),e(k,Ph),e(Ph,Yde),e(Yde,Hfo),e(Ph,Jfo),e(Ph,rN),e(rN,Yfo),e(Ph,Kfo),e(k,Zfo),e(k,ts),e(ts,Kde),e(Kde,emo),e(ts,omo),e(ts,tN),e(tN,rmo),e(ts,tmo),e(ts,aN),e(aN,amo),e(ts,nmo),e(k,smo),e(k,Bh),e(Bh,Zde),e(Zde,lmo),e(Bh,imo),e(Bh,nN),e(nN,dmo),e(Bh,cmo),e(k,fmo),e(k,Ih),e(Ih,ece),e(ece,mmo),e(Ih,gmo),e(Ih,sN),e(sN,hmo),e(Ih,pmo),e(k,umo),e(k,Nh),e(Nh,oce),e(oce,_mo),e(Nh,bmo),e(Nh,lN),e(lN,vmo),e(Nh,Fmo),e(k,Tmo),e(k,as),e(as,rce),e(rce,Mmo),e(as,Emo),e(as,iN),e(iN,Cmo),e(as,wmo),e(as,dN),e(dN,Amo),e(as,ymo),e(k,Lmo),e(k,ns),e(ns,tce),e(tce,xmo),e(ns,$mo),e(ns,cN),e(cN,kmo),e(ns,Smo),e(ns,fN),e(fN,Rmo),e(ns,Pmo),e(k,Bmo),e(k,ss),e(ss,ace),e(ace,Imo),e(ss,Nmo),e(ss,mN),e(mN,qmo),e(ss,jmo),e(ss,gN),e(gN,Dmo),e(ss,Gmo),e(k,Omo),e(k,qh),e(qh,nce),e(nce,Vmo),e(qh,Xmo),e(qh,hN),e(hN,zmo),e(qh,Qmo),e(k,Wmo),e(k,jh),e(jh,sce),e(sce,Umo),e(jh,Hmo),e(jh,pN),e(pN,Jmo),e(jh,Ymo),e(k,Kmo),e(k,Dh),e(Dh,lce),e(lce,Zmo),e(Dh,ego),e(Dh,uN),e(uN,ogo),e(Dh,rgo),e(k,tgo),e(k,ls),e(ls,ice),e(ice,ago),e(ls,ngo),e(ls,_N),e(_N,sgo),e(ls,lgo),e(ls,bN),e(bN,igo),e(ls,dgo),e(k,cgo),e(k,Gh),e(Gh,dce),e(dce,fgo),e(Gh,mgo),e(Gh,vN),e(vN,ggo),e(Gh,hgo),e(k,pgo),e(k,is),e(is,cce),e(cce,ugo),e(is,_go),e(is,FN),e(FN,bgo),e(is,vgo),e(is,TN),e(TN,Fgo),e(is,Tgo),e(k,Mgo),e(k,ds),e(ds,fce),e(fce,Ego),e(ds,Cgo),e(ds,MN),e(MN,wgo),e(ds,Ago),e(ds,EN),e(EN,ygo),e(ds,Lgo),e(k,xgo),e(k,cs),e(cs,mce),e(mce,$go),e(cs,kgo),e(cs,CN),e(CN,Sgo),e(cs,Rgo),e(cs,wN),e(wN,Pgo),e(cs,Bgo),e(k,Igo),e(k,fs),e(fs,gce),e(gce,Ngo),e(fs,qgo),e(fs,AN),e(AN,jgo),e(fs,Dgo),e(fs,yN),e(yN,Ggo),e(fs,Ogo),e(k,Vgo),e(k,Oh),e(Oh,hce),e(hce,Xgo),e(Oh,zgo),e(Oh,LN),e(LN,Qgo),e(Oh,Wgo),e(k,Ugo),e(k,ms),e(ms,pce),e(pce,Hgo),e(ms,Jgo),e(ms,xN),e(xN,Ygo),e(ms,Kgo),e(ms,$N),e($N,Zgo),e(ms,eho),e(k,oho),e(k,gs),e(gs,uce),e(uce,rho),e(gs,tho),e(gs,kN),e(kN,aho),e(gs,nho),e(gs,SN),e(SN,sho),e(gs,lho),e(k,iho),e(k,hs),e(hs,_ce),e(_ce,dho),e(hs,cho),e(hs,RN),e(RN,fho),e(hs,mho),e(hs,PN),e(PN,gho),e(hs,hho),e(k,pho),e(k,ps),e(ps,bce),e(bce,uho),e(ps,_ho),e(ps,BN),e(BN,bho),e(ps,vho),e(ps,IN),e(IN,Fho),e(ps,Tho),e(k,Mho),e(k,us),e(us,vce),e(vce,Eho),e(us,Cho),e(us,NN),e(NN,who),e(us,Aho),e(us,qN),e(qN,yho),e(us,Lho),e(k,xho),e(k,_s),e(_s,Fce),e(Fce,$ho),e(_s,kho),e(_s,jN),e(jN,Sho),e(_s,Rho),e(_s,DN),e(DN,Pho),e(_s,Bho),e(k,Iho),e(k,Vh),e(Vh,Tce),e(Tce,Nho),e(Vh,qho),e(Vh,GN),e(GN,jho),e(Vh,Dho),e(k,Gho),e(k,bs),e(bs,Mce),e(Mce,Oho),e(bs,Vho),e(bs,ON),e(ON,Xho),e(bs,zho),e(bs,VN),e(VN,Qho),e(bs,Who),e(k,Uho),e(k,Xh),e(Xh,Ece),e(Ece,Hho),e(Xh,Jho),e(Xh,XN),e(XN,Yho),e(Xh,Kho),e(k,Zho),e(k,vs),e(vs,Cce),e(Cce,epo),e(vs,opo),e(vs,zN),e(zN,rpo),e(vs,tpo),e(vs,QN),e(QN,apo),e(vs,npo),e(k,spo),e(k,Fs),e(Fs,wce),e(wce,lpo),e(Fs,ipo),e(Fs,WN),e(WN,dpo),e(Fs,cpo),e(Fs,UN),e(UN,fpo),e(Fs,mpo),e(k,gpo),e(k,Ts),e(Ts,Ace),e(Ace,hpo),e(Ts,ppo),e(Ts,HN),e(HN,upo),e(Ts,_po),e(Ts,JN),e(JN,bpo),e(Ts,vpo),e(k,Fpo),e(k,zh),e(zh,yce),e(yce,Tpo),e(zh,Mpo),e(zh,YN),e(YN,Epo),e(zh,Cpo),e(k,wpo),e(k,Ms),e(Ms,Lce),e(Lce,Apo),e(Ms,ypo),e(Ms,KN),e(KN,Lpo),e(Ms,xpo),e(Ms,ZN),e(ZN,$po),e(Ms,kpo),e(k,Spo),e(k,Es),e(Es,xce),e(xce,Rpo),e(Es,Ppo),e(Es,eq),e(eq,Bpo),e(Es,Ipo),e(Es,oq),e(oq,Npo),e(Es,qpo),e(k,jpo),e(k,Cs),e(Cs,$ce),e($ce,Dpo),e(Cs,Gpo),e(Cs,rq),e(rq,Opo),e(Cs,Vpo),e(Cs,tq),e(tq,Xpo),e(Cs,zpo),e(k,Qpo),e(k,Qh),e(Qh,kce),e(kce,Wpo),e(Qh,Upo),e(Qh,aq),e(aq,Hpo),e(Qh,Jpo),e(k,Ypo),e(k,ws),e(ws,Sce),e(Sce,Kpo),e(ws,Zpo),e(ws,nq),e(nq,euo),e(ws,ouo),e(ws,sq),e(sq,ruo),e(ws,tuo),e(k,auo),e(k,As),e(As,Rce),e(Rce,nuo),e(As,suo),e(As,lq),e(lq,luo),e(As,iuo),e(As,iq),e(iq,duo),e(As,cuo),e(k,fuo),e(k,ys),e(ys,Pce),e(Pce,muo),e(ys,guo),e(ys,dq),e(dq,huo),e(ys,puo),e(ys,cq),e(cq,uuo),e(ys,_uo),e(k,buo),e(k,Ls),e(Ls,Bce),e(Bce,vuo),e(Ls,Fuo),e(Ls,fq),e(fq,Tuo),e(Ls,Muo),e(Ls,mq),e(mq,Euo),e(Ls,Cuo),e(k,wuo),e(k,xs),e(xs,Ice),e(Ice,Auo),e(xs,yuo),e(xs,gq),e(gq,Luo),e(xs,xuo),e(xs,hq),e(hq,$uo),e(xs,kuo),e(k,Suo),e(k,$s),e($s,Nce),e(Nce,Ruo),e($s,Puo),e($s,pq),e(pq,Buo),e($s,Iuo),e($s,uq),e(uq,Nuo),e($s,quo),e(k,juo),e(k,ks),e(ks,qce),e(qce,Duo),e(ks,Guo),e(ks,_q),e(_q,Ouo),e(ks,Vuo),e(ks,bq),e(bq,Xuo),e(ks,zuo),e(k,Quo),e(k,Ss),e(Ss,jce),e(jce,Wuo),e(Ss,Uuo),e(Ss,vq),e(vq,Huo),e(Ss,Juo),e(Ss,Fq),e(Fq,Yuo),e(Ss,Kuo),e(k,Zuo),e(k,Wh),e(Wh,Dce),e(Dce,e_o),e(Wh,o_o),e(Wh,Tq),e(Tq,r_o),e(Wh,t_o),e(k,a_o),e(k,Rs),e(Rs,Gce),e(Gce,n_o),e(Rs,s_o),e(Rs,Mq),e(Mq,l_o),e(Rs,i_o),e(Rs,Eq),e(Eq,d_o),e(Rs,c_o),e(k,f_o),e(k,Uh),e(Uh,Oce),e(Oce,m_o),e(Uh,g_o),e(Uh,Cq),e(Cq,h_o),e(Uh,p_o),e(k,u_o),e(k,Hh),e(Hh,Vce),e(Vce,__o),e(Hh,b_o),e(Hh,wq),e(wq,v_o),e(Hh,F_o),e(k,T_o),e(k,Ps),e(Ps,Xce),e(Xce,M_o),e(Ps,E_o),e(Ps,Aq),e(Aq,C_o),e(Ps,w_o),e(Ps,yq),e(yq,A_o),e(Ps,y_o),e(k,L_o),e(k,Bs),e(Bs,zce),e(zce,x_o),e(Bs,$_o),e(Bs,Lq),e(Lq,k_o),e(Bs,S_o),e(Bs,xq),e(xq,R_o),e(Bs,P_o),e(k,B_o),e(k,Is),e(Is,Qce),e(Qce,I_o),e(Is,N_o),e(Is,$q),e($q,q_o),e(Is,j_o),e(Is,kq),e(kq,D_o),e(Is,G_o),e(k,O_o),e(k,Jh),e(Jh,Wce),e(Wce,V_o),e(Jh,X_o),e(Jh,Sq),e(Sq,z_o),e(Jh,Q_o),e(k,W_o),e(k,Ns),e(Ns,Uce),e(Uce,U_o),e(Ns,H_o),e(Ns,Rq),e(Rq,J_o),e(Ns,Y_o),e(Ns,Pq),e(Pq,K_o),e(Ns,Z_o),e(k,e2o),e(k,qs),e(qs,Hce),e(Hce,o2o),e(qs,r2o),e(qs,Bq),e(Bq,t2o),e(qs,a2o),e(qs,Iq),e(Iq,n2o),e(qs,s2o),e(k,l2o),e(k,js),e(js,Jce),e(Jce,i2o),e(js,d2o),e(js,Nq),e(Nq,c2o),e(js,f2o),e(js,qq),e(qq,m2o),e(js,g2o),e(k,h2o),e(k,Ds),e(Ds,Yce),e(Yce,p2o),e(Ds,u2o),e(Ds,jq),e(jq,_2o),e(Ds,b2o),e(Ds,Dq),e(Dq,v2o),e(Ds,F2o),e(k,T2o),e(k,Gs),e(Gs,Kce),e(Kce,M2o),e(Gs,E2o),e(Gs,Gq),e(Gq,C2o),e(Gs,w2o),e(Gs,Oq),e(Oq,A2o),e(Gs,y2o),e(k,L2o),e(k,Os),e(Os,Zce),e(Zce,x2o),e(Os,$2o),e(Os,Vq),e(Vq,k2o),e(Os,S2o),e(Os,Xq),e(Xq,R2o),e(Os,P2o),e(k,B2o),e(k,Vs),e(Vs,efe),e(efe,I2o),e(Vs,N2o),e(Vs,zq),e(zq,q2o),e(Vs,j2o),e(Vs,Qq),e(Qq,D2o),e(Vs,G2o),e(k,O2o),e(k,Xs),e(Xs,ofe),e(ofe,V2o),e(Xs,X2o),e(Xs,Wq),e(Wq,z2o),e(Xs,Q2o),e(Xs,Uq),e(Uq,W2o),e(Xs,U2o),e(k,H2o),e(k,Yh),e(Yh,rfe),e(rfe,J2o),e(Yh,Y2o),e(Yh,Hq),e(Hq,K2o),e(Yh,Z2o),e(k,e1o),e(k,zs),e(zs,tfe),e(tfe,o1o),e(zs,r1o),e(zs,Jq),e(Jq,t1o),e(zs,a1o),e(zs,Yq),e(Yq,n1o),e(zs,s1o),e(k,l1o),e(k,Qs),e(Qs,afe),e(afe,i1o),e(Qs,d1o),e(Qs,Kq),e(Kq,c1o),e(Qs,f1o),e(Qs,Zq),e(Zq,m1o),e(Qs,g1o),e(k,h1o),e(k,Kh),e(Kh,nfe),e(nfe,p1o),e(Kh,u1o),e(Kh,ej),e(ej,_1o),e(Kh,b1o),e(k,v1o),e(k,Zh),e(Zh,sfe),e(sfe,F1o),e(Zh,T1o),e(Zh,oj),e(oj,M1o),e(Zh,E1o),e(k,C1o),e(k,ep),e(ep,lfe),e(lfe,w1o),e(ep,A1o),e(ep,rj),e(rj,y1o),e(ep,L1o),e(k,x1o),e(k,op),e(op,ife),e(ife,$1o),e(op,k1o),e(op,tj),e(tj,S1o),e(op,R1o),e(k,P1o),e(k,Ws),e(Ws,dfe),e(dfe,B1o),e(Ws,I1o),e(Ws,aj),e(aj,N1o),e(Ws,q1o),e(Ws,nj),e(nj,j1o),e(Ws,D1o),e(k,G1o),e(k,rp),e(rp,cfe),e(cfe,O1o),e(rp,V1o),e(rp,sj),e(sj,X1o),e(rp,z1o),e(k,Q1o),e(k,Us),e(Us,ffe),e(ffe,W1o),e(Us,U1o),e(Us,lj),e(lj,H1o),e(Us,J1o),e(Us,ij),e(ij,Y1o),e(Us,K1o),e(k,Z1o),e(k,Hs),e(Hs,mfe),e(mfe,ebo),e(Hs,obo),e(Hs,dj),e(dj,rbo),e(Hs,tbo),e(Hs,cj),e(cj,abo),e(Hs,nbo),e(k,sbo),e(k,Js),e(Js,gfe),e(gfe,lbo),e(Js,ibo),e(Js,fj),e(fj,dbo),e(Js,cbo),e(Js,mj),e(mj,fbo),e(Js,mbo),e(k,gbo),e(k,Ys),e(Ys,hfe),e(hfe,hbo),e(Ys,pbo),e(Ys,gj),e(gj,ubo),e(Ys,_bo),e(Ys,hj),e(hj,bbo),e(Ys,vbo),e(k,Fbo),e(k,Ks),e(Ks,pfe),e(pfe,Tbo),e(Ks,Mbo),e(Ks,pj),e(pj,Ebo),e(Ks,Cbo),e(Ks,uj),e(uj,wbo),e(Ks,Abo),e(k,ybo),e(k,Zs),e(Zs,ufe),e(ufe,Lbo),e(Zs,xbo),e(Zs,_j),e(_j,$bo),e(Zs,kbo),e(Zs,bj),e(bj,Sbo),e(Zs,Rbo),e(k,Pbo),e(k,tp),e(tp,_fe),e(_fe,Bbo),e(tp,Ibo),e(tp,vj),e(vj,Nbo),e(tp,qbo),e(k,jbo),e(k,ap),e(ap,bfe),e(bfe,Dbo),e(ap,Gbo),e(ap,Fj),e(Fj,Obo),e(ap,Vbo),e(k,Xbo),e(k,el),e(el,vfe),e(vfe,zbo),e(el,Qbo),e(el,Tj),e(Tj,Wbo),e(el,Ubo),e(el,Mj),e(Mj,Hbo),e(el,Jbo),e(k,Ybo),e(k,ol),e(ol,Ffe),e(Ffe,Kbo),e(ol,Zbo),e(ol,Ej),e(Ej,evo),e(ol,ovo),e(ol,Cj),e(Cj,rvo),e(ol,tvo),e(k,avo),e(k,rl),e(rl,Tfe),e(Tfe,nvo),e(rl,svo),e(rl,wj),e(wj,lvo),e(rl,ivo),e(rl,Aj),e(Aj,dvo),e(rl,cvo),e(k,fvo),e(k,np),e(np,Mfe),e(Mfe,mvo),e(np,gvo),e(np,yj),e(yj,hvo),e(np,pvo),e(k,uvo),e(k,sp),e(sp,Efe),e(Efe,_vo),e(sp,bvo),e(sp,Lj),e(Lj,vvo),e(sp,Fvo),e(k,Tvo),e(k,lp),e(lp,Cfe),e(Cfe,Mvo),e(lp,Evo),e(lp,xj),e(xj,Cvo),e(lp,wvo),e(k,Avo),e(k,tl),e(tl,wfe),e(wfe,yvo),e(tl,Lvo),e(tl,$j),e($j,xvo),e(tl,$vo),e(tl,kj),e(kj,kvo),e(tl,Svo),e(k,Rvo),e(k,al),e(al,Afe),e(Afe,Pvo),e(al,Bvo),e(al,Sj),e(Sj,Ivo),e(al,Nvo),e(al,Rj),e(Rj,qvo),e(al,jvo),e(k,Dvo),e(k,ip),e(ip,yfe),e(yfe,Gvo),e(ip,Ovo),e(ip,Pj),e(Pj,Vvo),e(ip,Xvo),e(k,zvo),e(k,dp),e(dp,Lfe),e(Lfe,Qvo),e(dp,Wvo),e(dp,Bj),e(Bj,Uvo),e(dp,Hvo),e(k,Jvo),e(k,cp),e(cp,xfe),e(xfe,Yvo),e(cp,Kvo),e(cp,Ij),e(Ij,Zvo),e(cp,e3o),e(k,o3o),e(k,nl),e(nl,$fe),e($fe,r3o),e(nl,t3o),e(nl,Nj),e(Nj,a3o),e(nl,n3o),e(nl,qj),e(qj,s3o),e(nl,l3o),e(k,i3o),e(k,fp),e(fp,kfe),e(kfe,d3o),e(fp,c3o),e(fp,jj),e(jj,f3o),e(fp,m3o),e(k,g3o),e(k,mp),e(mp,Sfe),e(Sfe,h3o),e(mp,p3o),e(mp,Dj),e(Dj,u3o),e(mp,_3o),e(k,b3o),e(k,sl),e(sl,Rfe),e(Rfe,v3o),e(sl,F3o),e(sl,Gj),e(Gj,T3o),e(sl,M3o),e(sl,Oj),e(Oj,E3o),e(sl,C3o),e(k,w3o),e(k,ll),e(ll,Pfe),e(Pfe,A3o),e(ll,y3o),e(ll,Vj),e(Vj,L3o),e(ll,x3o),e(ll,Xj),e(Xj,$3o),e(ll,k3o),e(k,S3o),e(k,il),e(il,Bfe),e(Bfe,R3o),e(il,P3o),e(il,zj),e(zj,B3o),e(il,I3o),e(il,Qj),e(Qj,N3o),e(il,q3o),e(k,j3o),e(k,dl),e(dl,Ife),e(Ife,D3o),e(dl,G3o),e(dl,Wj),e(Wj,O3o),e(dl,V3o),e(dl,Uj),e(Uj,X3o),e(dl,z3o),e(Pr,Q3o),M(gp,Pr,null),e($o,W3o),e($o,hp),M(QL,hp,null),e(hp,U3o),e(hp,Nfe),e(Nfe,H3o),b(f,WUe,_),b(f,nd,_),e(nd,pp),e(pp,qfe),M(WL,qfe,null),e(nd,J3o),e(nd,jfe),e(jfe,Y3o),b(f,UUe,_),b(f,ko,_),M(UL,ko,null),e(ko,K3o),e(ko,HL),e(HL,Z3o),e(HL,Hj),e(Hj,eFo),e(HL,oFo),e(ko,rFo),e(ko,JL),e(JL,tFo),e(JL,Dfe),e(Dfe,aFo),e(JL,nFo),e(ko,sFo),e(ko,He),M(YL,He,null),e(He,lFo),e(He,Gfe),e(Gfe,iFo),e(He,dFo),e(He,Qa),e(Qa,cFo),e(Qa,Ofe),e(Ofe,fFo),e(Qa,mFo),e(Qa,Vfe),e(Vfe,gFo),e(Qa,hFo),e(Qa,Xfe),e(Xfe,pFo),e(Qa,uFo),e(He,_Fo),e(He,W),e(W,up),e(up,zfe),e(zfe,bFo),e(up,vFo),e(up,Jj),e(Jj,FFo),e(up,TFo),e(W,MFo),e(W,_p),e(_p,Qfe),e(Qfe,EFo),e(_p,CFo),e(_p,Yj),e(Yj,wFo),e(_p,AFo),e(W,yFo),e(W,bp),e(bp,Wfe),e(Wfe,LFo),e(bp,xFo),e(bp,Kj),e(Kj,$Fo),e(bp,kFo),e(W,SFo),e(W,vp),e(vp,Ufe),e(Ufe,RFo),e(vp,PFo),e(vp,Zj),e(Zj,BFo),e(vp,IFo),e(W,NFo),e(W,Fp),e(Fp,Hfe),e(Hfe,qFo),e(Fp,jFo),e(Fp,eD),e(eD,DFo),e(Fp,GFo),e(W,OFo),e(W,Tp),e(Tp,Jfe),e(Jfe,VFo),e(Tp,XFo),e(Tp,oD),e(oD,zFo),e(Tp,QFo),e(W,WFo),e(W,Mp),e(Mp,Yfe),e(Yfe,UFo),e(Mp,HFo),e(Mp,rD),e(rD,JFo),e(Mp,YFo),e(W,KFo),e(W,Ep),e(Ep,Kfe),e(Kfe,ZFo),e(Ep,e7o),e(Ep,tD),e(tD,o7o),e(Ep,r7o),e(W,t7o),e(W,Cp),e(Cp,Zfe),e(Zfe,a7o),e(Cp,n7o),e(Cp,aD),e(aD,s7o),e(Cp,l7o),e(W,i7o),e(W,wp),e(wp,eme),e(eme,d7o),e(wp,c7o),e(wp,nD),e(nD,f7o),e(wp,m7o),e(W,g7o),e(W,Ap),e(Ap,ome),e(ome,h7o),e(Ap,p7o),e(Ap,sD),e(sD,u7o),e(Ap,_7o),e(W,b7o),e(W,yp),e(yp,rme),e(rme,v7o),e(yp,F7o),e(yp,lD),e(lD,T7o),e(yp,M7o),e(W,E7o),e(W,Lp),e(Lp,tme),e(tme,C7o),e(Lp,w7o),e(Lp,iD),e(iD,A7o),e(Lp,y7o),e(W,L7o),e(W,xp),e(xp,ame),e(ame,x7o),e(xp,$7o),e(xp,dD),e(dD,k7o),e(xp,S7o),e(W,R7o),e(W,$p),e($p,nme),e(nme,P7o),e($p,B7o),e($p,cD),e(cD,I7o),e($p,N7o),e(W,q7o),e(W,kp),e(kp,sme),e(sme,j7o),e(kp,D7o),e(kp,fD),e(fD,G7o),e(kp,O7o),e(W,V7o),e(W,Sp),e(Sp,lme),e(lme,X7o),e(Sp,z7o),e(Sp,mD),e(mD,Q7o),e(Sp,W7o),e(W,U7o),e(W,Rp),e(Rp,ime),e(ime,H7o),e(Rp,J7o),e(Rp,gD),e(gD,Y7o),e(Rp,K7o),e(W,Z7o),e(W,Pp),e(Pp,dme),e(dme,eTo),e(Pp,oTo),e(Pp,hD),e(hD,rTo),e(Pp,tTo),e(W,aTo),e(W,Bp),e(Bp,cme),e(cme,nTo),e(Bp,sTo),e(Bp,pD),e(pD,lTo),e(Bp,iTo),e(W,dTo),e(W,Ip),e(Ip,fme),e(fme,cTo),e(Ip,fTo),e(Ip,uD),e(uD,mTo),e(Ip,gTo),e(W,hTo),e(W,Np),e(Np,mme),e(mme,pTo),e(Np,uTo),e(Np,_D),e(_D,_To),e(Np,bTo),e(W,vTo),e(W,qp),e(qp,gme),e(gme,FTo),e(qp,TTo),e(qp,bD),e(bD,MTo),e(qp,ETo),e(W,CTo),e(W,jp),e(jp,hme),e(hme,wTo),e(jp,ATo),e(jp,vD),e(vD,yTo),e(jp,LTo),e(W,xTo),e(W,Dp),e(Dp,pme),e(pme,$To),e(Dp,kTo),e(Dp,FD),e(FD,STo),e(Dp,RTo),e(W,PTo),e(W,Gp),e(Gp,ume),e(ume,BTo),e(Gp,ITo),e(Gp,TD),e(TD,NTo),e(Gp,qTo),e(W,jTo),e(W,Op),e(Op,_me),e(_me,DTo),e(Op,GTo),e(Op,MD),e(MD,OTo),e(Op,VTo),e(W,XTo),e(W,Vp),e(Vp,bme),e(bme,zTo),e(Vp,QTo),e(Vp,ED),e(ED,WTo),e(Vp,UTo),e(W,HTo),e(W,Xp),e(Xp,vme),e(vme,JTo),e(Xp,YTo),e(Xp,CD),e(CD,KTo),e(Xp,ZTo),e(W,e8o),e(W,zp),e(zp,Fme),e(Fme,o8o),e(zp,r8o),e(zp,wD),e(wD,t8o),e(zp,a8o),e(W,n8o),e(W,Qp),e(Qp,Tme),e(Tme,s8o),e(Qp,l8o),e(Qp,AD),e(AD,i8o),e(Qp,d8o),e(W,c8o),e(W,Wp),e(Wp,Mme),e(Mme,f8o),e(Wp,m8o),e(Wp,yD),e(yD,g8o),e(Wp,h8o),e(W,p8o),e(W,Up),e(Up,Eme),e(Eme,u8o),e(Up,_8o),e(Up,LD),e(LD,b8o),e(Up,v8o),e(W,F8o),e(W,Hp),e(Hp,Cme),e(Cme,T8o),e(Hp,M8o),e(Hp,xD),e(xD,E8o),e(Hp,C8o),e(W,w8o),e(W,Jp),e(Jp,wme),e(wme,A8o),e(Jp,y8o),e(Jp,$D),e($D,L8o),e(Jp,x8o),e(W,$8o),e(W,Yp),e(Yp,Ame),e(Ame,k8o),e(Yp,S8o),e(Yp,kD),e(kD,R8o),e(Yp,P8o),e(W,B8o),e(W,Kp),e(Kp,yme),e(yme,I8o),e(Kp,N8o),e(Kp,SD),e(SD,q8o),e(Kp,j8o),e(W,D8o),e(W,Zp),e(Zp,Lme),e(Lme,G8o),e(Zp,O8o),e(Zp,RD),e(RD,V8o),e(Zp,X8o),e(He,z8o),M(eu,He,null),e(He,Q8o),M(ou,He,null),e(ko,W8o),e(ko,ru),M(KL,ru,null),e(ru,U8o),e(ru,xme),e(xme,H8o),b(f,HUe,_),b(f,sd,_),e(sd,tu),e(tu,$me),M(ZL,$me,null),e(sd,J8o),e(sd,kme),e(kme,Y8o),b(f,JUe,_),b(f,So,_),M(e9,So,null),e(So,K8o),e(So,o9),e(o9,Z8o),e(o9,PD),e(PD,eMo),e(o9,oMo),e(So,rMo),e(So,r9),e(r9,tMo),e(r9,Sme),e(Sme,aMo),e(r9,nMo),e(So,sMo),e(So,Je),M(t9,Je,null),e(Je,lMo),e(Je,Rme),e(Rme,iMo),e(Je,dMo),e(Je,ld),e(ld,cMo),e(ld,Pme),e(Pme,fMo),e(ld,mMo),e(ld,Bme),e(Bme,gMo),e(ld,hMo),e(Je,pMo),e(Je,ie),e(ie,au),e(au,Ime),e(Ime,uMo),e(au,_Mo),e(au,BD),e(BD,bMo),e(au,vMo),e(ie,FMo),e(ie,nu),e(nu,Nme),e(Nme,TMo),e(nu,MMo),e(nu,ID),e(ID,EMo),e(nu,CMo),e(ie,wMo),e(ie,su),e(su,qme),e(qme,AMo),e(su,yMo),e(su,ND),e(ND,LMo),e(su,xMo),e(ie,$Mo),e(ie,lu),e(lu,jme),e(jme,kMo),e(lu,SMo),e(lu,qD),e(qD,RMo),e(lu,PMo),e(ie,BMo),e(ie,iu),e(iu,Dme),e(Dme,IMo),e(iu,NMo),e(iu,jD),e(jD,qMo),e(iu,jMo),e(ie,DMo),e(ie,du),e(du,Gme),e(Gme,GMo),e(du,OMo),e(du,DD),e(DD,VMo),e(du,XMo),e(ie,zMo),e(ie,cu),e(cu,Ome),e(Ome,QMo),e(cu,WMo),e(cu,GD),e(GD,UMo),e(cu,HMo),e(ie,JMo),e(ie,fu),e(fu,Vme),e(Vme,YMo),e(fu,KMo),e(fu,OD),e(OD,ZMo),e(fu,eEo),e(ie,oEo),e(ie,mu),e(mu,Xme),e(Xme,rEo),e(mu,tEo),e(mu,VD),e(VD,aEo),e(mu,nEo),e(ie,sEo),e(ie,gu),e(gu,zme),e(zme,lEo),e(gu,iEo),e(gu,XD),e(XD,dEo),e(gu,cEo),e(ie,fEo),e(ie,hu),e(hu,Qme),e(Qme,mEo),e(hu,gEo),e(hu,zD),e(zD,hEo),e(hu,pEo),e(ie,uEo),e(ie,pu),e(pu,Wme),e(Wme,_Eo),e(pu,bEo),e(pu,QD),e(QD,vEo),e(pu,FEo),e(ie,TEo),e(ie,uu),e(uu,Ume),e(Ume,MEo),e(uu,EEo),e(uu,WD),e(WD,CEo),e(uu,wEo),e(ie,AEo),e(ie,_u),e(_u,Hme),e(Hme,yEo),e(_u,LEo),e(_u,UD),e(UD,xEo),e(_u,$Eo),e(ie,kEo),e(ie,bu),e(bu,Jme),e(Jme,SEo),e(bu,REo),e(bu,HD),e(HD,PEo),e(bu,BEo),e(ie,IEo),e(ie,vu),e(vu,Yme),e(Yme,NEo),e(vu,qEo),e(vu,JD),e(JD,jEo),e(vu,DEo),e(ie,GEo),e(ie,Fu),e(Fu,Kme),e(Kme,OEo),e(Fu,VEo),e(Fu,YD),e(YD,XEo),e(Fu,zEo),e(ie,QEo),e(ie,Tu),e(Tu,Zme),e(Zme,WEo),e(Tu,UEo),e(Tu,KD),e(KD,HEo),e(Tu,JEo),e(ie,YEo),e(ie,Mu),e(Mu,ege),e(ege,KEo),e(Mu,ZEo),e(Mu,ZD),e(ZD,e4o),e(Mu,o4o),e(ie,r4o),e(ie,Eu),e(Eu,oge),e(oge,t4o),e(Eu,a4o),e(Eu,eG),e(eG,n4o),e(Eu,s4o),e(Je,l4o),M(Cu,Je,null),e(Je,i4o),M(wu,Je,null),e(So,d4o),e(So,Au),M(a9,Au,null),e(Au,c4o),e(Au,rge),e(rge,f4o),b(f,YUe,_),b(f,id,_),e(id,yu),e(yu,tge),M(n9,tge,null),e(id,m4o),e(id,age),e(age,g4o),b(f,KUe,_),b(f,Ro,_),M(s9,Ro,null),e(Ro,h4o),e(Ro,dd),e(dd,p4o),e(dd,oG),e(oG,u4o),e(dd,_4o),e(dd,rG),e(rG,b4o),e(dd,v4o),e(Ro,F4o),e(Ro,l9),e(l9,T4o),e(l9,nge),e(nge,M4o),e(l9,E4o),e(Ro,C4o),e(Ro,ht),M(i9,ht,null),e(ht,w4o),e(ht,sge),e(sge,A4o),e(ht,y4o),e(ht,cd),e(cd,L4o),e(cd,lge),e(lge,x4o),e(cd,$4o),e(cd,tG),e(tG,k4o),e(cd,S4o),e(ht,R4o),M(Lu,ht,null),e(Ro,P4o),e(Ro,Ye),M(d9,Ye,null),e(Ye,B4o),e(Ye,ige),e(ige,I4o),e(Ye,N4o),e(Ye,Wa),e(Wa,q4o),e(Wa,dge),e(dge,j4o),e(Wa,D4o),e(Wa,cge),e(cge,G4o),e(Wa,O4o),e(Wa,fge),e(fge,V4o),e(Wa,X4o),e(Ye,z4o),e(Ye,L),e(L,xu),e(xu,mge),e(mge,Q4o),e(xu,W4o),e(xu,aG),e(aG,U4o),e(xu,H4o),e(L,J4o),e(L,$u),e($u,gge),e(gge,Y4o),e($u,K4o),e($u,nG),e(nG,Z4o),e($u,eCo),e(L,oCo),e(L,ku),e(ku,hge),e(hge,rCo),e(ku,tCo),e(ku,sG),e(sG,aCo),e(ku,nCo),e(L,sCo),e(L,Su),e(Su,pge),e(pge,lCo),e(Su,iCo),e(Su,lG),e(lG,dCo),e(Su,cCo),e(L,fCo),e(L,Ru),e(Ru,uge),e(uge,mCo),e(Ru,gCo),e(Ru,iG),e(iG,hCo),e(Ru,pCo),e(L,uCo),e(L,Pu),e(Pu,_ge),e(_ge,_Co),e(Pu,bCo),e(Pu,dG),e(dG,vCo),e(Pu,FCo),e(L,TCo),e(L,Bu),e(Bu,bge),e(bge,MCo),e(Bu,ECo),e(Bu,cG),e(cG,CCo),e(Bu,wCo),e(L,ACo),e(L,Iu),e(Iu,vge),e(vge,yCo),e(Iu,LCo),e(Iu,fG),e(fG,xCo),e(Iu,$Co),e(L,kCo),e(L,Nu),e(Nu,Fge),e(Fge,SCo),e(Nu,RCo),e(Nu,mG),e(mG,PCo),e(Nu,BCo),e(L,ICo),e(L,qu),e(qu,Tge),e(Tge,NCo),e(qu,qCo),e(qu,gG),e(gG,jCo),e(qu,DCo),e(L,GCo),e(L,ju),e(ju,Mge),e(Mge,OCo),e(ju,VCo),e(ju,hG),e(hG,XCo),e(ju,zCo),e(L,QCo),e(L,Du),e(Du,Ege),e(Ege,WCo),e(Du,UCo),e(Du,pG),e(pG,HCo),e(Du,JCo),e(L,YCo),e(L,Gu),e(Gu,Cge),e(Cge,KCo),e(Gu,ZCo),e(Gu,uG),e(uG,e5o),e(Gu,o5o),e(L,r5o),e(L,Ou),e(Ou,wge),e(wge,t5o),e(Ou,a5o),e(Ou,_G),e(_G,n5o),e(Ou,s5o),e(L,l5o),e(L,Vu),e(Vu,Age),e(Age,i5o),e(Vu,d5o),e(Vu,bG),e(bG,c5o),e(Vu,f5o),e(L,m5o),e(L,Xu),e(Xu,yge),e(yge,g5o),e(Xu,h5o),e(Xu,vG),e(vG,p5o),e(Xu,u5o),e(L,_5o),e(L,zu),e(zu,Lge),e(Lge,b5o),e(zu,v5o),e(zu,FG),e(FG,F5o),e(zu,T5o),e(L,M5o),e(L,Qu),e(Qu,xge),e(xge,E5o),e(Qu,C5o),e(Qu,TG),e(TG,w5o),e(Qu,A5o),e(L,y5o),e(L,Wu),e(Wu,$ge),e($ge,L5o),e(Wu,x5o),e(Wu,MG),e(MG,$5o),e(Wu,k5o),e(L,S5o),e(L,Uu),e(Uu,kge),e(kge,R5o),e(Uu,P5o),e(Uu,EG),e(EG,B5o),e(Uu,I5o),e(L,N5o),e(L,Hu),e(Hu,Sge),e(Sge,q5o),e(Hu,j5o),e(Hu,CG),e(CG,D5o),e(Hu,G5o),e(L,O5o),e(L,Ju),e(Ju,Rge),e(Rge,V5o),e(Ju,X5o),e(Ju,wG),e(wG,z5o),e(Ju,Q5o),e(L,W5o),e(L,Yu),e(Yu,Pge),e(Pge,U5o),e(Yu,H5o),e(Yu,AG),e(AG,J5o),e(Yu,Y5o),e(L,K5o),e(L,Ku),e(Ku,Bge),e(Bge,Z5o),e(Ku,e0o),e(Ku,yG),e(yG,o0o),e(Ku,r0o),e(L,t0o),e(L,Zu),e(Zu,Ige),e(Ige,a0o),e(Zu,n0o),e(Zu,LG),e(LG,s0o),e(Zu,l0o),e(L,i0o),e(L,e_),e(e_,Nge),e(Nge,d0o),e(e_,c0o),e(e_,xG),e(xG,f0o),e(e_,m0o),e(L,g0o),e(L,o_),e(o_,qge),e(qge,h0o),e(o_,p0o),e(o_,$G),e($G,u0o),e(o_,_0o),e(L,b0o),e(L,r_),e(r_,jge),e(jge,v0o),e(r_,F0o),e(r_,kG),e(kG,T0o),e(r_,M0o),e(L,E0o),e(L,t_),e(t_,Dge),e(Dge,C0o),e(t_,w0o),e(t_,SG),e(SG,A0o),e(t_,y0o),e(L,L0o),e(L,a_),e(a_,Gge),e(Gge,x0o),e(a_,$0o),e(a_,RG),e(RG,k0o),e(a_,S0o),e(L,R0o),e(L,n_),e(n_,Oge),e(Oge,P0o),e(n_,B0o),e(n_,PG),e(PG,I0o),e(n_,N0o),e(L,q0o),e(L,s_),e(s_,Vge),e(Vge,j0o),e(s_,D0o),e(s_,BG),e(BG,G0o),e(s_,O0o),e(L,V0o),e(L,l_),e(l_,Xge),e(Xge,X0o),e(l_,z0o),e(l_,IG),e(IG,Q0o),e(l_,W0o),e(L,U0o),e(L,i_),e(i_,zge),e(zge,H0o),e(i_,J0o),e(i_,NG),e(NG,Y0o),e(i_,K0o),e(L,Z0o),e(L,d_),e(d_,Qge),e(Qge,ewo),e(d_,owo),e(d_,qG),e(qG,rwo),e(d_,two),e(L,awo),e(L,cl),e(cl,Wge),e(Wge,nwo),e(cl,swo),e(cl,jG),e(jG,lwo),e(cl,iwo),e(cl,DG),e(DG,dwo),e(cl,cwo),e(L,fwo),e(L,c_),e(c_,Uge),e(Uge,mwo),e(c_,gwo),e(c_,GG),e(GG,hwo),e(c_,pwo),e(L,uwo),e(L,f_),e(f_,Hge),e(Hge,_wo),e(f_,bwo),e(f_,OG),e(OG,vwo),e(f_,Fwo),e(L,Two),e(L,m_),e(m_,Jge),e(Jge,Mwo),e(m_,Ewo),e(m_,VG),e(VG,Cwo),e(m_,wwo),e(L,Awo),e(L,g_),e(g_,Yge),e(Yge,ywo),e(g_,Lwo),e(g_,XG),e(XG,xwo),e(g_,$wo),e(L,kwo),e(L,h_),e(h_,Kge),e(Kge,Swo),e(h_,Rwo),e(h_,zG),e(zG,Pwo),e(h_,Bwo),e(L,Iwo),e(L,p_),e(p_,Zge),e(Zge,Nwo),e(p_,qwo),e(p_,QG),e(QG,jwo),e(p_,Dwo),e(L,Gwo),e(L,u_),e(u_,ehe),e(ehe,Owo),e(u_,Vwo),e(u_,WG),e(WG,Xwo),e(u_,zwo),e(L,Qwo),e(L,__),e(__,ohe),e(ohe,Wwo),e(__,Uwo),e(__,UG),e(UG,Hwo),e(__,Jwo),e(L,Ywo),e(L,b_),e(b_,rhe),e(rhe,Kwo),e(b_,Zwo),e(b_,HG),e(HG,eAo),e(b_,oAo),e(L,rAo),e(L,v_),e(v_,the),e(the,tAo),e(v_,aAo),e(v_,JG),e(JG,nAo),e(v_,sAo),e(L,lAo),e(L,F_),e(F_,ahe),e(ahe,iAo),e(F_,dAo),e(F_,YG),e(YG,cAo),e(F_,fAo),e(L,mAo),e(L,T_),e(T_,nhe),e(nhe,gAo),e(T_,hAo),e(T_,KG),e(KG,pAo),e(T_,uAo),e(L,_Ao),e(L,M_),e(M_,she),e(she,bAo),e(M_,vAo),e(M_,ZG),e(ZG,FAo),e(M_,TAo),e(L,MAo),e(L,E_),e(E_,lhe),e(lhe,EAo),e(E_,CAo),e(E_,eO),e(eO,wAo),e(E_,AAo),e(L,yAo),e(L,C_),e(C_,ihe),e(ihe,LAo),e(C_,xAo),e(C_,oO),e(oO,$Ao),e(C_,kAo),e(L,SAo),e(L,w_),e(w_,dhe),e(dhe,RAo),e(w_,PAo),e(w_,rO),e(rO,BAo),e(w_,IAo),e(L,NAo),e(L,A_),e(A_,che),e(che,qAo),e(A_,jAo),e(A_,tO),e(tO,DAo),e(A_,GAo),e(L,OAo),e(L,y_),e(y_,fhe),e(fhe,VAo),e(y_,XAo),e(y_,aO),e(aO,zAo),e(y_,QAo),e(L,WAo),e(L,L_),e(L_,mhe),e(mhe,UAo),e(L_,HAo),e(L_,nO),e(nO,JAo),e(L_,YAo),e(L,KAo),e(L,x_),e(x_,ghe),e(ghe,ZAo),e(x_,e6o),e(x_,sO),e(sO,o6o),e(x_,r6o),e(L,t6o),e(L,$_),e($_,hhe),e(hhe,a6o),e($_,n6o),e($_,lO),e(lO,s6o),e($_,l6o),e(L,i6o),e(L,k_),e(k_,phe),e(phe,d6o),e(k_,c6o),e(k_,iO),e(iO,f6o),e(k_,m6o),e(L,g6o),e(L,S_),e(S_,uhe),e(uhe,h6o),e(S_,p6o),e(S_,dO),e(dO,u6o),e(S_,_6o),e(L,b6o),e(L,R_),e(R_,_he),e(_he,v6o),e(R_,F6o),e(R_,cO),e(cO,T6o),e(R_,M6o),e(L,E6o),e(L,P_),e(P_,bhe),e(bhe,C6o),e(P_,w6o),e(P_,fO),e(fO,A6o),e(P_,y6o),e(L,L6o),e(L,B_),e(B_,vhe),e(vhe,x6o),e(B_,$6o),e(B_,mO),e(mO,k6o),e(B_,S6o),e(L,R6o),e(L,I_),e(I_,Fhe),e(Fhe,P6o),e(I_,B6o),e(I_,gO),e(gO,I6o),e(I_,N6o),e(L,q6o),e(L,N_),e(N_,The),e(The,j6o),e(N_,D6o),e(N_,hO),e(hO,G6o),e(N_,O6o),e(L,V6o),e(L,q_),e(q_,Mhe),e(Mhe,X6o),e(q_,z6o),e(q_,pO),e(pO,Q6o),e(q_,W6o),e(L,U6o),e(L,j_),e(j_,Ehe),e(Ehe,H6o),e(j_,J6o),e(j_,uO),e(uO,Y6o),e(j_,K6o),e(L,Z6o),e(L,D_),e(D_,Che),e(Che,eyo),e(D_,oyo),e(D_,_O),e(_O,ryo),e(D_,tyo),e(L,ayo),e(L,G_),e(G_,whe),e(whe,nyo),e(G_,syo),e(G_,bO),e(bO,lyo),e(G_,iyo),e(L,dyo),e(L,O_),e(O_,Ahe),e(Ahe,cyo),e(O_,fyo),e(O_,vO),e(vO,myo),e(O_,gyo),e(L,hyo),e(L,V_),e(V_,yhe),e(yhe,pyo),e(V_,uyo),e(V_,FO),e(FO,_yo),e(V_,byo),e(L,vyo),e(L,X_),e(X_,Lhe),e(Lhe,Fyo),e(X_,Tyo),e(X_,TO),e(TO,Myo),e(X_,Eyo),e(L,Cyo),e(L,z_),e(z_,xhe),e(xhe,wyo),e(z_,Ayo),e(z_,MO),e(MO,yyo),e(z_,Lyo),e(L,xyo),e(L,Q_),e(Q_,$he),e($he,$yo),e(Q_,kyo),e(Q_,EO),e(EO,Syo),e(Q_,Ryo),e(L,Pyo),e(L,W_),e(W_,khe),e(khe,Byo),e(W_,Iyo),e(W_,CO),e(CO,Nyo),e(W_,qyo),e(L,jyo),e(L,U_),e(U_,She),e(She,Dyo),e(U_,Gyo),e(U_,wO),e(wO,Oyo),e(U_,Vyo),e(L,Xyo),e(L,H_),e(H_,Rhe),e(Rhe,zyo),e(H_,Qyo),e(H_,AO),e(AO,Wyo),e(H_,Uyo),e(L,Hyo),e(L,J_),e(J_,Phe),e(Phe,Jyo),e(J_,Yyo),e(J_,yO),e(yO,Kyo),e(J_,Zyo),e(L,eLo),e(L,Y_),e(Y_,Bhe),e(Bhe,oLo),e(Y_,rLo),e(Y_,LO),e(LO,tLo),e(Y_,aLo),e(L,nLo),e(L,K_),e(K_,Ihe),e(Ihe,sLo),e(K_,lLo),e(K_,xO),e(xO,iLo),e(K_,dLo),e(L,cLo),e(L,Z_),e(Z_,Nhe),e(Nhe,fLo),e(Z_,mLo),e(Z_,$O),e($O,gLo),e(Z_,hLo),e(L,pLo),e(L,e2),e(e2,qhe),e(qhe,uLo),e(e2,_Lo),e(e2,kO),e(kO,bLo),e(e2,vLo),e(L,FLo),e(L,o2),e(o2,jhe),e(jhe,TLo),e(o2,MLo),e(o2,SO),e(SO,ELo),e(o2,CLo),e(L,wLo),e(L,r2),e(r2,Dhe),e(Dhe,ALo),e(r2,yLo),e(r2,RO),e(RO,LLo),e(r2,xLo),e(L,$Lo),e(L,t2),e(t2,Ghe),e(Ghe,kLo),e(t2,SLo),e(t2,PO),e(PO,RLo),e(t2,PLo),e(L,BLo),e(L,a2),e(a2,Ohe),e(Ohe,ILo),e(a2,NLo),e(a2,BO),e(BO,qLo),e(a2,jLo),e(L,DLo),e(L,n2),e(n2,Vhe),e(Vhe,GLo),e(n2,OLo),e(n2,IO),e(IO,VLo),e(n2,XLo),e(L,zLo),e(L,s2),e(s2,Xhe),e(Xhe,QLo),e(s2,WLo),e(s2,NO),e(NO,ULo),e(s2,HLo),e(L,JLo),e(L,l2),e(l2,zhe),e(zhe,YLo),e(l2,KLo),e(l2,qO),e(qO,ZLo),e(l2,e9o),e(L,o9o),e(L,i2),e(i2,Qhe),e(Qhe,r9o),e(i2,t9o),e(i2,jO),e(jO,a9o),e(i2,n9o),e(L,s9o),e(L,d2),e(d2,Whe),e(Whe,l9o),e(d2,i9o),e(d2,DO),e(DO,d9o),e(d2,c9o),e(L,f9o),e(L,c2),e(c2,Uhe),e(Uhe,m9o),e(c2,g9o),e(c2,GO),e(GO,h9o),e(c2,p9o),e(L,u9o),e(L,f2),e(f2,Hhe),e(Hhe,_9o),e(f2,b9o),e(f2,OO),e(OO,v9o),e(f2,F9o),e(L,T9o),e(L,m2),e(m2,Jhe),e(Jhe,M9o),e(m2,E9o),e(m2,VO),e(VO,C9o),e(m2,w9o),e(L,A9o),e(L,g2),e(g2,Yhe),e(Yhe,y9o),e(g2,L9o),e(g2,XO),e(XO,x9o),e(g2,$9o),e(L,k9o),e(L,h2),e(h2,Khe),e(Khe,S9o),e(h2,R9o),e(h2,zO),e(zO,P9o),e(h2,B9o),e(L,I9o),e(L,p2),e(p2,Zhe),e(Zhe,N9o),e(p2,q9o),e(p2,QO),e(QO,j9o),e(p2,D9o),e(L,G9o),e(L,u2),e(u2,epe),e(epe,O9o),e(u2,V9o),e(u2,WO),e(WO,X9o),e(u2,z9o),e(L,Q9o),e(L,_2),e(_2,ope),e(ope,W9o),e(_2,U9o),e(_2,UO),e(UO,H9o),e(_2,J9o),e(L,Y9o),e(L,b2),e(b2,rpe),e(rpe,K9o),e(b2,Z9o),e(b2,HO),e(HO,exo),e(b2,oxo),e(L,rxo),e(L,v2),e(v2,tpe),e(tpe,txo),e(v2,axo),e(v2,JO),e(JO,nxo),e(v2,sxo),e(L,lxo),e(L,F2),e(F2,ape),e(ape,ixo),e(F2,dxo),e(F2,YO),e(YO,cxo),e(F2,fxo),e(L,mxo),e(L,T2),e(T2,npe),e(npe,gxo),e(T2,hxo),e(T2,KO),e(KO,pxo),e(T2,uxo),e(L,_xo),e(L,M2),e(M2,spe),e(spe,bxo),e(M2,vxo),e(M2,ZO),e(ZO,Fxo),e(M2,Txo),e(L,Mxo),e(L,E2),e(E2,lpe),e(lpe,Exo),e(E2,Cxo),e(E2,eV),e(eV,wxo),e(E2,Axo),e(L,yxo),e(L,C2),e(C2,ipe),e(ipe,Lxo),e(C2,xxo),e(C2,oV),e(oV,$xo),e(C2,kxo),e(L,Sxo),e(L,w2),e(w2,dpe),e(dpe,Rxo),e(w2,Pxo),e(w2,rV),e(rV,Bxo),e(w2,Ixo),e(L,Nxo),e(L,A2),e(A2,cpe),e(cpe,qxo),e(A2,jxo),e(A2,tV),e(tV,Dxo),e(A2,Gxo),e(L,Oxo),e(L,y2),e(y2,fpe),e(fpe,Vxo),e(y2,Xxo),e(y2,aV),e(aV,zxo),e(y2,Qxo),e(L,Wxo),e(L,L2),e(L2,mpe),e(mpe,Uxo),e(L2,Hxo),e(L2,nV),e(nV,Jxo),e(L2,Yxo),e(L,Kxo),e(L,x2),e(x2,gpe),e(gpe,Zxo),e(x2,e$o),e(x2,sV),e(sV,o$o),e(x2,r$o),e(L,t$o),e(L,$2),e($2,hpe),e(hpe,a$o),e($2,n$o),e($2,lV),e(lV,s$o),e($2,l$o),e(L,i$o),e(L,k2),e(k2,ppe),e(ppe,d$o),e(k2,c$o),e(k2,iV),e(iV,f$o),e(k2,m$o),e(L,g$o),e(L,S2),e(S2,upe),e(upe,h$o),e(S2,p$o),e(S2,dV),e(dV,u$o),e(S2,_$o),e(L,b$o),e(L,R2),e(R2,_pe),e(_pe,v$o),e(R2,F$o),e(R2,cV),e(cV,T$o),e(R2,M$o),e(L,E$o),e(L,P2),e(P2,bpe),e(bpe,C$o),e(P2,w$o),e(P2,fV),e(fV,A$o),e(P2,y$o),e(L,L$o),e(L,B2),e(B2,vpe),e(vpe,x$o),e(B2,$$o),e(B2,mV),e(mV,k$o),e(B2,S$o),e(Ye,R$o),e(Ye,I2),e(I2,P$o),e(I2,Fpe),e(Fpe,B$o),e(I2,I$o),e(I2,Tpe),e(Tpe,N$o),e(Ye,q$o),M(N2,Ye,null),b(f,ZUe,_),b(f,fd,_),e(fd,q2),e(q2,Mpe),M(c9,Mpe,null),e(fd,j$o),e(fd,Epe),e(Epe,D$o),b(f,eHe,_),b(f,Po,_),M(f9,Po,null),e(Po,G$o),e(Po,md),e(md,O$o),e(md,gV),e(gV,V$o),e(md,X$o),e(md,hV),e(hV,z$o),e(md,Q$o),e(Po,W$o),e(Po,m9),e(m9,U$o),e(m9,Cpe),e(Cpe,H$o),e(m9,J$o),e(Po,Y$o),e(Po,pt),M(g9,pt,null),e(pt,K$o),e(pt,wpe),e(wpe,Z$o),e(pt,eko),e(pt,gd),e(gd,oko),e(gd,Ape),e(Ape,rko),e(gd,tko),e(gd,pV),e(pV,ako),e(gd,nko),e(pt,sko),M(j2,pt,null),e(Po,lko),e(Po,Ke),M(h9,Ke,null),e(Ke,iko),e(Ke,ype),e(ype,dko),e(Ke,cko),e(Ke,Ua),e(Ua,fko),e(Ua,Lpe),e(Lpe,mko),e(Ua,gko),e(Ua,xpe),e(xpe,hko),e(Ua,pko),e(Ua,$pe),e($pe,uko),e(Ua,_ko),e(Ke,bko),e(Ke,G),e(G,D2),e(D2,kpe),e(kpe,vko),e(D2,Fko),e(D2,uV),e(uV,Tko),e(D2,Mko),e(G,Eko),e(G,G2),e(G2,Spe),e(Spe,Cko),e(G2,wko),e(G2,_V),e(_V,Ako),e(G2,yko),e(G,Lko),e(G,O2),e(O2,Rpe),e(Rpe,xko),e(O2,$ko),e(O2,bV),e(bV,kko),e(O2,Sko),e(G,Rko),e(G,V2),e(V2,Ppe),e(Ppe,Pko),e(V2,Bko),e(V2,vV),e(vV,Iko),e(V2,Nko),e(G,qko),e(G,X2),e(X2,Bpe),e(Bpe,jko),e(X2,Dko),e(X2,FV),e(FV,Gko),e(X2,Oko),e(G,Vko),e(G,z2),e(z2,Ipe),e(Ipe,Xko),e(z2,zko),e(z2,TV),e(TV,Qko),e(z2,Wko),e(G,Uko),e(G,Q2),e(Q2,Npe),e(Npe,Hko),e(Q2,Jko),e(Q2,MV),e(MV,Yko),e(Q2,Kko),e(G,Zko),e(G,W2),e(W2,qpe),e(qpe,eSo),e(W2,oSo),e(W2,EV),e(EV,rSo),e(W2,tSo),e(G,aSo),e(G,U2),e(U2,jpe),e(jpe,nSo),e(U2,sSo),e(U2,CV),e(CV,lSo),e(U2,iSo),e(G,dSo),e(G,H2),e(H2,Dpe),e(Dpe,cSo),e(H2,fSo),e(H2,wV),e(wV,mSo),e(H2,gSo),e(G,hSo),e(G,J2),e(J2,Gpe),e(Gpe,pSo),e(J2,uSo),e(J2,AV),e(AV,_So),e(J2,bSo),e(G,vSo),e(G,Y2),e(Y2,Ope),e(Ope,FSo),e(Y2,TSo),e(Y2,yV),e(yV,MSo),e(Y2,ESo),e(G,CSo),e(G,K2),e(K2,Vpe),e(Vpe,wSo),e(K2,ASo),e(K2,LV),e(LV,ySo),e(K2,LSo),e(G,xSo),e(G,Z2),e(Z2,Xpe),e(Xpe,$So),e(Z2,kSo),e(Z2,xV),e(xV,SSo),e(Z2,RSo),e(G,PSo),e(G,e1),e(e1,zpe),e(zpe,BSo),e(e1,ISo),e(e1,$V),e($V,NSo),e(e1,qSo),e(G,jSo),e(G,o1),e(o1,Qpe),e(Qpe,DSo),e(o1,GSo),e(o1,kV),e(kV,OSo),e(o1,VSo),e(G,XSo),e(G,r1),e(r1,Wpe),e(Wpe,zSo),e(r1,QSo),e(r1,SV),e(SV,WSo),e(r1,USo),e(G,HSo),e(G,t1),e(t1,Upe),e(Upe,JSo),e(t1,YSo),e(t1,RV),e(RV,KSo),e(t1,ZSo),e(G,eRo),e(G,a1),e(a1,Hpe),e(Hpe,oRo),e(a1,rRo),e(a1,PV),e(PV,tRo),e(a1,aRo),e(G,nRo),e(G,n1),e(n1,Jpe),e(Jpe,sRo),e(n1,lRo),e(n1,BV),e(BV,iRo),e(n1,dRo),e(G,cRo),e(G,s1),e(s1,Ype),e(Ype,fRo),e(s1,mRo),e(s1,IV),e(IV,gRo),e(s1,hRo),e(G,pRo),e(G,l1),e(l1,Kpe),e(Kpe,uRo),e(l1,_Ro),e(l1,NV),e(NV,bRo),e(l1,vRo),e(G,FRo),e(G,i1),e(i1,Zpe),e(Zpe,TRo),e(i1,MRo),e(i1,qV),e(qV,ERo),e(i1,CRo),e(G,wRo),e(G,d1),e(d1,eue),e(eue,ARo),e(d1,yRo),e(d1,jV),e(jV,LRo),e(d1,xRo),e(G,$Ro),e(G,c1),e(c1,oue),e(oue,kRo),e(c1,SRo),e(c1,DV),e(DV,RRo),e(c1,PRo),e(G,BRo),e(G,f1),e(f1,rue),e(rue,IRo),e(f1,NRo),e(f1,GV),e(GV,qRo),e(f1,jRo),e(G,DRo),e(G,m1),e(m1,tue),e(tue,GRo),e(m1,ORo),e(m1,OV),e(OV,VRo),e(m1,XRo),e(G,zRo),e(G,g1),e(g1,aue),e(aue,QRo),e(g1,WRo),e(g1,VV),e(VV,URo),e(g1,HRo),e(G,JRo),e(G,h1),e(h1,nue),e(nue,YRo),e(h1,KRo),e(h1,XV),e(XV,ZRo),e(h1,ePo),e(G,oPo),e(G,p1),e(p1,sue),e(sue,rPo),e(p1,tPo),e(p1,zV),e(zV,aPo),e(p1,nPo),e(G,sPo),e(G,u1),e(u1,lue),e(lue,lPo),e(u1,iPo),e(u1,QV),e(QV,dPo),e(u1,cPo),e(G,fPo),e(G,_1),e(_1,iue),e(iue,mPo),e(_1,gPo),e(_1,WV),e(WV,hPo),e(_1,pPo),e(G,uPo),e(G,b1),e(b1,due),e(due,_Po),e(b1,bPo),e(b1,UV),e(UV,vPo),e(b1,FPo),e(G,TPo),e(G,v1),e(v1,cue),e(cue,MPo),e(v1,EPo),e(v1,HV),e(HV,CPo),e(v1,wPo),e(G,APo),e(G,F1),e(F1,fue),e(fue,yPo),e(F1,LPo),e(F1,JV),e(JV,xPo),e(F1,$Po),e(G,kPo),e(G,T1),e(T1,mue),e(mue,SPo),e(T1,RPo),e(T1,YV),e(YV,PPo),e(T1,BPo),e(G,IPo),e(G,M1),e(M1,gue),e(gue,NPo),e(M1,qPo),e(M1,KV),e(KV,jPo),e(M1,DPo),e(G,GPo),e(G,E1),e(E1,hue),e(hue,OPo),e(E1,VPo),e(E1,ZV),e(ZV,XPo),e(E1,zPo),e(G,QPo),e(G,C1),e(C1,pue),e(pue,WPo),e(C1,UPo),e(C1,eX),e(eX,HPo),e(C1,JPo),e(G,YPo),e(G,w1),e(w1,uue),e(uue,KPo),e(w1,ZPo),e(w1,oX),e(oX,eBo),e(w1,oBo),e(G,rBo),e(G,A1),e(A1,_ue),e(_ue,tBo),e(A1,aBo),e(A1,rX),e(rX,nBo),e(A1,sBo),e(G,lBo),e(G,y1),e(y1,bue),e(bue,iBo),e(y1,dBo),e(y1,tX),e(tX,cBo),e(y1,fBo),e(G,mBo),e(G,L1),e(L1,vue),e(vue,gBo),e(L1,hBo),e(L1,aX),e(aX,pBo),e(L1,uBo),e(G,_Bo),e(G,x1),e(x1,Fue),e(Fue,bBo),e(x1,vBo),e(x1,nX),e(nX,FBo),e(x1,TBo),e(G,MBo),e(G,$1),e($1,Tue),e(Tue,EBo),e($1,CBo),e($1,sX),e(sX,wBo),e($1,ABo),e(G,yBo),e(G,k1),e(k1,Mue),e(Mue,LBo),e(k1,xBo),e(k1,lX),e(lX,$Bo),e(k1,kBo),e(G,SBo),e(G,S1),e(S1,Eue),e(Eue,RBo),e(S1,PBo),e(S1,iX),e(iX,BBo),e(S1,IBo),e(Ke,NBo),e(Ke,R1),e(R1,qBo),e(R1,Cue),e(Cue,jBo),e(R1,DBo),e(R1,wue),e(wue,GBo),e(Ke,OBo),M(P1,Ke,null),b(f,oHe,_),b(f,hd,_),e(hd,B1),e(B1,Aue),M(p9,Aue,null),e(hd,VBo),e(hd,yue),e(yue,XBo),b(f,rHe,_),b(f,Bo,_),M(u9,Bo,null),e(Bo,zBo),e(Bo,pd),e(pd,QBo),e(pd,dX),e(dX,WBo),e(pd,UBo),e(pd,cX),e(cX,HBo),e(pd,JBo),e(Bo,YBo),e(Bo,_9),e(_9,KBo),e(_9,Lue),e(Lue,ZBo),e(_9,eIo),e(Bo,oIo),e(Bo,ut),M(b9,ut,null),e(ut,rIo),e(ut,xue),e(xue,tIo),e(ut,aIo),e(ut,ud),e(ud,nIo),e(ud,$ue),e($ue,sIo),e(ud,lIo),e(ud,fX),e(fX,iIo),e(ud,dIo),e(ut,cIo),M(I1,ut,null),e(Bo,fIo),e(Bo,Ze),M(v9,Ze,null),e(Ze,mIo),e(Ze,kue),e(kue,gIo),e(Ze,hIo),e(Ze,Ha),e(Ha,pIo),e(Ha,Sue),e(Sue,uIo),e(Ha,_Io),e(Ha,Rue),e(Rue,bIo),e(Ha,vIo),e(Ha,Pue),e(Pue,FIo),e(Ha,TIo),e(Ze,MIo),e(Ze,z),e(z,N1),e(N1,Bue),e(Bue,EIo),e(N1,CIo),e(N1,mX),e(mX,wIo),e(N1,AIo),e(z,yIo),e(z,q1),e(q1,Iue),e(Iue,LIo),e(q1,xIo),e(q1,gX),e(gX,$Io),e(q1,kIo),e(z,SIo),e(z,j1),e(j1,Nue),e(Nue,RIo),e(j1,PIo),e(j1,hX),e(hX,BIo),e(j1,IIo),e(z,NIo),e(z,D1),e(D1,que),e(que,qIo),e(D1,jIo),e(D1,pX),e(pX,DIo),e(D1,GIo),e(z,OIo),e(z,G1),e(G1,jue),e(jue,VIo),e(G1,XIo),e(G1,uX),e(uX,zIo),e(G1,QIo),e(z,WIo),e(z,O1),e(O1,Due),e(Due,UIo),e(O1,HIo),e(O1,_X),e(_X,JIo),e(O1,YIo),e(z,KIo),e(z,V1),e(V1,Gue),e(Gue,ZIo),e(V1,eNo),e(V1,bX),e(bX,oNo),e(V1,rNo),e(z,tNo),e(z,X1),e(X1,Oue),e(Oue,aNo),e(X1,nNo),e(X1,vX),e(vX,sNo),e(X1,lNo),e(z,iNo),e(z,z1),e(z1,Vue),e(Vue,dNo),e(z1,cNo),e(z1,FX),e(FX,fNo),e(z1,mNo),e(z,gNo),e(z,Q1),e(Q1,Xue),e(Xue,hNo),e(Q1,pNo),e(Q1,TX),e(TX,uNo),e(Q1,_No),e(z,bNo),e(z,W1),e(W1,zue),e(zue,vNo),e(W1,FNo),e(W1,MX),e(MX,TNo),e(W1,MNo),e(z,ENo),e(z,U1),e(U1,Que),e(Que,CNo),e(U1,wNo),e(U1,EX),e(EX,ANo),e(U1,yNo),e(z,LNo),e(z,H1),e(H1,Wue),e(Wue,xNo),e(H1,$No),e(H1,CX),e(CX,kNo),e(H1,SNo),e(z,RNo),e(z,J1),e(J1,Uue),e(Uue,PNo),e(J1,BNo),e(J1,wX),e(wX,INo),e(J1,NNo),e(z,qNo),e(z,Y1),e(Y1,Hue),e(Hue,jNo),e(Y1,DNo),e(Y1,AX),e(AX,GNo),e(Y1,ONo),e(z,VNo),e(z,K1),e(K1,Jue),e(Jue,XNo),e(K1,zNo),e(K1,yX),e(yX,QNo),e(K1,WNo),e(z,UNo),e(z,Z1),e(Z1,Yue),e(Yue,HNo),e(Z1,JNo),e(Z1,LX),e(LX,YNo),e(Z1,KNo),e(z,ZNo),e(z,eb),e(eb,Kue),e(Kue,eqo),e(eb,oqo),e(eb,xX),e(xX,rqo),e(eb,tqo),e(z,aqo),e(z,ob),e(ob,Zue),e(Zue,nqo),e(ob,sqo),e(ob,$X),e($X,lqo),e(ob,iqo),e(z,dqo),e(z,rb),e(rb,e_e),e(e_e,cqo),e(rb,fqo),e(rb,kX),e(kX,mqo),e(rb,gqo),e(z,hqo),e(z,tb),e(tb,o_e),e(o_e,pqo),e(tb,uqo),e(tb,SX),e(SX,_qo),e(tb,bqo),e(z,vqo),e(z,ab),e(ab,r_e),e(r_e,Fqo),e(ab,Tqo),e(ab,RX),e(RX,Mqo),e(ab,Eqo),e(z,Cqo),e(z,nb),e(nb,t_e),e(t_e,wqo),e(nb,Aqo),e(nb,PX),e(PX,yqo),e(nb,Lqo),e(z,xqo),e(z,sb),e(sb,a_e),e(a_e,$qo),e(sb,kqo),e(sb,BX),e(BX,Sqo),e(sb,Rqo),e(z,Pqo),e(z,lb),e(lb,n_e),e(n_e,Bqo),e(lb,Iqo),e(lb,IX),e(IX,Nqo),e(lb,qqo),e(z,jqo),e(z,ib),e(ib,s_e),e(s_e,Dqo),e(ib,Gqo),e(ib,NX),e(NX,Oqo),e(ib,Vqo),e(z,Xqo),e(z,db),e(db,l_e),e(l_e,zqo),e(db,Qqo),e(db,qX),e(qX,Wqo),e(db,Uqo),e(z,Hqo),e(z,cb),e(cb,i_e),e(i_e,Jqo),e(cb,Yqo),e(cb,jX),e(jX,Kqo),e(cb,Zqo),e(z,ejo),e(z,fb),e(fb,d_e),e(d_e,ojo),e(fb,rjo),e(fb,DX),e(DX,tjo),e(fb,ajo),e(z,njo),e(z,mb),e(mb,c_e),e(c_e,sjo),e(mb,ljo),e(mb,GX),e(GX,ijo),e(mb,djo),e(z,cjo),e(z,gb),e(gb,f_e),e(f_e,fjo),e(gb,mjo),e(gb,OX),e(OX,gjo),e(gb,hjo),e(z,pjo),e(z,hb),e(hb,m_e),e(m_e,ujo),e(hb,_jo),e(hb,VX),e(VX,bjo),e(hb,vjo),e(z,Fjo),e(z,pb),e(pb,g_e),e(g_e,Tjo),e(pb,Mjo),e(pb,XX),e(XX,Ejo),e(pb,Cjo),e(z,wjo),e(z,ub),e(ub,h_e),e(h_e,Ajo),e(ub,yjo),e(ub,zX),e(zX,Ljo),e(ub,xjo),e(z,$jo),e(z,_b),e(_b,p_e),e(p_e,kjo),e(_b,Sjo),e(_b,QX),e(QX,Rjo),e(_b,Pjo),e(z,Bjo),e(z,bb),e(bb,u_e),e(u_e,Ijo),e(bb,Njo),e(bb,WX),e(WX,qjo),e(bb,jjo),e(z,Djo),e(z,vb),e(vb,__e),e(__e,Gjo),e(vb,Ojo),e(vb,UX),e(UX,Vjo),e(vb,Xjo),e(z,zjo),e(z,Fb),e(Fb,b_e),e(b_e,Qjo),e(Fb,Wjo),e(Fb,HX),e(HX,Ujo),e(Fb,Hjo),e(z,Jjo),e(z,Tb),e(Tb,v_e),e(v_e,Yjo),e(Tb,Kjo),e(Tb,JX),e(JX,Zjo),e(Tb,eDo),e(z,oDo),e(z,Mb),e(Mb,F_e),e(F_e,rDo),e(Mb,tDo),e(Mb,YX),e(YX,aDo),e(Mb,nDo),e(Ze,sDo),e(Ze,Eb),e(Eb,lDo),e(Eb,T_e),e(T_e,iDo),e(Eb,dDo),e(Eb,M_e),e(M_e,cDo),e(Ze,fDo),M(Cb,Ze,null),b(f,tHe,_),b(f,_d,_),e(_d,wb),e(wb,E_e),M(F9,E_e,null),e(_d,mDo),e(_d,C_e),e(C_e,gDo),b(f,aHe,_),b(f,Io,_),M(T9,Io,null),e(Io,hDo),e(Io,bd),e(bd,pDo),e(bd,KX),e(KX,uDo),e(bd,_Do),e(bd,ZX),e(ZX,bDo),e(bd,vDo),e(Io,FDo),e(Io,M9),e(M9,TDo),e(M9,w_e),e(w_e,MDo),e(M9,EDo),e(Io,CDo),e(Io,_t),M(E9,_t,null),e(_t,wDo),e(_t,A_e),e(A_e,ADo),e(_t,yDo),e(_t,vd),e(vd,LDo),e(vd,y_e),e(y_e,xDo),e(vd,$Do),e(vd,ez),e(ez,kDo),e(vd,SDo),e(_t,RDo),M(Ab,_t,null),e(Io,PDo),e(Io,eo),M(C9,eo,null),e(eo,BDo),e(eo,L_e),e(L_e,IDo),e(eo,NDo),e(eo,Ja),e(Ja,qDo),e(Ja,x_e),e(x_e,jDo),e(Ja,DDo),e(Ja,$_e),e($_e,GDo),e(Ja,ODo),e(Ja,k_e),e(k_e,VDo),e(Ja,XDo),e(eo,zDo),e(eo,U),e(U,yb),e(yb,S_e),e(S_e,QDo),e(yb,WDo),e(yb,oz),e(oz,UDo),e(yb,HDo),e(U,JDo),e(U,Lb),e(Lb,R_e),e(R_e,YDo),e(Lb,KDo),e(Lb,rz),e(rz,ZDo),e(Lb,eGo),e(U,oGo),e(U,xb),e(xb,P_e),e(P_e,rGo),e(xb,tGo),e(xb,tz),e(tz,aGo),e(xb,nGo),e(U,sGo),e(U,$b),e($b,B_e),e(B_e,lGo),e($b,iGo),e($b,az),e(az,dGo),e($b,cGo),e(U,fGo),e(U,kb),e(kb,I_e),e(I_e,mGo),e(kb,gGo),e(kb,nz),e(nz,hGo),e(kb,pGo),e(U,uGo),e(U,Sb),e(Sb,N_e),e(N_e,_Go),e(Sb,bGo),e(Sb,sz),e(sz,vGo),e(Sb,FGo),e(U,TGo),e(U,Rb),e(Rb,q_e),e(q_e,MGo),e(Rb,EGo),e(Rb,lz),e(lz,CGo),e(Rb,wGo),e(U,AGo),e(U,Pb),e(Pb,j_e),e(j_e,yGo),e(Pb,LGo),e(Pb,iz),e(iz,xGo),e(Pb,$Go),e(U,kGo),e(U,Bb),e(Bb,D_e),e(D_e,SGo),e(Bb,RGo),e(Bb,dz),e(dz,PGo),e(Bb,BGo),e(U,IGo),e(U,Ib),e(Ib,G_e),e(G_e,NGo),e(Ib,qGo),e(Ib,cz),e(cz,jGo),e(Ib,DGo),e(U,GGo),e(U,Nb),e(Nb,O_e),e(O_e,OGo),e(Nb,VGo),e(Nb,fz),e(fz,XGo),e(Nb,zGo),e(U,QGo),e(U,qb),e(qb,V_e),e(V_e,WGo),e(qb,UGo),e(qb,mz),e(mz,HGo),e(qb,JGo),e(U,YGo),e(U,jb),e(jb,X_e),e(X_e,KGo),e(jb,ZGo),e(jb,gz),e(gz,eOo),e(jb,oOo),e(U,rOo),e(U,Db),e(Db,z_e),e(z_e,tOo),e(Db,aOo),e(Db,hz),e(hz,nOo),e(Db,sOo),e(U,lOo),e(U,Gb),e(Gb,Q_e),e(Q_e,iOo),e(Gb,dOo),e(Gb,pz),e(pz,cOo),e(Gb,fOo),e(U,mOo),e(U,Ob),e(Ob,W_e),e(W_e,gOo),e(Ob,hOo),e(Ob,uz),e(uz,pOo),e(Ob,uOo),e(U,_Oo),e(U,Vb),e(Vb,U_e),e(U_e,bOo),e(Vb,vOo),e(Vb,_z),e(_z,FOo),e(Vb,TOo),e(U,MOo),e(U,Xb),e(Xb,H_e),e(H_e,EOo),e(Xb,COo),e(Xb,bz),e(bz,wOo),e(Xb,AOo),e(U,yOo),e(U,zb),e(zb,J_e),e(J_e,LOo),e(zb,xOo),e(zb,vz),e(vz,$Oo),e(zb,kOo),e(U,SOo),e(U,Qb),e(Qb,Y_e),e(Y_e,ROo),e(Qb,POo),e(Qb,Fz),e(Fz,BOo),e(Qb,IOo),e(U,NOo),e(U,Wb),e(Wb,K_e),e(K_e,qOo),e(Wb,jOo),e(Wb,Tz),e(Tz,DOo),e(Wb,GOo),e(U,OOo),e(U,Ub),e(Ub,Z_e),e(Z_e,VOo),e(Ub,XOo),e(Ub,Mz),e(Mz,zOo),e(Ub,QOo),e(U,WOo),e(U,Hb),e(Hb,e2e),e(e2e,UOo),e(Hb,HOo),e(Hb,Ez),e(Ez,JOo),e(Hb,YOo),e(U,KOo),e(U,Jb),e(Jb,o2e),e(o2e,ZOo),e(Jb,eVo),e(Jb,Cz),e(Cz,oVo),e(Jb,rVo),e(U,tVo),e(U,Yb),e(Yb,r2e),e(r2e,aVo),e(Yb,nVo),e(Yb,wz),e(wz,sVo),e(Yb,lVo),e(U,iVo),e(U,Kb),e(Kb,t2e),e(t2e,dVo),e(Kb,cVo),e(Kb,Az),e(Az,fVo),e(Kb,mVo),e(U,gVo),e(U,Zb),e(Zb,a2e),e(a2e,hVo),e(Zb,pVo),e(Zb,yz),e(yz,uVo),e(Zb,_Vo),e(U,bVo),e(U,ev),e(ev,n2e),e(n2e,vVo),e(ev,FVo),e(ev,Lz),e(Lz,TVo),e(ev,MVo),e(U,EVo),e(U,ov),e(ov,s2e),e(s2e,CVo),e(ov,wVo),e(ov,xz),e(xz,AVo),e(ov,yVo),e(U,LVo),e(U,rv),e(rv,l2e),e(l2e,xVo),e(rv,$Vo),e(rv,$z),e($z,kVo),e(rv,SVo),e(U,RVo),e(U,tv),e(tv,i2e),e(i2e,PVo),e(tv,BVo),e(tv,kz),e(kz,IVo),e(tv,NVo),e(U,qVo),e(U,av),e(av,d2e),e(d2e,jVo),e(av,DVo),e(av,Sz),e(Sz,GVo),e(av,OVo),e(U,VVo),e(U,nv),e(nv,c2e),e(c2e,XVo),e(nv,zVo),e(nv,Rz),e(Rz,QVo),e(nv,WVo),e(U,UVo),e(U,sv),e(sv,f2e),e(f2e,HVo),e(sv,JVo),e(sv,m2e),e(m2e,YVo),e(sv,KVo),e(U,ZVo),e(U,lv),e(lv,g2e),e(g2e,eXo),e(lv,oXo),e(lv,Pz),e(Pz,rXo),e(lv,tXo),e(U,aXo),e(U,iv),e(iv,h2e),e(h2e,nXo),e(iv,sXo),e(iv,Bz),e(Bz,lXo),e(iv,iXo),e(U,dXo),e(U,dv),e(dv,p2e),e(p2e,cXo),e(dv,fXo),e(dv,Iz),e(Iz,mXo),e(dv,gXo),e(U,hXo),e(U,cv),e(cv,u2e),e(u2e,pXo),e(cv,uXo),e(cv,Nz),e(Nz,_Xo),e(cv,bXo),e(eo,vXo),e(eo,fv),e(fv,FXo),e(fv,_2e),e(_2e,TXo),e(fv,MXo),e(fv,b2e),e(b2e,EXo),e(eo,CXo),M(mv,eo,null),b(f,nHe,_),b(f,Fd,_),e(Fd,gv),e(gv,v2e),M(w9,v2e,null),e(Fd,wXo),e(Fd,F2e),e(F2e,AXo),b(f,sHe,_),b(f,No,_),M(A9,No,null),e(No,yXo),e(No,Td),e(Td,LXo),e(Td,qz),e(qz,xXo),e(Td,$Xo),e(Td,jz),e(jz,kXo),e(Td,SXo),e(No,RXo),e(No,y9),e(y9,PXo),e(y9,T2e),e(T2e,BXo),e(y9,IXo),e(No,NXo),e(No,bt),M(L9,bt,null),e(bt,qXo),e(bt,M2e),e(M2e,jXo),e(bt,DXo),e(bt,Md),e(Md,GXo),e(Md,E2e),e(E2e,OXo),e(Md,VXo),e(Md,Dz),e(Dz,XXo),e(Md,zXo),e(bt,QXo),M(hv,bt,null),e(No,WXo),e(No,oo),M(x9,oo,null),e(oo,UXo),e(oo,C2e),e(C2e,HXo),e(oo,JXo),e(oo,Ya),e(Ya,YXo),e(Ya,w2e),e(w2e,KXo),e(Ya,ZXo),e(Ya,A2e),e(A2e,ezo),e(Ya,ozo),e(Ya,y2e),e(y2e,rzo),e(Ya,tzo),e(oo,azo),e(oo,me),e(me,pv),e(pv,L2e),e(L2e,nzo),e(pv,szo),e(pv,Gz),e(Gz,lzo),e(pv,izo),e(me,dzo),e(me,uv),e(uv,x2e),e(x2e,czo),e(uv,fzo),e(uv,Oz),e(Oz,mzo),e(uv,gzo),e(me,hzo),e(me,_v),e(_v,$2e),e($2e,pzo),e(_v,uzo),e(_v,Vz),e(Vz,_zo),e(_v,bzo),e(me,vzo),e(me,bv),e(bv,k2e),e(k2e,Fzo),e(bv,Tzo),e(bv,Xz),e(Xz,Mzo),e(bv,Ezo),e(me,Czo),e(me,vv),e(vv,S2e),e(S2e,wzo),e(vv,Azo),e(vv,zz),e(zz,yzo),e(vv,Lzo),e(me,xzo),e(me,Fv),e(Fv,R2e),e(R2e,$zo),e(Fv,kzo),e(Fv,Qz),e(Qz,Szo),e(Fv,Rzo),e(me,Pzo),e(me,Tv),e(Tv,P2e),e(P2e,Bzo),e(Tv,Izo),e(Tv,Wz),e(Wz,Nzo),e(Tv,qzo),e(me,jzo),e(me,Mv),e(Mv,B2e),e(B2e,Dzo),e(Mv,Gzo),e(Mv,Uz),e(Uz,Ozo),e(Mv,Vzo),e(me,Xzo),e(me,Ev),e(Ev,I2e),e(I2e,zzo),e(Ev,Qzo),e(Ev,Hz),e(Hz,Wzo),e(Ev,Uzo),e(me,Hzo),e(me,Cv),e(Cv,N2e),e(N2e,Jzo),e(Cv,Yzo),e(Cv,Jz),e(Jz,Kzo),e(Cv,Zzo),e(me,eQo),e(me,wv),e(wv,q2e),e(q2e,oQo),e(wv,rQo),e(wv,Yz),e(Yz,tQo),e(wv,aQo),e(me,nQo),e(me,Av),e(Av,j2e),e(j2e,sQo),e(Av,lQo),e(Av,Kz),e(Kz,iQo),e(Av,dQo),e(me,cQo),e(me,yv),e(yv,D2e),e(D2e,fQo),e(yv,mQo),e(yv,Zz),e(Zz,gQo),e(yv,hQo),e(me,pQo),e(me,Lv),e(Lv,G2e),e(G2e,uQo),e(Lv,_Qo),e(Lv,eQ),e(eQ,bQo),e(Lv,vQo),e(me,FQo),e(me,xv),e(xv,O2e),e(O2e,TQo),e(xv,MQo),e(xv,oQ),e(oQ,EQo),e(xv,CQo),e(me,wQo),e(me,$v),e($v,V2e),e(V2e,AQo),e($v,yQo),e($v,rQ),e(rQ,LQo),e($v,xQo),e(me,$Qo),e(me,kv),e(kv,X2e),e(X2e,kQo),e(kv,SQo),e(kv,tQ),e(tQ,RQo),e(kv,PQo),e(me,BQo),e(me,Sv),e(Sv,z2e),e(z2e,IQo),e(Sv,NQo),e(Sv,aQ),e(aQ,qQo),e(Sv,jQo),e(me,DQo),e(me,Rv),e(Rv,Q2e),e(Q2e,GQo),e(Rv,OQo),e(Rv,nQ),e(nQ,VQo),e(Rv,XQo),e(oo,zQo),e(oo,Pv),e(Pv,QQo),e(Pv,W2e),e(W2e,WQo),e(Pv,UQo),e(Pv,U2e),e(U2e,HQo),e(oo,JQo),M(Bv,oo,null),b(f,lHe,_),b(f,Ed,_),e(Ed,Iv),e(Iv,H2e),M($9,H2e,null),e(Ed,YQo),e(Ed,J2e),e(J2e,KQo),b(f,iHe,_),b(f,qo,_),M(k9,qo,null),e(qo,ZQo),e(qo,Cd),e(Cd,eWo),e(Cd,sQ),e(sQ,oWo),e(Cd,rWo),e(Cd,lQ),e(lQ,tWo),e(Cd,aWo),e(qo,nWo),e(qo,S9),e(S9,sWo),e(S9,Y2e),e(Y2e,lWo),e(S9,iWo),e(qo,dWo),e(qo,vt),M(R9,vt,null),e(vt,cWo),e(vt,K2e),e(K2e,fWo),e(vt,mWo),e(vt,wd),e(wd,gWo),e(wd,Z2e),e(Z2e,hWo),e(wd,pWo),e(wd,iQ),e(iQ,uWo),e(wd,_Wo),e(vt,bWo),M(Nv,vt,null),e(qo,vWo),e(qo,ro),M(P9,ro,null),e(ro,FWo),e(ro,e1e),e(e1e,TWo),e(ro,MWo),e(ro,Ka),e(Ka,EWo),e(Ka,o1e),e(o1e,CWo),e(Ka,wWo),e(Ka,r1e),e(r1e,AWo),e(Ka,yWo),e(Ka,t1e),e(t1e,LWo),e(Ka,xWo),e(ro,$Wo),e(ro,N),e(N,qv),e(qv,a1e),e(a1e,kWo),e(qv,SWo),e(qv,dQ),e(dQ,RWo),e(qv,PWo),e(N,BWo),e(N,jv),e(jv,n1e),e(n1e,IWo),e(jv,NWo),e(jv,cQ),e(cQ,qWo),e(jv,jWo),e(N,DWo),e(N,Dv),e(Dv,s1e),e(s1e,GWo),e(Dv,OWo),e(Dv,fQ),e(fQ,VWo),e(Dv,XWo),e(N,zWo),e(N,Gv),e(Gv,l1e),e(l1e,QWo),e(Gv,WWo),e(Gv,mQ),e(mQ,UWo),e(Gv,HWo),e(N,JWo),e(N,Ov),e(Ov,i1e),e(i1e,YWo),e(Ov,KWo),e(Ov,gQ),e(gQ,ZWo),e(Ov,eUo),e(N,oUo),e(N,Vv),e(Vv,d1e),e(d1e,rUo),e(Vv,tUo),e(Vv,hQ),e(hQ,aUo),e(Vv,nUo),e(N,sUo),e(N,Xv),e(Xv,c1e),e(c1e,lUo),e(Xv,iUo),e(Xv,pQ),e(pQ,dUo),e(Xv,cUo),e(N,fUo),e(N,zv),e(zv,f1e),e(f1e,mUo),e(zv,gUo),e(zv,uQ),e(uQ,hUo),e(zv,pUo),e(N,uUo),e(N,Qv),e(Qv,m1e),e(m1e,_Uo),e(Qv,bUo),e(Qv,_Q),e(_Q,vUo),e(Qv,FUo),e(N,TUo),e(N,Wv),e(Wv,g1e),e(g1e,MUo),e(Wv,EUo),e(Wv,bQ),e(bQ,CUo),e(Wv,wUo),e(N,AUo),e(N,Uv),e(Uv,h1e),e(h1e,yUo),e(Uv,LUo),e(Uv,vQ),e(vQ,xUo),e(Uv,$Uo),e(N,kUo),e(N,Hv),e(Hv,p1e),e(p1e,SUo),e(Hv,RUo),e(Hv,FQ),e(FQ,PUo),e(Hv,BUo),e(N,IUo),e(N,Jv),e(Jv,u1e),e(u1e,NUo),e(Jv,qUo),e(Jv,TQ),e(TQ,jUo),e(Jv,DUo),e(N,GUo),e(N,Yv),e(Yv,_1e),e(_1e,OUo),e(Yv,VUo),e(Yv,MQ),e(MQ,XUo),e(Yv,zUo),e(N,QUo),e(N,Kv),e(Kv,b1e),e(b1e,WUo),e(Kv,UUo),e(Kv,EQ),e(EQ,HUo),e(Kv,JUo),e(N,YUo),e(N,Zv),e(Zv,v1e),e(v1e,KUo),e(Zv,ZUo),e(Zv,CQ),e(CQ,eHo),e(Zv,oHo),e(N,rHo),e(N,e3),e(e3,F1e),e(F1e,tHo),e(e3,aHo),e(e3,wQ),e(wQ,nHo),e(e3,sHo),e(N,lHo),e(N,o3),e(o3,T1e),e(T1e,iHo),e(o3,dHo),e(o3,AQ),e(AQ,cHo),e(o3,fHo),e(N,mHo),e(N,r3),e(r3,M1e),e(M1e,gHo),e(r3,hHo),e(r3,yQ),e(yQ,pHo),e(r3,uHo),e(N,_Ho),e(N,t3),e(t3,E1e),e(E1e,bHo),e(t3,vHo),e(t3,LQ),e(LQ,FHo),e(t3,THo),e(N,MHo),e(N,a3),e(a3,C1e),e(C1e,EHo),e(a3,CHo),e(a3,xQ),e(xQ,wHo),e(a3,AHo),e(N,yHo),e(N,n3),e(n3,w1e),e(w1e,LHo),e(n3,xHo),e(n3,$Q),e($Q,$Ho),e(n3,kHo),e(N,SHo),e(N,s3),e(s3,A1e),e(A1e,RHo),e(s3,PHo),e(s3,kQ),e(kQ,BHo),e(s3,IHo),e(N,NHo),e(N,l3),e(l3,y1e),e(y1e,qHo),e(l3,jHo),e(l3,SQ),e(SQ,DHo),e(l3,GHo),e(N,OHo),e(N,i3),e(i3,L1e),e(L1e,VHo),e(i3,XHo),e(i3,RQ),e(RQ,zHo),e(i3,QHo),e(N,WHo),e(N,d3),e(d3,x1e),e(x1e,UHo),e(d3,HHo),e(d3,PQ),e(PQ,JHo),e(d3,YHo),e(N,KHo),e(N,c3),e(c3,$1e),e($1e,ZHo),e(c3,eJo),e(c3,BQ),e(BQ,oJo),e(c3,rJo),e(N,tJo),e(N,f3),e(f3,k1e),e(k1e,aJo),e(f3,nJo),e(f3,IQ),e(IQ,sJo),e(f3,lJo),e(N,iJo),e(N,m3),e(m3,S1e),e(S1e,dJo),e(m3,cJo),e(m3,NQ),e(NQ,fJo),e(m3,mJo),e(N,gJo),e(N,g3),e(g3,R1e),e(R1e,hJo),e(g3,pJo),e(g3,qQ),e(qQ,uJo),e(g3,_Jo),e(N,bJo),e(N,h3),e(h3,P1e),e(P1e,vJo),e(h3,FJo),e(h3,jQ),e(jQ,TJo),e(h3,MJo),e(N,EJo),e(N,p3),e(p3,B1e),e(B1e,CJo),e(p3,wJo),e(p3,DQ),e(DQ,AJo),e(p3,yJo),e(N,LJo),e(N,u3),e(u3,I1e),e(I1e,xJo),e(u3,$Jo),e(u3,GQ),e(GQ,kJo),e(u3,SJo),e(N,RJo),e(N,_3),e(_3,N1e),e(N1e,PJo),e(_3,BJo),e(_3,OQ),e(OQ,IJo),e(_3,NJo),e(N,qJo),e(N,b3),e(b3,q1e),e(q1e,jJo),e(b3,DJo),e(b3,VQ),e(VQ,GJo),e(b3,OJo),e(N,VJo),e(N,v3),e(v3,j1e),e(j1e,XJo),e(v3,zJo),e(v3,XQ),e(XQ,QJo),e(v3,WJo),e(N,UJo),e(N,F3),e(F3,D1e),e(D1e,HJo),e(F3,JJo),e(F3,zQ),e(zQ,YJo),e(F3,KJo),e(N,ZJo),e(N,T3),e(T3,G1e),e(G1e,eYo),e(T3,oYo),e(T3,QQ),e(QQ,rYo),e(T3,tYo),e(N,aYo),e(N,M3),e(M3,O1e),e(O1e,nYo),e(M3,sYo),e(M3,WQ),e(WQ,lYo),e(M3,iYo),e(N,dYo),e(N,E3),e(E3,V1e),e(V1e,cYo),e(E3,fYo),e(E3,UQ),e(UQ,mYo),e(E3,gYo),e(N,hYo),e(N,C3),e(C3,X1e),e(X1e,pYo),e(C3,uYo),e(C3,HQ),e(HQ,_Yo),e(C3,bYo),e(N,vYo),e(N,w3),e(w3,z1e),e(z1e,FYo),e(w3,TYo),e(w3,JQ),e(JQ,MYo),e(w3,EYo),e(N,CYo),e(N,A3),e(A3,Q1e),e(Q1e,wYo),e(A3,AYo),e(A3,YQ),e(YQ,yYo),e(A3,LYo),e(N,xYo),e(N,y3),e(y3,W1e),e(W1e,$Yo),e(y3,kYo),e(y3,KQ),e(KQ,SYo),e(y3,RYo),e(N,PYo),e(N,L3),e(L3,U1e),e(U1e,BYo),e(L3,IYo),e(L3,ZQ),e(ZQ,NYo),e(L3,qYo),e(N,jYo),e(N,x3),e(x3,H1e),e(H1e,DYo),e(x3,GYo),e(x3,eW),e(eW,OYo),e(x3,VYo),e(N,XYo),e(N,$3),e($3,J1e),e(J1e,zYo),e($3,QYo),e($3,oW),e(oW,WYo),e($3,UYo),e(N,HYo),e(N,k3),e(k3,Y1e),e(Y1e,JYo),e(k3,YYo),e(k3,rW),e(rW,KYo),e(k3,ZYo),e(N,eKo),e(N,S3),e(S3,K1e),e(K1e,oKo),e(S3,rKo),e(S3,tW),e(tW,tKo),e(S3,aKo),e(N,nKo),e(N,R3),e(R3,Z1e),e(Z1e,sKo),e(R3,lKo),e(R3,aW),e(aW,iKo),e(R3,dKo),e(N,cKo),e(N,P3),e(P3,ebe),e(ebe,fKo),e(P3,mKo),e(P3,nW),e(nW,gKo),e(P3,hKo),e(N,pKo),e(N,B3),e(B3,obe),e(obe,uKo),e(B3,_Ko),e(B3,sW),e(sW,bKo),e(B3,vKo),e(ro,FKo),e(ro,I3),e(I3,TKo),e(I3,rbe),e(rbe,MKo),e(I3,EKo),e(I3,tbe),e(tbe,CKo),e(ro,wKo),M(N3,ro,null),b(f,dHe,_),b(f,Ad,_),e(Ad,q3),e(q3,abe),M(B9,abe,null),e(Ad,AKo),e(Ad,nbe),e(nbe,yKo),b(f,cHe,_),b(f,jo,_),M(I9,jo,null),e(jo,LKo),e(jo,yd),e(yd,xKo),e(yd,lW),e(lW,$Ko),e(yd,kKo),e(yd,iW),e(iW,SKo),e(yd,RKo),e(jo,PKo),e(jo,N9),e(N9,BKo),e(N9,sbe),e(sbe,IKo),e(N9,NKo),e(jo,qKo),e(jo,Ft),M(q9,Ft,null),e(Ft,jKo),e(Ft,lbe),e(lbe,DKo),e(Ft,GKo),e(Ft,Ld),e(Ld,OKo),e(Ld,ibe),e(ibe,VKo),e(Ld,XKo),e(Ld,dW),e(dW,zKo),e(Ld,QKo),e(Ft,WKo),M(j3,Ft,null),e(jo,UKo),e(jo,to),M(j9,to,null),e(to,HKo),e(to,dbe),e(dbe,JKo),e(to,YKo),e(to,Za),e(Za,KKo),e(Za,cbe),e(cbe,ZKo),e(Za,eZo),e(Za,fbe),e(fbe,oZo),e(Za,rZo),e(Za,mbe),e(mbe,tZo),e(Za,aZo),e(to,nZo),e(to,Z),e(Z,D3),e(D3,gbe),e(gbe,sZo),e(D3,lZo),e(D3,cW),e(cW,iZo),e(D3,dZo),e(Z,cZo),e(Z,G3),e(G3,hbe),e(hbe,fZo),e(G3,mZo),e(G3,fW),e(fW,gZo),e(G3,hZo),e(Z,pZo),e(Z,O3),e(O3,pbe),e(pbe,uZo),e(O3,_Zo),e(O3,mW),e(mW,bZo),e(O3,vZo),e(Z,FZo),e(Z,V3),e(V3,ube),e(ube,TZo),e(V3,MZo),e(V3,gW),e(gW,EZo),e(V3,CZo),e(Z,wZo),e(Z,X3),e(X3,_be),e(_be,AZo),e(X3,yZo),e(X3,hW),e(hW,LZo),e(X3,xZo),e(Z,$Zo),e(Z,z3),e(z3,bbe),e(bbe,kZo),e(z3,SZo),e(z3,pW),e(pW,RZo),e(z3,PZo),e(Z,BZo),e(Z,Q3),e(Q3,vbe),e(vbe,IZo),e(Q3,NZo),e(Q3,uW),e(uW,qZo),e(Q3,jZo),e(Z,DZo),e(Z,W3),e(W3,Fbe),e(Fbe,GZo),e(W3,OZo),e(W3,_W),e(_W,VZo),e(W3,XZo),e(Z,zZo),e(Z,U3),e(U3,Tbe),e(Tbe,QZo),e(U3,WZo),e(U3,bW),e(bW,UZo),e(U3,HZo),e(Z,JZo),e(Z,H3),e(H3,Mbe),e(Mbe,YZo),e(H3,KZo),e(H3,vW),e(vW,ZZo),e(H3,eer),e(Z,oer),e(Z,J3),e(J3,Ebe),e(Ebe,rer),e(J3,ter),e(J3,FW),e(FW,aer),e(J3,ner),e(Z,ser),e(Z,Y3),e(Y3,Cbe),e(Cbe,ler),e(Y3,ier),e(Y3,TW),e(TW,der),e(Y3,cer),e(Z,fer),e(Z,K3),e(K3,wbe),e(wbe,mer),e(K3,ger),e(K3,MW),e(MW,her),e(K3,per),e(Z,uer),e(Z,Z3),e(Z3,Abe),e(Abe,_er),e(Z3,ber),e(Z3,EW),e(EW,ver),e(Z3,Fer),e(Z,Ter),e(Z,eF),e(eF,ybe),e(ybe,Mer),e(eF,Eer),e(eF,CW),e(CW,Cer),e(eF,wer),e(Z,Aer),e(Z,oF),e(oF,Lbe),e(Lbe,yer),e(oF,Ler),e(oF,wW),e(wW,xer),e(oF,$er),e(Z,ker),e(Z,rF),e(rF,xbe),e(xbe,Ser),e(rF,Rer),e(rF,AW),e(AW,Per),e(rF,Ber),e(Z,Ier),e(Z,tF),e(tF,$be),e($be,Ner),e(tF,qer),e(tF,yW),e(yW,jer),e(tF,Der),e(Z,Ger),e(Z,aF),e(aF,kbe),e(kbe,Oer),e(aF,Ver),e(aF,LW),e(LW,Xer),e(aF,zer),e(Z,Qer),e(Z,nF),e(nF,Sbe),e(Sbe,Wer),e(nF,Uer),e(nF,xW),e(xW,Her),e(nF,Jer),e(Z,Yer),e(Z,sF),e(sF,Rbe),e(Rbe,Ker),e(sF,Zer),e(sF,$W),e($W,eor),e(sF,oor),e(Z,ror),e(Z,lF),e(lF,Pbe),e(Pbe,tor),e(lF,aor),e(lF,kW),e(kW,nor),e(lF,sor),e(Z,lor),e(Z,iF),e(iF,Bbe),e(Bbe,ior),e(iF,dor),e(iF,SW),e(SW,cor),e(iF,mor),e(Z,gor),e(Z,dF),e(dF,Ibe),e(Ibe,hor),e(dF,por),e(dF,RW),e(RW,uor),e(dF,_or),e(Z,bor),e(Z,cF),e(cF,Nbe),e(Nbe,vor),e(cF,For),e(cF,PW),e(PW,Tor),e(cF,Mor),e(Z,Eor),e(Z,fF),e(fF,qbe),e(qbe,Cor),e(fF,wor),e(fF,BW),e(BW,Aor),e(fF,yor),e(Z,Lor),e(Z,mF),e(mF,jbe),e(jbe,xor),e(mF,$or),e(mF,IW),e(IW,kor),e(mF,Sor),e(Z,Ror),e(Z,gF),e(gF,Dbe),e(Dbe,Por),e(gF,Bor),e(gF,NW),e(NW,Ior),e(gF,Nor),e(Z,qor),e(Z,hF),e(hF,Gbe),e(Gbe,jor),e(hF,Dor),e(hF,qW),e(qW,Gor),e(hF,Oor),e(Z,Vor),e(Z,pF),e(pF,Obe),e(Obe,Xor),e(pF,zor),e(pF,jW),e(jW,Qor),e(pF,Wor),e(Z,Uor),e(Z,uF),e(uF,Vbe),e(Vbe,Hor),e(uF,Jor),e(uF,DW),e(DW,Yor),e(uF,Kor),e(to,Zor),e(to,_F),e(_F,err),e(_F,Xbe),e(Xbe,orr),e(_F,rrr),e(_F,zbe),e(zbe,trr),e(to,arr),M(bF,to,null),b(f,fHe,_),b(f,xd,_),e(xd,vF),e(vF,Qbe),M(D9,Qbe,null),e(xd,nrr),e(xd,Wbe),e(Wbe,srr),b(f,mHe,_),b(f,Do,_),M(G9,Do,null),e(Do,lrr),e(Do,$d),e($d,irr),e($d,GW),e(GW,drr),e($d,crr),e($d,OW),e(OW,frr),e($d,mrr),e(Do,grr),e(Do,O9),e(O9,hrr),e(O9,Ube),e(Ube,prr),e(O9,urr),e(Do,_rr),e(Do,Tt),M(V9,Tt,null),e(Tt,brr),e(Tt,Hbe),e(Hbe,vrr),e(Tt,Frr),e(Tt,kd),e(kd,Trr),e(kd,Jbe),e(Jbe,Mrr),e(kd,Err),e(kd,VW),e(VW,Crr),e(kd,wrr),e(Tt,Arr),M(FF,Tt,null),e(Do,yrr),e(Do,ao),M(X9,ao,null),e(ao,Lrr),e(ao,Ybe),e(Ybe,xrr),e(ao,$rr),e(ao,en),e(en,krr),e(en,Kbe),e(Kbe,Srr),e(en,Rrr),e(en,Zbe),e(Zbe,Prr),e(en,Brr),e(en,eve),e(eve,Irr),e(en,Nrr),e(ao,qrr),e(ao,Go),e(Go,TF),e(TF,ove),e(ove,jrr),e(TF,Drr),e(TF,XW),e(XW,Grr),e(TF,Orr),e(Go,Vrr),e(Go,MF),e(MF,rve),e(rve,Xrr),e(MF,zrr),e(MF,zW),e(zW,Qrr),e(MF,Wrr),e(Go,Urr),e(Go,EF),e(EF,tve),e(tve,Hrr),e(EF,Jrr),e(EF,QW),e(QW,Yrr),e(EF,Krr),e(Go,Zrr),e(Go,CF),e(CF,ave),e(ave,etr),e(CF,otr),e(CF,WW),e(WW,rtr),e(CF,ttr),e(Go,atr),e(Go,wF),e(wF,nve),e(nve,ntr),e(wF,str),e(wF,UW),e(UW,ltr),e(wF,itr),e(Go,dtr),e(Go,AF),e(AF,sve),e(sve,ctr),e(AF,ftr),e(AF,HW),e(HW,mtr),e(AF,gtr),e(ao,htr),e(ao,yF),e(yF,ptr),e(yF,lve),e(lve,utr),e(yF,_tr),e(yF,ive),e(ive,btr),e(ao,vtr),M(LF,ao,null),b(f,gHe,_),b(f,Sd,_),e(Sd,xF),e(xF,dve),M(z9,dve,null),e(Sd,Ftr),e(Sd,cve),e(cve,Ttr),b(f,hHe,_),b(f,Oo,_),M(Q9,Oo,null),e(Oo,Mtr),e(Oo,Rd),e(Rd,Etr),e(Rd,JW),e(JW,Ctr),e(Rd,wtr),e(Rd,YW),e(YW,Atr),e(Rd,ytr),e(Oo,Ltr),e(Oo,W9),e(W9,xtr),e(W9,fve),e(fve,$tr),e(W9,ktr),e(Oo,Str),e(Oo,Mt),M(U9,Mt,null),e(Mt,Rtr),e(Mt,mve),e(mve,Ptr),e(Mt,Btr),e(Mt,Pd),e(Pd,Itr),e(Pd,gve),e(gve,Ntr),e(Pd,qtr),e(Pd,KW),e(KW,jtr),e(Pd,Dtr),e(Mt,Gtr),M($F,Mt,null),e(Oo,Otr),e(Oo,no),M(H9,no,null),e(no,Vtr),e(no,hve),e(hve,Xtr),e(no,ztr),e(no,on),e(on,Qtr),e(on,pve),e(pve,Wtr),e(on,Utr),e(on,uve),e(uve,Htr),e(on,Jtr),e(on,_ve),e(_ve,Ytr),e(on,Ktr),e(no,Ztr),e(no,H),e(H,kF),e(kF,bve),e(bve,ear),e(kF,oar),e(kF,ZW),e(ZW,rar),e(kF,tar),e(H,aar),e(H,SF),e(SF,vve),e(vve,nar),e(SF,sar),e(SF,eU),e(eU,lar),e(SF,iar),e(H,dar),e(H,RF),e(RF,Fve),e(Fve,car),e(RF,far),e(RF,oU),e(oU,mar),e(RF,gar),e(H,har),e(H,PF),e(PF,Tve),e(Tve,par),e(PF,uar),e(PF,rU),e(rU,_ar),e(PF,bar),e(H,Far),e(H,BF),e(BF,Mve),e(Mve,Tar),e(BF,Mar),e(BF,tU),e(tU,Ear),e(BF,Car),e(H,war),e(H,IF),e(IF,Eve),e(Eve,Aar),e(IF,yar),e(IF,aU),e(aU,Lar),e(IF,xar),e(H,$ar),e(H,NF),e(NF,Cve),e(Cve,kar),e(NF,Sar),e(NF,nU),e(nU,Rar),e(NF,Par),e(H,Bar),e(H,qF),e(qF,wve),e(wve,Iar),e(qF,Nar),e(qF,sU),e(sU,qar),e(qF,jar),e(H,Dar),e(H,jF),e(jF,Ave),e(Ave,Gar),e(jF,Oar),e(jF,lU),e(lU,Var),e(jF,Xar),e(H,zar),e(H,DF),e(DF,yve),e(yve,Qar),e(DF,War),e(DF,iU),e(iU,Uar),e(DF,Har),e(H,Jar),e(H,GF),e(GF,Lve),e(Lve,Yar),e(GF,Kar),e(GF,dU),e(dU,Zar),e(GF,enr),e(H,onr),e(H,OF),e(OF,xve),e(xve,rnr),e(OF,tnr),e(OF,cU),e(cU,anr),e(OF,nnr),e(H,snr),e(H,VF),e(VF,$ve),e($ve,lnr),e(VF,inr),e(VF,fU),e(fU,dnr),e(VF,cnr),e(H,fnr),e(H,XF),e(XF,kve),e(kve,mnr),e(XF,gnr),e(XF,mU),e(mU,hnr),e(XF,pnr),e(H,unr),e(H,zF),e(zF,Sve),e(Sve,_nr),e(zF,bnr),e(zF,gU),e(gU,vnr),e(zF,Fnr),e(H,Tnr),e(H,QF),e(QF,Rve),e(Rve,Mnr),e(QF,Enr),e(QF,hU),e(hU,Cnr),e(QF,wnr),e(H,Anr),e(H,WF),e(WF,Pve),e(Pve,ynr),e(WF,Lnr),e(WF,pU),e(pU,xnr),e(WF,$nr),e(H,knr),e(H,UF),e(UF,Bve),e(Bve,Snr),e(UF,Rnr),e(UF,uU),e(uU,Pnr),e(UF,Bnr),e(H,Inr),e(H,HF),e(HF,Ive),e(Ive,Nnr),e(HF,qnr),e(HF,_U),e(_U,jnr),e(HF,Dnr),e(H,Gnr),e(H,JF),e(JF,Nve),e(Nve,Onr),e(JF,Vnr),e(JF,bU),e(bU,Xnr),e(JF,znr),e(H,Qnr),e(H,YF),e(YF,qve),e(qve,Wnr),e(YF,Unr),e(YF,vU),e(vU,Hnr),e(YF,Jnr),e(H,Ynr),e(H,KF),e(KF,jve),e(jve,Knr),e(KF,Znr),e(KF,FU),e(FU,esr),e(KF,osr),e(H,rsr),e(H,ZF),e(ZF,Dve),e(Dve,tsr),e(ZF,asr),e(ZF,TU),e(TU,nsr),e(ZF,ssr),e(H,lsr),e(H,e7),e(e7,Gve),e(Gve,isr),e(e7,dsr),e(e7,MU),e(MU,csr),e(e7,fsr),e(H,msr),e(H,o7),e(o7,Ove),e(Ove,gsr),e(o7,hsr),e(o7,EU),e(EU,psr),e(o7,usr),e(H,_sr),e(H,r7),e(r7,Vve),e(Vve,bsr),e(r7,vsr),e(r7,CU),e(CU,Fsr),e(r7,Tsr),e(H,Msr),e(H,t7),e(t7,Xve),e(Xve,Esr),e(t7,Csr),e(t7,wU),e(wU,wsr),e(t7,Asr),e(H,ysr),e(H,a7),e(a7,zve),e(zve,Lsr),e(a7,xsr),e(a7,AU),e(AU,$sr),e(a7,ksr),e(H,Ssr),e(H,n7),e(n7,Qve),e(Qve,Rsr),e(n7,Psr),e(n7,yU),e(yU,Bsr),e(n7,Isr),e(H,Nsr),e(H,s7),e(s7,Wve),e(Wve,qsr),e(s7,jsr),e(s7,LU),e(LU,Dsr),e(s7,Gsr),e(H,Osr),e(H,l7),e(l7,Uve),e(Uve,Vsr),e(l7,Xsr),e(l7,xU),e(xU,zsr),e(l7,Qsr),e(H,Wsr),e(H,i7),e(i7,Hve),e(Hve,Usr),e(i7,Hsr),e(i7,$U),e($U,Jsr),e(i7,Ysr),e(H,Ksr),e(H,d7),e(d7,Jve),e(Jve,Zsr),e(d7,elr),e(d7,kU),e(kU,olr),e(d7,rlr),e(H,tlr),e(H,c7),e(c7,Yve),e(Yve,alr),e(c7,nlr),e(c7,SU),e(SU,slr),e(c7,llr),e(H,ilr),e(H,f7),e(f7,Kve),e(Kve,dlr),e(f7,clr),e(f7,RU),e(RU,flr),e(f7,mlr),e(H,glr),e(H,m7),e(m7,Zve),e(Zve,hlr),e(m7,plr),e(m7,PU),e(PU,ulr),e(m7,_lr),e(H,blr),e(H,g7),e(g7,e3e),e(e3e,vlr),e(g7,Flr),e(g7,BU),e(BU,Tlr),e(g7,Mlr),e(no,Elr),e(no,h7),e(h7,Clr),e(h7,o3e),e(o3e,wlr),e(h7,Alr),e(h7,r3e),e(r3e,ylr),e(no,Llr),M(p7,no,null),b(f,pHe,_),b(f,Bd,_),e(Bd,u7),e(u7,t3e),M(J9,t3e,null),e(Bd,xlr),e(Bd,a3e),e(a3e,$lr),b(f,uHe,_),b(f,Vo,_),M(Y9,Vo,null),e(Vo,klr),e(Vo,Id),e(Id,Slr),e(Id,IU),e(IU,Rlr),e(Id,Plr),e(Id,NU),e(NU,Blr),e(Id,Ilr),e(Vo,Nlr),e(Vo,K9),e(K9,qlr),e(K9,n3e),e(n3e,jlr),e(K9,Dlr),e(Vo,Glr),e(Vo,Et),M(Z9,Et,null),e(Et,Olr),e(Et,s3e),e(s3e,Vlr),e(Et,Xlr),e(Et,Nd),e(Nd,zlr),e(Nd,l3e),e(l3e,Qlr),e(Nd,Wlr),e(Nd,qU),e(qU,Ulr),e(Nd,Hlr),e(Et,Jlr),M(_7,Et,null),e(Vo,Ylr),e(Vo,so),M(ex,so,null),e(so,Klr),e(so,i3e),e(i3e,Zlr),e(so,eir),e(so,rn),e(rn,oir),e(rn,d3e),e(d3e,rir),e(rn,tir),e(rn,c3e),e(c3e,air),e(rn,nir),e(rn,f3e),e(f3e,sir),e(rn,lir),e(so,iir),e(so,V),e(V,b7),e(b7,m3e),e(m3e,dir),e(b7,cir),e(b7,jU),e(jU,fir),e(b7,mir),e(V,gir),e(V,v7),e(v7,g3e),e(g3e,hir),e(v7,pir),e(v7,DU),e(DU,uir),e(v7,_ir),e(V,bir),e(V,F7),e(F7,h3e),e(h3e,vir),e(F7,Fir),e(F7,GU),e(GU,Tir),e(F7,Mir),e(V,Eir),e(V,T7),e(T7,p3e),e(p3e,Cir),e(T7,wir),e(T7,OU),e(OU,Air),e(T7,yir),e(V,Lir),e(V,M7),e(M7,u3e),e(u3e,xir),e(M7,$ir),e(M7,VU),e(VU,kir),e(M7,Sir),e(V,Rir),e(V,E7),e(E7,_3e),e(_3e,Pir),e(E7,Bir),e(E7,XU),e(XU,Iir),e(E7,Nir),e(V,qir),e(V,C7),e(C7,b3e),e(b3e,jir),e(C7,Dir),e(C7,zU),e(zU,Gir),e(C7,Oir),e(V,Vir),e(V,w7),e(w7,v3e),e(v3e,Xir),e(w7,zir),e(w7,QU),e(QU,Qir),e(w7,Wir),e(V,Uir),e(V,A7),e(A7,F3e),e(F3e,Hir),e(A7,Jir),e(A7,WU),e(WU,Yir),e(A7,Kir),e(V,Zir),e(V,y7),e(y7,T3e),e(T3e,edr),e(y7,odr),e(y7,UU),e(UU,rdr),e(y7,tdr),e(V,adr),e(V,L7),e(L7,M3e),e(M3e,ndr),e(L7,sdr),e(L7,HU),e(HU,ldr),e(L7,idr),e(V,ddr),e(V,x7),e(x7,E3e),e(E3e,cdr),e(x7,fdr),e(x7,JU),e(JU,mdr),e(x7,gdr),e(V,hdr),e(V,$7),e($7,C3e),e(C3e,pdr),e($7,udr),e($7,YU),e(YU,_dr),e($7,bdr),e(V,vdr),e(V,k7),e(k7,w3e),e(w3e,Fdr),e(k7,Tdr),e(k7,KU),e(KU,Mdr),e(k7,Edr),e(V,Cdr),e(V,S7),e(S7,A3e),e(A3e,wdr),e(S7,Adr),e(S7,ZU),e(ZU,ydr),e(S7,Ldr),e(V,xdr),e(V,R7),e(R7,y3e),e(y3e,$dr),e(R7,kdr),e(R7,eH),e(eH,Sdr),e(R7,Rdr),e(V,Pdr),e(V,P7),e(P7,L3e),e(L3e,Bdr),e(P7,Idr),e(P7,oH),e(oH,Ndr),e(P7,qdr),e(V,jdr),e(V,B7),e(B7,x3e),e(x3e,Ddr),e(B7,Gdr),e(B7,rH),e(rH,Odr),e(B7,Vdr),e(V,Xdr),e(V,I7),e(I7,$3e),e($3e,zdr),e(I7,Qdr),e(I7,tH),e(tH,Wdr),e(I7,Udr),e(V,Hdr),e(V,N7),e(N7,k3e),e(k3e,Jdr),e(N7,Ydr),e(N7,aH),e(aH,Kdr),e(N7,Zdr),e(V,ecr),e(V,q7),e(q7,S3e),e(S3e,ocr),e(q7,rcr),e(q7,nH),e(nH,tcr),e(q7,acr),e(V,ncr),e(V,j7),e(j7,R3e),e(R3e,scr),e(j7,lcr),e(j7,sH),e(sH,icr),e(j7,dcr),e(V,ccr),e(V,D7),e(D7,P3e),e(P3e,fcr),e(D7,mcr),e(D7,lH),e(lH,gcr),e(D7,hcr),e(V,pcr),e(V,G7),e(G7,B3e),e(B3e,ucr),e(G7,_cr),e(G7,iH),e(iH,bcr),e(G7,vcr),e(V,Fcr),e(V,O7),e(O7,I3e),e(I3e,Tcr),e(O7,Mcr),e(O7,dH),e(dH,Ecr),e(O7,Ccr),e(V,wcr),e(V,V7),e(V7,N3e),e(N3e,Acr),e(V7,ycr),e(V7,cH),e(cH,Lcr),e(V7,xcr),e(V,$cr),e(V,X7),e(X7,q3e),e(q3e,kcr),e(X7,Scr),e(X7,fH),e(fH,Rcr),e(X7,Pcr),e(V,Bcr),e(V,z7),e(z7,j3e),e(j3e,Icr),e(z7,Ncr),e(z7,mH),e(mH,qcr),e(z7,jcr),e(V,Dcr),e(V,Q7),e(Q7,D3e),e(D3e,Gcr),e(Q7,Ocr),e(Q7,gH),e(gH,Vcr),e(Q7,Xcr),e(V,zcr),e(V,W7),e(W7,G3e),e(G3e,Qcr),e(W7,Wcr),e(W7,hH),e(hH,Ucr),e(W7,Hcr),e(V,Jcr),e(V,U7),e(U7,O3e),e(O3e,Ycr),e(U7,Kcr),e(U7,pH),e(pH,Zcr),e(U7,efr),e(V,ofr),e(V,H7),e(H7,V3e),e(V3e,rfr),e(H7,tfr),e(H7,uH),e(uH,afr),e(H7,nfr),e(V,sfr),e(V,J7),e(J7,X3e),e(X3e,lfr),e(J7,ifr),e(J7,_H),e(_H,dfr),e(J7,cfr),e(V,ffr),e(V,Y7),e(Y7,z3e),e(z3e,mfr),e(Y7,gfr),e(Y7,bH),e(bH,hfr),e(Y7,pfr),e(V,ufr),e(V,K7),e(K7,Q3e),e(Q3e,_fr),e(K7,bfr),e(K7,vH),e(vH,vfr),e(K7,Ffr),e(V,Tfr),e(V,Z7),e(Z7,W3e),e(W3e,Mfr),e(Z7,Efr),e(Z7,FH),e(FH,Cfr),e(Z7,wfr),e(V,Afr),e(V,eT),e(eT,U3e),e(U3e,yfr),e(eT,Lfr),e(eT,TH),e(TH,xfr),e(eT,$fr),e(V,kfr),e(V,oT),e(oT,H3e),e(H3e,Sfr),e(oT,Rfr),e(oT,MH),e(MH,Pfr),e(oT,Bfr),e(V,Ifr),e(V,rT),e(rT,J3e),e(J3e,Nfr),e(rT,qfr),e(rT,EH),e(EH,jfr),e(rT,Dfr),e(V,Gfr),e(V,tT),e(tT,Y3e),e(Y3e,Ofr),e(tT,Vfr),e(tT,CH),e(CH,Xfr),e(tT,zfr),e(V,Qfr),e(V,aT),e(aT,K3e),e(K3e,Wfr),e(aT,Ufr),e(aT,wH),e(wH,Hfr),e(aT,Jfr),e(V,Yfr),e(V,nT),e(nT,Z3e),e(Z3e,Kfr),e(nT,Zfr),e(nT,AH),e(AH,emr),e(nT,omr),e(V,rmr),e(V,sT),e(sT,eFe),e(eFe,tmr),e(sT,amr),e(sT,yH),e(yH,nmr),e(sT,smr),e(so,lmr),e(so,lT),e(lT,imr),e(lT,oFe),e(oFe,dmr),e(lT,cmr),e(lT,rFe),e(rFe,fmr),e(so,mmr),M(iT,so,null),b(f,_He,_),b(f,qd,_),e(qd,dT),e(dT,tFe),M(ox,tFe,null),e(qd,gmr),e(qd,aFe),e(aFe,hmr),b(f,bHe,_),b(f,Xo,_),M(rx,Xo,null),e(Xo,pmr),e(Xo,jd),e(jd,umr),e(jd,LH),e(LH,_mr),e(jd,bmr),e(jd,xH),e(xH,vmr),e(jd,Fmr),e(Xo,Tmr),e(Xo,tx),e(tx,Mmr),e(tx,nFe),e(nFe,Emr),e(tx,Cmr),e(Xo,wmr),e(Xo,Ct),M(ax,Ct,null),e(Ct,Amr),e(Ct,sFe),e(sFe,ymr),e(Ct,Lmr),e(Ct,Dd),e(Dd,xmr),e(Dd,lFe),e(lFe,$mr),e(Dd,kmr),e(Dd,$H),e($H,Smr),e(Dd,Rmr),e(Ct,Pmr),M(cT,Ct,null),e(Xo,Bmr),e(Xo,lo),M(nx,lo,null),e(lo,Imr),e(lo,iFe),e(iFe,Nmr),e(lo,qmr),e(lo,tn),e(tn,jmr),e(tn,dFe),e(dFe,Dmr),e(tn,Gmr),e(tn,cFe),e(cFe,Omr),e(tn,Vmr),e(tn,fFe),e(fFe,Xmr),e(tn,zmr),e(lo,Qmr),e(lo,mFe),e(mFe,fT),e(fT,gFe),e(gFe,Wmr),e(fT,Umr),e(fT,kH),e(kH,Hmr),e(fT,Jmr),e(lo,Ymr),e(lo,mT),e(mT,Kmr),e(mT,hFe),e(hFe,Zmr),e(mT,egr),e(mT,pFe),e(pFe,ogr),e(lo,rgr),M(gT,lo,null),b(f,vHe,_),b(f,Gd,_),e(Gd,hT),e(hT,uFe),M(sx,uFe,null),e(Gd,tgr),e(Gd,_Fe),e(_Fe,agr),b(f,FHe,_),b(f,zo,_),M(lx,zo,null),e(zo,ngr),e(zo,Od),e(Od,sgr),e(Od,SH),e(SH,lgr),e(Od,igr),e(Od,RH),e(RH,dgr),e(Od,cgr),e(zo,fgr),e(zo,ix),e(ix,mgr),e(ix,bFe),e(bFe,ggr),e(ix,hgr),e(zo,pgr),e(zo,wt),M(dx,wt,null),e(wt,ugr),e(wt,vFe),e(vFe,_gr),e(wt,bgr),e(wt,Vd),e(Vd,vgr),e(Vd,FFe),e(FFe,Fgr),e(Vd,Tgr),e(Vd,PH),e(PH,Mgr),e(Vd,Egr),e(wt,Cgr),M(pT,wt,null),e(zo,wgr),e(zo,io),M(cx,io,null),e(io,Agr),e(io,TFe),e(TFe,ygr),e(io,Lgr),e(io,an),e(an,xgr),e(an,MFe),e(MFe,$gr),e(an,kgr),e(an,EFe),e(EFe,Sgr),e(an,Rgr),e(an,CFe),e(CFe,Pgr),e(an,Bgr),e(io,Igr),e(io,Xd),e(Xd,uT),e(uT,wFe),e(wFe,Ngr),e(uT,qgr),e(uT,BH),e(BH,jgr),e(uT,Dgr),e(Xd,Ggr),e(Xd,_T),e(_T,AFe),e(AFe,Ogr),e(_T,Vgr),e(_T,IH),e(IH,Xgr),e(_T,zgr),e(Xd,Qgr),e(Xd,bT),e(bT,yFe),e(yFe,Wgr),e(bT,Ugr),e(bT,NH),e(NH,Hgr),e(bT,Jgr),e(io,Ygr),e(io,vT),e(vT,Kgr),e(vT,LFe),e(LFe,Zgr),e(vT,ehr),e(vT,xFe),e(xFe,ohr),e(io,rhr),M(FT,io,null),b(f,THe,_),b(f,zd,_),e(zd,TT),e(TT,$Fe),M(fx,$Fe,null),e(zd,thr),e(zd,kFe),e(kFe,ahr),b(f,MHe,_),b(f,Qo,_),M(mx,Qo,null),e(Qo,nhr),e(Qo,Qd),e(Qd,shr),e(Qd,qH),e(qH,lhr),e(Qd,ihr),e(Qd,jH),e(jH,dhr),e(Qd,chr),e(Qo,fhr),e(Qo,gx),e(gx,mhr),e(gx,SFe),e(SFe,ghr),e(gx,hhr),e(Qo,phr),e(Qo,At),M(hx,At,null),e(At,uhr),e(At,RFe),e(RFe,_hr),e(At,bhr),e(At,Wd),e(Wd,vhr),e(Wd,PFe),e(PFe,Fhr),e(Wd,Thr),e(Wd,DH),e(DH,Mhr),e(Wd,Ehr),e(At,Chr),M(MT,At,null),e(Qo,whr),e(Qo,co),M(px,co,null),e(co,Ahr),e(co,BFe),e(BFe,yhr),e(co,Lhr),e(co,nn),e(nn,xhr),e(nn,IFe),e(IFe,$hr),e(nn,khr),e(nn,NFe),e(NFe,Shr),e(nn,Rhr),e(nn,qFe),e(qFe,Phr),e(nn,Bhr),e(co,Ihr),e(co,be),e(be,ET),e(ET,jFe),e(jFe,Nhr),e(ET,qhr),e(ET,GH),e(GH,jhr),e(ET,Dhr),e(be,Ghr),e(be,CT),e(CT,DFe),e(DFe,Ohr),e(CT,Vhr),e(CT,OH),e(OH,Xhr),e(CT,zhr),e(be,Qhr),e(be,wT),e(wT,GFe),e(GFe,Whr),e(wT,Uhr),e(wT,VH),e(VH,Hhr),e(wT,Jhr),e(be,Yhr),e(be,AT),e(AT,OFe),e(OFe,Khr),e(AT,Zhr),e(AT,XH),e(XH,epr),e(AT,opr),e(be,rpr),e(be,fl),e(fl,VFe),e(VFe,tpr),e(fl,apr),e(fl,zH),e(zH,npr),e(fl,spr),e(fl,QH),e(QH,lpr),e(fl,ipr),e(be,dpr),e(be,yT),e(yT,XFe),e(XFe,cpr),e(yT,fpr),e(yT,WH),e(WH,mpr),e(yT,gpr),e(be,hpr),e(be,ml),e(ml,zFe),e(zFe,ppr),e(ml,upr),e(ml,UH),e(UH,_pr),e(ml,bpr),e(ml,HH),e(HH,vpr),e(ml,Fpr),e(be,Tpr),e(be,LT),e(LT,QFe),e(QFe,Mpr),e(LT,Epr),e(LT,JH),e(JH,Cpr),e(LT,wpr),e(be,Apr),e(be,yt),e(yt,WFe),e(WFe,ypr),e(yt,Lpr),e(yt,YH),e(YH,xpr),e(yt,$pr),e(yt,KH),e(KH,kpr),e(yt,Spr),e(yt,ZH),e(ZH,Rpr),e(yt,Ppr),e(be,Bpr),e(be,xT),e(xT,UFe),e(UFe,Ipr),e(xT,Npr),e(xT,eJ),e(eJ,qpr),e(xT,jpr),e(be,Dpr),e(be,$T),e($T,HFe),e(HFe,Gpr),e($T,Opr),e($T,oJ),e(oJ,Vpr),e($T,Xpr),e(be,zpr),e(be,kT),e(kT,JFe),e(JFe,Qpr),e(kT,Wpr),e(kT,rJ),e(rJ,Upr),e(kT,Hpr),e(be,Jpr),e(be,ST),e(ST,YFe),e(YFe,Ypr),e(ST,Kpr),e(ST,tJ),e(tJ,Zpr),e(ST,eur),e(be,our),e(be,RT),e(RT,KFe),e(KFe,rur),e(RT,tur),e(RT,aJ),e(aJ,aur),e(RT,nur),e(be,sur),e(be,PT),e(PT,ZFe),e(ZFe,lur),e(PT,iur),e(PT,nJ),e(nJ,dur),e(PT,cur),e(be,fur),e(be,BT),e(BT,e7e),e(e7e,mur),e(BT,gur),e(BT,sJ),e(sJ,hur),e(BT,pur),e(be,uur),e(be,IT),e(IT,o7e),e(o7e,_ur),e(IT,bur),e(IT,lJ),e(lJ,vur),e(IT,Fur),e(co,Tur),e(co,NT),e(NT,Mur),e(NT,r7e),e(r7e,Eur),e(NT,Cur),e(NT,t7e),e(t7e,wur),e(co,Aur),M(qT,co,null),b(f,EHe,_),b(f,Ud,_),e(Ud,jT),e(jT,a7e),M(ux,a7e,null),e(Ud,yur),e(Ud,n7e),e(n7e,Lur),b(f,CHe,_),b(f,Wo,_),M(_x,Wo,null),e(Wo,xur),e(Wo,Hd),e(Hd,$ur),e(Hd,iJ),e(iJ,kur),e(Hd,Sur),e(Hd,dJ),e(dJ,Rur),e(Hd,Pur),e(Wo,Bur),e(Wo,bx),e(bx,Iur),e(bx,s7e),e(s7e,Nur),e(bx,qur),e(Wo,jur),e(Wo,Lt),M(vx,Lt,null),e(Lt,Dur),e(Lt,l7e),e(l7e,Gur),e(Lt,Our),e(Lt,Jd),e(Jd,Vur),e(Jd,i7e),e(i7e,Xur),e(Jd,zur),e(Jd,cJ),e(cJ,Qur),e(Jd,Wur),e(Lt,Uur),M(DT,Lt,null),e(Wo,Hur),e(Wo,fo),M(Fx,fo,null),e(fo,Jur),e(fo,d7e),e(d7e,Yur),e(fo,Kur),e(fo,sn),e(sn,Zur),e(sn,c7e),e(c7e,e_r),e(sn,o_r),e(sn,f7e),e(f7e,r_r),e(sn,t_r),e(sn,m7e),e(m7e,a_r),e(sn,n_r),e(fo,s_r),e(fo,g7e),e(g7e,GT),e(GT,h7e),e(h7e,l_r),e(GT,i_r),e(GT,fJ),e(fJ,d_r),e(GT,c_r),e(fo,f_r),e(fo,OT),e(OT,m_r),e(OT,p7e),e(p7e,g_r),e(OT,h_r),e(OT,u7e),e(u7e,p_r),e(fo,u_r),M(VT,fo,null),b(f,wHe,_),b(f,Yd,_),e(Yd,XT),e(XT,_7e),M(Tx,_7e,null),e(Yd,__r),e(Yd,b7e),e(b7e,b_r),b(f,AHe,_),b(f,Uo,_),M(Mx,Uo,null),e(Uo,v_r),e(Uo,Kd),e(Kd,F_r),e(Kd,mJ),e(mJ,T_r),e(Kd,M_r),e(Kd,gJ),e(gJ,E_r),e(Kd,C_r),e(Uo,w_r),e(Uo,Ex),e(Ex,A_r),e(Ex,v7e),e(v7e,y_r),e(Ex,L_r),e(Uo,x_r),e(Uo,xt),M(Cx,xt,null),e(xt,$_r),e(xt,F7e),e(F7e,k_r),e(xt,S_r),e(xt,Zd),e(Zd,R_r),e(Zd,T7e),e(T7e,P_r),e(Zd,B_r),e(Zd,hJ),e(hJ,I_r),e(Zd,N_r),e(xt,q_r),M(zT,xt,null),e(Uo,j_r),e(Uo,mo),M(wx,mo,null),e(mo,D_r),e(mo,M7e),e(M7e,G_r),e(mo,O_r),e(mo,ln),e(ln,V_r),e(ln,E7e),e(E7e,X_r),e(ln,z_r),e(ln,C7e),e(C7e,Q_r),e(ln,W_r),e(ln,w7e),e(w7e,U_r),e(ln,H_r),e(mo,J_r),e(mo,A7e),e(A7e,QT),e(QT,y7e),e(y7e,Y_r),e(QT,K_r),e(QT,pJ),e(pJ,Z_r),e(QT,e2r),e(mo,o2r),e(mo,WT),e(WT,r2r),e(WT,L7e),e(L7e,t2r),e(WT,a2r),e(WT,x7e),e(x7e,n2r),e(mo,s2r),M(UT,mo,null),b(f,yHe,_),b(f,ec,_),e(ec,HT),e(HT,$7e),M(Ax,$7e,null),e(ec,l2r),e(ec,k7e),e(k7e,i2r),b(f,LHe,_),b(f,Ho,_),M(yx,Ho,null),e(Ho,d2r),e(Ho,oc),e(oc,c2r),e(oc,uJ),e(uJ,f2r),e(oc,m2r),e(oc,_J),e(_J,g2r),e(oc,h2r),e(Ho,p2r),e(Ho,Lx),e(Lx,u2r),e(Lx,S7e),e(S7e,_2r),e(Lx,b2r),e(Ho,v2r),e(Ho,$t),M(xx,$t,null),e($t,F2r),e($t,R7e),e(R7e,T2r),e($t,M2r),e($t,rc),e(rc,E2r),e(rc,P7e),e(P7e,C2r),e(rc,w2r),e(rc,bJ),e(bJ,A2r),e(rc,y2r),e($t,L2r),M(JT,$t,null),e(Ho,x2r),e(Ho,go),M($x,go,null),e(go,$2r),e(go,B7e),e(B7e,k2r),e(go,S2r),e(go,dn),e(dn,R2r),e(dn,I7e),e(I7e,P2r),e(dn,B2r),e(dn,N7e),e(N7e,I2r),e(dn,N2r),e(dn,q7e),e(q7e,q2r),e(dn,j2r),e(go,D2r),e(go,j7e),e(j7e,YT),e(YT,D7e),e(D7e,G2r),e(YT,O2r),e(YT,vJ),e(vJ,V2r),e(YT,X2r),e(go,z2r),e(go,KT),e(KT,Q2r),e(KT,G7e),e(G7e,W2r),e(KT,U2r),e(KT,O7e),e(O7e,H2r),e(go,J2r),M(ZT,go,null),b(f,xHe,_),b(f,tc,_),e(tc,e8),e(e8,V7e),M(kx,V7e,null),e(tc,Y2r),e(tc,X7e),e(X7e,K2r),b(f,$He,_),b(f,Jo,_),M(Sx,Jo,null),e(Jo,Z2r),e(Jo,ac),e(ac,e1r),e(ac,FJ),e(FJ,o1r),e(ac,r1r),e(ac,TJ),e(TJ,t1r),e(ac,a1r),e(Jo,n1r),e(Jo,Rx),e(Rx,s1r),e(Rx,z7e),e(z7e,l1r),e(Rx,i1r),e(Jo,d1r),e(Jo,kt),M(Px,kt,null),e(kt,c1r),e(kt,Q7e),e(Q7e,f1r),e(kt,m1r),e(kt,nc),e(nc,g1r),e(nc,W7e),e(W7e,h1r),e(nc,p1r),e(nc,MJ),e(MJ,u1r),e(nc,_1r),e(kt,b1r),M(o8,kt,null),e(Jo,v1r),e(Jo,ho),M(Bx,ho,null),e(ho,F1r),e(ho,U7e),e(U7e,T1r),e(ho,M1r),e(ho,cn),e(cn,E1r),e(cn,H7e),e(H7e,C1r),e(cn,w1r),e(cn,J7e),e(J7e,A1r),e(cn,y1r),e(cn,Y7e),e(Y7e,L1r),e(cn,x1r),e(ho,$1r),e(ho,Pe),e(Pe,r8),e(r8,K7e),e(K7e,k1r),e(r8,S1r),e(r8,EJ),e(EJ,R1r),e(r8,P1r),e(Pe,B1r),e(Pe,t8),e(t8,Z7e),e(Z7e,I1r),e(t8,N1r),e(t8,CJ),e(CJ,q1r),e(t8,j1r),e(Pe,D1r),e(Pe,a8),e(a8,eTe),e(eTe,G1r),e(a8,O1r),e(a8,wJ),e(wJ,V1r),e(a8,X1r),e(Pe,z1r),e(Pe,n8),e(n8,oTe),e(oTe,Q1r),e(n8,W1r),e(n8,AJ),e(AJ,U1r),e(n8,H1r),e(Pe,J1r),e(Pe,s8),e(s8,rTe),e(rTe,Y1r),e(s8,K1r),e(s8,yJ),e(yJ,Z1r),e(s8,ebr),e(Pe,obr),e(Pe,l8),e(l8,tTe),e(tTe,rbr),e(l8,tbr),e(l8,LJ),e(LJ,abr),e(l8,nbr),e(Pe,sbr),e(Pe,i8),e(i8,aTe),e(aTe,lbr),e(i8,ibr),e(i8,xJ),e(xJ,dbr),e(i8,cbr),e(Pe,fbr),e(Pe,d8),e(d8,nTe),e(nTe,mbr),e(d8,gbr),e(d8,$J),e($J,hbr),e(d8,pbr),e(Pe,ubr),e(Pe,c8),e(c8,sTe),e(sTe,_br),e(c8,bbr),e(c8,kJ),e(kJ,vbr),e(c8,Fbr),e(ho,Tbr),e(ho,f8),e(f8,Mbr),e(f8,lTe),e(lTe,Ebr),e(f8,Cbr),e(f8,iTe),e(iTe,wbr),e(ho,Abr),M(m8,ho,null),b(f,kHe,_),b(f,sc,_),e(sc,g8),e(g8,dTe),M(Ix,dTe,null),e(sc,ybr),e(sc,cTe),e(cTe,Lbr),b(f,SHe,_),b(f,Yo,_),M(Nx,Yo,null),e(Yo,xbr),e(Yo,lc),e(lc,$br),e(lc,SJ),e(SJ,kbr),e(lc,Sbr),e(lc,RJ),e(RJ,Rbr),e(lc,Pbr),e(Yo,Bbr),e(Yo,qx),e(qx,Ibr),e(qx,fTe),e(fTe,Nbr),e(qx,qbr),e(Yo,jbr),e(Yo,St),M(jx,St,null),e(St,Dbr),e(St,mTe),e(mTe,Gbr),e(St,Obr),e(St,ic),e(ic,Vbr),e(ic,gTe),e(gTe,Xbr),e(ic,zbr),e(ic,PJ),e(PJ,Qbr),e(ic,Wbr),e(St,Ubr),M(h8,St,null),e(Yo,Hbr),e(Yo,po),M(Dx,po,null),e(po,Jbr),e(po,hTe),e(hTe,Ybr),e(po,Kbr),e(po,fn),e(fn,Zbr),e(fn,pTe),e(pTe,evr),e(fn,ovr),e(fn,uTe),e(uTe,rvr),e(fn,tvr),e(fn,_Te),e(_Te,avr),e(fn,nvr),e(po,svr),e(po,it),e(it,p8),e(p8,bTe),e(bTe,lvr),e(p8,ivr),e(p8,BJ),e(BJ,dvr),e(p8,cvr),e(it,fvr),e(it,u8),e(u8,vTe),e(vTe,mvr),e(u8,gvr),e(u8,IJ),e(IJ,hvr),e(u8,pvr),e(it,uvr),e(it,_8),e(_8,FTe),e(FTe,_vr),e(_8,bvr),e(_8,NJ),e(NJ,vvr),e(_8,Fvr),e(it,Tvr),e(it,b8),e(b8,TTe),e(TTe,Mvr),e(b8,Evr),e(b8,qJ),e(qJ,Cvr),e(b8,wvr),e(it,Avr),e(it,v8),e(v8,MTe),e(MTe,yvr),e(v8,Lvr),e(v8,jJ),e(jJ,xvr),e(v8,$vr),e(po,kvr),e(po,F8),e(F8,Svr),e(F8,ETe),e(ETe,Rvr),e(F8,Pvr),e(F8,CTe),e(CTe,Bvr),e(po,Ivr),M(T8,po,null),b(f,RHe,_),b(f,dc,_),e(dc,M8),e(M8,wTe),M(Gx,wTe,null),e(dc,Nvr),e(dc,ATe),e(ATe,qvr),b(f,PHe,_),b(f,Ko,_),M(Ox,Ko,null),e(Ko,jvr),e(Ko,cc),e(cc,Dvr),e(cc,DJ),e(DJ,Gvr),e(cc,Ovr),e(cc,GJ),e(GJ,Vvr),e(cc,Xvr),e(Ko,zvr),e(Ko,Vx),e(Vx,Qvr),e(Vx,yTe),e(yTe,Wvr),e(Vx,Uvr),e(Ko,Hvr),e(Ko,Rt),M(Xx,Rt,null),e(Rt,Jvr),e(Rt,LTe),e(LTe,Yvr),e(Rt,Kvr),e(Rt,fc),e(fc,Zvr),e(fc,xTe),e(xTe,e3r),e(fc,o3r),e(fc,OJ),e(OJ,r3r),e(fc,t3r),e(Rt,a3r),M(E8,Rt,null),e(Ko,n3r),e(Ko,uo),M(zx,uo,null),e(uo,s3r),e(uo,$Te),e($Te,l3r),e(uo,i3r),e(uo,mn),e(mn,d3r),e(mn,kTe),e(kTe,c3r),e(mn,f3r),e(mn,STe),e(STe,m3r),e(mn,g3r),e(mn,RTe),e(RTe,h3r),e(mn,p3r),e(uo,u3r),e(uo,ye),e(ye,C8),e(C8,PTe),e(PTe,_3r),e(C8,b3r),e(C8,VJ),e(VJ,v3r),e(C8,F3r),e(ye,T3r),e(ye,w8),e(w8,BTe),e(BTe,M3r),e(w8,E3r),e(w8,XJ),e(XJ,C3r),e(w8,w3r),e(ye,A3r),e(ye,A8),e(A8,ITe),e(ITe,y3r),e(A8,L3r),e(A8,zJ),e(zJ,x3r),e(A8,$3r),e(ye,k3r),e(ye,y8),e(y8,NTe),e(NTe,S3r),e(y8,R3r),e(y8,QJ),e(QJ,P3r),e(y8,B3r),e(ye,I3r),e(ye,L8),e(L8,qTe),e(qTe,N3r),e(L8,q3r),e(L8,WJ),e(WJ,j3r),e(L8,D3r),e(ye,G3r),e(ye,x8),e(x8,jTe),e(jTe,O3r),e(x8,V3r),e(x8,UJ),e(UJ,X3r),e(x8,z3r),e(ye,Q3r),e(ye,$8),e($8,DTe),e(DTe,W3r),e($8,U3r),e($8,HJ),e(HJ,H3r),e($8,J3r),e(ye,Y3r),e(ye,k8),e(k8,GTe),e(GTe,K3r),e(k8,Z3r),e(k8,JJ),e(JJ,eFr),e(k8,oFr),e(ye,rFr),e(ye,S8),e(S8,OTe),e(OTe,tFr),e(S8,aFr),e(S8,YJ),e(YJ,nFr),e(S8,sFr),e(ye,lFr),e(ye,R8),e(R8,VTe),e(VTe,iFr),e(R8,dFr),e(R8,KJ),e(KJ,cFr),e(R8,fFr),e(uo,mFr),e(uo,P8),e(P8,gFr),e(P8,XTe),e(XTe,hFr),e(P8,pFr),e(P8,zTe),e(zTe,uFr),e(uo,_Fr),M(B8,uo,null),b(f,BHe,_),b(f,mc,_),e(mc,I8),e(I8,QTe),M(Qx,QTe,null),e(mc,bFr),e(mc,WTe),e(WTe,vFr),b(f,IHe,_),b(f,Zo,_),M(Wx,Zo,null),e(Zo,FFr),e(Zo,gc),e(gc,TFr),e(gc,ZJ),e(ZJ,MFr),e(gc,EFr),e(gc,eY),e(eY,CFr),e(gc,wFr),e(Zo,AFr),e(Zo,Ux),e(Ux,yFr),e(Ux,UTe),e(UTe,LFr),e(Ux,xFr),e(Zo,$Fr),e(Zo,Pt),M(Hx,Pt,null),e(Pt,kFr),e(Pt,HTe),e(HTe,SFr),e(Pt,RFr),e(Pt,hc),e(hc,PFr),e(hc,JTe),e(JTe,BFr),e(hc,IFr),e(hc,oY),e(oY,NFr),e(hc,qFr),e(Pt,jFr),M(N8,Pt,null),e(Zo,DFr),e(Zo,_o),M(Jx,_o,null),e(_o,GFr),e(_o,YTe),e(YTe,OFr),e(_o,VFr),e(_o,gn),e(gn,XFr),e(gn,KTe),e(KTe,zFr),e(gn,QFr),e(gn,ZTe),e(ZTe,WFr),e(gn,UFr),e(gn,e8e),e(e8e,HFr),e(gn,JFr),e(_o,YFr),e(_o,Yx),e(Yx,q8),e(q8,o8e),e(o8e,KFr),e(q8,ZFr),e(q8,rY),e(rY,e7r),e(q8,o7r),e(Yx,r7r),e(Yx,j8),e(j8,r8e),e(r8e,t7r),e(j8,a7r),e(j8,tY),e(tY,n7r),e(j8,s7r),e(_o,l7r),e(_o,D8),e(D8,i7r),e(D8,t8e),e(t8e,d7r),e(D8,c7r),e(D8,a8e),e(a8e,f7r),e(_o,m7r),M(G8,_o,null),b(f,NHe,_),b(f,pc,_),e(pc,O8),e(O8,n8e),M(Kx,n8e,null),e(pc,g7r),e(pc,s8e),e(s8e,h7r),b(f,qHe,_),b(f,er,_),M(Zx,er,null),e(er,p7r),e(er,uc),e(uc,u7r),e(uc,aY),e(aY,_7r),e(uc,b7r),e(uc,nY),e(nY,v7r),e(uc,F7r),e(er,T7r),e(er,e$),e(e$,M7r),e(e$,l8e),e(l8e,E7r),e(e$,C7r),e(er,w7r),e(er,Bt),M(o$,Bt,null),e(Bt,A7r),e(Bt,i8e),e(i8e,y7r),e(Bt,L7r),e(Bt,_c),e(_c,x7r),e(_c,d8e),e(d8e,$7r),e(_c,k7r),e(_c,sY),e(sY,S7r),e(_c,R7r),e(Bt,P7r),M(V8,Bt,null),e(er,B7r),e(er,bo),M(r$,bo,null),e(bo,I7r),e(bo,c8e),e(c8e,N7r),e(bo,q7r),e(bo,hn),e(hn,j7r),e(hn,f8e),e(f8e,D7r),e(hn,G7r),e(hn,m8e),e(m8e,O7r),e(hn,V7r),e(hn,g8e),e(g8e,X7r),e(hn,z7r),e(bo,Q7r),e(bo,dt),e(dt,X8),e(X8,h8e),e(h8e,W7r),e(X8,U7r),e(X8,lY),e(lY,H7r),e(X8,J7r),e(dt,Y7r),e(dt,z8),e(z8,p8e),e(p8e,K7r),e(z8,Z7r),e(z8,iY),e(iY,eTr),e(z8,oTr),e(dt,rTr),e(dt,Q8),e(Q8,u8e),e(u8e,tTr),e(Q8,aTr),e(Q8,dY),e(dY,nTr),e(Q8,sTr),e(dt,lTr),e(dt,W8),e(W8,_8e),e(_8e,iTr),e(W8,dTr),e(W8,cY),e(cY,cTr),e(W8,fTr),e(dt,mTr),e(dt,U8),e(U8,b8e),e(b8e,gTr),e(U8,hTr),e(U8,fY),e(fY,pTr),e(U8,uTr),e(bo,_Tr),e(bo,H8),e(H8,bTr),e(H8,v8e),e(v8e,vTr),e(H8,FTr),e(H8,F8e),e(F8e,TTr),e(bo,MTr),M(J8,bo,null),b(f,jHe,_),b(f,bc,_),e(bc,Y8),e(Y8,T8e),M(t$,T8e,null),e(bc,ETr),e(bc,M8e),e(M8e,CTr),b(f,DHe,_),b(f,or,_),M(a$,or,null),e(or,wTr),e(or,vc),e(vc,ATr),e(vc,mY),e(mY,yTr),e(vc,LTr),e(vc,gY),e(gY,xTr),e(vc,$Tr),e(or,kTr),e(or,n$),e(n$,STr),e(n$,E8e),e(E8e,RTr),e(n$,PTr),e(or,BTr),e(or,It),M(s$,It,null),e(It,ITr),e(It,C8e),e(C8e,NTr),e(It,qTr),e(It,Fc),e(Fc,jTr),e(Fc,w8e),e(w8e,DTr),e(Fc,GTr),e(Fc,hY),e(hY,OTr),e(Fc,VTr),e(It,XTr),M(K8,It,null),e(or,zTr),e(or,vo),M(l$,vo,null),e(vo,QTr),e(vo,A8e),e(A8e,WTr),e(vo,UTr),e(vo,pn),e(pn,HTr),e(pn,y8e),e(y8e,JTr),e(pn,YTr),e(pn,L8e),e(L8e,KTr),e(pn,ZTr),e(pn,x8e),e(x8e,e8r),e(pn,o8r),e(vo,r8r),e(vo,un),e(un,Z8),e(Z8,$8e),e($8e,t8r),e(Z8,a8r),e(Z8,pY),e(pY,n8r),e(Z8,s8r),e(un,l8r),e(un,eM),e(eM,k8e),e(k8e,i8r),e(eM,d8r),e(eM,uY),e(uY,c8r),e(eM,f8r),e(un,m8r),e(un,oM),e(oM,S8e),e(S8e,g8r),e(oM,h8r),e(oM,_Y),e(_Y,p8r),e(oM,u8r),e(un,_8r),e(un,rM),e(rM,R8e),e(R8e,b8r),e(rM,v8r),e(rM,bY),e(bY,F8r),e(rM,T8r),e(vo,M8r),e(vo,tM),e(tM,E8r),e(tM,P8e),e(P8e,C8r),e(tM,w8r),e(tM,B8e),e(B8e,A8r),e(vo,y8r),M(aM,vo,null),b(f,GHe,_),b(f,Tc,_),e(Tc,nM),e(nM,I8e),M(i$,I8e,null),e(Tc,L8r),e(Tc,N8e),e(N8e,x8r),b(f,OHe,_),b(f,rr,_),M(d$,rr,null),e(rr,$8r),e(rr,Mc),e(Mc,k8r),e(Mc,vY),e(vY,S8r),e(Mc,R8r),e(Mc,FY),e(FY,P8r),e(Mc,B8r),e(rr,I8r),e(rr,c$),e(c$,N8r),e(c$,q8e),e(q8e,q8r),e(c$,j8r),e(rr,D8r),e(rr,Nt),M(f$,Nt,null),e(Nt,G8r),e(Nt,j8e),e(j8e,O8r),e(Nt,V8r),e(Nt,Ec),e(Ec,X8r),e(Ec,D8e),e(D8e,z8r),e(Ec,Q8r),e(Ec,TY),e(TY,W8r),e(Ec,U8r),e(Nt,H8r),M(sM,Nt,null),e(rr,J8r),e(rr,Fo),M(m$,Fo,null),e(Fo,Y8r),e(Fo,G8e),e(G8e,K8r),e(Fo,Z8r),e(Fo,_n),e(_n,eMr),e(_n,O8e),e(O8e,oMr),e(_n,rMr),e(_n,V8e),e(V8e,tMr),e(_n,aMr),e(_n,X8e),e(X8e,nMr),e(_n,sMr),e(Fo,lMr),e(Fo,g$),e(g$,lM),e(lM,z8e),e(z8e,iMr),e(lM,dMr),e(lM,MY),e(MY,cMr),e(lM,fMr),e(g$,mMr),e(g$,iM),e(iM,Q8e),e(Q8e,gMr),e(iM,hMr),e(iM,EY),e(EY,pMr),e(iM,uMr),e(Fo,_Mr),e(Fo,dM),e(dM,bMr),e(dM,W8e),e(W8e,vMr),e(dM,FMr),e(dM,U8e),e(U8e,TMr),e(Fo,MMr),M(cM,Fo,null),b(f,VHe,_),b(f,Cc,_),e(Cc,fM),e(fM,H8e),M(h$,H8e,null),e(Cc,EMr),e(Cc,J8e),e(J8e,CMr),b(f,XHe,_),b(f,tr,_),M(p$,tr,null),e(tr,wMr),e(tr,wc),e(wc,AMr),e(wc,CY),e(CY,yMr),e(wc,LMr),e(wc,wY),e(wY,xMr),e(wc,$Mr),e(tr,kMr),e(tr,u$),e(u$,SMr),e(u$,Y8e),e(Y8e,RMr),e(u$,PMr),e(tr,BMr),e(tr,qt),M(_$,qt,null),e(qt,IMr),e(qt,K8e),e(K8e,NMr),e(qt,qMr),e(qt,Ac),e(Ac,jMr),e(Ac,Z8e),e(Z8e,DMr),e(Ac,GMr),e(Ac,AY),e(AY,OMr),e(Ac,VMr),e(qt,XMr),M(mM,qt,null),e(tr,zMr),e(tr,To),M(b$,To,null),e(To,QMr),e(To,eMe),e(eMe,WMr),e(To,UMr),e(To,bn),e(bn,HMr),e(bn,oMe),e(oMe,JMr),e(bn,YMr),e(bn,rMe),e(rMe,KMr),e(bn,ZMr),e(bn,tMe),e(tMe,eEr),e(bn,oEr),e(To,rEr),e(To,aMe),e(aMe,gM),e(gM,nMe),e(nMe,tEr),e(gM,aEr),e(gM,yY),e(yY,nEr),e(gM,sEr),e(To,lEr),e(To,hM),e(hM,iEr),e(hM,sMe),e(sMe,dEr),e(hM,cEr),e(hM,lMe),e(lMe,fEr),e(To,mEr),M(pM,To,null),b(f,zHe,_),b(f,yc,_),e(yc,uM),e(uM,iMe),M(v$,iMe,null),e(yc,gEr),e(yc,dMe),e(dMe,hEr),b(f,QHe,_),b(f,ar,_),M(F$,ar,null),e(ar,pEr),e(ar,Lc),e(Lc,uEr),e(Lc,LY),e(LY,_Er),e(Lc,bEr),e(Lc,xY),e(xY,vEr),e(Lc,FEr),e(ar,TEr),e(ar,T$),e(T$,MEr),e(T$,cMe),e(cMe,EEr),e(T$,CEr),e(ar,wEr),e(ar,jt),M(M$,jt,null),e(jt,AEr),e(jt,fMe),e(fMe,yEr),e(jt,LEr),e(jt,xc),e(xc,xEr),e(xc,mMe),e(mMe,$Er),e(xc,kEr),e(xc,$Y),e($Y,SEr),e(xc,REr),e(jt,PEr),M(_M,jt,null),e(ar,BEr),e(ar,Mo),M(E$,Mo,null),e(Mo,IEr),e(Mo,gMe),e(gMe,NEr),e(Mo,qEr),e(Mo,vn),e(vn,jEr),e(vn,hMe),e(hMe,DEr),e(vn,GEr),e(vn,pMe),e(pMe,OEr),e(vn,VEr),e(vn,uMe),e(uMe,XEr),e(vn,zEr),e(Mo,QEr),e(Mo,ct),e(ct,bM),e(bM,_Me),e(_Me,WEr),e(bM,UEr),e(bM,kY),e(kY,HEr),e(bM,JEr),e(ct,YEr),e(ct,vM),e(vM,bMe),e(bMe,KEr),e(vM,ZEr),e(vM,SY),e(SY,e4r),e(vM,o4r),e(ct,r4r),e(ct,FM),e(FM,vMe),e(vMe,t4r),e(FM,a4r),e(FM,RY),e(RY,n4r),e(FM,s4r),e(ct,l4r),e(ct,TM),e(TM,FMe),e(FMe,i4r),e(TM,d4r),e(TM,PY),e(PY,c4r),e(TM,f4r),e(ct,m4r),e(ct,MM),e(MM,TMe),e(TMe,g4r),e(MM,h4r),e(MM,BY),e(BY,p4r),e(MM,u4r),e(Mo,_4r),e(Mo,EM),e(EM,b4r),e(EM,MMe),e(MMe,v4r),e(EM,F4r),e(EM,EMe),e(EMe,T4r),e(Mo,M4r),M(CM,Mo,null),b(f,WHe,_),b(f,$c,_),e($c,wM),e(wM,CMe),M(C$,CMe,null),e($c,E4r),e($c,wMe),e(wMe,C4r),b(f,UHe,_),b(f,nr,_),M(w$,nr,null),e(nr,w4r),e(nr,kc),e(kc,A4r),e(kc,IY),e(IY,y4r),e(kc,L4r),e(kc,NY),e(NY,x4r),e(kc,$4r),e(nr,k4r),e(nr,A$),e(A$,S4r),e(A$,AMe),e(AMe,R4r),e(A$,P4r),e(nr,B4r),e(nr,Dt),M(y$,Dt,null),e(Dt,I4r),e(Dt,yMe),e(yMe,N4r),e(Dt,q4r),e(Dt,Sc),e(Sc,j4r),e(Sc,LMe),e(LMe,D4r),e(Sc,G4r),e(Sc,qY),e(qY,O4r),e(Sc,V4r),e(Dt,X4r),M(AM,Dt,null),e(nr,z4r),e(nr,Eo),M(L$,Eo,null),e(Eo,Q4r),e(Eo,xMe),e(xMe,W4r),e(Eo,U4r),e(Eo,Fn),e(Fn,H4r),e(Fn,$Me),e($Me,J4r),e(Fn,Y4r),e(Fn,kMe),e(kMe,K4r),e(Fn,Z4r),e(Fn,SMe),e(SMe,eCr),e(Fn,oCr),e(Eo,rCr),e(Eo,RMe),e(RMe,yM),e(yM,PMe),e(PMe,tCr),e(yM,aCr),e(yM,jY),e(jY,nCr),e(yM,sCr),e(Eo,lCr),e(Eo,LM),e(LM,iCr),e(LM,BMe),e(BMe,dCr),e(LM,cCr),e(LM,IMe),e(IMe,fCr),e(Eo,mCr),M(xM,Eo,null),b(f,HHe,_),b(f,Rc,_),e(Rc,$M),e($M,NMe),M(x$,NMe,null),e(Rc,gCr),e(Rc,qMe),e(qMe,hCr),b(f,JHe,_),b(f,sr,_),M($$,sr,null),e(sr,pCr),e(sr,Pc),e(Pc,uCr),e(Pc,DY),e(DY,_Cr),e(Pc,bCr),e(Pc,GY),e(GY,vCr),e(Pc,FCr),e(sr,TCr),e(sr,k$),e(k$,MCr),e(k$,jMe),e(jMe,ECr),e(k$,CCr),e(sr,wCr),e(sr,Gt),M(S$,Gt,null),e(Gt,ACr),e(Gt,DMe),e(DMe,yCr),e(Gt,LCr),e(Gt,Bc),e(Bc,xCr),e(Bc,GMe),e(GMe,$Cr),e(Bc,kCr),e(Bc,OY),e(OY,SCr),e(Bc,RCr),e(Gt,PCr),M(kM,Gt,null),e(sr,BCr),e(sr,Br),M(R$,Br,null),e(Br,ICr),e(Br,OMe),e(OMe,NCr),e(Br,qCr),e(Br,Tn),e(Tn,jCr),e(Tn,VMe),e(VMe,DCr),e(Tn,GCr),e(Tn,XMe),e(XMe,OCr),e(Tn,VCr),e(Tn,zMe),e(zMe,XCr),e(Tn,zCr),e(Br,QCr),e(Br,q),e(q,SM),e(SM,QMe),e(QMe,WCr),e(SM,UCr),e(SM,VY),e(VY,HCr),e(SM,JCr),e(q,YCr),e(q,RM),e(RM,WMe),e(WMe,KCr),e(RM,ZCr),e(RM,XY),e(XY,e5r),e(RM,o5r),e(q,r5r),e(q,PM),e(PM,UMe),e(UMe,t5r),e(PM,a5r),e(PM,zY),e(zY,n5r),e(PM,s5r),e(q,l5r),e(q,BM),e(BM,HMe),e(HMe,i5r),e(BM,d5r),e(BM,QY),e(QY,c5r),e(BM,f5r),e(q,m5r),e(q,IM),e(IM,JMe),e(JMe,g5r),e(IM,h5r),e(IM,WY),e(WY,p5r),e(IM,u5r),e(q,_5r),e(q,NM),e(NM,YMe),e(YMe,b5r),e(NM,v5r),e(NM,UY),e(UY,F5r),e(NM,T5r),e(q,M5r),e(q,qM),e(qM,KMe),e(KMe,E5r),e(qM,C5r),e(qM,HY),e(HY,w5r),e(qM,A5r),e(q,y5r),e(q,jM),e(jM,ZMe),e(ZMe,L5r),e(jM,x5r),e(jM,JY),e(JY,$5r),e(jM,k5r),e(q,S5r),e(q,DM),e(DM,eEe),e(eEe,R5r),e(DM,P5r),e(DM,YY),e(YY,B5r),e(DM,I5r),e(q,N5r),e(q,GM),e(GM,oEe),e(oEe,q5r),e(GM,j5r),e(GM,KY),e(KY,D5r),e(GM,G5r),e(q,O5r),e(q,OM),e(OM,rEe),e(rEe,V5r),e(OM,X5r),e(OM,ZY),e(ZY,z5r),e(OM,Q5r),e(q,W5r),e(q,VM),e(VM,tEe),e(tEe,U5r),e(VM,H5r),e(VM,eK),e(eK,J5r),e(VM,Y5r),e(q,K5r),e(q,XM),e(XM,aEe),e(aEe,Z5r),e(XM,e0r),e(XM,oK),e(oK,o0r),e(XM,r0r),e(q,t0r),e(q,zM),e(zM,nEe),e(nEe,a0r),e(zM,n0r),e(zM,rK),e(rK,s0r),e(zM,l0r),e(q,i0r),e(q,QM),e(QM,sEe),e(sEe,d0r),e(QM,c0r),e(QM,tK),e(tK,f0r),e(QM,m0r),e(q,g0r),e(q,WM),e(WM,lEe),e(lEe,h0r),e(WM,p0r),e(WM,aK),e(aK,u0r),e(WM,_0r),e(q,b0r),e(q,UM),e(UM,iEe),e(iEe,v0r),e(UM,F0r),e(UM,nK),e(nK,T0r),e(UM,M0r),e(q,E0r),e(q,HM),e(HM,dEe),e(dEe,C0r),e(HM,w0r),e(HM,sK),e(sK,A0r),e(HM,y0r),e(q,L0r),e(q,gl),e(gl,cEe),e(cEe,x0r),e(gl,$0r),e(gl,lK),e(lK,k0r),e(gl,S0r),e(gl,iK),e(iK,R0r),e(gl,P0r),e(q,B0r),e(q,JM),e(JM,fEe),e(fEe,I0r),e(JM,N0r),e(JM,dK),e(dK,q0r),e(JM,j0r),e(q,D0r),e(q,YM),e(YM,mEe),e(mEe,G0r),e(YM,O0r),e(YM,cK),e(cK,V0r),e(YM,X0r),e(q,z0r),e(q,KM),e(KM,gEe),e(gEe,Q0r),e(KM,W0r),e(KM,fK),e(fK,U0r),e(KM,H0r),e(q,J0r),e(q,ZM),e(ZM,hEe),e(hEe,Y0r),e(ZM,K0r),e(ZM,mK),e(mK,Z0r),e(ZM,ewr),e(q,owr),e(q,eE),e(eE,pEe),e(pEe,rwr),e(eE,twr),e(eE,gK),e(gK,awr),e(eE,nwr),e(q,swr),e(q,oE),e(oE,uEe),e(uEe,lwr),e(oE,iwr),e(oE,hK),e(hK,dwr),e(oE,cwr),e(q,fwr),e(q,rE),e(rE,_Ee),e(_Ee,mwr),e(rE,gwr),e(rE,pK),e(pK,hwr),e(rE,pwr),e(q,uwr),e(q,tE),e(tE,bEe),e(bEe,_wr),e(tE,bwr),e(tE,uK),e(uK,vwr),e(tE,Fwr),e(q,Twr),e(q,aE),e(aE,vEe),e(vEe,Mwr),e(aE,Ewr),e(aE,_K),e(_K,Cwr),e(aE,wwr),e(q,Awr),e(q,nE),e(nE,FEe),e(FEe,ywr),e(nE,Lwr),e(nE,bK),e(bK,xwr),e(nE,$wr),e(q,kwr),e(q,sE),e(sE,TEe),e(TEe,Swr),e(sE,Rwr),e(sE,vK),e(vK,Pwr),e(sE,Bwr),e(q,Iwr),e(q,lE),e(lE,MEe),e(MEe,Nwr),e(lE,qwr),e(lE,FK),e(FK,jwr),e(lE,Dwr),e(q,Gwr),e(q,iE),e(iE,EEe),e(EEe,Owr),e(iE,Vwr),e(iE,TK),e(TK,Xwr),e(iE,zwr),e(q,Qwr),e(q,dE),e(dE,CEe),e(CEe,Wwr),e(dE,Uwr),e(dE,MK),e(MK,Hwr),e(dE,Jwr),e(q,Ywr),e(q,cE),e(cE,wEe),e(wEe,Kwr),e(cE,Zwr),e(cE,EK),e(EK,eAr),e(cE,oAr),e(q,rAr),e(q,fE),e(fE,AEe),e(AEe,tAr),e(fE,aAr),e(fE,CK),e(CK,nAr),e(fE,sAr),e(q,lAr),e(q,mE),e(mE,yEe),e(yEe,iAr),e(mE,dAr),e(mE,wK),e(wK,cAr),e(mE,fAr),e(q,mAr),e(q,gE),e(gE,LEe),e(LEe,gAr),e(gE,hAr),e(gE,AK),e(AK,pAr),e(gE,uAr),e(q,_Ar),e(q,hE),e(hE,xEe),e(xEe,bAr),e(hE,vAr),e(hE,yK),e(yK,FAr),e(hE,TAr),e(q,MAr),e(q,pE),e(pE,$Ee),e($Ee,EAr),e(pE,CAr),e(pE,LK),e(LK,wAr),e(pE,AAr),e(q,yAr),e(q,uE),e(uE,kEe),e(kEe,LAr),e(uE,xAr),e(uE,xK),e(xK,$Ar),e(uE,kAr),e(q,SAr),e(q,_E),e(_E,SEe),e(SEe,RAr),e(_E,PAr),e(_E,$K),e($K,BAr),e(_E,IAr),e(q,NAr),e(q,bE),e(bE,REe),e(REe,qAr),e(bE,jAr),e(bE,kK),e(kK,DAr),e(bE,GAr),e(q,OAr),e(q,vE),e(vE,PEe),e(PEe,VAr),e(vE,XAr),e(vE,SK),e(SK,zAr),e(vE,QAr),e(q,WAr),e(q,FE),e(FE,BEe),e(BEe,UAr),e(FE,HAr),e(FE,RK),e(RK,JAr),e(FE,YAr),e(q,KAr),e(q,TE),e(TE,IEe),e(IEe,ZAr),e(TE,e6r),e(TE,PK),e(PK,o6r),e(TE,r6r),e(q,t6r),e(q,ME),e(ME,NEe),e(NEe,a6r),e(ME,n6r),e(ME,BK),e(BK,s6r),e(ME,l6r),e(q,i6r),e(q,EE),e(EE,qEe),e(qEe,d6r),e(EE,c6r),e(EE,IK),e(IK,f6r),e(EE,m6r),e(q,g6r),e(q,CE),e(CE,jEe),e(jEe,h6r),e(CE,p6r),e(CE,NK),e(NK,u6r),e(CE,_6r),e(q,b6r),e(q,wE),e(wE,DEe),e(DEe,v6r),e(wE,F6r),e(wE,qK),e(qK,T6r),e(wE,M6r),e(q,E6r),e(q,AE),e(AE,GEe),e(GEe,C6r),e(AE,w6r),e(AE,jK),e(jK,A6r),e(AE,y6r),e(q,L6r),e(q,yE),e(yE,OEe),e(OEe,x6r),e(yE,$6r),e(yE,DK),e(DK,k6r),e(yE,S6r),e(Br,R6r),M(LE,Br,null),b(f,YHe,_),b(f,Ic,_),e(Ic,xE),e(xE,VEe),M(P$,VEe,null),e(Ic,P6r),e(Ic,XEe),e(XEe,B6r),b(f,KHe,_),b(f,lr,_),M(B$,lr,null),e(lr,I6r),e(lr,Nc),e(Nc,N6r),e(Nc,GK),e(GK,q6r),e(Nc,j6r),e(Nc,OK),e(OK,D6r),e(Nc,G6r),e(lr,O6r),e(lr,I$),e(I$,V6r),e(I$,zEe),e(zEe,X6r),e(I$,z6r),e(lr,Q6r),e(lr,Ot),M(N$,Ot,null),e(Ot,W6r),e(Ot,QEe),e(QEe,U6r),e(Ot,H6r),e(Ot,qc),e(qc,J6r),e(qc,WEe),e(WEe,Y6r),e(qc,K6r),e(qc,VK),e(VK,Z6r),e(qc,eyr),e(Ot,oyr),M($E,Ot,null),e(lr,ryr),e(lr,Ir),M(q$,Ir,null),e(Ir,tyr),e(Ir,UEe),e(UEe,ayr),e(Ir,nyr),e(Ir,Mn),e(Mn,syr),e(Mn,HEe),e(HEe,lyr),e(Mn,iyr),e(Mn,JEe),e(JEe,dyr),e(Mn,cyr),e(Mn,YEe),e(YEe,fyr),e(Mn,myr),e(Ir,gyr),e(Ir,se),e(se,kE),e(kE,KEe),e(KEe,hyr),e(kE,pyr),e(kE,XK),e(XK,uyr),e(kE,_yr),e(se,byr),e(se,SE),e(SE,ZEe),e(ZEe,vyr),e(SE,Fyr),e(SE,zK),e(zK,Tyr),e(SE,Myr),e(se,Eyr),e(se,RE),e(RE,e4e),e(e4e,Cyr),e(RE,wyr),e(RE,QK),e(QK,Ayr),e(RE,yyr),e(se,Lyr),e(se,PE),e(PE,o4e),e(o4e,xyr),e(PE,$yr),e(PE,WK),e(WK,kyr),e(PE,Syr),e(se,Ryr),e(se,BE),e(BE,r4e),e(r4e,Pyr),e(BE,Byr),e(BE,UK),e(UK,Iyr),e(BE,Nyr),e(se,qyr),e(se,IE),e(IE,t4e),e(t4e,jyr),e(IE,Dyr),e(IE,HK),e(HK,Gyr),e(IE,Oyr),e(se,Vyr),e(se,NE),e(NE,a4e),e(a4e,Xyr),e(NE,zyr),e(NE,JK),e(JK,Qyr),e(NE,Wyr),e(se,Uyr),e(se,qE),e(qE,n4e),e(n4e,Hyr),e(qE,Jyr),e(qE,YK),e(YK,Yyr),e(qE,Kyr),e(se,Zyr),e(se,jE),e(jE,s4e),e(s4e,eLr),e(jE,oLr),e(jE,KK),e(KK,rLr),e(jE,tLr),e(se,aLr),e(se,DE),e(DE,l4e),e(l4e,nLr),e(DE,sLr),e(DE,ZK),e(ZK,lLr),e(DE,iLr),e(se,dLr),e(se,GE),e(GE,i4e),e(i4e,cLr),e(GE,fLr),e(GE,eZ),e(eZ,mLr),e(GE,gLr),e(se,hLr),e(se,OE),e(OE,d4e),e(d4e,pLr),e(OE,uLr),e(OE,oZ),e(oZ,_Lr),e(OE,bLr),e(se,vLr),e(se,VE),e(VE,c4e),e(c4e,FLr),e(VE,TLr),e(VE,rZ),e(rZ,MLr),e(VE,ELr),e(se,CLr),e(se,XE),e(XE,f4e),e(f4e,wLr),e(XE,ALr),e(XE,tZ),e(tZ,yLr),e(XE,LLr),e(se,xLr),e(se,zE),e(zE,m4e),e(m4e,$Lr),e(zE,kLr),e(zE,aZ),e(aZ,SLr),e(zE,RLr),e(se,PLr),e(se,QE),e(QE,g4e),e(g4e,BLr),e(QE,ILr),e(QE,nZ),e(nZ,NLr),e(QE,qLr),e(se,jLr),e(se,WE),e(WE,h4e),e(h4e,DLr),e(WE,GLr),e(WE,sZ),e(sZ,OLr),e(WE,VLr),e(se,XLr),e(se,UE),e(UE,p4e),e(p4e,zLr),e(UE,QLr),e(UE,lZ),e(lZ,WLr),e(UE,ULr),e(se,HLr),e(se,HE),e(HE,u4e),e(u4e,JLr),e(HE,YLr),e(HE,iZ),e(iZ,KLr),e(HE,ZLr),e(se,e9r),e(se,JE),e(JE,_4e),e(_4e,o9r),e(JE,r9r),e(JE,dZ),e(dZ,t9r),e(JE,a9r),e(se,n9r),e(se,YE),e(YE,b4e),e(b4e,s9r),e(YE,l9r),e(YE,cZ),e(cZ,i9r),e(YE,d9r),e(se,c9r),e(se,KE),e(KE,v4e),e(v4e,f9r),e(KE,m9r),e(KE,fZ),e(fZ,g9r),e(KE,h9r),e(se,p9r),e(se,ZE),e(ZE,F4e),e(F4e,u9r),e(ZE,_9r),e(ZE,mZ),e(mZ,b9r),e(ZE,v9r),e(Ir,F9r),M(e4,Ir,null),b(f,ZHe,_),b(f,jc,_),e(jc,o4),e(o4,T4e),M(j$,T4e,null),e(jc,T9r),e(jc,M4e),e(M4e,M9r),b(f,eJe,_),b(f,ir,_),M(D$,ir,null),e(ir,E9r),e(ir,Dc),e(Dc,C9r),e(Dc,gZ),e(gZ,w9r),e(Dc,A9r),e(Dc,hZ),e(hZ,y9r),e(Dc,L9r),e(ir,x9r),e(ir,G$),e(G$,$9r),e(G$,E4e),e(E4e,k9r),e(G$,S9r),e(ir,R9r),e(ir,Vt),M(O$,Vt,null),e(Vt,P9r),e(Vt,C4e),e(C4e,B9r),e(Vt,I9r),e(Vt,Gc),e(Gc,N9r),e(Gc,w4e),e(w4e,q9r),e(Gc,j9r),e(Gc,pZ),e(pZ,D9r),e(Gc,G9r),e(Vt,O9r),M(r4,Vt,null),e(ir,V9r),e(ir,Nr),M(V$,Nr,null),e(Nr,X9r),e(Nr,A4e),e(A4e,z9r),e(Nr,Q9r),e(Nr,En),e(En,W9r),e(En,y4e),e(y4e,U9r),e(En,H9r),e(En,L4e),e(L4e,J9r),e(En,Y9r),e(En,x4e),e(x4e,K9r),e(En,Z9r),e(Nr,exr),e(Nr,Me),e(Me,t4),e(t4,$4e),e($4e,oxr),e(t4,rxr),e(t4,uZ),e(uZ,txr),e(t4,axr),e(Me,nxr),e(Me,a4),e(a4,k4e),e(k4e,sxr),e(a4,lxr),e(a4,_Z),e(_Z,ixr),e(a4,dxr),e(Me,cxr),e(Me,n4),e(n4,S4e),e(S4e,fxr),e(n4,mxr),e(n4,bZ),e(bZ,gxr),e(n4,hxr),e(Me,pxr),e(Me,s4),e(s4,R4e),e(R4e,uxr),e(s4,_xr),e(s4,vZ),e(vZ,bxr),e(s4,vxr),e(Me,Fxr),e(Me,l4),e(l4,P4e),e(P4e,Txr),e(l4,Mxr),e(l4,FZ),e(FZ,Exr),e(l4,Cxr),e(Me,wxr),e(Me,i4),e(i4,B4e),e(B4e,Axr),e(i4,yxr),e(i4,TZ),e(TZ,Lxr),e(i4,xxr),e(Me,$xr),e(Me,d4),e(d4,I4e),e(I4e,kxr),e(d4,Sxr),e(d4,MZ),e(MZ,Rxr),e(d4,Pxr),e(Me,Bxr),e(Me,c4),e(c4,N4e),e(N4e,Ixr),e(c4,Nxr),e(c4,EZ),e(EZ,qxr),e(c4,jxr),e(Me,Dxr),e(Me,f4),e(f4,q4e),e(q4e,Gxr),e(f4,Oxr),e(f4,CZ),e(CZ,Vxr),e(f4,Xxr),e(Me,zxr),e(Me,m4),e(m4,j4e),e(j4e,Qxr),e(m4,Wxr),e(m4,wZ),e(wZ,Uxr),e(m4,Hxr),e(Me,Jxr),e(Me,g4),e(g4,D4e),e(D4e,Yxr),e(g4,Kxr),e(g4,AZ),e(AZ,Zxr),e(g4,e$r),e(Me,o$r),e(Me,h4),e(h4,G4e),e(G4e,r$r),e(h4,t$r),e(h4,yZ),e(yZ,a$r),e(h4,n$r),e(Me,s$r),e(Me,p4),e(p4,O4e),e(O4e,l$r),e(p4,i$r),e(p4,LZ),e(LZ,d$r),e(p4,c$r),e(Nr,f$r),M(u4,Nr,null),b(f,oJe,_),b(f,Oc,_),e(Oc,_4),e(_4,V4e),M(X$,V4e,null),e(Oc,m$r),e(Oc,X4e),e(X4e,g$r),b(f,rJe,_),b(f,dr,_),M(z$,dr,null),e(dr,h$r),e(dr,Vc),e(Vc,p$r),e(Vc,xZ),e(xZ,u$r),e(Vc,_$r),e(Vc,$Z),e($Z,b$r),e(Vc,v$r),e(dr,F$r),e(dr,Q$),e(Q$,T$r),e(Q$,z4e),e(z4e,M$r),e(Q$,E$r),e(dr,C$r),e(dr,Xt),M(W$,Xt,null),e(Xt,w$r),e(Xt,Q4e),e(Q4e,A$r),e(Xt,y$r),e(Xt,Xc),e(Xc,L$r),e(Xc,W4e),e(W4e,x$r),e(Xc,$$r),e(Xc,kZ),e(kZ,k$r),e(Xc,S$r),e(Xt,R$r),M(b4,Xt,null),e(dr,P$r),e(dr,qr),M(U$,qr,null),e(qr,B$r),e(qr,U4e),e(U4e,I$r),e(qr,N$r),e(qr,Cn),e(Cn,q$r),e(Cn,H4e),e(H4e,j$r),e(Cn,D$r),e(Cn,J4e),e(J4e,G$r),e(Cn,O$r),e(Cn,Y4e),e(Y4e,V$r),e(Cn,X$r),e(qr,z$r),e(qr,Ve),e(Ve,v4),e(v4,K4e),e(K4e,Q$r),e(v4,W$r),e(v4,SZ),e(SZ,U$r),e(v4,H$r),e(Ve,J$r),e(Ve,F4),e(F4,Z4e),e(Z4e,Y$r),e(F4,K$r),e(F4,RZ),e(RZ,Z$r),e(F4,ekr),e(Ve,okr),e(Ve,hl),e(hl,eCe),e(eCe,rkr),e(hl,tkr),e(hl,PZ),e(PZ,akr),e(hl,nkr),e(hl,BZ),e(BZ,skr),e(hl,lkr),e(Ve,ikr),e(Ve,T4),e(T4,oCe),e(oCe,dkr),e(T4,ckr),e(T4,IZ),e(IZ,fkr),e(T4,mkr),e(Ve,gkr),e(Ve,M4),e(M4,rCe),e(rCe,hkr),e(M4,pkr),e(M4,NZ),e(NZ,ukr),e(M4,_kr),e(Ve,bkr),e(Ve,E4),e(E4,tCe),e(tCe,vkr),e(E4,Fkr),e(E4,qZ),e(qZ,Tkr),e(E4,Mkr),e(Ve,Ekr),e(Ve,C4),e(C4,aCe),e(aCe,Ckr),e(C4,wkr),e(C4,jZ),e(jZ,Akr),e(C4,ykr),e(Ve,Lkr),e(Ve,w4),e(w4,nCe),e(nCe,xkr),e(w4,$kr),e(w4,DZ),e(DZ,kkr),e(w4,Skr),e(qr,Rkr),M(A4,qr,null),b(f,tJe,_),b(f,zc,_),e(zc,y4),e(y4,sCe),M(H$,sCe,null),e(zc,Pkr),e(zc,lCe),e(lCe,Bkr),b(f,aJe,_),b(f,cr,_),M(J$,cr,null),e(cr,Ikr),e(cr,Qc),e(Qc,Nkr),e(Qc,GZ),e(GZ,qkr),e(Qc,jkr),e(Qc,OZ),e(OZ,Dkr),e(Qc,Gkr),e(cr,Okr),e(cr,Y$),e(Y$,Vkr),e(Y$,iCe),e(iCe,Xkr),e(Y$,zkr),e(cr,Qkr),e(cr,zt),M(K$,zt,null),e(zt,Wkr),e(zt,dCe),e(dCe,Ukr),e(zt,Hkr),e(zt,Wc),e(Wc,Jkr),e(Wc,cCe),e(cCe,Ykr),e(Wc,Kkr),e(Wc,VZ),e(VZ,Zkr),e(Wc,eSr),e(zt,oSr),M(L4,zt,null),e(cr,rSr),e(cr,jr),M(Z$,jr,null),e(jr,tSr),e(jr,fCe),e(fCe,aSr),e(jr,nSr),e(jr,wn),e(wn,sSr),e(wn,mCe),e(mCe,lSr),e(wn,iSr),e(wn,gCe),e(gCe,dSr),e(wn,cSr),e(wn,hCe),e(hCe,fSr),e(wn,mSr),e(jr,gSr),e(jr,ek),e(ek,x4),e(x4,pCe),e(pCe,hSr),e(x4,pSr),e(x4,XZ),e(XZ,uSr),e(x4,_Sr),e(ek,bSr),e(ek,$4),e($4,uCe),e(uCe,vSr),e($4,FSr),e($4,zZ),e(zZ,TSr),e($4,MSr),e(jr,ESr),M(k4,jr,null),b(f,nJe,_),b(f,Uc,_),e(Uc,S4),e(S4,_Ce),M(ok,_Ce,null),e(Uc,CSr),e(Uc,bCe),e(bCe,wSr),b(f,sJe,_),b(f,fr,_),M(rk,fr,null),e(fr,ASr),e(fr,Hc),e(Hc,ySr),e(Hc,QZ),e(QZ,LSr),e(Hc,xSr),e(Hc,WZ),e(WZ,$Sr),e(Hc,kSr),e(fr,SSr),e(fr,tk),e(tk,RSr),e(tk,vCe),e(vCe,PSr),e(tk,BSr),e(fr,ISr),e(fr,Qt),M(ak,Qt,null),e(Qt,NSr),e(Qt,FCe),e(FCe,qSr),e(Qt,jSr),e(Qt,Jc),e(Jc,DSr),e(Jc,TCe),e(TCe,GSr),e(Jc,OSr),e(Jc,UZ),e(UZ,VSr),e(Jc,XSr),e(Qt,zSr),M(R4,Qt,null),e(fr,QSr),e(fr,Dr),M(nk,Dr,null),e(Dr,WSr),e(Dr,MCe),e(MCe,USr),e(Dr,HSr),e(Dr,An),e(An,JSr),e(An,ECe),e(ECe,YSr),e(An,KSr),e(An,CCe),e(CCe,ZSr),e(An,eRr),e(An,wCe),e(wCe,oRr),e(An,rRr),e(Dr,tRr),e(Dr,de),e(de,P4),e(P4,ACe),e(ACe,aRr),e(P4,nRr),e(P4,HZ),e(HZ,sRr),e(P4,lRr),e(de,iRr),e(de,B4),e(B4,yCe),e(yCe,dRr),e(B4,cRr),e(B4,JZ),e(JZ,fRr),e(B4,mRr),e(de,gRr),e(de,I4),e(I4,LCe),e(LCe,hRr),e(I4,pRr),e(I4,YZ),e(YZ,uRr),e(I4,_Rr),e(de,bRr),e(de,N4),e(N4,xCe),e(xCe,vRr),e(N4,FRr),e(N4,KZ),e(KZ,TRr),e(N4,MRr),e(de,ERr),e(de,q4),e(q4,$Ce),e($Ce,CRr),e(q4,wRr),e(q4,ZZ),e(ZZ,ARr),e(q4,yRr),e(de,LRr),e(de,j4),e(j4,kCe),e(kCe,xRr),e(j4,$Rr),e(j4,eee),e(eee,kRr),e(j4,SRr),e(de,RRr),e(de,D4),e(D4,SCe),e(SCe,PRr),e(D4,BRr),e(D4,oee),e(oee,IRr),e(D4,NRr),e(de,qRr),e(de,G4),e(G4,RCe),e(RCe,jRr),e(G4,DRr),e(G4,ree),e(ree,GRr),e(G4,ORr),e(de,VRr),e(de,O4),e(O4,PCe),e(PCe,XRr),e(O4,zRr),e(O4,tee),e(tee,QRr),e(O4,WRr),e(de,URr),e(de,V4),e(V4,BCe),e(BCe,HRr),e(V4,JRr),e(V4,aee),e(aee,YRr),e(V4,KRr),e(de,ZRr),e(de,X4),e(X4,ICe),e(ICe,ePr),e(X4,oPr),e(X4,nee),e(nee,rPr),e(X4,tPr),e(de,aPr),e(de,z4),e(z4,NCe),e(NCe,nPr),e(z4,sPr),e(z4,see),e(see,lPr),e(z4,iPr),e(de,dPr),e(de,Q4),e(Q4,qCe),e(qCe,cPr),e(Q4,fPr),e(Q4,lee),e(lee,mPr),e(Q4,gPr),e(de,hPr),e(de,W4),e(W4,jCe),e(jCe,pPr),e(W4,uPr),e(W4,iee),e(iee,_Pr),e(W4,bPr),e(de,vPr),e(de,U4),e(U4,DCe),e(DCe,FPr),e(U4,TPr),e(U4,dee),e(dee,MPr),e(U4,EPr),e(de,CPr),e(de,H4),e(H4,GCe),e(GCe,wPr),e(H4,APr),e(H4,cee),e(cee,yPr),e(H4,LPr),e(de,xPr),e(de,J4),e(J4,OCe),e(OCe,$Pr),e(J4,kPr),e(J4,fee),e(fee,SPr),e(J4,RPr),e(de,PPr),e(de,Y4),e(Y4,VCe),e(VCe,BPr),e(Y4,IPr),e(Y4,mee),e(mee,NPr),e(Y4,qPr),e(de,jPr),e(de,K4),e(K4,XCe),e(XCe,DPr),e(K4,GPr),e(K4,gee),e(gee,OPr),e(K4,VPr),e(de,XPr),e(de,Z4),e(Z4,zCe),e(zCe,zPr),e(Z4,QPr),e(Z4,hee),e(hee,WPr),e(Z4,UPr),e(Dr,HPr),M(eC,Dr,null),b(f,lJe,_),b(f,Yc,_),e(Yc,oC),e(oC,QCe),M(sk,QCe,null),e(Yc,JPr),e(Yc,WCe),e(WCe,YPr),b(f,iJe,_),b(f,mr,_),M(lk,mr,null),e(mr,KPr),e(mr,Kc),e(Kc,ZPr),e(Kc,pee),e(pee,eBr),e(Kc,oBr),e(Kc,uee),e(uee,rBr),e(Kc,tBr),e(mr,aBr),e(mr,ik),e(ik,nBr),e(ik,UCe),e(UCe,sBr),e(ik,lBr),e(mr,iBr),e(mr,Wt),M(dk,Wt,null),e(Wt,dBr),e(Wt,HCe),e(HCe,cBr),e(Wt,fBr),e(Wt,Zc),e(Zc,mBr),e(Zc,JCe),e(JCe,gBr),e(Zc,hBr),e(Zc,_ee),e(_ee,pBr),e(Zc,uBr),e(Wt,_Br),M(rC,Wt,null),e(mr,bBr),e(mr,Gr),M(ck,Gr,null),e(Gr,vBr),e(Gr,YCe),e(YCe,FBr),e(Gr,TBr),e(Gr,yn),e(yn,MBr),e(yn,KCe),e(KCe,EBr),e(yn,CBr),e(yn,ZCe),e(ZCe,wBr),e(yn,ABr),e(yn,e5e),e(e5e,yBr),e(yn,LBr),e(Gr,xBr),e(Gr,Le),e(Le,tC),e(tC,o5e),e(o5e,$Br),e(tC,kBr),e(tC,bee),e(bee,SBr),e(tC,RBr),e(Le,PBr),e(Le,aC),e(aC,r5e),e(r5e,BBr),e(aC,IBr),e(aC,vee),e(vee,NBr),e(aC,qBr),e(Le,jBr),e(Le,nC),e(nC,t5e),e(t5e,DBr),e(nC,GBr),e(nC,Fee),e(Fee,OBr),e(nC,VBr),e(Le,XBr),e(Le,sC),e(sC,a5e),e(a5e,zBr),e(sC,QBr),e(sC,Tee),e(Tee,WBr),e(sC,UBr),e(Le,HBr),e(Le,lC),e(lC,n5e),e(n5e,JBr),e(lC,YBr),e(lC,Mee),e(Mee,KBr),e(lC,ZBr),e(Le,eIr),e(Le,iC),e(iC,s5e),e(s5e,oIr),e(iC,rIr),e(iC,Eee),e(Eee,tIr),e(iC,aIr),e(Le,nIr),e(Le,dC),e(dC,l5e),e(l5e,sIr),e(dC,lIr),e(dC,Cee),e(Cee,iIr),e(dC,dIr),e(Le,cIr),e(Le,cC),e(cC,i5e),e(i5e,fIr),e(cC,mIr),e(cC,wee),e(wee,gIr),e(cC,hIr),e(Le,pIr),e(Le,fC),e(fC,d5e),e(d5e,uIr),e(fC,_Ir),e(fC,Aee),e(Aee,bIr),e(fC,vIr),e(Le,FIr),e(Le,mC),e(mC,c5e),e(c5e,TIr),e(mC,MIr),e(mC,yee),e(yee,EIr),e(mC,CIr),e(Gr,wIr),M(gC,Gr,null),b(f,dJe,_),b(f,ef,_),e(ef,hC),e(hC,f5e),M(fk,f5e,null),e(ef,AIr),e(ef,m5e),e(m5e,yIr),b(f,cJe,_),b(f,gr,_),M(mk,gr,null),e(gr,LIr),e(gr,of),e(of,xIr),e(of,Lee),e(Lee,$Ir),e(of,kIr),e(of,xee),e(xee,SIr),e(of,RIr),e(gr,PIr),e(gr,gk),e(gk,BIr),e(gk,g5e),e(g5e,IIr),e(gk,NIr),e(gr,qIr),e(gr,Ut),M(hk,Ut,null),e(Ut,jIr),e(Ut,h5e),e(h5e,DIr),e(Ut,GIr),e(Ut,rf),e(rf,OIr),e(rf,p5e),e(p5e,VIr),e(rf,XIr),e(rf,$ee),e($ee,zIr),e(rf,QIr),e(Ut,WIr),M(pC,Ut,null),e(gr,UIr),e(gr,Or),M(pk,Or,null),e(Or,HIr),e(Or,u5e),e(u5e,JIr),e(Or,YIr),e(Or,Ln),e(Ln,KIr),e(Ln,_5e),e(_5e,ZIr),e(Ln,eNr),e(Ln,b5e),e(b5e,oNr),e(Ln,rNr),e(Ln,v5e),e(v5e,tNr),e(Ln,aNr),e(Or,nNr),e(Or,te),e(te,uC),e(uC,F5e),e(F5e,sNr),e(uC,lNr),e(uC,kee),e(kee,iNr),e(uC,dNr),e(te,cNr),e(te,_C),e(_C,T5e),e(T5e,fNr),e(_C,mNr),e(_C,See),e(See,gNr),e(_C,hNr),e(te,pNr),e(te,bC),e(bC,M5e),e(M5e,uNr),e(bC,_Nr),e(bC,Ree),e(Ree,bNr),e(bC,vNr),e(te,FNr),e(te,vC),e(vC,E5e),e(E5e,TNr),e(vC,MNr),e(vC,Pee),e(Pee,ENr),e(vC,CNr),e(te,wNr),e(te,FC),e(FC,C5e),e(C5e,ANr),e(FC,yNr),e(FC,Bee),e(Bee,LNr),e(FC,xNr),e(te,$Nr),e(te,TC),e(TC,w5e),e(w5e,kNr),e(TC,SNr),e(TC,Iee),e(Iee,RNr),e(TC,PNr),e(te,BNr),e(te,MC),e(MC,A5e),e(A5e,INr),e(MC,NNr),e(MC,Nee),e(Nee,qNr),e(MC,jNr),e(te,DNr),e(te,EC),e(EC,y5e),e(y5e,GNr),e(EC,ONr),e(EC,qee),e(qee,VNr),e(EC,XNr),e(te,zNr),e(te,CC),e(CC,L5e),e(L5e,QNr),e(CC,WNr),e(CC,jee),e(jee,UNr),e(CC,HNr),e(te,JNr),e(te,wC),e(wC,x5e),e(x5e,YNr),e(wC,KNr),e(wC,Dee),e(Dee,ZNr),e(wC,eqr),e(te,oqr),e(te,AC),e(AC,$5e),e($5e,rqr),e(AC,tqr),e(AC,Gee),e(Gee,aqr),e(AC,nqr),e(te,sqr),e(te,yC),e(yC,k5e),e(k5e,lqr),e(yC,iqr),e(yC,Oee),e(Oee,dqr),e(yC,cqr),e(te,fqr),e(te,LC),e(LC,S5e),e(S5e,mqr),e(LC,gqr),e(LC,Vee),e(Vee,hqr),e(LC,pqr),e(te,uqr),e(te,xC),e(xC,R5e),e(R5e,_qr),e(xC,bqr),e(xC,Xee),e(Xee,vqr),e(xC,Fqr),e(te,Tqr),e(te,$C),e($C,P5e),e(P5e,Mqr),e($C,Eqr),e($C,zee),e(zee,Cqr),e($C,wqr),e(te,Aqr),e(te,kC),e(kC,B5e),e(B5e,yqr),e(kC,Lqr),e(kC,Qee),e(Qee,xqr),e(kC,$qr),e(te,kqr),e(te,SC),e(SC,I5e),e(I5e,Sqr),e(SC,Rqr),e(SC,Wee),e(Wee,Pqr),e(SC,Bqr),e(te,Iqr),e(te,RC),e(RC,N5e),e(N5e,Nqr),e(RC,qqr),e(RC,Uee),e(Uee,jqr),e(RC,Dqr),e(te,Gqr),e(te,PC),e(PC,q5e),e(q5e,Oqr),e(PC,Vqr),e(PC,Hee),e(Hee,Xqr),e(PC,zqr),e(te,Qqr),e(te,BC),e(BC,j5e),e(j5e,Wqr),e(BC,Uqr),e(BC,Jee),e(Jee,Hqr),e(BC,Jqr),e(te,Yqr),e(te,IC),e(IC,D5e),e(D5e,Kqr),e(IC,Zqr),e(IC,Yee),e(Yee,ejr),e(IC,ojr),e(te,rjr),e(te,NC),e(NC,G5e),e(G5e,tjr),e(NC,ajr),e(NC,Kee),e(Kee,njr),e(NC,sjr),e(te,ljr),e(te,qC),e(qC,O5e),e(O5e,ijr),e(qC,djr),e(qC,Zee),e(Zee,cjr),e(qC,fjr),e(te,mjr),e(te,jC),e(jC,V5e),e(V5e,gjr),e(jC,hjr),e(jC,eoe),e(eoe,pjr),e(jC,ujr),e(te,_jr),e(te,DC),e(DC,X5e),e(X5e,bjr),e(DC,vjr),e(DC,ooe),e(ooe,Fjr),e(DC,Tjr),e(te,Mjr),e(te,GC),e(GC,z5e),e(z5e,Ejr),e(GC,Cjr),e(GC,roe),e(roe,wjr),e(GC,Ajr),e(Or,yjr),M(OC,Or,null),b(f,fJe,_),b(f,tf,_),e(tf,VC),e(VC,Q5e),M(uk,Q5e,null),e(tf,Ljr),e(tf,W5e),e(W5e,xjr),b(f,mJe,_),b(f,hr,_),M(_k,hr,null),e(hr,$jr),e(hr,af),e(af,kjr),e(af,toe),e(toe,Sjr),e(af,Rjr),e(af,aoe),e(aoe,Pjr),e(af,Bjr),e(hr,Ijr),e(hr,bk),e(bk,Njr),e(bk,U5e),e(U5e,qjr),e(bk,jjr),e(hr,Djr),e(hr,Ht),M(vk,Ht,null),e(Ht,Gjr),e(Ht,H5e),e(H5e,Ojr),e(Ht,Vjr),e(Ht,nf),e(nf,Xjr),e(nf,J5e),e(J5e,zjr),e(nf,Qjr),e(nf,noe),e(noe,Wjr),e(nf,Ujr),e(Ht,Hjr),M(XC,Ht,null),e(hr,Jjr),e(hr,Vr),M(Fk,Vr,null),e(Vr,Yjr),e(Vr,Y5e),e(Y5e,Kjr),e(Vr,Zjr),e(Vr,xn),e(xn,eDr),e(xn,K5e),e(K5e,oDr),e(xn,rDr),e(xn,Z5e),e(Z5e,tDr),e(xn,aDr),e(xn,e0e),e(e0e,nDr),e(xn,sDr),e(Vr,lDr),e(Vr,ve),e(ve,zC),e(zC,o0e),e(o0e,iDr),e(zC,dDr),e(zC,soe),e(soe,cDr),e(zC,fDr),e(ve,mDr),e(ve,QC),e(QC,r0e),e(r0e,gDr),e(QC,hDr),e(QC,loe),e(loe,pDr),e(QC,uDr),e(ve,_Dr),e(ve,WC),e(WC,t0e),e(t0e,bDr),e(WC,vDr),e(WC,ioe),e(ioe,FDr),e(WC,TDr),e(ve,MDr),e(ve,UC),e(UC,a0e),e(a0e,EDr),e(UC,CDr),e(UC,doe),e(doe,wDr),e(UC,ADr),e(ve,yDr),e(ve,HC),e(HC,n0e),e(n0e,LDr),e(HC,xDr),e(HC,coe),e(coe,$Dr),e(HC,kDr),e(ve,SDr),e(ve,JC),e(JC,s0e),e(s0e,RDr),e(JC,PDr),e(JC,foe),e(foe,BDr),e(JC,IDr),e(ve,NDr),e(ve,YC),e(YC,l0e),e(l0e,qDr),e(YC,jDr),e(YC,moe),e(moe,DDr),e(YC,GDr),e(ve,ODr),e(ve,KC),e(KC,i0e),e(i0e,VDr),e(KC,XDr),e(KC,goe),e(goe,zDr),e(KC,QDr),e(ve,WDr),e(ve,ZC),e(ZC,d0e),e(d0e,UDr),e(ZC,HDr),e(ZC,hoe),e(hoe,JDr),e(ZC,YDr),e(ve,KDr),e(ve,e5),e(e5,c0e),e(c0e,ZDr),e(e5,eGr),e(e5,poe),e(poe,oGr),e(e5,rGr),e(ve,tGr),e(ve,o5),e(o5,f0e),e(f0e,aGr),e(o5,nGr),e(o5,uoe),e(uoe,sGr),e(o5,lGr),e(ve,iGr),e(ve,r5),e(r5,m0e),e(m0e,dGr),e(r5,cGr),e(r5,_oe),e(_oe,fGr),e(r5,mGr),e(ve,gGr),e(ve,t5),e(t5,g0e),e(g0e,hGr),e(t5,pGr),e(t5,boe),e(boe,uGr),e(t5,_Gr),e(ve,bGr),e(ve,a5),e(a5,h0e),e(h0e,vGr),e(a5,FGr),e(a5,voe),e(voe,TGr),e(a5,MGr),e(ve,EGr),e(ve,n5),e(n5,p0e),e(p0e,CGr),e(n5,wGr),e(n5,Foe),e(Foe,AGr),e(n5,yGr),e(ve,LGr),e(ve,s5),e(s5,u0e),e(u0e,xGr),e(s5,$Gr),e(s5,Toe),e(Toe,kGr),e(s5,SGr),e(ve,RGr),e(ve,l5),e(l5,_0e),e(_0e,PGr),e(l5,BGr),e(l5,Moe),e(Moe,IGr),e(l5,NGr),e(Vr,qGr),M(i5,Vr,null),b(f,gJe,_),b(f,sf,_),e(sf,d5),e(d5,b0e),M(Tk,b0e,null),e(sf,jGr),e(sf,v0e),e(v0e,DGr),b(f,hJe,_),b(f,pr,_),M(Mk,pr,null),e(pr,GGr),e(pr,lf),e(lf,OGr),e(lf,Eoe),e(Eoe,VGr),e(lf,XGr),e(lf,Coe),e(Coe,zGr),e(lf,QGr),e(pr,WGr),e(pr,Ek),e(Ek,UGr),e(Ek,F0e),e(F0e,HGr),e(Ek,JGr),e(pr,YGr),e(pr,Jt),M(Ck,Jt,null),e(Jt,KGr),e(Jt,T0e),e(T0e,ZGr),e(Jt,eOr),e(Jt,df),e(df,oOr),e(df,M0e),e(M0e,rOr),e(df,tOr),e(df,woe),e(woe,aOr),e(df,nOr),e(Jt,sOr),M(c5,Jt,null),e(pr,lOr),e(pr,Xr),M(wk,Xr,null),e(Xr,iOr),e(Xr,E0e),e(E0e,dOr),e(Xr,cOr),e(Xr,$n),e($n,fOr),e($n,C0e),e(C0e,mOr),e($n,gOr),e($n,w0e),e(w0e,hOr),e($n,pOr),e($n,A0e),e(A0e,uOr),e($n,_Or),e(Xr,bOr),e(Xr,Ak),e(Ak,f5),e(f5,y0e),e(y0e,vOr),e(f5,FOr),e(f5,Aoe),e(Aoe,TOr),e(f5,MOr),e(Ak,EOr),e(Ak,m5),e(m5,L0e),e(L0e,COr),e(m5,wOr),e(m5,yoe),e(yoe,AOr),e(m5,yOr),e(Xr,LOr),M(g5,Xr,null),b(f,pJe,_),b(f,cf,_),e(cf,h5),e(h5,x0e),M(yk,x0e,null),e(cf,xOr),e(cf,$0e),e($0e,$Or),b(f,uJe,_),b(f,ur,_),M(Lk,ur,null),e(ur,kOr),e(ur,ff),e(ff,SOr),e(ff,Loe),e(Loe,ROr),e(ff,POr),e(ff,xoe),e(xoe,BOr),e(ff,IOr),e(ur,NOr),e(ur,xk),e(xk,qOr),e(xk,k0e),e(k0e,jOr),e(xk,DOr),e(ur,GOr),e(ur,Yt),M($k,Yt,null),e(Yt,OOr),e(Yt,S0e),e(S0e,VOr),e(Yt,XOr),e(Yt,mf),e(mf,zOr),e(mf,R0e),e(R0e,QOr),e(mf,WOr),e(mf,$oe),e($oe,UOr),e(mf,HOr),e(Yt,JOr),M(p5,Yt,null),e(ur,YOr),e(ur,zr),M(kk,zr,null),e(zr,KOr),e(zr,P0e),e(P0e,ZOr),e(zr,eVr),e(zr,kn),e(kn,oVr),e(kn,B0e),e(B0e,rVr),e(kn,tVr),e(kn,I0e),e(I0e,aVr),e(kn,nVr),e(kn,N0e),e(N0e,sVr),e(kn,lVr),e(zr,iVr),e(zr,q0e),e(q0e,u5),e(u5,j0e),e(j0e,dVr),e(u5,cVr),e(u5,koe),e(koe,fVr),e(u5,mVr),e(zr,gVr),M(_5,zr,null),b(f,_Je,_),b(f,gf,_),e(gf,b5),e(b5,D0e),M(Sk,D0e,null),e(gf,hVr),e(gf,G0e),e(G0e,pVr),b(f,bJe,_),b(f,_r,_),M(Rk,_r,null),e(_r,uVr),e(_r,hf),e(hf,_Vr),e(hf,Soe),e(Soe,bVr),e(hf,vVr),e(hf,Roe),e(Roe,FVr),e(hf,TVr),e(_r,MVr),e(_r,Pk),e(Pk,EVr),e(Pk,O0e),e(O0e,CVr),e(Pk,wVr),e(_r,AVr),e(_r,Kt),M(Bk,Kt,null),e(Kt,yVr),e(Kt,V0e),e(V0e,LVr),e(Kt,xVr),e(Kt,pf),e(pf,$Vr),e(pf,X0e),e(X0e,kVr),e(pf,SVr),e(pf,Poe),e(Poe,RVr),e(pf,PVr),e(Kt,BVr),M(v5,Kt,null),e(_r,IVr),e(_r,Qr),M(Ik,Qr,null),e(Qr,NVr),e(Qr,z0e),e(z0e,qVr),e(Qr,jVr),e(Qr,Sn),e(Sn,DVr),e(Sn,Q0e),e(Q0e,GVr),e(Sn,OVr),e(Sn,W0e),e(W0e,VVr),e(Sn,XVr),e(Sn,U0e),e(U0e,zVr),e(Sn,QVr),e(Qr,WVr),e(Qr,ce),e(ce,F5),e(F5,H0e),e(H0e,UVr),e(F5,HVr),e(F5,Boe),e(Boe,JVr),e(F5,YVr),e(ce,KVr),e(ce,T5),e(T5,J0e),e(J0e,ZVr),e(T5,eXr),e(T5,Ioe),e(Ioe,oXr),e(T5,rXr),e(ce,tXr),e(ce,M5),e(M5,Y0e),e(Y0e,aXr),e(M5,nXr),e(M5,Noe),e(Noe,sXr),e(M5,lXr),e(ce,iXr),e(ce,E5),e(E5,K0e),e(K0e,dXr),e(E5,cXr),e(E5,qoe),e(qoe,fXr),e(E5,mXr),e(ce,gXr),e(ce,C5),e(C5,Z0e),e(Z0e,hXr),e(C5,pXr),e(C5,joe),e(joe,uXr),e(C5,_Xr),e(ce,bXr),e(ce,w5),e(w5,ewe),e(ewe,vXr),e(w5,FXr),e(w5,Doe),e(Doe,TXr),e(w5,MXr),e(ce,EXr),e(ce,A5),e(A5,owe),e(owe,CXr),e(A5,wXr),e(A5,Goe),e(Goe,AXr),e(A5,yXr),e(ce,LXr),e(ce,y5),e(y5,rwe),e(rwe,xXr),e(y5,$Xr),e(y5,Ooe),e(Ooe,kXr),e(y5,SXr),e(ce,RXr),e(ce,L5),e(L5,twe),e(twe,PXr),e(L5,BXr),e(L5,Voe),e(Voe,IXr),e(L5,NXr),e(ce,qXr),e(ce,x5),e(x5,awe),e(awe,jXr),e(x5,DXr),e(x5,Xoe),e(Xoe,GXr),e(x5,OXr),e(ce,VXr),e(ce,$5),e($5,nwe),e(nwe,XXr),e($5,zXr),e($5,zoe),e(zoe,QXr),e($5,WXr),e(ce,UXr),e(ce,k5),e(k5,swe),e(swe,HXr),e(k5,JXr),e(k5,Qoe),e(Qoe,YXr),e(k5,KXr),e(ce,ZXr),e(ce,S5),e(S5,lwe),e(lwe,ezr),e(S5,ozr),e(S5,Woe),e(Woe,rzr),e(S5,tzr),e(ce,azr),e(ce,R5),e(R5,iwe),e(iwe,nzr),e(R5,szr),e(R5,Uoe),e(Uoe,lzr),e(R5,izr),e(ce,dzr),e(ce,P5),e(P5,dwe),e(dwe,czr),e(P5,fzr),e(P5,Hoe),e(Hoe,mzr),e(P5,gzr),e(ce,hzr),e(ce,B5),e(B5,cwe),e(cwe,pzr),e(B5,uzr),e(B5,Joe),e(Joe,_zr),e(B5,bzr),e(ce,vzr),e(ce,I5),e(I5,fwe),e(fwe,Fzr),e(I5,Tzr),e(I5,Yoe),e(Yoe,Mzr),e(I5,Ezr),e(ce,Czr),e(ce,N5),e(N5,mwe),e(mwe,wzr),e(N5,Azr),e(N5,Koe),e(Koe,yzr),e(N5,Lzr),e(ce,xzr),e(ce,q5),e(q5,gwe),e(gwe,$zr),e(q5,kzr),e(q5,Zoe),e(Zoe,Szr),e(q5,Rzr),e(ce,Pzr),e(ce,j5),e(j5,hwe),e(hwe,Bzr),e(j5,Izr),e(j5,ere),e(ere,Nzr),e(j5,qzr),e(Qr,jzr),M(D5,Qr,null),b(f,vJe,_),b(f,uf,_),e(uf,G5),e(G5,pwe),M(Nk,pwe,null),e(uf,Dzr),e(uf,uwe),e(uwe,Gzr),b(f,FJe,_),b(f,br,_),M(qk,br,null),e(br,Ozr),e(br,_f),e(_f,Vzr),e(_f,ore),e(ore,Xzr),e(_f,zzr),e(_f,rre),e(rre,Qzr),e(_f,Wzr),e(br,Uzr),e(br,jk),e(jk,Hzr),e(jk,_we),e(_we,Jzr),e(jk,Yzr),e(br,Kzr),e(br,Zt),M(Dk,Zt,null),e(Zt,Zzr),e(Zt,bwe),e(bwe,eQr),e(Zt,oQr),e(Zt,bf),e(bf,rQr),e(bf,vwe),e(vwe,tQr),e(bf,aQr),e(bf,tre),e(tre,nQr),e(bf,sQr),e(Zt,lQr),M(O5,Zt,null),e(br,iQr),e(br,Wr),M(Gk,Wr,null),e(Wr,dQr),e(Wr,Fwe),e(Fwe,cQr),e(Wr,fQr),e(Wr,Rn),e(Rn,mQr),e(Rn,Twe),e(Twe,gQr),e(Rn,hQr),e(Rn,Mwe),e(Mwe,pQr),e(Rn,uQr),e(Rn,Ewe),e(Ewe,_Qr),e(Rn,bQr),e(Wr,vQr),e(Wr,fe),e(fe,V5),e(V5,Cwe),e(Cwe,FQr),e(V5,TQr),e(V5,are),e(are,MQr),e(V5,EQr),e(fe,CQr),e(fe,X5),e(X5,wwe),e(wwe,wQr),e(X5,AQr),e(X5,nre),e(nre,yQr),e(X5,LQr),e(fe,xQr),e(fe,z5),e(z5,Awe),e(Awe,$Qr),e(z5,kQr),e(z5,sre),e(sre,SQr),e(z5,RQr),e(fe,PQr),e(fe,Q5),e(Q5,ywe),e(ywe,BQr),e(Q5,IQr),e(Q5,lre),e(lre,NQr),e(Q5,qQr),e(fe,jQr),e(fe,W5),e(W5,Lwe),e(Lwe,DQr),e(W5,GQr),e(W5,ire),e(ire,OQr),e(W5,VQr),e(fe,XQr),e(fe,U5),e(U5,xwe),e(xwe,zQr),e(U5,QQr),e(U5,dre),e(dre,WQr),e(U5,UQr),e(fe,HQr),e(fe,H5),e(H5,$we),e($we,JQr),e(H5,YQr),e(H5,cre),e(cre,KQr),e(H5,ZQr),e(fe,eWr),e(fe,J5),e(J5,kwe),e(kwe,oWr),e(J5,rWr),e(J5,fre),e(fre,tWr),e(J5,aWr),e(fe,nWr),e(fe,Y5),e(Y5,Swe),e(Swe,sWr),e(Y5,lWr),e(Y5,mre),e(mre,iWr),e(Y5,dWr),e(fe,cWr),e(fe,K5),e(K5,Rwe),e(Rwe,fWr),e(K5,mWr),e(K5,gre),e(gre,gWr),e(K5,hWr),e(fe,pWr),e(fe,Z5),e(Z5,Pwe),e(Pwe,uWr),e(Z5,_Wr),e(Z5,hre),e(hre,bWr),e(Z5,vWr),e(fe,FWr),e(fe,e0),e(e0,Bwe),e(Bwe,TWr),e(e0,MWr),e(e0,pre),e(pre,EWr),e(e0,CWr),e(fe,wWr),e(fe,o0),e(o0,Iwe),e(Iwe,AWr),e(o0,yWr),e(o0,ure),e(ure,LWr),e(o0,xWr),e(fe,$Wr),e(fe,r0),e(r0,Nwe),e(Nwe,kWr),e(r0,SWr),e(r0,_re),e(_re,RWr),e(r0,PWr),e(fe,BWr),e(fe,t0),e(t0,qwe),e(qwe,IWr),e(t0,NWr),e(t0,bre),e(bre,qWr),e(t0,jWr),e(fe,DWr),e(fe,a0),e(a0,jwe),e(jwe,GWr),e(a0,OWr),e(a0,vre),e(vre,VWr),e(a0,XWr),e(fe,zWr),e(fe,n0),e(n0,Dwe),e(Dwe,QWr),e(n0,WWr),e(n0,Fre),e(Fre,UWr),e(n0,HWr),e(fe,JWr),e(fe,s0),e(s0,Gwe),e(Gwe,YWr),e(s0,KWr),e(s0,Tre),e(Tre,ZWr),e(s0,eUr),e(fe,oUr),e(fe,l0),e(l0,Owe),e(Owe,rUr),e(l0,tUr),e(l0,Mre),e(Mre,aUr),e(l0,nUr),e(fe,sUr),e(fe,i0),e(i0,Vwe),e(Vwe,lUr),e(i0,iUr),e(i0,Ere),e(Ere,dUr),e(i0,cUr),e(Wr,fUr),M(d0,Wr,null),b(f,TJe,_),b(f,vf,_),e(vf,c0),e(c0,Xwe),M(Ok,Xwe,null),e(vf,mUr),e(vf,zwe),e(zwe,gUr),b(f,MJe,_),b(f,vr,_),M(Vk,vr,null),e(vr,hUr),e(vr,Ff),e(Ff,pUr),e(Ff,Cre),e(Cre,uUr),e(Ff,_Ur),e(Ff,wre),e(wre,bUr),e(Ff,vUr),e(vr,FUr),e(vr,Xk),e(Xk,TUr),e(Xk,Qwe),e(Qwe,MUr),e(Xk,EUr),e(vr,CUr),e(vr,ea),M(zk,ea,null),e(ea,wUr),e(ea,Wwe),e(Wwe,AUr),e(ea,yUr),e(ea,Tf),e(Tf,LUr),e(Tf,Uwe),e(Uwe,xUr),e(Tf,$Ur),e(Tf,Are),e(Are,kUr),e(Tf,SUr),e(ea,RUr),M(f0,ea,null),e(vr,PUr),e(vr,Ur),M(Qk,Ur,null),e(Ur,BUr),e(Ur,Hwe),e(Hwe,IUr),e(Ur,NUr),e(Ur,Pn),e(Pn,qUr),e(Pn,Jwe),e(Jwe,jUr),e(Pn,DUr),e(Pn,Ywe),e(Ywe,GUr),e(Pn,OUr),e(Pn,Kwe),e(Kwe,VUr),e(Pn,XUr),e(Ur,zUr),e(Ur,Zwe),e(Zwe,m0),e(m0,eAe),e(eAe,QUr),e(m0,WUr),e(m0,yre),e(yre,UUr),e(m0,HUr),e(Ur,JUr),M(g0,Ur,null),b(f,EJe,_),b(f,Mf,_),e(Mf,h0),e(h0,oAe),M(Wk,oAe,null),e(Mf,YUr),e(Mf,rAe),e(rAe,KUr),b(f,CJe,_),b(f,Fr,_),M(Uk,Fr,null),e(Fr,ZUr),e(Fr,Ef),e(Ef,eHr),e(Ef,Lre),e(Lre,oHr),e(Ef,rHr),e(Ef,xre),e(xre,tHr),e(Ef,aHr),e(Fr,nHr),e(Fr,Hk),e(Hk,sHr),e(Hk,tAe),e(tAe,lHr),e(Hk,iHr),e(Fr,dHr),e(Fr,oa),M(Jk,oa,null),e(oa,cHr),e(oa,aAe),e(aAe,fHr),e(oa,mHr),e(oa,Cf),e(Cf,gHr),e(Cf,nAe),e(nAe,hHr),e(Cf,pHr),e(Cf,$re),e($re,uHr),e(Cf,_Hr),e(oa,bHr),M(p0,oa,null),e(Fr,vHr),e(Fr,Hr),M(Yk,Hr,null),e(Hr,FHr),e(Hr,sAe),e(sAe,THr),e(Hr,MHr),e(Hr,Bn),e(Bn,EHr),e(Bn,lAe),e(lAe,CHr),e(Bn,wHr),e(Bn,iAe),e(iAe,AHr),e(Bn,yHr),e(Bn,dAe),e(dAe,LHr),e(Bn,xHr),e(Hr,$Hr),e(Hr,cAe),e(cAe,u0),e(u0,fAe),e(fAe,kHr),e(u0,SHr),e(u0,kre),e(kre,RHr),e(u0,PHr),e(Hr,BHr),M(_0,Hr,null),b(f,wJe,_),b(f,wf,_),e(wf,b0),e(b0,mAe),M(Kk,mAe,null),e(wf,IHr),e(wf,gAe),e(gAe,NHr),b(f,AJe,_),b(f,Tr,_),M(Zk,Tr,null),e(Tr,qHr),e(Tr,Af),e(Af,jHr),e(Af,Sre),e(Sre,DHr),e(Af,GHr),e(Af,Rre),e(Rre,OHr),e(Af,VHr),e(Tr,XHr),e(Tr,eS),e(eS,zHr),e(eS,hAe),e(hAe,QHr),e(eS,WHr),e(Tr,UHr),e(Tr,ra),M(oS,ra,null),e(ra,HHr),e(ra,pAe),e(pAe,JHr),e(ra,YHr),e(ra,yf),e(yf,KHr),e(yf,uAe),e(uAe,ZHr),e(yf,eJr),e(yf,Pre),e(Pre,oJr),e(yf,rJr),e(ra,tJr),M(v0,ra,null),e(Tr,aJr),e(Tr,Jr),M(rS,Jr,null),e(Jr,nJr),e(Jr,_Ae),e(_Ae,sJr),e(Jr,lJr),e(Jr,In),e(In,iJr),e(In,bAe),e(bAe,dJr),e(In,cJr),e(In,vAe),e(vAe,fJr),e(In,mJr),e(In,FAe),e(FAe,gJr),e(In,hJr),e(Jr,pJr),e(Jr,re),e(re,F0),e(F0,TAe),e(TAe,uJr),e(F0,_Jr),e(F0,Bre),e(Bre,bJr),e(F0,vJr),e(re,FJr),e(re,T0),e(T0,MAe),e(MAe,TJr),e(T0,MJr),e(T0,Ire),e(Ire,EJr),e(T0,CJr),e(re,wJr),e(re,M0),e(M0,EAe),e(EAe,AJr),e(M0,yJr),e(M0,Nre),e(Nre,LJr),e(M0,xJr),e(re,$Jr),e(re,E0),e(E0,CAe),e(CAe,kJr),e(E0,SJr),e(E0,qre),e(qre,RJr),e(E0,PJr),e(re,BJr),e(re,C0),e(C0,wAe),e(wAe,IJr),e(C0,NJr),e(C0,jre),e(jre,qJr),e(C0,jJr),e(re,DJr),e(re,w0),e(w0,AAe),e(AAe,GJr),e(w0,OJr),e(w0,Dre),e(Dre,VJr),e(w0,XJr),e(re,zJr),e(re,A0),e(A0,yAe),e(yAe,QJr),e(A0,WJr),e(A0,Gre),e(Gre,UJr),e(A0,HJr),e(re,JJr),e(re,y0),e(y0,LAe),e(LAe,YJr),e(y0,KJr),e(y0,Ore),e(Ore,ZJr),e(y0,eYr),e(re,oYr),e(re,L0),e(L0,xAe),e(xAe,rYr),e(L0,tYr),e(L0,Vre),e(Vre,aYr),e(L0,nYr),e(re,sYr),e(re,x0),e(x0,$Ae),e($Ae,lYr),e(x0,iYr),e(x0,Xre),e(Xre,dYr),e(x0,cYr),e(re,fYr),e(re,$0),e($0,kAe),e(kAe,mYr),e($0,gYr),e($0,zre),e(zre,hYr),e($0,pYr),e(re,uYr),e(re,k0),e(k0,SAe),e(SAe,_Yr),e(k0,bYr),e(k0,Qre),e(Qre,vYr),e(k0,FYr),e(re,TYr),e(re,S0),e(S0,RAe),e(RAe,MYr),e(S0,EYr),e(S0,Wre),e(Wre,CYr),e(S0,wYr),e(re,AYr),e(re,R0),e(R0,PAe),e(PAe,yYr),e(R0,LYr),e(R0,Ure),e(Ure,xYr),e(R0,$Yr),e(re,kYr),e(re,P0),e(P0,BAe),e(BAe,SYr),e(P0,RYr),e(P0,Hre),e(Hre,PYr),e(P0,BYr),e(re,IYr),e(re,B0),e(B0,IAe),e(IAe,NYr),e(B0,qYr),e(B0,Jre),e(Jre,jYr),e(B0,DYr),e(re,GYr),e(re,I0),e(I0,NAe),e(NAe,OYr),e(I0,VYr),e(I0,Yre),e(Yre,XYr),e(I0,zYr),e(re,QYr),e(re,N0),e(N0,qAe),e(qAe,WYr),e(N0,UYr),e(N0,Kre),e(Kre,HYr),e(N0,JYr),e(re,YYr),e(re,q0),e(q0,jAe),e(jAe,KYr),e(q0,ZYr),e(q0,Zre),e(Zre,eKr),e(q0,oKr),e(re,rKr),e(re,j0),e(j0,DAe),e(DAe,tKr),e(j0,aKr),e(j0,ete),e(ete,nKr),e(j0,sKr),e(re,lKr),e(re,D0),e(D0,GAe),e(GAe,iKr),e(D0,dKr),e(D0,ote),e(ote,cKr),e(D0,fKr),e(re,mKr),e(re,G0),e(G0,OAe),e(OAe,gKr),e(G0,hKr),e(G0,rte),e(rte,pKr),e(G0,uKr),e(re,_Kr),e(re,O0),e(O0,VAe),e(VAe,bKr),e(O0,vKr),e(O0,tte),e(tte,FKr),e(O0,TKr),e(re,MKr),e(re,V0),e(V0,XAe),e(XAe,EKr),e(V0,CKr),e(V0,ate),e(ate,wKr),e(V0,AKr),e(re,yKr),e(re,X0),e(X0,zAe),e(zAe,LKr),e(X0,xKr),e(X0,nte),e(nte,$Kr),e(X0,kKr),e(re,SKr),e(re,z0),e(z0,QAe),e(QAe,RKr),e(z0,PKr),e(z0,ste),e(ste,BKr),e(z0,IKr),e(re,NKr),e(re,Q0),e(Q0,WAe),e(WAe,qKr),e(Q0,jKr),e(Q0,lte),e(lte,DKr),e(Q0,GKr),e(Jr,OKr),M(W0,Jr,null),b(f,yJe,_),b(f,Lf,_),e(Lf,U0),e(U0,UAe),M(tS,UAe,null),e(Lf,VKr),e(Lf,HAe),e(HAe,XKr),b(f,LJe,_),b(f,Mr,_),M(aS,Mr,null),e(Mr,zKr),e(Mr,xf),e(xf,QKr),e(xf,ite),e(ite,WKr),e(xf,UKr),e(xf,dte),e(dte,HKr),e(xf,JKr),e(Mr,YKr),e(Mr,nS),e(nS,KKr),e(nS,JAe),e(JAe,ZKr),e(nS,eZr),e(Mr,oZr),e(Mr,ta),M(sS,ta,null),e(ta,rZr),e(ta,YAe),e(YAe,tZr),e(ta,aZr),e(ta,$f),e($f,nZr),e($f,KAe),e(KAe,sZr),e($f,lZr),e($f,cte),e(cte,iZr),e($f,dZr),e(ta,cZr),M(H0,ta,null),e(Mr,fZr),e(Mr,Yr),M(lS,Yr,null),e(Yr,mZr),e(Yr,ZAe),e(ZAe,gZr),e(Yr,hZr),e(Yr,Nn),e(Nn,pZr),e(Nn,e6e),e(e6e,uZr),e(Nn,_Zr),e(Nn,o6e),e(o6e,bZr),e(Nn,vZr),e(Nn,r6e),e(r6e,FZr),e(Nn,TZr),e(Yr,MZr),e(Yr,xe),e(xe,J0),e(J0,t6e),e(t6e,EZr),e(J0,CZr),e(J0,fte),e(fte,wZr),e(J0,AZr),e(xe,yZr),e(xe,Y0),e(Y0,a6e),e(a6e,LZr),e(Y0,xZr),e(Y0,mte),e(mte,$Zr),e(Y0,kZr),e(xe,SZr),e(xe,K0),e(K0,n6e),e(n6e,RZr),e(K0,PZr),e(K0,gte),e(gte,BZr),e(K0,IZr),e(xe,NZr),e(xe,Z0),e(Z0,s6e),e(s6e,qZr),e(Z0,jZr),e(Z0,hte),e(hte,DZr),e(Z0,GZr),e(xe,OZr),e(xe,ew),e(ew,l6e),e(l6e,VZr),e(ew,XZr),e(ew,pte),e(pte,zZr),e(ew,QZr),e(xe,WZr),e(xe,ow),e(ow,i6e),e(i6e,UZr),e(ow,HZr),e(ow,ute),e(ute,JZr),e(ow,YZr),e(xe,KZr),e(xe,rw),e(rw,d6e),e(d6e,ZZr),e(rw,eet),e(rw,_te),e(_te,oet),e(rw,ret),e(xe,tet),e(xe,tw),e(tw,c6e),e(c6e,aet),e(tw,net),e(tw,bte),e(bte,set),e(tw,iet),e(xe,det),e(xe,aw),e(aw,f6e),e(f6e,cet),e(aw,fet),e(aw,vte),e(vte,met),e(aw,get),e(xe,het),e(xe,nw),e(nw,m6e),e(m6e,pet),e(nw,uet),e(nw,Fte),e(Fte,_et),e(nw,bet),e(Yr,vet),M(sw,Yr,null),b(f,xJe,_),b(f,kf,_),e(kf,lw),e(lw,g6e),M(iS,g6e,null),e(kf,Fet),e(kf,h6e),e(h6e,Tet),b(f,$Je,_),b(f,Er,_),M(dS,Er,null),e(Er,Met),e(Er,Sf),e(Sf,Eet),e(Sf,Tte),e(Tte,Cet),e(Sf,wet),e(Sf,Mte),e(Mte,Aet),e(Sf,yet),e(Er,Let),e(Er,cS),e(cS,xet),e(cS,p6e),e(p6e,$et),e(cS,ket),e(Er,Set),e(Er,aa),M(fS,aa,null),e(aa,Ret),e(aa,u6e),e(u6e,Pet),e(aa,Bet),e(aa,Rf),e(Rf,Iet),e(Rf,_6e),e(_6e,Net),e(Rf,qet),e(Rf,Ete),e(Ete,jet),e(Rf,Det),e(aa,Get),M(iw,aa,null),e(Er,Oet),e(Er,Kr),M(mS,Kr,null),e(Kr,Vet),e(Kr,b6e),e(b6e,Xet),e(Kr,zet),e(Kr,qn),e(qn,Qet),e(qn,v6e),e(v6e,Wet),e(qn,Uet),e(qn,F6e),e(F6e,Het),e(qn,Jet),e(qn,T6e),e(T6e,Yet),e(qn,Ket),e(Kr,Zet),e(Kr,Ee),e(Ee,dw),e(dw,M6e),e(M6e,eot),e(dw,oot),e(dw,Cte),e(Cte,rot),e(dw,tot),e(Ee,aot),e(Ee,cw),e(cw,E6e),e(E6e,not),e(cw,sot),e(cw,wte),e(wte,lot),e(cw,iot),e(Ee,dot),e(Ee,fw),e(fw,C6e),e(C6e,cot),e(fw,fot),e(fw,Ate),e(Ate,mot),e(fw,got),e(Ee,hot),e(Ee,mw),e(mw,w6e),e(w6e,pot),e(mw,uot),e(mw,yte),e(yte,_ot),e(mw,bot),e(Ee,vot),e(Ee,gw),e(gw,A6e),e(A6e,Fot),e(gw,Tot),e(gw,Lte),e(Lte,Mot),e(gw,Eot),e(Ee,Cot),e(Ee,hw),e(hw,y6e),e(y6e,wot),e(hw,Aot),e(hw,xte),e(xte,yot),e(hw,Lot),e(Ee,xot),e(Ee,pw),e(pw,L6e),e(L6e,$ot),e(pw,kot),e(pw,$te),e($te,Sot),e(pw,Rot),e(Ee,Pot),e(Ee,uw),e(uw,x6e),e(x6e,Bot),e(uw,Iot),e(uw,kte),e(kte,Not),e(uw,qot),e(Ee,jot),e(Ee,_w),e(_w,$6e),e($6e,Dot),e(_w,Got),e(_w,Ste),e(Ste,Oot),e(_w,Vot),e(Ee,Xot),e(Ee,bw),e(bw,k6e),e(k6e,zot),e(bw,Qot),e(bw,Rte),e(Rte,Wot),e(bw,Uot),e(Ee,Hot),e(Ee,vw),e(vw,S6e),e(S6e,Jot),e(vw,Yot),e(vw,Pte),e(Pte,Kot),e(vw,Zot),e(Ee,ert),e(Ee,Fw),e(Fw,R6e),e(R6e,ort),e(Fw,rrt),e(Fw,Bte),e(Bte,trt),e(Fw,art),e(Ee,nrt),e(Ee,Tw),e(Tw,P6e),e(P6e,srt),e(Tw,lrt),e(Tw,Ite),e(Ite,irt),e(Tw,drt),e(Kr,crt),M(Mw,Kr,null),b(f,kJe,_),b(f,Pf,_),e(Pf,Ew),e(Ew,B6e),M(gS,B6e,null),e(Pf,frt),e(Pf,I6e),e(I6e,mrt),b(f,SJe,_),b(f,Cr,_),M(hS,Cr,null),e(Cr,grt),e(Cr,Bf),e(Bf,hrt),e(Bf,Nte),e(Nte,prt),e(Bf,urt),e(Bf,qte),e(qte,_rt),e(Bf,brt),e(Cr,vrt),e(Cr,pS),e(pS,Frt),e(pS,N6e),e(N6e,Trt),e(pS,Mrt),e(Cr,Ert),e(Cr,na),M(uS,na,null),e(na,Crt),e(na,q6e),e(q6e,wrt),e(na,Art),e(na,If),e(If,yrt),e(If,j6e),e(j6e,Lrt),e(If,xrt),e(If,jte),e(jte,$rt),e(If,krt),e(na,Srt),M(Cw,na,null),e(Cr,Rrt),e(Cr,Zr),M(_S,Zr,null),e(Zr,Prt),e(Zr,D6e),e(D6e,Brt),e(Zr,Irt),e(Zr,jn),e(jn,Nrt),e(jn,G6e),e(G6e,qrt),e(jn,jrt),e(jn,O6e),e(O6e,Drt),e(jn,Grt),e(jn,V6e),e(V6e,Ort),e(jn,Vrt),e(Zr,Xrt),e(Zr,$e),e($e,ww),e(ww,X6e),e(X6e,zrt),e(ww,Qrt),e(ww,Dte),e(Dte,Wrt),e(ww,Urt),e($e,Hrt),e($e,Aw),e(Aw,z6e),e(z6e,Jrt),e(Aw,Yrt),e(Aw,Gte),e(Gte,Krt),e(Aw,Zrt),e($e,ett),e($e,yw),e(yw,Q6e),e(Q6e,ott),e(yw,rtt),e(yw,Ote),e(Ote,ttt),e(yw,att),e($e,ntt),e($e,Lw),e(Lw,W6e),e(W6e,stt),e(Lw,ltt),e(Lw,Vte),e(Vte,itt),e(Lw,dtt),e($e,ctt),e($e,xw),e(xw,U6e),e(U6e,ftt),e(xw,mtt),e(xw,Xte),e(Xte,gtt),e(xw,htt),e($e,ptt),e($e,$w),e($w,H6e),e(H6e,utt),e($w,_tt),e($w,zte),e(zte,btt),e($w,vtt),e($e,Ftt),e($e,kw),e(kw,J6e),e(J6e,Ttt),e(kw,Mtt),e(kw,Qte),e(Qte,Ett),e(kw,Ctt),e($e,wtt),e($e,Sw),e(Sw,Y6e),e(Y6e,Att),e(Sw,ytt),e(Sw,Wte),e(Wte,Ltt),e(Sw,xtt),e($e,$tt),e($e,Rw),e(Rw,K6e),e(K6e,ktt),e(Rw,Stt),e(Rw,Ute),e(Ute,Rtt),e(Rw,Ptt),e($e,Btt),e($e,Pw),e(Pw,Z6e),e(Z6e,Itt),e(Pw,Ntt),e(Pw,Hte),e(Hte,qtt),e(Pw,jtt),e(Zr,Dtt),M(Bw,Zr,null),b(f,RJe,_),b(f,Nf,_),e(Nf,Iw),e(Iw,eye),M(bS,eye,null),e(Nf,Gtt),e(Nf,oye),e(oye,Ott),b(f,PJe,_),b(f,wr,_),M(vS,wr,null),e(wr,Vtt),e(wr,qf),e(qf,Xtt),e(qf,Jte),e(Jte,ztt),e(qf,Qtt),e(qf,Yte),e(Yte,Wtt),e(qf,Utt),e(wr,Htt),e(wr,FS),e(FS,Jtt),e(FS,rye),e(rye,Ytt),e(FS,Ktt),e(wr,Ztt),e(wr,sa),M(TS,sa,null),e(sa,eat),e(sa,tye),e(tye,oat),e(sa,rat),e(sa,jf),e(jf,tat),e(jf,aye),e(aye,aat),e(jf,nat),e(jf,Kte),e(Kte,sat),e(jf,lat),e(sa,iat),M(Nw,sa,null),e(wr,dat),e(wr,et),M(MS,et,null),e(et,cat),e(et,nye),e(nye,fat),e(et,mat),e(et,Dn),e(Dn,gat),e(Dn,sye),e(sye,hat),e(Dn,pat),e(Dn,lye),e(lye,uat),e(Dn,_at),e(Dn,iye),e(iye,bat),e(Dn,vat),e(et,Fat),e(et,ke),e(ke,qw),e(qw,dye),e(dye,Tat),e(qw,Mat),e(qw,Zte),e(Zte,Eat),e(qw,Cat),e(ke,wat),e(ke,jw),e(jw,cye),e(cye,Aat),e(jw,yat),e(jw,eae),e(eae,Lat),e(jw,xat),e(ke,$at),e(ke,Dw),e(Dw,fye),e(fye,kat),e(Dw,Sat),e(Dw,oae),e(oae,Rat),e(Dw,Pat),e(ke,Bat),e(ke,Gw),e(Gw,mye),e(mye,Iat),e(Gw,Nat),e(Gw,rae),e(rae,qat),e(Gw,jat),e(ke,Dat),e(ke,Ow),e(Ow,gye),e(gye,Gat),e(Ow,Oat),e(Ow,tae),e(tae,Vat),e(Ow,Xat),e(ke,zat),e(ke,Vw),e(Vw,hye),e(hye,Qat),e(Vw,Wat),e(Vw,aae),e(aae,Uat),e(Vw,Hat),e(ke,Jat),e(ke,Xw),e(Xw,pye),e(pye,Yat),e(Xw,Kat),e(Xw,nae),e(nae,Zat),e(Xw,ent),e(ke,ont),e(ke,zw),e(zw,uye),e(uye,rnt),e(zw,tnt),e(zw,sae),e(sae,ant),e(zw,nnt),e(ke,snt),e(ke,Qw),e(Qw,_ye),e(_ye,lnt),e(Qw,int),e(Qw,lae),e(lae,dnt),e(Qw,cnt),e(ke,fnt),e(ke,Ww),e(Ww,bye),e(bye,mnt),e(Ww,gnt),e(Ww,iae),e(iae,hnt),e(Ww,pnt),e(et,unt),M(Uw,et,null),b(f,BJe,_),b(f,Df,_),e(Df,Hw),e(Hw,vye),M(ES,vye,null),e(Df,_nt),e(Df,Fye),e(Fye,bnt),b(f,IJe,_),b(f,Ar,_),M(CS,Ar,null),e(Ar,vnt),e(Ar,Gf),e(Gf,Fnt),e(Gf,dae),e(dae,Tnt),e(Gf,Mnt),e(Gf,cae),e(cae,Ent),e(Gf,Cnt),e(Ar,wnt),e(Ar,wS),e(wS,Ant),e(wS,Tye),e(Tye,ynt),e(wS,Lnt),e(Ar,xnt),e(Ar,la),M(AS,la,null),e(la,$nt),e(la,Mye),e(Mye,knt),e(la,Snt),e(la,Of),e(Of,Rnt),e(Of,Eye),e(Eye,Pnt),e(Of,Bnt),e(Of,fae),e(fae,Int),e(Of,Nnt),e(la,qnt),M(Jw,la,null),e(Ar,jnt),e(Ar,ot),M(yS,ot,null),e(ot,Dnt),e(ot,Cye),e(Cye,Gnt),e(ot,Ont),e(ot,Gn),e(Gn,Vnt),e(Gn,wye),e(wye,Xnt),e(Gn,znt),e(Gn,Aye),e(Aye,Qnt),e(Gn,Wnt),e(Gn,yye),e(yye,Unt),e(Gn,Hnt),e(ot,Jnt),e(ot,Se),e(Se,Yw),e(Yw,Lye),e(Lye,Ynt),e(Yw,Knt),e(Yw,mae),e(mae,Znt),e(Yw,est),e(Se,ost),e(Se,Kw),e(Kw,xye),e(xye,rst),e(Kw,tst),e(Kw,gae),e(gae,ast),e(Kw,nst),e(Se,sst),e(Se,Zw),e(Zw,$ye),e($ye,lst),e(Zw,ist),e(Zw,hae),e(hae,dst),e(Zw,cst),e(Se,fst),e(Se,eA),e(eA,kye),e(kye,mst),e(eA,gst),e(eA,pae),e(pae,hst),e(eA,pst),e(Se,ust),e(Se,oA),e(oA,Sye),e(Sye,_st),e(oA,bst),e(oA,uae),e(uae,vst),e(oA,Fst),e(Se,Tst),e(Se,rA),e(rA,Rye),e(Rye,Mst),e(rA,Est),e(rA,_ae),e(_ae,Cst),e(rA,wst),e(Se,Ast),e(Se,tA),e(tA,Pye),e(Pye,yst),e(tA,Lst),e(tA,bae),e(bae,xst),e(tA,$st),e(Se,kst),e(Se,aA),e(aA,Bye),e(Bye,Sst),e(aA,Rst),e(aA,vae),e(vae,Pst),e(aA,Bst),e(Se,Ist),e(Se,nA),e(nA,Iye),e(Iye,Nst),e(nA,qst),e(nA,Fae),e(Fae,jst),e(nA,Dst),e(Se,Gst),e(Se,sA),e(sA,Nye),e(Nye,Ost),e(sA,Vst),e(sA,Tae),e(Tae,Xst),e(sA,zst),e(ot,Qst),M(lA,ot,null),b(f,NJe,_),b(f,Vf,_),e(Vf,iA),e(iA,qye),M(LS,qye,null),e(Vf,Wst),e(Vf,jye),e(jye,Ust),b(f,qJe,_),b(f,yr,_),M(xS,yr,null),e(yr,Hst),e(yr,Xf),e(Xf,Jst),e(Xf,Mae),e(Mae,Yst),e(Xf,Kst),e(Xf,Eae),e(Eae,Zst),e(Xf,elt),e(yr,olt),e(yr,$S),e($S,rlt),e($S,Dye),e(Dye,tlt),e($S,alt),e(yr,nlt),e(yr,ia),M(kS,ia,null),e(ia,slt),e(ia,Gye),e(Gye,llt),e(ia,ilt),e(ia,zf),e(zf,dlt),e(zf,Oye),e(Oye,clt),e(zf,flt),e(zf,Cae),e(Cae,mlt),e(zf,glt),e(ia,hlt),M(dA,ia,null),e(yr,plt),e(yr,rt),M(SS,rt,null),e(rt,ult),e(rt,Vye),e(Vye,_lt),e(rt,blt),e(rt,On),e(On,vlt),e(On,Xye),e(Xye,Flt),e(On,Tlt),e(On,zye),e(zye,Mlt),e(On,Elt),e(On,Qye),e(Qye,Clt),e(On,wlt),e(rt,Alt),e(rt,Re),e(Re,cA),e(cA,Wye),e(Wye,ylt),e(cA,Llt),e(cA,wae),e(wae,xlt),e(cA,$lt),e(Re,klt),e(Re,fA),e(fA,Uye),e(Uye,Slt),e(fA,Rlt),e(fA,Aae),e(Aae,Plt),e(fA,Blt),e(Re,Ilt),e(Re,mA),e(mA,Hye),e(Hye,Nlt),e(mA,qlt),e(mA,yae),e(yae,jlt),e(mA,Dlt),e(Re,Glt),e(Re,gA),e(gA,Jye),e(Jye,Olt),e(gA,Vlt),e(gA,Lae),e(Lae,Xlt),e(gA,zlt),e(Re,Qlt),e(Re,hA),e(hA,Yye),e(Yye,Wlt),e(hA,Ult),e(hA,xae),e(xae,Hlt),e(hA,Jlt),e(Re,Ylt),e(Re,pA),e(pA,Kye),e(Kye,Klt),e(pA,Zlt),e(pA,$ae),e($ae,eit),e(pA,oit),e(Re,rit),e(Re,uA),e(uA,Zye),e(Zye,tit),e(uA,ait),e(uA,kae),e(kae,nit),e(uA,sit),e(Re,lit),e(Re,_A),e(_A,eLe),e(eLe,iit),e(_A,dit),e(_A,Sae),e(Sae,cit),e(_A,fit),e(Re,mit),e(Re,bA),e(bA,oLe),e(oLe,git),e(bA,hit),e(bA,Rae),e(Rae,pit),e(bA,uit),e(Re,_it),e(Re,vA),e(vA,rLe),e(rLe,bit),e(vA,vit),e(vA,Pae),e(Pae,Fit),e(vA,Tit),e(rt,Mit),M(FA,rt,null),b(f,jJe,_),b(f,Qf,_),e(Qf,TA),e(TA,tLe),M(RS,tLe,null),e(Qf,Eit),e(Qf,aLe),e(aLe,Cit),b(f,DJe,_),b(f,Lr,_),M(PS,Lr,null),e(Lr,wit),e(Lr,Wf),e(Wf,Ait),e(Wf,Bae),e(Bae,yit),e(Wf,Lit),e(Wf,Iae),e(Iae,xit),e(Wf,$it),e(Lr,kit),e(Lr,BS),e(BS,Sit),e(BS,nLe),e(nLe,Rit),e(BS,Pit),e(Lr,Bit),e(Lr,da),M(IS,da,null),e(da,Iit),e(da,sLe),e(sLe,Nit),e(da,qit),e(da,Uf),e(Uf,jit),e(Uf,lLe),e(lLe,Dit),e(Uf,Git),e(Uf,Nae),e(Nae,Oit),e(Uf,Vit),e(da,Xit),M(MA,da,null),e(Lr,zit),e(Lr,tt),M(NS,tt,null),e(tt,Qit),e(tt,iLe),e(iLe,Wit),e(tt,Uit),e(tt,Vn),e(Vn,Hit),e(Vn,dLe),e(dLe,Jit),e(Vn,Yit),e(Vn,cLe),e(cLe,Kit),e(Vn,Zit),e(Vn,fLe),e(fLe,edt),e(Vn,odt),e(tt,rdt),e(tt,Xe),e(Xe,EA),e(EA,mLe),e(mLe,tdt),e(EA,adt),e(EA,qae),e(qae,ndt),e(EA,sdt),e(Xe,ldt),e(Xe,CA),e(CA,gLe),e(gLe,idt),e(CA,ddt),e(CA,jae),e(jae,cdt),e(CA,fdt),e(Xe,mdt),e(Xe,wA),e(wA,hLe),e(hLe,gdt),e(wA,hdt),e(wA,Dae),e(Dae,pdt),e(wA,udt),e(Xe,_dt),e(Xe,AA),e(AA,pLe),e(pLe,bdt),e(AA,vdt),e(AA,Gae),e(Gae,Fdt),e(AA,Tdt),e(Xe,Mdt),e(Xe,yA),e(yA,uLe),e(uLe,Edt),e(yA,Cdt),e(yA,Oae),e(Oae,wdt),e(yA,Adt),e(Xe,ydt),e(Xe,LA),e(LA,_Le),e(_Le,Ldt),e(LA,xdt),e(LA,Vae),e(Vae,$dt),e(LA,kdt),e(Xe,Sdt),e(Xe,xA),e(xA,bLe),e(bLe,Rdt),e(xA,Pdt),e(xA,Xae),e(Xae,Bdt),e(xA,Idt),e(Xe,Ndt),e(Xe,$A),e($A,vLe),e(vLe,qdt),e($A,jdt),e($A,zae),e(zae,Ddt),e($A,Gdt),e(tt,Odt),M(kA,tt,null),b(f,GJe,_),b(f,Hf,_),e(Hf,SA),e(SA,FLe),M(qS,FLe,null),e(Hf,Vdt),e(Hf,TLe),e(TLe,Xdt),b(f,OJe,_),b(f,xr,_),M(jS,xr,null),e(xr,zdt),e(xr,Jf),e(Jf,Qdt),e(Jf,Qae),e(Qae,Wdt),e(Jf,Udt),e(Jf,Wae),e(Wae,Hdt),e(Jf,Jdt),e(xr,Ydt),e(xr,DS),e(DS,Kdt),e(DS,MLe),e(MLe,Zdt),e(DS,ect),e(xr,oct),e(xr,ca),M(GS,ca,null),e(ca,rct),e(ca,ELe),e(ELe,tct),e(ca,act),e(ca,Yf),e(Yf,nct),e(Yf,CLe),e(CLe,sct),e(Yf,lct),e(Yf,Uae),e(Uae,ict),e(Yf,dct),e(ca,cct),M(RA,ca,null),e(xr,fct),e(xr,at),M(OS,at,null),e(at,mct),e(at,wLe),e(wLe,gct),e(at,hct),e(at,Xn),e(Xn,pct),e(Xn,ALe),e(ALe,uct),e(Xn,_ct),e(Xn,yLe),e(yLe,bct),e(Xn,vct),e(Xn,LLe),e(LLe,Fct),e(Xn,Tct),e(at,Mct),e(at,ze),e(ze,PA),e(PA,xLe),e(xLe,Ect),e(PA,Cct),e(PA,Hae),e(Hae,wct),e(PA,Act),e(ze,yct),e(ze,BA),e(BA,$Le),e($Le,Lct),e(BA,xct),e(BA,Jae),e(Jae,$ct),e(BA,kct),e(ze,Sct),e(ze,IA),e(IA,kLe),e(kLe,Rct),e(IA,Pct),e(IA,Yae),e(Yae,Bct),e(IA,Ict),e(ze,Nct),e(ze,NA),e(NA,SLe),e(SLe,qct),e(NA,jct),e(NA,Kae),e(Kae,Dct),e(NA,Gct),e(ze,Oct),e(ze,qA),e(qA,RLe),e(RLe,Vct),e(qA,Xct),e(qA,Zae),e(Zae,zct),e(qA,Qct),e(ze,Wct),e(ze,jA),e(jA,PLe),e(PLe,Uct),e(jA,Hct),e(jA,ene),e(ene,Jct),e(jA,Yct),e(ze,Kct),e(ze,DA),e(DA,BLe),e(BLe,Zct),e(DA,eft),e(DA,one),e(one,oft),e(DA,rft),e(ze,tft),e(ze,GA),e(GA,ILe),e(ILe,aft),e(GA,nft),e(GA,rne),e(rne,sft),e(GA,lft),e(at,ift),M(OA,at,null),b(f,VJe,_),b(f,Kf,_),e(Kf,VA),e(VA,NLe),M(VS,NLe,null),e(Kf,dft),e(Kf,qLe),e(qLe,cft),b(f,XJe,_),b(f,$r,_),M(XS,$r,null),e($r,fft),e($r,Zf),e(Zf,mft),e(Zf,tne),e(tne,gft),e(Zf,hft),e(Zf,ane),e(ane,pft),e(Zf,uft),e($r,_ft),e($r,zS),e(zS,bft),e(zS,jLe),e(jLe,vft),e(zS,Fft),e($r,Tft),e($r,fa),M(QS,fa,null),e(fa,Mft),e(fa,DLe),e(DLe,Eft),e(fa,Cft),e(fa,em),e(em,wft),e(em,GLe),e(GLe,Aft),e(em,yft),e(em,nne),e(nne,Lft),e(em,xft),e(fa,$ft),M(XA,fa,null),e($r,kft),e($r,nt),M(WS,nt,null),e(nt,Sft),e(nt,OLe),e(OLe,Rft),e(nt,Pft),e(nt,zn),e(zn,Bft),e(zn,VLe),e(VLe,Ift),e(zn,Nft),e(zn,XLe),e(XLe,qft),e(zn,jft),e(zn,zLe),e(zLe,Dft),e(zn,Gft),e(nt,Oft),e(nt,QLe),e(QLe,zA),e(zA,WLe),e(WLe,Vft),e(zA,Xft),e(zA,sne),e(sne,zft),e(zA,Qft),e(nt,Wft),M(QA,nt,null),b(f,zJe,_),b(f,om,_),e(om,WA),e(WA,ULe),M(US,ULe,null),e(om,Uft),e(om,HLe),e(HLe,Hft),b(f,QJe,_),b(f,kr,_),M(HS,kr,null),e(kr,Jft),e(kr,rm),e(rm,Yft),e(rm,lne),e(lne,Kft),e(rm,Zft),e(rm,ine),e(ine,emt),e(rm,omt),e(kr,rmt),e(kr,JS),e(JS,tmt),e(JS,JLe),e(JLe,amt),e(JS,nmt),e(kr,smt),e(kr,ma),M(YS,ma,null),e(ma,lmt),e(ma,YLe),e(YLe,imt),e(ma,dmt),e(ma,tm),e(tm,cmt),e(tm,KLe),e(KLe,fmt),e(tm,mmt),e(tm,dne),e(dne,gmt),e(tm,hmt),e(ma,pmt),M(UA,ma,null),e(kr,umt),e(kr,st),M(KS,st,null),e(st,_mt),e(st,ZLe),e(ZLe,bmt),e(st,vmt),e(st,Qn),e(Qn,Fmt),e(Qn,e9e),e(e9e,Tmt),e(Qn,Mmt),e(Qn,o9e),e(o9e,Emt),e(Qn,Cmt),e(Qn,r9e),e(r9e,wmt),e(Qn,Amt),e(st,ymt),e(st,ZS),e(ZS,HA),e(HA,t9e),e(t9e,Lmt),e(HA,xmt),e(HA,cne),e(cne,$mt),e(HA,kmt),e(ZS,Smt),e(ZS,JA),e(JA,a9e),e(a9e,Rmt),e(JA,Pmt),e(JA,fne),e(fne,Bmt),e(JA,Imt),e(st,Nmt),M(YA,st,null),b(f,WJe,_),b(f,am,_),e(am,KA),e(KA,n9e),M(eR,n9e,null),e(am,qmt),e(am,s9e),e(s9e,jmt),b(f,UJe,_),b(f,Sr,_),M(oR,Sr,null),e(Sr,Dmt),e(Sr,nm),e(nm,Gmt),e(nm,mne),e(mne,Omt),e(nm,Vmt),e(nm,gne),e(gne,Xmt),e(nm,zmt),e(Sr,Qmt),e(Sr,rR),e(rR,Wmt),e(rR,l9e),e(l9e,Umt),e(rR,Hmt),e(Sr,Jmt),e(Sr,ga),M(tR,ga,null),e(ga,Ymt),e(ga,i9e),e(i9e,Kmt),e(ga,Zmt),e(ga,sm),e(sm,egt),e(sm,d9e),e(d9e,ogt),e(sm,rgt),e(sm,hne),e(hne,tgt),e(sm,agt),e(ga,ngt),M(ZA,ga,null),e(Sr,sgt),e(Sr,lt),M(aR,lt,null),e(lt,lgt),e(lt,c9e),e(c9e,igt),e(lt,dgt),e(lt,Wn),e(Wn,cgt),e(Wn,f9e),e(f9e,fgt),e(Wn,mgt),e(Wn,m9e),e(m9e,ggt),e(Wn,hgt),e(Wn,g9e),e(g9e,pgt),e(Wn,ugt),e(lt,_gt),e(lt,h9e),e(h9e,e6),e(e6,p9e),e(p9e,bgt),e(e6,vgt),e(e6,pne),e(pne,Fgt),e(e6,Tgt),e(lt,Mgt),M(o6,lt,null),HJe=!0},p(f,[_]){const nR={};_&2&&(nR.$$scope={dirty:_,ctx:f}),pm.$set(nR);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:f}),kh.$set(u9e);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:f}),gp.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:f}),eu.$set(b9e);const sR={};_&2&&(sR.$$scope={dirty:_,ctx:f}),ou.$set(sR);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:f}),Cu.$set(v9e);const Un={};_&2&&(Un.$$scope={dirty:_,ctx:f}),wu.$set(Un);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:f}),Lu.$set(F9e);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:f}),N2.$set(T9e);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:f}),j2.$set(M9e);const lR={};_&2&&(lR.$$scope={dirty:_,ctx:f}),P1.$set(lR);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:f}),I1.$set(E9e);const iR={};_&2&&(iR.$$scope={dirty:_,ctx:f}),Cb.$set(iR);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:f}),Ab.$set(C9e);const dR={};_&2&&(dR.$$scope={dirty:_,ctx:f}),mv.$set(dR);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:f}),hv.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:f}),Bv.$set(A9e);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:f}),Nv.$set(y9e);const lm={};_&2&&(lm.$$scope={dirty:_,ctx:f}),N3.$set(lm);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:f}),j3.$set(L9e);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:f}),bF.$set(x9e);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:f}),FF.$set($9e);const cR={};_&2&&(cR.$$scope={dirty:_,ctx:f}),LF.$set(cR);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:f}),$F.$set(k9e);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:f}),p7.$set(S9e);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:f}),_7.$set(R9e);const ft={};_&2&&(ft.$$scope={dirty:_,ctx:f}),iT.$set(ft);const fR={};_&2&&(fR.$$scope={dirty:_,ctx:f}),cT.$set(fR);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:f}),gT.$set(P9e);const mR={};_&2&&(mR.$$scope={dirty:_,ctx:f}),pT.$set(mR);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:f}),FT.$set(B9e);const mt={};_&2&&(mt.$$scope={dirty:_,ctx:f}),MT.$set(mt);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:f}),qT.$set(I9e);const im={};_&2&&(im.$$scope={dirty:_,ctx:f}),DT.$set(im);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:f}),VT.$set(N9e);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:f}),zT.$set(q9e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),UT.$set(y);const r6={};_&2&&(r6.$$scope={dirty:_,ctx:f}),JT.$set(r6);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:f}),ZT.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:f}),o8.$set(D9e);const t6={};_&2&&(t6.$$scope={dirty:_,ctx:f}),m8.$set(t6);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:f}),h8.$set(G9e);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:f}),T8.$set(O9e);const a6={};_&2&&(a6.$$scope={dirty:_,ctx:f}),E8.$set(a6);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:f}),B8.$set(V9e);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:f}),N8.$set(X9e);const n6={};_&2&&(n6.$$scope={dirty:_,ctx:f}),G8.$set(n6);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:f}),V8.$set(z9e);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:f}),J8.$set(Q9e);const s6={};_&2&&(s6.$$scope={dirty:_,ctx:f}),K8.$set(s6);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:f}),aM.$set(W9e);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),sM.$set(U9e);const l6={};_&2&&(l6.$$scope={dirty:_,ctx:f}),cM.$set(l6);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:f}),mM.$set(H9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),pM.$set(J9e);const i6={};_&2&&(i6.$$scope={dirty:_,ctx:f}),_M.$set(i6);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),CM.$set(Y9e);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),AM.$set(K9e);const d6={};_&2&&(d6.$$scope={dirty:_,ctx:f}),xM.$set(d6);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),kM.$set(Z9e);const exe={};_&2&&(exe.$$scope={dirty:_,ctx:f}),LE.$set(exe);const c6={};_&2&&(c6.$$scope={dirty:_,ctx:f}),$E.$set(c6);const oxe={};_&2&&(oxe.$$scope={dirty:_,ctx:f}),e4.$set(oxe);const rxe={};_&2&&(rxe.$$scope={dirty:_,ctx:f}),r4.$set(rxe);const f6={};_&2&&(f6.$$scope={dirty:_,ctx:f}),u4.$set(f6);const txe={};_&2&&(txe.$$scope={dirty:_,ctx:f}),b4.$set(txe);const axe={};_&2&&(axe.$$scope={dirty:_,ctx:f}),A4.$set(axe);const m6={};_&2&&(m6.$$scope={dirty:_,ctx:f}),L4.$set(m6);const nxe={};_&2&&(nxe.$$scope={dirty:_,ctx:f}),k4.$set(nxe);const sxe={};_&2&&(sxe.$$scope={dirty:_,ctx:f}),R4.$set(sxe);const g6={};_&2&&(g6.$$scope={dirty:_,ctx:f}),eC.$set(g6);const lxe={};_&2&&(lxe.$$scope={dirty:_,ctx:f}),rC.$set(lxe);const ixe={};_&2&&(ixe.$$scope={dirty:_,ctx:f}),gC.$set(ixe);const h6={};_&2&&(h6.$$scope={dirty:_,ctx:f}),pC.$set(h6);const dxe={};_&2&&(dxe.$$scope={dirty:_,ctx:f}),OC.$set(dxe);const cxe={};_&2&&(cxe.$$scope={dirty:_,ctx:f}),XC.$set(cxe);const p6={};_&2&&(p6.$$scope={dirty:_,ctx:f}),i5.$set(p6);const fxe={};_&2&&(fxe.$$scope={dirty:_,ctx:f}),c5.$set(fxe);const mxe={};_&2&&(mxe.$$scope={dirty:_,ctx:f}),g5.$set(mxe);const u6={};_&2&&(u6.$$scope={dirty:_,ctx:f}),p5.$set(u6);const gxe={};_&2&&(gxe.$$scope={dirty:_,ctx:f}),_5.$set(gxe);const hxe={};_&2&&(hxe.$$scope={dirty:_,ctx:f}),v5.$set(hxe);const _6={};_&2&&(_6.$$scope={dirty:_,ctx:f}),D5.$set(_6);const pxe={};_&2&&(pxe.$$scope={dirty:_,ctx:f}),O5.$set(pxe);const uxe={};_&2&&(uxe.$$scope={dirty:_,ctx:f}),d0.$set(uxe);const b6={};_&2&&(b6.$$scope={dirty:_,ctx:f}),f0.$set(b6);const _xe={};_&2&&(_xe.$$scope={dirty:_,ctx:f}),g0.$set(_xe);const bxe={};_&2&&(bxe.$$scope={dirty:_,ctx:f}),p0.$set(bxe);const v6={};_&2&&(v6.$$scope={dirty:_,ctx:f}),_0.$set(v6);const vxe={};_&2&&(vxe.$$scope={dirty:_,ctx:f}),v0.$set(vxe);const Fxe={};_&2&&(Fxe.$$scope={dirty:_,ctx:f}),W0.$set(Fxe);const F6={};_&2&&(F6.$$scope={dirty:_,ctx:f}),H0.$set(F6);const Txe={};_&2&&(Txe.$$scope={dirty:_,ctx:f}),sw.$set(Txe);const Mxe={};_&2&&(Mxe.$$scope={dirty:_,ctx:f}),iw.$set(Mxe);const T6={};_&2&&(T6.$$scope={dirty:_,ctx:f}),Mw.$set(T6);const Exe={};_&2&&(Exe.$$scope={dirty:_,ctx:f}),Cw.$set(Exe);const Cxe={};_&2&&(Cxe.$$scope={dirty:_,ctx:f}),Bw.$set(Cxe);const M6={};_&2&&(M6.$$scope={dirty:_,ctx:f}),Nw.$set(M6);const wxe={};_&2&&(wxe.$$scope={dirty:_,ctx:f}),Uw.$set(wxe);const Axe={};_&2&&(Axe.$$scope={dirty:_,ctx:f}),Jw.$set(Axe);const E6={};_&2&&(E6.$$scope={dirty:_,ctx:f}),lA.$set(E6);const yxe={};_&2&&(yxe.$$scope={dirty:_,ctx:f}),dA.$set(yxe);const Lxe={};_&2&&(Lxe.$$scope={dirty:_,ctx:f}),FA.$set(Lxe);const C6={};_&2&&(C6.$$scope={dirty:_,ctx:f}),MA.$set(C6);const xxe={};_&2&&(xxe.$$scope={dirty:_,ctx:f}),kA.$set(xxe);const $xe={};_&2&&($xe.$$scope={dirty:_,ctx:f}),RA.$set($xe);const w6={};_&2&&(w6.$$scope={dirty:_,ctx:f}),OA.$set(w6);const kxe={};_&2&&(kxe.$$scope={dirty:_,ctx:f}),XA.$set(kxe);const Sxe={};_&2&&(Sxe.$$scope={dirty:_,ctx:f}),QA.$set(Sxe);const A6={};_&2&&(A6.$$scope={dirty:_,ctx:f}),UA.$set(A6);const Rxe={};_&2&&(Rxe.$$scope={dirty:_,ctx:f}),YA.$set(Rxe);const Pxe={};_&2&&(Pxe.$$scope={dirty:_,ctx:f}),ZA.$set(Pxe);const y6={};_&2&&(y6.$$scope={dirty:_,ctx:f}),o6.$set(y6)},i(f){HJe||(E(d.$$.fragment,f),E(Va.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(pm.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(kh.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(zL.$$.fragment,f),E(gp.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(eu.$$.fragment,f),E(ou.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(e9.$$.fragment,f),E(t9.$$.fragment,f),E(Cu.$$.fragment,f),E(wu.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(Lu.$$.fragment,f),E(d9.$$.fragment,f),E(N2.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(j2.$$.fragment,f),E(h9.$$.fragment,f),E(P1.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(I1.$$.fragment,f),E(v9.$$.fragment,f),E(Cb.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(Ab.$$.fragment,f),E(C9.$$.fragment,f),E(mv.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(hv.$$.fragment,f),E(x9.$$.fragment,f),E(Bv.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(Nv.$$.fragment,f),E(P9.$$.fragment,f),E(N3.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(j3.$$.fragment,f),E(j9.$$.fragment,f),E(bF.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(FF.$$.fragment,f),E(X9.$$.fragment,f),E(LF.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E($F.$$.fragment,f),E(H9.$$.fragment,f),E(p7.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(_7.$$.fragment,f),E(ex.$$.fragment,f),E(iT.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(cT.$$.fragment,f),E(nx.$$.fragment,f),E(gT.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(pT.$$.fragment,f),E(cx.$$.fragment,f),E(FT.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(MT.$$.fragment,f),E(px.$$.fragment,f),E(qT.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(DT.$$.fragment,f),E(Fx.$$.fragment,f),E(VT.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(zT.$$.fragment,f),E(wx.$$.fragment,f),E(UT.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(JT.$$.fragment,f),E($x.$$.fragment,f),E(ZT.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(o8.$$.fragment,f),E(Bx.$$.fragment,f),E(m8.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(h8.$$.fragment,f),E(Dx.$$.fragment,f),E(T8.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(E8.$$.fragment,f),E(zx.$$.fragment,f),E(B8.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(N8.$$.fragment,f),E(Jx.$$.fragment,f),E(G8.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(V8.$$.fragment,f),E(r$.$$.fragment,f),E(J8.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(K8.$$.fragment,f),E(l$.$$.fragment,f),E(aM.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(sM.$$.fragment,f),E(m$.$$.fragment,f),E(cM.$$.fragment,f),E(h$.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(mM.$$.fragment,f),E(b$.$$.fragment,f),E(pM.$$.fragment,f),E(v$.$$.fragment,f),E(F$.$$.fragment,f),E(M$.$$.fragment,f),E(_M.$$.fragment,f),E(E$.$$.fragment,f),E(CM.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(y$.$$.fragment,f),E(AM.$$.fragment,f),E(L$.$$.fragment,f),E(xM.$$.fragment,f),E(x$.$$.fragment,f),E($$.$$.fragment,f),E(S$.$$.fragment,f),E(kM.$$.fragment,f),E(R$.$$.fragment,f),E(LE.$$.fragment,f),E(P$.$$.fragment,f),E(B$.$$.fragment,f),E(N$.$$.fragment,f),E($E.$$.fragment,f),E(q$.$$.fragment,f),E(e4.$$.fragment,f),E(j$.$$.fragment,f),E(D$.$$.fragment,f),E(O$.$$.fragment,f),E(r4.$$.fragment,f),E(V$.$$.fragment,f),E(u4.$$.fragment,f),E(X$.$$.fragment,f),E(z$.$$.fragment,f),E(W$.$$.fragment,f),E(b4.$$.fragment,f),E(U$.$$.fragment,f),E(A4.$$.fragment,f),E(H$.$$.fragment,f),E(J$.$$.fragment,f),E(K$.$$.fragment,f),E(L4.$$.fragment,f),E(Z$.$$.fragment,f),E(k4.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(R4.$$.fragment,f),E(nk.$$.fragment,f),E(eC.$$.fragment,f),E(sk.$$.fragment,f),E(lk.$$.fragment,f),E(dk.$$.fragment,f),E(rC.$$.fragment,f),E(ck.$$.fragment,f),E(gC.$$.fragment,f),E(fk.$$.fragment,f),E(mk.$$.fragment,f),E(hk.$$.fragment,f),E(pC.$$.fragment,f),E(pk.$$.fragment,f),E(OC.$$.fragment,f),E(uk.$$.fragment,f),E(_k.$$.fragment,f),E(vk.$$.fragment,f),E(XC.$$.fragment,f),E(Fk.$$.fragment,f),E(i5.$$.fragment,f),E(Tk.$$.fragment,f),E(Mk.$$.fragment,f),E(Ck.$$.fragment,f),E(c5.$$.fragment,f),E(wk.$$.fragment,f),E(g5.$$.fragment,f),E(yk.$$.fragment,f),E(Lk.$$.fragment,f),E($k.$$.fragment,f),E(p5.$$.fragment,f),E(kk.$$.fragment,f),E(_5.$$.fragment,f),E(Sk.$$.fragment,f),E(Rk.$$.fragment,f),E(Bk.$$.fragment,f),E(v5.$$.fragment,f),E(Ik.$$.fragment,f),E(D5.$$.fragment,f),E(Nk.$$.fragment,f),E(qk.$$.fragment,f),E(Dk.$$.fragment,f),E(O5.$$.fragment,f),E(Gk.$$.fragment,f),E(d0.$$.fragment,f),E(Ok.$$.fragment,f),E(Vk.$$.fragment,f),E(zk.$$.fragment,f),E(f0.$$.fragment,f),E(Qk.$$.fragment,f),E(g0.$$.fragment,f),E(Wk.$$.fragment,f),E(Uk.$$.fragment,f),E(Jk.$$.fragment,f),E(p0.$$.fragment,f),E(Yk.$$.fragment,f),E(_0.$$.fragment,f),E(Kk.$$.fragment,f),E(Zk.$$.fragment,f),E(oS.$$.fragment,f),E(v0.$$.fragment,f),E(rS.$$.fragment,f),E(W0.$$.fragment,f),E(tS.$$.fragment,f),E(aS.$$.fragment,f),E(sS.$$.fragment,f),E(H0.$$.fragment,f),E(lS.$$.fragment,f),E(sw.$$.fragment,f),E(iS.$$.fragment,f),E(dS.$$.fragment,f),E(fS.$$.fragment,f),E(iw.$$.fragment,f),E(mS.$$.fragment,f),E(Mw.$$.fragment,f),E(gS.$$.fragment,f),E(hS.$$.fragment,f),E(uS.$$.fragment,f),E(Cw.$$.fragment,f),E(_S.$$.fragment,f),E(Bw.$$.fragment,f),E(bS.$$.fragment,f),E(vS.$$.fragment,f),E(TS.$$.fragment,f),E(Nw.$$.fragment,f),E(MS.$$.fragment,f),E(Uw.$$.fragment,f),E(ES.$$.fragment,f),E(CS.$$.fragment,f),E(AS.$$.fragment,f),E(Jw.$$.fragment,f),E(yS.$$.fragment,f),E(lA.$$.fragment,f),E(LS.$$.fragment,f),E(xS.$$.fragment,f),E(kS.$$.fragment,f),E(dA.$$.fragment,f),E(SS.$$.fragment,f),E(FA.$$.fragment,f),E(RS.$$.fragment,f),E(PS.$$.fragment,f),E(IS.$$.fragment,f),E(MA.$$.fragment,f),E(NS.$$.fragment,f),E(kA.$$.fragment,f),E(qS.$$.fragment,f),E(jS.$$.fragment,f),E(GS.$$.fragment,f),E(RA.$$.fragment,f),E(OS.$$.fragment,f),E(OA.$$.fragment,f),E(VS.$$.fragment,f),E(XS.$$.fragment,f),E(QS.$$.fragment,f),E(XA.$$.fragment,f),E(WS.$$.fragment,f),E(QA.$$.fragment,f),E(US.$$.fragment,f),E(HS.$$.fragment,f),E(YS.$$.fragment,f),E(UA.$$.fragment,f),E(KS.$$.fragment,f),E(YA.$$.fragment,f),E(eR.$$.fragment,f),E(oR.$$.fragment,f),E(tR.$$.fragment,f),E(ZA.$$.fragment,f),E(aR.$$.fragment,f),E(o6.$$.fragment,f),HJe=!0)},o(f){C(d.$$.fragment,f),C(Va.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(pm.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(kh.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(zL.$$.fragment,f),C(gp.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(eu.$$.fragment,f),C(ou.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(e9.$$.fragment,f),C(t9.$$.fragment,f),C(Cu.$$.fragment,f),C(wu.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(Lu.$$.fragment,f),C(d9.$$.fragment,f),C(N2.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(j2.$$.fragment,f),C(h9.$$.fragment,f),C(P1.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(I1.$$.fragment,f),C(v9.$$.fragment,f),C(Cb.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(Ab.$$.fragment,f),C(C9.$$.fragment,f),C(mv.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(hv.$$.fragment,f),C(x9.$$.fragment,f),C(Bv.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(Nv.$$.fragment,f),C(P9.$$.fragment,f),C(N3.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(j3.$$.fragment,f),C(j9.$$.fragment,f),C(bF.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(FF.$$.fragment,f),C(X9.$$.fragment,f),C(LF.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C($F.$$.fragment,f),C(H9.$$.fragment,f),C(p7.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(_7.$$.fragment,f),C(ex.$$.fragment,f),C(iT.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(cT.$$.fragment,f),C(nx.$$.fragment,f),C(gT.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(pT.$$.fragment,f),C(cx.$$.fragment,f),C(FT.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(MT.$$.fragment,f),C(px.$$.fragment,f),C(qT.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(DT.$$.fragment,f),C(Fx.$$.fragment,f),C(VT.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(zT.$$.fragment,f),C(wx.$$.fragment,f),C(UT.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(JT.$$.fragment,f),C($x.$$.fragment,f),C(ZT.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(o8.$$.fragment,f),C(Bx.$$.fragment,f),C(m8.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(h8.$$.fragment,f),C(Dx.$$.fragment,f),C(T8.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(E8.$$.fragment,f),C(zx.$$.fragment,f),C(B8.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(N8.$$.fragment,f),C(Jx.$$.fragment,f),C(G8.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(V8.$$.fragment,f),C(r$.$$.fragment,f),C(J8.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(K8.$$.fragment,f),C(l$.$$.fragment,f),C(aM.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(sM.$$.fragment,f),C(m$.$$.fragment,f),C(cM.$$.fragment,f),C(h$.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(mM.$$.fragment,f),C(b$.$$.fragment,f),C(pM.$$.fragment,f),C(v$.$$.fragment,f),C(F$.$$.fragment,f),C(M$.$$.fragment,f),C(_M.$$.fragment,f),C(E$.$$.fragment,f),C(CM.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(y$.$$.fragment,f),C(AM.$$.fragment,f),C(L$.$$.fragment,f),C(xM.$$.fragment,f),C(x$.$$.fragment,f),C($$.$$.fragment,f),C(S$.$$.fragment,f),C(kM.$$.fragment,f),C(R$.$$.fragment,f),C(LE.$$.fragment,f),C(P$.$$.fragment,f),C(B$.$$.fragment,f),C(N$.$$.fragment,f),C($E.$$.fragment,f),C(q$.$$.fragment,f),C(e4.$$.fragment,f),C(j$.$$.fragment,f),C(D$.$$.fragment,f),C(O$.$$.fragment,f),C(r4.$$.fragment,f),C(V$.$$.fragment,f),C(u4.$$.fragment,f),C(X$.$$.fragment,f),C(z$.$$.fragment,f),C(W$.$$.fragment,f),C(b4.$$.fragment,f),C(U$.$$.fragment,f),C(A4.$$.fragment,f),C(H$.$$.fragment,f),C(J$.$$.fragment,f),C(K$.$$.fragment,f),C(L4.$$.fragment,f),C(Z$.$$.fragment,f),C(k4.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(R4.$$.fragment,f),C(nk.$$.fragment,f),C(eC.$$.fragment,f),C(sk.$$.fragment,f),C(lk.$$.fragment,f),C(dk.$$.fragment,f),C(rC.$$.fragment,f),C(ck.$$.fragment,f),C(gC.$$.fragment,f),C(fk.$$.fragment,f),C(mk.$$.fragment,f),C(hk.$$.fragment,f),C(pC.$$.fragment,f),C(pk.$$.fragment,f),C(OC.$$.fragment,f),C(uk.$$.fragment,f),C(_k.$$.fragment,f),C(vk.$$.fragment,f),C(XC.$$.fragment,f),C(Fk.$$.fragment,f),C(i5.$$.fragment,f),C(Tk.$$.fragment,f),C(Mk.$$.fragment,f),C(Ck.$$.fragment,f),C(c5.$$.fragment,f),C(wk.$$.fragment,f),C(g5.$$.fragment,f),C(yk.$$.fragment,f),C(Lk.$$.fragment,f),C($k.$$.fragment,f),C(p5.$$.fragment,f),C(kk.$$.fragment,f),C(_5.$$.fragment,f),C(Sk.$$.fragment,f),C(Rk.$$.fragment,f),C(Bk.$$.fragment,f),C(v5.$$.fragment,f),C(Ik.$$.fragment,f),C(D5.$$.fragment,f),C(Nk.$$.fragment,f),C(qk.$$.fragment,f),C(Dk.$$.fragment,f),C(O5.$$.fragment,f),C(Gk.$$.fragment,f),C(d0.$$.fragment,f),C(Ok.$$.fragment,f),C(Vk.$$.fragment,f),C(zk.$$.fragment,f),C(f0.$$.fragment,f),C(Qk.$$.fragment,f),C(g0.$$.fragment,f),C(Wk.$$.fragment,f),C(Uk.$$.fragment,f),C(Jk.$$.fragment,f),C(p0.$$.fragment,f),C(Yk.$$.fragment,f),C(_0.$$.fragment,f),C(Kk.$$.fragment,f),C(Zk.$$.fragment,f),C(oS.$$.fragment,f),C(v0.$$.fragment,f),C(rS.$$.fragment,f),C(W0.$$.fragment,f),C(tS.$$.fragment,f),C(aS.$$.fragment,f),C(sS.$$.fragment,f),C(H0.$$.fragment,f),C(lS.$$.fragment,f),C(sw.$$.fragment,f),C(iS.$$.fragment,f),C(dS.$$.fragment,f),C(fS.$$.fragment,f),C(iw.$$.fragment,f),C(mS.$$.fragment,f),C(Mw.$$.fragment,f),C(gS.$$.fragment,f),C(hS.$$.fragment,f),C(uS.$$.fragment,f),C(Cw.$$.fragment,f),C(_S.$$.fragment,f),C(Bw.$$.fragment,f),C(bS.$$.fragment,f),C(vS.$$.fragment,f),C(TS.$$.fragment,f),C(Nw.$$.fragment,f),C(MS.$$.fragment,f),C(Uw.$$.fragment,f),C(ES.$$.fragment,f),C(CS.$$.fragment,f),C(AS.$$.fragment,f),C(Jw.$$.fragment,f),C(yS.$$.fragment,f),C(lA.$$.fragment,f),C(LS.$$.fragment,f),C(xS.$$.fragment,f),C(kS.$$.fragment,f),C(dA.$$.fragment,f),C(SS.$$.fragment,f),C(FA.$$.fragment,f),C(RS.$$.fragment,f),C(PS.$$.fragment,f),C(IS.$$.fragment,f),C(MA.$$.fragment,f),C(NS.$$.fragment,f),C(kA.$$.fragment,f),C(qS.$$.fragment,f),C(jS.$$.fragment,f),C(GS.$$.fragment,f),C(RA.$$.fragment,f),C(OS.$$.fragment,f),C(OA.$$.fragment,f),C(VS.$$.fragment,f),C(XS.$$.fragment,f),C(QS.$$.fragment,f),C(XA.$$.fragment,f),C(WS.$$.fragment,f),C(QA.$$.fragment,f),C(US.$$.fragment,f),C(HS.$$.fragment,f),C(YS.$$.fragment,f),C(UA.$$.fragment,f),C(KS.$$.fragment,f),C(YA.$$.fragment,f),C(eR.$$.fragment,f),C(oR.$$.fragment,f),C(tR.$$.fragment,f),C(ZA.$$.fragment,f),C(aR.$$.fragment,f),C(o6.$$.fragment,f),HJe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(cm),f&&t(gt),f&&t(Oe),f&&t(We),f&&t(mm),w(Va,f),f&&t(Ue),f&&t(Ae),f&&t(Lo),f&&t(Xa),f&&t(qUe),f&&t(od),w(RL),f&&t(jUe),f&&t(Zn),f&&t(DUe),w(PL,f),f&&t(GUe),f&&t(RP),f&&t(OUe),w(pm,f),f&&t(VUe),f&&t(rd),w(BL),f&&t(XUe),f&&t(xo),w(IL),w(jL),w(kh),w(DL),f&&t(zUe),f&&t(ad),w(GL),f&&t(QUe),f&&t($o),w(OL),w(zL),w(gp),w(QL),f&&t(WUe),f&&t(nd),w(WL),f&&t(UUe),f&&t(ko),w(UL),w(YL),w(eu),w(ou),w(KL),f&&t(HUe),f&&t(sd),w(ZL),f&&t(JUe),f&&t(So),w(e9),w(t9),w(Cu),w(wu),w(a9),f&&t(YUe),f&&t(id),w(n9),f&&t(KUe),f&&t(Ro),w(s9),w(i9),w(Lu),w(d9),w(N2),f&&t(ZUe),f&&t(fd),w(c9),f&&t(eHe),f&&t(Po),w(f9),w(g9),w(j2),w(h9),w(P1),f&&t(oHe),f&&t(hd),w(p9),f&&t(rHe),f&&t(Bo),w(u9),w(b9),w(I1),w(v9),w(Cb),f&&t(tHe),f&&t(_d),w(F9),f&&t(aHe),f&&t(Io),w(T9),w(E9),w(Ab),w(C9),w(mv),f&&t(nHe),f&&t(Fd),w(w9),f&&t(sHe),f&&t(No),w(A9),w(L9),w(hv),w(x9),w(Bv),f&&t(lHe),f&&t(Ed),w($9),f&&t(iHe),f&&t(qo),w(k9),w(R9),w(Nv),w(P9),w(N3),f&&t(dHe),f&&t(Ad),w(B9),f&&t(cHe),f&&t(jo),w(I9),w(q9),w(j3),w(j9),w(bF),f&&t(fHe),f&&t(xd),w(D9),f&&t(mHe),f&&t(Do),w(G9),w(V9),w(FF),w(X9),w(LF),f&&t(gHe),f&&t(Sd),w(z9),f&&t(hHe),f&&t(Oo),w(Q9),w(U9),w($F),w(H9),w(p7),f&&t(pHe),f&&t(Bd),w(J9),f&&t(uHe),f&&t(Vo),w(Y9),w(Z9),w(_7),w(ex),w(iT),f&&t(_He),f&&t(qd),w(ox),f&&t(bHe),f&&t(Xo),w(rx),w(ax),w(cT),w(nx),w(gT),f&&t(vHe),f&&t(Gd),w(sx),f&&t(FHe),f&&t(zo),w(lx),w(dx),w(pT),w(cx),w(FT),f&&t(THe),f&&t(zd),w(fx),f&&t(MHe),f&&t(Qo),w(mx),w(hx),w(MT),w(px),w(qT),f&&t(EHe),f&&t(Ud),w(ux),f&&t(CHe),f&&t(Wo),w(_x),w(vx),w(DT),w(Fx),w(VT),f&&t(wHe),f&&t(Yd),w(Tx),f&&t(AHe),f&&t(Uo),w(Mx),w(Cx),w(zT),w(wx),w(UT),f&&t(yHe),f&&t(ec),w(Ax),f&&t(LHe),f&&t(Ho),w(yx),w(xx),w(JT),w($x),w(ZT),f&&t(xHe),f&&t(tc),w(kx),f&&t($He),f&&t(Jo),w(Sx),w(Px),w(o8),w(Bx),w(m8),f&&t(kHe),f&&t(sc),w(Ix),f&&t(SHe),f&&t(Yo),w(Nx),w(jx),w(h8),w(Dx),w(T8),f&&t(RHe),f&&t(dc),w(Gx),f&&t(PHe),f&&t(Ko),w(Ox),w(Xx),w(E8),w(zx),w(B8),f&&t(BHe),f&&t(mc),w(Qx),f&&t(IHe),f&&t(Zo),w(Wx),w(Hx),w(N8),w(Jx),w(G8),f&&t(NHe),f&&t(pc),w(Kx),f&&t(qHe),f&&t(er),w(Zx),w(o$),w(V8),w(r$),w(J8),f&&t(jHe),f&&t(bc),w(t$),f&&t(DHe),f&&t(or),w(a$),w(s$),w(K8),w(l$),w(aM),f&&t(GHe),f&&t(Tc),w(i$),f&&t(OHe),f&&t(rr),w(d$),w(f$),w(sM),w(m$),w(cM),f&&t(VHe),f&&t(Cc),w(h$),f&&t(XHe),f&&t(tr),w(p$),w(_$),w(mM),w(b$),w(pM),f&&t(zHe),f&&t(yc),w(v$),f&&t(QHe),f&&t(ar),w(F$),w(M$),w(_M),w(E$),w(CM),f&&t(WHe),f&&t($c),w(C$),f&&t(UHe),f&&t(nr),w(w$),w(y$),w(AM),w(L$),w(xM),f&&t(HHe),f&&t(Rc),w(x$),f&&t(JHe),f&&t(sr),w($$),w(S$),w(kM),w(R$),w(LE),f&&t(YHe),f&&t(Ic),w(P$),f&&t(KHe),f&&t(lr),w(B$),w(N$),w($E),w(q$),w(e4),f&&t(ZHe),f&&t(jc),w(j$),f&&t(eJe),f&&t(ir),w(D$),w(O$),w(r4),w(V$),w(u4),f&&t(oJe),f&&t(Oc),w(X$),f&&t(rJe),f&&t(dr),w(z$),w(W$),w(b4),w(U$),w(A4),f&&t(tJe),f&&t(zc),w(H$),f&&t(aJe),f&&t(cr),w(J$),w(K$),w(L4),w(Z$),w(k4),f&&t(nJe),f&&t(Uc),w(ok),f&&t(sJe),f&&t(fr),w(rk),w(ak),w(R4),w(nk),w(eC),f&&t(lJe),f&&t(Yc),w(sk),f&&t(iJe),f&&t(mr),w(lk),w(dk),w(rC),w(ck),w(gC),f&&t(dJe),f&&t(ef),w(fk),f&&t(cJe),f&&t(gr),w(mk),w(hk),w(pC),w(pk),w(OC),f&&t(fJe),f&&t(tf),w(uk),f&&t(mJe),f&&t(hr),w(_k),w(vk),w(XC),w(Fk),w(i5),f&&t(gJe),f&&t(sf),w(Tk),f&&t(hJe),f&&t(pr),w(Mk),w(Ck),w(c5),w(wk),w(g5),f&&t(pJe),f&&t(cf),w(yk),f&&t(uJe),f&&t(ur),w(Lk),w($k),w(p5),w(kk),w(_5),f&&t(_Je),f&&t(gf),w(Sk),f&&t(bJe),f&&t(_r),w(Rk),w(Bk),w(v5),w(Ik),w(D5),f&&t(vJe),f&&t(uf),w(Nk),f&&t(FJe),f&&t(br),w(qk),w(Dk),w(O5),w(Gk),w(d0),f&&t(TJe),f&&t(vf),w(Ok),f&&t(MJe),f&&t(vr),w(Vk),w(zk),w(f0),w(Qk),w(g0),f&&t(EJe),f&&t(Mf),w(Wk),f&&t(CJe),f&&t(Fr),w(Uk),w(Jk),w(p0),w(Yk),w(_0),f&&t(wJe),f&&t(wf),w(Kk),f&&t(AJe),f&&t(Tr),w(Zk),w(oS),w(v0),w(rS),w(W0),f&&t(yJe),f&&t(Lf),w(tS),f&&t(LJe),f&&t(Mr),w(aS),w(sS),w(H0),w(lS),w(sw),f&&t(xJe),f&&t(kf),w(iS),f&&t($Je),f&&t(Er),w(dS),w(fS),w(iw),w(mS),w(Mw),f&&t(kJe),f&&t(Pf),w(gS),f&&t(SJe),f&&t(Cr),w(hS),w(uS),w(Cw),w(_S),w(Bw),f&&t(RJe),f&&t(Nf),w(bS),f&&t(PJe),f&&t(wr),w(vS),w(TS),w(Nw),w(MS),w(Uw),f&&t(BJe),f&&t(Df),w(ES),f&&t(IJe),f&&t(Ar),w(CS),w(AS),w(Jw),w(yS),w(lA),f&&t(NJe),f&&t(Vf),w(LS),f&&t(qJe),f&&t(yr),w(xS),w(kS),w(dA),w(SS),w(FA),f&&t(jJe),f&&t(Qf),w(RS),f&&t(DJe),f&&t(Lr),w(PS),w(IS),w(MA),w(NS),w(kA),f&&t(GJe),f&&t(Hf),w(qS),f&&t(OJe),f&&t(xr),w(jS),w(GS),w(RA),w(OS),w(OA),f&&t(VJe),f&&t(Kf),w(VS),f&&t(XJe),f&&t($r),w(XS),w(QS),w(XA),w(WS),w(QA),f&&t(zJe),f&&t(om),w(US),f&&t(QJe),f&&t(kr),w(HS),w(YS),w(UA),w(KS),w(YA),f&&t(WJe),f&&t(am),w(eR),f&&t(UJe),f&&t(Sr),w(oR),w(tR),w(ZA),w(aR),w(o6)}}}const mla={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function gla($){return nna(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fla extends ona{constructor(g){super();rna(this,g,gla,fla,tna,{})}}export{Fla as default,mla as metadata};
